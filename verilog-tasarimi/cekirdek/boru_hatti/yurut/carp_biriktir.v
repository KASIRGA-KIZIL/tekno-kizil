// Note: The license below is based on the template at:
// http://opensource.org/licenses/BSD-3-Clause
// Copyright (C) 2020 Regents of the University of Texas
//All rights reserved.

// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:

// o Redistributions of source code must retain the above copyright
//   notice, this list of conditions and the following disclaimer.

// o Redistributions in binary form must reproduce the above copyright
//   notice, this list of conditions and the following disclaimer in the
//   documentation and/or other materials provided with the distribution.

// o Neither the name of the copyright holders nor the names of its
//   contributors may be used to endorse or promote products derived
//   from this software without specific prior written permission.

// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Original Author(s):
// Mertcan Temel         <mert@utexas.edu>

// DO NOT REMOVE:
// This file is generated by Temel's multiplier generator. Download from https://github.com/temelmertcan/multgen.

`timescale 1ns / 1ps


module carp_biriktir(
    input wire clk_i,
    input wire rst_i,
    input wire durdur_i,
    input wire [32:0] IN1,
    input wire [32:0] IN2,
    output reg [66:0] result);
wire [66:0] m1_0;
wire [66:0] m1_1;
DT_SB4_33x33_67 m1 (IN1[32:0], IN2[32:0], m1_0, m1_1);


reg [32:0] IN3;
// Dadda Summation Stage 1
wire s0 ,c0;
ha ha0 (m1_0[32], m1_1[32], s0, c0);

// Dadda Summation Stage 2
wire s1 ,c1;
ha ha1 (m1_0[0], m1_1[0], s1, c1);
wire s2 ,c2;
ha ha2 (m1_0[1], IN3[1], s2, c2);
wire s3 ,c3;
fa fa3 (m1_0[2], m1_1[2], IN3[2], s3, c3);
wire s4 ,c4;
fa fa4 (m1_0[3], m1_1[3], IN3[3], s4, c4);
wire s5 ,c5;
fa fa5 (m1_0[4], m1_1[4], IN3[4], s5, c5);
wire s6 ,c6;
fa fa6 (m1_0[5], m1_1[5], IN3[5], s6, c6);
wire s7 ,c7;
fa fa7 (m1_0[6], m1_1[6], IN3[6], s7, c7);
wire s8 ,c8;
fa fa8 (m1_0[7], m1_1[7], IN3[7], s8, c8);
wire s9 ,c9;
fa fa9 (m1_0[8], m1_1[8], IN3[8], s9, c9);
wire s10 ,c10;
fa fa10 (m1_0[9], m1_1[9], IN3[9], s10, c10);
wire s11 ,c11;
fa fa11 (m1_0[10], m1_1[10], IN3[10], s11, c11);
wire s12 ,c12;
fa fa12 (m1_0[11], m1_1[11], IN3[11], s12, c12);
wire s13 ,c13;
fa fa13 (m1_0[12], m1_1[12], IN3[12], s13, c13);
wire s14 ,c14;
fa fa14 (m1_0[13], m1_1[13], IN3[13], s14, c14);
wire s15 ,c15;
fa fa15 (m1_0[14], m1_1[14], IN3[14], s15, c15);
wire s16 ,c16;
fa fa16 (m1_0[15], m1_1[15], IN3[15], s16, c16);
wire s17 ,c17;
fa fa17 (m1_0[16], m1_1[16], IN3[16], s17, c17);
wire s18 ,c18;
fa fa18 (m1_0[17], m1_1[17], IN3[17], s18, c18);
wire s19 ,c19;
fa fa19 (m1_0[18], m1_1[18], IN3[18], s19, c19);
wire s20 ,c20;
fa fa20 (m1_0[19], m1_1[19], IN3[19], s20, c20);
wire s21 ,c21;
fa fa21 (m1_0[20], m1_1[20], IN3[20], s21, c21);
wire s22 ,c22;
fa fa22 (m1_0[21], m1_1[21], IN3[21], s22, c22);
wire s23 ,c23;
fa fa23 (m1_0[22], m1_1[22], IN3[22], s23, c23);
wire s24 ,c24;
fa fa24 (m1_0[23], m1_1[23], IN3[23], s24, c24);
wire s25 ,c25;
fa fa25 (m1_0[24], m1_1[24], IN3[24], s25, c25);
wire s26 ,c26;
fa fa26 (m1_0[25], m1_1[25], IN3[25], s26, c26);
wire s27 ,c27;
fa fa27 (m1_0[26], m1_1[26], IN3[26], s27, c27);
wire s28 ,c28;
fa fa28 (m1_0[27], m1_1[27], IN3[27], s28, c28);
wire s29 ,c29;
fa fa29 (m1_0[28], m1_1[28], IN3[28], s29, c29);
wire s30 ,c30;
fa fa30 (m1_0[29], m1_1[29], IN3[29], s30, c30);
wire s31 ,c31;
fa fa31 (m1_0[30], m1_1[30], IN3[30], s31, c31);
wire s32 ,c32;
fa fa32 (m1_0[31], m1_1[31], IN3[31], s32, c32);
wire s33 ,c33;
fa fa33 (~IN3[32], 1'b1, s0, s33, c33);
wire s34 ,c34;
fa fa34 (m1_0[33], m1_1[33], c0, s34, c34);
wire s35 ,c35;
fa fa35 (m1_0[34], m1_1[34], 1'b1, s35, c35);
wire s36 ,c36;
ha ha36 (m1_0[35], m1_1[35], s36, c36);
wire s37 ,c37;
fa fa37 (m1_0[36], m1_1[36], 1'b1, s37, c37);
wire s38 ,c38;
ha ha38 (m1_0[37], m1_1[37], s38, c38);
wire s39 ,c39;
fa fa39 (m1_0[38], m1_1[38], 1'b1, s39, c39);
wire s40 ,c40;
ha ha40 (m1_0[39], m1_1[39], s40, c40);
wire s41 ,c41;
fa fa41 (m1_0[40], m1_1[40], 1'b1, s41, c41);
wire s42 ,c42;
ha ha42 (m1_0[41], m1_1[41], s42, c42);
wire s43 ,c43;
fa fa43 (m1_0[42], m1_1[42], 1'b1, s43, c43);
wire s44 ,c44;
ha ha44 (m1_0[43], m1_1[43], s44, c44);
wire s45 ,c45;
fa fa45 (m1_0[44], m1_1[44], 1'b1, s45, c45);
wire s46 ,c46;
ha ha46 (m1_0[45], m1_1[45], s46, c46);
wire s47 ,c47;
fa fa47 (m1_0[46], m1_1[46], 1'b1, s47, c47);
wire s48 ,c48;
ha ha48 (m1_0[47], m1_1[47], s48, c48);
wire s49 ,c49;
fa fa49 (m1_0[48], m1_1[48], 1'b1, s49, c49);
wire s50 ,c50;
ha ha50 (m1_0[49], m1_1[49], s50, c50);
wire s51 ,c51;
fa fa51 (m1_0[50], m1_1[50], 1'b1, s51, c51);
wire s52 ,c52;
ha ha52 (m1_0[51], m1_1[51], s52, c52);
wire s53 ,c53;
fa fa53 (m1_0[52], m1_1[52], 1'b1, s53, c53);
wire s54 ,c54;
ha ha54 (m1_0[53], m1_1[53], s54, c54);
wire s55 ,c55;
fa fa55 (m1_0[54], m1_1[54], 1'b1, s55, c55);
wire s56 ,c56;
ha ha56 (m1_0[55], m1_1[55], s56, c56);
wire s57 ,c57;
fa fa57 (m1_0[56], m1_1[56], 1'b1, s57, c57);
wire s58 ,c58;
ha ha58 (m1_0[57], m1_1[57], s58, c58);
wire s59 ,c59;
fa fa59 (m1_0[58], m1_1[58], 1'b1, s59, c59);
wire s60 ,c60;
ha ha60 (m1_0[59], m1_1[59], s60, c60);
wire s61 ,c61;
fa fa61 (m1_0[60], m1_1[60], 1'b1, s61, c61);
wire s62 ,c62;
ha ha62 (m1_0[61], m1_1[61], s62, c62);
wire s63 ,c63;
fa fa63 (m1_0[62], m1_1[62], 1'b1, s63, c63);
wire s64 ,c64;
ha ha64 (m1_0[63], m1_1[63], s64, c64);
wire s65 ,c65;
fa fa65 (m1_0[64], m1_1[64], 1'b1, s65, c65);

wire [67:0] adder_result;
KS_67 final_adder ({1'b1, m1_0[65], c64, c63, c62, c61, c60, c59, c58, c57, c56, c55, c54, c53, c52, c51, c50, c49, c48, c47, c46, c45, c44, c43, c42, c41, c40, c39, c38, c37, c36, c35, c34, c33, c32, c31, c30, c29, c28, c27, c26, c25, c24, c23, c22, c21, c20, c19, c18, c17, c16, c15, c14, c13, c12, c11, c10, c9, c8, c7, c6, c5, c4, c3, c2, c1, IN3[0] }, {1'b0, c65, s65, s64, s63, s62, s61, s60, s59, s58, s57, s56, s55, s54, s53, s52, s51, s50, s49, s48, s47, s46, s45, s44, s43, s42, s41, s40, s39, s38, s37, s36, s35, s34, s33, s32, s31, s30, s29, s28, s27, s26, s25, s24, s23, s22, s21, s20, s19, s18, s17, s16, s15, s14, s13, s12, s11, s10, s9, s8, s7, s6, s5, s4, s3, s2, s1 }, adder_result );
always @(posedge clk_i) begin
    if(rst_i)begin
        IN3 <= 33'b0;
    end else begin
        IN3 <= adder_result[32:0];
    end
    if(!durdur_i)
        result <= adder_result[66:0];
end

endmodule



module DT_SB4_33x33_67(
    input wire [32:0] IN1,
    input wire [32:0] IN2,
    output wire [66:0] result0,
    output wire [66:0] result1);


// Creating Partial Products

wire [32:0] mult = IN1;
wire [32:0] mcand = IN2;
wire [33:0] mcand_1x;
wire [33:0] mcand_2x;
assign mcand_1x = {{1{mcand[32]}},  mcand};
assign mcand_2x = {{0{mcand[32]}},  mcand, 1'b0}; // [TODO] 0 BOYUTLU WTF

// Booth Radix-4 Partial Products. Multiplier selectors: mult[1] mult[0] 1'b0
wire select_e_0, select_2x_0, tcomp0, select_ne_0, select_n2x_0;
assign select_e_0 = ((~ mult[1]) & (mult[0] ^ 1'b0));
assign select_ne_0 = mult[1] &  (mult[0] ^ 1'b0);
assign select_2x_0 = (~ mult[1]) & mult[0] & 1'b0;
assign select_n2x_0 = mult[1] & (~ mult[0]) & (~ 1'b0);
wire [33:0] pp_0;
assign pp_0 = (1<<33) ^ // flip the MSB
               ((select_e_0 ? mcand_1x : 0) |
                (select_2x_0 ? mcand_2x : 0) |
                (select_n2x_0 ? (~ mcand_2x) : 0) |
                (select_ne_0 ? (~ mcand_1x) : 0));
assign tcomp0 =  select_n2x_0 | select_ne_0;

// Booth Radix-4 Partial Products. Multiplier selectors: mult[3] mult[2] mult[1]
wire select_e_1, select_2x_1, tcomp1, select_ne_1, select_n2x_1;
assign select_e_1 = ((~ mult[3]) & (mult[2] ^ mult[1]));
assign select_ne_1 = mult[3] &  (mult[2] ^ mult[1]);
assign select_2x_1 = (~ mult[3]) & mult[2] & mult[1];
assign select_n2x_1 = mult[3] & (~ mult[2]) & (~ mult[1]);
wire [33:0] pp_1;
assign pp_1 = (1<<33) ^ // flip the MSB
               ((select_e_1 ? mcand_1x : 0) |
                (select_2x_1 ? mcand_2x : 0) |
                (select_n2x_1 ? (~ mcand_2x) : 0) |
                (select_ne_1 ? (~ mcand_1x) : 0));
assign tcomp1 =  select_n2x_1 | select_ne_1;

// Booth Radix-4 Partial Products. Multiplier selectors: mult[5] mult[4] mult[3]
wire select_e_2, select_2x_2, tcomp2, select_ne_2, select_n2x_2;
assign select_e_2 = ((~ mult[5]) & (mult[4] ^ mult[3]));
assign select_ne_2 = mult[5] &  (mult[4] ^ mult[3]);
assign select_2x_2 = (~ mult[5]) & mult[4] & mult[3];
assign select_n2x_2 = mult[5] & (~ mult[4]) & (~ mult[3]);
wire [33:0] pp_2;
assign pp_2 = (1<<33) ^ // flip the MSB
               ((select_e_2 ? mcand_1x : 0) |
                (select_2x_2 ? mcand_2x : 0) |
                (select_n2x_2 ? (~ mcand_2x) : 0) |
                (select_ne_2 ? (~ mcand_1x) : 0));
assign tcomp2 =  select_n2x_2 | select_ne_2;

// Booth Radix-4 Partial Products. Multiplier selectors: mult[7] mult[6] mult[5]
wire select_e_3, select_2x_3, tcomp3, select_ne_3, select_n2x_3;
assign select_e_3 = ((~ mult[7]) & (mult[6] ^ mult[5]));
assign select_ne_3 = mult[7] &  (mult[6] ^ mult[5]);
assign select_2x_3 = (~ mult[7]) & mult[6] & mult[5];
assign select_n2x_3 = mult[7] & (~ mult[6]) & (~ mult[5]);
wire [33:0] pp_3;
assign pp_3 = (1<<33) ^ // flip the MSB
               ((select_e_3 ? mcand_1x : 0) |
                (select_2x_3 ? mcand_2x : 0) |
                (select_n2x_3 ? (~ mcand_2x) : 0) |
                (select_ne_3 ? (~ mcand_1x) : 0));
assign tcomp3 =  select_n2x_3 | select_ne_3;

// Booth Radix-4 Partial Products. Multiplier selectors: mult[9] mult[8] mult[7]
wire select_e_4, select_2x_4, tcomp4, select_ne_4, select_n2x_4;
assign select_e_4 = ((~ mult[9]) & (mult[8] ^ mult[7]));
assign select_ne_4 = mult[9] &  (mult[8] ^ mult[7]);
assign select_2x_4 = (~ mult[9]) & mult[8] & mult[7];
assign select_n2x_4 = mult[9] & (~ mult[8]) & (~ mult[7]);
wire [33:0] pp_4;
assign pp_4 = (1<<33) ^ // flip the MSB
               ((select_e_4 ? mcand_1x : 0) |
                (select_2x_4 ? mcand_2x : 0) |
                (select_n2x_4 ? (~ mcand_2x) : 0) |
                (select_ne_4 ? (~ mcand_1x) : 0));
assign tcomp4 =  select_n2x_4 | select_ne_4;

// Booth Radix-4 Partial Products. Multiplier selectors: mult[11] mult[10] mult[9]
wire select_e_5, select_2x_5, tcomp5, select_ne_5, select_n2x_5;
assign select_e_5 = ((~ mult[11]) & (mult[10] ^ mult[9]));
assign select_ne_5 = mult[11] &  (mult[10] ^ mult[9]);
assign select_2x_5 = (~ mult[11]) & mult[10] & mult[9];
assign select_n2x_5 = mult[11] & (~ mult[10]) & (~ mult[9]);
wire [33:0] pp_5;
assign pp_5 = (1<<33) ^ // flip the MSB
               ((select_e_5 ? mcand_1x : 0) |
                (select_2x_5 ? mcand_2x : 0) |
                (select_n2x_5 ? (~ mcand_2x) : 0) |
                (select_ne_5 ? (~ mcand_1x) : 0));
assign tcomp5 =  select_n2x_5 | select_ne_5;

// Booth Radix-4 Partial Products. Multiplier selectors: mult[13] mult[12] mult[11]
wire select_e_6, select_2x_6, tcomp6, select_ne_6, select_n2x_6;
assign select_e_6 = ((~ mult[13]) & (mult[12] ^ mult[11]));
assign select_ne_6 = mult[13] &  (mult[12] ^ mult[11]);
assign select_2x_6 = (~ mult[13]) & mult[12] & mult[11];
assign select_n2x_6 = mult[13] & (~ mult[12]) & (~ mult[11]);
wire [33:0] pp_6;
assign pp_6 = (1<<33) ^ // flip the MSB
               ((select_e_6 ? mcand_1x : 0) |
                (select_2x_6 ? mcand_2x : 0) |
                (select_n2x_6 ? (~ mcand_2x) : 0) |
                (select_ne_6 ? (~ mcand_1x) : 0));
assign tcomp6 =  select_n2x_6 | select_ne_6;

// Booth Radix-4 Partial Products. Multiplier selectors: mult[15] mult[14] mult[13]
wire select_e_7, select_2x_7, tcomp7, select_ne_7, select_n2x_7;
assign select_e_7 = ((~ mult[15]) & (mult[14] ^ mult[13]));
assign select_ne_7 = mult[15] &  (mult[14] ^ mult[13]);
assign select_2x_7 = (~ mult[15]) & mult[14] & mult[13];
assign select_n2x_7 = mult[15] & (~ mult[14]) & (~ mult[13]);
wire [33:0] pp_7;
assign pp_7 = (1<<33) ^ // flip the MSB
               ((select_e_7 ? mcand_1x : 0) |
                (select_2x_7 ? mcand_2x : 0) |
                (select_n2x_7 ? (~ mcand_2x) : 0) |
                (select_ne_7 ? (~ mcand_1x) : 0));
assign tcomp7 =  select_n2x_7 | select_ne_7;

// Booth Radix-4 Partial Products. Multiplier selectors: mult[17] mult[16] mult[15]
wire select_e_8, select_2x_8, tcomp8, select_ne_8, select_n2x_8;
assign select_e_8 = ((~ mult[17]) & (mult[16] ^ mult[15]));
assign select_ne_8 = mult[17] &  (mult[16] ^ mult[15]);
assign select_2x_8 = (~ mult[17]) & mult[16] & mult[15];
assign select_n2x_8 = mult[17] & (~ mult[16]) & (~ mult[15]);
wire [33:0] pp_8;
assign pp_8 = (1<<33) ^ // flip the MSB
               ((select_e_8 ? mcand_1x : 0) |
                (select_2x_8 ? mcand_2x : 0) |
                (select_n2x_8 ? (~ mcand_2x) : 0) |
                (select_ne_8 ? (~ mcand_1x) : 0));
assign tcomp8 =  select_n2x_8 | select_ne_8;

// Booth Radix-4 Partial Products. Multiplier selectors: mult[19] mult[18] mult[17]
wire select_e_9, select_2x_9, tcomp9, select_ne_9, select_n2x_9;
assign select_e_9 = ((~ mult[19]) & (mult[18] ^ mult[17]));
assign select_ne_9 = mult[19] &  (mult[18] ^ mult[17]);
assign select_2x_9 = (~ mult[19]) & mult[18] & mult[17];
assign select_n2x_9 = mult[19] & (~ mult[18]) & (~ mult[17]);
wire [33:0] pp_9;
assign pp_9 = (1<<33) ^ // flip the MSB
               ((select_e_9 ? mcand_1x : 0) |
                (select_2x_9 ? mcand_2x : 0) |
                (select_n2x_9 ? (~ mcand_2x) : 0) |
                (select_ne_9 ? (~ mcand_1x) : 0));
assign tcomp9 =  select_n2x_9 | select_ne_9;

// Booth Radix-4 Partial Products. Multiplier selectors: mult[21] mult[20] mult[19]
wire select_e_10, select_2x_10, tcomp10, select_ne_10, select_n2x_10;
assign select_e_10 = ((~ mult[21]) & (mult[20] ^ mult[19]));
assign select_ne_10 = mult[21] &  (mult[20] ^ mult[19]);
assign select_2x_10 = (~ mult[21]) & mult[20] & mult[19];
assign select_n2x_10 = mult[21] & (~ mult[20]) & (~ mult[19]);
wire [33:0] pp_10;
assign pp_10 = (1<<33) ^ // flip the MSB
               ((select_e_10 ? mcand_1x : 0) |
                (select_2x_10 ? mcand_2x : 0) |
                (select_n2x_10 ? (~ mcand_2x) : 0) |
                (select_ne_10 ? (~ mcand_1x) : 0));
assign tcomp10 =  select_n2x_10 | select_ne_10;

// Booth Radix-4 Partial Products. Multiplier selectors: mult[23] mult[22] mult[21]
wire select_e_11, select_2x_11, tcomp11, select_ne_11, select_n2x_11;
assign select_e_11 = ((~ mult[23]) & (mult[22] ^ mult[21]));
assign select_ne_11 = mult[23] &  (mult[22] ^ mult[21]);
assign select_2x_11 = (~ mult[23]) & mult[22] & mult[21];
assign select_n2x_11 = mult[23] & (~ mult[22]) & (~ mult[21]);
wire [33:0] pp_11;
assign pp_11 = (1<<33) ^ // flip the MSB
               ((select_e_11 ? mcand_1x : 0) |
                (select_2x_11 ? mcand_2x : 0) |
                (select_n2x_11 ? (~ mcand_2x) : 0) |
                (select_ne_11 ? (~ mcand_1x) : 0));
assign tcomp11 =  select_n2x_11 | select_ne_11;

// Booth Radix-4 Partial Products. Multiplier selectors: mult[25] mult[24] mult[23]
wire select_e_12, select_2x_12, tcomp12, select_ne_12, select_n2x_12;
assign select_e_12 = ((~ mult[25]) & (mult[24] ^ mult[23]));
assign select_ne_12 = mult[25] &  (mult[24] ^ mult[23]);
assign select_2x_12 = (~ mult[25]) & mult[24] & mult[23];
assign select_n2x_12 = mult[25] & (~ mult[24]) & (~ mult[23]);
wire [33:0] pp_12;
assign pp_12 = (1<<33) ^ // flip the MSB
               ((select_e_12 ? mcand_1x : 0) |
                (select_2x_12 ? mcand_2x : 0) |
                (select_n2x_12 ? (~ mcand_2x) : 0) |
                (select_ne_12 ? (~ mcand_1x) : 0));
assign tcomp12 =  select_n2x_12 | select_ne_12;

// Booth Radix-4 Partial Products. Multiplier selectors: mult[27] mult[26] mult[25]
wire select_e_13, select_2x_13, tcomp13, select_ne_13, select_n2x_13;
assign select_e_13 = ((~ mult[27]) & (mult[26] ^ mult[25]));
assign select_ne_13 = mult[27] &  (mult[26] ^ mult[25]);
assign select_2x_13 = (~ mult[27]) & mult[26] & mult[25];
assign select_n2x_13 = mult[27] & (~ mult[26]) & (~ mult[25]);
wire [33:0] pp_13;
assign pp_13 = (1<<33) ^ // flip the MSB
               ((select_e_13 ? mcand_1x : 0) |
                (select_2x_13 ? mcand_2x : 0) |
                (select_n2x_13 ? (~ mcand_2x) : 0) |
                (select_ne_13 ? (~ mcand_1x) : 0));
assign tcomp13 =  select_n2x_13 | select_ne_13;

// Booth Radix-4 Partial Products. Multiplier selectors: mult[29] mult[28] mult[27]
wire select_e_14, select_2x_14, tcomp14, select_ne_14, select_n2x_14;
assign select_e_14 = ((~ mult[29]) & (mult[28] ^ mult[27]));
assign select_ne_14 = mult[29] &  (mult[28] ^ mult[27]);
assign select_2x_14 = (~ mult[29]) & mult[28] & mult[27];
assign select_n2x_14 = mult[29] & (~ mult[28]) & (~ mult[27]);
wire [33:0] pp_14;
assign pp_14 = (1<<33) ^ // flip the MSB
               ((select_e_14 ? mcand_1x : 0) |
                (select_2x_14 ? mcand_2x : 0) |
                (select_n2x_14 ? (~ mcand_2x) : 0) |
                (select_ne_14 ? (~ mcand_1x) : 0));
assign tcomp14 =  select_n2x_14 | select_ne_14;

// Booth Radix-4 Partial Products. Multiplier selectors: mult[31] mult[30] mult[29]
wire select_e_15, select_2x_15, tcomp15, select_ne_15, select_n2x_15;
assign select_e_15 = ((~ mult[31]) & (mult[30] ^ mult[29]));
assign select_ne_15 = mult[31] &  (mult[30] ^ mult[29]);
assign select_2x_15 = (~ mult[31]) & mult[30] & mult[29];
assign select_n2x_15 = mult[31] & (~ mult[30]) & (~ mult[29]);
wire [33:0] pp_15;
assign pp_15 = (1<<33) ^ // flip the MSB
               ((select_e_15 ? mcand_1x : 0) |
                (select_2x_15 ? mcand_2x : 0) |
                (select_n2x_15 ? (~ mcand_2x) : 0) |
                (select_ne_15 ? (~ mcand_1x) : 0));
assign tcomp15 =  select_n2x_15 | select_ne_15;

// Booth Radix-4 Partial Products. Multiplier selectors: mult[32] mult[32] mult[31]
wire select_e_16, select_2x_16, tcomp16, select_ne_16, select_n2x_16;
assign select_e_16 = ((~ mult[32]) & (mult[32] ^ mult[31]));
assign select_ne_16 = mult[32] &  (mult[32] ^ mult[31]);
assign select_2x_16 = (~ mult[32]) & mult[32] & mult[31];
assign select_n2x_16 = mult[32] & (~ mult[32]) & (~ mult[31]);
wire [33:0] pp_16;
assign pp_16 = (1<<33) ^ // flip the MSB
               ((select_e_16 ? mcand_1x : 0) |
                (select_2x_16 ? mcand_2x : 0) |
                (select_n2x_16 ? (~ mcand_2x) : 0) |
                (select_ne_16 ? (~ mcand_1x) : 0));
assign tcomp16 =  select_n2x_16 | select_ne_16;

// Creating Summation Tree


// Dadda Summation Stage 1
wire s0 ,c0;
ha ha0 (pp_0[24], pp_1[22], s0, c0);
wire s1 ,c1;
ha ha1 (pp_0[25], pp_1[23], s1, c1);
wire s2 ,c2;
fa fa2 (pp_0[26], pp_1[24], pp_2[22], s2, c2);
wire s3 ,c3;
ha ha3 (pp_3[20], pp_4[18], s3, c3);
wire s4 ,c4;
fa fa4 (pp_0[27], pp_1[25], pp_2[23], s4, c4);
wire s5 ,c5;
ha ha5 (pp_3[21], pp_4[19], s5, c5);
wire s6 ,c6;
fa fa6 (pp_0[28], pp_1[26], pp_2[24], s6, c6);
wire s7 ,c7;
fa fa7 (pp_3[22], pp_4[20], pp_5[18], s7, c7);
wire s8 ,c8;
ha ha8 (pp_6[16], pp_7[14], s8, c8);
wire s9 ,c9;
fa fa9 (pp_0[29], pp_1[27], pp_2[25], s9, c9);
wire s10 ,c10;
fa fa10 (pp_3[23], pp_4[21], pp_5[19], s10, c10);
wire s11 ,c11;
ha ha11 (pp_6[17], pp_7[15], s11, c11);
wire s12 ,c12;
fa fa12 (pp_0[30], pp_1[28], pp_2[26], s12, c12);
wire s13 ,c13;
fa fa13 (pp_3[24], pp_4[22], pp_5[20], s13, c13);
wire s14 ,c14;
fa fa14 (pp_6[18], pp_7[16], pp_8[14], s14, c14);
wire s15 ,c15;
ha ha15 (pp_9[12], pp_10[10], s15, c15);
wire s16 ,c16;
fa fa16 (pp_0[31], pp_1[29], pp_2[27], s16, c16);
wire s17 ,c17;
fa fa17 (pp_3[25], pp_4[23], pp_5[21], s17, c17);
wire s18 ,c18;
fa fa18 (pp_6[19], pp_7[17], pp_8[15], s18, c18);
wire s19 ,c19;
ha ha19 (pp_9[13], pp_10[11], s19, c19);
wire s20 ,c20;
fa fa20 (pp_0[32], pp_1[30], pp_2[28], s20, c20);
wire s21 ,c21;
fa fa21 (pp_3[26], pp_4[24], pp_5[22], s21, c21);
wire s22 ,c22;
fa fa22 (pp_6[20], pp_7[18], pp_8[16], s22, c22);
wire s23 ,c23;
fa fa23 (pp_9[14], pp_10[12], pp_11[10], s23, c23);
wire s24 ,c24;
ha ha24 (pp_12[8], pp_13[6], s24, c24);
wire s25 ,c25;
fa fa25 (pp_0[33], pp_1[31], pp_2[29], s25, c25);
wire s26 ,c26;
fa fa26 (pp_3[27], pp_4[25], pp_5[23], s26, c26);
wire s27 ,c27;
fa fa27 (pp_6[21], pp_7[19], pp_8[17], s27, c27);
wire s28 ,c28;
fa fa28 (pp_9[15], pp_10[13], pp_11[11], s28, c28);
wire s29 ,c29;
ha ha29 (pp_12[9], pp_13[7], s29, c29);
wire s30 ,c30;
fa fa30 (pp_1[32], pp_2[30], pp_3[28], s30, c30);
wire s31 ,c31;
fa fa31 (pp_4[26], pp_5[24], pp_6[22], s31, c31);
wire s32 ,c32;
fa fa32 (pp_7[20], pp_8[18], pp_9[16], s32, c32);
wire s33 ,c33;
fa fa33 (pp_10[14], pp_11[12], pp_12[10], s33, c33);
wire s34 ,c34;
fa fa34 (pp_1[33], pp_2[31], pp_3[29], s34, c34);
wire s35 ,c35;
fa fa35 (pp_4[27], pp_5[25], pp_6[23], s35, c35);
wire s36 ,c36;
fa fa36 (pp_7[21], pp_8[19], pp_9[17], s36, c36);
wire s37 ,c37;
ha ha37 (pp_10[15], pp_11[13], s37, c37);
wire s38 ,c38;
fa fa38 (pp_2[32], pp_3[30], pp_4[28], s38, c38);
wire s39 ,c39;
fa fa39 (pp_5[26], pp_6[24], pp_7[22], s39, c39);
wire s40 ,c40;
fa fa40 (pp_8[20], pp_9[18], pp_10[16], s40, c40);
wire s41 ,c41;
fa fa41 (pp_2[33], pp_3[31], pp_4[29], s41, c41);
wire s42 ,c42;
fa fa42 (pp_5[27], pp_6[25], pp_7[23], s42, c42);
wire s43 ,c43;
ha ha43 (pp_8[21], pp_9[19], s43, c43);
wire s44 ,c44;
fa fa44 (pp_3[32], pp_4[30], pp_5[28], s44, c44);
wire s45 ,c45;
fa fa45 (pp_6[26], pp_7[24], pp_8[22], s45, c45);
wire s46 ,c46;
fa fa46 (pp_3[33], pp_4[31], pp_5[29], s46, c46);
wire s47 ,c47;
ha ha47 (pp_6[27], pp_7[25], s47, c47);
wire s48 ,c48;
fa fa48 (pp_4[32], pp_5[30], pp_6[28], s48, c48);
wire s49 ,c49;
ha ha49 (pp_4[33], pp_5[31], s49, c49);

// Dadda Summation Stage 2
wire s50 ,c50;
ha ha50 (pp_0[16], pp_1[14], s50, c50);
wire s51 ,c51;
ha ha51 (pp_0[17], pp_1[15], s51, c51);
wire s52 ,c52;
fa fa52 (pp_0[18], pp_1[16], pp_2[14], s52, c52);
wire s53 ,c53;
ha ha53 (pp_3[12], pp_4[10], s53, c53);
wire s54 ,c54;
fa fa54 (pp_0[19], pp_1[17], pp_2[15], s54, c54);
wire s55 ,c55;
ha ha55 (pp_3[13], pp_4[11], s55, c55);
wire s56 ,c56;
fa fa56 (pp_0[20], pp_1[18], pp_2[16], s56, c56);
wire s57 ,c57;
fa fa57 (pp_3[14], pp_4[12], pp_5[10], s57, c57);
wire s58 ,c58;
ha ha58 (pp_6[8], pp_7[6], s58, c58);
wire s59 ,c59;
fa fa59 (pp_0[21], pp_1[19], pp_2[17], s59, c59);
wire s60 ,c60;
fa fa60 (pp_3[15], pp_4[13], pp_5[11], s60, c60);
wire s61 ,c61;
ha ha61 (pp_6[9], pp_7[7], s61, c61);
wire s62 ,c62;
fa fa62 (pp_0[22], pp_1[20], pp_2[18], s62, c62);
wire s63 ,c63;
fa fa63 (pp_3[16], pp_4[14], pp_5[12], s63, c63);
wire s64 ,c64;
fa fa64 (pp_6[10], pp_7[8], pp_8[6], s64, c64);
wire s65 ,c65;
ha ha65 (pp_9[4], pp_10[2], s65, c65);
wire s66 ,c66;
fa fa66 (pp_0[23], pp_1[21], pp_2[19], s66, c66);
wire s67 ,c67;
fa fa67 (pp_3[17], pp_4[15], pp_5[13], s67, c67);
wire s68 ,c68;
fa fa68 (pp_6[11], pp_7[9], pp_8[7], s68, c68);
wire s69 ,c69;
ha ha69 (pp_9[5], pp_10[3], s69, c69);
wire s70 ,c70;
fa fa70 (pp_2[20], pp_3[18], pp_4[16], s70, c70);
wire s71 ,c71;
fa fa71 (pp_5[14], pp_6[12], pp_7[10], s71, c71);
wire s72 ,c72;
fa fa72 (pp_8[8], pp_9[6], pp_10[4], s72, c72);
wire s73 ,c73;
fa fa73 (pp_11[2], pp_12[0], tcomp12, s73, c73);
wire s74 ,c74;
fa fa74 (pp_2[21], pp_3[19], pp_4[17], s74, c74);
wire s75 ,c75;
fa fa75 (pp_5[15], pp_6[13], pp_7[11], s75, c75);
wire s76 ,c76;
fa fa76 (pp_8[9], pp_9[7], pp_10[5], s76, c76);
wire s77 ,c77;
fa fa77 (pp_11[3], pp_12[1], c0, s77, c77);
wire s78 ,c78;
fa fa78 (pp_5[16], pp_6[14], pp_7[12], s78, c78);
wire s79 ,c79;
fa fa79 (pp_8[10], pp_9[8], pp_10[6], s79, c79);
wire s80 ,c80;
fa fa80 (pp_11[4], pp_12[2], pp_13[0], s80, c80);
wire s81 ,c81;
fa fa81 (tcomp13, c1, s2, s81, c81);
wire s82 ,c82;
fa fa82 (pp_5[17], pp_6[15], pp_7[13], s82, c82);
wire s83 ,c83;
fa fa83 (pp_8[11], pp_9[9], pp_10[7], s83, c83);
wire s84 ,c84;
fa fa84 (pp_11[5], pp_12[3], pp_13[1], s84, c84);
wire s85 ,c85;
fa fa85 (c2, c3, s4, s85, c85);
wire s86 ,c86;
fa fa86 (pp_8[12], pp_9[10], pp_10[8], s86, c86);
wire s87 ,c87;
fa fa87 (pp_11[6], pp_12[4], pp_13[2], s87, c87);
wire s88 ,c88;
fa fa88 (pp_14[0], tcomp14, c4, s88, c88);
wire s89 ,c89;
fa fa89 (c5, s6, s7, s89, c89);
wire s90 ,c90;
fa fa90 (pp_8[13], pp_9[11], pp_10[9], s90, c90);
wire s91 ,c91;
fa fa91 (pp_11[7], pp_12[5], pp_13[3], s91, c91);
wire s92 ,c92;
fa fa92 (pp_14[1], c6, c7, s92, c92);
wire s93 ,c93;
fa fa93 (c8, s9, s10, s93, c93);
wire s94 ,c94;
fa fa94 (pp_11[8], pp_12[6], pp_13[4], s94, c94);
wire s95 ,c95;
fa fa95 (pp_14[2], pp_15[0], tcomp15, s95, c95);
wire s96 ,c96;
fa fa96 (c9, c10, c11, s96, c96);
wire s97 ,c97;
fa fa97 (s12, s13, s14, s97, c97);
wire s98 ,c98;
fa fa98 (pp_11[9], pp_12[7], pp_13[5], s98, c98);
wire s99 ,c99;
fa fa99 (pp_14[3], pp_15[1], c12, s99, c99);
wire s100 ,c100;
fa fa100 (c13, c14, c15, s100, c100);
wire s101 ,c101;
fa fa101 (s16, s17, s18, s101, c101);
wire s102 ,c102;
fa fa102 (pp_14[4], pp_15[2], pp_16[0], s102, c102);
wire s103 ,c103;
fa fa103 (tcomp16, c16, c17, s103, c103);
wire s104 ,c104;
fa fa104 (c18, c19, s20, s104, c104);
wire s105 ,c105;
fa fa105 (s21, s22, s23, s105, c105);
wire s106 ,c106;
fa fa106 (pp_14[5], pp_15[3], pp_16[1], s106, c106);
wire s107 ,c107;
fa fa107 (c20, c21, c22, s107, c107);
wire s108 ,c108;
fa fa108 (c23, c24, s25, s108, c108);
wire s109 ,c109;
fa fa109 (s26, s27, s28, s109, c109);
wire s110 ,c110;
fa fa110 (pp_13[8], pp_14[6], pp_15[4], s110, c110);
wire s111 ,c111;
fa fa111 (pp_16[2], c25, c26, s111, c111);
wire s112 ,c112;
fa fa112 (c27, c28, c29, s112, c112);
wire s113 ,c113;
fa fa113 (s30, s31, s32, s113, c113);
wire s114 ,c114;
fa fa114 (pp_12[11], pp_13[9], pp_14[7], s114, c114);
wire s115 ,c115;
fa fa115 (pp_15[5], pp_16[3], c30, s115, c115);
wire s116 ,c116;
fa fa116 (c31, c32, c33, s116, c116);
wire s117 ,c117;
fa fa117 (s34, s35, s36, s117, c117);
wire s118 ,c118;
fa fa118 (pp_11[14], pp_12[12], pp_13[10], s118, c118);
wire s119 ,c119;
fa fa119 (pp_14[8], pp_15[6], pp_16[4], s119, c119);
wire s120 ,c120;
fa fa120 (c34, c35, c36, s120, c120);
wire s121 ,c121;
fa fa121 (c37, s38, s39, s121, c121);
wire s122 ,c122;
fa fa122 (pp_10[17], pp_11[15], pp_12[13], s122, c122);
wire s123 ,c123;
fa fa123 (pp_13[11], pp_14[9], pp_15[7], s123, c123);
wire s124 ,c124;
fa fa124 (pp_16[5], c38, c39, s124, c124);
wire s125 ,c125;
fa fa125 (c40, s41, s42, s125, c125);
wire s126 ,c126;
fa fa126 (pp_9[20], pp_10[18], pp_11[16], s126, c126);
wire s127 ,c127;
fa fa127 (pp_12[14], pp_13[12], pp_14[10], s127, c127);
wire s128 ,c128;
fa fa128 (pp_15[8], pp_16[6], c41, s128, c128);
wire s129 ,c129;
fa fa129 (c42, c43, s44, s129, c129);
wire s130 ,c130;
fa fa130 (pp_8[23], pp_9[21], pp_10[19], s130, c130);
wire s131 ,c131;
fa fa131 (pp_11[17], pp_12[15], pp_13[13], s131, c131);
wire s132 ,c132;
fa fa132 (pp_14[11], pp_15[9], pp_16[7], s132, c132);
wire s133 ,c133;
fa fa133 (c44, c45, s46, s133, c133);
wire s134 ,c134;
fa fa134 (pp_7[26], pp_8[24], pp_9[22], s134, c134);
wire s135 ,c135;
fa fa135 (pp_10[20], pp_11[18], pp_12[16], s135, c135);
wire s136 ,c136;
fa fa136 (pp_13[14], pp_14[12], pp_15[10], s136, c136);
wire s137 ,c137;
fa fa137 (pp_16[8], c46, c47, s137, c137);
wire s138 ,c138;
fa fa138 (pp_6[29], pp_7[27], pp_8[25], s138, c138);
wire s139 ,c139;
fa fa139 (pp_9[23], pp_10[21], pp_11[19], s139, c139);
wire s140 ,c140;
fa fa140 (pp_12[17], pp_13[15], pp_14[13], s140, c140);
wire s141 ,c141;
fa fa141 (pp_15[11], pp_16[9], c48, s141, c141);
wire s142 ,c142;
fa fa142 (pp_5[32], pp_6[30], pp_7[28], s142, c142);
wire s143 ,c143;
fa fa143 (pp_8[26], pp_9[24], pp_10[22], s143, c143);
wire s144 ,c144;
fa fa144 (pp_11[20], pp_12[18], pp_13[16], s144, c144);
wire s145 ,c145;
fa fa145 (pp_14[14], pp_15[12], pp_16[10], s145, c145);
wire s146 ,c146;
fa fa146 (pp_5[33], pp_6[31], pp_7[29], s146, c146);
wire s147 ,c147;
fa fa147 (pp_8[27], pp_9[25], pp_10[23], s147, c147);
wire s148 ,c148;
fa fa148 (pp_11[21], pp_12[19], pp_13[17], s148, c148);
wire s149 ,c149;
ha ha149 (pp_14[15], pp_15[13], s149, c149);
wire s150 ,c150;
fa fa150 (pp_6[32], pp_7[30], pp_8[28], s150, c150);
wire s151 ,c151;
fa fa151 (pp_9[26], pp_10[24], pp_11[22], s151, c151);
wire s152 ,c152;
fa fa152 (pp_12[20], pp_13[18], pp_14[16], s152, c152);
wire s153 ,c153;
fa fa153 (pp_6[33], pp_7[31], pp_8[29], s153, c153);
wire s154 ,c154;
fa fa154 (pp_9[27], pp_10[25], pp_11[23], s154, c154);
wire s155 ,c155;
ha ha155 (pp_12[21], pp_13[19], s155, c155);
wire s156 ,c156;
fa fa156 (pp_7[32], pp_8[30], pp_9[28], s156, c156);
wire s157 ,c157;
fa fa157 (pp_10[26], pp_11[24], pp_12[22], s157, c157);
wire s158 ,c158;
fa fa158 (pp_7[33], pp_8[31], pp_9[29], s158, c158);
wire s159 ,c159;
ha ha159 (pp_10[27], pp_11[25], s159, c159);
wire s160 ,c160;
fa fa160 (pp_8[32], pp_9[30], pp_10[28], s160, c160);
wire s161 ,c161;
ha ha161 (pp_8[33], pp_9[31], s161, c161);

// Dadda Summation Stage 3
wire s162 ,c162;
ha ha162 (pp_0[10], pp_1[8], s162, c162);
wire s163 ,c163;
ha ha163 (pp_0[11], pp_1[9], s163, c163);
wire s164 ,c164;
fa fa164 (pp_0[12], pp_1[10], pp_2[8], s164, c164);
wire s165 ,c165;
ha ha165 (pp_3[6], pp_4[4], s165, c165);
wire s166 ,c166;
fa fa166 (pp_0[13], pp_1[11], pp_2[9], s166, c166);
wire s167 ,c167;
ha ha167 (pp_3[7], pp_4[5], s167, c167);
wire s168 ,c168;
fa fa168 (pp_0[14], pp_1[12], pp_2[10], s168, c168);
wire s169 ,c169;
fa fa169 (pp_3[8], pp_4[6], pp_5[4], s169, c169);
wire s170 ,c170;
ha ha170 (pp_6[2], pp_7[0], s170, c170);
wire s171 ,c171;
fa fa171 (pp_0[15], pp_1[13], pp_2[11], s171, c171);
wire s172 ,c172;
fa fa172 (pp_3[9], pp_4[7], pp_5[5], s172, c172);
wire s173 ,c173;
ha ha173 (pp_6[3], pp_7[1], s173, c173);
wire s174 ,c174;
fa fa174 (pp_2[12], pp_3[10], pp_4[8], s174, c174);
wire s175 ,c175;
fa fa175 (pp_5[6], pp_6[4], pp_7[2], s175, c175);
wire s176 ,c176;
fa fa176 (pp_8[0], tcomp8, s50, s176, c176);
wire s177 ,c177;
fa fa177 (pp_2[13], pp_3[11], pp_4[9], s177, c177);
wire s178 ,c178;
fa fa178 (pp_5[7], pp_6[5], pp_7[3], s178, c178);
wire s179 ,c179;
fa fa179 (pp_8[1], c50, s51, s179, c179);
wire s180 ,c180;
fa fa180 (pp_5[8], pp_6[6], pp_7[4], s180, c180);
wire s181 ,c181;
fa fa181 (pp_8[2], pp_9[0], tcomp9, s181, c181);
wire s182 ,c182;
fa fa182 (c51, s52, s53, s182, c182);
wire s183 ,c183;
fa fa183 (pp_5[9], pp_6[7], pp_7[5], s183, c183);
wire s184 ,c184;
fa fa184 (pp_8[3], pp_9[1], c52, s184, c184);
wire s185 ,c185;
fa fa185 (c53, s54, s55, s185, c185);
wire s186 ,c186;
fa fa186 (pp_8[4], pp_9[2], pp_10[0], s186, c186);
wire s187 ,c187;
fa fa187 (tcomp10, c54, c55, s187, c187);
wire s188 ,c188;
fa fa188 (s56, s57, s58, s188, c188);
wire s189 ,c189;
fa fa189 (pp_8[5], pp_9[3], pp_10[1], s189, c189);
wire s190 ,c190;
fa fa190 (c56, c57, c58, s190, c190);
wire s191 ,c191;
fa fa191 (s59, s60, s61, s191, c191);
wire s192 ,c192;
fa fa192 (pp_11[0], tcomp11, c59, s192, c192);
wire s193 ,c193;
fa fa193 (c60, c61, s62, s193, c193);
wire s194 ,c194;
fa fa194 (s63, s64, s65, s194, c194);
wire s195 ,c195;
fa fa195 (pp_11[1], c62, c63, s195, c195);
wire s196 ,c196;
fa fa196 (c64, c65, s66, s196, c196);
wire s197 ,c197;
fa fa197 (s67, s68, s69, s197, c197);
wire s198 ,c198;
fa fa198 (s0, c66, c67, s198, c198);
wire s199 ,c199;
fa fa199 (c68, c69, s70, s199, c199);
wire s200 ,c200;
fa fa200 (s71, s72, s73, s200, c200);
wire s201 ,c201;
fa fa201 (s1, c70, c71, s201, c201);
wire s202 ,c202;
fa fa202 (c72, c73, s74, s202, c202);
wire s203 ,c203;
fa fa203 (s75, s76, s77, s203, c203);
wire s204 ,c204;
fa fa204 (s3, c74, c75, s204, c204);
wire s205 ,c205;
fa fa205 (c76, c77, s78, s205, c205);
wire s206 ,c206;
fa fa206 (s79, s80, s81, s206, c206);
wire s207 ,c207;
fa fa207 (s5, c78, c79, s207, c207);
wire s208 ,c208;
fa fa208 (c80, c81, s82, s208, c208);
wire s209 ,c209;
fa fa209 (s83, s84, s85, s209, c209);
wire s210 ,c210;
fa fa210 (s8, c82, c83, s210, c210);
wire s211 ,c211;
fa fa211 (c84, c85, s86, s211, c211);
wire s212 ,c212;
fa fa212 (s87, s88, s89, s212, c212);
wire s213 ,c213;
fa fa213 (s11, c86, c87, s213, c213);
wire s214 ,c214;
fa fa214 (c88, c89, s90, s214, c214);
wire s215 ,c215;
fa fa215 (s91, s92, s93, s215, c215);
wire s216 ,c216;
fa fa216 (s15, c90, c91, s216, c216);
wire s217 ,c217;
fa fa217 (c92, c93, s94, s217, c217);
wire s218 ,c218;
fa fa218 (s95, s96, s97, s218, c218);
wire s219 ,c219;
fa fa219 (s19, c94, c95, s219, c219);
wire s220 ,c220;
fa fa220 (c96, c97, s98, s220, c220);
wire s221 ,c221;
fa fa221 (s99, s100, s101, s221, c221);
wire s222 ,c222;
fa fa222 (s24, c98, c99, s222, c222);
wire s223 ,c223;
fa fa223 (c100, c101, s102, s223, c223);
wire s224 ,c224;
fa fa224 (s103, s104, s105, s224, c224);
wire s225 ,c225;
fa fa225 (s29, c102, c103, s225, c225);
wire s226 ,c226;
fa fa226 (c104, c105, s106, s226, c226);
wire s227 ,c227;
fa fa227 (s107, s108, s109, s227, c227);
wire s228 ,c228;
fa fa228 (s33, c106, c107, s228, c228);
wire s229 ,c229;
fa fa229 (c108, c109, s110, s229, c229);
wire s230 ,c230;
fa fa230 (s111, s112, s113, s230, c230);
wire s231 ,c231;
fa fa231 (s37, c110, c111, s231, c231);
wire s232 ,c232;
fa fa232 (c112, c113, s114, s232, c232);
wire s233 ,c233;
fa fa233 (s115, s116, s117, s233, c233);
wire s234 ,c234;
fa fa234 (s40, c114, c115, s234, c234);
wire s235 ,c235;
fa fa235 (c116, c117, s118, s235, c235);
wire s236 ,c236;
fa fa236 (s119, s120, s121, s236, c236);
wire s237 ,c237;
fa fa237 (s43, c118, c119, s237, c237);
wire s238 ,c238;
fa fa238 (c120, c121, s122, s238, c238);
wire s239 ,c239;
fa fa239 (s123, s124, s125, s239, c239);
wire s240 ,c240;
fa fa240 (s45, c122, c123, s240, c240);
wire s241 ,c241;
fa fa241 (c124, c125, s126, s241, c241);
wire s242 ,c242;
fa fa242 (s127, s128, s129, s242, c242);
wire s243 ,c243;
fa fa243 (s47, c126, c127, s243, c243);
wire s244 ,c244;
fa fa244 (c128, c129, s130, s244, c244);
wire s245 ,c245;
fa fa245 (s131, s132, s133, s245, c245);
wire s246 ,c246;
fa fa246 (s48, c130, c131, s246, c246);
wire s247 ,c247;
fa fa247 (c132, c133, s134, s247, c247);
wire s248 ,c248;
fa fa248 (s135, s136, s137, s248, c248);
wire s249 ,c249;
fa fa249 (s49, c134, c135, s249, c249);
wire s250 ,c250;
fa fa250 (c136, c137, s138, s250, c250);
wire s251 ,c251;
fa fa251 (s139, s140, s141, s251, c251);
wire s252 ,c252;
fa fa252 (c49, c138, c139, s252, c252);
wire s253 ,c253;
fa fa253 (c140, c141, s142, s253, c253);
wire s254 ,c254;
fa fa254 (s143, s144, s145, s254, c254);
wire s255 ,c255;
fa fa255 (pp_16[11], c142, c143, s255, c255);
wire s256 ,c256;
fa fa256 (c144, c145, s146, s256, c256);
wire s257 ,c257;
fa fa257 (s147, s148, s149, s257, c257);
wire s258 ,c258;
fa fa258 (pp_15[14], pp_16[12], c146, s258, c258);
wire s259 ,c259;
fa fa259 (c147, c148, c149, s259, c259);
wire s260 ,c260;
fa fa260 (s150, s151, s152, s260, c260);
wire s261 ,c261;
fa fa261 (pp_14[17], pp_15[15], pp_16[13], s261, c261);
wire s262 ,c262;
fa fa262 (c150, c151, c152, s262, c262);
wire s263 ,c263;
fa fa263 (s153, s154, s155, s263, c263);
wire s264 ,c264;
fa fa264 (pp_13[20], pp_14[18], pp_15[16], s264, c264);
wire s265 ,c265;
fa fa265 (pp_16[14], c153, c154, s265, c265);
wire s266 ,c266;
fa fa266 (c155, s156, s157, s266, c266);
wire s267 ,c267;
fa fa267 (pp_12[23], pp_13[21], pp_14[19], s267, c267);
wire s268 ,c268;
fa fa268 (pp_15[17], pp_16[15], c156, s268, c268);
wire s269 ,c269;
fa fa269 (c157, s158, s159, s269, c269);
wire s270 ,c270;
fa fa270 (pp_11[26], pp_12[24], pp_13[22], s270, c270);
wire s271 ,c271;
fa fa271 (pp_14[20], pp_15[18], pp_16[16], s271, c271);
wire s272 ,c272;
fa fa272 (c158, c159, s160, s272, c272);
wire s273 ,c273;
fa fa273 (pp_10[29], pp_11[27], pp_12[25], s273, c273);
wire s274 ,c274;
fa fa274 (pp_13[23], pp_14[21], pp_15[19], s274, c274);
wire s275 ,c275;
fa fa275 (pp_16[17], c160, s161, s275, c275);
wire s276 ,c276;
fa fa276 (pp_9[32], pp_10[30], pp_11[28], s276, c276);
wire s277 ,c277;
fa fa277 (pp_12[26], pp_13[24], pp_14[22], s277, c277);
wire s278 ,c278;
fa fa278 (pp_15[20], pp_16[18], c161, s278, c278);
wire s279 ,c279;
fa fa279 (pp_9[33], pp_10[31], pp_11[29], s279, c279);
wire s280 ,c280;
fa fa280 (pp_12[27], pp_13[25], pp_14[23], s280, c280);
wire s281 ,c281;
ha ha281 (pp_15[21], pp_16[19], s281, c281);
wire s282 ,c282;
fa fa282 (pp_10[32], pp_11[30], pp_12[28], s282, c282);
wire s283 ,c283;
fa fa283 (pp_13[26], pp_14[24], pp_15[22], s283, c283);
wire s284 ,c284;
fa fa284 (pp_10[33], pp_11[31], pp_12[29], s284, c284);
wire s285 ,c285;
ha ha285 (pp_13[27], pp_14[25], s285, c285);
wire s286 ,c286;
fa fa286 (pp_11[32], pp_12[30], pp_13[28], s286, c286);
wire s287 ,c287;
ha ha287 (pp_11[33], pp_12[31], s287, c287);

// Dadda Summation Stage 4
wire s288 ,c288;
ha ha288 (pp_0[6], pp_1[4], s288, c288);
wire s289 ,c289;
ha ha289 (pp_0[7], pp_1[5], s289, c289);
wire s290 ,c290;
fa fa290 (pp_0[8], pp_1[6], pp_2[4], s290, c290);
wire s291 ,c291;
ha ha291 (pp_3[2], pp_4[0], s291, c291);
wire s292 ,c292;
fa fa292 (pp_0[9], pp_1[7], pp_2[5], s292, c292);
wire s293 ,c293;
ha ha293 (pp_3[3], pp_4[1], s293, c293);
wire s294 ,c294;
fa fa294 (pp_2[6], pp_3[4], pp_4[2], s294, c294);
wire s295 ,c295;
fa fa295 (pp_5[0], tcomp5, s162, s295, c295);
wire s296 ,c296;
fa fa296 (pp_2[7], pp_3[5], pp_4[3], s296, c296);
wire s297 ,c297;
fa fa297 (pp_5[1], c162, s163, s297, c297);
wire s298 ,c298;
fa fa298 (pp_5[2], pp_6[0], tcomp6, s298, c298);
wire s299 ,c299;
fa fa299 (c163, s164, s165, s299, c299);
wire s300 ,c300;
fa fa300 (pp_5[3], pp_6[1], c164, s300, c300);
wire s301 ,c301;
fa fa301 (c165, s166, s167, s301, c301);
wire s302 ,c302;
fa fa302 (tcomp7, c166, c167, s302, c302);
wire s303 ,c303;
fa fa303 (s168, s169, s170, s303, c303);
wire s304 ,c304;
fa fa304 (c168, c169, c170, s304, c304);
wire s305 ,c305;
fa fa305 (s171, s172, s173, s305, c305);
wire s306 ,c306;
fa fa306 (c171, c172, c173, s306, c306);
wire s307 ,c307;
fa fa307 (s174, s175, s176, s307, c307);
wire s308 ,c308;
fa fa308 (c174, c175, c176, s308, c308);
wire s309 ,c309;
fa fa309 (s177, s178, s179, s309, c309);
wire s310 ,c310;
fa fa310 (c177, c178, c179, s310, c310);
wire s311 ,c311;
fa fa311 (s180, s181, s182, s311, c311);
wire s312 ,c312;
fa fa312 (c180, c181, c182, s312, c312);
wire s313 ,c313;
fa fa313 (s183, s184, s185, s313, c313);
wire s314 ,c314;
fa fa314 (c183, c184, c185, s314, c314);
wire s315 ,c315;
fa fa315 (s186, s187, s188, s315, c315);
wire s316 ,c316;
fa fa316 (c186, c187, c188, s316, c316);
wire s317 ,c317;
fa fa317 (s189, s190, s191, s317, c317);
wire s318 ,c318;
fa fa318 (c189, c190, c191, s318, c318);
wire s319 ,c319;
fa fa319 (s192, s193, s194, s319, c319);
wire s320 ,c320;
fa fa320 (c192, c193, c194, s320, c320);
wire s321 ,c321;
fa fa321 (s195, s196, s197, s321, c321);
wire s322 ,c322;
fa fa322 (c195, c196, c197, s322, c322);
wire s323 ,c323;
fa fa323 (s198, s199, s200, s323, c323);
wire s324 ,c324;
fa fa324 (c198, c199, c200, s324, c324);
wire s325 ,c325;
fa fa325 (s201, s202, s203, s325, c325);
wire s326 ,c326;
fa fa326 (c201, c202, c203, s326, c326);
wire s327 ,c327;
fa fa327 (s204, s205, s206, s327, c327);
wire s328 ,c328;
fa fa328 (c204, c205, c206, s328, c328);
wire s329 ,c329;
fa fa329 (s207, s208, s209, s329, c329);
wire s330 ,c330;
fa fa330 (c207, c208, c209, s330, c330);
wire s331 ,c331;
fa fa331 (s210, s211, s212, s331, c331);
wire s332 ,c332;
fa fa332 (c210, c211, c212, s332, c332);
wire s333 ,c333;
fa fa333 (s213, s214, s215, s333, c333);
wire s334 ,c334;
fa fa334 (c213, c214, c215, s334, c334);
wire s335 ,c335;
fa fa335 (s216, s217, s218, s335, c335);
wire s336 ,c336;
fa fa336 (c216, c217, c218, s336, c336);
wire s337 ,c337;
fa fa337 (s219, s220, s221, s337, c337);
wire s338 ,c338;
fa fa338 (c219, c220, c221, s338, c338);
wire s339 ,c339;
fa fa339 (s222, s223, s224, s339, c339);
wire s340 ,c340;
fa fa340 (c222, c223, c224, s340, c340);
wire s341 ,c341;
fa fa341 (s225, s226, s227, s341, c341);
wire s342 ,c342;
fa fa342 (c225, c226, c227, s342, c342);
wire s343 ,c343;
fa fa343 (s228, s229, s230, s343, c343);
wire s344 ,c344;
fa fa344 (c228, c229, c230, s344, c344);
wire s345 ,c345;
fa fa345 (s231, s232, s233, s345, c345);
wire s346 ,c346;
fa fa346 (c231, c232, c233, s346, c346);
wire s347 ,c347;
fa fa347 (s234, s235, s236, s347, c347);
wire s348 ,c348;
fa fa348 (c234, c235, c236, s348, c348);
wire s349 ,c349;
fa fa349 (s237, s238, s239, s349, c349);
wire s350 ,c350;
fa fa350 (c237, c238, c239, s350, c350);
wire s351 ,c351;
fa fa351 (s240, s241, s242, s351, c351);
wire s352 ,c352;
fa fa352 (c240, c241, c242, s352, c352);
wire s353 ,c353;
fa fa353 (s243, s244, s245, s353, c353);
wire s354 ,c354;
fa fa354 (c243, c244, c245, s354, c354);
wire s355 ,c355;
fa fa355 (s246, s247, s248, s355, c355);
wire s356 ,c356;
fa fa356 (c246, c247, c248, s356, c356);
wire s357 ,c357;
fa fa357 (s249, s250, s251, s357, c357);
wire s358 ,c358;
fa fa358 (c249, c250, c251, s358, c358);
wire s359 ,c359;
fa fa359 (s252, s253, s254, s359, c359);
wire s360 ,c360;
fa fa360 (c252, c253, c254, s360, c360);
wire s361 ,c361;
fa fa361 (s255, s256, s257, s361, c361);
wire s362 ,c362;
fa fa362 (c255, c256, c257, s362, c362);
wire s363 ,c363;
fa fa363 (s258, s259, s260, s363, c363);
wire s364 ,c364;
fa fa364 (c258, c259, c260, s364, c364);
wire s365 ,c365;
fa fa365 (s261, s262, s263, s365, c365);
wire s366 ,c366;
fa fa366 (c261, c262, c263, s366, c366);
wire s367 ,c367;
fa fa367 (s264, s265, s266, s367, c367);
wire s368 ,c368;
fa fa368 (c264, c265, c266, s368, c368);
wire s369 ,c369;
fa fa369 (s267, s268, s269, s369, c369);
wire s370 ,c370;
fa fa370 (c267, c268, c269, s370, c370);
wire s371 ,c371;
fa fa371 (s270, s271, s272, s371, c371);
wire s372 ,c372;
fa fa372 (c270, c271, c272, s372, c372);
wire s373 ,c373;
fa fa373 (s273, s274, s275, s373, c373);
wire s374 ,c374;
fa fa374 (c273, c274, c275, s374, c374);
wire s375 ,c375;
fa fa375 (s276, s277, s278, s375, c375);
wire s376 ,c376;
fa fa376 (c276, c277, c278, s376, c376);
wire s377 ,c377;
fa fa377 (s279, s280, s281, s377, c377);
wire s378 ,c378;
fa fa378 (pp_16[20], c279, c280, s378, c378);
wire s379 ,c379;
fa fa379 (c281, s282, s283, s379, c379);
wire s380 ,c380;
fa fa380 (pp_15[23], pp_16[21], c282, s380, c380);
wire s381 ,c381;
fa fa381 (c283, s284, s285, s381, c381);
wire s382 ,c382;
fa fa382 (pp_14[26], pp_15[24], pp_16[22], s382, c382);
wire s383 ,c383;
fa fa383 (c284, c285, s286, s383, c383);
wire s384 ,c384;
fa fa384 (pp_13[29], pp_14[27], pp_15[25], s384, c384);
wire s385 ,c385;
fa fa385 (pp_16[23], c286, s287, s385, c385);
wire s386 ,c386;
fa fa386 (pp_12[32], pp_13[30], pp_14[28], s386, c386);
wire s387 ,c387;
fa fa387 (pp_15[26], pp_16[24], c287, s387, c387);
wire s388 ,c388;
fa fa388 (pp_12[33], pp_13[31], pp_14[29], s388, c388);
wire s389 ,c389;
ha ha389 (pp_15[27], pp_16[25], s389, c389);
wire s390 ,c390;
fa fa390 (pp_13[32], pp_14[30], pp_15[28], s390, c390);
wire s391 ,c391;
ha ha391 (pp_13[33], pp_14[31], s391, c391);

// Dadda Summation Stage 5
wire s392 ,c392;
ha ha392 (pp_0[4], pp_1[2], s392, c392);
wire s393 ,c393;
ha ha393 (pp_0[5], pp_1[3], s393, c393);
wire s394 ,c394;
fa fa394 (pp_2[2], pp_3[0], tcomp3, s394, c394);
wire s395 ,c395;
fa fa395 (pp_2[3], pp_3[1], c288, s395, c395);
wire s396 ,c396;
fa fa396 (tcomp4, c289, s290, s396, c396);
wire s397 ,c397;
fa fa397 (c290, c291, s292, s397, c397);
wire s398 ,c398;
fa fa398 (c292, c293, s294, s398, c398);
wire s399 ,c399;
fa fa399 (c294, c295, s296, s399, c399);
wire s400 ,c400;
fa fa400 (c296, c297, s298, s400, c400);
wire s401 ,c401;
fa fa401 (c298, c299, s300, s401, c401);
wire s402 ,c402;
fa fa402 (c300, c301, s302, s402, c402);
wire s403 ,c403;
fa fa403 (c302, c303, s304, s403, c403);
wire s404 ,c404;
fa fa404 (c304, c305, s306, s404, c404);
wire s405 ,c405;
fa fa405 (c306, c307, s308, s405, c405);
wire s406 ,c406;
fa fa406 (c308, c309, s310, s406, c406);
wire s407 ,c407;
fa fa407 (c310, c311, s312, s407, c407);
wire s408 ,c408;
fa fa408 (c312, c313, s314, s408, c408);
wire s409 ,c409;
fa fa409 (c314, c315, s316, s409, c409);
wire s410 ,c410;
fa fa410 (c316, c317, s318, s410, c410);
wire s411 ,c411;
fa fa411 (c318, c319, s320, s411, c411);
wire s412 ,c412;
fa fa412 (c320, c321, s322, s412, c412);
wire s413 ,c413;
fa fa413 (c322, c323, s324, s413, c413);
wire s414 ,c414;
fa fa414 (c324, c325, s326, s414, c414);
wire s415 ,c415;
fa fa415 (c326, c327, s328, s415, c415);
wire s416 ,c416;
fa fa416 (c328, c329, s330, s416, c416);
wire s417 ,c417;
fa fa417 (c330, c331, s332, s417, c417);
wire s418 ,c418;
fa fa418 (c332, c333, s334, s418, c418);
wire s419 ,c419;
fa fa419 (c334, c335, s336, s419, c419);
wire s420 ,c420;
fa fa420 (c336, c337, s338, s420, c420);
wire s421 ,c421;
fa fa421 (c338, c339, s340, s421, c421);
wire s422 ,c422;
fa fa422 (c340, c341, s342, s422, c422);
wire s423 ,c423;
fa fa423 (c342, c343, s344, s423, c423);
wire s424 ,c424;
fa fa424 (c344, c345, s346, s424, c424);
wire s425 ,c425;
fa fa425 (c346, c347, s348, s425, c425);
wire s426 ,c426;
fa fa426 (c348, c349, s350, s426, c426);
wire s427 ,c427;
fa fa427 (c350, c351, s352, s427, c427);
wire s428 ,c428;
fa fa428 (c352, c353, s354, s428, c428);
wire s429 ,c429;
fa fa429 (c354, c355, s356, s429, c429);
wire s430 ,c430;
fa fa430 (c356, c357, s358, s430, c430);
wire s431 ,c431;
fa fa431 (c358, c359, s360, s431, c431);
wire s432 ,c432;
fa fa432 (c360, c361, s362, s432, c432);
wire s433 ,c433;
fa fa433 (c362, c363, s364, s433, c433);
wire s434 ,c434;
fa fa434 (c364, c365, s366, s434, c434);
wire s435 ,c435;
fa fa435 (c366, c367, s368, s435, c435);
wire s436 ,c436;
fa fa436 (c368, c369, s370, s436, c436);
wire s437 ,c437;
fa fa437 (c370, c371, s372, s437, c437);
wire s438 ,c438;
fa fa438 (c372, c373, s374, s438, c438);
wire s439 ,c439;
fa fa439 (c374, c375, s376, s439, c439);
wire s440 ,c440;
fa fa440 (c376, c377, s378, s440, c440);
wire s441 ,c441;
fa fa441 (c378, c379, s380, s441, c441);
wire s442 ,c442;
fa fa442 (c380, c381, s382, s442, c442);
wire s443 ,c443;
fa fa443 (c382, c383, s384, s443, c443);
wire s444 ,c444;
fa fa444 (c384, c385, s386, s444, c444);
wire s445 ,c445;
fa fa445 (c386, c387, s388, s445, c445);
wire s446 ,c446;
fa fa446 (pp_16[26], c388, c389, s446, c446);
wire s447 ,c447;
fa fa447 (pp_15[29], pp_16[27], c390, s447, c447);
wire s448 ,c448;
fa fa448 (pp_14[32], pp_15[30], pp_16[28], s448, c448);
wire s449 ,c449;
ha ha449 (pp_14[33], pp_15[31], s449, c449);

// Dadda Summation Stage 6
wire s450 ,c450;
ha ha450 (pp_0[2], pp_1[0], s450, c450);
wire s451 ,c451;
ha ha451 (pp_0[3], pp_1[1], s451, c451);
wire s452 ,c452;
fa fa452 (pp_2[0], tcomp2, s392, s452, c452);
wire s453 ,c453;
fa fa453 (pp_2[1], c392, s393, s453, c453);
wire s454 ,c454;
fa fa454 (s288, c393, s394, s454, c454);
wire s455 ,c455;
fa fa455 (s289, c394, s395, s455, c455);
wire s456 ,c456;
fa fa456 (s291, c395, s396, s456, c456);
wire s457 ,c457;
fa fa457 (s293, c396, s397, s457, c457);
wire s458 ,c458;
fa fa458 (s295, c397, s398, s458, c458);
wire s459 ,c459;
fa fa459 (s297, c398, s399, s459, c459);
wire s460 ,c460;
fa fa460 (s299, c399, s400, s460, c460);
wire s461 ,c461;
fa fa461 (s301, c400, s401, s461, c461);
wire s462 ,c462;
fa fa462 (s303, c401, s402, s462, c462);
wire s463 ,c463;
fa fa463 (s305, c402, s403, s463, c463);
wire s464 ,c464;
fa fa464 (s307, c403, s404, s464, c464);
wire s465 ,c465;
fa fa465 (s309, c404, s405, s465, c465);
wire s466 ,c466;
fa fa466 (s311, c405, s406, s466, c466);
wire s467 ,c467;
fa fa467 (s313, c406, s407, s467, c467);
wire s468 ,c468;
fa fa468 (s315, c407, s408, s468, c468);
wire s469 ,c469;
fa fa469 (s317, c408, s409, s469, c469);
wire s470 ,c470;
fa fa470 (s319, c409, s410, s470, c470);
wire s471 ,c471;
fa fa471 (s321, c410, s411, s471, c471);
wire s472 ,c472;
fa fa472 (s323, c411, s412, s472, c472);
wire s473 ,c473;
fa fa473 (s325, c412, s413, s473, c473);
wire s474 ,c474;
fa fa474 (s327, c413, s414, s474, c474);
wire s475 ,c475;
fa fa475 (s329, c414, s415, s475, c475);
wire s476 ,c476;
fa fa476 (s331, c415, s416, s476, c476);
wire s477 ,c477;
fa fa477 (s333, c416, s417, s477, c477);
wire s478 ,c478;
fa fa478 (s335, c417, s418, s478, c478);
wire s479 ,c479;
fa fa479 (s337, c418, s419, s479, c479);
wire s480 ,c480;
fa fa480 (s339, c419, s420, s480, c480);
wire s481 ,c481;
fa fa481 (s341, c420, s421, s481, c481);
wire s482 ,c482;
fa fa482 (s343, c421, s422, s482, c482);
wire s483 ,c483;
fa fa483 (s345, c422, s423, s483, c483);
wire s484 ,c484;
fa fa484 (s347, c423, s424, s484, c484);
wire s485 ,c485;
fa fa485 (s349, c424, s425, s485, c485);
wire s486 ,c486;
fa fa486 (s351, c425, s426, s486, c486);
wire s487 ,c487;
fa fa487 (s353, c426, s427, s487, c487);
wire s488 ,c488;
fa fa488 (s355, c427, s428, s488, c488);
wire s489 ,c489;
fa fa489 (s357, c428, s429, s489, c489);
wire s490 ,c490;
fa fa490 (s359, c429, s430, s490, c490);
wire s491 ,c491;
fa fa491 (s361, c430, s431, s491, c491);
wire s492 ,c492;
fa fa492 (s363, c431, s432, s492, c492);
wire s493 ,c493;
fa fa493 (s365, c432, s433, s493, c493);
wire s494 ,c494;
fa fa494 (s367, c433, s434, s494, c494);
wire s495 ,c495;
fa fa495 (s369, c434, s435, s495, c495);
wire s496 ,c496;
fa fa496 (s371, c435, s436, s496, c496);
wire s497 ,c497;
fa fa497 (s373, c436, s437, s497, c497);
wire s498 ,c498;
fa fa498 (s375, c437, s438, s498, c498);
wire s499 ,c499;
fa fa499 (s377, c438, s439, s499, c499);
wire s500 ,c500;
fa fa500 (s379, c439, s440, s500, c500);
wire s501 ,c501;
fa fa501 (s381, c440, s441, s501, c501);
wire s502 ,c502;
fa fa502 (s383, c441, s442, s502, c502);
wire s503 ,c503;
fa fa503 (s385, c442, s443, s503, c503);
wire s504 ,c504;
fa fa504 (s387, c443, s444, s504, c504);
wire s505 ,c505;
fa fa505 (s389, c444, s445, s505, c505);
wire s506 ,c506;
fa fa506 (s390, c445, s446, s506, c506);
wire s507 ,c507;
fa fa507 (s391, c446, s447, s507, c507);
wire s508 ,c508;
fa fa508 (c391, c447, s448, s508, c508);
wire s509 ,c509;
fa fa509 (pp_16[29], c448, s449, s509, c509);
wire s510 ,c510;
fa fa510 (pp_15[32], pp_16[30], c449, s510, c510);
wire s511 ,c511;
ha ha511 (pp_15[33], pp_16[31], s511, c511);


assign result0[65:0] = {pp_16[33], pp_16[32], c510, c509, c508, c507, c506, c505, c504, c503, c502, c501, c500, c499, c498, c497, c496, c495, c494, c493, c492, c491, c490, c489, c488, c487, c486, c485, c484, c483, c482, c481, c480, c479, c478, c477, c476, c475, c474, c473, c472, c471, c470, c469, c468, c467, c466, c465, c464, c463, c462, c461, c460, c459, c458, c457, c456, c455, c454, c453, c452, c451, c450, tcomp1, pp_0[1], pp_0[0] };
assign result1[65:0] = {1'b0, c511, s511, s510, s509, s508, s507, s506, s505, s504, s503, s502, s501, s500, s499, s498, s497, s496, s495, s494, s493, s492, s491, s490, s489, s488, s487, s486, s485, s484, s483, s482, s481, s480, s479, s478, s477, s476, s475, s474, s473, s472, s471, s470, s469, s468, s467, s466, s465, s464, s463, s462, s461, s460, s459, s458, s457, s456, s455, s454, s453, s452, s451, s450, 1'b0, tcomp0 };
assign result0[66] = 1'b0;
assign result1[66] = 1'b0;
endmodule


module KS_67 (
    input wire [66:0] IN1,
    input wire [66:0] IN2,
    output wire [67:0] OUT);

wire [66:0] p_0;
wire [66:0] g_0;
assign g_0 = IN1 & IN2;
assign p_0 = IN1 ^ IN2;

// KS stage 1
wire p_1_1;
wire g_1_1;
assign p_1_1 = p_0[1] & p_0[0];
assign g_1_1 = (p_0[1] & g_0[0]) | g_0[1];
wire p_1_2;
wire g_1_2;
assign p_1_2 = p_0[2] & p_0[1];
assign g_1_2 = (p_0[2] & g_0[1]) | g_0[2];
wire p_1_3;
wire g_1_3;
assign p_1_3 = p_0[3] & p_0[2];
assign g_1_3 = (p_0[3] & g_0[2]) | g_0[3];
wire p_1_4;
wire g_1_4;
assign p_1_4 = p_0[4] & p_0[3];
assign g_1_4 = (p_0[4] & g_0[3]) | g_0[4];
wire p_1_5;
wire g_1_5;
assign p_1_5 = p_0[5] & p_0[4];
assign g_1_5 = (p_0[5] & g_0[4]) | g_0[5];
wire p_1_6;
wire g_1_6;
assign p_1_6 = p_0[6] & p_0[5];
assign g_1_6 = (p_0[6] & g_0[5]) | g_0[6];
wire p_1_7;
wire g_1_7;
assign p_1_7 = p_0[7] & p_0[6];
assign g_1_7 = (p_0[7] & g_0[6]) | g_0[7];
wire p_1_8;
wire g_1_8;
assign p_1_8 = p_0[8] & p_0[7];
assign g_1_8 = (p_0[8] & g_0[7]) | g_0[8];
wire p_1_9;
wire g_1_9;
assign p_1_9 = p_0[9] & p_0[8];
assign g_1_9 = (p_0[9] & g_0[8]) | g_0[9];
wire p_1_10;
wire g_1_10;
assign p_1_10 = p_0[10] & p_0[9];
assign g_1_10 = (p_0[10] & g_0[9]) | g_0[10];
wire p_1_11;
wire g_1_11;
assign p_1_11 = p_0[11] & p_0[10];
assign g_1_11 = (p_0[11] & g_0[10]) | g_0[11];
wire p_1_12;
wire g_1_12;
assign p_1_12 = p_0[12] & p_0[11];
assign g_1_12 = (p_0[12] & g_0[11]) | g_0[12];
wire p_1_13;
wire g_1_13;
assign p_1_13 = p_0[13] & p_0[12];
assign g_1_13 = (p_0[13] & g_0[12]) | g_0[13];
wire p_1_14;
wire g_1_14;
assign p_1_14 = p_0[14] & p_0[13];
assign g_1_14 = (p_0[14] & g_0[13]) | g_0[14];
wire p_1_15;
wire g_1_15;
assign p_1_15 = p_0[15] & p_0[14];
assign g_1_15 = (p_0[15] & g_0[14]) | g_0[15];
wire p_1_16;
wire g_1_16;
assign p_1_16 = p_0[16] & p_0[15];
assign g_1_16 = (p_0[16] & g_0[15]) | g_0[16];
wire p_1_17;
wire g_1_17;
assign p_1_17 = p_0[17] & p_0[16];
assign g_1_17 = (p_0[17] & g_0[16]) | g_0[17];
wire p_1_18;
wire g_1_18;
assign p_1_18 = p_0[18] & p_0[17];
assign g_1_18 = (p_0[18] & g_0[17]) | g_0[18];
wire p_1_19;
wire g_1_19;
assign p_1_19 = p_0[19] & p_0[18];
assign g_1_19 = (p_0[19] & g_0[18]) | g_0[19];
wire p_1_20;
wire g_1_20;
assign p_1_20 = p_0[20] & p_0[19];
assign g_1_20 = (p_0[20] & g_0[19]) | g_0[20];
wire p_1_21;
wire g_1_21;
assign p_1_21 = p_0[21] & p_0[20];
assign g_1_21 = (p_0[21] & g_0[20]) | g_0[21];
wire p_1_22;
wire g_1_22;
assign p_1_22 = p_0[22] & p_0[21];
assign g_1_22 = (p_0[22] & g_0[21]) | g_0[22];
wire p_1_23;
wire g_1_23;
assign p_1_23 = p_0[23] & p_0[22];
assign g_1_23 = (p_0[23] & g_0[22]) | g_0[23];
wire p_1_24;
wire g_1_24;
assign p_1_24 = p_0[24] & p_0[23];
assign g_1_24 = (p_0[24] & g_0[23]) | g_0[24];
wire p_1_25;
wire g_1_25;
assign p_1_25 = p_0[25] & p_0[24];
assign g_1_25 = (p_0[25] & g_0[24]) | g_0[25];
wire p_1_26;
wire g_1_26;
assign p_1_26 = p_0[26] & p_0[25];
assign g_1_26 = (p_0[26] & g_0[25]) | g_0[26];
wire p_1_27;
wire g_1_27;
assign p_1_27 = p_0[27] & p_0[26];
assign g_1_27 = (p_0[27] & g_0[26]) | g_0[27];
wire p_1_28;
wire g_1_28;
assign p_1_28 = p_0[28] & p_0[27];
assign g_1_28 = (p_0[28] & g_0[27]) | g_0[28];
wire p_1_29;
wire g_1_29;
assign p_1_29 = p_0[29] & p_0[28];
assign g_1_29 = (p_0[29] & g_0[28]) | g_0[29];
wire p_1_30;
wire g_1_30;
assign p_1_30 = p_0[30] & p_0[29];
assign g_1_30 = (p_0[30] & g_0[29]) | g_0[30];
wire p_1_31;
wire g_1_31;
assign p_1_31 = p_0[31] & p_0[30];
assign g_1_31 = (p_0[31] & g_0[30]) | g_0[31];
wire p_1_32;
wire g_1_32;
assign p_1_32 = p_0[32] & p_0[31];
assign g_1_32 = (p_0[32] & g_0[31]) | g_0[32];
wire p_1_33;
wire g_1_33;
assign p_1_33 = p_0[33] & p_0[32];
assign g_1_33 = (p_0[33] & g_0[32]) | g_0[33];
wire p_1_34;
wire g_1_34;
assign p_1_34 = p_0[34] & p_0[33];
assign g_1_34 = (p_0[34] & g_0[33]) | g_0[34];
wire p_1_35;
wire g_1_35;
assign p_1_35 = p_0[35] & p_0[34];
assign g_1_35 = (p_0[35] & g_0[34]) | g_0[35];
wire p_1_36;
wire g_1_36;
assign p_1_36 = p_0[36] & p_0[35];
assign g_1_36 = (p_0[36] & g_0[35]) | g_0[36];
wire p_1_37;
wire g_1_37;
assign p_1_37 = p_0[37] & p_0[36];
assign g_1_37 = (p_0[37] & g_0[36]) | g_0[37];
wire p_1_38;
wire g_1_38;
assign p_1_38 = p_0[38] & p_0[37];
assign g_1_38 = (p_0[38] & g_0[37]) | g_0[38];
wire p_1_39;
wire g_1_39;
assign p_1_39 = p_0[39] & p_0[38];
assign g_1_39 = (p_0[39] & g_0[38]) | g_0[39];
wire p_1_40;
wire g_1_40;
assign p_1_40 = p_0[40] & p_0[39];
assign g_1_40 = (p_0[40] & g_0[39]) | g_0[40];
wire p_1_41;
wire g_1_41;
assign p_1_41 = p_0[41] & p_0[40];
assign g_1_41 = (p_0[41] & g_0[40]) | g_0[41];
wire p_1_42;
wire g_1_42;
assign p_1_42 = p_0[42] & p_0[41];
assign g_1_42 = (p_0[42] & g_0[41]) | g_0[42];
wire p_1_43;
wire g_1_43;
assign p_1_43 = p_0[43] & p_0[42];
assign g_1_43 = (p_0[43] & g_0[42]) | g_0[43];
wire p_1_44;
wire g_1_44;
assign p_1_44 = p_0[44] & p_0[43];
assign g_1_44 = (p_0[44] & g_0[43]) | g_0[44];
wire p_1_45;
wire g_1_45;
assign p_1_45 = p_0[45] & p_0[44];
assign g_1_45 = (p_0[45] & g_0[44]) | g_0[45];
wire p_1_46;
wire g_1_46;
assign p_1_46 = p_0[46] & p_0[45];
assign g_1_46 = (p_0[46] & g_0[45]) | g_0[46];
wire p_1_47;
wire g_1_47;
assign p_1_47 = p_0[47] & p_0[46];
assign g_1_47 = (p_0[47] & g_0[46]) | g_0[47];
wire p_1_48;
wire g_1_48;
assign p_1_48 = p_0[48] & p_0[47];
assign g_1_48 = (p_0[48] & g_0[47]) | g_0[48];
wire p_1_49;
wire g_1_49;
assign p_1_49 = p_0[49] & p_0[48];
assign g_1_49 = (p_0[49] & g_0[48]) | g_0[49];
wire p_1_50;
wire g_1_50;
assign p_1_50 = p_0[50] & p_0[49];
assign g_1_50 = (p_0[50] & g_0[49]) | g_0[50];
wire p_1_51;
wire g_1_51;
assign p_1_51 = p_0[51] & p_0[50];
assign g_1_51 = (p_0[51] & g_0[50]) | g_0[51];
wire p_1_52;
wire g_1_52;
assign p_1_52 = p_0[52] & p_0[51];
assign g_1_52 = (p_0[52] & g_0[51]) | g_0[52];
wire p_1_53;
wire g_1_53;
assign p_1_53 = p_0[53] & p_0[52];
assign g_1_53 = (p_0[53] & g_0[52]) | g_0[53];
wire p_1_54;
wire g_1_54;
assign p_1_54 = p_0[54] & p_0[53];
assign g_1_54 = (p_0[54] & g_0[53]) | g_0[54];
wire p_1_55;
wire g_1_55;
assign p_1_55 = p_0[55] & p_0[54];
assign g_1_55 = (p_0[55] & g_0[54]) | g_0[55];
wire p_1_56;
wire g_1_56;
assign p_1_56 = p_0[56] & p_0[55];
assign g_1_56 = (p_0[56] & g_0[55]) | g_0[56];
wire p_1_57;
wire g_1_57;
assign p_1_57 = p_0[57] & p_0[56];
assign g_1_57 = (p_0[57] & g_0[56]) | g_0[57];
wire p_1_58;
wire g_1_58;
assign p_1_58 = p_0[58] & p_0[57];
assign g_1_58 = (p_0[58] & g_0[57]) | g_0[58];
wire p_1_59;
wire g_1_59;
assign p_1_59 = p_0[59] & p_0[58];
assign g_1_59 = (p_0[59] & g_0[58]) | g_0[59];
wire p_1_60;
wire g_1_60;
assign p_1_60 = p_0[60] & p_0[59];
assign g_1_60 = (p_0[60] & g_0[59]) | g_0[60];
wire p_1_61;
wire g_1_61;
assign p_1_61 = p_0[61] & p_0[60];
assign g_1_61 = (p_0[61] & g_0[60]) | g_0[61];
wire p_1_62;
wire g_1_62;
assign p_1_62 = p_0[62] & p_0[61];
assign g_1_62 = (p_0[62] & g_0[61]) | g_0[62];
wire p_1_63;
wire g_1_63;
assign p_1_63 = p_0[63] & p_0[62];
assign g_1_63 = (p_0[63] & g_0[62]) | g_0[63];
wire p_1_64;
wire g_1_64;
assign p_1_64 = p_0[64] & p_0[63];
assign g_1_64 = (p_0[64] & g_0[63]) | g_0[64];
wire p_1_65;
wire g_1_65;
assign p_1_65 = p_0[65] & p_0[64];
assign g_1_65 = (p_0[65] & g_0[64]) | g_0[65];
wire p_1_66;
wire g_1_66;
assign p_1_66 = p_0[66] & p_0[65];
assign g_1_66 = (p_0[66] & g_0[65]) | g_0[66];

// KS stage 2
wire p_2_2;
wire g_2_2;
assign p_2_2 = p_1_2 & p_0[0];
assign g_2_2 = (p_1_2 & g_0[0]) | g_1_2;
wire p_2_3;
wire g_2_3;
assign p_2_3 = p_1_3 & p_1_1;
assign g_2_3 = (p_1_3 & g_1_1) | g_1_3;
wire p_2_4;
wire g_2_4;
assign p_2_4 = p_1_4 & p_1_2;
assign g_2_4 = (p_1_4 & g_1_2) | g_1_4;
wire p_2_5;
wire g_2_5;
assign p_2_5 = p_1_5 & p_1_3;
assign g_2_5 = (p_1_5 & g_1_3) | g_1_5;
wire p_2_6;
wire g_2_6;
assign p_2_6 = p_1_6 & p_1_4;
assign g_2_6 = (p_1_6 & g_1_4) | g_1_6;
wire p_2_7;
wire g_2_7;
assign p_2_7 = p_1_7 & p_1_5;
assign g_2_7 = (p_1_7 & g_1_5) | g_1_7;
wire p_2_8;
wire g_2_8;
assign p_2_8 = p_1_8 & p_1_6;
assign g_2_8 = (p_1_8 & g_1_6) | g_1_8;
wire p_2_9;
wire g_2_9;
assign p_2_9 = p_1_9 & p_1_7;
assign g_2_9 = (p_1_9 & g_1_7) | g_1_9;
wire p_2_10;
wire g_2_10;
assign p_2_10 = p_1_10 & p_1_8;
assign g_2_10 = (p_1_10 & g_1_8) | g_1_10;
wire p_2_11;
wire g_2_11;
assign p_2_11 = p_1_11 & p_1_9;
assign g_2_11 = (p_1_11 & g_1_9) | g_1_11;
wire p_2_12;
wire g_2_12;
assign p_2_12 = p_1_12 & p_1_10;
assign g_2_12 = (p_1_12 & g_1_10) | g_1_12;
wire p_2_13;
wire g_2_13;
assign p_2_13 = p_1_13 & p_1_11;
assign g_2_13 = (p_1_13 & g_1_11) | g_1_13;
wire p_2_14;
wire g_2_14;
assign p_2_14 = p_1_14 & p_1_12;
assign g_2_14 = (p_1_14 & g_1_12) | g_1_14;
wire p_2_15;
wire g_2_15;
assign p_2_15 = p_1_15 & p_1_13;
assign g_2_15 = (p_1_15 & g_1_13) | g_1_15;
wire p_2_16;
wire g_2_16;
assign p_2_16 = p_1_16 & p_1_14;
assign g_2_16 = (p_1_16 & g_1_14) | g_1_16;
wire p_2_17;
wire g_2_17;
assign p_2_17 = p_1_17 & p_1_15;
assign g_2_17 = (p_1_17 & g_1_15) | g_1_17;
wire p_2_18;
wire g_2_18;
assign p_2_18 = p_1_18 & p_1_16;
assign g_2_18 = (p_1_18 & g_1_16) | g_1_18;
wire p_2_19;
wire g_2_19;
assign p_2_19 = p_1_19 & p_1_17;
assign g_2_19 = (p_1_19 & g_1_17) | g_1_19;
wire p_2_20;
wire g_2_20;
assign p_2_20 = p_1_20 & p_1_18;
assign g_2_20 = (p_1_20 & g_1_18) | g_1_20;
wire p_2_21;
wire g_2_21;
assign p_2_21 = p_1_21 & p_1_19;
assign g_2_21 = (p_1_21 & g_1_19) | g_1_21;
wire p_2_22;
wire g_2_22;
assign p_2_22 = p_1_22 & p_1_20;
assign g_2_22 = (p_1_22 & g_1_20) | g_1_22;
wire p_2_23;
wire g_2_23;
assign p_2_23 = p_1_23 & p_1_21;
assign g_2_23 = (p_1_23 & g_1_21) | g_1_23;
wire p_2_24;
wire g_2_24;
assign p_2_24 = p_1_24 & p_1_22;
assign g_2_24 = (p_1_24 & g_1_22) | g_1_24;
wire p_2_25;
wire g_2_25;
assign p_2_25 = p_1_25 & p_1_23;
assign g_2_25 = (p_1_25 & g_1_23) | g_1_25;
wire p_2_26;
wire g_2_26;
assign p_2_26 = p_1_26 & p_1_24;
assign g_2_26 = (p_1_26 & g_1_24) | g_1_26;
wire p_2_27;
wire g_2_27;
assign p_2_27 = p_1_27 & p_1_25;
assign g_2_27 = (p_1_27 & g_1_25) | g_1_27;
wire p_2_28;
wire g_2_28;
assign p_2_28 = p_1_28 & p_1_26;
assign g_2_28 = (p_1_28 & g_1_26) | g_1_28;
wire p_2_29;
wire g_2_29;
assign p_2_29 = p_1_29 & p_1_27;
assign g_2_29 = (p_1_29 & g_1_27) | g_1_29;
wire p_2_30;
wire g_2_30;
assign p_2_30 = p_1_30 & p_1_28;
assign g_2_30 = (p_1_30 & g_1_28) | g_1_30;
wire p_2_31;
wire g_2_31;
assign p_2_31 = p_1_31 & p_1_29;
assign g_2_31 = (p_1_31 & g_1_29) | g_1_31;
wire p_2_32;
wire g_2_32;
assign p_2_32 = p_1_32 & p_1_30;
assign g_2_32 = (p_1_32 & g_1_30) | g_1_32;
wire p_2_33;
wire g_2_33;
assign p_2_33 = p_1_33 & p_1_31;
assign g_2_33 = (p_1_33 & g_1_31) | g_1_33;
wire p_2_34;
wire g_2_34;
assign p_2_34 = p_1_34 & p_1_32;
assign g_2_34 = (p_1_34 & g_1_32) | g_1_34;
wire p_2_35;
wire g_2_35;
assign p_2_35 = p_1_35 & p_1_33;
assign g_2_35 = (p_1_35 & g_1_33) | g_1_35;
wire p_2_36;
wire g_2_36;
assign p_2_36 = p_1_36 & p_1_34;
assign g_2_36 = (p_1_36 & g_1_34) | g_1_36;
wire p_2_37;
wire g_2_37;
assign p_2_37 = p_1_37 & p_1_35;
assign g_2_37 = (p_1_37 & g_1_35) | g_1_37;
wire p_2_38;
wire g_2_38;
assign p_2_38 = p_1_38 & p_1_36;
assign g_2_38 = (p_1_38 & g_1_36) | g_1_38;
wire p_2_39;
wire g_2_39;
assign p_2_39 = p_1_39 & p_1_37;
assign g_2_39 = (p_1_39 & g_1_37) | g_1_39;
wire p_2_40;
wire g_2_40;
assign p_2_40 = p_1_40 & p_1_38;
assign g_2_40 = (p_1_40 & g_1_38) | g_1_40;
wire p_2_41;
wire g_2_41;
assign p_2_41 = p_1_41 & p_1_39;
assign g_2_41 = (p_1_41 & g_1_39) | g_1_41;
wire p_2_42;
wire g_2_42;
assign p_2_42 = p_1_42 & p_1_40;
assign g_2_42 = (p_1_42 & g_1_40) | g_1_42;
wire p_2_43;
wire g_2_43;
assign p_2_43 = p_1_43 & p_1_41;
assign g_2_43 = (p_1_43 & g_1_41) | g_1_43;
wire p_2_44;
wire g_2_44;
assign p_2_44 = p_1_44 & p_1_42;
assign g_2_44 = (p_1_44 & g_1_42) | g_1_44;
wire p_2_45;
wire g_2_45;
assign p_2_45 = p_1_45 & p_1_43;
assign g_2_45 = (p_1_45 & g_1_43) | g_1_45;
wire p_2_46;
wire g_2_46;
assign p_2_46 = p_1_46 & p_1_44;
assign g_2_46 = (p_1_46 & g_1_44) | g_1_46;
wire p_2_47;
wire g_2_47;
assign p_2_47 = p_1_47 & p_1_45;
assign g_2_47 = (p_1_47 & g_1_45) | g_1_47;
wire p_2_48;
wire g_2_48;
assign p_2_48 = p_1_48 & p_1_46;
assign g_2_48 = (p_1_48 & g_1_46) | g_1_48;
wire p_2_49;
wire g_2_49;
assign p_2_49 = p_1_49 & p_1_47;
assign g_2_49 = (p_1_49 & g_1_47) | g_1_49;
wire p_2_50;
wire g_2_50;
assign p_2_50 = p_1_50 & p_1_48;
assign g_2_50 = (p_1_50 & g_1_48) | g_1_50;
wire p_2_51;
wire g_2_51;
assign p_2_51 = p_1_51 & p_1_49;
assign g_2_51 = (p_1_51 & g_1_49) | g_1_51;
wire p_2_52;
wire g_2_52;
assign p_2_52 = p_1_52 & p_1_50;
assign g_2_52 = (p_1_52 & g_1_50) | g_1_52;
wire p_2_53;
wire g_2_53;
assign p_2_53 = p_1_53 & p_1_51;
assign g_2_53 = (p_1_53 & g_1_51) | g_1_53;
wire p_2_54;
wire g_2_54;
assign p_2_54 = p_1_54 & p_1_52;
assign g_2_54 = (p_1_54 & g_1_52) | g_1_54;
wire p_2_55;
wire g_2_55;
assign p_2_55 = p_1_55 & p_1_53;
assign g_2_55 = (p_1_55 & g_1_53) | g_1_55;
wire p_2_56;
wire g_2_56;
assign p_2_56 = p_1_56 & p_1_54;
assign g_2_56 = (p_1_56 & g_1_54) | g_1_56;
wire p_2_57;
wire g_2_57;
assign p_2_57 = p_1_57 & p_1_55;
assign g_2_57 = (p_1_57 & g_1_55) | g_1_57;
wire p_2_58;
wire g_2_58;
assign p_2_58 = p_1_58 & p_1_56;
assign g_2_58 = (p_1_58 & g_1_56) | g_1_58;
wire p_2_59;
wire g_2_59;
assign p_2_59 = p_1_59 & p_1_57;
assign g_2_59 = (p_1_59 & g_1_57) | g_1_59;
wire p_2_60;
wire g_2_60;
assign p_2_60 = p_1_60 & p_1_58;
assign g_2_60 = (p_1_60 & g_1_58) | g_1_60;
wire p_2_61;
wire g_2_61;
assign p_2_61 = p_1_61 & p_1_59;
assign g_2_61 = (p_1_61 & g_1_59) | g_1_61;
wire p_2_62;
wire g_2_62;
assign p_2_62 = p_1_62 & p_1_60;
assign g_2_62 = (p_1_62 & g_1_60) | g_1_62;
wire p_2_63;
wire g_2_63;
assign p_2_63 = p_1_63 & p_1_61;
assign g_2_63 = (p_1_63 & g_1_61) | g_1_63;
wire p_2_64;
wire g_2_64;
assign p_2_64 = p_1_64 & p_1_62;
assign g_2_64 = (p_1_64 & g_1_62) | g_1_64;
wire p_2_65;
wire g_2_65;
assign p_2_65 = p_1_65 & p_1_63;
assign g_2_65 = (p_1_65 & g_1_63) | g_1_65;
wire p_2_66;
wire g_2_66;
assign p_2_66 = p_1_66 & p_1_64;
assign g_2_66 = (p_1_66 & g_1_64) | g_1_66;

// KS stage 3
wire p_3_4;
wire g_3_4;
assign p_3_4 = p_2_4 & p_0[0];
assign g_3_4 = (p_2_4 & g_0[0]) | g_2_4;
wire p_3_5;
wire g_3_5;
assign p_3_5 = p_2_5 & p_1_1;
assign g_3_5 = (p_2_5 & g_1_1) | g_2_5;
wire p_3_6;
wire g_3_6;
assign p_3_6 = p_2_6 & p_2_2;
assign g_3_6 = (p_2_6 & g_2_2) | g_2_6;
wire p_3_7;
wire g_3_7;
assign p_3_7 = p_2_7 & p_2_3;
assign g_3_7 = (p_2_7 & g_2_3) | g_2_7;
wire p_3_8;
wire g_3_8;
assign p_3_8 = p_2_8 & p_2_4;
assign g_3_8 = (p_2_8 & g_2_4) | g_2_8;
wire p_3_9;
wire g_3_9;
assign p_3_9 = p_2_9 & p_2_5;
assign g_3_9 = (p_2_9 & g_2_5) | g_2_9;
wire p_3_10;
wire g_3_10;
assign p_3_10 = p_2_10 & p_2_6;
assign g_3_10 = (p_2_10 & g_2_6) | g_2_10;
wire p_3_11;
wire g_3_11;
assign p_3_11 = p_2_11 & p_2_7;
assign g_3_11 = (p_2_11 & g_2_7) | g_2_11;
wire p_3_12;
wire g_3_12;
assign p_3_12 = p_2_12 & p_2_8;
assign g_3_12 = (p_2_12 & g_2_8) | g_2_12;
wire p_3_13;
wire g_3_13;
assign p_3_13 = p_2_13 & p_2_9;
assign g_3_13 = (p_2_13 & g_2_9) | g_2_13;
wire p_3_14;
wire g_3_14;
assign p_3_14 = p_2_14 & p_2_10;
assign g_3_14 = (p_2_14 & g_2_10) | g_2_14;
wire p_3_15;
wire g_3_15;
assign p_3_15 = p_2_15 & p_2_11;
assign g_3_15 = (p_2_15 & g_2_11) | g_2_15;
wire p_3_16;
wire g_3_16;
assign p_3_16 = p_2_16 & p_2_12;
assign g_3_16 = (p_2_16 & g_2_12) | g_2_16;
wire p_3_17;
wire g_3_17;
assign p_3_17 = p_2_17 & p_2_13;
assign g_3_17 = (p_2_17 & g_2_13) | g_2_17;
wire p_3_18;
wire g_3_18;
assign p_3_18 = p_2_18 & p_2_14;
assign g_3_18 = (p_2_18 & g_2_14) | g_2_18;
wire p_3_19;
wire g_3_19;
assign p_3_19 = p_2_19 & p_2_15;
assign g_3_19 = (p_2_19 & g_2_15) | g_2_19;
wire p_3_20;
wire g_3_20;
assign p_3_20 = p_2_20 & p_2_16;
assign g_3_20 = (p_2_20 & g_2_16) | g_2_20;
wire p_3_21;
wire g_3_21;
assign p_3_21 = p_2_21 & p_2_17;
assign g_3_21 = (p_2_21 & g_2_17) | g_2_21;
wire p_3_22;
wire g_3_22;
assign p_3_22 = p_2_22 & p_2_18;
assign g_3_22 = (p_2_22 & g_2_18) | g_2_22;
wire p_3_23;
wire g_3_23;
assign p_3_23 = p_2_23 & p_2_19;
assign g_3_23 = (p_2_23 & g_2_19) | g_2_23;
wire p_3_24;
wire g_3_24;
assign p_3_24 = p_2_24 & p_2_20;
assign g_3_24 = (p_2_24 & g_2_20) | g_2_24;
wire p_3_25;
wire g_3_25;
assign p_3_25 = p_2_25 & p_2_21;
assign g_3_25 = (p_2_25 & g_2_21) | g_2_25;
wire p_3_26;
wire g_3_26;
assign p_3_26 = p_2_26 & p_2_22;
assign g_3_26 = (p_2_26 & g_2_22) | g_2_26;
wire p_3_27;
wire g_3_27;
assign p_3_27 = p_2_27 & p_2_23;
assign g_3_27 = (p_2_27 & g_2_23) | g_2_27;
wire p_3_28;
wire g_3_28;
assign p_3_28 = p_2_28 & p_2_24;
assign g_3_28 = (p_2_28 & g_2_24) | g_2_28;
wire p_3_29;
wire g_3_29;
assign p_3_29 = p_2_29 & p_2_25;
assign g_3_29 = (p_2_29 & g_2_25) | g_2_29;
wire p_3_30;
wire g_3_30;
assign p_3_30 = p_2_30 & p_2_26;
assign g_3_30 = (p_2_30 & g_2_26) | g_2_30;
wire p_3_31;
wire g_3_31;
assign p_3_31 = p_2_31 & p_2_27;
assign g_3_31 = (p_2_31 & g_2_27) | g_2_31;
wire p_3_32;
wire g_3_32;
assign p_3_32 = p_2_32 & p_2_28;
assign g_3_32 = (p_2_32 & g_2_28) | g_2_32;
wire p_3_33;
wire g_3_33;
assign p_3_33 = p_2_33 & p_2_29;
assign g_3_33 = (p_2_33 & g_2_29) | g_2_33;
wire p_3_34;
wire g_3_34;
assign p_3_34 = p_2_34 & p_2_30;
assign g_3_34 = (p_2_34 & g_2_30) | g_2_34;
wire p_3_35;
wire g_3_35;
assign p_3_35 = p_2_35 & p_2_31;
assign g_3_35 = (p_2_35 & g_2_31) | g_2_35;
wire p_3_36;
wire g_3_36;
assign p_3_36 = p_2_36 & p_2_32;
assign g_3_36 = (p_2_36 & g_2_32) | g_2_36;
wire p_3_37;
wire g_3_37;
assign p_3_37 = p_2_37 & p_2_33;
assign g_3_37 = (p_2_37 & g_2_33) | g_2_37;
wire p_3_38;
wire g_3_38;
assign p_3_38 = p_2_38 & p_2_34;
assign g_3_38 = (p_2_38 & g_2_34) | g_2_38;
wire p_3_39;
wire g_3_39;
assign p_3_39 = p_2_39 & p_2_35;
assign g_3_39 = (p_2_39 & g_2_35) | g_2_39;
wire p_3_40;
wire g_3_40;
assign p_3_40 = p_2_40 & p_2_36;
assign g_3_40 = (p_2_40 & g_2_36) | g_2_40;
wire p_3_41;
wire g_3_41;
assign p_3_41 = p_2_41 & p_2_37;
assign g_3_41 = (p_2_41 & g_2_37) | g_2_41;
wire p_3_42;
wire g_3_42;
assign p_3_42 = p_2_42 & p_2_38;
assign g_3_42 = (p_2_42 & g_2_38) | g_2_42;
wire p_3_43;
wire g_3_43;
assign p_3_43 = p_2_43 & p_2_39;
assign g_3_43 = (p_2_43 & g_2_39) | g_2_43;
wire p_3_44;
wire g_3_44;
assign p_3_44 = p_2_44 & p_2_40;
assign g_3_44 = (p_2_44 & g_2_40) | g_2_44;
wire p_3_45;
wire g_3_45;
assign p_3_45 = p_2_45 & p_2_41;
assign g_3_45 = (p_2_45 & g_2_41) | g_2_45;
wire p_3_46;
wire g_3_46;
assign p_3_46 = p_2_46 & p_2_42;
assign g_3_46 = (p_2_46 & g_2_42) | g_2_46;
wire p_3_47;
wire g_3_47;
assign p_3_47 = p_2_47 & p_2_43;
assign g_3_47 = (p_2_47 & g_2_43) | g_2_47;
wire p_3_48;
wire g_3_48;
assign p_3_48 = p_2_48 & p_2_44;
assign g_3_48 = (p_2_48 & g_2_44) | g_2_48;
wire p_3_49;
wire g_3_49;
assign p_3_49 = p_2_49 & p_2_45;
assign g_3_49 = (p_2_49 & g_2_45) | g_2_49;
wire p_3_50;
wire g_3_50;
assign p_3_50 = p_2_50 & p_2_46;
assign g_3_50 = (p_2_50 & g_2_46) | g_2_50;
wire p_3_51;
wire g_3_51;
assign p_3_51 = p_2_51 & p_2_47;
assign g_3_51 = (p_2_51 & g_2_47) | g_2_51;
wire p_3_52;
wire g_3_52;
assign p_3_52 = p_2_52 & p_2_48;
assign g_3_52 = (p_2_52 & g_2_48) | g_2_52;
wire p_3_53;
wire g_3_53;
assign p_3_53 = p_2_53 & p_2_49;
assign g_3_53 = (p_2_53 & g_2_49) | g_2_53;
wire p_3_54;
wire g_3_54;
assign p_3_54 = p_2_54 & p_2_50;
assign g_3_54 = (p_2_54 & g_2_50) | g_2_54;
wire p_3_55;
wire g_3_55;
assign p_3_55 = p_2_55 & p_2_51;
assign g_3_55 = (p_2_55 & g_2_51) | g_2_55;
wire p_3_56;
wire g_3_56;
assign p_3_56 = p_2_56 & p_2_52;
assign g_3_56 = (p_2_56 & g_2_52) | g_2_56;
wire p_3_57;
wire g_3_57;
assign p_3_57 = p_2_57 & p_2_53;
assign g_3_57 = (p_2_57 & g_2_53) | g_2_57;
wire p_3_58;
wire g_3_58;
assign p_3_58 = p_2_58 & p_2_54;
assign g_3_58 = (p_2_58 & g_2_54) | g_2_58;
wire p_3_59;
wire g_3_59;
assign p_3_59 = p_2_59 & p_2_55;
assign g_3_59 = (p_2_59 & g_2_55) | g_2_59;
wire p_3_60;
wire g_3_60;
assign p_3_60 = p_2_60 & p_2_56;
assign g_3_60 = (p_2_60 & g_2_56) | g_2_60;
wire p_3_61;
wire g_3_61;
assign p_3_61 = p_2_61 & p_2_57;
assign g_3_61 = (p_2_61 & g_2_57) | g_2_61;
wire p_3_62;
wire g_3_62;
assign p_3_62 = p_2_62 & p_2_58;
assign g_3_62 = (p_2_62 & g_2_58) | g_2_62;
wire p_3_63;
wire g_3_63;
assign p_3_63 = p_2_63 & p_2_59;
assign g_3_63 = (p_2_63 & g_2_59) | g_2_63;
wire p_3_64;
wire g_3_64;
assign p_3_64 = p_2_64 & p_2_60;
assign g_3_64 = (p_2_64 & g_2_60) | g_2_64;
wire p_3_65;
wire g_3_65;
assign p_3_65 = p_2_65 & p_2_61;
assign g_3_65 = (p_2_65 & g_2_61) | g_2_65;
wire p_3_66;
wire g_3_66;
assign p_3_66 = p_2_66 & p_2_62;
assign g_3_66 = (p_2_66 & g_2_62) | g_2_66;

// KS stage 4
wire p_4_8;
wire g_4_8;
assign p_4_8 = p_3_8 & p_0[0];
assign g_4_8 = (p_3_8 & g_0[0]) | g_3_8;
wire p_4_9;
wire g_4_9;
assign p_4_9 = p_3_9 & p_1_1;
assign g_4_9 = (p_3_9 & g_1_1) | g_3_9;
wire p_4_10;
wire g_4_10;
assign p_4_10 = p_3_10 & p_2_2;
assign g_4_10 = (p_3_10 & g_2_2) | g_3_10;
wire p_4_11;
wire g_4_11;
assign p_4_11 = p_3_11 & p_2_3;
assign g_4_11 = (p_3_11 & g_2_3) | g_3_11;
wire p_4_12;
wire g_4_12;
assign p_4_12 = p_3_12 & p_3_4;
assign g_4_12 = (p_3_12 & g_3_4) | g_3_12;
wire p_4_13;
wire g_4_13;
assign p_4_13 = p_3_13 & p_3_5;
assign g_4_13 = (p_3_13 & g_3_5) | g_3_13;
wire p_4_14;
wire g_4_14;
assign p_4_14 = p_3_14 & p_3_6;
assign g_4_14 = (p_3_14 & g_3_6) | g_3_14;
wire p_4_15;
wire g_4_15;
assign p_4_15 = p_3_15 & p_3_7;
assign g_4_15 = (p_3_15 & g_3_7) | g_3_15;
wire p_4_16;
wire g_4_16;
assign p_4_16 = p_3_16 & p_3_8;
assign g_4_16 = (p_3_16 & g_3_8) | g_3_16;
wire p_4_17;
wire g_4_17;
assign p_4_17 = p_3_17 & p_3_9;
assign g_4_17 = (p_3_17 & g_3_9) | g_3_17;
wire p_4_18;
wire g_4_18;
assign p_4_18 = p_3_18 & p_3_10;
assign g_4_18 = (p_3_18 & g_3_10) | g_3_18;
wire p_4_19;
wire g_4_19;
assign p_4_19 = p_3_19 & p_3_11;
assign g_4_19 = (p_3_19 & g_3_11) | g_3_19;
wire p_4_20;
wire g_4_20;
assign p_4_20 = p_3_20 & p_3_12;
assign g_4_20 = (p_3_20 & g_3_12) | g_3_20;
wire p_4_21;
wire g_4_21;
assign p_4_21 = p_3_21 & p_3_13;
assign g_4_21 = (p_3_21 & g_3_13) | g_3_21;
wire p_4_22;
wire g_4_22;
assign p_4_22 = p_3_22 & p_3_14;
assign g_4_22 = (p_3_22 & g_3_14) | g_3_22;
wire p_4_23;
wire g_4_23;
assign p_4_23 = p_3_23 & p_3_15;
assign g_4_23 = (p_3_23 & g_3_15) | g_3_23;
wire p_4_24;
wire g_4_24;
assign p_4_24 = p_3_24 & p_3_16;
assign g_4_24 = (p_3_24 & g_3_16) | g_3_24;
wire p_4_25;
wire g_4_25;
assign p_4_25 = p_3_25 & p_3_17;
assign g_4_25 = (p_3_25 & g_3_17) | g_3_25;
wire p_4_26;
wire g_4_26;
assign p_4_26 = p_3_26 & p_3_18;
assign g_4_26 = (p_3_26 & g_3_18) | g_3_26;
wire p_4_27;
wire g_4_27;
assign p_4_27 = p_3_27 & p_3_19;
assign g_4_27 = (p_3_27 & g_3_19) | g_3_27;
wire p_4_28;
wire g_4_28;
assign p_4_28 = p_3_28 & p_3_20;
assign g_4_28 = (p_3_28 & g_3_20) | g_3_28;
wire p_4_29;
wire g_4_29;
assign p_4_29 = p_3_29 & p_3_21;
assign g_4_29 = (p_3_29 & g_3_21) | g_3_29;
wire p_4_30;
wire g_4_30;
assign p_4_30 = p_3_30 & p_3_22;
assign g_4_30 = (p_3_30 & g_3_22) | g_3_30;
wire p_4_31;
wire g_4_31;
assign p_4_31 = p_3_31 & p_3_23;
assign g_4_31 = (p_3_31 & g_3_23) | g_3_31;
wire p_4_32;
wire g_4_32;
assign p_4_32 = p_3_32 & p_3_24;
assign g_4_32 = (p_3_32 & g_3_24) | g_3_32;
wire p_4_33;
wire g_4_33;
assign p_4_33 = p_3_33 & p_3_25;
assign g_4_33 = (p_3_33 & g_3_25) | g_3_33;
wire p_4_34;
wire g_4_34;
assign p_4_34 = p_3_34 & p_3_26;
assign g_4_34 = (p_3_34 & g_3_26) | g_3_34;
wire p_4_35;
wire g_4_35;
assign p_4_35 = p_3_35 & p_3_27;
assign g_4_35 = (p_3_35 & g_3_27) | g_3_35;
wire p_4_36;
wire g_4_36;
assign p_4_36 = p_3_36 & p_3_28;
assign g_4_36 = (p_3_36 & g_3_28) | g_3_36;
wire p_4_37;
wire g_4_37;
assign p_4_37 = p_3_37 & p_3_29;
assign g_4_37 = (p_3_37 & g_3_29) | g_3_37;
wire p_4_38;
wire g_4_38;
assign p_4_38 = p_3_38 & p_3_30;
assign g_4_38 = (p_3_38 & g_3_30) | g_3_38;
wire p_4_39;
wire g_4_39;
assign p_4_39 = p_3_39 & p_3_31;
assign g_4_39 = (p_3_39 & g_3_31) | g_3_39;
wire p_4_40;
wire g_4_40;
assign p_4_40 = p_3_40 & p_3_32;
assign g_4_40 = (p_3_40 & g_3_32) | g_3_40;
wire p_4_41;
wire g_4_41;
assign p_4_41 = p_3_41 & p_3_33;
assign g_4_41 = (p_3_41 & g_3_33) | g_3_41;
wire p_4_42;
wire g_4_42;
assign p_4_42 = p_3_42 & p_3_34;
assign g_4_42 = (p_3_42 & g_3_34) | g_3_42;
wire p_4_43;
wire g_4_43;
assign p_4_43 = p_3_43 & p_3_35;
assign g_4_43 = (p_3_43 & g_3_35) | g_3_43;
wire p_4_44;
wire g_4_44;
assign p_4_44 = p_3_44 & p_3_36;
assign g_4_44 = (p_3_44 & g_3_36) | g_3_44;
wire p_4_45;
wire g_4_45;
assign p_4_45 = p_3_45 & p_3_37;
assign g_4_45 = (p_3_45 & g_3_37) | g_3_45;
wire p_4_46;
wire g_4_46;
assign p_4_46 = p_3_46 & p_3_38;
assign g_4_46 = (p_3_46 & g_3_38) | g_3_46;
wire p_4_47;
wire g_4_47;
assign p_4_47 = p_3_47 & p_3_39;
assign g_4_47 = (p_3_47 & g_3_39) | g_3_47;
wire p_4_48;
wire g_4_48;
assign p_4_48 = p_3_48 & p_3_40;
assign g_4_48 = (p_3_48 & g_3_40) | g_3_48;
wire p_4_49;
wire g_4_49;
assign p_4_49 = p_3_49 & p_3_41;
assign g_4_49 = (p_3_49 & g_3_41) | g_3_49;
wire p_4_50;
wire g_4_50;
assign p_4_50 = p_3_50 & p_3_42;
assign g_4_50 = (p_3_50 & g_3_42) | g_3_50;
wire p_4_51;
wire g_4_51;
assign p_4_51 = p_3_51 & p_3_43;
assign g_4_51 = (p_3_51 & g_3_43) | g_3_51;
wire p_4_52;
wire g_4_52;
assign p_4_52 = p_3_52 & p_3_44;
assign g_4_52 = (p_3_52 & g_3_44) | g_3_52;
wire p_4_53;
wire g_4_53;
assign p_4_53 = p_3_53 & p_3_45;
assign g_4_53 = (p_3_53 & g_3_45) | g_3_53;
wire p_4_54;
wire g_4_54;
assign p_4_54 = p_3_54 & p_3_46;
assign g_4_54 = (p_3_54 & g_3_46) | g_3_54;
wire p_4_55;
wire g_4_55;
assign p_4_55 = p_3_55 & p_3_47;
assign g_4_55 = (p_3_55 & g_3_47) | g_3_55;
wire p_4_56;
wire g_4_56;
assign p_4_56 = p_3_56 & p_3_48;
assign g_4_56 = (p_3_56 & g_3_48) | g_3_56;
wire p_4_57;
wire g_4_57;
assign p_4_57 = p_3_57 & p_3_49;
assign g_4_57 = (p_3_57 & g_3_49) | g_3_57;
wire p_4_58;
wire g_4_58;
assign p_4_58 = p_3_58 & p_3_50;
assign g_4_58 = (p_3_58 & g_3_50) | g_3_58;
wire p_4_59;
wire g_4_59;
assign p_4_59 = p_3_59 & p_3_51;
assign g_4_59 = (p_3_59 & g_3_51) | g_3_59;
wire p_4_60;
wire g_4_60;
assign p_4_60 = p_3_60 & p_3_52;
assign g_4_60 = (p_3_60 & g_3_52) | g_3_60;
wire p_4_61;
wire g_4_61;
assign p_4_61 = p_3_61 & p_3_53;
assign g_4_61 = (p_3_61 & g_3_53) | g_3_61;
wire p_4_62;
wire g_4_62;
assign p_4_62 = p_3_62 & p_3_54;
assign g_4_62 = (p_3_62 & g_3_54) | g_3_62;
wire p_4_63;
wire g_4_63;
assign p_4_63 = p_3_63 & p_3_55;
assign g_4_63 = (p_3_63 & g_3_55) | g_3_63;
wire p_4_64;
wire g_4_64;
assign p_4_64 = p_3_64 & p_3_56;
assign g_4_64 = (p_3_64 & g_3_56) | g_3_64;
wire p_4_65;
wire g_4_65;
assign p_4_65 = p_3_65 & p_3_57;
assign g_4_65 = (p_3_65 & g_3_57) | g_3_65;
wire p_4_66;
wire g_4_66;
assign p_4_66 = p_3_66 & p_3_58;
assign g_4_66 = (p_3_66 & g_3_58) | g_3_66;

// KS stage 5
wire p_5_16;
wire g_5_16;
assign p_5_16 = p_4_16 & p_0[0];
assign g_5_16 = (p_4_16 & g_0[0]) | g_4_16;
wire p_5_17;
wire g_5_17;
assign p_5_17 = p_4_17 & p_1_1;
assign g_5_17 = (p_4_17 & g_1_1) | g_4_17;
wire p_5_18;
wire g_5_18;
assign p_5_18 = p_4_18 & p_2_2;
assign g_5_18 = (p_4_18 & g_2_2) | g_4_18;
wire p_5_19;
wire g_5_19;
assign p_5_19 = p_4_19 & p_2_3;
assign g_5_19 = (p_4_19 & g_2_3) | g_4_19;
wire p_5_20;
wire g_5_20;
assign p_5_20 = p_4_20 & p_3_4;
assign g_5_20 = (p_4_20 & g_3_4) | g_4_20;
wire p_5_21;
wire g_5_21;
assign p_5_21 = p_4_21 & p_3_5;
assign g_5_21 = (p_4_21 & g_3_5) | g_4_21;
wire p_5_22;
wire g_5_22;
assign p_5_22 = p_4_22 & p_3_6;
assign g_5_22 = (p_4_22 & g_3_6) | g_4_22;
wire p_5_23;
wire g_5_23;
assign p_5_23 = p_4_23 & p_3_7;
assign g_5_23 = (p_4_23 & g_3_7) | g_4_23;
wire p_5_24;
wire g_5_24;
assign p_5_24 = p_4_24 & p_4_8;
assign g_5_24 = (p_4_24 & g_4_8) | g_4_24;
wire p_5_25;
wire g_5_25;
assign p_5_25 = p_4_25 & p_4_9;
assign g_5_25 = (p_4_25 & g_4_9) | g_4_25;
wire p_5_26;
wire g_5_26;
assign p_5_26 = p_4_26 & p_4_10;
assign g_5_26 = (p_4_26 & g_4_10) | g_4_26;
wire p_5_27;
wire g_5_27;
assign p_5_27 = p_4_27 & p_4_11;
assign g_5_27 = (p_4_27 & g_4_11) | g_4_27;
wire p_5_28;
wire g_5_28;
assign p_5_28 = p_4_28 & p_4_12;
assign g_5_28 = (p_4_28 & g_4_12) | g_4_28;
wire p_5_29;
wire g_5_29;
assign p_5_29 = p_4_29 & p_4_13;
assign g_5_29 = (p_4_29 & g_4_13) | g_4_29;
wire p_5_30;
wire g_5_30;
assign p_5_30 = p_4_30 & p_4_14;
assign g_5_30 = (p_4_30 & g_4_14) | g_4_30;
wire p_5_31;
wire g_5_31;
assign p_5_31 = p_4_31 & p_4_15;
assign g_5_31 = (p_4_31 & g_4_15) | g_4_31;
wire p_5_32;
wire g_5_32;
assign p_5_32 = p_4_32 & p_4_16;
assign g_5_32 = (p_4_32 & g_4_16) | g_4_32;
wire p_5_33;
wire g_5_33;
assign p_5_33 = p_4_33 & p_4_17;
assign g_5_33 = (p_4_33 & g_4_17) | g_4_33;
wire p_5_34;
wire g_5_34;
assign p_5_34 = p_4_34 & p_4_18;
assign g_5_34 = (p_4_34 & g_4_18) | g_4_34;
wire p_5_35;
wire g_5_35;
assign p_5_35 = p_4_35 & p_4_19;
assign g_5_35 = (p_4_35 & g_4_19) | g_4_35;
wire p_5_36;
wire g_5_36;
assign p_5_36 = p_4_36 & p_4_20;
assign g_5_36 = (p_4_36 & g_4_20) | g_4_36;
wire p_5_37;
wire g_5_37;
assign p_5_37 = p_4_37 & p_4_21;
assign g_5_37 = (p_4_37 & g_4_21) | g_4_37;
wire p_5_38;
wire g_5_38;
assign p_5_38 = p_4_38 & p_4_22;
assign g_5_38 = (p_4_38 & g_4_22) | g_4_38;
wire p_5_39;
wire g_5_39;
assign p_5_39 = p_4_39 & p_4_23;
assign g_5_39 = (p_4_39 & g_4_23) | g_4_39;
wire p_5_40;
wire g_5_40;
assign p_5_40 = p_4_40 & p_4_24;
assign g_5_40 = (p_4_40 & g_4_24) | g_4_40;
wire p_5_41;
wire g_5_41;
assign p_5_41 = p_4_41 & p_4_25;
assign g_5_41 = (p_4_41 & g_4_25) | g_4_41;
wire p_5_42;
wire g_5_42;
assign p_5_42 = p_4_42 & p_4_26;
assign g_5_42 = (p_4_42 & g_4_26) | g_4_42;
wire p_5_43;
wire g_5_43;
assign p_5_43 = p_4_43 & p_4_27;
assign g_5_43 = (p_4_43 & g_4_27) | g_4_43;
wire p_5_44;
wire g_5_44;
assign p_5_44 = p_4_44 & p_4_28;
assign g_5_44 = (p_4_44 & g_4_28) | g_4_44;
wire p_5_45;
wire g_5_45;
assign p_5_45 = p_4_45 & p_4_29;
assign g_5_45 = (p_4_45 & g_4_29) | g_4_45;
wire p_5_46;
wire g_5_46;
assign p_5_46 = p_4_46 & p_4_30;
assign g_5_46 = (p_4_46 & g_4_30) | g_4_46;
wire p_5_47;
wire g_5_47;
assign p_5_47 = p_4_47 & p_4_31;
assign g_5_47 = (p_4_47 & g_4_31) | g_4_47;
wire p_5_48;
wire g_5_48;
assign p_5_48 = p_4_48 & p_4_32;
assign g_5_48 = (p_4_48 & g_4_32) | g_4_48;
wire p_5_49;
wire g_5_49;
assign p_5_49 = p_4_49 & p_4_33;
assign g_5_49 = (p_4_49 & g_4_33) | g_4_49;
wire p_5_50;
wire g_5_50;
assign p_5_50 = p_4_50 & p_4_34;
assign g_5_50 = (p_4_50 & g_4_34) | g_4_50;
wire p_5_51;
wire g_5_51;
assign p_5_51 = p_4_51 & p_4_35;
assign g_5_51 = (p_4_51 & g_4_35) | g_4_51;
wire p_5_52;
wire g_5_52;
assign p_5_52 = p_4_52 & p_4_36;
assign g_5_52 = (p_4_52 & g_4_36) | g_4_52;
wire p_5_53;
wire g_5_53;
assign p_5_53 = p_4_53 & p_4_37;
assign g_5_53 = (p_4_53 & g_4_37) | g_4_53;
wire p_5_54;
wire g_5_54;
assign p_5_54 = p_4_54 & p_4_38;
assign g_5_54 = (p_4_54 & g_4_38) | g_4_54;
wire p_5_55;
wire g_5_55;
assign p_5_55 = p_4_55 & p_4_39;
assign g_5_55 = (p_4_55 & g_4_39) | g_4_55;
wire p_5_56;
wire g_5_56;
assign p_5_56 = p_4_56 & p_4_40;
assign g_5_56 = (p_4_56 & g_4_40) | g_4_56;
wire p_5_57;
wire g_5_57;
assign p_5_57 = p_4_57 & p_4_41;
assign g_5_57 = (p_4_57 & g_4_41) | g_4_57;
wire p_5_58;
wire g_5_58;
assign p_5_58 = p_4_58 & p_4_42;
assign g_5_58 = (p_4_58 & g_4_42) | g_4_58;
wire p_5_59;
wire g_5_59;
assign p_5_59 = p_4_59 & p_4_43;
assign g_5_59 = (p_4_59 & g_4_43) | g_4_59;
wire p_5_60;
wire g_5_60;
assign p_5_60 = p_4_60 & p_4_44;
assign g_5_60 = (p_4_60 & g_4_44) | g_4_60;
wire p_5_61;
wire g_5_61;
assign p_5_61 = p_4_61 & p_4_45;
assign g_5_61 = (p_4_61 & g_4_45) | g_4_61;
wire p_5_62;
wire g_5_62;
assign p_5_62 = p_4_62 & p_4_46;
assign g_5_62 = (p_4_62 & g_4_46) | g_4_62;
wire p_5_63;
wire g_5_63;
assign p_5_63 = p_4_63 & p_4_47;
assign g_5_63 = (p_4_63 & g_4_47) | g_4_63;
wire p_5_64;
wire g_5_64;
assign p_5_64 = p_4_64 & p_4_48;
assign g_5_64 = (p_4_64 & g_4_48) | g_4_64;
wire p_5_65;
wire g_5_65;
assign p_5_65 = p_4_65 & p_4_49;
assign g_5_65 = (p_4_65 & g_4_49) | g_4_65;
wire p_5_66;
wire g_5_66;
assign p_5_66 = p_4_66 & p_4_50;
assign g_5_66 = (p_4_66 & g_4_50) | g_4_66;

// KS stage 6
wire p_6_32;
wire g_6_32;
assign p_6_32 = p_5_32 & p_0[0];
assign g_6_32 = (p_5_32 & g_0[0]) | g_5_32;
wire p_6_33;
wire g_6_33;
assign p_6_33 = p_5_33 & p_1_1;
assign g_6_33 = (p_5_33 & g_1_1) | g_5_33;
wire p_6_34;
wire g_6_34;
assign p_6_34 = p_5_34 & p_2_2;
assign g_6_34 = (p_5_34 & g_2_2) | g_5_34;
wire p_6_35;
wire g_6_35;
assign p_6_35 = p_5_35 & p_2_3;
assign g_6_35 = (p_5_35 & g_2_3) | g_5_35;
wire p_6_36;
wire g_6_36;
assign p_6_36 = p_5_36 & p_3_4;
assign g_6_36 = (p_5_36 & g_3_4) | g_5_36;
wire p_6_37;
wire g_6_37;
assign p_6_37 = p_5_37 & p_3_5;
assign g_6_37 = (p_5_37 & g_3_5) | g_5_37;
wire p_6_38;
wire g_6_38;
assign p_6_38 = p_5_38 & p_3_6;
assign g_6_38 = (p_5_38 & g_3_6) | g_5_38;
wire p_6_39;
wire g_6_39;
assign p_6_39 = p_5_39 & p_3_7;
assign g_6_39 = (p_5_39 & g_3_7) | g_5_39;
wire p_6_40;
wire g_6_40;
assign p_6_40 = p_5_40 & p_4_8;
assign g_6_40 = (p_5_40 & g_4_8) | g_5_40;
wire p_6_41;
wire g_6_41;
assign p_6_41 = p_5_41 & p_4_9;
assign g_6_41 = (p_5_41 & g_4_9) | g_5_41;
wire p_6_42;
wire g_6_42;
assign p_6_42 = p_5_42 & p_4_10;
assign g_6_42 = (p_5_42 & g_4_10) | g_5_42;
wire p_6_43;
wire g_6_43;
assign p_6_43 = p_5_43 & p_4_11;
assign g_6_43 = (p_5_43 & g_4_11) | g_5_43;
wire p_6_44;
wire g_6_44;
assign p_6_44 = p_5_44 & p_4_12;
assign g_6_44 = (p_5_44 & g_4_12) | g_5_44;
wire p_6_45;
wire g_6_45;
assign p_6_45 = p_5_45 & p_4_13;
assign g_6_45 = (p_5_45 & g_4_13) | g_5_45;
wire p_6_46;
wire g_6_46;
assign p_6_46 = p_5_46 & p_4_14;
assign g_6_46 = (p_5_46 & g_4_14) | g_5_46;
wire p_6_47;
wire g_6_47;
assign p_6_47 = p_5_47 & p_4_15;
assign g_6_47 = (p_5_47 & g_4_15) | g_5_47;
wire p_6_48;
wire g_6_48;
assign p_6_48 = p_5_48 & p_5_16;
assign g_6_48 = (p_5_48 & g_5_16) | g_5_48;
wire p_6_49;
wire g_6_49;
assign p_6_49 = p_5_49 & p_5_17;
assign g_6_49 = (p_5_49 & g_5_17) | g_5_49;
wire p_6_50;
wire g_6_50;
assign p_6_50 = p_5_50 & p_5_18;
assign g_6_50 = (p_5_50 & g_5_18) | g_5_50;
wire p_6_51;
wire g_6_51;
assign p_6_51 = p_5_51 & p_5_19;
assign g_6_51 = (p_5_51 & g_5_19) | g_5_51;
wire p_6_52;
wire g_6_52;
assign p_6_52 = p_5_52 & p_5_20;
assign g_6_52 = (p_5_52 & g_5_20) | g_5_52;
wire p_6_53;
wire g_6_53;
assign p_6_53 = p_5_53 & p_5_21;
assign g_6_53 = (p_5_53 & g_5_21) | g_5_53;
wire p_6_54;
wire g_6_54;
assign p_6_54 = p_5_54 & p_5_22;
assign g_6_54 = (p_5_54 & g_5_22) | g_5_54;
wire p_6_55;
wire g_6_55;
assign p_6_55 = p_5_55 & p_5_23;
assign g_6_55 = (p_5_55 & g_5_23) | g_5_55;
wire p_6_56;
wire g_6_56;
assign p_6_56 = p_5_56 & p_5_24;
assign g_6_56 = (p_5_56 & g_5_24) | g_5_56;
wire p_6_57;
wire g_6_57;
assign p_6_57 = p_5_57 & p_5_25;
assign g_6_57 = (p_5_57 & g_5_25) | g_5_57;
wire p_6_58;
wire g_6_58;
assign p_6_58 = p_5_58 & p_5_26;
assign g_6_58 = (p_5_58 & g_5_26) | g_5_58;
wire p_6_59;
wire g_6_59;
assign p_6_59 = p_5_59 & p_5_27;
assign g_6_59 = (p_5_59 & g_5_27) | g_5_59;
wire p_6_60;
wire g_6_60;
assign p_6_60 = p_5_60 & p_5_28;
assign g_6_60 = (p_5_60 & g_5_28) | g_5_60;
wire p_6_61;
wire g_6_61;
assign p_6_61 = p_5_61 & p_5_29;
assign g_6_61 = (p_5_61 & g_5_29) | g_5_61;
wire p_6_62;
wire g_6_62;
assign p_6_62 = p_5_62 & p_5_30;
assign g_6_62 = (p_5_62 & g_5_30) | g_5_62;
wire p_6_63;
wire g_6_63;
assign p_6_63 = p_5_63 & p_5_31;
assign g_6_63 = (p_5_63 & g_5_31) | g_5_63;
wire p_6_64;
wire g_6_64;
assign p_6_64 = p_5_64 & p_5_32;
assign g_6_64 = (p_5_64 & g_5_32) | g_5_64;
wire p_6_65;
wire g_6_65;
assign p_6_65 = p_5_65 & p_5_33;
assign g_6_65 = (p_5_65 & g_5_33) | g_5_65;
wire p_6_66;
wire g_6_66;
assign p_6_66 = p_5_66 & p_5_34;
assign g_6_66 = (p_5_66 & g_5_34) | g_5_66;

// KS stage 7
wire p_7_64;
wire g_7_64;
assign p_7_64 = p_6_64 & p_0[0];
assign g_7_64 = (p_6_64 & g_0[0]) | g_6_64;
wire p_7_65;
wire g_7_65;
assign p_7_65 = p_6_65 & p_1_1;
assign g_7_65 = (p_6_65 & g_1_1) | g_6_65;
wire p_7_66;
wire g_7_66;
assign p_7_66 = p_6_66 & p_2_2;
assign g_7_66 = (p_6_66 & g_2_2) | g_6_66;

// KS postprocess
assign OUT[0] = p_0[0];
assign OUT[1] = p_0[1] ^ g_0[0];
assign OUT[2] = p_0[2] ^ g_1_1;
assign OUT[3] = p_0[3] ^ g_2_2;
assign OUT[4] = p_0[4] ^ g_2_3;
assign OUT[5] = p_0[5] ^ g_3_4;
assign OUT[6] = p_0[6] ^ g_3_5;
assign OUT[7] = p_0[7] ^ g_3_6;
assign OUT[8] = p_0[8] ^ g_3_7;
assign OUT[9] = p_0[9] ^ g_4_8;
assign OUT[10] = p_0[10] ^ g_4_9;
assign OUT[11] = p_0[11] ^ g_4_10;
assign OUT[12] = p_0[12] ^ g_4_11;
assign OUT[13] = p_0[13] ^ g_4_12;
assign OUT[14] = p_0[14] ^ g_4_13;
assign OUT[15] = p_0[15] ^ g_4_14;
assign OUT[16] = p_0[16] ^ g_4_15;
assign OUT[17] = p_0[17] ^ g_5_16;
assign OUT[18] = p_0[18] ^ g_5_17;
assign OUT[19] = p_0[19] ^ g_5_18;
assign OUT[20] = p_0[20] ^ g_5_19;
assign OUT[21] = p_0[21] ^ g_5_20;
assign OUT[22] = p_0[22] ^ g_5_21;
assign OUT[23] = p_0[23] ^ g_5_22;
assign OUT[24] = p_0[24] ^ g_5_23;
assign OUT[25] = p_0[25] ^ g_5_24;
assign OUT[26] = p_0[26] ^ g_5_25;
assign OUT[27] = p_0[27] ^ g_5_26;
assign OUT[28] = p_0[28] ^ g_5_27;
assign OUT[29] = p_0[29] ^ g_5_28;
assign OUT[30] = p_0[30] ^ g_5_29;
assign OUT[31] = p_0[31] ^ g_5_30;
assign OUT[32] = p_0[32] ^ g_5_31;
assign OUT[33] = p_0[33] ^ g_6_32;
assign OUT[34] = p_0[34] ^ g_6_33;
assign OUT[35] = p_0[35] ^ g_6_34;
assign OUT[36] = p_0[36] ^ g_6_35;
assign OUT[37] = p_0[37] ^ g_6_36;
assign OUT[38] = p_0[38] ^ g_6_37;
assign OUT[39] = p_0[39] ^ g_6_38;
assign OUT[40] = p_0[40] ^ g_6_39;
assign OUT[41] = p_0[41] ^ g_6_40;
assign OUT[42] = p_0[42] ^ g_6_41;
assign OUT[43] = p_0[43] ^ g_6_42;
assign OUT[44] = p_0[44] ^ g_6_43;
assign OUT[45] = p_0[45] ^ g_6_44;
assign OUT[46] = p_0[46] ^ g_6_45;
assign OUT[47] = p_0[47] ^ g_6_46;
assign OUT[48] = p_0[48] ^ g_6_47;
assign OUT[49] = p_0[49] ^ g_6_48;
assign OUT[50] = p_0[50] ^ g_6_49;
assign OUT[51] = p_0[51] ^ g_6_50;
assign OUT[52] = p_0[52] ^ g_6_51;
assign OUT[53] = p_0[53] ^ g_6_52;
assign OUT[54] = p_0[54] ^ g_6_53;
assign OUT[55] = p_0[55] ^ g_6_54;
assign OUT[56] = p_0[56] ^ g_6_55;
assign OUT[57] = p_0[57] ^ g_6_56;
assign OUT[58] = p_0[58] ^ g_6_57;
assign OUT[59] = p_0[59] ^ g_6_58;
assign OUT[60] = p_0[60] ^ g_6_59;
assign OUT[61] = p_0[61] ^ g_6_60;
assign OUT[62] = p_0[62] ^ g_6_61;
assign OUT[63] = p_0[63] ^ g_6_62;
assign OUT[64] = p_0[64] ^ g_6_63;
assign OUT[65] = p_0[65] ^ g_7_64;
assign OUT[66] = p_0[66] ^ g_7_65;
assign OUT[67] = g_7_66;
endmodule

module ha (
    input wire a,
    input wire b,
    output wire s,
    output wire c);

assign s = a ^ b;
assign c = a & b;
endmodule



module fa (
    input wire x,
    input wire y,
    input wire z,
    output wire s,
    output wire c);

assign s = x ^ y ^ z;
assign c = (x & y) | (x & z) | (y & z);
endmodule


