/* Generated by Yosys 0.25+60 (git sha1 611f71c67, clang 10.0.0-4ubuntu1 -fPIC -Os) */




module buyruk_onbellegi(main_addr, main_dout, main_stall, clk, rst, csb, addr, dout, stall, main_csb);
  reg \$auto$verilog_backend.cc:2097:dump_module$4  = 0;
  wire \$1 ;
  wire \$10 ;
  wire \$12 ;
  wire \$14 ;
  wire \$16 ;
  wire \$18 ;
  wire \$20 ;
  wire \$22 ;
  wire \$24 ;
  wire \$26 ;
  wire \$28 ;
  wire \$3 ;
  wire \$30 ;
  wire \$32 ;
  wire \$34 ;
  wire \$36 ;
  wire \$38 ;
  wire \$40 ;
  wire \$42 ;
  wire \$44 ;
  wire \$46 ;
  wire \$48 ;
  wire \$5 ;
  wire \$50 ;
  wire \$52 ;
  wire \$54 ;
  wire \$56 ;
  wire \$58 ;
  wire \$60 ;
  wire \$62 ;
  wire \$64 ;
  wire \$66 ;
  wire \$68 ;
  wire [9:0] \$7 ;
  wire \$70 ;
  wire \$72 ;
  wire \$74 ;
  wire \$76 ;
  wire \$78 ;
  wire [9:0] \$8 ;
  wire \$80 ;
  wire \$82 ;
  wire \$84 ;
  wire \$86 ;
  wire \$88 ;
  input [10:0] addr;
  wire [10:0] addr;
  input clk;
  wire clk;
  input csb;
  wire csb;
  reg [8:0] data_read_addr0;
  reg data_read_csb0;
  wire [31:0] data_read_dout0;
  reg [8:0] data_write_addr0;
  reg data_write_csb0;
  reg [31:0] data_write_din0;
  output [31:0] dout;
  reg [31:0] dout;
  output [10:0] main_addr;
  reg [10:0] main_addr;
  output main_csb;
  reg main_csb;
  input [31:0] main_dout;
  wire [31:0] main_dout;
  input main_stall;
  wire main_stall;
  input rst;
  wire rst;
  reg [8:0] set = 9'h000;
  reg [8:0] set_next;
  output stall;
  reg stall;
  reg [3:0] state = 4'h0;
  reg [3:0] state_next;
  reg [1:0] tag = 2'h0;
  reg [1:0] tag_next;
  reg [8:0] tag_read_addr0;
  reg tag_read_csb0;
  wire [2:0] tag_read_dout0;
  reg [8:0] tag_write_addr0;
  reg tag_write_csb0;
  reg [2:0] tag_write_din0;
  assign \$10  = tag_read_dout0[1:0] ==  tag;
  assign \$12  = tag_read_dout0[2] &  \$10 ;
  assign \$14  = ~  main_stall;
  assign \$16  = set ==  9'h1ff;
  assign \$18  = ~  csb;
  assign \$1  = tag_read_dout0[1:0] ==  tag;
  assign \$20  = tag_read_dout0[1:0] ==  tag;
  assign \$22  = tag_read_dout0[2] &  \$20 ;
  assign \$24  = ~  main_stall;
  assign \$26  = ~  main_stall;
  assign \$28  = set ==  addr[8:0];
  assign \$30  = tag_read_dout0[1:0] ==  tag;
  assign \$32  = tag_read_dout0[2] &  \$30 ;
  assign \$34  = ~  main_stall;
  assign \$36  = tag_read_dout0[1:0] ==  tag;
  assign \$38  = tag_read_dout0[2] &  \$36 ;
  assign \$3  = tag_read_dout0[2] &  \$1 ;
  assign \$40  = ~  main_stall;
  assign \$42  = ~  main_stall;
  assign \$44  = ~  main_stall;
  assign \$46  = ~  main_stall;
  assign \$48  = ~  main_stall;
  assign \$50  = ~  main_stall;
  assign \$52  = ~  main_stall;
  assign \$54  = tag_read_dout0[1:0] ==  tag;
  assign \$56  = tag_read_dout0[2] &  \$54 ;
  assign \$58  = ~  main_stall;
  assign \$5  = ~  main_stall;
  assign \$60  = tag_read_dout0[1:0] ==  tag;
  assign \$62  = tag_read_dout0[2] &  \$60 ;
  assign \$64  = ~  main_stall;
  assign \$66  = tag_read_dout0[1:0] ==  tag;
  assign \$68  = tag_read_dout0[2] &  \$66 ;
  assign \$70  = ~  main_stall;
  assign \$72  = tag_read_dout0[1:0] ==  tag;
  assign \$74  = tag_read_dout0[2] &  \$72 ;
  assign \$76  = ~  main_stall;
  assign \$78  = ~  main_stall;
  assign \$80  = tag_read_dout0[1:0] ==  tag;
  assign \$82  = tag_read_dout0[2] &  \$80 ;
  assign \$84  = ~  main_stall;
  assign \$86  = ~  main_stall;
  assign \$88  = ~  main_stall;
  assign \$8  = set +  1'h1;
  always @(posedge clk)
    state <= state_next;
  always @(posedge clk)
    set <= set_next;
  always @(posedge clk)
    tag <= tag_next;
  buyruk_onbellegi_tag_array \U$$0  (
    .addr0(tag_write_addr0),
    .addr1(tag_read_addr0),
    .clk0(clk),
    .clk1(clk),
    .csb0(tag_write_csb0),
    .csb1(tag_read_csb0),
    .din0(tag_write_din0),
    .dout1(tag_read_dout0)
  );
  buyruk_onbellegi_data_array \U$$1  (
    .addr0(data_write_addr0),
    .addr1(data_read_addr0),
    .clk0(clk),
    .clk1(clk),
    .csb0(data_write_csb0),
    .csb1(data_read_csb0),
    .din0(data_write_din0),
    .dout1(data_read_dout0)
  );
  always @* begin
    if (\$auto$verilog_backend.cc:2097:dump_module$4 ) begin end
    tag_write_din0 = 3'h0;
    casez (state)
      4'h0:
          tag_write_din0 = 3'h0;
      4'h2:
          ;
      4'h3:
          ;
      4'h6:
          ;
      4'h7:
          casez (\$46 )
            1'h1:
                tag_write_din0 = { 1'h1, tag };
          endcase
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2097:dump_module$4 ) begin end
    data_write_csb0 = 1'h1;
    casez (state)
      4'h0:
          data_write_csb0 = 1'h0;
      4'h2:
          ;
      4'h3:
          ;
      4'h6:
          ;
      4'h7:
          casez (\$48 )
            1'h1:
                data_write_csb0 = 1'h0;
          endcase
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2097:dump_module$4 ) begin end
    data_write_addr0 = 9'h000;
    casez (state)
      4'h0:
          data_write_addr0 = set;
      4'h2:
          ;
      4'h3:
          ;
      4'h6:
          ;
      4'h7:
          casez (\$50 )
            1'h1:
                data_write_addr0 = set;
          endcase
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2097:dump_module$4 ) begin end
    data_write_din0 = 32'd0;
    casez (state)
      4'h0:
          data_write_din0 = 32'd0;
      4'h2:
          ;
      4'h3:
          ;
      4'h6:
          ;
      4'h7:
          casez (\$52 )
            1'h1:
                data_write_din0 = main_dout;
          endcase
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2097:dump_module$4 ) begin end
    tag_read_csb0 = 1'h0;
    casez (state)
      4'h0:
          ;
      4'h2:
          tag_read_csb0 = 1'h0;
      4'h3:
        begin
          tag_read_csb0 = 1'h0;
          casez (\$56 )
            1'h1:
                tag_read_csb0 = 1'h0;
          endcase
        end
      4'h6:
          tag_read_csb0 = 1'h0;
      4'h7:
        begin
          tag_read_csb0 = 1'h0;
          casez (\$58 )
            1'h1:
                tag_read_csb0 = 1'h0;
          endcase
        end
      4'h9:
          tag_read_csb0 = 1'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2097:dump_module$4 ) begin end
    tag_read_addr0 = 9'h000;
    casez (state)
      4'h0:
          ;
      4'h2:
          tag_read_addr0 = addr[8:0];
      4'h3:
        begin
          tag_read_addr0 = set;
          casez (\$62 )
            1'h1:
                tag_read_addr0 = addr[8:0];
          endcase
        end
      4'h6:
          tag_read_addr0 = set;
      4'h7:
        begin
          tag_read_addr0 = set;
          casez (\$64 )
            1'h1:
                tag_read_addr0 = addr[8:0];
          endcase
        end
      4'h9:
          tag_read_addr0 = set;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2097:dump_module$4 ) begin end
    data_read_csb0 = 1'h0;
    casez (state)
      4'h0:
          ;
      4'h2:
          data_read_csb0 = 1'h0;
      4'h3:
        begin
          data_read_csb0 = 1'h0;
          casez (\$68 )
            1'h1:
                data_read_csb0 = 1'h0;
          endcase
        end
      4'h6:
          data_read_csb0 = 1'h0;
      4'h7:
        begin
          data_read_csb0 = 1'h0;
          casez (\$70 )
            1'h1:
                data_read_csb0 = 1'h0;
          endcase
        end
      4'h9:
          data_read_csb0 = 1'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2097:dump_module$4 ) begin end
    data_read_addr0 = 9'h000;
    casez (state)
      4'h0:
          ;
      4'h2:
          data_read_addr0 = addr[8:0];
      4'h3:
        begin
          data_read_addr0 = set;
          casez (\$74 )
            1'h1:
                data_read_addr0 = addr[8:0];
          endcase
        end
      4'h6:
          data_read_addr0 = set;
      4'h7:
        begin
          data_read_addr0 = set;
          casez (\$76 )
            1'h1:
                data_read_addr0 = addr[8:0];
          endcase
        end
      4'h9:
          data_read_addr0 = set;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2097:dump_module$4 ) begin end
    main_csb = 1'h1;
    casez (state)
      4'h0:
          ;
      4'h2:
          ;
      4'h3:
        begin
          casez (\$78 )
            1'h1:
                main_csb = 1'h0;
          endcase
          casez (\$82 )
            1'h1:
                main_csb = 1'h1;
          endcase
        end
      4'h6:
          casez (\$84 )
            1'h1:
                main_csb = 1'h0;
          endcase
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2097:dump_module$4 ) begin end
    main_addr = 11'h000;
    casez (state)
      4'h0:
          ;
      4'h2:
          ;
      4'h3:
          casez (\$86 )
            1'h1:
                main_addr = { tag, set };
          endcase
      4'h6:
          casez (\$88 )
            1'h1:
                main_addr = { tag, set };
          endcase
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2097:dump_module$4 ) begin end
    tag_next = tag;
    casez (state)
      4'h0:
          ;
      4'h2:
          tag_next = addr[10:9];
      4'h3:
          casez (\$3 )
            1'h1:
                tag_next = addr[10:9];
          endcase
      4'h7:
          casez (\$5 )
            1'h1:
                tag_next = addr[10:9];
          endcase
    endcase
    casez (rst)
      1'h1:
          tag_next = 2'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2097:dump_module$4 ) begin end
    set_next = set;
    casez (state)
      4'h0:
          set_next = \$8 [8:0];
      4'h2:
          set_next = addr[8:0];
      4'h3:
          casez (\$12 )
            1'h1:
                set_next = addr[8:0];
          endcase
      4'h7:
          casez (\$14 )
            1'h1:
                set_next = addr[8:0];
          endcase
    endcase
    casez (rst)
      1'h1:
          set_next = 9'h000;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2097:dump_module$4 ) begin end
    state_next = state;
    casez (state)
      4'h0:
          casez (\$16 )
            1'h1:
                state_next = 4'h2;
          endcase
      4'h2:
          casez (\$18 )
            1'h1:
                state_next = 4'h3;
          endcase
      4'h3:
        begin
          casez (main_stall)
            1'h1:
                state_next = 4'h6;
            default:
                state_next = 4'h7;
          endcase
          casez (\$22 )
            1'h1:
                casez (csb)
                  1'h1:
                      state_next = 4'h2;
                  default:
                      state_next = 4'h3;
                endcase
          endcase
        end
      4'h6:
          casez (\$24 )
            1'h1:
                state_next = 4'h7;
          endcase
      4'h7:
          casez (\$26 )
            1'h1:
                casez (csb)
                  1'h1:
                      state_next = 4'h2;
                  default:
                      casez (\$28 )
                        1'h1:
                            state_next = 4'h9;
                        default:
                            state_next = 4'h3;
                      endcase
                endcase
          endcase
      4'h9:
          state_next = 4'h3;
    endcase
    casez (rst)
      1'h1:
          state_next = 4'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2097:dump_module$4 ) begin end
    stall = 1'h1;
    casez (state)
      4'h2:
          stall = 1'h0;
      4'h3:
          casez (\$32 )
            1'h1:
                stall = 1'h0;
          endcase
      4'h7:
          casez (\$34 )
            1'h1:
                stall = 1'h0;
          endcase
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2097:dump_module$4 ) begin end
    dout = 32'd0;
    casez (state)
      4'h2:
          ;
      4'h3:
          casez (\$38 )
            1'h1:
                dout = data_read_dout0;
          endcase
      4'h7:
          casez (\$40 )
            1'h1:
                dout = main_dout;
          endcase
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2097:dump_module$4 ) begin end
    tag_write_csb0 = 1'h1;
    casez (state)
      4'h0:
          tag_write_csb0 = 1'h0;
      4'h2:
          ;
      4'h3:
          ;
      4'h6:
          ;
      4'h7:
          casez (\$42 )
            1'h1:
                tag_write_csb0 = 1'h0;
          endcase
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2097:dump_module$4 ) begin end
    tag_write_addr0 = 9'h000;
    casez (state)
      4'h0:
          tag_write_addr0 = set;
      4'h2:
          ;
      4'h3:
          ;
      4'h6:
          ;
      4'h7:
          casez (\$44 )
            1'h1:
                tag_write_addr0 = set;
          endcase
    endcase
  end
  assign \$7  = \$8 ;
endmodule
