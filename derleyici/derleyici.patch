diff --git a/llvm/lib/Target/RISCV/RISCV.td b/llvm/lib/Target/RISCV/RISCV.td
index 57e7c41c4271..989f12233d8f 100644
--- a/llvm/lib/Target/RISCV/RISCV.td
+++ b/llvm/lib/Target/RISCV/RISCV.td
@@ -155,6 +155,29 @@ def HasStdExtV : Predicate<"Subtarget->hasStdExtV()">,
                            AssemblerPredicate<(all_of FeatureStdExtV),
                            "'V' (Vector Instructions)">;
 
+def FeatureExtXs
+    : SubtargetFeature<"xs", "HasExtXs", "true",
+                       "'Xs' (Teknofest Sifreleme Buyruklari)">;
+def HasExtXs : Predicate<"Subtarget->hasExtXs()">,
+                            AssemblerPredicate<(all_of FeatureExtXs),
+                            "'Xs' (Teknofest Sifreleme Buyruklari)">;
+
+def FeatureExtXy
+    : SubtargetFeature<"xy", "HasExtXy", "true",
+                       "'Xy' (Teknofest Yapay Zeka Buyruklari)">;
+def HasExtXy : Predicate<"Subtarget->hasExtXy()">,
+                            AssemblerPredicate<(all_of FeatureExtXy),
+                            "'Xy' (Teknofest Yapay Zeka Buyruklari)">;
+                           
+def FeatureExtX
+    : SubtargetFeature<"x", "HasExtX", "true",
+                       "'X' (Teknofest Buyruklari)",
+                       [FeatureExtXs,
+                        FeatureExtXy]>;
+def HasExtX : Predicate<"Subtarget->hasExtX()">,
+                           AssemblerPredicate<(all_of FeatureExtX),
+                           "'X' (Teknofest Buyruklari)">;
+
 def Feature64Bit
     : SubtargetFeature<"64bit", "HasRV64", "true", "Implements RV64">;
 def IsRV64 : Predicate<"Subtarget->is64Bit()">,
diff --git a/llvm/lib/Target/RISCV/RISCVInstrInfo.td b/llvm/lib/Target/RISCV/RISCVInstrInfo.td
index 8547f791092b..0fc7cefa9cdd 100644
--- a/llvm/lib/Target/RISCV/RISCVInstrInfo.td
+++ b/llvm/lib/Target/RISCV/RISCVInstrInfo.td
@@ -1178,3 +1178,4 @@ include "RISCVInstrInfoD.td"
 include "RISCVInstrInfoC.td"
 include "RISCVInstrInfoB.td"
 include "RISCVInstrInfoV.td"
+include "RISCVInstrInfoX.td"
diff --git a/llvm/lib/Target/RISCV/RISCVInstrInfoX.td b/llvm/lib/Target/RISCV/RISCVInstrInfoX.td
new file mode 100644
index 000000000000..5bbd4c14bee4
--- /dev/null
+++ b/llvm/lib/Target/RISCV/RISCVInstrInfoX.td
@@ -0,0 +1,118 @@
+/*
+class RVInst<dag outs, dag ins, string opcodestr, string argstr,
+             list<dag> pattern, InstFormat format>
+    : Instruction {}
+*/
+
+let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
+class EncThreeOpInst< bits<7> funct7, bits<3> funct3, RISCVOpcode opcode, string opcodestr, list<dag> pattern >
+    : RVInst<(outs GPR:$rd), (ins GPR:$rs1, GPR:$rs2), opcodestr, "$rd, $rs1, $rs2", pattern, InstFormatR> {
+  bits<5> rs2;
+  bits<5> rs1;
+  bits<5> rd;
+
+  let Inst{31-25} = funct7;
+  let Inst{24-20} = rs2;
+  let Inst{19-15} = rs1;
+  let Inst{14-12} = funct3;
+  let Inst{11-7} = rd;
+  let Opcode = opcode.Value;
+}
+
+let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
+class EncTwoOpInst< bits<12> funct12, bits<3> funct3, RISCVOpcode opcode, string opcodestr, list<dag> pattern >
+    : RVInst<(outs GPR:$rd), (ins GPR:$rs1), opcodestr, "$rd, $rs1", pattern, InstFormatI> {
+  bits<5> rs1;
+  bits<5> rd;
+
+  let Inst{31-20} = funct12;
+  let Inst{19-15} = rs1;
+  let Inst{14-12} = funct3;
+  let Inst{11-7} = rd;
+  let Opcode = opcode.Value;
+}
+
+let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
+class CNNEnInst< bits<6> funct6, bits<8> funct8, RISCVOpcode opcode, string opcodestr, list<dag> pattern >
+    : RVInst<(outs GPR:$rd), (ins GPR:$rs1, GPR:$rs2, simm12:$en), opcodestr, "$rs1, $rs2, $en", pattern, InstFormatOther> {
+  bits<1> en;
+  bits<5> rs2;
+  bits<5> rs1;
+  
+
+  let Inst{31} = en;
+  let Inst{30-25} = funct6;
+  let Inst{24-20} = rs2;
+  let Inst{19-15} = rs1;
+  let Inst{14-7} = funct8;
+  let Opcode = opcode.Value;
+}
+
+let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
+class CNNFullInst< bits<25> funct25, RISCVOpcode opcode, string opcodestr, list<dag> pattern >
+    : RVInst<(outs), (ins), opcodestr, "", pattern, InstFormatI> {
+  let Inst{31-7} = funct25;
+  let Opcode = opcode.Value;
+}
+
+// Sifreleme Buyruklari
+let Predicates = [HasExtXs] in {
+  def HMDST : EncThreeOpInst< 0b0000101, 0b001, RISCVOpcode<0b0110011>, "hmdst", 
+  [(set GPR:$rd, 
+   (ctpop (xor GPR:$rs1, GPR:$rs2)))
+  ]
+  >, Sched<[]>; // OPC_OP
+  
+  def PKG : EncThreeOpInst< 0b0000100, 0b100, RISCVOpcode<0b0110011>, "pkg", 
+  [(set GPR:$rd, 
+   (or (srl GPR:$rs1, (i32 16)), (shl GPR:$rs2, (i32 16))))
+  ]
+  >, Sched<[]>; // OPC_OP
+  
+  def RVRS : EncTwoOpInst< 0b011010111000, 0b101, RISCVOpcode<0b0010011>, "rvrs", 
+  [(set GPR:$rd, (or (or (or (and GPR:$rs1, 0xff),
+                        (shl (and (srl GPR:$rs1, (i32 8)), 0xff), (i32 16))),
+                (shl (and (srl GPR:$rs1, (i32 16)), 0xff), (i32 8))),
+                (srl GPR:$rs1, (i32 24))
+          ))]
+  >, Sched<[]>; // OPC_OP_IMM
+  
+  def SLADD : EncThreeOpInst< 0b0010000, 0b010, RISCVOpcode<0b0110011>, "sladd", 
+  [(set GPR:$rd, 
+   (add (shl GPR:$rs1, (i32 1)), GPR:$rs2))
+  ]
+  >, Sched<[]>; // OPC_OP
+  
+  def CNTZ : EncTwoOpInst< 0b011000011000, 0b001, RISCVOpcode<0b0010011>, "cntz", 
+  [(set GPR:$rd, 
+   (ctlz GPR:$rs1))
+  ]
+  >, Sched<[]>; // OPC_OP_IMM
+  
+  def CNTP : EncTwoOpInst< 0b011000000010, 0b001, RISCVOpcode<0b0010011>, "cntp", 
+  [(set GPR:$rd, 
+   (ctpop GPR:$rs1))
+  ]
+  >, Sched<[]>; // OPC_OP_IMM
+}
+
+// Yapay Zeka Buyruklari
+let Predicates = [HasExtXy] in {
+  def CONV_LD_W : CNNEnInst< 0b000000, 0b01000000, RISCVOpcode<0b0001011>, "conv.ld.w", []>, Sched<[]>; // OPC RISCV'de yok
+  
+  def CONV_CLR_W : CNNFullInst< 0b0000000000000000001100000, RISCVOpcode<0b0001011>, "conv.clr.w", []>, Sched<[]>; // OPC RISCV'de yok
+  
+  def CONV_LD_X : CNNEnInst< 0b000000, 0b00000000, RISCVOpcode<0b0001011>, "conv.ld.x", []>, Sched<[]>; // OPC RISCV'de yok
+  
+  def CONV_CLR_X : CNNFullInst< 0b0000000000000000000100000, RISCVOpcode<0b0001011>, "conv.clr.x", []>, Sched<[]>; // OPC RISCV'de yok
+  
+  let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
+  def CONV_RUN : RVInst<(outs GPR:$rd), (ins), "conv.run", "$rd", [], InstFormatOther>, Sched<[]> {
+  	bits<5> rd;
+    
+    let Inst{31-12} = 0b00000000000000000100;
+  	let Inst{11-7} = rd;
+  	let Opcode = RISCVOpcode<0b0001011>.Value; // OPC RISCV'de yok
+  }
+  
+}
diff --git a/llvm/lib/Target/RISCV/RISCVSubtarget.h b/llvm/lib/Target/RISCV/RISCVSubtarget.h
index fe1285f23b15..87fae92ed8d8 100644
--- a/llvm/lib/Target/RISCV/RISCVSubtarget.h
+++ b/llvm/lib/Target/RISCV/RISCVSubtarget.h
@@ -51,6 +51,11 @@ class RISCVSubtarget : public RISCVGenSubtargetInfo {
   bool HasStdExtZbt = false;
   bool HasStdExtZbproposedc = false;
   bool HasStdExtV = false;
+  
+  bool HasExtX = false;
+  bool HasExtXs = false;
+  bool HasExtXy = false;
+  
   bool HasRV64 = false;
   bool IsRV32E = false;
   bool EnableLinkerRelax = false;
@@ -112,6 +117,11 @@ public:
   bool hasStdExtZbt() const { return HasStdExtZbt; }
   bool hasStdExtZbproposedc() const { return HasStdExtZbproposedc; }
   bool hasStdExtV() const { return HasStdExtV; }
+  
+  bool hasExtX() const { return HasExtX; }
+  bool hasExtXs() const { return HasExtXs; }
+  bool hasExtXy() const { return HasExtXy; }
+  
   bool is64Bit() const { return HasRV64; }
   bool isRV32E() const { return IsRV32E; }
   bool enableLinkerRelax() const { return EnableLinkerRelax; }
