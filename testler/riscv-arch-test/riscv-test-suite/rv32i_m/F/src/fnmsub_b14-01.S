
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.5.2
// timestamp : Tue Sep  7 16:08:13 2021 GMT
// usage     : riscv_ctg \
//                  -- cgf $cgf \
//                  -- xlen $xlen \
// -----------
//
// -----------
// Copyright (c) 2021. IIT Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V F extension for the fnmsub_b14 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b14)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2, rs1==f1, rs2==f29, rs3==f0, rd==f1, fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f1; op2:f29; op3:f0; dest:f1; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x2817112a; valaddr_reg:x16; val_offset:0; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f1, f1, f29, f0, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1:
// rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1, rs1==f27, rs2==f6, rs3==f2, rd==f2, fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0xec and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f27; op2:f6; op3:f2; dest:f2; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x7617112a; valaddr_reg:x16; val_offset:12; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f2, f27, f6, f2, 0x0, 0, x16, 12, x17, x15, 8, x18)

inst_2:
// rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd, rs1==f25, rs2==f8, rs3==f11, rd==f18, fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0xaf and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f25; op2:f8; op3:f11; dest:f18; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x5797112a; valaddr_reg:x16; val_offset:24; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f18, f25, f8, f11, 0x0, 0, x16, 24, x17, x15, 16, x18)

inst_3:
// rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3, rs1==f18, rs2==f18, rs3==f26, rd==f29, fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0xae and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f18; op2:f18; op3:f26; dest:f29; op1val:0x7e36c1bf; op2val:0x7e36c1bf; op3val:0x5717112a; valaddr_reg:x16; val_offset:36; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f29, f18, f18, f26, 0x0, 0, x16, 36, x17, x15, 24, x18)

inst_4:
// rs1 == rs2 == rs3 == rd, rs1==f7, rs2==f7, rs3==f7, rd==f7, fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0xad and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f7; op2:f7; op3:f7; dest:f7; op1val:0x7e36c1bf; op2val:0x7e36c1bf; op3val:0x7e36c1bf; valaddr_reg:x16; val_offset:48; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f7, f7, f7, f7, 0x0, 0, x16, 48, x17, x15, 32, x18)

inst_5:
// rd == rs2 == rs3 != rs1, rs1==f9, rs2==f10, rs3==f10, rd==f10, fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0xac and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f9; op2:f10; op3:f10; dest:f10; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x7ed0fbe8; valaddr_reg:x16; val_offset:60; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f10, f9, f10, f10, 0x0, 0, x16, 60, x17, x15, 40, x18)

inst_6:
// rs1 == rs2 == rd != rs3, rs1==f31, rs2==f31, rs3==f14, rd==f31, fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0xab and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f31; op2:f31; op3:f14; dest:f31; op1val:0x7e36c1bf; op2val:0x7e36c1bf; op3val:0x5597112a; valaddr_reg:x16; val_offset:72; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f31, f31, f31, f14, 0x0, 0, x16, 72, x17, x15, 48, x18)

inst_7:
// rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2, rs1==f6, rs2==f30, rs3==f6, rd==f16, fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0xaa and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f6; op2:f30; op3:f6; dest:f16; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x7e36c1bf; valaddr_reg:x16; val_offset:84; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f16, f6, f30, f6, 0x0, 0, x16, 84, x17, x15, 56, x18)

inst_8:
// rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1, rs1==f0, rs2==f21, rs3==f21, rd==f11, fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f0; op2:f21; op3:f21; dest:f11; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x7ed0fbe8; valaddr_reg:x16; val_offset:96; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f11, f0, f21, f21, 0x0, 0, x16, 96, x17, x15, 64, x18)

inst_9:
// rs1 == rs2 == rs3 != rd, rs1==f3, rs2==f3, rs3==f3, rd==f24, fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f3; op2:f3; op3:f3; dest:f24; op1val:0x7e36c1bf; op2val:0x7e36c1bf; op3val:0x7e36c1bf; valaddr_reg:x16; val_offset:108; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f24, f3, f3, f3, 0x0, 0, x16, 108, x17, x15, 72, x18)

inst_10:
// rs1 == rd == rs3 != rs2, rs1==f28, rs2==f4, rs3==f28, rd==f28, fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0xa7 and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f28; op2:f4; op3:f28; dest:f28; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x7e36c1bf; valaddr_reg:x16; val_offset:120; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f28, f28, f4, f28, 0x0, 0, x16, 120, x17, x15, 80, x18)

inst_11:
// rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1, rs1==f21, rs2==f13, rs3==f18, rd==f13, fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0xa6 and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f21; op2:f13; op3:f18; dest:f13; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x5317112a; valaddr_reg:x16; val_offset:132; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f21, f13, f18, 0x0, 0, x16, 132, x17, x15, 88, x18)

inst_12:
// rs1==f30, rs2==f22, rs3==f12, rd==f3, fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0xa5 and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f30; op2:f22; op3:f12; dest:f3; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x5297112a; valaddr_reg:x16; val_offset:144; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f3, f30, f22, f12, 0x0, 0, x16, 144, x17, x15, 96, x18)

inst_13:
// rs1==f2, rs2==f11, rs3==f29, rd==f0, fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0xa4 and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f2; op2:f11; op3:f29; dest:f0; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x5217112a; valaddr_reg:x16; val_offset:156; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f0, f2, f11, f29, 0x0, 0, x16, 156, x17, x15, 104, x18)

inst_14:
// rs1==f29, rs2==f24, rs3==f27, rd==f4, fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0xa3 and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f29; op2:f24; op3:f27; dest:f4; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x5197112a; valaddr_reg:x16; val_offset:168; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f4, f29, f24, f27, 0x0, 0, x16, 168, x17, x15, 112, x18)

inst_15:
// rs1==f11, rs2==f27, rs3==f17, rd==f9, fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0xa2 and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f11; op2:f27; op3:f17; dest:f9; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x5117112a; valaddr_reg:x16; val_offset:180; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f9, f11, f27, f17, 0x0, 0, x16, 180, x17, x15, 120, x18)

inst_16:
// rs1==f5, rs2==f15, rs3==f20, rd==f12, fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0xa1 and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f5; op2:f15; op3:f20; dest:f12; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x5097112a; valaddr_reg:x16; val_offset:192; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f12, f5, f15, f20, 0x0, 0, x16, 192, x17, x15, 128, x18)

inst_17:
// rs1==f4, rs2==f25, rs3==f23, rd==f8, fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0xa0 and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f4; op2:f25; op3:f23; dest:f8; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x5017112a; valaddr_reg:x16; val_offset:204; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f8, f4, f25, f23, 0x0, 0, x16, 204, x17, x15, 136, x18)

inst_18:
// rs1==f12, rs2==f9, rs3==f15, rd==f25, fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x9f and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f12; op2:f9; op3:f15; dest:f25; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x4f97112a; valaddr_reg:x16; val_offset:216; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f25, f12, f9, f15, 0x0, 0, x16, 216, x17, x15, 144, x18)

inst_19:
// rs1==f19, rs2==f12, rs3==f1, rd==f20, fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x9e and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f19; op2:f12; op3:f1; dest:f20; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x4f17112a; valaddr_reg:x16; val_offset:228; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f20, f19, f12, f1, 0x0, 0, x16, 228, x17, x15, 152, x18)

inst_20:
// rs1==f24, rs2==f5, rs3==f13, rd==f22, fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f24; op2:f5; op3:f13; dest:f22; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x4e97112a; valaddr_reg:x16; val_offset:240; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f22, f24, f5, f13, 0x0, 0, x16, 240, x17, x15, 160, x18)

inst_21:
// rs1==f17, rs2==f0, rs3==f25, rd==f21, fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f17; op2:f0; op3:f25; dest:f21; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x4e17112a; valaddr_reg:x16; val_offset:252; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f21, f17, f0, f25, 0x0, 0, x16, 252, x17, x15, 168, x18)

inst_22:
// rs1==f22, rs2==f2, rs3==f9, rd==f14, fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x9b and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f22; op2:f2; op3:f9; dest:f14; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x4d97112a; valaddr_reg:x16; val_offset:264; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f14, f22, f2, f9, 0x0, 0, x16, 264, x17, x15, 176, x18)

inst_23:
// rs1==f15, rs2==f26, rs3==f31, rd==f27, fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x9a and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f15; op2:f26; op3:f31; dest:f27; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x4d17112a; valaddr_reg:x16; val_offset:276; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f27, f15, f26, f31, 0x0, 0, x16, 276, x17, x15, 184, x18)

inst_24:
// rs1==f14, rs2==f20, rs3==f4, rd==f6, fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x99 and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f14; op2:f20; op3:f4; dest:f6; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x4c97112a; valaddr_reg:x16; val_offset:288; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f6, f14, f20, f4, 0x0, 0, x16, 288, x17, x15, 192, x18)

inst_25:
// rs1==f23, rs2==f28, rs3==f16, rd==f26, fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f23; op2:f28; op3:f16; dest:f26; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x4c17112a; valaddr_reg:x16; val_offset:300; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f26, f23, f28, f16, 0x0, 0, x16, 300, x17, x15, 200, x18)

inst_26:
// rs1==f26, rs2==f14, rs3==f19, rd==f23, fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x97 and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f26; op2:f14; op3:f19; dest:f23; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x4b97112a; valaddr_reg:x16; val_offset:312; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f23, f26, f14, f19, 0x0, 0, x16, 312, x17, x15, 208, x18)

inst_27:
// rs1==f8, rs2==f19, rs3==f22, rd==f30, fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x96 and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f8; op2:f19; op3:f22; dest:f30; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x4b17112a; valaddr_reg:x16; val_offset:324; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f30, f8, f19, f22, 0x0, 0, x16, 324, x17, x15, 216, x18)

inst_28:
// rs1==f13, rs2==f16, rs3==f8, rd==f15, fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f13; op2:f16; op3:f8; dest:f15; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x4a97112a; valaddr_reg:x16; val_offset:336; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f15, f13, f16, f8, 0x0, 0, x16, 336, x17, x15, 224, x18)

inst_29:
// rs1==f10, rs2==f17, rs3==f24, rd==f5, fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x94 and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f17; op3:f24; dest:f5; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x4a17112a; valaddr_reg:x16; val_offset:348; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f5, f10, f17, f24, 0x0, 0, x16, 348, x17, x15, 232, x18)

inst_30:
// rs1==f16, rs2==f1, rs3==f30, rd==f17, fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x93 and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f16; op2:f1; op3:f30; dest:f17; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x4997112a; valaddr_reg:x16; val_offset:360; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f17, f16, f1, f30, 0x0, 0, x16, 360, x17, x15, 240, x18)

inst_31:
// rs1==f20, rs2==f23, rs3==f5, rd==f19, fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x92 and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f20; op2:f23; op3:f5; dest:f19; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x4917112a; valaddr_reg:x16; val_offset:372; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f19, f20, f23, f5, 0x0, 0, x16, 372, x17, x15, 248, x18)

inst_32:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x4897112a; valaddr_reg:x16; val_offset:384; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 384, x17, x15, 256, x18)

inst_33:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x4817112a; valaddr_reg:x16; val_offset:396; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 396, x17, x15, 264, x18)

inst_34:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x8f and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x4797112a; valaddr_reg:x16; val_offset:408; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 408, x17, x15, 272, x18)

inst_35:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x8e and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x4717112a; valaddr_reg:x16; val_offset:420; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 420, x17, x15, 280, x18)

inst_36:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x8d and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x4697112a; valaddr_reg:x16; val_offset:432; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 432, x17, x15, 288, x18)

inst_37:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x8c and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x4617112a; valaddr_reg:x16; val_offset:444; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 444, x17, x15, 296, x18)

inst_38:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x8b and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x4597112a; valaddr_reg:x16; val_offset:456; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 456, x17, x15, 304, x18)

inst_39:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x4517112a; valaddr_reg:x16; val_offset:468; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 468, x17, x15, 312, x18)

inst_40:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x4497112a; valaddr_reg:x16; val_offset:480; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 480, x17, x15, 320, x18)

inst_41:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x4417112a; valaddr_reg:x16; val_offset:492; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 492, x17, x15, 328, x18)

inst_42:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x87 and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x4397112a; valaddr_reg:x16; val_offset:504; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 504, x17, x15, 336, x18)

inst_43:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x4317112a; valaddr_reg:x16; val_offset:516; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 516, x17, x15, 344, x18)

inst_44:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x4297112a; valaddr_reg:x16; val_offset:528; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 528, x17, x15, 352, x18)

inst_45:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x84 and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x4217112a; valaddr_reg:x16; val_offset:540; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 540, x17, x15, 360, x18)

inst_46:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x4197112a; valaddr_reg:x16; val_offset:552; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 552, x17, x15, 368, x18)

inst_47:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x82 and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x4117112a; valaddr_reg:x16; val_offset:564; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 564, x17, x15, 376, x18)

inst_48:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x81 and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x4097112a; valaddr_reg:x16; val_offset:576; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 576, x17, x15, 384, x18)

inst_49:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x80 and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x4017112a; valaddr_reg:x16; val_offset:588; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 588, x17, x15, 392, x18)

inst_50:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x3f97112a; valaddr_reg:x16; val_offset:600; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 600, x17, x15, 400, x18)

inst_51:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x3f17112a; valaddr_reg:x16; val_offset:612; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 612, x17, x15, 408, x18)

inst_52:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x3e97112a; valaddr_reg:x16; val_offset:624; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 624, x17, x15, 416, x18)

inst_53:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x3e17112a; valaddr_reg:x16; val_offset:636; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 636, x17, x15, 424, x18)

inst_54:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x3d97112a; valaddr_reg:x16; val_offset:648; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 648, x17, x15, 432, x18)

inst_55:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x3d17112a; valaddr_reg:x16; val_offset:660; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 660, x17, x15, 440, x18)

inst_56:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x3c97112a; valaddr_reg:x16; val_offset:672; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 672, x17, x15, 448, x18)

inst_57:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x3c17112a; valaddr_reg:x16; val_offset:684; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 684, x17, x15, 456, x18)

inst_58:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x77 and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x3b97112a; valaddr_reg:x16; val_offset:696; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 696, x17, x15, 464, x18)

inst_59:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x3b17112a; valaddr_reg:x16; val_offset:708; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 708, x17, x15, 472, x18)

inst_60:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x75 and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x3a97112a; valaddr_reg:x16; val_offset:720; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 720, x17, x15, 480, x18)

inst_61:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x3a17112a; valaddr_reg:x16; val_offset:732; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 732, x17, x15, 488, x18)

inst_62:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x73 and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x3997112a; valaddr_reg:x16; val_offset:744; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 744, x17, x15, 496, x18)

inst_63:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x72 and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x3917112a; valaddr_reg:x16; val_offset:756; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 756, x17, x15, 504, x18)

inst_64:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x71 and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x3897112a; valaddr_reg:x16; val_offset:768; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 768, x17, x15, 512, x18)

inst_65:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x3817112a; valaddr_reg:x16; val_offset:780; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 780, x17, x15, 520, x18)

inst_66:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x3797112a; valaddr_reg:x16; val_offset:792; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 792, x17, x15, 528, x18)

inst_67:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x6e and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x3717112a; valaddr_reg:x16; val_offset:804; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 804, x17, x15, 536, x18)

inst_68:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x6d and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x3697112a; valaddr_reg:x16; val_offset:816; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 816, x17, x15, 544, x18)

inst_69:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x6c and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x3617112a; valaddr_reg:x16; val_offset:828; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 828, x17, x15, 552, x18)

inst_70:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x3597112a; valaddr_reg:x16; val_offset:840; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 840, x17, x15, 560, x18)

inst_71:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x6a and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x3517112a; valaddr_reg:x16; val_offset:852; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 852, x17, x15, 568, x18)

inst_72:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0x69 and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x3497112a; valaddr_reg:x16; val_offset:864; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 864, x17, x15, 576, x18)

inst_73:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0xae and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x5717112a; valaddr_reg:x16; val_offset:876; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 876, x17, x15, 584, x18)

inst_74:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0xad and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x5697112a; valaddr_reg:x16; val_offset:888; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 888, x17, x15, 592, x18)

inst_75:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0xac and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x5617112a; valaddr_reg:x16; val_offset:900; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 900, x17, x15, 600, x18)

inst_76:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0xab and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x5597112a; valaddr_reg:x16; val_offset:912; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 912, x17, x15, 608, x18)

inst_77:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0xaa and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x5517112a; valaddr_reg:x16; val_offset:924; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 924, x17, x15, 616, x18)

inst_78:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x5497112a; valaddr_reg:x16; val_offset:936; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 936, x17, x15, 624, x18)

inst_79:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x5417112a; valaddr_reg:x16; val_offset:948; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 948, x17, x15, 632, x18)

inst_80:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0xa7 and fm3 == 0x17112a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x5397112a; valaddr_reg:x16; val_offset:960; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 960, x17, x15, 640, x18)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
test_fp:
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x2817112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x7617112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x5797112a
.word 0x7e36c1bf
.word 0x7e36c1bf
.word 0x5717112a
.word 0x7e36c1bf
.word 0x7e36c1bf
.word 0x7e36c1bf
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x7ed0fbe8
.word 0x7e36c1bf
.word 0x7e36c1bf
.word 0x5597112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x7e36c1bf
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x7ed0fbe8
.word 0x7e36c1bf
.word 0x7e36c1bf
.word 0x7e36c1bf
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x7e36c1bf
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x5317112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x5297112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x5217112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x5197112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x5117112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x5097112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x5017112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x4f97112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x4f17112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x4e97112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x4e17112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x4d97112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x4d17112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x4c97112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x4c17112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x4b97112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x4b17112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x4a97112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x4a17112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x4997112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x4917112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x4897112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x4817112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x4797112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x4717112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x4697112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x4617112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x4597112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x4517112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x4497112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x4417112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x4397112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x4317112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x4297112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x4217112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x4197112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x4117112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x4097112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x4017112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x3f97112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x3f17112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x3e97112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x3e17112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x3d97112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x3d17112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x3c97112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x3c17112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x3b97112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x3b17112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x3a97112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x3a17112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x3997112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x3917112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x3897112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x3817112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x3797112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x3717112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x3697112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x3617112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x3597112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x3517112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x3497112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x5717112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x5697112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x5617112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x5597112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x5517112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x5497112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x5417112a
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x5397112a
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 162*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
