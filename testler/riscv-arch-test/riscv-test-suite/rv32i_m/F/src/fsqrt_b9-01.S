
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.5.2
// timestamp : Tue Sep  7 16:50:29 2021 GMT
// usage     : riscv_ctg \
//                  -- cgf $cgf \
//                  -- xlen $xlen \
// -----------
//
// -----------
// Copyright (c) 2021. IIT Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fsqrt.s instruction of the RISC-V F extension for the fsqrt_b9 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fsqrt_b9)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs1 == rd, rs1==f20, rd==f20, fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f20; dest:f20; op1val:0x0; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f20, f20, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1:
// rs1 != rd, rs1==f16, rd==f7, fs1 == 0 and fe1 == 0xfe and fm1 == 0x4ccccc and rm_val == 0  
// opcode: fsqrt.s ; op1:f16; dest:f7; op1val:0x7f4ccccc; valaddr_reg:x16; val_offset:4; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f7, f16, 0x0, 0, x16, 4, x17, x15, 8, x18)

inst_2:
// rs1==f4, rd==f3, fs1 == 0 and fe1 == 0xfe and fm1 == 0x333333 and rm_val == 0  
// opcode: fsqrt.s ; op1:f4; dest:f3; op1val:0x7f333333; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f3, f4, 0x0, 0, x16, 8, x17, x15, 16, x18)

inst_3:
// rs1==f9, rd==f26, fs1 == 0 and fe1 == 0xfe and fm1 == 0x5b6db6 and rm_val == 0  
// opcode: fsqrt.s ; op1:f9; dest:f26; op1val:0x7f5b6db6; valaddr_reg:x16; val_offset:12; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f26, f9, 0x0, 0, x16, 12, x17, x15, 24, x18)

inst_4:
// rs1==f6, rd==f15, fs1 == 0 and fe1 == 0xfe and fm1 == 0x249249 and rm_val == 0  
// opcode: fsqrt.s ; op1:f6; dest:f15; op1val:0x7f249249; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f15, f6, 0x0, 0, x16, 16, x17, x15, 32, x18)

inst_5:
// rs1==f5, rd==f28, fs1 == 0 and fe1 == 0xfe and fm1 == 0x444444 and rm_val == 0  
// opcode: fsqrt.s ; op1:f5; dest:f28; op1val:0x7f444444; valaddr_reg:x16; val_offset:20; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f28, f5, 0x0, 0, x16, 20, x17, x15, 40, x18)

inst_6:
// rs1==f23, rd==f21, fs1 == 0 and fe1 == 0xfe and fm1 == 0x3bbbbb and rm_val == 0  
// opcode: fsqrt.s ; op1:f23; dest:f21; op1val:0x7f3bbbbb; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f21, f23, 0x0, 0, x16, 24, x17, x15, 48, x18)

inst_7:
// rs1==f21, rd==f25, fs1 == 0 and fe1 == 0xfe and fm1 == 0x666666 and rm_val == 0  
// opcode: fsqrt.s ; op1:f21; dest:f25; op1val:0x7f666666; valaddr_reg:x16; val_offset:28; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f25, f21, 0x0, 0, x16, 28, x17, x15, 56, x18)

inst_8:
// rs1==f10, rd==f8, fs1 == 0 and fe1 == 0xfe and fm1 == 0x199999 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f8; op1val:0x7f199999; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f8, f10, 0x0, 0, x16, 32, x17, x15, 64, x18)

inst_9:
// rs1==f2, rd==f5, fs1 == 0 and fe1 == 0xfe and fm1 == 0x6db6db and rm_val == 0  
// opcode: fsqrt.s ; op1:f2; dest:f5; op1val:0x7f6db6db; valaddr_reg:x16; val_offset:36; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f5, f2, 0x0, 0, x16, 36, x17, x15, 72, x18)

inst_10:
// rs1==f0, rd==f4, fs1 == 0 and fe1 == 0xfe and fm1 == 0x36db6d and rm_val == 0  
// opcode: fsqrt.s ; op1:f0; dest:f4; op1val:0x7f36db6d; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f4, f0, 0x0, 0, x16, 40, x17, x15, 80, x18)

inst_11:
// rs1==f22, rd==f16, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000001 and rm_val == 0  
// opcode: fsqrt.s ; op1:f22; dest:f16; op1val:0x7f000001; valaddr_reg:x16; val_offset:44; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f16, f22, 0x0, 0, x16, 44, x17, x15, 88, x18)

inst_12:
// rs1==f19, rd==f22, fs1 == 0 and fe1 == 0xfe and fm1 == 0x7ffffe and rm_val == 0  
// opcode: fsqrt.s ; op1:f19; dest:f22; op1val:0x7f7ffffe; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f22, f19, 0x0, 0, x16, 48, x17, x15, 96, x18)

inst_13:
// rs1==f1, rd==f2, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000003 and rm_val == 0  
// opcode: fsqrt.s ; op1:f1; dest:f2; op1val:0x7f000003; valaddr_reg:x16; val_offset:52; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f2, f1, 0x0, 0, x16, 52, x17, x15, 104, x18)

inst_14:
// rs1==f15, rd==f18, fs1 == 0 and fe1 == 0xfe and fm1 == 0x7ffffc and rm_val == 0  
// opcode: fsqrt.s ; op1:f15; dest:f18; op1val:0x7f7ffffc; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f18, f15, 0x0, 0, x16, 56, x17, x15, 112, x18)

inst_15:
// rs1==f8, rd==f0, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000007 and rm_val == 0  
// opcode: fsqrt.s ; op1:f8; dest:f0; op1val:0x7f000007; valaddr_reg:x16; val_offset:60; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f0, f8, 0x0, 0, x16, 60, x17, x15, 120, x18)

inst_16:
// rs1==f14, rd==f10, fs1 == 0 and fe1 == 0xfe and fm1 == 0x7ffff8 and rm_val == 0  
// opcode: fsqrt.s ; op1:f14; dest:f10; op1val:0x7f7ffff8; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f10, f14, 0x0, 0, x16, 64, x17, x15, 128, x18)

inst_17:
// rs1==f18, rd==f11, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00000f and rm_val == 0  
// opcode: fsqrt.s ; op1:f18; dest:f11; op1val:0x7f00000f; valaddr_reg:x16; val_offset:68; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f18, 0x0, 0, x16, 68, x17, x15, 136, x18)

inst_18:
// rs1==f12, rd==f29, fs1 == 0 and fe1 == 0xfe and fm1 == 0x7ffff0 and rm_val == 0  
// opcode: fsqrt.s ; op1:f12; dest:f29; op1val:0x7f7ffff0; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f29, f12, 0x0, 0, x16, 72, x17, x15, 144, x18)

inst_19:
// rs1==f26, rd==f13, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00001f and rm_val == 0  
// opcode: fsqrt.s ; op1:f26; dest:f13; op1val:0x7f00001f; valaddr_reg:x16; val_offset:76; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f13, f26, 0x0, 0, x16, 76, x17, x15, 152, x18)

inst_20:
// rs1==f7, rd==f19, fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffe0 and rm_val == 0  
// opcode: fsqrt.s ; op1:f7; dest:f19; op1val:0x7f7fffe0; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f19, f7, 0x0, 0, x16, 80, x17, x15, 160, x18)

inst_21:
// rs1==f3, rd==f30, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00003f and rm_val == 0  
// opcode: fsqrt.s ; op1:f3; dest:f30; op1val:0x7f00003f; valaddr_reg:x16; val_offset:84; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f30, f3, 0x0, 0, x16, 84, x17, x15, 168, x18)

inst_22:
// rs1==f11, rd==f6, fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffc0 and rm_val == 0  
// opcode: fsqrt.s ; op1:f11; dest:f6; op1val:0x7f7fffc0; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f6, f11, 0x0, 0, x16, 88, x17, x15, 176, x18)

inst_23:
// rs1==f30, rd==f9, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00007f and rm_val == 0  
// opcode: fsqrt.s ; op1:f30; dest:f9; op1val:0x7f00007f; valaddr_reg:x16; val_offset:92; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f9, f30, 0x0, 0, x16, 92, x17, x15, 184, x18)

inst_24:
// rs1==f28, rd==f27, fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fff80 and rm_val == 0  
// opcode: fsqrt.s ; op1:f28; dest:f27; op1val:0x7f7fff80; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f27, f28, 0x0, 0, x16, 96, x17, x15, 192, x18)

inst_25:
// rs1==f17, rd==f23, fs1 == 0 and fe1 == 0xfe and fm1 == 0x0000ff and rm_val == 0  
// opcode: fsqrt.s ; op1:f17; dest:f23; op1val:0x7f0000ff; valaddr_reg:x16; val_offset:100; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f23, f17, 0x0, 0, x16, 100, x17, x15, 200, x18)

inst_26:
// rs1==f31, rd==f14, fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fff00 and rm_val == 0  
// opcode: fsqrt.s ; op1:f31; dest:f14; op1val:0x7f7fff00; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f14, f31, 0x0, 0, x16, 104, x17, x15, 208, x18)

inst_27:
// rs1==f25, rd==f24, fs1 == 0 and fe1 == 0xfe and fm1 == 0x0001ff and rm_val == 0  
// opcode: fsqrt.s ; op1:f25; dest:f24; op1val:0x7f0001ff; valaddr_reg:x16; val_offset:108; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f24, f25, 0x0, 0, x16, 108, x17, x15, 216, x18)

inst_28:
// rs1==f24, rd==f12, fs1 == 0 and fe1 == 0xfe and fm1 == 0x7ffe00 and rm_val == 0  
// opcode: fsqrt.s ; op1:f24; dest:f12; op1val:0x7f7ffe00; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f12, f24, 0x0, 0, x16, 112, x17, x15, 224, x18)

inst_29:
// rs1==f27, rd==f31, fs1 == 0 and fe1 == 0xfe and fm1 == 0x0003ff and rm_val == 0  
// opcode: fsqrt.s ; op1:f27; dest:f31; op1val:0x7f0003ff; valaddr_reg:x16; val_offset:116; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f31, f27, 0x0, 0, x16, 116, x17, x15, 232, x18)

inst_30:
// rs1==f29, rd==f1, fs1 == 0 and fe1 == 0xfe and fm1 == 0x7ffc00 and rm_val == 0  
// opcode: fsqrt.s ; op1:f29; dest:f1; op1val:0x7f7ffc00; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f1, f29, 0x0, 0, x16, 120, x17, x15, 240, x18)

inst_31:
// rs1==f13, rd==f17, fs1 == 0 and fe1 == 0xfe and fm1 == 0x0007ff and rm_val == 0  
// opcode: fsqrt.s ; op1:f13; dest:f17; op1val:0x7f0007ff; valaddr_reg:x16; val_offset:124; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f17, f13, 0x0, 0, x16, 124, x17, x15, 248, x18)

inst_32:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7ff800 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x7f7ff800; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 128, x17, x15, 256, x18)

inst_33:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000fff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x7f000fff; valaddr_reg:x16; val_offset:132; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 132, x17, x15, 264, x18)

inst_34:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7ff000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x7f7ff000; valaddr_reg:x16; val_offset:136; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 136, x17, x15, 272, x18)

inst_35:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x001fff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x7f001fff; valaddr_reg:x16; val_offset:140; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 140, x17, x15, 280, x18)

inst_36:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fe000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x7f7fe000; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 144, x17, x15, 288, x18)

inst_37:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x003fff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x7f003fff; valaddr_reg:x16; val_offset:148; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 148, x17, x15, 296, x18)

inst_38:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fc000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x7f7fc000; valaddr_reg:x16; val_offset:152; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 152, x17, x15, 304, x18)

inst_39:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x007fff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x7f007fff; valaddr_reg:x16; val_offset:156; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 156, x17, x15, 312, x18)

inst_40:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7f8000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x7f7f8000; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 160, x17, x15, 320, x18)

inst_41:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ffff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x7f00ffff; valaddr_reg:x16; val_offset:164; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 164, x17, x15, 328, x18)

inst_42:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7f0000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x7f7f0000; valaddr_reg:x16; val_offset:168; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 168, x17, x15, 336, x18)

inst_43:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ffff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x7f01ffff; valaddr_reg:x16; val_offset:172; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 172, x17, x15, 344, x18)

inst_44:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7e0000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x7f7e0000; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 176, x17, x15, 352, x18)

inst_45:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ffff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x7f03ffff; valaddr_reg:x16; val_offset:180; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 180, x17, x15, 360, x18)

inst_46:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7c0000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x7f7c0000; valaddr_reg:x16; val_offset:184; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 184, x17, x15, 368, x18)

inst_47:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07ffff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x7f07ffff; valaddr_reg:x16; val_offset:188; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 188, x17, x15, 376, x18)

inst_48:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x780000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x7f780000; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 192, x17, x15, 384, x18)

inst_49:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fffff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x7f0fffff; valaddr_reg:x16; val_offset:196; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 196, x17, x15, 392, x18)

inst_50:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x700000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x7f700000; valaddr_reg:x16; val_offset:200; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 200, x17, x15, 400, x18)

inst_51:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fffff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x7f1fffff; valaddr_reg:x16; val_offset:204; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 204, x17, x15, 408, x18)

inst_52:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x600000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x7f600000; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 208, x17, x15, 416, x18)

inst_53:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fffff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x7f3fffff; valaddr_reg:x16; val_offset:212; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 212, x17, x15, 424, x18)

inst_54:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x400000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x7f400000; valaddr_reg:x16; val_offset:216; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 216, x17, x15, 432, x18)

inst_55:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x7f7fffff; valaddr_reg:x16; val_offset:220; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 220, x17, x15, 440, x18)

inst_56:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x7f000000; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 224, x17, x15, 448, x18)

inst_57:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000001 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x800001; valaddr_reg:x16; val_offset:228; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 228, x17, x15, 456, x18)

inst_58:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x800000; valaddr_reg:x16; val_offset:232; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 232, x17, x15, 464, x18)

inst_59:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7ffffe and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0xfffffe; valaddr_reg:x16; val_offset:236; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 236, x17, x15, 472, x18)

inst_60:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000003 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x800003; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 240, x17, x15, 480, x18)

inst_61:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7ffffc and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0xfffffc; valaddr_reg:x16; val_offset:244; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 244, x17, x15, 488, x18)

inst_62:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000007 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x800007; valaddr_reg:x16; val_offset:248; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 248, x17, x15, 496, x18)

inst_63:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7ffff8 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0xfffff8; valaddr_reg:x16; val_offset:252; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 252, x17, x15, 504, x18)

inst_64:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00000f and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x80000f; valaddr_reg:x16; val_offset:256; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 256, x17, x15, 512, x18)

inst_65:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7ffff0 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0xfffff0; valaddr_reg:x16; val_offset:260; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 260, x17, x15, 520, x18)

inst_66:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00001f and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x80001f; valaddr_reg:x16; val_offset:264; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 264, x17, x15, 528, x18)

inst_67:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7fffe0 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0xffffe0; valaddr_reg:x16; val_offset:268; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 268, x17, x15, 536, x18)

inst_68:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00003f and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x80003f; valaddr_reg:x16; val_offset:272; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 272, x17, x15, 544, x18)

inst_69:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7fffc0 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0xffffc0; valaddr_reg:x16; val_offset:276; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 276, x17, x15, 552, x18)

inst_70:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00007f and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x80007f; valaddr_reg:x16; val_offset:280; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 280, x17, x15, 560, x18)

inst_71:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7fff80 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0xffff80; valaddr_reg:x16; val_offset:284; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 284, x17, x15, 568, x18)

inst_72:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x0000ff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x8000ff; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 288, x17, x15, 576, x18)

inst_73:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7fff00 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0xffff00; valaddr_reg:x16; val_offset:292; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 292, x17, x15, 584, x18)

inst_74:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x0001ff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x8001ff; valaddr_reg:x16; val_offset:296; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 296, x17, x15, 592, x18)

inst_75:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7ffe00 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0xfffe00; valaddr_reg:x16; val_offset:300; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 300, x17, x15, 600, x18)

inst_76:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x0003ff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x8003ff; valaddr_reg:x16; val_offset:304; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 304, x17, x15, 608, x18)

inst_77:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7ffc00 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0xfffc00; valaddr_reg:x16; val_offset:308; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 308, x17, x15, 616, x18)

inst_78:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x0007ff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x8007ff; valaddr_reg:x16; val_offset:312; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 312, x17, x15, 624, x18)

inst_79:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7ff800 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0xfff800; valaddr_reg:x16; val_offset:316; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 316, x17, x15, 632, x18)

inst_80:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000fff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x800fff; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 320, x17, x15, 640, x18)

inst_81:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7ff000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0xfff000; valaddr_reg:x16; val_offset:324; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 324, x17, x15, 648, x18)

inst_82:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x001fff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x801fff; valaddr_reg:x16; val_offset:328; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 328, x17, x15, 656, x18)

inst_83:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7fe000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0xffe000; valaddr_reg:x16; val_offset:332; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 332, x17, x15, 664, x18)

inst_84:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x003fff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x803fff; valaddr_reg:x16; val_offset:336; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 336, x17, x15, 672, x18)

inst_85:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7fc000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0xffc000; valaddr_reg:x16; val_offset:340; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 340, x17, x15, 680, x18)

inst_86:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x007fff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x807fff; valaddr_reg:x16; val_offset:344; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 344, x17, x15, 688, x18)

inst_87:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7f8000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0xff8000; valaddr_reg:x16; val_offset:348; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 348, x17, x15, 696, x18)

inst_88:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00ffff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x80ffff; valaddr_reg:x16; val_offset:352; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 352, x17, x15, 704, x18)

inst_89:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7f0000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0xff0000; valaddr_reg:x16; val_offset:356; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 356, x17, x15, 712, x18)

inst_90:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x01ffff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x81ffff; valaddr_reg:x16; val_offset:360; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 360, x17, x15, 720, x18)

inst_91:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7e0000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0xfe0000; valaddr_reg:x16; val_offset:364; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 364, x17, x15, 728, x18)

inst_92:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x03ffff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x83ffff; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 368, x17, x15, 736, x18)

inst_93:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7c0000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0xfc0000; valaddr_reg:x16; val_offset:372; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 372, x17, x15, 744, x18)

inst_94:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x07ffff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x87ffff; valaddr_reg:x16; val_offset:376; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 376, x17, x15, 752, x18)

inst_95:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x780000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0xf80000; valaddr_reg:x16; val_offset:380; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 380, x17, x15, 760, x18)

inst_96:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x0fffff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x8fffff; valaddr_reg:x16; val_offset:384; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 384, x17, x15, 768, x18)

inst_97:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x700000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0xf00000; valaddr_reg:x16; val_offset:388; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 388, x17, x15, 776, x18)

inst_98:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x1fffff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x9fffff; valaddr_reg:x16; val_offset:392; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 392, x17, x15, 784, x18)

inst_99:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x600000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0xe00000; valaddr_reg:x16; val_offset:396; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 396, x17, x15, 792, x18)

inst_100:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x3fffff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0xbfffff; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 400, x17, x15, 800, x18)

inst_101:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x400000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0xc00000; valaddr_reg:x16; val_offset:404; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 404, x17, x15, 808, x18)

inst_102:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7fffff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0xffffff; valaddr_reg:x16; val_offset:408; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 408, x17, x15, 816, x18)

inst_103:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x1; valaddr_reg:x16; val_offset:412; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 412, x17, x15, 824, x18)

inst_104:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7ffffe and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x7ffffe; valaddr_reg:x16; val_offset:416; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 416, x17, x15, 832, x18)

inst_105:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000003 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x3; valaddr_reg:x16; val_offset:420; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 420, x17, x15, 840, x18)

inst_106:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7ffffc and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x7ffffc; valaddr_reg:x16; val_offset:424; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 424, x17, x15, 848, x18)

inst_107:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000007 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x7; valaddr_reg:x16; val_offset:428; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 428, x17, x15, 856, x18)

inst_108:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7ffff8 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x7ffff8; valaddr_reg:x16; val_offset:432; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 432, x17, x15, 864, x18)

inst_109:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000f and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0xf; valaddr_reg:x16; val_offset:436; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 436, x17, x15, 872, x18)

inst_110:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7ffff0 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x7ffff0; valaddr_reg:x16; val_offset:440; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 440, x17, x15, 880, x18)

inst_111:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001f and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x1f; valaddr_reg:x16; val_offset:444; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 444, x17, x15, 888, x18)

inst_112:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffe0 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x7fffe0; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 448, x17, x15, 896, x18)

inst_113:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003f and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x3f; valaddr_reg:x16; val_offset:452; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 452, x17, x15, 904, x18)

inst_114:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffc0 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x7fffc0; valaddr_reg:x16; val_offset:456; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 456, x17, x15, 912, x18)

inst_115:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00007f and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x7f; valaddr_reg:x16; val_offset:460; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 460, x17, x15, 920, x18)

inst_116:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fff80 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x7fff80; valaddr_reg:x16; val_offset:464; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 464, x17, x15, 928, x18)

inst_117:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0000ff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0xff; valaddr_reg:x16; val_offset:468; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 468, x17, x15, 936, x18)

inst_118:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fff00 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x7fff00; valaddr_reg:x16; val_offset:472; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 472, x17, x15, 944, x18)

inst_119:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0001ff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x1ff; valaddr_reg:x16; val_offset:476; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 476, x17, x15, 952, x18)

inst_120:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7ffe00 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x7ffe00; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 480, x17, x15, 960, x18)

inst_121:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0003ff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x3ff; valaddr_reg:x16; val_offset:484; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 484, x17, x15, 968, x18)

inst_122:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7ffc00 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x7ffc00; valaddr_reg:x16; val_offset:488; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 488, x17, x15, 976, x18)

inst_123:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0007ff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x7ff; valaddr_reg:x16; val_offset:492; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 492, x17, x15, 984, x18)

inst_124:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7ff800 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x7ff800; valaddr_reg:x16; val_offset:496; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 496, x17, x15, 992, x18)

inst_125:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000fff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0xfff; valaddr_reg:x16; val_offset:500; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 500, x17, x15, 1000, x18)

inst_126:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7ff000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x7ff000; valaddr_reg:x16; val_offset:504; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 504, x17, x15, 1008, x18)

inst_127:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x001fff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x1fff; valaddr_reg:x16; val_offset:508; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 508, x17, x15, 1016, x18)

inst_128:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fe000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x7fe000; valaddr_reg:x16; val_offset:512; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 512, x17, x15, 1024, x18)

inst_129:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x003fff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x3fff; valaddr_reg:x16; val_offset:516; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 516, x17, x15, 1032, x18)

inst_130:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fc000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x7fc000; valaddr_reg:x16; val_offset:520; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 520, x17, x15, 1040, x18)

inst_131:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x007fff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x7fff; valaddr_reg:x16; val_offset:524; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 524, x17, x15, 1048, x18)

inst_132:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7f8000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x7f8000; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 528, x17, x15, 1056, x18)

inst_133:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00ffff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0xffff; valaddr_reg:x16; val_offset:532; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 532, x17, x15, 1064, x18)

inst_134:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7f0000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x7f0000; valaddr_reg:x16; val_offset:536; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 536, x17, x15, 1072, x18)

inst_135:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x01ffff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x1ffff; valaddr_reg:x16; val_offset:540; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 540, x17, x15, 1080, x18)

inst_136:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7e0000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x7e0000; valaddr_reg:x16; val_offset:544; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 544, x17, x15, 1088, x18)

inst_137:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x03ffff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x3ffff; valaddr_reg:x16; val_offset:548; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 548, x17, x15, 1096, x18)

inst_138:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7c0000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x7c0000; valaddr_reg:x16; val_offset:552; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 552, x17, x15, 1104, x18)

inst_139:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x07ffff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x7ffff; valaddr_reg:x16; val_offset:556; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 556, x17, x15, 1112, x18)

inst_140:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x780000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x780000; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 560, x17, x15, 1120, x18)

inst_141:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0fffff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0xfffff; valaddr_reg:x16; val_offset:564; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 564, x17, x15, 1128, x18)

inst_142:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x700000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x700000; valaddr_reg:x16; val_offset:568; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 568, x17, x15, 1136, x18)

inst_143:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x1fffff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x1fffff; valaddr_reg:x16; val_offset:572; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 572, x17, x15, 1144, x18)

inst_144:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x600000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x600000; valaddr_reg:x16; val_offset:576; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 576, x17, x15, 1152, x18)

inst_145:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x3fffff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x3fffff; valaddr_reg:x16; val_offset:580; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 580, x17, x15, 1160, x18)

inst_146:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x400000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x400000; valaddr_reg:x16; val_offset:584; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 584, x17, x15, 1168, x18)

inst_147:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x7fffff; valaddr_reg:x16; val_offset:588; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 588, x17, x15, 1176, x18)

inst_148:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000001 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x3f800001; valaddr_reg:x16; val_offset:592; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 592, x17, x15, 1184, x18)

inst_149:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x3f800000; valaddr_reg:x16; val_offset:596; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 596, x17, x15, 1192, x18)

inst_150:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7ffffe and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x3ffffffe; valaddr_reg:x16; val_offset:600; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 600, x17, x15, 1200, x18)

inst_151:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000003 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x3f800003; valaddr_reg:x16; val_offset:604; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 604, x17, x15, 1208, x18)

inst_152:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7ffffc and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x3ffffffc; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 608, x17, x15, 1216, x18)

inst_153:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000007 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x3f800007; valaddr_reg:x16; val_offset:612; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 612, x17, x15, 1224, x18)

inst_154:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7ffff8 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x3ffffff8; valaddr_reg:x16; val_offset:616; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 616, x17, x15, 1232, x18)

inst_155:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00000f and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x3f80000f; valaddr_reg:x16; val_offset:620; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 620, x17, x15, 1240, x18)

inst_156:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7ffff0 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x3ffffff0; valaddr_reg:x16; val_offset:624; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 624, x17, x15, 1248, x18)

inst_157:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00001f and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x3f80001f; valaddr_reg:x16; val_offset:628; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 628, x17, x15, 1256, x18)

inst_158:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7fffe0 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x3fffffe0; valaddr_reg:x16; val_offset:632; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 632, x17, x15, 1264, x18)

inst_159:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00003f and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x3f80003f; valaddr_reg:x16; val_offset:636; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 636, x17, x15, 1272, x18)

inst_160:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7fffc0 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x3fffffc0; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 640, x17, x15, 1280, x18)

inst_161:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00007f and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x3f80007f; valaddr_reg:x16; val_offset:644; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 644, x17, x15, 1288, x18)

inst_162:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7fff80 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x3fffff80; valaddr_reg:x16; val_offset:648; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 648, x17, x15, 1296, x18)

inst_163:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x0000ff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x3f8000ff; valaddr_reg:x16; val_offset:652; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 652, x17, x15, 1304, x18)

inst_164:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7fff00 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x3fffff00; valaddr_reg:x16; val_offset:656; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 656, x17, x15, 1312, x18)

inst_165:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x0001ff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x3f8001ff; valaddr_reg:x16; val_offset:660; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 660, x17, x15, 1320, x18)

inst_166:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7ffe00 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x3ffffe00; valaddr_reg:x16; val_offset:664; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 664, x17, x15, 1328, x18)

inst_167:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x0003ff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x3f8003ff; valaddr_reg:x16; val_offset:668; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 668, x17, x15, 1336, x18)

inst_168:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7ffc00 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x3ffffc00; valaddr_reg:x16; val_offset:672; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 672, x17, x15, 1344, x18)

inst_169:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x0007ff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x3f8007ff; valaddr_reg:x16; val_offset:676; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 676, x17, x15, 1352, x18)

inst_170:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7ff800 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x3ffff800; valaddr_reg:x16; val_offset:680; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 680, x17, x15, 1360, x18)

inst_171:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000fff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x3f800fff; valaddr_reg:x16; val_offset:684; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 684, x17, x15, 1368, x18)

inst_172:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7ff000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x3ffff000; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 688, x17, x15, 1376, x18)

inst_173:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x001fff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x3f801fff; valaddr_reg:x16; val_offset:692; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 692, x17, x15, 1384, x18)

inst_174:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7fe000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x3fffe000; valaddr_reg:x16; val_offset:696; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 696, x17, x15, 1392, x18)

inst_175:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x003fff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x3f803fff; valaddr_reg:x16; val_offset:700; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 700, x17, x15, 1400, x18)

inst_176:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7fc000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x3fffc000; valaddr_reg:x16; val_offset:704; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 704, x17, x15, 1408, x18)

inst_177:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x007fff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x3f807fff; valaddr_reg:x16; val_offset:708; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 708, x17, x15, 1416, x18)

inst_178:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7f8000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x3fff8000; valaddr_reg:x16; val_offset:712; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 712, x17, x15, 1424, x18)

inst_179:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00ffff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x3f80ffff; valaddr_reg:x16; val_offset:716; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 716, x17, x15, 1432, x18)

inst_180:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7f0000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x3fff0000; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 720, x17, x15, 1440, x18)

inst_181:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x01ffff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x3f81ffff; valaddr_reg:x16; val_offset:724; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 724, x17, x15, 1448, x18)

inst_182:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7e0000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x3ffe0000; valaddr_reg:x16; val_offset:728; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 728, x17, x15, 1456, x18)

inst_183:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x03ffff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x3f83ffff; valaddr_reg:x16; val_offset:732; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 732, x17, x15, 1464, x18)

inst_184:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7c0000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x3ffc0000; valaddr_reg:x16; val_offset:736; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 736, x17, x15, 1472, x18)

inst_185:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x07ffff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x3f87ffff; valaddr_reg:x16; val_offset:740; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 740, x17, x15, 1480, x18)

inst_186:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x780000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x3ff80000; valaddr_reg:x16; val_offset:744; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 744, x17, x15, 1488, x18)

inst_187:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x0fffff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x3f8fffff; valaddr_reg:x16; val_offset:748; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 748, x17, x15, 1496, x18)

inst_188:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x700000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x3ff00000; valaddr_reg:x16; val_offset:752; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 752, x17, x15, 1504, x18)

inst_189:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x1fffff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x3f9fffff; valaddr_reg:x16; val_offset:756; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 756, x17, x15, 1512, x18)

inst_190:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x600000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x3fe00000; valaddr_reg:x16; val_offset:760; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 760, x17, x15, 1520, x18)

inst_191:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x3fffff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x3fbfffff; valaddr_reg:x16; val_offset:764; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 764, x17, x15, 1528, x18)

inst_192:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x400000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x3fc00000; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 768, x17, x15, 1536, x18)

inst_193:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7fffff and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x3fffffff; valaddr_reg:x16; val_offset:772; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 772, x17, x15, 1544, x18)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
test_fp:
.word 0x0
.word 0x7f4ccccc
.word 0x7f333333
.word 0x7f5b6db6
.word 0x7f249249
.word 0x7f444444
.word 0x7f3bbbbb
.word 0x7f666666
.word 0x7f199999
.word 0x7f6db6db
.word 0x7f36db6d
.word 0x7f000001
.word 0x7f7ffffe
.word 0x7f000003
.word 0x7f7ffffc
.word 0x7f000007
.word 0x7f7ffff8
.word 0x7f00000f
.word 0x7f7ffff0
.word 0x7f00001f
.word 0x7f7fffe0
.word 0x7f00003f
.word 0x7f7fffc0
.word 0x7f00007f
.word 0x7f7fff80
.word 0x7f0000ff
.word 0x7f7fff00
.word 0x7f0001ff
.word 0x7f7ffe00
.word 0x7f0003ff
.word 0x7f7ffc00
.word 0x7f0007ff
.word 0x7f7ff800
.word 0x7f000fff
.word 0x7f7ff000
.word 0x7f001fff
.word 0x7f7fe000
.word 0x7f003fff
.word 0x7f7fc000
.word 0x7f007fff
.word 0x7f7f8000
.word 0x7f00ffff
.word 0x7f7f0000
.word 0x7f01ffff
.word 0x7f7e0000
.word 0x7f03ffff
.word 0x7f7c0000
.word 0x7f07ffff
.word 0x7f780000
.word 0x7f0fffff
.word 0x7f700000
.word 0x7f1fffff
.word 0x7f600000
.word 0x7f3fffff
.word 0x7f400000
.word 0x7f7fffff
.word 0x7f000000
.word 0x800001
.word 0x800000
.word 0xfffffe
.word 0x800003
.word 0xfffffc
.word 0x800007
.word 0xfffff8
.word 0x80000f
.word 0xfffff0
.word 0x80001f
.word 0xffffe0
.word 0x80003f
.word 0xffffc0
.word 0x80007f
.word 0xffff80
.word 0x8000ff
.word 0xffff00
.word 0x8001ff
.word 0xfffe00
.word 0x8003ff
.word 0xfffc00
.word 0x8007ff
.word 0xfff800
.word 0x800fff
.word 0xfff000
.word 0x801fff
.word 0xffe000
.word 0x803fff
.word 0xffc000
.word 0x807fff
.word 0xff8000
.word 0x80ffff
.word 0xff0000
.word 0x81ffff
.word 0xfe0000
.word 0x83ffff
.word 0xfc0000
.word 0x87ffff
.word 0xf80000
.word 0x8fffff
.word 0xf00000
.word 0x9fffff
.word 0xe00000
.word 0xbfffff
.word 0xc00000
.word 0xffffff
.word 0x1
.word 0x7ffffe
.word 0x3
.word 0x7ffffc
.word 0x7
.word 0x7ffff8
.word 0xf
.word 0x7ffff0
.word 0x1f
.word 0x7fffe0
.word 0x3f
.word 0x7fffc0
.word 0x7f
.word 0x7fff80
.word 0xff
.word 0x7fff00
.word 0x1ff
.word 0x7ffe00
.word 0x3ff
.word 0x7ffc00
.word 0x7ff
.word 0x7ff800
.word 0xfff
.word 0x7ff000
.word 0x1fff
.word 0x7fe000
.word 0x3fff
.word 0x7fc000
.word 0x7fff
.word 0x7f8000
.word 0xffff
.word 0x7f0000
.word 0x1ffff
.word 0x7e0000
.word 0x3ffff
.word 0x7c0000
.word 0x7ffff
.word 0x780000
.word 0xfffff
.word 0x700000
.word 0x1fffff
.word 0x600000
.word 0x3fffff
.word 0x400000
.word 0x7fffff
.word 0x3f800001
.word 0x3f800000
.word 0x3ffffffe
.word 0x3f800003
.word 0x3ffffffc
.word 0x3f800007
.word 0x3ffffff8
.word 0x3f80000f
.word 0x3ffffff0
.word 0x3f80001f
.word 0x3fffffe0
.word 0x3f80003f
.word 0x3fffffc0
.word 0x3f80007f
.word 0x3fffff80
.word 0x3f8000ff
.word 0x3fffff00
.word 0x3f8001ff
.word 0x3ffffe00
.word 0x3f8003ff
.word 0x3ffffc00
.word 0x3f8007ff
.word 0x3ffff800
.word 0x3f800fff
.word 0x3ffff000
.word 0x3f801fff
.word 0x3fffe000
.word 0x3f803fff
.word 0x3fffc000
.word 0x3f807fff
.word 0x3fff8000
.word 0x3f80ffff
.word 0x3fff0000
.word 0x3f81ffff
.word 0x3ffe0000
.word 0x3f83ffff
.word 0x3ffc0000
.word 0x3f87ffff
.word 0x3ff80000
.word 0x3f8fffff
.word 0x3ff00000
.word 0x3f9fffff
.word 0x3fe00000
.word 0x3fbfffff
.word 0x3fc00000
.word 0x3fffffff
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 388*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
