
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.5.2
// timestamp : Tue Sep  7 17:29:12 2021 GMT
// usage     : riscv_ctg \
//                  -- cgf $cgf \
//                  -- xlen $xlen \
// -----------
//
// -----------
// Copyright (c) 2021. IIT Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmv.x.w instruction of the RISC-V F extension for the fmv.x.w_b22 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmv.x.w_b22)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:// rs1==f3, rd==x9, fs1 == 0 and fe1 == 0x7c and fm1 == 0x4923b8 and rm_val == 0  
// opcode: fmv.x.w ; op1:f3; dest:x9; op1val:0x3e4923b8; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x9, f3, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1:// rs1==f8, rd==x28, fs1 == 0 and fe1 == 0xc4 and fm1 == 0x046756 and rm_val == 0  
// opcode: fmv.x.w ; op1:f8; dest:x28; op1val:0x62046756; valaddr_reg:x16; val_offset:4; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x28, f8, 0x0, 0, x16, 4, x17, x15, 8, x18)

inst_2:// rs1==f6, rd==x21, fs1 == 0 and fe1 == 0x67 and fm1 == 0x53a4fc and rm_val == 0  
// opcode: fmv.x.w ; op1:f6; dest:x21; op1val:0x33d3a4fc; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x21, f6, 0x0, 0, x16, 8, x17, x15, 16, x18)

inst_3:// rs1==f24, rd==x12, fs1 == 0 and fe1 == 0x81 and fm1 == 0x696b5c and rm_val == 0  
// opcode: fmv.x.w ; op1:f24; dest:x12; op1val:0x40e96b5c; valaddr_reg:x16; val_offset:12; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x12, f24, 0x0, 0, x16, 12, x17, x15, 24, x18)

inst_4:// rs1==f15, rd==x8, fs1 == 0 and fe1 == 0x80 and fm1 == 0x681ae9 and rm_val == 0  
// opcode: fmv.x.w ; op1:f15; dest:x8; op1val:0x40681ae9; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x8, f15, 0x0, 0, x16, 16, x17, x15, 32, x18)

inst_5:// rs1==f20, rd==x14, fs1 == 0 and fe1 == 0x7f and fm1 == 0x1a616d and rm_val == 0  
// opcode: fmv.x.w ; op1:f20; dest:x14; op1val:0x3f9a616d; valaddr_reg:x16; val_offset:20; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x14, f20, 0x0, 0, x16, 20, x17, x15, 40, x18)

inst_6:// rs1==f12, rd==x3, fs1 == 0 and fe1 == 0x7e and fm1 == 0x49fee5 and rm_val == 0  
// opcode: fmv.x.w ; op1:f12; dest:x3; op1val:0x3f49fee5; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x3, f12, 0x0, 0, x16, 24, x17, x15, 48, x18)

inst_7:// rs1==f21, rd==x25, fs1 == 0 and fe1 == 0x7d and fm1 == 0x36e5d6 and rm_val == 0  
// opcode: fmv.x.w ; op1:f21; dest:x25; op1val:0x3eb6e5d6; valaddr_reg:x16; val_offset:28; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x25, f21, 0x0, 0, x16, 28, x17, x15, 56, x18)

inst_8:// rs1==f27, rd==x5, 
// opcode: fmv.x.w ; op1:f27; dest:x5; op1val:0x0; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x5, f27, 0x0, 0, x16, 32, x17, x15, 64, x18)

inst_9:// rs1==f26, rd==x4, 
// opcode: fmv.x.w ; op1:f26; dest:x4; op1val:0x0; valaddr_reg:x16; val_offset:36; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x4, f26, 0x0, 0, x16, 36, x17, x15, 72, x18)

inst_10:// rs1==f25, rd==x26, 
// opcode: fmv.x.w ; op1:f25; dest:x26; op1val:0x0; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x26, f25, 0x0, 0, x16, 40, x17, x15, 80, x18)

inst_11:// rs1==f16, rd==x11, 
// opcode: fmv.x.w ; op1:f16; dest:x11; op1val:0x0; valaddr_reg:x16; val_offset:44; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x11, f16, 0x0, 0, x16, 44, x17, x15, 88, x18)

inst_12:// rs1==f22, rd==x10, 
// opcode: fmv.x.w ; op1:f22; dest:x10; op1val:0x0; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x10, f22, 0x0, 0, x16, 48, x17, x15, 96, x18)

inst_13:// rs1==f14, rd==x24, 
// opcode: fmv.x.w ; op1:f14; dest:x24; op1val:0x0; valaddr_reg:x16; val_offset:52; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x24, f14, 0x0, 0, x16, 52, x17, x15, 104, x18)

inst_14:// rs1==f29, rd==x29, 
// opcode: fmv.x.w ; op1:f29; dest:x29; op1val:0x0; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x29, f29, 0x0, 0, x16, 56, x17, x15, 112, x18)

inst_15:// rs1==f2, rd==x27, 
// opcode: fmv.x.w ; op1:f2; dest:x27; op1val:0x0; valaddr_reg:x16; val_offset:60; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x27, f2, 0x0, 0, x16, 60, x17, x15, 120, x18)

inst_16:// rs1==f10, rd==x2, 
// opcode: fmv.x.w ; op1:f10; dest:x2; op1val:0x0; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x2, f10, 0x0, 0, x16, 64, x17, x15, 128, x18)

inst_17:// rs1==f23, rd==x1, 
// opcode: fmv.x.w ; op1:f23; dest:x1; op1val:0x0; valaddr_reg:x16; val_offset:68; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x1, f23, 0x0, 0, x16, 68, x17, x15, 136, x18)

inst_18:// rs1==f1, rd==x30, 
// opcode: fmv.x.w ; op1:f1; dest:x30; op1val:0x0; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x30, f1, 0x0, 0, x16, 72, x17, x15, 144, x18)

inst_19:// rs1==f9, rd==x6, 
// opcode: fmv.x.w ; op1:f9; dest:x6; op1val:0x0; valaddr_reg:x16; val_offset:76; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x6, f9, 0x0, 0, x16, 76, x17, x15, 152, x18)

inst_20:// rs1==f13, rd==x23, 
// opcode: fmv.x.w ; op1:f13; dest:x23; op1val:0x0; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x23, f13, 0x0, 0, x16, 80, x17, x15, 160, x18)

inst_21:// rs1==f4, rd==x7, 
// opcode: fmv.x.w ; op1:f4; dest:x7; op1val:0x0; valaddr_reg:x16; val_offset:84; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x7, f4, 0x0, 0, x16, 84, x17, x15, 168, x18)

inst_22:// rs1==f28, rd==x18, 
// opcode: fmv.x.w ; op1:f28; dest:x18; op1val:0x0; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x22
TEST_FPID_OP(fmv.x.w, x18, f28, 0x0, 0, x16, 88, x17, x15, 176, x22)

inst_23:// rs1==f11, rd==x0, 
// opcode: fmv.x.w ; op1:f11; dest:x0; op1val:0x0; valaddr_reg:x16; val_offset:92; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x0, f11, 0x0, 0, x16, 92, x17, x15, 184, x18)

inst_24:// rs1==f17, rd==x19, 
// opcode: fmv.x.w ; op1:f17; dest:x19; op1val:0x0; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x19, f17, 0x0, 0, x16, 96, x17, x15, 192, x18)
RVTEST_VALBASEMOV(x20, x16)
RVTEST_SIGBASE(x19,signature_x19_0)

inst_25:// rs1==f18, rd==x15, 
// opcode: fmv.x.w ; op1:f18; dest:x15; op1val:0x0; valaddr_reg:x20; val_offset:100; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x15, f18, 0x0, 0, x20, 100, x21, x19, 0, x18)
RVTEST_VALBASEMOV(x16, x20)
RVTEST_SIGBASE(x15,signature_x15_2)

inst_26:// rs1==f0, rd==x22, 
// opcode: fmv.x.w ; op1:f0; dest:x22; op1val:0x0; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x22, f0, 0x0, 0, x16, 104, x17, x15, 0, x18)

inst_27:// rs1==f7, rd==x13, 
// opcode: fmv.x.w ; op1:f7; dest:x13; op1val:0x0; valaddr_reg:x16; val_offset:108; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x13, f7, 0x0, 0, x16, 108, x17, x15, 8, x18)

inst_28:// rs1==f31, rd==x20, 
// opcode: fmv.x.w ; op1:f31; dest:x20; op1val:0x0; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x20, f31, 0x0, 0, x16, 112, x17, x15, 16, x18)

inst_29:// rs1==f30, rd==x31, 
// opcode: fmv.x.w ; op1:f30; dest:x31; op1val:0x0; valaddr_reg:x16; val_offset:116; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x31, f30, 0x0, 0, x16, 116, x17, x15, 24, x18)
RVTEST_VALBASEMOV(x20, x16)
RVTEST_SIGBASE(x19,signature_x19_1)

inst_30:// rs1==f5, rd==x16, 
// opcode: fmv.x.w ; op1:f5; dest:x16; op1val:0x0; valaddr_reg:x20; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x16, f5, 0x0, 0, x20, 120, x21, x19, 0, x18)

inst_31:// rs1==f19, rd==x17, 
// opcode: fmv.x.w ; op1:f19; dest:x17; op1val:0x0; valaddr_reg:x20; val_offset:124; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x17, f19, 0x0, 0, x20, 124, x21, x19, 8, x18)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
test_fp:
.word 0x3e4923b8
.word 0x62046756
.word 0x33d3a4fc
.word 0x40e96b5c
.word 0x40681ae9
.word 0x3f9a616d
.word 0x3f49fee5
.word 0x3eb6e5d6
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 50*(XLEN/32),4,0xdeadbeef


signature_x19_0:
    .fill 2*(XLEN/32),4,0xdeadbeef


signature_x15_2:
    .fill 8*(XLEN/32),4,0xdeadbeef


signature_x19_1:
    .fill 4*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
