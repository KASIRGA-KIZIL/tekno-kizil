
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.5.2
// timestamp : Tue Sep  7 16:07:58 2021 GMT
// usage     : riscv_ctg \
//                  -- cgf $cgf \
//                  -- xlen $xlen \
// -----------
//
// -----------
// Copyright (c) 2021. IIT Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V F extension for the fmadd_b17 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b17)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2, rs1==f2, rs2==f0, rs3==f2, rd==f9, fs1 == 0 and fe1 == 0xfe and fm1 == 0x222105 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1186f9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f2; op2:f0; op3:f2; dest:f9; op1val:0x7f222105; op2val:0x7f1186f9; op3val:0x7f222105; valaddr_reg:x16; val_offset:0; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f9, f2, f0, f2, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1:
// rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1, rs1==f9, rs2==f24, rs3==f15, rd==f24, fs1 == 0 and fe1 == 0xfe and fm1 == 0x124d93 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x571b9d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f9; op2:f24; op3:f15; dest:f24; op1val:0x7f124d93; op2val:0x7e571b9d; op3val:0xff7fffff; valaddr_reg:x16; val_offset:12; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f24, f9, f24, f15, 0x0, 0, x16, 12, x17, x15, 8, x18)

inst_2:
// rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1, rs1==f25, rs2==f5, rs3==f10, rd==f10, fs1 == 0 and fe1 == 0xfe and fm1 == 0x0235d7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x11efef and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f25; op2:f5; op3:f10; dest:f10; op1val:0x7f0235d7; op2val:0x7f11efef; op3val:0xff7fffff; valaddr_reg:x16; val_offset:24; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f10, f25, f5, f10, 0x0, 0, x16, 24, x17, x15, 16, x18)

inst_3:
// rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3, rs1==f28, rs2==f28, rs3==f6, rd==f19, fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ff4a3 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x079bc3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f28; op2:f28; op3:f6; dest:f19; op1val:0x7deff4a3; op2val:0x7deff4a3; op3val:0xff7fffff; valaddr_reg:x16; val_offset:36; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f19, f28, f28, f6, 0x0, 0, x16, 36, x17, x15, 24, x18)

inst_4:
// rs1 == rs2 == rd != rs3, rs1==f7, rs2==f7, rs3==f30, rd==f7, fs1 == 0 and fe1 == 0xfe and fm1 == 0x1393e8 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x718162 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f7; op2:f7; op3:f30; dest:f7; op1val:0x7f1393e8; op2val:0x7f1393e8; op3val:0xff7fffff; valaddr_reg:x16; val_offset:48; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f7, f7, f7, f30, 0x0, 0, x16, 48, x17, x15, 32, x18)

inst_5:
// rs1 == rs2 == rs3 != rd, rs1==f11, rs2==f11, rs3==f11, rd==f28, fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d982c and fs2 == 0 and fe2 == 0xf7 and fm2 == 0x3f1e72 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f11; op2:f11; op3:f11; dest:f28; op1val:0x7eed982c; op2val:0x7eed982c; op3val:0x7eed982c; valaddr_reg:x16; val_offset:60; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f28, f11, f11, f11, 0x0, 0, x16, 60, x17, x15, 40, x18)

inst_6:
// rs1 == rs2 == rs3 == rd, rs1==f8, rs2==f8, rs3==f8, rd==f8, fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c653b and fs2 == 0 and fe2 == 0xf5 and fm2 == 0x3530a7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f8; op2:f8; op3:f8; dest:f8; op1val:0x7e1c653b; op2val:0x7e1c653b; op3val:0x7e1c653b; valaddr_reg:x16; val_offset:72; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f8, f8, f8, f8, 0x0, 0, x16, 72, x17, x15, 48, x18)

inst_7:
// rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2, rs1==f15, rs2==f19, rs3==f24, rd==f15, fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 0 and fe2 == 0xfd and fm2 == 0x74b97b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f15; op2:f19; op3:f24; dest:f15; op1val:0x7eb1933e; op2val:0x7ef4b97b; op3val:0xff7fffff; valaddr_reg:x16; val_offset:84; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f15, f15, f19, f24, 0x0, 0, x16, 84, x17, x15, 56, x18)

inst_8:
// rd == rs2 == rs3 != rs1, rs1==f18, rs2==f25, rs3==f25, rd==f25, fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1fa7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x33ec90 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f18; op2:f25; op3:f25; dest:f25; op1val:0x7eae1fa7; op2val:0x7f33ec90; op3val:0x7f33ec90; valaddr_reg:x16; val_offset:96; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f25, f18, f25, f25, 0x0, 0, x16, 96, x17, x15, 64, x18)

inst_9:
// rs1 == rd == rs3 != rs2, rs1==f12, rs2==f6, rs3==f12, rd==f12, fs1 == 0 and fe1 == 0xfe and fm1 == 0x136313 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x25c774 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f12; op2:f6; op3:f12; dest:f12; op1val:0x7f136313; op2val:0x7ea5c774; op3val:0x7f136313; valaddr_reg:x16; val_offset:108; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f12, f12, f6, f12, 0x0, 0, x16, 108, x17, x15, 72, x18)

inst_10:
// rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd, rs1==f24, rs2==f14, rs3==f28, rd==f30, fs1 == 0 and fe1 == 0xfe and fm1 == 0x18c423 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2b53bd and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f24; op2:f14; op3:f28; dest:f30; op1val:0x7f18c423; op2val:0x7eab53bd; op3val:0xff7fffff; valaddr_reg:x16; val_offset:120; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f30, f24, f14, f28, 0x0, 0, x16, 120, x17, x15, 80, x18)

inst_11:
// rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1, rs1==f5, rs2==f23, rs3==f23, rd==f4, fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x56577b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f5; op2:f23; op3:f23; dest:f4; op1val:0x7e54b690; op2val:0x7ed6577b; op3val:0x7ed6577b; valaddr_reg:x16; val_offset:132; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f4, f5, f23, f23, 0x0, 0, x16, 132, x17, x15, 88, x18)

inst_12:
// rs1==f22, rs2==f26, rs3==f1, rd==f20, fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x367396 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f22; op2:f26; op3:f1; dest:f20; op1val:0x7eb4d220; op2val:0x7f367396; op3val:0xff7fffff; valaddr_reg:x16; val_offset:144; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f20, f22, f26, f1, 0x0, 0, x16, 144, x17, x15, 96, x18)

inst_13:
// rs1==f6, rs2==f4, rs3==f13, rd==f18, fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 0 and fe2 == 0xfc and fm2 == 0x1caa1e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f6; op2:f4; op3:f13; dest:f18; op1val:0x7e76467b; op2val:0x7e1caa1e; op3val:0xff7fffff; valaddr_reg:x16; val_offset:156; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f18, f6, f4, f13, 0x0, 0, x16, 156, x17, x15, 104, x18)

inst_14:
// rs1==f4, rs2==f30, rs3==f9, rd==f13, fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2036ee and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f4; op2:f30; op3:f9; dest:f13; op1val:0x7e9ce997; op2val:0x7ea036ee; op3val:0xff7fffff; valaddr_reg:x16; val_offset:168; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f4, f30, f9, 0x0, 0, x16, 168, x17, x15, 112, x18)

inst_15:
// rs1==f31, rs2==f3, rs3==f27, rd==f21, fs1 == 0 and fe1 == 0xfd and fm1 == 0x0dcb58 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3631e6 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f31; op2:f3; op3:f27; dest:f21; op1val:0x7e8dcb58; op2val:0x7f3631e6; op3val:0xff7fffff; valaddr_reg:x16; val_offset:180; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f21, f31, f3, f27, 0x0, 0, x16, 180, x17, x15, 120, x18)

inst_16:
// rs1==f26, rs2==f1, rs3==f20, rd==f23, fs1 == 0 and fe1 == 0xfd and fm1 == 0x74984e and fs2 == 0 and fe2 == 0xfb and fm2 == 0x01e0a6 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f26; op2:f1; op3:f20; dest:f23; op1val:0x7ef4984e; op2val:0x7d81e0a6; op3val:0xff7fffff; valaddr_reg:x16; val_offset:192; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f23, f26, f1, f20, 0x0, 0, x16, 192, x17, x15, 128, x18)

inst_17:
// rs1==f20, rs2==f18, rs3==f4, rd==f1, fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e3fac and fs2 == 0 and fe2 == 0xfb and fm2 == 0x5a8c22 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f20; op2:f18; op3:f4; dest:f1; op1val:0x7f0e3fac; op2val:0x7dda8c22; op3val:0xff7fffff; valaddr_reg:x16; val_offset:204; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f1, f20, f18, f4, 0x0, 0, x16, 204, x17, x15, 136, x18)

inst_18:
// rs1==f23, rs2==f16, rs3==f31, rd==f22, fs1 == 0 and fe1 == 0xfa and fm1 == 0x60e796 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x215e74 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f23; op2:f16; op3:f31; dest:f22; op1val:0x7d60e796; op2val:0x7ea15e74; op3val:0xff7fffff; valaddr_reg:x16; val_offset:216; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f22, f23, f16, f31, 0x0, 0, x16, 216, x17, x15, 144, x18)

inst_19:
// rs1==f17, rs2==f13, rs3==f7, rd==f27, fs1 == 0 and fe1 == 0xfb and fm1 == 0x4b1c72 and fs2 == 0 and fe2 == 0xf8 and fm2 == 0x7c8383 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f17; op2:f13; op3:f7; dest:f27; op1val:0x7dcb1c72; op2val:0x7c7c8383; op3val:0xff7fffff; valaddr_reg:x16; val_offset:228; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f27, f17, f13, f7, 0x0, 0, x16, 228, x17, x15, 152, x18)

inst_20:
// rs1==f3, rs2==f9, rs3==f18, rd==f2, fs1 == 0 and fe1 == 0xfc and fm1 == 0x5f88a0 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x213294 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f3; op2:f9; op3:f18; dest:f2; op1val:0x7e5f88a0; op2val:0x7ea13294; op3val:0xff7fffff; valaddr_reg:x16; val_offset:240; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f2, f3, f9, f18, 0x0, 0, x16, 240, x17, x15, 160, x18)

inst_21:
// rs1==f30, rs2==f27, rs3==f26, rd==f16, fs1 == 0 and fe1 == 0xfc and fm1 == 0x729ac7 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x3a8006 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f30; op2:f27; op3:f26; dest:f16; op1val:0x7e729ac7; op2val:0x7e3a8006; op3val:0xff7fffff; valaddr_reg:x16; val_offset:252; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f16, f30, f27, f26, 0x0, 0, x16, 252, x17, x15, 168, x18)

inst_22:
// rs1==f14, rs2==f17, rs3==f29, rd==f31, fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c5a89 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3591fb and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f14; op2:f17; op3:f29; dest:f31; op1val:0x7f2c5a89; op2val:0x7f3591fb; op3val:0xff7fffff; valaddr_reg:x16; val_offset:264; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f31, f14, f17, f29, 0x0, 0, x16, 264, x17, x15, 176, x18)

inst_23:
// rs1==f27, rs2==f29, rs3==f22, rd==f3, fs1 == 0 and fe1 == 0xfb and fm1 == 0x1d9044 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5f0bd0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f27; op2:f29; op3:f22; dest:f3; op1val:0x7d9d9044; op2val:0x7edf0bd0; op3val:0xff7fffff; valaddr_reg:x16; val_offset:276; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f3, f27, f29, f22, 0x0, 0, x16, 276, x17, x15, 184, x18)

inst_24:
// rs1==f21, rs2==f2, rs3==f3, rd==f14, fs1 == 0 and fe1 == 0xfd and fm1 == 0x74310e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x0d58d3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f21; op2:f2; op3:f3; dest:f14; op1val:0x7ef4310e; op2val:0x7e0d58d3; op3val:0xff7fffff; valaddr_reg:x16; val_offset:288; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f14, f21, f2, f3, 0x0, 0, x16, 288, x17, x15, 192, x18)

inst_25:
// rs1==f16, rs2==f20, rs3==f17, rd==f11, fs1 == 0 and fe1 == 0xfc and fm1 == 0x60bdc9 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x33eda8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f16; op2:f20; op3:f17; dest:f11; op1val:0x7e60bdc9; op2val:0x7f33eda8; op3val:0xff7fffff; valaddr_reg:x16; val_offset:300; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f11, f16, f20, f17, 0x0, 0, x16, 300, x17, x15, 200, x18)

inst_26:
// rs1==f29, rs2==f12, rs3==f0, rd==f17, fs1 == 0 and fe1 == 0xfe and fm1 == 0x39925a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x0b19a0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f29; op2:f12; op3:f0; dest:f17; op1val:0x7f39925a; op2val:0x7e8b19a0; op3val:0xff7fffff; valaddr_reg:x16; val_offset:312; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f17, f29, f12, f0, 0x0, 0, x16, 312, x17, x15, 208, x18)

inst_27:
// rs1==f13, rs2==f31, rs3==f21, rd==f0, fs1 == 0 and fe1 == 0xfd and fm1 == 0x0444c5 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x382932 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f13; op2:f31; op3:f21; dest:f0; op1val:0x7e8444c5; op2val:0x7f382932; op3val:0xff7fffff; valaddr_reg:x16; val_offset:324; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f0, f13, f31, f21, 0x0, 0, x16, 324, x17, x15, 216, x18)

inst_28:
// rs1==f10, rs2==f22, rs3==f19, rd==f29, fs1 == 0 and fe1 == 0xfe and fm1 == 0x24f632 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x0f9c10 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f22; op3:f19; dest:f29; op1val:0x7f24f632; op2val:0x7e0f9c10; op3val:0xff7fffff; valaddr_reg:x16; val_offset:336; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f29, f10, f22, f19, 0x0, 0, x16, 336, x17, x15, 224, x18)

inst_29:
// rs1==f0, rs2==f10, rs3==f5, rd==f26, fs1 == 0 and fe1 == 0xfd and fm1 == 0x0dbef7 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x17731e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f0; op2:f10; op3:f5; dest:f26; op1val:0x7e8dbef7; op2val:0x7c97731e; op3val:0xff7fffff; valaddr_reg:x16; val_offset:348; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f26, f0, f10, f5, 0x0, 0, x16, 348, x17, x15, 232, x18)

inst_30:
// rs1==f19, rs2==f21, rs3==f14, rd==f5, fs1 == 0 and fe1 == 0xfe and fm1 == 0x342577 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x3d3789 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f19; op2:f21; op3:f14; dest:f5; op1val:0x7f342577; op2val:0x7dbd3789; op3val:0xff7fffff; valaddr_reg:x16; val_offset:360; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f5, f19, f21, f14, 0x0, 0, x16, 360, x17, x15, 240, x18)

inst_31:
// rs1==f1, rs2==f15, rs3==f16, rd==f6, fs1 == 0 and fe1 == 0xfc and fm1 == 0x1fba25 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x1d4781 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f1; op2:f15; op3:f16; dest:f6; op1val:0x7e1fba25; op2val:0x7e1d4781; op3val:0xff7fffff; valaddr_reg:x16; val_offset:372; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f6, f1, f15, f16, 0x0, 0, x16, 372, x17, x15, 248, x18)

inst_32:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d3fd0 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x58a14d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f1d3fd0; op2val:0x7d58a14d; op3val:0xff7fffff; valaddr_reg:x16; val_offset:384; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 384, x17, x15, 256, x18)

inst_33:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0595c5 and fs2 == 0 and fe2 == 0xf7 and fm2 == 0x74e195 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e8595c5; op2val:0x7bf4e195; op3val:0xff7fffff; valaddr_reg:x16; val_offset:396; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 396, x17, x15, 264, x18)

inst_34:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x580d57 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x09f409 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d580d57; op2val:0x7e89f409; op3val:0xff7fffff; valaddr_reg:x16; val_offset:408; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 408, x17, x15, 272, x18)

inst_35:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38c024 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0aba6b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f38c024; op2val:0x7f0aba6b; op3val:0xff7fffff; valaddr_reg:x16; val_offset:420; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 420, x17, x15, 280, x18)

inst_36:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03cad2 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x39250d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f03cad2; op2val:0x7cb9250d; op3val:0xff7fffff; valaddr_reg:x16; val_offset:432; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 432, x17, x15, 288, x18)

inst_37:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cfb4b and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x3ca040 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f0cfb4b; op2val:0x7cbca040; op3val:0xff7fffff; valaddr_reg:x16; val_offset:444; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 444, x17, x15, 296, x18)

inst_38:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f9b30 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x186358 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e9f9b30; op2val:0x7d986358; op3val:0xff7fffff; valaddr_reg:x16; val_offset:456; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 456, x17, x15, 304, x18)

inst_39:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x595956 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x31316c and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ed95956; op2val:0x7f31316c; op3val:0xff7fffff; valaddr_reg:x16; val_offset:468; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 468, x17, x15, 312, x18)

inst_40:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7ab2 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x2e4058 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e6a7ab2; op2val:0x7dae4058; op3val:0xff7fffff; valaddr_reg:x16; val_offset:480; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 480, x17, x15, 320, x18)

inst_41:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15a4db and fs2 == 0 and fe2 == 0xfe and fm2 == 0x061cca and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f15a4db; op2val:0x7f061cca; op3val:0xff7fffff; valaddr_reg:x16; val_offset:492; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 492, x17, x15, 328, x18)

inst_42:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0f9457 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1d52dc and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d8f9457; op2val:0x7f1d52dc; op3val:0xff7fffff; valaddr_reg:x16; val_offset:504; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 504, x17, x15, 336, x18)

inst_43:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ff0b5 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5b91e9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7efff0b5; op2val:0x7edb91e9; op3val:0xff7fffff; valaddr_reg:x16; val_offset:516; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 516, x17, x15, 344, x18)

inst_44:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2d0175 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ebaaff8; op2val:0x7f2d0175; op3val:0xff7fffff; valaddr_reg:x16; val_offset:528; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 528, x17, x15, 352, x18)

inst_45:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x677175 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x092308 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d677175; op2val:0x7d092308; op3val:0xff7fffff; valaddr_reg:x16; val_offset:540; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 540, x17, x15, 360, x18)

inst_46:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2ee68b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f114532; op2val:0x7eaee68b; op3val:0xff7fffff; valaddr_reg:x16; val_offset:552; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 552, x17, x15, 368, x18)

inst_47:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x162a78 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e113ff8; op2val:0x7f162a78; op3val:0xff7fffff; valaddr_reg:x16; val_offset:564; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 564, x17, x15, 376, x18)

inst_48:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b9172 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x474c7e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f1b9172; op2val:0x7ec74c7e; op3val:0xff7fffff; valaddr_reg:x16; val_offset:576; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 576, x17, x15, 384, x18)

inst_49:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300ad9 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2786d3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f300ad9; op2val:0x7f2786d3; op3val:0xff7fffff; valaddr_reg:x16; val_offset:588; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 588, x17, x15, 392, x18)

inst_50:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x433d56 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2f0ff8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7dc33d56; op2val:0x7f2f0ff8; op3val:0xff7fffff; valaddr_reg:x16; val_offset:600; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 600, x17, x15, 400, x18)

inst_51:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x6edcc4 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f030bb1; op2val:0x7eeedcc4; op3val:0xff7fffff; valaddr_reg:x16; val_offset:612; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 612, x17, x15, 408, x18)

inst_52:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72cedb and fs2 == 0 and fe2 == 0xfd and fm2 == 0x01bd84 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ef2cedb; op2val:0x7e81bd84; op3val:0xff7fffff; valaddr_reg:x16; val_offset:624; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 624, x17, x15, 416, x18)

inst_53:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x293481 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x6a4935 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f293481; op2val:0x7eea4935; op3val:0xff7fffff; valaddr_reg:x16; val_offset:636; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 636, x17, x15, 424, x18)

inst_54:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x133b22 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x151296 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e933b22; op2val:0x7f151296; op3val:0xff7fffff; valaddr_reg:x16; val_offset:648; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 648, x17, x15, 432, x18)

inst_55:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x21bad2 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x52df06 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7da1bad2; op2val:0x7ed2df06; op3val:0xff7fffff; valaddr_reg:x16; val_offset:660; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 660, x17, x15, 440, x18)

inst_56:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4777c1 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x6d14ed and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7cc777c1; op2val:0x7eed14ed; op3val:0xff7fffff; valaddr_reg:x16; val_offset:672; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 672, x17, x15, 448, x18)

inst_57:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x107c30 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x34d24a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d107c30; op2val:0x7eb4d24a; op3val:0xff7fffff; valaddr_reg:x16; val_offset:684; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 684, x17, x15, 456, x18)

inst_58:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x6aeb85 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e9de0b9; op2val:0x7eeaeb85; op3val:0xff7fffff; valaddr_reg:x16; val_offset:696; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 696, x17, x15, 464, x18)

inst_59:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x688296 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f015206; op2val:0x7de88296; op3val:0xff7fffff; valaddr_reg:x16; val_offset:708; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 708, x17, x15, 472, x18)

inst_60:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x25c228 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ebcdcf2; op2val:0x7f25c228; op3val:0xff7fffff; valaddr_reg:x16; val_offset:720; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 720, x17, x15, 480, x18)

inst_61:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2a943e and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x5cc707 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d2a943e; op2val:0x7cdcc707; op3val:0xff7fffff; valaddr_reg:x16; val_offset:732; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 732, x17, x15, 488, x18)

inst_62:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x439094 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x5c7bdc and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7dc39094; op2val:0x7e5c7bdc; op3val:0xff7fffff; valaddr_reg:x16; val_offset:744; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 744, x17, x15, 496, x18)

inst_63:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b86f6 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x3f4247 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f1b86f6; op2val:0x7d3f4247; op3val:0xff7fffff; valaddr_reg:x16; val_offset:756; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 756, x17, x15, 504, x18)

inst_64:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x350bba and fs2 == 0 and fe2 == 0xfc and fm2 == 0x688ddb and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f350bba; op2val:0x7e688ddb; op3val:0xff7fffff; valaddr_reg:x16; val_offset:768; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 768, x17, x15, 512, x18)

inst_65:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x436cc0 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x499654 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e436cc0; op2val:0x7d499654; op3val:0xff7fffff; valaddr_reg:x16; val_offset:780; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 780, x17, x15, 520, x18)

inst_66:
// fs1 == 0 and fe1 == 0xf2 and fm1 == 0x3d4a9b and fs2 == 0 and fe2 == 0xfc and fm2 == 0x0bc08b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x793d4a9b; op2val:0x7e0bc08b; op3val:0xff7fffff; valaddr_reg:x16; val_offset:792; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 792, x17, x15, 528, x18)

inst_67:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2373e9 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x193a37 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f2373e9; op2val:0x7f193a37; op3val:0xff7fffff; valaddr_reg:x16; val_offset:804; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 804, x17, x15, 536, x18)

inst_68:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17e134 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1535df and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f17e134; op2val:0x7e9535df; op3val:0xff7fffff; valaddr_reg:x16; val_offset:816; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 816, x17, x15, 544, x18)

inst_69:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65de2c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1e88a3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ee5de2c; op2val:0x7f1e88a3; op3val:0xff7fffff; valaddr_reg:x16; val_offset:828; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 828, x17, x15, 552, x18)

inst_70:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2de8ee and fs2 == 0 and fe2 == 0xfc and fm2 == 0x1e49db and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f2de8ee; op2val:0x7e1e49db; op3val:0xff7fffff; valaddr_reg:x16; val_offset:840; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 840, x17, x15, 560, x18)

inst_71:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1181a9 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3e2ea7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f1181a9; op2val:0x7f3e2ea7; op3val:0xff7fffff; valaddr_reg:x16; val_offset:852; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 852, x17, x15, 568, x18)

inst_72:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c5df5 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x024923 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7edc5df5; op2val:0x7f024923; op3val:0xff7fffff; valaddr_reg:x16; val_offset:864; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 864, x17, x15, 576, x18)

inst_73:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x41eb7c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2d0265 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ec1eb7c; op2val:0x7f2d0265; op3val:0xff7fffff; valaddr_reg:x16; val_offset:876; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 876, x17, x15, 584, x18)

inst_74:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x649633 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7befa5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7de49633; op2val:0x7efbefa5; op3val:0xff7fffff; valaddr_reg:x16; val_offset:888; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 888, x17, x15, 592, x18)

inst_75:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x220a0f and fs2 == 0 and fe2 == 0xfc and fm2 == 0x7de57e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f220a0f; op2val:0x7e7de57e; op3val:0xff7fffff; valaddr_reg:x16; val_offset:900; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 900, x17, x15, 600, x18)

inst_76:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x79a4a6 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e2cde9f; op2val:0x7cf9a4a6; op3val:0xff7fffff; valaddr_reg:x16; val_offset:912; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 912, x17, x15, 608, x18)

inst_77:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x020308 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x26d3f0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d820308; op2val:0x7f26d3f0; op3val:0xff7fffff; valaddr_reg:x16; val_offset:924; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 924, x17, x15, 616, x18)

inst_78:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09e19b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1af462 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f09e19b; op2val:0x7f1af462; op3val:0xff7fffff; valaddr_reg:x16; val_offset:936; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 936, x17, x15, 624, x18)

inst_79:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x168f5a and fs2 == 0 and fe2 == 0xfe and fm2 == 0x21ba5d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f168f5a; op2val:0x7f21ba5d; op3val:0xff7fffff; valaddr_reg:x16; val_offset:948; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 948, x17, x15, 632, x18)

inst_80:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x59eac0 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x63e43a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7cd9eac0; op2val:0x7de3e43a; op3val:0xff7fffff; valaddr_reg:x16; val_offset:960; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 960, x17, x15, 640, x18)

inst_81:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38d010 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2c9c0a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f38d010; op2val:0x7f2c9c0a; op3val:0xff7fffff; valaddr_reg:x16; val_offset:972; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 972, x17, x15, 648, x18)

inst_82:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a26e3 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x28048a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eea26e3; op2val:0x7e28048a; op3val:0xff7fffff; valaddr_reg:x16; val_offset:984; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 984, x17, x15, 656, x18)

inst_83:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f7af3 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x00a730 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ebf7af3; op2val:0x7f00a730; op3val:0xff7fffff; valaddr_reg:x16; val_offset:996; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 996, x17, x15, 664, x18)

inst_84:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3012ad and fs2 == 0 and fe2 == 0xfc and fm2 == 0x77a646 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f3012ad; op2val:0x7e77a646; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1008; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1008, x17, x15, 672, x18)

inst_85:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x028be4 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x288293 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f028be4; op2val:0x7f288293; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1020; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1020, x17, x15, 680, x18)

inst_86:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3cbbe2 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x63f20b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f3cbbe2; op2val:0x7de3f20b; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1032; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1032, x17, x15, 688, x18)

inst_87:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x51d071 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x687317 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ed1d071; op2val:0x7de87317; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1044; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1044, x17, x15, 696, x18)

inst_88:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x60ccec and fs2 == 0 and fe2 == 0xfc and fm2 == 0x180a7e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7de0ccec; op2val:0x7e180a7e; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1056; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1056, x17, x15, 704, x18)

inst_89:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0155e8 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x360231 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d0155e8; op2val:0x7f360231; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1068; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1068, x17, x15, 712, x18)

inst_90:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x36a56c and fs2 == 0 and fe2 == 0xfd and fm2 == 0x18d06d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7db6a56c; op2val:0x7e98d06d; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1080; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1080, x17, x15, 720, x18)

inst_91:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d60c7 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2d6b3e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f2d60c7; op2val:0x7ead6b3e; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1092; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1092, x17, x15, 728, x18)

inst_92:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x442bee and fs2 == 0 and fe2 == 0xfe and fm2 == 0x25cea1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d442bee; op2val:0x7f25cea1; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1104; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1104, x17, x15, 736, x18)

inst_93:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x153406 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2596bf and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f153406; op2val:0x7ea596bf; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1116; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1116, x17, x15, 744, x18)

inst_94:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0d7074 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3dc8bc and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e8d7074; op2val:0x7f3dc8bc; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1128; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1128, x17, x15, 752, x18)

inst_95:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6098e5 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x026d14 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ee098e5; op2val:0x7f026d14; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1140; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1140, x17, x15, 760, x18)

inst_96:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c23 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2c3db2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ec74c23; op2val:0x7eac3db2; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1152; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1152, x17, x15, 768, x18)

inst_97:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3bdf28 and fs2 == 0 and fe2 == 0xf7 and fm2 == 0x40f240 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d3bdf28; op2val:0x7bc0f240; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1164; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1164, x17, x15, 776, x18)

inst_98:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4a3e7e and fs2 == 0 and fe2 == 0xfb and fm2 == 0x020d6d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d4a3e7e; op2val:0x7d820d6d; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1176; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1176, x17, x15, 784, x18)

inst_99:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x10382a and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3b1d98 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e90382a; op2val:0x7f3b1d98; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1188; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1188, x17, x15, 792, x18)

inst_100:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x30948b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f2bb989; op2val:0x7f30948b; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1200; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1200, x17, x15, 800, x18)

inst_101:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23ca20 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x67dc90 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ea3ca20; op2val:0x7e67dc90; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1212; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1212, x17, x15, 808, x18)

inst_102:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x37f81e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e83f653; op2val:0x7eb7f81e; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1224; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1224, x17, x15, 816, x18)

inst_103:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x217160 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eb6048d; op2val:0x7f217160; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1236; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1236, x17, x15, 824, x18)

inst_104:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0xfb and fm2 == 0x18adcd and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e9f40ca; op2val:0x7d98adcd; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1248; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1248, x17, x15, 832, x18)

inst_105:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x59b0d6 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1ad123 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d59b0d6; op2val:0x7e9ad123; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1260; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1260, x17, x15, 840, x18)

inst_106:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x143e58 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x09ec35 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d143e58; op2val:0x7e09ec35; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1272; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1272, x17, x15, 848, x18)

inst_107:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x615629 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3793aa and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e615629; op2val:0x7eb793aa; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1284; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1284, x17, x15, 856, x18)

inst_108:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5e5c14 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1799a1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e5e5c14; op2val:0x7e9799a1; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1296; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1296, x17, x15, 864, x18)

inst_109:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7d26a2 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x7bb095 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7cfd26a2; op2val:0x7dfbb095; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1308; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1308, x17, x15, 872, x18)

inst_110:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f3ae and fs2 == 0 and fe2 == 0xfd and fm2 == 0x01e3e9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f09f3ae; op2val:0x7e81e3e9; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1320; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1320, x17, x15, 880, x18)

inst_111:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x67f8b9 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x000760 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7de7f8b9; op2val:0x7e800760; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1332; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1332, x17, x15, 888, x18)

inst_112:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1f9fcf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x6174c8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e1f9fcf; op2val:0x7ee174c8; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1344; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1344, x17, x15, 896, x18)

inst_113:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75d070 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x0f0540 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ef5d070; op2val:0x7e8f0540; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1356; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1356, x17, x15, 904, x18)

inst_114:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba8b0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x08c5cd and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7efba8b0; op2val:0x7f08c5cd; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1368; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1368, x17, x15, 912, x18)

inst_115:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0109b4 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0fd579 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d0109b4; op2val:0x7f0fd579; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1380; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1380, x17, x15, 920, x18)

inst_116:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x35ba7d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x342e24 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f35ba7d; op2val:0x7f342e24; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1392; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1392, x17, x15, 928, x18)

inst_117:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79d5cb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x02c05a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7cf9d5cb; op2val:0x7f02c05a; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1404; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1404, x17, x15, 936, x18)

inst_118:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2765d9 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x55d198 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f2765d9; op2val:0x7e55d198; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1416; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1416, x17, x15, 944, x18)

inst_119:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x480329 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x79e697 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ec80329; op2val:0x7ef9e697; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1428; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1428, x17, x15, 952, x18)

inst_120:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18212b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x25618f and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f18212b; op2val:0x7f25618f; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1440; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1440, x17, x15, 960, x18)

inst_121:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x79e4a2 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x52faef and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d79e4a2; op2val:0x7e52faef; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1452; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1452, x17, x15, 968, x18)

inst_122:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19e0a5 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x23f4c3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d99e0a5; op2val:0x7f23f4c3; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1464; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1464, x17, x15, 976, x18)

inst_123:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27bdd4 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x5706d8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f27bdd4; op2val:0x7e5706d8; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1476; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1476, x17, x15, 984, x18)

inst_124:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x16325d and fs2 == 0 and fe2 == 0xfb and fm2 == 0x36a2e9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d96325d; op2val:0x7db6a2e9; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1488; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1488, x17, x15, 992, x18)

inst_125:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x67c20e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1df6e4 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ae7c20e; op2val:0x7f1df6e4; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1500; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1500, x17, x15, 1000, x18)

inst_126:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72d2f3 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x23fca7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e72d2f3; op2val:0x7e23fca7; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1512; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1512, x17, x15, 1008, x18)

inst_127:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d783f and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1a4c33 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f3d783f; op2val:0x7e9a4c33; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1524; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1524, x17, x15, 1016, x18)

inst_128:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x731b27 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x003494 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ef31b27; op2val:0x7d803494; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1536; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1536, x17, x15, 1024, x18)

inst_129:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bfbd1 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x10628e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f1bfbd1; op2val:0x7e10628e; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1548; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1548, x17, x15, 1032, x18)

inst_130:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33495f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1b5638 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eb3495f; op2val:0x7f1b5638; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1560; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1560, x17, x15, 1040, x18)

inst_131:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29b43a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3deb73 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f29b43a; op2val:0x7ebdeb73; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1572; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1572, x17, x15, 1048, x18)

inst_132:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b1c27 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x579458 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ebb1c27; op2val:0x7ed79458; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1584; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1584, x17, x15, 1056, x18)

inst_133:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x471615 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x7234e1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e471615; op2val:0x7df234e1; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1596; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1596, x17, x15, 1064, x18)

inst_134:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e4880 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x0fb50a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7efe4880; op2val:0x7d0fb50a; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1608; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1608, x17, x15, 1072, x18)

inst_135:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7876 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x06c054 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e9a7876; op2val:0x7f06c054; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1620; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1620, x17, x15, 1080, x18)

inst_136:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2814cf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5a2b8e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f2814cf; op2val:0x7eda2b8e; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1632; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1632, x17, x15, 1088, x18)

inst_137:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x37df17 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x74c2e8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e37df17; op2val:0x7ef4c2e8; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1644; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1644, x17, x15, 1096, x18)

inst_138:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x15d64c and fs2 == 0 and fe2 == 0xfc and fm2 == 0x13b197 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7a95d64c; op2val:0x7e13b197; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1656; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1656, x17, x15, 1104, x18)

inst_139:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x14ffa5 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1f22f1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e94ffa5; op2val:0x7e9f22f1; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1668; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1668, x17, x15, 1112, x18)

inst_140:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735bf2 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x6e7e55 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ef35bf2; op2val:0x7eee7e55; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1680; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1680, x17, x15, 1120, x18)

inst_141:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5d1719 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x09eee9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e5d1719; op2val:0x7e89eee9; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1692; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1692, x17, x15, 1128, x18)

inst_142:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x386b8e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x370036 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e386b8e; op2val:0x7f370036; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1704; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1704, x17, x15, 1136, x18)

inst_143:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00fdf0 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x0c612e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e80fdf0; op2val:0x7d0c612e; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1716; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1716, x17, x15, 1144, x18)

inst_144:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x57453d and fs2 == 0 and fe2 == 0xf8 and fm2 == 0x18d146 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ed7453d; op2val:0x7c18d146; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1728; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1728, x17, x15, 1152, x18)

inst_145:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x092570 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x20d4b8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e892570; op2val:0x7f20d4b8; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1740; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1740, x17, x15, 1160, x18)

inst_146:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a8a0e and fs2 == 0 and fe2 == 0xfd and fm2 == 0x434d6c and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eda8a0e; op2val:0x7ec34d6c; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1752; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1752, x17, x15, 1168, x18)

inst_147:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0642e8 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x351aa9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e0642e8; op2val:0x7eb51aa9; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1764; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1764, x17, x15, 1176, x18)

inst_148:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x408722 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x652afa and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e408722; op2val:0x7ee52afa; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1776; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1776, x17, x15, 1184, x18)

inst_149:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01d4ab and fs2 == 0 and fe2 == 0xfe and fm2 == 0x22524e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f01d4ab; op2val:0x7f22524e; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1788; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1788, x17, x15, 1192, x18)

inst_150:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0125a0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3993cf and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f0125a0; op2val:0x7f3993cf; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1800; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1800, x17, x15, 1200, x18)

inst_151:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20f56c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x30593a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f20f56c; op2val:0x7f30593a; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1812; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1812, x17, x15, 1208, x18)

inst_152:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x191af1 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x09af6b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e191af1; op2val:0x7e89af6b; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1824; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1824, x17, x15, 1216, x18)

inst_153:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x71f159 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x1b03d8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7cf1f159; op2val:0x7d9b03d8; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1836; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1836, x17, x15, 1224, x18)

inst_154:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06834b and fs2 == 0 and fe2 == 0xfc and fm2 == 0x0a7bf0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e86834b; op2val:0x7e0a7bf0; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1848; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1848, x17, x15, 1232, x18)

inst_155:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x479e53 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2998cc and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e479e53; op2val:0x7e2998cc; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1860; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1860, x17, x15, 1240, x18)

inst_156:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0bf9e4 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x237008 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7c8bf9e4; op2val:0x7ea37008; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1872; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1872, x17, x15, 1248, x18)

inst_157:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x21b906 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x19be4b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e21b906; op2val:0x7f19be4b; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1884; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1884, x17, x15, 1256, x18)

inst_158:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38849b and fs2 == 0 and fe2 == 0xfc and fm2 == 0x0e0ef6 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f38849b; op2val:0x7e0e0ef6; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1896; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1896, x17, x15, 1264, x18)

inst_159:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c425a and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x5f97b9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f3c425a; op2val:0x7cdf97b9; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1908; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1908, x17, x15, 1272, x18)

inst_160:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d2a79 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x163972 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7edd2a79; op2val:0x7e963972; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1920; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1920, x17, x15, 1280, x18)

inst_161:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x24066c and fs2 == 0 and fe2 == 0xfd and fm2 == 0x73d707 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ca4066c; op2val:0x7ef3d707; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1932; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1932, x17, x15, 1288, x18)

inst_162:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eb91a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4d21cb and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f2eb91a; op2val:0x7ecd21cb; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1944; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1944, x17, x15, 1296, x18)

inst_163:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f3e7 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x0af584 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f05f3e7; op2val:0x7d0af584; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1956; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1956, x17, x15, 1304, x18)

inst_164:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ca7c2 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x1a887c and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f1ca7c2; op2val:0x7d9a887c; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1968; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1968, x17, x15, 1312, x18)

inst_165:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x29504d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x188f57 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e29504d; op2val:0x7f188f57; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1980; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1980, x17, x15, 1320, x18)

inst_166:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3aa6be and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0c7228 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e3aa6be; op2val:0x7f0c7228; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1992; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1992, x17, x15, 1328, x18)

inst_167:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3acb68 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x71fa00 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ebacb68; op2val:0x7ef1fa00; op3val:0xff7fffff; valaddr_reg:x16; val_offset:2004; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 2004, x17, x15, 1336, x18)

inst_168:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x185183 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x7d0cc0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f185183; op2val:0x7d7d0cc0; op3val:0xff7fffff; valaddr_reg:x16; val_offset:2016; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 2016, x17, x15, 1344, x18)

inst_169:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d88c2 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3f4810 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7efd88c2; op2val:0x7f3f4810; op3val:0xff7fffff; valaddr_reg:x16; val_offset:2028; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 2028, x17, x15, 1352, x18)
addi x16,x16,2040

inst_170:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365ad7 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5e9a56 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f365ad7; op2val:0x7ede9a56; op3val:0xff7fffff; valaddr_reg:x16; val_offset:0; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 0, x17, x15, 1360, x18)

inst_171:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2319ee and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2bd8f4 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f2319ee; op2val:0x7f2bd8f4; op3val:0xff7fffff; valaddr_reg:x16; val_offset:12; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 12, x17, x15, 1368, x18)

inst_172:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076a16 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x53afdf and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f076a16; op2val:0x7e53afdf; op3val:0xff7fffff; valaddr_reg:x16; val_offset:24; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 24, x17, x15, 1376, x18)

inst_173:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x313b58 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4f9722 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f313b58; op2val:0x7ecf9722; op3val:0xff7fffff; valaddr_reg:x16; val_offset:36; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 36, x17, x15, 1384, x18)

inst_174:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x314a05 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x21c09a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f314a05; op2val:0x7f21c09a; op3val:0xff7fffff; valaddr_reg:x16; val_offset:48; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 48, x17, x15, 1392, x18)

inst_175:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x09f85f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1175bf and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d89f85f; op2val:0x7f1175bf; op3val:0xff7fffff; valaddr_reg:x16; val_offset:60; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 60, x17, x15, 1400, x18)

inst_176:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b4e0d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7c283d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eeb4e0d; op2val:0x7efc283d; op3val:0xff7fffff; valaddr_reg:x16; val_offset:72; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 72, x17, x15, 1408, x18)

inst_177:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef919 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x1173d9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e5ef919; op2val:0x7e1173d9; op3val:0xff7fffff; valaddr_reg:x16; val_offset:84; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 84, x17, x15, 1416, x18)

inst_178:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64f961 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x13cd52 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ee4f961; op2val:0x7e93cd52; op3val:0xff7fffff; valaddr_reg:x16; val_offset:96; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 96, x17, x15, 1424, x18)

inst_179:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x679f8e and fs2 == 0 and fe2 == 0xfd and fm2 == 0x61a51b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ee79f8e; op2val:0x7ee1a51b; op3val:0xff7fffff; valaddr_reg:x16; val_offset:108; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 108, x17, x15, 1432, x18)

inst_180:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4f7809 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f1c60ac; op2val:0x7ecf7809; op3val:0xff7fffff; valaddr_reg:x16; val_offset:120; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 120, x17, x15, 1440, x18)

inst_181:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53afc5 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x07a8e7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ed3afc5; op2val:0x7f07a8e7; op3val:0xff7fffff; valaddr_reg:x16; val_offset:132; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 132, x17, x15, 1448, x18)

inst_182:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x430c98 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x331aa5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ec30c98; op2val:0x7f331aa5; op3val:0xff7fffff; valaddr_reg:x16; val_offset:144; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 144, x17, x15, 1456, x18)

inst_183:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2c0532 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x772129 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eac0532; op2val:0x7d772129; op3val:0xff7fffff; valaddr_reg:x16; val_offset:156; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 156, x17, x15, 1464, x18)

inst_184:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 0 and fe2 == 0xfe and fm2 == 0x39c489 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e3741cc; op2val:0x7f39c489; op3val:0xff7fffff; valaddr_reg:x16; val_offset:168; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 168, x17, x15, 1472, x18)

inst_185:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x12bd51 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f272166; op2val:0x7e12bd51; op3val:0xff7fffff; valaddr_reg:x16; val_offset:180; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 180, x17, x15, 1480, x18)

inst_186:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x269468 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x3b52d3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f269468; op2val:0x7e3b52d3; op3val:0xff7fffff; valaddr_reg:x16; val_offset:192; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 192, x17, x15, 1488, x18)

inst_187:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x004910 and fs2 == 0 and fe2 == 0xf4 and fm2 == 0x60affa and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f004910; op2val:0x7a60affa; op3val:0xff7fffff; valaddr_reg:x16; val_offset:204; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 204, x17, x15, 1496, x18)

inst_188:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2eec and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1925f2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f0a2eec; op2val:0x7e9925f2; op3val:0xff7fffff; valaddr_reg:x16; val_offset:216; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 216, x17, x15, 1504, x18)

inst_189:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a90b9 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x52b355 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f1a90b9; op2val:0x7ed2b355; op3val:0xff7fffff; valaddr_reg:x16; val_offset:228; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 228, x17, x15, 1512, x18)

inst_190:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x372bf7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2623b6 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eb72bf7; op2val:0x7f2623b6; op3val:0xff7fffff; valaddr_reg:x16; val_offset:240; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 240, x17, x15, 1520, x18)

inst_191:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a94a1 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2f4c51 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eea94a1; op2val:0x7f2f4c51; op3val:0xff7fffff; valaddr_reg:x16; val_offset:252; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 252, x17, x15, 1528, x18)

inst_192:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x354d84 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x1aad53 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eb54d84; op2val:0x7d9aad53; op3val:0xff7fffff; valaddr_reg:x16; val_offset:264; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 264, x17, x15, 1536, x18)

inst_193:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c20b0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2c93b2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f0c20b0; op2val:0x7f2c93b2; op3val:0xff7fffff; valaddr_reg:x16; val_offset:276; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 276, x17, x15, 1544, x18)

inst_194:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8fcb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2d3742 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f1b8fcb; op2val:0x7f2d3742; op3val:0xff7fffff; valaddr_reg:x16; val_offset:288; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 288, x17, x15, 1552, x18)

inst_195:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40638c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2eabd8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e40638c; op2val:0x7f2eabd8; op3val:0xff7fffff; valaddr_reg:x16; val_offset:300; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 300, x17, x15, 1560, x18)

inst_196:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x587392 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x111d49 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e587392; op2val:0x7f111d49; op3val:0xff7fffff; valaddr_reg:x16; val_offset:312; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 312, x17, x15, 1568, x18)

inst_197:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6004c9 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2e5b90 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ee004c9; op2val:0x7f2e5b90; op3val:0xff7fffff; valaddr_reg:x16; val_offset:324; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 324, x17, x15, 1576, x18)

inst_198:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x167d44 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x68f1b4 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f167d44; op2val:0x7e68f1b4; op3val:0xff7fffff; valaddr_reg:x16; val_offset:336; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 336, x17, x15, 1584, x18)

inst_199:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46d91a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x445459 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e46d91a; op2val:0x7ec45459; op3val:0xff7fffff; valaddr_reg:x16; val_offset:348; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 348, x17, x15, 1592, x18)

inst_200:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x222105 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1186f9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f222105; op2val:0x7f1186f9; op3val:0xff7fffff; valaddr_reg:x16; val_offset:360; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 360, x17, x15, 1600, x18)

inst_201:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ff4a3 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x079bc3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7deff4a3; op2val:0x7f079bc3; op3val:0xff7fffff; valaddr_reg:x16; val_offset:372; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 372, x17, x15, 1608, x18)

inst_202:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1393e8 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x718162 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f1393e8; op2val:0x7ef18162; op3val:0xff7fffff; valaddr_reg:x16; val_offset:384; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 384, x17, x15, 1616, x18)

inst_203:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d982c and fs2 == 0 and fe2 == 0xf7 and fm2 == 0x3f1e72 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eed982c; op2val:0x7bbf1e72; op3val:0xff7fffff; valaddr_reg:x16; val_offset:396; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 396, x17, x15, 1624, x18)

inst_204:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c653b and fs2 == 0 and fe2 == 0xf5 and fm2 == 0x3530a7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e1c653b; op2val:0x7ab530a7; op3val:0xff7fffff; valaddr_reg:x16; val_offset:408; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 408, x17, x15, 1632, x18)

inst_205:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1fa7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x33ec90 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eae1fa7; op2val:0x7f33ec90; op3val:0xff7fffff; valaddr_reg:x16; val_offset:420; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 420, x17, x15, 1640, x18)

inst_206:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x136313 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x25c774 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f136313; op2val:0x7ea5c774; op3val:0xff7fffff; valaddr_reg:x16; val_offset:432; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 432, x17, x15, 1648, x18)

inst_207:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x56577b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e54b690; op2val:0x7ed6577b; op3val:0xff7fffff; valaddr_reg:x16; val_offset:444; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 444, x17, x15, 1656, x18)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
test_fp:
.word 0x7f222105
.word 0x7f1186f9
.word 0x7f222105
.word 0x7f124d93
.word 0x7e571b9d
.word 0xff7fffff
.word 0x7f0235d7
.word 0x7f11efef
.word 0xff7fffff
.word 0x7deff4a3
.word 0x7deff4a3
.word 0xff7fffff
.word 0x7f1393e8
.word 0x7f1393e8
.word 0xff7fffff
.word 0x7eed982c
.word 0x7eed982c
.word 0x7eed982c
.word 0x7e1c653b
.word 0x7e1c653b
.word 0x7e1c653b
.word 0x7eb1933e
.word 0x7ef4b97b
.word 0xff7fffff
.word 0x7eae1fa7
.word 0x7f33ec90
.word 0x7f33ec90
.word 0x7f136313
.word 0x7ea5c774
.word 0x7f136313
.word 0x7f18c423
.word 0x7eab53bd
.word 0xff7fffff
.word 0x7e54b690
.word 0x7ed6577b
.word 0x7ed6577b
.word 0x7eb4d220
.word 0x7f367396
.word 0xff7fffff
.word 0x7e76467b
.word 0x7e1caa1e
.word 0xff7fffff
.word 0x7e9ce997
.word 0x7ea036ee
.word 0xff7fffff
.word 0x7e8dcb58
.word 0x7f3631e6
.word 0xff7fffff
.word 0x7ef4984e
.word 0x7d81e0a6
.word 0xff7fffff
.word 0x7f0e3fac
.word 0x7dda8c22
.word 0xff7fffff
.word 0x7d60e796
.word 0x7ea15e74
.word 0xff7fffff
.word 0x7dcb1c72
.word 0x7c7c8383
.word 0xff7fffff
.word 0x7e5f88a0
.word 0x7ea13294
.word 0xff7fffff
.word 0x7e729ac7
.word 0x7e3a8006
.word 0xff7fffff
.word 0x7f2c5a89
.word 0x7f3591fb
.word 0xff7fffff
.word 0x7d9d9044
.word 0x7edf0bd0
.word 0xff7fffff
.word 0x7ef4310e
.word 0x7e0d58d3
.word 0xff7fffff
.word 0x7e60bdc9
.word 0x7f33eda8
.word 0xff7fffff
.word 0x7f39925a
.word 0x7e8b19a0
.word 0xff7fffff
.word 0x7e8444c5
.word 0x7f382932
.word 0xff7fffff
.word 0x7f24f632
.word 0x7e0f9c10
.word 0xff7fffff
.word 0x7e8dbef7
.word 0x7c97731e
.word 0xff7fffff
.word 0x7f342577
.word 0x7dbd3789
.word 0xff7fffff
.word 0x7e1fba25
.word 0x7e1d4781
.word 0xff7fffff
.word 0x7f1d3fd0
.word 0x7d58a14d
.word 0xff7fffff
.word 0x7e8595c5
.word 0x7bf4e195
.word 0xff7fffff
.word 0x7d580d57
.word 0x7e89f409
.word 0xff7fffff
.word 0x7f38c024
.word 0x7f0aba6b
.word 0xff7fffff
.word 0x7f03cad2
.word 0x7cb9250d
.word 0xff7fffff
.word 0x7f0cfb4b
.word 0x7cbca040
.word 0xff7fffff
.word 0x7e9f9b30
.word 0x7d986358
.word 0xff7fffff
.word 0x7ed95956
.word 0x7f31316c
.word 0xff7fffff
.word 0x7e6a7ab2
.word 0x7dae4058
.word 0xff7fffff
.word 0x7f15a4db
.word 0x7f061cca
.word 0xff7fffff
.word 0x7d8f9457
.word 0x7f1d52dc
.word 0xff7fffff
.word 0x7efff0b5
.word 0x7edb91e9
.word 0xff7fffff
.word 0x7ebaaff8
.word 0x7f2d0175
.word 0xff7fffff
.word 0x7d677175
.word 0x7d092308
.word 0xff7fffff
.word 0x7f114532
.word 0x7eaee68b
.word 0xff7fffff
.word 0x7e113ff8
.word 0x7f162a78
.word 0xff7fffff
.word 0x7f1b9172
.word 0x7ec74c7e
.word 0xff7fffff
.word 0x7f300ad9
.word 0x7f2786d3
.word 0xff7fffff
.word 0x7dc33d56
.word 0x7f2f0ff8
.word 0xff7fffff
.word 0x7f030bb1
.word 0x7eeedcc4
.word 0xff7fffff
.word 0x7ef2cedb
.word 0x7e81bd84
.word 0xff7fffff
.word 0x7f293481
.word 0x7eea4935
.word 0xff7fffff
.word 0x7e933b22
.word 0x7f151296
.word 0xff7fffff
.word 0x7da1bad2
.word 0x7ed2df06
.word 0xff7fffff
.word 0x7cc777c1
.word 0x7eed14ed
.word 0xff7fffff
.word 0x7d107c30
.word 0x7eb4d24a
.word 0xff7fffff
.word 0x7e9de0b9
.word 0x7eeaeb85
.word 0xff7fffff
.word 0x7f015206
.word 0x7de88296
.word 0xff7fffff
.word 0x7ebcdcf2
.word 0x7f25c228
.word 0xff7fffff
.word 0x7d2a943e
.word 0x7cdcc707
.word 0xff7fffff
.word 0x7dc39094
.word 0x7e5c7bdc
.word 0xff7fffff
.word 0x7f1b86f6
.word 0x7d3f4247
.word 0xff7fffff
.word 0x7f350bba
.word 0x7e688ddb
.word 0xff7fffff
.word 0x7e436cc0
.word 0x7d499654
.word 0xff7fffff
.word 0x793d4a9b
.word 0x7e0bc08b
.word 0xff7fffff
.word 0x7f2373e9
.word 0x7f193a37
.word 0xff7fffff
.word 0x7f17e134
.word 0x7e9535df
.word 0xff7fffff
.word 0x7ee5de2c
.word 0x7f1e88a3
.word 0xff7fffff
.word 0x7f2de8ee
.word 0x7e1e49db
.word 0xff7fffff
.word 0x7f1181a9
.word 0x7f3e2ea7
.word 0xff7fffff
.word 0x7edc5df5
.word 0x7f024923
.word 0xff7fffff
.word 0x7ec1eb7c
.word 0x7f2d0265
.word 0xff7fffff
.word 0x7de49633
.word 0x7efbefa5
.word 0xff7fffff
.word 0x7f220a0f
.word 0x7e7de57e
.word 0xff7fffff
.word 0x7e2cde9f
.word 0x7cf9a4a6
.word 0xff7fffff
.word 0x7d820308
.word 0x7f26d3f0
.word 0xff7fffff
.word 0x7f09e19b
.word 0x7f1af462
.word 0xff7fffff
.word 0x7f168f5a
.word 0x7f21ba5d
.word 0xff7fffff
.word 0x7cd9eac0
.word 0x7de3e43a
.word 0xff7fffff
.word 0x7f38d010
.word 0x7f2c9c0a
.word 0xff7fffff
.word 0x7eea26e3
.word 0x7e28048a
.word 0xff7fffff
.word 0x7ebf7af3
.word 0x7f00a730
.word 0xff7fffff
.word 0x7f3012ad
.word 0x7e77a646
.word 0xff7fffff
.word 0x7f028be4
.word 0x7f288293
.word 0xff7fffff
.word 0x7f3cbbe2
.word 0x7de3f20b
.word 0xff7fffff
.word 0x7ed1d071
.word 0x7de87317
.word 0xff7fffff
.word 0x7de0ccec
.word 0x7e180a7e
.word 0xff7fffff
.word 0x7d0155e8
.word 0x7f360231
.word 0xff7fffff
.word 0x7db6a56c
.word 0x7e98d06d
.word 0xff7fffff
.word 0x7f2d60c7
.word 0x7ead6b3e
.word 0xff7fffff
.word 0x7d442bee
.word 0x7f25cea1
.word 0xff7fffff
.word 0x7f153406
.word 0x7ea596bf
.word 0xff7fffff
.word 0x7e8d7074
.word 0x7f3dc8bc
.word 0xff7fffff
.word 0x7ee098e5
.word 0x7f026d14
.word 0xff7fffff
.word 0x7ec74c23
.word 0x7eac3db2
.word 0xff7fffff
.word 0x7d3bdf28
.word 0x7bc0f240
.word 0xff7fffff
.word 0x7d4a3e7e
.word 0x7d820d6d
.word 0xff7fffff
.word 0x7e90382a
.word 0x7f3b1d98
.word 0xff7fffff
.word 0x7f2bb989
.word 0x7f30948b
.word 0xff7fffff
.word 0x7ea3ca20
.word 0x7e67dc90
.word 0xff7fffff
.word 0x7e83f653
.word 0x7eb7f81e
.word 0xff7fffff
.word 0x7eb6048d
.word 0x7f217160
.word 0xff7fffff
.word 0x7e9f40ca
.word 0x7d98adcd
.word 0xff7fffff
.word 0x7d59b0d6
.word 0x7e9ad123
.word 0xff7fffff
.word 0x7d143e58
.word 0x7e09ec35
.word 0xff7fffff
.word 0x7e615629
.word 0x7eb793aa
.word 0xff7fffff
.word 0x7e5e5c14
.word 0x7e9799a1
.word 0xff7fffff
.word 0x7cfd26a2
.word 0x7dfbb095
.word 0xff7fffff
.word 0x7f09f3ae
.word 0x7e81e3e9
.word 0xff7fffff
.word 0x7de7f8b9
.word 0x7e800760
.word 0xff7fffff
.word 0x7e1f9fcf
.word 0x7ee174c8
.word 0xff7fffff
.word 0x7ef5d070
.word 0x7e8f0540
.word 0xff7fffff
.word 0x7efba8b0
.word 0x7f08c5cd
.word 0xff7fffff
.word 0x7d0109b4
.word 0x7f0fd579
.word 0xff7fffff
.word 0x7f35ba7d
.word 0x7f342e24
.word 0xff7fffff
.word 0x7cf9d5cb
.word 0x7f02c05a
.word 0xff7fffff
.word 0x7f2765d9
.word 0x7e55d198
.word 0xff7fffff
.word 0x7ec80329
.word 0x7ef9e697
.word 0xff7fffff
.word 0x7f18212b
.word 0x7f25618f
.word 0xff7fffff
.word 0x7d79e4a2
.word 0x7e52faef
.word 0xff7fffff
.word 0x7d99e0a5
.word 0x7f23f4c3
.word 0xff7fffff
.word 0x7f27bdd4
.word 0x7e5706d8
.word 0xff7fffff
.word 0x7d96325d
.word 0x7db6a2e9
.word 0xff7fffff
.word 0x7ae7c20e
.word 0x7f1df6e4
.word 0xff7fffff
.word 0x7e72d2f3
.word 0x7e23fca7
.word 0xff7fffff
.word 0x7f3d783f
.word 0x7e9a4c33
.word 0xff7fffff
.word 0x7ef31b27
.word 0x7d803494
.word 0xff7fffff
.word 0x7f1bfbd1
.word 0x7e10628e
.word 0xff7fffff
.word 0x7eb3495f
.word 0x7f1b5638
.word 0xff7fffff
.word 0x7f29b43a
.word 0x7ebdeb73
.word 0xff7fffff
.word 0x7ebb1c27
.word 0x7ed79458
.word 0xff7fffff
.word 0x7e471615
.word 0x7df234e1
.word 0xff7fffff
.word 0x7efe4880
.word 0x7d0fb50a
.word 0xff7fffff
.word 0x7e9a7876
.word 0x7f06c054
.word 0xff7fffff
.word 0x7f2814cf
.word 0x7eda2b8e
.word 0xff7fffff
.word 0x7e37df17
.word 0x7ef4c2e8
.word 0xff7fffff
.word 0x7a95d64c
.word 0x7e13b197
.word 0xff7fffff
.word 0x7e94ffa5
.word 0x7e9f22f1
.word 0xff7fffff
.word 0x7ef35bf2
.word 0x7eee7e55
.word 0xff7fffff
.word 0x7e5d1719
.word 0x7e89eee9
.word 0xff7fffff
.word 0x7e386b8e
.word 0x7f370036
.word 0xff7fffff
.word 0x7e80fdf0
.word 0x7d0c612e
.word 0xff7fffff
.word 0x7ed7453d
.word 0x7c18d146
.word 0xff7fffff
.word 0x7e892570
.word 0x7f20d4b8
.word 0xff7fffff
.word 0x7eda8a0e
.word 0x7ec34d6c
.word 0xff7fffff
.word 0x7e0642e8
.word 0x7eb51aa9
.word 0xff7fffff
.word 0x7e408722
.word 0x7ee52afa
.word 0xff7fffff
.word 0x7f01d4ab
.word 0x7f22524e
.word 0xff7fffff
.word 0x7f0125a0
.word 0x7f3993cf
.word 0xff7fffff
.word 0x7f20f56c
.word 0x7f30593a
.word 0xff7fffff
.word 0x7e191af1
.word 0x7e89af6b
.word 0xff7fffff
.word 0x7cf1f159
.word 0x7d9b03d8
.word 0xff7fffff
.word 0x7e86834b
.word 0x7e0a7bf0
.word 0xff7fffff
.word 0x7e479e53
.word 0x7e2998cc
.word 0xff7fffff
.word 0x7c8bf9e4
.word 0x7ea37008
.word 0xff7fffff
.word 0x7e21b906
.word 0x7f19be4b
.word 0xff7fffff
.word 0x7f38849b
.word 0x7e0e0ef6
.word 0xff7fffff
.word 0x7f3c425a
.word 0x7cdf97b9
.word 0xff7fffff
.word 0x7edd2a79
.word 0x7e963972
.word 0xff7fffff
.word 0x7ca4066c
.word 0x7ef3d707
.word 0xff7fffff
.word 0x7f2eb91a
.word 0x7ecd21cb
.word 0xff7fffff
.word 0x7f05f3e7
.word 0x7d0af584
.word 0xff7fffff
.word 0x7f1ca7c2
.word 0x7d9a887c
.word 0xff7fffff
.word 0x7e29504d
.word 0x7f188f57
.word 0xff7fffff
.word 0x7e3aa6be
.word 0x7f0c7228
.word 0xff7fffff
.word 0x7ebacb68
.word 0x7ef1fa00
.word 0xff7fffff
.word 0x7f185183
.word 0x7d7d0cc0
.word 0xff7fffff
.word 0x7efd88c2
.word 0x7f3f4810
.word 0xff7fffff
.word 0x7f365ad7
.word 0x7ede9a56
.word 0xff7fffff
.word 0x7f2319ee
.word 0x7f2bd8f4
.word 0xff7fffff
.word 0x7f076a16
.word 0x7e53afdf
.word 0xff7fffff
.word 0x7f313b58
.word 0x7ecf9722
.word 0xff7fffff
.word 0x7f314a05
.word 0x7f21c09a
.word 0xff7fffff
.word 0x7d89f85f
.word 0x7f1175bf
.word 0xff7fffff
.word 0x7eeb4e0d
.word 0x7efc283d
.word 0xff7fffff
.word 0x7e5ef919
.word 0x7e1173d9
.word 0xff7fffff
.word 0x7ee4f961
.word 0x7e93cd52
.word 0xff7fffff
.word 0x7ee79f8e
.word 0x7ee1a51b
.word 0xff7fffff
.word 0x7f1c60ac
.word 0x7ecf7809
.word 0xff7fffff
.word 0x7ed3afc5
.word 0x7f07a8e7
.word 0xff7fffff
.word 0x7ec30c98
.word 0x7f331aa5
.word 0xff7fffff
.word 0x7eac0532
.word 0x7d772129
.word 0xff7fffff
.word 0x7e3741cc
.word 0x7f39c489
.word 0xff7fffff
.word 0x7f272166
.word 0x7e12bd51
.word 0xff7fffff
.word 0x7f269468
.word 0x7e3b52d3
.word 0xff7fffff
.word 0x7f004910
.word 0x7a60affa
.word 0xff7fffff
.word 0x7f0a2eec
.word 0x7e9925f2
.word 0xff7fffff
.word 0x7f1a90b9
.word 0x7ed2b355
.word 0xff7fffff
.word 0x7eb72bf7
.word 0x7f2623b6
.word 0xff7fffff
.word 0x7eea94a1
.word 0x7f2f4c51
.word 0xff7fffff
.word 0x7eb54d84
.word 0x7d9aad53
.word 0xff7fffff
.word 0x7f0c20b0
.word 0x7f2c93b2
.word 0xff7fffff
.word 0x7f1b8fcb
.word 0x7f2d3742
.word 0xff7fffff
.word 0x7e40638c
.word 0x7f2eabd8
.word 0xff7fffff
.word 0x7e587392
.word 0x7f111d49
.word 0xff7fffff
.word 0x7ee004c9
.word 0x7f2e5b90
.word 0xff7fffff
.word 0x7f167d44
.word 0x7e68f1b4
.word 0xff7fffff
.word 0x7e46d91a
.word 0x7ec45459
.word 0xff7fffff
.word 0x7f222105
.word 0x7f1186f9
.word 0xff7fffff
.word 0x7deff4a3
.word 0x7f079bc3
.word 0xff7fffff
.word 0x7f1393e8
.word 0x7ef18162
.word 0xff7fffff
.word 0x7eed982c
.word 0x7bbf1e72
.word 0xff7fffff
.word 0x7e1c653b
.word 0x7ab530a7
.word 0xff7fffff
.word 0x7eae1fa7
.word 0x7f33ec90
.word 0xff7fffff
.word 0x7f136313
.word 0x7ea5c774
.word 0xff7fffff
.word 0x7e54b690
.word 0x7ed6577b
.word 0xff7fffff
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 416*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
