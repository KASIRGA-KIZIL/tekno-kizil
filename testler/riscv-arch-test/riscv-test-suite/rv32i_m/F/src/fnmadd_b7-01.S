
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.5.2
// timestamp : Tue Sep  7 16:08:04 2021 GMT
// usage     : riscv_ctg \
//                  -- cgf $cgf \
//                  -- xlen $xlen \
// -----------
//
// -----------
// Copyright (c) 2021. IIT Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V F extension for the fnmadd_b7 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b7)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1, rs1==f7, rs2==f4, rs3==f25, rd==f4, fs1 == 0 and fe1 == 0xfe and fm1 == 0x185240 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x049ddd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1dd0ae and rm_val == 3  
// opcode: fnmadd.s ; op1:f7; op2:f4; op3:f25; dest:f4; op1val:0x7f185240; op2val:0x3f849ddd; op3val:0x7f1dd0ae; valaddr_reg:x16; val_offset:0; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f4, f7, f4, f25, 0x3, 0, x16, 0, x17, x15, 0, x18)

inst_1:
// rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2, rs1==f13, rs2==f16, rs3==f22, rd==f13, fs1 == 0 and fe1 == 0xfb and fm1 == 0x521565 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4fc576 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2a8159 and rm_val == 3  
// opcode: fnmadd.s ; op1:f13; op2:f16; op3:f22; dest:f13; op1val:0x7dd21565; op2val:0x40cfc576; op3val:0x7f2a8159; valaddr_reg:x16; val_offset:12; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f13, f16, f22, 0x3, 0, x16, 12, x17, x15, 8, x18)

inst_2:
// rs1 == rs2 == rd != rs3, rs1==f25, rs2==f25, rs3==f20, rd==f25, fs1 == 0 and fe1 == 0xfd and fm1 == 0x387cb7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0ff35d and fs3 == 0 and fe3 == 0xfc and fm3 == 0x4f7a18 and rm_val == 3  
// opcode: fnmadd.s ; op1:f25; op2:f25; op3:f20; dest:f25; op1val:0x7eb87cb7; op2val:0x7eb87cb7; op3val:0x7e4f7a18; valaddr_reg:x16; val_offset:24; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f25, f25, f25, f20, 0x3, 0, x16, 24, x17, x15, 16, x18)

inst_3:
// rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd, rs1==f17, rs2==f19, rs3==f9, rd==f18, fs1 == 0 and fe1 == 0xfd and fm1 == 0x58669e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0e6227 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x70b7c8 and rm_val == 3  
// opcode: fnmadd.s ; op1:f17; op2:f19; op3:f9; dest:f18; op1val:0x7ed8669e; op2val:0x3f8e6227; op3val:0x7ef0b7c8; valaddr_reg:x16; val_offset:36; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f18, f17, f19, f9, 0x3, 0, x16, 36, x17, x15, 24, x18)

inst_4:
// rd == rs2 == rs3 != rs1, rs1==f30, rs2==f28, rs3==f28, rd==f28, fs1 == 0 and fe1 == 0xfd and fm1 == 0x136b51 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x45fd37 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x6406cc and rm_val == 3  
// opcode: fnmadd.s ; op1:f30; op2:f28; op3:f28; dest:f28; op1val:0x7e936b51; op2val:0x3fc5fd37; op3val:0x3fc5fd37; valaddr_reg:x16; val_offset:48; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f28, f30, f28, f28, 0x3, 0, x16, 48, x17, x15, 32, x18)

inst_5:
// rs1 == rs2 == rs3 != rd, rs1==f10, rs2==f10, rs3==f10, rd==f26, fs1 == 0 and fe1 == 0xfc and fm1 == 0x0ba7c1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2bf5fd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3b9e80 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f10; op3:f10; dest:f26; op1val:0x7e0ba7c1; op2val:0x7e0ba7c1; op3val:0x7e0ba7c1; valaddr_reg:x16; val_offset:60; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f26, f10, f10, f10, 0x3, 0, x16, 60, x17, x15, 40, x18)

inst_6:
// rs1 == rs2 == rs3 == rd, rs1==f6, rs2==f6, rs3==f6, rd==f6, fs1 == 0 and fe1 == 0xfb and fm1 == 0x4b55e5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x4aac55 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x20faa9 and rm_val == 3  
// opcode: fnmadd.s ; op1:f6; op2:f6; op3:f6; dest:f6; op1val:0x7dcb55e5; op2val:0x7dcb55e5; op3val:0x7dcb55e5; valaddr_reg:x16; val_offset:72; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f6, f6, f6, f6, 0x3, 0, x16, 72, x17, x15, 48, x18)

inst_7:
// rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2, rs1==f26, rs2==f3, rs3==f26, rd==f27, fs1 == 0 and fe1 == 0xfd and fm1 == 0x62d797 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6ccffe and fs3 == 0 and fe3 == 0xfc and fm3 == 0x51d70d and rm_val == 3  
// opcode: fnmadd.s ; op1:f26; op2:f3; op3:f26; dest:f27; op1val:0x7ee2d797; op2val:0x3eeccffe; op3val:0x7ee2d797; valaddr_reg:x16; val_offset:84; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f27, f26, f3, f26, 0x3, 0, x16, 84, x17, x15, 56, x18)

inst_8:
// rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1, rs1==f16, rs2==f15, rs3==f15, rd==f9, fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f0a23 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x586415 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x066eba and rm_val == 3  
// opcode: fnmadd.s ; op1:f16; op2:f15; op3:f15; dest:f9; op1val:0x7f1f0a23; op2val:0x3dd86415; op3val:0x3dd86415; valaddr_reg:x16; val_offset:96; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f9, f16, f15, f15, 0x3, 0, x16, 96, x17, x15, 64, x18)

inst_9:
// rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1, rs1==f14, rs2==f0, rs3==f24, rd==f24, fs1 == 0 and fe1 == 0xfa and fm1 == 0x512a61 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x1b3a11 and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x7da835 and rm_val == 3  
// opcode: fnmadd.s ; op1:f14; op2:f0; op3:f24; dest:f24; op1val:0x7d512a61; op2val:0x3d1b3a11; op3val:0x7afda835; valaddr_reg:x16; val_offset:108; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f24, f14, f0, f24, 0x3, 0, x16, 108, x17, x15, 72, x18)

inst_10:
// rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3, rs1==f31, rs2==f31, rs3==f12, rd==f2, fs1 == 0 and fe1 == 0xfb and fm1 == 0x561e0c and fs2 == 0 and fe2 == 0x7b and fm2 == 0x106484 and fs3 == 0 and fe3 == 0xf7 and fm3 == 0x7189f3 and rm_val == 3  
// opcode: fnmadd.s ; op1:f31; op2:f31; op3:f12; dest:f2; op1val:0x7dd61e0c; op2val:0x7dd61e0c; op3val:0x7bf189f3; valaddr_reg:x16; val_offset:120; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f2, f31, f31, f12, 0x3, 0, x16, 120, x17, x15, 80, x18)

inst_11:
// rs1 == rd == rs3 != rs2, rs1==f11, rs2==f9, rs3==f11, rd==f11, fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fd54d and fs2 == 0 and fe2 == 0x7a and fm2 == 0x7ea0e8 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x1efa19 and rm_val == 3  
// opcode: fnmadd.s ; op1:f11; op2:f9; op3:f11; dest:f11; op1val:0x7f1fd54d; op2val:0x3d7ea0e8; op3val:0x7f1fd54d; valaddr_reg:x16; val_offset:132; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f11, f11, f9, f11, 0x3, 0, x16, 132, x17, x15, 88, x18)

inst_12:
// rs1==f8, rs2==f17, rs3==f31, rd==f15, fs1 == 0 and fe1 == 0xfe and fm1 == 0x35fe5b and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6b4e05 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x2747f5 and rm_val == 3  
// opcode: fnmadd.s ; op1:f8; op2:f17; op3:f31; dest:f15; op1val:0x7f35fe5b; op2val:0x3eeb4e05; op3val:0x7ea747f5; valaddr_reg:x16; val_offset:144; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f15, f8, f17, f31, 0x3, 0, x16, 144, x17, x15, 96, x18)

inst_13:
// rs1==f5, rs2==f24, rs3==f21, rd==f17, fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2c1d45 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x038dbf and fs3 == 0 and fe3 == 0xfe and fm3 == 0x30e48e and rm_val == 3  
// opcode: fnmadd.s ; op1:f5; op2:f24; op3:f21; dest:f17; op1val:0x7cac1d45; op2val:0x42038dbf; op3val:0x7f30e48e; valaddr_reg:x16; val_offset:156; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f17, f5, f24, f21, 0x3, 0, x16, 156, x17, x15, 104, x18)

inst_14:
// rs1==f15, rs2==f13, rs3==f5, rd==f8, fs1 == 0 and fe1 == 0xfb and fm1 == 0x33e534 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0192c8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x361b4b and rm_val == 3  
// opcode: fnmadd.s ; op1:f15; op2:f13; op3:f5; dest:f8; op1val:0x7db3e534; op2val:0x410192c8; op3val:0x7f361b4b; valaddr_reg:x16; val_offset:168; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f8, f15, f13, f5, 0x3, 0, x16, 168, x17, x15, 112, x18)

inst_15:
// rs1==f2, rs2==f18, rs3==f3, rd==f1, fs1 == 0 and fe1 == 0xf9 and fm1 == 0x49296d and fs2 == 0 and fe2 == 0x82 and fm2 == 0x336a25 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x0cfb60 and rm_val == 3  
// opcode: fnmadd.s ; op1:f2; op2:f18; op3:f3; dest:f1; op1val:0x7cc9296d; op2val:0x41336a25; op3val:0x7e8cfb60; valaddr_reg:x16; val_offset:180; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f1, f2, f18, f3, 0x3, 0, x16, 180, x17, x15, 120, x18)

inst_16:
// rs1==f28, rs2==f11, rs3==f0, rd==f30, fs1 == 0 and fe1 == 0xfb and fm1 == 0x0fe409 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4b5f3b and fs3 == 0 and fe3 == 0xfd and fm3 == 0x649eb5 and rm_val == 3  
// opcode: fnmadd.s ; op1:f28; op2:f11; op3:f0; dest:f30; op1val:0x7d8fe409; op2val:0x40cb5f3b; op3val:0x7ee49eb5; valaddr_reg:x16; val_offset:192; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f30, f28, f11, f0, 0x3, 0, x16, 192, x17, x15, 128, x18)

inst_17:
// rs1==f0, rs2==f12, rs3==f17, rd==f3, fs1 == 0 and fe1 == 0xfe and fm1 == 0x034e7c and fs2 == 0 and fe2 == 0x7f and fm2 == 0x116e22 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x152fe4 and rm_val == 3  
// opcode: fnmadd.s ; op1:f0; op2:f12; op3:f17; dest:f3; op1val:0x7f034e7c; op2val:0x3f916e22; op3val:0x7f152fe4; valaddr_reg:x16; val_offset:204; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f3, f0, f12, f17, 0x3, 0, x16, 204, x17, x15, 136, x18)

inst_18:
// rs1==f1, rs2==f29, rs3==f2, rd==f19, fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f0fcc and fs2 == 0 and fe2 == 0x7e and fm2 == 0x363027 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x07f92b and rm_val == 3  
// opcode: fnmadd.s ; op1:f1; op2:f29; op3:f2; dest:f19; op1val:0x7f3f0fcc; op2val:0x3f363027; op3val:0x7f07f92b; valaddr_reg:x16; val_offset:216; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f19, f1, f29, f2, 0x3, 0, x16, 216, x17, x15, 144, x18)

inst_19:
// rs1==f18, rs2==f21, rs3==f23, rd==f7, fs1 == 0 and fe1 == 0xfe and fm1 == 0x17c861 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x712e6f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0eff2c and rm_val == 3  
// opcode: fnmadd.s ; op1:f18; op2:f21; op3:f23; dest:f7; op1val:0x7f17c861; op2val:0x3f712e6f; op3val:0x7f0eff2c; valaddr_reg:x16; val_offset:228; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f7, f18, f21, f23, 0x3, 0, x16, 228, x17, x15, 152, x18)

inst_20:
// rs1==f4, rs2==f26, rs3==f14, rd==f21, fs1 == 0 and fe1 == 0xfd and fm1 == 0x6368b9 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5c69af and fs3 == 0 and fe3 == 0xfc and fm3 == 0x43cbe1 and rm_val == 3  
// opcode: fnmadd.s ; op1:f4; op2:f26; op3:f14; dest:f21; op1val:0x7ee368b9; op2val:0x3edc69af; op3val:0x7e43cbe1; valaddr_reg:x16; val_offset:240; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f21, f4, f26, f14, 0x3, 0, x16, 240, x17, x15, 160, x18)

inst_21:
// rs1==f24, rs2==f8, rs3==f1, rd==f22, fs1 == 0 and fe1 == 0xfe and fm1 == 0x173551 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x0b1967 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x2451e9 and rm_val == 3  
// opcode: fnmadd.s ; op1:f24; op2:f8; op3:f1; dest:f22; op1val:0x7f173551; op2val:0x3e8b1967; op3val:0x7e2451e9; valaddr_reg:x16; val_offset:252; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f22, f24, f8, f1, 0x3, 0, x16, 252, x17, x15, 168, x18)

inst_22:
// rs1==f23, rs2==f2, rs3==f18, rd==f31, fs1 == 0 and fe1 == 0xfe and fm1 == 0x24fad5 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x680772 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x15881d and rm_val == 3  
// opcode: fnmadd.s ; op1:f23; op2:f2; op3:f18; dest:f31; op1val:0x7f24fad5; op2val:0x3f680772; op3val:0x7f15881d; valaddr_reg:x16; val_offset:264; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f31, f23, f2, f18, 0x3, 0, x16, 264, x17, x15, 176, x18)

inst_23:
// rs1==f19, rs2==f22, rs3==f8, rd==f14, fs1 == 0 and fe1 == 0xfd and fm1 == 0x2a4148 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x696e25 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x1b3eab and rm_val == 3  
// opcode: fnmadd.s ; op1:f19; op2:f22; op3:f8; dest:f14; op1val:0x7eaa4148; op2val:0x3ee96e25; op3val:0x7e1b3eab; valaddr_reg:x16; val_offset:276; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f14, f19, f22, f8, 0x3, 0, x16, 276, x17, x15, 184, x18)

inst_24:
// rs1==f21, rs2==f23, rs3==f30, rd==f16, fs1 == 0 and fe1 == 0xfd and fm1 == 0x79f86d and fs2 == 0 and fe2 == 0x7d and fm2 == 0x61c0e4 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x5c6fb2 and rm_val == 3  
// opcode: fnmadd.s ; op1:f21; op2:f23; op3:f30; dest:f16; op1val:0x7ef9f86d; op2val:0x3ee1c0e4; op3val:0x7e5c6fb2; valaddr_reg:x16; val_offset:288; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f16, f21, f23, f30, 0x3, 0, x16, 288, x17, x15, 192, x18)

inst_25:
// rs1==f27, rs2==f14, rs3==f7, rd==f5, fs1 == 0 and fe1 == 0xfe and fm1 == 0x01c7a5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0a21b9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0c0d70 and rm_val == 3  
// opcode: fnmadd.s ; op1:f27; op2:f14; op3:f7; dest:f5; op1val:0x7f01c7a5; op2val:0x3f8a21b9; op3val:0x7f0c0d70; valaddr_reg:x16; val_offset:300; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f5, f27, f14, f7, 0x3, 0, x16, 300, x17, x15, 200, x18)

inst_26:
// rs1==f3, rs2==f1, rs3==f13, rd==f23, fs1 == 0 and fe1 == 0xfe and fm1 == 0x309a0c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x50c5b9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x100590 and rm_val == 3  
// opcode: fnmadd.s ; op1:f3; op2:f1; op3:f13; dest:f23; op1val:0x7f309a0c; op2val:0x3f50c5b9; op3val:0x7f100590; valaddr_reg:x16; val_offset:312; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f23, f3, f1, f13, 0x3, 0, x16, 312, x17, x15, 208, x18)

inst_27:
// rs1==f22, rs2==f5, rs3==f29, rd==f0, fs1 == 0 and fe1 == 0xfe and fm1 == 0x3cc8a3 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x5057a9 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x19a3aa and rm_val == 3  
// opcode: fnmadd.s ; op1:f22; op2:f5; op3:f29; dest:f0; op1val:0x7f3cc8a3; op2val:0x3d5057a9; op3val:0x7d19a3aa; valaddr_reg:x16; val_offset:324; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f0, f22, f5, f29, 0x3, 0, x16, 324, x17, x15, 216, x18)

inst_28:
// rs1==f29, rs2==f30, rs3==f4, rd==f12, fs1 == 0 and fe1 == 0xfb and fm1 == 0x3868e1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6f4b41 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x2c6020 and rm_val == 3  
// opcode: fnmadd.s ; op1:f29; op2:f30; op3:f4; dest:f12; op1val:0x7db868e1; op2val:0x3f6f4b41; op3val:0x7dac6020; valaddr_reg:x16; val_offset:336; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f12, f29, f30, f4, 0x3, 0, x16, 336, x17, x15, 224, x18)

inst_29:
// rs1==f12, rs2==f20, rs3==f27, rd==f10, fs1 == 0 and fe1 == 0xfc and fm1 == 0x017e79 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7b0813 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7df62e and rm_val == 3  
// opcode: fnmadd.s ; op1:f12; op2:f20; op3:f27; dest:f10; op1val:0x7e017e79; op2val:0x407b0813; op3val:0x7efdf62e; valaddr_reg:x16; val_offset:348; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f10, f12, f20, f27, 0x3, 0, x16, 348, x17, x15, 232, x18)

inst_30:
// rs1==f20, rs2==f7, rs3==f16, rd==f29, fs1 == 0 and fe1 == 0xfe and fm1 == 0x0b0956 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x18c26e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x25ee48 and rm_val == 3  
// opcode: fnmadd.s ; op1:f20; op2:f7; op3:f16; dest:f29; op1val:0x7f0b0956; op2val:0x3f98c26e; op3val:0x7f25ee48; valaddr_reg:x16; val_offset:360; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f29, f20, f7, f16, 0x3, 0, x16, 360, x17, x15, 240, x18)

inst_31:
// rs1==f9, rs2==f27, rs3==f19, rd==f20, fs1 == 0 and fe1 == 0xfc and fm1 == 0x616815 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d6ee4 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x34e1fc and rm_val == 3  
// opcode: fnmadd.s ; op1:f9; op2:f27; op3:f19; dest:f20; op1val:0x7e616815; op2val:0x3fcd6ee4; op3val:0x7eb4e1fc; valaddr_reg:x16; val_offset:372; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f20, f9, f27, f19, 0x3, 0, x16, 372, x17, x15, 248, x18)

inst_32:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5913e5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x50d3e6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3113d9 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ed913e5; op2val:0x3fd0d3e6; op3val:0x7f3113d9; valaddr_reg:x16; val_offset:384; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 384, x17, x15, 256, x18)

inst_33:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16fd83 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x12dd89 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x2d3e7e and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f16fd83; op2val:0x3e92dd89; op3val:0x7e2d3e7e; valaddr_reg:x16; val_offset:396; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 396, x17, x15, 264, x18)

inst_34:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x45b82c and fs2 == 0 and fe2 == 0x83 and fm2 == 0x06ed1d and fs3 == 0 and fe3 == 0xfd and fm3 == 0x506b12 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7cc5b82c; op2val:0x4186ed1d; op3val:0x7ed06b12; valaddr_reg:x16; val_offset:408; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 408, x17, x15, 272, x18)

inst_35:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19d31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6aee21 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x0d2a0f and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d99d31d; op2val:0x406aee21; op3val:0x7e8d2a0f; valaddr_reg:x16; val_offset:420; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 420, x17, x15, 280, x18)

inst_36:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x300384 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x468f57 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x088546 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7db00384; op2val:0x40c68f57; op3val:0x7f088546; valaddr_reg:x16; val_offset:432; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 432, x17, x15, 288, x18)

inst_37:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x74f85a and fs2 == 0 and fe2 == 0x83 and fm2 == 0x184854 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x11b8ad and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7cf4f85a; op2val:0x41984854; op3val:0x7f11b8ad; valaddr_reg:x16; val_offset:444; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 444, x17, x15, 296, x18)

inst_38:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x13b96c and fs2 == 0 and fe2 == 0x7c and fm2 == 0x228cd8 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x3b993a and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e93b96c; op2val:0x3e228cd8; op3val:0x7d3b993a; valaddr_reg:x16; val_offset:456; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 456, x17, x15, 304, x18)

inst_39:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7c19fa and fs2 == 0 and fe2 == 0x80 and fm2 == 0x73e479 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x702da8 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7dfc19fa; op2val:0x4073e479; op3val:0x7ef02da8; valaddr_reg:x16; val_offset:468; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 468, x17, x15, 312, x18)

inst_40:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ff572 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3ac415 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3abc62 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7efff572; op2val:0x3fbac415; op3val:0x7f3abc62; valaddr_reg:x16; val_offset:480; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 480, x17, x15, 320, x18)

inst_41:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a9c08 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6caafe and fs3 == 0 and fe3 == 0xfd and fm3 == 0x0eef1c and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f1a9c08; op2val:0x3eecaafe; op3val:0x7e8eef1c; valaddr_reg:x16; val_offset:492; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 492, x17, x15, 328, x18)

inst_42:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x098b22 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x668bbe and fs3 == 0 and fe3 == 0xfd and fm3 == 0x77bc2c and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f098b22; op2val:0x3f668bbe; op3val:0x7ef7bc2c; valaddr_reg:x16; val_offset:504; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 504, x17, x15, 336, x18)

inst_43:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x539b49 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x19c970 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7e3ca1 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ed39b49; op2val:0x3f99c970; op3val:0x7efe3ca1; valaddr_reg:x16; val_offset:516; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 516, x17, x15, 344, x18)

inst_44:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x18a4f0 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x209a40 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3f8620 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e98a4f0; op2val:0x40209a40; op3val:0x7f3f8620; valaddr_reg:x16; val_offset:528; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 528, x17, x15, 352, x18)

inst_45:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1255c9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x141b63 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x295281 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e9255c9; op2val:0x3f941b63; op3val:0x7ea95281; valaddr_reg:x16; val_offset:540; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 540, x17, x15, 360, x18)

inst_46:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x107f0d and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5d489c and fs3 == 0 and fe3 == 0xfc and fm3 == 0x79cd55 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e107f0d; op2val:0x3fdd489c; op3val:0x7e79cd55; valaddr_reg:x16; val_offset:552; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 552, x17, x15, 368, x18)

inst_47:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16fe06 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x393272 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5a76a7 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f16fe06; op2val:0x3f393272; op3val:0x7eda76a7; valaddr_reg:x16; val_offset:564; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 564, x17, x15, 376, x18)

inst_48:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x389380 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x186b19 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5bc998 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e389380; op2val:0x40186b19; op3val:0x7edbc998; valaddr_reg:x16; val_offset:576; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 576, x17, x15, 384, x18)

inst_49:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7aa684 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x784242 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x731230 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7dfaa684; op2val:0x3ff84242; op3val:0x7e731230; valaddr_reg:x16; val_offset:588; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 588, x17, x15, 392, x18)

inst_50:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ed4d8 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6bab23 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x20f242 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f2ed4d8; op2val:0x3eebab23; op3val:0x7ea0f242; valaddr_reg:x16; val_offset:600; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 600, x17, x15, 400, x18)

inst_51:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2a2f80 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x22e85e and fs3 == 0 and fe3 == 0xfd and fm3 == 0x589913 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e2a2f80; op2val:0x4022e85e; op3val:0x7ed89913; valaddr_reg:x16; val_offset:612; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 612, x17, x15, 408, x18)

inst_52:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x151c59 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x131231 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x2b53c0 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e951c59; op2val:0x3f131231; op3val:0x7e2b53c0; valaddr_reg:x16; val_offset:624; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 624, x17, x15, 416, x18)

inst_53:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x67f048 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x70ec94 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5a479c and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7de7f048; op2val:0x4070ec94; op3val:0x7eda479c; valaddr_reg:x16; val_offset:636; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 636, x17, x15, 424, x18)

inst_54:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x66dc85 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6fe8a0 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x5859a9 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7de6dc85; op2val:0x3fefe8a0; op3val:0x7e5859a9; valaddr_reg:x16; val_offset:648; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 648, x17, x15, 432, x18)

inst_55:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x3b3e27 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x09ecfa and fs3 == 0 and fe3 == 0xfd and fm3 == 0x49c32f and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7cbb3e27; op2val:0x4189ecfa; op3val:0x7ec9c32f; valaddr_reg:x16; val_offset:660; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 660, x17, x15, 440, x18)

inst_56:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x633d35 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x611178 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x47c84e and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d633d35; op2val:0x40e11178; op3val:0x7ec7c84e; valaddr_reg:x16; val_offset:672; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 672, x17, x15, 448, x18)

inst_57:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3de659 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x1bacb3 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x66f527 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ebde659; op2val:0x3e1bacb3; op3val:0x7d66f527; valaddr_reg:x16; val_offset:684; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 684, x17, x15, 456, x18)

inst_58:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5218a0 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x592123 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x323212 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ed218a0; op2val:0x3f592123; op3val:0x7eb23212; valaddr_reg:x16; val_offset:696; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 696, x17, x15, 464, x18)

inst_59:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c73a9 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x1fa10c and fs3 == 0 and fe3 == 0xfb and fm3 == 0x2f2863 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f0c73a9; op2val:0x3e1fa10c; op3val:0x7daf2863; valaddr_reg:x16; val_offset:708; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 708, x17, x15, 472, x18)

inst_60:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03e545 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x6754b2 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x6e5f0a and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e83e545; op2val:0x3e6754b2; op3val:0x7d6e5f0a; valaddr_reg:x16; val_offset:720; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 720, x17, x15, 480, x18)

inst_61:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365c6a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3cdb59 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x06881f and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f365c6a; op2val:0x3f3cdb59; op3val:0x7f06881f; valaddr_reg:x16; val_offset:732; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 732, x17, x15, 488, x18)

inst_62:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ea9e8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x454378 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x12eaff and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f3ea9e8; op2val:0x3f454378; op3val:0x7f12eaff; valaddr_reg:x16; val_offset:744; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 744, x17, x15, 496, x18)

inst_63:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e4484 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x0fe7df and fs3 == 0 and fe3 == 0xfa and fm3 == 0x1ff244 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e8e4484; op2val:0x3e0fe7df; op3val:0x7d1ff244; valaddr_reg:x16; val_offset:756; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 756, x17, x15, 504, x18)

inst_64:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x48fcb3 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x298476 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x0516d1 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7cc8fcb3; op2val:0x40a98476; op3val:0x7e0516d1; valaddr_reg:x16; val_offset:768; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 768, x17, x15, 512, x18)

inst_65:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75363e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x56ade2 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x4da1e6 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ef5363e; op2val:0x3f56ade2; op3val:0x7ecda1e6; valaddr_reg:x16; val_offset:780; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 780, x17, x15, 520, x18)

inst_66:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x038c5d and fs2 == 0 and fe2 == 0x82 and fm2 == 0x1883f4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1cbe4b and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d838c5d; op2val:0x411883f4; op3val:0x7f1cbe4b; valaddr_reg:x16; val_offset:792; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 792, x17, x15, 528, x18)

inst_67:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310e27 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x0dbfdf and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x4412ff and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f310e27; op2val:0x3d0dbfdf; op3val:0x7cc412ff; valaddr_reg:x16; val_offset:804; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 804, x17, x15, 536, x18)

inst_68:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3983ab and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6439df and fs3 == 0 and fe3 == 0xfd and fm3 == 0x256335 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f3983ab; op2val:0x3ee439df; op3val:0x7ea56335; valaddr_reg:x16; val_offset:816; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 816, x17, x15, 544, x18)

inst_69:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24c049 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x26f4cf and fs3 == 0 and fe3 == 0xfc and fm3 == 0x56e479 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f24c049; op2val:0x3ea6f4cf; op3val:0x7e56e479; valaddr_reg:x16; val_offset:828; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 828, x17, x15, 552, x18)

inst_70:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x346ab9 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x366217 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x008901 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f346ab9; op2val:0x3db66217; op3val:0x7d808901; valaddr_reg:x16; val_offset:840; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 840, x17, x15, 560, x18)

inst_71:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3bca6f and fs2 == 0 and fe2 == 0x7d and fm2 == 0x15c04d and fs3 == 0 and fe3 == 0xfc and fm3 == 0x5bb3c7 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f3bca6f; op2val:0x3e95c04d; op3val:0x7e5bb3c7; valaddr_reg:x16; val_offset:852; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 852, x17, x15, 568, x18)

inst_72:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x43983d and fs2 == 0 and fe2 == 0x82 and fm2 == 0x491608 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x19a35e and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d43983d; op2val:0x41491608; op3val:0x7f19a35e; valaddr_reg:x16; val_offset:864; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 864, x17, x15, 576, x18)

inst_73:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5447d6 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x24f81b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x08cbc1 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e5447d6; op2val:0x4024f81b; op3val:0x7f08cbc1; valaddr_reg:x16; val_offset:876; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 876, x17, x15, 584, x18)

inst_74:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1578bb and fs2 == 0 and fe2 == 0x7e and fm2 == 0x130440 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x2bad9e and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f1578bb; op2val:0x3f130440; op3val:0x7eabad9e; valaddr_reg:x16; val_offset:888; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 888, x17, x15, 592, x18)

inst_75:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e7c12 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7864d3 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x294ceb and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f2e7c12; op2val:0x3ef864d3; op3val:0x7ea94ceb; valaddr_reg:x16; val_offset:900; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 900, x17, x15, 600, x18)

inst_76:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x528ae7 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5c3da9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x352215 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7dd28ae7; op2val:0x40dc3da9; op3val:0x7f352215; valaddr_reg:x16; val_offset:912; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 912, x17, x15, 608, x18)

inst_77:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0535ac and fs2 == 0 and fe2 == 0x7f and fm2 == 0x11fe69 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x17ef92 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f0535ac; op2val:0x3f91fe69; op3val:0x7f17ef92; valaddr_reg:x16; val_offset:924; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 924, x17, x15, 616, x18)

inst_78:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b8337 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x018782 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x2d8fd1 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f2b8337; op2val:0x3f018782; op3val:0x7ead8fd1; valaddr_reg:x16; val_offset:936; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 936, x17, x15, 624, x18)

inst_79:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efd0c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7ef82d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2e48b6 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f2efd0c; op2val:0x3f7ef82d; op3val:0x7f2e48b6; valaddr_reg:x16; val_offset:948; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 948, x17, x15, 632, x18)

inst_80:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0052ab and fs2 == 0 and fe2 == 0x81 and fm2 == 0x6cc2eb and fs3 == 0 and fe3 == 0xfd and fm3 == 0x6d5bd5 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d8052ab; op2val:0x40ecc2eb; op3val:0x7eed5bd5; valaddr_reg:x16; val_offset:960; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 960, x17, x15, 640, x18)

inst_81:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x431508 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x51cb43 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1fdf11 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7dc31508; op2val:0x40d1cb43; op3val:0x7f1fdf11; valaddr_reg:x16; val_offset:972; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 972, x17, x15, 648, x18)

inst_82:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x719c9d and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0eaeb4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x06a9c2 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ef19c9d; op2val:0x3f8eaeb4; op3val:0x7f06a9c2; valaddr_reg:x16; val_offset:984; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 984, x17, x15, 656, x18)

inst_83:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ae90 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x78da00 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2cb86b and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eb1ae90; op2val:0x3ff8da00; op3val:0x7f2cb86b; valaddr_reg:x16; val_offset:996; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 996, x17, x15, 664, x18)

inst_84:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x21f156 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x43f0a5 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x77e620 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7da1f156; op2val:0x40c3f0a5; op3val:0x7ef7e620; valaddr_reg:x16; val_offset:1008; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1008, x17, x15, 672, x18)

inst_85:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7127a3 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x1eb06b and fs3 == 0 and fe3 == 0xfb and fm3 == 0x157ca7 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ef127a3; op2val:0x3e1eb06b; op3val:0x7d957ca7; valaddr_reg:x16; val_offset:1020; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1020, x17, x15, 680, x18)

inst_86:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68ed41 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x738f77 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x5d9bbd and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ee8ed41; op2val:0x3e738f77; op3val:0x7ddd9bbd; valaddr_reg:x16; val_offset:1032; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1032, x17, x15, 688, x18)

inst_87:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5ea80c and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0a19f7 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x703a58 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ddea80c; op2val:0x408a19f7; op3val:0x7ef03a58; valaddr_reg:x16; val_offset:1044; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1044, x17, x15, 696, x18)

inst_88:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19d68e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x674db3 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x0aff4b and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d99d68e; op2val:0x40674db3; op3val:0x7e8aff4b; valaddr_reg:x16; val_offset:1056; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1056, x17, x15, 704, x18)

inst_89:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3ccf7c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7421c1 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x340ea8 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ebccf7c; op2val:0x3f7421c1; op3val:0x7eb40ea8; valaddr_reg:x16; val_offset:1068; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1068, x17, x15, 712, x18)

inst_90:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16332e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x051bd2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1c31d4 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f16332e; op2val:0x3f851bd2; op3val:0x7f1c31d4; valaddr_reg:x16; val_offset:1080; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1080, x17, x15, 720, x18)

inst_91:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b8edc and fs2 == 0 and fe2 == 0x7e and fm2 == 0x302841 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x221741 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eeb8edc; op2val:0x3f302841; op3val:0x7ea21741; valaddr_reg:x16; val_offset:1092; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1092, x17, x15, 728, x18)

inst_92:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13f0eb and fs2 == 0 and fe2 == 0x81 and fm2 == 0x1d617d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x35e62e and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e13f0eb; op2val:0x409d617d; op3val:0x7f35e62e; valaddr_reg:x16; val_offset:1104; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1104, x17, x15, 736, x18)

inst_93:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23ded1 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x156e92 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x3f4eee and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f23ded1; op2val:0x3d956e92; op3val:0x7d3f4eee; valaddr_reg:x16; val_offset:1116; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1116, x17, x15, 744, x18)

inst_94:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0b0329 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x25e82c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x342e39 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e8b0329; op2val:0x4025e82c; op3val:0x7f342e39; valaddr_reg:x16; val_offset:1128; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1128, x17, x15, 752, x18)

inst_95:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c3fe4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4d0748 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x09f410 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7dac3fe4; op2val:0x40cd0748; op3val:0x7f09f410; valaddr_reg:x16; val_offset:1140; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1140, x17, x15, 760, x18)

inst_96:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x39031d and fs2 == 0 and fe2 == 0x83 and fm2 == 0x4d83ab and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1486a7 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7cb9031d; op2val:0x41cd83ab; op3val:0x7f1486a7; valaddr_reg:x16; val_offset:1152; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1152, x17, x15, 768, x18)

inst_97:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2c8d9d and fs2 == 0 and fe2 == 0x7c and fm2 == 0x0221ad and fs3 == 0 and fe3 == 0xfa and fm3 == 0x2f6d3b and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eac8d9d; op2val:0x3e0221ad; op3val:0x7d2f6d3b; valaddr_reg:x16; val_offset:1164; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1164, x17, x15, 776, x18)

inst_98:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5f5397 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x2e726c and fs3 == 0 and fe3 == 0xf7 and fm3 == 0x182ea3 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e5f5397; op2val:0x3cae726c; op3val:0x7b982ea3; valaddr_reg:x16; val_offset:1176; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1176, x17, x15, 784, x18)

inst_99:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18571c and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1718df and fs3 == 0 and fe3 == 0xfe and fm3 == 0x33d45e and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f18571c; op2val:0x3f9718df; op3val:0x7f33d45e; valaddr_reg:x16; val_offset:1188; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1188, x17, x15, 792, x18)

inst_100:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x18f0ab and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1cd557 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x3b643a and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e98f0ab; op2val:0x3f9cd557; op3val:0x7ebb643a; valaddr_reg:x16; val_offset:1200; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1200, x17, x15, 800, x18)

inst_101:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x679066 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x07e51c and fs3 == 0 and fe3 == 0xfc and fm3 == 0x75d8c6 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ee79066; op2val:0x3f07e51c; op3val:0x7e75d8c6; valaddr_reg:x16; val_offset:1212; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1212, x17, x15, 808, x18)

inst_102:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x313b25 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5093fc and fs3 == 0 and fe3 == 0xfd and fm3 == 0x106682 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f313b25; op2val:0x3ed093fc; op3val:0x7e906682; valaddr_reg:x16; val_offset:1224; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1224, x17, x15, 816, x18)

inst_103:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d263c and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3c7c65 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3a6317 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7efd263c; op2val:0x3fbc7c65; op3val:0x7f3a6317; valaddr_reg:x16; val_offset:1236; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1236, x17, x15, 824, x18)

inst_104:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a82a0 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x4dc01c and fs3 == 0 and fe3 == 0xfc and fm3 == 0x785d1b and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f1a82a0; op2val:0x3ecdc01c; op3val:0x7e785d1b; valaddr_reg:x16; val_offset:1248; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1248, x17, x15, 832, x18)

inst_105:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x10f39b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4f4d9f and fs3 == 0 and fe3 == 0xfc and fm3 == 0x6ac1db and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e90f39b; op2val:0x3f4f4d9f; op3val:0x7e6ac1db; valaddr_reg:x16; val_offset:1260; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1260, x17, x15, 840, x18)

inst_106:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37c24b and fs2 == 0 and fe2 == 0x7d and fm2 == 0x182086 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x5a656b and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eb7c24b; op2val:0x3e982086; op3val:0x7dda656b; valaddr_reg:x16; val_offset:1272; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1272, x17, x15, 848, x18)

inst_107:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4dc6a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x62c78f and fs3 == 0 and fe3 == 0xfd and fm3 == 0x3649c8 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e4dc6a7; op2val:0x3fe2c78f; op3val:0x7eb649c8; valaddr_reg:x16; val_offset:1284; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1284, x17, x15, 856, x18)

inst_108:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28d30c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x323b1d and fs3 == 0 and fe3 == 0xfd and fm3 == 0x6b1376 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f28d30c; op2val:0x3f323b1d; op3val:0x7eeb1376; valaddr_reg:x16; val_offset:1296; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1296, x17, x15, 864, x18)

inst_109:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x43a885 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4e4840 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x1da8d4 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e43a885; op2val:0x3fce4840; op3val:0x7e9da8d4; valaddr_reg:x16; val_offset:1308; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1308, x17, x15, 872, x18)

inst_110:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d6385 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x037a19 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x321940 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ead6385; op2val:0x40037a19; op3val:0x7f321940; valaddr_reg:x16; val_offset:1320; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1320, x17, x15, 880, x18)

inst_111:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0aa492 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x35bca1 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x44d907 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e8aa492; op2val:0x3f35bca1; op3val:0x7e44d907; valaddr_reg:x16; val_offset:1332; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1332, x17, x15, 888, x18)

inst_112:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3db054 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x18ba96 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x6255e7 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7dbdb054; op2val:0x4098ba96; op3val:0x7ee255e7; valaddr_reg:x16; val_offset:1344; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1344, x17, x15, 896, x18)

inst_113:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0431c2 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x022039 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x0663d1 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e0431c2; op2val:0x3e022039; op3val:0x7c8663d1; valaddr_reg:x16; val_offset:1356; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1356, x17, x15, 904, x18)

inst_114:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b4351 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc9e9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x16889a and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ebb4351; op2val:0x3fcdc9e9; op3val:0x7f16889a; valaddr_reg:x16; val_offset:1368; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1368, x17, x15, 912, x18)

inst_115:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f54bf and fs2 == 0 and fe2 == 0x7d and fm2 == 0x36502d and fs3 == 0 and fe3 == 0xfc and fm3 == 0x4c2647 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f0f54bf; op2val:0x3eb6502d; op3val:0x7e4c2647; valaddr_reg:x16; val_offset:1380; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1380, x17, x15, 920, x18)

inst_116:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1d149a and fs2 == 0 and fe2 == 0x7c and fm2 == 0x571bda and fs3 == 0 and fe3 == 0xfb and fm3 == 0x03fd65 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e9d149a; op2val:0x3e571bda; op3val:0x7d83fd65; valaddr_reg:x16; val_offset:1392; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1392, x17, x15, 928, x18)

inst_117:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d648 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3fcdc7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x077d3c and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eb4d648; op2val:0x3fbfcdc7; op3val:0x7f077d3c; valaddr_reg:x16; val_offset:1404; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1404, x17, x15, 936, x18)

inst_118:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18d9d9 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x262663 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x46685d and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f18d9d9; op2val:0x3f262663; op3val:0x7ec6685d; valaddr_reg:x16; val_offset:1416; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1416, x17, x15, 944, x18)

inst_119:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2bb8f9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6dee41 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1f9a10 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eabb8f9; op2val:0x3fedee41; op3val:0x7f1f9a10; valaddr_reg:x16; val_offset:1428; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1428, x17, x15, 952, x18)

inst_120:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ae82 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x29e1b5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2ac951 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f00ae82; op2val:0x3fa9e1b5; op3val:0x7f2ac951; valaddr_reg:x16; val_offset:1440; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1440, x17, x15, 960, x18)

inst_121:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c0464 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6941a6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2b5036 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f3c0464; op2val:0x3f6941a6; op3val:0x7f2b5036; valaddr_reg:x16; val_offset:1452; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1452, x17, x15, 968, x18)

inst_122:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c58cf and fs2 == 0 and fe2 == 0x7d and fm2 == 0x00090a and fs3 == 0 and fe3 == 0xfc and fm3 == 0x3c661c and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f3c58cf; op2val:0x3e80090a; op3val:0x7e3c661c; valaddr_reg:x16; val_offset:1464; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1464, x17, x15, 976, x18)

inst_123:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f4ac6 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0870e2 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x18bdd1 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f0f4ac6; op2val:0x3f0870e2; op3val:0x7e98bdd1; valaddr_reg:x16; val_offset:1476; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1476, x17, x15, 984, x18)

inst_124:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x255773 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7b6dc7 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x2263a5 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d255773; op2val:0x40fb6dc7; op3val:0x7ea263a5; valaddr_reg:x16; val_offset:1488; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1488, x17, x15, 992, x18)

inst_125:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42d171 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7c4426 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3ffa07 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7dc2d171; op2val:0x40fc4426; op3val:0x7f3ffa07; valaddr_reg:x16; val_offset:1500; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1500, x17, x15, 1000, x18)

inst_126:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x10ec66 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x03fd1f and fs3 == 0 and fe3 == 0xfd and fm3 == 0x157088 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e90ec66; op2val:0x3f83fd1f; op3val:0x7e957088; valaddr_reg:x16; val_offset:1512; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1512, x17, x15, 1008, x18)

inst_127:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e2e8d and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7cb106 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x6b1a87 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eee2e8d; op2val:0x3efcb106; op3val:0x7e6b1a87; valaddr_reg:x16; val_offset:1524; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1524, x17, x15, 1016, x18)

inst_128:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7fad2c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2ddf2e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2da6ed and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e7fad2c; op2val:0x402ddf2e; op3val:0x7f2da6ed; valaddr_reg:x16; val_offset:1536; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1536, x17, x15, 1024, x18)

inst_129:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x156314 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x339b9f and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x519e2f and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f156314; op2val:0x3cb39b9f; op3val:0x7c519e2f; valaddr_reg:x16; val_offset:1548; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1548, x17, x15, 1032, x18)

inst_130:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x060f17 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x12ec96 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x19e100 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f060f17; op2val:0x3c92ec96; op3val:0x7c19e100; valaddr_reg:x16; val_offset:1560; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1560, x17, x15, 1040, x18)

inst_131:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x21311f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x03f6ba and fs3 == 0 and fe3 == 0xfe and fm3 == 0x262efb and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e21311f; op2val:0x4083f6ba; op3val:0x7f262efb; valaddr_reg:x16; val_offset:1572; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1572, x17, x15, 1048, x18)

inst_132:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39c1fe and fs2 == 0 and fe2 == 0x7d and fm2 == 0x122c1f and fs3 == 0 and fe3 == 0xfb and fm3 == 0x54214e and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eb9c1fe; op2val:0x3e922c1f; op3val:0x7dd4214e; valaddr_reg:x16; val_offset:1584; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1584, x17, x15, 1056, x18)

inst_133:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6fd4df and fs2 == 0 and fe2 == 0x7e and fm2 == 0x20dc16 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x16b33b and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e6fd4df; op2val:0x3f20dc16; op3val:0x7e16b33b; valaddr_reg:x16; val_offset:1596; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1596, x17, x15, 1064, x18)

inst_134:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x337137 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3588f6 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7e7e1b and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7db37137; op2val:0x40b588f6; op3val:0x7efe7e1b; valaddr_reg:x16; val_offset:1608; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1608, x17, x15, 1072, x18)

inst_135:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28f9a2 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x18ca47 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x49b378 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f28f9a2; op2val:0x3f18ca47; op3val:0x7ec9b378; valaddr_reg:x16; val_offset:1620; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1620, x17, x15, 1080, x18)

inst_136:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x623c76 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x1be23d and fs3 == 0 and fe3 == 0xfb and fm3 == 0x09c28b and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ee23c76; op2val:0x3e1be23d; op3val:0x7d89c28b; valaddr_reg:x16; val_offset:1632; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1632, x17, x15, 1088, x18)

inst_137:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x671228 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0177d2 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x69b89c and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ee71228; op2val:0x3f0177d2; op3val:0x7e69b89c; valaddr_reg:x16; val_offset:1644; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1644, x17, x15, 1096, x18)

inst_138:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2e9fe8 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x4b6f55 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x0ac4bf and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7cae9fe8; op2val:0x414b6f55; op3val:0x7e8ac4bf; valaddr_reg:x16; val_offset:1656; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1656, x17, x15, 1104, x18)

inst_139:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1aa82d and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1b2701 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3b76c8 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f1aa82d; op2val:0x3f9b2701; op3val:0x7f3b76c8; valaddr_reg:x16; val_offset:1668; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1668, x17, x15, 1112, x18)

inst_140:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7783fc and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0a9790 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x05ffb0 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ef783fc; op2val:0x3f8a9790; op3val:0x7f05ffb0; valaddr_reg:x16; val_offset:1680; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1680, x17, x15, 1120, x18)

inst_141:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ea04a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x10dbda and fs3 == 0 and fe3 == 0xfd and fm3 == 0x45a044 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f2ea04a; op2val:0x3f10dbda; op3val:0x7ec5a044; valaddr_reg:x16; val_offset:1692; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1692, x17, x15, 1128, x18)

inst_142:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a62c0 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x25a532 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3315e5 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e8a62c0; op2val:0x4025a532; op3val:0x7f3315e5; valaddr_reg:x16; val_offset:1704; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1704, x17, x15, 1136, x18)

inst_143:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a457f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x50d100 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7bacd4 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e1a457f; op2val:0x4050d100; op3val:0x7efbacd4; valaddr_reg:x16; val_offset:1716; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1716, x17, x15, 1144, x18)

inst_144:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36a9e2 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1e600b and fs3 == 0 and fe3 == 0xfd and fm3 == 0x6202c3 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f36a9e2; op2val:0x3f1e600b; op3val:0x7ee202c3; valaddr_reg:x16; val_offset:1728; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1728, x17, x15, 1152, x18)

inst_145:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x73cf0f and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6acfa3 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x5fa103 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ef3cf0f; op2val:0x3eeacfa3; op3val:0x7e5fa103; valaddr_reg:x16; val_offset:1740; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1740, x17, x15, 1160, x18)

inst_146:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x100bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x068d67 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x176ba2 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d900bf1; op2val:0x40068d67; op3val:0x7e176ba2; valaddr_reg:x16; val_offset:1752; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1752, x17, x15, 1168, x18)

inst_147:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a849e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0d9f1b and fs3 == 0 and fe3 == 0xfd and fm3 == 0x2af628 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f1a849e; op2val:0x3f0d9f1b; op3val:0x7eaaf628; valaddr_reg:x16; val_offset:1764; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1764, x17, x15, 1176, x18)

inst_148:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0f0e02 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x097bec and fs3 == 0 and fe3 == 0xfe and fm3 == 0x19a77e and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d8f0e02; op2val:0x41097bec; op3val:0x7f19a77e; valaddr_reg:x16; val_offset:1776; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1776, x17, x15, 1184, x18)

inst_149:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x221a29 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x4b81fb and fs3 == 0 and fe3 == 0xfd and fm3 == 0x00dd0d and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f221a29; op2val:0x3ecb81fb; op3val:0x7e80dd0d; valaddr_reg:x16; val_offset:1788; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1788, x17, x15, 1192, x18)

inst_150:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a3f02 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5a8069 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x03a707 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f1a3f02; op2val:0x3f5a8069; op3val:0x7f03a707; valaddr_reg:x16; val_offset:1800; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1800, x17, x15, 1200, x18)

inst_151:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a9574 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x28da1a and fs3 == 0 and fe3 == 0xfc and fm3 == 0x4beb8f and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f1a9574; op2val:0x3ea8da1a; op3val:0x7e4beb8f; valaddr_reg:x16; val_offset:1812; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1812, x17, x15, 1208, x18)

inst_152:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x14365e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3798bb and fs3 == 0 and fe3 == 0xfd and fm3 == 0x549695 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e14365e; op2val:0x403798bb; op3val:0x7ed49695; valaddr_reg:x16; val_offset:1824; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1824, x17, x15, 1216, x18)

inst_153:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eb58d and fs2 == 0 and fe2 == 0x7f and fm2 == 0x222e36 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x02f434 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eceb58d; op2val:0x3fa22e36; op3val:0x7f02f434; valaddr_reg:x16; val_offset:1836; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1836, x17, x15, 1224, x18)

inst_154:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c2059 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x11387d and fs3 == 0 and fe3 == 0xfd and fm3 == 0x1efa7c and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f0c2059; op2val:0x3f11387d; op3val:0x7e9efa7c; valaddr_reg:x16; val_offset:1848; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1848, x17, x15, 1232, x18)

inst_155:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x516e9f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3c33f6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x19f7bf and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e516e9f; op2val:0x403c33f6; op3val:0x7f19f7bf; valaddr_reg:x16; val_offset:1860; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1860, x17, x15, 1240, x18)

inst_156:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f4b27 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0415cd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x13dde9 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e8f4b27; op2val:0x400415cd; op3val:0x7f13dde9; valaddr_reg:x16; val_offset:1872; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1872, x17, x15, 1248, x18)

inst_157:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3493df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4ecb22 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x11de47 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eb493df; op2val:0x3fcecb22; op3val:0x7f11de47; valaddr_reg:x16; val_offset:1884; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1884, x17, x15, 1256, x18)

inst_158:
// fs1 == 0 and fe1 == 0xf3 and fm1 == 0x319f1b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x376ad3 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7e85b6 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x79b19f1b; op2val:0x44b76ad3; op3val:0x7efe85b6; valaddr_reg:x16; val_offset:1896; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1896, x17, x15, 1264, x18)

inst_159:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a40d7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0a1548 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x48ecdf and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eba40d7; op2val:0x3f0a1548; op3val:0x7e48ecdf; valaddr_reg:x16; val_offset:1908; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1908, x17, x15, 1272, x18)

inst_160:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x387cb7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0ff35d and fs3 == 0 and fe3 == 0xfc and fm3 == 0x4f7a18 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eb87cb7; op2val:0x3f0ff35d; op3val:0x7e4f7a18; valaddr_reg:x16; val_offset:1920; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1920, x17, x15, 1280, x18)

inst_161:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x136b51 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x45fd37 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x6406cc and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e936b51; op2val:0x3fc5fd37; op3val:0x7ee406cc; valaddr_reg:x16; val_offset:1932; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1932, x17, x15, 1288, x18)

inst_162:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0ba7c1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2bf5fd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3b9e80 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e0ba7c1; op2val:0x40abf5fd; op3val:0x7f3b9e80; valaddr_reg:x16; val_offset:1944; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1944, x17, x15, 1296, x18)

inst_163:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4b55e5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x4aac55 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x20faa9 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7dcb55e5; op2val:0x404aac55; op3val:0x7ea0faa9; valaddr_reg:x16; val_offset:1956; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1956, x17, x15, 1304, x18)

inst_164:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62d797 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6ccffe and fs3 == 0 and fe3 == 0xfc and fm3 == 0x51d70d and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ee2d797; op2val:0x3eeccffe; op3val:0x7e51d70d; valaddr_reg:x16; val_offset:1968; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1968, x17, x15, 1312, x18)

inst_165:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f0a23 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x586415 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x066eba and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f1f0a23; op2val:0x3dd86415; op3val:0x7d866eba; valaddr_reg:x16; val_offset:1980; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1980, x17, x15, 1320, x18)

inst_166:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x512a61 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x1b3a11 and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x7da835 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d512a61; op2val:0x3d1b3a11; op3val:0x7afda835; valaddr_reg:x16; val_offset:1992; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1992, x17, x15, 1328, x18)

inst_167:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x561e0c and fs2 == 0 and fe2 == 0x7b and fm2 == 0x106484 and fs3 == 0 and fe3 == 0xf7 and fm3 == 0x7189f3 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7dd61e0c; op2val:0x3d906484; op3val:0x7bf189f3; valaddr_reg:x16; val_offset:2004; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 2004, x17, x15, 1336, x18)

inst_168:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fd54d and fs2 == 0 and fe2 == 0x7a and fm2 == 0x7ea0e8 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x1efa19 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f1fd54d; op2val:0x3d7ea0e8; op3val:0x7d1efa19; valaddr_reg:x16; val_offset:2016; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 2016, x17, x15, 1344, x18)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
test_fp:
.word 0x7f185240
.word 0x3f849ddd
.word 0x7f1dd0ae
.word 0x7dd21565
.word 0x40cfc576
.word 0x7f2a8159
.word 0x7eb87cb7
.word 0x7eb87cb7
.word 0x7e4f7a18
.word 0x7ed8669e
.word 0x3f8e6227
.word 0x7ef0b7c8
.word 0x7e936b51
.word 0x3fc5fd37
.word 0x3fc5fd37
.word 0x7e0ba7c1
.word 0x7e0ba7c1
.word 0x7e0ba7c1
.word 0x7dcb55e5
.word 0x7dcb55e5
.word 0x7dcb55e5
.word 0x7ee2d797
.word 0x3eeccffe
.word 0x7ee2d797
.word 0x7f1f0a23
.word 0x3dd86415
.word 0x3dd86415
.word 0x7d512a61
.word 0x3d1b3a11
.word 0x7afda835
.word 0x7dd61e0c
.word 0x7dd61e0c
.word 0x7bf189f3
.word 0x7f1fd54d
.word 0x3d7ea0e8
.word 0x7f1fd54d
.word 0x7f35fe5b
.word 0x3eeb4e05
.word 0x7ea747f5
.word 0x7cac1d45
.word 0x42038dbf
.word 0x7f30e48e
.word 0x7db3e534
.word 0x410192c8
.word 0x7f361b4b
.word 0x7cc9296d
.word 0x41336a25
.word 0x7e8cfb60
.word 0x7d8fe409
.word 0x40cb5f3b
.word 0x7ee49eb5
.word 0x7f034e7c
.word 0x3f916e22
.word 0x7f152fe4
.word 0x7f3f0fcc
.word 0x3f363027
.word 0x7f07f92b
.word 0x7f17c861
.word 0x3f712e6f
.word 0x7f0eff2c
.word 0x7ee368b9
.word 0x3edc69af
.word 0x7e43cbe1
.word 0x7f173551
.word 0x3e8b1967
.word 0x7e2451e9
.word 0x7f24fad5
.word 0x3f680772
.word 0x7f15881d
.word 0x7eaa4148
.word 0x3ee96e25
.word 0x7e1b3eab
.word 0x7ef9f86d
.word 0x3ee1c0e4
.word 0x7e5c6fb2
.word 0x7f01c7a5
.word 0x3f8a21b9
.word 0x7f0c0d70
.word 0x7f309a0c
.word 0x3f50c5b9
.word 0x7f100590
.word 0x7f3cc8a3
.word 0x3d5057a9
.word 0x7d19a3aa
.word 0x7db868e1
.word 0x3f6f4b41
.word 0x7dac6020
.word 0x7e017e79
.word 0x407b0813
.word 0x7efdf62e
.word 0x7f0b0956
.word 0x3f98c26e
.word 0x7f25ee48
.word 0x7e616815
.word 0x3fcd6ee4
.word 0x7eb4e1fc
.word 0x7ed913e5
.word 0x3fd0d3e6
.word 0x7f3113d9
.word 0x7f16fd83
.word 0x3e92dd89
.word 0x7e2d3e7e
.word 0x7cc5b82c
.word 0x4186ed1d
.word 0x7ed06b12
.word 0x7d99d31d
.word 0x406aee21
.word 0x7e8d2a0f
.word 0x7db00384
.word 0x40c68f57
.word 0x7f088546
.word 0x7cf4f85a
.word 0x41984854
.word 0x7f11b8ad
.word 0x7e93b96c
.word 0x3e228cd8
.word 0x7d3b993a
.word 0x7dfc19fa
.word 0x4073e479
.word 0x7ef02da8
.word 0x7efff572
.word 0x3fbac415
.word 0x7f3abc62
.word 0x7f1a9c08
.word 0x3eecaafe
.word 0x7e8eef1c
.word 0x7f098b22
.word 0x3f668bbe
.word 0x7ef7bc2c
.word 0x7ed39b49
.word 0x3f99c970
.word 0x7efe3ca1
.word 0x7e98a4f0
.word 0x40209a40
.word 0x7f3f8620
.word 0x7e9255c9
.word 0x3f941b63
.word 0x7ea95281
.word 0x7e107f0d
.word 0x3fdd489c
.word 0x7e79cd55
.word 0x7f16fe06
.word 0x3f393272
.word 0x7eda76a7
.word 0x7e389380
.word 0x40186b19
.word 0x7edbc998
.word 0x7dfaa684
.word 0x3ff84242
.word 0x7e731230
.word 0x7f2ed4d8
.word 0x3eebab23
.word 0x7ea0f242
.word 0x7e2a2f80
.word 0x4022e85e
.word 0x7ed89913
.word 0x7e951c59
.word 0x3f131231
.word 0x7e2b53c0
.word 0x7de7f048
.word 0x4070ec94
.word 0x7eda479c
.word 0x7de6dc85
.word 0x3fefe8a0
.word 0x7e5859a9
.word 0x7cbb3e27
.word 0x4189ecfa
.word 0x7ec9c32f
.word 0x7d633d35
.word 0x40e11178
.word 0x7ec7c84e
.word 0x7ebde659
.word 0x3e1bacb3
.word 0x7d66f527
.word 0x7ed218a0
.word 0x3f592123
.word 0x7eb23212
.word 0x7f0c73a9
.word 0x3e1fa10c
.word 0x7daf2863
.word 0x7e83e545
.word 0x3e6754b2
.word 0x7d6e5f0a
.word 0x7f365c6a
.word 0x3f3cdb59
.word 0x7f06881f
.word 0x7f3ea9e8
.word 0x3f454378
.word 0x7f12eaff
.word 0x7e8e4484
.word 0x3e0fe7df
.word 0x7d1ff244
.word 0x7cc8fcb3
.word 0x40a98476
.word 0x7e0516d1
.word 0x7ef5363e
.word 0x3f56ade2
.word 0x7ecda1e6
.word 0x7d838c5d
.word 0x411883f4
.word 0x7f1cbe4b
.word 0x7f310e27
.word 0x3d0dbfdf
.word 0x7cc412ff
.word 0x7f3983ab
.word 0x3ee439df
.word 0x7ea56335
.word 0x7f24c049
.word 0x3ea6f4cf
.word 0x7e56e479
.word 0x7f346ab9
.word 0x3db66217
.word 0x7d808901
.word 0x7f3bca6f
.word 0x3e95c04d
.word 0x7e5bb3c7
.word 0x7d43983d
.word 0x41491608
.word 0x7f19a35e
.word 0x7e5447d6
.word 0x4024f81b
.word 0x7f08cbc1
.word 0x7f1578bb
.word 0x3f130440
.word 0x7eabad9e
.word 0x7f2e7c12
.word 0x3ef864d3
.word 0x7ea94ceb
.word 0x7dd28ae7
.word 0x40dc3da9
.word 0x7f352215
.word 0x7f0535ac
.word 0x3f91fe69
.word 0x7f17ef92
.word 0x7f2b8337
.word 0x3f018782
.word 0x7ead8fd1
.word 0x7f2efd0c
.word 0x3f7ef82d
.word 0x7f2e48b6
.word 0x7d8052ab
.word 0x40ecc2eb
.word 0x7eed5bd5
.word 0x7dc31508
.word 0x40d1cb43
.word 0x7f1fdf11
.word 0x7ef19c9d
.word 0x3f8eaeb4
.word 0x7f06a9c2
.word 0x7eb1ae90
.word 0x3ff8da00
.word 0x7f2cb86b
.word 0x7da1f156
.word 0x40c3f0a5
.word 0x7ef7e620
.word 0x7ef127a3
.word 0x3e1eb06b
.word 0x7d957ca7
.word 0x7ee8ed41
.word 0x3e738f77
.word 0x7ddd9bbd
.word 0x7ddea80c
.word 0x408a19f7
.word 0x7ef03a58
.word 0x7d99d68e
.word 0x40674db3
.word 0x7e8aff4b
.word 0x7ebccf7c
.word 0x3f7421c1
.word 0x7eb40ea8
.word 0x7f16332e
.word 0x3f851bd2
.word 0x7f1c31d4
.word 0x7eeb8edc
.word 0x3f302841
.word 0x7ea21741
.word 0x7e13f0eb
.word 0x409d617d
.word 0x7f35e62e
.word 0x7f23ded1
.word 0x3d956e92
.word 0x7d3f4eee
.word 0x7e8b0329
.word 0x4025e82c
.word 0x7f342e39
.word 0x7dac3fe4
.word 0x40cd0748
.word 0x7f09f410
.word 0x7cb9031d
.word 0x41cd83ab
.word 0x7f1486a7
.word 0x7eac8d9d
.word 0x3e0221ad
.word 0x7d2f6d3b
.word 0x7e5f5397
.word 0x3cae726c
.word 0x7b982ea3
.word 0x7f18571c
.word 0x3f9718df
.word 0x7f33d45e
.word 0x7e98f0ab
.word 0x3f9cd557
.word 0x7ebb643a
.word 0x7ee79066
.word 0x3f07e51c
.word 0x7e75d8c6
.word 0x7f313b25
.word 0x3ed093fc
.word 0x7e906682
.word 0x7efd263c
.word 0x3fbc7c65
.word 0x7f3a6317
.word 0x7f1a82a0
.word 0x3ecdc01c
.word 0x7e785d1b
.word 0x7e90f39b
.word 0x3f4f4d9f
.word 0x7e6ac1db
.word 0x7eb7c24b
.word 0x3e982086
.word 0x7dda656b
.word 0x7e4dc6a7
.word 0x3fe2c78f
.word 0x7eb649c8
.word 0x7f28d30c
.word 0x3f323b1d
.word 0x7eeb1376
.word 0x7e43a885
.word 0x3fce4840
.word 0x7e9da8d4
.word 0x7ead6385
.word 0x40037a19
.word 0x7f321940
.word 0x7e8aa492
.word 0x3f35bca1
.word 0x7e44d907
.word 0x7dbdb054
.word 0x4098ba96
.word 0x7ee255e7
.word 0x7e0431c2
.word 0x3e022039
.word 0x7c8663d1
.word 0x7ebb4351
.word 0x3fcdc9e9
.word 0x7f16889a
.word 0x7f0f54bf
.word 0x3eb6502d
.word 0x7e4c2647
.word 0x7e9d149a
.word 0x3e571bda
.word 0x7d83fd65
.word 0x7eb4d648
.word 0x3fbfcdc7
.word 0x7f077d3c
.word 0x7f18d9d9
.word 0x3f262663
.word 0x7ec6685d
.word 0x7eabb8f9
.word 0x3fedee41
.word 0x7f1f9a10
.word 0x7f00ae82
.word 0x3fa9e1b5
.word 0x7f2ac951
.word 0x7f3c0464
.word 0x3f6941a6
.word 0x7f2b5036
.word 0x7f3c58cf
.word 0x3e80090a
.word 0x7e3c661c
.word 0x7f0f4ac6
.word 0x3f0870e2
.word 0x7e98bdd1
.word 0x7d255773
.word 0x40fb6dc7
.word 0x7ea263a5
.word 0x7dc2d171
.word 0x40fc4426
.word 0x7f3ffa07
.word 0x7e90ec66
.word 0x3f83fd1f
.word 0x7e957088
.word 0x7eee2e8d
.word 0x3efcb106
.word 0x7e6b1a87
.word 0x7e7fad2c
.word 0x402ddf2e
.word 0x7f2da6ed
.word 0x7f156314
.word 0x3cb39b9f
.word 0x7c519e2f
.word 0x7f060f17
.word 0x3c92ec96
.word 0x7c19e100
.word 0x7e21311f
.word 0x4083f6ba
.word 0x7f262efb
.word 0x7eb9c1fe
.word 0x3e922c1f
.word 0x7dd4214e
.word 0x7e6fd4df
.word 0x3f20dc16
.word 0x7e16b33b
.word 0x7db37137
.word 0x40b588f6
.word 0x7efe7e1b
.word 0x7f28f9a2
.word 0x3f18ca47
.word 0x7ec9b378
.word 0x7ee23c76
.word 0x3e1be23d
.word 0x7d89c28b
.word 0x7ee71228
.word 0x3f0177d2
.word 0x7e69b89c
.word 0x7cae9fe8
.word 0x414b6f55
.word 0x7e8ac4bf
.word 0x7f1aa82d
.word 0x3f9b2701
.word 0x7f3b76c8
.word 0x7ef783fc
.word 0x3f8a9790
.word 0x7f05ffb0
.word 0x7f2ea04a
.word 0x3f10dbda
.word 0x7ec5a044
.word 0x7e8a62c0
.word 0x4025a532
.word 0x7f3315e5
.word 0x7e1a457f
.word 0x4050d100
.word 0x7efbacd4
.word 0x7f36a9e2
.word 0x3f1e600b
.word 0x7ee202c3
.word 0x7ef3cf0f
.word 0x3eeacfa3
.word 0x7e5fa103
.word 0x7d900bf1
.word 0x40068d67
.word 0x7e176ba2
.word 0x7f1a849e
.word 0x3f0d9f1b
.word 0x7eaaf628
.word 0x7d8f0e02
.word 0x41097bec
.word 0x7f19a77e
.word 0x7f221a29
.word 0x3ecb81fb
.word 0x7e80dd0d
.word 0x7f1a3f02
.word 0x3f5a8069
.word 0x7f03a707
.word 0x7f1a9574
.word 0x3ea8da1a
.word 0x7e4beb8f
.word 0x7e14365e
.word 0x403798bb
.word 0x7ed49695
.word 0x7eceb58d
.word 0x3fa22e36
.word 0x7f02f434
.word 0x7f0c2059
.word 0x3f11387d
.word 0x7e9efa7c
.word 0x7e516e9f
.word 0x403c33f6
.word 0x7f19f7bf
.word 0x7e8f4b27
.word 0x400415cd
.word 0x7f13dde9
.word 0x7eb493df
.word 0x3fcecb22
.word 0x7f11de47
.word 0x79b19f1b
.word 0x44b76ad3
.word 0x7efe85b6
.word 0x7eba40d7
.word 0x3f0a1548
.word 0x7e48ecdf
.word 0x7eb87cb7
.word 0x3f0ff35d
.word 0x7e4f7a18
.word 0x7e936b51
.word 0x3fc5fd37
.word 0x7ee406cc
.word 0x7e0ba7c1
.word 0x40abf5fd
.word 0x7f3b9e80
.word 0x7dcb55e5
.word 0x404aac55
.word 0x7ea0faa9
.word 0x7ee2d797
.word 0x3eeccffe
.word 0x7e51d70d
.word 0x7f1f0a23
.word 0x3dd86415
.word 0x7d866eba
.word 0x7d512a61
.word 0x3d1b3a11
.word 0x7afda835
.word 0x7dd61e0c
.word 0x3d906484
.word 0x7bf189f3
.word 0x7f1fd54d
.word 0x3d7ea0e8
.word 0x7d1efa19
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 338*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
