
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.5.2
// timestamp : Tue Sep  7 16:08:09 2021 GMT
// usage     : riscv_ctg \
//                  -- cgf $cgf \
//                  -- xlen $xlen \
// -----------
//
// -----------
// Copyright (c) 2021. IIT Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V F extension for the fmsub_b7 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmsub_b7)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs1 == rs2 == rs3 != rd, rs1==f3, rs2==f3, rs3==f3, rd==f25, fs1 == 0 and fe1 == 0xfc and fm1 == 0x78b41c and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6e8086 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x67b44e and rm_val == 3  
// opcode: fmsub.s ; op1:f3; op2:f3; op3:f3; dest:f25; op1val:0x7e78b41c; op2val:0x7e78b41c; op3val:0x7e78b41c; valaddr_reg:x16; val_offset:0; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f25, f3, f3, f3, 0x3, 0, x16, 0, x17, x15, 0, x18)

inst_1:
// rs1 == rd == rs3 != rs2, rs1==f14, rs2==f23, rs3==f14, rd==f14, fs1 == 0 and fe1 == 0xfe and fm1 == 0x0aa728 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x5d031f and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x6f67fd and rm_val == 3  
// opcode: fmsub.s ; op1:f14; op2:f23; op3:f14; dest:f14; op1val:0x7f0aa728; op2val:0x3cdd031f; op3val:0x7f0aa728; valaddr_reg:x16; val_offset:12; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f14, f14, f23, f14, 0x3, 0, x16, 12, x17, x15, 8, x18)

inst_2:
// rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2, rs1==f5, rs2==f15, rs3==f5, rd==f19, fs1 == 0 and fe1 == 0xfc and fm1 == 0x1654f7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5049bc and fs3 == 0 and fe3 == 0xfc and fm3 == 0x74a0ac and rm_val == 3  
// opcode: fmsub.s ; op1:f5; op2:f15; op3:f5; dest:f19; op1val:0x7e1654f7; op2val:0x3fd049bc; op3val:0x7e1654f7; valaddr_reg:x16; val_offset:24; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f19, f5, f15, f5, 0x3, 0, x16, 24, x17, x15, 16, x18)

inst_3:
// rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1, rs1==f1, rs2==f29, rs3==f24, rd==f29, fs1 == 0 and fe1 == 0xfd and fm1 == 0x45fe09 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x285f5e and fs3 == 0 and fe3 == 0xfd and fm3 == 0x023878 and rm_val == 3  
// opcode: fmsub.s ; op1:f1; op2:f29; op3:f24; dest:f29; op1val:0x7ec5fe09; op2val:0x3f285f5e; op3val:0x7e823878; valaddr_reg:x16; val_offset:36; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f29, f1, f29, f24, 0x3, 0, x16, 36, x17, x15, 24, x18)

inst_4:
// rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1, rs1==f26, rs2==f12, rs3==f12, rd==f17, fs1 == 0 and fe1 == 0xfb and fm1 == 0x780309 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b0a9f and fs3 == 0 and fe3 == 0xfd and fm3 == 0x25b451 and rm_val == 3  
// opcode: fmsub.s ; op1:f26; op2:f12; op3:f12; dest:f17; op1val:0x7df80309; op2val:0x402b0a9f; op3val:0x402b0a9f; valaddr_reg:x16; val_offset:48; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f17, f26, f12, f12, 0x3, 0, x16, 48, x17, x15, 32, x18)

inst_5:
// rd == rs2 == rs3 != rs1, rs1==f30, rs2==f11, rs3==f11, rd==f11, fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e0e28 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x57494f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1fd451 and rm_val == 3  
// opcode: fmsub.s ; op1:f30; op2:f11; op3:f11; dest:f11; op1val:0x7f3e0e28; op2val:0x3f57494f; op3val:0x3f57494f; valaddr_reg:x16; val_offset:60; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f11, f30, f11, f11, 0x3, 0, x16, 60, x17, x15, 40, x18)

inst_6:
// rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3, rs1==f17, rs2==f17, rs3==f0, rd==f27, fs1 == 0 and fe1 == 0xfd and fm1 == 0x18ee3e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1c9b1c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x3b1bae and rm_val == 3  
// opcode: fmsub.s ; op1:f17; op2:f17; op3:f0; dest:f27; op1val:0x7e98ee3e; op2val:0x7e98ee3e; op3val:0x7ebb1bae; valaddr_reg:x16; val_offset:72; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f27, f17, f17, f0, 0x3, 0, x16, 72, x17, x15, 48, x18)

inst_7:
// rs1 == rs2 == rd != rs3, rs1==f10, rs2==f10, rs3==f25, rd==f10, fs1 == 0 and fe1 == 0xfc and fm1 == 0x28a4b8 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0ace5d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36e17b and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f10; op3:f25; dest:f10; op1val:0x7e28a4b8; op2val:0x7e28a4b8; op3val:0x7f36e17b; valaddr_reg:x16; val_offset:84; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f10, f10, f10, f25, 0x3, 0, x16, 84, x17, x15, 56, x18)

inst_8:
// rs1 == rs2 == rs3 == rd, rs1==f22, rs2==f22, rs3==f22, rd==f22, fs1 == 0 and fe1 == 0xfe and fm1 == 0x2980ff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0c483e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x39c4c2 and rm_val == 3  
// opcode: fmsub.s ; op1:f22; op2:f22; op3:f22; dest:f22; op1val:0x7f2980ff; op2val:0x7f2980ff; op3val:0x7f2980ff; valaddr_reg:x16; val_offset:96; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f22, f22, f22, f22, 0x3, 0, x16, 96, x17, x15, 64, x18)

inst_9:
// rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1, rs1==f24, rs2==f14, rs3==f23, rd==f23, fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d89da and fs2 == 0 and fe2 == 0x7c and fm2 == 0x5dbf76 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x5b9da0 and rm_val == 3  
// opcode: fmsub.s ; op1:f24; op2:f14; op3:f23; dest:f23; op1val:0x7efd89da; op2val:0x3e5dbf76; op3val:0x7ddb9da0; valaddr_reg:x16; val_offset:108; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f23, f24, f14, f23, 0x3, 0, x16, 108, x17, x15, 72, x18)

inst_10:
// rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd, rs1==f4, rs2==f18, rs3==f29, rd==f6, fs1 == 0 and fe1 == 0xfb and fm1 == 0x6d3ae1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x145fb2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x097eb9 and rm_val == 3  
// opcode: fmsub.s ; op1:f4; op2:f18; op3:f29; dest:f6; op1val:0x7ded3ae1; op2val:0x40945fb2; op3val:0x7f097eb9; valaddr_reg:x16; val_offset:120; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f6, f4, f18, f29, 0x3, 0, x16, 120, x17, x15, 80, x18)

inst_11:
// rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2, rs1==f31, rs2==f16, rs3==f21, rd==f31, fs1 == 0 and fe1 == 0xfe and fm1 == 0x168405 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x12771a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2c3aa4 and rm_val == 3  
// opcode: fmsub.s ; op1:f31; op2:f16; op3:f21; dest:f31; op1val:0x7f168405; op2val:0x3f92771a; op3val:0x7f2c3aa4; valaddr_reg:x16; val_offset:132; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f31, f31, f16, f21, 0x3, 0, x16, 132, x17, x15, 88, x18)

inst_12:
// rs1==f19, rs2==f25, rs3==f15, rd==f26, fs1 == 0 and fe1 == 0xfa and fm1 == 0x60a082 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x127dc4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0089e4 and rm_val == 3  
// opcode: fmsub.s ; op1:f19; op2:f25; op3:f15; dest:f26; op1val:0x7d60a082; op2val:0x41127dc4; op3val:0x7f0089e4; valaddr_reg:x16; val_offset:144; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f26, f19, f25, f15, 0x3, 0, x16, 144, x17, x15, 96, x18)

inst_13:
// rs1==f13, rs2==f2, rs3==f7, rd==f0, fs1 == 0 and fe1 == 0xfa and fm1 == 0x5edc92 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x544a7b and fs3 == 0 and fe3 == 0xfc and fm3 == 0x38cf80 and rm_val == 3  
// opcode: fmsub.s ; op1:f13; op2:f2; op3:f7; dest:f0; op1val:0x7d5edc92; op2val:0x40544a7b; op3val:0x7e38cf80; valaddr_reg:x16; val_offset:156; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f0, f13, f2, f7, 0x3, 0, x16, 156, x17, x15, 104, x18)

inst_14:
// rs1==f18, rs2==f19, rs3==f10, rd==f28, fs1 == 0 and fe1 == 0xfb and fm1 == 0x3acfb2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x68a6d7 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x29c5f9 and rm_val == 3  
// opcode: fmsub.s ; op1:f18; op2:f19; op3:f10; dest:f28; op1val:0x7dbacfb2; op2val:0x4068a6d7; op3val:0x7ea9c5f9; valaddr_reg:x16; val_offset:168; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f28, f18, f19, f10, 0x3, 0, x16, 168, x17, x15, 112, x18)

inst_15:
// rs1==f6, rs2==f8, rs3==f31, rd==f2, fs1 == 0 and fe1 == 0xfe and fm1 == 0x2147aa and fs2 == 0 and fe2 == 0x7c and fm2 == 0x272c67 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x52a373 and rm_val == 3  
// opcode: fmsub.s ; op1:f6; op2:f8; op3:f31; dest:f2; op1val:0x7f2147aa; op2val:0x3e272c67; op3val:0x7dd2a373; valaddr_reg:x16; val_offset:180; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f2, f6, f8, f31, 0x3, 0, x16, 180, x17, x15, 120, x18)

inst_16:
// rs1==f21, rs2==f26, rs3==f19, rd==f24, fs1 == 0 and fe1 == 0xfd and fm1 == 0x56da71 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x57ca8e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x351b75 and rm_val == 3  
// opcode: fmsub.s ; op1:f21; op2:f26; op3:f19; dest:f24; op1val:0x7ed6da71; op2val:0x3fd7ca8e; op3val:0x7f351b75; valaddr_reg:x16; val_offset:192; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f24, f21, f26, f19, 0x3, 0, x16, 192, x17, x15, 128, x18)

inst_17:
// rs1==f28, rs2==f21, rs3==f27, rd==f18, fs1 == 0 and fe1 == 0xfe and fm1 == 0x34e60e and fs2 == 0 and fe2 == 0x7d and fm2 == 0x0d1155 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x475deb and rm_val == 3  
// opcode: fmsub.s ; op1:f28; op2:f21; op3:f27; dest:f18; op1val:0x7f34e60e; op2val:0x3e8d1155; op3val:0x7e475deb; valaddr_reg:x16; val_offset:204; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f18, f28, f21, f27, 0x3, 0, x16, 204, x17, x15, 136, x18)

inst_18:
// rs1==f0, rs2==f4, rs3==f9, rd==f15, fs1 == 0 and fe1 == 0xfe and fm1 == 0x063ff4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2075c6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x284b78 and rm_val == 3  
// opcode: fmsub.s ; op1:f0; op2:f4; op3:f9; dest:f15; op1val:0x7f063ff4; op2val:0x3fa075c6; op3val:0x7f284b78; valaddr_reg:x16; val_offset:216; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f15, f0, f4, f9, 0x3, 0, x16, 216, x17, x15, 144, x18)

inst_19:
// rs1==f23, rs2==f20, rs3==f16, rd==f5, fs1 == 0 and fe1 == 0xfd and fm1 == 0x3790e1 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7c192a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x34c4a9 and rm_val == 3  
// opcode: fmsub.s ; op1:f23; op2:f20; op3:f16; dest:f5; op1val:0x7eb790e1; op2val:0x3ffc192a; op3val:0x7f34c4a9; valaddr_reg:x16; val_offset:228; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f5, f23, f20, f16, 0x3, 0, x16, 228, x17, x15, 152, x18)

inst_20:
// rs1==f25, rs2==f30, rs3==f8, rd==f1, fs1 == 0 and fe1 == 0xfd and fm1 == 0x2db366 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x16e747 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x4cc816 and rm_val == 3  
// opcode: fmsub.s ; op1:f25; op2:f30; op3:f8; dest:f1; op1val:0x7eadb366; op2val:0x3f96e747; op3val:0x7eccc816; valaddr_reg:x16; val_offset:240; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f1, f25, f30, f8, 0x3, 0, x16, 240, x17, x15, 160, x18)

inst_21:
// rs1==f11, rs2==f28, rs3==f13, rd==f21, fs1 == 0 and fe1 == 0xfd and fm1 == 0x44ab84 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2d20ce and fs3 == 0 and fe3 == 0xfe and fm3 == 0x05011c and rm_val == 3  
// opcode: fmsub.s ; op1:f11; op2:f28; op3:f13; dest:f21; op1val:0x7ec4ab84; op2val:0x3fad20ce; op3val:0x7f05011c; valaddr_reg:x16; val_offset:252; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f21, f11, f28, f13, 0x3, 0, x16, 252, x17, x15, 168, x18)

inst_22:
// rs1==f29, rs2==f27, rs3==f6, rd==f3, fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b35f0 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x534a7c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x4221e4 and rm_val == 3  
// opcode: fmsub.s ; op1:f29; op2:f27; op3:f6; dest:f3; op1val:0x7eeb35f0; op2val:0x3f534a7c; op3val:0x7ec221e4; valaddr_reg:x16; val_offset:264; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f3, f29, f27, f6, 0x3, 0, x16, 264, x17, x15, 176, x18)

inst_23:
// rs1==f12, rs2==f24, rs3==f18, rd==f20, fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f329c and fs2 == 0 and fe2 == 0x7d and fm2 == 0x78b546 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x2a3516 and rm_val == 3  
// opcode: fmsub.s ; op1:f12; op2:f24; op3:f18; dest:f20; op1val:0x7f2f329c; op2val:0x3ef8b546; op3val:0x7eaa3516; valaddr_reg:x16; val_offset:276; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f20, f12, f24, f18, 0x3, 0, x16, 276, x17, x15, 184, x18)

inst_24:
// rs1==f15, rs2==f1, rs3==f26, rd==f30, fs1 == 0 and fe1 == 0xfd and fm1 == 0x57b43e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2d2d8b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x11eb2e and rm_val == 3  
// opcode: fmsub.s ; op1:f15; op2:f1; op3:f26; dest:f30; op1val:0x7ed7b43e; op2val:0x3fad2d8b; op3val:0x7f11eb2e; valaddr_reg:x16; val_offset:288; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f30, f15, f1, f26, 0x3, 0, x16, 288, x17, x15, 192, x18)

inst_25:
// rs1==f7, rs2==f5, rs3==f20, rd==f16, fs1 == 0 and fe1 == 0xfe and fm1 == 0x14462d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x284ddf and fs3 == 0 and fe3 == 0xfd and fm3 == 0x42f650 and rm_val == 3  
// opcode: fmsub.s ; op1:f7; op2:f5; op3:f20; dest:f16; op1val:0x7f14462d; op2val:0x3f284ddf; op3val:0x7ec2f650; valaddr_reg:x16; val_offset:300; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f16, f7, f5, f20, 0x3, 0, x16, 300, x17, x15, 200, x18)

inst_26:
// rs1==f8, rs2==f31, rs3==f28, rd==f13, fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ed7f8 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0ea3ff and fs3 == 0 and fe3 == 0xfc and fm3 == 0x54ac1b and rm_val == 3  
// opcode: fmsub.s ; op1:f8; op2:f31; op3:f28; dest:f13; op1val:0x7e3ed7f8; op2val:0x3f8ea3ff; op3val:0x7e54ac1b; valaddr_reg:x16; val_offset:312; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f8, f31, f28, 0x3, 0, x16, 312, x17, x15, 208, x18)

inst_27:
// rs1==f9, rs2==f0, rs3==f17, rd==f12, fs1 == 0 and fe1 == 0xfb and fm1 == 0x22fbeb and fs2 == 0 and fe2 == 0x81 and fm2 == 0x28f8b9 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x572759 and rm_val == 3  
// opcode: fmsub.s ; op1:f9; op2:f0; op3:f17; dest:f12; op1val:0x7da2fbeb; op2val:0x40a8f8b9; op3val:0x7ed72759; valaddr_reg:x16; val_offset:324; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f12, f9, f0, f17, 0x3, 0, x16, 324, x17, x15, 216, x18)

inst_28:
// rs1==f16, rs2==f6, rs3==f2, rd==f7, fs1 == 0 and fe1 == 0xfd and fm1 == 0x554a27 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x34bbbd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x16948f and rm_val == 3  
// opcode: fmsub.s ; op1:f16; op2:f6; op3:f2; dest:f7; op1val:0x7ed54a27; op2val:0x3fb4bbbd; op3val:0x7f16948f; valaddr_reg:x16; val_offset:336; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f7, f16, f6, f2, 0x3, 0, x16, 336, x17, x15, 224, x18)

inst_29:
// rs1==f27, rs2==f13, rs3==f30, rd==f9, fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a5ab2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4b88d9 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x470bbf and rm_val == 3  
// opcode: fmsub.s ; op1:f27; op2:f13; op3:f30; dest:f9; op1val:0x7e7a5ab2; op2val:0x3fcb88d9; op3val:0x7ec70bbf; valaddr_reg:x16; val_offset:348; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f9, f27, f13, f30, 0x3, 0, x16, 348, x17, x15, 232, x18)

inst_30:
// rs1==f2, rs2==f7, rs3==f1, rd==f4, fs1 == 0 and fe1 == 0xfe and fm1 == 0x0b3cb2 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4470eb and fs3 == 0 and fe3 == 0xfd and fm3 == 0x55afc7 and rm_val == 3  
// opcode: fmsub.s ; op1:f2; op2:f7; op3:f1; dest:f4; op1val:0x7f0b3cb2; op2val:0x3f4470eb; op3val:0x7ed5afc7; valaddr_reg:x16; val_offset:360; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f4, f2, f7, f1, 0x3, 0, x16, 360, x17, x15, 240, x18)

inst_31:
// rs1==f20, rs2==f9, rs3==f4, rd==f8, fs1 == 0 and fe1 == 0xfc and fm1 == 0x045cbd and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2fd438 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x35d23f and rm_val == 3  
// opcode: fmsub.s ; op1:f20; op2:f9; op3:f4; dest:f8; op1val:0x7e045cbd; op2val:0x402fd438; op3val:0x7eb5d23f; valaddr_reg:x16; val_offset:372; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f8, f20, f9, f4, 0x3, 0, x16, 372, x17, x15, 248, x18)

inst_32:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x414a12 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x4b3911 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1970d3 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7b414a12; op2val:0x434b3911; op3val:0x7f1970d3; valaddr_reg:x16; val_offset:384; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 384, x17, x15, 256, x18)

inst_33:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x290209 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5502b1 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x0ca079 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ea90209; op2val:0x3ed502b1; op3val:0x7e0ca079; valaddr_reg:x16; val_offset:396; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 396, x17, x15, 264, x18)

inst_34:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4906ca and fs2 == 0 and fe2 == 0x7a and fm2 == 0x125993 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x65d86c and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ec906ca; op2val:0x3d125993; op3val:0x7c65d86c; valaddr_reg:x16; val_offset:408; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 408, x17, x15, 272, x18)

inst_35:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x40a218 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x07b31d and fs3 == 0 and fe3 == 0xfd and fm3 == 0x4c3884 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ec0a218; op2val:0x3f87b31d; op3val:0x7ecc3884; valaddr_reg:x16; val_offset:420; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 420, x17, x15, 280, x18)

inst_36:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x218570 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ba263 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3033d3 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ea18570; op2val:0x400ba263; op3val:0x7f3033d3; valaddr_reg:x16; val_offset:432; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 432, x17, x15, 288, x18)

inst_37:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x600183 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x466c5d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2d9ffe and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ee00183; op2val:0x3fc66c5d; op3val:0x7f2d9ffe; valaddr_reg:x16; val_offset:444; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 444, x17, x15, 296, x18)

inst_38:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07da62 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x25c38c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x2fef0e and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e87da62; op2val:0x3fa5c38c; op3val:0x7eafef0e; valaddr_reg:x16; val_offset:456; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 456, x17, x15, 304, x18)

inst_39:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x495443 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5e2b56 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2eb928 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7dc95443; op2val:0x40de2b56; op3val:0x7f2eb928; valaddr_reg:x16; val_offset:468; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 468, x17, x15, 312, x18)

inst_40:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x473131 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4ec9ce and fs3 == 0 and fe3 == 0xfd and fm3 == 0x20e69b and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e473131; op2val:0x3fcec9ce; op3val:0x7ea0e69b; valaddr_reg:x16; val_offset:480; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 480, x17, x15, 320, x18)

inst_41:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x38bbf7 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1c0856 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x61311d and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e38bbf7; op2val:0x401c0856; op3val:0x7ee1311d; valaddr_reg:x16; val_offset:492; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 492, x17, x15, 328, x18)

inst_42:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4168bc and fs2 == 0 and fe2 == 0x7f and fm2 == 0x14e7f4 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x60ff95 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e4168bc; op2val:0x3f94e7f4; op3val:0x7e60ff95; valaddr_reg:x16; val_offset:504; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 504, x17, x15, 336, x18)

inst_43:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9f2e and fs2 == 0 and fe2 == 0x7d and fm2 == 0x02ca7f and fs3 == 0 and fe3 == 0xfc and fm3 == 0x22149c and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f1e9f2e; op2val:0x3e82ca7f; op3val:0x7e22149c; valaddr_reg:x16; val_offset:516; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 516, x17, x15, 344, x18)

inst_44:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x269533 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x009bc1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x275fe8 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ea69533; op2val:0x40009bc1; op3val:0x7f275fe8; valaddr_reg:x16; val_offset:528; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 528, x17, x15, 352, x18)

inst_45:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4a3505 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x62f173 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x334186 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eca3505; op2val:0x3fe2f173; op3val:0x7f334186; valaddr_reg:x16; val_offset:540; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 540, x17, x15, 360, x18)

inst_46:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a6931 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2b4da6 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x79799d and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f3a6931; op2val:0x3f2b4da6; op3val:0x7ef9799d; valaddr_reg:x16; val_offset:552; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 552, x17, x15, 368, x18)

inst_47:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4930f1 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x5eb217 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x2f0468 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7dc930f1; op2val:0x3ddeb217; op3val:0x7c2f0468; valaddr_reg:x16; val_offset:564; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 564, x17, x15, 376, x18)

inst_48:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x068e75 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x486b61 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x52af79 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e868e75; op2val:0x3fc86b61; op3val:0x7ed2af79; valaddr_reg:x16; val_offset:576; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 576, x17, x15, 384, x18)

inst_49:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c37fe and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2ba417 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7c6419 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f3c37fe; op2val:0x3f2ba417; op3val:0x7efc6419; valaddr_reg:x16; val_offset:588; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 588, x17, x15, 392, x18)

inst_50:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x608613 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x34efdc and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1eb0a4 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7de08613; op2val:0x40b4efdc; op3val:0x7f1eb0a4; valaddr_reg:x16; val_offset:600; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 600, x17, x15, 400, x18)

inst_51:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2dbb49 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x642cc4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1ad92f and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f2dbb49; op2val:0x3f642cc4; op3val:0x7f1ad92f; valaddr_reg:x16; val_offset:612; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 612, x17, x15, 408, x18)

inst_52:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x432184 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x184b7b and fs3 == 0 and fe3 == 0xfb and fm3 == 0x682adf and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7dc32184; op2val:0x3f984b7b; op3val:0x7de82adf; valaddr_reg:x16; val_offset:624; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 624, x17, x15, 416, x18)

inst_53:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0b294d and fs2 == 0 and fe2 == 0x7c and fm2 == 0x702ea5 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x029014 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f0b294d; op2val:0x3e702ea5; op3val:0x7e029014; valaddr_reg:x16; val_offset:636; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 636, x17, x15, 424, x18)

inst_54:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a21ed and fs2 == 0 and fe2 == 0x80 and fm2 == 0x16f6d0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x35c8f6 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e9a21ed; op2val:0x4016f6d0; op3val:0x7f35c8f6; valaddr_reg:x16; val_offset:648; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 648, x17, x15, 432, x18)

inst_55:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a8ee5 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5094c0 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x180081 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f3a8ee5; op2val:0x3ed094c0; op3val:0x7e980081; valaddr_reg:x16; val_offset:660; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 660, x17, x15, 440, x18)

inst_56:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f5f89 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1a22b0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x19c214 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e7f5f89; op2val:0x401a22b0; op3val:0x7f19c214; valaddr_reg:x16; val_offset:672; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 672, x17, x15, 448, x18)

inst_57:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x091acb and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0d73d3 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x178395 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e091acb; op2val:0x408d73d3; op3val:0x7f178395; valaddr_reg:x16; val_offset:684; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 684, x17, x15, 456, x18)

inst_58:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1006e7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x232351 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x379087 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f1006e7; op2val:0x3f232351; op3val:0x7eb79087; valaddr_reg:x16; val_offset:696; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 696, x17, x15, 464, x18)

inst_59:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ead5d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5c215d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1633bf and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f2ead5d; op2val:0x3f5c215d; op3val:0x7f1633bf; valaddr_reg:x16; val_offset:708; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 708, x17, x15, 472, x18)

inst_60:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x023841 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x795742 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7daa35 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d823841; op2val:0x40f95742; op3val:0x7efdaa35; valaddr_reg:x16; val_offset:720; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 720, x17, x15, 480, x18)

inst_61:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7abe59 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1cc009 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x198816 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7efabe59; op2val:0x3f9cc009; op3val:0x7f198816; valaddr_reg:x16; val_offset:732; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 732, x17, x15, 488, x18)

inst_62:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x215d15 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x120cac and fs3 == 0 and fe3 == 0xfd and fm3 == 0x381e27 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f215d15; op2val:0x3f120cac; op3val:0x7eb81e27; valaddr_reg:x16; val_offset:744; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 744, x17, x15, 496, x18)

inst_63:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6fa438 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x38a8b3 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2cdbf4 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eefa438; op2val:0x3fb8a8b3; op3val:0x7f2cdbf4; valaddr_reg:x16; val_offset:756; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 756, x17, x15, 504, x18)

inst_64:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x171200 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x04fd3a and fs3 == 0 and fe3 == 0xfc and fm3 == 0x1cf56f and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e171200; op2val:0x3f84fd3a; op3val:0x7e1cf56f; valaddr_reg:x16; val_offset:768; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 768, x17, x15, 512, x18)

inst_65:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2950a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x03b4cc and fs3 == 0 and fe3 == 0xfc and fm3 == 0x2e37b3 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e2950a7; op2val:0x3f83b4cc; op3val:0x7e2e37b3; valaddr_reg:x16; val_offset:780; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 780, x17, x15, 520, x18)

inst_66:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x375c30 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x437d92 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x0c052a and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f375c30; op2val:0x3ec37d92; op3val:0x7e8c052a; valaddr_reg:x16; val_offset:792; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 792, x17, x15, 528, x18)

inst_67:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33e876 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x06f814 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3db40b and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f33e876; op2val:0x3f86f814; op3val:0x7f3db40b; valaddr_reg:x16; val_offset:804; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 804, x17, x15, 536, x18)

inst_68:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37a6a0 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6f63f4 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x2bbc44 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f37a6a0; op2val:0x3eef63f4; op3val:0x7eabbc44; valaddr_reg:x16; val_offset:816; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 816, x17, x15, 544, x18)

inst_69:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x470bc0 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b028e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x04f6d6 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e470bc0; op2val:0x402b028e; op3val:0x7f04f6d6; valaddr_reg:x16; val_offset:828; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 828, x17, x15, 552, x18)

inst_70:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2ba537 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x200701 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x5697ea and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7caba537; op2val:0x41200701; op3val:0x7e5697ea; valaddr_reg:x16; val_offset:840; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 840, x17, x15, 560, x18)

inst_71:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x088938 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x26ec21 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x320dd5 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e888938; op2val:0x3da6ec21; op3val:0x7cb20dd5; valaddr_reg:x16; val_offset:852; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 852, x17, x15, 568, x18)

inst_72:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2e22cb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x121c20 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x46c5f4 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e2e22cb; op2val:0x40121c20; op3val:0x7ec6c5f4; valaddr_reg:x16; val_offset:864; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 864, x17, x15, 576, x18)

inst_73:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d1eb3 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x67748e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0e0e3c and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f1d1eb3; op2val:0x3f67748e; op3val:0x7f0e0e3c; valaddr_reg:x16; val_offset:876; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 876, x17, x15, 584, x18)

inst_74:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23b468 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7205fd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1ac45f and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f23b468; op2val:0x3f7205fd; op3val:0x7f1ac45f; valaddr_reg:x16; val_offset:888; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 888, x17, x15, 592, x18)

inst_75:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bcf66 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1b5a50 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3d1b15 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f1bcf66; op2val:0x3f9b5a50; op3val:0x7f3d1b15; valaddr_reg:x16; val_offset:900; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 900, x17, x15, 600, x18)

inst_76:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7d2ec5 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2d33bc and fs3 == 0 and fe3 == 0xfc and fm3 == 0x2b4bc6 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e7d2ec5; op2val:0x3f2d33bc; op3val:0x7e2b4bc6; valaddr_reg:x16; val_offset:912; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 912, x17, x15, 608, x18)

inst_77:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4c83f6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3b3bb8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x15941a and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ecc83f6; op2val:0x3fbb3bb8; op3val:0x7f15941a; valaddr_reg:x16; val_offset:924; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 924, x17, x15, 616, x18)

inst_78:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0049cc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x13e107 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x14364a and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e0049cc; op2val:0x4093e107; op3val:0x7f14364a; valaddr_reg:x16; val_offset:936; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 936, x17, x15, 624, x18)

inst_79:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x488955 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x33c213 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x0cd00e and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e488955; op2val:0x3fb3c213; op3val:0x7e8cd00e; valaddr_reg:x16; val_offset:948; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 948, x17, x15, 632, x18)

inst_80:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25c226 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4e711a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x05ab76 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f25c226; op2val:0x3f4e711a; op3val:0x7f05ab76; valaddr_reg:x16; val_offset:960; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 960, x17, x15, 640, x18)

inst_81:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4acb44 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6d29cb and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bdf4a and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ecacb44; op2val:0x3fed29cb; op3val:0x7f3bdf4a; valaddr_reg:x16; val_offset:972; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 972, x17, x15, 648, x18)

inst_82:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x509405 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x4bec9d and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x262628 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ed09405; op2val:0x3d4bec9d; op3val:0x7ca62628; valaddr_reg:x16; val_offset:984; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 984, x17, x15, 656, x18)

inst_83:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4ad9d0 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x0e173c and fs3 == 0 and fe3 == 0xfb and fm3 == 0x612e76 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ecad9d0; op2val:0x3e8e173c; op3val:0x7de12e76; valaddr_reg:x16; val_offset:996; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 996, x17, x15, 664, x18)

inst_84:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0de66d and fs2 == 0 and fe2 == 0x84 and fm2 == 0x24b40d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3696d7 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7c8de66d; op2val:0x4224b40d; op3val:0x7f3696d7; valaddr_reg:x16; val_offset:1008; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1008, x17, x15, 672, x18)

inst_85:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f23e5 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x47728f and fs3 == 0 and fe3 == 0xfb and fm3 == 0x77f83d and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f1f23e5; op2val:0x3e47728f; op3val:0x7df7f83d; valaddr_reg:x16; val_offset:1020; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1020, x17, x15, 680, x18)

inst_86:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x039278 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x45d015 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x4b5552 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e839278; op2val:0x3f45d015; op3val:0x7e4b5552; valaddr_reg:x16; val_offset:1032; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1032, x17, x15, 688, x18)

inst_87:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x03eb38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x184c25 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x1cf5cd and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d83eb38; op2val:0x3f984c25; op3val:0x7d9cf5cd; valaddr_reg:x16; val_offset:1044; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1044, x17, x15, 696, x18)

inst_88:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x32f0a0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x04e6dc and fs3 == 0 and fe3 == 0xfd and fm3 == 0x39cae1 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eb2f0a0; op2val:0x3f84e6dc; op3val:0x7eb9cae1; valaddr_reg:x16; val_offset:1056; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1056, x17, x15, 704, x18)

inst_89:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22fef2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x15bca2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3eacfb and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f22fef2; op2val:0x3f95bca2; op3val:0x7f3eacfb; valaddr_reg:x16; val_offset:1068; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1068, x17, x15, 712, x18)

inst_90:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0bd6b8 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x2cb626 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x3caf87 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e8bd6b8; op2val:0x3eacb626; op3val:0x7dbcaf87; valaddr_reg:x16; val_offset:1080; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1080, x17, x15, 720, x18)

inst_91:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41bbe4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x304583 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x0565c7 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e41bbe4; op2val:0x3fb04583; op3val:0x7e8565c7; valaddr_reg:x16; val_offset:1092; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1092, x17, x15, 728, x18)

inst_92:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6bcd6f and fs2 == 0 and fe2 == 0x7c and fm2 == 0x77b7b4 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x642c6c and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eebcd6f; op2val:0x3e77b7b4; op3val:0x7de42c6c; valaddr_reg:x16; val_offset:1104; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1104, x17, x15, 736, x18)

inst_93:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1cad6c and fs2 == 0 and fe2 == 0x84 and fm2 == 0x092539 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x27df2e and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7c9cad6c; op2val:0x42092539; op3val:0x7f27df2e; valaddr_reg:x16; val_offset:1116; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1116, x17, x15, 744, x18)

inst_94:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1bd969 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x655a0f and fs3 == 0 and fe3 == 0xfd and fm3 == 0x0ba04e and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d9bd969; op2val:0x40655a0f; op3val:0x7e8ba04e; valaddr_reg:x16; val_offset:1128; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1128, x17, x15, 752, x18)

inst_95:
// fs1 == 0 and fe1 == 0xf2 and fm1 == 0x3775d9 and fs2 == 0 and fe2 == 0x88 and fm2 == 0x221af5 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x6857ca and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x793775d9; op2val:0x44221af5; op3val:0x7de857ca; valaddr_reg:x16; val_offset:1140; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1140, x17, x15, 760, x18)

inst_96:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0294a2 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x1e5203 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x218322 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e8294a2; op2val:0x3e1e5203; op3val:0x7d218322; valaddr_reg:x16; val_offset:1152; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1152, x17, x15, 768, x18)

inst_97:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x205482 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x47070a and fs3 == 0 and fe3 == 0xfb and fm3 == 0x794c35 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e205482; op2val:0x3f47070a; op3val:0x7df94c35; valaddr_reg:x16; val_offset:1164; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1164, x17, x15, 776, x18)

inst_98:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3f39ad and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0a7c97 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x4ee451 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d3f39ad; op2val:0x3f8a7c97; op3val:0x7d4ee451; valaddr_reg:x16; val_offset:1176; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1176, x17, x15, 784, x18)

inst_99:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1f0870 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4409e1 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x739132 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d9f0870; op2val:0x40c409e1; op3val:0x7ef39132; valaddr_reg:x16; val_offset:1188; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1188, x17, x15, 792, x18)

inst_100:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16ac6a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x02272a and fs3 == 0 and fe3 == 0xfd and fm3 == 0x193536 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e96ac6a; op2val:0x3f82272a; op3val:0x7e993536; valaddr_reg:x16; val_offset:1200; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1200, x17, x15, 800, x18)

inst_101:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27e812 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x699098 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x19310e and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f27e812; op2val:0x3f699098; op3val:0x7f19310e; valaddr_reg:x16; val_offset:1212; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1212, x17, x15, 808, x18)

inst_102:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cb5d8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5df921 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x15c10f and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f2cb5d8; op2val:0x3f5df921; op3val:0x7f15c10f; valaddr_reg:x16; val_offset:1224; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1224, x17, x15, 816, x18)

inst_103:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01d495 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x238717 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x25ddbc and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f01d495; op2val:0x3da38717; op3val:0x7d25ddbc; valaddr_reg:x16; val_offset:1236; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1236, x17, x15, 824, x18)

inst_104:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45f2de and fs2 == 0 and fe2 == 0x7f and fm2 == 0x195a39 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x6d27d5 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ec5f2de; op2val:0x3f995a39; op3val:0x7eed27d5; valaddr_reg:x16; val_offset:1248; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1248, x17, x15, 832, x18)

inst_105:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36feaa and fs2 == 0 and fe2 == 0x7e and fm2 == 0x39770f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x049324 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f36feaa; op2val:0x3f39770f; op3val:0x7f049324; valaddr_reg:x16; val_offset:1260; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1260, x17, x15, 840, x18)

inst_106:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0dcb1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4451ca and fs3 == 0 and fe3 == 0xfd and fm3 == 0x59799a and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e8dcb1a; op2val:0x3fc451ca; op3val:0x7ed9799a; valaddr_reg:x16; val_offset:1272; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1272, x17, x15, 848, x18)

inst_107:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x493572 and fs2 == 0 and fe2 == 0x85 and fm2 == 0x4caef8 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x20e01d and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7b493572; op2val:0x42ccaef8; op3val:0x7ea0e01d; valaddr_reg:x16; val_offset:1284; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1284, x17, x15, 856, x18)

inst_108:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x623931 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x645990 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x49ca15 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ee23931; op2val:0x3ee45990; op3val:0x7e49ca15; valaddr_reg:x16; val_offset:1296; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1296, x17, x15, 864, x18)

inst_109:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3333bd and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05044b and fs3 == 0 and fe3 == 0xfd and fm3 == 0x3a39c6 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e3333bd; op2val:0x4005044b; op3val:0x7eba39c6; valaddr_reg:x16; val_offset:1308; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1308, x17, x15, 872, x18)

inst_110:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0755d0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x287cca and fs3 == 0 and fe3 == 0xfc and fm3 == 0x322492 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e0755d0; op2val:0x3fa87cca; op3val:0x7e322492; valaddr_reg:x16; val_offset:1320; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1320, x17, x15, 880, x18)

inst_111:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e266 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x215d18 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x67d083 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f37e266; op2val:0x3e215d18; op3val:0x7de7d083; valaddr_reg:x16; val_offset:1332; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1332, x17, x15, 888, x18)

inst_112:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09c4a3 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1dba6d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x29c3d8 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e89c4a3; op2val:0x401dba6d; op3val:0x7f29c3d8; valaddr_reg:x16; val_offset:1344; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1344, x17, x15, 896, x18)

inst_113:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x55d3ce and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3eed2d and fs3 == 0 and fe3 == 0xfd and fm3 == 0x1f794e and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e55d3ce; op2val:0x3fbeed2d; op3val:0x7e9f794e; valaddr_reg:x16; val_offset:1356; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1356, x17, x15, 904, x18)

inst_114:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d4d3d and fs2 == 0 and fe2 == 0x7f and fm2 == 0x06fc02 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x25e290 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f1d4d3d; op2val:0x3f86fc02; op3val:0x7f25e290; valaddr_reg:x16; val_offset:1368; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1368, x17, x15, 912, x18)

inst_115:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52fc23 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dcc0d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x299c14 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ed2fc23; op2val:0x3fcdcc0d; op3val:0x7f299c14; valaddr_reg:x16; val_offset:1380; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1380, x17, x15, 920, x18)

inst_116:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x778bb6 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3260f9 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x2c7cea and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d778bb6; op2val:0x40b260f9; op3val:0x7eac7cea; valaddr_reg:x16; val_offset:1392; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1392, x17, x15, 928, x18)

inst_117:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x161feb and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0ea7ba and fs3 == 0 and fe3 == 0xfe and fm3 == 0x275021 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e961feb; op2val:0x400ea7ba; op3val:0x7f275021; valaddr_reg:x16; val_offset:1404; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1404, x17, x15, 936, x18)

inst_118:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x46aaa4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x750c8e and fs3 == 0 and fe3 == 0xfc and fm3 == 0x3e2b0e and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7dc6aaa4; op2val:0x3ff50c8e; op3val:0x7e3e2b0e; valaddr_reg:x16; val_offset:1416; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1416, x17, x15, 944, x18)

inst_119:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x351ba3 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x507ed5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x13802f and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d351ba3; op2val:0x41507ed5; op3val:0x7f13802f; valaddr_reg:x16; val_offset:1428; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1428, x17, x15, 952, x18)

inst_120:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x010fa7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x32615c and fs3 == 0 and fe3 == 0xfb and fm3 == 0x33dbf0 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e010fa7; op2val:0x3f32615c; op3val:0x7db3dbf0; valaddr_reg:x16; val_offset:1440; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1440, x17, x15, 960, x18)

inst_121:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0aa06a and fs2 == 0 and fe2 == 0x83 and fm2 == 0x23b353 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x314a7d and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7c8aa06a; op2val:0x41a3b353; op3val:0x7eb14a7d; valaddr_reg:x16; val_offset:1452; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1452, x17, x15, 968, x18)

inst_122:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1424d7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5dd969 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00619d and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e9424d7; op2val:0x3fddd969; op3val:0x7f00619d; valaddr_reg:x16; val_offset:1464; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1464, x17, x15, 976, x18)

inst_123:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dcf3e and fs2 == 0 and fe2 == 0x7d and fm2 == 0x314854 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x5a91c1 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f1dcf3e; op2val:0x3eb14854; op3val:0x7e5a91c1; valaddr_reg:x16; val_offset:1476; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1476, x17, x15, 984, x18)

inst_124:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x787f5a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x446e61 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3eaca6 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ef87f5a; op2val:0x3fc46e61; op3val:0x7f3eaca6; valaddr_reg:x16; val_offset:1488; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1488, x17, x15, 992, x18)

inst_125:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3a6060 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x39001e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x06afbc and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d3a6060; op2val:0x4139001e; op3val:0x7f06afbc; valaddr_reg:x16; val_offset:1500; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1500, x17, x15, 1000, x18)

inst_126:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x360dc2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x334fd9 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7f08d0 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eb60dc2; op2val:0x3fb34fd9; op3val:0x7eff08d0; valaddr_reg:x16; val_offset:1512; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1512, x17, x15, 1008, x18)

inst_127:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x214618 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0ff4f9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3560f6 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f214618; op2val:0x3f8ff4f9; op3val:0x7f3560f6; valaddr_reg:x16; val_offset:1524; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1524, x17, x15, 1016, x18)

inst_128:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5eae04 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x49655f and fs3 == 0 and fe3 == 0xfd and fm3 == 0x2f2ece and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7edeae04; op2val:0x3f49655f; op3val:0x7eaf2ece; valaddr_reg:x16; val_offset:1536; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1536, x17, x15, 1024, x18)

inst_129:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x057f28 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5ad721 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x643cef and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f057f28; op2val:0x3f5ad721; op3val:0x7ee43cef; valaddr_reg:x16; val_offset:1548; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1548, x17, x15, 1032, x18)

inst_130:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28177b and fs2 == 0 and fe2 == 0x7d and fm2 == 0x377ca6 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x70f544 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f28177b; op2val:0x3eb77ca6; op3val:0x7e70f544; valaddr_reg:x16; val_offset:1560; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1560, x17, x15, 1040, x18)

inst_131:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12cc2f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3fdd86 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5c0abd and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f12cc2f; op2val:0x3f3fdd86; op3val:0x7edc0abd; valaddr_reg:x16; val_offset:1572; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1572, x17, x15, 1048, x18)

inst_132:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x70e3ae and fs2 == 0 and fe2 == 0x83 and fm2 == 0x085868 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x004c24 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7cf0e3ae; op2val:0x41885868; op3val:0x7f004c24; valaddr_reg:x16; val_offset:1584; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1584, x17, x15, 1056, x18)

inst_133:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6972bf and fs2 == 0 and fe2 == 0x80 and fm2 == 0x4de670 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x3bc306 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7de972bf; op2val:0x404de670; op3val:0x7ebbc306; valaddr_reg:x16; val_offset:1596; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1596, x17, x15, 1064, x18)

inst_134:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x208f24 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x67c89e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x115efd and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ea08f24; op2val:0x3fe7c89e; op3val:0x7f115efd; valaddr_reg:x16; val_offset:1608; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1608, x17, x15, 1072, x18)

inst_135:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c318d and fs2 == 0 and fe2 == 0x7b and fm2 == 0x76b07a and fs3 == 0 and fe3 == 0xfb and fm3 == 0x355959 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f3c318d; op2val:0x3df6b07a; op3val:0x7db55959; valaddr_reg:x16; val_offset:1620; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1620, x17, x15, 1080, x18)

inst_136:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0db1 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x4a1abc and fs3 == 0 and fe3 == 0xfc and fm3 == 0x5d22dd and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f0c0db1; op2val:0x3eca1abc; op3val:0x7e5d22dd; valaddr_reg:x16; val_offset:1632; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1632, x17, x15, 1088, x18)

inst_137:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49acea and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55497a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2806c1 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ec9acea; op2val:0x3fd5497a; op3val:0x7f2806c1; valaddr_reg:x16; val_offset:1644; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1644, x17, x15, 1096, x18)

inst_138:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b7753 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x169be3 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5c9425 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e3b7753; op2val:0x40169be3; op3val:0x7edc9425; valaddr_reg:x16; val_offset:1656; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1656, x17, x15, 1104, x18)

inst_139:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x188556 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6142c5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0634f9 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f188556; op2val:0x3f6142c5; op3val:0x7f0634f9; valaddr_reg:x16; val_offset:1668; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1668, x17, x15, 1112, x18)

inst_140:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e05d5 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2955f8 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x663896 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eae05d5; op2val:0x3f2955f8; op3val:0x7e663896; valaddr_reg:x16; val_offset:1680; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1680, x17, x15, 1120, x18)

inst_141:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7143d8 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6e96ab and fs3 == 0 and fe3 == 0xfd and fm3 == 0x60db12 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e7143d8; op2val:0x3fee96ab; op3val:0x7ee0db12; valaddr_reg:x16; val_offset:1692; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1692, x17, x15, 1128, x18)

inst_142:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02a304 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x20e19c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x243208 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f02a304; op2val:0x3f20e19c; op3val:0x7ea43208; valaddr_reg:x16; val_offset:1704; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1704, x17, x15, 1136, x18)

inst_143:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x371843 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x5d28cc and fs3 == 0 and fe3 == 0xfc and fm3 == 0x1e2d21 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d371843; op2val:0x405d28cc; op3val:0x7e1e2d21; valaddr_reg:x16; val_offset:1716; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1716, x17, x15, 1144, x18)

inst_144:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x525578 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x6ac41d and fs3 == 0 and fe3 == 0xfa and fm3 == 0x40e341 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ed25578; op2val:0x3deac41d; op3val:0x7d40e341; valaddr_reg:x16; val_offset:1728; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1728, x17, x15, 1152, x18)

inst_145:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7557bf and fs2 == 0 and fe2 == 0x7e and fm2 == 0x15365b and fs3 == 0 and fe3 == 0xfd and fm3 == 0x0f002a and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ef557bf; op2val:0x3f15365b; op3val:0x7e8f002a; valaddr_reg:x16; val_offset:1740; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1740, x17, x15, 1160, x18)

inst_146:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0acc40 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x4df5c4 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5f559e and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e0acc40; op2val:0x404df5c4; op3val:0x7edf559e; valaddr_reg:x16; val_offset:1752; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1752, x17, x15, 1168, x18)

inst_147:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ce9fd and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2951df and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1cb23d and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e6ce9fd; op2val:0x402951df; op3val:0x7f1cb23d; valaddr_reg:x16; val_offset:1764; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1764, x17, x15, 1176, x18)

inst_148:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5d9367 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5109c2 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x34edca and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ddd9367; op2val:0x3f5109c2; op3val:0x7db4edca; valaddr_reg:x16; val_offset:1776; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1776, x17, x15, 1184, x18)

inst_149:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24d370 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x2cb9e5 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x5e6b80 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f24d370; op2val:0x3eacb9e5; op3val:0x7e5e6b80; valaddr_reg:x16; val_offset:1788; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1788, x17, x15, 1192, x18)

inst_150:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b70e3 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x437185 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x0f1a1b and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f3b70e3; op2val:0x3d437185; op3val:0x7d0f1a1b; valaddr_reg:x16; val_offset:1800; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1800, x17, x15, 1200, x18)

inst_151:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d9b86 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2ff72a and fs3 == 0 and fe3 == 0xfd and fm3 == 0x185346 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7edd9b86; op2val:0x3f2ff72a; op3val:0x7e985346; valaddr_reg:x16; val_offset:1812; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1812, x17, x15, 1208, x18)

inst_152:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70ef31 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x41568d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x35f5c9 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ef0ef31; op2val:0x3fc1568d; op3val:0x7f35f5c9; valaddr_reg:x16; val_offset:1824; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1824, x17, x15, 1216, x18)

inst_153:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3e28e8 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x66cf10 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x2b7290 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7dbe28e8; op2val:0x3fe6cf10; op3val:0x7e2b7290; valaddr_reg:x16; val_offset:1836; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1836, x17, x15, 1224, x18)

inst_154:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2303ee and fs2 == 0 and fe2 == 0x7f and fm2 == 0x794f79 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1ec16f and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ea303ee; op2val:0x3ff94f79; op3val:0x7f1ec16f; valaddr_reg:x16; val_offset:1848; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1848, x17, x15, 1232, x18)

inst_155:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x569889 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2637f1 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x0b55ce and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d569889; op2val:0x3fa637f1; op3val:0x7d8b55ce; valaddr_reg:x16; val_offset:1860; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1860, x17, x15, 1240, x18)

inst_156:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x665f91 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x390b28 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x26851a and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ce65f91; op2val:0x41390b28; op3val:0x7ea6851a; valaddr_reg:x16; val_offset:1872; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1872, x17, x15, 1248, x18)

inst_157:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x322c35 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bfc20 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x42daf5 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d322c35; op2val:0x410bfc20; op3val:0x7ec2daf5; valaddr_reg:x16; val_offset:1884; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1884, x17, x15, 1256, x18)

inst_158:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4dc757 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2eb223 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x0c6cae and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ecdc757; op2val:0x3f2eb223; op3val:0x7e8c6cae; valaddr_reg:x16; val_offset:1896; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1896, x17, x15, 1264, x18)

inst_159:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x79f575 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x63e702 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x5e8636 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ef9f575; op2val:0x3de3e702; op3val:0x7d5e8636; valaddr_reg:x16; val_offset:1908; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1908, x17, x15, 1272, x18)

inst_160:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x78b41c and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6e8086 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x67b44e and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e78b41c; op2val:0x3eee8086; op3val:0x7de7b44e; valaddr_reg:x16; val_offset:1920; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1920, x17, x15, 1280, x18)

inst_161:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0aa728 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x5d031f and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x6f67fd and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f0aa728; op2val:0x3cdd031f; op3val:0x7c6f67fd; valaddr_reg:x16; val_offset:1932; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1932, x17, x15, 1288, x18)

inst_162:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1654f7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5049bc and fs3 == 0 and fe3 == 0xfc and fm3 == 0x74a0ac and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e1654f7; op2val:0x3fd049bc; op3val:0x7e74a0ac; valaddr_reg:x16; val_offset:1944; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1944, x17, x15, 1296, x18)

inst_163:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x780309 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b0a9f and fs3 == 0 and fe3 == 0xfd and fm3 == 0x25b451 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7df80309; op2val:0x402b0a9f; op3val:0x7ea5b451; valaddr_reg:x16; val_offset:1956; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1956, x17, x15, 1304, x18)

inst_164:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e0e28 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x57494f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1fd451 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f3e0e28; op2val:0x3f57494f; op3val:0x7f1fd451; valaddr_reg:x16; val_offset:1968; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1968, x17, x15, 1312, x18)

inst_165:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x18ee3e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1c9b1c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x3b1bae and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e98ee3e; op2val:0x3f9c9b1c; op3val:0x7ebb1bae; valaddr_reg:x16; val_offset:1980; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1980, x17, x15, 1320, x18)

inst_166:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x28a4b8 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0ace5d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36e17b and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e28a4b8; op2val:0x408ace5d; op3val:0x7f36e17b; valaddr_reg:x16; val_offset:1992; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1992, x17, x15, 1328, x18)

inst_167:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2980ff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0c483e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x39c4c2 and rm_val == 3  
// opcode: fmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f2980ff; op2val:0x3f8c483e; op3val:0x7f39c4c2; valaddr_reg:x16; val_offset:2004; rmval:0x3; testreg:x18
TEST_FPR4_OP(fmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 2004, x17, x15, 1336, x18)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
test_fp:
.word 0x7e78b41c
.word 0x7e78b41c
.word 0x7e78b41c
.word 0x7f0aa728
.word 0x3cdd031f
.word 0x7f0aa728
.word 0x7e1654f7
.word 0x3fd049bc
.word 0x7e1654f7
.word 0x7ec5fe09
.word 0x3f285f5e
.word 0x7e823878
.word 0x7df80309
.word 0x402b0a9f
.word 0x402b0a9f
.word 0x7f3e0e28
.word 0x3f57494f
.word 0x3f57494f
.word 0x7e98ee3e
.word 0x7e98ee3e
.word 0x7ebb1bae
.word 0x7e28a4b8
.word 0x7e28a4b8
.word 0x7f36e17b
.word 0x7f2980ff
.word 0x7f2980ff
.word 0x7f2980ff
.word 0x7efd89da
.word 0x3e5dbf76
.word 0x7ddb9da0
.word 0x7ded3ae1
.word 0x40945fb2
.word 0x7f097eb9
.word 0x7f168405
.word 0x3f92771a
.word 0x7f2c3aa4
.word 0x7d60a082
.word 0x41127dc4
.word 0x7f0089e4
.word 0x7d5edc92
.word 0x40544a7b
.word 0x7e38cf80
.word 0x7dbacfb2
.word 0x4068a6d7
.word 0x7ea9c5f9
.word 0x7f2147aa
.word 0x3e272c67
.word 0x7dd2a373
.word 0x7ed6da71
.word 0x3fd7ca8e
.word 0x7f351b75
.word 0x7f34e60e
.word 0x3e8d1155
.word 0x7e475deb
.word 0x7f063ff4
.word 0x3fa075c6
.word 0x7f284b78
.word 0x7eb790e1
.word 0x3ffc192a
.word 0x7f34c4a9
.word 0x7eadb366
.word 0x3f96e747
.word 0x7eccc816
.word 0x7ec4ab84
.word 0x3fad20ce
.word 0x7f05011c
.word 0x7eeb35f0
.word 0x3f534a7c
.word 0x7ec221e4
.word 0x7f2f329c
.word 0x3ef8b546
.word 0x7eaa3516
.word 0x7ed7b43e
.word 0x3fad2d8b
.word 0x7f11eb2e
.word 0x7f14462d
.word 0x3f284ddf
.word 0x7ec2f650
.word 0x7e3ed7f8
.word 0x3f8ea3ff
.word 0x7e54ac1b
.word 0x7da2fbeb
.word 0x40a8f8b9
.word 0x7ed72759
.word 0x7ed54a27
.word 0x3fb4bbbd
.word 0x7f16948f
.word 0x7e7a5ab2
.word 0x3fcb88d9
.word 0x7ec70bbf
.word 0x7f0b3cb2
.word 0x3f4470eb
.word 0x7ed5afc7
.word 0x7e045cbd
.word 0x402fd438
.word 0x7eb5d23f
.word 0x7b414a12
.word 0x434b3911
.word 0x7f1970d3
.word 0x7ea90209
.word 0x3ed502b1
.word 0x7e0ca079
.word 0x7ec906ca
.word 0x3d125993
.word 0x7c65d86c
.word 0x7ec0a218
.word 0x3f87b31d
.word 0x7ecc3884
.word 0x7ea18570
.word 0x400ba263
.word 0x7f3033d3
.word 0x7ee00183
.word 0x3fc66c5d
.word 0x7f2d9ffe
.word 0x7e87da62
.word 0x3fa5c38c
.word 0x7eafef0e
.word 0x7dc95443
.word 0x40de2b56
.word 0x7f2eb928
.word 0x7e473131
.word 0x3fcec9ce
.word 0x7ea0e69b
.word 0x7e38bbf7
.word 0x401c0856
.word 0x7ee1311d
.word 0x7e4168bc
.word 0x3f94e7f4
.word 0x7e60ff95
.word 0x7f1e9f2e
.word 0x3e82ca7f
.word 0x7e22149c
.word 0x7ea69533
.word 0x40009bc1
.word 0x7f275fe8
.word 0x7eca3505
.word 0x3fe2f173
.word 0x7f334186
.word 0x7f3a6931
.word 0x3f2b4da6
.word 0x7ef9799d
.word 0x7dc930f1
.word 0x3ddeb217
.word 0x7c2f0468
.word 0x7e868e75
.word 0x3fc86b61
.word 0x7ed2af79
.word 0x7f3c37fe
.word 0x3f2ba417
.word 0x7efc6419
.word 0x7de08613
.word 0x40b4efdc
.word 0x7f1eb0a4
.word 0x7f2dbb49
.word 0x3f642cc4
.word 0x7f1ad92f
.word 0x7dc32184
.word 0x3f984b7b
.word 0x7de82adf
.word 0x7f0b294d
.word 0x3e702ea5
.word 0x7e029014
.word 0x7e9a21ed
.word 0x4016f6d0
.word 0x7f35c8f6
.word 0x7f3a8ee5
.word 0x3ed094c0
.word 0x7e980081
.word 0x7e7f5f89
.word 0x401a22b0
.word 0x7f19c214
.word 0x7e091acb
.word 0x408d73d3
.word 0x7f178395
.word 0x7f1006e7
.word 0x3f232351
.word 0x7eb79087
.word 0x7f2ead5d
.word 0x3f5c215d
.word 0x7f1633bf
.word 0x7d823841
.word 0x40f95742
.word 0x7efdaa35
.word 0x7efabe59
.word 0x3f9cc009
.word 0x7f198816
.word 0x7f215d15
.word 0x3f120cac
.word 0x7eb81e27
.word 0x7eefa438
.word 0x3fb8a8b3
.word 0x7f2cdbf4
.word 0x7e171200
.word 0x3f84fd3a
.word 0x7e1cf56f
.word 0x7e2950a7
.word 0x3f83b4cc
.word 0x7e2e37b3
.word 0x7f375c30
.word 0x3ec37d92
.word 0x7e8c052a
.word 0x7f33e876
.word 0x3f86f814
.word 0x7f3db40b
.word 0x7f37a6a0
.word 0x3eef63f4
.word 0x7eabbc44
.word 0x7e470bc0
.word 0x402b028e
.word 0x7f04f6d6
.word 0x7caba537
.word 0x41200701
.word 0x7e5697ea
.word 0x7e888938
.word 0x3da6ec21
.word 0x7cb20dd5
.word 0x7e2e22cb
.word 0x40121c20
.word 0x7ec6c5f4
.word 0x7f1d1eb3
.word 0x3f67748e
.word 0x7f0e0e3c
.word 0x7f23b468
.word 0x3f7205fd
.word 0x7f1ac45f
.word 0x7f1bcf66
.word 0x3f9b5a50
.word 0x7f3d1b15
.word 0x7e7d2ec5
.word 0x3f2d33bc
.word 0x7e2b4bc6
.word 0x7ecc83f6
.word 0x3fbb3bb8
.word 0x7f15941a
.word 0x7e0049cc
.word 0x4093e107
.word 0x7f14364a
.word 0x7e488955
.word 0x3fb3c213
.word 0x7e8cd00e
.word 0x7f25c226
.word 0x3f4e711a
.word 0x7f05ab76
.word 0x7ecacb44
.word 0x3fed29cb
.word 0x7f3bdf4a
.word 0x7ed09405
.word 0x3d4bec9d
.word 0x7ca62628
.word 0x7ecad9d0
.word 0x3e8e173c
.word 0x7de12e76
.word 0x7c8de66d
.word 0x4224b40d
.word 0x7f3696d7
.word 0x7f1f23e5
.word 0x3e47728f
.word 0x7df7f83d
.word 0x7e839278
.word 0x3f45d015
.word 0x7e4b5552
.word 0x7d83eb38
.word 0x3f984c25
.word 0x7d9cf5cd
.word 0x7eb2f0a0
.word 0x3f84e6dc
.word 0x7eb9cae1
.word 0x7f22fef2
.word 0x3f95bca2
.word 0x7f3eacfb
.word 0x7e8bd6b8
.word 0x3eacb626
.word 0x7dbcaf87
.word 0x7e41bbe4
.word 0x3fb04583
.word 0x7e8565c7
.word 0x7eebcd6f
.word 0x3e77b7b4
.word 0x7de42c6c
.word 0x7c9cad6c
.word 0x42092539
.word 0x7f27df2e
.word 0x7d9bd969
.word 0x40655a0f
.word 0x7e8ba04e
.word 0x793775d9
.word 0x44221af5
.word 0x7de857ca
.word 0x7e8294a2
.word 0x3e1e5203
.word 0x7d218322
.word 0x7e205482
.word 0x3f47070a
.word 0x7df94c35
.word 0x7d3f39ad
.word 0x3f8a7c97
.word 0x7d4ee451
.word 0x7d9f0870
.word 0x40c409e1
.word 0x7ef39132
.word 0x7e96ac6a
.word 0x3f82272a
.word 0x7e993536
.word 0x7f27e812
.word 0x3f699098
.word 0x7f19310e
.word 0x7f2cb5d8
.word 0x3f5df921
.word 0x7f15c10f
.word 0x7f01d495
.word 0x3da38717
.word 0x7d25ddbc
.word 0x7ec5f2de
.word 0x3f995a39
.word 0x7eed27d5
.word 0x7f36feaa
.word 0x3f39770f
.word 0x7f049324
.word 0x7e8dcb1a
.word 0x3fc451ca
.word 0x7ed9799a
.word 0x7b493572
.word 0x42ccaef8
.word 0x7ea0e01d
.word 0x7ee23931
.word 0x3ee45990
.word 0x7e49ca15
.word 0x7e3333bd
.word 0x4005044b
.word 0x7eba39c6
.word 0x7e0755d0
.word 0x3fa87cca
.word 0x7e322492
.word 0x7f37e266
.word 0x3e215d18
.word 0x7de7d083
.word 0x7e89c4a3
.word 0x401dba6d
.word 0x7f29c3d8
.word 0x7e55d3ce
.word 0x3fbeed2d
.word 0x7e9f794e
.word 0x7f1d4d3d
.word 0x3f86fc02
.word 0x7f25e290
.word 0x7ed2fc23
.word 0x3fcdcc0d
.word 0x7f299c14
.word 0x7d778bb6
.word 0x40b260f9
.word 0x7eac7cea
.word 0x7e961feb
.word 0x400ea7ba
.word 0x7f275021
.word 0x7dc6aaa4
.word 0x3ff50c8e
.word 0x7e3e2b0e
.word 0x7d351ba3
.word 0x41507ed5
.word 0x7f13802f
.word 0x7e010fa7
.word 0x3f32615c
.word 0x7db3dbf0
.word 0x7c8aa06a
.word 0x41a3b353
.word 0x7eb14a7d
.word 0x7e9424d7
.word 0x3fddd969
.word 0x7f00619d
.word 0x7f1dcf3e
.word 0x3eb14854
.word 0x7e5a91c1
.word 0x7ef87f5a
.word 0x3fc46e61
.word 0x7f3eaca6
.word 0x7d3a6060
.word 0x4139001e
.word 0x7f06afbc
.word 0x7eb60dc2
.word 0x3fb34fd9
.word 0x7eff08d0
.word 0x7f214618
.word 0x3f8ff4f9
.word 0x7f3560f6
.word 0x7edeae04
.word 0x3f49655f
.word 0x7eaf2ece
.word 0x7f057f28
.word 0x3f5ad721
.word 0x7ee43cef
.word 0x7f28177b
.word 0x3eb77ca6
.word 0x7e70f544
.word 0x7f12cc2f
.word 0x3f3fdd86
.word 0x7edc0abd
.word 0x7cf0e3ae
.word 0x41885868
.word 0x7f004c24
.word 0x7de972bf
.word 0x404de670
.word 0x7ebbc306
.word 0x7ea08f24
.word 0x3fe7c89e
.word 0x7f115efd
.word 0x7f3c318d
.word 0x3df6b07a
.word 0x7db55959
.word 0x7f0c0db1
.word 0x3eca1abc
.word 0x7e5d22dd
.word 0x7ec9acea
.word 0x3fd5497a
.word 0x7f2806c1
.word 0x7e3b7753
.word 0x40169be3
.word 0x7edc9425
.word 0x7f188556
.word 0x3f6142c5
.word 0x7f0634f9
.word 0x7eae05d5
.word 0x3f2955f8
.word 0x7e663896
.word 0x7e7143d8
.word 0x3fee96ab
.word 0x7ee0db12
.word 0x7f02a304
.word 0x3f20e19c
.word 0x7ea43208
.word 0x7d371843
.word 0x405d28cc
.word 0x7e1e2d21
.word 0x7ed25578
.word 0x3deac41d
.word 0x7d40e341
.word 0x7ef557bf
.word 0x3f15365b
.word 0x7e8f002a
.word 0x7e0acc40
.word 0x404df5c4
.word 0x7edf559e
.word 0x7e6ce9fd
.word 0x402951df
.word 0x7f1cb23d
.word 0x7ddd9367
.word 0x3f5109c2
.word 0x7db4edca
.word 0x7f24d370
.word 0x3eacb9e5
.word 0x7e5e6b80
.word 0x7f3b70e3
.word 0x3d437185
.word 0x7d0f1a1b
.word 0x7edd9b86
.word 0x3f2ff72a
.word 0x7e985346
.word 0x7ef0ef31
.word 0x3fc1568d
.word 0x7f35f5c9
.word 0x7dbe28e8
.word 0x3fe6cf10
.word 0x7e2b7290
.word 0x7ea303ee
.word 0x3ff94f79
.word 0x7f1ec16f
.word 0x7d569889
.word 0x3fa637f1
.word 0x7d8b55ce
.word 0x7ce65f91
.word 0x41390b28
.word 0x7ea6851a
.word 0x7d322c35
.word 0x410bfc20
.word 0x7ec2daf5
.word 0x7ecdc757
.word 0x3f2eb223
.word 0x7e8c6cae
.word 0x7ef9f575
.word 0x3de3e702
.word 0x7d5e8636
.word 0x7e78b41c
.word 0x3eee8086
.word 0x7de7b44e
.word 0x7f0aa728
.word 0x3cdd031f
.word 0x7c6f67fd
.word 0x7e1654f7
.word 0x3fd049bc
.word 0x7e74a0ac
.word 0x7df80309
.word 0x402b0a9f
.word 0x7ea5b451
.word 0x7f3e0e28
.word 0x3f57494f
.word 0x7f1fd451
.word 0x7e98ee3e
.word 0x3f9c9b1c
.word 0x7ebb1bae
.word 0x7e28a4b8
.word 0x408ace5d
.word 0x7f36e17b
.word 0x7f2980ff
.word 0x3f8c483e
.word 0x7f39c4c2
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 336*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
