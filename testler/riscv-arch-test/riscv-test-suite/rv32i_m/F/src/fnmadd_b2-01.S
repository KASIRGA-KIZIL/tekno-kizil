
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.5.2
// timestamp : Tue Sep  7 16:08:04 2021 GMT
// usage     : riscv_ctg \
//                  -- cgf $cgf \
//                  -- xlen $xlen \
// -----------
//
// -----------
// Copyright (c) 2021. IIT Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V F extension for the fnmadd_b2 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b2)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1, rs1==f7, rs2==f27, rs3==f28, rd==f27, fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004a and fs2 == 0 and fe2 == 0x7c and fm2 == 0x0a60dd and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000b and rm_val == 0  
// opcode: fnmadd.s ; op1:f7; op2:f27; op3:f28; dest:f27; op1val:0x4a; op2val:0x3e0a60dd; op3val:0xb; valaddr_reg:x16; val_offset:0; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f27, f7, f27, f28, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1:
// rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2, rs1==f20, rs2==f7, rs3==f16, rd==f20, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000031 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1fffdd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000035 and rm_val == 0  
// opcode: fnmadd.s ; op1:f20; op2:f7; op3:f16; dest:f20; op1val:0x7f000031; op2val:0x401fffdd; op3val:0x7f000035; valaddr_reg:x16; val_offset:12; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f20, f20, f7, f16, 0x0, 0, x16, 12, x17, x15, 8, x18)

inst_2:
// rs1 == rs2 == rd != rs3, rs1==f24, rs2==f24, rs3==f25, rd==f24, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00000c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2ffffc and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000019 and rm_val == 0  
// opcode: fnmadd.s ; op1:f24; op2:f24; op3:f25; dest:f24; op1val:0x7f00000c; op2val:0x7f00000c; op3val:0x7f000019; valaddr_reg:x16; val_offset:24; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f24, f24, f24, f25, 0x0, 0, x16, 24, x17, x15, 16, x18)

inst_3:
// rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd, rs1==f8, rs2==f15, rs3==f2, rd==f6, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00001e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x37fffe and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000053 and rm_val == 0  
// opcode: fnmadd.s ; op1:f8; op2:f15; op3:f2; dest:f6; op1val:0x7f00001e; op2val:0x4037fffe; op3val:0x7f000053; valaddr_reg:x16; val_offset:36; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f6, f8, f15, f2, 0x0, 0, x16, 36, x17, x15, 24, x18)

inst_4:
// rd == rs2 == rs3 != rs1, rs1==f27, rs2==f12, rs3==f12, rd==f12, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000050 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bffbc and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000063 and rm_val == 0  
// opcode: fnmadd.s ; op1:f27; op2:f12; op3:f12; dest:f12; op1val:0x7f000050; op2val:0x403bffbc; op3val:0x403bffbc; valaddr_reg:x16; val_offset:48; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f12, f27, f12, f12, 0x0, 0, x16, 48, x17, x15, 32, x18)

inst_5:
// rs1 == rs2 == rs3 != rd, rs1==f31, rs2==f31, rs3==f31, rd==f19, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000035 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dffd9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000050 and rm_val == 0  
// opcode: fnmadd.s ; op1:f31; op2:f31; op3:f31; dest:f19; op1val:0x7f000035; op2val:0x7f000035; op3val:0x7f000035; valaddr_reg:x16; val_offset:60; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f19, f31, f31, f31, 0x0, 0, x16, 60, x17, x15, 40, x18)

inst_6:
// rs1 == rs2 == rs3 == rd, rs1==f22, rs2==f22, rs3==f22, rd==f22, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000017 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3effe3 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00000b and rm_val == 0  
// opcode: fnmadd.s ; op1:f22; op2:f22; op3:f22; dest:f22; op1val:0x7f000017; op2val:0x7f000017; op3val:0x7f000017; valaddr_reg:x16; val_offset:72; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f22, f22, f22, f22, 0x0, 0, x16, 72, x17, x15, 48, x18)

inst_7:
// rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2, rs1==f0, rs2==f9, rs3==f0, rd==f3, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3f8012 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000028 and rm_val == 0  
// opcode: fnmadd.s ; op1:f0; op2:f9; op3:f0; dest:f3; op1val:0x7f000001; op2val:0x403f8012; op3val:0x7f000001; valaddr_reg:x16; val_offset:84; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f3, f0, f9, f0, 0x0, 0, x16, 84, x17, x15, 56, x18)

inst_8:
// rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1, rs1==f12, rs2==f6, rs3==f6, rd==f31, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00002f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fbfc8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00001d and rm_val == 0  
// opcode: fnmadd.s ; op1:f12; op2:f6; op3:f6; dest:f31; op1val:0x7f00002f; op2val:0x403fbfc8; op3val:0x403fbfc8; valaddr_reg:x16; val_offset:96; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f31, f12, f6, f6, 0x0, 0, x16, 96, x17, x15, 64, x18)

inst_9:
// rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1, rs1==f5, rs2==f3, rs3==f7, rd==f7, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00004c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fdfb9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000057 and rm_val == 0  
// opcode: fnmadd.s ; op1:f5; op2:f3; op3:f7; dest:f7; op1val:0x7f00004c; op2val:0x403fdfb9; op3val:0x7f000057; valaddr_reg:x16; val_offset:108; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f7, f5, f3, f7, 0x0, 0, x16, 108, x17, x15, 72, x18)

inst_10:
// rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3, rs1==f13, rs2==f13, rs3==f27, rd==f30, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000025 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fefe0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000030 and rm_val == 0  
// opcode: fnmadd.s ; op1:f13; op2:f13; op3:f27; dest:f30; op1val:0x7f000025; op2val:0x7f000025; op3val:0x7f000030; valaddr_reg:x16; val_offset:120; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f30, f13, f13, f27, 0x0, 0, x16, 120, x17, x15, 80, x18)

inst_11:
// rs1 == rd == rs3 != rs2, rs1==f18, rs2==f16, rs3==f18, rd==f18, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000029 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3ff7cb and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000012 and rm_val == 0  
// opcode: fnmadd.s ; op1:f18; op2:f16; op3:f18; dest:f18; op1val:0x7f000029; op2val:0x403ff7cb; op3val:0x7f000029; valaddr_reg:x16; val_offset:132; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f18, f18, f16, f18, 0x0, 0, x16, 132, x17, x15, 88, x18)

inst_12:
// rs1==f2, rs2==f1, rs3==f10, rd==f14, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000036 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3ffbbf and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000021 and rm_val == 0  
// opcode: fnmadd.s ; op1:f2; op2:f1; op3:f10; dest:f14; op1val:0x7f000036; op2val:0x403ffbbf; op3val:0x7f000021; valaddr_reg:x16; val_offset:144; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f14, f2, f1, f10, 0x0, 0, x16, 144, x17, x15, 96, x18)

inst_13:
// rs1==f9, rs2==f23, rs3==f19, rd==f4, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000002 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3ffe13 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00002c and rm_val == 0  
// opcode: fnmadd.s ; op1:f9; op2:f23; op3:f19; dest:f4; op1val:0x7f000002; op2val:0x403ffe13; op3val:0x7f00002c; valaddr_reg:x16; val_offset:156; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f4, f9, f23, f19, 0x0, 0, x16, 156, x17, x15, 104, x18)

inst_14:
// rs1==f6, rs2==f14, rs3==f9, rd==f5, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000063 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3ffe89 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00003b and rm_val == 0  
// opcode: fnmadd.s ; op1:f6; op2:f14; op3:f9; dest:f5; op1val:0x7f000063; op2val:0x403ffe89; op3val:0x7f00003b; valaddr_reg:x16; val_offset:168; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f5, f6, f14, f9, 0x0, 0, x16, 168, x17, x15, 112, x18)

inst_15:
// rs1==f19, rs2==f26, rs3==f30, rd==f29, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000032 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fff3f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000014 and rm_val == 0  
// opcode: fnmadd.s ; op1:f19; op2:f26; op3:f30; dest:f29; op1val:0x7f000032; op2val:0x403fff3f; op3val:0x7f000014; valaddr_reg:x16; val_offset:180; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f29, f19, f26, f30, 0x0, 0, x16, 180, x17, x15, 120, x18)

inst_16:
// rs1==f4, rs2==f17, rs3==f15, rd==f2, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00001c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fffbf and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000053 and rm_val == 0  
// opcode: fnmadd.s ; op1:f4; op2:f17; op3:f15; dest:f2; op1val:0x7f00001c; op2val:0x403fffbf; op3val:0x7f000053; valaddr_reg:x16; val_offset:192; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f2, f4, f17, f15, 0x0, 0, x16, 192, x17, x15, 128, x18)

inst_17:
// rs1==f28, rs2==f18, rs3==f20, rd==f16, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000046 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fff95 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00003d and rm_val == 0  
// opcode: fnmadd.s ; op1:f28; op2:f18; op3:f20; dest:f16; op1val:0x7f000046; op2val:0x403fff95; op3val:0x7f00003d; valaddr_reg:x16; val_offset:204; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f16, f28, f18, f20, 0x0, 0, x16, 204, x17, x15, 136, x18)

inst_18:
// rs1==f1, rs2==f0, rs3==f23, rd==f17, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000063 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fff88 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000059 and rm_val == 0  
// opcode: fnmadd.s ; op1:f1; op2:f0; op3:f23; dest:f17; op1val:0x7f000063; op2val:0x403fff88; op3val:0x7f000059; valaddr_reg:x16; val_offset:216; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f17, f1, f0, f23, 0x0, 0, x16, 216, x17, x15, 144, x18)

inst_19:
// rs1==f23, rs2==f29, rs3==f21, rd==f28, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00003f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fffbb and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000044 and rm_val == 0  
// opcode: fnmadd.s ; op1:f23; op2:f29; op3:f21; dest:f28; op1val:0x7f00003f; op2val:0x403fffbb; op3val:0x7f000044; valaddr_reg:x16; val_offset:228; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f28, f23, f29, f21, 0x0, 0, x16, 228, x17, x15, 152, x18)

inst_20:
// rs1==f30, rs2==f25, rs3==f14, rd==f1, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000033 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fffce and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00003d and rm_val == 0  
// opcode: fnmadd.s ; op1:f30; op2:f25; op3:f14; dest:f1; op1val:0x7f000033; op2val:0x403fffce; op3val:0x7f00003d; valaddr_reg:x16; val_offset:240; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f1, f30, f25, f14, 0x0, 0, x16, 240, x17, x15, 160, x18)

inst_21:
// rs1==f14, rs2==f11, rs3==f1, rd==f23, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000014 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x400005 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00004c and rm_val == 0  
// opcode: fnmadd.s ; op1:f14; op2:f11; op3:f1; dest:f23; op1val:0x7f000014; op2val:0x40400005; op3val:0x7f00004c; valaddr_reg:x16; val_offset:252; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f23, f14, f11, f1, 0x0, 0, x16, 252, x17, x15, 168, x18)

inst_22:
// rs1==f11, rs2==f28, rs3==f17, rd==f21, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000015 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fffe7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000010 and rm_val == 0  
// opcode: fnmadd.s ; op1:f11; op2:f28; op3:f17; dest:f21; op1val:0x7f000015; op2val:0x403fffe7; op3val:0x7f000010; valaddr_reg:x16; val_offset:264; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f21, f11, f28, f17, 0x0, 0, x16, 264, x17, x15, 176, x18)

inst_23:
// rs1==f25, rs2==f5, rs3==f13, rd==f11, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40001e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000042 and rm_val == 0  
// opcode: fnmadd.s ; op1:f25; op2:f5; op3:f13; dest:f11; op1val:0x7f000001; op2val:0x4040001e; op3val:0x7f000042; valaddr_reg:x16; val_offset:276; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f11, f25, f5, f13, 0x0, 0, x16, 276, x17, x15, 184, x18)

inst_24:
// rs1==f10, rs2==f20, rs3==f4, rd==f9, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00004a and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7fff30 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00000e and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f20; op3:f4; dest:f9; op1val:0x7f00004a; op2val:0xbeffff30; op3val:0x7f00000e; valaddr_reg:x16; val_offset:288; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f9, f10, f20, f4, 0x0, 0, x16, 288, x17, x15, 192, x18)

inst_25:
// rs1==f16, rs2==f8, rs3==f29, rd==f10, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00000e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3fffbb and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000017 and rm_val == 0  
// opcode: fnmadd.s ; op1:f16; op2:f8; op3:f29; dest:f10; op1val:0x7f00000e; op2val:0xbf3fffbb; op3val:0x7f000017; valaddr_reg:x16; val_offset:300; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f10, f16, f8, f29, 0x0, 0, x16, 300, x17, x15, 200, x18)

inst_26:
// rs1==f21, rs2==f30, rs3==f8, rd==f13, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000062 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5ffedf and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00003a and rm_val == 0  
// opcode: fnmadd.s ; op1:f21; op2:f30; op3:f8; dest:f13; op1val:0x7f000062; op2val:0xbf5ffedf; op3val:0x7f00003a; valaddr_reg:x16; val_offset:312; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f21, f30, f8, 0x0, 0, x16, 312, x17, x15, 208, x18)

inst_27:
// rs1==f29, rs2==f4, rs3==f3, rd==f0, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000005 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6fffc3 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000019 and rm_val == 0  
// opcode: fnmadd.s ; op1:f29; op2:f4; op3:f3; dest:f0; op1val:0x7f000005; op2val:0xbf6fffc3; op3val:0x7f000019; valaddr_reg:x16; val_offset:324; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f0, f29, f4, f3, 0x0, 0, x16, 324, x17, x15, 216, x18)

inst_28:
// rs1==f17, rs2==f10, rs3==f5, rd==f8, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000012 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x77ff8d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000027 and rm_val == 0  
// opcode: fnmadd.s ; op1:f17; op2:f10; op3:f5; dest:f8; op1val:0x7f000012; op2val:0xbf77ff8d; op3val:0x7f000027; valaddr_reg:x16; val_offset:336; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f8, f17, f10, f5, 0x0, 0, x16, 336, x17, x15, 224, x18)

inst_29:
// rs1==f26, rs2==f2, rs3==f11, rd==f25, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000023 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7bff77 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000021 and rm_val == 0  
// opcode: fnmadd.s ; op1:f26; op2:f2; op3:f11; dest:f25; op1val:0x7f000023; op2val:0xbf7bff77; op3val:0x7f000021; valaddr_reg:x16; val_offset:348; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f25, f26, f2, f11, 0x0, 0, x16, 348, x17, x15, 232, x18)

inst_30:
// rs1==f3, rs2==f19, rs3==f24, rd==f15, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000051 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7dfee1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00003e and rm_val == 0  
// opcode: fnmadd.s ; op1:f3; op2:f19; op3:f24; dest:f15; op1val:0x7f000051; op2val:0xbf7dfee1; op3val:0x7f00003e; valaddr_reg:x16; val_offset:360; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f15, f3, f19, f24, 0x0, 0, x16, 360, x17, x15, 240, x18)

inst_31:
// rs1==f15, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000049 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7efee7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000043 and rm_val == 0  
// opcode: fnmadd.s ; op1:f15; op2:f1; op3:f9; dest:f22; op1val:0x7f000049; op2val:0xbf7efee7; op3val:0x7f000043; valaddr_reg:x16; val_offset:372; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f22, f15, f1, f9, 0x0, 0, x16, 372, x17, x15, 248, x18)

inst_32:
// rs2==f21, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00004d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7f7ef6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000037 and rm_val == 0  
// opcode: fnmadd.s ; op1:f22; op2:f21; op3:f7; dest:f25; op1val:0x7f00004d; op2val:0xbf7f7ef6; op3val:0x7f000037; valaddr_reg:x16; val_offset:384; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f25, f22, f21, f7, 0x0, 0, x16, 384, x17, x15, 256, x18)

inst_33:
// rs3==f26, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000055 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fbef0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000032 and rm_val == 0  
// opcode: fnmadd.s ; op1:f18; op2:f24; op3:f26; dest:f15; op1val:0x7f000055; op2val:0xbf7fbef0; op3val:0x7f000032; valaddr_reg:x16; val_offset:396; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f15, f18, f24, f26, 0x0, 0, x16, 396, x17, x15, 264, x18)

inst_34:
// rd==f26, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000018 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fdf8e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000020 and rm_val == 0  
// opcode: fnmadd.s ; op1:f22; op2:f16; op3:f27; dest:f26; op1val:0x7f000018; op2val:0xbf7fdf8e; op3val:0x7f000020; valaddr_reg:x16; val_offset:408; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f26, f22, f16, f27, 0x0, 0, x16, 408, x17, x15, 272, x18)

inst_35:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000036 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fef06 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000046 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f000036; op2val:0xbf7fef06; op3val:0x7f000046; valaddr_reg:x16; val_offset:420; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 420, x17, x15, 280, x18)

inst_36:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000011 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7ff7ba and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000011 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f000011; op2val:0xbf7ff7ba; op3val:0x7f000011; valaddr_reg:x16; val_offset:432; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 432, x17, x15, 288, x18)

inst_37:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000023 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7ffb7c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00001e and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f000023; op2val:0xbf7ffb7c; op3val:0x7f00001e; valaddr_reg:x16; val_offset:444; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 444, x17, x15, 296, x18)

inst_38:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00004c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7ffcc8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00004f and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f00004c; op2val:0xbf7ffcc8; op3val:0x7f00004f; valaddr_reg:x16; val_offset:456; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 456, x17, x15, 304, x18)

inst_39:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00000c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7ffe38 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000057 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f00000c; op2val:0xbf7ffe38; op3val:0x7f000057; valaddr_reg:x16; val_offset:468; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 468, x17, x15, 312, x18)

inst_40:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00003c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7ffec2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000022 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f00003c; op2val:0xbf7ffec2; op3val:0x7f000022; valaddr_reg:x16; val_offset:480; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 480, x17, x15, 320, x18)

inst_41:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fff3e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f00003f; op2val:0xbf7fff3e; op3val:0x7f000001; valaddr_reg:x16; val_offset:492; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 492, x17, x15, 328, x18)

inst_42:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00002c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fff74 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000009 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f00002c; op2val:0xbf7fff74; op3val:0x7f000009; valaddr_reg:x16; val_offset:504; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 504, x17, x15, 336, x18)

inst_43:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000004 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fffe2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000002 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f000004; op2val:0xbf7fffe2; op3val:0x7f000002; valaddr_reg:x16; val_offset:516; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 516, x17, x15, 344, x18)

inst_44:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00002d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fff78 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000012 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f00002d; op2val:0xbf7fff78; op3val:0x7f000012; valaddr_reg:x16; val_offset:528; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 528, x17, x15, 352, x18)

inst_45:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000058 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fff3c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f000058; op2val:0xbf7fff3c; op3val:0x7f000007; valaddr_reg:x16; val_offset:540; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 540, x17, x15, 360, x18)

inst_46:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00002c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fff34 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000038 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f00002c; op2val:0xbf7fff34; op3val:0x7f000038; valaddr_reg:x16; val_offset:552; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 552, x17, x15, 368, x18)

inst_47:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00002f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ffff2 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000059 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x80002f; op2val:0x401ffff2; op3val:0x800059; valaddr_reg:x16; val_offset:564; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 564, x17, x15, 376, x18)

inst_48:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000062 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0fff94 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000004 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800062; op2val:0x400fff94; op3val:0x800004; valaddr_reg:x16; val_offset:576; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 576, x17, x15, 384, x18)

inst_49:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00000f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x07ffff and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00001d and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x80000f; op2val:0x4007ffff; op3val:0x80001d; valaddr_reg:x16; val_offset:588; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 588, x17, x15, 392, x18)

inst_50:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00002f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x03fffc and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000059 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x80002f; op2val:0x4003fffc; op3val:0x800059; valaddr_reg:x16; val_offset:600; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 600, x17, x15, 400, x18)

inst_51:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x020012 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00002f and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800005; op2val:0x40020012; op3val:0x80002f; valaddr_reg:x16; val_offset:612; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 612, x17, x15, 408, x18)

inst_52:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00004d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ffdc and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000053 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x80004d; op2val:0x4000ffdc; op3val:0x800053; valaddr_reg:x16; val_offset:624; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 624, x17, x15, 416, x18)

inst_53:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00000c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x008019 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00004b and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x80000c; op2val:0x40008019; op3val:0x80004b; valaddr_reg:x16; val_offset:636; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 636, x17, x15, 424, x18)

inst_54:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00002b and fs2 == 0 and fe2 == 0x80 and fm2 == 0x003ff6 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000043 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x80002b; op2val:0x40003ff6; op3val:0x800043; valaddr_reg:x16; val_offset:648; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 648, x17, x15, 432, x18)

inst_55:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00005b and fs2 == 0 and fe2 == 0x80 and fm2 == 0x001fd1 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000058 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x80005b; op2val:0x40001fd1; op3val:0x800058; valaddr_reg:x16; val_offset:660; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 660, x17, x15, 440, x18)

inst_56:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00005e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000fd2 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000060 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x80005e; op2val:0x40000fd2; op3val:0x800060; valaddr_reg:x16; val_offset:672; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 672, x17, x15, 448, x18)

inst_57:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000021 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000801 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000044 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800021; op2val:0x40000801; op3val:0x800044; valaddr_reg:x16; val_offset:684; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 684, x17, x15, 456, x18)

inst_58:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00004c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0003b5 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000002 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x80004c; op2val:0x400003b5; op3val:0x800002; valaddr_reg:x16; val_offset:696; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 696, x17, x15, 464, x18)

inst_59:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00001c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0001f6 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000024 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x80001c; op2val:0x400001f6; op3val:0x800024; valaddr_reg:x16; val_offset:708; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 708, x17, x15, 472, x18)

inst_60:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000045 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0000e4 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000053 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800045; op2val:0x400000e4; op3val:0x800053; valaddr_reg:x16; val_offset:720; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 720, x17, x15, 480, x18)

inst_61:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00001a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000090 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000054 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x80001a; op2val:0x40000090; op3val:0x800054; valaddr_reg:x16; val_offset:732; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 732, x17, x15, 488, x18)

inst_62:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000039 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000016 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00001e and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800039; op2val:0x40000016; op3val:0x80001e; valaddr_reg:x16; val_offset:744; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 744, x17, x15, 496, x18)

inst_63:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000025 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00000b and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000021 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800025; op2val:0x4000000b; op3val:0x800021; valaddr_reg:x16; val_offset:756; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 756, x17, x15, 504, x18)

inst_64:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000054 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7fffd3 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00005b and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800054; op2val:0x3fffffd3; op3val:0x80005b; valaddr_reg:x16; val_offset:768; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 768, x17, x15, 512, x18)

inst_65:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00005e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7fff8b and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000037 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x80005e; op2val:0x3fffff8b; op3val:0x800037; valaddr_reg:x16; val_offset:780; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 780, x17, x15, 520, x18)

inst_66:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000061 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7fff9d and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000057 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800061; op2val:0x3fffff9d; op3val:0x800057; valaddr_reg:x16; val_offset:792; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 792, x17, x15, 528, x18)

inst_67:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000058 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7fff58 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000004 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800058; op2val:0x3fffff58; op3val:0x800004; valaddr_reg:x16; val_offset:804; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 804, x17, x15, 536, x18)

inst_68:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000017 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7fffdb and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800017; op2val:0x3fffffdb; op3val:0x800007; valaddr_reg:x16; val_offset:816; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 816, x17, x15, 544, x18)

inst_69:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00000f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00001e and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00005a and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x80000f; op2val:0x4000001e; op3val:0x80005a; valaddr_reg:x16; val_offset:828; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 828, x17, x15, 552, x18)

inst_70:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000039 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7fff4e and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000010 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800039; op2val:0xbeffff4e; op3val:0x800010; valaddr_reg:x16; val_offset:840; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 840, x17, x15, 560, x18)

inst_71:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000016 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7ffd2c and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000055 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800016; op2val:0xbe7ffd2c; op3val:0x800055; valaddr_reg:x16; val_offset:852; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 852, x17, x15, 568, x18)

inst_72:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00004a and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7ffeec and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000008 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x80004a; op2val:0xbdfffeec; op3val:0x800008; valaddr_reg:x16; val_offset:864; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 864, x17, x15, 576, x18)

inst_73:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00000a and fs2 == 1 and fe2 == 0x7a and fm2 == 0x7ff44c and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00005d and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x80000a; op2val:0xbd7ff44c; op3val:0x80005d; valaddr_reg:x16; val_offset:876; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 876, x17, x15, 584, x18)

inst_74:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00000c and fs2 == 1 and fe2 == 0x79 and fm2 == 0x7ff0a8 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00003d and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x80000c; op2val:0xbcfff0a8; op3val:0x80003d; valaddr_reg:x16; val_offset:888; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 888, x17, x15, 592, x18)

inst_75:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000059 and fs2 == 1 and fe2 == 0x78 and fm2 == 0x7fec4e and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000026 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800059; op2val:0xbc7fec4e; op3val:0x800026; valaddr_reg:x16; val_offset:900; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 900, x17, x15, 600, x18)

inst_76:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000062 and fs2 == 1 and fe2 == 0x77 and fm2 == 0x7fb63c and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000049 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800062; op2val:0xbbffb63c; op3val:0x800049; valaddr_reg:x16; val_offset:912; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 912, x17, x15, 608, x18)

inst_77:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000035 and fs2 == 1 and fe2 == 0x76 and fm2 == 0x7fc596 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00001d and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800035; op2val:0xbb7fc596; op3val:0x80001d; valaddr_reg:x16; val_offset:924; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 924, x17, x15, 616, x18)

inst_78:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000046 and fs2 == 1 and fe2 == 0x75 and fm2 == 0x7f8b74 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00001d and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800046; op2val:0xbaff8b74; op3val:0x80001d; valaddr_reg:x16; val_offset:936; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 936, x17, x15, 624, x18)

inst_79:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000005 and fs2 == 1 and fe2 == 0x74 and fm2 == 0x7fbff6 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000008 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800005; op2val:0xba7fbff6; op3val:0x800008; valaddr_reg:x16; val_offset:948; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 948, x17, x15, 632, x18)

inst_80:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000030 and fs2 == 1 and fe2 == 0x73 and fm2 == 0x7b2fa2 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00004d and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800030; op2val:0xb9fb2fa2; op3val:0x80004d; valaddr_reg:x16; val_offset:960; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 960, x17, x15, 640, x18)

inst_81:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00000d and fs2 == 1 and fe2 == 0x72 and fm2 == 0x751fe7 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000057 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x80000d; op2val:0xb9751fe7; op3val:0x800057; valaddr_reg:x16; val_offset:972; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 972, x17, x15, 648, x18)

inst_82:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00005c and fs2 == 1 and fe2 == 0x71 and fm2 == 0x6e7f55 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000046 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x80005c; op2val:0xb8ee7f55; op3val:0x800046; valaddr_reg:x16; val_offset:984; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 984, x17, x15, 656, x18)

inst_83:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00000f and fs2 == 1 and fe2 == 0x70 and fm2 == 0x55ffe7 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000054 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x80000f; op2val:0xb855ffe7; op3val:0x800054; valaddr_reg:x16; val_offset:996; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 996, x17, x15, 664, x18)

inst_84:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000062 and fs2 == 1 and fe2 == 0x6f and fm2 == 0x77ff42 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000008 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800062; op2val:0xb7f7ff42; op3val:0x800008; valaddr_reg:x16; val_offset:1008; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1008, x17, x15, 672, x18)

inst_85:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000006 and fs2 == 1 and fe2 == 0x6e and fm2 == 0x05fffa and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00003d and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800006; op2val:0xb705fffa; op3val:0x80003d; valaddr_reg:x16; val_offset:1020; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1020, x17, x15, 680, x18)

inst_86:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000008 and fs2 == 1 and fe2 == 0x6d and fm2 == 0x77fff1 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000002 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800008; op2val:0xb6f7fff1; op3val:0x800002; valaddr_reg:x16; val_offset:1032; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1032, x17, x15, 688, x18)

inst_87:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000032 and fs2 == 1 and fe2 == 0x6c and fm2 == 0x2fffbb and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00000a and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800032; op2val:0xb62fffbb; op3val:0x80000a; valaddr_reg:x16; val_offset:1044; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1044, x17, x15, 696, x18)

inst_88:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000051 and fs2 == 0 and fe2 == 0x68 and fm2 == 0x7fff5e and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000012 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800051; op2val:0x347fff5e; op3val:0x800012; valaddr_reg:x16; val_offset:1056; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1056, x17, x15, 704, x18)

inst_89:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000016 and fs2 == 0 and fe2 == 0x6e and fm2 == 0x21ffe4 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000059 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800016; op2val:0x3721ffe4; op3val:0x800059; valaddr_reg:x16; val_offset:1068; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1068, x17, x15, 712, x18)

inst_90:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000018 and fs2 == 0 and fe2 == 0x6b and fm2 == 0x7fffd0 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000014 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800018; op2val:0x35ffffd0; op3val:0x800014; valaddr_reg:x16; val_offset:1080; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1080, x17, x15, 720, x18)

inst_91:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000023 and fs2 == 0 and fe2 == 0x6e and fm2 == 0x27ffd2 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000056 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800023; op2val:0x3727ffd2; op3val:0x800056; valaddr_reg:x16; val_offset:1092; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1092, x17, x15, 728, x18)

inst_92:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000060 and fs2 == 0 and fe2 == 0x6d and fm2 == 0x3bff73 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000030 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800060; op2val:0x36bbff73; op3val:0x800030; valaddr_reg:x16; val_offset:1104; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1104, x17, x15, 736, x18)

inst_93:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000053 and fs2 == 0 and fe2 == 0x8e and fm2 == 0x45669d and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000046 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x53; op2val:0x4745669d; op3val:0x46; valaddr_reg:x16; val_offset:1116; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1116, x17, x15, 744, x18)

inst_94:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005c and fs2 == 0 and fe2 == 0x8f and fm2 == 0x0590da and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001e and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5c; op2val:0x478590da; op3val:0x1e; valaddr_reg:x16; val_offset:1128; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1128, x17, x15, 752, x18)

inst_95:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000055 and fs2 == 0 and fe2 == 0x8f and fm2 == 0x28a8c2 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000012 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x55; op2val:0x47a8a8c2; op3val:0x12; valaddr_reg:x16; val_offset:1140; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1140, x17, x15, 760, x18)

inst_96:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000044 and fs2 == 0 and fe2 == 0x8f and fm2 == 0x61e266 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000047 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x44; op2val:0x47e1e266; op3val:0x47; valaddr_reg:x16; val_offset:1152; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1152, x17, x15, 768, x18)

inst_97:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000002 and fs2 == 0 and fe2 == 0x94 and fm2 == 0x780064 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000033 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x2; op2val:0x4a780064; op3val:0x33; valaddr_reg:x16; val_offset:1164; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1164, x17, x15, 776, x18)

inst_98:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000044 and fs2 == 0 and fe2 == 0x8f and fm2 == 0x6d2d97 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000039 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x44; op2val:0x47ed2d97; op3val:0x39; valaddr_reg:x16; val_offset:1176; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1176, x17, x15, 784, x18)

inst_99:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002a and fs2 == 0 and fe2 == 0x90 and fm2 == 0x418662 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000031 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x2a; op2val:0x48418662; op3val:0x31; valaddr_reg:x16; val_offset:1188; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1188, x17, x15, 792, x18)

inst_100:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000019 and fs2 == 0 and fe2 == 0x91 and fm2 == 0x2333af and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000062 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x19; op2val:0x48a333af; op3val:0x62; valaddr_reg:x16; val_offset:1200; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1200, x17, x15, 800, x18)

inst_101:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000049 and fs2 == 0 and fe2 == 0x8f and fm2 == 0x600056 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000032 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x49; op2val:0x47e00056; op3val:0x32; valaddr_reg:x16; val_offset:1212; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1212, x17, x15, 808, x18)

inst_102:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004a and fs2 == 0 and fe2 == 0x8f and fm2 == 0x5d306f and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x4a; op2val:0x47dd306f; op3val:0x1; valaddr_reg:x16; val_offset:1224; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1224, x17, x15, 816, x18)

inst_103:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001f and fs2 == 0 and fe2 == 0x91 and fm2 == 0x0410cd and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000048 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x1f; op2val:0x488410cd; op3val:0x48; valaddr_reg:x16; val_offset:1236; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1236, x17, x15, 824, x18)

inst_104:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000061 and fs2 == 0 and fe2 == 0x8f and fm2 == 0x28dde6 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000029 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x61; op2val:0x47a8dde6; op3val:0x29; valaddr_reg:x16; val_offset:1248; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1248, x17, x15, 832, x18)

inst_105:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000059 and fs2 == 0 and fe2 == 0x8f and fm2 == 0x38115f and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000015 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x59; op2val:0x47b8115f; op3val:0x15; valaddr_reg:x16; val_offset:1260; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1260, x17, x15, 840, x18)

inst_106:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000011 and fs2 == 0 and fe2 == 0x91 and fm2 == 0x70ed91 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000036 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x11; op2val:0x48f0ed91; op3val:0x36; valaddr_reg:x16; val_offset:1272; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1272, x17, x15, 848, x18)

inst_107:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000049 and fs2 == 0 and fe2 == 0x8f and fm2 == 0x606f17 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005c and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x49; op2val:0x47e06f17; op3val:0x5c; valaddr_reg:x16; val_offset:1284; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1284, x17, x15, 856, x18)

inst_108:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001d and fs2 == 0 and fe2 == 0x91 and fm2 == 0x0d3da0 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005a and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x1d; op2val:0x488d3da0; op3val:0x5a; valaddr_reg:x16; val_offset:1296; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1296, x17, x15, 864, x18)

inst_109:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000032 and fs2 == 0 and fe2 == 0x90 and fm2 == 0x23d6dc and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001d and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x32; op2val:0x4823d6dc; op3val:0x1d; valaddr_reg:x16; val_offset:1308; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1308, x17, x15, 872, x18)

inst_110:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000041 and fs2 == 0 and fe2 == 0x8f and fm2 == 0x7c1010 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000049 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x41; op2val:0x47fc1010; op3val:0x49; valaddr_reg:x16; val_offset:1320; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1320, x17, x15, 880, x18)

inst_111:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005f and fs2 == 0 and fe2 == 0x8f and fm2 == 0x2c7696 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000014 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5f; op2val:0x47ac7696; op3val:0x14; valaddr_reg:x16; val_offset:1332; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1332, x17, x15, 888, x18)

inst_112:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000018 and fs2 == 0 and fe2 == 0x91 and fm2 == 0x2aaad0 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000025 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x18; op2val:0x48aaaad0; op3val:0x25; valaddr_reg:x16; val_offset:1344; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1344, x17, x15, 896, x18)

inst_113:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005b and fs2 == 0 and fe2 == 0x8f and fm2 == 0x340b56 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000014 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5b; op2val:0x47b40b56; op3val:0x14; valaddr_reg:x16; val_offset:1356; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1356, x17, x15, 904, x18)

inst_114:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000018 and fs2 == 0 and fe2 == 0x91 and fm2 == 0x2aab01 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000044 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x18; op2val:0x48aaab01; op3val:0x44; valaddr_reg:x16; val_offset:1368; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1368, x17, x15, 912, x18)

inst_115:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000043 and fs2 == 0 and fe2 == 0x8f and fm2 == 0x748991 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000004 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x43; op2val:0x47f48991; op3val:0x4; valaddr_reg:x16; val_offset:1380; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1380, x17, x15, 920, x18)

inst_116:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000a and fs2 == 1 and fe2 == 0x91 and fm2 == 0x4ccc3a and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002d and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0xa; op2val:0xc8cccc3a; op3val:0x2d; valaddr_reg:x16; val_offset:1392; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1392, x17, x15, 928, x18)

inst_117:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000a and fs2 == 1 and fe2 == 0x92 and fm2 == 0x19997d and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000011 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0xa; op2val:0xc919997d; op3val:0x11; valaddr_reg:x16; val_offset:1404; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1404, x17, x15, 936, x18)

inst_118:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000040 and fs2 == 1 and fe2 == 0x8f and fm2 == 0x5fff5a and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000052 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x40; op2val:0xc7dfff5a; op3val:0x52; valaddr_reg:x16; val_offset:1416; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1416, x17, x15, 944, x18)

inst_119:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003c and fs2 == 1 and fe2 == 0x8f and fm2 == 0x7fff31 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000060 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3c; op2val:0xc7ffff31; op3val:0x60; valaddr_reg:x16; val_offset:1428; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1428, x17, x15, 952, x18)

inst_120:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000047 and fs2 == 1 and fe2 == 0x8f and fm2 == 0x5f8c7c and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000012 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x47; op2val:0xc7df8c7c; op3val:0x12; valaddr_reg:x16; val_offset:1440; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1440, x17, x15, 960, x18)

inst_121:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000f and fs2 == 1 and fe2 == 0x92 and fm2 == 0x06662e and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000034 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0xf; op2val:0xc906662e; op3val:0x34; valaddr_reg:x16; val_offset:1452; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1452, x17, x15, 968, x18)

inst_122:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005e and fs2 == 1 and fe2 == 0x8f and fm2 == 0x2cef31 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000057 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5e; op2val:0xc7acef31; op3val:0x57; valaddr_reg:x16; val_offset:1464; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1464, x17, x15, 976, x18)

inst_123:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000a and fs2 == 1 and fe2 == 0x92 and fm2 == 0x4bffdd and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000015 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0xa; op2val:0xc94bffdd; op3val:0x15; valaddr_reg:x16; val_offset:1476; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1476, x17, x15, 984, x18)

inst_124:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000038 and fs2 == 1 and fe2 == 0x90 and fm2 == 0x11ffcd and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002c and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x38; op2val:0xc811ffcd; op3val:0x2c; valaddr_reg:x16; val_offset:1488; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1488, x17, x15, 992, x18)

inst_125:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001b and fs2 == 1 and fe2 == 0x91 and fm2 == 0x178dcd and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005a and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x1b; op2val:0xc8978dcd; op3val:0x5a; valaddr_reg:x16; val_offset:1500; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1500, x17, x15, 1000, x18)

inst_126:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000062 and fs2 == 1 and fe2 == 0x8f and fm2 == 0x27199f and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000061 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x62; op2val:0xc7a7199f; op3val:0x61; valaddr_reg:x16; val_offset:1512; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1512, x17, x15, 1008, x18)

inst_127:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000007 and fs2 == 1 and fe2 == 0x93 and fm2 == 0x123f92 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005f and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7; op2val:0xc9923f92; op3val:0x5f; valaddr_reg:x16; val_offset:1524; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1524, x17, x15, 1016, x18)

inst_128:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000030 and fs2 == 1 and fe2 == 0x90 and fm2 == 0x2aa54d and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000005 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x30; op2val:0xc82aa54d; op3val:0x5; valaddr_reg:x16; val_offset:1536; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1536, x17, x15, 1024, x18)

inst_129:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000017 and fs2 == 1 and fe2 == 0x91 and fm2 == 0x32133c and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002c and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x17; op2val:0xc8b2133c; op3val:0x2c; valaddr_reg:x16; val_offset:1548; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1548, x17, x15, 1032, x18)

inst_130:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000005 and fs2 == 1 and fe2 == 0x93 and fm2 == 0x4cca9a and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005f and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5; op2val:0xc9ccca9a; op3val:0x5f; valaddr_reg:x16; val_offset:1560; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1560, x17, x15, 1040, x18)

inst_131:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000045 and fs2 == 1 and fe2 == 0x8f and fm2 == 0x6d7162 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000060 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x45; op2val:0xc7ed7162; op3val:0x60; valaddr_reg:x16; val_offset:1572; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1572, x17, x15, 1048, x18)

inst_132:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000052 and fs2 == 1 and fe2 == 0x8f and fm2 == 0x47cd77 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001f and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x52; op2val:0xc7c7cd77; op3val:0x1f; valaddr_reg:x16; val_offset:1584; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1584, x17, x15, 1056, x18)

inst_133:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000020 and fs2 == 1 and fe2 == 0x90 and fm2 == 0x7fff22 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004e and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x20; op2val:0xc87fff22; op3val:0x4e; valaddr_reg:x16; val_offset:1596; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1596, x17, x15, 1064, x18)

inst_134:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005c and fs2 == 1 and fe2 == 0x8f and fm2 == 0x32161c and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000b and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5c; op2val:0xc7b2161c; op3val:0xb; valaddr_reg:x16; val_offset:1608; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1608, x17, x15, 1072, x18)

inst_135:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000030 and fs2 == 1 and fe2 == 0x90 and fm2 == 0x2aaa98 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000005 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x30; op2val:0xc82aaa98; op3val:0x5; valaddr_reg:x16; val_offset:1620; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1620, x17, x15, 1080, x18)

inst_136:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000038 and fs2 == 1 and fe2 == 0x90 and fm2 == 0x1248de and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000039 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x38; op2val:0xc81248de; op3val:0x39; valaddr_reg:x16; val_offset:1632; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1632, x17, x15, 1088, x18)

inst_137:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000024 and fs2 == 1 and fe2 == 0x90 and fm2 == 0x638dc7 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003d and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x24; op2val:0xc8638dc7; op3val:0x3d; valaddr_reg:x16; val_offset:1644; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1644, x17, x15, 1096, x18)

inst_138:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000024 and fs2 == 1 and fe2 == 0x90 and fm2 == 0x638df5 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000024 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x24; op2val:0xc8638df5; op3val:0x24; valaddr_reg:x16; val_offset:1656; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1656, x17, x15, 1104, x18)

inst_139:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000b and fs2 == 0 and fe2 == 0x91 and fm2 == 0x3a2f4c and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000041 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0xb; op2val:0x48ba2f4c; op3val:0x41; valaddr_reg:x16; val_offset:1668; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1668, x17, x15, 1112, x18)

inst_140:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002f and fs2 == 0 and fe2 == 0x8e and fm2 == 0x2e4c62 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000005 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x2f; op2val:0x472e4c62; op3val:0x5; valaddr_reg:x16; val_offset:1680; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1680, x17, x15, 1120, x18)

inst_141:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002f and fs2 == 0 and fe2 == 0x8d and fm2 == 0x2e4ddf and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000025 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x2f; op2val:0x46ae4ddf; op3val:0x25; valaddr_reg:x16; val_offset:1692; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1692, x17, x15, 1128, x18)

inst_142:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000009 and fs2 == 0 and fe2 == 0x8e and fm2 == 0x63928e and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000026 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x9; op2val:0x4763928e; op3val:0x26; valaddr_reg:x16; val_offset:1704; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1704, x17, x15, 1136, x18)

inst_143:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005c and fs2 == 0 and fe2 == 0x8a and fm2 == 0x32237a and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004b and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5c; op2val:0x4532237a; op3val:0x4b; valaddr_reg:x16; val_offset:1716; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1716, x17, x15, 1144, x18)

inst_144:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000024 and fs2 == 0 and fe2 == 0x8a and fm2 == 0x63aa39 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003e and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x24; op2val:0x4563aa39; op3val:0x3e; valaddr_reg:x16; val_offset:1728; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1728, x17, x15, 1152, x18)

inst_145:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003a and fs2 == 0 and fe2 == 0x89 and fm2 == 0x0d6612 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000048 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3a; op2val:0x448d6612; op3val:0x48; valaddr_reg:x16; val_offset:1740; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1740, x17, x15, 1160, x18)

inst_146:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003e and fs2 == 0 and fe2 == 0x88 and fm2 == 0x045ce7 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000039 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e; op2val:0x44045ce7; op3val:0x39; valaddr_reg:x16; val_offset:1752; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1752, x17, x15, 1168, x18)

inst_147:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000019 and fs2 == 0 and fe2 == 0x88 and fm2 == 0x246b85 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000039 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x19; op2val:0x44246b85; op3val:0x39; valaddr_reg:x16; val_offset:1764; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1764, x17, x15, 1176, x18)

inst_148:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000052 and fs2 == 0 and fe2 == 0x85 and fm2 == 0x4844af and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000012 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x52; op2val:0x42c844af; op3val:0x12; valaddr_reg:x16; val_offset:1776; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1776, x17, x15, 1184, x18)

inst_149:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000059 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x384509 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x59; op2val:0x42384509; op3val:0x3; valaddr_reg:x16; val_offset:1788; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1788, x17, x15, 1192, x18)

inst_150:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003a and fs2 == 0 and fe2 == 0x84 and fm2 == 0x11b961 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000040 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3a; op2val:0x4211b961; op3val:0x40; valaddr_reg:x16; val_offset:1800; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1800, x17, x15, 1200, x18)

inst_151:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000022 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x027878 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000054 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x22; op2val:0x42027878; op3val:0x54; valaddr_reg:x16; val_offset:1812; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1812, x17, x15, 1208, x18)

inst_152:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000050 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x6d999a and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000051 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x50; op2val:0x40ed999a; op3val:0x51; valaddr_reg:x16; val_offset:1824; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1824, x17, x15, 1216, x18)

inst_153:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000b and fs2 == 0 and fe2 == 0x83 and fm2 == 0x4a2e8c and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000015 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0xb; op2val:0x41ca2e8c; op3val:0x15; valaddr_reg:x16; val_offset:1836; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1836, x17, x15, 1224, x18)

inst_154:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000011 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x43c3c4 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004f and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x11; op2val:0x4143c3c4; op3val:0x4f; valaddr_reg:x16; val_offset:1848; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1848, x17, x15, 1232, x18)

inst_155:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x416c17 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000047 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5a; op2val:0x3fc16c17; op3val:0x47; valaddr_reg:x16; val_offset:1860; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1860, x17, x15, 1240, x18)

inst_156:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000051 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x69e065 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000004 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x51; op2val:0x3ee9e065; op3val:0x4; valaddr_reg:x16; val_offset:1872; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1872, x17, x15, 1248, x18)

inst_157:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005d and fs2 == 0 and fe2 == 0x7d and fm2 == 0x0f23c9 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000009 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5d; op2val:0x3e8f23c9; op3val:0x9; valaddr_reg:x16; val_offset:1884; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1884, x17, x15, 1256, x18)

inst_158:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0e739d and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003c and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e; op2val:0x3f8e739d; op3val:0x3c; valaddr_reg:x16; val_offset:1896; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1896, x17, x15, 1264, x18)

inst_159:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000006 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x6aaaab and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000053 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x6; op2val:0x416aaaab; op3val:0x53; valaddr_reg:x16; val_offset:1908; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1908, x17, x15, 1272, x18)

inst_160:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005c and fs2 == 0 and fe2 == 0x7c and fm2 == 0x3d37a7 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000e and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5c; op2val:0x3e3d37a7; op3val:0xe; valaddr_reg:x16; val_offset:1920; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1920, x17, x15, 1280, x18)

inst_161:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000056 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x2349ad and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000d and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x56; op2val:0x3e2349ad; op3val:0xd; valaddr_reg:x16; val_offset:1932; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1932, x17, x15, 1288, x18)

inst_162:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000005 and fs2 == 1 and fe2 == 0x92 and fm2 == 0x4ccbcd and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000051 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5; op2val:0xc94ccbcd; op3val:0x51; valaddr_reg:x16; val_offset:1944; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1944, x17, x15, 1296, x18)

inst_163:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000029 and fs2 == 1 and fe2 == 0x8e and fm2 == 0x47cd9c and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000013 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x29; op2val:0xc747cd9c; op3val:0x13; valaddr_reg:x16; val_offset:1956; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1956, x17, x15, 1304, x18)

inst_164:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000020 and fs2 == 1 and fe2 == 0x8d and fm2 == 0x7ffb30 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004e and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x20; op2val:0xc6fffb30; op3val:0x4e; valaddr_reg:x16; val_offset:1968; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1968, x17, x15, 1312, x18)

inst_165:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000058 and fs2 == 1 and fe2 == 0x8b and fm2 == 0x3a2746 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000051 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x58; op2val:0xc5ba2746; op3val:0x51; valaddr_reg:x16; val_offset:1980; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1980, x17, x15, 1320, x18)

inst_166:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002f and fs2 == 1 and fe2 == 0x8b and fm2 == 0x2e4931 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000013 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x2f; op2val:0xc5ae4931; op3val:0x13; valaddr_reg:x16; val_offset:1992; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1992, x17, x15, 1328, x18)

inst_167:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000d and fs2 == 1 and fe2 == 0x8c and fm2 == 0x1d7b62 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000030 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0xd; op2val:0xc61d7b62; op3val:0x30; valaddr_reg:x16; val_offset:2004; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 2004, x17, x15, 1336, x18)

inst_168:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003d and fs2 == 1 and fe2 == 0x89 and fm2 == 0x063c54 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001e and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d; op2val:0xc4863c54; op3val:0x1e; valaddr_reg:x16; val_offset:2016; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 2016, x17, x15, 1344, x18)

inst_169:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x88 and fm2 == 0x01fefc and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000a and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f; op2val:0xc401fefc; op3val:0xa; valaddr_reg:x16; val_offset:2028; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 2028, x17, x15, 1352, x18)
addi x16,x16,2040

inst_170:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000037 and fs2 == 1 and fe2 == 0x87 and fm2 == 0x14561c and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000044 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x37; op2val:0xc394561c; op3val:0x44; valaddr_reg:x16; val_offset:0; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 0, x17, x15, 1360, x18)

inst_171:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004f and fs2 == 1 and fe2 == 0x85 and fm2 == 0x4f5dfa and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x4f; op2val:0xc2cf5dfa; op3val:0x2; valaddr_reg:x16; val_offset:12; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 12, x17, x15, 1368, x18)

inst_172:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000014 and fs2 == 1 and fe2 == 0x86 and fm2 == 0x4b199a and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000023 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x14; op2val:0xc34b199a; op3val:0x23; valaddr_reg:x16; val_offset:24; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 24, x17, x15, 1376, x18)

inst_173:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000008 and fs2 == 1 and fe2 == 0x86 and fm2 == 0x7d0000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000019 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x8; op2val:0xc37d0000; op3val:0x19; valaddr_reg:x16; val_offset:36; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 36, x17, x15, 1384, x18)

inst_174:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000040 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x6d4000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004c and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x40; op2val:0xc16d4000; op3val:0x4c; valaddr_reg:x16; val_offset:48; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 48, x17, x15, 1392, x18)

inst_175:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000030 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1b5555 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002f and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x30; op2val:0xc11b5555; op3val:0x2f; valaddr_reg:x16; val_offset:60; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 60, x17, x15, 1400, x18)

inst_176:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000058 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x700000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005c and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x58; op2val:0xbff00000; op3val:0x5c; valaddr_reg:x16; val_offset:72; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 72, x17, x15, 1408, x18)

inst_177:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000049 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x47e3f2 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000f and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x49; op2val:0xbfc7e3f2; op3val:0xf; valaddr_reg:x16; val_offset:84; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 84, x17, x15, 1416, x18)

inst_178:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000004 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x600000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004f and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x4; op2val:0x40600000; op3val:0x4f; valaddr_reg:x16; val_offset:96; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 96, x17, x15, 1424, x18)

inst_179:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000008 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x100000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000018 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x8; op2val:0xbf900000; op3val:0x18; valaddr_reg:x16; val_offset:108; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 108, x17, x15, 1432, x18)

inst_180:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000050 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x033333 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003a and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x50; op2val:0x3f033333; op3val:0x3a; valaddr_reg:x16; val_offset:120; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 120, x17, x15, 1440, x18)

inst_181:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000048 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x638e39 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x48; op2val:0xbde38e39; op3val:0x1; valaddr_reg:x16; val_offset:132; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 132, x17, x15, 1448, x18)

inst_182:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000015 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x492492 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000026 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x15; op2val:0x3fc92492; op3val:0x26; valaddr_reg:x16; val_offset:144; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 144, x17, x15, 1456, x18)

inst_183:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x38e38e and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005e and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f; op2val:0x3fb8e38e; op3val:0x5e; valaddr_reg:x16; val_offset:156; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 156, x17, x15, 1464, x18)

inst_184:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000053 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1b19a3 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000033 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x53; op2val:0x3f1b19a3; op3val:0x33; valaddr_reg:x16; val_offset:168; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 168, x17, x15, 1472, x18)

inst_185:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000023 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1fffe9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000029 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800023; op2val:0x401fffe9; op3val:0x3f800029; valaddr_reg:x16; val_offset:180; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 180, x17, x15, 1480, x18)

inst_186:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000059 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0fffc3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00004e and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800059; op2val:0x400fffc3; op3val:0x3f80004e; valaddr_reg:x16; val_offset:192; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 192, x17, x15, 1488, x18)

inst_187:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000050 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x07ffc4 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000031 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800050; op2val:0x4007ffc4; op3val:0x3f800031; valaddr_reg:x16; val_offset:204; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 204, x17, x15, 1496, x18)

inst_188:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000055 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x03ffb3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000015 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800055; op2val:0x4003ffb3; op3val:0x3f800015; valaddr_reg:x16; val_offset:216; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 216, x17, x15, 1504, x18)

inst_189:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00002a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01ffed and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00002f and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f80002a; op2val:0x4001ffed; op3val:0x3f80002f; valaddr_reg:x16; val_offset:228; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 228, x17, x15, 1512, x18)

inst_190:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000052 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ffcb and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00003c and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800052; op2val:0x4000ffcb; op3val:0x3f80003c; valaddr_reg:x16; val_offset:240; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 240, x17, x15, 1520, x18)

inst_191:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000040 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x007fd4 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000028 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800040; op2val:0x40007fd4; op3val:0x3f800028; valaddr_reg:x16; val_offset:252; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 252, x17, x15, 1528, x18)

inst_192:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00005d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x003fbb and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000031 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f80005d; op2val:0x40003fbb; op3val:0x3f800031; valaddr_reg:x16; val_offset:264; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 264, x17, x15, 1536, x18)

inst_193:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00003f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x001fca and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000013 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f80003f; op2val:0x40001fca; op3val:0x3f800013; valaddr_reg:x16; val_offset:276; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 276, x17, x15, 1544, x18)

inst_194:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000055 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000fca and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00003e and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800055; op2val:0x40000fca; op3val:0x3f80003e; valaddr_reg:x16; val_offset:288; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 288, x17, x15, 1552, x18)

inst_195:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00004e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0007d0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00003d and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f80004e; op2val:0x400007d0; op3val:0x3f80003d; valaddr_reg:x16; val_offset:300; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 300, x17, x15, 1560, x18)

inst_196:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00003f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0003d2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000023 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f80003f; op2val:0x400003d2; op3val:0x3f800023; valaddr_reg:x16; val_offset:312; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 312, x17, x15, 1568, x18)

inst_197:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000036 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0001f1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00004f and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800036; op2val:0x400001f1; op3val:0x3f80004f; valaddr_reg:x16; val_offset:324; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 324, x17, x15, 1576, x18)

inst_198:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000021 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0000f9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000035 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800021; op2val:0x400000f9; op3val:0x3f800035; valaddr_reg:x16; val_offset:336; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 336, x17, x15, 1584, x18)

inst_199:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00002b and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000076 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000043 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f80002b; op2val:0x40000076; op3val:0x3f800043; valaddr_reg:x16; val_offset:348; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 348, x17, x15, 1592, x18)

inst_200:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000041 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00001c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00003a and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800041; op2val:0x4000001c; op3val:0x3f80003a; valaddr_reg:x16; val_offset:360; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 360, x17, x15, 1600, x18)

inst_201:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000019 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000017 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000021 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800019; op2val:0x40000017; op3val:0x3f800021; valaddr_reg:x16; val_offset:372; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 372, x17, x15, 1608, x18)

inst_202:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00004c and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7fffb7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00002f and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f80004c; op2val:0x3fffffb7; op3val:0x3f80002f; valaddr_reg:x16; val_offset:384; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 384, x17, x15, 1616, x18)

inst_203:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000010 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000008 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000021 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800010; op2val:0x40000008; op3val:0x3f800021; valaddr_reg:x16; val_offset:396; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 396, x17, x15, 1624, x18)

inst_204:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000003 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000023 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000045 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800003; op2val:0x40000023; op3val:0x3f800045; valaddr_reg:x16; val_offset:408; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 408, x17, x15, 1632, x18)

inst_205:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000017 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7fffd9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800017; op2val:0x3fffffd9; op3val:0x3f800003; valaddr_reg:x16; val_offset:420; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 420, x17, x15, 1640, x18)

inst_206:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00003f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7fffe1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00005d and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f80003f; op2val:0x3fffffe1; op3val:0x3f80005d; valaddr_reg:x16; val_offset:432; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 432, x17, x15, 1648, x18)

inst_207:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000023 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ffff5 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00003a and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800023; op2val:0x3ffffff5; op3val:0x3f80003a; valaddr_reg:x16; val_offset:444; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 444, x17, x15, 1656, x18)

inst_208:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000060 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7ffde0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000058 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800060; op2val:0xbefffde0; op3val:0x3f800058; valaddr_reg:x16; val_offset:456; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 456, x17, x15, 1664, x18)

inst_209:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00000b and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7fff22 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000019 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f80000b; op2val:0xbe7fff22; op3val:0x3f800019; valaddr_reg:x16; val_offset:468; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 468, x17, x15, 1672, x18)

inst_210:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00005b and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7ffbfa and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000035 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f80005b; op2val:0xbdfffbfa; op3val:0x3f800035; valaddr_reg:x16; val_offset:480; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 480, x17, x15, 1680, x18)

inst_211:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00003d and fs2 == 1 and fe2 == 0x7a and fm2 == 0x7ffaa6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000027 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f80003d; op2val:0xbd7ffaa6; op3val:0x3f800027; valaddr_reg:x16; val_offset:492; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 492, x17, x15, 1688, x18)

inst_212:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000043 and fs2 == 1 and fe2 == 0x79 and fm2 == 0x7ff1ba and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000037 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800043; op2val:0xbcfff1ba; op3val:0x3f800037; valaddr_reg:x16; val_offset:504; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 504, x17, x15, 1696, x18)

inst_213:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000031 and fs2 == 1 and fe2 == 0x78 and fm2 == 0x7ffa9e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00000a and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800031; op2val:0xbc7ffa9e; op3val:0x3f80000a; valaddr_reg:x16; val_offset:516; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 516, x17, x15, 1704, x18)

inst_214:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00003a and fs2 == 1 and fe2 == 0x77 and fm2 == 0x7fc58c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00003a and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f80003a; op2val:0xbbffc58c; op3val:0x3f80003a; valaddr_reg:x16; val_offset:528; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 528, x17, x15, 1712, x18)

inst_215:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00004e and fs2 == 1 and fe2 == 0x76 and fm2 == 0x7f5364 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000056 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f80004e; op2val:0xbb7f5364; op3val:0x3f800056; valaddr_reg:x16; val_offset:540; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 540, x17, x15, 1720, x18)

inst_216:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000020 and fs2 == 1 and fe2 == 0x75 and fm2 == 0x7fcfc0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00000c and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800020; op2val:0xbaffcfc0; op3val:0x3f80000c; valaddr_reg:x16; val_offset:552; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 552, x17, x15, 1728, x18)

inst_217:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00000d and fs2 == 1 and fe2 == 0x74 and fm2 == 0x7e37e6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000039 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f80000d; op2val:0xba7e37e6; op3val:0x3f800039; valaddr_reg:x16; val_offset:564; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 564, x17, x15, 1736, x18)

inst_218:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000060 and fs2 == 1 and fe2 == 0x73 and fm2 == 0x7ccf42 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000033 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800060; op2val:0xb9fccf42; op3val:0x3f800033; valaddr_reg:x16; val_offset:576; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 576, x17, x15, 1744, x18)

inst_219:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000037 and fs2 == 1 and fe2 == 0x72 and fm2 == 0x765f96 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00004d and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800037; op2val:0xb9765f96; op3val:0x3f80004d; valaddr_reg:x16; val_offset:588; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 588, x17, x15, 1752, x18)

inst_220:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000007 and fs2 == 1 and fe2 == 0x71 and fm2 == 0x79fff2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000018 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800007; op2val:0xb8f9fff2; op3val:0x3f800018; valaddr_reg:x16; val_offset:600; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 600, x17, x15, 1760, x18)

inst_221:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000057 and fs2 == 1 and fe2 == 0x70 and fm2 == 0x607f67 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00003f and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800057; op2val:0xb8607f67; op3val:0x3f80003f; valaddr_reg:x16; val_offset:612; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 612, x17, x15, 1768, x18)

inst_222:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000026 and fs2 == 1 and fe2 == 0x6f and fm2 == 0x6effb9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000011 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800026; op2val:0xb7eeffb9; op3val:0x3f800011; valaddr_reg:x16; val_offset:624; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 624, x17, x15, 1776, x18)

inst_223:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000044 and fs2 == 1 and fe2 == 0x6e and fm2 == 0x1bffad and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000032 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800044; op2val:0xb71bffad; op3val:0x3f800032; valaddr_reg:x16; val_offset:636; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 636, x17, x15, 1784, x18)

inst_224:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000030 and fs2 == 1 and fe2 == 0x6b and fm2 == 0x6fffa6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000031 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800030; op2val:0xb5efffa6; op3val:0x3f800031; valaddr_reg:x16; val_offset:648; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 648, x17, x15, 1792, x18)

inst_225:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000050 and fs2 == 0 and fe2 == 0x6a and fm2 == 0x7fff60 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000028 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800050; op2val:0x357fff60; op3val:0x3f800028; valaddr_reg:x16; val_offset:660; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 660, x17, x15, 1800, x18)

inst_226:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000056 and fs2 == 0 and fe2 == 0x6d and fm2 == 0x7fff54 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000050 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800056; op2val:0x36ffff54; op3val:0x3f800050; valaddr_reg:x16; val_offset:672; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 672, x17, x15, 1808, x18)

inst_227:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00002b and fs2 == 0 and fe2 == 0x6d and fm2 == 0x7fffaa and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000048 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f80002b; op2val:0x36ffffaa; op3val:0x3f800048; valaddr_reg:x16; val_offset:684; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 684, x17, x15, 1816, x18)

inst_228:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000003 and fs2 == 0 and fe2 == 0x6e and fm2 == 0x1dfffc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000053 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800003; op2val:0x371dfffc; op3val:0x3f800053; valaddr_reg:x16; val_offset:696; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 696, x17, x15, 1824, x18)

inst_229:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000019 and fs2 == 0 and fe2 == 0x6c and fm2 == 0x1fffe1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000016 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800019; op2val:0x361fffe1; op3val:0x3f800016; valaddr_reg:x16; val_offset:708; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 708, x17, x15, 1832, x18)

inst_230:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000043 and fs2 == 0 and fe2 == 0x67 and fm2 == 0x7fff7a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000002 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800043; op2val:0x33ffff7a; op3val:0x3f800002; valaddr_reg:x16; val_offset:720; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 720, x17, x15, 1840, x18)

inst_231:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001b and fs2 == 0 and fe2 == 0x90 and fm2 == 0x17b4fb and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005a and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x1b; op2val:0x4817b4fb; op3val:0x5a; valaddr_reg:x16; val_offset:732; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 732, x17, x15, 1848, x18)

inst_232:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000012 and fs2 == 0 and fe2 == 0x8f and fm2 == 0x63905c and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004d and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x12; op2val:0x47e3905c; op3val:0x4d; valaddr_reg:x16; val_offset:744; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 744, x17, x15, 1856, x18)

inst_233:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003e and fs2 == 0 and fe2 == 0x8d and fm2 == 0x0421f8 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001d and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e; op2val:0x468421f8; op3val:0x1d; valaddr_reg:x16; val_offset:756; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 756, x17, x15, 1864, x18)

inst_234:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001a and fs2 == 0 and fe2 == 0x8d and fm2 == 0x1d8d9e and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000031 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x1a; op2val:0x469d8d9e; op3val:0x31; valaddr_reg:x16; val_offset:768; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 768, x17, x15, 1872, x18)

inst_235:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000028 and fs2 == 0 and fe2 == 0x8b and fm2 == 0x4cdf66 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005d and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x28; op2val:0x45ccdf66; op3val:0x5d; valaddr_reg:x16; val_offset:780; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 780, x17, x15, 1880, x18)

inst_236:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000055 and fs2 == 0 and fe2 == 0x89 and fm2 == 0x40cdee and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000023 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x55; op2val:0x44c0cdee; op3val:0x23; valaddr_reg:x16; val_offset:792; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 792, x17, x15, 1888, x18)

inst_237:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000f and fs2 == 0 and fe2 == 0x8b and fm2 == 0x08b222 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004e and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0xf; op2val:0x4588b222; op3val:0x4e; valaddr_reg:x16; val_offset:804; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 804, x17, x15, 1896, x18)

inst_238:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000044 and fs2 == 0 and fe2 == 0x87 and fm2 == 0x7121e2 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001a and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x44; op2val:0x43f121e2; op3val:0x1a; valaddr_reg:x16; val_offset:816; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 816, x17, x15, 1904, x18)

inst_239:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000041 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x7d6666 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000057 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x41; op2val:0x437d6666; op3val:0x57; valaddr_reg:x16; val_offset:828; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 828, x17, x15, 1912, x18)

inst_240:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000010 and fs2 == 0 and fe2 == 0x88 and fm2 == 0x003000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000c and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x10; op2val:0x44003000; op3val:0xc; valaddr_reg:x16; val_offset:840; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 840, x17, x15, 1920, x18)

inst_241:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002e and fs2 == 0 and fe2 == 0x85 and fm2 == 0x35642d and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004c and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x2e; op2val:0x42b5642d; op3val:0x4c; valaddr_reg:x16; val_offset:852; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 852, x17, x15, 1928, x18)

inst_242:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000038 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x151249 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000027 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x38; op2val:0x42151249; op3val:0x27; valaddr_reg:x16; val_offset:864; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 864, x17, x15, 1936, x18)

inst_243:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000020 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x09c000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004e and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x20; op2val:0x4209c000; op3val:0x4e; valaddr_reg:x16; val_offset:876; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 876, x17, x15, 1944, x18)

inst_244:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000052 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5a2577 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002f and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x52; op2val:0x40da2577; op3val:0x2f; valaddr_reg:x16; val_offset:888; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 888, x17, x15, 1952, x18)

inst_245:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000041 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000004 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x41; op2val:0x40800000; op3val:0x4; valaddr_reg:x16; val_offset:900; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 900, x17, x15, 1960, x18)

inst_246:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000053 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2818ad and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005a and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x53; op2val:0x402818ad; op3val:0x5a; valaddr_reg:x16; val_offset:912; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 912, x17, x15, 1968, x18)

inst_247:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000042 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05d174 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004a and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x42; op2val:0x4005d174; op3val:0x4a; valaddr_reg:x16; val_offset:924; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 924, x17, x15, 1976, x18)

inst_248:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x679e7a and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000019 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f; op2val:0x3f679e7a; op3val:0x19; valaddr_reg:x16; val_offset:936; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 936, x17, x15, 1984, x18)

inst_249:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000054 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x400000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002f and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54; op2val:0x3f400000; op3val:0x2f; valaddr_reg:x16; val_offset:948; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 948, x17, x15, 1992, x18)

inst_250:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004c and fs2 == 0 and fe2 == 0x7d and fm2 == 0x650d79 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001a and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x4c; op2val:0x3ee50d79; op3val:0x1a; valaddr_reg:x16; val_offset:960; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 960, x17, x15, 2000, x18)

inst_251:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x44ec4f and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000006 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0xd; op2val:0x3f44ec4f; op3val:0x6; valaddr_reg:x16; val_offset:972; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 972, x17, x15, 2008, x18)

inst_252:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000052 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x79c190 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000026 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x52; op2val:0x3ef9c190; op3val:0x26; valaddr_reg:x16; val_offset:984; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 984, x17, x15, 2016, x18)

inst_253:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x600000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005a and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x1a; op2val:0x40600000; op3val:0x5a; valaddr_reg:x16; val_offset:996; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 996, x17, x15, 2024, x18)
RVTEST_SIGBASE(x15,signature_x15_2)

inst_254:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000d and fs2 == 1 and fe2 == 0x91 and fm2 == 0x1d88ea and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000061 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0xd; op2val:0xc89d88ea; op3val:0x61; valaddr_reg:x16; val_offset:1008; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1008, x17, x15, 0, x18)

inst_255:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000039 and fs2 == 1 and fe2 == 0x8e and fm2 == 0x0fb690 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005a and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39; op2val:0xc70fb690; op3val:0x5a; valaddr_reg:x16; val_offset:1020; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1020, x17, x15, 8, x18)

inst_256:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000035 and fs2 == 1 and fe2 == 0x8d and fm2 == 0x1a8fa9 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000021 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x35; op2val:0xc69a8fa9; op3val:0x21; valaddr_reg:x16; val_offset:1032; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1032, x17, x15, 16, x18)

inst_257:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000c and fs2 == 1 and fe2 == 0x8e and fm2 == 0x2aa6c0 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002f and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0xc; op2val:0xc72aa6c0; op3val:0x2f; valaddr_reg:x16; val_offset:1044; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1044, x17, x15, 24, x18)

inst_258:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000037 and fs2 == 1 and fe2 == 0x8b and fm2 == 0x14ebc8 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002b and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x37; op2val:0xc594ebc8; op3val:0x2b; valaddr_reg:x16; val_offset:1056; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1056, x17, x15, 32, x18)

inst_259:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000058 and fs2 == 1 and fe2 == 0x89 and fm2 == 0x3a2a2f and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000c and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x58; op2val:0xc4ba2a2f; op3val:0xc; valaddr_reg:x16; val_offset:1068; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1068, x17, x15, 40, x18)

inst_260:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000055 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x408545 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004f and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x55; op2val:0xc4408545; op3val:0x4f; valaddr_reg:x16; val_offset:1080; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1080, x17, x15, 48, x18)

inst_261:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005e and fs2 == 1 and fe2 == 0x87 and fm2 == 0x2e1df5 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000022 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5e; op2val:0xc3ae1df5; op3val:0x22; valaddr_reg:x16; val_offset:1092; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1092, x17, x15, 56, x18)

inst_262:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000047 and fs2 == 1 and fe2 == 0x86 and fm2 == 0x657e32 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005a and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x47; op2val:0xc3657e32; op3val:0x5a; valaddr_reg:x16; val_offset:1104; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1104, x17, x15, 64, x18)

inst_263:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000019 and fs2 == 1 and fe2 == 0x87 and fm2 == 0x226148 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000049 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x19; op2val:0xc3a26148; op3val:0x49; valaddr_reg:x16; val_offset:1116; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1116, x17, x15, 72, x18)

inst_264:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000058 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x399746 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000d and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x58; op2val:0xc2399746; op3val:0xd; valaddr_reg:x16; val_offset:1128; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1128, x17, x15, 80, x18)

inst_265:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000045 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x655555 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000046 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x45; op2val:0xc1e55555; op3val:0x46; valaddr_reg:x16; val_offset:1140; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1140, x17, x15, 88, x18)

inst_266:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005e and fs2 == 1 and fe2 == 0x82 and fm2 == 0x2546cf and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000035 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5e; op2val:0xc12546cf; op3val:0x35; valaddr_reg:x16; val_offset:1152; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1152, x17, x15, 96, x18)

inst_267:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x81 and fm2 == 0x76db6e and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001a and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f; op2val:0xc0f6db6e; op3val:0x1a; valaddr_reg:x16; val_offset:1164; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1164, x17, x15, 104, x18)

inst_268:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000003 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x135555 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000023 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3; op2val:0xc2935555; op3val:0x23; valaddr_reg:x16; val_offset:1176; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1176, x17, x15, 112, x18)

inst_269:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000029 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3512bb and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000063 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x29; op2val:0xbf3512bb; op3val:0x63; valaddr_reg:x16; val_offset:1188; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1188, x17, x15, 120, x18)

inst_270:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x2c7692 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000030 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5f; op2val:0xbe2c7692; op3val:0x30; valaddr_reg:x16; val_offset:1200; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1200, x17, x15, 128, x18)

inst_271:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003d and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0a7de7 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000062 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d; op2val:0x3f8a7de7; op3val:0x62; valaddr_reg:x16; val_offset:1212; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1212, x17, x15, 136, x18)

inst_272:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000055 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x34b4b5 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004c and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x55; op2val:0x3f34b4b5; op3val:0x4c; valaddr_reg:x16; val_offset:1224; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1224, x17, x15, 144, x18)

inst_273:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x300000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000013 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x1; op2val:0x41300000; op3val:0x13; valaddr_reg:x16; val_offset:1236; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1236, x17, x15, 152, x18)

inst_274:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000022 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x70f0f1 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000005 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x22; op2val:0x3cf0f0f1; op3val:0x5; valaddr_reg:x16; val_offset:1248; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1248, x17, x15, 160, x18)

inst_275:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x430c31 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000062 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f; op2val:0x3fc30c31; op3val:0x62; valaddr_reg:x16; val_offset:1260; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1260, x17, x15, 168, x18)

inst_276:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00000c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2ffffc and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000019 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f00000c; op2val:0x402ffffc; op3val:0x7f000019; valaddr_reg:x16; val_offset:1272; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1272, x17, x15, 176, x18)

inst_277:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000050 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3bffbc and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000063 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f000050; op2val:0x403bffbc; op3val:0x7f000063; valaddr_reg:x16; val_offset:1284; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1284, x17, x15, 184, x18)

inst_278:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000035 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3dffd9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000050 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f000035; op2val:0x403dffd9; op3val:0x7f000050; valaddr_reg:x16; val_offset:1296; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1296, x17, x15, 192, x18)

inst_279:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000017 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3effe3 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00000b and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f000017; op2val:0x403effe3; op3val:0x7f00000b; valaddr_reg:x16; val_offset:1308; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1308, x17, x15, 200, x18)

inst_280:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3f8012 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000028 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f000001; op2val:0x403f8012; op3val:0x7f000028; valaddr_reg:x16; val_offset:1320; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1320, x17, x15, 208, x18)

inst_281:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00002f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fbfc8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00001d and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f00002f; op2val:0x403fbfc8; op3val:0x7f00001d; valaddr_reg:x16; val_offset:1332; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1332, x17, x15, 216, x18)

inst_282:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000025 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fefe0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000030 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f000025; op2val:0x403fefe0; op3val:0x7f000030; valaddr_reg:x16; val_offset:1344; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1344, x17, x15, 224, x18)

inst_283:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000029 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3ff7cb and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000012 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f000029; op2val:0x403ff7cb; op3val:0x7f000012; valaddr_reg:x16; val_offset:1356; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1356, x17, x15, 232, x18)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
test_fp:
.word 0x4a
.word 0x3e0a60dd
.word 0xb
.word 0x7f000031
.word 0x401fffdd
.word 0x7f000035
.word 0x7f00000c
.word 0x7f00000c
.word 0x7f000019
.word 0x7f00001e
.word 0x4037fffe
.word 0x7f000053
.word 0x7f000050
.word 0x403bffbc
.word 0x403bffbc
.word 0x7f000035
.word 0x7f000035
.word 0x7f000035
.word 0x7f000017
.word 0x7f000017
.word 0x7f000017
.word 0x7f000001
.word 0x403f8012
.word 0x7f000001
.word 0x7f00002f
.word 0x403fbfc8
.word 0x403fbfc8
.word 0x7f00004c
.word 0x403fdfb9
.word 0x7f000057
.word 0x7f000025
.word 0x7f000025
.word 0x7f000030
.word 0x7f000029
.word 0x403ff7cb
.word 0x7f000029
.word 0x7f000036
.word 0x403ffbbf
.word 0x7f000021
.word 0x7f000002
.word 0x403ffe13
.word 0x7f00002c
.word 0x7f000063
.word 0x403ffe89
.word 0x7f00003b
.word 0x7f000032
.word 0x403fff3f
.word 0x7f000014
.word 0x7f00001c
.word 0x403fffbf
.word 0x7f000053
.word 0x7f000046
.word 0x403fff95
.word 0x7f00003d
.word 0x7f000063
.word 0x403fff88
.word 0x7f000059
.word 0x7f00003f
.word 0x403fffbb
.word 0x7f000044
.word 0x7f000033
.word 0x403fffce
.word 0x7f00003d
.word 0x7f000014
.word 0x40400005
.word 0x7f00004c
.word 0x7f000015
.word 0x403fffe7
.word 0x7f000010
.word 0x7f000001
.word 0x4040001e
.word 0x7f000042
.word 0x7f00004a
.word 0xbeffff30
.word 0x7f00000e
.word 0x7f00000e
.word 0xbf3fffbb
.word 0x7f000017
.word 0x7f000062
.word 0xbf5ffedf
.word 0x7f00003a
.word 0x7f000005
.word 0xbf6fffc3
.word 0x7f000019
.word 0x7f000012
.word 0xbf77ff8d
.word 0x7f000027
.word 0x7f000023
.word 0xbf7bff77
.word 0x7f000021
.word 0x7f000051
.word 0xbf7dfee1
.word 0x7f00003e
.word 0x7f000049
.word 0xbf7efee7
.word 0x7f000043
.word 0x7f00004d
.word 0xbf7f7ef6
.word 0x7f000037
.word 0x7f000055
.word 0xbf7fbef0
.word 0x7f000032
.word 0x7f000018
.word 0xbf7fdf8e
.word 0x7f000020
.word 0x7f000036
.word 0xbf7fef06
.word 0x7f000046
.word 0x7f000011
.word 0xbf7ff7ba
.word 0x7f000011
.word 0x7f000023
.word 0xbf7ffb7c
.word 0x7f00001e
.word 0x7f00004c
.word 0xbf7ffcc8
.word 0x7f00004f
.word 0x7f00000c
.word 0xbf7ffe38
.word 0x7f000057
.word 0x7f00003c
.word 0xbf7ffec2
.word 0x7f000022
.word 0x7f00003f
.word 0xbf7fff3e
.word 0x7f000001
.word 0x7f00002c
.word 0xbf7fff74
.word 0x7f000009
.word 0x7f000004
.word 0xbf7fffe2
.word 0x7f000002
.word 0x7f00002d
.word 0xbf7fff78
.word 0x7f000012
.word 0x7f000058
.word 0xbf7fff3c
.word 0x7f000007
.word 0x7f00002c
.word 0xbf7fff34
.word 0x7f000038
.word 0x80002f
.word 0x401ffff2
.word 0x800059
.word 0x800062
.word 0x400fff94
.word 0x800004
.word 0x80000f
.word 0x4007ffff
.word 0x80001d
.word 0x80002f
.word 0x4003fffc
.word 0x800059
.word 0x800005
.word 0x40020012
.word 0x80002f
.word 0x80004d
.word 0x4000ffdc
.word 0x800053
.word 0x80000c
.word 0x40008019
.word 0x80004b
.word 0x80002b
.word 0x40003ff6
.word 0x800043
.word 0x80005b
.word 0x40001fd1
.word 0x800058
.word 0x80005e
.word 0x40000fd2
.word 0x800060
.word 0x800021
.word 0x40000801
.word 0x800044
.word 0x80004c
.word 0x400003b5
.word 0x800002
.word 0x80001c
.word 0x400001f6
.word 0x800024
.word 0x800045
.word 0x400000e4
.word 0x800053
.word 0x80001a
.word 0x40000090
.word 0x800054
.word 0x800039
.word 0x40000016
.word 0x80001e
.word 0x800025
.word 0x4000000b
.word 0x800021
.word 0x800054
.word 0x3fffffd3
.word 0x80005b
.word 0x80005e
.word 0x3fffff8b
.word 0x800037
.word 0x800061
.word 0x3fffff9d
.word 0x800057
.word 0x800058
.word 0x3fffff58
.word 0x800004
.word 0x800017
.word 0x3fffffdb
.word 0x800007
.word 0x80000f
.word 0x4000001e
.word 0x80005a
.word 0x800039
.word 0xbeffff4e
.word 0x800010
.word 0x800016
.word 0xbe7ffd2c
.word 0x800055
.word 0x80004a
.word 0xbdfffeec
.word 0x800008
.word 0x80000a
.word 0xbd7ff44c
.word 0x80005d
.word 0x80000c
.word 0xbcfff0a8
.word 0x80003d
.word 0x800059
.word 0xbc7fec4e
.word 0x800026
.word 0x800062
.word 0xbbffb63c
.word 0x800049
.word 0x800035
.word 0xbb7fc596
.word 0x80001d
.word 0x800046
.word 0xbaff8b74
.word 0x80001d
.word 0x800005
.word 0xba7fbff6
.word 0x800008
.word 0x800030
.word 0xb9fb2fa2
.word 0x80004d
.word 0x80000d
.word 0xb9751fe7
.word 0x800057
.word 0x80005c
.word 0xb8ee7f55
.word 0x800046
.word 0x80000f
.word 0xb855ffe7
.word 0x800054
.word 0x800062
.word 0xb7f7ff42
.word 0x800008
.word 0x800006
.word 0xb705fffa
.word 0x80003d
.word 0x800008
.word 0xb6f7fff1
.word 0x800002
.word 0x800032
.word 0xb62fffbb
.word 0x80000a
.word 0x800051
.word 0x347fff5e
.word 0x800012
.word 0x800016
.word 0x3721ffe4
.word 0x800059
.word 0x800018
.word 0x35ffffd0
.word 0x800014
.word 0x800023
.word 0x3727ffd2
.word 0x800056
.word 0x800060
.word 0x36bbff73
.word 0x800030
.word 0x53
.word 0x4745669d
.word 0x46
.word 0x5c
.word 0x478590da
.word 0x1e
.word 0x55
.word 0x47a8a8c2
.word 0x12
.word 0x44
.word 0x47e1e266
.word 0x47
.word 0x2
.word 0x4a780064
.word 0x33
.word 0x44
.word 0x47ed2d97
.word 0x39
.word 0x2a
.word 0x48418662
.word 0x31
.word 0x19
.word 0x48a333af
.word 0x62
.word 0x49
.word 0x47e00056
.word 0x32
.word 0x4a
.word 0x47dd306f
.word 0x1
.word 0x1f
.word 0x488410cd
.word 0x48
.word 0x61
.word 0x47a8dde6
.word 0x29
.word 0x59
.word 0x47b8115f
.word 0x15
.word 0x11
.word 0x48f0ed91
.word 0x36
.word 0x49
.word 0x47e06f17
.word 0x5c
.word 0x1d
.word 0x488d3da0
.word 0x5a
.word 0x32
.word 0x4823d6dc
.word 0x1d
.word 0x41
.word 0x47fc1010
.word 0x49
.word 0x5f
.word 0x47ac7696
.word 0x14
.word 0x18
.word 0x48aaaad0
.word 0x25
.word 0x5b
.word 0x47b40b56
.word 0x14
.word 0x18
.word 0x48aaab01
.word 0x44
.word 0x43
.word 0x47f48991
.word 0x4
.word 0xa
.word 0xc8cccc3a
.word 0x2d
.word 0xa
.word 0xc919997d
.word 0x11
.word 0x40
.word 0xc7dfff5a
.word 0x52
.word 0x3c
.word 0xc7ffff31
.word 0x60
.word 0x47
.word 0xc7df8c7c
.word 0x12
.word 0xf
.word 0xc906662e
.word 0x34
.word 0x5e
.word 0xc7acef31
.word 0x57
.word 0xa
.word 0xc94bffdd
.word 0x15
.word 0x38
.word 0xc811ffcd
.word 0x2c
.word 0x1b
.word 0xc8978dcd
.word 0x5a
.word 0x62
.word 0xc7a7199f
.word 0x61
.word 0x7
.word 0xc9923f92
.word 0x5f
.word 0x30
.word 0xc82aa54d
.word 0x5
.word 0x17
.word 0xc8b2133c
.word 0x2c
.word 0x5
.word 0xc9ccca9a
.word 0x5f
.word 0x45
.word 0xc7ed7162
.word 0x60
.word 0x52
.word 0xc7c7cd77
.word 0x1f
.word 0x20
.word 0xc87fff22
.word 0x4e
.word 0x5c
.word 0xc7b2161c
.word 0xb
.word 0x30
.word 0xc82aaa98
.word 0x5
.word 0x38
.word 0xc81248de
.word 0x39
.word 0x24
.word 0xc8638dc7
.word 0x3d
.word 0x24
.word 0xc8638df5
.word 0x24
.word 0xb
.word 0x48ba2f4c
.word 0x41
.word 0x2f
.word 0x472e4c62
.word 0x5
.word 0x2f
.word 0x46ae4ddf
.word 0x25
.word 0x9
.word 0x4763928e
.word 0x26
.word 0x5c
.word 0x4532237a
.word 0x4b
.word 0x24
.word 0x4563aa39
.word 0x3e
.word 0x3a
.word 0x448d6612
.word 0x48
.word 0x3e
.word 0x44045ce7
.word 0x39
.word 0x19
.word 0x44246b85
.word 0x39
.word 0x52
.word 0x42c844af
.word 0x12
.word 0x59
.word 0x42384509
.word 0x3
.word 0x3a
.word 0x4211b961
.word 0x40
.word 0x22
.word 0x42027878
.word 0x54
.word 0x50
.word 0x40ed999a
.word 0x51
.word 0xb
.word 0x41ca2e8c
.word 0x15
.word 0x11
.word 0x4143c3c4
.word 0x4f
.word 0x5a
.word 0x3fc16c17
.word 0x47
.word 0x51
.word 0x3ee9e065
.word 0x4
.word 0x5d
.word 0x3e8f23c9
.word 0x9
.word 0x3e
.word 0x3f8e739d
.word 0x3c
.word 0x6
.word 0x416aaaab
.word 0x53
.word 0x5c
.word 0x3e3d37a7
.word 0xe
.word 0x56
.word 0x3e2349ad
.word 0xd
.word 0x5
.word 0xc94ccbcd
.word 0x51
.word 0x29
.word 0xc747cd9c
.word 0x13
.word 0x20
.word 0xc6fffb30
.word 0x4e
.word 0x58
.word 0xc5ba2746
.word 0x51
.word 0x2f
.word 0xc5ae4931
.word 0x13
.word 0xd
.word 0xc61d7b62
.word 0x30
.word 0x3d
.word 0xc4863c54
.word 0x1e
.word 0x3f
.word 0xc401fefc
.word 0xa
.word 0x37
.word 0xc394561c
.word 0x44
.word 0x4f
.word 0xc2cf5dfa
.word 0x2
.word 0x14
.word 0xc34b199a
.word 0x23
.word 0x8
.word 0xc37d0000
.word 0x19
.word 0x40
.word 0xc16d4000
.word 0x4c
.word 0x30
.word 0xc11b5555
.word 0x2f
.word 0x58
.word 0xbff00000
.word 0x5c
.word 0x49
.word 0xbfc7e3f2
.word 0xf
.word 0x4
.word 0x40600000
.word 0x4f
.word 0x8
.word 0xbf900000
.word 0x18
.word 0x50
.word 0x3f033333
.word 0x3a
.word 0x48
.word 0xbde38e39
.word 0x1
.word 0x15
.word 0x3fc92492
.word 0x26
.word 0x3f
.word 0x3fb8e38e
.word 0x5e
.word 0x53
.word 0x3f1b19a3
.word 0x33
.word 0x3f800023
.word 0x401fffe9
.word 0x3f800029
.word 0x3f800059
.word 0x400fffc3
.word 0x3f80004e
.word 0x3f800050
.word 0x4007ffc4
.word 0x3f800031
.word 0x3f800055
.word 0x4003ffb3
.word 0x3f800015
.word 0x3f80002a
.word 0x4001ffed
.word 0x3f80002f
.word 0x3f800052
.word 0x4000ffcb
.word 0x3f80003c
.word 0x3f800040
.word 0x40007fd4
.word 0x3f800028
.word 0x3f80005d
.word 0x40003fbb
.word 0x3f800031
.word 0x3f80003f
.word 0x40001fca
.word 0x3f800013
.word 0x3f800055
.word 0x40000fca
.word 0x3f80003e
.word 0x3f80004e
.word 0x400007d0
.word 0x3f80003d
.word 0x3f80003f
.word 0x400003d2
.word 0x3f800023
.word 0x3f800036
.word 0x400001f1
.word 0x3f80004f
.word 0x3f800021
.word 0x400000f9
.word 0x3f800035
.word 0x3f80002b
.word 0x40000076
.word 0x3f800043
.word 0x3f800041
.word 0x4000001c
.word 0x3f80003a
.word 0x3f800019
.word 0x40000017
.word 0x3f800021
.word 0x3f80004c
.word 0x3fffffb7
.word 0x3f80002f
.word 0x3f800010
.word 0x40000008
.word 0x3f800021
.word 0x3f800003
.word 0x40000023
.word 0x3f800045
.word 0x3f800017
.word 0x3fffffd9
.word 0x3f800003
.word 0x3f80003f
.word 0x3fffffe1
.word 0x3f80005d
.word 0x3f800023
.word 0x3ffffff5
.word 0x3f80003a
.word 0x3f800060
.word 0xbefffde0
.word 0x3f800058
.word 0x3f80000b
.word 0xbe7fff22
.word 0x3f800019
.word 0x3f80005b
.word 0xbdfffbfa
.word 0x3f800035
.word 0x3f80003d
.word 0xbd7ffaa6
.word 0x3f800027
.word 0x3f800043
.word 0xbcfff1ba
.word 0x3f800037
.word 0x3f800031
.word 0xbc7ffa9e
.word 0x3f80000a
.word 0x3f80003a
.word 0xbbffc58c
.word 0x3f80003a
.word 0x3f80004e
.word 0xbb7f5364
.word 0x3f800056
.word 0x3f800020
.word 0xbaffcfc0
.word 0x3f80000c
.word 0x3f80000d
.word 0xba7e37e6
.word 0x3f800039
.word 0x3f800060
.word 0xb9fccf42
.word 0x3f800033
.word 0x3f800037
.word 0xb9765f96
.word 0x3f80004d
.word 0x3f800007
.word 0xb8f9fff2
.word 0x3f800018
.word 0x3f800057
.word 0xb8607f67
.word 0x3f80003f
.word 0x3f800026
.word 0xb7eeffb9
.word 0x3f800011
.word 0x3f800044
.word 0xb71bffad
.word 0x3f800032
.word 0x3f800030
.word 0xb5efffa6
.word 0x3f800031
.word 0x3f800050
.word 0x357fff60
.word 0x3f800028
.word 0x3f800056
.word 0x36ffff54
.word 0x3f800050
.word 0x3f80002b
.word 0x36ffffaa
.word 0x3f800048
.word 0x3f800003
.word 0x371dfffc
.word 0x3f800053
.word 0x3f800019
.word 0x361fffe1
.word 0x3f800016
.word 0x3f800043
.word 0x33ffff7a
.word 0x3f800002
.word 0x1b
.word 0x4817b4fb
.word 0x5a
.word 0x12
.word 0x47e3905c
.word 0x4d
.word 0x3e
.word 0x468421f8
.word 0x1d
.word 0x1a
.word 0x469d8d9e
.word 0x31
.word 0x28
.word 0x45ccdf66
.word 0x5d
.word 0x55
.word 0x44c0cdee
.word 0x23
.word 0xf
.word 0x4588b222
.word 0x4e
.word 0x44
.word 0x43f121e2
.word 0x1a
.word 0x41
.word 0x437d6666
.word 0x57
.word 0x10
.word 0x44003000
.word 0xc
.word 0x2e
.word 0x42b5642d
.word 0x4c
.word 0x38
.word 0x42151249
.word 0x27
.word 0x20
.word 0x4209c000
.word 0x4e
.word 0x52
.word 0x40da2577
.word 0x2f
.word 0x41
.word 0x40800000
.word 0x4
.word 0x53
.word 0x402818ad
.word 0x5a
.word 0x42
.word 0x4005d174
.word 0x4a
.word 0x3f
.word 0x3f679e7a
.word 0x19
.word 0x54
.word 0x3f400000
.word 0x2f
.word 0x4c
.word 0x3ee50d79
.word 0x1a
.word 0xd
.word 0x3f44ec4f
.word 0x6
.word 0x52
.word 0x3ef9c190
.word 0x26
.word 0x1a
.word 0x40600000
.word 0x5a
.word 0xd
.word 0xc89d88ea
.word 0x61
.word 0x39
.word 0xc70fb690
.word 0x5a
.word 0x35
.word 0xc69a8fa9
.word 0x21
.word 0xc
.word 0xc72aa6c0
.word 0x2f
.word 0x37
.word 0xc594ebc8
.word 0x2b
.word 0x58
.word 0xc4ba2a2f
.word 0xc
.word 0x55
.word 0xc4408545
.word 0x4f
.word 0x5e
.word 0xc3ae1df5
.word 0x22
.word 0x47
.word 0xc3657e32
.word 0x5a
.word 0x19
.word 0xc3a26148
.word 0x49
.word 0x58
.word 0xc2399746
.word 0xd
.word 0x45
.word 0xc1e55555
.word 0x46
.word 0x5e
.word 0xc12546cf
.word 0x35
.word 0x3f
.word 0xc0f6db6e
.word 0x1a
.word 0x3
.word 0xc2935555
.word 0x23
.word 0x29
.word 0xbf3512bb
.word 0x63
.word 0x5f
.word 0xbe2c7692
.word 0x30
.word 0x3d
.word 0x3f8a7de7
.word 0x62
.word 0x55
.word 0x3f34b4b5
.word 0x4c
.word 0x1
.word 0x41300000
.word 0x13
.word 0x22
.word 0x3cf0f0f1
.word 0x5
.word 0x3f
.word 0x3fc30c31
.word 0x62
.word 0x7f00000c
.word 0x402ffffc
.word 0x7f000019
.word 0x7f000050
.word 0x403bffbc
.word 0x7f000063
.word 0x7f000035
.word 0x403dffd9
.word 0x7f000050
.word 0x7f000017
.word 0x403effe3
.word 0x7f00000b
.word 0x7f000001
.word 0x403f8012
.word 0x7f000028
.word 0x7f00002f
.word 0x403fbfc8
.word 0x7f00001d
.word 0x7f000025
.word 0x403fefe0
.word 0x7f000030
.word 0x7f000029
.word 0x403ff7cb
.word 0x7f000012
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_2:
    .fill 60*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
