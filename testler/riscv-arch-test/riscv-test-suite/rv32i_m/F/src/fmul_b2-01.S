
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.5.2
// timestamp : Tue Sep  7 17:27:01 2021 GMT
// usage     : riscv_ctg \
//                  -- cgf $cgf \
//                  -- xlen $xlen \
// -----------
//
// -----------
// Copyright (c) 2021. IIT Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmul.s instruction of the RISC-V F extension for the fmul_b2 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmul_b2)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs1 == rs2 == rd, rs1==f1, rs2==f1, rd==f1, fs1 == 0 and fe1 == 0x00 and fm1 == 0x000008 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x000000 and rm_val == 0  
// opcode: fmul.s ; op1:f1; op2:f1; dest:f1; op1val:0x8; op2val:0x8; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f1, f1, f1, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==f7, rs2==f28, rd==f14, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00002d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3fffbc and rm_val == 0  
// opcode: fmul.s ; op1:f7; op2:f28; dest:f14; op1val:0x7f00002d; op2val:0xbfbfffbc; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f14, f7, f28, 0x0, 0, x16, 8, x17, x15, 8, x18)

inst_2:
// rs1 == rs2 != rd, rs1==f6, rs2==f6, rd==f19, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00004f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5fff75 and rm_val == 0  
// opcode: fmul.s ; op1:f6; op2:f6; dest:f19; op1val:0x7f00004f; op2val:0x7f00004f; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f19, f6, f6, 0x0, 0, x16, 16, x17, x15, 16, x18)

inst_3:
// rs1 == rd != rs2, rs1==f31, rs2==f4, rd==f31, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000004 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6ffff8 and rm_val == 0  
// opcode: fmul.s ; op1:f31; op2:f4; dest:f31; op1val:0x7f000004; op2val:0xbfeffff8; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f31, f31, f4, 0x0, 0, x16, 24, x17, x15, 24, x18)

inst_4:
// rs2 == rd != rs1, rs1==f27, rs2==f7, rd==f7, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000041 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77ff81 and rm_val == 0  
// opcode: fmul.s ; op1:f27; op2:f7; dest:f7; op1val:0x7f000041; op2val:0xbff7ff81; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f7, f27, f7, 0x0, 0, x16, 32, x17, x15, 32, x18)

inst_5:
// rs1==f12, rs2==f14, rd==f27, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00003b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7bff8b and rm_val == 0  
// opcode: fmul.s ; op1:f12; op2:f14; dest:f27; op1val:0x7f00003b; op2val:0xbffbff8b; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f27, f12, f14, 0x0, 0, x16, 40, x17, x15, 40, x18)

inst_6:
// rs1==f28, rs2==f15, rd==f2, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000057 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7dff52 and rm_val == 0  
// opcode: fmul.s ; op1:f28; op2:f15; dest:f2; op1val:0x7f000057; op2val:0xbffdff52; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f2, f28, f15, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_7:
// rs1==f20, rs2==f19, rd==f18, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00004c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7eff68 and rm_val == 0  
// opcode: fmul.s ; op1:f20; op2:f19; dest:f18; op1val:0x7f00004c; op2val:0xbffeff68; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f18, f20, f19, 0x0, 0, x16, 56, x17, x15, 56, x18)

inst_8:
// rs1==f23, rs2==f10, rd==f8, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000009 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7f7fed and rm_val == 0  
// opcode: fmul.s ; op1:f23; op2:f10; dest:f8; op1val:0x7f000009; op2val:0xbfff7fed; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f8, f23, f10, 0x0, 0, x16, 64, x17, x15, 64, x18)

inst_9:
// rs1==f19, rs2==f5, rd==f11, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000056 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7fbf53 and rm_val == 0  
// opcode: fmul.s ; op1:f19; op2:f5; dest:f11; op1val:0x7f000056; op2val:0xbfffbf53; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f11, f19, f5, 0x0, 0, x16, 72, x17, x15, 72, x18)

inst_10:
// rs1==f8, rs2==f0, rd==f9, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7fdf81 and rm_val == 0  
// opcode: fmul.s ; op1:f8; op2:f0; dest:f9; op1val:0x7f00003f; op2val:0xbfffdf81; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f9, f8, f0, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_11:
// rs1==f4, rs2==f29, rd==f0, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00002d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7fefa5 and rm_val == 0  
// opcode: fmul.s ; op1:f4; op2:f29; dest:f0; op1val:0x7f00002d; op2val:0xbfffefa5; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f0, f4, f29, 0x0, 0, x16, 88, x17, x15, 88, x18)

inst_12:
// rs1==f26, rs2==f18, rd==f10, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000062 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7ff73b and rm_val == 0  
// opcode: fmul.s ; op1:f26; op2:f18; dest:f10; op1val:0x7f000062; op2val:0xbffff73b; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f10, f26, f18, 0x0, 0, x16, 96, x17, x15, 96, x18)

inst_13:
// rs1==f14, rs2==f25, rd==f23, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00005c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7ffb47 and rm_val == 0  
// opcode: fmul.s ; op1:f14; op2:f25; dest:f23; op1val:0x7f00005c; op2val:0xbffffb47; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f23, f14, f25, 0x0, 0, x16, 104, x17, x15, 104, x18)

inst_14:
// rs1==f30, rs2==f27, rd==f20, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000017 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7ffdd1 and rm_val == 0  
// opcode: fmul.s ; op1:f30; op2:f27; dest:f20; op1val:0x7f000017; op2val:0xbffffdd1; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f20, f30, f27, 0x0, 0, x16, 112, x17, x15, 112, x18)

inst_15:
// rs1==f29, rs2==f8, rd==f25, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000042 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7ffe7b and rm_val == 0  
// opcode: fmul.s ; op1:f29; op2:f8; dest:f25; op1val:0x7f000042; op2val:0xbffffe7b; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f25, f29, f8, 0x0, 0, x16, 120, x17, x15, 120, x18)

inst_16:
// rs1==f0, rs2==f20, rd==f15, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00003e and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7fff03 and rm_val == 0  
// opcode: fmul.s ; op1:f0; op2:f20; dest:f15; op1val:0x7f00003e; op2val:0xbfffff03; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f15, f0, f20, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_17:
// rs1==f22, rs2==f12, rd==f28, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000057 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7fff11 and rm_val == 0  
// opcode: fmul.s ; op1:f22; op2:f12; dest:f28; op1val:0x7f000057; op2val:0xbfffff11; valaddr_reg:x16; val_offset:136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f28, f22, f12, 0x0, 0, x16, 136, x17, x15, 136, x18)

inst_18:
// rs1==f17, rs2==f2, rd==f26, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000002 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7fffdb and rm_val == 0  
// opcode: fmul.s ; op1:f17; op2:f2; dest:f26; op1val:0x7f000002; op2val:0xbfffffdb; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f26, f17, f2, 0x0, 0, x16, 144, x17, x15, 144, x18)

inst_19:
// rs1==f10, rs2==f30, rd==f21, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00004f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7fff51 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f30; dest:f21; op1val:0x7f00004f; op2val:0xbfffff51; valaddr_reg:x16; val_offset:152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f21, f10, f30, 0x0, 0, x16, 152, x17, x15, 152, x18)

inst_20:
// rs1==f15, rs2==f23, rd==f30, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000019 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7fffc5 and rm_val == 0  
// opcode: fmul.s ; op1:f15; op2:f23; dest:f30; op1val:0x7f000019; op2val:0xbfffffc5; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f30, f15, f23, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_21:
// rs1==f18, rs2==f21, rd==f5, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00004c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7fff63 and rm_val == 0  
// opcode: fmul.s ; op1:f18; op2:f21; dest:f5; op1val:0x7f00004c; op2val:0xbfffff63; valaddr_reg:x16; val_offset:168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f5, f18, f21, 0x0, 0, x16, 168, x17, x15, 168, x18)

inst_22:
// rs1==f2, rs2==f11, rd==f6, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000024 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7fffb5 and rm_val == 0  
// opcode: fmul.s ; op1:f2; op2:f11; dest:f6; op1val:0x7f000024; op2val:0xbfffffb5; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f6, f2, f11, 0x0, 0, x16, 176, x17, x15, 176, x18)

inst_23:
// rs1==f16, rs2==f9, rd==f22, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000063 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7fff38 and rm_val == 0  
// opcode: fmul.s ; op1:f16; op2:f9; dest:f22; op1val:0x7f000063; op2val:0xbfffff38; valaddr_reg:x16; val_offset:184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f22, f16, f9, 0x0, 0, x16, 184, x17, x15, 184, x18)

inst_24:
// rs1==f25, rs2==f31, rd==f3, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000032 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3fffb4 and rm_val == 0  
// opcode: fmul.s ; op1:f25; op2:f31; dest:f3; op1val:0x7f000032; op2val:0x3fbfffb4; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f3, f25, f31, 0x0, 0, x16, 192, x17, x15, 192, x18)

inst_25:
// rs1==f13, rs2==f26, rd==f17, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00001c and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5fffce and rm_val == 0  
// opcode: fmul.s ; op1:f13; op2:f26; dest:f17; op1val:0x7f00001c; op2val:0x3fdfffce; valaddr_reg:x16; val_offset:200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f17, f13, f26, 0x0, 0, x16, 200, x17, x15, 200, x18)

inst_26:
// rs1==f24, rs2==f22, rd==f12, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00004e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6fff6d and rm_val == 0  
// opcode: fmul.s ; op1:f24; op2:f22; dest:f12; op1val:0x7f00004e; op2val:0x3fefff6d; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f24, f22, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_27:
// rs1==f5, rs2==f16, rd==f29, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00005e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x77ff49 and rm_val == 0  
// opcode: fmul.s ; op1:f5; op2:f16; dest:f29; op1val:0x7f00005e; op2val:0x3ff7ff49; valaddr_reg:x16; val_offset:216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f29, f5, f16, 0x0, 0, x16, 216, x17, x15, 216, x18)

inst_28:
// rs1==f11, rs2==f24, rd==f13, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000034 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7bff99 and rm_val == 0  
// opcode: fmul.s ; op1:f11; op2:f24; dest:f13; op1val:0x7f000034; op2val:0x3ffbff99; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f13, f11, f24, 0x0, 0, x16, 224, x17, x15, 224, x18)

inst_29:
// rs1==f21, rs2==f13, rd==f16, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00000d and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7dffe5 and rm_val == 0  
// opcode: fmul.s ; op1:f21; op2:f13; dest:f16; op1val:0x7f00000d; op2val:0x3ffdffe5; valaddr_reg:x16; val_offset:232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f16, f21, f13, 0x0, 0, x16, 232, x17, x15, 232, x18)

inst_30:
// rs1==f3, rs2==f17, rd==f24, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000054 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eff58 and rm_val == 0  
// opcode: fmul.s ; op1:f3; op2:f17; dest:f24; op1val:0x7f000054; op2val:0x3ffeff58; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f24, f3, f17, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_31:
// rs1==f9, rs2==f3, rd==f4, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00005c and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7f7f47 and rm_val == 0  
// opcode: fmul.s ; op1:f9; op2:f3; dest:f4; op1val:0x7f00005c; op2val:0x3fff7f47; valaddr_reg:x16; val_offset:248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f4, f9, f3, 0x0, 0, x16, 248, x17, x15, 248, x18)

inst_32:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00003c and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7fbf87 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f00003c; op2val:0x3fffbf87; valaddr_reg:x16; val_offset:256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 256, x17, x15, 256, x18)

inst_33:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000002 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7fdffb and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f000002; op2val:0x3fffdffb; valaddr_reg:x16; val_offset:264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 264, x17, x15, 264, x18)

inst_34:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000031 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7fef9d and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f000031; op2val:0x3fffef9d; valaddr_reg:x16; val_offset:272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 272, x17, x15, 272, x18)

inst_35:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000034 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ff797 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f000034; op2val:0x3ffff797; valaddr_reg:x16; val_offset:280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 280, x17, x15, 280, x18)

inst_36:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000050 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ffb5f and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f000050; op2val:0x3ffffb5f; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_37:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00001d and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ffdc5 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f00001d; op2val:0x3ffffdc5; valaddr_reg:x16; val_offset:296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 296, x17, x15, 296, x18)

inst_38:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000062 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ffe3b and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f000062; op2val:0x3ffffe3b; valaddr_reg:x16; val_offset:304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 304, x17, x15, 304, x18)

inst_39:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000055 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ffed5 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f000055; op2val:0x3ffffed5; valaddr_reg:x16; val_offset:312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 312, x17, x15, 312, x18)

inst_40:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00005c and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7fff07 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f00005c; op2val:0x3fffff07; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_41:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000047 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7fff51 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f000047; op2val:0x3fffff51; valaddr_reg:x16; val_offset:328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 328, x17, x15, 328, x18)

inst_42:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00003d and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7fff75 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f00003d; op2val:0x3fffff75; valaddr_reg:x16; val_offset:336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 336, x17, x15, 336, x18)

inst_43:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00005b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7fff41 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f00005b; op2val:0x3fffff41; valaddr_reg:x16; val_offset:344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 344, x17, x15, 344, x18)

inst_44:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00005e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7fff3f and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f00005e; op2val:0x3fffff3f; valaddr_reg:x16; val_offset:352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 352, x17, x15, 352, x18)

inst_45:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000021 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7fffbb and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f000021; op2val:0x3fffffbb; valaddr_reg:x16; val_offset:360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 360, x17, x15, 360, x18)

inst_46:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000024 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7fffb6 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f000024; op2val:0x3fffffb6; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_47:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000007 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3ffff6 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x800007; op2val:0xbfbffff6; valaddr_reg:x16; val_offset:376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 376, x17, x15, 376, x18)

inst_48:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000033 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x1fffc0 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x800033; op2val:0xbf9fffc0; valaddr_reg:x16; val_offset:384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 384, x17, x15, 384, x18)

inst_49:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00005f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0fff95 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x80005f; op2val:0xbf8fff95; valaddr_reg:x16; val_offset:392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 392, x17, x15, 392, x18)

inst_50:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00004d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x07ffae and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x80004d; op2val:0xbf87ffae; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_51:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00005d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x03ffa0 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x80005d; op2val:0xbf83ffa0; valaddr_reg:x16; val_offset:408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 408, x17, x15, 408, x18)

inst_52:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00003c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x01ffc3 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x80003c; op2val:0xbf81ffc3; valaddr_reg:x16; val_offset:416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 416, x17, x15, 416, x18)

inst_53:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00005e and fs2 == 1 and fe2 == 0x7f and fm2 == 0x00ffa1 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x80005e; op2val:0xbf80ffa1; valaddr_reg:x16; val_offset:424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 424, x17, x15, 424, x18)

inst_54:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000062 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x007f9e and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x800062; op2val:0xbf807f9e; valaddr_reg:x16; val_offset:432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 432, x17, x15, 432, x18)

inst_55:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000034 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x003fcc and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x800034; op2val:0xbf803fcc; valaddr_reg:x16; val_offset:440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 440, x17, x15, 440, x18)

inst_56:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00005b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x001fa5 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x80005b; op2val:0xbf801fa5; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_57:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000015 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000feb and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x800015; op2val:0xbf800feb; valaddr_reg:x16; val_offset:456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 456, x17, x15, 456, x18)

inst_58:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000021 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0007df and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x800021; op2val:0xbf8007df; valaddr_reg:x16; val_offset:464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 464, x17, x15, 464, x18)

inst_59:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00005c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0003a4 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x80005c; op2val:0xbf8003a4; valaddr_reg:x16; val_offset:472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 472, x17, x15, 472, x18)

inst_60:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000043 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0001bd and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x800043; op2val:0xbf8001bd; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_61:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00000d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0000f3 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000d; op2val:0xbf8000f3; valaddr_reg:x16; val_offset:488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 488, x17, x15, 488, x18)

inst_62:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000061 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x00001f and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x800061; op2val:0xbf80001f; valaddr_reg:x16; val_offset:496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 496, x17, x15, 496, x18)

inst_63:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000014 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x00002c and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x800014; op2val:0xbf80002c; valaddr_reg:x16; val_offset:504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 504, x17, x15, 504, x18)

inst_64:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000025 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7ffff6 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x800025; op2val:0xbf7ffff6; valaddr_reg:x16; val_offset:512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 512, x17, x15, 512, x18)

inst_65:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000017 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7ffff2 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x800017; op2val:0xbf7ffff2; valaddr_reg:x16; val_offset:520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 520, x17, x15, 520, x18)

inst_66:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00002b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fffba and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x80002b; op2val:0xbf7fffba; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_67:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000056 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fff5c and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x800056; op2val:0xbf7fff5c; valaddr_reg:x16; val_offset:536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 536, x17, x15, 536, x18)

inst_68:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00001e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fffc8 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x80001e; op2val:0xbf7fffc8; valaddr_reg:x16; val_offset:544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 544, x17, x15, 544, x18)

inst_69:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000026 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fffb6 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x800026; op2val:0xbf7fffb6; valaddr_reg:x16; val_offset:552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 552, x17, x15, 552, x18)

inst_70:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000005 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3ffff9 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x800005; op2val:0x3fbffff9; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_71:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000058 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1fff92 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x800058; op2val:0x3f9fff92; valaddr_reg:x16; val_offset:568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 568, x17, x15, 568, x18)

inst_72:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000009 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0ffff6 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x800009; op2val:0x3f8ffff6; valaddr_reg:x16; val_offset:576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 576, x17, x15, 576, x18)

inst_73:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000013 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x07ffec and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x800013; op2val:0x3f87ffec; valaddr_reg:x16; val_offset:584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 584, x17, x15, 584, x18)

inst_74:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000017 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x03ffe8 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x800017; op2val:0x3f83ffe8; valaddr_reg:x16; val_offset:592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 592, x17, x15, 592, x18)

inst_75:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00000a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x01fff6 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000a; op2val:0x3f81fff6; valaddr_reg:x16; val_offset:600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 600, x17, x15, 600, x18)

inst_76:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00004a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x00ffb5 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x80004a; op2val:0x3f80ffb5; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 608, x17, x15, 608, x18)

inst_77:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00004b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x007fb5 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x80004b; op2val:0x3f807fb5; valaddr_reg:x16; val_offset:616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 616, x17, x15, 616, x18)

inst_78:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00005a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x003fa6 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x80005a; op2val:0x3f803fa6; valaddr_reg:x16; val_offset:624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 624, x17, x15, 624, x18)

inst_79:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00005a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x001fa6 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x80005a; op2val:0x3f801fa6; valaddr_reg:x16; val_offset:632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 632, x17, x15, 632, x18)

inst_80:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000047 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000fb9 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x800047; op2val:0x3f800fb9; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_81:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00004d and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0007b3 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x80004d; op2val:0x3f8007b3; valaddr_reg:x16; val_offset:648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 648, x17, x15, 648, x18)

inst_82:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000015 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0003eb and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x800015; op2val:0x3f8003eb; valaddr_reg:x16; val_offset:656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 656, x17, x15, 656, x18)

inst_83:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000033 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0001cd and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x800033; op2val:0x3f8001cd; valaddr_reg:x16; val_offset:664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 664, x17, x15, 664, x18)

inst_84:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000058 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0000a8 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x800058; op2val:0x3f8000a8; valaddr_reg:x16; val_offset:672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 672, x17, x15, 672, x18)

inst_85:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000036 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x00004a and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x800036; op2val:0x3f80004a; valaddr_reg:x16; val_offset:680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 680, x17, x15, 680, x18)

inst_86:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00005d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fffc6 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x80005d; op2val:0x3f7fffc6; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 688, x17, x15, 688, x18)

inst_87:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000044 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fffb8 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x800044; op2val:0x3f7fffb8; valaddr_reg:x16; val_offset:696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 696, x17, x15, 696, x18)

inst_88:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000023 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fffda and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x800023; op2val:0x3f7fffda; valaddr_reg:x16; val_offset:704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 704, x17, x15, 704, x18)

inst_89:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000013 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fffea and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x800013; op2val:0x3f7fffea; valaddr_reg:x16; val_offset:712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 712, x17, x15, 712, x18)

inst_90:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00002e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fffac and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x80002e; op2val:0x3f7fffac; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_91:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000040 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fff84 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x800040; op2val:0x3f7fff84; valaddr_reg:x16; val_offset:728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 728, x17, x15, 728, x18)

inst_92:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00005d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fff48 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x80005d; op2val:0x3f7fff48; valaddr_reg:x16; val_offset:736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 736, x17, x15, 736, x18)

inst_93:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003d and fs2 == 1 and fe2 == 0x8f and fm2 == 0x064b88 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d; op2val:0xc7864b88; valaddr_reg:x16; val_offset:744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 744, x17, x15, 744, x18)

inst_94:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000050 and fs2 == 1 and fe2 == 0x8f and fm2 == 0x199998 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x50; op2val:0xc7999998; valaddr_reg:x16; val_offset:752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 752, x17, x15, 752, x18)

inst_95:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000e and fs2 == 1 and fe2 == 0x91 and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0xe; op2val:0xc8fffffe; valaddr_reg:x16; val_offset:760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 760, x17, x15, 760, x18)

inst_96:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001c and fs2 == 1 and fe2 == 0x91 and fm2 == 0x092491 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x1c; op2val:0xc8892491; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 768, x17, x15, 768, x18)

inst_97:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000053 and fs2 == 1 and fe2 == 0x8f and fm2 == 0x3f3a99 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x53; op2val:0xc7bf3a99; valaddr_reg:x16; val_offset:776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 776, x17, x15, 776, x18)

inst_98:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004f and fs2 == 1 and fe2 == 0x8f and fm2 == 0x4c26e1 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x4f; op2val:0xc7cc26e1; valaddr_reg:x16; val_offset:784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 784, x17, x15, 784, x18)

inst_99:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000010 and fs2 == 1 and fe2 == 0x91 and fm2 == 0x7dfffe and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x10; op2val:0xc8fdfffe; valaddr_reg:x16; val_offset:792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 792, x17, x15, 792, x18)

inst_100:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000021 and fs2 == 1 and fe2 == 0x90 and fm2 == 0x7745d0 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x21; op2val:0xc87745d0; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_101:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000033 and fs2 == 1 and fe2 == 0x90 and fm2 == 0x20504f and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x33; op2val:0xc820504f; valaddr_reg:x16; val_offset:808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 808, x17, x15, 808, x18)

inst_102:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000061 and fs2 == 1 and fe2 == 0x8f and fm2 == 0x28be04 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x61; op2val:0xc7a8be04; valaddr_reg:x16; val_offset:816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 816, x17, x15, 816, x18)

inst_103:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003c and fs2 == 1 and fe2 == 0x90 and fm2 == 0x087776 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3c; op2val:0xc8087776; valaddr_reg:x16; val_offset:824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 824, x17, x15, 824, x18)

inst_104:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000033 and fs2 == 1 and fe2 == 0x90 and fm2 == 0x209695 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x33; op2val:0xc8209695; valaddr_reg:x16; val_offset:832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 832, x17, x15, 832, x18)

inst_105:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004a and fs2 == 1 and fe2 == 0x8f and fm2 == 0x5d60dc and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x4a; op2val:0xc7dd60dc; valaddr_reg:x16; val_offset:840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 840, x17, x15, 840, x18)

inst_106:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000019 and fs2 == 1 and fe2 == 0x91 and fm2 == 0x23d47a and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x19; op2val:0xc8a3d47a; valaddr_reg:x16; val_offset:848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 848, x17, x15, 848, x18)

inst_107:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000061 and fs2 == 1 and fe2 == 0x8f and fm2 == 0x28e6ec and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x61; op2val:0xc7a8e6ec; valaddr_reg:x16; val_offset:856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 856, x17, x15, 856, x18)

inst_108:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000a and fs2 == 1 and fe2 == 0x92 and fm2 == 0x4ccbfe and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0xa; op2val:0xc94ccbfe; valaddr_reg:x16; val_offset:864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 864, x17, x15, 864, x18)

inst_109:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000028 and fs2 == 1 and fe2 == 0x90 and fm2 == 0x4ccc65 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x28; op2val:0xc84ccc65; valaddr_reg:x16; val_offset:872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 872, x17, x15, 872, x18)

inst_110:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000004 and fs2 == 1 and fe2 == 0x93 and fm2 == 0x7fffbe and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x4; op2val:0xc9ffffbe; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 880, x17, x15, 880, x18)

inst_111:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x95 and fm2 == 0x7fffde and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0xcaffffde; valaddr_reg:x16; val_offset:888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 888, x17, x15, 888, x18)

inst_112:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004f and fs2 == 1 and fe2 == 0x8f and fm2 == 0x4f6466 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x4f; op2val:0xc7cf6466; valaddr_reg:x16; val_offset:896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 896, x17, x15, 896, x18)

inst_113:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001b and fs2 == 1 and fe2 == 0x91 and fm2 == 0x17b420 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x1b; op2val:0xc897b420; valaddr_reg:x16; val_offset:904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 904, x17, x15, 904, x18)

inst_114:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x90 and fm2 == 0x02081d and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f; op2val:0xc802081d; valaddr_reg:x16; val_offset:912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 912, x17, x15, 912, x18)

inst_115:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000035 and fs2 == 1 and fe2 == 0x90 and fm2 == 0x1a90e5 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x35; op2val:0xc81a90e5; valaddr_reg:x16; val_offset:920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 920, x17, x15, 920, x18)

inst_116:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003a and fs2 == 0 and fe2 == 0x8f and fm2 == 0x0d3dc9 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3a; op2val:0x478d3dc9; valaddr_reg:x16; val_offset:928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 928, x17, x15, 928, x18)

inst_117:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000057 and fs2 == 0 and fe2 == 0x8f and fm2 == 0x0d3dca and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x57; op2val:0x478d3dca; valaddr_reg:x16; val_offset:936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 936, x17, x15, 936, x18)

inst_118:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000028 and fs2 == 0 and fe2 == 0x90 and fm2 == 0x333332 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x28; op2val:0x48333332; valaddr_reg:x16; val_offset:944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 944, x17, x15, 944, x18)

inst_119:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000d and fs2 == 0 and fe2 == 0x92 and fm2 == 0x13b13a and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0xd; op2val:0x4913b13a; valaddr_reg:x16; val_offset:952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 952, x17, x15, 952, x18)

inst_120:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000058 and fs2 == 0 and fe2 == 0x8f and fm2 == 0x345d16 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x58; op2val:0x47b45d16; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 960, x17, x15, 960, x18)

inst_121:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000028 and fs2 == 0 and fe2 == 0x90 and fm2 == 0x499998 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x28; op2val:0x48499998; valaddr_reg:x16; val_offset:968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 968, x17, x15, 968, x18)

inst_122:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000059 and fs2 == 0 and fe2 == 0x8f and fm2 == 0x36a6d3 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x59; op2val:0x47b6a6d3; valaddr_reg:x16; val_offset:976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 976, x17, x15, 976, x18)

inst_123:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002f and fs2 == 0 and fe2 == 0x90 and fm2 == 0x2d9df4 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x2f; op2val:0x482d9df4; valaddr_reg:x16; val_offset:984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 984, x17, x15, 984, x18)

inst_124:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000010 and fs2 == 0 and fe2 == 0x91 and fm2 == 0x7f7ffe and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x10; op2val:0x48ff7ffe; valaddr_reg:x16; val_offset:992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 992, x17, x15, 992, x18)

inst_125:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000003 and fs2 == 0 and fe2 == 0x94 and fm2 == 0x2a7fff and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3; op2val:0x4a2a7fff; valaddr_reg:x16; val_offset:1000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1000, x17, x15, 1000, x18)

inst_126:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003e and fs2 == 0 and fe2 == 0x90 and fm2 == 0x041083 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e; op2val:0x48041083; valaddr_reg:x16; val_offset:1008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1008, x17, x15, 1008, x18)

inst_127:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000d and fs2 == 0 and fe2 == 0x92 and fm2 == 0x1d7fff and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0xd; op2val:0x491d7fff; valaddr_reg:x16; val_offset:1016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1016, x17, x15, 1016, x18)

inst_128:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004b and fs2 == 0 and fe2 == 0x8f and fm2 == 0x5a6d38 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x4b; op2val:0x47da6d38; valaddr_reg:x16; val_offset:1024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1024, x17, x15, 1024, x18)

inst_129:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000036 and fs2 == 0 and fe2 == 0x90 and fm2 == 0x17b1c6 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x36; op2val:0x4817b1c6; valaddr_reg:x16; val_offset:1032; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1032, x17, x15, 1032, x18)

inst_130:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004c and fs2 == 0 and fe2 == 0x8f and fm2 == 0x579285 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x4c; op2val:0x47d79285; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1040, x17, x15, 1040, x18)

inst_131:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000003 and fs2 == 0 and fe2 == 0x94 and fm2 == 0x2aa9ff and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3; op2val:0x4a2aa9ff; valaddr_reg:x16; val_offset:1048; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1048, x17, x15, 1048, x18)

inst_132:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000037 and fs2 == 0 and fe2 == 0x90 and fm2 == 0x14f1be and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x37; op2val:0x4814f1be; valaddr_reg:x16; val_offset:1056; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1056, x17, x15, 1056, x18)

inst_133:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005e and fs2 == 0 and fe2 == 0x8f and fm2 == 0x2e4c14 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x5e; op2val:0x47ae4c14; valaddr_reg:x16; val_offset:1064; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1064, x17, x15, 1064, x18)

inst_134:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000062 and fs2 == 0 and fe2 == 0x8f and fm2 == 0x272eef and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x62; op2val:0x47a72eef; valaddr_reg:x16; val_offset:1072; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1072, x17, x15, 1072, x18)

inst_135:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001c and fs2 == 0 and fe2 == 0x91 and fm2 == 0x12491a and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x1c; op2val:0x4892491a; valaddr_reg:x16; val_offset:1080; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1080, x17, x15, 1080, x18)

inst_136:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000053 and fs2 == 0 and fe2 == 0x8f and fm2 == 0x4565c1 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x53; op2val:0x47c565c1; valaddr_reg:x16; val_offset:1088; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1088, x17, x15, 1088, x18)

inst_137:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000028 and fs2 == 0 and fe2 == 0x90 and fm2 == 0x4cccc8 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x28; op2val:0x484cccc8; valaddr_reg:x16; val_offset:1096; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1096, x17, x15, 1096, x18)

inst_138:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003c and fs2 == 0 and fe2 == 0x90 and fm2 == 0x088886 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3c; op2val:0x48088886; valaddr_reg:x16; val_offset:1104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1104, x17, x15, 1104, x18)

inst_139:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000043 and fs2 == 1 and fe2 == 0x8e and fm2 == 0x748991 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x43; op2val:0xc7748991; valaddr_reg:x16; val_offset:1112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1112, x17, x15, 1112, x18)

inst_140:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001c and fs2 == 1 and fe2 == 0x8f and fm2 == 0x124929 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x1c; op2val:0xc7924929; valaddr_reg:x16; val_offset:1120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1120, x17, x15, 1120, x18)

inst_141:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001e and fs2 == 1 and fe2 == 0x8e and fm2 == 0x088891 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x1e; op2val:0xc7088891; valaddr_reg:x16; val_offset:1128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1128, x17, x15, 1128, x18)

inst_142:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000018 and fs2 == 1 and fe2 == 0x8d and fm2 == 0x2aaac0 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x18; op2val:0xc6aaaac0; valaddr_reg:x16; val_offset:1136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1136, x17, x15, 1136, x18)

inst_143:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000d and fs2 == 1 and fe2 == 0x8d and fm2 == 0x1d8a00 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0xd; op2val:0xc69d8a00; valaddr_reg:x16; val_offset:1144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1144, x17, x15, 1144, x18)

inst_144:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001f and fs2 == 1 and fe2 == 0x8b and fm2 == 0x04214a and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x1f; op2val:0xc584214a; valaddr_reg:x16; val_offset:1152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1152, x17, x15, 1152, x18)

inst_145:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005d and fs2 == 1 and fe2 == 0x88 and fm2 == 0x302cbb and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x5d; op2val:0xc4302cbb; valaddr_reg:x16; val_offset:1160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1160, x17, x15, 1160, x18)

inst_146:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000f and fs2 == 1 and fe2 == 0x8a and fm2 == 0x08899a and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0xf; op2val:0xc508899a; valaddr_reg:x16; val_offset:1168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1168, x17, x15, 1168, x18)

inst_147:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000035 and fs2 == 1 and fe2 == 0x87 and fm2 == 0x1a9352 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x35; op2val:0xc39a9352; valaddr_reg:x16; val_offset:1176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1176, x17, x15, 1176, x18)

inst_148:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000005 and fs2 == 1 and fe2 == 0x89 and fm2 == 0x4cd333 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x5; op2val:0xc4ccd333; valaddr_reg:x16; val_offset:1184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1184, x17, x15, 1184, x18)

inst_149:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x8b and fm2 == 0x000800 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0xc5800800; valaddr_reg:x16; val_offset:1192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1192, x17, x15, 1192, x18)

inst_150:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000044 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x710f0f and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x44; op2val:0xc1f10f0f; valaddr_reg:x16; val_offset:1200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1200, x17, x15, 1200, x18)

inst_151:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000037 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x151746 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x37; op2val:0xc1951746; valaddr_reg:x16; val_offset:1208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1208, x17, x15, 1208, x18)

inst_152:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000021 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x78ba2f and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x21; op2val:0xc178ba2f; valaddr_reg:x16; val_offset:1216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1216, x17, x15, 1216, x18)

inst_153:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x34bf4c and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x5b; op2val:0xc034bf4c; valaddr_reg:x16; val_offset:1224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1224, x17, x15, 1224, x18)

inst_154:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000050 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4e6666 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x50; op2val:0xbfce6666; valaddr_reg:x16; val_offset:1232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1232, x17, x15, 1232, x18)

inst_155:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5af287 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x4c; op2val:0xbf5af287; valaddr_reg:x16; val_offset:1240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1240, x17, x15, 1240, x18)

inst_156:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000021 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x21; op2val:0xbf800000; valaddr_reg:x16; val_offset:1248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1248, x17, x15, 1248, x18)

inst_157:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000039 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x18b3a6 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x39; op2val:0xbe98b3a6; valaddr_reg:x16; val_offset:1256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1256, x17, x15, 1256, x18)

inst_158:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001e and fs2 == 1 and fe2 == 0x7d and fm2 == 0x19999a and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x1e; op2val:0xbe99999a; valaddr_reg:x16; val_offset:1264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1264, x17, x15, 1264, x18)

inst_159:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000005 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x5; op2val:0xbf800000; valaddr_reg:x16; val_offset:1272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1272, x17, x15, 1272, x18)

inst_160:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000042 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x3a2e8c and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x42; op2val:0xbd3a2e8c; valaddr_reg:x16; val_offset:1280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1280, x17, x15, 1280, x18)

inst_161:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000052 and fs2 == 1 and fe2 == 0x78 and fm2 == 0x0e95e5 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x52; op2val:0xbc0e95e5; valaddr_reg:x16; val_offset:1288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1288, x17, x15, 1288, x18)

inst_162:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000d and fs2 == 0 and fe2 == 0x91 and fm2 == 0x1d89db and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0xd; op2val:0x489d89db; valaddr_reg:x16; val_offset:1296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1296, x17, x15, 1296, x18)

inst_163:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000015 and fs2 == 0 and fe2 == 0x8f and fm2 == 0x430c37 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x15; op2val:0x47c30c37; valaddr_reg:x16; val_offset:1304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1304, x17, x15, 1304, x18)

inst_164:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000005 and fs2 == 0 and fe2 == 0x90 and fm2 == 0x4cccda and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x5; op2val:0x484cccda; valaddr_reg:x16; val_offset:1312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1312, x17, x15, 1312, x18)

inst_165:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000008 and fs2 == 0 and fe2 == 0x8f and fm2 == 0x000010 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x8; op2val:0x47800010; valaddr_reg:x16; val_offset:1320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1320, x17, x15, 1320, x18)

inst_166:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000012 and fs2 == 0 and fe2 == 0x8c and fm2 == 0x638e72 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x12; op2val:0x46638e72; valaddr_reg:x16; val_offset:1328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1328, x17, x15, 1328, x18)

inst_167:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005a and fs2 == 0 and fe2 == 0x89 and fm2 == 0x360bbc and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x5a; op2val:0x44b60bbc; valaddr_reg:x16; val_offset:1336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1336, x17, x15, 1336, x18)

inst_168:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000054 and fs2 == 0 and fe2 == 0x88 and fm2 == 0x430cf4 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54; op2val:0x44430cf4; valaddr_reg:x16; val_offset:1344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1344, x17, x15, 1344, x18)

inst_169:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004e and fs2 == 0 and fe2 == 0x87 and fm2 == 0x520ec5 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x4e; op2val:0x43d20ec5; valaddr_reg:x16; val_offset:1352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1352, x17, x15, 1352, x18)

inst_170:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000022 and fs2 == 0 and fe2 == 0x87 and fm2 == 0x70f4b5 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x22; op2val:0x43f0f4b5; valaddr_reg:x16; val_offset:1360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1360, x17, x15, 1360, x18)

inst_171:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000013 and fs2 == 0 and fe2 == 0x87 and fm2 == 0x579af3 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x13; op2val:0x43d79af3; valaddr_reg:x16; val_offset:1368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1368, x17, x15, 1368, x18)

inst_172:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000042 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x784d93 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x42; op2val:0x42784d93; valaddr_reg:x16; val_offset:1376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1376, x17, x15, 1376, x18)

inst_173:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000033 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x20b4b5 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x33; op2val:0x4220b4b5; valaddr_reg:x16; val_offset:1384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1384, x17, x15, 1384, x18)

inst_174:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000043 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x74c6b0 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x43; op2val:0x4174c6b0; valaddr_reg:x16; val_offset:1392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1392, x17, x15, 1392, x18)

inst_175:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003a and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0d846a and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3a; op2val:0x410d846a; valaddr_reg:x16; val_offset:1400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1400, x17, x15, 1400, x18)

inst_176:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000e and fs2 == 0 and fe2 == 0x83 and fm2 == 0x12db6e and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0xe; op2val:0x4192db6e; valaddr_reg:x16; val_offset:1408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1408, x17, x15, 1408, x18)

inst_177:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000058 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3ba2e9 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x58; op2val:0x3fbba2e9; valaddr_reg:x16; val_offset:1416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1416, x17, x15, 1416, x18)

inst_178:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000c and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2d5555 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0xc; op2val:0x40ad5555; valaddr_reg:x16; val_offset:1424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1424, x17, x15, 1424, x18)

inst_179:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0a7de7 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d; op2val:0x3f0a7de7; valaddr_reg:x16; val_offset:1432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1432, x17, x15, 1432, x18)

inst_180:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005b and fs2 == 0 and fe2 == 0x7c and fm2 == 0x3f4bf5 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x5b; op2val:0x3e3f4bf5; valaddr_reg:x16; val_offset:1440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1440, x17, x15, 1440, x18)

inst_181:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000034 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x313b14 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x34; op2val:0x3e313b14; valaddr_reg:x16; val_offset:1448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1448, x17, x15, 1448, x18)

inst_182:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000022 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x169697 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x22; op2val:0x3e169697; valaddr_reg:x16; val_offset:1456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1456, x17, x15, 1456, x18)

inst_183:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005f and fs2 == 0 and fe2 == 0x7a and fm2 == 0x0158ed and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x5f; op2val:0x3d0158ed; valaddr_reg:x16; val_offset:1464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1464, x17, x15, 1464, x18)

inst_184:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000063 and fs2 == 0 and fe2 == 0x77 and fm2 == 0x6c33c9 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x63; op2val:0x3bec33c9; valaddr_reg:x16; val_offset:1472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1472, x17, x15, 1472, x18)

inst_185:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00003a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3fffa9 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80003a; op2val:0xbfbfffa9; valaddr_reg:x16; val_offset:1480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1480, x17, x15, 1480, x18)

inst_186:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000004 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x1ffffb and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800004; op2val:0xbf9ffffb; valaddr_reg:x16; val_offset:1488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1488, x17, x15, 1488, x18)

inst_187:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00002c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0fffcf and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80002c; op2val:0xbf8fffcf; valaddr_reg:x16; val_offset:1496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1496, x17, x15, 1496, x18)

inst_188:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00000f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x07fff0 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80000f; op2val:0xbf87fff0; valaddr_reg:x16; val_offset:1504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1504, x17, x15, 1504, x18)

inst_189:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000060 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x03ff9d and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800060; op2val:0xbf83ff9d; valaddr_reg:x16; val_offset:1512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1512, x17, x15, 1512, x18)

inst_190:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00004f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x01ffb0 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80004f; op2val:0xbf81ffb0; valaddr_reg:x16; val_offset:1520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1520, x17, x15, 1520, x18)

inst_191:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x00ffff and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800001; op2val:0xbf80ffff; valaddr_reg:x16; val_offset:1528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1528, x17, x15, 1528, x18)

inst_192:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000014 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x007fec and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800014; op2val:0xbf807fec; valaddr_reg:x16; val_offset:1536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1536, x17, x15, 1536, x18)

inst_193:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000006 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x003ffa and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800006; op2val:0xbf803ffa; valaddr_reg:x16; val_offset:1544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1544, x17, x15, 1544, x18)

inst_194:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000032 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x001fce and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800032; op2val:0xbf801fce; valaddr_reg:x16; val_offset:1552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1552, x17, x15, 1552, x18)

inst_195:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000059 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000fa7 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800059; op2val:0xbf800fa7; valaddr_reg:x16; val_offset:1560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1560, x17, x15, 1560, x18)

inst_196:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000018 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0007e8 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800018; op2val:0xbf8007e8; valaddr_reg:x16; val_offset:1568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1568, x17, x15, 1568, x18)

inst_197:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000015 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0003eb and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800015; op2val:0xbf8003eb; valaddr_reg:x16; val_offset:1576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1576, x17, x15, 1576, x18)

inst_198:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000021 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0001df and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800021; op2val:0xbf8001df; valaddr_reg:x16; val_offset:1584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1584, x17, x15, 1584, x18)

inst_199:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000003 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0000fd and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800003; op2val:0xbf8000fd; valaddr_reg:x16; val_offset:1592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1592, x17, x15, 1592, x18)

inst_200:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000006 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x00007a and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800006; op2val:0xbf80007a; valaddr_reg:x16; val_offset:1600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1600, x17, x15, 1600, x18)

inst_201:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000009 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000037 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800009; op2val:0xbf800037; valaddr_reg:x16; val_offset:1608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1608, x17, x15, 1608, x18)

inst_202:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00000b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000015 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80000b; op2val:0xbf800015; valaddr_reg:x16; val_offset:1616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1616, x17, x15, 1616, x18)

inst_203:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000057 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fff72 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800057; op2val:0xbf7fff72; valaddr_reg:x16; val_offset:1624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1624, x17, x15, 1624, x18)

inst_204:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000017 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fffe2 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800017; op2val:0xbf7fffe2; valaddr_reg:x16; val_offset:1632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1632, x17, x15, 1632, x18)

inst_205:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00002f and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fffaa and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80002f; op2val:0xbf7fffaa; valaddr_reg:x16; val_offset:1640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1640, x17, x15, 1640, x18)

inst_206:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000005 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7ffffa and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800005; op2val:0xbf7ffffa; valaddr_reg:x16; val_offset:1648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1648, x17, x15, 1648, x18)

inst_207:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00005c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fff4a and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80005c; op2val:0xbf7fff4a; valaddr_reg:x16; val_offset:1656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1656, x17, x15, 1656, x18)

inst_208:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000008 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3ffff4 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800008; op2val:0x3fbffff4; valaddr_reg:x16; val_offset:1664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1664, x17, x15, 1664, x18)

inst_209:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000020 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1fffd8 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800020; op2val:0x3f9fffd8; valaddr_reg:x16; val_offset:1672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1672, x17, x15, 1672, x18)

inst_210:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000012 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0fffec and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800012; op2val:0x3f8fffec; valaddr_reg:x16; val_offset:1680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1680, x17, x15, 1680, x18)

inst_211:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000061 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x07ff99 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800061; op2val:0x3f87ff99; valaddr_reg:x16; val_offset:1688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1688, x17, x15, 1688, x18)

inst_212:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000058 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x03ffa5 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800058; op2val:0x3f83ffa5; valaddr_reg:x16; val_offset:1696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1696, x17, x15, 1696, x18)

inst_213:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00004c and fs2 == 0 and fe2 == 0x7f and fm2 == 0x01ffb3 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80004c; op2val:0x3f81ffb3; valaddr_reg:x16; val_offset:1704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1704, x17, x15, 1704, x18)

inst_214:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000007 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x00fff9 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800007; op2val:0x3f80fff9; valaddr_reg:x16; val_offset:1712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1712, x17, x15, 1712, x18)

inst_215:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00004a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x007fb6 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80004a; op2val:0x3f807fb6; valaddr_reg:x16; val_offset:1720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1720, x17, x15, 1720, x18)

inst_216:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00000e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x003ff2 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80000e; op2val:0x3f803ff2; valaddr_reg:x16; val_offset:1728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1728, x17, x15, 1728, x18)

inst_217:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000019 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x001fe7 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800019; op2val:0x3f801fe7; valaddr_reg:x16; val_offset:1736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1736, x17, x15, 1736, x18)

inst_218:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00005d and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000fa3 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80005d; op2val:0x3f800fa3; valaddr_reg:x16; val_offset:1744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1744, x17, x15, 1744, x18)

inst_219:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00000a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0007f6 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80000a; op2val:0x3f8007f6; valaddr_reg:x16; val_offset:1752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1752, x17, x15, 1752, x18)

inst_220:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000058 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0003a8 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800058; op2val:0x3f8003a8; valaddr_reg:x16; val_offset:1760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1760, x17, x15, 1760, x18)

inst_221:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000042 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0001be and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800042; op2val:0x3f8001be; valaddr_reg:x16; val_offset:1768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1768, x17, x15, 1768, x18)

inst_222:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00001b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0000e5 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80001b; op2val:0x3f8000e5; valaddr_reg:x16; val_offset:1776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1776, x17, x15, 1776, x18)

inst_223:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000028 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000058 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800028; op2val:0x3f800058; valaddr_reg:x16; val_offset:1784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1784, x17, x15, 1784, x18)

inst_224:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00004c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fffe8 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80004c; op2val:0x3f7fffe8; valaddr_reg:x16; val_offset:1792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1792, x17, x15, 1792, x18)

inst_225:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000054 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fff98 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800054; op2val:0x3f7fff98; valaddr_reg:x16; val_offset:1800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1800, x17, x15, 1800, x18)

inst_226:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000043 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fff9a and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800043; op2val:0x3f7fff9a; valaddr_reg:x16; val_offset:1808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1808, x17, x15, 1808, x18)

inst_227:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000041 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fff8e and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800041; op2val:0x3f7fff8e; valaddr_reg:x16; val_offset:1816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1816, x17, x15, 1816, x18)

inst_228:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000027 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fffba and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800027; op2val:0x3f7fffba; valaddr_reg:x16; val_offset:1824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1824, x17, x15, 1824, x18)

inst_229:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00003e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fff88 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80003e; op2val:0x3f7fff88; valaddr_reg:x16; val_offset:1832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1832, x17, x15, 1832, x18)

inst_230:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000023 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fffbc and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800023; op2val:0x3f7fffbc; valaddr_reg:x16; val_offset:1840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1840, x17, x15, 1840, x18)

inst_231:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000016 and fs2 == 1 and fe2 == 0x90 and fm2 == 0x3a2e8c and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x16; op2val:0xc83a2e8c; valaddr_reg:x16; val_offset:1848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1848, x17, x15, 1848, x18)

inst_232:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002a and fs2 == 1 and fe2 == 0x8e and fm2 == 0x430c31 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x2a; op2val:0xc7430c31; valaddr_reg:x16; val_offset:1856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1856, x17, x15, 1856, x18)

inst_233:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000055 and fs2 == 1 and fe2 == 0x8c and fm2 == 0x40c0c1 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x55; op2val:0xc640c0c1; valaddr_reg:x16; val_offset:1864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1864, x17, x15, 1864, x18)

inst_234:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003b and fs2 == 1 and fe2 == 0x8c and fm2 == 0x0ad8f3 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3b; op2val:0xc60ad8f3; valaddr_reg:x16; val_offset:1872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1872, x17, x15, 1872, x18)

inst_235:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000048 and fs2 == 1 and fe2 == 0x8a and fm2 == 0x638e39 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x48; op2val:0xc5638e39; valaddr_reg:x16; val_offset:1880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1880, x17, x15, 1880, x18)

inst_236:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000049 and fs2 == 1 and fe2 == 0x89 and fm2 == 0x607038 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x49; op2val:0xc4e07038; valaddr_reg:x16; val_offset:1888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1888, x17, x15, 1888, x18)

inst_237:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003c and fs2 == 1 and fe2 == 0x89 and fm2 == 0x088889 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3c; op2val:0xc4888889; valaddr_reg:x16; val_offset:1896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1896, x17, x15, 1896, x18)

inst_238:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000055 and fs2 == 1 and fe2 == 0x87 and fm2 == 0x40c0c1 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x55; op2val:0xc3c0c0c1; valaddr_reg:x16; val_offset:1904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1904, x17, x15, 1904, x18)

inst_239:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000042 and fs2 == 1 and fe2 == 0x86 and fm2 == 0x783e10 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x42; op2val:0xc3783e10; valaddr_reg:x16; val_offset:1912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1912, x17, x15, 1912, x18)

inst_240:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000040 and fs2 == 1 and fe2 == 0x86 and fm2 == 0x000000 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x40; op2val:0xc3000000; valaddr_reg:x16; val_offset:1920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1920, x17, x15, 1920, x18)

inst_241:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x85 and fm2 == 0x020821 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f; op2val:0xc2820821; valaddr_reg:x16; val_offset:1928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1928, x17, x15, 1928, x18)

inst_242:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000044 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x70f0f1 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x44; op2val:0xc1f0f0f1; valaddr_reg:x16; val_offset:1936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1936, x17, x15, 1936, x18)

inst_243:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003c and fs2 == 1 and fe2 == 0x83 and fm2 == 0x088889 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3c; op2val:0xc1888889; valaddr_reg:x16; val_offset:1944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1944, x17, x15, 1944, x18)

inst_244:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x321643 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x5c; op2val:0xc0b21643; valaddr_reg:x16; val_offset:1952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1952, x17, x15, 1952, x18)

inst_245:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000061 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x28e83f and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x61; op2val:0xc028e83f; valaddr_reg:x16; val_offset:1960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1960, x17, x15, 1960, x18)

inst_246:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0d3dcb and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3a; op2val:0xc00d3dcb; valaddr_reg:x16; val_offset:1968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1968, x17, x15, 1968, x18)

inst_247:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002e and fs2 == 1 and fe2 == 0x7f and fm2 == 0x321643 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x2e; op2val:0xbfb21643; valaddr_reg:x16; val_offset:1976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1976, x17, x15, 1976, x18)

inst_248:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002f and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2e4c41 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x2f; op2val:0xbf2e4c41; valaddr_reg:x16; val_offset:1984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1984, x17, x15, 1984, x18)

inst_249:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000044 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x70f0f1 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x44; op2val:0xbe70f0f1; valaddr_reg:x16; val_offset:1992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1992, x17, x15, 1992, x18)

inst_250:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000036 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x17b426 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x36; op2val:0xbe17b426; valaddr_reg:x16; val_offset:2000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 2000, x17, x15, 2000, x18)

inst_251:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000018 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x2aaaab and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x18; op2val:0xbe2aaaab; valaddr_reg:x16; val_offset:2008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 2008, x17, x15, 2008, x18)

inst_252:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000057 and fs2 == 1 and fe2 == 0x79 and fm2 == 0x3c5264 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x57; op2val:0xbcbc5264; valaddr_reg:x16; val_offset:2016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 2016, x17, x15, 2016, x18)

inst_253:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002f and fs2 == 1 and fe2 == 0x79 and fm2 == 0x2e4c41 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x2f; op2val:0xbcae4c41; valaddr_reg:x16; val_offset:2024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_2)

inst_254:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000042 and fs2 == 0 and fe2 == 0x8e and fm2 == 0x783e10 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x42; op2val:0x47783e10; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_255:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000017 and fs2 == 0 and fe2 == 0x8f and fm2 == 0x321643 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x17; op2val:0x47b21643; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 8, x17, x15, 8, x18)

inst_256:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000017 and fs2 == 0 and fe2 == 0x8e and fm2 == 0x321643 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x17; op2val:0x47321643; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 16, x17, x15, 16, x18)

inst_257:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001e and fs2 == 0 and fe2 == 0x8d and fm2 == 0x088889 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x1e; op2val:0x46888889; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 24, x17, x15, 24, x18)

inst_258:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000017 and fs2 == 0 and fe2 == 0x8c and fm2 == 0x321643 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x17; op2val:0x46321643; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 32, x17, x15, 32, x18)

inst_259:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000016 and fs2 == 0 and fe2 == 0x8b and fm2 == 0x3a2e8c and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x16; op2val:0x45ba2e8c; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 40, x17, x15, 40, x18)

inst_260:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000037 and fs2 == 0 and fe2 == 0x89 and fm2 == 0x14f209 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x37; op2val:0x4494f209; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_261:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000029 and fs2 == 0 and fe2 == 0x88 and fm2 == 0x47ce0c and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x29; op2val:0x4447ce0c; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 56, x17, x15, 56, x18)

inst_262:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2e4c41 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x2f; op2val:0x43ae4c41; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 64, x17, x15, 64, x18)

inst_263:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000005 and fs2 == 0 and fe2 == 0x89 and fm2 == 0x4ccccd and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x5; op2val:0x44cccccd; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 72, x17, x15, 72, x18)

inst_264:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000041 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x7c0fc1 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x41; op2val:0x427c0fc1; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_265:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000046 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6a0ea1 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x46; op2val:0x41ea0ea1; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 88, x17, x15, 88, x18)

inst_266:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000042 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x783e10 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x42; op2val:0x41783e10; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 96, x17, x15, 96, x18)

inst_267:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000033 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x20a0a1 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x33; op2val:0x4120a0a1; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 104, x17, x15, 104, x18)

inst_268:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000038 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x124925 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x38; op2val:0x40924925; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 112, x17, x15, 112, x18)

inst_269:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000058 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a2e8c and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x58; op2val:0x3fba2e8c; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 120, x17, x15, 120, x18)

inst_270:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000005 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x4ccccd and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x5; op2val:0x414ccccd; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_271:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001c and fs2 == 0 and fe2 == 0x7f and fm2 == 0x124925 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x1c; op2val:0x3f924925; valaddr_reg:x16; val_offset:136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 136, x17, x15, 136, x18)

inst_272:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000021 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x783e10 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x21; op2val:0x3ef83e10; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 144, x17, x15, 144, x18)

inst_273:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000056 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x3e82fa and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x56; op2val:0x3dbe82fa; valaddr_reg:x16; val_offset:152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 152, x17, x15, 152, x18)

inst_274:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000016 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x3a2e8c and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x16; op2val:0x3e3a2e8c; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_275:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000b and fs2 == 0 and fe2 == 0x7c and fm2 == 0x3a2e8c and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0xb; op2val:0x3e3a2e8c; valaddr_reg:x16; val_offset:168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 168, x17, x15, 168, x18)

inst_276:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000008 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x000000 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x8; op2val:0x3e000000; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 176, x17, x15, 176, x18)

inst_277:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00004f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5fff75 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f00004f; op2val:0xbfdfff75; valaddr_reg:x16; val_offset:184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 184, x17, x15, 184, x18)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
test_fp:
.word 0x8
.word 0x8
.word 0x7f00002d
.word 0xbfbfffbc
.word 0x7f00004f
.word 0x7f00004f
.word 0x7f000004
.word 0xbfeffff8
.word 0x7f000041
.word 0xbff7ff81
.word 0x7f00003b
.word 0xbffbff8b
.word 0x7f000057
.word 0xbffdff52
.word 0x7f00004c
.word 0xbffeff68
.word 0x7f000009
.word 0xbfff7fed
.word 0x7f000056
.word 0xbfffbf53
.word 0x7f00003f
.word 0xbfffdf81
.word 0x7f00002d
.word 0xbfffefa5
.word 0x7f000062
.word 0xbffff73b
.word 0x7f00005c
.word 0xbffffb47
.word 0x7f000017
.word 0xbffffdd1
.word 0x7f000042
.word 0xbffffe7b
.word 0x7f00003e
.word 0xbfffff03
.word 0x7f000057
.word 0xbfffff11
.word 0x7f000002
.word 0xbfffffdb
.word 0x7f00004f
.word 0xbfffff51
.word 0x7f000019
.word 0xbfffffc5
.word 0x7f00004c
.word 0xbfffff63
.word 0x7f000024
.word 0xbfffffb5
.word 0x7f000063
.word 0xbfffff38
.word 0x7f000032
.word 0x3fbfffb4
.word 0x7f00001c
.word 0x3fdfffce
.word 0x7f00004e
.word 0x3fefff6d
.word 0x7f00005e
.word 0x3ff7ff49
.word 0x7f000034
.word 0x3ffbff99
.word 0x7f00000d
.word 0x3ffdffe5
.word 0x7f000054
.word 0x3ffeff58
.word 0x7f00005c
.word 0x3fff7f47
.word 0x7f00003c
.word 0x3fffbf87
.word 0x7f000002
.word 0x3fffdffb
.word 0x7f000031
.word 0x3fffef9d
.word 0x7f000034
.word 0x3ffff797
.word 0x7f000050
.word 0x3ffffb5f
.word 0x7f00001d
.word 0x3ffffdc5
.word 0x7f000062
.word 0x3ffffe3b
.word 0x7f000055
.word 0x3ffffed5
.word 0x7f00005c
.word 0x3fffff07
.word 0x7f000047
.word 0x3fffff51
.word 0x7f00003d
.word 0x3fffff75
.word 0x7f00005b
.word 0x3fffff41
.word 0x7f00005e
.word 0x3fffff3f
.word 0x7f000021
.word 0x3fffffbb
.word 0x7f000024
.word 0x3fffffb6
.word 0x800007
.word 0xbfbffff6
.word 0x800033
.word 0xbf9fffc0
.word 0x80005f
.word 0xbf8fff95
.word 0x80004d
.word 0xbf87ffae
.word 0x80005d
.word 0xbf83ffa0
.word 0x80003c
.word 0xbf81ffc3
.word 0x80005e
.word 0xbf80ffa1
.word 0x800062
.word 0xbf807f9e
.word 0x800034
.word 0xbf803fcc
.word 0x80005b
.word 0xbf801fa5
.word 0x800015
.word 0xbf800feb
.word 0x800021
.word 0xbf8007df
.word 0x80005c
.word 0xbf8003a4
.word 0x800043
.word 0xbf8001bd
.word 0x80000d
.word 0xbf8000f3
.word 0x800061
.word 0xbf80001f
.word 0x800014
.word 0xbf80002c
.word 0x800025
.word 0xbf7ffff6
.word 0x800017
.word 0xbf7ffff2
.word 0x80002b
.word 0xbf7fffba
.word 0x800056
.word 0xbf7fff5c
.word 0x80001e
.word 0xbf7fffc8
.word 0x800026
.word 0xbf7fffb6
.word 0x800005
.word 0x3fbffff9
.word 0x800058
.word 0x3f9fff92
.word 0x800009
.word 0x3f8ffff6
.word 0x800013
.word 0x3f87ffec
.word 0x800017
.word 0x3f83ffe8
.word 0x80000a
.word 0x3f81fff6
.word 0x80004a
.word 0x3f80ffb5
.word 0x80004b
.word 0x3f807fb5
.word 0x80005a
.word 0x3f803fa6
.word 0x80005a
.word 0x3f801fa6
.word 0x800047
.word 0x3f800fb9
.word 0x80004d
.word 0x3f8007b3
.word 0x800015
.word 0x3f8003eb
.word 0x800033
.word 0x3f8001cd
.word 0x800058
.word 0x3f8000a8
.word 0x800036
.word 0x3f80004a
.word 0x80005d
.word 0x3f7fffc6
.word 0x800044
.word 0x3f7fffb8
.word 0x800023
.word 0x3f7fffda
.word 0x800013
.word 0x3f7fffea
.word 0x80002e
.word 0x3f7fffac
.word 0x800040
.word 0x3f7fff84
.word 0x80005d
.word 0x3f7fff48
.word 0x3d
.word 0xc7864b88
.word 0x50
.word 0xc7999998
.word 0xe
.word 0xc8fffffe
.word 0x1c
.word 0xc8892491
.word 0x53
.word 0xc7bf3a99
.word 0x4f
.word 0xc7cc26e1
.word 0x10
.word 0xc8fdfffe
.word 0x21
.word 0xc87745d0
.word 0x33
.word 0xc820504f
.word 0x61
.word 0xc7a8be04
.word 0x3c
.word 0xc8087776
.word 0x33
.word 0xc8209695
.word 0x4a
.word 0xc7dd60dc
.word 0x19
.word 0xc8a3d47a
.word 0x61
.word 0xc7a8e6ec
.word 0xa
.word 0xc94ccbfe
.word 0x28
.word 0xc84ccc65
.word 0x4
.word 0xc9ffffbe
.word 0x1
.word 0xcaffffde
.word 0x4f
.word 0xc7cf6466
.word 0x1b
.word 0xc897b420
.word 0x3f
.word 0xc802081d
.word 0x35
.word 0xc81a90e5
.word 0x3a
.word 0x478d3dc9
.word 0x57
.word 0x478d3dca
.word 0x28
.word 0x48333332
.word 0xd
.word 0x4913b13a
.word 0x58
.word 0x47b45d16
.word 0x28
.word 0x48499998
.word 0x59
.word 0x47b6a6d3
.word 0x2f
.word 0x482d9df4
.word 0x10
.word 0x48ff7ffe
.word 0x3
.word 0x4a2a7fff
.word 0x3e
.word 0x48041083
.word 0xd
.word 0x491d7fff
.word 0x4b
.word 0x47da6d38
.word 0x36
.word 0x4817b1c6
.word 0x4c
.word 0x47d79285
.word 0x3
.word 0x4a2aa9ff
.word 0x37
.word 0x4814f1be
.word 0x5e
.word 0x47ae4c14
.word 0x62
.word 0x47a72eef
.word 0x1c
.word 0x4892491a
.word 0x53
.word 0x47c565c1
.word 0x28
.word 0x484cccc8
.word 0x3c
.word 0x48088886
.word 0x43
.word 0xc7748991
.word 0x1c
.word 0xc7924929
.word 0x1e
.word 0xc7088891
.word 0x18
.word 0xc6aaaac0
.word 0xd
.word 0xc69d8a00
.word 0x1f
.word 0xc584214a
.word 0x5d
.word 0xc4302cbb
.word 0xf
.word 0xc508899a
.word 0x35
.word 0xc39a9352
.word 0x5
.word 0xc4ccd333
.word 0x1
.word 0xc5800800
.word 0x44
.word 0xc1f10f0f
.word 0x37
.word 0xc1951746
.word 0x21
.word 0xc178ba2f
.word 0x5b
.word 0xc034bf4c
.word 0x50
.word 0xbfce6666
.word 0x4c
.word 0xbf5af287
.word 0x21
.word 0xbf800000
.word 0x39
.word 0xbe98b3a6
.word 0x1e
.word 0xbe99999a
.word 0x5
.word 0xbf800000
.word 0x42
.word 0xbd3a2e8c
.word 0x52
.word 0xbc0e95e5
.word 0xd
.word 0x489d89db
.word 0x15
.word 0x47c30c37
.word 0x5
.word 0x484cccda
.word 0x8
.word 0x47800010
.word 0x12
.word 0x46638e72
.word 0x5a
.word 0x44b60bbc
.word 0x54
.word 0x44430cf4
.word 0x4e
.word 0x43d20ec5
.word 0x22
.word 0x43f0f4b5
.word 0x13
.word 0x43d79af3
.word 0x42
.word 0x42784d93
.word 0x33
.word 0x4220b4b5
.word 0x43
.word 0x4174c6b0
.word 0x3a
.word 0x410d846a
.word 0xe
.word 0x4192db6e
.word 0x58
.word 0x3fbba2e9
.word 0xc
.word 0x40ad5555
.word 0x3d
.word 0x3f0a7de7
.word 0x5b
.word 0x3e3f4bf5
.word 0x34
.word 0x3e313b14
.word 0x22
.word 0x3e169697
.word 0x5f
.word 0x3d0158ed
.word 0x63
.word 0x3bec33c9
.word 0x3f80003a
.word 0xbfbfffa9
.word 0x3f800004
.word 0xbf9ffffb
.word 0x3f80002c
.word 0xbf8fffcf
.word 0x3f80000f
.word 0xbf87fff0
.word 0x3f800060
.word 0xbf83ff9d
.word 0x3f80004f
.word 0xbf81ffb0
.word 0x3f800001
.word 0xbf80ffff
.word 0x3f800014
.word 0xbf807fec
.word 0x3f800006
.word 0xbf803ffa
.word 0x3f800032
.word 0xbf801fce
.word 0x3f800059
.word 0xbf800fa7
.word 0x3f800018
.word 0xbf8007e8
.word 0x3f800015
.word 0xbf8003eb
.word 0x3f800021
.word 0xbf8001df
.word 0x3f800003
.word 0xbf8000fd
.word 0x3f800006
.word 0xbf80007a
.word 0x3f800009
.word 0xbf800037
.word 0x3f80000b
.word 0xbf800015
.word 0x3f800057
.word 0xbf7fff72
.word 0x3f800017
.word 0xbf7fffe2
.word 0x3f80002f
.word 0xbf7fffaa
.word 0x3f800005
.word 0xbf7ffffa
.word 0x3f80005c
.word 0xbf7fff4a
.word 0x3f800008
.word 0x3fbffff4
.word 0x3f800020
.word 0x3f9fffd8
.word 0x3f800012
.word 0x3f8fffec
.word 0x3f800061
.word 0x3f87ff99
.word 0x3f800058
.word 0x3f83ffa5
.word 0x3f80004c
.word 0x3f81ffb3
.word 0x3f800007
.word 0x3f80fff9
.word 0x3f80004a
.word 0x3f807fb6
.word 0x3f80000e
.word 0x3f803ff2
.word 0x3f800019
.word 0x3f801fe7
.word 0x3f80005d
.word 0x3f800fa3
.word 0x3f80000a
.word 0x3f8007f6
.word 0x3f800058
.word 0x3f8003a8
.word 0x3f800042
.word 0x3f8001be
.word 0x3f80001b
.word 0x3f8000e5
.word 0x3f800028
.word 0x3f800058
.word 0x3f80004c
.word 0x3f7fffe8
.word 0x3f800054
.word 0x3f7fff98
.word 0x3f800043
.word 0x3f7fff9a
.word 0x3f800041
.word 0x3f7fff8e
.word 0x3f800027
.word 0x3f7fffba
.word 0x3f80003e
.word 0x3f7fff88
.word 0x3f800023
.word 0x3f7fffbc
.word 0x16
.word 0xc83a2e8c
.word 0x2a
.word 0xc7430c31
.word 0x55
.word 0xc640c0c1
.word 0x3b
.word 0xc60ad8f3
.word 0x48
.word 0xc5638e39
.word 0x49
.word 0xc4e07038
.word 0x3c
.word 0xc4888889
.word 0x55
.word 0xc3c0c0c1
.word 0x42
.word 0xc3783e10
.word 0x40
.word 0xc3000000
.word 0x3f
.word 0xc2820821
.word 0x44
.word 0xc1f0f0f1
.word 0x3c
.word 0xc1888889
.word 0x5c
.word 0xc0b21643
.word 0x61
.word 0xc028e83f
.word 0x3a
.word 0xc00d3dcb
.word 0x2e
.word 0xbfb21643
.word 0x2f
.word 0xbf2e4c41
.word 0x44
.word 0xbe70f0f1
.word 0x36
.word 0xbe17b426
.word 0x18
.word 0xbe2aaaab
.word 0x57
.word 0xbcbc5264
.word 0x2f
.word 0xbcae4c41
.word 0x42
.word 0x47783e10
.word 0x17
.word 0x47b21643
.word 0x17
.word 0x47321643
.word 0x1e
.word 0x46888889
.word 0x17
.word 0x46321643
.word 0x16
.word 0x45ba2e8c
.word 0x37
.word 0x4494f209
.word 0x29
.word 0x4447ce0c
.word 0x2f
.word 0x43ae4c41
.word 0x5
.word 0x44cccccd
.word 0x41
.word 0x427c0fc1
.word 0x46
.word 0x41ea0ea1
.word 0x42
.word 0x41783e10
.word 0x33
.word 0x4120a0a1
.word 0x38
.word 0x40924925
.word 0x58
.word 0x3fba2e8c
.word 0x5
.word 0x414ccccd
.word 0x1c
.word 0x3f924925
.word 0x21
.word 0x3ef83e10
.word 0x56
.word 0x3dbe82fa
.word 0x16
.word 0x3e3a2e8c
.word 0xb
.word 0x3e3a2e8c
.word 0x8
.word 0x3e000000
.word 0x7f00004f
.word 0xbfdfff75
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_2:
    .fill 48*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
