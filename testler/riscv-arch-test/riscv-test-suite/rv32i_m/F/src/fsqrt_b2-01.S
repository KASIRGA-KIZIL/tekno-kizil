
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.5.2
// timestamp : Tue Sep  7 16:50:29 2021 GMT
// usage     : riscv_ctg \
//                  -- cgf $cgf \
//                  -- xlen $xlen \
// -----------
//
// -----------
// Copyright (c) 2021. IIT Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fsqrt.s instruction of the RISC-V F extension for the fsqrt_b2 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fsqrt_b2)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs1 == rd, rs1==f28, rd==f28, fs1 == 0 and fe1 == 0x00 and fm1 == 0x0007f0 and rm_val == 0  
// opcode: fsqrt.s ; op1:f28; dest:f28; op1val:0x7f0; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f28, f28, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1:
// rs1 != rd, rs1==f13, rd==f11, fs1 == 0 and fe1 == 0xff and fm1 == 0x000000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f13; dest:f11; op1val:0x7f800000; valaddr_reg:x16; val_offset:4; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f13, 0x0, 0, x16, 4, x17, x15, 8, x18)

inst_2:
// rs1==f19, rd==f29, fs1 == 0 and fe1 == 0x80 and fm1 == 0x100000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f19; dest:f29; op1val:0x40100000; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f29, f19, 0x0, 0, x16, 8, x17, x15, 16, x18)

inst_3:
// rs1==f3, rd==f17, fs1 == 0 and fe1 == 0x7f and fm1 == 0x480000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f3; dest:f17; op1val:0x3fc80000; valaddr_reg:x16; val_offset:12; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f17, f3, 0x0, 0, x16, 12, x17, x15, 24, x18)

inst_4:
// rs1==f0, rd==f19, fs1 == 0 and fe1 == 0x7f and fm1 == 0x220000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f0; dest:f19; op1val:0x3fa20000; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f19, f0, 0x0, 0, x16, 16, x17, x15, 32, x18)

inst_5:
// rs1==f27, rd==f21, fs1 == 0 and fe1 == 0x7f and fm1 == 0x108000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f27; dest:f21; op1val:0x3f908000; valaddr_reg:x16; val_offset:20; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f21, f27, 0x0, 0, x16, 20, x17, x15, 40, x18)

inst_6:
// rs1==f8, rd==f7, fs1 == 0 and fe1 == 0x7f and fm1 == 0x082000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f8; dest:f7; op1val:0x3f882000; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f7, f8, 0x0, 0, x16, 24, x17, x15, 48, x18)

inst_7:
// rs1==f12, rd==f15, fs1 == 0 and fe1 == 0x7f and fm1 == 0x040800 and rm_val == 0  
// opcode: fsqrt.s ; op1:f12; dest:f15; op1val:0x3f840800; valaddr_reg:x16; val_offset:28; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f15, f12, 0x0, 0, x16, 28, x17, x15, 56, x18)

inst_8:
// rs1==f31, rd==f12, fs1 == 0 and fe1 == 0x7f and fm1 == 0x020200 and rm_val == 0  
// opcode: fsqrt.s ; op1:f31; dest:f12; op1val:0x3f820200; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f12, f31, 0x0, 0, x16, 32, x17, x15, 64, x18)

inst_9:
// rs1==f4, rd==f2, fs1 == 0 and fe1 == 0x7f and fm1 == 0x010080 and rm_val == 0  
// opcode: fsqrt.s ; op1:f4; dest:f2; op1val:0x3f810080; valaddr_reg:x16; val_offset:36; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f2, f4, 0x0, 0, x16, 36, x17, x15, 72, x18)

inst_10:
// rs1==f30, rd==f16, fs1 == 0 and fe1 == 0x7f and fm1 == 0x008020 and rm_val == 0  
// opcode: fsqrt.s ; op1:f30; dest:f16; op1val:0x3f808020; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f16, f30, 0x0, 0, x16, 40, x17, x15, 80, x18)

inst_11:
// rs1==f10, rd==f5, fs1 == 0 and fe1 == 0x7f and fm1 == 0x004008 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f5; op1val:0x3f804008; valaddr_reg:x16; val_offset:44; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f5, f10, 0x0, 0, x16, 44, x17, x15, 88, x18)

inst_12:
// rs1==f29, rd==f10, fs1 == 0 and fe1 == 0x7f and fm1 == 0x002002 and rm_val == 0  
// opcode: fsqrt.s ; op1:f29; dest:f10; op1val:0x3f802002; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f10, f29, 0x0, 0, x16, 48, x17, x15, 96, x18)

inst_13:
// rs1==f17, rd==f6, fs1 == 0 and fe1 == 0x7f and fm1 == 0x001000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f17; dest:f6; op1val:0x3f801000; valaddr_reg:x16; val_offset:52; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f6, f17, 0x0, 0, x16, 52, x17, x15, 104, x18)

inst_14:
// rs1==f20, rd==f26, fs1 == 0 and fe1 == 0x7f and fm1 == 0x000800 and rm_val == 0  
// opcode: fsqrt.s ; op1:f20; dest:f26; op1val:0x3f800800; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f26, f20, 0x0, 0, x16, 56, x17, x15, 112, x18)

inst_15:
// rs1==f2, rd==f20, fs1 == 0 and fe1 == 0x7f and fm1 == 0x000400 and rm_val == 0  
// opcode: fsqrt.s ; op1:f2; dest:f20; op1val:0x3f800400; valaddr_reg:x16; val_offset:60; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f20, f2, 0x0, 0, x16, 60, x17, x15, 120, x18)

inst_16:
// rs1==f26, rd==f24, fs1 == 0 and fe1 == 0x7f and fm1 == 0x000200 and rm_val == 0  
// opcode: fsqrt.s ; op1:f26; dest:f24; op1val:0x3f800200; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f24, f26, 0x0, 0, x16, 64, x17, x15, 128, x18)

inst_17:
// rs1==f11, rd==f8, fs1 == 0 and fe1 == 0x7f and fm1 == 0x000100 and rm_val == 0  
// opcode: fsqrt.s ; op1:f11; dest:f8; op1val:0x3f800100; valaddr_reg:x16; val_offset:68; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f8, f11, 0x0, 0, x16, 68, x17, x15, 136, x18)

inst_18:
// rs1==f21, rd==f13, fs1 == 0 and fe1 == 0x7f and fm1 == 0x000080 and rm_val == 0  
// opcode: fsqrt.s ; op1:f21; dest:f13; op1val:0x3f800080; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f13, f21, 0x0, 0, x16, 72, x17, x15, 144, x18)

inst_19:
// rs1==f16, rd==f9, fs1 == 0 and fe1 == 0x7f and fm1 == 0x000040 and rm_val == 0  
// opcode: fsqrt.s ; op1:f16; dest:f9; op1val:0x3f800040; valaddr_reg:x16; val_offset:76; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f9, f16, 0x0, 0, x16, 76, x17, x15, 152, x18)

inst_20:
// rs1==f15, rd==f1, fs1 == 0 and fe1 == 0x7f and fm1 == 0x000020 and rm_val == 0  
// opcode: fsqrt.s ; op1:f15; dest:f1; op1val:0x3f800020; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f1, f15, 0x0, 0, x16, 80, x17, x15, 160, x18)

inst_21:
// rs1==f14, rd==f30, fs1 == 0 and fe1 == 0x7f and fm1 == 0x000010 and rm_val == 0  
// opcode: fsqrt.s ; op1:f14; dest:f30; op1val:0x3f800010; valaddr_reg:x16; val_offset:84; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f30, f14, 0x0, 0, x16, 84, x17, x15, 168, x18)

inst_22:
// rs1==f23, rd==f4, fs1 == 0 and fe1 == 0x7f and fm1 == 0x000008 and rm_val == 0  
// opcode: fsqrt.s ; op1:f23; dest:f4; op1val:0x3f800008; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f4, f23, 0x0, 0, x16, 88, x17, x15, 176, x18)

inst_23:
// rs1==f24, rd==f23, fs1 == 0 and fe1 == 0x7f and fm1 == 0x000004 and rm_val == 0  
// opcode: fsqrt.s ; op1:f24; dest:f23; op1val:0x3f800004; valaddr_reg:x16; val_offset:92; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f23, f24, 0x0, 0, x16, 92, x17, x15, 184, x18)

inst_24:
// rs1==f6, rd==f27, fs1 == 0 and fe1 == 0x7f and fm1 == 0x000002 and rm_val == 0  
// opcode: fsqrt.s ; op1:f6; dest:f27; op1val:0x3f800002; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f27, f6, 0x0, 0, x16, 96, x17, x15, 192, x18)

inst_25:
// rs1==f5, rd==f3, 
// opcode: fsqrt.s ; op1:f5; dest:f3; op1val:0x0; valaddr_reg:x16; val_offset:100; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f3, f5, 0x0, 0, x16, 100, x17, x15, 200, x18)

inst_26:
// rs1==f18, rd==f25, 
// opcode: fsqrt.s ; op1:f18; dest:f25; op1val:0x0; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f25, f18, 0x0, 0, x16, 104, x17, x15, 208, x18)

inst_27:
// rs1==f22, rd==f0, 
// opcode: fsqrt.s ; op1:f22; dest:f0; op1val:0x0; valaddr_reg:x16; val_offset:108; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f0, f22, 0x0, 0, x16, 108, x17, x15, 216, x18)

inst_28:
// rs1==f1, rd==f14, 
// opcode: fsqrt.s ; op1:f1; dest:f14; op1val:0x0; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f14, f1, 0x0, 0, x16, 112, x17, x15, 224, x18)

inst_29:
// rs1==f7, rd==f31, 
// opcode: fsqrt.s ; op1:f7; dest:f31; op1val:0x0; valaddr_reg:x16; val_offset:116; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f31, f7, 0x0, 0, x16, 116, x17, x15, 232, x18)

inst_30:
// rs1==f25, rd==f18, 
// opcode: fsqrt.s ; op1:f25; dest:f18; op1val:0x0; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f18, f25, 0x0, 0, x16, 120, x17, x15, 240, x18)

inst_31:
// rs1==f9, rd==f22, 
// opcode: fsqrt.s ; op1:f9; dest:f22; op1val:0x0; valaddr_reg:x16; val_offset:124; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f22, f9, 0x0, 0, x16, 124, x17, x15, 248, x18)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
test_fp:
.word 0x7f0
.word 0x7f800000
.word 0x40100000
.word 0x3fc80000
.word 0x3fa20000
.word 0x3f908000
.word 0x3f882000
.word 0x3f840800
.word 0x3f820200
.word 0x3f810080
.word 0x3f808020
.word 0x3f804008
.word 0x3f802002
.word 0x3f801000
.word 0x3f800800
.word 0x3f800400
.word 0x3f800200
.word 0x3f800100
.word 0x3f800080
.word 0x3f800040
.word 0x3f800020
.word 0x3f800010
.word 0x3f800008
.word 0x3f800004
.word 0x3f800002
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 64*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
