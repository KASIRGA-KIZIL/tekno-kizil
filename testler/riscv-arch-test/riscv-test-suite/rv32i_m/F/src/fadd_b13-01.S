
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.5.2
// timestamp : Tue Sep  7 16:07:52 2021 GMT
// usage     : riscv_ctg \
//                  -- cgf $cgf \
//                  -- xlen $xlen \
// -----------
//
// -----------
// Copyright (c) 2021. IIT Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fadd.s instruction of the RISC-V F extension for the fadd_b13 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fadd_b13)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs1 == rs2 == rd, rs1==f25, rs2==f25, rd==f25, fs1 == 0 and fe1 == 0xfe and fm1 == 0x222105 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x222105 and rm_val == 0  
// opcode: fadd.s ; op1:f25; op2:f25; dest:f25; op1val:0x7f222105; op2val:0x7f222105; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f25, f25, f25, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1:
// rs2 == rd != rs1, rs1==f1, rs2==f17, rd==f17, fs1 == 0 and fe1 == 0xfd and fm1 == 0x612c54 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x612c54 and rm_val == 0  
// opcode: fadd.s ; op1:f1; op2:f17; dest:f17; op1val:0x7ee12c54; op2val:0xfee12c54; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f17, f1, f17, 0x0, 0, x16, 8, x17, x15, 8, x18)

inst_2:
// rs1 == rd != rs2, rs1==f16, rs2==f18, rd==f16, fs1 == 0 and fe1 == 0xfe and fm1 == 0x17e134 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x17e134 and rm_val == 0  
// opcode: fadd.s ; op1:f16; op2:f18; dest:f16; op1val:0x7f17e134; op2val:0xff17e134; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f16, f16, f18, 0x0, 0, x16, 16, x17, x15, 16, x18)

inst_3:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==f4, rs2==f13, rd==f18, fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e88a3 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1e88a3 and rm_val == 0  
// opcode: fadd.s ; op1:f4; op2:f13; dest:f18; op1val:0x7f1e88a3; op2val:0xff1e88a3; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f18, f4, f13, 0x0, 0, x16, 24, x17, x15, 24, x18)

inst_4:
// rs1 == rs2 != rd, rs1==f27, rs2==f27, rd==f19, fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d998f and fs2 == 1 and fe2 == 0xfd and fm2 == 0x4d998f and rm_val == 0  
// opcode: fadd.s ; op1:f27; op2:f27; dest:f19; op1val:0x7ecd998f; op2val:0x7ecd998f; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f19, f27, f27, 0x0, 0, x16, 32, x17, x15, 32, x18)

inst_5:
// rs1==f13, rs2==f10, rd==f22, fs1 == 0 and fe1 == 0xfe and fm1 == 0x2de8ee and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2de8ee and rm_val == 0  
// opcode: fadd.s ; op1:f13; op2:f10; dest:f22; op1val:0x7f2de8ee; op2val:0xff2de8ee; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f22, f13, f10, 0x0, 0, x16, 40, x17, x15, 40, x18)

inst_6:
// rs1==f14, rs2==f6, rd==f23, fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e2ea7 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3e2ea7 and rm_val == 0  
// opcode: fadd.s ; op1:f14; op2:f6; dest:f23; op1val:0x7f3e2ea7; op2val:0xff3e2ea7; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f23, f14, f6, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_7:
// rs1==f3, rs2==f8, rd==f9, fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a94c3 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1a94c3 and rm_val == 0  
// opcode: fadd.s ; op1:f3; op2:f8; dest:f9; op1val:0x7f1a94c3; op2val:0xff1a94c3; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f9, f3, f8, 0x0, 0, x16, 56, x17, x15, 56, x18)

inst_8:
// rs1==f0, rs2==f28, rd==f6, fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c5df5 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x5c5df5 and rm_val == 0  
// opcode: fadd.s ; op1:f0; op2:f28; dest:f6; op1val:0x7edc5df5; op2val:0xfedc5df5; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f6, f0, f28, 0x0, 0, x16, 64, x17, x15, 64, x18)

inst_9:
// rs1==f8, rs2==f31, rd==f12, fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0265 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2d0265 and rm_val == 0  
// opcode: fadd.s ; op1:f8; op2:f31; dest:f12; op1val:0x7f2d0265; op2val:0xff2d0265; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f8, f31, 0x0, 0, x16, 72, x17, x15, 72, x18)

inst_10:
// rs1==f23, rs2==f30, rd==f3, fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0xfe and fm2 == 0x39f88a and rm_val == 0  
// opcode: fadd.s ; op1:f23; op2:f30; dest:f3; op1val:0x7f39f88a; op2val:0xff39f88a; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f3, f23, f30, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_11:
// rs1==f9, rs2==f19, rd==f2, fs1 == 0 and fe1 == 0xfb and fm1 == 0x649633 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x649633 and rm_val == 0  
// opcode: fadd.s ; op1:f9; op2:f19; dest:f2; op1val:0x7de49633; op2val:0xfde49633; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f2, f9, f19, 0x0, 0, x16, 88, x17, x15, 88, x18)

inst_12:
// rs1==f12, rs2==f24, rd==f8, fs1 == 0 and fe1 == 0xfc and fm1 == 0x7de57e and fs2 == 1 and fe2 == 0xfc and fm2 == 0x7de57e and rm_val == 0  
// opcode: fadd.s ; op1:f12; op2:f24; dest:f8; op1val:0x7e7de57e; op2val:0xfe7de57e; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f8, f12, f24, 0x0, 0, x16, 96, x17, x15, 96, x18)

inst_13:
// rs1==f10, rs2==f20, rd==f13, fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 1 and fe2 == 0xf8 and fm2 == 0x3bd2e4 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f20; dest:f13; op1val:0x7c3bd2e4; op2val:0xfc3bd2e4; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f13, f10, f20, 0x0, 0, x16, 104, x17, x15, 104, x18)

inst_14:
// rs1==f15, rs2==f22, rd==f0, fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 1 and fe2 == 0xfc and fm2 == 0x2cde9f and rm_val == 0  
// opcode: fadd.s ; op1:f15; op2:f22; dest:f0; op1val:0x7e2cde9f; op2val:0xfe2cde9f; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f0, f15, f22, 0x0, 0, x16, 112, x17, x15, 112, x18)

inst_15:
// rs1==f20, rs2==f15, rd==f5, fs1 == 0 and fe1 == 0xfe and fm1 == 0x26d3f0 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x26d3f0 and rm_val == 0  
// opcode: fadd.s ; op1:f20; op2:f15; dest:f5; op1val:0x7f26d3f0; op2val:0xff26d3f0; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f5, f20, f15, 0x0, 0, x16, 120, x17, x15, 120, x18)

inst_16:
// rs1==f7, rs2==f12, rd==f28, fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x4bdaf1 and rm_val == 0  
// opcode: fadd.s ; op1:f7; op2:f12; dest:f28; op1val:0x7d4bdaf1; op2val:0xfd4bdaf1; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f28, f7, f12, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_17:
// rs1==f30, rs2==f1, rd==f24, fs1 == 0 and fe1 == 0xfe and fm1 == 0x09e19b and fs2 == 1 and fe2 == 0xfe and fm2 == 0x09e19b and rm_val == 0  
// opcode: fadd.s ; op1:f30; op2:f1; dest:f24; op1val:0x7f09e19b; op2val:0xff09e19b; valaddr_reg:x16; val_offset:136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f24, f30, f1, 0x0, 0, x16, 136, x17, x15, 136, x18)

inst_18:
// rs1==f17, rs2==f2, rd==f11, fs1 == 0 and fe1 == 0xfe and fm1 == 0x21ba5d and fs2 == 1 and fe2 == 0xfe and fm2 == 0x21ba5d and rm_val == 0  
// opcode: fadd.s ; op1:f17; op2:f2; dest:f11; op1val:0x7f21ba5d; op2val:0xff21ba5d; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f11, f17, f2, 0x0, 0, x16, 144, x17, x15, 144, x18)

inst_19:
// rs1==f18, rs2==f7, rd==f31, fs1 == 0 and fe1 == 0xfc and fm1 == 0x454909 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x454909 and rm_val == 0  
// opcode: fadd.s ; op1:f18; op2:f7; dest:f31; op1val:0x7e454909; op2val:0xfe454909; valaddr_reg:x16; val_offset:152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f31, f18, f7, 0x0, 0, x16, 152, x17, x15, 152, x18)

inst_20:
// rs1==f26, rs2==f4, rd==f30, fs1 == 0 and fe1 == 0xf9 and fm1 == 0x59eac0 and fs2 == 1 and fe2 == 0xf9 and fm2 == 0x59eac0 and rm_val == 0  
// opcode: fadd.s ; op1:f26; op2:f4; dest:f30; op1val:0x7cd9eac0; op2val:0xfcd9eac0; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f30, f26, f4, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_21:
// rs1==f31, rs2==f26, rd==f29, fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2c9c0a and rm_val == 0  
// opcode: fadd.s ; op1:f31; op2:f26; dest:f29; op1val:0x7f2c9c0a; op2val:0xff2c9c0a; valaddr_reg:x16; val_offset:168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f29, f31, f26, 0x0, 0, x16, 168, x17, x15, 168, x18)

inst_22:
// rs1==f24, rs2==f14, rd==f7, fs1 == 0 and fe1 == 0xfd and fm1 == 0x02a504 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x02a504 and rm_val == 0  
// opcode: fadd.s ; op1:f24; op2:f14; dest:f7; op1val:0x7e82a504; op2val:0xfe82a504; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f7, f24, f14, 0x0, 0, x16, 176, x17, x15, 176, x18)

inst_23:
// rs1==f19, rs2==f9, rd==f15, fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a26e3 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x6a26e3 and rm_val == 0  
// opcode: fadd.s ; op1:f19; op2:f9; dest:f15; op1val:0x7eea26e3; op2val:0xfeea26e3; valaddr_reg:x16; val_offset:184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f15, f19, f9, 0x0, 0, x16, 184, x17, x15, 184, x18)

inst_24:
// rs1==f21, rs2==f29, rd==f20, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x00a730 and rm_val == 0  
// opcode: fadd.s ; op1:f21; op2:f29; dest:f20; op1val:0x7f00a730; op2val:0xff00a730; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f20, f21, f29, 0x0, 0, x16, 192, x17, x15, 192, x18)

inst_25:
// rs1==f22, rs2==f23, rd==f21, fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f66bb and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3f66bb and rm_val == 0  
// opcode: fadd.s ; op1:f22; op2:f23; dest:f21; op1val:0x7ebf66bb; op2val:0xfebf66bb; valaddr_reg:x16; val_offset:200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f21, f22, f23, 0x0, 0, x16, 200, x17, x15, 200, x18)

inst_26:
// rs1==f28, rs2==f5, rd==f10, fs1 == 0 and fe1 == 0xfe and fm1 == 0x3012ad and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3012ad and rm_val == 0  
// opcode: fadd.s ; op1:f28; op2:f5; dest:f10; op1val:0x7f3012ad; op2val:0xff3012ad; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f10, f28, f5, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_27:
// rs1==f2, rs2==f11, rd==f4, fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x288293 and rm_val == 0  
// opcode: fadd.s ; op1:f2; op2:f11; dest:f4; op1val:0x7f288293; op2val:0xff288293; valaddr_reg:x16; val_offset:216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f4, f2, f11, 0x0, 0, x16, 216, x17, x15, 216, x18)

inst_28:
// rs1==f5, rs2==f16, rd==f1, fs1 == 0 and fe1 == 0xfd and fm1 == 0x1bde44 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1bde44 and rm_val == 0  
// opcode: fadd.s ; op1:f5; op2:f16; dest:f1; op1val:0x7e9bde44; op2val:0xfe9bde44; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f1, f5, f16, 0x0, 0, x16, 224, x17, x15, 224, x18)

inst_29:
// rs1==f29, rs2==f3, rd==f27, fs1 == 0 and fe1 == 0xfe and fm1 == 0x3cbbe2 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3cbbe2 and rm_val == 0  
// opcode: fadd.s ; op1:f29; op2:f3; dest:f27; op1val:0x7f3cbbe2; op2val:0xff3cbbe2; valaddr_reg:x16; val_offset:232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f27, f29, f3, 0x0, 0, x16, 232, x17, x15, 232, x18)

inst_30:
// rs1==f6, rs2==f0, rd==f14, fs1 == 0 and fe1 == 0xfb and fm1 == 0x687317 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x687317 and rm_val == 0  
// opcode: fadd.s ; op1:f6; op2:f0; dest:f14; op1val:0x7de87317; op2val:0xfde87317; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f14, f6, f0, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_31:
// rs1==f11, rs2==f21, rd==f26, fs1 == 0 and fe1 == 0xfd and fm1 == 0x112a0d and fs2 == 1 and fe2 == 0xfd and fm2 == 0x112a0d and rm_val == 0  
// opcode: fadd.s ; op1:f11; op2:f21; dest:f26; op1val:0x7e912a0d; op2val:0xfe912a0d; valaddr_reg:x16; val_offset:248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f26, f11, f21, 0x0, 0, x16, 248, x17, x15, 248, x18)

inst_32:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x60ccec and fs2 == 1 and fe2 == 0xfb and fm2 == 0x60ccec and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7de0ccec; op2val:0xfde0ccec; valaddr_reg:x16; val_offset:256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 256, x17, x15, 256, x18)

inst_33:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x360231 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x360231 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f360231; op2val:0xff360231; valaddr_reg:x16; val_offset:264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 264, x17, x15, 264, x18)

inst_34:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1f2776 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x1f2776 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e1f2776; op2val:0xfe1f2776; valaddr_reg:x16; val_offset:272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 272, x17, x15, 272, x18)

inst_35:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x36a56c and fs2 == 1 and fe2 == 0xfb and fm2 == 0x36a56c and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7db6a56c; op2val:0xfdb6a56c; valaddr_reg:x16; val_offset:280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 280, x17, x15, 280, x18)

inst_36:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d6b3e and fs2 == 1 and fe2 == 0xfd and fm2 == 0x2d6b3e and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ead6b3e; op2val:0xfead6b3e; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_37:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06c8e8 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x06c8e8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f06c8e8; op2val:0xff06c8e8; valaddr_reg:x16; val_offset:296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 296, x17, x15, 296, x18)

inst_38:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x442bee and fs2 == 1 and fe2 == 0xfa and fm2 == 0x442bee and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d442bee; op2val:0xfd442bee; valaddr_reg:x16; val_offset:304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 304, x17, x15, 304, x18)

inst_39:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2596bf and fs2 == 1 and fe2 == 0xfd and fm2 == 0x2596bf and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ea596bf; op2val:0xfea596bf; valaddr_reg:x16; val_offset:312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 312, x17, x15, 312, x18)

inst_40:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x486246 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x486246 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e486246; op2val:0xfe486246; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_41:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0d7074 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x0d7074 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e8d7074; op2val:0xfe8d7074; valaddr_reg:x16; val_offset:328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 328, x17, x15, 328, x18)

inst_42:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026d14 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x026d14 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f026d14; op2val:0xff026d14; valaddr_reg:x16; val_offset:336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 336, x17, x15, 336, x18)

inst_43:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3ba12e and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3ba12e and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ebba12e; op2val:0xfebba12e; valaddr_reg:x16; val_offset:344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 344, x17, x15, 344, x18)

inst_44:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c23 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x474c23 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec74c23; op2val:0xfec74c23; valaddr_reg:x16; val_offset:352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 352, x17, x15, 352, x18)

inst_45:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x40f240 and fs2 == 1 and fe2 == 0xf7 and fm2 == 0x40f240 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7bc0f240; op2val:0xfbc0f240; valaddr_reg:x16; val_offset:360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 360, x17, x15, 360, x18)

inst_46:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0ff996 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0ff996; op2val:0xff0ff996; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_47:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4a3e7e and fs2 == 1 and fe2 == 0xfa and fm2 == 0x4a3e7e and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d4a3e7e; op2val:0xfd4a3e7e; valaddr_reg:x16; val_offset:376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 376, x17, x15, 376, x18)

inst_48:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3b1d98 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3b1d98; op2val:0xff3b1d98; valaddr_reg:x16; val_offset:384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 384, x17, x15, 384, x18)

inst_49:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70ab3f and fs2 == 1 and fe2 == 0xfd and fm2 == 0x70ab3f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ef0ab3f; op2val:0xfef0ab3f; valaddr_reg:x16; val_offset:392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 392, x17, x15, 392, x18)

inst_50:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2bb989 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2bb989; op2val:0xff2bb989; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_51:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67dc90 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x67dc90 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e67dc90; op2val:0xfe67dc90; valaddr_reg:x16; val_offset:408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 408, x17, x15, 408, x18)

inst_52:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x065281 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x065281 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f065281; op2val:0xff065281; valaddr_reg:x16; val_offset:416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 416, x17, x15, 416, x18)

inst_53:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x03f653 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e83f653; op2val:0xfe83f653; valaddr_reg:x16; val_offset:424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 424, x17, x15, 424, x18)

inst_54:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x217160 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f217160; op2val:0xff217160; valaddr_reg:x16; val_offset:432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 432, x17, x15, 432, x18)

inst_55:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e7655 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2e7655 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2e7655; op2val:0xff2e7655; valaddr_reg:x16; val_offset:440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 440, x17, x15, 440, x18)

inst_56:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1f40ca and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e9f40ca; op2val:0xfe9f40ca; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_57:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ad123 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1ad123 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e9ad123; op2val:0xfe9ad123; valaddr_reg:x16; val_offset:456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 456, x17, x15, 456, x18)

inst_58:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 1 and fe2 == 0xfd and fm2 == 0x48d9ed and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec8d9ed; op2val:0xfec8d9ed; valaddr_reg:x16; val_offset:464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 464, x17, x15, 464, x18)

inst_59:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x143e58 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x143e58 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d143e58; op2val:0xfd143e58; valaddr_reg:x16; val_offset:472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 472, x17, x15, 472, x18)

inst_60:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3793aa and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3793aa and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eb793aa; op2val:0xfeb793aa; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_61:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x529e32 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ed29e32; op2val:0xfed29e32; valaddr_reg:x16; val_offset:488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 488, x17, x15, 488, x18)

inst_62:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5e5c14 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x5e5c14 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e5e5c14; op2val:0xfe5e5c14; valaddr_reg:x16; val_offset:496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 496, x17, x15, 496, x18)

inst_63:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7bb095 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x7bb095 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dfbb095; op2val:0xfdfbb095; valaddr_reg:x16; val_offset:504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 504, x17, x15, 504, x18)

inst_64:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4960 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x6e4960 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eee4960; op2val:0xfeee4960; valaddr_reg:x16; val_offset:512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 512, x17, x15, 512, x18)

inst_65:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f3ae and fs2 == 1 and fe2 == 0xfe and fm2 == 0x09f3ae and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f09f3ae; op2val:0xff09f3ae; valaddr_reg:x16; val_offset:520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 520, x17, x15, 520, x18)

inst_66:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x000760 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x000760 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e800760; op2val:0xfe800760; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_67:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5aa799 and fs2 == 1 and fe2 == 0xf7 and fm2 == 0x5aa799 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7bdaa799; op2val:0xfbdaa799; valaddr_reg:x16; val_offset:536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 536, x17, x15, 536, x18)

inst_68:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1f9fcf and fs2 == 1 and fe2 == 0xfc and fm2 == 0x1f9fcf and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e1f9fcf; op2val:0xfe1f9fcf; valaddr_reg:x16; val_offset:544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 544, x17, x15, 544, x18)

inst_69:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0540 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x0f0540 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e8f0540; op2val:0xfe8f0540; valaddr_reg:x16; val_offset:552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 552, x17, x15, 552, x18)

inst_70:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d5201 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2d5201 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2d5201; op2val:0xff2d5201; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_71:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba8b0 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7ba8b0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7efba8b0; op2val:0xfefba8b0; valaddr_reg:x16; val_offset:568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 568, x17, x15, 568, x18)

inst_72:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fd579 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0fd579 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0fd579; op2val:0xff0fd579; valaddr_reg:x16; val_offset:576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 576, x17, x15, 576, x18)

inst_73:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eb100 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2eb100 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2eb100; op2val:0xff2eb100; valaddr_reg:x16; val_offset:584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 584, x17, x15, 584, x18)

inst_74:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x35ba7d and fs2 == 1 and fe2 == 0xfe and fm2 == 0x35ba7d and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f35ba7d; op2val:0xff35ba7d; valaddr_reg:x16; val_offset:592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 592, x17, x15, 592, x18)

inst_75:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c05a and fs2 == 1 and fe2 == 0xfe and fm2 == 0x02c05a and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f02c05a; op2val:0xff02c05a; valaddr_reg:x16; val_offset:600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 600, x17, x15, 600, x18)

inst_76:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x643dc7 and fs2 == 1 and fe2 == 0xf8 and fm2 == 0x643dc7 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7c643dc7; op2val:0xfc643dc7; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 608, x17, x15, 608, x18)

inst_77:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2765d9 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2765d9 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2765d9; op2val:0xff2765d9; valaddr_reg:x16; val_offset:616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 616, x17, x15, 616, x18)

inst_78:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x79e697 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x79e697 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ef9e697; op2val:0xfef9e697; valaddr_reg:x16; val_offset:624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 624, x17, x15, 624, x18)

inst_79:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4cef18 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x4cef18 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dccef18; op2val:0xfdccef18; valaddr_reg:x16; val_offset:632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 632, x17, x15, 632, x18)

inst_80:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18212b and fs2 == 1 and fe2 == 0xfe and fm2 == 0x18212b and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f18212b; op2val:0xff18212b; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_81:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x52faef and fs2 == 1 and fe2 == 0xfc and fm2 == 0x52faef and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e52faef; op2val:0xfe52faef; valaddr_reg:x16; val_offset:648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 648, x17, x15, 648, x18)

inst_82:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1854d1 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1854d1 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e9854d1; op2val:0xfe9854d1; valaddr_reg:x16; val_offset:656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 656, x17, x15, 656, x18)

inst_83:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19e0a5 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x19e0a5 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d99e0a5; op2val:0xfd99e0a5; valaddr_reg:x16; val_offset:664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 664, x17, x15, 664, x18)

inst_84:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5706d8 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x5706d8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e5706d8; op2val:0xfe5706d8; valaddr_reg:x16; val_offset:672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 672, x17, x15, 672, x18)

inst_85:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795162 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x795162 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ef95162; op2val:0xfef95162; valaddr_reg:x16; val_offset:680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 680, x17, x15, 680, x18)

inst_86:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x16325d and fs2 == 1 and fe2 == 0xfb and fm2 == 0x16325d and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d96325d; op2val:0xfd96325d; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 688, x17, x15, 688, x18)

inst_87:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1df6e4 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1df6e4 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1df6e4; op2val:0xff1df6e4; valaddr_reg:x16; val_offset:696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 696, x17, x15, 696, x18)

inst_88:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b9ea and fs2 == 1 and fe2 == 0xfe and fm2 == 0x09b9ea and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f09b9ea; op2val:0xff09b9ea; valaddr_reg:x16; val_offset:704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 704, x17, x15, 704, x18)

inst_89:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72d2f3 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x72d2f3 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e72d2f3; op2val:0xfe72d2f3; valaddr_reg:x16; val_offset:712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 712, x17, x15, 712, x18)

inst_90:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a4c33 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1a4c33 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e9a4c33; op2val:0xfe9a4c33; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_91:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0b4e72 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0b4e72 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0b4e72; op2val:0xff0b4e72; valaddr_reg:x16; val_offset:728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 728, x17, x15, 728, x18)

inst_92:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x731b27 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x731b27 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ef31b27; op2val:0xfef31b27; valaddr_reg:x16; val_offset:736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 736, x17, x15, 736, x18)

inst_93:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10628e and fs2 == 1 and fe2 == 0xfc and fm2 == 0x10628e and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e10628e; op2val:0xfe10628e; valaddr_reg:x16; val_offset:744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 744, x17, x15, 744, x18)

inst_94:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2800cd and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2800cd and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2800cd; op2val:0xff2800cd; valaddr_reg:x16; val_offset:752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 752, x17, x15, 752, x18)

inst_95:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33495f and fs2 == 1 and fe2 == 0xfd and fm2 == 0x33495f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eb3495f; op2val:0xfeb3495f; valaddr_reg:x16; val_offset:760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 760, x17, x15, 760, x18)

inst_96:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3deb73 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3deb73 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ebdeb73; op2val:0xfebdeb73; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 768, x17, x15, 768, x18)

inst_97:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x110d95 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x110d95 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f110d95; op2val:0xff110d95; valaddr_reg:x16; val_offset:776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 776, x17, x15, 776, x18)

inst_98:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b1c27 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3b1c27 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ebb1c27; op2val:0xfebb1c27; valaddr_reg:x16; val_offset:784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 784, x17, x15, 784, x18)

inst_99:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7234e1 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x7234e1 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7df234e1; op2val:0xfdf234e1; valaddr_reg:x16; val_offset:792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 792, x17, x15, 792, x18)

inst_100:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b03e6 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x2b03e6 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eab03e6; op2val:0xfeab03e6; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_101:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e4880 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7e4880 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7efe4880; op2val:0xfefe4880; valaddr_reg:x16; val_offset:808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 808, x17, x15, 808, x18)

inst_102:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06c054 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x06c054 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f06c054; op2val:0xff06c054; valaddr_reg:x16; val_offset:816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 816, x17, x15, 816, x18)

inst_103:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f21ce and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1f21ce and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e9f21ce; op2val:0xfe9f21ce; valaddr_reg:x16; val_offset:824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 824, x17, x15, 824, x18)

inst_104:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2814cf and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2814cf and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2814cf; op2val:0xff2814cf; valaddr_reg:x16; val_offset:832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 832, x17, x15, 832, x18)

inst_105:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74c2e8 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x74c2e8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ef4c2e8; op2val:0xfef4c2e8; valaddr_reg:x16; val_offset:840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 840, x17, x15, 840, x18)

inst_106:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x006905 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x006905 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e806905; op2val:0xfe806905; valaddr_reg:x16; val_offset:848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 848, x17, x15, 848, x18)

inst_107:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x15d64c and fs2 == 1 and fe2 == 0xf5 and fm2 == 0x15d64c and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a95d64c; op2val:0xfa95d64c; valaddr_reg:x16; val_offset:856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 856, x17, x15, 856, x18)

inst_108:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f22f1 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1f22f1 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e9f22f1; op2val:0xfe9f22f1; valaddr_reg:x16; val_offset:864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 864, x17, x15, 864, x18)

inst_109:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09661e and fs2 == 1 and fe2 == 0xfe and fm2 == 0x09661e and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f09661e; op2val:0xff09661e; valaddr_reg:x16; val_offset:872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 872, x17, x15, 872, x18)

inst_110:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735bf2 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x735bf2 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ef35bf2; op2val:0xfef35bf2; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 880, x17, x15, 880, x18)

inst_111:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09eee9 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x09eee9 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e89eee9; op2val:0xfe89eee9; valaddr_reg:x16; val_offset:888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 888, x17, x15, 888, x18)

inst_112:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07412e and fs2 == 1 and fe2 == 0xfd and fm2 == 0x07412e and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e87412e; op2val:0xfe87412e; valaddr_reg:x16; val_offset:896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 896, x17, x15, 896, x18)

inst_113:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x386b8e and fs2 == 1 and fe2 == 0xfc and fm2 == 0x386b8e and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e386b8e; op2val:0xfe386b8e; valaddr_reg:x16; val_offset:904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 904, x17, x15, 904, x18)

inst_114:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0c612e and fs2 == 1 and fe2 == 0xfa and fm2 == 0x0c612e and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d0c612e; op2val:0xfd0c612e; valaddr_reg:x16; val_offset:912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 912, x17, x15, 912, x18)

inst_115:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e61dc and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0e61dc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0e61dc; op2val:0xff0e61dc; valaddr_reg:x16; val_offset:920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 920, x17, x15, 920, x18)

inst_116:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x57453d and fs2 == 1 and fe2 == 0xfd and fm2 == 0x57453d and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ed7453d; op2val:0xfed7453d; valaddr_reg:x16; val_offset:928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 928, x17, x15, 928, x18)

inst_117:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d4b8 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x20d4b8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f20d4b8; op2val:0xff20d4b8; valaddr_reg:x16; val_offset:936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 936, x17, x15, 936, x18)

inst_118:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f30c5 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x6f30c5 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e6f30c5; op2val:0xfe6f30c5; valaddr_reg:x16; val_offset:944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 944, x17, x15, 944, x18)

inst_119:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a8a0e and fs2 == 1 and fe2 == 0xfd and fm2 == 0x5a8a0e and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eda8a0e; op2val:0xfeda8a0e; valaddr_reg:x16; val_offset:952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 952, x17, x15, 952, x18)

inst_120:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x351aa9 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x351aa9 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eb51aa9; op2val:0xfeb51aa9; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 960, x17, x15, 960, x18)

inst_121:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d93c and fs2 == 1 and fe2 == 0xfd and fm2 == 0x29d93c and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ea9d93c; op2val:0xfea9d93c; valaddr_reg:x16; val_offset:968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 968, x17, x15, 968, x18)

inst_122:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x408722 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x408722 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e408722; op2val:0xfe408722; valaddr_reg:x16; val_offset:976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 976, x17, x15, 976, x18)

inst_123:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22524e and fs2 == 1 and fe2 == 0xfe and fm2 == 0x22524e and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f22524e; op2val:0xff22524e; valaddr_reg:x16; val_offset:984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 984, x17, x15, 984, x18)

inst_124:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x32551e and fs2 == 1 and fe2 == 0xfa and fm2 == 0x32551e and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d32551e; op2val:0xfd32551e; valaddr_reg:x16; val_offset:992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 992, x17, x15, 992, x18)

inst_125:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0125a0 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0125a0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0125a0; op2val:0xff0125a0; valaddr_reg:x16; val_offset:1000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1000, x17, x15, 1000, x18)

inst_126:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30593a and fs2 == 1 and fe2 == 0xfe and fm2 == 0x30593a and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f30593a; op2val:0xff30593a; valaddr_reg:x16; val_offset:1008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1008, x17, x15, 1008, x18)

inst_127:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c7784 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0c7784 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0c7784; op2val:0xff0c7784; valaddr_reg:x16; val_offset:1016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1016, x17, x15, 1016, x18)

inst_128:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x191af1 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x191af1 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e191af1; op2val:0xfe191af1; valaddr_reg:x16; val_offset:1024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1024, x17, x15, 1024, x18)

inst_129:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1b03d8 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x1b03d8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d9b03d8; op2val:0xfd9b03d8; valaddr_reg:x16; val_offset:1032; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1032, x17, x15, 1032, x18)

inst_130:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x41657b and fs2 == 1 and fe2 == 0xfd and fm2 == 0x41657b and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec1657b; op2val:0xfec1657b; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1040, x17, x15, 1040, x18)

inst_131:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06834b and fs2 == 1 and fe2 == 0xfd and fm2 == 0x06834b and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e86834b; op2val:0xfe86834b; valaddr_reg:x16; val_offset:1048; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1048, x17, x15, 1048, x18)

inst_132:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2998cc and fs2 == 1 and fe2 == 0xfc and fm2 == 0x2998cc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e2998cc; op2val:0xfe2998cc; valaddr_reg:x16; val_offset:1056; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1056, x17, x15, 1056, x18)

inst_133:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1be782 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x1be782 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d9be782; op2val:0xfd9be782; valaddr_reg:x16; val_offset:1064; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1064, x17, x15, 1064, x18)

inst_134:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0bf9e4 and fs2 == 1 and fe2 == 0xf9 and fm2 == 0x0bf9e4 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7c8bf9e4; op2val:0xfc8bf9e4; valaddr_reg:x16; val_offset:1072; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1072, x17, x15, 1072, x18)

inst_135:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19be4b and fs2 == 1 and fe2 == 0xfe and fm2 == 0x19be4b and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f19be4b; op2val:0xff19be4b; valaddr_reg:x16; val_offset:1080; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1080, x17, x15, 1080, x18)

inst_136:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3e4d8f and fs2 == 1 and fe2 == 0xfb and fm2 == 0x3e4d8f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dbe4d8f; op2val:0xfdbe4d8f; valaddr_reg:x16; val_offset:1088; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1088, x17, x15, 1088, x18)

inst_137:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38849b and fs2 == 1 and fe2 == 0xfe and fm2 == 0x38849b and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f38849b; op2val:0xff38849b; valaddr_reg:x16; val_offset:1096; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1096, x17, x15, 1096, x18)

inst_138:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x5f97b9 and fs2 == 1 and fe2 == 0xf9 and fm2 == 0x5f97b9 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7cdf97b9; op2val:0xfcdf97b9; valaddr_reg:x16; val_offset:1104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1104, x17, x15, 1104, x18)

inst_139:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e223c and fs2 == 1 and fe2 == 0xfd and fm2 == 0x0e223c and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e8e223c; op2val:0xfe8e223c; valaddr_reg:x16; val_offset:1112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1112, x17, x15, 1112, x18)

inst_140:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d2a79 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x5d2a79 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7edd2a79; op2val:0xfedd2a79; valaddr_reg:x16; val_offset:1120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1120, x17, x15, 1120, x18)

inst_141:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x73d707 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x73d707 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ef3d707; op2val:0xfef3d707; valaddr_reg:x16; val_offset:1128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1128, x17, x15, 1128, x18)

inst_142:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ac50 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x02ac50 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f02ac50; op2val:0xff02ac50; valaddr_reg:x16; val_offset:1136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1136, x17, x15, 1136, x18)

inst_143:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eb91a and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2eb91a and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2eb91a; op2val:0xff2eb91a; valaddr_reg:x16; val_offset:1144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1144, x17, x15, 1144, x18)

inst_144:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0af584 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x0af584 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d0af584; op2val:0xfd0af584; valaddr_reg:x16; val_offset:1152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1152, x17, x15, 1152, x18)

inst_145:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x60ce7f and fs2 == 1 and fe2 == 0xfb and fm2 == 0x60ce7f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7de0ce7f; op2val:0xfde0ce7f; valaddr_reg:x16; val_offset:1160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1160, x17, x15, 1160, x18)

inst_146:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ca7c2 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1ca7c2 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1ca7c2; op2val:0xff1ca7c2; valaddr_reg:x16; val_offset:1168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1168, x17, x15, 1168, x18)

inst_147:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x188f57 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x188f57 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f188f57; op2val:0xff188f57; valaddr_reg:x16; val_offset:1176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1176, x17, x15, 1176, x18)

inst_148:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x33eb13 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x33eb13 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7db3eb13; op2val:0xfdb3eb13; valaddr_reg:x16; val_offset:1184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1184, x17, x15, 1184, x18)

inst_149:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3aa6be and fs2 == 1 and fe2 == 0xfc and fm2 == 0x3aa6be and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e3aa6be; op2val:0xfe3aa6be; valaddr_reg:x16; val_offset:1192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1192, x17, x15, 1192, x18)

inst_150:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71fa00 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x71fa00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ef1fa00; op2val:0xfef1fa00; valaddr_reg:x16; val_offset:1200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1200, x17, x15, 1200, x18)

inst_151:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b4f07 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x6b4f07 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eeb4f07; op2val:0xfeeb4f07; valaddr_reg:x16; val_offset:1208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1208, x17, x15, 1208, x18)

inst_152:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x185183 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x185183 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f185183; op2val:0xff185183; valaddr_reg:x16; val_offset:1216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1216, x17, x15, 1216, x18)

inst_153:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f4810 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3f4810 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3f4810; op2val:0xff3f4810; valaddr_reg:x16; val_offset:1224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1224, x17, x15, 1224, x18)

inst_154:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d0427 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x2d0427 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ead0427; op2val:0xfead0427; valaddr_reg:x16; val_offset:1232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1232, x17, x15, 1232, x18)

inst_155:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365ad7 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x365ad7 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f365ad7; op2val:0xff365ad7; valaddr_reg:x16; val_offset:1240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1240, x17, x15, 1240, x18)

inst_156:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd8f4 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2bd8f4 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2bd8f4; op2val:0xff2bd8f4; valaddr_reg:x16; val_offset:1248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1248, x17, x15, 1248, x18)

inst_157:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd52c and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1bd52c and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1bd52c; op2val:0xff1bd52c; valaddr_reg:x16; val_offset:1256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1256, x17, x15, 1256, x18)

inst_158:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076a16 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x076a16 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f076a16; op2val:0xff076a16; valaddr_reg:x16; val_offset:1264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1264, x17, x15, 1264, x18)

inst_159:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f9722 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x4f9722 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ecf9722; op2val:0xfecf9722; valaddr_reg:x16; val_offset:1272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1272, x17, x15, 1272, x18)

inst_160:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c7300 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2c7300 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2c7300; op2val:0xff2c7300; valaddr_reg:x16; val_offset:1280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1280, x17, x15, 1280, x18)

inst_161:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x314a05 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x314a05 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f314a05; op2val:0xff314a05; valaddr_reg:x16; val_offset:1288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1288, x17, x15, 1288, x18)

inst_162:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1175bf and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1175bf and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1175bf; op2val:0xff1175bf; valaddr_reg:x16; val_offset:1296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1296, x17, x15, 1296, x18)

inst_163:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36fce6 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x36fce6 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eb6fce6; op2val:0xfeb6fce6; valaddr_reg:x16; val_offset:1304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1304, x17, x15, 1304, x18)

inst_164:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b4e0d and fs2 == 1 and fe2 == 0xfd and fm2 == 0x6b4e0d and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eeb4e0d; op2val:0xfeeb4e0d; valaddr_reg:x16; val_offset:1312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1312, x17, x15, 1312, x18)

inst_165:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x1173d9 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e1173d9; op2val:0xfe1173d9; valaddr_reg:x16; val_offset:1320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1320, x17, x15, 1320, x18)

inst_166:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0xfd and fm2 == 0x5d0ccb and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7edd0ccb; op2val:0xfedd0ccb; valaddr_reg:x16; val_offset:1328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1328, x17, x15, 1328, x18)

inst_167:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64f961 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x64f961 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ee4f961; op2val:0xfee4f961; valaddr_reg:x16; val_offset:1336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1336, x17, x15, 1336, x18)

inst_168:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61a51b and fs2 == 1 and fe2 == 0xfd and fm2 == 0x61a51b and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ee1a51b; op2val:0xfee1a51b; valaddr_reg:x16; val_offset:1344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1344, x17, x15, 1344, x18)

inst_169:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x390e97 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f390e97; op2val:0xff390e97; valaddr_reg:x16; val_offset:1352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1352, x17, x15, 1352, x18)

inst_170:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1c60ac and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1c60ac; op2val:0xff1c60ac; valaddr_reg:x16; val_offset:1360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1360, x17, x15, 1360, x18)

inst_171:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07a8e7 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x07a8e7 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f07a8e7; op2val:0xff07a8e7; valaddr_reg:x16; val_offset:1368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1368, x17, x15, 1368, x18)

inst_172:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x278349 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x278349 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7da78349; op2val:0xfda78349; valaddr_reg:x16; val_offset:1376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1376, x17, x15, 1376, x18)

inst_173:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x430c98 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x430c98 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec30c98; op2val:0xfec30c98; valaddr_reg:x16; val_offset:1384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1384, x17, x15, 1384, x18)

inst_174:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x772129 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d772129; op2val:0xfd772129; valaddr_reg:x16; val_offset:1392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1392, x17, x15, 1392, x18)

inst_175:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a35e0 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1a35e0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1a35e0; op2val:0xff1a35e0; valaddr_reg:x16; val_offset:1400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1400, x17, x15, 1400, x18)

inst_176:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0xfc and fm2 == 0x3741cc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e3741cc; op2val:0xfe3741cc; valaddr_reg:x16; val_offset:1408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1408, x17, x15, 1408, x18)

inst_177:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12bd51 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x12bd51 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e12bd51; op2val:0xfe12bd51; valaddr_reg:x16; val_offset:1416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1416, x17, x15, 1416, x18)

inst_178:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x79c1c6 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e79c1c6; op2val:0xfe79c1c6; valaddr_reg:x16; val_offset:1424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1424, x17, x15, 1424, x18)

inst_179:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x269468 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x269468 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f269468; op2val:0xff269468; valaddr_reg:x16; val_offset:1432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1432, x17, x15, 1432, x18)

inst_180:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0xf4 and fm2 == 0x60affa and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a60affa; op2val:0xfa60affa; valaddr_reg:x16; val_offset:1440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1440, x17, x15, 1440, x18)

inst_181:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e5ec7 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1e5ec7 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1e5ec7; op2val:0xff1e5ec7; valaddr_reg:x16; val_offset:1448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1448, x17, x15, 1448, x18)

inst_182:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2eec and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0a2eec and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0a2eec; op2val:0xff0a2eec; valaddr_reg:x16; val_offset:1456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1456, x17, x15, 1456, x18)

inst_183:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52b355 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x52b355 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ed2b355; op2val:0xfed2b355; valaddr_reg:x16; val_offset:1464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1464, x17, x15, 1464, x18)

inst_184:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x480ede and fs2 == 1 and fe2 == 0xfc and fm2 == 0x480ede and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e480ede; op2val:0xfe480ede; valaddr_reg:x16; val_offset:1472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1472, x17, x15, 1472, x18)

inst_185:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x372bf7 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x372bf7 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eb72bf7; op2val:0xfeb72bf7; valaddr_reg:x16; val_offset:1480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1480, x17, x15, 1480, x18)

inst_186:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f4c51 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2f4c51 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2f4c51; op2val:0xff2f4c51; valaddr_reg:x16; val_offset:1488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1488, x17, x15, 1488, x18)

inst_187:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26b8d3 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x26b8d3 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ea6b8d3; op2val:0xfea6b8d3; valaddr_reg:x16; val_offset:1496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1496, x17, x15, 1496, x18)

inst_188:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x354d84 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x354d84 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eb54d84; op2val:0xfeb54d84; valaddr_reg:x16; val_offset:1504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1504, x17, x15, 1504, x18)

inst_189:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c93b2 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2c93b2 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2c93b2; op2val:0xff2c93b2; valaddr_reg:x16; val_offset:1512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1512, x17, x15, 1512, x18)

inst_190:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e317d and fs2 == 1 and fe2 == 0xfc and fm2 == 0x6e317d and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e6e317d; op2val:0xfe6e317d; valaddr_reg:x16; val_offset:1520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1520, x17, x15, 1520, x18)

inst_191:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8fcb and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1b8fcb and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1b8fcb; op2val:0xff1b8fcb; valaddr_reg:x16; val_offset:1528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1528, x17, x15, 1528, x18)

inst_192:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eabd8 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2eabd8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2eabd8; op2val:0xff2eabd8; valaddr_reg:x16; val_offset:1536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1536, x17, x15, 1536, x18)

inst_193:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d7424 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x6d7424 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eed7424; op2val:0xfeed7424; valaddr_reg:x16; val_offset:1544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1544, x17, x15, 1544, x18)

inst_194:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x587392 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x587392 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e587392; op2val:0xfe587392; valaddr_reg:x16; val_offset:1552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1552, x17, x15, 1552, x18)

inst_195:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e5b90 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2e5b90 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2e5b90; op2val:0xff2e5b90; valaddr_reg:x16; val_offset:1560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1560, x17, x15, 1560, x18)

inst_196:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x370362 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x370362 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eb70362; op2val:0xfeb70362; valaddr_reg:x16; val_offset:1568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1568, x17, x15, 1568, x18)

inst_197:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x167d44 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x167d44 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f167d44; op2val:0xff167d44; valaddr_reg:x16; val_offset:1576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1576, x17, x15, 1576, x18)

inst_198:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x445459 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x445459 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec45459; op2val:0xfec45459; valaddr_reg:x16; val_offset:1584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1584, x17, x15, 1584, x18)

inst_199:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x217fdd and fs2 == 1 and fe2 == 0xfd and fm2 == 0x217fdd and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ea17fdd; op2val:0xfea17fdd; valaddr_reg:x16; val_offset:1592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1592, x17, x15, 1592, x18)

inst_200:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x222105 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x222105 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f222105; op2val:0xff222105; valaddr_reg:x16; val_offset:1600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1600, x17, x15, 1600, x18)

inst_201:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d998f and fs2 == 1 and fe2 == 0xfd and fm2 == 0x4d998f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ecd998f; op2val:0xfecd998f; valaddr_reg:x16; val_offset:1608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1608, x17, x15, 1608, x18)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
test_fp:
.word 0x7f222105
.word 0x7f222105
.word 0x7ee12c54
.word 0xfee12c54
.word 0x7f17e134
.word 0xff17e134
.word 0x7f1e88a3
.word 0xff1e88a3
.word 0x7ecd998f
.word 0x7ecd998f
.word 0x7f2de8ee
.word 0xff2de8ee
.word 0x7f3e2ea7
.word 0xff3e2ea7
.word 0x7f1a94c3
.word 0xff1a94c3
.word 0x7edc5df5
.word 0xfedc5df5
.word 0x7f2d0265
.word 0xff2d0265
.word 0x7f39f88a
.word 0xff39f88a
.word 0x7de49633
.word 0xfde49633
.word 0x7e7de57e
.word 0xfe7de57e
.word 0x7c3bd2e4
.word 0xfc3bd2e4
.word 0x7e2cde9f
.word 0xfe2cde9f
.word 0x7f26d3f0
.word 0xff26d3f0
.word 0x7d4bdaf1
.word 0xfd4bdaf1
.word 0x7f09e19b
.word 0xff09e19b
.word 0x7f21ba5d
.word 0xff21ba5d
.word 0x7e454909
.word 0xfe454909
.word 0x7cd9eac0
.word 0xfcd9eac0
.word 0x7f2c9c0a
.word 0xff2c9c0a
.word 0x7e82a504
.word 0xfe82a504
.word 0x7eea26e3
.word 0xfeea26e3
.word 0x7f00a730
.word 0xff00a730
.word 0x7ebf66bb
.word 0xfebf66bb
.word 0x7f3012ad
.word 0xff3012ad
.word 0x7f288293
.word 0xff288293
.word 0x7e9bde44
.word 0xfe9bde44
.word 0x7f3cbbe2
.word 0xff3cbbe2
.word 0x7de87317
.word 0xfde87317
.word 0x7e912a0d
.word 0xfe912a0d
.word 0x7de0ccec
.word 0xfde0ccec
.word 0x7f360231
.word 0xff360231
.word 0x7e1f2776
.word 0xfe1f2776
.word 0x7db6a56c
.word 0xfdb6a56c
.word 0x7ead6b3e
.word 0xfead6b3e
.word 0x7f06c8e8
.word 0xff06c8e8
.word 0x7d442bee
.word 0xfd442bee
.word 0x7ea596bf
.word 0xfea596bf
.word 0x7e486246
.word 0xfe486246
.word 0x7e8d7074
.word 0xfe8d7074
.word 0x7f026d14
.word 0xff026d14
.word 0x7ebba12e
.word 0xfebba12e
.word 0x7ec74c23
.word 0xfec74c23
.word 0x7bc0f240
.word 0xfbc0f240
.word 0x7f0ff996
.word 0xff0ff996
.word 0x7d4a3e7e
.word 0xfd4a3e7e
.word 0x7f3b1d98
.word 0xff3b1d98
.word 0x7ef0ab3f
.word 0xfef0ab3f
.word 0x7f2bb989
.word 0xff2bb989
.word 0x7e67dc90
.word 0xfe67dc90
.word 0x7f065281
.word 0xff065281
.word 0x7e83f653
.word 0xfe83f653
.word 0x7f217160
.word 0xff217160
.word 0x7f2e7655
.word 0xff2e7655
.word 0x7e9f40ca
.word 0xfe9f40ca
.word 0x7e9ad123
.word 0xfe9ad123
.word 0x7ec8d9ed
.word 0xfec8d9ed
.word 0x7d143e58
.word 0xfd143e58
.word 0x7eb793aa
.word 0xfeb793aa
.word 0x7ed29e32
.word 0xfed29e32
.word 0x7e5e5c14
.word 0xfe5e5c14
.word 0x7dfbb095
.word 0xfdfbb095
.word 0x7eee4960
.word 0xfeee4960
.word 0x7f09f3ae
.word 0xff09f3ae
.word 0x7e800760
.word 0xfe800760
.word 0x7bdaa799
.word 0xfbdaa799
.word 0x7e1f9fcf
.word 0xfe1f9fcf
.word 0x7e8f0540
.word 0xfe8f0540
.word 0x7f2d5201
.word 0xff2d5201
.word 0x7efba8b0
.word 0xfefba8b0
.word 0x7f0fd579
.word 0xff0fd579
.word 0x7f2eb100
.word 0xff2eb100
.word 0x7f35ba7d
.word 0xff35ba7d
.word 0x7f02c05a
.word 0xff02c05a
.word 0x7c643dc7
.word 0xfc643dc7
.word 0x7f2765d9
.word 0xff2765d9
.word 0x7ef9e697
.word 0xfef9e697
.word 0x7dccef18
.word 0xfdccef18
.word 0x7f18212b
.word 0xff18212b
.word 0x7e52faef
.word 0xfe52faef
.word 0x7e9854d1
.word 0xfe9854d1
.word 0x7d99e0a5
.word 0xfd99e0a5
.word 0x7e5706d8
.word 0xfe5706d8
.word 0x7ef95162
.word 0xfef95162
.word 0x7d96325d
.word 0xfd96325d
.word 0x7f1df6e4
.word 0xff1df6e4
.word 0x7f09b9ea
.word 0xff09b9ea
.word 0x7e72d2f3
.word 0xfe72d2f3
.word 0x7e9a4c33
.word 0xfe9a4c33
.word 0x7f0b4e72
.word 0xff0b4e72
.word 0x7ef31b27
.word 0xfef31b27
.word 0x7e10628e
.word 0xfe10628e
.word 0x7f2800cd
.word 0xff2800cd
.word 0x7eb3495f
.word 0xfeb3495f
.word 0x7ebdeb73
.word 0xfebdeb73
.word 0x7f110d95
.word 0xff110d95
.word 0x7ebb1c27
.word 0xfebb1c27
.word 0x7df234e1
.word 0xfdf234e1
.word 0x7eab03e6
.word 0xfeab03e6
.word 0x7efe4880
.word 0xfefe4880
.word 0x7f06c054
.word 0xff06c054
.word 0x7e9f21ce
.word 0xfe9f21ce
.word 0x7f2814cf
.word 0xff2814cf
.word 0x7ef4c2e8
.word 0xfef4c2e8
.word 0x7e806905
.word 0xfe806905
.word 0x7a95d64c
.word 0xfa95d64c
.word 0x7e9f22f1
.word 0xfe9f22f1
.word 0x7f09661e
.word 0xff09661e
.word 0x7ef35bf2
.word 0xfef35bf2
.word 0x7e89eee9
.word 0xfe89eee9
.word 0x7e87412e
.word 0xfe87412e
.word 0x7e386b8e
.word 0xfe386b8e
.word 0x7d0c612e
.word 0xfd0c612e
.word 0x7f0e61dc
.word 0xff0e61dc
.word 0x7ed7453d
.word 0xfed7453d
.word 0x7f20d4b8
.word 0xff20d4b8
.word 0x7e6f30c5
.word 0xfe6f30c5
.word 0x7eda8a0e
.word 0xfeda8a0e
.word 0x7eb51aa9
.word 0xfeb51aa9
.word 0x7ea9d93c
.word 0xfea9d93c
.word 0x7e408722
.word 0xfe408722
.word 0x7f22524e
.word 0xff22524e
.word 0x7d32551e
.word 0xfd32551e
.word 0x7f0125a0
.word 0xff0125a0
.word 0x7f30593a
.word 0xff30593a
.word 0x7f0c7784
.word 0xff0c7784
.word 0x7e191af1
.word 0xfe191af1
.word 0x7d9b03d8
.word 0xfd9b03d8
.word 0x7ec1657b
.word 0xfec1657b
.word 0x7e86834b
.word 0xfe86834b
.word 0x7e2998cc
.word 0xfe2998cc
.word 0x7d9be782
.word 0xfd9be782
.word 0x7c8bf9e4
.word 0xfc8bf9e4
.word 0x7f19be4b
.word 0xff19be4b
.word 0x7dbe4d8f
.word 0xfdbe4d8f
.word 0x7f38849b
.word 0xff38849b
.word 0x7cdf97b9
.word 0xfcdf97b9
.word 0x7e8e223c
.word 0xfe8e223c
.word 0x7edd2a79
.word 0xfedd2a79
.word 0x7ef3d707
.word 0xfef3d707
.word 0x7f02ac50
.word 0xff02ac50
.word 0x7f2eb91a
.word 0xff2eb91a
.word 0x7d0af584
.word 0xfd0af584
.word 0x7de0ce7f
.word 0xfde0ce7f
.word 0x7f1ca7c2
.word 0xff1ca7c2
.word 0x7f188f57
.word 0xff188f57
.word 0x7db3eb13
.word 0xfdb3eb13
.word 0x7e3aa6be
.word 0xfe3aa6be
.word 0x7ef1fa00
.word 0xfef1fa00
.word 0x7eeb4f07
.word 0xfeeb4f07
.word 0x7f185183
.word 0xff185183
.word 0x7f3f4810
.word 0xff3f4810
.word 0x7ead0427
.word 0xfead0427
.word 0x7f365ad7
.word 0xff365ad7
.word 0x7f2bd8f4
.word 0xff2bd8f4
.word 0x7f1bd52c
.word 0xff1bd52c
.word 0x7f076a16
.word 0xff076a16
.word 0x7ecf9722
.word 0xfecf9722
.word 0x7f2c7300
.word 0xff2c7300
.word 0x7f314a05
.word 0xff314a05
.word 0x7f1175bf
.word 0xff1175bf
.word 0x7eb6fce6
.word 0xfeb6fce6
.word 0x7eeb4e0d
.word 0xfeeb4e0d
.word 0x7e1173d9
.word 0xfe1173d9
.word 0x7edd0ccb
.word 0xfedd0ccb
.word 0x7ee4f961
.word 0xfee4f961
.word 0x7ee1a51b
.word 0xfee1a51b
.word 0x7f390e97
.word 0xff390e97
.word 0x7f1c60ac
.word 0xff1c60ac
.word 0x7f07a8e7
.word 0xff07a8e7
.word 0x7da78349
.word 0xfda78349
.word 0x7ec30c98
.word 0xfec30c98
.word 0x7d772129
.word 0xfd772129
.word 0x7f1a35e0
.word 0xff1a35e0
.word 0x7e3741cc
.word 0xfe3741cc
.word 0x7e12bd51
.word 0xfe12bd51
.word 0x7e79c1c6
.word 0xfe79c1c6
.word 0x7f269468
.word 0xff269468
.word 0x7a60affa
.word 0xfa60affa
.word 0x7f1e5ec7
.word 0xff1e5ec7
.word 0x7f0a2eec
.word 0xff0a2eec
.word 0x7ed2b355
.word 0xfed2b355
.word 0x7e480ede
.word 0xfe480ede
.word 0x7eb72bf7
.word 0xfeb72bf7
.word 0x7f2f4c51
.word 0xff2f4c51
.word 0x7ea6b8d3
.word 0xfea6b8d3
.word 0x7eb54d84
.word 0xfeb54d84
.word 0x7f2c93b2
.word 0xff2c93b2
.word 0x7e6e317d
.word 0xfe6e317d
.word 0x7f1b8fcb
.word 0xff1b8fcb
.word 0x7f2eabd8
.word 0xff2eabd8
.word 0x7eed7424
.word 0xfeed7424
.word 0x7e587392
.word 0xfe587392
.word 0x7f2e5b90
.word 0xff2e5b90
.word 0x7eb70362
.word 0xfeb70362
.word 0x7f167d44
.word 0xff167d44
.word 0x7ec45459
.word 0xfec45459
.word 0x7ea17fdd
.word 0xfea17fdd
.word 0x7f222105
.word 0xff222105
.word 0x7ecd998f
.word 0xfecd998f
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 404*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
