
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.5.2
// timestamp : Tue Sep  7 16:07:58 2021 GMT
// usage     : riscv_ctg \
//                  -- cgf $cgf \
//                  -- xlen $xlen \
// -----------
//
// -----------
// Copyright (c) 2021. IIT Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V F extension for the fmadd_b2 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b2)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2, rs1==f22, rs2==f10, rs3==f22, rd==f7, fs1 == 0 and fe1 == 0x00 and fm1 == 0x000050 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x4ccccd and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000021 and rm_val == 0  
// opcode: fmadd.s ; op1:f22; op2:f10; op3:f22; dest:f7; op1val:0x50; op2val:0xbecccccd; op3val:0x50; valaddr_reg:x16; val_offset:0; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f7, f22, f10, f22, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1:
// rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1, rs1==f23, rs2==f20, rs3==f6, rd==f20, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000031 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ffff2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000060 and rm_val == 0  
// opcode: fmadd.s ; op1:f23; op2:f20; op3:f6; dest:f20; op1val:0x7f000031; op2val:0xc01ffff2; op3val:0x7f000060; valaddr_reg:x16; val_offset:12; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f20, f23, f20, f6, 0x0, 0, x16, 12, x17, x15, 8, x18)

inst_2:
// rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1, rs1==f2, rs2==f27, rs3==f25, rd==f25, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00000e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x300017 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000055 and rm_val == 0  
// opcode: fmadd.s ; op1:f2; op2:f27; op3:f25; dest:f25; op1val:0x7f00000e; op2val:0xc0300017; op3val:0x7f000055; valaddr_reg:x16; val_offset:24; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f25, f2, f27, f25, 0x0, 0, x16, 24, x17, x15, 16, x18)

inst_3:
// rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3, rs1==f12, rs2==f12, rs3==f5, rd==f13, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000006 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x38001b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000048 and rm_val == 0  
// opcode: fmadd.s ; op1:f12; op2:f12; op3:f5; dest:f13; op1val:0x7f000006; op2val:0x7f000006; op3val:0x7f000048; valaddr_reg:x16; val_offset:36; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f12, f12, f5, 0x0, 0, x16, 36, x17, x15, 24, x18)

inst_4:
// rs1 == rs2 == rd != rs3, rs1==f9, rs2==f9, rs3==f8, rd==f9, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000050 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3bff98 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00001c and rm_val == 0  
// opcode: fmadd.s ; op1:f9; op2:f9; op3:f8; dest:f9; op1val:0x7f000050; op2val:0x7f000050; op3val:0x7f00001c; valaddr_reg:x16; val_offset:48; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f9, f9, f9, f8, 0x0, 0, x16, 48, x17, x15, 32, x18)

inst_5:
// rs1 == rs2 == rs3 != rd, rs1==f21, rs2==f21, rs3==f21, rd==f23, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000015 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3dffe5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000009 and rm_val == 0  
// opcode: fmadd.s ; op1:f21; op2:f21; op3:f21; dest:f23; op1val:0x7f000015; op2val:0x7f000015; op3val:0x7f000015; valaddr_reg:x16; val_offset:60; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f23, f21, f21, f21, 0x0, 0, x16, 60, x17, x15, 40, x18)

inst_6:
// rs1 == rs2 == rs3 == rd, rs1==f19, rs2==f19, rs3==f19, rd==f19, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000018 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3efff6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000035 and rm_val == 0  
// opcode: fmadd.s ; op1:f19; op2:f19; op3:f19; dest:f19; op1val:0x7f000018; op2val:0x7f000018; op3val:0x7f000018; valaddr_reg:x16; val_offset:72; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f19, f19, f19, f19, 0x0, 0, x16, 72, x17, x15, 48, x18)

inst_7:
// rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2, rs1==f26, rs2==f23, rs3==f13, rd==f26, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000018 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3f8003 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00004f and rm_val == 0  
// opcode: fmadd.s ; op1:f26; op2:f23; op3:f13; dest:f26; op1val:0x7f000018; op2val:0xc03f8003; op3val:0x7f00004f; valaddr_reg:x16; val_offset:84; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f26, f26, f23, f13, 0x0, 0, x16, 84, x17, x15, 56, x18)

inst_8:
// rd == rs2 == rs3 != rs1, rs1==f8, rs2==f17, rs3==f17, rd==f17, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000039 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3fbfb4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000014 and rm_val == 0  
// opcode: fmadd.s ; op1:f8; op2:f17; op3:f17; dest:f17; op1val:0x7f000039; op2val:0xc03fbfb4; op3val:0xc03fbfb4; valaddr_reg:x16; val_offset:96; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f17, f8, f17, f17, 0x0, 0, x16, 96, x17, x15, 64, x18)

inst_9:
// rs1 == rd == rs3 != rs2, rs1==f15, rs2==f8, rs3==f15, rd==f15, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000026 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3fdff4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00005b and rm_val == 0  
// opcode: fmadd.s ; op1:f15; op2:f8; op3:f15; dest:f15; op1val:0x7f000026; op2val:0xc03fdff4; op3val:0x7f000026; valaddr_reg:x16; val_offset:108; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f15, f15, f8, f15, 0x0, 0, x16, 108, x17, x15, 72, x18)

inst_10:
// rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd, rs1==f3, rs2==f11, rs3==f12, rd==f8, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00005c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3fef7f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000012 and rm_val == 0  
// opcode: fmadd.s ; op1:f3; op2:f11; op3:f12; dest:f8; op1val:0x7f00005c; op2val:0xc03fef7f; op3val:0x7f000012; valaddr_reg:x16; val_offset:120; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f8, f3, f11, f12, 0x0, 0, x16, 120, x17, x15, 80, x18)

inst_11:
// rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1, rs1==f4, rs2==f31, rs3==f31, rd==f3, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000053 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3ff78b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00000f and rm_val == 0  
// opcode: fmadd.s ; op1:f4; op2:f31; op3:f31; dest:f3; op1val:0x7f000053; op2val:0xc03ff78b; op3val:0xc03ff78b; valaddr_reg:x16; val_offset:132; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f3, f4, f31, f31, 0x0, 0, x16, 132, x17, x15, 88, x18)

inst_12:
// rs1==f7, rs2==f3, rs3==f29, rd==f30, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00001d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3ffbfc and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00004f and rm_val == 0  
// opcode: fmadd.s ; op1:f7; op2:f3; op3:f29; dest:f30; op1val:0x7f00001d; op2val:0xc03ffbfc; op3val:0x7f00004f; valaddr_reg:x16; val_offset:144; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f30, f7, f3, f29, 0x0, 0, x16, 144, x17, x15, 96, x18)

inst_13:
// rs1==f30, rs2==f22, rs3==f7, rd==f21, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000010 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3ffdf0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000010 and rm_val == 0  
// opcode: fmadd.s ; op1:f30; op2:f22; op3:f7; dest:f21; op1val:0x7f000010; op2val:0xc03ffdf0; op3val:0x7f000010; valaddr_reg:x16; val_offset:156; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f21, f30, f22, f7, 0x0, 0, x16, 156, x17, x15, 104, x18)

inst_14:
// rs1==f16, rs2==f26, rs3==f30, rd==f12, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3ffea5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and rm_val == 0  
// opcode: fmadd.s ; op1:f16; op2:f26; op3:f30; dest:f12; op1val:0x7f00003f; op2val:0xc03ffea5; op3val:0x7f000007; valaddr_reg:x16; val_offset:168; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f12, f16, f26, f30, 0x0, 0, x16, 168, x17, x15, 112, x18)

inst_15:
// rs1==f28, rs2==f7, rs3==f14, rd==f1, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000034 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3fff5f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00005a and rm_val == 0  
// opcode: fmadd.s ; op1:f28; op2:f7; op3:f14; dest:f1; op1val:0x7f000034; op2val:0xc03fff5f; op3val:0x7f00005a; valaddr_reg:x16; val_offset:180; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f1, f28, f7, f14, 0x0, 0, x16, 180, x17, x15, 120, x18)

inst_16:
// rs1==f17, rs2==f15, rs3==f27, rd==f10, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000037 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3fff72 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000009 and rm_val == 0  
// opcode: fmadd.s ; op1:f17; op2:f15; op3:f27; dest:f10; op1val:0x7f000037; op2val:0xc03fff72; op3val:0x7f000009; valaddr_reg:x16; val_offset:192; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f10, f17, f15, f27, 0x0, 0, x16, 192, x17, x15, 128, x18)

inst_17:
// rs1==f11, rs2==f1, rs3==f4, rd==f28, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00002b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3fffce and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00005d and rm_val == 0  
// opcode: fmadd.s ; op1:f11; op2:f1; op3:f4; dest:f28; op1val:0x7f00002b; op2val:0xc03fffce; op3val:0x7f00005d; valaddr_reg:x16; val_offset:204; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f28, f11, f1, f4, 0x0, 0, x16, 204, x17, x15, 136, x18)

inst_18:
// rs1==f1, rs2==f14, rs3==f9, rd==f24, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000055 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3fff72 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000004 and rm_val == 0  
// opcode: fmadd.s ; op1:f1; op2:f14; op3:f9; dest:f24; op1val:0x7f000055; op2val:0xc03fff72; op3val:0x7f000004; valaddr_reg:x16; val_offset:216; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f24, f1, f14, f9, 0x0, 0, x16, 216, x17, x15, 144, x18)

inst_19:
// rs1==f25, rs2==f13, rs3==f11, rd==f29, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00000b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3fffec and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000009 and rm_val == 0  
// opcode: fmadd.s ; op1:f25; op2:f13; op3:f11; dest:f29; op1val:0x7f00000b; op2val:0xc03fffec; op3val:0x7f000009; valaddr_reg:x16; val_offset:228; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f29, f25, f13, f11, 0x0, 0, x16, 228, x17, x15, 152, x18)

inst_20:
// rs1==f6, rs2==f29, rs3==f3, rd==f14, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00001e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3fffe0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000023 and rm_val == 0  
// opcode: fmadd.s ; op1:f6; op2:f29; op3:f3; dest:f14; op1val:0x7f00001e; op2val:0xc03fffe0; op3val:0x7f000023; valaddr_reg:x16; val_offset:240; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f14, f6, f29, f3, 0x0, 0, x16, 240, x17, x15, 160, x18)

inst_21:
// rs1==f24, rs2==f28, rs3==f16, rd==f22, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000009 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x40001f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00005e and rm_val == 0  
// opcode: fmadd.s ; op1:f24; op2:f28; op3:f16; dest:f22; op1val:0x7f000009; op2val:0xc040001f; op3val:0x7f00005e; valaddr_reg:x16; val_offset:252; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f22, f24, f28, f16, 0x0, 0, x16, 252, x17, x15, 168, x18)

inst_22:
// rs1==f27, rs2==f5, rs3==f2, rd==f18, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000046 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3fff99 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and rm_val == 0  
// opcode: fmadd.s ; op1:f27; op2:f5; op3:f2; dest:f18; op1val:0x7f000046; op2val:0xc03fff99; op3val:0x7f000007; valaddr_reg:x16; val_offset:264; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f18, f27, f5, f2, 0x0, 0, x16, 264, x17, x15, 176, x18)

inst_23:
// rs1==f18, rs2==f24, rs3==f26, rd==f4, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000037 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3fffd2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00004b and rm_val == 0  
// opcode: fmadd.s ; op1:f18; op2:f24; op3:f26; dest:f4; op1val:0x7f000037; op2val:0xc03fffd2; op3val:0x7f00004b; valaddr_reg:x16; val_offset:276; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f4, f18, f24, f26, 0x0, 0, x16, 276, x17, x15, 184, x18)

inst_24:
// rs1==f5, rs2==f30, rs3==f20, rd==f2, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000045 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7fff22 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000014 and rm_val == 0  
// opcode: fmadd.s ; op1:f5; op2:f30; op3:f20; dest:f2; op1val:0x7f000045; op2val:0x3effff22; op3val:0x7f000014; valaddr_reg:x16; val_offset:288; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f2, f5, f30, f20, 0x0, 0, x16, 288, x17, x15, 192, x18)

inst_25:
// rs1==f31, rs2==f4, rs3==f24, rd==f5, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000040 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3fff48 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00002b and rm_val == 0  
// opcode: fmadd.s ; op1:f31; op2:f4; op3:f24; dest:f5; op1val:0x7f000040; op2val:0x3f3fff48; op3val:0x7f00002b; valaddr_reg:x16; val_offset:300; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f5, f31, f4, f24, 0x0, 0, x16, 300, x17, x15, 200, x18)

inst_26:
// rs1==f20, rs2==f6, rs3==f1, rd==f16, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000059 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5ffed4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000047 and rm_val == 0  
// opcode: fmadd.s ; op1:f20; op2:f6; op3:f1; dest:f16; op1val:0x7f000059; op2val:0x3f5ffed4; op3val:0x7f000047; valaddr_reg:x16; val_offset:312; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f16, f20, f6, f1, 0x0, 0, x16, 312, x17, x15, 208, x18)

inst_27:
// rs1==f14, rs2==f2, rs3==f10, rd==f6, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000016 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6fff59 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00003e and rm_val == 0  
// opcode: fmadd.s ; op1:f14; op2:f2; op3:f10; dest:f6; op1val:0x7f000016; op2val:0x3f6fff59; op3val:0x7f00003e; valaddr_reg:x16; val_offset:324; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f6, f14, f2, f10, 0x0, 0, x16, 324, x17, x15, 216, x18)

inst_28:
// rs1==f0, rs2==f18, rs3==f28, rd==f11, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000028 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x77ff8b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000013 and rm_val == 0  
// opcode: fmadd.s ; op1:f0; op2:f18; op3:f28; dest:f11; op1val:0x7f000028; op2val:0x3f77ff8b; op3val:0x7f000013; valaddr_reg:x16; val_offset:336; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f11, f0, f18, f28, 0x0, 0, x16, 336, x17, x15, 224, x18)

inst_29:
// rs1==f10, rs2==f16, rs3==f18, rd==f0, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000053 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7bfee1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00003d and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f16; op3:f18; dest:f0; op1val:0x7f000053; op2val:0x3f7bfee1; op3val:0x7f00003d; valaddr_reg:x16; val_offset:348; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f0, f10, f16, f18, 0x0, 0, x16, 348, x17, x15, 232, x18)

inst_30:
// rs1==f13, rs2==f25, rs3==f0, rd==f31, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00004b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7dff1f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000025 and rm_val == 0  
// opcode: fmadd.s ; op1:f13; op2:f25; op3:f0; dest:f31; op1val:0x7f00004b; op2val:0x3f7dff1f; op3val:0x7f000025; valaddr_reg:x16; val_offset:360; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f31, f13, f25, f0, 0x0, 0, x16, 360, x17, x15, 240, x18)

inst_31:
// rs1==f29, rs2==f0, rs3==f23, rd==f27, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000059 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7efedd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000038 and rm_val == 0  
// opcode: fmadd.s ; op1:f29; op2:f0; op3:f23; dest:f27; op1val:0x7f000059; op2val:0x3f7efedd; op3val:0x7f000038; valaddr_reg:x16; val_offset:372; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f27, f29, f0, f23, 0x0, 0, x16, 372, x17, x15, 248, x18)

inst_32:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000027 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7f7fae and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f000027; op2val:0x3f7f7fae; op3val:0x7f000001; valaddr_reg:x16; val_offset:384; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 384, x17, x15, 256, x18)

inst_33:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000062 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fbf28 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000009 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f000062; op2val:0x3f7fbf28; op3val:0x7f000009; valaddr_reg:x16; val_offset:396; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 396, x17, x15, 264, x18)

inst_34:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000026 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fdf3a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00003c and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f000026; op2val:0x3f7fdf3a; op3val:0x7f00003c; valaddr_reg:x16; val_offset:408; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 408, x17, x15, 272, x18)

inst_35:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00005d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fef10 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00001a and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f00005d; op2val:0x3f7fef10; op3val:0x7f00001a; valaddr_reg:x16; val_offset:420; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 420, x17, x15, 280, x18)

inst_36:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000033 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7ff6e8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000058 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f000033; op2val:0x3f7ff6e8; op3val:0x7f000058; valaddr_reg:x16; val_offset:432; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 432, x17, x15, 288, x18)

inst_37:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000032 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7ffb20 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00003d and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f000032; op2val:0x3f7ffb20; op3val:0x7f00003d; valaddr_reg:x16; val_offset:444; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 444, x17, x15, 296, x18)

inst_38:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000054 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7ffcda and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00003e and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f000054; op2val:0x3f7ffcda; op3val:0x7f00003e; valaddr_reg:x16; val_offset:456; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 456, x17, x15, 304, x18)

inst_39:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00005b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7ffda6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000051 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f00005b; op2val:0x3f7ffda6; op3val:0x7f000051; valaddr_reg:x16; val_offset:468; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 468, x17, x15, 312, x18)

inst_40:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00004a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7ffe38 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000059 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f00004a; op2val:0x3f7ffe38; op3val:0x7f000059; valaddr_reg:x16; val_offset:480; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 480, x17, x15, 320, x18)

inst_41:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000037 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7ffeb6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00004d and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f000037; op2val:0x3f7ffeb6; op3val:0x7f00004d; valaddr_reg:x16; val_offset:492; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 492, x17, x15, 328, x18)

inst_42:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000002 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fff6c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000037 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f000002; op2val:0x3f7fff6c; op3val:0x7f000037; valaddr_reg:x16; val_offset:504; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 504, x17, x15, 336, x18)

inst_43:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000046 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fff30 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000019 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f000046; op2val:0x3f7fff30; op3val:0x7f000019; valaddr_reg:x16; val_offset:516; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 516, x17, x15, 344, x18)

inst_44:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00000e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fff2a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000058 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f00000e; op2val:0x3f7fff2a; op3val:0x7f000058; valaddr_reg:x16; val_offset:528; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 528, x17, x15, 352, x18)

inst_45:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00003b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7ffed4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000058 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f00003b; op2val:0x3f7ffed4; op3val:0x7f000058; valaddr_reg:x16; val_offset:540; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 540, x17, x15, 360, x18)

inst_46:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000021 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fff2c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000047 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f000021; op2val:0x3f7fff2c; op3val:0x7f000047; valaddr_reg:x16; val_offset:552; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 552, x17, x15, 368, x18)

inst_47:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000005 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ffffa and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800005; op2val:0xc01ffffa; op3val:0x800001; valaddr_reg:x16; val_offset:564; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 564, x17, x15, 376, x18)

inst_48:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00004c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0fffb3 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000011 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x80004c; op2val:0xc00fffb3; op3val:0x800011; valaddr_reg:x16; val_offset:576; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 576, x17, x15, 384, x18)

inst_49:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000058 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x07ffd3 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000060 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800058; op2val:0xc007ffd3; op3val:0x800060; valaddr_reg:x16; val_offset:588; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 588, x17, x15, 392, x18)

inst_50:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00002d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x03ffe9 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00002f and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x80002d; op2val:0xc003ffe9; op3val:0x80002f; valaddr_reg:x16; val_offset:600; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 600, x17, x15, 400, x18)

inst_51:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000004 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x02001a and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00003c and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800004; op2val:0xc002001a; op3val:0x80003c; valaddr_reg:x16; val_offset:612; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 612, x17, x15, 408, x18)

inst_52:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00005e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00ffc3 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000044 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x80005e; op2val:0xc000ffc3; op3val:0x800044; valaddr_reg:x16; val_offset:624; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 624, x17, x15, 416, x18)

inst_53:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00004f and fs2 == 1 and fe2 == 0x80 and fm2 == 0x007fc4 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000026 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x80004f; op2val:0xc0007fc4; op3val:0x800026; valaddr_reg:x16; val_offset:636; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 636, x17, x15, 424, x18)

inst_54:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00005b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x003fbb and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00002c and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x80005b; op2val:0xc0003fbb; op3val:0x80002c; valaddr_reg:x16; val_offset:648; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 648, x17, x15, 432, x18)

inst_55:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000025 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x001ffd and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000045 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800025; op2val:0xc0001ffd; op3val:0x800045; valaddr_reg:x16; val_offset:660; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 660, x17, x15, 440, x18)

inst_56:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000011 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x001002 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000027 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800011; op2val:0xc0001002; op3val:0x800027; valaddr_reg:x16; val_offset:672; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 672, x17, x15, 448, x18)

inst_57:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000003 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00082e and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000062 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800003; op2val:0xc000082e; op3val:0x800062; valaddr_reg:x16; val_offset:684; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 684, x17, x15, 456, x18)

inst_58:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000060 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0003a8 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000010 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800060; op2val:0xc00003a8; op3val:0x800010; valaddr_reg:x16; val_offset:696; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 696, x17, x15, 464, x18)

inst_59:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000053 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0001d4 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00004e and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800053; op2val:0xc00001d4; op3val:0x80004e; valaddr_reg:x16; val_offset:708; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 708, x17, x15, 472, x18)

inst_60:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00003d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0000e4 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000043 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x80003d; op2val:0xc00000e4; op3val:0x800043; valaddr_reg:x16; val_offset:720; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 720, x17, x15, 480, x18)

inst_61:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000040 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000067 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00004e and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800040; op2val:0xc0000067; op3val:0x80004e; valaddr_reg:x16; val_offset:732; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 732, x17, x15, 488, x18)

inst_62:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000025 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00002e and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000026 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800025; op2val:0xc000002e; op3val:0x800026; valaddr_reg:x16; val_offset:744; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 744, x17, x15, 496, x18)

inst_63:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000014 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00003a and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00005d and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800014; op2val:0xc000003a; op3val:0x80005d; valaddr_reg:x16; val_offset:756; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 756, x17, x15, 504, x18)

inst_64:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7fffc5 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000023 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x80003f; op2val:0xbfffffc5; op3val:0x800023; valaddr_reg:x16; val_offset:768; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 768, x17, x15, 512, x18)

inst_65:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000005 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000013 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000020 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800005; op2val:0xc0000013; op3val:0x800020; valaddr_reg:x16; val_offset:780; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 780, x17, x15, 520, x18)

inst_66:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000020 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000002 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00003d and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800020; op2val:0xc0000002; op3val:0x80003d; valaddr_reg:x16; val_offset:792; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 792, x17, x15, 528, x18)

inst_67:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000048 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7fff98 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000024 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800048; op2val:0xbfffff98; op3val:0x800024; valaddr_reg:x16; val_offset:804; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 804, x17, x15, 536, x18)

inst_68:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00003e and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7fffcb and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000045 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x80003e; op2val:0xbfffffcb; op3val:0x800045; valaddr_reg:x16; val_offset:816; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 816, x17, x15, 544, x18)

inst_69:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000033 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7fff9d and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000002 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800033; op2val:0xbfffff9d; op3val:0x800002; valaddr_reg:x16; val_offset:828; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 828, x17, x15, 552, x18)

inst_70:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000006 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7fffac and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000012 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800006; op2val:0x3effffac; op3val:0x800012; valaddr_reg:x16; val_offset:840; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 840, x17, x15, 560, x18)

inst_71:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000020 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x7ffe90 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000026 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800020; op2val:0x3e7ffe90; op3val:0x800026; valaddr_reg:x16; val_offset:852; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 852, x17, x15, 568, x18)

inst_72:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000050 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x7ffbd0 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000039 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800050; op2val:0x3dfffbd0; op3val:0x800039; valaddr_reg:x16; val_offset:864; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 864, x17, x15, 576, x18)

inst_73:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000010 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x7ff540 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000055 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800010; op2val:0x3d7ff540; op3val:0x800055; valaddr_reg:x16; val_offset:876; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 876, x17, x15, 584, x18)

inst_74:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00003e and fs2 == 0 and fe2 == 0x79 and fm2 == 0x7ffe84 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000004 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x80003e; op2val:0x3cfffe84; op3val:0x800004; valaddr_reg:x16; val_offset:888; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 888, x17, x15, 592, x18)

inst_75:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000025 and fs2 == 0 and fe2 == 0x78 and fm2 == 0x7ff636 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000013 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800025; op2val:0x3c7ff636; op3val:0x800013; valaddr_reg:x16; val_offset:900; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 900, x17, x15, 600, x18)

inst_76:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000028 and fs2 == 0 and fe2 == 0x77 and fm2 == 0x7fc0b0 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00003f and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800028; op2val:0x3bffc0b0; op3val:0x80003f; valaddr_reg:x16; val_offset:912; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 912, x17, x15, 608, x18)

inst_77:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000003 and fs2 == 0 and fe2 == 0x76 and fm2 == 0x7fadfa and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000029 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800003; op2val:0x3b7fadfa; op3val:0x800029; valaddr_reg:x16; val_offset:924; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 924, x17, x15, 616, x18)

inst_78:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000021 and fs2 == 0 and fe2 == 0x75 and fm2 == 0x7f27be and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000036 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800021; op2val:0x3aff27be; op3val:0x800036; valaddr_reg:x16; val_offset:936; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 936, x17, x15, 624, x18)

inst_79:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000027 and fs2 == 0 and fe2 == 0x74 and fm2 == 0x7dffb3 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000040 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800027; op2val:0x3a7dffb3; op3val:0x800040; valaddr_reg:x16; val_offset:948; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 948, x17, x15, 632, x18)

inst_80:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000022 and fs2 == 0 and fe2 == 0x73 and fm2 == 0x7a0fbe and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00005f and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800022; op2val:0x39fa0fbe; op3val:0x80005f; valaddr_reg:x16; val_offset:960; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 960, x17, x15, 640, x18)

inst_81:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00004d and fs2 == 0 and fe2 == 0x72 and fm2 == 0x765f6c and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00004d and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x80004d; op2val:0x39765f6c; op3val:0x80004d; valaddr_reg:x16; val_offset:972; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 972, x17, x15, 648, x18)

inst_82:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000032 and fs2 == 0 and fe2 == 0x71 and fm2 == 0x7abf9e and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000015 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800032; op2val:0x38fabf9e; op3val:0x800015; valaddr_reg:x16; val_offset:984; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 984, x17, x15, 656, x18)

inst_83:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00005b and fs2 == 0 and fe2 == 0x70 and fm2 == 0x677f5b and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000031 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x80005b; op2val:0x38677f5b; op3val:0x800031; valaddr_reg:x16; val_offset:996; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 996, x17, x15, 664, x18)

inst_84:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000026 and fs2 == 0 and fe2 == 0x6f and fm2 == 0x41ffc6 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00003e and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800026; op2val:0x37c1ffc6; op3val:0x80003e; valaddr_reg:x16; val_offset:1008; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1008, x17, x15, 672, x18)

inst_85:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00001d and fs2 == 0 and fe2 == 0x6d and fm2 == 0x7fffc6 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000040 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x80001d; op2val:0x36ffffc6; op3val:0x800040; valaddr_reg:x16; val_offset:1020; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1020, x17, x15, 680, x18)

inst_86:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000037 and fs2 == 0 and fe2 == 0x6a and fm2 == 0x7fff92 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000038 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800037; op2val:0x357fff92; op3val:0x800038; valaddr_reg:x16; val_offset:1032; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1032, x17, x15, 688, x18)

inst_87:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000049 and fs2 == 1 and fe2 == 0x6c and fm2 == 0x07ffb2 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000031 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800049; op2val:0xb607ffb2; op3val:0x800031; valaddr_reg:x16; val_offset:1044; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1044, x17, x15, 696, x18)

inst_88:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00002a and fs2 == 1 and fe2 == 0x6e and fm2 == 0x01ffd5 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000051 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x80002a; op2val:0xb701ffd5; op3val:0x800051; valaddr_reg:x16; val_offset:1056; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1056, x17, x15, 704, x18)

inst_89:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000046 and fs2 == 1 and fe2 == 0x6b and fm2 == 0x2fffa0 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000013 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800046; op2val:0xb5afffa0; op3val:0x800013; valaddr_reg:x16; val_offset:1068; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1068, x17, x15, 712, x18)

inst_90:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000049 and fs2 == 1 and fe2 == 0x6e and fm2 == 0x15ffaa and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00004f and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800049; op2val:0xb715ffaa; op3val:0x80004f; valaddr_reg:x16; val_offset:1080; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1080, x17, x15, 720, x18)

inst_91:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00000e and fs2 == 1 and fe2 == 0x6d and fm2 == 0x1fffef and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00002a and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x80000e; op2val:0xb69fffef; op3val:0x80002a; valaddr_reg:x16; val_offset:1092; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1092, x17, x15, 728, x18)

inst_92:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x6d and fm2 == 0x3fffff and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000031 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800001; op2val:0xb6bfffff; op3val:0x800031; valaddr_reg:x16; val_offset:1104; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1104, x17, x15, 736, x18)

inst_93:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002d and fs2 == 1 and fe2 == 0x8f and fm2 == 0x360c50 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000055 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x2d; op2val:0xc7b60c50; op3val:0x55; valaddr_reg:x16; val_offset:1116; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1116, x17, x15, 744, x18)

inst_94:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004e and fs2 == 1 and fe2 == 0x8f and fm2 == 0x1d89eb and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000c and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x4e; op2val:0xc79d89eb; op3val:0xc; valaddr_reg:x16; val_offset:1128; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1128, x17, x15, 752, x18)

inst_95:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001a and fs2 == 1 and fe2 == 0x91 and fm2 == 0x09d8b2 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000012 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x1a; op2val:0xc889d8b2; op3val:0x12; valaddr_reg:x16; val_offset:1140; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1140, x17, x15, 760, x18)

inst_96:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000049 and fs2 == 1 and fe2 == 0x8f and fm2 == 0x5269a0 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003e and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x49; op2val:0xc7d269a0; op3val:0x3e; valaddr_reg:x16; val_offset:1152; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1152, x17, x15, 768, x18)

inst_97:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004d and fs2 == 1 and fe2 == 0x8f and fm2 == 0x4e218f and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000031 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x4d; op2val:0xc7ce218f; op3val:0x31; valaddr_reg:x16; val_offset:1164; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1164, x17, x15, 776, x18)

inst_98:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000013 and fs2 == 1 and fe2 == 0x91 and fm2 == 0x543607 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000015 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x13; op2val:0xc8d43607; op3val:0x15; valaddr_reg:x16; val_offset:1176; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1176, x17, x15, 784, x18)

inst_99:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000030 and fs2 == 1 and fe2 == 0x90 and fm2 == 0x2955a4 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003c and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x30; op2val:0xc82955a4; op3val:0x3c; valaddr_reg:x16; val_offset:1188; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1188, x17, x15, 792, x18)

inst_100:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000053 and fs2 == 1 and fe2 == 0x8f and fm2 == 0x44a0cc and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000045 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x53; op2val:0xc7c4a0cc; op3val:0x45; valaddr_reg:x16; val_offset:1200; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1200, x17, x15, 800, x18)

inst_101:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000035 and fs2 == 1 and fe2 == 0x90 and fm2 == 0x1a43f6 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000049 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x35; op2val:0xc81a43f6; op3val:0x49; valaddr_reg:x16; val_offset:1212; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1212, x17, x15, 808, x18)

inst_102:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000011 and fs2 == 1 and fe2 == 0x91 and fm2 == 0x70b518 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000036 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x11; op2val:0xc8f0b518; op3val:0x36; valaddr_reg:x16; val_offset:1224; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1224, x17, x15, 816, x18)

inst_103:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000026 and fs2 == 1 and fe2 == 0x90 and fm2 == 0x57798f and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002e and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x26; op2val:0xc857798f; op3val:0x2e; valaddr_reg:x16; val_offset:1236; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1236, x17, x15, 824, x18)

inst_104:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002c and fs2 == 1 and fe2 == 0x90 and fm2 == 0x3a2354 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004b and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x2c; op2val:0xc83a2354; op3val:0x4b; valaddr_reg:x16; val_offset:1248; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1248, x17, x15, 832, x18)

inst_105:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000046 and fs2 == 1 and fe2 == 0x8f and fm2 == 0x6a07c7 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000042 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x46; op2val:0xc7ea07c7; op3val:0x42; valaddr_reg:x16; val_offset:1260; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1260, x17, x15, 840, x18)

inst_106:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000d and fs2 == 1 and fe2 == 0x92 and fm2 == 0x1d8790 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000026 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0xd; op2val:0xc91d8790; op3val:0x26; valaddr_reg:x16; val_offset:1272; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1272, x17, x15, 848, x18)

inst_107:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004f and fs2 == 1 and fe2 == 0x8f and fm2 == 0x4f6313 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000027 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x4f; op2val:0xc7cf6313; op3val:0x27; valaddr_reg:x16; val_offset:1284; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1284, x17, x15, 856, x18)

inst_108:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000005 and fs2 == 1 and fe2 == 0x93 and fm2 == 0x4ccc70 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000047 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5; op2val:0xc9cccc70; op3val:0x47; valaddr_reg:x16; val_offset:1296; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1296, x17, x15, 864, x18)

inst_109:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000047 and fs2 == 1 and fe2 == 0x8f and fm2 == 0x66c296 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000030 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x47; op2val:0xc7e6c296; op3val:0x30; valaddr_reg:x16; val_offset:1308; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1308, x17, x15, 872, x18)

inst_110:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000f and fs2 == 1 and fe2 == 0x92 and fm2 == 0x0888c4 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000059 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0xf; op2val:0xc90888c4; op3val:0x59; valaddr_reg:x16; val_offset:1320; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1320, x17, x15, 880, x18)

inst_111:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000024 and fs2 == 1 and fe2 == 0x90 and fm2 == 0x638e79 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000035 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x24; op2val:0xc8638e79; op3val:0x35; valaddr_reg:x16; val_offset:1332; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1332, x17, x15, 888, x18)

inst_112:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002d and fs2 == 1 and fe2 == 0x90 and fm2 == 0x360b9e and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000034 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x2d; op2val:0xc8360b9e; op3val:0x34; valaddr_reg:x16; val_offset:1344; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1344, x17, x15, 896, x18)

inst_113:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000030 and fs2 == 1 and fe2 == 0x90 and fm2 == 0x2aaaa5 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x30; op2val:0xc82aaaa5; op3val:0x1; valaddr_reg:x16; val_offset:1356; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1356, x17, x15, 904, x18)

inst_114:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001f and fs2 == 1 and fe2 == 0x91 and fm2 == 0x042164 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005c and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x1f; op2val:0xc8842164; op3val:0x5c; valaddr_reg:x16; val_offset:1368; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1368, x17, x15, 912, x18)

inst_115:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004c and fs2 == 1 and fe2 == 0x8f and fm2 == 0x579460 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001b and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x4c; op2val:0xc7d79460; op3val:0x1b; valaddr_reg:x16; val_offset:1380; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1380, x17, x15, 920, x18)

inst_116:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004f and fs2 == 0 and fe2 == 0x8e and fm2 == 0x4f6451 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000a and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x4f; op2val:0x474f6451; op3val:0xa; valaddr_reg:x16; val_offset:1392; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1392, x17, x15, 928, x18)

inst_117:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000031 and fs2 == 0 and fe2 == 0x8f and fm2 == 0x7ac5a7 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000055 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x31; op2val:0x47fac5a7; op3val:0x55; valaddr_reg:x16; val_offset:1404; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1404, x17, x15, 936, x18)

inst_118:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003c and fs2 == 0 and fe2 == 0x8f and fm2 == 0x6eee8d and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002d and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3c; op2val:0x47eeee8d; op3val:0x2d; valaddr_reg:x16; val_offset:1416; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1416, x17, x15, 944, x18)

inst_119:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000005 and fs2 == 0 and fe2 == 0x93 and fm2 == 0x3fffa8 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000036 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5; op2val:0x49bfffa8; op3val:0x36; valaddr_reg:x16; val_offset:1428; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1428, x17, x15, 952, x18)

inst_120:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000019 and fs2 == 0 and fe2 == 0x91 and fm2 == 0x1eb7f6 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000047 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x19; op2val:0x489eb7f6; op3val:0x47; valaddr_reg:x16; val_offset:1440; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1440, x17, x15, 960, x18)

inst_121:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000018 and fs2 == 0 and fe2 == 0x91 and fm2 == 0x27ffac and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003e and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x18; op2val:0x48a7ffac; op3val:0x3e; valaddr_reg:x16; val_offset:1452; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1452, x17, x15, 968, x18)

inst_122:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000f and fs2 == 0 and fe2 == 0x92 and fm2 == 0x07774b and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000029 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0xf; op2val:0x4907774b; op3val:0x29; valaddr_reg:x16; val_offset:1464; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1464, x17, x15, 976, x18)

inst_123:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000007 and fs2 == 0 and fe2 == 0x93 and fm2 == 0x11b6c6 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000012 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7; op2val:0x4991b6c6; op3val:0x12; valaddr_reg:x16; val_offset:1476; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1476, x17, x15, 984, x18)

inst_124:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001d and fs2 == 0 and fe2 == 0x91 and fm2 == 0x0cf713 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000016 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x1d; op2val:0x488cf713; op3val:0x16; valaddr_reg:x16; val_offset:1488; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1488, x17, x15, 992, x18)

inst_125:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000006 and fs2 == 0 and fe2 == 0x93 and fm2 == 0x2a7fad and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003d and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x6; op2val:0x49aa7fad; op3val:0x3d; valaddr_reg:x16; val_offset:1500; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1500, x17, x15, 1000, x18)

inst_126:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000051 and fs2 == 0 and fe2 == 0x8f and fm2 == 0x4a2bac and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005c and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x51; op2val:0x47ca2bac; op3val:0x5c; valaddr_reg:x16; val_offset:1512; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1512, x17, x15, 1008, x18)

inst_127:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000058 and fs2 == 0 and fe2 == 0x8f and fm2 == 0x3a22c4 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000018 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x58; op2val:0x47ba22c4; op3val:0x18; valaddr_reg:x16; val_offset:1524; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1524, x17, x15, 1016, x18)

inst_128:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001d and fs2 == 0 and fe2 == 0x91 and fm2 == 0x0d38f4 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000062 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x1d; op2val:0x488d38f4; op3val:0x62; valaddr_reg:x16; val_offset:1536; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1536, x17, x15, 1024, x18)

inst_129:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000054 and fs2 == 0 and fe2 == 0x8f and fm2 == 0x4308fe and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000018 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54; op2val:0x47c308fe; op3val:0x18; valaddr_reg:x16; val_offset:1548; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1548, x17, x15, 1032, x18)

inst_130:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000039 and fs2 == 0 and fe2 == 0x90 and fm2 == 0x0fb6aa and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000050 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39; op2val:0x480fb6aa; op3val:0x50; valaddr_reg:x16; val_offset:1560; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1560, x17, x15, 1040, x18)

inst_131:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000015 and fs2 == 0 and fe2 == 0x91 and fm2 == 0x430af8 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004c and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x15; op2val:0x48c30af8; op3val:0x4c; valaddr_reg:x16; val_offset:1572; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1572, x17, x15, 1048, x18)

inst_132:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000004 and fs2 == 0 and fe2 == 0x93 and fm2 == 0x7fff4a and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001a and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x4; op2val:0x49ffff4a; op3val:0x1a; valaddr_reg:x16; val_offset:1584; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1584, x17, x15, 1056, x18)

inst_133:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000023 and fs2 == 0 and fe2 == 0x90 and fm2 == 0x6a0dbb and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005d and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x23; op2val:0x486a0dbb; op3val:0x5d; valaddr_reg:x16; val_offset:1596; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1596, x17, x15, 1064, x18)

inst_134:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000047 and fs2 == 0 and fe2 == 0x8f and fm2 == 0x66c202 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000052 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x47; op2val:0x47e6c202; op3val:0x52; valaddr_reg:x16; val_offset:1608; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1608, x17, x15, 1072, x18)

inst_135:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000027 and fs2 == 0 and fe2 == 0x90 and fm2 == 0x520c8f and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000050 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x27; op2val:0x48520c8f; op3val:0x50; valaddr_reg:x16; val_offset:1620; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1620, x17, x15, 1080, x18)

inst_136:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000056 and fs2 == 0 and fe2 == 0x8f and fm2 == 0x3e82a2 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000036 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x56; op2val:0x47be82a2; op3val:0x36; valaddr_reg:x16; val_offset:1632; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1632, x17, x15, 1088, x18)

inst_137:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004b and fs2 == 0 and fe2 == 0x8f and fm2 == 0x5a7396 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000043 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x4b; op2val:0x47da7396; op3val:0x43; valaddr_reg:x16; val_offset:1644; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1644, x17, x15, 1096, x18)

inst_138:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000016 and fs2 == 0 and fe2 == 0x91 and fm2 == 0x3a2e16 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004f and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x16; op2val:0x48ba2e16; op3val:0x4f; valaddr_reg:x16; val_offset:1656; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1656, x17, x15, 1104, x18)

inst_139:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005e and fs2 == 1 and fe2 == 0x8e and fm2 == 0x2e4cd7 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000036 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5e; op2val:0xc72e4cd7; op3val:0x36; valaddr_reg:x16; val_offset:1668; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1668, x17, x15, 1112, x18)

inst_140:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005d and fs2 == 1 and fe2 == 0x8d and fm2 == 0x302dea and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000056 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5d; op2val:0xc6b02dea; op3val:0x56; valaddr_reg:x16; val_offset:1680; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1680, x17, x15, 1120, x18)

inst_141:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000059 and fs2 == 1 and fe2 == 0x8c and fm2 == 0x38178d and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000b and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x59; op2val:0xc638178d; op3val:0xb; valaddr_reg:x16; val_offset:1692; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1692, x17, x15, 1128, x18)

inst_142:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003e and fs2 == 1 and fe2 == 0x8c and fm2 == 0x04237c and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000025 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e; op2val:0xc604237c; op3val:0x25; valaddr_reg:x16; val_offset:1704; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1704, x17, x15, 1136, x18)

inst_143:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001a and fs2 == 1 and fe2 == 0x8c and fm2 == 0x1d913b and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002f and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x1a; op2val:0xc61d913b; op3val:0x2f; valaddr_reg:x16; val_offset:1716; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1716, x17, x15, 1144, x18)

inst_144:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000044 and fs2 == 1 and fe2 == 0x89 and fm2 == 0x70fbc4 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000016 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x44; op2val:0xc4f0fbc4; op3val:0x16; valaddr_reg:x16; val_offset:1728; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1728, x17, x15, 1152, x18)

inst_145:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000043 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x749ca8 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000013 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x43; op2val:0xc4749ca8; op3val:0x13; valaddr_reg:x16; val_offset:1740; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1740, x17, x15, 1160, x18)

inst_146:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002f and fs2 == 1 and fe2 == 0x88 and fm2 == 0x2e882c and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002b and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x2f; op2val:0xc42e882c; op3val:0x2b; valaddr_reg:x16; val_offset:1752; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1752, x17, x15, 1168, x18)

inst_147:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000059 and fs2 == 1 and fe2 == 0x86 and fm2 == 0x38c0b8 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003a and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x59; op2val:0xc338c0b8; op3val:0x3a; valaddr_reg:x16; val_offset:1764; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1764, x17, x15, 1176, x18)

inst_148:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002d and fs2 == 1 and fe2 == 0x86 and fm2 == 0x3693e9 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000017 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x2d; op2val:0xc33693e9; op3val:0x17; valaddr_reg:x16; val_offset:1776; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1776, x17, x15, 1184, x18)

inst_149:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005f and fs2 == 1 and fe2 == 0x84 and fm2 == 0x2ebca2 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000035 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5f; op2val:0xc22ebca2; op3val:0x35; valaddr_reg:x16; val_offset:1788; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1788, x17, x15, 1192, x18)

inst_150:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000053 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x49d4d2 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002d and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x53; op2val:0xc1c9d4d2; op3val:0x2d; valaddr_reg:x16; val_offset:1800; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1800, x17, x15, 1200, x18)

inst_151:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002d and fs2 == 1 and fe2 == 0x83 and fm2 == 0x3c9f4a and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000024 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x2d; op2val:0xc1bc9f4a; op3val:0x24; valaddr_reg:x16; val_offset:1812; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1812, x17, x15, 1208, x18)

inst_152:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000057 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x4d9bf4 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002e and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x57; op2val:0xc0cd9bf4; op3val:0x2e; valaddr_reg:x16; val_offset:1824; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1824, x17, x15, 1216, x18)

inst_153:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000041 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x276276 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000053 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x41; op2val:0xc0a76276; op3val:0x53; valaddr_reg:x16; val_offset:1836; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1836, x17, x15, 1224, x18)

inst_154:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x311111 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000025 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3c; op2val:0xc0311111; op3val:0x25; valaddr_reg:x16; val_offset:1848; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1848, x17, x15, 1232, x18)

inst_155:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000056 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x165359 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000024 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x56; op2val:0xbf965359; op3val:0x24; valaddr_reg:x16; val_offset:1860; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1860, x17, x15, 1240, x18)

inst_156:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000021 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x11745d and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002a and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x21; op2val:0xc011745d; op3val:0x2a; valaddr_reg:x16; val_offset:1872; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1872, x17, x15, 1248, x18)

inst_157:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x38a7de and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000047 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d; op2val:0xbfb8a7de; op3val:0x47; valaddr_reg:x16; val_offset:1884; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1884, x17, x15, 1256, x18)

inst_158:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004b and fs2 == 1 and fe2 == 0x7c and fm2 == 0x162fc9 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x4b; op2val:0xbe162fc9; op3val:0x2; valaddr_reg:x16; val_offset:1896; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1896, x17, x15, 1264, x18)

inst_159:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000054 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x2aaaab and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000017 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54; op2val:0xbeaaaaab; op3val:0x17; valaddr_reg:x16; val_offset:1908; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1908, x17, x15, 1272, x18)

inst_160:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000026 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x1e50d8 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002c and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x26; op2val:0xbf9e50d8; op3val:0x2c; valaddr_reg:x16; val_offset:1920; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1920, x17, x15, 1280, x18)

inst_161:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000059 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x055748 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005c and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x59; op2val:0xbf855748; op3val:0x5c; valaddr_reg:x16; val_offset:1932; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1932, x17, x15, 1288, x18)

inst_162:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000022 and fs2 == 0 and fe2 == 0x8f and fm2 == 0x70ef80 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000063 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x22; op2val:0x47f0ef80; op3val:0x63; valaddr_reg:x16; val_offset:1944; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1944, x17, x15, 1296, x18)

inst_163:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000024 and fs2 == 0 and fe2 == 0x8e and fm2 == 0x638c80 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003f and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x24; op2val:0x47638c80; op3val:0x3f; valaddr_reg:x16; val_offset:1956; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1956, x17, x15, 1304, x18)

inst_164:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005b and fs2 == 0 and fe2 == 0x8c and fm2 == 0x340784 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000056 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5b; op2val:0x46340784; op3val:0x56; valaddr_reg:x16; val_offset:1968; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1968, x17, x15, 1312, x18)

inst_165:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002f and fs2 == 0 and fe2 == 0x8c and fm2 == 0x2e4636 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000048 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x2f; op2val:0x462e4636; op3val:0x48; valaddr_reg:x16; val_offset:1980; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1980, x17, x15, 1320, x18)

inst_166:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000062 and fs2 == 0 and fe2 == 0x8a and fm2 == 0x2728a7 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000028 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x62; op2val:0x452728a7; op3val:0x28; valaddr_reg:x16; val_offset:1992; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1992, x17, x15, 1328, x18)

inst_167:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000055 and fs2 == 0 and fe2 == 0x89 and fm2 == 0x40bf3f and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000005 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x55; op2val:0x44c0bf3f; op3val:0x5; valaddr_reg:x16; val_offset:2004; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 2004, x17, x15, 1336, x18)

inst_168:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000059 and fs2 == 0 and fe2 == 0x88 and fm2 == 0x37e114 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004c and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x59; op2val:0x4437e114; op3val:0x4c; valaddr_reg:x16; val_offset:2016; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 2016, x17, x15, 1344, x18)

inst_169:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000009 and fs2 == 0 and fe2 == 0x8a and fm2 == 0x633e39 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002e and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x9; op2val:0x45633e39; op3val:0x2e; valaddr_reg:x16; val_offset:2028; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 2028, x17, x15, 1352, x18)
addi x16,x16,2040

inst_170:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000041 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x7b5a96 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002f and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x41; op2val:0x437b5a96; op3val:0x2f; valaddr_reg:x16; val_offset:0; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 0, x17, x15, 1360, x18)

inst_171:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000042 and fs2 == 0 and fe2 == 0x85 and fm2 == 0x761f08 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000047 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x42; op2val:0x42f61f08; op3val:0x47; valaddr_reg:x16; val_offset:12; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 12, x17, x15, 1368, x18)

inst_172:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003f and fs2 == 0 and fe2 == 0x85 and fm2 == 0x00f3cf and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000023 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f; op2val:0x4280f3cf; op3val:0x23; valaddr_reg:x16; val_offset:24; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 24, x17, x15, 1376, x18)

inst_173:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000018 and fs2 == 0 and fe2 == 0x85 and fm2 == 0x29c000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000c and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x18; op2val:0x42a9c000; op3val:0xc; valaddr_reg:x16; val_offset:36; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 36, x17, x15, 1384, x18)

inst_174:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000040 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x754000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002c and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x40; op2val:0x41754000; op3val:0x2c; valaddr_reg:x16; val_offset:48; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 48, x17, x15, 1392, x18)

inst_175:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000017 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x1642c8 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000051 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x17; op2val:0x419642c8; op3val:0x51; valaddr_reg:x16; val_offset:60; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 60, x17, x15, 1400, x18)

inst_176:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000031 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x758d10 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000045 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x31; op2val:0x40758d10; op3val:0x45; valaddr_reg:x16; val_offset:72; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 72, x17, x15, 1408, x18)

inst_177:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000013 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x400000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000f and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x13; op2val:0x40c00000; op3val:0xf; valaddr_reg:x16; val_offset:84; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 84, x17, x15, 1416, x18)

inst_178:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003d and fs2 == 0 and fe2 == 0x7c and fm2 == 0x5a3ac1 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000034 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d; op2val:0x3e5a3ac1; op3val:0x34; valaddr_reg:x16; val_offset:96; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 96, x17, x15, 1424, x18)

inst_179:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000024 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x0e38e4 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000026 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x24; op2val:0xbe0e38e4; op3val:0x26; valaddr_reg:x16; val_offset:108; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 108, x17, x15, 1432, x18)

inst_180:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000029 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0c7ce1 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003e and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x29; op2val:0xbf8c7ce1; op3val:0x3e; valaddr_reg:x16; val_offset:120; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 120, x17, x15, 1440, x18)

inst_181:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000059 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x747e90 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005e and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x59; op2val:0xbf747e90; op3val:0x5e; valaddr_reg:x16; val_offset:132; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 132, x17, x15, 1448, x18)

inst_182:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7ba938 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003f and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3b; op2val:0xbf7ba938; op3val:0x3f; valaddr_reg:x16; val_offset:144; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 144, x17, x15, 1456, x18)

inst_183:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000016 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3a2e8c and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000043 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x16; op2val:0xc03a2e8c; op3val:0x43; valaddr_reg:x16; val_offset:156; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 156, x17, x15, 1464, x18)

inst_184:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x2c02d9 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000050 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3b; op2val:0xbfac02d9; op3val:0x50; valaddr_reg:x16; val_offset:168; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 168, x17, x15, 1472, x18)

inst_185:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000026 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1fffda and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000013 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800026; op2val:0xc01fffda; op3val:0x3f800013; valaddr_reg:x16; val_offset:180; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 180, x17, x15, 1480, x18)

inst_186:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000008 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x100012 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000036 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800008; op2val:0xc0100012; op3val:0x3f800036; valaddr_reg:x16; val_offset:192; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 192, x17, x15, 1488, x18)

inst_187:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000030 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x07ffd7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000014 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800030; op2val:0xc007ffd7; op3val:0x3f800014; valaddr_reg:x16; val_offset:204; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 204, x17, x15, 1496, x18)

inst_188:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000016 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x040005 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000038 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800016; op2val:0xc0040005; op3val:0x3f800038; valaddr_reg:x16; val_offset:216; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 216, x17, x15, 1504, x18)

inst_189:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000035 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x01ffd1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00000e and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800035; op2val:0xc001ffd1; op3val:0x3f80000e; valaddr_reg:x16; val_offset:228; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 228, x17, x15, 1512, x18)

inst_190:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000011 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x010017 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000051 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800011; op2val:0xc0010017; op3val:0x3f800051; valaddr_reg:x16; val_offset:240; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 240, x17, x15, 1520, x18)

inst_191:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00005e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x007fc6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000049 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f80005e; op2val:0xc0007fc6; op3val:0x3f800049; valaddr_reg:x16; val_offset:252; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 252, x17, x15, 1528, x18)

inst_192:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00001b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x003fed and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000011 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f80001b; op2val:0xc0003fed; op3val:0x3f800011; valaddr_reg:x16; val_offset:264; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 264, x17, x15, 1536, x18)

inst_193:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000040 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x001fd5 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00002b and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800040; op2val:0xc0001fd5; op3val:0x3f80002b; valaddr_reg:x16; val_offset:276; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 276, x17, x15, 1544, x18)

inst_194:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000052 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000fb0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000005 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800052; op2val:0xc0000fb0; op3val:0x3f800005; valaddr_reg:x16; val_offset:288; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 288, x17, x15, 1552, x18)

inst_195:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0007f1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000008 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800013; op2val:0xc00007f1; op3val:0x3f800008; valaddr_reg:x16; val_offset:300; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 300, x17, x15, 1560, x18)

inst_196:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000054 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0003c7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000036 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800054; op2val:0xc00003c7; op3val:0x3f800036; valaddr_reg:x16; val_offset:312; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 312, x17, x15, 1568, x18)

inst_197:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000021 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0001fc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00003b and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800021; op2val:0xc00001fc; op3val:0x3f80003b; valaddr_reg:x16; val_offset:324; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 324, x17, x15, 1576, x18)

inst_198:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00004d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0000c9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00002d and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f80004d; op2val:0xc00000c9; op3val:0x3f80002d; valaddr_reg:x16; val_offset:336; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 336, x17, x15, 1584, x18)

inst_199:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00001f and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000090 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00005f and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f80001f; op2val:0xc0000090; op3val:0x3f80005f; valaddr_reg:x16; val_offset:348; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 348, x17, x15, 1592, x18)

inst_200:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000034 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00000e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000005 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800034; op2val:0xc000000e; op3val:0x3f800005; valaddr_reg:x16; val_offset:360; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 360, x17, x15, 1600, x18)

inst_201:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00004d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7fffeb and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000045 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f80004d; op2val:0xbfffffeb; op3val:0x3f800045; valaddr_reg:x16; val_offset:372; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 372, x17, x15, 1608, x18)

inst_202:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000007 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00000e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00000b and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800007; op2val:0xc000000e; op3val:0x3f80000b; valaddr_reg:x16; val_offset:384; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 384, x17, x15, 1616, x18)

inst_203:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000015 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000021 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00005d and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800015; op2val:0xc0000021; op3val:0x3f80005d; valaddr_reg:x16; val_offset:396; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 396, x17, x15, 1624, x18)

inst_204:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000028 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7ffff6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00003e and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800028; op2val:0xbffffff6; op3val:0x3f80003e; valaddr_reg:x16; val_offset:408; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 408, x17, x15, 1632, x18)

inst_205:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00005d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7fffa3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000059 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f80005d; op2val:0xbfffffa3; op3val:0x3f800059; valaddr_reg:x16; val_offset:420; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 420, x17, x15, 1640, x18)

inst_206:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000051 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7fff74 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000014 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800051; op2val:0xbfffff74; op3val:0x3f800014; valaddr_reg:x16; val_offset:432; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 432, x17, x15, 1648, x18)

inst_207:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000017 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7fffde and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00000b and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800017; op2val:0xbfffffde; op3val:0x3f80000b; valaddr_reg:x16; val_offset:444; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 444, x17, x15, 1656, x18)

inst_208:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000029 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7fff0e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000028 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800029; op2val:0x3effff0e; op3val:0x3f800028; valaddr_reg:x16; val_offset:456; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 456, x17, x15, 1664, x18)

inst_209:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000028 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x7ffcf0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000058 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800028; op2val:0x3e7ffcf0; op3val:0x3f800058; valaddr_reg:x16; val_offset:468; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 468, x17, x15, 1672, x18)

inst_210:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000046 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x7ffeb4 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00000c and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800046; op2val:0x3dfffeb4; op3val:0x3f80000c; valaddr_reg:x16; val_offset:480; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 480, x17, x15, 1680, x18)

inst_211:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000024 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x7ff478 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00005a and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800024; op2val:0x3d7ff478; op3val:0x3f80005a; valaddr_reg:x16; val_offset:492; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 492, x17, x15, 1688, x18)

inst_212:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000013 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x7ff4da and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00002c and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800013; op2val:0x3cfff4da; op3val:0x3f80002c; valaddr_reg:x16; val_offset:504; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 504, x17, x15, 1696, x18)

inst_213:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00004f and fs2 == 0 and fe2 == 0x78 and fm2 == 0x7fe7e2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00002f and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f80004f; op2val:0x3c7fe7e2; op3val:0x3f80002f; valaddr_reg:x16; val_offset:516; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 516, x17, x15, 1704, x18)

inst_214:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00002c and fs2 == 0 and fe2 == 0x77 and fm2 == 0x7fbda8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000042 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f80002c; op2val:0x3bffbda8; op3val:0x3f800042; valaddr_reg:x16; val_offset:528; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 528, x17, x15, 1712, x18)

inst_215:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00000c and fs2 == 0 and fe2 == 0x76 and fm2 == 0x7fc9e8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00001b and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f80000c; op2val:0x3b7fc9e8; op3val:0x3f80001b; valaddr_reg:x16; val_offset:540; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 540, x17, x15, 1720, x18)

inst_216:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000005 and fs2 == 0 and fe2 == 0x75 and fm2 == 0x7f1ff6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000038 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800005; op2val:0x3aff1ff6; op3val:0x3f800038; valaddr_reg:x16; val_offset:552; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 552, x17, x15, 1728, x18)

inst_217:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000030 and fs2 == 0 and fe2 == 0x74 and fm2 == 0x7ecfa0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000026 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800030; op2val:0x3a7ecfa0; op3val:0x3f800026; valaddr_reg:x16; val_offset:564; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 564, x17, x15, 1736, x18)

inst_218:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00004c and fs2 == 0 and fe2 == 0x73 and fm2 == 0x79ff6c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000060 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f80004c; op2val:0x39f9ff6c; op3val:0x3f800060; valaddr_reg:x16; val_offset:576; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 576, x17, x15, 1744, x18)

inst_219:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00003c and fs2 == 0 and fe2 == 0x72 and fm2 == 0x7e3f89 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00000e and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f80003c; op2val:0x397e3f89; op3val:0x3f80000e; valaddr_reg:x16; val_offset:588; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 588, x17, x15, 1752, x18)

inst_220:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000044 and fs2 == 0 and fe2 == 0x71 and fm2 == 0x77bf7c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000021 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800044; op2val:0x38f7bf7c; op3val:0x3f800021; valaddr_reg:x16; val_offset:600; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 600, x17, x15, 1760, x18)

inst_221:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000042 and fs2 == 0 and fe2 == 0x70 and fm2 == 0x68ff88 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00002e and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800042; op2val:0x3868ff88; op3val:0x3f80002e; valaddr_reg:x16; val_offset:612; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 612, x17, x15, 1768, x18)

inst_222:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00003c and fs2 == 0 and fe2 == 0x6f and fm2 == 0x52ff9d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00002d and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f80003c; op2val:0x37d2ff9d; op3val:0x3f80002d; valaddr_reg:x16; val_offset:624; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 624, x17, x15, 1776, x18)

inst_223:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000061 and fs2 == 0 and fe2 == 0x6e and fm2 == 0x3fff6f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000020 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800061; op2val:0x373fff6f; op3val:0x3f800020; valaddr_reg:x16; val_offset:636; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 636, x17, x15, 1784, x18)

inst_224:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00001a and fs2 == 0 and fe2 == 0x6d and fm2 == 0x3fffd9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000010 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f80001a; op2val:0x36bfffd9; op3val:0x3f800010; valaddr_reg:x16; val_offset:648; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 648, x17, x15, 1792, x18)

inst_225:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000018 and fs2 == 1 and fe2 == 0x6d and fm2 == 0x3fffdc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000050 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800018; op2val:0xb6bfffdc; op3val:0x3f800050; valaddr_reg:x16; val_offset:660; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 660, x17, x15, 1800, x18)

inst_226:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000006 and fs2 == 1 and fe2 == 0x6e and fm2 == 0x15fff9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00005b and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800006; op2val:0xb715fff9; op3val:0x3f80005b; valaddr_reg:x16; val_offset:672; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 672, x17, x15, 1808, x18)

inst_227:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000002 and fs2 == 1 and fe2 == 0x6d and fm2 == 0x47fffd and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00003a and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800002; op2val:0xb6c7fffd; op3val:0x3f80003a; valaddr_reg:x16; val_offset:684; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 684, x17, x15, 1816, x18)

inst_228:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000031 and fs2 == 1 and fe2 == 0x6e and fm2 == 0x0dffca and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00004b and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800031; op2val:0xb70dffca; op3val:0x3f80004b; valaddr_reg:x16; val_offset:696; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 696, x17, x15, 1824, x18)

inst_229:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000036 and fs2 == 1 and fe2 == 0x6d and fm2 == 0x33ffb4 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00002f and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800036; op2val:0xb6b3ffb4; op3val:0x3f80002f; valaddr_reg:x16; val_offset:708; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 708, x17, x15, 1832, x18)

inst_230:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000003 and fs2 == 1 and fe2 == 0x6e and fm2 == 0x0bfffd and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000047 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800003; op2val:0xb70bfffd; op3val:0x3f800047; valaddr_reg:x16; val_offset:720; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 720, x17, x15, 1840, x18)

inst_231:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002e and fs2 == 1 and fe2 == 0x8f and fm2 == 0x3216d3 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000034 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x2e; op2val:0xc7b216d3; op3val:0x34; valaddr_reg:x16; val_offset:732; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 732, x17, x15, 1848, x18)

inst_232:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000003 and fs2 == 1 and fe2 == 0x92 and fm2 == 0x2aacab and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000060 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3; op2val:0xc92aacab; op3val:0x60; valaddr_reg:x16; val_offset:744; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 744, x17, x15, 1856, x18)

inst_233:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000008 and fs2 == 1 and fe2 == 0x90 and fm2 == 0x000108 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000021 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x8; op2val:0xc8000108; op3val:0x21; valaddr_reg:x16; val_offset:756; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 756, x17, x15, 1864, x18)

inst_234:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005b and fs2 == 1 and fe2 == 0x8b and fm2 == 0x340d46 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000017 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5b; op2val:0xc5b40d46; op3val:0x17; valaddr_reg:x16; val_offset:768; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 768, x17, x15, 1872, x18)

inst_235:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003e and fs2 == 1 and fe2 == 0x8b and fm2 == 0x0428e7 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003d and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e; op2val:0xc58428e7; op3val:0x3d; valaddr_reg:x16; val_offset:780; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 780, x17, x15, 1880, x18)

inst_236:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000029 and fs2 == 1 and fe2 == 0x8a and fm2 == 0x47d76a and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000018 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x29; op2val:0xc547d76a; op3val:0x18; valaddr_reg:x16; val_offset:792; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 792, x17, x15, 1888, x18)

inst_237:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003e and fs2 == 1 and fe2 == 0x89 and fm2 == 0x044f7c and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005a and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e; op2val:0xc4844f7c; op3val:0x5a; valaddr_reg:x16; val_offset:804; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 804, x17, x15, 1896, x18)

inst_238:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002e and fs2 == 1 and fe2 == 0x88 and fm2 == 0x324dea and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000028 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x2e; op2val:0xc4324dea; op3val:0x28; valaddr_reg:x16; val_offset:816; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 816, x17, x15, 1904, x18)

inst_239:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000009 and fs2 == 1 and fe2 == 0x89 and fm2 == 0x641c72 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000028 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x9; op2val:0xc4e41c72; op3val:0x28; valaddr_reg:x16; val_offset:828; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 828, x17, x15, 1912, x18)

inst_240:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005b and fs2 == 1 and fe2 == 0x85 and fm2 == 0x3502d0 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002c and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5b; op2val:0xc2b502d0; op3val:0x2c; valaddr_reg:x16; val_offset:840; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 840, x17, x15, 1920, x18)

inst_241:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004d and fs2 == 1 and fe2 == 0x84 and fm2 == 0x594c78 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000057 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x4d; op2val:0xc2594c78; op3val:0x57; valaddr_reg:x16; val_offset:852; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 852, x17, x15, 1928, x18)

inst_242:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004c and fs2 == 1 and fe2 == 0x83 and fm2 == 0x57af28 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x4c; op2val:0xc1d7af28; op3val:0x1; valaddr_reg:x16; val_offset:864; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 864, x17, x15, 1936, x18)

inst_243:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000027 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x620d21 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004e and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x27; op2val:0xc1e20d21; op3val:0x4e; valaddr_reg:x16; val_offset:876; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 876, x17, x15, 1944, x18)

inst_244:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000009 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x76aaab and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002b and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x9; op2val:0xc276aaab; op3val:0x2b; valaddr_reg:x16; val_offset:888; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 888, x17, x15, 1952, x18)

inst_245:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000013 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x7435e5 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000022 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x13; op2val:0xc17435e5; op3val:0x22; valaddr_reg:x16; val_offset:900; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 900, x17, x15, 1960, x18)

inst_246:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000036 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x31c71c and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000016 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x36; op2val:0xc031c71c; op3val:0x16; valaddr_reg:x16; val_offset:912; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 912, x17, x15, 1968, x18)

inst_247:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000003 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x140000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002f and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3; op2val:0xc2140000; op3val:0x2f; valaddr_reg:x16; val_offset:924; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 924, x17, x15, 1976, x18)

inst_248:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000032 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x35c28f and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000027 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x32; op2val:0xbfb5c28f; op3val:0x27; valaddr_reg:x16; val_offset:936; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 936, x17, x15, 1984, x18)

inst_249:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000059 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x719e34 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001a and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x59; op2val:0xbef19e34; op3val:0x1a; valaddr_reg:x16; val_offset:948; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 948, x17, x15, 1992, x18)

inst_250:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x17b426 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000018 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x1b; op2val:0xbf97b426; op3val:0x18; valaddr_reg:x16; val_offset:960; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 960, x17, x15, 2000, x18)

inst_251:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000057 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7a1d6d and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000051 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x57; op2val:0xbf7a1d6d; op3val:0x51; valaddr_reg:x16; val_offset:972; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 972, x17, x15, 2008, x18)

inst_252:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x313b14 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000046 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x1a; op2val:0xc0313b14; op3val:0x46; valaddr_reg:x16; val_offset:984; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 984, x17, x15, 2016, x18)

inst_253:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000026 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0d7943 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000029 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x26; op2val:0xbf8d7943; op3val:0x29; valaddr_reg:x16; val_offset:996; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 996, x17, x15, 2024, x18)
RVTEST_SIGBASE(x15,signature_x15_2)

inst_254:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000016 and fs2 == 0 and fe2 == 0x90 and fm2 == 0x3a2e4c and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000016 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x16; op2val:0x483a2e4c; op3val:0x16; valaddr_reg:x16; val_offset:1008; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1008, x17, x15, 0, x18)

inst_255:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001b and fs2 == 0 and fe2 == 0x8f and fm2 == 0x17b3a1 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001c and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x1b; op2val:0x4797b3a1; op3val:0x1c; valaddr_reg:x16; val_offset:1020; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1020, x17, x15, 8, x18)

inst_256:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x92 and fm2 == 0x7ffff0 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x1; op2val:0x497ffff0; op3val:0x1; valaddr_reg:x16; val_offset:1032; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1032, x17, x15, 16, x18)

inst_257:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000011 and fs2 == 0 and fe2 == 0x8d and fm2 == 0x70eef1 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000011 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x11; op2val:0x46f0eef1; op3val:0x11; valaddr_reg:x16; val_offset:1044; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1044, x17, x15, 24, x18)

inst_258:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000050 and fs2 == 0 and fe2 == 0x8a and fm2 == 0x4cc166 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000039 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x50; op2val:0x454cc166; op3val:0x39; valaddr_reg:x16; val_offset:1056; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1056, x17, x15, 32, x18)

inst_259:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000012 and fs2 == 0 and fe2 == 0x8b and fm2 == 0x636aab and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000050 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x12; op2val:0x45e36aab; op3val:0x50; valaddr_reg:x16; val_offset:1068; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1068, x17, x15, 40, x18)

inst_260:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000062 and fs2 == 0 and fe2 == 0x88 and fm2 == 0x27287d and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000a and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x62; op2val:0x4427287d; op3val:0xa; valaddr_reg:x16; val_offset:1080; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1080, x17, x15, 48, x18)

inst_261:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000032 and fs2 == 0 and fe2 == 0x88 and fm2 == 0x23bc29 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000015 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x32; op2val:0x4423bc29; op3val:0x15; valaddr_reg:x16; val_offset:1092; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1092, x17, x15, 56, x18)

inst_262:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000018 and fs2 == 0 and fe2 == 0x88 and fm2 == 0x29a2ab and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000063 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x18; op2val:0x4429a2ab; op3val:0x63; valaddr_reg:x16; val_offset:1104; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1104, x17, x15, 64, x18)

inst_263:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000035 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x19e305 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000024 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x35; op2val:0x4319e305; op3val:0x24; valaddr_reg:x16; val_offset:1116; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1116, x17, x15, 72, x18)

inst_264:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005e and fs2 == 0 and fe2 == 0x84 and fm2 == 0x2d1b3c and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001c and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5e; op2val:0x422d1b3c; op3val:0x1c; valaddr_reg:x16; val_offset:1128; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1128, x17, x15, 80, x18)

inst_265:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000020 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x7fc000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x20; op2val:0x427fc000; op3val:0x2; valaddr_reg:x16; val_offset:1140; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1140, x17, x15, 88, x18)

inst_266:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000e and fs2 == 0 and fe2 == 0x85 and fm2 == 0x07b6db and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004a and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0xe; op2val:0x4287b6db; op3val:0x4a; valaddr_reg:x16; val_offset:1152; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1152, x17, x15, 96, x18)

inst_267:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000031 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x105398 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000046 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x31; op2val:0x41105398; op3val:0x46; valaddr_reg:x16; val_offset:1164; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1164, x17, x15, 104, x18)

inst_268:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6b0432 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000020 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d; op2val:0x406b0432; op3val:0x20; valaddr_reg:x16; val_offset:1176; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1176, x17, x15, 112, x18)

inst_269:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2aaaab and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000030 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0xf; op2val:0x40aaaaab; op3val:0x30; valaddr_reg:x16; val_offset:1188; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1188, x17, x15, 120, x18)

inst_270:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000007 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x449249 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000015 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7; op2val:0x40c49249; op3val:0x15; valaddr_reg:x16; val_offset:1200; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1200, x17, x15, 128, x18)

inst_271:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000020 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x500000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000054 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x20; op2val:0xbfd00000; op3val:0x54; valaddr_reg:x16; val_offset:1212; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1212, x17, x15, 136, x18)

inst_272:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000004 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x300000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003c and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x4; op2val:0xc1300000; op3val:0x3c; valaddr_reg:x16; val_offset:1224; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1224, x17, x15, 144, x18)

inst_273:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000054 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x36db6e and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000044 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54; op2val:0xbf36db6e; op3val:0x44; valaddr_reg:x16; val_offset:1236; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1236, x17, x15, 152, x18)

inst_274:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000059 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x02e05c and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005f and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x59; op2val:0xbf82e05c; op3val:0x5f; valaddr_reg:x16; val_offset:1248; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1248, x17, x15, 160, x18)

inst_275:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005f and fs2 == 1 and fe2 == 0x7d and fm2 == 0x6d2308 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002e and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5f; op2val:0xbeed2308; op3val:0x2e; valaddr_reg:x16; val_offset:1260; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1260, x17, x15, 168, x18)

inst_276:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000050 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x4ccccd and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000021 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x50; op2val:0xbecccccd; op3val:0x21; valaddr_reg:x16; val_offset:1272; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1272, x17, x15, 176, x18)

inst_277:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000006 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x38001b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000048 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f000006; op2val:0xc038001b; op3val:0x7f000048; valaddr_reg:x16; val_offset:1284; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1284, x17, x15, 184, x18)

inst_278:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000050 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3bff98 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00001c and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f000050; op2val:0xc03bff98; op3val:0x7f00001c; valaddr_reg:x16; val_offset:1296; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1296, x17, x15, 192, x18)

inst_279:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000015 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3dffe5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000009 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f000015; op2val:0xc03dffe5; op3val:0x7f000009; valaddr_reg:x16; val_offset:1308; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1308, x17, x15, 200, x18)

inst_280:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000018 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3efff6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000035 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f000018; op2val:0xc03efff6; op3val:0x7f000035; valaddr_reg:x16; val_offset:1320; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1320, x17, x15, 208, x18)

inst_281:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000039 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3fbfb4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000014 and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f000039; op2val:0xc03fbfb4; op3val:0x7f000014; valaddr_reg:x16; val_offset:1332; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1332, x17, x15, 216, x18)

inst_282:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000026 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3fdff4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00005b and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f000026; op2val:0xc03fdff4; op3val:0x7f00005b; valaddr_reg:x16; val_offset:1344; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1344, x17, x15, 224, x18)

inst_283:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000053 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3ff78b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00000f and rm_val == 0  
// opcode: fmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f000053; op2val:0xc03ff78b; op3val:0x7f00000f; valaddr_reg:x16; val_offset:1356; rmval:0x0; testreg:x18
TEST_FPR4_OP(fmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1356, x17, x15, 232, x18)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
test_fp:
.word 0x50
.word 0xbecccccd
.word 0x50
.word 0x7f000031
.word 0xc01ffff2
.word 0x7f000060
.word 0x7f00000e
.word 0xc0300017
.word 0x7f000055
.word 0x7f000006
.word 0x7f000006
.word 0x7f000048
.word 0x7f000050
.word 0x7f000050
.word 0x7f00001c
.word 0x7f000015
.word 0x7f000015
.word 0x7f000015
.word 0x7f000018
.word 0x7f000018
.word 0x7f000018
.word 0x7f000018
.word 0xc03f8003
.word 0x7f00004f
.word 0x7f000039
.word 0xc03fbfb4
.word 0xc03fbfb4
.word 0x7f000026
.word 0xc03fdff4
.word 0x7f000026
.word 0x7f00005c
.word 0xc03fef7f
.word 0x7f000012
.word 0x7f000053
.word 0xc03ff78b
.word 0xc03ff78b
.word 0x7f00001d
.word 0xc03ffbfc
.word 0x7f00004f
.word 0x7f000010
.word 0xc03ffdf0
.word 0x7f000010
.word 0x7f00003f
.word 0xc03ffea5
.word 0x7f000007
.word 0x7f000034
.word 0xc03fff5f
.word 0x7f00005a
.word 0x7f000037
.word 0xc03fff72
.word 0x7f000009
.word 0x7f00002b
.word 0xc03fffce
.word 0x7f00005d
.word 0x7f000055
.word 0xc03fff72
.word 0x7f000004
.word 0x7f00000b
.word 0xc03fffec
.word 0x7f000009
.word 0x7f00001e
.word 0xc03fffe0
.word 0x7f000023
.word 0x7f000009
.word 0xc040001f
.word 0x7f00005e
.word 0x7f000046
.word 0xc03fff99
.word 0x7f000007
.word 0x7f000037
.word 0xc03fffd2
.word 0x7f00004b
.word 0x7f000045
.word 0x3effff22
.word 0x7f000014
.word 0x7f000040
.word 0x3f3fff48
.word 0x7f00002b
.word 0x7f000059
.word 0x3f5ffed4
.word 0x7f000047
.word 0x7f000016
.word 0x3f6fff59
.word 0x7f00003e
.word 0x7f000028
.word 0x3f77ff8b
.word 0x7f000013
.word 0x7f000053
.word 0x3f7bfee1
.word 0x7f00003d
.word 0x7f00004b
.word 0x3f7dff1f
.word 0x7f000025
.word 0x7f000059
.word 0x3f7efedd
.word 0x7f000038
.word 0x7f000027
.word 0x3f7f7fae
.word 0x7f000001
.word 0x7f000062
.word 0x3f7fbf28
.word 0x7f000009
.word 0x7f000026
.word 0x3f7fdf3a
.word 0x7f00003c
.word 0x7f00005d
.word 0x3f7fef10
.word 0x7f00001a
.word 0x7f000033
.word 0x3f7ff6e8
.word 0x7f000058
.word 0x7f000032
.word 0x3f7ffb20
.word 0x7f00003d
.word 0x7f000054
.word 0x3f7ffcda
.word 0x7f00003e
.word 0x7f00005b
.word 0x3f7ffda6
.word 0x7f000051
.word 0x7f00004a
.word 0x3f7ffe38
.word 0x7f000059
.word 0x7f000037
.word 0x3f7ffeb6
.word 0x7f00004d
.word 0x7f000002
.word 0x3f7fff6c
.word 0x7f000037
.word 0x7f000046
.word 0x3f7fff30
.word 0x7f000019
.word 0x7f00000e
.word 0x3f7fff2a
.word 0x7f000058
.word 0x7f00003b
.word 0x3f7ffed4
.word 0x7f000058
.word 0x7f000021
.word 0x3f7fff2c
.word 0x7f000047
.word 0x800005
.word 0xc01ffffa
.word 0x800001
.word 0x80004c
.word 0xc00fffb3
.word 0x800011
.word 0x800058
.word 0xc007ffd3
.word 0x800060
.word 0x80002d
.word 0xc003ffe9
.word 0x80002f
.word 0x800004
.word 0xc002001a
.word 0x80003c
.word 0x80005e
.word 0xc000ffc3
.word 0x800044
.word 0x80004f
.word 0xc0007fc4
.word 0x800026
.word 0x80005b
.word 0xc0003fbb
.word 0x80002c
.word 0x800025
.word 0xc0001ffd
.word 0x800045
.word 0x800011
.word 0xc0001002
.word 0x800027
.word 0x800003
.word 0xc000082e
.word 0x800062
.word 0x800060
.word 0xc00003a8
.word 0x800010
.word 0x800053
.word 0xc00001d4
.word 0x80004e
.word 0x80003d
.word 0xc00000e4
.word 0x800043
.word 0x800040
.word 0xc0000067
.word 0x80004e
.word 0x800025
.word 0xc000002e
.word 0x800026
.word 0x800014
.word 0xc000003a
.word 0x80005d
.word 0x80003f
.word 0xbfffffc5
.word 0x800023
.word 0x800005
.word 0xc0000013
.word 0x800020
.word 0x800020
.word 0xc0000002
.word 0x80003d
.word 0x800048
.word 0xbfffff98
.word 0x800024
.word 0x80003e
.word 0xbfffffcb
.word 0x800045
.word 0x800033
.word 0xbfffff9d
.word 0x800002
.word 0x800006
.word 0x3effffac
.word 0x800012
.word 0x800020
.word 0x3e7ffe90
.word 0x800026
.word 0x800050
.word 0x3dfffbd0
.word 0x800039
.word 0x800010
.word 0x3d7ff540
.word 0x800055
.word 0x80003e
.word 0x3cfffe84
.word 0x800004
.word 0x800025
.word 0x3c7ff636
.word 0x800013
.word 0x800028
.word 0x3bffc0b0
.word 0x80003f
.word 0x800003
.word 0x3b7fadfa
.word 0x800029
.word 0x800021
.word 0x3aff27be
.word 0x800036
.word 0x800027
.word 0x3a7dffb3
.word 0x800040
.word 0x800022
.word 0x39fa0fbe
.word 0x80005f
.word 0x80004d
.word 0x39765f6c
.word 0x80004d
.word 0x800032
.word 0x38fabf9e
.word 0x800015
.word 0x80005b
.word 0x38677f5b
.word 0x800031
.word 0x800026
.word 0x37c1ffc6
.word 0x80003e
.word 0x80001d
.word 0x36ffffc6
.word 0x800040
.word 0x800037
.word 0x357fff92
.word 0x800038
.word 0x800049
.word 0xb607ffb2
.word 0x800031
.word 0x80002a
.word 0xb701ffd5
.word 0x800051
.word 0x800046
.word 0xb5afffa0
.word 0x800013
.word 0x800049
.word 0xb715ffaa
.word 0x80004f
.word 0x80000e
.word 0xb69fffef
.word 0x80002a
.word 0x800001
.word 0xb6bfffff
.word 0x800031
.word 0x2d
.word 0xc7b60c50
.word 0x55
.word 0x4e
.word 0xc79d89eb
.word 0xc
.word 0x1a
.word 0xc889d8b2
.word 0x12
.word 0x49
.word 0xc7d269a0
.word 0x3e
.word 0x4d
.word 0xc7ce218f
.word 0x31
.word 0x13
.word 0xc8d43607
.word 0x15
.word 0x30
.word 0xc82955a4
.word 0x3c
.word 0x53
.word 0xc7c4a0cc
.word 0x45
.word 0x35
.word 0xc81a43f6
.word 0x49
.word 0x11
.word 0xc8f0b518
.word 0x36
.word 0x26
.word 0xc857798f
.word 0x2e
.word 0x2c
.word 0xc83a2354
.word 0x4b
.word 0x46
.word 0xc7ea07c7
.word 0x42
.word 0xd
.word 0xc91d8790
.word 0x26
.word 0x4f
.word 0xc7cf6313
.word 0x27
.word 0x5
.word 0xc9cccc70
.word 0x47
.word 0x47
.word 0xc7e6c296
.word 0x30
.word 0xf
.word 0xc90888c4
.word 0x59
.word 0x24
.word 0xc8638e79
.word 0x35
.word 0x2d
.word 0xc8360b9e
.word 0x34
.word 0x30
.word 0xc82aaaa5
.word 0x1
.word 0x1f
.word 0xc8842164
.word 0x5c
.word 0x4c
.word 0xc7d79460
.word 0x1b
.word 0x4f
.word 0x474f6451
.word 0xa
.word 0x31
.word 0x47fac5a7
.word 0x55
.word 0x3c
.word 0x47eeee8d
.word 0x2d
.word 0x5
.word 0x49bfffa8
.word 0x36
.word 0x19
.word 0x489eb7f6
.word 0x47
.word 0x18
.word 0x48a7ffac
.word 0x3e
.word 0xf
.word 0x4907774b
.word 0x29
.word 0x7
.word 0x4991b6c6
.word 0x12
.word 0x1d
.word 0x488cf713
.word 0x16
.word 0x6
.word 0x49aa7fad
.word 0x3d
.word 0x51
.word 0x47ca2bac
.word 0x5c
.word 0x58
.word 0x47ba22c4
.word 0x18
.word 0x1d
.word 0x488d38f4
.word 0x62
.word 0x54
.word 0x47c308fe
.word 0x18
.word 0x39
.word 0x480fb6aa
.word 0x50
.word 0x15
.word 0x48c30af8
.word 0x4c
.word 0x4
.word 0x49ffff4a
.word 0x1a
.word 0x23
.word 0x486a0dbb
.word 0x5d
.word 0x47
.word 0x47e6c202
.word 0x52
.word 0x27
.word 0x48520c8f
.word 0x50
.word 0x56
.word 0x47be82a2
.word 0x36
.word 0x4b
.word 0x47da7396
.word 0x43
.word 0x16
.word 0x48ba2e16
.word 0x4f
.word 0x5e
.word 0xc72e4cd7
.word 0x36
.word 0x5d
.word 0xc6b02dea
.word 0x56
.word 0x59
.word 0xc638178d
.word 0xb
.word 0x3e
.word 0xc604237c
.word 0x25
.word 0x1a
.word 0xc61d913b
.word 0x2f
.word 0x44
.word 0xc4f0fbc4
.word 0x16
.word 0x43
.word 0xc4749ca8
.word 0x13
.word 0x2f
.word 0xc42e882c
.word 0x2b
.word 0x59
.word 0xc338c0b8
.word 0x3a
.word 0x2d
.word 0xc33693e9
.word 0x17
.word 0x5f
.word 0xc22ebca2
.word 0x35
.word 0x53
.word 0xc1c9d4d2
.word 0x2d
.word 0x2d
.word 0xc1bc9f4a
.word 0x24
.word 0x57
.word 0xc0cd9bf4
.word 0x2e
.word 0x41
.word 0xc0a76276
.word 0x53
.word 0x3c
.word 0xc0311111
.word 0x25
.word 0x56
.word 0xbf965359
.word 0x24
.word 0x21
.word 0xc011745d
.word 0x2a
.word 0x3d
.word 0xbfb8a7de
.word 0x47
.word 0x4b
.word 0xbe162fc9
.word 0x2
.word 0x54
.word 0xbeaaaaab
.word 0x17
.word 0x26
.word 0xbf9e50d8
.word 0x2c
.word 0x59
.word 0xbf855748
.word 0x5c
.word 0x22
.word 0x47f0ef80
.word 0x63
.word 0x24
.word 0x47638c80
.word 0x3f
.word 0x5b
.word 0x46340784
.word 0x56
.word 0x2f
.word 0x462e4636
.word 0x48
.word 0x62
.word 0x452728a7
.word 0x28
.word 0x55
.word 0x44c0bf3f
.word 0x5
.word 0x59
.word 0x4437e114
.word 0x4c
.word 0x9
.word 0x45633e39
.word 0x2e
.word 0x41
.word 0x437b5a96
.word 0x2f
.word 0x42
.word 0x42f61f08
.word 0x47
.word 0x3f
.word 0x4280f3cf
.word 0x23
.word 0x18
.word 0x42a9c000
.word 0xc
.word 0x40
.word 0x41754000
.word 0x2c
.word 0x17
.word 0x419642c8
.word 0x51
.word 0x31
.word 0x40758d10
.word 0x45
.word 0x13
.word 0x40c00000
.word 0xf
.word 0x3d
.word 0x3e5a3ac1
.word 0x34
.word 0x24
.word 0xbe0e38e4
.word 0x26
.word 0x29
.word 0xbf8c7ce1
.word 0x3e
.word 0x59
.word 0xbf747e90
.word 0x5e
.word 0x3b
.word 0xbf7ba938
.word 0x3f
.word 0x16
.word 0xc03a2e8c
.word 0x43
.word 0x3b
.word 0xbfac02d9
.word 0x50
.word 0x3f800026
.word 0xc01fffda
.word 0x3f800013
.word 0x3f800008
.word 0xc0100012
.word 0x3f800036
.word 0x3f800030
.word 0xc007ffd7
.word 0x3f800014
.word 0x3f800016
.word 0xc0040005
.word 0x3f800038
.word 0x3f800035
.word 0xc001ffd1
.word 0x3f80000e
.word 0x3f800011
.word 0xc0010017
.word 0x3f800051
.word 0x3f80005e
.word 0xc0007fc6
.word 0x3f800049
.word 0x3f80001b
.word 0xc0003fed
.word 0x3f800011
.word 0x3f800040
.word 0xc0001fd5
.word 0x3f80002b
.word 0x3f800052
.word 0xc0000fb0
.word 0x3f800005
.word 0x3f800013
.word 0xc00007f1
.word 0x3f800008
.word 0x3f800054
.word 0xc00003c7
.word 0x3f800036
.word 0x3f800021
.word 0xc00001fc
.word 0x3f80003b
.word 0x3f80004d
.word 0xc00000c9
.word 0x3f80002d
.word 0x3f80001f
.word 0xc0000090
.word 0x3f80005f
.word 0x3f800034
.word 0xc000000e
.word 0x3f800005
.word 0x3f80004d
.word 0xbfffffeb
.word 0x3f800045
.word 0x3f800007
.word 0xc000000e
.word 0x3f80000b
.word 0x3f800015
.word 0xc0000021
.word 0x3f80005d
.word 0x3f800028
.word 0xbffffff6
.word 0x3f80003e
.word 0x3f80005d
.word 0xbfffffa3
.word 0x3f800059
.word 0x3f800051
.word 0xbfffff74
.word 0x3f800014
.word 0x3f800017
.word 0xbfffffde
.word 0x3f80000b
.word 0x3f800029
.word 0x3effff0e
.word 0x3f800028
.word 0x3f800028
.word 0x3e7ffcf0
.word 0x3f800058
.word 0x3f800046
.word 0x3dfffeb4
.word 0x3f80000c
.word 0x3f800024
.word 0x3d7ff478
.word 0x3f80005a
.word 0x3f800013
.word 0x3cfff4da
.word 0x3f80002c
.word 0x3f80004f
.word 0x3c7fe7e2
.word 0x3f80002f
.word 0x3f80002c
.word 0x3bffbda8
.word 0x3f800042
.word 0x3f80000c
.word 0x3b7fc9e8
.word 0x3f80001b
.word 0x3f800005
.word 0x3aff1ff6
.word 0x3f800038
.word 0x3f800030
.word 0x3a7ecfa0
.word 0x3f800026
.word 0x3f80004c
.word 0x39f9ff6c
.word 0x3f800060
.word 0x3f80003c
.word 0x397e3f89
.word 0x3f80000e
.word 0x3f800044
.word 0x38f7bf7c
.word 0x3f800021
.word 0x3f800042
.word 0x3868ff88
.word 0x3f80002e
.word 0x3f80003c
.word 0x37d2ff9d
.word 0x3f80002d
.word 0x3f800061
.word 0x373fff6f
.word 0x3f800020
.word 0x3f80001a
.word 0x36bfffd9
.word 0x3f800010
.word 0x3f800018
.word 0xb6bfffdc
.word 0x3f800050
.word 0x3f800006
.word 0xb715fff9
.word 0x3f80005b
.word 0x3f800002
.word 0xb6c7fffd
.word 0x3f80003a
.word 0x3f800031
.word 0xb70dffca
.word 0x3f80004b
.word 0x3f800036
.word 0xb6b3ffb4
.word 0x3f80002f
.word 0x3f800003
.word 0xb70bfffd
.word 0x3f800047
.word 0x2e
.word 0xc7b216d3
.word 0x34
.word 0x3
.word 0xc92aacab
.word 0x60
.word 0x8
.word 0xc8000108
.word 0x21
.word 0x5b
.word 0xc5b40d46
.word 0x17
.word 0x3e
.word 0xc58428e7
.word 0x3d
.word 0x29
.word 0xc547d76a
.word 0x18
.word 0x3e
.word 0xc4844f7c
.word 0x5a
.word 0x2e
.word 0xc4324dea
.word 0x28
.word 0x9
.word 0xc4e41c72
.word 0x28
.word 0x5b
.word 0xc2b502d0
.word 0x2c
.word 0x4d
.word 0xc2594c78
.word 0x57
.word 0x4c
.word 0xc1d7af28
.word 0x1
.word 0x27
.word 0xc1e20d21
.word 0x4e
.word 0x9
.word 0xc276aaab
.word 0x2b
.word 0x13
.word 0xc17435e5
.word 0x22
.word 0x36
.word 0xc031c71c
.word 0x16
.word 0x3
.word 0xc2140000
.word 0x2f
.word 0x32
.word 0xbfb5c28f
.word 0x27
.word 0x59
.word 0xbef19e34
.word 0x1a
.word 0x1b
.word 0xbf97b426
.word 0x18
.word 0x57
.word 0xbf7a1d6d
.word 0x51
.word 0x1a
.word 0xc0313b14
.word 0x46
.word 0x26
.word 0xbf8d7943
.word 0x29
.word 0x16
.word 0x483a2e4c
.word 0x16
.word 0x1b
.word 0x4797b3a1
.word 0x1c
.word 0x1
.word 0x497ffff0
.word 0x1
.word 0x11
.word 0x46f0eef1
.word 0x11
.word 0x50
.word 0x454cc166
.word 0x39
.word 0x12
.word 0x45e36aab
.word 0x50
.word 0x62
.word 0x4427287d
.word 0xa
.word 0x32
.word 0x4423bc29
.word 0x15
.word 0x18
.word 0x4429a2ab
.word 0x63
.word 0x35
.word 0x4319e305
.word 0x24
.word 0x5e
.word 0x422d1b3c
.word 0x1c
.word 0x20
.word 0x427fc000
.word 0x2
.word 0xe
.word 0x4287b6db
.word 0x4a
.word 0x31
.word 0x41105398
.word 0x46
.word 0x3d
.word 0x406b0432
.word 0x20
.word 0xf
.word 0x40aaaaab
.word 0x30
.word 0x7
.word 0x40c49249
.word 0x15
.word 0x20
.word 0xbfd00000
.word 0x54
.word 0x4
.word 0xc1300000
.word 0x3c
.word 0x54
.word 0xbf36db6e
.word 0x44
.word 0x59
.word 0xbf82e05c
.word 0x5f
.word 0x5f
.word 0xbeed2308
.word 0x2e
.word 0x50
.word 0xbecccccd
.word 0x21
.word 0x7f000006
.word 0xc038001b
.word 0x7f000048
.word 0x7f000050
.word 0xc03bff98
.word 0x7f00001c
.word 0x7f000015
.word 0xc03dffe5
.word 0x7f000009
.word 0x7f000018
.word 0xc03efff6
.word 0x7f000035
.word 0x7f000039
.word 0xc03fbfb4
.word 0x7f000014
.word 0x7f000026
.word 0xc03fdff4
.word 0x7f00005b
.word 0x7f000053
.word 0xc03ff78b
.word 0x7f00000f
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_2:
    .fill 60*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
