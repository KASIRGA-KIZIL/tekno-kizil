
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.5.2
// timestamp : Tue Sep  7 16:08:04 2021 GMT
// usage     : riscv_ctg \
//                  -- cgf $cgf \
//                  -- xlen $xlen \
// -----------
//
// -----------
// Copyright (c) 2021. IIT Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V F extension for the fnmadd_b14 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b14)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1, rs1==f9, rs2==f13, rs3==f0, rd==f13, fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x0a and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f9; op2:f13; op3:f0; dest:f13; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x538bca8; valaddr_reg:x16; val_offset:0; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f9, f13, f0, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1:
// rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2, rs1==f25, rs2==f12, rs3==f14, rd==f25, fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0xdb and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f25; op2:f12; op3:f14; dest:f25; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x6db8bca8; valaddr_reg:x16; val_offset:12; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f25, f25, f12, f14, 0x0, 0, x16, 12, x17, x15, 8, x18)

inst_2:
// rs1 == rs2 == rd != rs3, rs1==f10, rs2==f10, rs3==f18, rd==f10, fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0xac and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f10; op3:f18; dest:f10; op1val:0x7f378efe; op2val:0x7f378efe; op3val:0x5638bca8; valaddr_reg:x16; val_offset:24; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f10, f10, f10, f18, 0x0, 0, x16, 24, x17, x15, 16, x18)

inst_3:
// rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd, rs1==f0, rs2==f17, rs3==f29, rd==f1, fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0xab and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f0; op2:f17; op3:f29; dest:f1; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x55b8bca8; valaddr_reg:x16; val_offset:36; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f1, f0, f17, f29, 0x0, 0, x16, 36, x17, x15, 24, x18)

inst_4:
// rd == rs2 == rs3 != rs1, rs1==f18, rs2==f21, rs3==f21, rd==f21, fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0xaa and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f18; op2:f21; op3:f21; dest:f21; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x7f35fb9d; valaddr_reg:x16; val_offset:48; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f21, f18, f21, f21, 0x0, 0, x16, 48, x17, x15, 32, x18)

inst_5:
// rs1 == rs2 == rs3 != rd, rs1==f28, rs2==f28, rs3==f28, rd==f24, fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f28; op2:f28; op3:f28; dest:f24; op1val:0x7f378efe; op2val:0x7f378efe; op3val:0x7f378efe; valaddr_reg:x16; val_offset:60; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f24, f28, f28, f28, 0x0, 0, x16, 60, x17, x15, 40, x18)

inst_6:
// rs1 == rs2 == rs3 == rd, rs1==f19, rs2==f19, rs3==f19, rd==f19, fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f19; op2:f19; op3:f19; dest:f19; op1val:0x7f378efe; op2val:0x7f378efe; op3val:0x7f378efe; valaddr_reg:x16; val_offset:72; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f19, f19, f19, f19, 0x0, 0, x16, 72, x17, x15, 48, x18)

inst_7:
// rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2, rs1==f6, rs2==f26, rs3==f6, rd==f31, fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0xa7 and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f6; op2:f26; op3:f6; dest:f31; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x7f378efe; valaddr_reg:x16; val_offset:84; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f31, f6, f26, f6, 0x0, 0, x16, 84, x17, x15, 56, x18)

inst_8:
// rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1, rs1==f23, rs2==f3, rs3==f3, rd==f16, fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0xa6 and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f23; op2:f3; op3:f3; dest:f16; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x7f35fb9d; valaddr_reg:x16; val_offset:96; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f16, f23, f3, f3, 0x0, 0, x16, 96, x17, x15, 64, x18)

inst_9:
// rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1, rs1==f13, rs2==f27, rs3==f30, rd==f30, fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0xa5 and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f13; op2:f27; op3:f30; dest:f30; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x52b8bca8; valaddr_reg:x16; val_offset:108; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f30, f13, f27, f30, 0x0, 0, x16, 108, x17, x15, 72, x18)

inst_10:
// rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3, rs1==f8, rs2==f8, rs3==f7, rd==f5, fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0xa4 and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f8; op2:f8; op3:f7; dest:f5; op1val:0x7f378efe; op2val:0x7f378efe; op3val:0x5238bca8; valaddr_reg:x16; val_offset:120; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f5, f8, f8, f7, 0x0, 0, x16, 120, x17, x15, 80, x18)

inst_11:
// rs1 == rd == rs3 != rs2, rs1==f12, rs2==f11, rs3==f12, rd==f12, fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0xa3 and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f12; op2:f11; op3:f12; dest:f12; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x7f378efe; valaddr_reg:x16; val_offset:132; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f12, f12, f11, f12, 0x0, 0, x16, 132, x17, x15, 88, x18)

inst_12:
// rs1==f4, rs2==f23, rs3==f8, rd==f7, fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0xa2 and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f4; op2:f23; op3:f8; dest:f7; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x5138bca8; valaddr_reg:x16; val_offset:144; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f7, f4, f23, f8, 0x0, 0, x16, 144, x17, x15, 96, x18)

inst_13:
// rs1==f21, rs2==f0, rs3==f16, rd==f4, fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0xa1 and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f21; op2:f0; op3:f16; dest:f4; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x50b8bca8; valaddr_reg:x16; val_offset:156; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f4, f21, f0, f16, 0x0, 0, x16, 156, x17, x15, 104, x18)

inst_14:
// rs1==f5, rs2==f14, rs3==f22, rd==f20, fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0xa0 and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f5; op2:f14; op3:f22; dest:f20; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x5038bca8; valaddr_reg:x16; val_offset:168; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f20, f5, f14, f22, 0x0, 0, x16, 168, x17, x15, 112, x18)

inst_15:
// rs1==f29, rs2==f15, rs3==f13, rd==f17, fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x9f and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f29; op2:f15; op3:f13; dest:f17; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x4fb8bca8; valaddr_reg:x16; val_offset:180; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f17, f29, f15, f13, 0x0, 0, x16, 180, x17, x15, 120, x18)

inst_16:
// rs1==f15, rs2==f25, rs3==f5, rd==f0, fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x9e and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f15; op2:f25; op3:f5; dest:f0; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x4f38bca8; valaddr_reg:x16; val_offset:192; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f0, f15, f25, f5, 0x0, 0, x16, 192, x17, x15, 128, x18)

inst_17:
// rs1==f30, rs2==f18, rs3==f25, rd==f6, fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x9d and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f30; op2:f18; op3:f25; dest:f6; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x4eb8bca8; valaddr_reg:x16; val_offset:204; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f6, f30, f18, f25, 0x0, 0, x16, 204, x17, x15, 136, x18)

inst_18:
// rs1==f31, rs2==f6, rs3==f23, rd==f29, fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x9c and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f31; op2:f6; op3:f23; dest:f29; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x4e38bca8; valaddr_reg:x16; val_offset:216; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f29, f31, f6, f23, 0x0, 0, x16, 216, x17, x15, 144, x18)

inst_19:
// rs1==f22, rs2==f5, rs3==f31, rd==f8, fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x9b and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f22; op2:f5; op3:f31; dest:f8; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x4db8bca8; valaddr_reg:x16; val_offset:228; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f8, f22, f5, f31, 0x0, 0, x16, 228, x17, x15, 152, x18)

inst_20:
// rs1==f11, rs2==f22, rs3==f2, rd==f27, fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x9a and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f11; op2:f22; op3:f2; dest:f27; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x4d38bca8; valaddr_reg:x16; val_offset:240; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f27, f11, f22, f2, 0x0, 0, x16, 240, x17, x15, 160, x18)

inst_21:
// rs1==f20, rs2==f16, rs3==f10, rd==f3, fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x99 and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f20; op2:f16; op3:f10; dest:f3; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x4cb8bca8; valaddr_reg:x16; val_offset:252; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f3, f20, f16, f10, 0x0, 0, x16, 252, x17, x15, 168, x18)

inst_22:
// rs1==f3, rs2==f2, rs3==f27, rd==f18, fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x98 and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f3; op2:f2; op3:f27; dest:f18; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x4c38bca8; valaddr_reg:x16; val_offset:264; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f18, f3, f2, f27, 0x0, 0, x16, 264, x17, x15, 176, x18)

inst_23:
// rs1==f26, rs2==f31, rs3==f11, rd==f2, fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x97 and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f26; op2:f31; op3:f11; dest:f2; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x4bb8bca8; valaddr_reg:x16; val_offset:276; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f2, f26, f31, f11, 0x0, 0, x16, 276, x17, x15, 184, x18)

inst_24:
// rs1==f1, rs2==f7, rs3==f9, rd==f11, fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x96 and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f1; op2:f7; op3:f9; dest:f11; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x4b38bca8; valaddr_reg:x16; val_offset:288; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f11, f1, f7, f9, 0x0, 0, x16, 288, x17, x15, 192, x18)

inst_25:
// rs1==f14, rs2==f30, rs3==f26, rd==f23, fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x95 and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f14; op2:f30; op3:f26; dest:f23; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x4ab8bca8; valaddr_reg:x16; val_offset:300; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f23, f14, f30, f26, 0x0, 0, x16, 300, x17, x15, 200, x18)

inst_26:
// rs1==f17, rs2==f29, rs3==f4, rd==f14, fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f17; op2:f29; op3:f4; dest:f14; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x4a38bca8; valaddr_reg:x16; val_offset:312; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f14, f17, f29, f4, 0x0, 0, x16, 312, x17, x15, 208, x18)

inst_27:
// rs1==f27, rs2==f4, rs3==f15, rd==f9, fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x93 and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f27; op2:f4; op3:f15; dest:f9; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x49b8bca8; valaddr_reg:x16; val_offset:324; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f9, f27, f4, f15, 0x0, 0, x16, 324, x17, x15, 216, x18)

inst_28:
// rs1==f7, rs2==f1, rs3==f24, rd==f15, fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x92 and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f7; op2:f1; op3:f24; dest:f15; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x4938bca8; valaddr_reg:x16; val_offset:336; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f15, f7, f1, f24, 0x0, 0, x16, 336, x17, x15, 224, x18)

inst_29:
// rs1==f2, rs2==f20, rs3==f1, rd==f22, fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x91 and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f2; op2:f20; op3:f1; dest:f22; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x48b8bca8; valaddr_reg:x16; val_offset:348; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f22, f2, f20, f1, 0x0, 0, x16, 348, x17, x15, 232, x18)

inst_30:
// rs1==f24, rs2==f9, rs3==f17, rd==f28, fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x90 and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f24; op2:f9; op3:f17; dest:f28; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x4838bca8; valaddr_reg:x16; val_offset:360; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f28, f24, f9, f17, 0x0, 0, x16, 360, x17, x15, 240, x18)

inst_31:
// rs1==f16, rs2==f24, rs3==f20, rd==f26, fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x8f and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f16; op2:f24; op3:f20; dest:f26; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x47b8bca8; valaddr_reg:x16; val_offset:372; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f26, f16, f24, f20, 0x0, 0, x16, 372, x17, x15, 248, x18)

inst_32:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x8e and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x4738bca8; valaddr_reg:x16; val_offset:384; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 384, x17, x15, 256, x18)

inst_33:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x8d and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x46b8bca8; valaddr_reg:x16; val_offset:396; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 396, x17, x15, 264, x18)

inst_34:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x8c and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x4638bca8; valaddr_reg:x16; val_offset:408; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 408, x17, x15, 272, x18)

inst_35:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x8b and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x45b8bca8; valaddr_reg:x16; val_offset:420; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 420, x17, x15, 280, x18)

inst_36:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x8a and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x4538bca8; valaddr_reg:x16; val_offset:432; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 432, x17, x15, 288, x18)

inst_37:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x89 and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x44b8bca8; valaddr_reg:x16; val_offset:444; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 444, x17, x15, 296, x18)

inst_38:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x88 and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x4438bca8; valaddr_reg:x16; val_offset:456; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 456, x17, x15, 304, x18)

inst_39:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x87 and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x43b8bca8; valaddr_reg:x16; val_offset:468; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 468, x17, x15, 312, x18)

inst_40:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x86 and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x4338bca8; valaddr_reg:x16; val_offset:480; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 480, x17, x15, 320, x18)

inst_41:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x85 and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x42b8bca8; valaddr_reg:x16; val_offset:492; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 492, x17, x15, 328, x18)

inst_42:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x84 and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x4238bca8; valaddr_reg:x16; val_offset:504; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 504, x17, x15, 336, x18)

inst_43:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x83 and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x41b8bca8; valaddr_reg:x16; val_offset:516; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 516, x17, x15, 344, x18)

inst_44:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x82 and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x4138bca8; valaddr_reg:x16; val_offset:528; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 528, x17, x15, 352, x18)

inst_45:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x81 and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x40b8bca8; valaddr_reg:x16; val_offset:540; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 540, x17, x15, 360, x18)

inst_46:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x80 and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x4038bca8; valaddr_reg:x16; val_offset:552; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 552, x17, x15, 368, x18)

inst_47:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x3fb8bca8; valaddr_reg:x16; val_offset:564; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 564, x17, x15, 376, x18)

inst_48:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x7e and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x3f38bca8; valaddr_reg:x16; val_offset:576; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 576, x17, x15, 384, x18)

inst_49:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x7d and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x3eb8bca8; valaddr_reg:x16; val_offset:588; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 588, x17, x15, 392, x18)

inst_50:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x7c and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x3e38bca8; valaddr_reg:x16; val_offset:600; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 600, x17, x15, 400, x18)

inst_51:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x7b and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x3db8bca8; valaddr_reg:x16; val_offset:612; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 612, x17, x15, 408, x18)

inst_52:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x7a and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x3d38bca8; valaddr_reg:x16; val_offset:624; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 624, x17, x15, 416, x18)

inst_53:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x79 and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x3cb8bca8; valaddr_reg:x16; val_offset:636; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 636, x17, x15, 424, x18)

inst_54:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x78 and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x3c38bca8; valaddr_reg:x16; val_offset:648; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 648, x17, x15, 432, x18)

inst_55:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x77 and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x3bb8bca8; valaddr_reg:x16; val_offset:660; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 660, x17, x15, 440, x18)

inst_56:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x76 and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x3b38bca8; valaddr_reg:x16; val_offset:672; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 672, x17, x15, 448, x18)

inst_57:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x75 and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x3ab8bca8; valaddr_reg:x16; val_offset:684; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 684, x17, x15, 456, x18)

inst_58:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x74 and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x3a38bca8; valaddr_reg:x16; val_offset:696; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 696, x17, x15, 464, x18)

inst_59:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x73 and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x39b8bca8; valaddr_reg:x16; val_offset:708; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 708, x17, x15, 472, x18)

inst_60:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x72 and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x3938bca8; valaddr_reg:x16; val_offset:720; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 720, x17, x15, 480, x18)

inst_61:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x71 and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x38b8bca8; valaddr_reg:x16; val_offset:732; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 732, x17, x15, 488, x18)

inst_62:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x70 and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x3838bca8; valaddr_reg:x16; val_offset:744; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 744, x17, x15, 496, x18)

inst_63:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x6f and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x37b8bca8; valaddr_reg:x16; val_offset:756; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 756, x17, x15, 504, x18)

inst_64:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x6e and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x3738bca8; valaddr_reg:x16; val_offset:768; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 768, x17, x15, 512, x18)

inst_65:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x6d and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x36b8bca8; valaddr_reg:x16; val_offset:780; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 780, x17, x15, 520, x18)

inst_66:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x6c and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x3638bca8; valaddr_reg:x16; val_offset:792; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 792, x17, x15, 528, x18)

inst_67:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x6b and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x35b8bca8; valaddr_reg:x16; val_offset:804; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 804, x17, x15, 536, x18)

inst_68:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x6a and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x3538bca8; valaddr_reg:x16; val_offset:816; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 816, x17, x15, 544, x18)

inst_69:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x69 and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x34b8bca8; valaddr_reg:x16; val_offset:828; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 828, x17, x15, 552, x18)

inst_70:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x68 and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x3438bca8; valaddr_reg:x16; val_offset:840; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 840, x17, x15, 560, x18)

inst_71:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x67 and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x33b8bca8; valaddr_reg:x16; val_offset:852; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 852, x17, x15, 568, x18)

inst_72:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0x66 and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x3338bca8; valaddr_reg:x16; val_offset:864; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 864, x17, x15, 576, x18)

inst_73:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0xac and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x5638bca8; valaddr_reg:x16; val_offset:876; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 876, x17, x15, 584, x18)

inst_74:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0xaa and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x5538bca8; valaddr_reg:x16; val_offset:888; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 888, x17, x15, 592, x18)

inst_75:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x54b8bca8; valaddr_reg:x16; val_offset:900; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 900, x17, x15, 600, x18)

inst_76:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x5438bca8; valaddr_reg:x16; val_offset:912; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 912, x17, x15, 608, x18)

inst_77:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0xa7 and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x53b8bca8; valaddr_reg:x16; val_offset:924; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 924, x17, x15, 616, x18)

inst_78:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0xa6 and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x5338bca8; valaddr_reg:x16; val_offset:936; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 936, x17, x15, 624, x18)

inst_79:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0xa4 and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x5238bca8; valaddr_reg:x16; val_offset:948; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 948, x17, x15, 632, x18)

inst_80:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 0 and fe3 == 0xa3 and fm3 == 0x38bca8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0x51b8bca8; valaddr_reg:x16; val_offset:960; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 960, x17, x15, 640, x18)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
test_fp:
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x538bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x6db8bca8
.word 0x7f378efe
.word 0x7f378efe
.word 0x5638bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x55b8bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x7f35fb9d
.word 0x7f378efe
.word 0x7f378efe
.word 0x7f378efe
.word 0x7f378efe
.word 0x7f378efe
.word 0x7f378efe
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x7f378efe
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x7f35fb9d
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x52b8bca8
.word 0x7f378efe
.word 0x7f378efe
.word 0x5238bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x7f378efe
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x5138bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x50b8bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x5038bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x4fb8bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x4f38bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x4eb8bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x4e38bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x4db8bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x4d38bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x4cb8bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x4c38bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x4bb8bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x4b38bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x4ab8bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x4a38bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x49b8bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x4938bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x48b8bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x4838bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x47b8bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x4738bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x46b8bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x4638bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x45b8bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x4538bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x44b8bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x4438bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x43b8bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x4338bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x42b8bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x4238bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x41b8bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x4138bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x40b8bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x4038bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x3fb8bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x3f38bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x3eb8bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x3e38bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x3db8bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x3d38bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x3cb8bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x3c38bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x3bb8bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x3b38bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x3ab8bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x3a38bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x39b8bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x3938bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x38b8bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x3838bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x37b8bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x3738bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x36b8bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x3638bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x35b8bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x3538bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x34b8bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x3438bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x33b8bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x3338bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x5638bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x5538bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x54b8bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x5438bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x53b8bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x5338bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x5238bca8
.word 0x7f378efe
.word 0x7f35fb9d
.word 0x51b8bca8
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 162*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
