
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.5.2
// timestamp : Tue Sep  7 17:27:01 2021 GMT
// usage     : riscv_ctg \
//                  -- cgf $cgf \
//                  -- xlen $xlen \
// -----------
//
// -----------
// Copyright (c) 2021. IIT Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmul.s instruction of the RISC-V F extension for the fmul_b4 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmul_b4)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs1 == rs2 == rd, rs1==f22, rs2==f22, rd==f22, fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0x7f and fm2 == 0x05e2ec and rm_val == 0  
// opcode: fmul.s ; op1:f22; op2:f22; dest:f22; op1val:0x7f378efe; op2val:0x7f378efe; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f22, f22, f22, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==f23, rs2==f2, rd==f29, fs1 == 0 and fe1 == 0xfd and fm1 == 0x07e829 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x34d465 and rm_val == 4  
// opcode: fmul.s ; op1:f23; op2:f2; dest:f29; op1val:0x7e87e829; op2val:0xc1b4d465; valaddr_reg:x16; val_offset:8; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f29, f23, f2, 0x4, 0, x16, 8, x17, x15, 8, x18)

inst_2:
// rs1 == rs2 != rd, rs1==f25, rs2==f25, rd==f15, fs1 == 0 and fe1 == 0xfd and fm1 == 0x07e829 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x34d465 and rm_val == 3  
// opcode: fmul.s ; op1:f25; op2:f25; dest:f15; op1val:0x7e87e829; op2val:0x7e87e829; valaddr_reg:x16; val_offset:16; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f15, f25, f25, 0x3, 0, x16, 16, x17, x15, 16, x18)

inst_3:
// rs1 == rd != rs2, rs1==f19, rs2==f17, rd==f19, fs1 == 0 and fe1 == 0xfd and fm1 == 0x07e829 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x34d465 and rm_val == 2  
// opcode: fmul.s ; op1:f19; op2:f17; dest:f19; op1val:0x7e87e829; op2val:0xc1b4d465; valaddr_reg:x16; val_offset:24; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f19, f19, f17, 0x2, 0, x16, 24, x17, x15, 24, x18)

inst_4:
// rs2 == rd != rs1, rs1==f31, rs2==f16, rd==f16, fs1 == 0 and fe1 == 0xfd and fm1 == 0x07e829 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x34d465 and rm_val == 1  
// opcode: fmul.s ; op1:f31; op2:f16; dest:f16; op1val:0x7e87e829; op2val:0xc1b4d465; valaddr_reg:x16; val_offset:32; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f16, f31, f16, 0x1, 0, x16, 32, x17, x15, 32, x18)

inst_5:
// rs1==f16, rs2==f23, rd==f14, fs1 == 0 and fe1 == 0xfd and fm1 == 0x07e829 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x34d465 and rm_val == 0  
// opcode: fmul.s ; op1:f16; op2:f23; dest:f14; op1val:0x7e87e829; op2val:0xc1b4d465; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f14, f16, f23, 0x0, 0, x16, 40, x17, x15, 40, x18)

inst_6:
// rs1==f24, rs2==f6, rd==f17, fs1 == 0 and fe1 == 0xfd and fm1 == 0x4052ad and fs2 == 0 and fe2 == 0x82 and fm2 == 0x7f91f2 and rm_val == 4  
// opcode: fmul.s ; op1:f24; op2:f6; dest:f17; op1val:0x7ec052ad; op2val:0x417f91f2; valaddr_reg:x16; val_offset:48; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f17, f24, f6, 0x4, 0, x16, 48, x17, x15, 48, x18)

inst_7:
// rs1==f13, rs2==f20, rd==f9, fs1 == 0 and fe1 == 0xfd and fm1 == 0x4052ad and fs2 == 0 and fe2 == 0x82 and fm2 == 0x7f91f2 and rm_val == 3  
// opcode: fmul.s ; op1:f13; op2:f20; dest:f9; op1val:0x7ec052ad; op2val:0x417f91f2; valaddr_reg:x16; val_offset:56; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f9, f13, f20, 0x3, 0, x16, 56, x17, x15, 56, x18)

inst_8:
// rs1==f21, rs2==f3, rd==f5, fs1 == 0 and fe1 == 0xfd and fm1 == 0x4052ad and fs2 == 0 and fe2 == 0x82 and fm2 == 0x7f91f2 and rm_val == 2  
// opcode: fmul.s ; op1:f21; op2:f3; dest:f5; op1val:0x7ec052ad; op2val:0x417f91f2; valaddr_reg:x16; val_offset:64; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f5, f21, f3, 0x2, 0, x16, 64, x17, x15, 64, x18)

inst_9:
// rs1==f8, rs2==f31, rd==f13, fs1 == 0 and fe1 == 0xfd and fm1 == 0x4052ad and fs2 == 0 and fe2 == 0x82 and fm2 == 0x7f91f2 and rm_val == 1  
// opcode: fmul.s ; op1:f8; op2:f31; dest:f13; op1val:0x7ec052ad; op2val:0x417f91f2; valaddr_reg:x16; val_offset:72; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f13, f8, f31, 0x1, 0, x16, 72, x17, x15, 72, x18)

inst_10:
// rs1==f17, rs2==f8, rd==f2, fs1 == 0 and fe1 == 0xfd and fm1 == 0x4052ad and fs2 == 0 and fe2 == 0x82 and fm2 == 0x7f91f2 and rm_val == 0  
// opcode: fmul.s ; op1:f17; op2:f8; dest:f2; op1val:0x7ec052ad; op2val:0x417f91f2; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f2, f17, f8, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_11:
// rs1==f28, rs2==f27, rd==f23, fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2a53 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x029bc8 and rm_val == 4  
// opcode: fmul.s ; op1:f28; op2:f27; dest:f23; op1val:0x7ebc2a53; op2val:0xc1029bc8; valaddr_reg:x16; val_offset:88; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f23, f28, f27, 0x4, 0, x16, 88, x17, x15, 88, x18)

inst_12:
// rs1==f10, rs2==f1, rd==f28, fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2a53 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x029bc8 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f1; dest:f28; op1val:0x7ebc2a53; op2val:0xc1029bc8; valaddr_reg:x16; val_offset:96; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f28, f10, f1, 0x3, 0, x16, 96, x17, x15, 96, x18)

inst_13:
// rs1==f11, rs2==f0, rd==f27, fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2a53 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x029bc8 and rm_val == 2  
// opcode: fmul.s ; op1:f11; op2:f0; dest:f27; op1val:0x7ebc2a53; op2val:0xc1029bc8; valaddr_reg:x16; val_offset:104; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f27, f11, f0, 0x2, 0, x16, 104, x17, x15, 104, x18)

inst_14:
// rs1==f1, rs2==f29, rd==f0, fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2a53 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x029bc8 and rm_val == 1  
// opcode: fmul.s ; op1:f1; op2:f29; dest:f0; op1val:0x7ebc2a53; op2val:0xc1029bc8; valaddr_reg:x16; val_offset:112; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f0, f1, f29, 0x1, 0, x16, 112, x17, x15, 112, x18)

inst_15:
// rs1==f29, rs2==f4, rd==f10, fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2a53 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x029bc8 and rm_val == 0  
// opcode: fmul.s ; op1:f29; op2:f4; dest:f10; op1val:0x7ebc2a53; op2val:0xc1029bc8; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f10, f29, f4, 0x0, 0, x16, 120, x17, x15, 120, x18)

inst_16:
// rs1==f18, rs2==f7, rd==f12, fs1 == 0 and fe1 == 0xfd and fm1 == 0x312e1f and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0ab4cd and rm_val == 4  
// opcode: fmul.s ; op1:f18; op2:f7; dest:f12; op1val:0x7eb12e1f; op2val:0x410ab4cd; valaddr_reg:x16; val_offset:128; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f18, f7, 0x4, 0, x16, 128, x17, x15, 128, x18)

inst_17:
// rs1==f30, rs2==f18, rd==f20, fs1 == 0 and fe1 == 0xfd and fm1 == 0x312e1f and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0ab4cd and rm_val == 3  
// opcode: fmul.s ; op1:f30; op2:f18; dest:f20; op1val:0x7eb12e1f; op2val:0x410ab4cd; valaddr_reg:x16; val_offset:136; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f20, f30, f18, 0x3, 0, x16, 136, x17, x15, 136, x18)

inst_18:
// rs1==f27, rs2==f21, rd==f24, fs1 == 0 and fe1 == 0xfd and fm1 == 0x312e1f and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0ab4cd and rm_val == 2  
// opcode: fmul.s ; op1:f27; op2:f21; dest:f24; op1val:0x7eb12e1f; op2val:0x410ab4cd; valaddr_reg:x16; val_offset:144; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f24, f27, f21, 0x2, 0, x16, 144, x17, x15, 144, x18)

inst_19:
// rs1==f4, rs2==f28, rd==f31, fs1 == 0 and fe1 == 0xfd and fm1 == 0x312e1f and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0ab4cd and rm_val == 1  
// opcode: fmul.s ; op1:f4; op2:f28; dest:f31; op1val:0x7eb12e1f; op2val:0x410ab4cd; valaddr_reg:x16; val_offset:152; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f31, f4, f28, 0x1, 0, x16, 152, x17, x15, 152, x18)

inst_20:
// rs1==f9, rs2==f5, rd==f8, fs1 == 0 and fe1 == 0xfd and fm1 == 0x312e1f and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0ab4cd and rm_val == 0  
// opcode: fmul.s ; op1:f9; op2:f5; dest:f8; op1val:0x7eb12e1f; op2val:0x410ab4cd; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f8, f9, f5, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_21:
// rs1==f6, rs2==f10, rd==f1, fs1 == 0 and fe1 == 0xfe and fm1 == 0x10c4ce and fs2 == 1 and fe2 == 0x80 and fm2 == 0x29c2a6 and rm_val == 4  
// opcode: fmul.s ; op1:f6; op2:f10; dest:f1; op1val:0x7f10c4ce; op2val:0xc029c2a6; valaddr_reg:x16; val_offset:168; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f1, f6, f10, 0x4, 0, x16, 168, x17, x15, 168, x18)

inst_22:
// rs1==f12, rs2==f14, rd==f4, fs1 == 0 and fe1 == 0xfe and fm1 == 0x10c4ce and fs2 == 1 and fe2 == 0x80 and fm2 == 0x29c2a6 and rm_val == 3  
// opcode: fmul.s ; op1:f12; op2:f14; dest:f4; op1val:0x7f10c4ce; op2val:0xc029c2a6; valaddr_reg:x16; val_offset:176; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f4, f12, f14, 0x3, 0, x16, 176, x17, x15, 176, x18)

inst_23:
// rs1==f7, rs2==f24, rd==f6, fs1 == 0 and fe1 == 0xfe and fm1 == 0x10c4ce and fs2 == 1 and fe2 == 0x80 and fm2 == 0x29c2a6 and rm_val == 2  
// opcode: fmul.s ; op1:f7; op2:f24; dest:f6; op1val:0x7f10c4ce; op2val:0xc029c2a6; valaddr_reg:x16; val_offset:184; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f6, f7, f24, 0x2, 0, x16, 184, x17, x15, 184, x18)

inst_24:
// rs1==f15, rs2==f9, rd==f25, fs1 == 0 and fe1 == 0xfe and fm1 == 0x10c4ce and fs2 == 1 and fe2 == 0x80 and fm2 == 0x29c2a6 and rm_val == 1  
// opcode: fmul.s ; op1:f15; op2:f9; dest:f25; op1val:0x7f10c4ce; op2val:0xc029c2a6; valaddr_reg:x16; val_offset:192; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f25, f15, f9, 0x1, 0, x16, 192, x17, x15, 192, x18)

inst_25:
// rs1==f26, rs2==f30, rd==f3, fs1 == 0 and fe1 == 0xfe and fm1 == 0x10c4ce and fs2 == 1 and fe2 == 0x80 and fm2 == 0x29c2a6 and rm_val == 0  
// opcode: fmul.s ; op1:f26; op2:f30; dest:f3; op1val:0x7f10c4ce; op2val:0xc029c2a6; valaddr_reg:x16; val_offset:200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f3, f26, f30, 0x0, 0, x16, 200, x17, x15, 200, x18)

inst_26:
// rs1==f0, rs2==f26, rd==f21, fs1 == 0 and fe1 == 0xfe and fm1 == 0x38af5a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0511e0 and rm_val == 4  
// opcode: fmul.s ; op1:f0; op2:f26; dest:f21; op1val:0x7f38af5a; op2val:0x400511e0; valaddr_reg:x16; val_offset:208; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f21, f0, f26, 0x4, 0, x16, 208, x17, x15, 208, x18)

inst_27:
// rs1==f5, rs2==f19, rd==f18, fs1 == 0 and fe1 == 0xfe and fm1 == 0x38af5a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0511e0 and rm_val == 3  
// opcode: fmul.s ; op1:f5; op2:f19; dest:f18; op1val:0x7f38af5a; op2val:0x400511e0; valaddr_reg:x16; val_offset:216; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f18, f5, f19, 0x3, 0, x16, 216, x17, x15, 216, x18)

inst_28:
// rs1==f14, rs2==f13, rd==f26, fs1 == 0 and fe1 == 0xfe and fm1 == 0x38af5a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0511e0 and rm_val == 2  
// opcode: fmul.s ; op1:f14; op2:f13; dest:f26; op1val:0x7f38af5a; op2val:0x400511e0; valaddr_reg:x16; val_offset:224; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f26, f14, f13, 0x2, 0, x16, 224, x17, x15, 224, x18)

inst_29:
// rs1==f2, rs2==f12, rd==f7, fs1 == 0 and fe1 == 0xfe and fm1 == 0x38af5a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0511e0 and rm_val == 1  
// opcode: fmul.s ; op1:f2; op2:f12; dest:f7; op1val:0x7f38af5a; op2val:0x400511e0; valaddr_reg:x16; val_offset:232; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f7, f2, f12, 0x1, 0, x16, 232, x17, x15, 232, x18)

inst_30:
// rs1==f3, rs2==f11, rd==f30, fs1 == 0 and fe1 == 0xfe and fm1 == 0x38af5a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0511e0 and rm_val == 0  
// opcode: fmul.s ; op1:f3; op2:f11; dest:f30; op1val:0x7f38af5a; op2val:0x400511e0; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f30, f3, f11, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_31:
// rs1==f20, rs2==f15, rd==f11, fs1 == 0 and fe1 == 0xfd and fm1 == 0x07daac and fs2 == 1 and fe2 == 0x80 and fm2 == 0x34e65a and rm_val == 4  
// opcode: fmul.s ; op1:f20; op2:f15; dest:f11; op1val:0x7e87daac; op2val:0xc034e65a; valaddr_reg:x16; val_offset:248; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f11, f20, f15, 0x4, 0, x16, 248, x17, x15, 248, x18)

inst_32:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07daac and fs2 == 1 and fe2 == 0x80 and fm2 == 0x34e65a and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e87daac; op2val:0xc034e65a; valaddr_reg:x16; val_offset:256; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 256, x17, x15, 256, x18)

inst_33:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07daac and fs2 == 1 and fe2 == 0x80 and fm2 == 0x34e65a and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e87daac; op2val:0xc034e65a; valaddr_reg:x16; val_offset:264; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 264, x17, x15, 264, x18)

inst_34:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07daac and fs2 == 1 and fe2 == 0x80 and fm2 == 0x34e65a and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e87daac; op2val:0xc034e65a; valaddr_reg:x16; val_offset:272; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 272, x17, x15, 272, x18)

inst_35:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07daac and fs2 == 1 and fe2 == 0x80 and fm2 == 0x34e65a and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e87daac; op2val:0xc034e65a; valaddr_reg:x16; val_offset:280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 280, x17, x15, 280, x18)

inst_36:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x127958 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x27c8b6 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f127958; op2val:0x3fa7c8b6; valaddr_reg:x16; val_offset:288; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 288, x17, x15, 288, x18)

inst_37:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x127958 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x27c8b6 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f127958; op2val:0x3fa7c8b6; valaddr_reg:x16; val_offset:296; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 296, x17, x15, 296, x18)

inst_38:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x127958 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x27c8b6 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f127958; op2val:0x3fa7c8b6; valaddr_reg:x16; val_offset:304; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 304, x17, x15, 304, x18)

inst_39:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x127958 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x27c8b6 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f127958; op2val:0x3fa7c8b6; valaddr_reg:x16; val_offset:312; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 312, x17, x15, 312, x18)

inst_40:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x127958 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x27c8b6 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f127958; op2val:0x3fa7c8b6; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_41:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d014f and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2e4aa1 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0d014f; op2val:0xbf2e4aa1; valaddr_reg:x16; val_offset:328; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 328, x17, x15, 328, x18)

inst_42:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d014f and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2e4aa1 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0d014f; op2val:0xbf2e4aa1; valaddr_reg:x16; val_offset:336; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 336, x17, x15, 336, x18)

inst_43:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d014f and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2e4aa1 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0d014f; op2val:0xbf2e4aa1; valaddr_reg:x16; val_offset:344; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 344, x17, x15, 344, x18)

inst_44:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d014f and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2e4aa1 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0d014f; op2val:0xbf2e4aa1; valaddr_reg:x16; val_offset:352; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 352, x17, x15, 352, x18)

inst_45:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d014f and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2e4aa1 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0d014f; op2val:0xbf2e4aa1; valaddr_reg:x16; val_offset:360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 360, x17, x15, 360, x18)

inst_46:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b90d3 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0f3ed1 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2b90d3; op2val:0x3f0f3ed1; valaddr_reg:x16; val_offset:368; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 368, x17, x15, 368, x18)

inst_47:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b90d3 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0f3ed1 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2b90d3; op2val:0x3f0f3ed1; valaddr_reg:x16; val_offset:376; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 376, x17, x15, 376, x18)

inst_48:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b90d3 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0f3ed1 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2b90d3; op2val:0x3f0f3ed1; valaddr_reg:x16; val_offset:384; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 384, x17, x15, 384, x18)

inst_49:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b90d3 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0f3ed1 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2b90d3; op2val:0x3f0f3ed1; valaddr_reg:x16; val_offset:392; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 392, x17, x15, 392, x18)

inst_50:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b90d3 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0f3ed1 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2b90d3; op2val:0x3f0f3ed1; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_51:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3dc6a1 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f018006; op2val:0xbebdc6a1; valaddr_reg:x16; val_offset:408; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 408, x17, x15, 408, x18)

inst_52:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3dc6a1 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f018006; op2val:0xbebdc6a1; valaddr_reg:x16; val_offset:416; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 416, x17, x15, 416, x18)

inst_53:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3dc6a1 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f018006; op2val:0xbebdc6a1; valaddr_reg:x16; val_offset:424; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 424, x17, x15, 424, x18)

inst_54:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3dc6a1 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f018006; op2val:0xbebdc6a1; valaddr_reg:x16; val_offset:432; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 432, x17, x15, 432, x18)

inst_55:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3dc6a1 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f018006; op2val:0xbebdc6a1; valaddr_reg:x16; val_offset:440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 440, x17, x15, 440, x18)

inst_56:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43ed0a and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7adeca and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec3ed0a; op2val:0x3efadeca; valaddr_reg:x16; val_offset:448; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 448, x17, x15, 448, x18)

inst_57:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43ed0a and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7adeca and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec3ed0a; op2val:0x3efadeca; valaddr_reg:x16; val_offset:456; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 456, x17, x15, 456, x18)

inst_58:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43ed0a and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7adeca and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec3ed0a; op2val:0x3efadeca; valaddr_reg:x16; val_offset:464; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 464, x17, x15, 464, x18)

inst_59:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43ed0a and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7adeca and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec3ed0a; op2val:0x3efadeca; valaddr_reg:x16; val_offset:472; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 472, x17, x15, 472, x18)

inst_60:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43ed0a and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7adeca and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec3ed0a; op2val:0x3efadeca; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_61:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x44d625 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e79b5b2; op2val:0xbec4d625; valaddr_reg:x16; val_offset:488; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 488, x17, x15, 488, x18)

inst_62:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x44d625 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e79b5b2; op2val:0xbec4d625; valaddr_reg:x16; val_offset:496; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 496, x17, x15, 496, x18)

inst_63:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x44d625 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e79b5b2; op2val:0xbec4d625; valaddr_reg:x16; val_offset:504; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 504, x17, x15, 504, x18)

inst_64:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x44d625 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e79b5b2; op2val:0xbec4d625; valaddr_reg:x16; val_offset:512; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 512, x17, x15, 512, x18)

inst_65:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x44d625 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e79b5b2; op2val:0xbec4d625; valaddr_reg:x16; val_offset:520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 520, x17, x15, 520, x18)

inst_66:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3557bf and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0785b9 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e3557bf; op2val:0x3f0785b9; valaddr_reg:x16; val_offset:528; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 528, x17, x15, 528, x18)

inst_67:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3557bf and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0785b9 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e3557bf; op2val:0x3f0785b9; valaddr_reg:x16; val_offset:536; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 536, x17, x15, 536, x18)

inst_68:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3557bf and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0785b9 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e3557bf; op2val:0x3f0785b9; valaddr_reg:x16; val_offset:544; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 544, x17, x15, 544, x18)

inst_69:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3557bf and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0785b9 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e3557bf; op2val:0x3f0785b9; valaddr_reg:x16; val_offset:552; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 552, x17, x15, 552, x18)

inst_70:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3557bf and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0785b9 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e3557bf; op2val:0x3f0785b9; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_71:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e399 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7375de and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec9e399; op2val:0x3ff375de; valaddr_reg:x16; val_offset:568; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 568, x17, x15, 568, x18)

inst_72:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e399 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7375de and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec9e399; op2val:0x3ff375de; valaddr_reg:x16; val_offset:576; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 576, x17, x15, 576, x18)

inst_73:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e399 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7375de and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec9e399; op2val:0x3ff375de; valaddr_reg:x16; val_offset:584; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 584, x17, x15, 584, x18)

inst_74:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e399 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7375de and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec9e399; op2val:0x3ff375de; valaddr_reg:x16; val_offset:592; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 592, x17, x15, 592, x18)

inst_75:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e399 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7375de and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec9e399; op2val:0x3ff375de; valaddr_reg:x16; val_offset:600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 600, x17, x15, 600, x18)

inst_76:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11ecfc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x286a18 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e91ecfc; op2val:0x40286a18; valaddr_reg:x16; val_offset:608; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 608, x17, x15, 608, x18)

inst_77:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11ecfc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x286a18 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e91ecfc; op2val:0x40286a18; valaddr_reg:x16; val_offset:616; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 616, x17, x15, 616, x18)

inst_78:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11ecfc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x286a18 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e91ecfc; op2val:0x40286a18; valaddr_reg:x16; val_offset:624; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 624, x17, x15, 624, x18)

inst_79:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11ecfc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x286a18 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e91ecfc; op2val:0x40286a18; valaddr_reg:x16; val_offset:632; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 632, x17, x15, 632, x18)

inst_80:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11ecfc and fs2 == 0 and fe2 == 0x80 and fm2 == 0x286a18 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e91ecfc; op2val:0x40286a18; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_81:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3284ec and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09aa73 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eb284ec; op2val:0x4009aa73; valaddr_reg:x16; val_offset:648; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 648, x17, x15, 648, x18)

inst_82:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3284ec and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09aa73 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eb284ec; op2val:0x4009aa73; valaddr_reg:x16; val_offset:656; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 656, x17, x15, 656, x18)

inst_83:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3284ec and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09aa73 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eb284ec; op2val:0x4009aa73; valaddr_reg:x16; val_offset:664; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 664, x17, x15, 664, x18)

inst_84:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3284ec and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09aa73 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eb284ec; op2val:0x4009aa73; valaddr_reg:x16; val_offset:672; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 672, x17, x15, 672, x18)

inst_85:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3284ec and fs2 == 0 and fe2 == 0x80 and fm2 == 0x09aa73 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eb284ec; op2val:0x4009aa73; valaddr_reg:x16; val_offset:680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 680, x17, x15, 680, x18)

inst_86:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x5cb815 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x5eb0b8 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7cdcb815; op2val:0x41deb0b8; valaddr_reg:x16; val_offset:688; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 688, x17, x15, 688, x18)

inst_87:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x5cb815 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x5eb0b8 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7cdcb815; op2val:0x41deb0b8; valaddr_reg:x16; val_offset:696; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 696, x17, x15, 696, x18)

inst_88:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x5cb815 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x5eb0b8 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7cdcb815; op2val:0x41deb0b8; valaddr_reg:x16; val_offset:704; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 704, x17, x15, 704, x18)

inst_89:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x5cb815 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x5eb0b8 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7cdcb815; op2val:0x41deb0b8; valaddr_reg:x16; val_offset:712; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 712, x17, x15, 712, x18)

inst_90:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x5cb815 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x5eb0b8 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7cdcb815; op2val:0x41deb0b8; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_91:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad2f1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0fde0b and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eaad2f1; op2val:0x400fde0b; valaddr_reg:x16; val_offset:728; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 728, x17, x15, 728, x18)

inst_92:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad2f1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0fde0b and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eaad2f1; op2val:0x400fde0b; valaddr_reg:x16; val_offset:736; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 736, x17, x15, 736, x18)

inst_93:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad2f1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0fde0b and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eaad2f1; op2val:0x400fde0b; valaddr_reg:x16; val_offset:744; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 744, x17, x15, 744, x18)

inst_94:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad2f1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0fde0b and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eaad2f1; op2val:0x400fde0b; valaddr_reg:x16; val_offset:752; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 752, x17, x15, 752, x18)

inst_95:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad2f1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0fde0b and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eaad2f1; op2val:0x400fde0b; valaddr_reg:x16; val_offset:760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 760, x17, x15, 760, x18)

inst_96:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3648af and fs2 == 0 and fe2 == 0x7f and fm2 == 0x06d298 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3648af; op2val:0x3f86d298; valaddr_reg:x16; val_offset:768; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 768, x17, x15, 768, x18)

inst_97:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3648af and fs2 == 0 and fe2 == 0x7f and fm2 == 0x06d298 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3648af; op2val:0x3f86d298; valaddr_reg:x16; val_offset:776; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 776, x17, x15, 776, x18)

inst_98:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3648af and fs2 == 0 and fe2 == 0x7f and fm2 == 0x06d298 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3648af; op2val:0x3f86d298; valaddr_reg:x16; val_offset:784; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 784, x17, x15, 784, x18)

inst_99:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3648af and fs2 == 0 and fe2 == 0x7f and fm2 == 0x06d298 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3648af; op2val:0x3f86d298; valaddr_reg:x16; val_offset:792; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 792, x17, x15, 792, x18)

inst_100:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3648af and fs2 == 0 and fe2 == 0x7f and fm2 == 0x06d298 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3648af; op2val:0x3f86d298; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_101:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ad17d and fs2 == 0 and fe2 == 0x7f and fm2 == 0x310982 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0ad17d; op2val:0x3fb10982; valaddr_reg:x16; val_offset:808; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 808, x17, x15, 808, x18)

inst_102:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ad17d and fs2 == 0 and fe2 == 0x7f and fm2 == 0x310982 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0ad17d; op2val:0x3fb10982; valaddr_reg:x16; val_offset:816; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 816, x17, x15, 816, x18)

inst_103:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ad17d and fs2 == 0 and fe2 == 0x7f and fm2 == 0x310982 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0ad17d; op2val:0x3fb10982; valaddr_reg:x16; val_offset:824; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 824, x17, x15, 824, x18)

inst_104:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ad17d and fs2 == 0 and fe2 == 0x7f and fm2 == 0x310982 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0ad17d; op2val:0x3fb10982; valaddr_reg:x16; val_offset:832; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 832, x17, x15, 832, x18)

inst_105:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ad17d and fs2 == 0 and fe2 == 0x7f and fm2 == 0x310982 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0ad17d; op2val:0x3fb10982; valaddr_reg:x16; val_offset:840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 840, x17, x15, 840, x18)

inst_106:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25608b and fs2 == 0 and fe2 == 0x80 and fm2 == 0x149b14 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ea5608b; op2val:0x40149b14; valaddr_reg:x16; val_offset:848; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 848, x17, x15, 848, x18)

inst_107:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25608b and fs2 == 0 and fe2 == 0x80 and fm2 == 0x149b14 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ea5608b; op2val:0x40149b14; valaddr_reg:x16; val_offset:856; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 856, x17, x15, 856, x18)

inst_108:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25608b and fs2 == 0 and fe2 == 0x80 and fm2 == 0x149b14 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ea5608b; op2val:0x40149b14; valaddr_reg:x16; val_offset:864; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 864, x17, x15, 864, x18)

inst_109:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25608b and fs2 == 0 and fe2 == 0x80 and fm2 == 0x149b14 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ea5608b; op2val:0x40149b14; valaddr_reg:x16; val_offset:872; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 872, x17, x15, 872, x18)

inst_110:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25608b and fs2 == 0 and fe2 == 0x80 and fm2 == 0x149b14 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ea5608b; op2val:0x40149b14; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 880, x17, x15, 880, x18)

inst_111:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5f2ead and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5c3b83 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7edf2ead; op2val:0x3fdc3b83; valaddr_reg:x16; val_offset:888; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 888, x17, x15, 888, x18)

inst_112:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5f2ead and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5c3b83 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7edf2ead; op2val:0x3fdc3b83; valaddr_reg:x16; val_offset:896; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 896, x17, x15, 896, x18)

inst_113:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5f2ead and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5c3b83 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7edf2ead; op2val:0x3fdc3b83; valaddr_reg:x16; val_offset:904; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 904, x17, x15, 904, x18)

inst_114:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5f2ead and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5c3b83 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7edf2ead; op2val:0x3fdc3b83; valaddr_reg:x16; val_offset:912; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 912, x17, x15, 912, x18)

inst_115:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5f2ead and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5c3b83 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7edf2ead; op2val:0x3fdc3b83; valaddr_reg:x16; val_offset:920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 920, x17, x15, 920, x18)

inst_116:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68aebb and fs2 == 0 and fe2 == 0x7f and fm2 == 0x533d97 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ee8aebb; op2val:0x3fd33d97; valaddr_reg:x16; val_offset:928; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 928, x17, x15, 928, x18)

inst_117:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68aebb and fs2 == 0 and fe2 == 0x7f and fm2 == 0x533d97 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ee8aebb; op2val:0x3fd33d97; valaddr_reg:x16; val_offset:936; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 936, x17, x15, 936, x18)

inst_118:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68aebb and fs2 == 0 and fe2 == 0x7f and fm2 == 0x533d97 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ee8aebb; op2val:0x3fd33d97; valaddr_reg:x16; val_offset:944; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 944, x17, x15, 944, x18)

inst_119:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68aebb and fs2 == 0 and fe2 == 0x7f and fm2 == 0x533d97 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ee8aebb; op2val:0x3fd33d97; valaddr_reg:x16; val_offset:952; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 952, x17, x15, 952, x18)

inst_120:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68aebb and fs2 == 0 and fe2 == 0x7f and fm2 == 0x533d97 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ee8aebb; op2val:0x3fd33d97; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 960, x17, x15, 960, x18)

inst_121:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x009696 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3f1f26 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f009696; op2val:0x3fbf1f26; valaddr_reg:x16; val_offset:968; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 968, x17, x15, 968, x18)

inst_122:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x009696 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3f1f26 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f009696; op2val:0x3fbf1f26; valaddr_reg:x16; val_offset:976; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 976, x17, x15, 976, x18)

inst_123:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x009696 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3f1f26 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f009696; op2val:0x3fbf1f26; valaddr_reg:x16; val_offset:984; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 984, x17, x15, 984, x18)

inst_124:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x009696 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3f1f26 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f009696; op2val:0x3fbf1f26; valaddr_reg:x16; val_offset:992; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 992, x17, x15, 992, x18)

inst_125:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x009696 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3f1f26 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f009696; op2val:0x3fbf1f26; valaddr_reg:x16; val_offset:1000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1000, x17, x15, 1000, x18)

inst_126:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1933ae and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f206a70; op2val:0x3f9933ae; valaddr_reg:x16; val_offset:1008; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1008, x17, x15, 1008, x18)

inst_127:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1933ae and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f206a70; op2val:0x3f9933ae; valaddr_reg:x16; val_offset:1016; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1016, x17, x15, 1016, x18)

inst_128:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1933ae and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f206a70; op2val:0x3f9933ae; valaddr_reg:x16; val_offset:1024; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1024, x17, x15, 1024, x18)

inst_129:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1933ae and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f206a70; op2val:0x3f9933ae; valaddr_reg:x16; val_offset:1032; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1032, x17, x15, 1032, x18)

inst_130:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1933ae and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f206a70; op2val:0x3f9933ae; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1040, x17, x15, 1040, x18)

inst_131:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2db9cd and fs2 == 0 and fe2 == 0x83 and fm2 == 0x0d76dc and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d2db9cd; op2val:0x418d76dc; valaddr_reg:x16; val_offset:1048; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1048, x17, x15, 1048, x18)

inst_132:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2db9cd and fs2 == 0 and fe2 == 0x83 and fm2 == 0x0d76dc and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d2db9cd; op2val:0x418d76dc; valaddr_reg:x16; val_offset:1056; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1056, x17, x15, 1056, x18)

inst_133:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2db9cd and fs2 == 0 and fe2 == 0x83 and fm2 == 0x0d76dc and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d2db9cd; op2val:0x418d76dc; valaddr_reg:x16; val_offset:1064; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1064, x17, x15, 1064, x18)

inst_134:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2db9cd and fs2 == 0 and fe2 == 0x83 and fm2 == 0x0d76dc and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d2db9cd; op2val:0x418d76dc; valaddr_reg:x16; val_offset:1072; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1072, x17, x15, 1072, x18)

inst_135:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2db9cd and fs2 == 0 and fe2 == 0x83 and fm2 == 0x0d76dc and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d2db9cd; op2val:0x418d76dc; valaddr_reg:x16; val_offset:1080; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1080, x17, x15, 1080, x18)

inst_136:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0x7f and fm2 == 0x05e2ec and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f378efe; op2val:0x3f85e2ec; valaddr_reg:x16; val_offset:1088; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1088, x17, x15, 1088, x18)

inst_137:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0x7f and fm2 == 0x05e2ec and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f378efe; op2val:0x3f85e2ec; valaddr_reg:x16; val_offset:1096; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1096, x17, x15, 1096, x18)

inst_138:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0x7f and fm2 == 0x05e2ec and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f378efe; op2val:0x3f85e2ec; valaddr_reg:x16; val_offset:1104; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1104, x17, x15, 1104, x18)

inst_139:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0x7f and fm2 == 0x05e2ec and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f378efe; op2val:0x3f85e2ec; valaddr_reg:x16; val_offset:1112; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1112, x17, x15, 1112, x18)

inst_140:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0x7f and fm2 == 0x05e2ec and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f378efe; op2val:0x3f85e2ec; valaddr_reg:x16; val_offset:1120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1120, x17, x15, 1120, x18)

inst_141:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07e829 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x34d465 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e87e829; op2val:0xc1b4d465; valaddr_reg:x16; val_offset:1128; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1128, x17, x15, 1128, x18)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
test_fp:
.word 0x7f378efe
.word 0x7f378efe
.word 0x7e87e829
.word 0xc1b4d465
.word 0x7e87e829
.word 0x7e87e829
.word 0x7e87e829
.word 0xc1b4d465
.word 0x7e87e829
.word 0xc1b4d465
.word 0x7e87e829
.word 0xc1b4d465
.word 0x7ec052ad
.word 0x417f91f2
.word 0x7ec052ad
.word 0x417f91f2
.word 0x7ec052ad
.word 0x417f91f2
.word 0x7ec052ad
.word 0x417f91f2
.word 0x7ec052ad
.word 0x417f91f2
.word 0x7ebc2a53
.word 0xc1029bc8
.word 0x7ebc2a53
.word 0xc1029bc8
.word 0x7ebc2a53
.word 0xc1029bc8
.word 0x7ebc2a53
.word 0xc1029bc8
.word 0x7ebc2a53
.word 0xc1029bc8
.word 0x7eb12e1f
.word 0x410ab4cd
.word 0x7eb12e1f
.word 0x410ab4cd
.word 0x7eb12e1f
.word 0x410ab4cd
.word 0x7eb12e1f
.word 0x410ab4cd
.word 0x7eb12e1f
.word 0x410ab4cd
.word 0x7f10c4ce
.word 0xc029c2a6
.word 0x7f10c4ce
.word 0xc029c2a6
.word 0x7f10c4ce
.word 0xc029c2a6
.word 0x7f10c4ce
.word 0xc029c2a6
.word 0x7f10c4ce
.word 0xc029c2a6
.word 0x7f38af5a
.word 0x400511e0
.word 0x7f38af5a
.word 0x400511e0
.word 0x7f38af5a
.word 0x400511e0
.word 0x7f38af5a
.word 0x400511e0
.word 0x7f38af5a
.word 0x400511e0
.word 0x7e87daac
.word 0xc034e65a
.word 0x7e87daac
.word 0xc034e65a
.word 0x7e87daac
.word 0xc034e65a
.word 0x7e87daac
.word 0xc034e65a
.word 0x7e87daac
.word 0xc034e65a
.word 0x7f127958
.word 0x3fa7c8b6
.word 0x7f127958
.word 0x3fa7c8b6
.word 0x7f127958
.word 0x3fa7c8b6
.word 0x7f127958
.word 0x3fa7c8b6
.word 0x7f127958
.word 0x3fa7c8b6
.word 0x7f0d014f
.word 0xbf2e4aa1
.word 0x7f0d014f
.word 0xbf2e4aa1
.word 0x7f0d014f
.word 0xbf2e4aa1
.word 0x7f0d014f
.word 0xbf2e4aa1
.word 0x7f0d014f
.word 0xbf2e4aa1
.word 0x7f2b90d3
.word 0x3f0f3ed1
.word 0x7f2b90d3
.word 0x3f0f3ed1
.word 0x7f2b90d3
.word 0x3f0f3ed1
.word 0x7f2b90d3
.word 0x3f0f3ed1
.word 0x7f2b90d3
.word 0x3f0f3ed1
.word 0x7f018006
.word 0xbebdc6a1
.word 0x7f018006
.word 0xbebdc6a1
.word 0x7f018006
.word 0xbebdc6a1
.word 0x7f018006
.word 0xbebdc6a1
.word 0x7f018006
.word 0xbebdc6a1
.word 0x7ec3ed0a
.word 0x3efadeca
.word 0x7ec3ed0a
.word 0x3efadeca
.word 0x7ec3ed0a
.word 0x3efadeca
.word 0x7ec3ed0a
.word 0x3efadeca
.word 0x7ec3ed0a
.word 0x3efadeca
.word 0x7e79b5b2
.word 0xbec4d625
.word 0x7e79b5b2
.word 0xbec4d625
.word 0x7e79b5b2
.word 0xbec4d625
.word 0x7e79b5b2
.word 0xbec4d625
.word 0x7e79b5b2
.word 0xbec4d625
.word 0x7e3557bf
.word 0x3f0785b9
.word 0x7e3557bf
.word 0x3f0785b9
.word 0x7e3557bf
.word 0x3f0785b9
.word 0x7e3557bf
.word 0x3f0785b9
.word 0x7e3557bf
.word 0x3f0785b9
.word 0x7ec9e399
.word 0x3ff375de
.word 0x7ec9e399
.word 0x3ff375de
.word 0x7ec9e399
.word 0x3ff375de
.word 0x7ec9e399
.word 0x3ff375de
.word 0x7ec9e399
.word 0x3ff375de
.word 0x7e91ecfc
.word 0x40286a18
.word 0x7e91ecfc
.word 0x40286a18
.word 0x7e91ecfc
.word 0x40286a18
.word 0x7e91ecfc
.word 0x40286a18
.word 0x7e91ecfc
.word 0x40286a18
.word 0x7eb284ec
.word 0x4009aa73
.word 0x7eb284ec
.word 0x4009aa73
.word 0x7eb284ec
.word 0x4009aa73
.word 0x7eb284ec
.word 0x4009aa73
.word 0x7eb284ec
.word 0x4009aa73
.word 0x7cdcb815
.word 0x41deb0b8
.word 0x7cdcb815
.word 0x41deb0b8
.word 0x7cdcb815
.word 0x41deb0b8
.word 0x7cdcb815
.word 0x41deb0b8
.word 0x7cdcb815
.word 0x41deb0b8
.word 0x7eaad2f1
.word 0x400fde0b
.word 0x7eaad2f1
.word 0x400fde0b
.word 0x7eaad2f1
.word 0x400fde0b
.word 0x7eaad2f1
.word 0x400fde0b
.word 0x7eaad2f1
.word 0x400fde0b
.word 0x7f3648af
.word 0x3f86d298
.word 0x7f3648af
.word 0x3f86d298
.word 0x7f3648af
.word 0x3f86d298
.word 0x7f3648af
.word 0x3f86d298
.word 0x7f3648af
.word 0x3f86d298
.word 0x7f0ad17d
.word 0x3fb10982
.word 0x7f0ad17d
.word 0x3fb10982
.word 0x7f0ad17d
.word 0x3fb10982
.word 0x7f0ad17d
.word 0x3fb10982
.word 0x7f0ad17d
.word 0x3fb10982
.word 0x7ea5608b
.word 0x40149b14
.word 0x7ea5608b
.word 0x40149b14
.word 0x7ea5608b
.word 0x40149b14
.word 0x7ea5608b
.word 0x40149b14
.word 0x7ea5608b
.word 0x40149b14
.word 0x7edf2ead
.word 0x3fdc3b83
.word 0x7edf2ead
.word 0x3fdc3b83
.word 0x7edf2ead
.word 0x3fdc3b83
.word 0x7edf2ead
.word 0x3fdc3b83
.word 0x7edf2ead
.word 0x3fdc3b83
.word 0x7ee8aebb
.word 0x3fd33d97
.word 0x7ee8aebb
.word 0x3fd33d97
.word 0x7ee8aebb
.word 0x3fd33d97
.word 0x7ee8aebb
.word 0x3fd33d97
.word 0x7ee8aebb
.word 0x3fd33d97
.word 0x7f009696
.word 0x3fbf1f26
.word 0x7f009696
.word 0x3fbf1f26
.word 0x7f009696
.word 0x3fbf1f26
.word 0x7f009696
.word 0x3fbf1f26
.word 0x7f009696
.word 0x3fbf1f26
.word 0x7f206a70
.word 0x3f9933ae
.word 0x7f206a70
.word 0x3f9933ae
.word 0x7f206a70
.word 0x3f9933ae
.word 0x7f206a70
.word 0x3f9933ae
.word 0x7f206a70
.word 0x3f9933ae
.word 0x7d2db9cd
.word 0x418d76dc
.word 0x7d2db9cd
.word 0x418d76dc
.word 0x7d2db9cd
.word 0x418d76dc
.word 0x7d2db9cd
.word 0x418d76dc
.word 0x7d2db9cd
.word 0x418d76dc
.word 0x7f378efe
.word 0x3f85e2ec
.word 0x7f378efe
.word 0x3f85e2ec
.word 0x7f378efe
.word 0x3f85e2ec
.word 0x7f378efe
.word 0x3f85e2ec
.word 0x7f378efe
.word 0x3f85e2ec
.word 0x7e87e829
.word 0xc1b4d465
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 284*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
