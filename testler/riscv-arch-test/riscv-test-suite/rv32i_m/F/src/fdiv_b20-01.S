
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.5.2
// timestamp : Tue Sep  7 16:44:09 2021 GMT
// usage     : riscv_ctg \
//                  -- cgf $cgf \
//                  -- xlen $xlen \
// -----------
//
// -----------
// Copyright (c) 2021. IIT Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fdiv.s instruction of the RISC-V F extension for the fdiv_b20 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fdiv_b20)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs1 == rd != rs2, rs1==f15, rs2==f26, rd==f15, fs1 == 0 and fe1 == 0xfb and fm1 == 0x60f718 and fs2 == 1 and fe2 == 0xe9 and fm2 == 0x33f8e0 and rm_val == 0  
// opcode: fdiv.s ; op1:f15; op2:f26; dest:f15; op1val:0x7de0f718; op2val:0xf4b3f8e0; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f15, f15, f26, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==f6, rs2==f19, rd==f17, fs1 == 0 and fe1 == 0xfd and fm1 == 0x2fc88c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fdiv.s ; op1:f6; op2:f19; dest:f17; op1val:0x7eafc88c; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f17, f6, f19, 0x0, 0, x16, 8, x17, x15, 8, x18)

inst_2:
// rs1 == rs2 == rd, rs1==f11, rs2==f11, rd==f11, fs1 == 0 and fe1 == 0xfe and fm1 == 0x319ce6 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fdiv.s ; op1:f11; op2:f11; dest:f11; op1val:0x7f319ce6; op2val:0x7f319ce6; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f11, f11, f11, 0x0, 0, x16, 16, x17, x15, 16, x18)

inst_3:
// rs1 == rs2 != rd, rs1==f3, rs2==f3, rd==f4, fs1 == 0 and fe1 == 0xfd and fm1 == 0x58bf61 and fs2 == 1 and fe2 == 0xab and fm2 == 0x17657f and rm_val == 0  
// opcode: fdiv.s ; op1:f3; op2:f3; dest:f4; op1val:0x7ed8bf61; op2val:0x7ed8bf61; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f4, f3, f3, 0x0, 0, x16, 24, x17, x15, 24, x18)

inst_4:
// rs2 == rd != rs1, rs1==f21, rs2==f13, rd==f13, fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b0708 and fs2 == 1 and fe2 == 0x86 and fm2 == 0x0d7389 and rm_val == 0  
// opcode: fdiv.s ; op1:f21; op2:f13; dest:f13; op1val:0x7f2b0708; op2val:0xc30d7389; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f13, f21, f13, 0x0, 0, x16, 32, x17, x15, 32, x18)

inst_5:
// rs1==f29, rs2==f1, rd==f19, fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cd7ff and fs2 == 1 and fe2 == 0xf8 and fm2 == 0x6ccaee and rm_val == 0  
// opcode: fdiv.s ; op1:f29; op2:f1; dest:f19; op1val:0x7e4cd7ff; op2val:0xfc6ccaee; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f19, f29, f1, 0x0, 0, x16, 40, x17, x15, 40, x18)

inst_6:
// rs1==f24, rs2==f20, rd==f9, fs1 == 0 and fe1 == 0xfa and fm1 == 0x7b1d83 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fdiv.s ; op1:f24; op2:f20; dest:f9; op1val:0x7d7b1d83; op2val:0xff7fffff; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f9, f24, f20, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_7:
// rs1==f5, rs2==f6, rd==f18, fs1 == 0 and fe1 == 0xfc and fm1 == 0x2bcff9 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fdiv.s ; op1:f5; op2:f6; dest:f18; op1val:0x7e2bcff9; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f18, f5, f6, 0x0, 0, x16, 56, x17, x15, 56, x18)

inst_8:
// rs1==f12, rs2==f30, rd==f8, fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b2e1a and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fdiv.s ; op1:f12; op2:f30; dest:f8; op1val:0x7edb2e1a; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f8, f12, f30, 0x0, 0, x16, 64, x17, x15, 64, x18)

inst_9:
// rs1==f1, rs2==f12, rd==f31, fs1 == 0 and fe1 == 0xfd and fm1 == 0x112ace and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fdiv.s ; op1:f1; op2:f12; dest:f31; op1val:0x7e912ace; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f31, f1, f12, 0x0, 0, x16, 72, x17, x15, 72, x18)

inst_10:
// rs1==f16, rs2==f28, rd==f23, fs1 == 0 and fe1 == 0xfe and fm1 == 0x16201f and fs2 == 0 and fe2 == 0xfd and fm2 == 0x631e55 and rm_val == 0  
// opcode: fdiv.s ; op1:f16; op2:f28; dest:f23; op1val:0x7f16201f; op2val:0x7ee31e55; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f23, f16, f28, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_11:
// rs1==f31, rs2==f8, rd==f28, fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c3b3e and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fdiv.s ; op1:f31; op2:f8; dest:f28; op1val:0x7eec3b3e; op2val:0xff7fffff; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f28, f31, f8, 0x0, 0, x16, 88, x17, x15, 88, x18)

inst_12:
// rs1==f27, rs2==f10, rd==f7, fs1 == 0 and fe1 == 0xfd and fm1 == 0x02e795 and fs2 == 1 and fe2 == 0xd6 and fm2 == 0x4dad56 and rm_val == 0  
// opcode: fdiv.s ; op1:f27; op2:f10; dest:f7; op1val:0x7e82e795; op2val:0xeb4dad56; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f7, f27, f10, 0x0, 0, x16, 96, x17, x15, 96, x18)

inst_13:
// rs1==f2, rs2==f22, rd==f27, fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f12b9 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fdiv.s ; op1:f2; op2:f22; dest:f27; op1val:0x7f1f12b9; op2val:0xff7fffff; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f27, f2, f22, 0x0, 0, x16, 104, x17, x15, 104, x18)

inst_14:
// rs1==f19, rs2==f7, rd==f12, fs1 == 0 and fe1 == 0xfe and fm1 == 0x17517f and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fdiv.s ; op1:f19; op2:f7; dest:f12; op1val:0x7f17517f; op2val:0xff7fffff; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f19, f7, 0x0, 0, x16, 112, x17, x15, 112, x18)

inst_15:
// rs1==f26, rs2==f9, rd==f30, fs1 == 0 and fe1 == 0xfe and fm1 == 0x264de7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fdiv.s ; op1:f26; op2:f9; dest:f30; op1val:0x7f264de7; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f30, f26, f9, 0x0, 0, x16, 120, x17, x15, 120, x18)

inst_16:
// rs1==f0, rs2==f24, rd==f3, fs1 == 0 and fe1 == 0xfa and fm1 == 0x60d9a4 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fdiv.s ; op1:f0; op2:f24; dest:f3; op1val:0x7d60d9a4; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f3, f0, f24, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_17:
// rs1==f14, rs2==f15, rd==f10, fs1 == 0 and fe1 == 0xf9 and fm1 == 0x70766e and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fdiv.s ; op1:f14; op2:f15; dest:f10; op1val:0x7cf0766e; op2val:0xff7fffff; valaddr_reg:x16; val_offset:136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f10, f14, f15, 0x0, 0, x16, 136, x17, x15, 136, x18)

inst_18:
// rs1==f7, rs2==f16, rd==f25, fs1 == 0 and fe1 == 0xfb and fm1 == 0x202a98 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fdiv.s ; op1:f7; op2:f16; dest:f25; op1val:0x7da02a98; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f25, f7, f16, 0x0, 0, x16, 144, x17, x15, 144, x18)

inst_19:
// rs1==f13, rs2==f5, rd==f6, fs1 == 0 and fe1 == 0xfd and fm1 == 0x53a642 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fdiv.s ; op1:f13; op2:f5; dest:f6; op1val:0x7ed3a642; op2val:0xff7fffff; valaddr_reg:x16; val_offset:152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f6, f13, f5, 0x0, 0, x16, 152, x17, x15, 152, x18)

inst_20:
// rs1==f23, rs2==f17, rd==f24, fs1 == 0 and fe1 == 0xfb and fm1 == 0x4fe433 and fs2 == 0 and fe2 == 0x9c and fm2 == 0x3feae5 and rm_val == 0  
// opcode: fdiv.s ; op1:f23; op2:f17; dest:f24; op1val:0x7dcfe433; op2val:0x4e3feae5; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f24, f23, f17, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_21:
// rs1==f17, rs2==f29, rd==f26, fs1 == 0 and fe1 == 0xfe and fm1 == 0x2a5ada and fs2 == 0 and fe2 == 0xd0 and fm2 == 0x2f4d13 and rm_val == 0  
// opcode: fdiv.s ; op1:f17; op2:f29; dest:f26; op1val:0x7f2a5ada; op2val:0x682f4d13; valaddr_reg:x16; val_offset:168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f26, f17, f29, 0x0, 0, x16, 168, x17, x15, 168, x18)

inst_22:
// rs1==f4, rs2==f2, rd==f16, fs1 == 0 and fe1 == 0xfe and fm1 == 0x373a1e and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fdiv.s ; op1:f4; op2:f2; dest:f16; op1val:0x7f373a1e; op2val:0xff7fffff; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f16, f4, f2, 0x0, 0, x16, 176, x17, x15, 176, x18)

inst_23:
// rs1==f30, rs2==f18, rd==f22, fs1 == 0 and fe1 == 0xfd and fm1 == 0x67ede5 and fs2 == 1 and fe2 == 0xaa and fm2 == 0x7a8f9b and rm_val == 0  
// opcode: fdiv.s ; op1:f30; op2:f18; dest:f22; op1val:0x7ee7ede5; op2val:0xd57a8f9b; valaddr_reg:x16; val_offset:184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f22, f30, f18, 0x0, 0, x16, 184, x17, x15, 184, x18)

inst_24:
// rs1==f25, rs2==f0, rd==f14, fs1 == 0 and fe1 == 0xfe and fm1 == 0x268b6a and fs2 == 1 and fe2 == 0xef and fm2 == 0x3935cd and rm_val == 0  
// opcode: fdiv.s ; op1:f25; op2:f0; dest:f14; op1val:0x7f268b6a; op2val:0xf7b935cd; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f14, f25, f0, 0x0, 0, x16, 192, x17, x15, 192, x18)

inst_25:
// rs1==f22, rs2==f4, rd==f0, fs1 == 0 and fe1 == 0xfc and fm1 == 0x5fa740 and fs2 == 0 and fe2 == 0x9f and fm2 == 0x3d6968 and rm_val == 0  
// opcode: fdiv.s ; op1:f22; op2:f4; dest:f0; op1val:0x7e5fa740; op2val:0x4fbd6968; valaddr_reg:x16; val_offset:200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f0, f22, f4, 0x0, 0, x16, 200, x17, x15, 200, x18)

inst_26:
// rs1==f18, rs2==f23, rd==f21, fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ab65 and fs2 == 1 and fe2 == 0xef and fm2 == 0x5dffc1 and rm_val == 0  
// opcode: fdiv.s ; op1:f18; op2:f23; dest:f21; op1val:0x7e82ab65; op2val:0xf7ddffc1; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f21, f18, f23, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_27:
// rs1==f8, rs2==f21, rd==f2, fs1 == 0 and fe1 == 0xfd and fm1 == 0x0d5a7c and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fdiv.s ; op1:f8; op2:f21; dest:f2; op1val:0x7e8d5a7c; op2val:0xff7fffff; valaddr_reg:x16; val_offset:216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f2, f8, f21, 0x0, 0, x16, 216, x17, x15, 216, x18)

inst_28:
// rs1==f28, rs2==f27, rd==f5, fs1 == 0 and fe1 == 0xfe and fm1 == 0x217f53 and fs2 == 0 and fe2 == 0xe3 and fm2 == 0x5d82bd and rm_val == 0  
// opcode: fdiv.s ; op1:f28; op2:f27; dest:f5; op1val:0x7f217f53; op2val:0x71dd82bd; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f5, f28, f27, 0x0, 0, x16, 224, x17, x15, 224, x18)

inst_29:
// rs1==f20, rs2==f31, rd==f1, fs1 == 0 and fe1 == 0xfd and fm1 == 0x667aed and fs2 == 0 and fe2 == 0xe0 and fm2 == 0x0103f8 and rm_val == 0  
// opcode: fdiv.s ; op1:f20; op2:f31; dest:f1; op1val:0x7ee67aed; op2val:0x700103f8; valaddr_reg:x16; val_offset:232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f1, f20, f31, 0x0, 0, x16, 232, x17, x15, 232, x18)

inst_30:
// rs1==f9, rs2==f25, rd==f29, fs1 == 0 and fe1 == 0xfe and fm1 == 0x11c013 and fs2 == 1 and fe2 == 0xf2 and fm2 == 0x3d7983 and rm_val == 0  
// opcode: fdiv.s ; op1:f9; op2:f25; dest:f29; op1val:0x7f11c013; op2val:0xf93d7983; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f29, f9, f25, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_31:
// rs1==f10, rs2==f14, rd==f20, fs1 == 0 and fe1 == 0xfc and fm1 == 0x238f3f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f14; dest:f20; op1val:0x7e238f3f; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f20, f10, f14, 0x0, 0, x16, 248, x17, x15, 248, x18)

inst_32:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ee8de and fs2 == 0 and fe2 == 0xac and fm2 == 0x6b9400 and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2ee8de; op2val:0x566b9400; valaddr_reg:x16; val_offset:256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 256, x17, x15, 256, x18)

inst_33:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x025339 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x064930 and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e025339; op2val:0x7c864930; valaddr_reg:x16; val_offset:264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 264, x17, x15, 264, x18)

inst_34:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x02119e and fs2 == 0 and fe2 == 0xec and fm2 == 0x25b1fa and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d82119e; op2val:0x7625b1fa; valaddr_reg:x16; val_offset:272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 272, x17, x15, 272, x18)

inst_35:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0b4a10 and fs2 == 0 and fe2 == 0x9e and fm2 == 0x3c1678 and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0b4a10; op2val:0x4f3c1678; valaddr_reg:x16; val_offset:280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 280, x17, x15, 280, x18)

inst_36:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34342f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x7cb837 and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e34342f; op2val:0x43fcb837; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_37:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d37b2 and fs2 == 0 and fe2 == 0xed and fm2 == 0x54eb08 and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3d37b2; op2val:0x76d4eb08; valaddr_reg:x16; val_offset:296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 296, x17, x15, 296, x18)

inst_38:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a0c29 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eba0c29; op2val:0xff7fffff; valaddr_reg:x16; val_offset:304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 304, x17, x15, 304, x18)

inst_39:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ecd6 and fs2 == 1 and fe2 == 0xbf and fm2 == 0x081dd1 and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f03ecd6; op2val:0xdf881dd1; valaddr_reg:x16; val_offset:312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 312, x17, x15, 312, x18)

inst_40:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x296b63 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x3a1fe4 and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f296b63; op2val:0xc43a1fe4; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_41:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0409cf and fs2 == 1 and fe2 == 0xb3 and fm2 == 0x3ed825 and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e8409cf; op2val:0xd9bed825; valaddr_reg:x16; val_offset:328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 328, x17, x15, 328, x18)

inst_42:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32fae0 and fs2 == 0 and fe2 == 0xc2 and fm2 == 0x36e76b and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f32fae0; op2val:0x6136e76b; valaddr_reg:x16; val_offset:336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 336, x17, x15, 336, x18)

inst_43:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d6ae and fs2 == 1 and fe2 == 0xf0 and fm2 == 0x41dcec and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f20d6ae; op2val:0xf841dcec; valaddr_reg:x16; val_offset:344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 344, x17, x15, 344, x18)

inst_44:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x017ed0 and fs2 == 0 and fe2 == 0x94 and fm2 == 0x317fe2 and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f017ed0; op2val:0x4a317fe2; valaddr_reg:x16; val_offset:352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 352, x17, x15, 352, x18)

inst_45:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x239b5c and fs2 == 0 and fe2 == 0xe7 and fm2 == 0x311bbd and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e239b5c; op2val:0x73b11bbd; valaddr_reg:x16; val_offset:360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 360, x17, x15, 360, x18)

inst_46:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x023675 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e823675; op2val:0xff7fffff; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_47:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x164749 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f164749; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 376, x17, x15, 376, x18)

inst_48:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d8377 and fs2 == 1 and fe2 == 0x91 and fm2 == 0x76277d and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3d8377; op2val:0xc8f6277d; valaddr_reg:x16; val_offset:384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 384, x17, x15, 384, x18)

inst_49:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bb471 and fs2 == 0 and fe2 == 0xb6 and fm2 == 0x789bff and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e7bb471; op2val:0x5b789bff; valaddr_reg:x16; val_offset:392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 392, x17, x15, 392, x18)

inst_50:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a414e and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e1a414e; op2val:0xff7fffff; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_51:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x5e539a and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7c5e539a; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 408, x17, x15, 408, x18)

inst_52:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcfc and fs2 == 0 and fe2 == 0xe8 and fm2 == 0x58de83 and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2cbcfc; op2val:0x7458de83; valaddr_reg:x16; val_offset:416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 416, x17, x15, 416, x18)

inst_53:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2759f0 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x351a1b and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2759f0; op2val:0xc0b51a1b; valaddr_reg:x16; val_offset:424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 424, x17, x15, 424, x18)

inst_54:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79dd8e and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e79dd8e; op2val:0xff7fffff; valaddr_reg:x16; val_offset:432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 432, x17, x15, 432, x18)

inst_55:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3fec54 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ebfec54; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 440, x17, x15, 440, x18)

inst_56:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x636240 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e636240; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_57:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7fba49 and fs2 == 1 and fe2 == 0xf7 and fm2 == 0x5bc718 and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7effba49; op2val:0xfbdbc718; valaddr_reg:x16; val_offset:456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 456, x17, x15, 456, x18)

inst_58:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x206546 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7da06546; op2val:0xff7fffff; valaddr_reg:x16; val_offset:464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 464, x17, x15, 464, x18)

inst_59:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x151546 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e151546; op2val:0xff7fffff; valaddr_reg:x16; val_offset:472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 472, x17, x15, 472, x18)

inst_60:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2640ba and fs2 == 0 and fe2 == 0xbf and fm2 == 0x4688b4 and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ea640ba; op2val:0x5fc688b4; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_61:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x016ff7 and fs2 == 1 and fe2 == 0xc9 and fm2 == 0x0990a3 and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f016ff7; op2val:0xe48990a3; valaddr_reg:x16; val_offset:488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 488, x17, x15, 488, x18)

inst_62:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e0667 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e1e0667; op2val:0xff7fffff; valaddr_reg:x16; val_offset:496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 496, x17, x15, 496, x18)

inst_63:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0538b1 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e8538b1; op2val:0xff7fffff; valaddr_reg:x16; val_offset:504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 504, x17, x15, 504, x18)

inst_64:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1123d8 and fs2 == 1 and fe2 == 0xbd and fm2 == 0x695156 and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e9123d8; op2val:0xdee95156; valaddr_reg:x16; val_offset:512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 512, x17, x15, 512, x18)

inst_65:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x436852 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec36852; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 520, x17, x15, 520, x18)

inst_66:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x072c24 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f072c24; op2val:0xff7fffff; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_67:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3af6ff and fs2 == 1 and fe2 == 0xa4 and fm2 == 0x799c89 and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3af6ff; op2val:0xd2799c89; valaddr_reg:x16; val_offset:536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 536, x17, x15, 536, x18)

inst_68:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x269d2c and fs2 == 1 and fe2 == 0x83 and fm2 == 0x519910 and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f269d2c; op2val:0xc1d19910; valaddr_reg:x16; val_offset:544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 544, x17, x15, 544, x18)

inst_69:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03b9a1 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e03b9a1; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 552, x17, x15, 552, x18)

inst_70:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afcdb and fs2 == 1 and fe2 == 0x92 and fm2 == 0x6f10c4 and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7edafcdb; op2val:0xc96f10c4; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_71:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38be1b and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f38be1b; op2val:0xff7fffff; valaddr_reg:x16; val_offset:568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 568, x17, x15, 568, x18)

inst_72:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d53d7 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x377d30 and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1d53d7; op2val:0xfe377d30; valaddr_reg:x16; val_offset:576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 576, x17, x15, 576, x18)

inst_73:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x68f58b and fs2 == 1 and fe2 == 0xbf and fm2 == 0x756c07 and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ce8f58b; op2val:0xdff56c07; valaddr_reg:x16; val_offset:584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 584, x17, x15, 584, x18)

inst_74:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28b6bd and fs2 == 0 and fe2 == 0xbf and fm2 == 0x17043e and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f28b6bd; op2val:0x5f97043e; valaddr_reg:x16; val_offset:592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 592, x17, x15, 592, x18)

inst_75:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x506932 and fs2 == 0 and fe2 == 0x99 and fm2 == 0x716acc and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7bd06932; op2val:0x4cf16acc; valaddr_reg:x16; val_offset:600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 600, x17, x15, 600, x18)

inst_76:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41cf9e and fs2 == 1 and fe2 == 0xda and fm2 == 0x244a46 and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e41cf9e; op2val:0xed244a46; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 608, x17, x15, 608, x18)

inst_77:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fcf65 and fs2 == 0 and fe2 == 0xd7 and fm2 == 0x25a218 and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e9fcf65; op2val:0x6ba5a218; valaddr_reg:x16; val_offset:616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 616, x17, x15, 616, x18)

inst_78:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ed153 and fs2 == 1 and fe2 == 0x92 and fm2 == 0x1c3eb7 and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0ed153; op2val:0xc91c3eb7; valaddr_reg:x16; val_offset:624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 624, x17, x15, 624, x18)

inst_79:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3457e7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3457e7; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 632, x17, x15, 632, x18)

inst_80:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e5bf8 and fs2 == 0 and fe2 == 0x88 and fm2 == 0x24083c and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e6e5bf8; op2val:0x4424083c; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_81:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24d5b2 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f24d5b2; op2val:0xff7fffff; valaddr_reg:x16; val_offset:648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 648, x17, x15, 648, x18)

inst_82:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6b4e0e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e6b4e0e; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 656, x17, x15, 656, x18)

inst_83:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x281a41 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2ac557 and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f281a41; op2val:0xff2ac557; valaddr_reg:x16; val_offset:664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 664, x17, x15, 664, x18)

inst_84:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39d661 and fs2 == 0 and fe2 == 0xba and fm2 == 0x187b63 and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f39d661; op2val:0x5d187b63; valaddr_reg:x16; val_offset:672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 672, x17, x15, 672, x18)

inst_85:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x655450 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e655450; op2val:0xff7fffff; valaddr_reg:x16; val_offset:680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 680, x17, x15, 680, x18)

inst_86:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x34967e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x142cb6 and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d34967e; op2val:0x40942cb6; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 688, x17, x15, 688, x18)

inst_87:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7248b2 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ef248b2; op2val:0xff7fffff; valaddr_reg:x16; val_offset:696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 696, x17, x15, 696, x18)

inst_88:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76b77e and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e76b77e; op2val:0xff7fffff; valaddr_reg:x16; val_offset:704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 704, x17, x15, 704, x18)

inst_89:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d1ff5 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7edd1ff5; op2val:0xff7fffff; valaddr_reg:x16; val_offset:712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 712, x17, x15, 712, x18)

inst_90:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17a40d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e97a40d; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_91:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7906c5 and fs2 == 0 and fe2 == 0x8b and fm2 == 0x1f607e and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ef906c5; op2val:0x459f607e; valaddr_reg:x16; val_offset:728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 728, x17, x15, 728, x18)

inst_92:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b6a13 and fs2 == 0 and fe2 == 0xad and fm2 == 0x4b2862 and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e2b6a13; op2val:0x56cb2862; valaddr_reg:x16; val_offset:736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 736, x17, x15, 736, x18)

inst_93:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x465fcc and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec65fcc; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 744, x17, x15, 744, x18)

inst_94:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x192dff and fs2 == 0 and fe2 == 0xb8 and fm2 == 0x236443 and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f192dff; op2val:0x5c236443; valaddr_reg:x16; val_offset:752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 752, x17, x15, 752, x18)

inst_95:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b506b and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3b506b; op2val:0xff7fffff; valaddr_reg:x16; val_offset:760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 760, x17, x15, 760, x18)

inst_96:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x296bac and fs2 == 1 and fe2 == 0x97 and fm2 == 0x169899 and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e296bac; op2val:0xcb969899; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 768, x17, x15, 768, x18)

inst_97:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512a66 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ed12a66; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 776, x17, x15, 776, x18)

inst_98:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0235b2 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0235b2; op2val:0xff7fffff; valaddr_reg:x16; val_offset:784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 784, x17, x15, 784, x18)

inst_99:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0748c6 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0748c6; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 792, x17, x15, 792, x18)

inst_100:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x761c0c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7df61c0c; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_101:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a0433 and fs2 == 0 and fe2 == 0xb9 and fm2 == 0x1dbba8 and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0a0433; op2val:0x5c9dbba8; valaddr_reg:x16; val_offset:808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 808, x17, x15, 808, x18)

inst_102:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319ce6 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f319ce6; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 816, x17, x15, 816, x18)

inst_103:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58bf61 and fs2 == 1 and fe2 == 0xab and fm2 == 0x17657f and rm_val == 0  
// opcode: fdiv.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ed8bf61; op2val:0xd597657f; valaddr_reg:x16; val_offset:824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fdiv.s, f12, f10, f11, 0x0, 0, x16, 824, x17, x15, 824, x18)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
test_fp:
.word 0x7de0f718
.word 0xf4b3f8e0
.word 0x7eafc88c
.word 0x7f7fffff
.word 0x7f319ce6
.word 0x7f319ce6
.word 0x7ed8bf61
.word 0x7ed8bf61
.word 0x7f2b0708
.word 0xc30d7389
.word 0x7e4cd7ff
.word 0xfc6ccaee
.word 0x7d7b1d83
.word 0xff7fffff
.word 0x7e2bcff9
.word 0x7f7fffff
.word 0x7edb2e1a
.word 0x7f7fffff
.word 0x7e912ace
.word 0x7f7fffff
.word 0x7f16201f
.word 0x7ee31e55
.word 0x7eec3b3e
.word 0xff7fffff
.word 0x7e82e795
.word 0xeb4dad56
.word 0x7f1f12b9
.word 0xff7fffff
.word 0x7f17517f
.word 0xff7fffff
.word 0x7f264de7
.word 0x7f7fffff
.word 0x7d60d9a4
.word 0x7f7fffff
.word 0x7cf0766e
.word 0xff7fffff
.word 0x7da02a98
.word 0x7f7fffff
.word 0x7ed3a642
.word 0xff7fffff
.word 0x7dcfe433
.word 0x4e3feae5
.word 0x7f2a5ada
.word 0x682f4d13
.word 0x7f373a1e
.word 0xff7fffff
.word 0x7ee7ede5
.word 0xd57a8f9b
.word 0x7f268b6a
.word 0xf7b935cd
.word 0x7e5fa740
.word 0x4fbd6968
.word 0x7e82ab65
.word 0xf7ddffc1
.word 0x7e8d5a7c
.word 0xff7fffff
.word 0x7f217f53
.word 0x71dd82bd
.word 0x7ee67aed
.word 0x700103f8
.word 0x7f11c013
.word 0xf93d7983
.word 0x7e238f3f
.word 0x7f7fffff
.word 0x7f2ee8de
.word 0x566b9400
.word 0x7e025339
.word 0x7c864930
.word 0x7d82119e
.word 0x7625b1fa
.word 0x7f0b4a10
.word 0x4f3c1678
.word 0x7e34342f
.word 0x43fcb837
.word 0x7f3d37b2
.word 0x76d4eb08
.word 0x7eba0c29
.word 0xff7fffff
.word 0x7f03ecd6
.word 0xdf881dd1
.word 0x7f296b63
.word 0xc43a1fe4
.word 0x7e8409cf
.word 0xd9bed825
.word 0x7f32fae0
.word 0x6136e76b
.word 0x7f20d6ae
.word 0xf841dcec
.word 0x7f017ed0
.word 0x4a317fe2
.word 0x7e239b5c
.word 0x73b11bbd
.word 0x7e823675
.word 0xff7fffff
.word 0x7f164749
.word 0x7f7fffff
.word 0x7f3d8377
.word 0xc8f6277d
.word 0x7e7bb471
.word 0x5b789bff
.word 0x7e1a414e
.word 0xff7fffff
.word 0x7c5e539a
.word 0x7f7fffff
.word 0x7f2cbcfc
.word 0x7458de83
.word 0x7f2759f0
.word 0xc0b51a1b
.word 0x7e79dd8e
.word 0xff7fffff
.word 0x7ebfec54
.word 0x7f7fffff
.word 0x7e636240
.word 0x7f7fffff
.word 0x7effba49
.word 0xfbdbc718
.word 0x7da06546
.word 0xff7fffff
.word 0x7e151546
.word 0xff7fffff
.word 0x7ea640ba
.word 0x5fc688b4
.word 0x7f016ff7
.word 0xe48990a3
.word 0x7e1e0667
.word 0xff7fffff
.word 0x7e8538b1
.word 0xff7fffff
.word 0x7e9123d8
.word 0xdee95156
.word 0x7ec36852
.word 0x7f7fffff
.word 0x7f072c24
.word 0xff7fffff
.word 0x7f3af6ff
.word 0xd2799c89
.word 0x7f269d2c
.word 0xc1d19910
.word 0x7e03b9a1
.word 0x7f7fffff
.word 0x7edafcdb
.word 0xc96f10c4
.word 0x7f38be1b
.word 0xff7fffff
.word 0x7f1d53d7
.word 0xfe377d30
.word 0x7ce8f58b
.word 0xdff56c07
.word 0x7f28b6bd
.word 0x5f97043e
.word 0x7bd06932
.word 0x4cf16acc
.word 0x7e41cf9e
.word 0xed244a46
.word 0x7e9fcf65
.word 0x6ba5a218
.word 0x7f0ed153
.word 0xc91c3eb7
.word 0x7f3457e7
.word 0x7f7fffff
.word 0x7e6e5bf8
.word 0x4424083c
.word 0x7f24d5b2
.word 0xff7fffff
.word 0x7e6b4e0e
.word 0x7f7fffff
.word 0x7f281a41
.word 0xff2ac557
.word 0x7f39d661
.word 0x5d187b63
.word 0x7e655450
.word 0xff7fffff
.word 0x7d34967e
.word 0x40942cb6
.word 0x7ef248b2
.word 0xff7fffff
.word 0x7e76b77e
.word 0xff7fffff
.word 0x7edd1ff5
.word 0xff7fffff
.word 0x7e97a40d
.word 0x7f7fffff
.word 0x7ef906c5
.word 0x459f607e
.word 0x7e2b6a13
.word 0x56cb2862
.word 0x7ec65fcc
.word 0x7f7fffff
.word 0x7f192dff
.word 0x5c236443
.word 0x7f3b506b
.word 0xff7fffff
.word 0x7e296bac
.word 0xcb969899
.word 0x7ed12a66
.word 0x7f7fffff
.word 0x7f0235b2
.word 0xff7fffff
.word 0x7f0748c6
.word 0x7f7fffff
.word 0x7df61c0c
.word 0x7f7fffff
.word 0x7f0a0433
.word 0x5c9dbba8
.word 0x7f319ce6
.word 0x7f7fffff
.word 0x7ed8bf61
.word 0xd597657f
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 208*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
