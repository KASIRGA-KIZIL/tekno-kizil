
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.5.2
// timestamp : Tue Sep  7 16:08:13 2021 GMT
// usage     : riscv_ctg \
//                  -- cgf $cgf \
//                  -- xlen $xlen \
// -----------
//
// -----------
// Copyright (c) 2021. IIT Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V F extension for the fnmsub_b4 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b4)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2, rs1==f8, rs2==f21, rs3==f2, rd==f8, fs1 == 0 and fe1 == 0xfc and fm1 == 0x2e1c2f and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0a7db2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x38c2b9 and rm_val == 0  
// opcode: fnmsub.s ; op1:f8; op2:f21; op3:f2; dest:f8; op1val:0x7e2e1c2f; op2val:0xc10a7db2; op3val:0x7f38c2b9; valaddr_reg:x16; val_offset:0; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f8, f8, f21, f2, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1:
// rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1, rs1==f18, rs2==f20, rs3==f10, rd==f10, fs1 == 0 and fe1 == 0xfc and fm1 == 0x17cb34 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x1edd6b and fs3 == 0 and fe3 == 0xfb and fm3 == 0x66a542 and rm_val == 4  
// opcode: fnmsub.s ; op1:f18; op2:f20; op3:f10; dest:f10; op1val:0x7e17cb34; op2val:0x421edd6b; op3val:0x7de6a542; valaddr_reg:x16; val_offset:12; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmsub.s, f10, f18, f20, f10, 0x4, 0, x16, 12, x17, x15, 8, x18)

inst_2:
// rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd, rs1==f5, rs2==f15, rs3==f8, rd==f6, fs1 == 0 and fe1 == 0xfc and fm1 == 0x17cb34 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x1edd6b and fs3 == 0 and fe3 == 0xfb and fm3 == 0x66a542 and rm_val == 3  
// opcode: fnmsub.s ; op1:f5; op2:f15; op3:f8; dest:f6; op1val:0x7e17cb34; op2val:0x421edd6b; op3val:0x7de6a542; valaddr_reg:x16; val_offset:24; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmsub.s, f6, f5, f15, f8, 0x3, 0, x16, 24, x17, x15, 16, x18)

inst_3:
// rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3, rs1==f23, rs2==f23, rs3==f28, rd==f12, fs1 == 0 and fe1 == 0xfc and fm1 == 0x17cb34 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x1edd6b and fs3 == 0 and fe3 == 0xfb and fm3 == 0x66a542 and rm_val == 2  
// opcode: fnmsub.s ; op1:f23; op2:f23; op3:f28; dest:f12; op1val:0x7e17cb34; op2val:0x7e17cb34; op3val:0x7de6a542; valaddr_reg:x16; val_offset:36; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmsub.s, f12, f23, f23, f28, 0x2, 0, x16, 36, x17, x15, 24, x18)

inst_4:
// rs1 == rs2 == rs3 == rd, rs1==f27, rs2==f27, rs3==f27, rd==f27, fs1 == 0 and fe1 == 0xfc and fm1 == 0x17cb34 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x1edd6b and fs3 == 0 and fe3 == 0xfb and fm3 == 0x66a542 and rm_val == 1  
// opcode: fnmsub.s ; op1:f27; op2:f27; op3:f27; dest:f27; op1val:0x7e17cb34; op2val:0x7e17cb34; op3val:0x7e17cb34; valaddr_reg:x16; val_offset:48; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmsub.s, f27, f27, f27, f27, 0x1, 0, x16, 48, x17, x15, 32, x18)

inst_5:
// rd == rs2 == rs3 != rs1, rs1==f7, rs2==f26, rs3==f26, rd==f26, fs1 == 0 and fe1 == 0xfc and fm1 == 0x17cb34 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x1edd6b and fs3 == 0 and fe3 == 0xfb and fm3 == 0x66a542 and rm_val == 0  
// opcode: fnmsub.s ; op1:f7; op2:f26; op3:f26; dest:f26; op1val:0x7e17cb34; op2val:0x421edd6b; op3val:0x421edd6b; valaddr_reg:x16; val_offset:60; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f26, f7, f26, f26, 0x0, 0, x16, 60, x17, x15, 40, x18)

inst_6:
// rs1 == rs2 == rd != rs3, rs1==f22, rs2==f22, rs3==f23, rd==f22, fs1 == 0 and fe1 == 0xfe and fm1 == 0x21f35d and fs2 == 1 and fe2 == 0x82 and fm2 == 0x214d91 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x4163ff and rm_val == 4  
// opcode: fnmsub.s ; op1:f22; op2:f22; op3:f23; dest:f22; op1val:0x7f21f35d; op2val:0x7f21f35d; op3val:0x7ec163ff; valaddr_reg:x16; val_offset:72; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmsub.s, f22, f22, f22, f23, 0x4, 0, x16, 72, x17, x15, 48, x18)

inst_7:
// rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2, rs1==f13, rs2==f1, rs3==f13, rd==f16, fs1 == 0 and fe1 == 0xfe and fm1 == 0x21f35d and fs2 == 1 and fe2 == 0x82 and fm2 == 0x214d91 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x4163ff and rm_val == 3  
// opcode: fnmsub.s ; op1:f13; op2:f1; op3:f13; dest:f16; op1val:0x7f21f35d; op2val:0xc1214d91; op3val:0x7f21f35d; valaddr_reg:x16; val_offset:84; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmsub.s, f16, f13, f1, f13, 0x3, 0, x16, 84, x17, x15, 56, x18)

inst_8:
// rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1, rs1==f29, rs2==f5, rs3==f5, rd==f0, fs1 == 0 and fe1 == 0xfe and fm1 == 0x21f35d and fs2 == 1 and fe2 == 0x82 and fm2 == 0x214d91 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x4163ff and rm_val == 2  
// opcode: fnmsub.s ; op1:f29; op2:f5; op3:f5; dest:f0; op1val:0x7f21f35d; op2val:0xc1214d91; op3val:0xc1214d91; valaddr_reg:x16; val_offset:96; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmsub.s, f0, f29, f5, f5, 0x2, 0, x16, 96, x17, x15, 64, x18)

inst_9:
// rs1 == rs2 == rs3 != rd, rs1==f19, rs2==f19, rs3==f19, rd==f7, fs1 == 0 and fe1 == 0xfe and fm1 == 0x21f35d and fs2 == 1 and fe2 == 0x82 and fm2 == 0x214d91 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x4163ff and rm_val == 1  
// opcode: fnmsub.s ; op1:f19; op2:f19; op3:f19; dest:f7; op1val:0x7f21f35d; op2val:0x7f21f35d; op3val:0x7f21f35d; valaddr_reg:x16; val_offset:108; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmsub.s, f7, f19, f19, f19, 0x1, 0, x16, 108, x17, x15, 72, x18)

inst_10:
// rs1 == rd == rs3 != rs2, rs1==f30, rs2==f10, rs3==f30, rd==f30, fs1 == 0 and fe1 == 0xfe and fm1 == 0x21f35d and fs2 == 1 and fe2 == 0x82 and fm2 == 0x214d91 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x4163ff and rm_val == 0  
// opcode: fnmsub.s ; op1:f30; op2:f10; op3:f30; dest:f30; op1val:0x7f21f35d; op2val:0xc1214d91; op3val:0x7f21f35d; valaddr_reg:x16; val_offset:120; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f30, f30, f10, f30, 0x0, 0, x16, 120, x17, x15, 80, x18)

inst_11:
// rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1, rs1==f21, rs2==f11, rs3==f22, rd==f11, fs1 == 0 and fe1 == 0xfe and fm1 == 0x06cfd9 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0b00a7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x366662 and rm_val == 4  
// opcode: fnmsub.s ; op1:f21; op2:f11; op3:f22; dest:f11; op1val:0x7f06cfd9; op2val:0x408b00a7; op3val:0x7f366662; valaddr_reg:x16; val_offset:132; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmsub.s, f11, f21, f11, f22, 0x4, 0, x16, 132, x17, x15, 88, x18)

inst_12:
// rs1==f25, rs2==f8, rs3==f29, rd==f4, fs1 == 0 and fe1 == 0xfe and fm1 == 0x06cfd9 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0b00a7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x366662 and rm_val == 3  
// opcode: fnmsub.s ; op1:f25; op2:f8; op3:f29; dest:f4; op1val:0x7f06cfd9; op2val:0x408b00a7; op3val:0x7f366662; valaddr_reg:x16; val_offset:144; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmsub.s, f4, f25, f8, f29, 0x3, 0, x16, 144, x17, x15, 96, x18)

inst_13:
// rs1==f6, rs2==f24, rs3==f12, rd==f9, fs1 == 0 and fe1 == 0xfe and fm1 == 0x06cfd9 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0b00a7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x366662 and rm_val == 2  
// opcode: fnmsub.s ; op1:f6; op2:f24; op3:f12; dest:f9; op1val:0x7f06cfd9; op2val:0x408b00a7; op3val:0x7f366662; valaddr_reg:x16; val_offset:156; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmsub.s, f9, f6, f24, f12, 0x2, 0, x16, 156, x17, x15, 104, x18)

inst_14:
// rs1==f31, rs2==f17, rs3==f7, rd==f5, fs1 == 0 and fe1 == 0xfe and fm1 == 0x06cfd9 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0b00a7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x366662 and rm_val == 1  
// opcode: fnmsub.s ; op1:f31; op2:f17; op3:f7; dest:f5; op1val:0x7f06cfd9; op2val:0x408b00a7; op3val:0x7f366662; valaddr_reg:x16; val_offset:168; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmsub.s, f5, f31, f17, f7, 0x1, 0, x16, 168, x17, x15, 112, x18)

inst_15:
// rs1==f9, rs2==f28, rs3==f24, rd==f31, fs1 == 0 and fe1 == 0xfe and fm1 == 0x06cfd9 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0b00a7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x366662 and rm_val == 0  
// opcode: fnmsub.s ; op1:f9; op2:f28; op3:f24; dest:f31; op1val:0x7f06cfd9; op2val:0x408b00a7; op3val:0x7f366662; valaddr_reg:x16; val_offset:180; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f31, f9, f28, f24, 0x0, 0, x16, 180, x17, x15, 120, x18)

inst_16:
// rs1==f0, rs2==f12, rs3==f21, rd==f29, fs1 == 0 and fe1 == 0xfb and fm1 == 0x15f05d and fs2 == 1 and fe2 == 0x84 and fm2 == 0x403025 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0483c9 and rm_val == 4  
// opcode: fnmsub.s ; op1:f0; op2:f12; op3:f21; dest:f29; op1val:0x7d95f05d; op2val:0xc2403025; op3val:0x7f0483c9; valaddr_reg:x16; val_offset:192; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmsub.s, f29, f0, f12, f21, 0x4, 0, x16, 192, x17, x15, 128, x18)

inst_17:
// rs1==f24, rs2==f9, rs3==f16, rd==f18, fs1 == 0 and fe1 == 0xfb and fm1 == 0x15f05d and fs2 == 1 and fe2 == 0x84 and fm2 == 0x403025 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0483c9 and rm_val == 3  
// opcode: fnmsub.s ; op1:f24; op2:f9; op3:f16; dest:f18; op1val:0x7d95f05d; op2val:0xc2403025; op3val:0x7f0483c9; valaddr_reg:x16; val_offset:204; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmsub.s, f18, f24, f9, f16, 0x3, 0, x16, 204, x17, x15, 136, x18)

inst_18:
// rs1==f28, rs2==f25, rs3==f20, rd==f15, fs1 == 0 and fe1 == 0xfb and fm1 == 0x15f05d and fs2 == 1 and fe2 == 0x84 and fm2 == 0x403025 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0483c9 and rm_val == 2  
// opcode: fnmsub.s ; op1:f28; op2:f25; op3:f20; dest:f15; op1val:0x7d95f05d; op2val:0xc2403025; op3val:0x7f0483c9; valaddr_reg:x16; val_offset:216; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmsub.s, f15, f28, f25, f20, 0x2, 0, x16, 216, x17, x15, 144, x18)

inst_19:
// rs1==f15, rs2==f14, rs3==f4, rd==f24, fs1 == 0 and fe1 == 0xfb and fm1 == 0x15f05d and fs2 == 1 and fe2 == 0x84 and fm2 == 0x403025 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0483c9 and rm_val == 1  
// opcode: fnmsub.s ; op1:f15; op2:f14; op3:f4; dest:f24; op1val:0x7d95f05d; op2val:0xc2403025; op3val:0x7f0483c9; valaddr_reg:x16; val_offset:228; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmsub.s, f24, f15, f14, f4, 0x1, 0, x16, 228, x17, x15, 152, x18)

inst_20:
// rs1==f10, rs2==f31, rs3==f1, rd==f3, fs1 == 0 and fe1 == 0xfb and fm1 == 0x15f05d and fs2 == 1 and fe2 == 0x84 and fm2 == 0x403025 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0483c9 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f31; op3:f1; dest:f3; op1val:0x7d95f05d; op2val:0xc2403025; op3val:0x7f0483c9; valaddr_reg:x16; val_offset:240; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f3, f10, f31, f1, 0x0, 0, x16, 240, x17, x15, 160, x18)

inst_21:
// rs1==f12, rs2==f4, rs3==f25, rd==f19, fs1 == 0 and fe1 == 0xfb and fm1 == 0x4f529d and fs2 == 0 and fe2 == 0x82 and fm2 == 0x127aef and fs3 == 0 and fe3 == 0xfe and fm3 == 0x12bea4 and rm_val == 4  
// opcode: fnmsub.s ; op1:f12; op2:f4; op3:f25; dest:f19; op1val:0x7dcf529d; op2val:0x41127aef; op3val:0x7f12bea4; valaddr_reg:x16; val_offset:252; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmsub.s, f19, f12, f4, f25, 0x4, 0, x16, 252, x17, x15, 168, x18)

inst_22:
// rs1==f20, rs2==f18, rs3==f11, rd==f17, fs1 == 0 and fe1 == 0xfb and fm1 == 0x4f529d and fs2 == 0 and fe2 == 0x82 and fm2 == 0x127aef and fs3 == 0 and fe3 == 0xfe and fm3 == 0x12bea4 and rm_val == 3  
// opcode: fnmsub.s ; op1:f20; op2:f18; op3:f11; dest:f17; op1val:0x7dcf529d; op2val:0x41127aef; op3val:0x7f12bea4; valaddr_reg:x16; val_offset:264; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmsub.s, f17, f20, f18, f11, 0x3, 0, x16, 264, x17, x15, 176, x18)

inst_23:
// rs1==f14, rs2==f13, rs3==f6, rd==f20, fs1 == 0 and fe1 == 0xfb and fm1 == 0x4f529d and fs2 == 0 and fe2 == 0x82 and fm2 == 0x127aef and fs3 == 0 and fe3 == 0xfe and fm3 == 0x12bea4 and rm_val == 2  
// opcode: fnmsub.s ; op1:f14; op2:f13; op3:f6; dest:f20; op1val:0x7dcf529d; op2val:0x41127aef; op3val:0x7f12bea4; valaddr_reg:x16; val_offset:276; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmsub.s, f20, f14, f13, f6, 0x2, 0, x16, 276, x17, x15, 184, x18)

inst_24:
// rs1==f1, rs2==f3, rs3==f31, rd==f23, fs1 == 0 and fe1 == 0xfb and fm1 == 0x4f529d and fs2 == 0 and fe2 == 0x82 and fm2 == 0x127aef and fs3 == 0 and fe3 == 0xfe and fm3 == 0x12bea4 and rm_val == 1  
// opcode: fnmsub.s ; op1:f1; op2:f3; op3:f31; dest:f23; op1val:0x7dcf529d; op2val:0x41127aef; op3val:0x7f12bea4; valaddr_reg:x16; val_offset:288; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmsub.s, f23, f1, f3, f31, 0x1, 0, x16, 288, x17, x15, 192, x18)

inst_25:
// rs1==f16, rs2==f2, rs3==f18, rd==f28, fs1 == 0 and fe1 == 0xfb and fm1 == 0x4f529d and fs2 == 0 and fe2 == 0x82 and fm2 == 0x127aef and fs3 == 0 and fe3 == 0xfe and fm3 == 0x12bea4 and rm_val == 0  
// opcode: fnmsub.s ; op1:f16; op2:f2; op3:f18; dest:f28; op1val:0x7dcf529d; op2val:0x41127aef; op3val:0x7f12bea4; valaddr_reg:x16; val_offset:300; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f28, f16, f2, f18, 0x0, 0, x16, 300, x17, x15, 200, x18)

inst_26:
// rs1==f11, rs2==f30, rs3==f9, rd==f14, fs1 == 0 and fe1 == 0xfd and fm1 == 0x08f8b6 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x01195d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x289736 and rm_val == 4  
// opcode: fnmsub.s ; op1:f11; op2:f30; op3:f9; dest:f14; op1val:0x7e88f8b6; op2val:0xc101195d; op3val:0x7f289736; valaddr_reg:x16; val_offset:312; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmsub.s, f14, f11, f30, f9, 0x4, 0, x16, 312, x17, x15, 208, x18)

inst_27:
// rs1==f3, rs2==f0, rs3==f14, rd==f1, fs1 == 0 and fe1 == 0xfd and fm1 == 0x08f8b6 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x01195d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x289736 and rm_val == 3  
// opcode: fnmsub.s ; op1:f3; op2:f0; op3:f14; dest:f1; op1val:0x7e88f8b6; op2val:0xc101195d; op3val:0x7f289736; valaddr_reg:x16; val_offset:324; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmsub.s, f1, f3, f0, f14, 0x3, 0, x16, 324, x17, x15, 216, x18)

inst_28:
// rs1==f4, rs2==f29, rs3==f17, rd==f21, fs1 == 0 and fe1 == 0xfd and fm1 == 0x08f8b6 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x01195d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x289736 and rm_val == 2  
// opcode: fnmsub.s ; op1:f4; op2:f29; op3:f17; dest:f21; op1val:0x7e88f8b6; op2val:0xc101195d; op3val:0x7f289736; valaddr_reg:x16; val_offset:336; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmsub.s, f21, f4, f29, f17, 0x2, 0, x16, 336, x17, x15, 224, x18)

inst_29:
// rs1==f26, rs2==f7, rs3==f0, rd==f13, fs1 == 0 and fe1 == 0xfd and fm1 == 0x08f8b6 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x01195d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x289736 and rm_val == 1  
// opcode: fnmsub.s ; op1:f26; op2:f7; op3:f0; dest:f13; op1val:0x7e88f8b6; op2val:0xc101195d; op3val:0x7f289736; valaddr_reg:x16; val_offset:348; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f26, f7, f0, 0x1, 0, x16, 348, x17, x15, 232, x18)

inst_30:
// rs1==f17, rs2==f16, rs3==f15, rd==f2, fs1 == 0 and fe1 == 0xfd and fm1 == 0x08f8b6 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x01195d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x289736 and rm_val == 0  
// opcode: fnmsub.s ; op1:f17; op2:f16; op3:f15; dest:f2; op1val:0x7e88f8b6; op2val:0xc101195d; op3val:0x7f289736; valaddr_reg:x16; val_offset:360; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f2, f17, f16, f15, 0x0, 0, x16, 360, x17, x15, 240, x18)

inst_31:
// rs1==f2, rs2==f6, rs3==f3, rd==f25, fs1 == 0 and fe1 == 0xfe and fm1 == 0x2924ed and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4f9565 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x5b61b5 and rm_val == 4  
// opcode: fnmsub.s ; op1:f2; op2:f6; op3:f3; dest:f25; op1val:0x7f2924ed; op2val:0x3f4f9565; op3val:0x7e5b61b5; valaddr_reg:x16; val_offset:372; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmsub.s, f25, f2, f6, f3, 0x4, 0, x16, 372, x17, x15, 248, x18)

inst_32:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2924ed and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4f9565 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x5b61b5 and rm_val == 3  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f2924ed; op2val:0x3f4f9565; op3val:0x7e5b61b5; valaddr_reg:x16; val_offset:384; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 384, x17, x15, 256, x18)

inst_33:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2924ed and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4f9565 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x5b61b5 and rm_val == 2  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f2924ed; op2val:0x3f4f9565; op3val:0x7e5b61b5; valaddr_reg:x16; val_offset:396; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x2, 0, x16, 396, x17, x15, 264, x18)

inst_34:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2924ed and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4f9565 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x5b61b5 and rm_val == 1  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f2924ed; op2val:0x3f4f9565; op3val:0x7e5b61b5; valaddr_reg:x16; val_offset:408; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x1, 0, x16, 408, x17, x15, 272, x18)

inst_35:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2924ed and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4f9565 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x5b61b5 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f2924ed; op2val:0x3f4f9565; op3val:0x7e5b61b5; valaddr_reg:x16; val_offset:420; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 420, x17, x15, 280, x18)

inst_36:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e5241 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3f1f32 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0bf4ed and rm_val == 4  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ede5241; op2val:0xc03f1f32; op3val:0x7f0bf4ed; valaddr_reg:x16; val_offset:432; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x4, 0, x16, 432, x17, x15, 288, x18)

inst_37:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e5241 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3f1f32 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0bf4ed and rm_val == 3  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ede5241; op2val:0xc03f1f32; op3val:0x7f0bf4ed; valaddr_reg:x16; val_offset:444; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 444, x17, x15, 296, x18)

inst_38:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e5241 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3f1f32 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0bf4ed and rm_val == 2  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ede5241; op2val:0xc03f1f32; op3val:0x7f0bf4ed; valaddr_reg:x16; val_offset:456; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x2, 0, x16, 456, x17, x15, 304, x18)

inst_39:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e5241 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3f1f32 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0bf4ed and rm_val == 1  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ede5241; op2val:0xc03f1f32; op3val:0x7f0bf4ed; valaddr_reg:x16; val_offset:468; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x1, 0, x16, 468, x17, x15, 312, x18)

inst_40:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e5241 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3f1f32 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0bf4ed and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ede5241; op2val:0xc03f1f32; op3val:0x7f0bf4ed; valaddr_reg:x16; val_offset:480; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 480, x17, x15, 320, x18)

inst_41:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x14e13e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x13426c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x35a3f8 and rm_val == 4  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e14e13e; op2val:0xc013426c; op3val:0x7f35a3f8; valaddr_reg:x16; val_offset:492; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x4, 0, x16, 492, x17, x15, 328, x18)

inst_42:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x14e13e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x13426c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x35a3f8 and rm_val == 3  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e14e13e; op2val:0xc013426c; op3val:0x7f35a3f8; valaddr_reg:x16; val_offset:504; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 504, x17, x15, 336, x18)

inst_43:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x14e13e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x13426c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x35a3f8 and rm_val == 2  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e14e13e; op2val:0xc013426c; op3val:0x7f35a3f8; valaddr_reg:x16; val_offset:516; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x2, 0, x16, 516, x17, x15, 344, x18)

inst_44:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x14e13e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x13426c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x35a3f8 and rm_val == 1  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e14e13e; op2val:0xc013426c; op3val:0x7f35a3f8; valaddr_reg:x16; val_offset:528; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x1, 0, x16, 528, x17, x15, 352, x18)

inst_45:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x14e13e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x13426c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x35a3f8 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e14e13e; op2val:0xc013426c; op3val:0x7f35a3f8; valaddr_reg:x16; val_offset:540; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 540, x17, x15, 360, x18)

inst_46:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x35a451 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x05c40d and fs3 == 0 and fe3 == 0xfd and fm3 == 0x3ba5e6 and rm_val == 4  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f35a451; op2val:0xbf85c40d; op3val:0x7ebba5e6; valaddr_reg:x16; val_offset:552; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x4, 0, x16, 552, x17, x15, 368, x18)

inst_47:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x35a451 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x05c40d and fs3 == 0 and fe3 == 0xfd and fm3 == 0x3ba5e6 and rm_val == 3  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f35a451; op2val:0xbf85c40d; op3val:0x7ebba5e6; valaddr_reg:x16; val_offset:564; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 564, x17, x15, 376, x18)

inst_48:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x35a451 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x05c40d and fs3 == 0 and fe3 == 0xfd and fm3 == 0x3ba5e6 and rm_val == 2  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f35a451; op2val:0xbf85c40d; op3val:0x7ebba5e6; valaddr_reg:x16; val_offset:576; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x2, 0, x16, 576, x17, x15, 384, x18)

inst_49:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x35a451 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x05c40d and fs3 == 0 and fe3 == 0xfd and fm3 == 0x3ba5e6 and rm_val == 1  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f35a451; op2val:0xbf85c40d; op3val:0x7ebba5e6; valaddr_reg:x16; val_offset:588; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x1, 0, x16, 588, x17, x15, 392, x18)

inst_50:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x35a451 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x05c40d and fs3 == 0 and fe3 == 0xfd and fm3 == 0x3ba5e6 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f35a451; op2val:0xbf85c40d; op3val:0x7ebba5e6; valaddr_reg:x16; val_offset:600; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 600, x17, x15, 400, x18)

inst_51:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5a52ec and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2729b1 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x45c160 and rm_val == 4  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7dda52ec; op2val:0x3fa729b1; op3val:0x7d45c160; valaddr_reg:x16; val_offset:612; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x4, 0, x16, 612, x17, x15, 408, x18)

inst_52:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5a52ec and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2729b1 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x45c160 and rm_val == 3  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7dda52ec; op2val:0x3fa729b1; op3val:0x7d45c160; valaddr_reg:x16; val_offset:624; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 624, x17, x15, 416, x18)

inst_53:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5a52ec and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2729b1 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x45c160 and rm_val == 2  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7dda52ec; op2val:0x3fa729b1; op3val:0x7d45c160; valaddr_reg:x16; val_offset:636; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x2, 0, x16, 636, x17, x15, 424, x18)

inst_54:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5a52ec and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2729b1 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x45c160 and rm_val == 1  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7dda52ec; op2val:0x3fa729b1; op3val:0x7d45c160; valaddr_reg:x16; val_offset:648; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x1, 0, x16, 648, x17, x15, 432, x18)

inst_55:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5a52ec and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2729b1 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x45c160 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7dda52ec; op2val:0x3fa729b1; op3val:0x7d45c160; valaddr_reg:x16; val_offset:660; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 660, x17, x15, 440, x18)

inst_56:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d1061 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6c2a47 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5f4f5d and rm_val == 4  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f2d1061; op2val:0xbf6c2a47; op3val:0x7edf4f5d; valaddr_reg:x16; val_offset:672; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x4, 0, x16, 672, x17, x15, 448, x18)

inst_57:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d1061 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6c2a47 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5f4f5d and rm_val == 3  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f2d1061; op2val:0xbf6c2a47; op3val:0x7edf4f5d; valaddr_reg:x16; val_offset:684; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 684, x17, x15, 456, x18)

inst_58:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d1061 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6c2a47 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5f4f5d and rm_val == 2  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f2d1061; op2val:0xbf6c2a47; op3val:0x7edf4f5d; valaddr_reg:x16; val_offset:696; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x2, 0, x16, 696, x17, x15, 464, x18)

inst_59:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d1061 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6c2a47 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5f4f5d and rm_val == 1  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f2d1061; op2val:0xbf6c2a47; op3val:0x7edf4f5d; valaddr_reg:x16; val_offset:708; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x1, 0, x16, 708, x17, x15, 472, x18)

inst_60:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d1061 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6c2a47 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5f4f5d and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f2d1061; op2val:0xbf6c2a47; op3val:0x7edf4f5d; valaddr_reg:x16; val_offset:720; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 720, x17, x15, 480, x18)

inst_61:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f1227 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x06fb59 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x797e34 and rm_val == 4  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ebf1227; op2val:0xbf86fb59; op3val:0x7ef97e34; valaddr_reg:x16; val_offset:732; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x4, 0, x16, 732, x17, x15, 488, x18)

inst_62:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f1227 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x06fb59 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x797e34 and rm_val == 3  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ebf1227; op2val:0xbf86fb59; op3val:0x7ef97e34; valaddr_reg:x16; val_offset:744; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 744, x17, x15, 496, x18)

inst_63:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f1227 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x06fb59 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x797e34 and rm_val == 2  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ebf1227; op2val:0xbf86fb59; op3val:0x7ef97e34; valaddr_reg:x16; val_offset:756; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x2, 0, x16, 756, x17, x15, 504, x18)

inst_64:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f1227 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x06fb59 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x797e34 and rm_val == 1  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ebf1227; op2val:0xbf86fb59; op3val:0x7ef97e34; valaddr_reg:x16; val_offset:768; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x1, 0, x16, 768, x17, x15, 512, x18)

inst_65:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f1227 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x06fb59 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x797e34 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ebf1227; op2val:0xbf86fb59; op3val:0x7ef97e34; valaddr_reg:x16; val_offset:780; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 780, x17, x15, 520, x18)

inst_66:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01f5dd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1a5d90 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x04bacd and rm_val == 4  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e81f5dd; op2val:0xc01a5d90; op3val:0x7f04bacd; valaddr_reg:x16; val_offset:792; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x4, 0, x16, 792, x17, x15, 528, x18)

inst_67:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01f5dd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1a5d90 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x04bacd and rm_val == 3  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e81f5dd; op2val:0xc01a5d90; op3val:0x7f04bacd; valaddr_reg:x16; val_offset:804; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 804, x17, x15, 536, x18)

inst_68:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01f5dd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1a5d90 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x04bacd and rm_val == 2  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e81f5dd; op2val:0xc01a5d90; op3val:0x7f04bacd; valaddr_reg:x16; val_offset:816; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x2, 0, x16, 816, x17, x15, 544, x18)

inst_69:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01f5dd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1a5d90 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x04bacd and rm_val == 1  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e81f5dd; op2val:0xc01a5d90; op3val:0x7f04bacd; valaddr_reg:x16; val_offset:828; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x1, 0, x16, 828, x17, x15, 552, x18)

inst_70:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01f5dd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1a5d90 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x04bacd and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e81f5dd; op2val:0xc01a5d90; op3val:0x7f04bacd; valaddr_reg:x16; val_offset:840; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 840, x17, x15, 560, x18)

inst_71:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x10d8c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ce591 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7dc386 and rm_val == 4  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e90d8c5; op2val:0xc08ce591; op3val:0x7efdc386; valaddr_reg:x16; val_offset:852; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x4, 0, x16, 852, x17, x15, 568, x18)

inst_72:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x10d8c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ce591 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7dc386 and rm_val == 3  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e90d8c5; op2val:0xc08ce591; op3val:0x7efdc386; valaddr_reg:x16; val_offset:864; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 864, x17, x15, 576, x18)

inst_73:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x10d8c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ce591 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7dc386 and rm_val == 2  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e90d8c5; op2val:0xc08ce591; op3val:0x7efdc386; valaddr_reg:x16; val_offset:876; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x2, 0, x16, 876, x17, x15, 584, x18)

inst_74:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x10d8c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ce591 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7dc386 and rm_val == 1  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e90d8c5; op2val:0xc08ce591; op3val:0x7efdc386; valaddr_reg:x16; val_offset:888; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x1, 0, x16, 888, x17, x15, 592, x18)

inst_75:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x10d8c5 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0ce591 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7dc386 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e90d8c5; op2val:0xc08ce591; op3val:0x7efdc386; valaddr_reg:x16; val_offset:900; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 900, x17, x15, 600, x18)

inst_76:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x41cef4 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d7248 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x6e24fd and rm_val == 4  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d41cef4; op2val:0xc1cd7248; op3val:0x7eee24fd; valaddr_reg:x16; val_offset:912; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x4, 0, x16, 912, x17, x15, 608, x18)

inst_77:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x41cef4 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d7248 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x6e24fd and rm_val == 3  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d41cef4; op2val:0xc1cd7248; op3val:0x7eee24fd; valaddr_reg:x16; val_offset:924; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 924, x17, x15, 616, x18)

inst_78:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x41cef4 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d7248 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x6e24fd and rm_val == 2  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d41cef4; op2val:0xc1cd7248; op3val:0x7eee24fd; valaddr_reg:x16; val_offset:936; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x2, 0, x16, 936, x17, x15, 624, x18)

inst_79:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x41cef4 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d7248 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x6e24fd and rm_val == 1  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d41cef4; op2val:0xc1cd7248; op3val:0x7eee24fd; valaddr_reg:x16; val_offset:948; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x1, 0, x16, 948, x17, x15, 632, x18)

inst_80:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x41cef4 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d7248 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x6e24fd and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d41cef4; op2val:0xc1cd7248; op3val:0x7eee24fd; valaddr_reg:x16; val_offset:960; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 960, x17, x15, 640, x18)

inst_81:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x466afe and fs2 == 1 and fe2 == 0x81 and fm2 == 0x76adec and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3e633d and rm_val == 4  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e466afe; op2val:0xc0f6adec; op3val:0x7f3e633d; valaddr_reg:x16; val_offset:972; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x4, 0, x16, 972, x17, x15, 648, x18)

inst_82:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x466afe and fs2 == 1 and fe2 == 0x81 and fm2 == 0x76adec and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3e633d and rm_val == 3  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e466afe; op2val:0xc0f6adec; op3val:0x7f3e633d; valaddr_reg:x16; val_offset:984; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 984, x17, x15, 656, x18)

inst_83:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x466afe and fs2 == 1 and fe2 == 0x81 and fm2 == 0x76adec and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3e633d and rm_val == 2  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e466afe; op2val:0xc0f6adec; op3val:0x7f3e633d; valaddr_reg:x16; val_offset:996; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x2, 0, x16, 996, x17, x15, 664, x18)

inst_84:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x466afe and fs2 == 1 and fe2 == 0x81 and fm2 == 0x76adec and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3e633d and rm_val == 1  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e466afe; op2val:0xc0f6adec; op3val:0x7f3e633d; valaddr_reg:x16; val_offset:1008; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x1, 0, x16, 1008, x17, x15, 672, x18)

inst_85:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x466afe and fs2 == 1 and fe2 == 0x81 and fm2 == 0x76adec and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3e633d and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e466afe; op2val:0xc0f6adec; op3val:0x7f3e633d; valaddr_reg:x16; val_offset:1020; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1020, x17, x15, 680, x18)

inst_86:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1190a0 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3c0882 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x2eb0d1 and rm_val == 4  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e9190a0; op2val:0xc03c0882; op3val:0x7daeb0d1; valaddr_reg:x16; val_offset:1032; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x4, 0, x16, 1032, x17, x15, 688, x18)

inst_87:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1190a0 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3c0882 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x2eb0d1 and rm_val == 3  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e9190a0; op2val:0xc03c0882; op3val:0x7daeb0d1; valaddr_reg:x16; val_offset:1044; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1044, x17, x15, 696, x18)

inst_88:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1190a0 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3c0882 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x2eb0d1 and rm_val == 2  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e9190a0; op2val:0xc03c0882; op3val:0x7daeb0d1; valaddr_reg:x16; val_offset:1056; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x2, 0, x16, 1056, x17, x15, 704, x18)

inst_89:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1190a0 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3c0882 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x2eb0d1 and rm_val == 1  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e9190a0; op2val:0xc03c0882; op3val:0x7daeb0d1; valaddr_reg:x16; val_offset:1068; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x1, 0, x16, 1068, x17, x15, 712, x18)

inst_90:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1190a0 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3c0882 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x2eb0d1 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e9190a0; op2val:0xc03c0882; op3val:0x7daeb0d1; valaddr_reg:x16; val_offset:1080; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1080, x17, x15, 720, x18)

inst_91:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c8afc and fs2 == 1 and fe2 == 0x81 and fm2 == 0x154df4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2d3243 and rm_val == 4  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e9c8afc; op2val:0xc0954df4; op3val:0x7f2d3243; valaddr_reg:x16; val_offset:1092; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x4, 0, x16, 1092, x17, x15, 728, x18)

inst_92:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c8afc and fs2 == 1 and fe2 == 0x81 and fm2 == 0x154df4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2d3243 and rm_val == 3  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e9c8afc; op2val:0xc0954df4; op3val:0x7f2d3243; valaddr_reg:x16; val_offset:1104; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1104, x17, x15, 736, x18)

inst_93:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c8afc and fs2 == 1 and fe2 == 0x81 and fm2 == 0x154df4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2d3243 and rm_val == 2  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e9c8afc; op2val:0xc0954df4; op3val:0x7f2d3243; valaddr_reg:x16; val_offset:1116; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x2, 0, x16, 1116, x17, x15, 744, x18)

inst_94:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c8afc and fs2 == 1 and fe2 == 0x81 and fm2 == 0x154df4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2d3243 and rm_val == 1  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e9c8afc; op2val:0xc0954df4; op3val:0x7f2d3243; valaddr_reg:x16; val_offset:1128; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x1, 0, x16, 1128, x17, x15, 752, x18)

inst_95:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c8afc and fs2 == 1 and fe2 == 0x81 and fm2 == 0x154df4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2d3243 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e9c8afc; op2val:0xc0954df4; op3val:0x7f2d3243; valaddr_reg:x16; val_offset:1140; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1140, x17, x15, 760, x18)

inst_96:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x75a735 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x7d76b3 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x4ce09d and rm_val == 4  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7c75a735; op2val:0xc27d76b3; op3val:0x7e4ce09d; valaddr_reg:x16; val_offset:1152; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x4, 0, x16, 1152, x17, x15, 768, x18)

inst_97:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x75a735 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x7d76b3 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x4ce09d and rm_val == 3  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7c75a735; op2val:0xc27d76b3; op3val:0x7e4ce09d; valaddr_reg:x16; val_offset:1164; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1164, x17, x15, 776, x18)

inst_98:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x75a735 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x7d76b3 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x4ce09d and rm_val == 2  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7c75a735; op2val:0xc27d76b3; op3val:0x7e4ce09d; valaddr_reg:x16; val_offset:1176; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x2, 0, x16, 1176, x17, x15, 784, x18)

inst_99:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x75a735 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x7d76b3 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x4ce09d and rm_val == 1  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7c75a735; op2val:0xc27d76b3; op3val:0x7e4ce09d; valaddr_reg:x16; val_offset:1188; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x1, 0, x16, 1188, x17, x15, 792, x18)

inst_100:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x75a735 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x7d76b3 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x4ce09d and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7c75a735; op2val:0xc27d76b3; op3val:0x7e4ce09d; valaddr_reg:x16; val_offset:1200; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1200, x17, x15, 800, x18)

inst_101:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0992a2 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x5c7972 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x33da3d and rm_val == 4  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d8992a2; op2val:0xc15c7972; op3val:0x7e33da3d; valaddr_reg:x16; val_offset:1212; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x4, 0, x16, 1212, x17, x15, 808, x18)

inst_102:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0992a2 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x5c7972 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x33da3d and rm_val == 3  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d8992a2; op2val:0xc15c7972; op3val:0x7e33da3d; valaddr_reg:x16; val_offset:1224; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1224, x17, x15, 816, x18)

inst_103:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0992a2 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x5c7972 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x33da3d and rm_val == 2  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d8992a2; op2val:0xc15c7972; op3val:0x7e33da3d; valaddr_reg:x16; val_offset:1236; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x2, 0, x16, 1236, x17, x15, 824, x18)

inst_104:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0992a2 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x5c7972 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x33da3d and rm_val == 1  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d8992a2; op2val:0xc15c7972; op3val:0x7e33da3d; valaddr_reg:x16; val_offset:1248; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x1, 0, x16, 1248, x17, x15, 832, x18)

inst_105:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0992a2 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x5c7972 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x33da3d and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d8992a2; op2val:0xc15c7972; op3val:0x7e33da3d; valaddr_reg:x16; val_offset:1260; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1260, x17, x15, 840, x18)

inst_106:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13a21e and fs2 == 1 and fe2 == 0x82 and fm2 == 0x185c39 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1f75c7 and rm_val == 4  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e13a21e; op2val:0xc1185c39; op3val:0x7f1f75c7; valaddr_reg:x16; val_offset:1272; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x4, 0, x16, 1272, x17, x15, 848, x18)

inst_107:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13a21e and fs2 == 1 and fe2 == 0x82 and fm2 == 0x185c39 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1f75c7 and rm_val == 3  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e13a21e; op2val:0xc1185c39; op3val:0x7f1f75c7; valaddr_reg:x16; val_offset:1284; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1284, x17, x15, 856, x18)

inst_108:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13a21e and fs2 == 1 and fe2 == 0x82 and fm2 == 0x185c39 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1f75c7 and rm_val == 2  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e13a21e; op2val:0xc1185c39; op3val:0x7f1f75c7; valaddr_reg:x16; val_offset:1296; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x2, 0, x16, 1296, x17, x15, 864, x18)

inst_109:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13a21e and fs2 == 1 and fe2 == 0x82 and fm2 == 0x185c39 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1f75c7 and rm_val == 1  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e13a21e; op2val:0xc1185c39; op3val:0x7f1f75c7; valaddr_reg:x16; val_offset:1308; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x1, 0, x16, 1308, x17, x15, 872, x18)

inst_110:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13a21e and fs2 == 1 and fe2 == 0x82 and fm2 == 0x185c39 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1f75c7 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e13a21e; op2val:0xc1185c39; op3val:0x7f1f75c7; valaddr_reg:x16; val_offset:1320; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1320, x17, x15, 880, x18)

inst_111:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e00ba and fs2 == 1 and fe2 == 0x80 and fm2 == 0x532663 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x3e12c6 and rm_val == 4  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eae00ba; op2val:0xc0532663; op3val:0x7ebe12c6; valaddr_reg:x16; val_offset:1332; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x4, 0, x16, 1332, x17, x15, 888, x18)

inst_112:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e00ba and fs2 == 1 and fe2 == 0x80 and fm2 == 0x532663 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x3e12c6 and rm_val == 3  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eae00ba; op2val:0xc0532663; op3val:0x7ebe12c6; valaddr_reg:x16; val_offset:1344; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1344, x17, x15, 896, x18)

inst_113:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e00ba and fs2 == 1 and fe2 == 0x80 and fm2 == 0x532663 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x3e12c6 and rm_val == 2  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eae00ba; op2val:0xc0532663; op3val:0x7ebe12c6; valaddr_reg:x16; val_offset:1356; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x2, 0, x16, 1356, x17, x15, 904, x18)

inst_114:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e00ba and fs2 == 1 and fe2 == 0x80 and fm2 == 0x532663 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x3e12c6 and rm_val == 1  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eae00ba; op2val:0xc0532663; op3val:0x7ebe12c6; valaddr_reg:x16; val_offset:1368; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x1, 0, x16, 1368, x17, x15, 912, x18)

inst_115:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e00ba and fs2 == 1 and fe2 == 0x80 and fm2 == 0x532663 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x3e12c6 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eae00ba; op2val:0xc0532663; op3val:0x7ebe12c6; valaddr_reg:x16; val_offset:1380; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1380, x17, x15, 920, x18)

inst_116:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x767a3b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x117d17 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x304eaf and rm_val == 4  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ef67a3b; op2val:0xc0117d17; op3val:0x7eb04eaf; valaddr_reg:x16; val_offset:1392; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x4, 0, x16, 1392, x17, x15, 928, x18)

inst_117:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x767a3b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x117d17 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x304eaf and rm_val == 3  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ef67a3b; op2val:0xc0117d17; op3val:0x7eb04eaf; valaddr_reg:x16; val_offset:1404; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1404, x17, x15, 936, x18)

inst_118:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x767a3b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x117d17 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x304eaf and rm_val == 2  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ef67a3b; op2val:0xc0117d17; op3val:0x7eb04eaf; valaddr_reg:x16; val_offset:1416; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x2, 0, x16, 1416, x17, x15, 944, x18)

inst_119:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x767a3b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x117d17 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x304eaf and rm_val == 1  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ef67a3b; op2val:0xc0117d17; op3val:0x7eb04eaf; valaddr_reg:x16; val_offset:1428; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x1, 0, x16, 1428, x17, x15, 952, x18)

inst_120:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x767a3b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x117d17 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x304eaf and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ef67a3b; op2val:0xc0117d17; op3val:0x7eb04eaf; valaddr_reg:x16; val_offset:1440; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1440, x17, x15, 960, x18)

inst_121:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fd529 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x1af01b and fs3 == 0 and fe3 == 0xfc and fm3 == 0x20d13f and rm_val == 4  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f3fd529; op2val:0xbf9af01b; op3val:0x7e20d13f; valaddr_reg:x16; val_offset:1452; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x4, 0, x16, 1452, x17, x15, 968, x18)

inst_122:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fd529 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x1af01b and fs3 == 0 and fe3 == 0xfc and fm3 == 0x20d13f and rm_val == 3  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f3fd529; op2val:0xbf9af01b; op3val:0x7e20d13f; valaddr_reg:x16; val_offset:1464; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1464, x17, x15, 976, x18)

inst_123:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fd529 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x1af01b and fs3 == 0 and fe3 == 0xfc and fm3 == 0x20d13f and rm_val == 2  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f3fd529; op2val:0xbf9af01b; op3val:0x7e20d13f; valaddr_reg:x16; val_offset:1476; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x2, 0, x16, 1476, x17, x15, 984, x18)

inst_124:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fd529 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x1af01b and fs3 == 0 and fe3 == 0xfc and fm3 == 0x20d13f and rm_val == 1  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f3fd529; op2val:0xbf9af01b; op3val:0x7e20d13f; valaddr_reg:x16; val_offset:1488; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x1, 0, x16, 1488, x17, x15, 992, x18)

inst_125:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fd529 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x1af01b and fs3 == 0 and fe3 == 0xfc and fm3 == 0x20d13f and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f3fd529; op2val:0xbf9af01b; op3val:0x7e20d13f; valaddr_reg:x16; val_offset:1500; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1500, x17, x15, 1000, x18)

inst_126:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x02d835 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x6a4d3e and fs3 == 0 and fe3 == 0xfc and fm3 == 0x3e08e0 and rm_val == 4  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d82d835; op2val:0xc16a4d3e; op3val:0x7e3e08e0; valaddr_reg:x16; val_offset:1512; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x4, 0, x16, 1512, x17, x15, 1008, x18)

inst_127:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x02d835 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x6a4d3e and fs3 == 0 and fe3 == 0xfc and fm3 == 0x3e08e0 and rm_val == 3  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d82d835; op2val:0xc16a4d3e; op3val:0x7e3e08e0; valaddr_reg:x16; val_offset:1524; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1524, x17, x15, 1016, x18)

inst_128:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x02d835 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x6a4d3e and fs3 == 0 and fe3 == 0xfc and fm3 == 0x3e08e0 and rm_val == 2  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d82d835; op2val:0xc16a4d3e; op3val:0x7e3e08e0; valaddr_reg:x16; val_offset:1536; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x2, 0, x16, 1536, x17, x15, 1024, x18)

inst_129:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x02d835 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x6a4d3e and fs3 == 0 and fe3 == 0xfc and fm3 == 0x3e08e0 and rm_val == 1  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d82d835; op2val:0xc16a4d3e; op3val:0x7e3e08e0; valaddr_reg:x16; val_offset:1548; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x1, 0, x16, 1548, x17, x15, 1032, x18)

inst_130:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x02d835 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x6a4d3e and fs3 == 0 and fe3 == 0xfc and fm3 == 0x3e08e0 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d82d835; op2val:0xc16a4d3e; op3val:0x7e3e08e0; valaddr_reg:x16; val_offset:1560; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1560, x17, x15, 1040, x18)

inst_131:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x420b54 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x57eaea and fs3 == 0 and fe3 == 0xfe and fm3 == 0x075328 and rm_val == 4  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7dc20b54; op2val:0xc157eaea; op3val:0x7f075328; valaddr_reg:x16; val_offset:1572; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x4, 0, x16, 1572, x17, x15, 1048, x18)

inst_132:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x420b54 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x57eaea and fs3 == 0 and fe3 == 0xfe and fm3 == 0x075328 and rm_val == 3  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7dc20b54; op2val:0xc157eaea; op3val:0x7f075328; valaddr_reg:x16; val_offset:1584; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1584, x17, x15, 1056, x18)

inst_133:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x420b54 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x57eaea and fs3 == 0 and fe3 == 0xfe and fm3 == 0x075328 and rm_val == 2  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7dc20b54; op2val:0xc157eaea; op3val:0x7f075328; valaddr_reg:x16; val_offset:1596; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x2, 0, x16, 1596, x17, x15, 1064, x18)

inst_134:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x420b54 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x57eaea and fs3 == 0 and fe3 == 0xfe and fm3 == 0x075328 and rm_val == 1  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7dc20b54; op2val:0xc157eaea; op3val:0x7f075328; valaddr_reg:x16; val_offset:1608; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x1, 0, x16, 1608, x17, x15, 1072, x18)

inst_135:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x420b54 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x57eaea and fs3 == 0 and fe3 == 0xfe and fm3 == 0x075328 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7dc20b54; op2val:0xc157eaea; op3val:0x7f075328; valaddr_reg:x16; val_offset:1620; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1620, x17, x15, 1080, x18)

inst_136:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2e1c2f and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0a7db2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x38c2b9 and rm_val == 4  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e2e1c2f; op2val:0xc10a7db2; op3val:0x7f38c2b9; valaddr_reg:x16; val_offset:1632; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x4, 0, x16, 1632, x17, x15, 1088, x18)

inst_137:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2e1c2f and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0a7db2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x38c2b9 and rm_val == 3  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e2e1c2f; op2val:0xc10a7db2; op3val:0x7f38c2b9; valaddr_reg:x16; val_offset:1644; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1644, x17, x15, 1096, x18)

inst_138:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2e1c2f and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0a7db2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x38c2b9 and rm_val == 2  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e2e1c2f; op2val:0xc10a7db2; op3val:0x7f38c2b9; valaddr_reg:x16; val_offset:1656; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x2, 0, x16, 1656, x17, x15, 1104, x18)

inst_139:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2e1c2f and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0a7db2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x38c2b9 and rm_val == 1  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e2e1c2f; op2val:0xc10a7db2; op3val:0x7f38c2b9; valaddr_reg:x16; val_offset:1668; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x1, 0, x16, 1668, x17, x15, 1112, x18)

inst_140:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x17cb34 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x1edd6b and fs3 == 0 and fe3 == 0xfb and fm3 == 0x66a542 and rm_val == 2  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e17cb34; op2val:0x421edd6b; op3val:0x7de6a542; valaddr_reg:x16; val_offset:1680; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x2, 0, x16, 1680, x17, x15, 1120, x18)

inst_141:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x17cb34 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x1edd6b and fs3 == 0 and fe3 == 0xfb and fm3 == 0x66a542 and rm_val == 1  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e17cb34; op2val:0x421edd6b; op3val:0x7de6a542; valaddr_reg:x16; val_offset:1692; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x1, 0, x16, 1692, x17, x15, 1128, x18)

inst_142:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x17cb34 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x1edd6b and fs3 == 0 and fe3 == 0xfb and fm3 == 0x66a542 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e17cb34; op2val:0x421edd6b; op3val:0x7de6a542; valaddr_reg:x16; val_offset:1704; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1704, x17, x15, 1136, x18)

inst_143:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21f35d and fs2 == 1 and fe2 == 0x82 and fm2 == 0x214d91 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x4163ff and rm_val == 4  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f21f35d; op2val:0xc1214d91; op3val:0x7ec163ff; valaddr_reg:x16; val_offset:1716; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x4, 0, x16, 1716, x17, x15, 1144, x18)

inst_144:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21f35d and fs2 == 1 and fe2 == 0x82 and fm2 == 0x214d91 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x4163ff and rm_val == 3  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f21f35d; op2val:0xc1214d91; op3val:0x7ec163ff; valaddr_reg:x16; val_offset:1728; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x3, 0, x16, 1728, x17, x15, 1152, x18)

inst_145:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21f35d and fs2 == 1 and fe2 == 0x82 and fm2 == 0x214d91 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x4163ff and rm_val == 2  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f21f35d; op2val:0xc1214d91; op3val:0x7ec163ff; valaddr_reg:x16; val_offset:1740; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x2, 0, x16, 1740, x17, x15, 1160, x18)

inst_146:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21f35d and fs2 == 1 and fe2 == 0x82 and fm2 == 0x214d91 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x4163ff and rm_val == 1  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f21f35d; op2val:0xc1214d91; op3val:0x7ec163ff; valaddr_reg:x16; val_offset:1752; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x1, 0, x16, 1752, x17, x15, 1168, x18)

inst_147:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21f35d and fs2 == 1 and fe2 == 0x82 and fm2 == 0x214d91 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x4163ff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f21f35d; op2val:0xc1214d91; op3val:0x7ec163ff; valaddr_reg:x16; val_offset:1764; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1764, x17, x15, 1176, x18)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
test_fp:
.word 0x7e2e1c2f
.word 0xc10a7db2
.word 0x7f38c2b9
.word 0x7e17cb34
.word 0x421edd6b
.word 0x7de6a542
.word 0x7e17cb34
.word 0x421edd6b
.word 0x7de6a542
.word 0x7e17cb34
.word 0x7e17cb34
.word 0x7de6a542
.word 0x7e17cb34
.word 0x7e17cb34
.word 0x7e17cb34
.word 0x7e17cb34
.word 0x421edd6b
.word 0x421edd6b
.word 0x7f21f35d
.word 0x7f21f35d
.word 0x7ec163ff
.word 0x7f21f35d
.word 0xc1214d91
.word 0x7f21f35d
.word 0x7f21f35d
.word 0xc1214d91
.word 0xc1214d91
.word 0x7f21f35d
.word 0x7f21f35d
.word 0x7f21f35d
.word 0x7f21f35d
.word 0xc1214d91
.word 0x7f21f35d
.word 0x7f06cfd9
.word 0x408b00a7
.word 0x7f366662
.word 0x7f06cfd9
.word 0x408b00a7
.word 0x7f366662
.word 0x7f06cfd9
.word 0x408b00a7
.word 0x7f366662
.word 0x7f06cfd9
.word 0x408b00a7
.word 0x7f366662
.word 0x7f06cfd9
.word 0x408b00a7
.word 0x7f366662
.word 0x7d95f05d
.word 0xc2403025
.word 0x7f0483c9
.word 0x7d95f05d
.word 0xc2403025
.word 0x7f0483c9
.word 0x7d95f05d
.word 0xc2403025
.word 0x7f0483c9
.word 0x7d95f05d
.word 0xc2403025
.word 0x7f0483c9
.word 0x7d95f05d
.word 0xc2403025
.word 0x7f0483c9
.word 0x7dcf529d
.word 0x41127aef
.word 0x7f12bea4
.word 0x7dcf529d
.word 0x41127aef
.word 0x7f12bea4
.word 0x7dcf529d
.word 0x41127aef
.word 0x7f12bea4
.word 0x7dcf529d
.word 0x41127aef
.word 0x7f12bea4
.word 0x7dcf529d
.word 0x41127aef
.word 0x7f12bea4
.word 0x7e88f8b6
.word 0xc101195d
.word 0x7f289736
.word 0x7e88f8b6
.word 0xc101195d
.word 0x7f289736
.word 0x7e88f8b6
.word 0xc101195d
.word 0x7f289736
.word 0x7e88f8b6
.word 0xc101195d
.word 0x7f289736
.word 0x7e88f8b6
.word 0xc101195d
.word 0x7f289736
.word 0x7f2924ed
.word 0x3f4f9565
.word 0x7e5b61b5
.word 0x7f2924ed
.word 0x3f4f9565
.word 0x7e5b61b5
.word 0x7f2924ed
.word 0x3f4f9565
.word 0x7e5b61b5
.word 0x7f2924ed
.word 0x3f4f9565
.word 0x7e5b61b5
.word 0x7f2924ed
.word 0x3f4f9565
.word 0x7e5b61b5
.word 0x7ede5241
.word 0xc03f1f32
.word 0x7f0bf4ed
.word 0x7ede5241
.word 0xc03f1f32
.word 0x7f0bf4ed
.word 0x7ede5241
.word 0xc03f1f32
.word 0x7f0bf4ed
.word 0x7ede5241
.word 0xc03f1f32
.word 0x7f0bf4ed
.word 0x7ede5241
.word 0xc03f1f32
.word 0x7f0bf4ed
.word 0x7e14e13e
.word 0xc013426c
.word 0x7f35a3f8
.word 0x7e14e13e
.word 0xc013426c
.word 0x7f35a3f8
.word 0x7e14e13e
.word 0xc013426c
.word 0x7f35a3f8
.word 0x7e14e13e
.word 0xc013426c
.word 0x7f35a3f8
.word 0x7e14e13e
.word 0xc013426c
.word 0x7f35a3f8
.word 0x7f35a451
.word 0xbf85c40d
.word 0x7ebba5e6
.word 0x7f35a451
.word 0xbf85c40d
.word 0x7ebba5e6
.word 0x7f35a451
.word 0xbf85c40d
.word 0x7ebba5e6
.word 0x7f35a451
.word 0xbf85c40d
.word 0x7ebba5e6
.word 0x7f35a451
.word 0xbf85c40d
.word 0x7ebba5e6
.word 0x7dda52ec
.word 0x3fa729b1
.word 0x7d45c160
.word 0x7dda52ec
.word 0x3fa729b1
.word 0x7d45c160
.word 0x7dda52ec
.word 0x3fa729b1
.word 0x7d45c160
.word 0x7dda52ec
.word 0x3fa729b1
.word 0x7d45c160
.word 0x7dda52ec
.word 0x3fa729b1
.word 0x7d45c160
.word 0x7f2d1061
.word 0xbf6c2a47
.word 0x7edf4f5d
.word 0x7f2d1061
.word 0xbf6c2a47
.word 0x7edf4f5d
.word 0x7f2d1061
.word 0xbf6c2a47
.word 0x7edf4f5d
.word 0x7f2d1061
.word 0xbf6c2a47
.word 0x7edf4f5d
.word 0x7f2d1061
.word 0xbf6c2a47
.word 0x7edf4f5d
.word 0x7ebf1227
.word 0xbf86fb59
.word 0x7ef97e34
.word 0x7ebf1227
.word 0xbf86fb59
.word 0x7ef97e34
.word 0x7ebf1227
.word 0xbf86fb59
.word 0x7ef97e34
.word 0x7ebf1227
.word 0xbf86fb59
.word 0x7ef97e34
.word 0x7ebf1227
.word 0xbf86fb59
.word 0x7ef97e34
.word 0x7e81f5dd
.word 0xc01a5d90
.word 0x7f04bacd
.word 0x7e81f5dd
.word 0xc01a5d90
.word 0x7f04bacd
.word 0x7e81f5dd
.word 0xc01a5d90
.word 0x7f04bacd
.word 0x7e81f5dd
.word 0xc01a5d90
.word 0x7f04bacd
.word 0x7e81f5dd
.word 0xc01a5d90
.word 0x7f04bacd
.word 0x7e90d8c5
.word 0xc08ce591
.word 0x7efdc386
.word 0x7e90d8c5
.word 0xc08ce591
.word 0x7efdc386
.word 0x7e90d8c5
.word 0xc08ce591
.word 0x7efdc386
.word 0x7e90d8c5
.word 0xc08ce591
.word 0x7efdc386
.word 0x7e90d8c5
.word 0xc08ce591
.word 0x7efdc386
.word 0x7d41cef4
.word 0xc1cd7248
.word 0x7eee24fd
.word 0x7d41cef4
.word 0xc1cd7248
.word 0x7eee24fd
.word 0x7d41cef4
.word 0xc1cd7248
.word 0x7eee24fd
.word 0x7d41cef4
.word 0xc1cd7248
.word 0x7eee24fd
.word 0x7d41cef4
.word 0xc1cd7248
.word 0x7eee24fd
.word 0x7e466afe
.word 0xc0f6adec
.word 0x7f3e633d
.word 0x7e466afe
.word 0xc0f6adec
.word 0x7f3e633d
.word 0x7e466afe
.word 0xc0f6adec
.word 0x7f3e633d
.word 0x7e466afe
.word 0xc0f6adec
.word 0x7f3e633d
.word 0x7e466afe
.word 0xc0f6adec
.word 0x7f3e633d
.word 0x7e9190a0
.word 0xc03c0882
.word 0x7daeb0d1
.word 0x7e9190a0
.word 0xc03c0882
.word 0x7daeb0d1
.word 0x7e9190a0
.word 0xc03c0882
.word 0x7daeb0d1
.word 0x7e9190a0
.word 0xc03c0882
.word 0x7daeb0d1
.word 0x7e9190a0
.word 0xc03c0882
.word 0x7daeb0d1
.word 0x7e9c8afc
.word 0xc0954df4
.word 0x7f2d3243
.word 0x7e9c8afc
.word 0xc0954df4
.word 0x7f2d3243
.word 0x7e9c8afc
.word 0xc0954df4
.word 0x7f2d3243
.word 0x7e9c8afc
.word 0xc0954df4
.word 0x7f2d3243
.word 0x7e9c8afc
.word 0xc0954df4
.word 0x7f2d3243
.word 0x7c75a735
.word 0xc27d76b3
.word 0x7e4ce09d
.word 0x7c75a735
.word 0xc27d76b3
.word 0x7e4ce09d
.word 0x7c75a735
.word 0xc27d76b3
.word 0x7e4ce09d
.word 0x7c75a735
.word 0xc27d76b3
.word 0x7e4ce09d
.word 0x7c75a735
.word 0xc27d76b3
.word 0x7e4ce09d
.word 0x7d8992a2
.word 0xc15c7972
.word 0x7e33da3d
.word 0x7d8992a2
.word 0xc15c7972
.word 0x7e33da3d
.word 0x7d8992a2
.word 0xc15c7972
.word 0x7e33da3d
.word 0x7d8992a2
.word 0xc15c7972
.word 0x7e33da3d
.word 0x7d8992a2
.word 0xc15c7972
.word 0x7e33da3d
.word 0x7e13a21e
.word 0xc1185c39
.word 0x7f1f75c7
.word 0x7e13a21e
.word 0xc1185c39
.word 0x7f1f75c7
.word 0x7e13a21e
.word 0xc1185c39
.word 0x7f1f75c7
.word 0x7e13a21e
.word 0xc1185c39
.word 0x7f1f75c7
.word 0x7e13a21e
.word 0xc1185c39
.word 0x7f1f75c7
.word 0x7eae00ba
.word 0xc0532663
.word 0x7ebe12c6
.word 0x7eae00ba
.word 0xc0532663
.word 0x7ebe12c6
.word 0x7eae00ba
.word 0xc0532663
.word 0x7ebe12c6
.word 0x7eae00ba
.word 0xc0532663
.word 0x7ebe12c6
.word 0x7eae00ba
.word 0xc0532663
.word 0x7ebe12c6
.word 0x7ef67a3b
.word 0xc0117d17
.word 0x7eb04eaf
.word 0x7ef67a3b
.word 0xc0117d17
.word 0x7eb04eaf
.word 0x7ef67a3b
.word 0xc0117d17
.word 0x7eb04eaf
.word 0x7ef67a3b
.word 0xc0117d17
.word 0x7eb04eaf
.word 0x7ef67a3b
.word 0xc0117d17
.word 0x7eb04eaf
.word 0x7f3fd529
.word 0xbf9af01b
.word 0x7e20d13f
.word 0x7f3fd529
.word 0xbf9af01b
.word 0x7e20d13f
.word 0x7f3fd529
.word 0xbf9af01b
.word 0x7e20d13f
.word 0x7f3fd529
.word 0xbf9af01b
.word 0x7e20d13f
.word 0x7f3fd529
.word 0xbf9af01b
.word 0x7e20d13f
.word 0x7d82d835
.word 0xc16a4d3e
.word 0x7e3e08e0
.word 0x7d82d835
.word 0xc16a4d3e
.word 0x7e3e08e0
.word 0x7d82d835
.word 0xc16a4d3e
.word 0x7e3e08e0
.word 0x7d82d835
.word 0xc16a4d3e
.word 0x7e3e08e0
.word 0x7d82d835
.word 0xc16a4d3e
.word 0x7e3e08e0
.word 0x7dc20b54
.word 0xc157eaea
.word 0x7f075328
.word 0x7dc20b54
.word 0xc157eaea
.word 0x7f075328
.word 0x7dc20b54
.word 0xc157eaea
.word 0x7f075328
.word 0x7dc20b54
.word 0xc157eaea
.word 0x7f075328
.word 0x7dc20b54
.word 0xc157eaea
.word 0x7f075328
.word 0x7e2e1c2f
.word 0xc10a7db2
.word 0x7f38c2b9
.word 0x7e2e1c2f
.word 0xc10a7db2
.word 0x7f38c2b9
.word 0x7e2e1c2f
.word 0xc10a7db2
.word 0x7f38c2b9
.word 0x7e2e1c2f
.word 0xc10a7db2
.word 0x7f38c2b9
.word 0x7e17cb34
.word 0x421edd6b
.word 0x7de6a542
.word 0x7e17cb34
.word 0x421edd6b
.word 0x7de6a542
.word 0x7e17cb34
.word 0x421edd6b
.word 0x7de6a542
.word 0x7f21f35d
.word 0xc1214d91
.word 0x7ec163ff
.word 0x7f21f35d
.word 0xc1214d91
.word 0x7ec163ff
.word 0x7f21f35d
.word 0xc1214d91
.word 0x7ec163ff
.word 0x7f21f35d
.word 0xc1214d91
.word 0x7ec163ff
.word 0x7f21f35d
.word 0xc1214d91
.word 0x7ec163ff
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 296*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
