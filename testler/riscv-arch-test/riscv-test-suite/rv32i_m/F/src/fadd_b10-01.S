
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.5.2
// timestamp : Tue Sep  7 16:07:52 2021 GMT
// usage     : riscv_ctg \
//                  -- cgf $cgf \
//                  -- xlen $xlen \
// -----------
//
// -----------
// Copyright (c) 2021. IIT Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fadd.s instruction of the RISC-V F extension for the fadd_b10 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fadd_b10)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs1 == rs2 == rd, rs1==f0, rs2==f0, rd==f0, fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f0; op2:f0; dest:f0; op1val:0x7a260524; op2val:0x7a260524; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f0, f0, f0, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1:
// rs2 == rd != rs1, rs1==f29, rs2==f18, rd==f18, fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f29; op2:f18; dest:f18; op1val:0x7a260524; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f18, f29, f18, 0x0, 0, x16, 8, x17, x15, 8, x18)

inst_2:
// rs1 == rd != rs2, rs1==f20, rs2==f4, rd==f20, fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0xf4 and fm2 == 0x150517 and rm_val == 0  
// opcode: fadd.s ; op1:f20; op2:f4; dest:f20; op1val:0x7a260524; op2val:0x7a150517; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f20, f20, f4, 0x0, 0, x16, 16, x17, x15, 16, x18)

inst_3:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==f26, rs2==f13, rd==f7, fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0xf0 and fm2 == 0x6e6e8c and rm_val == 0  
// opcode: fadd.s ; op1:f26; op2:f13; dest:f7; op1val:0x7a260524; op2val:0x786e6e8c; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f7, f26, f13, 0x0, 0, x16, 24, x17, x15, 24, x18)

inst_4:
// rs1 == rs2 != rd, rs1==f5, rs2==f5, rd==f13, fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0xed and fm2 == 0x3ebed6 and rm_val == 0  
// opcode: fadd.s ; op1:f5; op2:f5; dest:f13; op1val:0x7a260524; op2val:0x7a260524; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f13, f5, f5, 0x0, 0, x16, 32, x17, x15, 32, x18)

inst_5:
// rs1==f11, rs2==f19, rd==f28, fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0xea and fm2 == 0x1898ab and rm_val == 0  
// opcode: fadd.s ; op1:f11; op2:f19; dest:f28; op1val:0x7a260524; op2val:0x751898ab; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f28, f11, f19, 0x0, 0, x16, 40, x17, x15, 40, x18)

inst_6:
// rs1==f18, rs2==f29, rd==f27, fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0xe6 and fm2 == 0x742779 and rm_val == 0  
// opcode: fadd.s ; op1:f18; op2:f29; dest:f27; op1val:0x7a260524; op2val:0x73742779; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f27, f18, f29, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_7:
// rs1==f22, rs2==f2, rd==f9, fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0xe3 and fm2 == 0x4352c7 and rm_val == 0  
// opcode: fadd.s ; op1:f22; op2:f2; dest:f9; op1val:0x7a260524; op2val:0x71c352c7; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f9, f22, f2, 0x0, 0, x16, 56, x17, x15, 56, x18)

inst_8:
// rs1==f6, rs2==f22, rd==f31, fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0xe0 and fm2 == 0x1c4239 and rm_val == 0  
// opcode: fadd.s ; op1:f6; op2:f22; dest:f31; op1val:0x7a260524; op2val:0x701c4239; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f31, f6, f22, 0x0, 0, x16, 64, x17, x15, 64, x18)

inst_9:
// rs1==f12, rs2==f21, rd==f25, fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0xdc and fm2 == 0x7a038e and rm_val == 0  
// opcode: fadd.s ; op1:f12; op2:f21; dest:f25; op1val:0x7a260524; op2val:0x6e7a038e; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f25, f12, f21, 0x0, 0, x16, 72, x17, x15, 72, x18)

inst_10:
// rs1==f16, rs2==f23, rd==f30, fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0xd9 and fm2 == 0x4802d8 and rm_val == 0  
// opcode: fadd.s ; op1:f16; op2:f23; dest:f30; op1val:0x7a260524; op2val:0x6cc802d8; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f30, f16, f23, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_11:
// rs1==f13, rs2==f27, rd==f22, fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0xd6 and fm2 == 0x200246 and rm_val == 0  
// opcode: fadd.s ; op1:f13; op2:f27; dest:f22; op1val:0x7a260524; op2val:0x6b200246; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f22, f13, f27, 0x0, 0, x16, 88, x17, x15, 88, x18)

inst_12:
// rs1==f21, rs2==f6, rd==f4, fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0xd3 and fm2 == 0x0001d2 and rm_val == 0  
// opcode: fadd.s ; op1:f21; op2:f6; dest:f4; op1val:0x7a260524; op2val:0x698001d2; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f4, f21, f6, 0x0, 0, x16, 96, x17, x15, 96, x18)

inst_13:
// rs1==f15, rs2==f24, rd==f23, fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0xcf and fm2 == 0x4ccfb6 and rm_val == 0  
// opcode: fadd.s ; op1:f15; op2:f24; dest:f23; op1val:0x7a260524; op2val:0x67cccfb6; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f23, f15, f24, 0x0, 0, x16, 104, x17, x15, 104, x18)

inst_14:
// rs1==f9, rs2==f28, rd==f21, fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0xcc and fm2 == 0x23d95e and rm_val == 0  
// opcode: fadd.s ; op1:f9; op2:f28; dest:f21; op1val:0x7a260524; op2val:0x6623d95e; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f21, f9, f28, 0x0, 0, x16, 112, x17, x15, 112, x18)

inst_15:
// rs1==f2, rs2==f17, rd==f24, fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0xc9 and fm2 == 0x03144b and rm_val == 0  
// opcode: fadd.s ; op1:f2; op2:f17; dest:f24; op1val:0x7a260524; op2val:0x6483144b; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f24, f2, f17, 0x0, 0, x16, 120, x17, x15, 120, x18)

inst_16:
// rs1==f24, rs2==f3, rd==f29, fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0xc5 and fm2 == 0x51ba13 and rm_val == 0  
// opcode: fadd.s ; op1:f24; op2:f3; dest:f29; op1val:0x7a260524; op2val:0x62d1ba13; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f29, f24, f3, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_17:
// rs1==f10, rs2==f25, rd==f5, fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0xc2 and fm2 == 0x27c80f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f25; dest:f5; op1val:0x7a260524; op2val:0x6127c80f; valaddr_reg:x16; val_offset:136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f5, f10, f25, 0x0, 0, x16, 136, x17, x15, 136, x18)

inst_18:
// rs1==f27, rs2==f15, rd==f10, fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0xbf and fm2 == 0x0639a5 and rm_val == 0  
// opcode: fadd.s ; op1:f27; op2:f15; dest:f10; op1val:0x7a260524; op2val:0x5f8639a5; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f10, f27, f15, 0x0, 0, x16, 144, x17, x15, 144, x18)

inst_19:
// rs1==f19, rs2==f14, rd==f12, fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0xbb and fm2 == 0x56c2a2 and rm_val == 0  
// opcode: fadd.s ; op1:f19; op2:f14; dest:f12; op1val:0x7a260524; op2val:0x5dd6c2a2; valaddr_reg:x16; val_offset:152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f19, f14, 0x0, 0, x16, 152, x17, x15, 152, x18)

inst_20:
// rs1==f1, rs2==f9, rd==f11, fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0xb8 and fm2 == 0x2bcee8 and rm_val == 0  
// opcode: fadd.s ; op1:f1; op2:f9; dest:f11; op1val:0x7a260524; op2val:0x5c2bcee8; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f11, f1, f9, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_21:
// rs1==f14, rs2==f1, rd==f8, fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0xb5 and fm2 == 0x097253 and rm_val == 0  
// opcode: fadd.s ; op1:f14; op2:f1; dest:f8; op1val:0x7a260524; op2val:0x5a897253; valaddr_reg:x16; val_offset:168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f8, f14, f1, 0x0, 0, x16, 168, x17, x15, 168, x18)

inst_22:
// rs1==f3, rs2==f8, rd==f17, fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0xb1 and fm2 == 0x5bea1f and rm_val == 0  
// opcode: fadd.s ; op1:f3; op2:f8; dest:f17; op1val:0x7a260524; op2val:0x58dbea1f; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f17, f3, f8, 0x0, 0, x16, 176, x17, x15, 176, x18)

inst_23:
// rs1==f17, rs2==f7, rd==f1, fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0xae and fm2 == 0x2fee7f and rm_val == 0  
// opcode: fadd.s ; op1:f17; op2:f7; dest:f1; op1val:0x7a260524; op2val:0x572fee7f; valaddr_reg:x16; val_offset:184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f1, f17, f7, 0x0, 0, x16, 184, x17, x15, 184, x18)

inst_24:
// rs1==f28, rs2==f11, rd==f6, fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0xab and fm2 == 0x0cbecc and rm_val == 0  
// opcode: fadd.s ; op1:f28; op2:f11; dest:f6; op1val:0x7a260524; op2val:0x558cbecc; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f6, f28, f11, 0x0, 0, x16, 192, x17, x15, 192, x18)

inst_25:
// rs1==f25, rs2==f31, rd==f26, fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0xa7 and fm2 == 0x613147 and rm_val == 0  
// opcode: fadd.s ; op1:f25; op2:f31; dest:f26; op1val:0x7a260524; op2val:0x53e13147; valaddr_reg:x16; val_offset:200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f26, f25, f31, 0x0, 0, x16, 200, x17, x15, 200, x18)

inst_26:
// rs1==f31, rs2==f26, rd==f16, fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0xa4 and fm2 == 0x34276c and rm_val == 0  
// opcode: fadd.s ; op1:f31; op2:f26; dest:f16; op1val:0x7a260524; op2val:0x5234276c; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f16, f31, f26, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_27:
// rs1==f8, rs2==f30, rd==f14, fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0xa1 and fm2 == 0x101f89 and rm_val == 0  
// opcode: fadd.s ; op1:f8; op2:f30; dest:f14; op1val:0x7a260524; op2val:0x50901f89; valaddr_reg:x16; val_offset:216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f14, f8, f30, 0x0, 0, x16, 216, x17, x15, 216, x18)

inst_28:
// rs1==f7, rs2==f12, rd==f2, fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0x9d and fm2 == 0x6698dc and rm_val == 0  
// opcode: fadd.s ; op1:f7; op2:f12; dest:f2; op1val:0x7a260524; op2val:0x4ee698dc; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f2, f7, f12, 0x0, 0, x16, 224, x17, x15, 224, x18)

inst_29:
// rs1==f4, rs2==f16, rd==f19, fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0x9a and fm2 == 0x387a4a and rm_val == 0  
// opcode: fadd.s ; op1:f4; op2:f16; dest:f19; op1val:0x7a260524; op2val:0x4d387a4a; valaddr_reg:x16; val_offset:232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f19, f4, f16, 0x0, 0, x16, 232, x17, x15, 232, x18)

inst_30:
// rs1==f23, rs2==f20, rd==f3, fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0x97 and fm2 == 0x139508 and rm_val == 0  
// opcode: fadd.s ; op1:f23; op2:f20; dest:f3; op1val:0x7a260524; op2val:0x4b939508; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f3, f23, f20, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_31:
// rs1==f30, rs2==f10, rd==f15, fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0x93 and fm2 == 0x6c21a6 and rm_val == 0  
// opcode: fadd.s ; op1:f30; op2:f10; dest:f15; op1val:0x7a260524; op2val:0x49ec21a6; valaddr_reg:x16; val_offset:248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f15, f30, f10, 0x0, 0, x16, 248, x17, x15, 248, x18)

inst_32:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0x90 and fm2 == 0x3ce7b8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a260524; op2val:0x483ce7b8; valaddr_reg:x16; val_offset:256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 256, x17, x15, 256, x18)

inst_33:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0x8d and fm2 == 0x171fc6 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a260524; op2val:0x46971fc6; valaddr_reg:x16; val_offset:264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 264, x17, x15, 264, x18)

inst_34:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0x89 and fm2 == 0x71cc71 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a260524; op2val:0x44f1cc71; valaddr_reg:x16; val_offset:272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 272, x17, x15, 272, x18)

inst_35:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x41705a and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a260524; op2val:0x4341705a; valaddr_reg:x16; val_offset:280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 280, x17, x15, 280, x18)

inst_36:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x1ac048 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a260524; op2val:0x419ac048; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_37:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x779a0d and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a260524; op2val:0x3ff79a0d; valaddr_reg:x16; val_offset:296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 296, x17, x15, 296, x18)

inst_38:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4614d7 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a260524; op2val:0x3e4614d7; valaddr_reg:x16; val_offset:304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 304, x17, x15, 304, x18)

inst_39:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x1e7712 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a260524; op2val:0x3c9e7712; valaddr_reg:x16; val_offset:312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 312, x17, x15, 312, x18)

inst_40:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0x75 and fm2 == 0x7d8b51 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a260524; op2val:0x3afd8b51; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_41:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0x72 and fm2 == 0x4ad5da and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a260524; op2val:0x394ad5da; valaddr_reg:x16; val_offset:328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 328, x17, x15, 328, x18)

inst_42:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0x6f and fm2 == 0x2244ae and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a260524; op2val:0x37a244ae; valaddr_reg:x16; val_offset:336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 336, x17, x15, 336, x18)

inst_43:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0x6c and fm2 == 0x01d08b and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a260524; op2val:0x3601d08b; valaddr_reg:x16; val_offset:344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 344, x17, x15, 344, x18)

inst_44:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0x68 and fm2 == 0x4fb413 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a260524; op2val:0x344fb413; valaddr_reg:x16; val_offset:352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 352, x17, x15, 352, x18)

inst_45:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0x65 and fm2 == 0x2629a8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a260524; op2val:0x32a629a8; valaddr_reg:x16; val_offset:360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 360, x17, x15, 360, x18)

inst_46:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0x62 and fm2 == 0x04ee20 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a260524; op2val:0x3104ee20; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_47:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0x5e and fm2 == 0x54b034 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a260524; op2val:0x2f54b034; valaddr_reg:x16; val_offset:376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 376, x17, x15, 376, x18)

inst_48:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0x5b and fm2 == 0x2a2690 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a260524; op2val:0x2daa2690; valaddr_reg:x16; val_offset:384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 384, x17, x15, 384, x18)

inst_49:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0x58 and fm2 == 0x081ed9 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a260524; op2val:0x2c081ed9; valaddr_reg:x16; val_offset:392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 392, x17, x15, 392, x18)

inst_50:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x59caf6 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a260524; op2val:0x2a59caf6; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_51:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0x51 and fm2 == 0x2e3bf8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a260524; op2val:0x28ae3bf8; valaddr_reg:x16; val_offset:408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 408, x17, x15, 408, x18)

inst_52:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0x4e and fm2 == 0x0b632c and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a260524; op2val:0x270b632c; valaddr_reg:x16; val_offset:416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 416, x17, x15, 416, x18)

inst_53:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0x4a and fm2 == 0x5f0514 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a260524; op2val:0x255f0514; valaddr_reg:x16; val_offset:424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 424, x17, x15, 424, x18)

inst_54:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0x47 and fm2 == 0x326a76 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a260524; op2val:0x23b26a76; valaddr_reg:x16; val_offset:432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 432, x17, x15, 432, x18)

inst_55:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0x44 and fm2 == 0x0ebb92 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a260524; op2val:0x220ebb92; valaddr_reg:x16; val_offset:440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 440, x17, x15, 440, x18)

inst_56:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0x40 and fm2 == 0x645f50 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a260524; op2val:0x20645f50; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_57:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0x3d and fm2 == 0x36b2a6 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a260524; op2val:0x1eb6b2a6; valaddr_reg:x16; val_offset:456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 456, x17, x15, 456, x18)

inst_58:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0x3a and fm2 == 0x122885 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a260524; op2val:0x1d122885; valaddr_reg:x16; val_offset:464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 464, x17, x15, 464, x18)

inst_59:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0x36 and fm2 == 0x69da6f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a260524; op2val:0x1b69da6f; valaddr_reg:x16; val_offset:472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 472, x17, x15, 472, x18)

inst_60:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0x33 and fm2 == 0x3b1525 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a260524; op2val:0x19bb1525; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_61:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0x30 and fm2 == 0x15aa84 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a260524; op2val:0x1815aa84; valaddr_reg:x16; val_offset:488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 488, x17, x15, 488, x18)

inst_62:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0x2c and fm2 == 0x6f773a and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a260524; op2val:0x166f773a; valaddr_reg:x16; val_offset:496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 496, x17, x15, 496, x18)

inst_63:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0x29 and fm2 == 0x3f9295 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a260524; op2val:0x14bf9295; valaddr_reg:x16; val_offset:504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 504, x17, x15, 504, x18)

inst_64:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0x26 and fm2 == 0x194210 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a260524; op2val:0x13194210; valaddr_reg:x16; val_offset:512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 512, x17, x15, 512, x18)

inst_65:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0x22 and fm2 == 0x753681 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a260524; op2val:0x11753681; valaddr_reg:x16; val_offset:520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 520, x17, x15, 520, x18)

inst_66:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0x1f and fm2 == 0x442b9a and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a260524; op2val:0xfc42b9a; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_67:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0x1c and fm2 == 0x1cefaf and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a260524; op2val:0xe1cefaf; valaddr_reg:x16; val_offset:536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 536, x17, x15, 536, x18)

inst_68:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0x18 and fm2 == 0x7b1918 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a260524; op2val:0xc7b1918; valaddr_reg:x16; val_offset:544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 544, x17, x15, 544, x18)

inst_69:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0x15 and fm2 == 0x48e0e0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a260524; op2val:0xac8e0e0; valaddr_reg:x16; val_offset:552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 552, x17, x15, 552, x18)

inst_70:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0x12 and fm2 == 0x20b3e6 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a260524; op2val:0x920b3e6; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_71:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0x0f and fm2 == 0x008feb and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a260524; op2val:0x7808feb; valaddr_reg:x16; val_offset:568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 568, x17, x15, 568, x18)

inst_72:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0x0b and fm2 == 0x4db312 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a260524; op2val:0x5cdb312; valaddr_reg:x16; val_offset:576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 576, x17, x15, 576, x18)

inst_73:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x248f41 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a260524; op2val:0x4248f41; valaddr_reg:x16; val_offset:584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 584, x17, x15, 584, x18)

inst_74:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a260524; op2val:0x0; valaddr_reg:x16; val_offset:592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 592, x17, x15, 592, x18)

inst_75:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x260524 and fs2 == 0 and fe2 == 0xed and fm2 == 0x3ebed6 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a260524; op2val:0x76bebed6; valaddr_reg:x16; val_offset:600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 600, x17, x15, 600, x18)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
test_fp:
.word 0x7a260524
.word 0x7a260524
.word 0x7a260524
.word 0x7f7fffff
.word 0x7a260524
.word 0x7a150517
.word 0x7a260524
.word 0x786e6e8c
.word 0x7a260524
.word 0x7a260524
.word 0x7a260524
.word 0x751898ab
.word 0x7a260524
.word 0x73742779
.word 0x7a260524
.word 0x71c352c7
.word 0x7a260524
.word 0x701c4239
.word 0x7a260524
.word 0x6e7a038e
.word 0x7a260524
.word 0x6cc802d8
.word 0x7a260524
.word 0x6b200246
.word 0x7a260524
.word 0x698001d2
.word 0x7a260524
.word 0x67cccfb6
.word 0x7a260524
.word 0x6623d95e
.word 0x7a260524
.word 0x6483144b
.word 0x7a260524
.word 0x62d1ba13
.word 0x7a260524
.word 0x6127c80f
.word 0x7a260524
.word 0x5f8639a5
.word 0x7a260524
.word 0x5dd6c2a2
.word 0x7a260524
.word 0x5c2bcee8
.word 0x7a260524
.word 0x5a897253
.word 0x7a260524
.word 0x58dbea1f
.word 0x7a260524
.word 0x572fee7f
.word 0x7a260524
.word 0x558cbecc
.word 0x7a260524
.word 0x53e13147
.word 0x7a260524
.word 0x5234276c
.word 0x7a260524
.word 0x50901f89
.word 0x7a260524
.word 0x4ee698dc
.word 0x7a260524
.word 0x4d387a4a
.word 0x7a260524
.word 0x4b939508
.word 0x7a260524
.word 0x49ec21a6
.word 0x7a260524
.word 0x483ce7b8
.word 0x7a260524
.word 0x46971fc6
.word 0x7a260524
.word 0x44f1cc71
.word 0x7a260524
.word 0x4341705a
.word 0x7a260524
.word 0x419ac048
.word 0x7a260524
.word 0x3ff79a0d
.word 0x7a260524
.word 0x3e4614d7
.word 0x7a260524
.word 0x3c9e7712
.word 0x7a260524
.word 0x3afd8b51
.word 0x7a260524
.word 0x394ad5da
.word 0x7a260524
.word 0x37a244ae
.word 0x7a260524
.word 0x3601d08b
.word 0x7a260524
.word 0x344fb413
.word 0x7a260524
.word 0x32a629a8
.word 0x7a260524
.word 0x3104ee20
.word 0x7a260524
.word 0x2f54b034
.word 0x7a260524
.word 0x2daa2690
.word 0x7a260524
.word 0x2c081ed9
.word 0x7a260524
.word 0x2a59caf6
.word 0x7a260524
.word 0x28ae3bf8
.word 0x7a260524
.word 0x270b632c
.word 0x7a260524
.word 0x255f0514
.word 0x7a260524
.word 0x23b26a76
.word 0x7a260524
.word 0x220ebb92
.word 0x7a260524
.word 0x20645f50
.word 0x7a260524
.word 0x1eb6b2a6
.word 0x7a260524
.word 0x1d122885
.word 0x7a260524
.word 0x1b69da6f
.word 0x7a260524
.word 0x19bb1525
.word 0x7a260524
.word 0x1815aa84
.word 0x7a260524
.word 0x166f773a
.word 0x7a260524
.word 0x14bf9295
.word 0x7a260524
.word 0x13194210
.word 0x7a260524
.word 0x11753681
.word 0x7a260524
.word 0xfc42b9a
.word 0x7a260524
.word 0xe1cefaf
.word 0x7a260524
.word 0xc7b1918
.word 0x7a260524
.word 0xac8e0e0
.word 0x7a260524
.word 0x920b3e6
.word 0x7a260524
.word 0x7808feb
.word 0x7a260524
.word 0x5cdb312
.word 0x7a260524
.word 0x4248f41
.word 0x7a260524
.word 0x0
.word 0x7a260524
.word 0x76bebed6
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 152*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
