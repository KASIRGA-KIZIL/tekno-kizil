
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.5.2
// timestamp : Tue Sep  7 16:08:04 2021 GMT
// usage     : riscv_ctg \
//                  -- cgf $cgf \
//                  -- xlen $xlen \
// -----------
//
// -----------
// Copyright (c) 2021. IIT Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V F extension for the fnmadd_b18 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b18)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1, rs1==f19, rs2==f22, rs3==f24, rd==f22, fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f19; op2:f22; op3:f24; dest:f22; op1val:0x7dce622b; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:0; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f22, f19, f22, f24, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1:
// rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2, rs1==f24, rs2==f21, rs3==f16, rd==f24, fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ed966 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f24; op2:f21; op3:f16; dest:f24; op1val:0x7f0ed966; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:12; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f24, f24, f21, f16, 0x0, 0, x16, 12, x17, x15, 8, x18)

inst_2:
// rs1 == rs2 == rd != rs3, rs1==f28, rs2==f28, rs3==f1, rd==f28, fs1 == 0 and fe1 == 0xfc and fm1 == 0x396928 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f28; op2:f28; op3:f1; dest:f28; op1val:0x7e396928; op2val:0x7e396928; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:24; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f28, f28, f28, f1, 0x0, 0, x16, 24, x17, x15, 16, x18)

inst_3:
// rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd, rs1==f21, rs2==f11, rs3==f12, rd==f2, fs1 == 0 and fe1 == 0xfc and fm1 == 0x008ceb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f21; op2:f11; op3:f12; dest:f2; op1val:0x7e008ceb; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:36; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f2, f21, f11, f12, 0x0, 0, x16, 36, x17, x15, 24, x18)

inst_4:
// rd == rs2 == rs3 != rs1, rs1==f12, rs2==f30, rs3==f30, rd==f30, fs1 == 0 and fe1 == 0xfb and fm1 == 0x317f52 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f12; op2:f30; op3:f30; dest:f30; op1val:0x7db17f52; op2val:0x0; op3val:0x0; valaddr_reg:x16; val_offset:48; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f30, f12, f30, f30, 0x0, 0, x16, 48, x17, x15, 32, x18)

inst_5:
// rs1 == rs2 == rs3 != rd, rs1==f20, rs2==f20, rs3==f20, rd==f9, fs1 == 0 and fe1 == 0xfd and fm1 == 0x21ab51 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f20; op2:f20; op3:f20; dest:f9; op1val:0x7ea1ab51; op2val:0x7ea1ab51; op3val:0x7ea1ab51; valaddr_reg:x16; val_offset:60; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f9, f20, f20, f20, 0x0, 0, x16, 60, x17, x15, 40, x18)

inst_6:
// rs1 == rs2 == rs3 == rd, rs1==f10, rs2==f10, rs3==f10, rd==f10, fs1 == 0 and fe1 == 0xfe and fm1 == 0x3db9f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f10; op3:f10; dest:f10; op1val:0x7f3db9f6; op2val:0x7f3db9f6; op3val:0x7f3db9f6; valaddr_reg:x16; val_offset:72; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f10, f10, f10, f10, 0x0, 0, x16, 72, x17, x15, 48, x18)

inst_7:
// rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2, rs1==f5, rs2==f0, rs3==f5, rd==f16, fs1 == 0 and fe1 == 0xfc and fm1 == 0x3809d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f5; op2:f0; op3:f5; dest:f16; op1val:0x7e3809d5; op2val:0x0; op3val:0x7e3809d5; valaddr_reg:x16; val_offset:84; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f16, f5, f0, f5, 0x0, 0, x16, 84, x17, x15, 56, x18)

inst_8:
// rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1, rs1==f3, rs2==f19, rs3==f19, rd==f21, fs1 == 0 and fe1 == 0xf9 and fm1 == 0x75e793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f3; op2:f19; op3:f19; dest:f21; op1val:0x7cf5e793; op2val:0x0; op3val:0x0; valaddr_reg:x16; val_offset:96; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f21, f3, f19, f19, 0x0, 0, x16, 96, x17, x15, 64, x18)

inst_9:
// rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1, rs1==f23, rs2==f16, rs3==f17, rd==f17, fs1 == 0 and fe1 == 0xfe and fm1 == 0x29ee78 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f23; op2:f16; op3:f17; dest:f17; op1val:0x7f29ee78; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:108; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f17, f23, f16, f17, 0x0, 0, x16, 108, x17, x15, 72, x18)

inst_10:
// rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3, rs1==f17, rs2==f17, rs3==f27, rd==f31, fs1 == 0 and fe1 == 0xfb and fm1 == 0x30cc24 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f17; op2:f17; op3:f27; dest:f31; op1val:0x7db0cc24; op2val:0x7db0cc24; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:120; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f31, f17, f17, f27, 0x0, 0, x16, 120, x17, x15, 80, x18)

inst_11:
// rs1 == rd == rs3 != rs2, rs1==f25, rs2==f23, rs3==f25, rd==f25, fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cd344 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f25; op2:f23; op3:f25; dest:f25; op1val:0x7d8cd344; op2val:0x0; op3val:0x7d8cd344; valaddr_reg:x16; val_offset:132; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f25, f25, f23, f25, 0x0, 0, x16, 132, x17, x15, 88, x18)

inst_12:
// rs1==f16, rs2==f29, rs3==f6, rd==f5, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00b812 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f16; op2:f29; op3:f6; dest:f5; op1val:0x7f00b812; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:144; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f5, f16, f29, f6, 0x0, 0, x16, 144, x17, x15, 96, x18)

inst_13:
// rs1==f18, rs2==f14, rs3==f23, rd==f26, fs1 == 0 and fe1 == 0xf8 and fm1 == 0x182599 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f18; op2:f14; op3:f23; dest:f26; op1val:0x7c182599; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:156; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f26, f18, f14, f23, 0x0, 0, x16, 156, x17, x15, 104, x18)

inst_14:
// rs1==f1, rs2==f27, rs3==f31, rd==f29, fs1 == 0 and fe1 == 0xfe and fm1 == 0x1eee75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f1; op2:f27; op3:f31; dest:f29; op1val:0x7f1eee75; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:168; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f29, f1, f27, f31, 0x0, 0, x16, 168, x17, x15, 112, x18)

inst_15:
// rs1==f8, rs2==f6, rs3==f18, rd==f23, fs1 == 0 and fe1 == 0xfe and fm1 == 0x171b57 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f8; op2:f6; op3:f18; dest:f23; op1val:0x7f171b57; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:180; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f23, f8, f6, f18, 0x0, 0, x16, 180, x17, x15, 120, x18)

inst_16:
// rs1==f0, rs2==f5, rs3==f15, rd==f20, fs1 == 0 and fe1 == 0xfc and fm1 == 0x54e058 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f0; op2:f5; op3:f15; dest:f20; op1val:0x7e54e058; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:192; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f20, f0, f5, f15, 0x0, 0, x16, 192, x17, x15, 128, x18)

inst_17:
// rs1==f22, rs2==f3, rs3==f4, rd==f19, fs1 == 0 and fe1 == 0xfd and fm1 == 0x2fc88c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f22; op2:f3; op3:f4; dest:f19; op1val:0x7eafc88c; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:204; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f19, f22, f3, f4, 0x0, 0, x16, 204, x17, x15, 136, x18)

inst_18:
// rs1==f2, rs2==f24, rs3==f28, rd==f14, fs1 == 0 and fe1 == 0xfe and fm1 == 0x319ce6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f2; op2:f24; op3:f28; dest:f14; op1val:0x7f319ce6; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:216; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f14, f2, f24, f28, 0x0, 0, x16, 216, x17, x15, 144, x18)

inst_19:
// rs1==f30, rs2==f26, rs3==f0, rd==f3, fs1 == 0 and fe1 == 0xfd and fm1 == 0x58bf61 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f30; op2:f26; op3:f0; dest:f3; op1val:0x7ed8bf61; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:228; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f3, f30, f26, f0, 0x0, 0, x16, 228, x17, x15, 152, x18)

inst_20:
// rs1==f7, rs2==f15, rs3==f21, rd==f11, fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b0708 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f7; op2:f15; op3:f21; dest:f11; op1val:0x7f2b0708; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:240; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f11, f7, f15, f21, 0x0, 0, x16, 240, x17, x15, 160, x18)

inst_21:
// rs1==f14, rs2==f12, rs3==f3, rd==f7, fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cd7ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f14; op2:f12; op3:f3; dest:f7; op1val:0x7e4cd7ff; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:252; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f7, f14, f12, f3, 0x0, 0, x16, 252, x17, x15, 168, x18)

inst_22:
// rs1==f27, rs2==f31, rs3==f14, rd==f15, fs1 == 0 and fe1 == 0xfa and fm1 == 0x7b1d83 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f27; op2:f31; op3:f14; dest:f15; op1val:0x7d7b1d83; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:264; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f15, f27, f31, f14, 0x0, 0, x16, 264, x17, x15, 176, x18)

inst_23:
// rs1==f6, rs2==f4, rs3==f29, rd==f8, fs1 == 0 and fe1 == 0xfc and fm1 == 0x2bcff9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f6; op2:f4; op3:f29; dest:f8; op1val:0x7e2bcff9; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:276; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f8, f6, f4, f29, 0x0, 0, x16, 276, x17, x15, 184, x18)

inst_24:
// rs1==f15, rs2==f25, rs3==f13, rd==f4, fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b2e1a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f15; op2:f25; op3:f13; dest:f4; op1val:0x7edb2e1a; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:288; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f4, f15, f25, f13, 0x0, 0, x16, 288, x17, x15, 192, x18)

inst_25:
// rs1==f11, rs2==f1, rs3==f22, rd==f12, fs1 == 0 and fe1 == 0xfd and fm1 == 0x112ace and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f11; op2:f1; op3:f22; dest:f12; op1val:0x7e912ace; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:300; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f12, f11, f1, f22, 0x0, 0, x16, 300, x17, x15, 200, x18)

inst_26:
// rs1==f13, rs2==f7, rs3==f2, rd==f27, fs1 == 0 and fe1 == 0xfe and fm1 == 0x16201f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f13; op2:f7; op3:f2; dest:f27; op1val:0x7f16201f; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:312; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f27, f13, f7, f2, 0x0, 0, x16, 312, x17, x15, 208, x18)

inst_27:
// rs1==f31, rs2==f8, rs3==f9, rd==f18, fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c3b3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f31; op2:f8; op3:f9; dest:f18; op1val:0x7eec3b3e; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:324; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f18, f31, f8, f9, 0x0, 0, x16, 324, x17, x15, 216, x18)

inst_28:
// rs1==f29, rs2==f9, rs3==f8, rd==f6, fs1 == 0 and fe1 == 0xfd and fm1 == 0x02e795 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f29; op2:f9; op3:f8; dest:f6; op1val:0x7e82e795; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:336; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f6, f29, f9, f8, 0x0, 0, x16, 336, x17, x15, 224, x18)

inst_29:
// rs1==f26, rs2==f18, rs3==f7, rd==f1, fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f12b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f26; op2:f18; op3:f7; dest:f1; op1val:0x7f1f12b9; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:348; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f1, f26, f18, f7, 0x0, 0, x16, 348, x17, x15, 232, x18)

inst_30:
// rs1==f4, rs2==f2, rs3==f26, rd==f13, fs1 == 0 and fe1 == 0xfe and fm1 == 0x17517f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f4; op2:f2; op3:f26; dest:f13; op1val:0x7f17517f; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:360; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f4, f2, f26, 0x0, 0, x16, 360, x17, x15, 240, x18)

inst_31:
// rs1==f9, rs2==f13, rs3==f11, rd==f0, fs1 == 0 and fe1 == 0xfe and fm1 == 0x264de7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f9; op2:f13; op3:f11; dest:f0; op1val:0x7f264de7; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:372; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f0, f9, f13, f11, 0x0, 0, x16, 372, x17, x15, 248, x18)

inst_32:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x60d9a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d60d9a4; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:384; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 384, x17, x15, 256, x18)

inst_33:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x70766e and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4c67ed and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3ffffe and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7cf0766e; op2val:0xc1cc67ed; op3val:0x7f3ffffe; valaddr_reg:x16; val_offset:396; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 396, x17, x15, 264, x18)

inst_34:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202a98 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1970bf and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7da02a98; op2val:0xc11970bf; op3val:0x7f3fffff; valaddr_reg:x16; val_offset:408; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 408, x17, x15, 272, x18)

inst_35:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53a642 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x683ba8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3ffffe and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ed3a642; op2val:0xbfe83ba8; op3val:0x7f3ffffe; valaddr_reg:x16; val_offset:420; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 420, x17, x15, 280, x18)

inst_36:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4fe433 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x6c6e5d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7dcfe433; op2val:0xc0ec6e5d; op3val:0x7f3fffff; valaddr_reg:x16; val_offset:432; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 432, x17, x15, 288, x18)

inst_37:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2a5ada and fs2 == 1 and fe2 == 0x7f and fm2 == 0x104376 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3ffffe and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f2a5ada; op2val:0xbf904376; op3val:0x7f3ffffe; valaddr_reg:x16; val_offset:444; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 444, x17, x15, 296, x18)

inst_38:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x373a1e and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0620f1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f373a1e; op2val:0xbf8620f1; op3val:0x7f3fffff; valaddr_reg:x16; val_offset:456; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 456, x17, x15, 304, x18)

inst_39:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x67ede5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x53ed39 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ee7ede5; op2val:0xbfd3ed39; op3val:0x7f3fffff; valaddr_reg:x16; val_offset:468; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 468, x17, x15, 312, x18)

inst_40:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x268b6a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x139067 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f268b6a; op2val:0xbf939067; op3val:0x7f3fffff; valaddr_reg:x16; val_offset:480; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 480, x17, x15, 320, x18)

inst_41:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5fa740 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x5bc4c8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e5fa740; op2val:0xc05bc4c8; op3val:0x7f3fffff; valaddr_reg:x16; val_offset:492; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 492, x17, x15, 328, x18)

inst_42:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ab65 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3c13d7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e82ab65; op2val:0xc03c13d7; op3val:0x7f3fffff; valaddr_reg:x16; val_offset:504; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 504, x17, x15, 336, x18)

inst_43:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0d5a7c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2ddcac and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e8d5a7c; op2val:0xc02ddcac; op3val:0x7f3fffff; valaddr_reg:x16; val_offset:516; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 516, x17, x15, 344, x18)

inst_44:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217f53 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x182d04 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f217f53; op2val:0xbf982d04; op3val:0x7f3fffff; valaddr_reg:x16; val_offset:528; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 528, x17, x15, 352, x18)

inst_45:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x667aed and fs2 == 1 and fe2 == 0x7f and fm2 == 0x554254 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3ffffe and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ee67aed; op2val:0xbfd54254; op3val:0x7f3ffffe; valaddr_reg:x16; val_offset:540; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 540, x17, x15, 360, x18)

inst_46:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11c013 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x289dfc and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f11c013; op2val:0xbfa89dfc; op3val:0x7f3fffff; valaddr_reg:x16; val_offset:552; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 552, x17, x15, 368, x18)

inst_47:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x238f3f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e238f3f; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:564; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 564, x17, x15, 376, x18)

inst_48:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ee8de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f2ee8de; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:576; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 576, x17, x15, 384, x18)

inst_49:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x025339 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e025339; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:588; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 588, x17, x15, 392, x18)

inst_50:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x02119e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d82119e; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:600; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 600, x17, x15, 400, x18)

inst_51:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0b4a10 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f0b4a10; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:612; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 612, x17, x15, 408, x18)

inst_52:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34342f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e34342f; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:624; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 624, x17, x15, 416, x18)

inst_53:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d37b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f3d37b2; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:636; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 636, x17, x15, 424, x18)

inst_54:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a0c29 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eba0c29; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:648; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 648, x17, x15, 432, x18)

inst_55:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ecd6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f03ecd6; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:660; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 660, x17, x15, 440, x18)

inst_56:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x296b63 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f296b63; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:672; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 672, x17, x15, 448, x18)

inst_57:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0409cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e8409cf; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:684; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 684, x17, x15, 456, x18)

inst_58:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32fae0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f32fae0; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:696; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 696, x17, x15, 464, x18)

inst_59:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d6ae and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f20d6ae; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:708; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 708, x17, x15, 472, x18)

inst_60:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x017ed0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f017ed0; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:720; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 720, x17, x15, 480, x18)

inst_61:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x239b5c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e239b5c; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:732; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 732, x17, x15, 488, x18)

inst_62:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x023675 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e823675; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:744; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 744, x17, x15, 496, x18)

inst_63:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x164749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f164749; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:756; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 756, x17, x15, 504, x18)

inst_64:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d8377 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f3d8377; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:768; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 768, x17, x15, 512, x18)

inst_65:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bb471 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e7bb471; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:780; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 780, x17, x15, 520, x18)

inst_66:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a414e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e1a414e; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:792; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 792, x17, x15, 528, x18)

inst_67:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x5e539a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7c5e539a; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:804; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 804, x17, x15, 536, x18)

inst_68:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcfc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f2cbcfc; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:816; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 816, x17, x15, 544, x18)

inst_69:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2759f0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f2759f0; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:828; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 828, x17, x15, 552, x18)

inst_70:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79dd8e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e79dd8e; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:840; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 840, x17, x15, 560, x18)

inst_71:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3fec54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ebfec54; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:852; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 852, x17, x15, 568, x18)

inst_72:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x636240 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e636240; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:864; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 864, x17, x15, 576, x18)

inst_73:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7fba49 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7effba49; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:876; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 876, x17, x15, 584, x18)

inst_74:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x206546 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7da06546; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:888; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 888, x17, x15, 592, x18)

inst_75:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x151546 and fs2 == 1 and fe2 == 0x2c and fm2 == 0x5bcbfe and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e151546; op2val:0x965bcbfe; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:900; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 900, x17, x15, 600, x18)

inst_76:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2640ba and fs2 == 1 and fe2 == 0x2b and fm2 == 0x4518ee and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ea640ba; op2val:0x95c518ee; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:912; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 912, x17, x15, 608, x18)

inst_77:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x016ff7 and fs2 == 1 and fe2 == 0x2a and fm2 == 0x7d283c and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f016ff7; op2val:0x957d283c; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:924; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 924, x17, x15, 616, x18)

inst_78:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e0667 and fs2 == 1 and fe2 == 0x2c and fm2 == 0x4f5c0c and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e1e0667; op2val:0x964f5c0c; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:936; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 936, x17, x15, 624, x18)

inst_79:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0538b1 and fs2 == 1 and fe2 == 0x2b and fm2 == 0x75f765 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e8538b1; op2val:0x95f5f765; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:948; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 948, x17, x15, 632, x18)

inst_80:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1123d8 and fs2 == 1 and fe2 == 0x2b and fm2 == 0x61c4a7 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e9123d8; op2val:0x95e1c4a7; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:960; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 960, x17, x15, 640, x18)

inst_81:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x436852 and fs2 == 1 and fe2 == 0x2b and fm2 == 0x27b0ca and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ec36852; op2val:0x95a7b0ca; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:972; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 972, x17, x15, 648, x18)

inst_82:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x072c24 and fs2 == 0 and fe2 == 0x2a and fm2 == 0x726a91 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f072c24; op2val:0x15726a91; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:984; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 984, x17, x15, 656, x18)

inst_83:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3af6ff and fs2 == 0 and fe2 == 0x2a and fm2 == 0x2f434d and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f3af6ff; op2val:0x152f434d; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:996; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 996, x17, x15, 664, x18)

inst_84:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x269d2c and fs2 == 0 and fe2 == 0x2a and fm2 == 0x44ab92 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f269d2c; op2val:0x1544ab92; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1008; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1008, x17, x15, 672, x18)

inst_85:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03b9a1 and fs2 == 0 and fe2 == 0x2c and fm2 == 0x78c2ac and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e03b9a1; op2val:0x1678c2ac; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1020; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1020, x17, x15, 680, x18)

inst_86:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afcdb and fs2 == 0 and fe2 == 0x2b and fm2 == 0x15a24b and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7edafcdb; op2val:0x1595a24b; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1032; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1032, x17, x15, 688, x18)

inst_87:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38be1b and fs2 == 0 and fe2 == 0x2a and fm2 == 0x315f00 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f38be1b; op2val:0x15315f00; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1044; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1044, x17, x15, 696, x18)

inst_88:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d53d7 and fs2 == 0 and fe2 == 0x2a and fm2 == 0x504766 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f1d53d7; op2val:0x15504766; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1056; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1056, x17, x15, 704, x18)

inst_89:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x68f58b and fs2 == 0 and fe2 == 0x2f and fm2 == 0x0ca8ec and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ce8f58b; op2val:0x178ca8ec; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1068; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1068, x17, x15, 712, x18)

inst_90:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28b6bd and fs2 == 0 and fe2 == 0x2a and fm2 == 0x4238ed and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f28b6bd; op2val:0x154238ed; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1080; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1080, x17, x15, 720, x18)

inst_91:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x506932 and fs2 == 0 and fe2 == 0x31 and fm2 == 0x1d3a54 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7bd06932; op2val:0x189d3a54; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1092; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1092, x17, x15, 728, x18)

inst_92:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41cf9e and fs2 == 0 and fe2 == 0x2c and fm2 == 0x291269 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e41cf9e; op2val:0x16291269; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1104; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1104, x17, x15, 736, x18)

inst_93:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fcf65 and fs2 == 0 and fe2 == 0x2b and fm2 == 0x4d0b16 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e9fcf65; op2val:0x15cd0b16; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1116; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1116, x17, x15, 744, x18)

inst_94:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ed153 and fs2 == 0 and fe2 == 0x2a and fm2 == 0x65707b and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f0ed153; op2val:0x1565707b; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1128; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1128, x17, x15, 752, x18)

inst_95:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3457e7 and fs2 == 0 and fe2 == 0x2a and fm2 == 0x35b2a5 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f3457e7; op2val:0x1535b2a5; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1140; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1140, x17, x15, 760, x18)

inst_96:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e5bf8 and fs2 == 1 and fe2 == 0x2c and fm2 == 0x097921 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e6e5bf8; op2val:0x96097921; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1152; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1152, x17, x15, 768, x18)

inst_97:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24d5b2 and fs2 == 1 and fe2 == 0x2a and fm2 == 0x46cb03 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f24d5b2; op2val:0x9546cb03; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1164; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1164, x17, x15, 776, x18)

inst_98:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6b4e0e and fs2 == 1 and fe2 == 0x2c and fm2 == 0x0b41f2 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e6b4e0e; op2val:0x960b41f2; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1176; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1176, x17, x15, 784, x18)

inst_99:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x281a41 and fs2 == 1 and fe2 == 0x2a and fm2 == 0x42edb9 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f281a41; op2val:0x9542edb9; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1188; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1188, x17, x15, 792, x18)

inst_100:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39d661 and fs2 == 1 and fe2 == 0x2a and fm2 == 0x30537f and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f39d661; op2val:0x9530537f; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1200; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1200, x17, x15, 800, x18)

inst_101:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x655450 and fs2 == 1 and fe2 == 0x2c and fm2 == 0x0ee2dd and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e655450; op2val:0x960ee2dd; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1212; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1212, x17, x15, 808, x18)

inst_102:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x34967e and fs2 == 1 and fe2 == 0x2e and fm2 == 0x3573ab and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d34967e; op2val:0x973573ab; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1224; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1224, x17, x15, 816, x18)

inst_103:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7248b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ef248b2; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1236; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1236, x17, x15, 824, x18)

inst_104:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76b77e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e76b77e; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1248; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1248, x17, x15, 832, x18)

inst_105:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d1ff5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7edd1ff5; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1260; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1260, x17, x15, 840, x18)

inst_106:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17a40d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e97a40d; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1272; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1272, x17, x15, 848, x18)

inst_107:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7906c5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ef906c5; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1284; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1284, x17, x15, 856, x18)

inst_108:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b6a13 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e2b6a13; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1296; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1296, x17, x15, 864, x18)

inst_109:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x465fcc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ec65fcc; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1308; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1308, x17, x15, 872, x18)

inst_110:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x192dff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f192dff; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1320; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1320, x17, x15, 880, x18)

inst_111:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b506b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f3b506b; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1332; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1332, x17, x15, 888, x18)

inst_112:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x296bac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e296bac; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1344; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1344, x17, x15, 896, x18)

inst_113:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512a66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ed12a66; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1356; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1356, x17, x15, 904, x18)

inst_114:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0235b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f0235b2; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1368; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1368, x17, x15, 912, x18)

inst_115:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0748c6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f0748c6; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1380; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1380, x17, x15, 920, x18)

inst_116:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x761c0c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7df61c0c; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1392; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1392, x17, x15, 928, x18)

inst_117:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a0433 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f0a0433; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1404; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1404, x17, x15, 936, x18)

inst_118:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x60f718 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7de0f718; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1416; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1416, x17, x15, 944, x18)

inst_119:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x5b84eb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7c5b84eb; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1428; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1428, x17, x15, 952, x18)

inst_120:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7fd01a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7c7fd01a; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1440; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1440, x17, x15, 960, x18)

inst_121:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cdf21 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f1cdf21; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1452; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1452, x17, x15, 968, x18)

inst_122:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6891ae and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ee891ae; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1464; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1464, x17, x15, 976, x18)

inst_123:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2094f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e2094f5; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1476; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1476, x17, x15, 984, x18)

inst_124:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43e270 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ec3e270; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1488; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1488, x17, x15, 992, x18)

inst_125:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc3e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f2cc3e0; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1500; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1500, x17, x15, 1000, x18)

inst_126:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x270ed6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7da70ed6; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1512; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1512, x17, x15, 1008, x18)

inst_127:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x106a07 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e106a07; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1524; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1524, x17, x15, 1016, x18)

inst_128:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21a1fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ea1a1fc; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1536; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1536, x17, x15, 1024, x18)

inst_129:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x14701b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e94701b; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1548; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1548, x17, x15, 1032, x18)

inst_130:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1135f9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7c9135f9; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1560; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1560, x17, x15, 1040, x18)

inst_131:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x35ed95 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eb5ed95; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1572; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1572, x17, x15, 1048, x18)

inst_132:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x774c1e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e774c1e; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1584; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1584, x17, x15, 1056, x18)

inst_133:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e9afc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eae9afc; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1596; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1596, x17, x15, 1064, x18)

inst_134:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08a011 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f08a011; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1608; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1608, x17, x15, 1072, x18)

inst_135:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x519928 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e519928; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1620; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1620, x17, x15, 1080, x18)

inst_136:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0122a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e0122a3; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1632; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1632, x17, x15, 1088, x18)

inst_137:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4a8399 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eca8399; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1644; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1644, x17, x15, 1096, x18)

inst_138:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x752f4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7df52f4e; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1656; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1656, x17, x15, 1104, x18)

inst_139:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x558d1d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d558d1d; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1668; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1668, x17, x15, 1112, x18)

inst_140:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x044224 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e844224; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1680; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1680, x17, x15, 1120, x18)

inst_141:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6fec8a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eefec8a; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1692; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1692, x17, x15, 1128, x18)

inst_142:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x282cad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7da82cad; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1704; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1704, x17, x15, 1136, x18)

inst_143:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fa956 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e3fa956; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1716; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1716, x17, x15, 1144, x18)

inst_144:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x111299 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f111299; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1728; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1728, x17, x15, 1152, x18)

inst_145:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x32e9b8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7c32e9b8; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1740; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1740, x17, x15, 1160, x18)

inst_146:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x4d182e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7c4d182e; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1752; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1752, x17, x15, 1168, x18)

inst_147:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7fb1fc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d7fb1fc; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1764; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1764, x17, x15, 1176, x18)

inst_148:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x013cdf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f013cdf; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1776; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1776, x17, x15, 1184, x18)

inst_149:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219d70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f219d70; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1788; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1788, x17, x15, 1192, x18)

inst_150:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4410d9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e4410d9; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1800; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1800, x17, x15, 1200, x18)

inst_151:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cc187 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f1cc187; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1812; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1812, x17, x15, 1208, x18)

inst_152:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x190af0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f190af0; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1824; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1824, x17, x15, 1216, x18)

inst_153:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x194cde and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f194cde; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1836; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1836, x17, x15, 1224, x18)

inst_154:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25504e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f25504e; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1848; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1848, x17, x15, 1232, x18)

inst_155:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x606ed6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ee06ed6; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1860; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1860, x17, x15, 1240, x18)

inst_156:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x081926 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e081926; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1872; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1872, x17, x15, 1248, x18)

inst_157:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x30562f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e30562f; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1884; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1884, x17, x15, 1256, x18)

inst_158:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2be0d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7cabe0d7; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1896; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1896, x17, x15, 1264, x18)

inst_159:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2feda9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eafeda9; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1908; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1908, x17, x15, 1272, x18)

inst_160:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b2e86 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eeb2e86; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1920; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1920, x17, x15, 1280, x18)

inst_161:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6f6b81 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eef6b81; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1932; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1932, x17, x15, 1288, x18)

inst_162:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4ec69e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ecec69e; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1944; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1944, x17, x15, 1296, x18)

inst_163:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04e4d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e84e4d7; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1956; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1956, x17, x15, 1304, x18)

inst_164:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0901e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e8901e1; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1968; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1968, x17, x15, 1312, x18)

inst_165:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a3613 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eba3613; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1980; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1980, x17, x15, 1320, x18)

inst_166:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x41d009 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ec1d009; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1992; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1992, x17, x15, 1328, x18)

inst_167:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x197a06 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e197a06; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:2004; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 2004, x17, x15, 1336, x18)

inst_168:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ae136 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7edae136; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:2016; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 2016, x17, x15, 1344, x18)

inst_169:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x270abc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f270abc; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:2028; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 2028, x17, x15, 1352, x18)
addi x16,x16,2040

inst_170:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2c6927 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d2c6927; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:0; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 0, x17, x15, 1360, x18)

inst_171:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x239e6a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ea39e6a; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:12; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 12, x17, x15, 1368, x18)

inst_172:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x578fb8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ed78fb8; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:24; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 24, x17, x15, 1376, x18)

inst_173:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x472c25 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ec72c25; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:36; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 36, x17, x15, 1384, x18)

inst_174:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ad7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f1b5ad7; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:48; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 48, x17, x15, 1392, x18)

inst_175:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e2d38 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f0e2d38; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:60; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 60, x17, x15, 1400, x18)

inst_176:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2a257f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f2a257f; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:72; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 72, x17, x15, 1408, x18)

inst_177:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d8885 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f1d8885; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:84; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 84, x17, x15, 1416, x18)

inst_178:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x167638 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f167638; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:96; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 96, x17, x15, 1424, x18)

inst_179:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x0c4ebc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7b8c4ebc; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:108; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 108, x17, x15, 1432, x18)

inst_180:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c42d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f37c42d; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:120; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 120, x17, x15, 1440, x18)

inst_181:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x526e3a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ed26e3a; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:132; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 132, x17, x15, 1448, x18)

inst_182:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ece7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e4ece7f; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:144; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 144, x17, x15, 1456, x18)

inst_183:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x304e7b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eb04e7b; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:156; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 156, x17, x15, 1464, x18)

inst_184:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ddf89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7edddf89; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:168; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 168, x17, x15, 1472, x18)

inst_185:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36dfac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f36dfac; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:180; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 180, x17, x15, 1480, x18)

inst_186:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4549ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ec549ce; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:192; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 192, x17, x15, 1488, x18)

inst_187:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x324fae and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e324fae; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:204; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 204, x17, x15, 1496, x18)

inst_188:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x252cf6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f252cf6; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:216; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 216, x17, x15, 1504, x18)

inst_189:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f368d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ecf368d; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:228; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 228, x17, x15, 1512, x18)

inst_190:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x13f0c0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f13f0c0; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:240; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 240, x17, x15, 1520, x18)

inst_191:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c8f07 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f3c8f07; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:252; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 252, x17, x15, 1528, x18)

inst_192:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x40dc0e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ec0dc0e; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:264; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 264, x17, x15, 1536, x18)

inst_193:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d403 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e02d403; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:276; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 276, x17, x15, 1544, x18)

inst_194:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17246c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e97246c; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:288; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 288, x17, x15, 1552, x18)

inst_195:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x63c854 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ee3c854; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:300; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 300, x17, x15, 1560, x18)

inst_196:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3cc5a4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f3cc5a4; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:312; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 312, x17, x15, 1568, x18)

inst_197:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x070ca2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f070ca2; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:324; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 324, x17, x15, 1576, x18)

inst_198:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d0597cb; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:336; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 336, x17, x15, 1584, x18)

inst_199:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x35b564 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7cb5b564; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:348; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 348, x17, x15, 1592, x18)

inst_200:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c0ad4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ebc0ad4; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:360; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 360, x17, x15, 1600, x18)

inst_201:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17028c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e97028c; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:372; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 372, x17, x15, 1608, x18)

inst_202:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x480a54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ec80a54; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:384; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 384, x17, x15, 1616, x18)

inst_203:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157602 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f157602; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:396; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 396, x17, x15, 1624, x18)

inst_204:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x433c5b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ec33c5b; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:408; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 408, x17, x15, 1632, x18)

inst_205:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x288fae and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ea88fae; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:420; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 420, x17, x15, 1640, x18)

inst_206:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0fe2cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e8fe2cd; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:432; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 432, x17, x15, 1648, x18)

inst_207:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018053 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f018053; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:444; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 444, x17, x15, 1656, x18)

inst_208:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06fbdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f06fbdb; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:456; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 456, x17, x15, 1664, x18)

inst_209:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52bd1c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ed2bd1c; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:468; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 468, x17, x15, 1672, x18)

inst_210:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04dea3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e04dea3; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:480; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 480, x17, x15, 1680, x18)

inst_211:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f18b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e9f18b8; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:492; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 492, x17, x15, 1688, x18)

inst_212:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191a03 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f191a03; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:504; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 504, x17, x15, 1696, x18)

inst_213:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a6c9e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e3a6c9e; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:516; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 516, x17, x15, 1704, x18)

inst_214:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x54206e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7cd4206e; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:528; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 528, x17, x15, 1712, x18)

inst_215:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x622d46 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ee22d46; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:540; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 540, x17, x15, 1720, x18)

inst_216:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42076b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ec2076b; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:552; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 552, x17, x15, 1728, x18)

inst_217:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22784b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f22784b; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:564; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 564, x17, x15, 1736, x18)

inst_218:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x296f9b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f296f9b; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:576; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 576, x17, x15, 1744, x18)

inst_219:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61a185 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ee1a185; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:588; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 588, x17, x15, 1752, x18)

inst_220:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x68fcac and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e68fcac; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:600; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 600, x17, x15, 1760, x18)

inst_221:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00b2db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f00b2db; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:612; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 612, x17, x15, 1768, x18)

inst_222:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f5de9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f1f5de9; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:624; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 624, x17, x15, 1776, x18)

inst_223:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2216ce and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ea216ce; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:636; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 636, x17, x15, 1784, x18)

inst_224:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cbed and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f33cbed; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:648; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 648, x17, x15, 1792, x18)

inst_225:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x088c7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f088c7f; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:660; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 660, x17, x15, 1800, x18)

inst_226:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a8666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f0a8666; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:672; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 672, x17, x15, 1808, x18)

inst_227:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f8288 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e7f8288; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:684; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 684, x17, x15, 1816, x18)

inst_228:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39afdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7db9afdd; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:696; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 696, x17, x15, 1824, x18)

inst_229:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x251c17 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f251c17; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:708; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 708, x17, x15, 1832, x18)

inst_230:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e917d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f3e917d; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:720; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 720, x17, x15, 1840, x18)

inst_231:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0ec6a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e0ec6a8; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:732; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 732, x17, x15, 1848, x18)

inst_232:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x76a41a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ef6a41a; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:744; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 744, x17, x15, 1856, x18)

inst_233:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55adae and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ed5adae; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:756; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 756, x17, x15, 1864, x18)

inst_234:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d0a1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f20d0a1; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:768; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 768, x17, x15, 1872, x18)

inst_235:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x040861 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7c840861; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:780; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 780, x17, x15, 1880, x18)

inst_236:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5e8d61 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e5e8d61; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:792; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 792, x17, x15, 1888, x18)

inst_237:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x307cdb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eb07cdb; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:804; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 804, x17, x15, 1896, x18)

inst_238:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x280619 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e280619; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:816; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 816, x17, x15, 1904, x18)

inst_239:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x314e35 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e314e35; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:828; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 828, x17, x15, 1912, x18)

inst_240:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x330244 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e330244; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:840; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 840, x17, x15, 1920, x18)

inst_241:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3e6453 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ebe6453; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:852; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 852, x17, x15, 1928, x18)

inst_242:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x282619 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ea82619; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:864; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 864, x17, x15, 1936, x18)

inst_243:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2a425a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e2a425a; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:876; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 876, x17, x15, 1944, x18)

inst_244:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x326d35 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7cb26d35; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:888; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 888, x17, x15, 1952, x18)

inst_245:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2217bf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ea217bf; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:900; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 900, x17, x15, 1960, x18)

inst_246:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x26592c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e26592c; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:912; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 912, x17, x15, 1968, x18)

inst_247:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1261e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e9261e6; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:924; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 924, x17, x15, 1976, x18)

inst_248:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34510e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f34510e; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:936; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 936, x17, x15, 1984, x18)

inst_249:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4fe702 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ecfe702; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:948; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 948, x17, x15, 1992, x18)

inst_250:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1c56e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7c9c56e0; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:960; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 960, x17, x15, 2000, x18)

inst_251:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x3bf1e1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7cbbf1e1; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:972; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 972, x17, x15, 2008, x18)

inst_252:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d12f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f2d12f5; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:984; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 984, x17, x15, 2016, x18)

inst_253:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x357df1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f357df1; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:996; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 996, x17, x15, 2024, x18)
RVTEST_SIGBASE(x15,signature_x15_2)

inst_254:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2fb07b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e2fb07b; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1008; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1008, x17, x15, 0, x18)

inst_255:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a8922 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f0a8922; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1020; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1020, x17, x15, 8, x18)

inst_256:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b0757 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eab0757; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1032; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1032, x17, x15, 16, x18)

inst_257:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x4f0890 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7acf0890; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1044; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1044, x17, x15, 24, x18)

inst_258:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x125b96 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f125b96; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1056; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1056, x17, x15, 32, x18)

inst_259:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x262ebb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ea62ebb; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1068; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1068, x17, x15, 40, x18)

inst_260:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207786 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f207786; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1080; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1080, x17, x15, 48, x18)

inst_261:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2e2ab9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7cae2ab9; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1092; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1092, x17, x15, 56, x18)

inst_262:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x102b16 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d902b16; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1104; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1104, x17, x15, 64, x18)

inst_263:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x176f54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f176f54; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1116; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1116, x17, x15, 72, x18)

inst_264:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a3631 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7efa3631; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1128; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1128, x17, x15, 80, x18)

inst_265:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2c9ac4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eac9ac4; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1140; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1140, x17, x15, 88, x18)

inst_266:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3e3f3f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ebe3f3f; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1152; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1152, x17, x15, 96, x18)

inst_267:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x43e49b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e43e49b; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1164; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1164, x17, x15, 104, x18)

inst_268:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a50c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f12a50c; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1176; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1176, x17, x15, 112, x18)

inst_269:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b50f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f22b50f; op2val:0x80000000; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1188; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1188, x17, x15, 120, x18)

inst_270:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x396928 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e396928; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1200; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1200, x17, x15, 128, x18)

inst_271:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x317f52 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7db17f52; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1212; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1212, x17, x15, 136, x18)

inst_272:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21ab51 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ea1ab51; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1224; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1224, x17, x15, 144, x18)

inst_273:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3db9f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f3db9f6; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1236; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1236, x17, x15, 152, x18)

inst_274:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3809d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e3809d5; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1248; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1248, x17, x15, 160, x18)

inst_275:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x75e793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7cf5e793; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1260; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1260, x17, x15, 168, x18)

inst_276:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x30cc24 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7db0cc24; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1272; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1272, x17, x15, 176, x18)

inst_277:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0cd344 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3ffff8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d8cd344; op2val:0x0; op3val:0xf1bffff8; valaddr_reg:x16; val_offset:1284; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1284, x17, x15, 184, x18)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
test_fp:
.word 0x7dce622b
.word 0x80000000
.word 0xf1bffff8
.word 0x7f0ed966
.word 0x0
.word 0xf1bffff8
.word 0x7e396928
.word 0x7e396928
.word 0xf1bffff8
.word 0x7e008ceb
.word 0x0
.word 0xf1bffff8
.word 0x7db17f52
.word 0x0
.word 0x0
.word 0x7ea1ab51
.word 0x7ea1ab51
.word 0x7ea1ab51
.word 0x7f3db9f6
.word 0x7f3db9f6
.word 0x7f3db9f6
.word 0x7e3809d5
.word 0x0
.word 0x7e3809d5
.word 0x7cf5e793
.word 0x0
.word 0x0
.word 0x7f29ee78
.word 0x0
.word 0xf1bffff8
.word 0x7db0cc24
.word 0x7db0cc24
.word 0xf1bffff8
.word 0x7d8cd344
.word 0x0
.word 0x7d8cd344
.word 0x7f00b812
.word 0x0
.word 0xf1bffff8
.word 0x7c182599
.word 0x0
.word 0xf1bffff8
.word 0x7f1eee75
.word 0x0
.word 0xf1bffff8
.word 0x7f171b57
.word 0x0
.word 0xf1bffff8
.word 0x7e54e058
.word 0x0
.word 0xf1bffff8
.word 0x7eafc88c
.word 0x80000000
.word 0xf1bffff8
.word 0x7f319ce6
.word 0x80000000
.word 0xf1bffff8
.word 0x7ed8bf61
.word 0x80000000
.word 0xf1bffff8
.word 0x7f2b0708
.word 0x80000000
.word 0xf1bffff8
.word 0x7e4cd7ff
.word 0x80000000
.word 0xf1bffff8
.word 0x7d7b1d83
.word 0x80000000
.word 0xf1bffff8
.word 0x7e2bcff9
.word 0x80000000
.word 0xf1bffff8
.word 0x7edb2e1a
.word 0x80000000
.word 0xf1bffff8
.word 0x7e912ace
.word 0x80000000
.word 0xf1bffff8
.word 0x7f16201f
.word 0x80000000
.word 0xf1bffff8
.word 0x7eec3b3e
.word 0x80000000
.word 0xf1bffff8
.word 0x7e82e795
.word 0x80000000
.word 0xf1bffff8
.word 0x7f1f12b9
.word 0x80000000
.word 0xf1bffff8
.word 0x7f17517f
.word 0x80000000
.word 0xf1bffff8
.word 0x7f264de7
.word 0x80000000
.word 0xf1bffff8
.word 0x7d60d9a4
.word 0x80000000
.word 0xf1bffff8
.word 0x7cf0766e
.word 0xc1cc67ed
.word 0x7f3ffffe
.word 0x7da02a98
.word 0xc11970bf
.word 0x7f3fffff
.word 0x7ed3a642
.word 0xbfe83ba8
.word 0x7f3ffffe
.word 0x7dcfe433
.word 0xc0ec6e5d
.word 0x7f3fffff
.word 0x7f2a5ada
.word 0xbf904376
.word 0x7f3ffffe
.word 0x7f373a1e
.word 0xbf8620f1
.word 0x7f3fffff
.word 0x7ee7ede5
.word 0xbfd3ed39
.word 0x7f3fffff
.word 0x7f268b6a
.word 0xbf939067
.word 0x7f3fffff
.word 0x7e5fa740
.word 0xc05bc4c8
.word 0x7f3fffff
.word 0x7e82ab65
.word 0xc03c13d7
.word 0x7f3fffff
.word 0x7e8d5a7c
.word 0xc02ddcac
.word 0x7f3fffff
.word 0x7f217f53
.word 0xbf982d04
.word 0x7f3fffff
.word 0x7ee67aed
.word 0xbfd54254
.word 0x7f3ffffe
.word 0x7f11c013
.word 0xbfa89dfc
.word 0x7f3fffff
.word 0x7e238f3f
.word 0x80000000
.word 0xf1bffff8
.word 0x7f2ee8de
.word 0x80000000
.word 0xf1bffff8
.word 0x7e025339
.word 0x80000000
.word 0xf1bffff8
.word 0x7d82119e
.word 0x80000000
.word 0xf1bffff8
.word 0x7f0b4a10
.word 0x80000000
.word 0xf1bffff8
.word 0x7e34342f
.word 0x80000000
.word 0xf1bffff8
.word 0x7f3d37b2
.word 0x80000000
.word 0xf1bffff8
.word 0x7eba0c29
.word 0x0
.word 0xf1bffff8
.word 0x7f03ecd6
.word 0x0
.word 0xf1bffff8
.word 0x7f296b63
.word 0x0
.word 0xf1bffff8
.word 0x7e8409cf
.word 0x0
.word 0xf1bffff8
.word 0x7f32fae0
.word 0x0
.word 0xf1bffff8
.word 0x7f20d6ae
.word 0x0
.word 0xf1bffff8
.word 0x7f017ed0
.word 0x0
.word 0xf1bffff8
.word 0x7e239b5c
.word 0x0
.word 0xf1bffff8
.word 0x7e823675
.word 0x0
.word 0xf1bffff8
.word 0x7f164749
.word 0x0
.word 0xf1bffff8
.word 0x7f3d8377
.word 0x0
.word 0xf1bffff8
.word 0x7e7bb471
.word 0x0
.word 0xf1bffff8
.word 0x7e1a414e
.word 0x0
.word 0xf1bffff8
.word 0x7c5e539a
.word 0x0
.word 0xf1bffff8
.word 0x7f2cbcfc
.word 0x80000000
.word 0xf1bffff8
.word 0x7f2759f0
.word 0x80000000
.word 0xf1bffff8
.word 0x7e79dd8e
.word 0x80000000
.word 0xf1bffff8
.word 0x7ebfec54
.word 0x80000000
.word 0xf1bffff8
.word 0x7e636240
.word 0x80000000
.word 0xf1bffff8
.word 0x7effba49
.word 0x80000000
.word 0xf1bffff8
.word 0x7da06546
.word 0x80000000
.word 0xf1bffff8
.word 0x7e151546
.word 0x965bcbfe
.word 0xf1bffff8
.word 0x7ea640ba
.word 0x95c518ee
.word 0xf1bffff8
.word 0x7f016ff7
.word 0x957d283c
.word 0xf1bffff8
.word 0x7e1e0667
.word 0x964f5c0c
.word 0xf1bffff8
.word 0x7e8538b1
.word 0x95f5f765
.word 0xf1bffff8
.word 0x7e9123d8
.word 0x95e1c4a7
.word 0xf1bffff8
.word 0x7ec36852
.word 0x95a7b0ca
.word 0xf1bffff8
.word 0x7f072c24
.word 0x15726a91
.word 0xf1bffff8
.word 0x7f3af6ff
.word 0x152f434d
.word 0xf1bffff8
.word 0x7f269d2c
.word 0x1544ab92
.word 0xf1bffff8
.word 0x7e03b9a1
.word 0x1678c2ac
.word 0xf1bffff8
.word 0x7edafcdb
.word 0x1595a24b
.word 0xf1bffff8
.word 0x7f38be1b
.word 0x15315f00
.word 0xf1bffff8
.word 0x7f1d53d7
.word 0x15504766
.word 0xf1bffff8
.word 0x7ce8f58b
.word 0x178ca8ec
.word 0xf1bffff8
.word 0x7f28b6bd
.word 0x154238ed
.word 0xf1bffff8
.word 0x7bd06932
.word 0x189d3a54
.word 0xf1bffff8
.word 0x7e41cf9e
.word 0x16291269
.word 0xf1bffff8
.word 0x7e9fcf65
.word 0x15cd0b16
.word 0xf1bffff8
.word 0x7f0ed153
.word 0x1565707b
.word 0xf1bffff8
.word 0x7f3457e7
.word 0x1535b2a5
.word 0xf1bffff8
.word 0x7e6e5bf8
.word 0x96097921
.word 0xf1bffff8
.word 0x7f24d5b2
.word 0x9546cb03
.word 0xf1bffff8
.word 0x7e6b4e0e
.word 0x960b41f2
.word 0xf1bffff8
.word 0x7f281a41
.word 0x9542edb9
.word 0xf1bffff8
.word 0x7f39d661
.word 0x9530537f
.word 0xf1bffff8
.word 0x7e655450
.word 0x960ee2dd
.word 0xf1bffff8
.word 0x7d34967e
.word 0x973573ab
.word 0xf1bffff8
.word 0x7ef248b2
.word 0x80000000
.word 0xf1bffff8
.word 0x7e76b77e
.word 0x80000000
.word 0xf1bffff8
.word 0x7edd1ff5
.word 0x80000000
.word 0xf1bffff8
.word 0x7e97a40d
.word 0x80000000
.word 0xf1bffff8
.word 0x7ef906c5
.word 0x80000000
.word 0xf1bffff8
.word 0x7e2b6a13
.word 0x80000000
.word 0xf1bffff8
.word 0x7ec65fcc
.word 0x80000000
.word 0xf1bffff8
.word 0x7f192dff
.word 0x0
.word 0xf1bffff8
.word 0x7f3b506b
.word 0x0
.word 0xf1bffff8
.word 0x7e296bac
.word 0x0
.word 0xf1bffff8
.word 0x7ed12a66
.word 0x0
.word 0xf1bffff8
.word 0x7f0235b2
.word 0x0
.word 0xf1bffff8
.word 0x7f0748c6
.word 0x0
.word 0xf1bffff8
.word 0x7df61c0c
.word 0x0
.word 0xf1bffff8
.word 0x7f0a0433
.word 0x0
.word 0xf1bffff8
.word 0x7de0f718
.word 0x0
.word 0xf1bffff8
.word 0x7c5b84eb
.word 0x0
.word 0xf1bffff8
.word 0x7c7fd01a
.word 0x0
.word 0xf1bffff8
.word 0x7f1cdf21
.word 0x0
.word 0xf1bffff8
.word 0x7ee891ae
.word 0x0
.word 0xf1bffff8
.word 0x7e2094f5
.word 0x0
.word 0xf1bffff8
.word 0x7ec3e270
.word 0x80000000
.word 0xf1bffff8
.word 0x7f2cc3e0
.word 0x80000000
.word 0xf1bffff8
.word 0x7da70ed6
.word 0x80000000
.word 0xf1bffff8
.word 0x7e106a07
.word 0x80000000
.word 0xf1bffff8
.word 0x7ea1a1fc
.word 0x80000000
.word 0xf1bffff8
.word 0x7e94701b
.word 0x80000000
.word 0xf1bffff8
.word 0x7c9135f9
.word 0x80000000
.word 0xf1bffff8
.word 0x7eb5ed95
.word 0x80000000
.word 0xf1bffff8
.word 0x7e774c1e
.word 0x80000000
.word 0xf1bffff8
.word 0x7eae9afc
.word 0x80000000
.word 0xf1bffff8
.word 0x7f08a011
.word 0x80000000
.word 0xf1bffff8
.word 0x7e519928
.word 0x80000000
.word 0xf1bffff8
.word 0x7e0122a3
.word 0x80000000
.word 0xf1bffff8
.word 0x7eca8399
.word 0x80000000
.word 0xf1bffff8
.word 0x7df52f4e
.word 0x0
.word 0xf1bffff8
.word 0x7d558d1d
.word 0x0
.word 0xf1bffff8
.word 0x7e844224
.word 0x0
.word 0xf1bffff8
.word 0x7eefec8a
.word 0x0
.word 0xf1bffff8
.word 0x7da82cad
.word 0x0
.word 0xf1bffff8
.word 0x7e3fa956
.word 0x0
.word 0xf1bffff8
.word 0x7f111299
.word 0x0
.word 0xf1bffff8
.word 0x7c32e9b8
.word 0x0
.word 0xf1bffff8
.word 0x7c4d182e
.word 0x0
.word 0xf1bffff8
.word 0x7d7fb1fc
.word 0x0
.word 0xf1bffff8
.word 0x7f013cdf
.word 0x0
.word 0xf1bffff8
.word 0x7f219d70
.word 0x0
.word 0xf1bffff8
.word 0x7e4410d9
.word 0x0
.word 0xf1bffff8
.word 0x7f1cc187
.word 0x0
.word 0xf1bffff8
.word 0x7f190af0
.word 0x80000000
.word 0xf1bffff8
.word 0x7f194cde
.word 0x80000000
.word 0xf1bffff8
.word 0x7f25504e
.word 0x80000000
.word 0xf1bffff8
.word 0x7ee06ed6
.word 0x80000000
.word 0xf1bffff8
.word 0x7e081926
.word 0x80000000
.word 0xf1bffff8
.word 0x7e30562f
.word 0x80000000
.word 0xf1bffff8
.word 0x7cabe0d7
.word 0x80000000
.word 0xf1bffff8
.word 0x7eafeda9
.word 0x80000000
.word 0xf1bffff8
.word 0x7eeb2e86
.word 0x80000000
.word 0xf1bffff8
.word 0x7eef6b81
.word 0x80000000
.word 0xf1bffff8
.word 0x7ecec69e
.word 0x80000000
.word 0xf1bffff8
.word 0x7e84e4d7
.word 0x80000000
.word 0xf1bffff8
.word 0x7e8901e1
.word 0x80000000
.word 0xf1bffff8
.word 0x7eba3613
.word 0x80000000
.word 0xf1bffff8
.word 0x7ec1d009
.word 0x0
.word 0xf1bffff8
.word 0x7e197a06
.word 0x0
.word 0xf1bffff8
.word 0x7edae136
.word 0x0
.word 0xf1bffff8
.word 0x7f270abc
.word 0x0
.word 0xf1bffff8
.word 0x7d2c6927
.word 0x0
.word 0xf1bffff8
.word 0x7ea39e6a
.word 0x0
.word 0xf1bffff8
.word 0x7ed78fb8
.word 0x0
.word 0xf1bffff8
.word 0x7ec72c25
.word 0x0
.word 0xf1bffff8
.word 0x7f1b5ad7
.word 0x0
.word 0xf1bffff8
.word 0x7f0e2d38
.word 0x0
.word 0xf1bffff8
.word 0x7f2a257f
.word 0x0
.word 0xf1bffff8
.word 0x7f1d8885
.word 0x0
.word 0xf1bffff8
.word 0x7f167638
.word 0x0
.word 0xf1bffff8
.word 0x7b8c4ebc
.word 0x0
.word 0xf1bffff8
.word 0x7f37c42d
.word 0x80000000
.word 0xf1bffff8
.word 0x7ed26e3a
.word 0x80000000
.word 0xf1bffff8
.word 0x7e4ece7f
.word 0x80000000
.word 0xf1bffff8
.word 0x7eb04e7b
.word 0x80000000
.word 0xf1bffff8
.word 0x7edddf89
.word 0x80000000
.word 0xf1bffff8
.word 0x7f36dfac
.word 0x80000000
.word 0xf1bffff8
.word 0x7ec549ce
.word 0x80000000
.word 0xf1bffff8
.word 0x7e324fae
.word 0x80000000
.word 0xf1bffff8
.word 0x7f252cf6
.word 0x80000000
.word 0xf1bffff8
.word 0x7ecf368d
.word 0x80000000
.word 0xf1bffff8
.word 0x7f13f0c0
.word 0x80000000
.word 0xf1bffff8
.word 0x7f3c8f07
.word 0x80000000
.word 0xf1bffff8
.word 0x7ec0dc0e
.word 0x80000000
.word 0xf1bffff8
.word 0x7e02d403
.word 0x80000000
.word 0xf1bffff8
.word 0x7e97246c
.word 0x0
.word 0xf1bffff8
.word 0x7ee3c854
.word 0x0
.word 0xf1bffff8
.word 0x7f3cc5a4
.word 0x0
.word 0xf1bffff8
.word 0x7f070ca2
.word 0x0
.word 0xf1bffff8
.word 0x7d0597cb
.word 0x0
.word 0xf1bffff8
.word 0x7cb5b564
.word 0x0
.word 0xf1bffff8
.word 0x7ebc0ad4
.word 0x0
.word 0xf1bffff8
.word 0x7e97028c
.word 0x0
.word 0xf1bffff8
.word 0x7ec80a54
.word 0x0
.word 0xf1bffff8
.word 0x7f157602
.word 0x0
.word 0xf1bffff8
.word 0x7ec33c5b
.word 0x0
.word 0xf1bffff8
.word 0x7ea88fae
.word 0x0
.word 0xf1bffff8
.word 0x7e8fe2cd
.word 0x0
.word 0xf1bffff8
.word 0x7f018053
.word 0x0
.word 0xf1bffff8
.word 0x7f06fbdb
.word 0x80000000
.word 0xf1bffff8
.word 0x7ed2bd1c
.word 0x80000000
.word 0xf1bffff8
.word 0x7e04dea3
.word 0x80000000
.word 0xf1bffff8
.word 0x7e9f18b8
.word 0x80000000
.word 0xf1bffff8
.word 0x7f191a03
.word 0x80000000
.word 0xf1bffff8
.word 0x7e3a6c9e
.word 0x80000000
.word 0xf1bffff8
.word 0x7cd4206e
.word 0x80000000
.word 0xf1bffff8
.word 0x7ee22d46
.word 0x80000000
.word 0xf1bffff8
.word 0x7ec2076b
.word 0x80000000
.word 0xf1bffff8
.word 0x7f22784b
.word 0x80000000
.word 0xf1bffff8
.word 0x7f296f9b
.word 0x80000000
.word 0xf1bffff8
.word 0x7ee1a185
.word 0x80000000
.word 0xf1bffff8
.word 0x7e68fcac
.word 0x80000000
.word 0xf1bffff8
.word 0x7f00b2db
.word 0x80000000
.word 0xf1bffff8
.word 0x7f1f5de9
.word 0x0
.word 0xf1bffff8
.word 0x7ea216ce
.word 0x0
.word 0xf1bffff8
.word 0x7f33cbed
.word 0x0
.word 0xf1bffff8
.word 0x7f088c7f
.word 0x0
.word 0xf1bffff8
.word 0x7f0a8666
.word 0x0
.word 0xf1bffff8
.word 0x7e7f8288
.word 0x0
.word 0xf1bffff8
.word 0x7db9afdd
.word 0x0
.word 0xf1bffff8
.word 0x7f251c17
.word 0x0
.word 0xf1bffff8
.word 0x7f3e917d
.word 0x0
.word 0xf1bffff8
.word 0x7e0ec6a8
.word 0x0
.word 0xf1bffff8
.word 0x7ef6a41a
.word 0x0
.word 0xf1bffff8
.word 0x7ed5adae
.word 0x0
.word 0xf1bffff8
.word 0x7f20d0a1
.word 0x0
.word 0xf1bffff8
.word 0x7c840861
.word 0x0
.word 0xf1bffff8
.word 0x7e5e8d61
.word 0x80000000
.word 0xf1bffff8
.word 0x7eb07cdb
.word 0x80000000
.word 0xf1bffff8
.word 0x7e280619
.word 0x80000000
.word 0xf1bffff8
.word 0x7e314e35
.word 0x80000000
.word 0xf1bffff8
.word 0x7e330244
.word 0x80000000
.word 0xf1bffff8
.word 0x7ebe6453
.word 0x80000000
.word 0xf1bffff8
.word 0x7ea82619
.word 0x80000000
.word 0xf1bffff8
.word 0x7e2a425a
.word 0x80000000
.word 0xf1bffff8
.word 0x7cb26d35
.word 0x80000000
.word 0xf1bffff8
.word 0x7ea217bf
.word 0x80000000
.word 0xf1bffff8
.word 0x7e26592c
.word 0x80000000
.word 0xf1bffff8
.word 0x7e9261e6
.word 0x80000000
.word 0xf1bffff8
.word 0x7f34510e
.word 0x80000000
.word 0xf1bffff8
.word 0x7ecfe702
.word 0x80000000
.word 0xf1bffff8
.word 0x7c9c56e0
.word 0x0
.word 0xf1bffff8
.word 0x7cbbf1e1
.word 0x0
.word 0xf1bffff8
.word 0x7f2d12f5
.word 0x0
.word 0xf1bffff8
.word 0x7f357df1
.word 0x0
.word 0xf1bffff8
.word 0x7e2fb07b
.word 0x0
.word 0xf1bffff8
.word 0x7f0a8922
.word 0x0
.word 0xf1bffff8
.word 0x7eab0757
.word 0x0
.word 0xf1bffff8
.word 0x7acf0890
.word 0x0
.word 0xf1bffff8
.word 0x7f125b96
.word 0x0
.word 0xf1bffff8
.word 0x7ea62ebb
.word 0x0
.word 0xf1bffff8
.word 0x7f207786
.word 0x0
.word 0xf1bffff8
.word 0x7cae2ab9
.word 0x0
.word 0xf1bffff8
.word 0x7d902b16
.word 0x0
.word 0xf1bffff8
.word 0x7f176f54
.word 0x0
.word 0xf1bffff8
.word 0x7efa3631
.word 0x80000000
.word 0xf1bffff8
.word 0x7eac9ac4
.word 0x80000000
.word 0xf1bffff8
.word 0x7ebe3f3f
.word 0x80000000
.word 0xf1bffff8
.word 0x7e43e49b
.word 0x80000000
.word 0xf1bffff8
.word 0x7f12a50c
.word 0x80000000
.word 0xf1bffff8
.word 0x7f22b50f
.word 0x80000000
.word 0xf1bffff8
.word 0x7e396928
.word 0x0
.word 0xf1bffff8
.word 0x7db17f52
.word 0x0
.word 0xf1bffff8
.word 0x7ea1ab51
.word 0x0
.word 0xf1bffff8
.word 0x7f3db9f6
.word 0x0
.word 0xf1bffff8
.word 0x7e3809d5
.word 0x0
.word 0xf1bffff8
.word 0x7cf5e793
.word 0x0
.word 0xf1bffff8
.word 0x7db0cc24
.word 0x0
.word 0xf1bffff8
.word 0x7d8cd344
.word 0x0
.word 0xf1bffff8
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_2:
    .fill 48*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
