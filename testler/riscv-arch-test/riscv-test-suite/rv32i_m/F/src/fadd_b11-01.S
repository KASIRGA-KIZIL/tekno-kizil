
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.5.2
// timestamp : Tue Sep  7 16:07:52 2021 GMT
// usage     : riscv_ctg \
//                  -- cgf $cgf \
//                  -- xlen $xlen \
// -----------
//
// -----------
// Copyright (c) 2021. IIT Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fadd.s instruction of the RISC-V F extension for the fadd_b11 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fadd_b11)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs1 == rs2 == rd, rs1==f10, rs2==f10, rd==f10, fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f10; dest:f10; op1val:0x0; op2val:0x0; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f10, f10, f10, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1:
// rs2 == rd != rs1, rs1==f31, rs2==f17, rd==f17, fs1 == 1 and fe1 == 0xfe and fm1 == 0x4ccccc and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f31; op2:f17; dest:f17; op1val:0xff4ccccc; op2val:0xff7fffff; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f17, f31, f17, 0x0, 0, x16, 8, x17, x15, 8, x18)

inst_2:
// rs1 == rd != rs2, rs1==f21, rs2==f22, rd==f21, fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x4ccccc and rm_val == 0  
// opcode: fadd.s ; op1:f21; op2:f22; dest:f21; op1val:0xff7fffff; op2val:0xff4ccccc; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f21, f21, f22, 0x0, 0, x16, 16, x17, x15, 16, x18)

inst_3:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==f0, rs2==f6, rd==f15, fs1 == 1 and fe1 == 0xfe and fm1 == 0x333333 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f0; op2:f6; dest:f15; op1val:0xff333333; op2val:0xff7fffff; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f15, f0, f6, 0x0, 0, x16, 24, x17, x15, 24, x18)

inst_4:
// rs1 == rs2 != rd, rs1==f23, rs2==f23, rd==f20, fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x333333 and rm_val == 0  
// opcode: fadd.s ; op1:f23; op2:f23; dest:f20; op1val:0xff7fffff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f20, f23, f23, 0x0, 0, x16, 32, x17, x15, 32, x18)

inst_5:
// rs1==f4, rs2==f7, rd==f23, fs1 == 1 and fe1 == 0xfe and fm1 == 0x5b6db6 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f4; op2:f7; dest:f23; op1val:0xff5b6db6; op2val:0xff7fffff; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f23, f4, f7, 0x0, 0, x16, 40, x17, x15, 40, x18)

inst_6:
// rs1==f11, rs2==f9, rd==f28, fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x5b6db6 and rm_val == 0  
// opcode: fadd.s ; op1:f11; op2:f9; dest:f28; op1val:0xff7fffff; op2val:0xff5b6db6; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f28, f11, f9, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_7:
// rs1==f29, rs2==f3, rd==f12, fs1 == 1 and fe1 == 0xfe and fm1 == 0x249249 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f29; op2:f3; dest:f12; op1val:0xff249249; op2val:0xff7fffff; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f29, f3, 0x0, 0, x16, 56, x17, x15, 56, x18)

inst_8:
// rs1==f2, rs2==f20, rd==f1, fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x249249 and rm_val == 0  
// opcode: fadd.s ; op1:f2; op2:f20; dest:f1; op1val:0xff7fffff; op2val:0xff249249; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f1, f2, f20, 0x0, 0, x16, 64, x17, x15, 64, x18)

inst_9:
// rs1==f3, rs2==f30, rd==f18, fs1 == 1 and fe1 == 0xfe and fm1 == 0x444444 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f3; op2:f30; dest:f18; op1val:0xff444444; op2val:0xff7fffff; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f18, f3, f30, 0x0, 0, x16, 72, x17, x15, 72, x18)

inst_10:
// rs1==f19, rs2==f28, rd==f31, fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x444444 and rm_val == 0  
// opcode: fadd.s ; op1:f19; op2:f28; dest:f31; op1val:0xff7fffff; op2val:0xff444444; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f31, f19, f28, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_11:
// rs1==f24, rs2==f18, rd==f5, fs1 == 1 and fe1 == 0xfe and fm1 == 0x3bbbbb and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f24; op2:f18; dest:f5; op1val:0xff3bbbbb; op2val:0xff7fffff; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f5, f24, f18, 0x0, 0, x16, 88, x17, x15, 88, x18)

inst_12:
// rs1==f6, rs2==f31, rd==f14, fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3bbbbb and rm_val == 0  
// opcode: fadd.s ; op1:f6; op2:f31; dest:f14; op1val:0xff7fffff; op2val:0xff3bbbbb; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f14, f6, f31, 0x0, 0, x16, 96, x17, x15, 96, x18)

inst_13:
// rs1==f17, rs2==f13, rd==f29, fs1 == 1 and fe1 == 0xfe and fm1 == 0x666666 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f17; op2:f13; dest:f29; op1val:0xff666666; op2val:0xff7fffff; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f29, f17, f13, 0x0, 0, x16, 104, x17, x15, 104, x18)

inst_14:
// rs1==f9, rs2==f25, rd==f24, fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x666666 and rm_val == 0  
// opcode: fadd.s ; op1:f9; op2:f25; dest:f24; op1val:0xff7fffff; op2val:0xff666666; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f24, f9, f25, 0x0, 0, x16, 112, x17, x15, 112, x18)

inst_15:
// rs1==f18, rs2==f2, rd==f16, fs1 == 1 and fe1 == 0xfe and fm1 == 0x199999 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f18; op2:f2; dest:f16; op1val:0xff199999; op2val:0xff7fffff; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f16, f18, f2, 0x0, 0, x16, 120, x17, x15, 120, x18)

inst_16:
// rs1==f8, rs2==f5, rd==f22, fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x199999 and rm_val == 0  
// opcode: fadd.s ; op1:f8; op2:f5; dest:f22; op1val:0xff7fffff; op2val:0xff199999; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f22, f8, f5, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_17:
// rs1==f1, rs2==f24, rd==f6, fs1 == 1 and fe1 == 0xfe and fm1 == 0x6db6db and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f1; op2:f24; dest:f6; op1val:0xff6db6db; op2val:0xff7fffff; valaddr_reg:x16; val_offset:136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f6, f1, f24, 0x0, 0, x16, 136, x17, x15, 136, x18)

inst_18:
// rs1==f25, rs2==f15, rd==f30, fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x6db6db and rm_val == 0  
// opcode: fadd.s ; op1:f25; op2:f15; dest:f30; op1val:0xff7fffff; op2val:0xff6db6db; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f30, f25, f15, 0x0, 0, x16, 144, x17, x15, 144, x18)

inst_19:
// rs1==f26, rs2==f27, rd==f13, fs1 == 1 and fe1 == 0xfe and fm1 == 0x36db6d and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f26; op2:f27; dest:f13; op1val:0xff36db6d; op2val:0xff7fffff; valaddr_reg:x16; val_offset:152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f13, f26, f27, 0x0, 0, x16, 152, x17, x15, 152, x18)

inst_20:
// rs1==f5, rs2==f12, rd==f4, fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x36db6d and rm_val == 0  
// opcode: fadd.s ; op1:f5; op2:f12; dest:f4; op1val:0xff7fffff; op2val:0xff36db6d; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f4, f5, f12, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_21:
// rs1==f16, rs2==f8, rd==f9, fs1 == 1 and fe1 == 0xfe and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f16; op2:f8; dest:f9; op1val:0xff000001; op2val:0xff7fffff; valaddr_reg:x16; val_offset:168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f9, f16, f8, 0x0, 0, x16, 168, x17, x15, 168, x18)

inst_22:
// rs1==f20, rs2==f0, rd==f19, fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f20; op2:f0; dest:f19; op1val:0xff7fffff; op2val:0xff000001; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f19, f20, f0, 0x0, 0, x16, 176, x17, x15, 176, x18)

inst_23:
// rs1==f13, rs2==f11, rd==f2, fs1 == 1 and fe1 == 0xfe and fm1 == 0x7ffffe and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f13; op2:f11; dest:f2; op1val:0xff7ffffe; op2val:0xff7fffff; valaddr_reg:x16; val_offset:184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f2, f13, f11, 0x0, 0, x16, 184, x17, x15, 184, x18)

inst_24:
// rs1==f22, rs2==f21, rd==f3, fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f22; op2:f21; dest:f3; op1val:0xff7fffff; op2val:0xff7ffffe; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f3, f22, f21, 0x0, 0, x16, 192, x17, x15, 192, x18)

inst_25:
// rs1==f7, rs2==f16, rd==f27, fs1 == 1 and fe1 == 0xfe and fm1 == 0x000003 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f7; op2:f16; dest:f27; op1val:0xff000003; op2val:0xff7fffff; valaddr_reg:x16; val_offset:200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f27, f7, f16, 0x0, 0, x16, 200, x17, x15, 200, x18)

inst_26:
// rs1==f15, rs2==f14, rd==f26, fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f15; op2:f14; dest:f26; op1val:0xff7fffff; op2val:0xff000003; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f26, f15, f14, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_27:
// rs1==f12, rs2==f19, rd==f11, fs1 == 1 and fe1 == 0xfe and fm1 == 0x7ffffc and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f12; op2:f19; dest:f11; op1val:0xff7ffffc; op2val:0xff7fffff; valaddr_reg:x16; val_offset:216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f11, f12, f19, 0x0, 0, x16, 216, x17, x15, 216, x18)

inst_28:
// rs1==f28, rs2==f4, rd==f25, fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f28; op2:f4; dest:f25; op1val:0xff7fffff; op2val:0xff7ffffc; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f25, f28, f4, 0x0, 0, x16, 224, x17, x15, 224, x18)

inst_29:
// rs1==f14, rs2==f26, rd==f0, fs1 == 1 and fe1 == 0xfe and fm1 == 0x000007 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f14; op2:f26; dest:f0; op1val:0xff000007; op2val:0xff7fffff; valaddr_reg:x16; val_offset:232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f0, f14, f26, 0x0, 0, x16, 232, x17, x15, 232, x18)

inst_30:
// rs1==f27, rs2==f1, rd==f8, fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f27; op2:f1; dest:f8; op1val:0xff7fffff; op2val:0xff000007; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f8, f27, f1, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_31:
// rs1==f30, rs2==f29, rd==f7, fs1 == 1 and fe1 == 0xfe and fm1 == 0x7ffff8 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f30; op2:f29; dest:f7; op1val:0xff7ffff8; op2val:0xff7fffff; valaddr_reg:x16; val_offset:248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f7, f30, f29, 0x0, 0, x16, 248, x17, x15, 248, x18)

inst_32:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xff7ffff8; valaddr_reg:x16; val_offset:256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 256, x17, x15, 256, x18)

inst_33:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe800001; op2val:0xff7fffff; valaddr_reg:x16; val_offset:264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 264, x17, x15, 264, x18)

inst_34:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfd and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe800001; valaddr_reg:x16; val_offset:272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 272, x17, x15, 272, x18)

inst_35:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x7ffffe and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfefffffe; op2val:0xff7fffff; valaddr_reg:x16; val_offset:280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 280, x17, x15, 280, x18)

inst_36:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfefffffe; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_37:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x000003 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe800003; op2val:0xff7fffff; valaddr_reg:x16; val_offset:296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 296, x17, x15, 296, x18)

inst_38:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfd and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe800003; valaddr_reg:x16; val_offset:304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 304, x17, x15, 304, x18)

inst_39:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x7ffffc and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfefffffc; op2val:0xff7fffff; valaddr_reg:x16; val_offset:312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 312, x17, x15, 312, x18)

inst_40:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfefffffc; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_41:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x000007 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe800007; op2val:0xff7fffff; valaddr_reg:x16; val_offset:328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 328, x17, x15, 328, x18)

inst_42:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfd and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe800007; valaddr_reg:x16; val_offset:336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 336, x17, x15, 336, x18)

inst_43:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x7ffff8 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfefffff8; op2val:0xff7fffff; valaddr_reg:x16; val_offset:344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 344, x17, x15, 344, x18)

inst_44:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfefffff8; valaddr_reg:x16; val_offset:352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 352, x17, x15, 352, x18)

inst_45:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x00000f and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe80000f; op2val:0xff7fffff; valaddr_reg:x16; val_offset:360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 360, x17, x15, 360, x18)

inst_46:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfd and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe80000f; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_47:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x7ffff0 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfefffff0; op2val:0xff7fffff; valaddr_reg:x16; val_offset:376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 376, x17, x15, 376, x18)

inst_48:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfefffff0; valaddr_reg:x16; val_offset:384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 384, x17, x15, 384, x18)

inst_49:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x00001f and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe80001f; op2val:0xff7fffff; valaddr_reg:x16; val_offset:392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 392, x17, x15, 392, x18)

inst_50:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfd and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe80001f; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_51:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x7fffe0 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfeffffe0; op2val:0xff7fffff; valaddr_reg:x16; val_offset:408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 408, x17, x15, 408, x18)

inst_52:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfeffffe0; valaddr_reg:x16; val_offset:416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 416, x17, x15, 416, x18)

inst_53:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x00003f and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe80003f; op2val:0xff7fffff; valaddr_reg:x16; val_offset:424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 424, x17, x15, 424, x18)

inst_54:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfd and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe80003f; valaddr_reg:x16; val_offset:432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 432, x17, x15, 432, x18)

inst_55:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x7fffc0 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfeffffc0; op2val:0xff7fffff; valaddr_reg:x16; val_offset:440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 440, x17, x15, 440, x18)

inst_56:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfeffffc0; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_57:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x00007f and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe80007f; op2val:0xff7fffff; valaddr_reg:x16; val_offset:456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 456, x17, x15, 456, x18)

inst_58:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfd and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe80007f; valaddr_reg:x16; val_offset:464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 464, x17, x15, 464, x18)

inst_59:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x7fff80 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfeffff80; op2val:0xff7fffff; valaddr_reg:x16; val_offset:472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 472, x17, x15, 472, x18)

inst_60:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfeffff80; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_61:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x0000ff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe8000ff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 488, x17, x15, 488, x18)

inst_62:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfd and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe8000ff; valaddr_reg:x16; val_offset:496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 496, x17, x15, 496, x18)

inst_63:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x7fff00 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfeffff00; op2val:0xff7fffff; valaddr_reg:x16; val_offset:504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 504, x17, x15, 504, x18)

inst_64:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfeffff00; valaddr_reg:x16; val_offset:512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 512, x17, x15, 512, x18)

inst_65:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x0001ff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe8001ff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 520, x17, x15, 520, x18)

inst_66:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfd and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe8001ff; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_67:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x7ffe00 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfefffe00; op2val:0xff7fffff; valaddr_reg:x16; val_offset:536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 536, x17, x15, 536, x18)

inst_68:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfefffe00; valaddr_reg:x16; val_offset:544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 544, x17, x15, 544, x18)

inst_69:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x0003ff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe8003ff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 552, x17, x15, 552, x18)

inst_70:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfd and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe8003ff; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_71:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x7ffc00 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfefffc00; op2val:0xff7fffff; valaddr_reg:x16; val_offset:568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 568, x17, x15, 568, x18)

inst_72:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfefffc00; valaddr_reg:x16; val_offset:576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 576, x17, x15, 576, x18)

inst_73:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x0007ff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe8007ff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 584, x17, x15, 584, x18)

inst_74:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfd and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe8007ff; valaddr_reg:x16; val_offset:592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 592, x17, x15, 592, x18)

inst_75:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x7ff800 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfefff800; op2val:0xff7fffff; valaddr_reg:x16; val_offset:600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 600, x17, x15, 600, x18)

inst_76:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfefff800; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 608, x17, x15, 608, x18)

inst_77:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x000fff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe800fff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 616, x17, x15, 616, x18)

inst_78:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfd and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe800fff; valaddr_reg:x16; val_offset:624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 624, x17, x15, 624, x18)

inst_79:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x7ff000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfefff000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 632, x17, x15, 632, x18)

inst_80:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfefff000; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_81:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x001fff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe801fff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 648, x17, x15, 648, x18)

inst_82:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfd and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe801fff; valaddr_reg:x16; val_offset:656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 656, x17, x15, 656, x18)

inst_83:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x7fe000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfeffe000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 664, x17, x15, 664, x18)

inst_84:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfeffe000; valaddr_reg:x16; val_offset:672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 672, x17, x15, 672, x18)

inst_85:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x003fff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe803fff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 680, x17, x15, 680, x18)

inst_86:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfd and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe803fff; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 688, x17, x15, 688, x18)

inst_87:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x7fc000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfeffc000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 696, x17, x15, 696, x18)

inst_88:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfeffc000; valaddr_reg:x16; val_offset:704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 704, x17, x15, 704, x18)

inst_89:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x007fff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe807fff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 712, x17, x15, 712, x18)

inst_90:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfd and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe807fff; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_91:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x7f8000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfeff8000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 728, x17, x15, 728, x18)

inst_92:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfeff8000; valaddr_reg:x16; val_offset:736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 736, x17, x15, 736, x18)

inst_93:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x00ffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe80ffff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 744, x17, x15, 744, x18)

inst_94:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfd and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe80ffff; valaddr_reg:x16; val_offset:752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 752, x17, x15, 752, x18)

inst_95:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x7f0000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfeff0000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 760, x17, x15, 760, x18)

inst_96:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfeff0000; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 768, x17, x15, 768, x18)

inst_97:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x01ffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe81ffff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 776, x17, x15, 776, x18)

inst_98:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfd and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe81ffff; valaddr_reg:x16; val_offset:784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 784, x17, x15, 784, x18)

inst_99:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x7e0000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfefe0000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 792, x17, x15, 792, x18)

inst_100:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfefe0000; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_101:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x03ffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe83ffff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 808, x17, x15, 808, x18)

inst_102:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfd and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe83ffff; valaddr_reg:x16; val_offset:816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 816, x17, x15, 816, x18)

inst_103:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x7c0000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfefc0000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 824, x17, x15, 824, x18)

inst_104:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfefc0000; valaddr_reg:x16; val_offset:832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 832, x17, x15, 832, x18)

inst_105:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x07ffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe87ffff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 840, x17, x15, 840, x18)

inst_106:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfd and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe87ffff; valaddr_reg:x16; val_offset:848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 848, x17, x15, 848, x18)

inst_107:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x780000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfef80000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 856, x17, x15, 856, x18)

inst_108:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfd and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfef80000; valaddr_reg:x16; val_offset:864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 864, x17, x15, 864, x18)

inst_109:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x0fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe8fffff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 872, x17, x15, 872, x18)

inst_110:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfd and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe8fffff; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 880, x17, x15, 880, x18)

inst_111:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x700000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfef00000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 888, x17, x15, 888, x18)

inst_112:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfd and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfef00000; valaddr_reg:x16; val_offset:896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 896, x17, x15, 896, x18)

inst_113:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x1fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe9fffff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 904, x17, x15, 904, x18)

inst_114:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe9fffff; valaddr_reg:x16; val_offset:912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 912, x17, x15, 912, x18)

inst_115:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x600000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfee00000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 920, x17, x15, 920, x18)

inst_116:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfd and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfee00000; valaddr_reg:x16; val_offset:928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 928, x17, x15, 928, x18)

inst_117:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x3fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfebfffff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 936, x17, x15, 936, x18)

inst_118:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfebfffff; valaddr_reg:x16; val_offset:944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 944, x17, x15, 944, x18)

inst_119:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfec00000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 952, x17, x15, 952, x18)

inst_120:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfd and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfec00000; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 960, x17, x15, 960, x18)

inst_121:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfeffffff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 968, x17, x15, 968, x18)

inst_122:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfeffffff; valaddr_reg:x16; val_offset:976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 976, x17, x15, 976, x18)

inst_123:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe800000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 984, x17, x15, 984, x18)

inst_124:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfd and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe800000; valaddr_reg:x16; val_offset:992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 992, x17, x15, 992, x18)

inst_125:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe000001; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1000, x17, x15, 1000, x18)

inst_126:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfc and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe000001; valaddr_reg:x16; val_offset:1008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1008, x17, x15, 1008, x18)

inst_127:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x7ffffe and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe7ffffe; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1016, x17, x15, 1016, x18)

inst_128:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfc and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe7ffffe; valaddr_reg:x16; val_offset:1024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1024, x17, x15, 1024, x18)

inst_129:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x000003 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe000003; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1032; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1032, x17, x15, 1032, x18)

inst_130:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfc and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe000003; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1040, x17, x15, 1040, x18)

inst_131:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x7ffffc and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe7ffffc; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1048; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1048, x17, x15, 1048, x18)

inst_132:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfc and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe7ffffc; valaddr_reg:x16; val_offset:1056; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1056, x17, x15, 1056, x18)

inst_133:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x000007 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe000007; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1064; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1064, x17, x15, 1064, x18)

inst_134:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfc and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe000007; valaddr_reg:x16; val_offset:1072; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1072, x17, x15, 1072, x18)

inst_135:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x7ffff8 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe7ffff8; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1080; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1080, x17, x15, 1080, x18)

inst_136:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfc and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe7ffff8; valaddr_reg:x16; val_offset:1088; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1088, x17, x15, 1088, x18)

inst_137:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x00000f and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe00000f; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1096; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1096, x17, x15, 1096, x18)

inst_138:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfc and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe00000f; valaddr_reg:x16; val_offset:1104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1104, x17, x15, 1104, x18)

inst_139:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x7ffff0 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe7ffff0; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1112, x17, x15, 1112, x18)

inst_140:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfc and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe7ffff0; valaddr_reg:x16; val_offset:1120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1120, x17, x15, 1120, x18)

inst_141:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x00001f and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe00001f; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1128, x17, x15, 1128, x18)

inst_142:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfc and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe00001f; valaddr_reg:x16; val_offset:1136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1136, x17, x15, 1136, x18)

inst_143:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x7fffe0 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe7fffe0; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1144, x17, x15, 1144, x18)

inst_144:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfc and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe7fffe0; valaddr_reg:x16; val_offset:1152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1152, x17, x15, 1152, x18)

inst_145:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x00003f and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe00003f; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1160, x17, x15, 1160, x18)

inst_146:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfc and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe00003f; valaddr_reg:x16; val_offset:1168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1168, x17, x15, 1168, x18)

inst_147:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x7fffc0 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe7fffc0; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1176, x17, x15, 1176, x18)

inst_148:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfc and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe7fffc0; valaddr_reg:x16; val_offset:1184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1184, x17, x15, 1184, x18)

inst_149:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x00007f and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe00007f; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1192, x17, x15, 1192, x18)

inst_150:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfc and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe00007f; valaddr_reg:x16; val_offset:1200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1200, x17, x15, 1200, x18)

inst_151:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x7fff80 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe7fff80; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1208, x17, x15, 1208, x18)

inst_152:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfc and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe7fff80; valaddr_reg:x16; val_offset:1216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1216, x17, x15, 1216, x18)

inst_153:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x0000ff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe0000ff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1224, x17, x15, 1224, x18)

inst_154:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfc and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe0000ff; valaddr_reg:x16; val_offset:1232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1232, x17, x15, 1232, x18)

inst_155:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x7fff00 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe7fff00; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1240, x17, x15, 1240, x18)

inst_156:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfc and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe7fff00; valaddr_reg:x16; val_offset:1248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1248, x17, x15, 1248, x18)

inst_157:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x0001ff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe0001ff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1256, x17, x15, 1256, x18)

inst_158:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfc and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe0001ff; valaddr_reg:x16; val_offset:1264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1264, x17, x15, 1264, x18)

inst_159:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x7ffe00 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe7ffe00; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1272, x17, x15, 1272, x18)

inst_160:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfc and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe7ffe00; valaddr_reg:x16; val_offset:1280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1280, x17, x15, 1280, x18)

inst_161:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x0003ff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe0003ff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1288, x17, x15, 1288, x18)

inst_162:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfc and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe0003ff; valaddr_reg:x16; val_offset:1296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1296, x17, x15, 1296, x18)

inst_163:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x7ffc00 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe7ffc00; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1304, x17, x15, 1304, x18)

inst_164:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfc and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe7ffc00; valaddr_reg:x16; val_offset:1312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1312, x17, x15, 1312, x18)

inst_165:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x0007ff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe0007ff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1320, x17, x15, 1320, x18)

inst_166:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfc and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe0007ff; valaddr_reg:x16; val_offset:1328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1328, x17, x15, 1328, x18)

inst_167:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x7ff800 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe7ff800; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1336, x17, x15, 1336, x18)

inst_168:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfc and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe7ff800; valaddr_reg:x16; val_offset:1344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1344, x17, x15, 1344, x18)

inst_169:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x000fff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe000fff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1352, x17, x15, 1352, x18)

inst_170:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfc and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe000fff; valaddr_reg:x16; val_offset:1360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1360, x17, x15, 1360, x18)

inst_171:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x7ff000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe7ff000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1368, x17, x15, 1368, x18)

inst_172:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfc and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe7ff000; valaddr_reg:x16; val_offset:1376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1376, x17, x15, 1376, x18)

inst_173:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x001fff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe001fff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1384, x17, x15, 1384, x18)

inst_174:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfc and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe001fff; valaddr_reg:x16; val_offset:1392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1392, x17, x15, 1392, x18)

inst_175:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x7fe000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe7fe000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1400, x17, x15, 1400, x18)

inst_176:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfc and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe7fe000; valaddr_reg:x16; val_offset:1408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1408, x17, x15, 1408, x18)

inst_177:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x003fff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe003fff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1416, x17, x15, 1416, x18)

inst_178:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfc and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe003fff; valaddr_reg:x16; val_offset:1424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1424, x17, x15, 1424, x18)

inst_179:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x7fc000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe7fc000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1432, x17, x15, 1432, x18)

inst_180:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfc and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe7fc000; valaddr_reg:x16; val_offset:1440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1440, x17, x15, 1440, x18)

inst_181:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x007fff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe007fff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1448, x17, x15, 1448, x18)

inst_182:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfc and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe007fff; valaddr_reg:x16; val_offset:1456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1456, x17, x15, 1456, x18)

inst_183:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x7f8000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe7f8000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1464, x17, x15, 1464, x18)

inst_184:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfc and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe7f8000; valaddr_reg:x16; val_offset:1472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1472, x17, x15, 1472, x18)

inst_185:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x00ffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe00ffff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1480, x17, x15, 1480, x18)

inst_186:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfc and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe00ffff; valaddr_reg:x16; val_offset:1488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1488, x17, x15, 1488, x18)

inst_187:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x7f0000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe7f0000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1496, x17, x15, 1496, x18)

inst_188:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfc and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe7f0000; valaddr_reg:x16; val_offset:1504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1504, x17, x15, 1504, x18)

inst_189:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x01ffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe01ffff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1512, x17, x15, 1512, x18)

inst_190:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfc and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe01ffff; valaddr_reg:x16; val_offset:1520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1520, x17, x15, 1520, x18)

inst_191:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x7e0000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe7e0000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1528, x17, x15, 1528, x18)

inst_192:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfc and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe7e0000; valaddr_reg:x16; val_offset:1536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1536, x17, x15, 1536, x18)

inst_193:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x03ffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe03ffff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1544, x17, x15, 1544, x18)

inst_194:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfc and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe03ffff; valaddr_reg:x16; val_offset:1552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1552, x17, x15, 1552, x18)

inst_195:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x7c0000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe7c0000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1560, x17, x15, 1560, x18)

inst_196:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfc and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe7c0000; valaddr_reg:x16; val_offset:1568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1568, x17, x15, 1568, x18)

inst_197:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x07ffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe07ffff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1576, x17, x15, 1576, x18)

inst_198:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfc and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe07ffff; valaddr_reg:x16; val_offset:1584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1584, x17, x15, 1584, x18)

inst_199:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x780000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe780000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1592, x17, x15, 1592, x18)

inst_200:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfc and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe780000; valaddr_reg:x16; val_offset:1600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1600, x17, x15, 1600, x18)

inst_201:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x0fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe0fffff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1608, x17, x15, 1608, x18)

inst_202:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfc and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe0fffff; valaddr_reg:x16; val_offset:1616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1616, x17, x15, 1616, x18)

inst_203:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x700000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe700000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1624, x17, x15, 1624, x18)

inst_204:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfc and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe700000; valaddr_reg:x16; val_offset:1632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1632, x17, x15, 1632, x18)

inst_205:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x1fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe1fffff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1640, x17, x15, 1640, x18)

inst_206:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfc and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe1fffff; valaddr_reg:x16; val_offset:1648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1648, x17, x15, 1648, x18)

inst_207:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x600000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe600000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1656, x17, x15, 1656, x18)

inst_208:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfc and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe600000; valaddr_reg:x16; val_offset:1664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1664, x17, x15, 1664, x18)

inst_209:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x3fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe3fffff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1672, x17, x15, 1672, x18)

inst_210:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfc and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe3fffff; valaddr_reg:x16; val_offset:1680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1680, x17, x15, 1680, x18)

inst_211:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe400000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1688, x17, x15, 1688, x18)

inst_212:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfc and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe400000; valaddr_reg:x16; val_offset:1696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1696, x17, x15, 1696, x18)

inst_213:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe7fffff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1704, x17, x15, 1704, x18)

inst_214:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfc and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe7fffff; valaddr_reg:x16; val_offset:1712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1712, x17, x15, 1712, x18)

inst_215:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe000000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1720, x17, x15, 1720, x18)

inst_216:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfc and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfe000000; valaddr_reg:x16; val_offset:1728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1728, x17, x15, 1728, x18)

inst_217:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd800001; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1736, x17, x15, 1736, x18)

inst_218:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfb and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd800001; valaddr_reg:x16; val_offset:1744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1744, x17, x15, 1744, x18)

inst_219:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x7ffffe and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdfffffe; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1752, x17, x15, 1752, x18)

inst_220:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfb and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfdfffffe; valaddr_reg:x16; val_offset:1760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1760, x17, x15, 1760, x18)

inst_221:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x000003 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd800003; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1768, x17, x15, 1768, x18)

inst_222:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfb and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd800003; valaddr_reg:x16; val_offset:1776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1776, x17, x15, 1776, x18)

inst_223:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x7ffffc and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdfffffc; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1784, x17, x15, 1784, x18)

inst_224:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfb and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfdfffffc; valaddr_reg:x16; val_offset:1792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1792, x17, x15, 1792, x18)

inst_225:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x000007 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd800007; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1800, x17, x15, 1800, x18)

inst_226:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfb and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd800007; valaddr_reg:x16; val_offset:1808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1808, x17, x15, 1808, x18)

inst_227:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x7ffff8 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdfffff8; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1816, x17, x15, 1816, x18)

inst_228:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfb and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfdfffff8; valaddr_reg:x16; val_offset:1824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1824, x17, x15, 1824, x18)

inst_229:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x00000f and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd80000f; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1832, x17, x15, 1832, x18)

inst_230:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfb and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd80000f; valaddr_reg:x16; val_offset:1840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1840, x17, x15, 1840, x18)

inst_231:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x7ffff0 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdfffff0; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1848, x17, x15, 1848, x18)

inst_232:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfb and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfdfffff0; valaddr_reg:x16; val_offset:1856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1856, x17, x15, 1856, x18)

inst_233:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x00001f and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd80001f; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1864, x17, x15, 1864, x18)

inst_234:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfb and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd80001f; valaddr_reg:x16; val_offset:1872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1872, x17, x15, 1872, x18)

inst_235:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x7fffe0 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdffffe0; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1880, x17, x15, 1880, x18)

inst_236:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfb and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfdffffe0; valaddr_reg:x16; val_offset:1888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1888, x17, x15, 1888, x18)

inst_237:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x00003f and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd80003f; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1896, x17, x15, 1896, x18)

inst_238:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfb and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd80003f; valaddr_reg:x16; val_offset:1904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1904, x17, x15, 1904, x18)

inst_239:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x7fffc0 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdffffc0; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1912, x17, x15, 1912, x18)

inst_240:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfb and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfdffffc0; valaddr_reg:x16; val_offset:1920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1920, x17, x15, 1920, x18)

inst_241:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x00007f and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd80007f; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1928, x17, x15, 1928, x18)

inst_242:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfb and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd80007f; valaddr_reg:x16; val_offset:1936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1936, x17, x15, 1936, x18)

inst_243:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x7fff80 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdffff80; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1944, x17, x15, 1944, x18)

inst_244:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfb and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfdffff80; valaddr_reg:x16; val_offset:1952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1952, x17, x15, 1952, x18)

inst_245:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x0000ff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd8000ff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1960, x17, x15, 1960, x18)

inst_246:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfb and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd8000ff; valaddr_reg:x16; val_offset:1968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1968, x17, x15, 1968, x18)

inst_247:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x7fff00 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdffff00; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1976, x17, x15, 1976, x18)

inst_248:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfb and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfdffff00; valaddr_reg:x16; val_offset:1984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1984, x17, x15, 1984, x18)

inst_249:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x0001ff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd8001ff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1992, x17, x15, 1992, x18)

inst_250:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfb and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd8001ff; valaddr_reg:x16; val_offset:2000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2000, x17, x15, 2000, x18)

inst_251:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x7ffe00 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdfffe00; op2val:0xff7fffff; valaddr_reg:x16; val_offset:2008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2008, x17, x15, 2008, x18)

inst_252:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfb and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfdfffe00; valaddr_reg:x16; val_offset:2016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2016, x17, x15, 2016, x18)

inst_253:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x0003ff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd8003ff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:2024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_2)

inst_254:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfb and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd8003ff; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_255:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x7ffc00 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdfffc00; op2val:0xff7fffff; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 8, x17, x15, 8, x18)

inst_256:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfb and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfdfffc00; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 16, x17, x15, 16, x18)

inst_257:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x0007ff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd8007ff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 24, x17, x15, 24, x18)

inst_258:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfb and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd8007ff; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 32, x17, x15, 32, x18)

inst_259:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x7ff800 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdfff800; op2val:0xff7fffff; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 40, x17, x15, 40, x18)

inst_260:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfb and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfdfff800; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_261:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x000fff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd800fff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 56, x17, x15, 56, x18)

inst_262:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfb and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd800fff; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 64, x17, x15, 64, x18)

inst_263:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x7ff000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdfff000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 72, x17, x15, 72, x18)

inst_264:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfb and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfdfff000; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_265:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x001fff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd801fff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 88, x17, x15, 88, x18)

inst_266:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfb and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd801fff; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 96, x17, x15, 96, x18)

inst_267:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x7fe000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdffe000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 104, x17, x15, 104, x18)

inst_268:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfb and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfdffe000; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 112, x17, x15, 112, x18)

inst_269:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x003fff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd803fff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 120, x17, x15, 120, x18)

inst_270:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfb and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd803fff; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_271:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x7fc000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdffc000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 136, x17, x15, 136, x18)

inst_272:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfb and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfdffc000; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 144, x17, x15, 144, x18)

inst_273:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x007fff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd807fff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 152, x17, x15, 152, x18)

inst_274:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfb and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd807fff; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_275:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x7f8000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdff8000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 168, x17, x15, 168, x18)

inst_276:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfb and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfdff8000; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 176, x17, x15, 176, x18)

inst_277:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x00ffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd80ffff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 184, x17, x15, 184, x18)

inst_278:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfb and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd80ffff; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 192, x17, x15, 192, x18)

inst_279:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x7f0000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdff0000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 200, x17, x15, 200, x18)

inst_280:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfb and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfdff0000; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_281:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x01ffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd81ffff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 216, x17, x15, 216, x18)

inst_282:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfb and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd81ffff; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 224, x17, x15, 224, x18)

inst_283:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x7e0000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdfe0000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 232, x17, x15, 232, x18)

inst_284:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfb and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfdfe0000; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_285:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x03ffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd83ffff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 248, x17, x15, 248, x18)

inst_286:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfb and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd83ffff; valaddr_reg:x16; val_offset:256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 256, x17, x15, 256, x18)

inst_287:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x7c0000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdfc0000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 264, x17, x15, 264, x18)

inst_288:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfb and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfdfc0000; valaddr_reg:x16; val_offset:272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 272, x17, x15, 272, x18)

inst_289:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x07ffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd87ffff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 280, x17, x15, 280, x18)

inst_290:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfb and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd87ffff; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_291:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x780000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdf80000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 296, x17, x15, 296, x18)

inst_292:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfb and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfdf80000; valaddr_reg:x16; val_offset:304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 304, x17, x15, 304, x18)

inst_293:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x0fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd8fffff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 312, x17, x15, 312, x18)

inst_294:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfb and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd8fffff; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_295:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x700000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdf00000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 328, x17, x15, 328, x18)

inst_296:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfb and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfdf00000; valaddr_reg:x16; val_offset:336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 336, x17, x15, 336, x18)

inst_297:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x1fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd9fffff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 344, x17, x15, 344, x18)

inst_298:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfb and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd9fffff; valaddr_reg:x16; val_offset:352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 352, x17, x15, 352, x18)

inst_299:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x600000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfde00000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 360, x17, x15, 360, x18)

inst_300:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfb and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfde00000; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_301:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x3fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdbfffff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 376, x17, x15, 376, x18)

inst_302:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfb and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfdbfffff; valaddr_reg:x16; val_offset:384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 384, x17, x15, 384, x18)

inst_303:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdc00000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 392, x17, x15, 392, x18)

inst_304:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfb and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfdc00000; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_305:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdffffff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 408, x17, x15, 408, x18)

inst_306:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfb and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfdffffff; valaddr_reg:x16; val_offset:416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 416, x17, x15, 416, x18)

inst_307:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd800000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 424, x17, x15, 424, x18)

inst_308:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfb and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd800000; valaddr_reg:x16; val_offset:432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 432, x17, x15, 432, x18)

inst_309:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd000001; op2val:0xff7fffff; valaddr_reg:x16; val_offset:440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 440, x17, x15, 440, x18)

inst_310:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfa and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd000001; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_311:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x7ffffe and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd7ffffe; op2val:0xff7fffff; valaddr_reg:x16; val_offset:456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 456, x17, x15, 456, x18)

inst_312:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfa and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd7ffffe; valaddr_reg:x16; val_offset:464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 464, x17, x15, 464, x18)

inst_313:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x000003 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd000003; op2val:0xff7fffff; valaddr_reg:x16; val_offset:472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 472, x17, x15, 472, x18)

inst_314:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfa and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd000003; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_315:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x7ffffc and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd7ffffc; op2val:0xff7fffff; valaddr_reg:x16; val_offset:488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 488, x17, x15, 488, x18)

inst_316:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfa and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd7ffffc; valaddr_reg:x16; val_offset:496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 496, x17, x15, 496, x18)

inst_317:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x000007 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd000007; op2val:0xff7fffff; valaddr_reg:x16; val_offset:504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 504, x17, x15, 504, x18)

inst_318:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfa and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd000007; valaddr_reg:x16; val_offset:512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 512, x17, x15, 512, x18)

inst_319:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x7ffff8 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd7ffff8; op2val:0xff7fffff; valaddr_reg:x16; val_offset:520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 520, x17, x15, 520, x18)

inst_320:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfa and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd7ffff8; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_321:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x00000f and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd00000f; op2val:0xff7fffff; valaddr_reg:x16; val_offset:536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 536, x17, x15, 536, x18)

inst_322:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfa and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd00000f; valaddr_reg:x16; val_offset:544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 544, x17, x15, 544, x18)

inst_323:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x7ffff0 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd7ffff0; op2val:0xff7fffff; valaddr_reg:x16; val_offset:552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 552, x17, x15, 552, x18)

inst_324:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfa and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd7ffff0; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_325:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x00001f and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd00001f; op2val:0xff7fffff; valaddr_reg:x16; val_offset:568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 568, x17, x15, 568, x18)

inst_326:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfa and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd00001f; valaddr_reg:x16; val_offset:576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 576, x17, x15, 576, x18)

inst_327:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x7fffe0 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd7fffe0; op2val:0xff7fffff; valaddr_reg:x16; val_offset:584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 584, x17, x15, 584, x18)

inst_328:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfa and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd7fffe0; valaddr_reg:x16; val_offset:592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 592, x17, x15, 592, x18)

inst_329:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x00003f and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd00003f; op2val:0xff7fffff; valaddr_reg:x16; val_offset:600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 600, x17, x15, 600, x18)

inst_330:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfa and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd00003f; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 608, x17, x15, 608, x18)

inst_331:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x7fffc0 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd7fffc0; op2val:0xff7fffff; valaddr_reg:x16; val_offset:616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 616, x17, x15, 616, x18)

inst_332:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfa and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd7fffc0; valaddr_reg:x16; val_offset:624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 624, x17, x15, 624, x18)

inst_333:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x00007f and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd00007f; op2val:0xff7fffff; valaddr_reg:x16; val_offset:632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 632, x17, x15, 632, x18)

inst_334:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfa and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd00007f; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_335:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x7fff80 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd7fff80; op2val:0xff7fffff; valaddr_reg:x16; val_offset:648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 648, x17, x15, 648, x18)

inst_336:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfa and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd7fff80; valaddr_reg:x16; val_offset:656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 656, x17, x15, 656, x18)

inst_337:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x0000ff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd0000ff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 664, x17, x15, 664, x18)

inst_338:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfa and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd0000ff; valaddr_reg:x16; val_offset:672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 672, x17, x15, 672, x18)

inst_339:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x7fff00 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd7fff00; op2val:0xff7fffff; valaddr_reg:x16; val_offset:680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 680, x17, x15, 680, x18)

inst_340:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfa and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd7fff00; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 688, x17, x15, 688, x18)

inst_341:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x0001ff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd0001ff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 696, x17, x15, 696, x18)

inst_342:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfa and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd0001ff; valaddr_reg:x16; val_offset:704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 704, x17, x15, 704, x18)

inst_343:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x7ffe00 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd7ffe00; op2val:0xff7fffff; valaddr_reg:x16; val_offset:712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 712, x17, x15, 712, x18)

inst_344:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfa and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd7ffe00; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_345:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x0003ff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd0003ff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 728, x17, x15, 728, x18)

inst_346:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfa and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd0003ff; valaddr_reg:x16; val_offset:736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 736, x17, x15, 736, x18)

inst_347:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x7ffc00 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd7ffc00; op2val:0xff7fffff; valaddr_reg:x16; val_offset:744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 744, x17, x15, 744, x18)

inst_348:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfa and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd7ffc00; valaddr_reg:x16; val_offset:752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 752, x17, x15, 752, x18)

inst_349:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x0007ff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd0007ff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 760, x17, x15, 760, x18)

inst_350:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfa and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd0007ff; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 768, x17, x15, 768, x18)

inst_351:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x7ff800 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd7ff800; op2val:0xff7fffff; valaddr_reg:x16; val_offset:776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 776, x17, x15, 776, x18)

inst_352:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfa and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd7ff800; valaddr_reg:x16; val_offset:784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 784, x17, x15, 784, x18)

inst_353:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x000fff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd000fff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 792, x17, x15, 792, x18)

inst_354:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfa and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd000fff; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_355:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x7ff000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd7ff000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 808, x17, x15, 808, x18)

inst_356:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfa and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd7ff000; valaddr_reg:x16; val_offset:816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 816, x17, x15, 816, x18)

inst_357:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x001fff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd001fff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 824, x17, x15, 824, x18)

inst_358:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfa and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd001fff; valaddr_reg:x16; val_offset:832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 832, x17, x15, 832, x18)

inst_359:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x7fe000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd7fe000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 840, x17, x15, 840, x18)

inst_360:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfa and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd7fe000; valaddr_reg:x16; val_offset:848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 848, x17, x15, 848, x18)

inst_361:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x003fff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd003fff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 856, x17, x15, 856, x18)

inst_362:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfa and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd003fff; valaddr_reg:x16; val_offset:864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 864, x17, x15, 864, x18)

inst_363:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x7fc000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd7fc000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 872, x17, x15, 872, x18)

inst_364:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfa and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd7fc000; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 880, x17, x15, 880, x18)

inst_365:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x007fff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd007fff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 888, x17, x15, 888, x18)

inst_366:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfa and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd007fff; valaddr_reg:x16; val_offset:896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 896, x17, x15, 896, x18)

inst_367:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x7f8000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd7f8000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 904, x17, x15, 904, x18)

inst_368:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfa and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd7f8000; valaddr_reg:x16; val_offset:912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 912, x17, x15, 912, x18)

inst_369:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x00ffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd00ffff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 920, x17, x15, 920, x18)

inst_370:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfa and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd00ffff; valaddr_reg:x16; val_offset:928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 928, x17, x15, 928, x18)

inst_371:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x7f0000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd7f0000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 936, x17, x15, 936, x18)

inst_372:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfa and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd7f0000; valaddr_reg:x16; val_offset:944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 944, x17, x15, 944, x18)

inst_373:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x01ffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd01ffff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 952, x17, x15, 952, x18)

inst_374:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfa and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd01ffff; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 960, x17, x15, 960, x18)

inst_375:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x7e0000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd7e0000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 968, x17, x15, 968, x18)

inst_376:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfa and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd7e0000; valaddr_reg:x16; val_offset:976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 976, x17, x15, 976, x18)

inst_377:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x03ffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd03ffff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 984, x17, x15, 984, x18)

inst_378:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfa and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd03ffff; valaddr_reg:x16; val_offset:992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 992, x17, x15, 992, x18)

inst_379:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x7c0000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd7c0000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1000, x17, x15, 1000, x18)

inst_380:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfa and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd7c0000; valaddr_reg:x16; val_offset:1008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1008, x17, x15, 1008, x18)

inst_381:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x07ffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd07ffff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1016, x17, x15, 1016, x18)

inst_382:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfa and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd07ffff; valaddr_reg:x16; val_offset:1024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1024, x17, x15, 1024, x18)

inst_383:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x780000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd780000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1032; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1032, x17, x15, 1032, x18)

inst_384:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfa and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd780000; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1040, x17, x15, 1040, x18)

inst_385:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x0fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd0fffff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1048; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1048, x17, x15, 1048, x18)

inst_386:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfa and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd0fffff; valaddr_reg:x16; val_offset:1056; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1056, x17, x15, 1056, x18)

inst_387:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x700000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd700000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1064; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1064, x17, x15, 1064, x18)

inst_388:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfa and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd700000; valaddr_reg:x16; val_offset:1072; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1072, x17, x15, 1072, x18)

inst_389:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x1fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd1fffff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1080; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1080, x17, x15, 1080, x18)

inst_390:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfa and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd1fffff; valaddr_reg:x16; val_offset:1088; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1088, x17, x15, 1088, x18)

inst_391:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x600000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd600000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1096; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1096, x17, x15, 1096, x18)

inst_392:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfa and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd600000; valaddr_reg:x16; val_offset:1104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1104, x17, x15, 1104, x18)

inst_393:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x3fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd3fffff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1112, x17, x15, 1112, x18)

inst_394:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfa and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd3fffff; valaddr_reg:x16; val_offset:1120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1120, x17, x15, 1120, x18)

inst_395:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd400000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1128, x17, x15, 1128, x18)

inst_396:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfa and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd400000; valaddr_reg:x16; val_offset:1136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1136, x17, x15, 1136, x18)

inst_397:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd7fffff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1144, x17, x15, 1144, x18)

inst_398:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfa and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd7fffff; valaddr_reg:x16; val_offset:1152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1152, x17, x15, 1152, x18)

inst_399:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd000000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1160, x17, x15, 1160, x18)

inst_400:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfa and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd000000; valaddr_reg:x16; val_offset:1168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1168, x17, x15, 1168, x18)

inst_401:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x00000f and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff00000f; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1176, x17, x15, 1176, x18)

inst_402:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xff00000f; valaddr_reg:x16; val_offset:1184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1184, x17, x15, 1184, x18)

inst_403:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7ffff0 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7ffff0; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1192, x17, x15, 1192, x18)

inst_404:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xff7ffff0; valaddr_reg:x16; val_offset:1200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1200, x17, x15, 1200, x18)

inst_405:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x00001f and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff00001f; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1208, x17, x15, 1208, x18)

inst_406:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xff00001f; valaddr_reg:x16; val_offset:1216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1216, x17, x15, 1216, x18)

inst_407:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffe0 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffe0; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1224, x17, x15, 1224, x18)

inst_408:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xff7fffe0; valaddr_reg:x16; val_offset:1232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1232, x17, x15, 1232, x18)

inst_409:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x00003f and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff00003f; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1240, x17, x15, 1240, x18)

inst_410:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xff00003f; valaddr_reg:x16; val_offset:1248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1248, x17, x15, 1248, x18)

inst_411:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffc0 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffc0; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1256, x17, x15, 1256, x18)

inst_412:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xff7fffc0; valaddr_reg:x16; val_offset:1264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1264, x17, x15, 1264, x18)

inst_413:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x00007f and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff00007f; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1272, x17, x15, 1272, x18)

inst_414:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xff00007f; valaddr_reg:x16; val_offset:1280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1280, x17, x15, 1280, x18)

inst_415:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fff80 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fff80; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1288, x17, x15, 1288, x18)

inst_416:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xff7fff80; valaddr_reg:x16; val_offset:1296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1296, x17, x15, 1296, x18)

inst_417:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x0000ff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff0000ff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1304, x17, x15, 1304, x18)

inst_418:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xff0000ff; valaddr_reg:x16; val_offset:1312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1312, x17, x15, 1312, x18)

inst_419:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fff00 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fff00; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1320, x17, x15, 1320, x18)

inst_420:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xff7fff00; valaddr_reg:x16; val_offset:1328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1328, x17, x15, 1328, x18)

inst_421:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x0001ff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff0001ff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1336, x17, x15, 1336, x18)

inst_422:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xff0001ff; valaddr_reg:x16; val_offset:1344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1344, x17, x15, 1344, x18)

inst_423:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7ffe00 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7ffe00; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1352, x17, x15, 1352, x18)

inst_424:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xff7ffe00; valaddr_reg:x16; val_offset:1360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1360, x17, x15, 1360, x18)

inst_425:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x0003ff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff0003ff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1368, x17, x15, 1368, x18)

inst_426:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xff0003ff; valaddr_reg:x16; val_offset:1376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1376, x17, x15, 1376, x18)

inst_427:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7ffc00 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7ffc00; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1384, x17, x15, 1384, x18)

inst_428:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xff7ffc00; valaddr_reg:x16; val_offset:1392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1392, x17, x15, 1392, x18)

inst_429:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x0007ff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff0007ff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1400, x17, x15, 1400, x18)

inst_430:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xff0007ff; valaddr_reg:x16; val_offset:1408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1408, x17, x15, 1408, x18)

inst_431:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7ff800 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7ff800; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1416, x17, x15, 1416, x18)

inst_432:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xff7ff800; valaddr_reg:x16; val_offset:1424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1424, x17, x15, 1424, x18)

inst_433:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x000fff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff000fff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1432, x17, x15, 1432, x18)

inst_434:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xff000fff; valaddr_reg:x16; val_offset:1440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1440, x17, x15, 1440, x18)

inst_435:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7ff000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7ff000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1448, x17, x15, 1448, x18)

inst_436:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xff7ff000; valaddr_reg:x16; val_offset:1456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1456, x17, x15, 1456, x18)

inst_437:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x001fff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff001fff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1464, x17, x15, 1464, x18)

inst_438:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xff001fff; valaddr_reg:x16; val_offset:1472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1472, x17, x15, 1472, x18)

inst_439:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fe000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fe000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1480, x17, x15, 1480, x18)

inst_440:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xff7fe000; valaddr_reg:x16; val_offset:1488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1488, x17, x15, 1488, x18)

inst_441:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x003fff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff003fff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1496, x17, x15, 1496, x18)

inst_442:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xff003fff; valaddr_reg:x16; val_offset:1504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1504, x17, x15, 1504, x18)

inst_443:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fc000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fc000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1512, x17, x15, 1512, x18)

inst_444:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xff7fc000; valaddr_reg:x16; val_offset:1520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1520, x17, x15, 1520, x18)

inst_445:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x007fff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff007fff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1528, x17, x15, 1528, x18)

inst_446:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xff007fff; valaddr_reg:x16; val_offset:1536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1536, x17, x15, 1536, x18)

inst_447:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7f8000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7f8000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1544, x17, x15, 1544, x18)

inst_448:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xff7f8000; valaddr_reg:x16; val_offset:1552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1552, x17, x15, 1552, x18)

inst_449:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x00ffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff00ffff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1560, x17, x15, 1560, x18)

inst_450:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xff00ffff; valaddr_reg:x16; val_offset:1568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1568, x17, x15, 1568, x18)

inst_451:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7f0000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7f0000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1576, x17, x15, 1576, x18)

inst_452:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xff7f0000; valaddr_reg:x16; val_offset:1584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1584, x17, x15, 1584, x18)

inst_453:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x01ffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff01ffff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1592, x17, x15, 1592, x18)

inst_454:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xff01ffff; valaddr_reg:x16; val_offset:1600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1600, x17, x15, 1600, x18)

inst_455:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7e0000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7e0000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1608, x17, x15, 1608, x18)

inst_456:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xff7e0000; valaddr_reg:x16; val_offset:1616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1616, x17, x15, 1616, x18)

inst_457:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x03ffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff03ffff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1624, x17, x15, 1624, x18)

inst_458:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xff03ffff; valaddr_reg:x16; val_offset:1632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1632, x17, x15, 1632, x18)

inst_459:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7c0000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7c0000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1640, x17, x15, 1640, x18)

inst_460:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xff7c0000; valaddr_reg:x16; val_offset:1648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1648, x17, x15, 1648, x18)

inst_461:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x07ffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff07ffff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1656, x17, x15, 1656, x18)

inst_462:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xff07ffff; valaddr_reg:x16; val_offset:1664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1664, x17, x15, 1664, x18)

inst_463:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x780000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff780000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1672, x17, x15, 1672, x18)

inst_464:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xff780000; valaddr_reg:x16; val_offset:1680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1680, x17, x15, 1680, x18)

inst_465:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x0fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff0fffff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1688, x17, x15, 1688, x18)

inst_466:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xff0fffff; valaddr_reg:x16; val_offset:1696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1696, x17, x15, 1696, x18)

inst_467:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x700000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff700000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1704, x17, x15, 1704, x18)

inst_468:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xff700000; valaddr_reg:x16; val_offset:1712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1712, x17, x15, 1712, x18)

inst_469:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x1fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff1fffff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1720, x17, x15, 1720, x18)

inst_470:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xff1fffff; valaddr_reg:x16; val_offset:1728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1728, x17, x15, 1728, x18)

inst_471:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x600000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff600000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1736, x17, x15, 1736, x18)

inst_472:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xff600000; valaddr_reg:x16; val_offset:1744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1744, x17, x15, 1744, x18)

inst_473:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x3fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff3fffff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1752, x17, x15, 1752, x18)

inst_474:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xff3fffff; valaddr_reg:x16; val_offset:1760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1760, x17, x15, 1760, x18)

inst_475:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff400000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1768, x17, x15, 1768, x18)

inst_476:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xff400000; valaddr_reg:x16; val_offset:1776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1776, x17, x15, 1776, x18)

inst_477:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1784, x17, x15, 1784, x18)

inst_478:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff000000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1792, x17, x15, 1792, x18)

inst_479:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xff000000; valaddr_reg:x16; val_offset:1800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1800, x17, x15, 1800, x18)

inst_480:
// fs1 == 1 and fe1 == 0xd4 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xea000001; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1808, x17, x15, 1808, x18)

inst_481:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xd4 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xea000001; valaddr_reg:x16; val_offset:1816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1816, x17, x15, 1816, x18)

inst_482:
// fs1 == 1 and fe1 == 0xd4 and fm1 == 0x7ffffe and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xea7ffffe; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1824, x17, x15, 1824, x18)

inst_483:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xd4 and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xea7ffffe; valaddr_reg:x16; val_offset:1832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1832, x17, x15, 1832, x18)

inst_484:
// fs1 == 1 and fe1 == 0xd4 and fm1 == 0x000003 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xea000003; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1840, x17, x15, 1840, x18)

inst_485:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xd4 and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xea000003; valaddr_reg:x16; val_offset:1848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1848, x17, x15, 1848, x18)

inst_486:
// fs1 == 1 and fe1 == 0xd4 and fm1 == 0x7ffffc and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xea7ffffc; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1856, x17, x15, 1856, x18)

inst_487:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xd4 and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xea7ffffc; valaddr_reg:x16; val_offset:1864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1864, x17, x15, 1864, x18)

inst_488:
// fs1 == 1 and fe1 == 0xd4 and fm1 == 0x000007 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xea000007; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1872, x17, x15, 1872, x18)

inst_489:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xd4 and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xea000007; valaddr_reg:x16; val_offset:1880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1880, x17, x15, 1880, x18)

inst_490:
// fs1 == 1 and fe1 == 0xd4 and fm1 == 0x7ffff8 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xea7ffff8; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1888, x17, x15, 1888, x18)

inst_491:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xd4 and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xea7ffff8; valaddr_reg:x16; val_offset:1896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1896, x17, x15, 1896, x18)

inst_492:
// fs1 == 1 and fe1 == 0xd4 and fm1 == 0x00000f and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xea00000f; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1904, x17, x15, 1904, x18)

inst_493:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xd4 and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xea00000f; valaddr_reg:x16; val_offset:1912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1912, x17, x15, 1912, x18)

inst_494:
// fs1 == 1 and fe1 == 0xd4 and fm1 == 0x7ffff0 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xea7ffff0; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1920, x17, x15, 1920, x18)

inst_495:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xd4 and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xea7ffff0; valaddr_reg:x16; val_offset:1928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1928, x17, x15, 1928, x18)

inst_496:
// fs1 == 1 and fe1 == 0xd4 and fm1 == 0x00001f and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xea00001f; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1936, x17, x15, 1936, x18)

inst_497:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xd4 and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xea00001f; valaddr_reg:x16; val_offset:1944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1944, x17, x15, 1944, x18)

inst_498:
// fs1 == 1 and fe1 == 0xd4 and fm1 == 0x7fffe0 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xea7fffe0; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1952, x17, x15, 1952, x18)

inst_499:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xd4 and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xea7fffe0; valaddr_reg:x16; val_offset:1960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1960, x17, x15, 1960, x18)

inst_500:
// fs1 == 1 and fe1 == 0xd4 and fm1 == 0x00003f and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xea00003f; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1968, x17, x15, 1968, x18)

inst_501:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xd4 and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xea00003f; valaddr_reg:x16; val_offset:1976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1976, x17, x15, 1976, x18)

inst_502:
// fs1 == 1 and fe1 == 0xd4 and fm1 == 0x7fffc0 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xea7fffc0; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1984, x17, x15, 1984, x18)

inst_503:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xd4 and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xea7fffc0; valaddr_reg:x16; val_offset:1992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1992, x17, x15, 1992, x18)

inst_504:
// fs1 == 1 and fe1 == 0xd4 and fm1 == 0x00007f and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xea00007f; op2val:0xff7fffff; valaddr_reg:x16; val_offset:2000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2000, x17, x15, 2000, x18)

inst_505:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xd4 and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xea00007f; valaddr_reg:x16; val_offset:2008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2008, x17, x15, 2008, x18)

inst_506:
// fs1 == 1 and fe1 == 0xd4 and fm1 == 0x7fff80 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xea7fff80; op2val:0xff7fffff; valaddr_reg:x16; val_offset:2016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2016, x17, x15, 2016, x18)

inst_507:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xd4 and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xea7fff80; valaddr_reg:x16; val_offset:2024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_3)

inst_508:
// fs1 == 1 and fe1 == 0xd4 and fm1 == 0x0000ff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xea0000ff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_509:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xd4 and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xea0000ff; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 8, x17, x15, 8, x18)

inst_510:
// fs1 == 1 and fe1 == 0xd4 and fm1 == 0x7fff00 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xea7fff00; op2val:0xff7fffff; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 16, x17, x15, 16, x18)

inst_511:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xd4 and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xea7fff00; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 24, x17, x15, 24, x18)

inst_512:
// fs1 == 1 and fe1 == 0xd4 and fm1 == 0x0001ff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xea0001ff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 32, x17, x15, 32, x18)

inst_513:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xd4 and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xea0001ff; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 40, x17, x15, 40, x18)

inst_514:
// fs1 == 1 and fe1 == 0xd4 and fm1 == 0x7ffe00 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xea7ffe00; op2val:0xff7fffff; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_515:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xd4 and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xea7ffe00; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 56, x17, x15, 56, x18)

inst_516:
// fs1 == 1 and fe1 == 0xd4 and fm1 == 0x0003ff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xea0003ff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 64, x17, x15, 64, x18)

inst_517:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xd4 and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xea0003ff; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 72, x17, x15, 72, x18)

inst_518:
// fs1 == 1 and fe1 == 0xd4 and fm1 == 0x7ffc00 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xea7ffc00; op2val:0xff7fffff; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_519:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xd4 and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xea7ffc00; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 88, x17, x15, 88, x18)

inst_520:
// fs1 == 1 and fe1 == 0xd4 and fm1 == 0x0007ff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xea0007ff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 96, x17, x15, 96, x18)

inst_521:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xd4 and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xea0007ff; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 104, x17, x15, 104, x18)

inst_522:
// fs1 == 1 and fe1 == 0xd4 and fm1 == 0x7ff800 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xea7ff800; op2val:0xff7fffff; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 112, x17, x15, 112, x18)

inst_523:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xd4 and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xea7ff800; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 120, x17, x15, 120, x18)

inst_524:
// fs1 == 1 and fe1 == 0xd4 and fm1 == 0x000fff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xea000fff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_525:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xd4 and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xea000fff; valaddr_reg:x16; val_offset:136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 136, x17, x15, 136, x18)

inst_526:
// fs1 == 1 and fe1 == 0xd4 and fm1 == 0x7ff000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xea7ff000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 144, x17, x15, 144, x18)

inst_527:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xd4 and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xea7ff000; valaddr_reg:x16; val_offset:152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 152, x17, x15, 152, x18)

inst_528:
// fs1 == 1 and fe1 == 0xd4 and fm1 == 0x001fff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xea001fff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_529:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xd4 and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xea001fff; valaddr_reg:x16; val_offset:168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 168, x17, x15, 168, x18)

inst_530:
// fs1 == 1 and fe1 == 0xd4 and fm1 == 0x7fe000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xea7fe000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 176, x17, x15, 176, x18)

inst_531:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xd4 and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xea7fe000; valaddr_reg:x16; val_offset:184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 184, x17, x15, 184, x18)

inst_532:
// fs1 == 1 and fe1 == 0xd4 and fm1 == 0x003fff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xea003fff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 192, x17, x15, 192, x18)

inst_533:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xd4 and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xea003fff; valaddr_reg:x16; val_offset:200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 200, x17, x15, 200, x18)

inst_534:
// fs1 == 1 and fe1 == 0xd4 and fm1 == 0x7fc000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xea7fc000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_535:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xd4 and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xea7fc000; valaddr_reg:x16; val_offset:216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 216, x17, x15, 216, x18)

inst_536:
// fs1 == 1 and fe1 == 0xd4 and fm1 == 0x007fff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xea007fff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 224, x17, x15, 224, x18)

inst_537:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xd4 and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xea007fff; valaddr_reg:x16; val_offset:232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 232, x17, x15, 232, x18)

inst_538:
// fs1 == 1 and fe1 == 0xd4 and fm1 == 0x7f8000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xea7f8000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_539:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xd4 and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xea7f8000; valaddr_reg:x16; val_offset:248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 248, x17, x15, 248, x18)

inst_540:
// fs1 == 1 and fe1 == 0xd4 and fm1 == 0x00ffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xea00ffff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 256, x17, x15, 256, x18)

inst_541:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xd4 and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xea00ffff; valaddr_reg:x16; val_offset:264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 264, x17, x15, 264, x18)

inst_542:
// fs1 == 1 and fe1 == 0xd4 and fm1 == 0x7f0000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xea7f0000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 272, x17, x15, 272, x18)

inst_543:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xd4 and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xea7f0000; valaddr_reg:x16; val_offset:280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 280, x17, x15, 280, x18)

inst_544:
// fs1 == 1 and fe1 == 0xd4 and fm1 == 0x01ffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xea01ffff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_545:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xd4 and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xea01ffff; valaddr_reg:x16; val_offset:296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 296, x17, x15, 296, x18)

inst_546:
// fs1 == 1 and fe1 == 0xd4 and fm1 == 0x7e0000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xea7e0000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 304, x17, x15, 304, x18)

inst_547:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xd4 and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xea7e0000; valaddr_reg:x16; val_offset:312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 312, x17, x15, 312, x18)

inst_548:
// fs1 == 1 and fe1 == 0xd4 and fm1 == 0x03ffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xea03ffff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_549:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xd4 and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xea03ffff; valaddr_reg:x16; val_offset:328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 328, x17, x15, 328, x18)

inst_550:
// fs1 == 1 and fe1 == 0xd4 and fm1 == 0x7c0000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xea7c0000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 336, x17, x15, 336, x18)

inst_551:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xd4 and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xea7c0000; valaddr_reg:x16; val_offset:344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 344, x17, x15, 344, x18)

inst_552:
// fs1 == 1 and fe1 == 0xd4 and fm1 == 0x07ffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xea07ffff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 352, x17, x15, 352, x18)

inst_553:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xd4 and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xea07ffff; valaddr_reg:x16; val_offset:360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 360, x17, x15, 360, x18)

inst_554:
// fs1 == 1 and fe1 == 0xd4 and fm1 == 0x780000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xea780000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_555:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xd4 and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xea780000; valaddr_reg:x16; val_offset:376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 376, x17, x15, 376, x18)

inst_556:
// fs1 == 1 and fe1 == 0xd4 and fm1 == 0x0fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xea0fffff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 384, x17, x15, 384, x18)

inst_557:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xd4 and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xea0fffff; valaddr_reg:x16; val_offset:392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 392, x17, x15, 392, x18)

inst_558:
// fs1 == 1 and fe1 == 0xd4 and fm1 == 0x700000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xea700000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_559:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xd4 and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xea700000; valaddr_reg:x16; val_offset:408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 408, x17, x15, 408, x18)

inst_560:
// fs1 == 1 and fe1 == 0xd4 and fm1 == 0x1fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xea1fffff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 416, x17, x15, 416, x18)

inst_561:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xd4 and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xea1fffff; valaddr_reg:x16; val_offset:424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 424, x17, x15, 424, x18)

inst_562:
// fs1 == 1 and fe1 == 0xd4 and fm1 == 0x600000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xea600000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 432, x17, x15, 432, x18)

inst_563:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xd4 and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xea600000; valaddr_reg:x16; val_offset:440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 440, x17, x15, 440, x18)

inst_564:
// fs1 == 1 and fe1 == 0xd4 and fm1 == 0x3fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xea3fffff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_565:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xd4 and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xea3fffff; valaddr_reg:x16; val_offset:456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 456, x17, x15, 456, x18)

inst_566:
// fs1 == 1 and fe1 == 0xd4 and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xea400000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 464, x17, x15, 464, x18)

inst_567:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xd4 and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xea400000; valaddr_reg:x16; val_offset:472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 472, x17, x15, 472, x18)

inst_568:
// fs1 == 1 and fe1 == 0xd4 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xea7fffff; op2val:0xff7fffff; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_569:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xd4 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xea7fffff; valaddr_reg:x16; val_offset:488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 488, x17, x15, 488, x18)

inst_570:
// fs1 == 1 and fe1 == 0xd4 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xea000000; op2val:0xff7fffff; valaddr_reg:x16; val_offset:496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 496, x17, x15, 496, x18)

inst_571:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xd4 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xea000000; valaddr_reg:x16; val_offset:504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 504, x17, x15, 504, x18)

inst_572:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x4ccccc and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f4ccccc; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 512, x17, x15, 512, x18)

inst_573:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x4ccccc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f4ccccc; valaddr_reg:x16; val_offset:520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 520, x17, x15, 520, x18)

inst_574:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x333333 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f333333; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_575:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x333333 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f333333; valaddr_reg:x16; val_offset:536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 536, x17, x15, 536, x18)

inst_576:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x5b6db6 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f5b6db6; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 544, x17, x15, 544, x18)

inst_577:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x5b6db6 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f5b6db6; valaddr_reg:x16; val_offset:552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 552, x17, x15, 552, x18)

inst_578:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x249249 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f249249; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_579:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x249249 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f249249; valaddr_reg:x16; val_offset:568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 568, x17, x15, 568, x18)

inst_580:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x444444 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f444444; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 576, x17, x15, 576, x18)

inst_581:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x444444 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f444444; valaddr_reg:x16; val_offset:584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 584, x17, x15, 584, x18)

inst_582:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3bbbbb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3bbbbb; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 592, x17, x15, 592, x18)

inst_583:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3bbbbb and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f3bbbbb; valaddr_reg:x16; val_offset:600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 600, x17, x15, 600, x18)

inst_584:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x666666 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f666666; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 608, x17, x15, 608, x18)

inst_585:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x666666 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f666666; valaddr_reg:x16; val_offset:616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 616, x17, x15, 616, x18)

inst_586:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x199999 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f199999; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 624, x17, x15, 624, x18)

inst_587:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x199999 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f199999; valaddr_reg:x16; val_offset:632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 632, x17, x15, 632, x18)

inst_588:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x6db6db and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f6db6db; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_589:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x6db6db and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f6db6db; valaddr_reg:x16; val_offset:648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 648, x17, x15, 648, x18)

inst_590:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36db6d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f36db6d; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 656, x17, x15, 656, x18)

inst_591:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x36db6d and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f36db6d; valaddr_reg:x16; val_offset:664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 664, x17, x15, 664, x18)

inst_592:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000001 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f000001; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 672, x17, x15, 672, x18)

inst_593:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f000001; valaddr_reg:x16; val_offset:680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 680, x17, x15, 680, x18)

inst_594:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7ffffe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7ffffe; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 688, x17, x15, 688, x18)

inst_595:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f7ffffe; valaddr_reg:x16; val_offset:696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 696, x17, x15, 696, x18)

inst_596:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000003 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f000003; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 704, x17, x15, 704, x18)

inst_597:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f000003; valaddr_reg:x16; val_offset:712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 712, x17, x15, 712, x18)

inst_598:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7ffffc and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7ffffc; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_599:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f7ffffc; valaddr_reg:x16; val_offset:728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 728, x17, x15, 728, x18)

inst_600:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000007 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f000007; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 736, x17, x15, 736, x18)

inst_601:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f000007; valaddr_reg:x16; val_offset:744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 744, x17, x15, 744, x18)

inst_602:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7ffff8 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7ffff8; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 752, x17, x15, 752, x18)

inst_603:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f7ffff8; valaddr_reg:x16; val_offset:760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 760, x17, x15, 760, x18)

inst_604:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x000001 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e800001; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 768, x17, x15, 768, x18)

inst_605:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfd and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e800001; valaddr_reg:x16; val_offset:776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 776, x17, x15, 776, x18)

inst_606:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ffffe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7efffffe; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 784, x17, x15, 784, x18)

inst_607:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7efffffe; valaddr_reg:x16; val_offset:792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 792, x17, x15, 792, x18)

inst_608:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x000003 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e800003; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_609:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfd and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e800003; valaddr_reg:x16; val_offset:808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 808, x17, x15, 808, x18)

inst_610:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ffffc and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7efffffc; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 816, x17, x15, 816, x18)

inst_611:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7efffffc; valaddr_reg:x16; val_offset:824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 824, x17, x15, 824, x18)

inst_612:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x000007 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e800007; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 832, x17, x15, 832, x18)

inst_613:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfd and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e800007; valaddr_reg:x16; val_offset:840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 840, x17, x15, 840, x18)

inst_614:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ffff8 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7efffff8; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 848, x17, x15, 848, x18)

inst_615:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7efffff8; valaddr_reg:x16; val_offset:856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 856, x17, x15, 856, x18)

inst_616:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00000f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e80000f; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 864, x17, x15, 864, x18)

inst_617:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfd and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e80000f; valaddr_reg:x16; val_offset:872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 872, x17, x15, 872, x18)

inst_618:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ffff0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7efffff0; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 880, x17, x15, 880, x18)

inst_619:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7efffff0; valaddr_reg:x16; val_offset:888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 888, x17, x15, 888, x18)

inst_620:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00001f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e80001f; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 896, x17, x15, 896, x18)

inst_621:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfd and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e80001f; valaddr_reg:x16; val_offset:904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 904, x17, x15, 904, x18)

inst_622:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7fffe0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7effffe0; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 912, x17, x15, 912, x18)

inst_623:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7effffe0; valaddr_reg:x16; val_offset:920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 920, x17, x15, 920, x18)

inst_624:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00003f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e80003f; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 928, x17, x15, 928, x18)

inst_625:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfd and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e80003f; valaddr_reg:x16; val_offset:936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 936, x17, x15, 936, x18)

inst_626:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7fffc0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7effffc0; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 944, x17, x15, 944, x18)

inst_627:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7effffc0; valaddr_reg:x16; val_offset:952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 952, x17, x15, 952, x18)

inst_628:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00007f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e80007f; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 960, x17, x15, 960, x18)

inst_629:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfd and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e80007f; valaddr_reg:x16; val_offset:968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 968, x17, x15, 968, x18)

inst_630:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7fff80 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7effff80; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 976, x17, x15, 976, x18)

inst_631:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7effff80; valaddr_reg:x16; val_offset:984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 984, x17, x15, 984, x18)

inst_632:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0000ff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e8000ff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 992, x17, x15, 992, x18)

inst_633:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfd and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e8000ff; valaddr_reg:x16; val_offset:1000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1000, x17, x15, 1000, x18)

inst_634:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7fff00 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7effff00; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1008, x17, x15, 1008, x18)

inst_635:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7effff00; valaddr_reg:x16; val_offset:1016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1016, x17, x15, 1016, x18)

inst_636:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0001ff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e8001ff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1024, x17, x15, 1024, x18)

inst_637:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfd and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e8001ff; valaddr_reg:x16; val_offset:1032; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1032, x17, x15, 1032, x18)

inst_638:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ffe00 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7efffe00; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1040, x17, x15, 1040, x18)

inst_639:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7efffe00; valaddr_reg:x16; val_offset:1048; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1048, x17, x15, 1048, x18)

inst_640:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0003ff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e8003ff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1056; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1056, x17, x15, 1056, x18)

inst_641:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfd and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e8003ff; valaddr_reg:x16; val_offset:1064; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1064, x17, x15, 1064, x18)

inst_642:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ffc00 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7efffc00; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1072; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1072, x17, x15, 1072, x18)

inst_643:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7efffc00; valaddr_reg:x16; val_offset:1080; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1080, x17, x15, 1080, x18)

inst_644:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0007ff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e8007ff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1088; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1088, x17, x15, 1088, x18)

inst_645:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfd and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e8007ff; valaddr_reg:x16; val_offset:1096; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1096, x17, x15, 1096, x18)

inst_646:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ff800 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7efff800; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1104, x17, x15, 1104, x18)

inst_647:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7efff800; valaddr_reg:x16; val_offset:1112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1112, x17, x15, 1112, x18)

inst_648:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x000fff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e800fff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1120, x17, x15, 1120, x18)

inst_649:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfd and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e800fff; valaddr_reg:x16; val_offset:1128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1128, x17, x15, 1128, x18)

inst_650:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ff000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7efff000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1136, x17, x15, 1136, x18)

inst_651:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7efff000; valaddr_reg:x16; val_offset:1144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1144, x17, x15, 1144, x18)

inst_652:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x001fff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e801fff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1152, x17, x15, 1152, x18)

inst_653:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfd and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e801fff; valaddr_reg:x16; val_offset:1160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1160, x17, x15, 1160, x18)

inst_654:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7fe000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7effe000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1168, x17, x15, 1168, x18)

inst_655:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7effe000; valaddr_reg:x16; val_offset:1176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1176, x17, x15, 1176, x18)

inst_656:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003fff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e803fff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1184, x17, x15, 1184, x18)

inst_657:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfd and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e803fff; valaddr_reg:x16; val_offset:1192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1192, x17, x15, 1192, x18)

inst_658:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7fc000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7effc000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1200, x17, x15, 1200, x18)

inst_659:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7effc000; valaddr_reg:x16; val_offset:1208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1208, x17, x15, 1208, x18)

inst_660:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x007fff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e807fff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1216, x17, x15, 1216, x18)

inst_661:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfd and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e807fff; valaddr_reg:x16; val_offset:1224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1224, x17, x15, 1224, x18)

inst_662:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f8000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eff8000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1232, x17, x15, 1232, x18)

inst_663:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7eff8000; valaddr_reg:x16; val_offset:1240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1240, x17, x15, 1240, x18)

inst_664:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00ffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e80ffff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1248, x17, x15, 1248, x18)

inst_665:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfd and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e80ffff; valaddr_reg:x16; val_offset:1256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1256, x17, x15, 1256, x18)

inst_666:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f0000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eff0000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1264, x17, x15, 1264, x18)

inst_667:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7eff0000; valaddr_reg:x16; val_offset:1272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1272, x17, x15, 1272, x18)

inst_668:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01ffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e81ffff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1280, x17, x15, 1280, x18)

inst_669:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfd and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e81ffff; valaddr_reg:x16; val_offset:1288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1288, x17, x15, 1288, x18)

inst_670:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e0000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7efe0000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1296, x17, x15, 1296, x18)

inst_671:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7efe0000; valaddr_reg:x16; val_offset:1304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1304, x17, x15, 1304, x18)

inst_672:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03ffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e83ffff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1312, x17, x15, 1312, x18)

inst_673:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfd and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e83ffff; valaddr_reg:x16; val_offset:1320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1320, x17, x15, 1320, x18)

inst_674:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c0000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7efc0000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1328, x17, x15, 1328, x18)

inst_675:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7efc0000; valaddr_reg:x16; val_offset:1336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1336, x17, x15, 1336, x18)

inst_676:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07ffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e87ffff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1344, x17, x15, 1344, x18)

inst_677:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfd and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e87ffff; valaddr_reg:x16; val_offset:1352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1352, x17, x15, 1352, x18)

inst_678:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x780000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ef80000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1360, x17, x15, 1360, x18)

inst_679:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfd and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7ef80000; valaddr_reg:x16; val_offset:1368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1368, x17, x15, 1368, x18)

inst_680:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e8fffff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1376, x17, x15, 1376, x18)

inst_681:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfd and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e8fffff; valaddr_reg:x16; val_offset:1384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1384, x17, x15, 1384, x18)

inst_682:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x700000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ef00000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1392, x17, x15, 1392, x18)

inst_683:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfd and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7ef00000; valaddr_reg:x16; val_offset:1400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1400, x17, x15, 1400, x18)

inst_684:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e9fffff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1408, x17, x15, 1408, x18)

inst_685:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e9fffff; valaddr_reg:x16; val_offset:1416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1416, x17, x15, 1416, x18)

inst_686:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x600000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ee00000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1424, x17, x15, 1424, x18)

inst_687:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfd and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7ee00000; valaddr_reg:x16; val_offset:1432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1432, x17, x15, 1432, x18)

inst_688:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ebfffff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1440, x17, x15, 1440, x18)

inst_689:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7ebfffff; valaddr_reg:x16; val_offset:1448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1448, x17, x15, 1448, x18)

inst_690:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec00000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1456, x17, x15, 1456, x18)

inst_691:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfd and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7ec00000; valaddr_reg:x16; val_offset:1464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1464, x17, x15, 1464, x18)

inst_692:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7effffff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1472, x17, x15, 1472, x18)

inst_693:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7effffff; valaddr_reg:x16; val_offset:1480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1480, x17, x15, 1480, x18)

inst_694:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e800000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1488, x17, x15, 1488, x18)

inst_695:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfd and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e800000; valaddr_reg:x16; val_offset:1496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1496, x17, x15, 1496, x18)

inst_696:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x000001 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e000001; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1504, x17, x15, 1504, x18)

inst_697:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfc and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e000001; valaddr_reg:x16; val_offset:1512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1512, x17, x15, 1512, x18)

inst_698:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7ffffe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e7ffffe; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1520, x17, x15, 1520, x18)

inst_699:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfc and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e7ffffe; valaddr_reg:x16; val_offset:1528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1528, x17, x15, 1528, x18)

inst_700:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x000003 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e000003; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1536, x17, x15, 1536, x18)

inst_701:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfc and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e000003; valaddr_reg:x16; val_offset:1544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1544, x17, x15, 1544, x18)

inst_702:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7ffffc and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e7ffffc; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1552, x17, x15, 1552, x18)

inst_703:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfc and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e7ffffc; valaddr_reg:x16; val_offset:1560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1560, x17, x15, 1560, x18)

inst_704:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x000007 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e000007; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1568, x17, x15, 1568, x18)

inst_705:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfc and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e000007; valaddr_reg:x16; val_offset:1576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1576, x17, x15, 1576, x18)

inst_706:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7ffff8 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e7ffff8; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1584, x17, x15, 1584, x18)

inst_707:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfc and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e7ffff8; valaddr_reg:x16; val_offset:1592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1592, x17, x15, 1592, x18)

inst_708:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x00000f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e00000f; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1600, x17, x15, 1600, x18)

inst_709:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfc and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e00000f; valaddr_reg:x16; val_offset:1608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1608, x17, x15, 1608, x18)

inst_710:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7ffff0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e7ffff0; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1616, x17, x15, 1616, x18)

inst_711:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfc and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e7ffff0; valaddr_reg:x16; val_offset:1624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1624, x17, x15, 1624, x18)

inst_712:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x00001f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e00001f; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1632, x17, x15, 1632, x18)

inst_713:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfc and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e00001f; valaddr_reg:x16; val_offset:1640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1640, x17, x15, 1640, x18)

inst_714:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7fffe0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e7fffe0; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1648, x17, x15, 1648, x18)

inst_715:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfc and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e7fffe0; valaddr_reg:x16; val_offset:1656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1656, x17, x15, 1656, x18)

inst_716:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x00003f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e00003f; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1664, x17, x15, 1664, x18)

inst_717:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfc and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e00003f; valaddr_reg:x16; val_offset:1672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1672, x17, x15, 1672, x18)

inst_718:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7fffc0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e7fffc0; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1680, x17, x15, 1680, x18)

inst_719:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfc and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e7fffc0; valaddr_reg:x16; val_offset:1688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1688, x17, x15, 1688, x18)

inst_720:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x00007f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e00007f; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1696, x17, x15, 1696, x18)

inst_721:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfc and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e00007f; valaddr_reg:x16; val_offset:1704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1704, x17, x15, 1704, x18)

inst_722:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7fff80 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e7fff80; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1712, x17, x15, 1712, x18)

inst_723:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfc and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e7fff80; valaddr_reg:x16; val_offset:1720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1720, x17, x15, 1720, x18)

inst_724:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0000ff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e0000ff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1728, x17, x15, 1728, x18)

inst_725:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfc and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e0000ff; valaddr_reg:x16; val_offset:1736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1736, x17, x15, 1736, x18)

inst_726:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7fff00 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e7fff00; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1744, x17, x15, 1744, x18)

inst_727:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfc and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e7fff00; valaddr_reg:x16; val_offset:1752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1752, x17, x15, 1752, x18)

inst_728:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0001ff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e0001ff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1760, x17, x15, 1760, x18)

inst_729:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfc and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e0001ff; valaddr_reg:x16; val_offset:1768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1768, x17, x15, 1768, x18)

inst_730:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7ffe00 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e7ffe00; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1776, x17, x15, 1776, x18)

inst_731:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfc and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e7ffe00; valaddr_reg:x16; val_offset:1784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1784, x17, x15, 1784, x18)

inst_732:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0003ff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e0003ff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1792, x17, x15, 1792, x18)

inst_733:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfc and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e0003ff; valaddr_reg:x16; val_offset:1800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1800, x17, x15, 1800, x18)

inst_734:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7ffc00 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e7ffc00; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1808, x17, x15, 1808, x18)

inst_735:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfc and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e7ffc00; valaddr_reg:x16; val_offset:1816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1816, x17, x15, 1816, x18)

inst_736:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0007ff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e0007ff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1824, x17, x15, 1824, x18)

inst_737:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfc and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e0007ff; valaddr_reg:x16; val_offset:1832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1832, x17, x15, 1832, x18)

inst_738:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7ff800 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e7ff800; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1840, x17, x15, 1840, x18)

inst_739:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfc and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e7ff800; valaddr_reg:x16; val_offset:1848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1848, x17, x15, 1848, x18)

inst_740:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x000fff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e000fff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1856, x17, x15, 1856, x18)

inst_741:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfc and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e000fff; valaddr_reg:x16; val_offset:1864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1864, x17, x15, 1864, x18)

inst_742:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7ff000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e7ff000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1872, x17, x15, 1872, x18)

inst_743:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfc and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e7ff000; valaddr_reg:x16; val_offset:1880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1880, x17, x15, 1880, x18)

inst_744:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x001fff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e001fff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1888, x17, x15, 1888, x18)

inst_745:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfc and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e001fff; valaddr_reg:x16; val_offset:1896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1896, x17, x15, 1896, x18)

inst_746:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7fe000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e7fe000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1904, x17, x15, 1904, x18)

inst_747:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfc and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e7fe000; valaddr_reg:x16; val_offset:1912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1912, x17, x15, 1912, x18)

inst_748:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x003fff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e003fff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1920, x17, x15, 1920, x18)

inst_749:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfc and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e003fff; valaddr_reg:x16; val_offset:1928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1928, x17, x15, 1928, x18)

inst_750:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7fc000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e7fc000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1936, x17, x15, 1936, x18)

inst_751:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfc and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e7fc000; valaddr_reg:x16; val_offset:1944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1944, x17, x15, 1944, x18)

inst_752:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x007fff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e007fff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1952, x17, x15, 1952, x18)

inst_753:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfc and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e007fff; valaddr_reg:x16; val_offset:1960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1960, x17, x15, 1960, x18)

inst_754:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f8000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e7f8000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1968, x17, x15, 1968, x18)

inst_755:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfc and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e7f8000; valaddr_reg:x16; val_offset:1976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1976, x17, x15, 1976, x18)

inst_756:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x00ffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e00ffff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1984, x17, x15, 1984, x18)

inst_757:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfc and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e00ffff; valaddr_reg:x16; val_offset:1992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1992, x17, x15, 1992, x18)

inst_758:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f0000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e7f0000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:2000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2000, x17, x15, 2000, x18)

inst_759:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfc and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e7f0000; valaddr_reg:x16; val_offset:2008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2008, x17, x15, 2008, x18)

inst_760:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01ffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e01ffff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:2016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2016, x17, x15, 2016, x18)

inst_761:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfc and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e01ffff; valaddr_reg:x16; val_offset:2024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_4)

inst_762:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e0000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e7e0000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_763:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfc and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e7e0000; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 8, x17, x15, 8, x18)

inst_764:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03ffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e03ffff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 16, x17, x15, 16, x18)

inst_765:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfc and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e03ffff; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 24, x17, x15, 24, x18)

inst_766:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7c0000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e7c0000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 32, x17, x15, 32, x18)

inst_767:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfc and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e7c0000; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 40, x17, x15, 40, x18)

inst_768:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x07ffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e07ffff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_769:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfc and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e07ffff; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 56, x17, x15, 56, x18)

inst_770:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x780000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e780000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 64, x17, x15, 64, x18)

inst_771:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfc and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e780000; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 72, x17, x15, 72, x18)

inst_772:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e0fffff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_773:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfc and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e0fffff; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 88, x17, x15, 88, x18)

inst_774:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x700000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e700000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 96, x17, x15, 96, x18)

inst_775:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfc and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e700000; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 104, x17, x15, 104, x18)

inst_776:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e1fffff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 112, x17, x15, 112, x18)

inst_777:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfc and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e1fffff; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 120, x17, x15, 120, x18)

inst_778:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x600000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e600000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_779:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfc and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e600000; valaddr_reg:x16; val_offset:136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 136, x17, x15, 136, x18)

inst_780:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e3fffff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 144, x17, x15, 144, x18)

inst_781:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfc and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e3fffff; valaddr_reg:x16; val_offset:152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 152, x17, x15, 152, x18)

inst_782:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e400000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_783:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfc and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e400000; valaddr_reg:x16; val_offset:168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 168, x17, x15, 168, x18)

inst_784:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e7fffff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 176, x17, x15, 176, x18)

inst_785:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfc and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e7fffff; valaddr_reg:x16; val_offset:184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 184, x17, x15, 184, x18)

inst_786:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e000000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 192, x17, x15, 192, x18)

inst_787:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfc and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7e000000; valaddr_reg:x16; val_offset:200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 200, x17, x15, 200, x18)

inst_788:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x000001 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d800001; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_789:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfb and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d800001; valaddr_reg:x16; val_offset:216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 216, x17, x15, 216, x18)

inst_790:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7ffffe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dfffffe; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 224, x17, x15, 224, x18)

inst_791:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfb and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7dfffffe; valaddr_reg:x16; val_offset:232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 232, x17, x15, 232, x18)

inst_792:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x000003 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d800003; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_793:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfb and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d800003; valaddr_reg:x16; val_offset:248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 248, x17, x15, 248, x18)

inst_794:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7ffffc and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dfffffc; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 256, x17, x15, 256, x18)

inst_795:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfb and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7dfffffc; valaddr_reg:x16; val_offset:264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 264, x17, x15, 264, x18)

inst_796:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x000007 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d800007; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 272, x17, x15, 272, x18)

inst_797:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfb and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d800007; valaddr_reg:x16; val_offset:280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 280, x17, x15, 280, x18)

inst_798:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7ffff8 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dfffff8; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_799:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfb and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7dfffff8; valaddr_reg:x16; val_offset:296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 296, x17, x15, 296, x18)

inst_800:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x00000f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d80000f; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 304, x17, x15, 304, x18)

inst_801:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfb and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d80000f; valaddr_reg:x16; val_offset:312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 312, x17, x15, 312, x18)

inst_802:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7ffff0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dfffff0; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_803:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfb and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7dfffff0; valaddr_reg:x16; val_offset:328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 328, x17, x15, 328, x18)

inst_804:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x00001f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d80001f; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 336, x17, x15, 336, x18)

inst_805:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfb and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d80001f; valaddr_reg:x16; val_offset:344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 344, x17, x15, 344, x18)

inst_806:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7fffe0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dffffe0; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 352, x17, x15, 352, x18)

inst_807:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfb and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7dffffe0; valaddr_reg:x16; val_offset:360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 360, x17, x15, 360, x18)

inst_808:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x00003f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d80003f; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_809:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfb and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d80003f; valaddr_reg:x16; val_offset:376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 376, x17, x15, 376, x18)

inst_810:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7fffc0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dffffc0; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 384, x17, x15, 384, x18)

inst_811:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfb and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7dffffc0; valaddr_reg:x16; val_offset:392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 392, x17, x15, 392, x18)

inst_812:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x00007f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d80007f; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_813:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfb and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d80007f; valaddr_reg:x16; val_offset:408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 408, x17, x15, 408, x18)

inst_814:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7fff80 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dffff80; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 416, x17, x15, 416, x18)

inst_815:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfb and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7dffff80; valaddr_reg:x16; val_offset:424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 424, x17, x15, 424, x18)

inst_816:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0000ff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d8000ff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 432, x17, x15, 432, x18)

inst_817:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfb and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d8000ff; valaddr_reg:x16; val_offset:440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 440, x17, x15, 440, x18)

inst_818:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7fff00 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dffff00; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_819:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfb and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7dffff00; valaddr_reg:x16; val_offset:456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 456, x17, x15, 456, x18)

inst_820:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0001ff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d8001ff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 464, x17, x15, 464, x18)

inst_821:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfb and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d8001ff; valaddr_reg:x16; val_offset:472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 472, x17, x15, 472, x18)

inst_822:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7ffe00 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dfffe00; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_823:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfb and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7dfffe00; valaddr_reg:x16; val_offset:488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 488, x17, x15, 488, x18)

inst_824:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0003ff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d8003ff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 496, x17, x15, 496, x18)

inst_825:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfb and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d8003ff; valaddr_reg:x16; val_offset:504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 504, x17, x15, 504, x18)

inst_826:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7ffc00 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dfffc00; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 512, x17, x15, 512, x18)

inst_827:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfb and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7dfffc00; valaddr_reg:x16; val_offset:520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 520, x17, x15, 520, x18)

inst_828:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0007ff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d8007ff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_829:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfb and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d8007ff; valaddr_reg:x16; val_offset:536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 536, x17, x15, 536, x18)

inst_830:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7ff800 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dfff800; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 544, x17, x15, 544, x18)

inst_831:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfb and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7dfff800; valaddr_reg:x16; val_offset:552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 552, x17, x15, 552, x18)

inst_832:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x000fff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d800fff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_833:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfb and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d800fff; valaddr_reg:x16; val_offset:568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 568, x17, x15, 568, x18)

inst_834:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7ff000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dfff000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 576, x17, x15, 576, x18)

inst_835:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfb and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7dfff000; valaddr_reg:x16; val_offset:584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 584, x17, x15, 584, x18)

inst_836:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x001fff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d801fff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 592, x17, x15, 592, x18)

inst_837:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfb and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d801fff; valaddr_reg:x16; val_offset:600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 600, x17, x15, 600, x18)

inst_838:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7fe000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dffe000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 608, x17, x15, 608, x18)

inst_839:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfb and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7dffe000; valaddr_reg:x16; val_offset:616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 616, x17, x15, 616, x18)

inst_840:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x003fff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d803fff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 624, x17, x15, 624, x18)

inst_841:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfb and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d803fff; valaddr_reg:x16; val_offset:632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 632, x17, x15, 632, x18)

inst_842:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7fc000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dffc000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_843:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfb and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7dffc000; valaddr_reg:x16; val_offset:648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 648, x17, x15, 648, x18)

inst_844:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x007fff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d807fff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 656, x17, x15, 656, x18)

inst_845:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfb and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d807fff; valaddr_reg:x16; val_offset:664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 664, x17, x15, 664, x18)

inst_846:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7f8000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dff8000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 672, x17, x15, 672, x18)

inst_847:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfb and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7dff8000; valaddr_reg:x16; val_offset:680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 680, x17, x15, 680, x18)

inst_848:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x00ffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d80ffff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 688, x17, x15, 688, x18)

inst_849:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfb and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d80ffff; valaddr_reg:x16; val_offset:696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 696, x17, x15, 696, x18)

inst_850:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7f0000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dff0000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 704, x17, x15, 704, x18)

inst_851:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfb and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7dff0000; valaddr_reg:x16; val_offset:712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 712, x17, x15, 712, x18)

inst_852:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x01ffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d81ffff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_853:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfb and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d81ffff; valaddr_reg:x16; val_offset:728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 728, x17, x15, 728, x18)

inst_854:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7e0000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dfe0000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 736, x17, x15, 736, x18)

inst_855:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfb and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7dfe0000; valaddr_reg:x16; val_offset:744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 744, x17, x15, 744, x18)

inst_856:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x03ffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d83ffff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 752, x17, x15, 752, x18)

inst_857:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfb and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d83ffff; valaddr_reg:x16; val_offset:760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 760, x17, x15, 760, x18)

inst_858:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7c0000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dfc0000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 768, x17, x15, 768, x18)

inst_859:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfb and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7dfc0000; valaddr_reg:x16; val_offset:776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 776, x17, x15, 776, x18)

inst_860:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x07ffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d87ffff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 784, x17, x15, 784, x18)

inst_861:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfb and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d87ffff; valaddr_reg:x16; val_offset:792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 792, x17, x15, 792, x18)

inst_862:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x780000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7df80000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_863:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfb and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7df80000; valaddr_reg:x16; val_offset:808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 808, x17, x15, 808, x18)

inst_864:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d8fffff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 816, x17, x15, 816, x18)

inst_865:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfb and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d8fffff; valaddr_reg:x16; val_offset:824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 824, x17, x15, 824, x18)

inst_866:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x700000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7df00000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 832, x17, x15, 832, x18)

inst_867:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfb and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7df00000; valaddr_reg:x16; val_offset:840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 840, x17, x15, 840, x18)

inst_868:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d9fffff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 848, x17, x15, 848, x18)

inst_869:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfb and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d9fffff; valaddr_reg:x16; val_offset:856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 856, x17, x15, 856, x18)

inst_870:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x600000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7de00000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 864, x17, x15, 864, x18)

inst_871:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfb and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7de00000; valaddr_reg:x16; val_offset:872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 872, x17, x15, 872, x18)

inst_872:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dbfffff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 880, x17, x15, 880, x18)

inst_873:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfb and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7dbfffff; valaddr_reg:x16; val_offset:888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 888, x17, x15, 888, x18)

inst_874:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dc00000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 896, x17, x15, 896, x18)

inst_875:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfb and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7dc00000; valaddr_reg:x16; val_offset:904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 904, x17, x15, 904, x18)

inst_876:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dffffff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 912, x17, x15, 912, x18)

inst_877:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfb and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7dffffff; valaddr_reg:x16; val_offset:920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 920, x17, x15, 920, x18)

inst_878:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d800000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 928, x17, x15, 928, x18)

inst_879:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfb and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d800000; valaddr_reg:x16; val_offset:936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 936, x17, x15, 936, x18)

inst_880:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x000001 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d000001; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 944, x17, x15, 944, x18)

inst_881:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d000001; valaddr_reg:x16; val_offset:952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 952, x17, x15, 952, x18)

inst_882:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7ffffe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d7ffffe; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 960, x17, x15, 960, x18)

inst_883:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d7ffffe; valaddr_reg:x16; val_offset:968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 968, x17, x15, 968, x18)

inst_884:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x000003 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d000003; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 976, x17, x15, 976, x18)

inst_885:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d000003; valaddr_reg:x16; val_offset:984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 984, x17, x15, 984, x18)

inst_886:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7ffffc and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d7ffffc; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 992, x17, x15, 992, x18)

inst_887:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d7ffffc; valaddr_reg:x16; val_offset:1000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1000, x17, x15, 1000, x18)

inst_888:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x000007 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d000007; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1008, x17, x15, 1008, x18)

inst_889:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d000007; valaddr_reg:x16; val_offset:1016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1016, x17, x15, 1016, x18)

inst_890:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7ffff8 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d7ffff8; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1024, x17, x15, 1024, x18)

inst_891:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d7ffff8; valaddr_reg:x16; val_offset:1032; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1032, x17, x15, 1032, x18)

inst_892:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x00000f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d00000f; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1040, x17, x15, 1040, x18)

inst_893:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d00000f; valaddr_reg:x16; val_offset:1048; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1048, x17, x15, 1048, x18)

inst_894:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7ffff0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d7ffff0; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1056; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1056, x17, x15, 1056, x18)

inst_895:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d7ffff0; valaddr_reg:x16; val_offset:1064; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1064, x17, x15, 1064, x18)

inst_896:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x00001f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d00001f; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1072; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1072, x17, x15, 1072, x18)

inst_897:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d00001f; valaddr_reg:x16; val_offset:1080; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1080, x17, x15, 1080, x18)

inst_898:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7fffe0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d7fffe0; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1088; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1088, x17, x15, 1088, x18)

inst_899:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d7fffe0; valaddr_reg:x16; val_offset:1096; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1096, x17, x15, 1096, x18)

inst_900:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x00003f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d00003f; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1104, x17, x15, 1104, x18)

inst_901:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d00003f; valaddr_reg:x16; val_offset:1112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1112, x17, x15, 1112, x18)

inst_902:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7fffc0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d7fffc0; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1120, x17, x15, 1120, x18)

inst_903:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d7fffc0; valaddr_reg:x16; val_offset:1128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1128, x17, x15, 1128, x18)

inst_904:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x00007f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d00007f; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1136, x17, x15, 1136, x18)

inst_905:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d00007f; valaddr_reg:x16; val_offset:1144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1144, x17, x15, 1144, x18)

inst_906:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7fff80 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d7fff80; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1152, x17, x15, 1152, x18)

inst_907:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d7fff80; valaddr_reg:x16; val_offset:1160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1160, x17, x15, 1160, x18)

inst_908:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0000ff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d0000ff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1168, x17, x15, 1168, x18)

inst_909:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d0000ff; valaddr_reg:x16; val_offset:1176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1176, x17, x15, 1176, x18)

inst_910:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7fff00 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d7fff00; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1184, x17, x15, 1184, x18)

inst_911:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d7fff00; valaddr_reg:x16; val_offset:1192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1192, x17, x15, 1192, x18)

inst_912:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0001ff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d0001ff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1200, x17, x15, 1200, x18)

inst_913:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d0001ff; valaddr_reg:x16; val_offset:1208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1208, x17, x15, 1208, x18)

inst_914:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7ffe00 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d7ffe00; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1216, x17, x15, 1216, x18)

inst_915:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d7ffe00; valaddr_reg:x16; val_offset:1224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1224, x17, x15, 1224, x18)

inst_916:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0003ff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d0003ff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1232, x17, x15, 1232, x18)

inst_917:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d0003ff; valaddr_reg:x16; val_offset:1240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1240, x17, x15, 1240, x18)

inst_918:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7ffc00 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d7ffc00; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1248, x17, x15, 1248, x18)

inst_919:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d7ffc00; valaddr_reg:x16; val_offset:1256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1256, x17, x15, 1256, x18)

inst_920:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0007ff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d0007ff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1264, x17, x15, 1264, x18)

inst_921:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d0007ff; valaddr_reg:x16; val_offset:1272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1272, x17, x15, 1272, x18)

inst_922:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7ff800 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d7ff800; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1280, x17, x15, 1280, x18)

inst_923:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d7ff800; valaddr_reg:x16; val_offset:1288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1288, x17, x15, 1288, x18)

inst_924:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x000fff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d000fff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1296, x17, x15, 1296, x18)

inst_925:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d000fff; valaddr_reg:x16; val_offset:1304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1304, x17, x15, 1304, x18)

inst_926:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7ff000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d7ff000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1312, x17, x15, 1312, x18)

inst_927:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d7ff000; valaddr_reg:x16; val_offset:1320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1320, x17, x15, 1320, x18)

inst_928:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x001fff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d001fff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1328, x17, x15, 1328, x18)

inst_929:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d001fff; valaddr_reg:x16; val_offset:1336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1336, x17, x15, 1336, x18)

inst_930:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7fe000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d7fe000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1344, x17, x15, 1344, x18)

inst_931:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d7fe000; valaddr_reg:x16; val_offset:1352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1352, x17, x15, 1352, x18)

inst_932:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x003fff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d003fff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1360, x17, x15, 1360, x18)

inst_933:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d003fff; valaddr_reg:x16; val_offset:1368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1368, x17, x15, 1368, x18)

inst_934:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7fc000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d7fc000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1376, x17, x15, 1376, x18)

inst_935:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d7fc000; valaddr_reg:x16; val_offset:1384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1384, x17, x15, 1384, x18)

inst_936:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x007fff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d007fff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1392, x17, x15, 1392, x18)

inst_937:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d007fff; valaddr_reg:x16; val_offset:1400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1400, x17, x15, 1400, x18)

inst_938:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7f8000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d7f8000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1408, x17, x15, 1408, x18)

inst_939:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d7f8000; valaddr_reg:x16; val_offset:1416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1416, x17, x15, 1416, x18)

inst_940:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x00ffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d00ffff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1424, x17, x15, 1424, x18)

inst_941:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d00ffff; valaddr_reg:x16; val_offset:1432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1432, x17, x15, 1432, x18)

inst_942:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7f0000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d7f0000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1440, x17, x15, 1440, x18)

inst_943:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d7f0000; valaddr_reg:x16; val_offset:1448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1448, x17, x15, 1448, x18)

inst_944:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x01ffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d01ffff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1456, x17, x15, 1456, x18)

inst_945:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d01ffff; valaddr_reg:x16; val_offset:1464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1464, x17, x15, 1464, x18)

inst_946:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7e0000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d7e0000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1472, x17, x15, 1472, x18)

inst_947:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d7e0000; valaddr_reg:x16; val_offset:1480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1480, x17, x15, 1480, x18)

inst_948:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x03ffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d03ffff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1488, x17, x15, 1488, x18)

inst_949:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d03ffff; valaddr_reg:x16; val_offset:1496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1496, x17, x15, 1496, x18)

inst_950:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7c0000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d7c0000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1504, x17, x15, 1504, x18)

inst_951:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d7c0000; valaddr_reg:x16; val_offset:1512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1512, x17, x15, 1512, x18)

inst_952:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x07ffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d07ffff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1520, x17, x15, 1520, x18)

inst_953:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d07ffff; valaddr_reg:x16; val_offset:1528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1528, x17, x15, 1528, x18)

inst_954:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x780000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d780000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1536, x17, x15, 1536, x18)

inst_955:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d780000; valaddr_reg:x16; val_offset:1544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1544, x17, x15, 1544, x18)

inst_956:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d0fffff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1552, x17, x15, 1552, x18)

inst_957:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d0fffff; valaddr_reg:x16; val_offset:1560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1560, x17, x15, 1560, x18)

inst_958:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x700000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d700000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1568, x17, x15, 1568, x18)

inst_959:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d700000; valaddr_reg:x16; val_offset:1576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1576, x17, x15, 1576, x18)

inst_960:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d1fffff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1584, x17, x15, 1584, x18)

inst_961:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d1fffff; valaddr_reg:x16; val_offset:1592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1592, x17, x15, 1592, x18)

inst_962:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x600000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d600000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1600, x17, x15, 1600, x18)

inst_963:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d600000; valaddr_reg:x16; val_offset:1608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1608, x17, x15, 1608, x18)

inst_964:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d3fffff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1616, x17, x15, 1616, x18)

inst_965:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d3fffff; valaddr_reg:x16; val_offset:1624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1624, x17, x15, 1624, x18)

inst_966:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d400000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1632, x17, x15, 1632, x18)

inst_967:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d400000; valaddr_reg:x16; val_offset:1640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1640, x17, x15, 1640, x18)

inst_968:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d7fffff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1648, x17, x15, 1648, x18)

inst_969:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d7fffff; valaddr_reg:x16; val_offset:1656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1656, x17, x15, 1656, x18)

inst_970:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d000000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1664, x17, x15, 1664, x18)

inst_971:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d000000; valaddr_reg:x16; val_offset:1672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1672, x17, x15, 1672, x18)

inst_972:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00000f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f00000f; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1680, x17, x15, 1680, x18)

inst_973:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f00000f; valaddr_reg:x16; val_offset:1688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1688, x17, x15, 1688, x18)

inst_974:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7ffff0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7ffff0; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1696, x17, x15, 1696, x18)

inst_975:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f7ffff0; valaddr_reg:x16; val_offset:1704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1704, x17, x15, 1704, x18)

inst_976:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00001f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f00001f; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1712, x17, x15, 1712, x18)

inst_977:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f00001f; valaddr_reg:x16; val_offset:1720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1720, x17, x15, 1720, x18)

inst_978:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffe0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffe0; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1728, x17, x15, 1728, x18)

inst_979:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f7fffe0; valaddr_reg:x16; val_offset:1736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1736, x17, x15, 1736, x18)

inst_980:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00003f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f00003f; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1744, x17, x15, 1744, x18)

inst_981:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f00003f; valaddr_reg:x16; val_offset:1752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1752, x17, x15, 1752, x18)

inst_982:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffc0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffc0; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1760, x17, x15, 1760, x18)

inst_983:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f7fffc0; valaddr_reg:x16; val_offset:1768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1768, x17, x15, 1768, x18)

inst_984:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00007f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f00007f; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1776, x17, x15, 1776, x18)

inst_985:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f00007f; valaddr_reg:x16; val_offset:1784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1784, x17, x15, 1784, x18)

inst_986:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fff80 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fff80; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1792, x17, x15, 1792, x18)

inst_987:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f7fff80; valaddr_reg:x16; val_offset:1800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1800, x17, x15, 1800, x18)

inst_988:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0000ff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0000ff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1808, x17, x15, 1808, x18)

inst_989:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f0000ff; valaddr_reg:x16; val_offset:1816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1816, x17, x15, 1816, x18)

inst_990:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fff00 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fff00; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1824, x17, x15, 1824, x18)

inst_991:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f7fff00; valaddr_reg:x16; val_offset:1832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1832, x17, x15, 1832, x18)

inst_992:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0001ff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0001ff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1840, x17, x15, 1840, x18)

inst_993:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f0001ff; valaddr_reg:x16; val_offset:1848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1848, x17, x15, 1848, x18)

inst_994:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7ffe00 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7ffe00; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1856, x17, x15, 1856, x18)

inst_995:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f7ffe00; valaddr_reg:x16; val_offset:1864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1864, x17, x15, 1864, x18)

inst_996:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0003ff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0003ff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1872, x17, x15, 1872, x18)

inst_997:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f0003ff; valaddr_reg:x16; val_offset:1880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1880, x17, x15, 1880, x18)

inst_998:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7ffc00 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7ffc00; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1888, x17, x15, 1888, x18)

inst_999:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f7ffc00; valaddr_reg:x16; val_offset:1896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1896, x17, x15, 1896, x18)

inst_1000:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0007ff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0007ff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1904, x17, x15, 1904, x18)

inst_1001:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f0007ff; valaddr_reg:x16; val_offset:1912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1912, x17, x15, 1912, x18)

inst_1002:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7ff800 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7ff800; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1920, x17, x15, 1920, x18)

inst_1003:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f7ff800; valaddr_reg:x16; val_offset:1928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1928, x17, x15, 1928, x18)

inst_1004:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000fff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f000fff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1936, x17, x15, 1936, x18)

inst_1005:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f000fff; valaddr_reg:x16; val_offset:1944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1944, x17, x15, 1944, x18)

inst_1006:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7ff000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7ff000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1952, x17, x15, 1952, x18)

inst_1007:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f7ff000; valaddr_reg:x16; val_offset:1960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1960, x17, x15, 1960, x18)

inst_1008:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x001fff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f001fff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1968, x17, x15, 1968, x18)

inst_1009:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f001fff; valaddr_reg:x16; val_offset:1976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1976, x17, x15, 1976, x18)

inst_1010:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fe000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fe000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1984, x17, x15, 1984, x18)

inst_1011:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f7fe000; valaddr_reg:x16; val_offset:1992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1992, x17, x15, 1992, x18)

inst_1012:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x003fff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f003fff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:2000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2000, x17, x15, 2000, x18)

inst_1013:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f003fff; valaddr_reg:x16; val_offset:2008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2008, x17, x15, 2008, x18)

inst_1014:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fc000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fc000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:2016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2016, x17, x15, 2016, x18)

inst_1015:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f7fc000; valaddr_reg:x16; val_offset:2024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_5)

inst_1016:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x007fff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f007fff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1017:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f007fff; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 8, x17, x15, 8, x18)

inst_1018:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7f8000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7f8000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 16, x17, x15, 16, x18)

inst_1019:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f7f8000; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 24, x17, x15, 24, x18)

inst_1020:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f00ffff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 32, x17, x15, 32, x18)

inst_1021:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f00ffff; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 40, x17, x15, 40, x18)

inst_1022:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7f0000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7f0000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_1023:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f7f0000; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 56, x17, x15, 56, x18)

inst_1024:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f01ffff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 64, x17, x15, 64, x18)

inst_1025:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f01ffff; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 72, x17, x15, 72, x18)

inst_1026:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7e0000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7e0000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_1027:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f7e0000; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 88, x17, x15, 88, x18)

inst_1028:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f03ffff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 96, x17, x15, 96, x18)

inst_1029:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f03ffff; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 104, x17, x15, 104, x18)

inst_1030:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7c0000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7c0000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 112, x17, x15, 112, x18)

inst_1031:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f7c0000; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 120, x17, x15, 120, x18)

inst_1032:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07ffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f07ffff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_1033:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f07ffff; valaddr_reg:x16; val_offset:136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 136, x17, x15, 136, x18)

inst_1034:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x780000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f780000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 144, x17, x15, 144, x18)

inst_1035:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f780000; valaddr_reg:x16; val_offset:152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 152, x17, x15, 152, x18)

inst_1036:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0fffff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_1037:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f0fffff; valaddr_reg:x16; val_offset:168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 168, x17, x15, 168, x18)

inst_1038:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x700000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f700000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 176, x17, x15, 176, x18)

inst_1039:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f700000; valaddr_reg:x16; val_offset:184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 184, x17, x15, 184, x18)

inst_1040:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1fffff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 192, x17, x15, 192, x18)

inst_1041:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f1fffff; valaddr_reg:x16; val_offset:200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 200, x17, x15, 200, x18)

inst_1042:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x600000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f600000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_1043:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f600000; valaddr_reg:x16; val_offset:216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 216, x17, x15, 216, x18)

inst_1044:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3fffff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 224, x17, x15, 224, x18)

inst_1045:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f3fffff; valaddr_reg:x16; val_offset:232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 232, x17, x15, 232, x18)

inst_1046:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f400000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_1047:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f400000; valaddr_reg:x16; val_offset:248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 248, x17, x15, 248, x18)

inst_1048:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 256, x17, x15, 256, x18)

inst_1049:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f000000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 264, x17, x15, 264, x18)

inst_1050:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f000000; valaddr_reg:x16; val_offset:272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 272, x17, x15, 272, x18)

inst_1051:
// fs1 == 0 and fe1 == 0xc8 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x64000001; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 280, x17, x15, 280, x18)

inst_1052:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xc8 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x64000001; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_1053:
// fs1 == 0 and fe1 == 0xc8 and fm1 == 0x7ffffe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x647ffffe; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 296, x17, x15, 296, x18)

inst_1054:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xc8 and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x647ffffe; valaddr_reg:x16; val_offset:304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 304, x17, x15, 304, x18)

inst_1055:
// fs1 == 0 and fe1 == 0xc8 and fm1 == 0x000003 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x64000003; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 312, x17, x15, 312, x18)

inst_1056:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xc8 and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x64000003; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_1057:
// fs1 == 0 and fe1 == 0xc8 and fm1 == 0x7ffffc and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x647ffffc; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 328, x17, x15, 328, x18)

inst_1058:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xc8 and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x647ffffc; valaddr_reg:x16; val_offset:336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 336, x17, x15, 336, x18)

inst_1059:
// fs1 == 0 and fe1 == 0xc8 and fm1 == 0x000007 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x64000007; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 344, x17, x15, 344, x18)

inst_1060:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xc8 and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x64000007; valaddr_reg:x16; val_offset:352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 352, x17, x15, 352, x18)

inst_1061:
// fs1 == 0 and fe1 == 0xc8 and fm1 == 0x7ffff8 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x647ffff8; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 360, x17, x15, 360, x18)

inst_1062:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xc8 and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x647ffff8; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_1063:
// fs1 == 0 and fe1 == 0xc8 and fm1 == 0x00000f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6400000f; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 376, x17, x15, 376, x18)

inst_1064:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xc8 and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x6400000f; valaddr_reg:x16; val_offset:384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 384, x17, x15, 384, x18)

inst_1065:
// fs1 == 0 and fe1 == 0xc8 and fm1 == 0x7ffff0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x647ffff0; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 392, x17, x15, 392, x18)

inst_1066:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xc8 and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x647ffff0; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_1067:
// fs1 == 0 and fe1 == 0xc8 and fm1 == 0x00001f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6400001f; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 408, x17, x15, 408, x18)

inst_1068:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xc8 and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x6400001f; valaddr_reg:x16; val_offset:416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 416, x17, x15, 416, x18)

inst_1069:
// fs1 == 0 and fe1 == 0xc8 and fm1 == 0x7fffe0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x647fffe0; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 424, x17, x15, 424, x18)

inst_1070:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xc8 and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x647fffe0; valaddr_reg:x16; val_offset:432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 432, x17, x15, 432, x18)

inst_1071:
// fs1 == 0 and fe1 == 0xc8 and fm1 == 0x00003f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6400003f; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 440, x17, x15, 440, x18)

inst_1072:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xc8 and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x6400003f; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_1073:
// fs1 == 0 and fe1 == 0xc8 and fm1 == 0x7fffc0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x647fffc0; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 456, x17, x15, 456, x18)

inst_1074:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xc8 and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x647fffc0; valaddr_reg:x16; val_offset:464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 464, x17, x15, 464, x18)

inst_1075:
// fs1 == 0 and fe1 == 0xc8 and fm1 == 0x00007f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6400007f; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 472, x17, x15, 472, x18)

inst_1076:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xc8 and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x6400007f; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_1077:
// fs1 == 0 and fe1 == 0xc8 and fm1 == 0x7fff80 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x647fff80; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 488, x17, x15, 488, x18)

inst_1078:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xc8 and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x647fff80; valaddr_reg:x16; val_offset:496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 496, x17, x15, 496, x18)

inst_1079:
// fs1 == 0 and fe1 == 0xc8 and fm1 == 0x0000ff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x640000ff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 504, x17, x15, 504, x18)

inst_1080:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xc8 and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x640000ff; valaddr_reg:x16; val_offset:512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 512, x17, x15, 512, x18)

inst_1081:
// fs1 == 0 and fe1 == 0xc8 and fm1 == 0x7fff00 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x647fff00; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 520, x17, x15, 520, x18)

inst_1082:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xc8 and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x647fff00; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_1083:
// fs1 == 0 and fe1 == 0xc8 and fm1 == 0x0001ff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x640001ff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 536, x17, x15, 536, x18)

inst_1084:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xc8 and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x640001ff; valaddr_reg:x16; val_offset:544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 544, x17, x15, 544, x18)

inst_1085:
// fs1 == 0 and fe1 == 0xc8 and fm1 == 0x7ffe00 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x647ffe00; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 552, x17, x15, 552, x18)

inst_1086:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xc8 and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x647ffe00; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_1087:
// fs1 == 0 and fe1 == 0xc8 and fm1 == 0x0003ff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x640003ff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 568, x17, x15, 568, x18)

inst_1088:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xc8 and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x640003ff; valaddr_reg:x16; val_offset:576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 576, x17, x15, 576, x18)

inst_1089:
// fs1 == 0 and fe1 == 0xc8 and fm1 == 0x7ffc00 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x647ffc00; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 584, x17, x15, 584, x18)

inst_1090:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xc8 and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x647ffc00; valaddr_reg:x16; val_offset:592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 592, x17, x15, 592, x18)

inst_1091:
// fs1 == 0 and fe1 == 0xc8 and fm1 == 0x0007ff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x640007ff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 600, x17, x15, 600, x18)

inst_1092:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xc8 and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x640007ff; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 608, x17, x15, 608, x18)

inst_1093:
// fs1 == 0 and fe1 == 0xc8 and fm1 == 0x7ff800 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x647ff800; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 616, x17, x15, 616, x18)

inst_1094:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xc8 and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x647ff800; valaddr_reg:x16; val_offset:624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 624, x17, x15, 624, x18)

inst_1095:
// fs1 == 0 and fe1 == 0xc8 and fm1 == 0x000fff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x64000fff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 632, x17, x15, 632, x18)

inst_1096:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xc8 and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x64000fff; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_1097:
// fs1 == 0 and fe1 == 0xc8 and fm1 == 0x7ff000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x647ff000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 648, x17, x15, 648, x18)

inst_1098:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xc8 and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x647ff000; valaddr_reg:x16; val_offset:656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 656, x17, x15, 656, x18)

inst_1099:
// fs1 == 0 and fe1 == 0xc8 and fm1 == 0x001fff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x64001fff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 664, x17, x15, 664, x18)

inst_1100:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xc8 and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x64001fff; valaddr_reg:x16; val_offset:672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 672, x17, x15, 672, x18)

inst_1101:
// fs1 == 0 and fe1 == 0xc8 and fm1 == 0x7fe000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x647fe000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 680, x17, x15, 680, x18)

inst_1102:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xc8 and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x647fe000; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 688, x17, x15, 688, x18)

inst_1103:
// fs1 == 0 and fe1 == 0xc8 and fm1 == 0x003fff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x64003fff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 696, x17, x15, 696, x18)

inst_1104:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xc8 and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x64003fff; valaddr_reg:x16; val_offset:704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 704, x17, x15, 704, x18)

inst_1105:
// fs1 == 0 and fe1 == 0xc8 and fm1 == 0x7fc000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x647fc000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 712, x17, x15, 712, x18)

inst_1106:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xc8 and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x647fc000; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_1107:
// fs1 == 0 and fe1 == 0xc8 and fm1 == 0x007fff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x64007fff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 728, x17, x15, 728, x18)

inst_1108:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xc8 and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x64007fff; valaddr_reg:x16; val_offset:736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 736, x17, x15, 736, x18)

inst_1109:
// fs1 == 0 and fe1 == 0xc8 and fm1 == 0x7f8000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x647f8000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 744, x17, x15, 744, x18)

inst_1110:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xc8 and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x647f8000; valaddr_reg:x16; val_offset:752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 752, x17, x15, 752, x18)

inst_1111:
// fs1 == 0 and fe1 == 0xc8 and fm1 == 0x00ffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6400ffff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 760, x17, x15, 760, x18)

inst_1112:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xc8 and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x6400ffff; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 768, x17, x15, 768, x18)

inst_1113:
// fs1 == 0 and fe1 == 0xc8 and fm1 == 0x7f0000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x647f0000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 776, x17, x15, 776, x18)

inst_1114:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xc8 and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x647f0000; valaddr_reg:x16; val_offset:784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 784, x17, x15, 784, x18)

inst_1115:
// fs1 == 0 and fe1 == 0xc8 and fm1 == 0x01ffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6401ffff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 792, x17, x15, 792, x18)

inst_1116:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xc8 and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x6401ffff; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_1117:
// fs1 == 0 and fe1 == 0xc8 and fm1 == 0x7e0000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x647e0000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 808, x17, x15, 808, x18)

inst_1118:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xc8 and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x647e0000; valaddr_reg:x16; val_offset:816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 816, x17, x15, 816, x18)

inst_1119:
// fs1 == 0 and fe1 == 0xc8 and fm1 == 0x03ffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6403ffff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 824, x17, x15, 824, x18)

inst_1120:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xc8 and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x6403ffff; valaddr_reg:x16; val_offset:832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 832, x17, x15, 832, x18)

inst_1121:
// fs1 == 0 and fe1 == 0xc8 and fm1 == 0x7c0000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x647c0000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 840, x17, x15, 840, x18)

inst_1122:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xc8 and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x647c0000; valaddr_reg:x16; val_offset:848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 848, x17, x15, 848, x18)

inst_1123:
// fs1 == 0 and fe1 == 0xc8 and fm1 == 0x07ffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6407ffff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 856, x17, x15, 856, x18)

inst_1124:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xc8 and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x6407ffff; valaddr_reg:x16; val_offset:864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 864, x17, x15, 864, x18)

inst_1125:
// fs1 == 0 and fe1 == 0xc8 and fm1 == 0x780000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x64780000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 872, x17, x15, 872, x18)

inst_1126:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xc8 and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x64780000; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 880, x17, x15, 880, x18)

inst_1127:
// fs1 == 0 and fe1 == 0xc8 and fm1 == 0x0fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x640fffff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 888, x17, x15, 888, x18)

inst_1128:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xc8 and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x640fffff; valaddr_reg:x16; val_offset:896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 896, x17, x15, 896, x18)

inst_1129:
// fs1 == 0 and fe1 == 0xc8 and fm1 == 0x700000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x64700000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 904, x17, x15, 904, x18)

inst_1130:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xc8 and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x64700000; valaddr_reg:x16; val_offset:912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 912, x17, x15, 912, x18)

inst_1131:
// fs1 == 0 and fe1 == 0xc8 and fm1 == 0x1fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x641fffff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 920, x17, x15, 920, x18)

inst_1132:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xc8 and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x641fffff; valaddr_reg:x16; val_offset:928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 928, x17, x15, 928, x18)

inst_1133:
// fs1 == 0 and fe1 == 0xc8 and fm1 == 0x600000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x64600000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 936, x17, x15, 936, x18)

inst_1134:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xc8 and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x64600000; valaddr_reg:x16; val_offset:944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 944, x17, x15, 944, x18)

inst_1135:
// fs1 == 0 and fe1 == 0xc8 and fm1 == 0x3fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x643fffff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 952, x17, x15, 952, x18)

inst_1136:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xc8 and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x643fffff; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 960, x17, x15, 960, x18)

inst_1137:
// fs1 == 0 and fe1 == 0xc8 and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x64400000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 968, x17, x15, 968, x18)

inst_1138:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xc8 and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x64400000; valaddr_reg:x16; val_offset:976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 976, x17, x15, 976, x18)

inst_1139:
// fs1 == 0 and fe1 == 0xc8 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x647fffff; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 984, x17, x15, 984, x18)

inst_1140:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xc8 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x647fffff; valaddr_reg:x16; val_offset:992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 992, x17, x15, 992, x18)

inst_1141:
// fs1 == 0 and fe1 == 0xc8 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x64000000; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1000, x17, x15, 1000, x18)

inst_1142:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xc8 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x64000000; valaddr_reg:x16; val_offset:1008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1008, x17, x15, 1008, x18)

inst_1143:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x4ccccc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80cccccc; op2val:0x80800000; valaddr_reg:x16; val_offset:1016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1016, x17, x15, 1016, x18)

inst_1144:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x4ccccc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x80cccccc; valaddr_reg:x16; val_offset:1024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1024, x17, x15, 1024, x18)

inst_1145:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x333333 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80b33333; op2val:0x80800000; valaddr_reg:x16; val_offset:1032; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1032, x17, x15, 1032, x18)

inst_1146:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x333333 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x80b33333; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1040, x17, x15, 1040, x18)

inst_1147:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x5b6db6 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80db6db6; op2val:0x80800000; valaddr_reg:x16; val_offset:1048; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1048, x17, x15, 1048, x18)

inst_1148:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5b6db6 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x80db6db6; valaddr_reg:x16; val_offset:1056; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1056, x17, x15, 1056, x18)

inst_1149:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x249249 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80a49249; op2val:0x80800000; valaddr_reg:x16; val_offset:1064; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1064, x17, x15, 1064, x18)

inst_1150:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x249249 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x80a49249; valaddr_reg:x16; val_offset:1072; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1072, x17, x15, 1072, x18)

inst_1151:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x444444 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80c44444; op2val:0x80800000; valaddr_reg:x16; val_offset:1080; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1080, x17, x15, 1080, x18)

inst_1152:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x444444 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x80c44444; valaddr_reg:x16; val_offset:1088; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1088, x17, x15, 1088, x18)

inst_1153:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x3bbbbb and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80bbbbbb; op2val:0x80800000; valaddr_reg:x16; val_offset:1096; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1096, x17, x15, 1096, x18)

inst_1154:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3bbbbb and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x80bbbbbb; valaddr_reg:x16; val_offset:1104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1104, x17, x15, 1104, x18)

inst_1155:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x666666 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80e66666; op2val:0x80800000; valaddr_reg:x16; val_offset:1112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1112, x17, x15, 1112, x18)

inst_1156:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x666666 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x80e66666; valaddr_reg:x16; val_offset:1120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1120, x17, x15, 1120, x18)

inst_1157:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x199999 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80999999; op2val:0x80800000; valaddr_reg:x16; val_offset:1128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1128, x17, x15, 1128, x18)

inst_1158:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x199999 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x80999999; valaddr_reg:x16; val_offset:1136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1136, x17, x15, 1136, x18)

inst_1159:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x6db6db and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80edb6db; op2val:0x80800000; valaddr_reg:x16; val_offset:1144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1144, x17, x15, 1144, x18)

inst_1160:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x6db6db and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x80edb6db; valaddr_reg:x16; val_offset:1152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1152, x17, x15, 1152, x18)

inst_1161:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x36db6d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80b6db6d; op2val:0x80800000; valaddr_reg:x16; val_offset:1160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1160, x17, x15, 1160, x18)

inst_1162:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x36db6d and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x80b6db6d; valaddr_reg:x16; val_offset:1168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1168, x17, x15, 1168, x18)

inst_1163:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800001; op2val:0x80800000; valaddr_reg:x16; val_offset:1176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1176, x17, x15, 1176, x18)

inst_1164:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x80800001; valaddr_reg:x16; val_offset:1184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1184, x17, x15, 1184, x18)

inst_1165:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7ffffe and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80fffffe; op2val:0x80800000; valaddr_reg:x16; val_offset:1192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1192, x17, x15, 1192, x18)

inst_1166:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x80fffffe; valaddr_reg:x16; val_offset:1200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1200, x17, x15, 1200, x18)

inst_1167:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000003 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800003; op2val:0x80800000; valaddr_reg:x16; val_offset:1208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1208, x17, x15, 1208, x18)

inst_1168:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x80800003; valaddr_reg:x16; val_offset:1216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1216, x17, x15, 1216, x18)

inst_1169:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7ffffc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80fffffc; op2val:0x80800000; valaddr_reg:x16; val_offset:1224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1224, x17, x15, 1224, x18)

inst_1170:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x80fffffc; valaddr_reg:x16; val_offset:1232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1232, x17, x15, 1232, x18)

inst_1171:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000007 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800007; op2val:0x80800000; valaddr_reg:x16; val_offset:1240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1240, x17, x15, 1240, x18)

inst_1172:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x80800007; valaddr_reg:x16; val_offset:1248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1248, x17, x15, 1248, x18)

inst_1173:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7ffff8 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80fffff8; op2val:0x80800000; valaddr_reg:x16; val_offset:1256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1256, x17, x15, 1256, x18)

inst_1174:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x80fffff8; valaddr_reg:x16; val_offset:1264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1264, x17, x15, 1264, x18)

inst_1175:
// fs1 == 1 and fe1 == 0x04 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x82000001; op2val:0x80800000; valaddr_reg:x16; val_offset:1272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1272, x17, x15, 1272, x18)

inst_1176:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x82000001; valaddr_reg:x16; val_offset:1280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1280, x17, x15, 1280, x18)

inst_1177:
// fs1 == 1 and fe1 == 0x04 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x82000000; op2val:0x80800000; valaddr_reg:x16; val_offset:1288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1288, x17, x15, 1288, x18)

inst_1178:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x82000000; valaddr_reg:x16; val_offset:1296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1296, x17, x15, 1296, x18)

inst_1179:
// fs1 == 1 and fe1 == 0x04 and fm1 == 0x7ffffe and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x827ffffe; op2val:0x80800000; valaddr_reg:x16; val_offset:1304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1304, x17, x15, 1304, x18)

inst_1180:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x827ffffe; valaddr_reg:x16; val_offset:1312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1312, x17, x15, 1312, x18)

inst_1181:
// fs1 == 1 and fe1 == 0x04 and fm1 == 0x000003 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x82000003; op2val:0x80800000; valaddr_reg:x16; val_offset:1320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1320, x17, x15, 1320, x18)

inst_1182:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x82000003; valaddr_reg:x16; val_offset:1328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1328, x17, x15, 1328, x18)

inst_1183:
// fs1 == 1 and fe1 == 0x04 and fm1 == 0x7ffffc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x827ffffc; op2val:0x80800000; valaddr_reg:x16; val_offset:1336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1336, x17, x15, 1336, x18)

inst_1184:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x827ffffc; valaddr_reg:x16; val_offset:1344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1344, x17, x15, 1344, x18)

inst_1185:
// fs1 == 1 and fe1 == 0x04 and fm1 == 0x000007 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x82000007; op2val:0x80800000; valaddr_reg:x16; val_offset:1352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1352, x17, x15, 1352, x18)

inst_1186:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x82000007; valaddr_reg:x16; val_offset:1360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1360, x17, x15, 1360, x18)

inst_1187:
// fs1 == 1 and fe1 == 0x04 and fm1 == 0x7ffff8 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x827ffff8; op2val:0x80800000; valaddr_reg:x16; val_offset:1368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1368, x17, x15, 1368, x18)

inst_1188:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x827ffff8; valaddr_reg:x16; val_offset:1376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1376, x17, x15, 1376, x18)

inst_1189:
// fs1 == 1 and fe1 == 0x04 and fm1 == 0x00000f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8200000f; op2val:0x80800000; valaddr_reg:x16; val_offset:1384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1384, x17, x15, 1384, x18)

inst_1190:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x8200000f; valaddr_reg:x16; val_offset:1392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1392, x17, x15, 1392, x18)

inst_1191:
// fs1 == 1 and fe1 == 0x04 and fm1 == 0x7ffff0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x827ffff0; op2val:0x80800000; valaddr_reg:x16; val_offset:1400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1400, x17, x15, 1400, x18)

inst_1192:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x827ffff0; valaddr_reg:x16; val_offset:1408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1408, x17, x15, 1408, x18)

inst_1193:
// fs1 == 1 and fe1 == 0x04 and fm1 == 0x00001f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8200001f; op2val:0x80800000; valaddr_reg:x16; val_offset:1416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1416, x17, x15, 1416, x18)

inst_1194:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x8200001f; valaddr_reg:x16; val_offset:1424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1424, x17, x15, 1424, x18)

inst_1195:
// fs1 == 1 and fe1 == 0x04 and fm1 == 0x7fffe0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x827fffe0; op2val:0x80800000; valaddr_reg:x16; val_offset:1432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1432, x17, x15, 1432, x18)

inst_1196:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x827fffe0; valaddr_reg:x16; val_offset:1440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1440, x17, x15, 1440, x18)

inst_1197:
// fs1 == 1 and fe1 == 0x04 and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8200003f; op2val:0x80800000; valaddr_reg:x16; val_offset:1448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1448, x17, x15, 1448, x18)

inst_1198:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x8200003f; valaddr_reg:x16; val_offset:1456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1456, x17, x15, 1456, x18)

inst_1199:
// fs1 == 1 and fe1 == 0x04 and fm1 == 0x7fffc0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x827fffc0; op2val:0x80800000; valaddr_reg:x16; val_offset:1464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1464, x17, x15, 1464, x18)

inst_1200:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x827fffc0; valaddr_reg:x16; val_offset:1472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1472, x17, x15, 1472, x18)

inst_1201:
// fs1 == 1 and fe1 == 0x04 and fm1 == 0x00007f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8200007f; op2val:0x80800000; valaddr_reg:x16; val_offset:1480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1480, x17, x15, 1480, x18)

inst_1202:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x8200007f; valaddr_reg:x16; val_offset:1488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1488, x17, x15, 1488, x18)

inst_1203:
// fs1 == 1 and fe1 == 0x04 and fm1 == 0x7fff80 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x827fff80; op2val:0x80800000; valaddr_reg:x16; val_offset:1496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1496, x17, x15, 1496, x18)

inst_1204:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x827fff80; valaddr_reg:x16; val_offset:1504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1504, x17, x15, 1504, x18)

inst_1205:
// fs1 == 1 and fe1 == 0x04 and fm1 == 0x0000ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x820000ff; op2val:0x80800000; valaddr_reg:x16; val_offset:1512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1512, x17, x15, 1512, x18)

inst_1206:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x820000ff; valaddr_reg:x16; val_offset:1520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1520, x17, x15, 1520, x18)

inst_1207:
// fs1 == 1 and fe1 == 0x04 and fm1 == 0x7fff00 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x827fff00; op2val:0x80800000; valaddr_reg:x16; val_offset:1528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1528, x17, x15, 1528, x18)

inst_1208:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x827fff00; valaddr_reg:x16; val_offset:1536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1536, x17, x15, 1536, x18)

inst_1209:
// fs1 == 1 and fe1 == 0x04 and fm1 == 0x0001ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x820001ff; op2val:0x80800000; valaddr_reg:x16; val_offset:1544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1544, x17, x15, 1544, x18)

inst_1210:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x820001ff; valaddr_reg:x16; val_offset:1552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1552, x17, x15, 1552, x18)

inst_1211:
// fs1 == 1 and fe1 == 0x04 and fm1 == 0x7ffe00 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x827ffe00; op2val:0x80800000; valaddr_reg:x16; val_offset:1560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1560, x17, x15, 1560, x18)

inst_1212:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x827ffe00; valaddr_reg:x16; val_offset:1568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1568, x17, x15, 1568, x18)

inst_1213:
// fs1 == 1 and fe1 == 0x04 and fm1 == 0x0003ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x820003ff; op2val:0x80800000; valaddr_reg:x16; val_offset:1576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1576, x17, x15, 1576, x18)

inst_1214:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x820003ff; valaddr_reg:x16; val_offset:1584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1584, x17, x15, 1584, x18)

inst_1215:
// fs1 == 1 and fe1 == 0x04 and fm1 == 0x7ffc00 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x827ffc00; op2val:0x80800000; valaddr_reg:x16; val_offset:1592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1592, x17, x15, 1592, x18)

inst_1216:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x827ffc00; valaddr_reg:x16; val_offset:1600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1600, x17, x15, 1600, x18)

inst_1217:
// fs1 == 1 and fe1 == 0x04 and fm1 == 0x0007ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x820007ff; op2val:0x80800000; valaddr_reg:x16; val_offset:1608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1608, x17, x15, 1608, x18)

inst_1218:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x820007ff; valaddr_reg:x16; val_offset:1616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1616, x17, x15, 1616, x18)

inst_1219:
// fs1 == 1 and fe1 == 0x04 and fm1 == 0x7ff800 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x827ff800; op2val:0x80800000; valaddr_reg:x16; val_offset:1624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1624, x17, x15, 1624, x18)

inst_1220:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x827ff800; valaddr_reg:x16; val_offset:1632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1632, x17, x15, 1632, x18)

inst_1221:
// fs1 == 1 and fe1 == 0x04 and fm1 == 0x000fff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x82000fff; op2val:0x80800000; valaddr_reg:x16; val_offset:1640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1640, x17, x15, 1640, x18)

inst_1222:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x82000fff; valaddr_reg:x16; val_offset:1648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1648, x17, x15, 1648, x18)

inst_1223:
// fs1 == 1 and fe1 == 0x04 and fm1 == 0x7ff000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x827ff000; op2val:0x80800000; valaddr_reg:x16; val_offset:1656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1656, x17, x15, 1656, x18)

inst_1224:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x827ff000; valaddr_reg:x16; val_offset:1664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1664, x17, x15, 1664, x18)

inst_1225:
// fs1 == 1 and fe1 == 0x04 and fm1 == 0x001fff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x82001fff; op2val:0x80800000; valaddr_reg:x16; val_offset:1672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1672, x17, x15, 1672, x18)

inst_1226:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x82001fff; valaddr_reg:x16; val_offset:1680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1680, x17, x15, 1680, x18)

inst_1227:
// fs1 == 1 and fe1 == 0x04 and fm1 == 0x7fe000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x827fe000; op2val:0x80800000; valaddr_reg:x16; val_offset:1688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1688, x17, x15, 1688, x18)

inst_1228:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x827fe000; valaddr_reg:x16; val_offset:1696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1696, x17, x15, 1696, x18)

inst_1229:
// fs1 == 1 and fe1 == 0x04 and fm1 == 0x003fff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x82003fff; op2val:0x80800000; valaddr_reg:x16; val_offset:1704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1704, x17, x15, 1704, x18)

inst_1230:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x82003fff; valaddr_reg:x16; val_offset:1712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1712, x17, x15, 1712, x18)

inst_1231:
// fs1 == 1 and fe1 == 0x04 and fm1 == 0x7fc000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x827fc000; op2val:0x80800000; valaddr_reg:x16; val_offset:1720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1720, x17, x15, 1720, x18)

inst_1232:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x827fc000; valaddr_reg:x16; val_offset:1728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1728, x17, x15, 1728, x18)

inst_1233:
// fs1 == 1 and fe1 == 0x04 and fm1 == 0x007fff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x82007fff; op2val:0x80800000; valaddr_reg:x16; val_offset:1736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1736, x17, x15, 1736, x18)

inst_1234:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x82007fff; valaddr_reg:x16; val_offset:1744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1744, x17, x15, 1744, x18)

inst_1235:
// fs1 == 1 and fe1 == 0x04 and fm1 == 0x7f8000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x827f8000; op2val:0x80800000; valaddr_reg:x16; val_offset:1752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1752, x17, x15, 1752, x18)

inst_1236:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x827f8000; valaddr_reg:x16; val_offset:1760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1760, x17, x15, 1760, x18)

inst_1237:
// fs1 == 1 and fe1 == 0x04 and fm1 == 0x00ffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8200ffff; op2val:0x80800000; valaddr_reg:x16; val_offset:1768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1768, x17, x15, 1768, x18)

inst_1238:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x8200ffff; valaddr_reg:x16; val_offset:1776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1776, x17, x15, 1776, x18)

inst_1239:
// fs1 == 1 and fe1 == 0x04 and fm1 == 0x7f0000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x827f0000; op2val:0x80800000; valaddr_reg:x16; val_offset:1784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1784, x17, x15, 1784, x18)

inst_1240:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x827f0000; valaddr_reg:x16; val_offset:1792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1792, x17, x15, 1792, x18)

inst_1241:
// fs1 == 1 and fe1 == 0x04 and fm1 == 0x01ffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8201ffff; op2val:0x80800000; valaddr_reg:x16; val_offset:1800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1800, x17, x15, 1800, x18)

inst_1242:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x8201ffff; valaddr_reg:x16; val_offset:1808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1808, x17, x15, 1808, x18)

inst_1243:
// fs1 == 1 and fe1 == 0x04 and fm1 == 0x7e0000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x827e0000; op2val:0x80800000; valaddr_reg:x16; val_offset:1816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1816, x17, x15, 1816, x18)

inst_1244:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x827e0000; valaddr_reg:x16; val_offset:1824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1824, x17, x15, 1824, x18)

inst_1245:
// fs1 == 1 and fe1 == 0x04 and fm1 == 0x03ffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8203ffff; op2val:0x80800000; valaddr_reg:x16; val_offset:1832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1832, x17, x15, 1832, x18)

inst_1246:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x8203ffff; valaddr_reg:x16; val_offset:1840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1840, x17, x15, 1840, x18)

inst_1247:
// fs1 == 1 and fe1 == 0x04 and fm1 == 0x7c0000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x827c0000; op2val:0x80800000; valaddr_reg:x16; val_offset:1848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1848, x17, x15, 1848, x18)

inst_1248:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x827c0000; valaddr_reg:x16; val_offset:1856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1856, x17, x15, 1856, x18)

inst_1249:
// fs1 == 1 and fe1 == 0x04 and fm1 == 0x07ffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8207ffff; op2val:0x80800000; valaddr_reg:x16; val_offset:1864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1864, x17, x15, 1864, x18)

inst_1250:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x8207ffff; valaddr_reg:x16; val_offset:1872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1872, x17, x15, 1872, x18)

inst_1251:
// fs1 == 1 and fe1 == 0x04 and fm1 == 0x780000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x82780000; op2val:0x80800000; valaddr_reg:x16; val_offset:1880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1880, x17, x15, 1880, x18)

inst_1252:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x82780000; valaddr_reg:x16; val_offset:1888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1888, x17, x15, 1888, x18)

inst_1253:
// fs1 == 1 and fe1 == 0x04 and fm1 == 0x0fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x820fffff; op2val:0x80800000; valaddr_reg:x16; val_offset:1896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1896, x17, x15, 1896, x18)

inst_1254:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x820fffff; valaddr_reg:x16; val_offset:1904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1904, x17, x15, 1904, x18)

inst_1255:
// fs1 == 1 and fe1 == 0x04 and fm1 == 0x700000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x82700000; op2val:0x80800000; valaddr_reg:x16; val_offset:1912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1912, x17, x15, 1912, x18)

inst_1256:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x82700000; valaddr_reg:x16; val_offset:1920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1920, x17, x15, 1920, x18)

inst_1257:
// fs1 == 1 and fe1 == 0x04 and fm1 == 0x1fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x821fffff; op2val:0x80800000; valaddr_reg:x16; val_offset:1928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1928, x17, x15, 1928, x18)

inst_1258:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x821fffff; valaddr_reg:x16; val_offset:1936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1936, x17, x15, 1936, x18)

inst_1259:
// fs1 == 1 and fe1 == 0x04 and fm1 == 0x600000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x82600000; op2val:0x80800000; valaddr_reg:x16; val_offset:1944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1944, x17, x15, 1944, x18)

inst_1260:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x82600000; valaddr_reg:x16; val_offset:1952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1952, x17, x15, 1952, x18)

inst_1261:
// fs1 == 1 and fe1 == 0x04 and fm1 == 0x3fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x823fffff; op2val:0x80800000; valaddr_reg:x16; val_offset:1960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1960, x17, x15, 1960, x18)

inst_1262:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x823fffff; valaddr_reg:x16; val_offset:1968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1968, x17, x15, 1968, x18)

inst_1263:
// fs1 == 1 and fe1 == 0x04 and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x82400000; op2val:0x80800000; valaddr_reg:x16; val_offset:1976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1976, x17, x15, 1976, x18)

inst_1264:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x82400000; valaddr_reg:x16; val_offset:1984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1984, x17, x15, 1984, x18)

inst_1265:
// fs1 == 1 and fe1 == 0x04 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x827fffff; op2val:0x80800000; valaddr_reg:x16; val_offset:1992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1992, x17, x15, 1992, x18)

inst_1266:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x04 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x827fffff; valaddr_reg:x16; val_offset:2000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2000, x17, x15, 2000, x18)

inst_1267:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81800001; op2val:0x80800000; valaddr_reg:x16; val_offset:2008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2008, x17, x15, 2008, x18)

inst_1268:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x81800001; valaddr_reg:x16; val_offset:2016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2016, x17, x15, 2016, x18)

inst_1269:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81800000; op2val:0x80800000; valaddr_reg:x16; val_offset:2024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_6)

inst_1270:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x81800000; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1271:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7ffffe and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81fffffe; op2val:0x80800000; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 8, x17, x15, 8, x18)

inst_1272:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x81fffffe; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 16, x17, x15, 16, x18)

inst_1273:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x000003 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81800003; op2val:0x80800000; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 24, x17, x15, 24, x18)

inst_1274:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x81800003; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 32, x17, x15, 32, x18)

inst_1275:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7ffffc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81fffffc; op2val:0x80800000; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 40, x17, x15, 40, x18)

inst_1276:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x81fffffc; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_1277:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x000007 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81800007; op2val:0x80800000; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 56, x17, x15, 56, x18)

inst_1278:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x81800007; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 64, x17, x15, 64, x18)

inst_1279:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7ffff8 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81fffff8; op2val:0x80800000; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 72, x17, x15, 72, x18)

inst_1280:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x81fffff8; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_1281:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x00000f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8180000f; op2val:0x80800000; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 88, x17, x15, 88, x18)

inst_1282:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x8180000f; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 96, x17, x15, 96, x18)

inst_1283:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7ffff0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81fffff0; op2val:0x80800000; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 104, x17, x15, 104, x18)

inst_1284:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x81fffff0; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 112, x17, x15, 112, x18)

inst_1285:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x00001f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8180001f; op2val:0x80800000; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 120, x17, x15, 120, x18)

inst_1286:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x8180001f; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_1287:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7fffe0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81ffffe0; op2val:0x80800000; valaddr_reg:x16; val_offset:136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 136, x17, x15, 136, x18)

inst_1288:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x81ffffe0; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 144, x17, x15, 144, x18)

inst_1289:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8180003f; op2val:0x80800000; valaddr_reg:x16; val_offset:152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 152, x17, x15, 152, x18)

inst_1290:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x8180003f; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_1291:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7fffc0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81ffffc0; op2val:0x80800000; valaddr_reg:x16; val_offset:168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 168, x17, x15, 168, x18)

inst_1292:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x81ffffc0; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 176, x17, x15, 176, x18)

inst_1293:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x00007f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8180007f; op2val:0x80800000; valaddr_reg:x16; val_offset:184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 184, x17, x15, 184, x18)

inst_1294:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x8180007f; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 192, x17, x15, 192, x18)

inst_1295:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7fff80 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81ffff80; op2val:0x80800000; valaddr_reg:x16; val_offset:200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 200, x17, x15, 200, x18)

inst_1296:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x81ffff80; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_1297:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x0000ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x818000ff; op2val:0x80800000; valaddr_reg:x16; val_offset:216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 216, x17, x15, 216, x18)

inst_1298:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x818000ff; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 224, x17, x15, 224, x18)

inst_1299:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7fff00 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81ffff00; op2val:0x80800000; valaddr_reg:x16; val_offset:232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 232, x17, x15, 232, x18)

inst_1300:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x81ffff00; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_1301:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x0001ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x818001ff; op2val:0x80800000; valaddr_reg:x16; val_offset:248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 248, x17, x15, 248, x18)

inst_1302:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x818001ff; valaddr_reg:x16; val_offset:256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 256, x17, x15, 256, x18)

inst_1303:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7ffe00 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81fffe00; op2val:0x80800000; valaddr_reg:x16; val_offset:264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 264, x17, x15, 264, x18)

inst_1304:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x81fffe00; valaddr_reg:x16; val_offset:272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 272, x17, x15, 272, x18)

inst_1305:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x0003ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x818003ff; op2val:0x80800000; valaddr_reg:x16; val_offset:280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 280, x17, x15, 280, x18)

inst_1306:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x818003ff; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_1307:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7ffc00 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81fffc00; op2val:0x80800000; valaddr_reg:x16; val_offset:296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 296, x17, x15, 296, x18)

inst_1308:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x81fffc00; valaddr_reg:x16; val_offset:304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 304, x17, x15, 304, x18)

inst_1309:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x0007ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x818007ff; op2val:0x80800000; valaddr_reg:x16; val_offset:312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 312, x17, x15, 312, x18)

inst_1310:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x818007ff; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_1311:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7ff800 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81fff800; op2val:0x80800000; valaddr_reg:x16; val_offset:328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 328, x17, x15, 328, x18)

inst_1312:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x81fff800; valaddr_reg:x16; val_offset:336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 336, x17, x15, 336, x18)

inst_1313:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x000fff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81800fff; op2val:0x80800000; valaddr_reg:x16; val_offset:344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 344, x17, x15, 344, x18)

inst_1314:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x81800fff; valaddr_reg:x16; val_offset:352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 352, x17, x15, 352, x18)

inst_1315:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7ff000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81fff000; op2val:0x80800000; valaddr_reg:x16; val_offset:360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 360, x17, x15, 360, x18)

inst_1316:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x81fff000; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_1317:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x001fff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81801fff; op2val:0x80800000; valaddr_reg:x16; val_offset:376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 376, x17, x15, 376, x18)

inst_1318:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x81801fff; valaddr_reg:x16; val_offset:384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 384, x17, x15, 384, x18)

inst_1319:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7fe000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81ffe000; op2val:0x80800000; valaddr_reg:x16; val_offset:392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 392, x17, x15, 392, x18)

inst_1320:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x81ffe000; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_1321:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x003fff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81803fff; op2val:0x80800000; valaddr_reg:x16; val_offset:408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 408, x17, x15, 408, x18)

inst_1322:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x81803fff; valaddr_reg:x16; val_offset:416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 416, x17, x15, 416, x18)

inst_1323:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7fc000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81ffc000; op2val:0x80800000; valaddr_reg:x16; val_offset:424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 424, x17, x15, 424, x18)

inst_1324:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x81ffc000; valaddr_reg:x16; val_offset:432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 432, x17, x15, 432, x18)

inst_1325:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x007fff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81807fff; op2val:0x80800000; valaddr_reg:x16; val_offset:440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 440, x17, x15, 440, x18)

inst_1326:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x81807fff; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_1327:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7f8000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81ff8000; op2val:0x80800000; valaddr_reg:x16; val_offset:456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 456, x17, x15, 456, x18)

inst_1328:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x81ff8000; valaddr_reg:x16; val_offset:464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 464, x17, x15, 464, x18)

inst_1329:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x00ffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8180ffff; op2val:0x80800000; valaddr_reg:x16; val_offset:472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 472, x17, x15, 472, x18)

inst_1330:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x8180ffff; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_1331:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7f0000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81ff0000; op2val:0x80800000; valaddr_reg:x16; val_offset:488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 488, x17, x15, 488, x18)

inst_1332:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x81ff0000; valaddr_reg:x16; val_offset:496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 496, x17, x15, 496, x18)

inst_1333:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x01ffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8181ffff; op2val:0x80800000; valaddr_reg:x16; val_offset:504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 504, x17, x15, 504, x18)

inst_1334:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x8181ffff; valaddr_reg:x16; val_offset:512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 512, x17, x15, 512, x18)

inst_1335:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7e0000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81fe0000; op2val:0x80800000; valaddr_reg:x16; val_offset:520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 520, x17, x15, 520, x18)

inst_1336:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x81fe0000; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_1337:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x03ffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8183ffff; op2val:0x80800000; valaddr_reg:x16; val_offset:536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 536, x17, x15, 536, x18)

inst_1338:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x8183ffff; valaddr_reg:x16; val_offset:544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 544, x17, x15, 544, x18)

inst_1339:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7c0000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81fc0000; op2val:0x80800000; valaddr_reg:x16; val_offset:552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 552, x17, x15, 552, x18)

inst_1340:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x81fc0000; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_1341:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x07ffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8187ffff; op2val:0x80800000; valaddr_reg:x16; val_offset:568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 568, x17, x15, 568, x18)

inst_1342:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x8187ffff; valaddr_reg:x16; val_offset:576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 576, x17, x15, 576, x18)

inst_1343:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x780000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81f80000; op2val:0x80800000; valaddr_reg:x16; val_offset:584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 584, x17, x15, 584, x18)

inst_1344:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x81f80000; valaddr_reg:x16; val_offset:592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 592, x17, x15, 592, x18)

inst_1345:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x0fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x818fffff; op2val:0x80800000; valaddr_reg:x16; val_offset:600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 600, x17, x15, 600, x18)

inst_1346:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x818fffff; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 608, x17, x15, 608, x18)

inst_1347:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x700000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81f00000; op2val:0x80800000; valaddr_reg:x16; val_offset:616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 616, x17, x15, 616, x18)

inst_1348:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x81f00000; valaddr_reg:x16; val_offset:624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 624, x17, x15, 624, x18)

inst_1349:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x1fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x819fffff; op2val:0x80800000; valaddr_reg:x16; val_offset:632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 632, x17, x15, 632, x18)

inst_1350:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x819fffff; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_1351:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x600000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81e00000; op2val:0x80800000; valaddr_reg:x16; val_offset:648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 648, x17, x15, 648, x18)

inst_1352:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x81e00000; valaddr_reg:x16; val_offset:656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 656, x17, x15, 656, x18)

inst_1353:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x3fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81bfffff; op2val:0x80800000; valaddr_reg:x16; val_offset:664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 664, x17, x15, 664, x18)

inst_1354:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x81bfffff; valaddr_reg:x16; val_offset:672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 672, x17, x15, 672, x18)

inst_1355:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81c00000; op2val:0x80800000; valaddr_reg:x16; val_offset:680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 680, x17, x15, 680, x18)

inst_1356:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x81c00000; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 688, x17, x15, 688, x18)

inst_1357:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81ffffff; op2val:0x80800000; valaddr_reg:x16; val_offset:696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 696, x17, x15, 696, x18)

inst_1358:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x81ffffff; valaddr_reg:x16; val_offset:704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 704, x17, x15, 704, x18)

inst_1359:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81000001; op2val:0x80800000; valaddr_reg:x16; val_offset:712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 712, x17, x15, 712, x18)

inst_1360:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x81000001; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_1361:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81000000; op2val:0x80800000; valaddr_reg:x16; val_offset:728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 728, x17, x15, 728, x18)

inst_1362:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x81000000; valaddr_reg:x16; val_offset:736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 736, x17, x15, 736, x18)

inst_1363:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7ffffe and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817ffffe; op2val:0x80800000; valaddr_reg:x16; val_offset:744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 744, x17, x15, 744, x18)

inst_1364:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x817ffffe; valaddr_reg:x16; val_offset:752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 752, x17, x15, 752, x18)

inst_1365:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x000003 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81000003; op2val:0x80800000; valaddr_reg:x16; val_offset:760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 760, x17, x15, 760, x18)

inst_1366:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x81000003; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 768, x17, x15, 768, x18)

inst_1367:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7ffffc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817ffffc; op2val:0x80800000; valaddr_reg:x16; val_offset:776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 776, x17, x15, 776, x18)

inst_1368:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x817ffffc; valaddr_reg:x16; val_offset:784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 784, x17, x15, 784, x18)

inst_1369:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x000007 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81000007; op2val:0x80800000; valaddr_reg:x16; val_offset:792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 792, x17, x15, 792, x18)

inst_1370:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x81000007; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_1371:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7ffff8 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817ffff8; op2val:0x80800000; valaddr_reg:x16; val_offset:808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 808, x17, x15, 808, x18)

inst_1372:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x817ffff8; valaddr_reg:x16; val_offset:816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 816, x17, x15, 816, x18)

inst_1373:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x00000f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8100000f; op2val:0x80800000; valaddr_reg:x16; val_offset:824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 824, x17, x15, 824, x18)

inst_1374:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x8100000f; valaddr_reg:x16; val_offset:832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 832, x17, x15, 832, x18)

inst_1375:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7ffff0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817ffff0; op2val:0x80800000; valaddr_reg:x16; val_offset:840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 840, x17, x15, 840, x18)

inst_1376:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x817ffff0; valaddr_reg:x16; val_offset:848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 848, x17, x15, 848, x18)

inst_1377:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x00001f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8100001f; op2val:0x80800000; valaddr_reg:x16; val_offset:856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 856, x17, x15, 856, x18)

inst_1378:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x8100001f; valaddr_reg:x16; val_offset:864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 864, x17, x15, 864, x18)

inst_1379:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7fffe0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817fffe0; op2val:0x80800000; valaddr_reg:x16; val_offset:872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 872, x17, x15, 872, x18)

inst_1380:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x817fffe0; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 880, x17, x15, 880, x18)

inst_1381:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8100003f; op2val:0x80800000; valaddr_reg:x16; val_offset:888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 888, x17, x15, 888, x18)

inst_1382:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x8100003f; valaddr_reg:x16; val_offset:896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 896, x17, x15, 896, x18)

inst_1383:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7fffc0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817fffc0; op2val:0x80800000; valaddr_reg:x16; val_offset:904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 904, x17, x15, 904, x18)

inst_1384:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x817fffc0; valaddr_reg:x16; val_offset:912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 912, x17, x15, 912, x18)

inst_1385:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x00007f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8100007f; op2val:0x80800000; valaddr_reg:x16; val_offset:920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 920, x17, x15, 920, x18)

inst_1386:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x8100007f; valaddr_reg:x16; val_offset:928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 928, x17, x15, 928, x18)

inst_1387:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7fff80 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817fff80; op2val:0x80800000; valaddr_reg:x16; val_offset:936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 936, x17, x15, 936, x18)

inst_1388:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x817fff80; valaddr_reg:x16; val_offset:944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 944, x17, x15, 944, x18)

inst_1389:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x0000ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x810000ff; op2val:0x80800000; valaddr_reg:x16; val_offset:952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 952, x17, x15, 952, x18)

inst_1390:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x810000ff; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 960, x17, x15, 960, x18)

inst_1391:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7fff00 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817fff00; op2val:0x80800000; valaddr_reg:x16; val_offset:968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 968, x17, x15, 968, x18)

inst_1392:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x817fff00; valaddr_reg:x16; val_offset:976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 976, x17, x15, 976, x18)

inst_1393:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x0001ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x810001ff; op2val:0x80800000; valaddr_reg:x16; val_offset:984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 984, x17, x15, 984, x18)

inst_1394:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x810001ff; valaddr_reg:x16; val_offset:992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 992, x17, x15, 992, x18)

inst_1395:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7ffe00 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817ffe00; op2val:0x80800000; valaddr_reg:x16; val_offset:1000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1000, x17, x15, 1000, x18)

inst_1396:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x817ffe00; valaddr_reg:x16; val_offset:1008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1008, x17, x15, 1008, x18)

inst_1397:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x0003ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x810003ff; op2val:0x80800000; valaddr_reg:x16; val_offset:1016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1016, x17, x15, 1016, x18)

inst_1398:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x810003ff; valaddr_reg:x16; val_offset:1024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1024, x17, x15, 1024, x18)

inst_1399:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7ffc00 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817ffc00; op2val:0x80800000; valaddr_reg:x16; val_offset:1032; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1032, x17, x15, 1032, x18)

inst_1400:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x817ffc00; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1040, x17, x15, 1040, x18)

inst_1401:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x0007ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x810007ff; op2val:0x80800000; valaddr_reg:x16; val_offset:1048; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1048, x17, x15, 1048, x18)

inst_1402:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x810007ff; valaddr_reg:x16; val_offset:1056; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1056, x17, x15, 1056, x18)

inst_1403:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7ff800 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817ff800; op2val:0x80800000; valaddr_reg:x16; val_offset:1064; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1064, x17, x15, 1064, x18)

inst_1404:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x817ff800; valaddr_reg:x16; val_offset:1072; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1072, x17, x15, 1072, x18)

inst_1405:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x000fff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81000fff; op2val:0x80800000; valaddr_reg:x16; val_offset:1080; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1080, x17, x15, 1080, x18)

inst_1406:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x81000fff; valaddr_reg:x16; val_offset:1088; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1088, x17, x15, 1088, x18)

inst_1407:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7ff000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817ff000; op2val:0x80800000; valaddr_reg:x16; val_offset:1096; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1096, x17, x15, 1096, x18)

inst_1408:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x817ff000; valaddr_reg:x16; val_offset:1104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1104, x17, x15, 1104, x18)

inst_1409:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x001fff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81001fff; op2val:0x80800000; valaddr_reg:x16; val_offset:1112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1112, x17, x15, 1112, x18)

inst_1410:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x81001fff; valaddr_reg:x16; val_offset:1120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1120, x17, x15, 1120, x18)

inst_1411:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7fe000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817fe000; op2val:0x80800000; valaddr_reg:x16; val_offset:1128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1128, x17, x15, 1128, x18)

inst_1412:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x817fe000; valaddr_reg:x16; val_offset:1136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1136, x17, x15, 1136, x18)

inst_1413:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x003fff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81003fff; op2val:0x80800000; valaddr_reg:x16; val_offset:1144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1144, x17, x15, 1144, x18)

inst_1414:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x81003fff; valaddr_reg:x16; val_offset:1152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1152, x17, x15, 1152, x18)

inst_1415:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7fc000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817fc000; op2val:0x80800000; valaddr_reg:x16; val_offset:1160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1160, x17, x15, 1160, x18)

inst_1416:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x817fc000; valaddr_reg:x16; val_offset:1168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1168, x17, x15, 1168, x18)

inst_1417:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x007fff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81007fff; op2val:0x80800000; valaddr_reg:x16; val_offset:1176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1176, x17, x15, 1176, x18)

inst_1418:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x81007fff; valaddr_reg:x16; val_offset:1184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1184, x17, x15, 1184, x18)

inst_1419:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7f8000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817f8000; op2val:0x80800000; valaddr_reg:x16; val_offset:1192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1192, x17, x15, 1192, x18)

inst_1420:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x817f8000; valaddr_reg:x16; val_offset:1200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1200, x17, x15, 1200, x18)

inst_1421:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x00ffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8100ffff; op2val:0x80800000; valaddr_reg:x16; val_offset:1208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1208, x17, x15, 1208, x18)

inst_1422:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x8100ffff; valaddr_reg:x16; val_offset:1216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1216, x17, x15, 1216, x18)

inst_1423:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7f0000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817f0000; op2val:0x80800000; valaddr_reg:x16; val_offset:1224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1224, x17, x15, 1224, x18)

inst_1424:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x817f0000; valaddr_reg:x16; val_offset:1232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1232, x17, x15, 1232, x18)

inst_1425:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x01ffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8101ffff; op2val:0x80800000; valaddr_reg:x16; val_offset:1240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1240, x17, x15, 1240, x18)

inst_1426:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x8101ffff; valaddr_reg:x16; val_offset:1248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1248, x17, x15, 1248, x18)

inst_1427:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7e0000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817e0000; op2val:0x80800000; valaddr_reg:x16; val_offset:1256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1256, x17, x15, 1256, x18)

inst_1428:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x817e0000; valaddr_reg:x16; val_offset:1264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1264, x17, x15, 1264, x18)

inst_1429:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x03ffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8103ffff; op2val:0x80800000; valaddr_reg:x16; val_offset:1272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1272, x17, x15, 1272, x18)

inst_1430:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x8103ffff; valaddr_reg:x16; val_offset:1280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1280, x17, x15, 1280, x18)

inst_1431:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7c0000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817c0000; op2val:0x80800000; valaddr_reg:x16; val_offset:1288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1288, x17, x15, 1288, x18)

inst_1432:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x817c0000; valaddr_reg:x16; val_offset:1296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1296, x17, x15, 1296, x18)

inst_1433:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x07ffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8107ffff; op2val:0x80800000; valaddr_reg:x16; val_offset:1304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1304, x17, x15, 1304, x18)

inst_1434:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x8107ffff; valaddr_reg:x16; val_offset:1312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1312, x17, x15, 1312, x18)

inst_1435:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x780000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81780000; op2val:0x80800000; valaddr_reg:x16; val_offset:1320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1320, x17, x15, 1320, x18)

inst_1436:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x81780000; valaddr_reg:x16; val_offset:1328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1328, x17, x15, 1328, x18)

inst_1437:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x0fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x810fffff; op2val:0x80800000; valaddr_reg:x16; val_offset:1336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1336, x17, x15, 1336, x18)

inst_1438:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x810fffff; valaddr_reg:x16; val_offset:1344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1344, x17, x15, 1344, x18)

inst_1439:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x700000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81700000; op2val:0x80800000; valaddr_reg:x16; val_offset:1352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1352, x17, x15, 1352, x18)

inst_1440:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x81700000; valaddr_reg:x16; val_offset:1360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1360, x17, x15, 1360, x18)

inst_1441:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x1fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x811fffff; op2val:0x80800000; valaddr_reg:x16; val_offset:1368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1368, x17, x15, 1368, x18)

inst_1442:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x811fffff; valaddr_reg:x16; val_offset:1376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1376, x17, x15, 1376, x18)

inst_1443:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x600000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81600000; op2val:0x80800000; valaddr_reg:x16; val_offset:1384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1384, x17, x15, 1384, x18)

inst_1444:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x81600000; valaddr_reg:x16; val_offset:1392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1392, x17, x15, 1392, x18)

inst_1445:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x3fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x813fffff; op2val:0x80800000; valaddr_reg:x16; val_offset:1400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1400, x17, x15, 1400, x18)

inst_1446:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x813fffff; valaddr_reg:x16; val_offset:1408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1408, x17, x15, 1408, x18)

inst_1447:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81400000; op2val:0x80800000; valaddr_reg:x16; val_offset:1416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1416, x17, x15, 1416, x18)

inst_1448:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x81400000; valaddr_reg:x16; val_offset:1424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1424, x17, x15, 1424, x18)

inst_1449:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817fffff; op2val:0x80800000; valaddr_reg:x16; val_offset:1432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1432, x17, x15, 1432, x18)

inst_1450:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x817fffff; valaddr_reg:x16; val_offset:1440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1440, x17, x15, 1440, x18)

inst_1451:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x80800000; valaddr_reg:x16; val_offset:1448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1448, x17, x15, 1448, x18)

inst_1452:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x00000f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8080000f; op2val:0x80800000; valaddr_reg:x16; val_offset:1456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1456, x17, x15, 1456, x18)

inst_1453:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x8080000f; valaddr_reg:x16; val_offset:1464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1464, x17, x15, 1464, x18)

inst_1454:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7ffff0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80fffff0; op2val:0x80800000; valaddr_reg:x16; val_offset:1472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1472, x17, x15, 1472, x18)

inst_1455:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x80fffff0; valaddr_reg:x16; val_offset:1480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1480, x17, x15, 1480, x18)

inst_1456:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x00001f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8080001f; op2val:0x80800000; valaddr_reg:x16; val_offset:1488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1488, x17, x15, 1488, x18)

inst_1457:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x8080001f; valaddr_reg:x16; val_offset:1496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1496, x17, x15, 1496, x18)

inst_1458:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7fffe0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80ffffe0; op2val:0x80800000; valaddr_reg:x16; val_offset:1504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1504, x17, x15, 1504, x18)

inst_1459:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x80ffffe0; valaddr_reg:x16; val_offset:1512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1512, x17, x15, 1512, x18)

inst_1460:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8080003f; op2val:0x80800000; valaddr_reg:x16; val_offset:1520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1520, x17, x15, 1520, x18)

inst_1461:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x8080003f; valaddr_reg:x16; val_offset:1528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1528, x17, x15, 1528, x18)

inst_1462:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7fffc0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80ffffc0; op2val:0x80800000; valaddr_reg:x16; val_offset:1536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1536, x17, x15, 1536, x18)

inst_1463:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x80ffffc0; valaddr_reg:x16; val_offset:1544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1544, x17, x15, 1544, x18)

inst_1464:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x00007f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8080007f; op2val:0x80800000; valaddr_reg:x16; val_offset:1552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1552, x17, x15, 1552, x18)

inst_1465:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x8080007f; valaddr_reg:x16; val_offset:1560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1560, x17, x15, 1560, x18)

inst_1466:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7fff80 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80ffff80; op2val:0x80800000; valaddr_reg:x16; val_offset:1568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1568, x17, x15, 1568, x18)

inst_1467:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x80ffff80; valaddr_reg:x16; val_offset:1576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1576, x17, x15, 1576, x18)

inst_1468:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x0000ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x808000ff; op2val:0x80800000; valaddr_reg:x16; val_offset:1584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1584, x17, x15, 1584, x18)

inst_1469:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x808000ff; valaddr_reg:x16; val_offset:1592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1592, x17, x15, 1592, x18)

inst_1470:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7fff00 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80ffff00; op2val:0x80800000; valaddr_reg:x16; val_offset:1600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1600, x17, x15, 1600, x18)

inst_1471:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x80ffff00; valaddr_reg:x16; val_offset:1608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1608, x17, x15, 1608, x18)

inst_1472:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x0001ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x808001ff; op2val:0x80800000; valaddr_reg:x16; val_offset:1616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1616, x17, x15, 1616, x18)

inst_1473:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x808001ff; valaddr_reg:x16; val_offset:1624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1624, x17, x15, 1624, x18)

inst_1474:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7ffe00 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80fffe00; op2val:0x80800000; valaddr_reg:x16; val_offset:1632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1632, x17, x15, 1632, x18)

inst_1475:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x80fffe00; valaddr_reg:x16; val_offset:1640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1640, x17, x15, 1640, x18)

inst_1476:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x0003ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x808003ff; op2val:0x80800000; valaddr_reg:x16; val_offset:1648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1648, x17, x15, 1648, x18)

inst_1477:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x808003ff; valaddr_reg:x16; val_offset:1656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1656, x17, x15, 1656, x18)

inst_1478:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7ffc00 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80fffc00; op2val:0x80800000; valaddr_reg:x16; val_offset:1664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1664, x17, x15, 1664, x18)

inst_1479:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x80fffc00; valaddr_reg:x16; val_offset:1672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1672, x17, x15, 1672, x18)

inst_1480:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x0007ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x808007ff; op2val:0x80800000; valaddr_reg:x16; val_offset:1680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1680, x17, x15, 1680, x18)

inst_1481:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x808007ff; valaddr_reg:x16; val_offset:1688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1688, x17, x15, 1688, x18)

inst_1482:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7ff800 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80fff800; op2val:0x80800000; valaddr_reg:x16; val_offset:1696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1696, x17, x15, 1696, x18)

inst_1483:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x80fff800; valaddr_reg:x16; val_offset:1704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1704, x17, x15, 1704, x18)

inst_1484:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000fff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800fff; op2val:0x80800000; valaddr_reg:x16; val_offset:1712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1712, x17, x15, 1712, x18)

inst_1485:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x80800fff; valaddr_reg:x16; val_offset:1720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1720, x17, x15, 1720, x18)

inst_1486:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7ff000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80fff000; op2val:0x80800000; valaddr_reg:x16; val_offset:1728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1728, x17, x15, 1728, x18)

inst_1487:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x80fff000; valaddr_reg:x16; val_offset:1736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1736, x17, x15, 1736, x18)

inst_1488:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x001fff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80801fff; op2val:0x80800000; valaddr_reg:x16; val_offset:1744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1744, x17, x15, 1744, x18)

inst_1489:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x80801fff; valaddr_reg:x16; val_offset:1752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1752, x17, x15, 1752, x18)

inst_1490:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7fe000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80ffe000; op2val:0x80800000; valaddr_reg:x16; val_offset:1760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1760, x17, x15, 1760, x18)

inst_1491:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x80ffe000; valaddr_reg:x16; val_offset:1768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1768, x17, x15, 1768, x18)

inst_1492:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x003fff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80803fff; op2val:0x80800000; valaddr_reg:x16; val_offset:1776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1776, x17, x15, 1776, x18)

inst_1493:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x80803fff; valaddr_reg:x16; val_offset:1784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1784, x17, x15, 1784, x18)

inst_1494:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7fc000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80ffc000; op2val:0x80800000; valaddr_reg:x16; val_offset:1792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1792, x17, x15, 1792, x18)

inst_1495:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x80ffc000; valaddr_reg:x16; val_offset:1800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1800, x17, x15, 1800, x18)

inst_1496:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x007fff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80807fff; op2val:0x80800000; valaddr_reg:x16; val_offset:1808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1808, x17, x15, 1808, x18)

inst_1497:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x80807fff; valaddr_reg:x16; val_offset:1816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1816, x17, x15, 1816, x18)

inst_1498:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7f8000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80ff8000; op2val:0x80800000; valaddr_reg:x16; val_offset:1824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1824, x17, x15, 1824, x18)

inst_1499:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x80ff8000; valaddr_reg:x16; val_offset:1832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1832, x17, x15, 1832, x18)

inst_1500:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x00ffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8080ffff; op2val:0x80800000; valaddr_reg:x16; val_offset:1840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1840, x17, x15, 1840, x18)

inst_1501:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x8080ffff; valaddr_reg:x16; val_offset:1848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1848, x17, x15, 1848, x18)

inst_1502:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7f0000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80ff0000; op2val:0x80800000; valaddr_reg:x16; val_offset:1856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1856, x17, x15, 1856, x18)

inst_1503:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x80ff0000; valaddr_reg:x16; val_offset:1864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1864, x17, x15, 1864, x18)

inst_1504:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x01ffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8081ffff; op2val:0x80800000; valaddr_reg:x16; val_offset:1872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1872, x17, x15, 1872, x18)

inst_1505:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x8081ffff; valaddr_reg:x16; val_offset:1880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1880, x17, x15, 1880, x18)

inst_1506:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7e0000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80fe0000; op2val:0x80800000; valaddr_reg:x16; val_offset:1888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1888, x17, x15, 1888, x18)

inst_1507:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x80fe0000; valaddr_reg:x16; val_offset:1896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1896, x17, x15, 1896, x18)

inst_1508:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x03ffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8083ffff; op2val:0x80800000; valaddr_reg:x16; val_offset:1904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1904, x17, x15, 1904, x18)

inst_1509:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x8083ffff; valaddr_reg:x16; val_offset:1912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1912, x17, x15, 1912, x18)

inst_1510:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7c0000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80fc0000; op2val:0x80800000; valaddr_reg:x16; val_offset:1920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1920, x17, x15, 1920, x18)

inst_1511:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x80fc0000; valaddr_reg:x16; val_offset:1928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1928, x17, x15, 1928, x18)

inst_1512:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x07ffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8087ffff; op2val:0x80800000; valaddr_reg:x16; val_offset:1936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1936, x17, x15, 1936, x18)

inst_1513:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x8087ffff; valaddr_reg:x16; val_offset:1944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1944, x17, x15, 1944, x18)

inst_1514:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x780000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80f80000; op2val:0x80800000; valaddr_reg:x16; val_offset:1952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1952, x17, x15, 1952, x18)

inst_1515:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x80f80000; valaddr_reg:x16; val_offset:1960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1960, x17, x15, 1960, x18)

inst_1516:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x0fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x808fffff; op2val:0x80800000; valaddr_reg:x16; val_offset:1968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1968, x17, x15, 1968, x18)

inst_1517:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x808fffff; valaddr_reg:x16; val_offset:1976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1976, x17, x15, 1976, x18)

inst_1518:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x700000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80f00000; op2val:0x80800000; valaddr_reg:x16; val_offset:1984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1984, x17, x15, 1984, x18)

inst_1519:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x80f00000; valaddr_reg:x16; val_offset:1992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1992, x17, x15, 1992, x18)

inst_1520:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x1fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x809fffff; op2val:0x80800000; valaddr_reg:x16; val_offset:2000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2000, x17, x15, 2000, x18)

inst_1521:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x809fffff; valaddr_reg:x16; val_offset:2008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2008, x17, x15, 2008, x18)

inst_1522:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x600000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80e00000; op2val:0x80800000; valaddr_reg:x16; val_offset:2016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2016, x17, x15, 2016, x18)

inst_1523:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x80e00000; valaddr_reg:x16; val_offset:2024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_7)

inst_1524:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x3fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80bfffff; op2val:0x80800000; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1525:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x80bfffff; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 8, x17, x15, 8, x18)

inst_1526:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80c00000; op2val:0x80800000; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 16, x17, x15, 16, x18)

inst_1527:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x80c00000; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 24, x17, x15, 24, x18)

inst_1528:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80ffffff; op2val:0x80800000; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 32, x17, x15, 32, x18)

inst_1529:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x80ffffff; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 40, x17, x15, 40, x18)

inst_1530:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x80800000; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_1531:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x80000001; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 56, x17, x15, 56, x18)

inst_1532:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x80800000; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 64, x17, x15, 64, x18)

inst_1533:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x80000000; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 72, x17, x15, 72, x18)

inst_1534:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ffffe and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807ffffe; op2val:0x80800000; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_1535:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x807ffffe; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 88, x17, x15, 88, x18)

inst_1536:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000003 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000003; op2val:0x80800000; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 96, x17, x15, 96, x18)

inst_1537:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x80000003; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 104, x17, x15, 104, x18)

inst_1538:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ffffc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807ffffc; op2val:0x80800000; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 112, x17, x15, 112, x18)

inst_1539:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x807ffffc; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 120, x17, x15, 120, x18)

inst_1540:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000007 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000007; op2val:0x80800000; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_1541:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x80000007; valaddr_reg:x16; val_offset:136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 136, x17, x15, 136, x18)

inst_1542:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ffff8 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807ffff8; op2val:0x80800000; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 144, x17, x15, 144, x18)

inst_1543:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x807ffff8; valaddr_reg:x16; val_offset:152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 152, x17, x15, 152, x18)

inst_1544:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x00000f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8000000f; op2val:0x80800000; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_1545:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x8000000f; valaddr_reg:x16; val_offset:168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 168, x17, x15, 168, x18)

inst_1546:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ffff0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807ffff0; op2val:0x80800000; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 176, x17, x15, 176, x18)

inst_1547:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x807ffff0; valaddr_reg:x16; val_offset:184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 184, x17, x15, 184, x18)

inst_1548:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x00001f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8000001f; op2val:0x80800000; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 192, x17, x15, 192, x18)

inst_1549:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x8000001f; valaddr_reg:x16; val_offset:200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 200, x17, x15, 200, x18)

inst_1550:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffe0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffe0; op2val:0x80800000; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_1551:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x807fffe0; valaddr_reg:x16; val_offset:216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 216, x17, x15, 216, x18)

inst_1552:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8000003f; op2val:0x80800000; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 224, x17, x15, 224, x18)

inst_1553:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x8000003f; valaddr_reg:x16; val_offset:232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 232, x17, x15, 232, x18)

inst_1554:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffc0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffc0; op2val:0x80800000; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_1555:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x807fffc0; valaddr_reg:x16; val_offset:248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 248, x17, x15, 248, x18)

inst_1556:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x00007f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8000007f; op2val:0x80800000; valaddr_reg:x16; val_offset:256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 256, x17, x15, 256, x18)

inst_1557:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x8000007f; valaddr_reg:x16; val_offset:264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 264, x17, x15, 264, x18)

inst_1558:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fff80 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fff80; op2val:0x80800000; valaddr_reg:x16; val_offset:272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 272, x17, x15, 272, x18)

inst_1559:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x807fff80; valaddr_reg:x16; val_offset:280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 280, x17, x15, 280, x18)

inst_1560:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0000ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000ff; op2val:0x80800000; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_1561:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x800000ff; valaddr_reg:x16; val_offset:296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 296, x17, x15, 296, x18)

inst_1562:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fff00 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fff00; op2val:0x80800000; valaddr_reg:x16; val_offset:304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 304, x17, x15, 304, x18)

inst_1563:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x807fff00; valaddr_reg:x16; val_offset:312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 312, x17, x15, 312, x18)

inst_1564:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0001ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800001ff; op2val:0x80800000; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_1565:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x800001ff; valaddr_reg:x16; val_offset:328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 328, x17, x15, 328, x18)

inst_1566:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ffe00 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807ffe00; op2val:0x80800000; valaddr_reg:x16; val_offset:336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 336, x17, x15, 336, x18)

inst_1567:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x807ffe00; valaddr_reg:x16; val_offset:344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 344, x17, x15, 344, x18)

inst_1568:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0003ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800003ff; op2val:0x80800000; valaddr_reg:x16; val_offset:352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 352, x17, x15, 352, x18)

inst_1569:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x800003ff; valaddr_reg:x16; val_offset:360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 360, x17, x15, 360, x18)

inst_1570:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ffc00 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807ffc00; op2val:0x80800000; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_1571:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x807ffc00; valaddr_reg:x16; val_offset:376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 376, x17, x15, 376, x18)

inst_1572:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0007ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800007ff; op2val:0x80800000; valaddr_reg:x16; val_offset:384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 384, x17, x15, 384, x18)

inst_1573:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x800007ff; valaddr_reg:x16; val_offset:392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 392, x17, x15, 392, x18)

inst_1574:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ff800 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807ff800; op2val:0x80800000; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_1575:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x807ff800; valaddr_reg:x16; val_offset:408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 408, x17, x15, 408, x18)

inst_1576:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000fff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000fff; op2val:0x80800000; valaddr_reg:x16; val_offset:416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 416, x17, x15, 416, x18)

inst_1577:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x80000fff; valaddr_reg:x16; val_offset:424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 424, x17, x15, 424, x18)

inst_1578:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ff000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807ff000; op2val:0x80800000; valaddr_reg:x16; val_offset:432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 432, x17, x15, 432, x18)

inst_1579:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x807ff000; valaddr_reg:x16; val_offset:440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 440, x17, x15, 440, x18)

inst_1580:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x001fff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80001fff; op2val:0x80800000; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_1581:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x80001fff; valaddr_reg:x16; val_offset:456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 456, x17, x15, 456, x18)

inst_1582:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fe000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fe000; op2val:0x80800000; valaddr_reg:x16; val_offset:464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 464, x17, x15, 464, x18)

inst_1583:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x807fe000; valaddr_reg:x16; val_offset:472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 472, x17, x15, 472, x18)

inst_1584:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x003fff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80003fff; op2val:0x80800000; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_1585:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x80003fff; valaddr_reg:x16; val_offset:488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 488, x17, x15, 488, x18)

inst_1586:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fc000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fc000; op2val:0x80800000; valaddr_reg:x16; val_offset:496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 496, x17, x15, 496, x18)

inst_1587:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x807fc000; valaddr_reg:x16; val_offset:504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 504, x17, x15, 504, x18)

inst_1588:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x007fff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80007fff; op2val:0x80800000; valaddr_reg:x16; val_offset:512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 512, x17, x15, 512, x18)

inst_1589:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x80007fff; valaddr_reg:x16; val_offset:520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 520, x17, x15, 520, x18)

inst_1590:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7f8000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807f8000; op2val:0x80800000; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_1591:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x807f8000; valaddr_reg:x16; val_offset:536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 536, x17, x15, 536, x18)

inst_1592:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x00ffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8000ffff; op2val:0x80800000; valaddr_reg:x16; val_offset:544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 544, x17, x15, 544, x18)

inst_1593:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x8000ffff; valaddr_reg:x16; val_offset:552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 552, x17, x15, 552, x18)

inst_1594:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7f0000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807f0000; op2val:0x80800000; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_1595:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x807f0000; valaddr_reg:x16; val_offset:568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 568, x17, x15, 568, x18)

inst_1596:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x01ffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8001ffff; op2val:0x80800000; valaddr_reg:x16; val_offset:576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 576, x17, x15, 576, x18)

inst_1597:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x8001ffff; valaddr_reg:x16; val_offset:584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 584, x17, x15, 584, x18)

inst_1598:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7e0000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807e0000; op2val:0x80800000; valaddr_reg:x16; val_offset:592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 592, x17, x15, 592, x18)

inst_1599:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x807e0000; valaddr_reg:x16; val_offset:600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 600, x17, x15, 600, x18)

inst_1600:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x03ffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8003ffff; op2val:0x80800000; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 608, x17, x15, 608, x18)

inst_1601:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x8003ffff; valaddr_reg:x16; val_offset:616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 616, x17, x15, 616, x18)

inst_1602:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7c0000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807c0000; op2val:0x80800000; valaddr_reg:x16; val_offset:624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 624, x17, x15, 624, x18)

inst_1603:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x807c0000; valaddr_reg:x16; val_offset:632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 632, x17, x15, 632, x18)

inst_1604:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x07ffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8007ffff; op2val:0x80800000; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_1605:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x8007ffff; valaddr_reg:x16; val_offset:648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 648, x17, x15, 648, x18)

inst_1606:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x780000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80780000; op2val:0x80800000; valaddr_reg:x16; val_offset:656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 656, x17, x15, 656, x18)

inst_1607:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x80780000; valaddr_reg:x16; val_offset:664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 664, x17, x15, 664, x18)

inst_1608:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800fffff; op2val:0x80800000; valaddr_reg:x16; val_offset:672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 672, x17, x15, 672, x18)

inst_1609:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x800fffff; valaddr_reg:x16; val_offset:680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 680, x17, x15, 680, x18)

inst_1610:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x700000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80700000; op2val:0x80800000; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 688, x17, x15, 688, x18)

inst_1611:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x80700000; valaddr_reg:x16; val_offset:696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 696, x17, x15, 696, x18)

inst_1612:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x1fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x801fffff; op2val:0x80800000; valaddr_reg:x16; val_offset:704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 704, x17, x15, 704, x18)

inst_1613:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x801fffff; valaddr_reg:x16; val_offset:712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 712, x17, x15, 712, x18)

inst_1614:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x600000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80600000; op2val:0x80800000; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_1615:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x80600000; valaddr_reg:x16; val_offset:728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 728, x17, x15, 728, x18)

inst_1616:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x3fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x803fffff; op2val:0x80800000; valaddr_reg:x16; val_offset:736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 736, x17, x15, 736, x18)

inst_1617:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x803fffff; valaddr_reg:x16; val_offset:744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 744, x17, x15, 744, x18)

inst_1618:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80400000; op2val:0x80800000; valaddr_reg:x16; val_offset:752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 752, x17, x15, 752, x18)

inst_1619:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x80400000; valaddr_reg:x16; val_offset:760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 760, x17, x15, 760, x18)

inst_1620:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x80800000; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 768, x17, x15, 768, x18)

inst_1621:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0x807fffff; valaddr_reg:x16; val_offset:776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 776, x17, x15, 776, x18)

inst_1622:
// fs1 == 1 and fe1 == 0xf0 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf8000001; op2val:0x80800000; valaddr_reg:x16; val_offset:784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 784, x17, x15, 784, x18)

inst_1623:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xf0 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0xf8000001; valaddr_reg:x16; val_offset:792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 792, x17, x15, 792, x18)

inst_1624:
// fs1 == 1 and fe1 == 0xf0 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf8000000; op2val:0x80800000; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_1625:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xf0 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0xf8000000; valaddr_reg:x16; val_offset:808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 808, x17, x15, 808, x18)

inst_1626:
// fs1 == 1 and fe1 == 0xf0 and fm1 == 0x7ffffe and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf87ffffe; op2val:0x80800000; valaddr_reg:x16; val_offset:816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 816, x17, x15, 816, x18)

inst_1627:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xf0 and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0xf87ffffe; valaddr_reg:x16; val_offset:824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 824, x17, x15, 824, x18)

inst_1628:
// fs1 == 1 and fe1 == 0xf0 and fm1 == 0x000003 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf8000003; op2val:0x80800000; valaddr_reg:x16; val_offset:832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 832, x17, x15, 832, x18)

inst_1629:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xf0 and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0xf8000003; valaddr_reg:x16; val_offset:840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 840, x17, x15, 840, x18)

inst_1630:
// fs1 == 1 and fe1 == 0xf0 and fm1 == 0x7ffffc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf87ffffc; op2val:0x80800000; valaddr_reg:x16; val_offset:848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 848, x17, x15, 848, x18)

inst_1631:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xf0 and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0xf87ffffc; valaddr_reg:x16; val_offset:856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 856, x17, x15, 856, x18)

inst_1632:
// fs1 == 1 and fe1 == 0xf0 and fm1 == 0x000007 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf8000007; op2val:0x80800000; valaddr_reg:x16; val_offset:864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 864, x17, x15, 864, x18)

inst_1633:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xf0 and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0xf8000007; valaddr_reg:x16; val_offset:872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 872, x17, x15, 872, x18)

inst_1634:
// fs1 == 1 and fe1 == 0xf0 and fm1 == 0x7ffff8 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf87ffff8; op2val:0x80800000; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 880, x17, x15, 880, x18)

inst_1635:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xf0 and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0xf87ffff8; valaddr_reg:x16; val_offset:888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 888, x17, x15, 888, x18)

inst_1636:
// fs1 == 1 and fe1 == 0xf0 and fm1 == 0x00000f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf800000f; op2val:0x80800000; valaddr_reg:x16; val_offset:896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 896, x17, x15, 896, x18)

inst_1637:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xf0 and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0xf800000f; valaddr_reg:x16; val_offset:904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 904, x17, x15, 904, x18)

inst_1638:
// fs1 == 1 and fe1 == 0xf0 and fm1 == 0x7ffff0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf87ffff0; op2val:0x80800000; valaddr_reg:x16; val_offset:912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 912, x17, x15, 912, x18)

inst_1639:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xf0 and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0xf87ffff0; valaddr_reg:x16; val_offset:920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 920, x17, x15, 920, x18)

inst_1640:
// fs1 == 1 and fe1 == 0xf0 and fm1 == 0x00001f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf800001f; op2val:0x80800000; valaddr_reg:x16; val_offset:928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 928, x17, x15, 928, x18)

inst_1641:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xf0 and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0xf800001f; valaddr_reg:x16; val_offset:936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 936, x17, x15, 936, x18)

inst_1642:
// fs1 == 1 and fe1 == 0xf0 and fm1 == 0x7fffe0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf87fffe0; op2val:0x80800000; valaddr_reg:x16; val_offset:944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 944, x17, x15, 944, x18)

inst_1643:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xf0 and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0xf87fffe0; valaddr_reg:x16; val_offset:952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 952, x17, x15, 952, x18)

inst_1644:
// fs1 == 1 and fe1 == 0xf0 and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf800003f; op2val:0x80800000; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 960, x17, x15, 960, x18)

inst_1645:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xf0 and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0xf800003f; valaddr_reg:x16; val_offset:968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 968, x17, x15, 968, x18)

inst_1646:
// fs1 == 1 and fe1 == 0xf0 and fm1 == 0x7fffc0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf87fffc0; op2val:0x80800000; valaddr_reg:x16; val_offset:976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 976, x17, x15, 976, x18)

inst_1647:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xf0 and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0xf87fffc0; valaddr_reg:x16; val_offset:984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 984, x17, x15, 984, x18)

inst_1648:
// fs1 == 1 and fe1 == 0xf0 and fm1 == 0x00007f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf800007f; op2val:0x80800000; valaddr_reg:x16; val_offset:992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 992, x17, x15, 992, x18)

inst_1649:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xf0 and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0xf800007f; valaddr_reg:x16; val_offset:1000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1000, x17, x15, 1000, x18)

inst_1650:
// fs1 == 1 and fe1 == 0xf0 and fm1 == 0x7fff80 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf87fff80; op2val:0x80800000; valaddr_reg:x16; val_offset:1008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1008, x17, x15, 1008, x18)

inst_1651:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xf0 and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0xf87fff80; valaddr_reg:x16; val_offset:1016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1016, x17, x15, 1016, x18)

inst_1652:
// fs1 == 1 and fe1 == 0xf0 and fm1 == 0x0000ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf80000ff; op2val:0x80800000; valaddr_reg:x16; val_offset:1024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1024, x17, x15, 1024, x18)

inst_1653:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xf0 and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0xf80000ff; valaddr_reg:x16; val_offset:1032; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1032, x17, x15, 1032, x18)

inst_1654:
// fs1 == 1 and fe1 == 0xf0 and fm1 == 0x7fff00 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf87fff00; op2val:0x80800000; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1040, x17, x15, 1040, x18)

inst_1655:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xf0 and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0xf87fff00; valaddr_reg:x16; val_offset:1048; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1048, x17, x15, 1048, x18)

inst_1656:
// fs1 == 1 and fe1 == 0xf0 and fm1 == 0x0001ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf80001ff; op2val:0x80800000; valaddr_reg:x16; val_offset:1056; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1056, x17, x15, 1056, x18)

inst_1657:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xf0 and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0xf80001ff; valaddr_reg:x16; val_offset:1064; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1064, x17, x15, 1064, x18)

inst_1658:
// fs1 == 1 and fe1 == 0xf0 and fm1 == 0x7ffe00 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf87ffe00; op2val:0x80800000; valaddr_reg:x16; val_offset:1072; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1072, x17, x15, 1072, x18)

inst_1659:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xf0 and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0xf87ffe00; valaddr_reg:x16; val_offset:1080; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1080, x17, x15, 1080, x18)

inst_1660:
// fs1 == 1 and fe1 == 0xf0 and fm1 == 0x0003ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf80003ff; op2val:0x80800000; valaddr_reg:x16; val_offset:1088; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1088, x17, x15, 1088, x18)

inst_1661:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xf0 and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0xf80003ff; valaddr_reg:x16; val_offset:1096; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1096, x17, x15, 1096, x18)

inst_1662:
// fs1 == 1 and fe1 == 0xf0 and fm1 == 0x7ffc00 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf87ffc00; op2val:0x80800000; valaddr_reg:x16; val_offset:1104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1104, x17, x15, 1104, x18)

inst_1663:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xf0 and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0xf87ffc00; valaddr_reg:x16; val_offset:1112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1112, x17, x15, 1112, x18)

inst_1664:
// fs1 == 1 and fe1 == 0xf0 and fm1 == 0x0007ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf80007ff; op2val:0x80800000; valaddr_reg:x16; val_offset:1120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1120, x17, x15, 1120, x18)

inst_1665:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xf0 and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0xf80007ff; valaddr_reg:x16; val_offset:1128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1128, x17, x15, 1128, x18)

inst_1666:
// fs1 == 1 and fe1 == 0xf0 and fm1 == 0x7ff800 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf87ff800; op2val:0x80800000; valaddr_reg:x16; val_offset:1136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1136, x17, x15, 1136, x18)

inst_1667:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xf0 and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0xf87ff800; valaddr_reg:x16; val_offset:1144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1144, x17, x15, 1144, x18)

inst_1668:
// fs1 == 1 and fe1 == 0xf0 and fm1 == 0x000fff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf8000fff; op2val:0x80800000; valaddr_reg:x16; val_offset:1152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1152, x17, x15, 1152, x18)

inst_1669:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xf0 and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0xf8000fff; valaddr_reg:x16; val_offset:1160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1160, x17, x15, 1160, x18)

inst_1670:
// fs1 == 1 and fe1 == 0xf0 and fm1 == 0x7ff000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf87ff000; op2val:0x80800000; valaddr_reg:x16; val_offset:1168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1168, x17, x15, 1168, x18)

inst_1671:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xf0 and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0xf87ff000; valaddr_reg:x16; val_offset:1176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1176, x17, x15, 1176, x18)

inst_1672:
// fs1 == 1 and fe1 == 0xf0 and fm1 == 0x001fff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf8001fff; op2val:0x80800000; valaddr_reg:x16; val_offset:1184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1184, x17, x15, 1184, x18)

inst_1673:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xf0 and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0xf8001fff; valaddr_reg:x16; val_offset:1192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1192, x17, x15, 1192, x18)

inst_1674:
// fs1 == 1 and fe1 == 0xf0 and fm1 == 0x7fe000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf87fe000; op2val:0x80800000; valaddr_reg:x16; val_offset:1200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1200, x17, x15, 1200, x18)

inst_1675:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xf0 and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0xf87fe000; valaddr_reg:x16; val_offset:1208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1208, x17, x15, 1208, x18)

inst_1676:
// fs1 == 1 and fe1 == 0xf0 and fm1 == 0x003fff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf8003fff; op2val:0x80800000; valaddr_reg:x16; val_offset:1216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1216, x17, x15, 1216, x18)

inst_1677:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xf0 and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0xf8003fff; valaddr_reg:x16; val_offset:1224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1224, x17, x15, 1224, x18)

inst_1678:
// fs1 == 1 and fe1 == 0xf0 and fm1 == 0x7fc000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf87fc000; op2val:0x80800000; valaddr_reg:x16; val_offset:1232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1232, x17, x15, 1232, x18)

inst_1679:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xf0 and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0xf87fc000; valaddr_reg:x16; val_offset:1240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1240, x17, x15, 1240, x18)

inst_1680:
// fs1 == 1 and fe1 == 0xf0 and fm1 == 0x007fff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf8007fff; op2val:0x80800000; valaddr_reg:x16; val_offset:1248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1248, x17, x15, 1248, x18)

inst_1681:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xf0 and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0xf8007fff; valaddr_reg:x16; val_offset:1256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1256, x17, x15, 1256, x18)

inst_1682:
// fs1 == 1 and fe1 == 0xf0 and fm1 == 0x7f8000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf87f8000; op2val:0x80800000; valaddr_reg:x16; val_offset:1264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1264, x17, x15, 1264, x18)

inst_1683:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xf0 and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0xf87f8000; valaddr_reg:x16; val_offset:1272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1272, x17, x15, 1272, x18)

inst_1684:
// fs1 == 1 and fe1 == 0xf0 and fm1 == 0x00ffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf800ffff; op2val:0x80800000; valaddr_reg:x16; val_offset:1280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1280, x17, x15, 1280, x18)

inst_1685:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xf0 and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0xf800ffff; valaddr_reg:x16; val_offset:1288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1288, x17, x15, 1288, x18)

inst_1686:
// fs1 == 1 and fe1 == 0xf0 and fm1 == 0x7f0000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf87f0000; op2val:0x80800000; valaddr_reg:x16; val_offset:1296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1296, x17, x15, 1296, x18)

inst_1687:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xf0 and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0xf87f0000; valaddr_reg:x16; val_offset:1304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1304, x17, x15, 1304, x18)

inst_1688:
// fs1 == 1 and fe1 == 0xf0 and fm1 == 0x01ffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf801ffff; op2val:0x80800000; valaddr_reg:x16; val_offset:1312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1312, x17, x15, 1312, x18)

inst_1689:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xf0 and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0xf801ffff; valaddr_reg:x16; val_offset:1320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1320, x17, x15, 1320, x18)

inst_1690:
// fs1 == 1 and fe1 == 0xf0 and fm1 == 0x7e0000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf87e0000; op2val:0x80800000; valaddr_reg:x16; val_offset:1328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1328, x17, x15, 1328, x18)

inst_1691:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xf0 and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0xf87e0000; valaddr_reg:x16; val_offset:1336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1336, x17, x15, 1336, x18)

inst_1692:
// fs1 == 1 and fe1 == 0xf0 and fm1 == 0x03ffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf803ffff; op2val:0x80800000; valaddr_reg:x16; val_offset:1344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1344, x17, x15, 1344, x18)

inst_1693:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xf0 and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0xf803ffff; valaddr_reg:x16; val_offset:1352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1352, x17, x15, 1352, x18)

inst_1694:
// fs1 == 1 and fe1 == 0xf0 and fm1 == 0x7c0000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf87c0000; op2val:0x80800000; valaddr_reg:x16; val_offset:1360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1360, x17, x15, 1360, x18)

inst_1695:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xf0 and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0xf87c0000; valaddr_reg:x16; val_offset:1368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1368, x17, x15, 1368, x18)

inst_1696:
// fs1 == 1 and fe1 == 0xf0 and fm1 == 0x07ffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf807ffff; op2val:0x80800000; valaddr_reg:x16; val_offset:1376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1376, x17, x15, 1376, x18)

inst_1697:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xf0 and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0xf807ffff; valaddr_reg:x16; val_offset:1384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1384, x17, x15, 1384, x18)

inst_1698:
// fs1 == 1 and fe1 == 0xf0 and fm1 == 0x780000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf8780000; op2val:0x80800000; valaddr_reg:x16; val_offset:1392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1392, x17, x15, 1392, x18)

inst_1699:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xf0 and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0xf8780000; valaddr_reg:x16; val_offset:1400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1400, x17, x15, 1400, x18)

inst_1700:
// fs1 == 1 and fe1 == 0xf0 and fm1 == 0x0fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf80fffff; op2val:0x80800000; valaddr_reg:x16; val_offset:1408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1408, x17, x15, 1408, x18)

inst_1701:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xf0 and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0xf80fffff; valaddr_reg:x16; val_offset:1416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1416, x17, x15, 1416, x18)

inst_1702:
// fs1 == 1 and fe1 == 0xf0 and fm1 == 0x700000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf8700000; op2val:0x80800000; valaddr_reg:x16; val_offset:1424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1424, x17, x15, 1424, x18)

inst_1703:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xf0 and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0xf8700000; valaddr_reg:x16; val_offset:1432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1432, x17, x15, 1432, x18)

inst_1704:
// fs1 == 1 and fe1 == 0xf0 and fm1 == 0x1fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf81fffff; op2val:0x80800000; valaddr_reg:x16; val_offset:1440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1440, x17, x15, 1440, x18)

inst_1705:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xf0 and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0xf81fffff; valaddr_reg:x16; val_offset:1448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1448, x17, x15, 1448, x18)

inst_1706:
// fs1 == 1 and fe1 == 0xf0 and fm1 == 0x600000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf8600000; op2val:0x80800000; valaddr_reg:x16; val_offset:1456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1456, x17, x15, 1456, x18)

inst_1707:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xf0 and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0xf8600000; valaddr_reg:x16; val_offset:1464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1464, x17, x15, 1464, x18)

inst_1708:
// fs1 == 1 and fe1 == 0xf0 and fm1 == 0x3fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf83fffff; op2val:0x80800000; valaddr_reg:x16; val_offset:1472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1472, x17, x15, 1472, x18)

inst_1709:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xf0 and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0xf83fffff; valaddr_reg:x16; val_offset:1480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1480, x17, x15, 1480, x18)

inst_1710:
// fs1 == 1 and fe1 == 0xf0 and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf8400000; op2val:0x80800000; valaddr_reg:x16; val_offset:1488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1488, x17, x15, 1488, x18)

inst_1711:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xf0 and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0xf8400000; valaddr_reg:x16; val_offset:1496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1496, x17, x15, 1496, x18)

inst_1712:
// fs1 == 1 and fe1 == 0xf0 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf87fffff; op2val:0x80800000; valaddr_reg:x16; val_offset:1504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1504, x17, x15, 1504, x18)

inst_1713:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xf0 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800000; op2val:0xf87fffff; valaddr_reg:x16; val_offset:1512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1512, x17, x15, 1512, x18)

inst_1714:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x4ccccc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xcccccc; op2val:0x800000; valaddr_reg:x16; val_offset:1520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1520, x17, x15, 1520, x18)

inst_1715:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x4ccccc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0xcccccc; valaddr_reg:x16; val_offset:1528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1528, x17, x15, 1528, x18)

inst_1716:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x333333 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xb33333; op2val:0x800000; valaddr_reg:x16; val_offset:1536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1536, x17, x15, 1536, x18)

inst_1717:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x333333 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0xb33333; valaddr_reg:x16; val_offset:1544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1544, x17, x15, 1544, x18)

inst_1718:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x5b6db6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xdb6db6; op2val:0x800000; valaddr_reg:x16; val_offset:1552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1552, x17, x15, 1552, x18)

inst_1719:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5b6db6 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0xdb6db6; valaddr_reg:x16; val_offset:1560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1560, x17, x15, 1560, x18)

inst_1720:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x249249 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xa49249; op2val:0x800000; valaddr_reg:x16; val_offset:1568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1568, x17, x15, 1568, x18)

inst_1721:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x249249 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0xa49249; valaddr_reg:x16; val_offset:1576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1576, x17, x15, 1576, x18)

inst_1722:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x444444 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc44444; op2val:0x800000; valaddr_reg:x16; val_offset:1584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1584, x17, x15, 1584, x18)

inst_1723:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x444444 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0xc44444; valaddr_reg:x16; val_offset:1592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1592, x17, x15, 1592, x18)

inst_1724:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x3bbbbb and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbbbbbb; op2val:0x800000; valaddr_reg:x16; val_offset:1600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1600, x17, x15, 1600, x18)

inst_1725:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3bbbbb and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0xbbbbbb; valaddr_reg:x16; val_offset:1608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1608, x17, x15, 1608, x18)

inst_1726:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x666666 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xe66666; op2val:0x800000; valaddr_reg:x16; val_offset:1616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1616, x17, x15, 1616, x18)

inst_1727:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x666666 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0xe66666; valaddr_reg:x16; val_offset:1624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1624, x17, x15, 1624, x18)

inst_1728:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x199999 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x999999; op2val:0x800000; valaddr_reg:x16; val_offset:1632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1632, x17, x15, 1632, x18)

inst_1729:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x199999 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x999999; valaddr_reg:x16; val_offset:1640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1640, x17, x15, 1640, x18)

inst_1730:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x6db6db and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xedb6db; op2val:0x800000; valaddr_reg:x16; val_offset:1648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1648, x17, x15, 1648, x18)

inst_1731:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6db6db and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0xedb6db; valaddr_reg:x16; val_offset:1656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1656, x17, x15, 1656, x18)

inst_1732:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x36db6d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xb6db6d; op2val:0x800000; valaddr_reg:x16; val_offset:1664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1664, x17, x15, 1664, x18)

inst_1733:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x36db6d and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0xb6db6d; valaddr_reg:x16; val_offset:1672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1672, x17, x15, 1672, x18)

inst_1734:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800001; op2val:0x800000; valaddr_reg:x16; val_offset:1680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1680, x17, x15, 1680, x18)

inst_1735:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x800001; valaddr_reg:x16; val_offset:1688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1688, x17, x15, 1688, x18)

inst_1736:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7ffffe and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfffffe; op2val:0x800000; valaddr_reg:x16; val_offset:1696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1696, x17, x15, 1696, x18)

inst_1737:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0xfffffe; valaddr_reg:x16; val_offset:1704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1704, x17, x15, 1704, x18)

inst_1738:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000003 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800003; op2val:0x800000; valaddr_reg:x16; val_offset:1712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1712, x17, x15, 1712, x18)

inst_1739:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x800003; valaddr_reg:x16; val_offset:1720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1720, x17, x15, 1720, x18)

inst_1740:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7ffffc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfffffc; op2val:0x800000; valaddr_reg:x16; val_offset:1728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1728, x17, x15, 1728, x18)

inst_1741:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0xfffffc; valaddr_reg:x16; val_offset:1736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1736, x17, x15, 1736, x18)

inst_1742:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000007 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800007; op2val:0x800000; valaddr_reg:x16; val_offset:1744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1744, x17, x15, 1744, x18)

inst_1743:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x800007; valaddr_reg:x16; val_offset:1752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1752, x17, x15, 1752, x18)

inst_1744:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7ffff8 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfffff8; op2val:0x800000; valaddr_reg:x16; val_offset:1760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1760, x17, x15, 1760, x18)

inst_1745:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0xfffff8; valaddr_reg:x16; val_offset:1768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1768, x17, x15, 1768, x18)

inst_1746:
// fs1 == 0 and fe1 == 0x04 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x2000001; op2val:0x800000; valaddr_reg:x16; val_offset:1776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1776, x17, x15, 1776, x18)

inst_1747:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x2000001; valaddr_reg:x16; val_offset:1784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1784, x17, x15, 1784, x18)

inst_1748:
// fs1 == 0 and fe1 == 0x04 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x2000000; op2val:0x800000; valaddr_reg:x16; val_offset:1792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1792, x17, x15, 1792, x18)

inst_1749:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x2000000; valaddr_reg:x16; val_offset:1800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1800, x17, x15, 1800, x18)

inst_1750:
// fs1 == 0 and fe1 == 0x04 and fm1 == 0x7ffffe and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x27ffffe; op2val:0x800000; valaddr_reg:x16; val_offset:1808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1808, x17, x15, 1808, x18)

inst_1751:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x27ffffe; valaddr_reg:x16; val_offset:1816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1816, x17, x15, 1816, x18)

inst_1752:
// fs1 == 0 and fe1 == 0x04 and fm1 == 0x000003 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x2000003; op2val:0x800000; valaddr_reg:x16; val_offset:1824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1824, x17, x15, 1824, x18)

inst_1753:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x2000003; valaddr_reg:x16; val_offset:1832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1832, x17, x15, 1832, x18)

inst_1754:
// fs1 == 0 and fe1 == 0x04 and fm1 == 0x7ffffc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x27ffffc; op2val:0x800000; valaddr_reg:x16; val_offset:1840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1840, x17, x15, 1840, x18)

inst_1755:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x27ffffc; valaddr_reg:x16; val_offset:1848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1848, x17, x15, 1848, x18)

inst_1756:
// fs1 == 0 and fe1 == 0x04 and fm1 == 0x000007 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x2000007; op2val:0x800000; valaddr_reg:x16; val_offset:1856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1856, x17, x15, 1856, x18)

inst_1757:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x2000007; valaddr_reg:x16; val_offset:1864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1864, x17, x15, 1864, x18)

inst_1758:
// fs1 == 0 and fe1 == 0x04 and fm1 == 0x7ffff8 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x27ffff8; op2val:0x800000; valaddr_reg:x16; val_offset:1872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1872, x17, x15, 1872, x18)

inst_1759:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x27ffff8; valaddr_reg:x16; val_offset:1880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1880, x17, x15, 1880, x18)

inst_1760:
// fs1 == 0 and fe1 == 0x04 and fm1 == 0x00000f and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x200000f; op2val:0x800000; valaddr_reg:x16; val_offset:1888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1888, x17, x15, 1888, x18)

inst_1761:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x200000f; valaddr_reg:x16; val_offset:1896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1896, x17, x15, 1896, x18)

inst_1762:
// fs1 == 0 and fe1 == 0x04 and fm1 == 0x7ffff0 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x27ffff0; op2val:0x800000; valaddr_reg:x16; val_offset:1904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1904, x17, x15, 1904, x18)

inst_1763:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x27ffff0; valaddr_reg:x16; val_offset:1912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1912, x17, x15, 1912, x18)

inst_1764:
// fs1 == 0 and fe1 == 0x04 and fm1 == 0x00001f and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x200001f; op2val:0x800000; valaddr_reg:x16; val_offset:1920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1920, x17, x15, 1920, x18)

inst_1765:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x200001f; valaddr_reg:x16; val_offset:1928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1928, x17, x15, 1928, x18)

inst_1766:
// fs1 == 0 and fe1 == 0x04 and fm1 == 0x7fffe0 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x27fffe0; op2val:0x800000; valaddr_reg:x16; val_offset:1936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1936, x17, x15, 1936, x18)

inst_1767:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x27fffe0; valaddr_reg:x16; val_offset:1944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1944, x17, x15, 1944, x18)

inst_1768:
// fs1 == 0 and fe1 == 0x04 and fm1 == 0x00003f and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x200003f; op2val:0x800000; valaddr_reg:x16; val_offset:1952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1952, x17, x15, 1952, x18)

inst_1769:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x200003f; valaddr_reg:x16; val_offset:1960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1960, x17, x15, 1960, x18)

inst_1770:
// fs1 == 0 and fe1 == 0x04 and fm1 == 0x7fffc0 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x27fffc0; op2val:0x800000; valaddr_reg:x16; val_offset:1968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1968, x17, x15, 1968, x18)

inst_1771:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x27fffc0; valaddr_reg:x16; val_offset:1976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1976, x17, x15, 1976, x18)

inst_1772:
// fs1 == 0 and fe1 == 0x04 and fm1 == 0x00007f and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x200007f; op2val:0x800000; valaddr_reg:x16; val_offset:1984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1984, x17, x15, 1984, x18)

inst_1773:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x200007f; valaddr_reg:x16; val_offset:1992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1992, x17, x15, 1992, x18)

inst_1774:
// fs1 == 0 and fe1 == 0x04 and fm1 == 0x7fff80 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x27fff80; op2val:0x800000; valaddr_reg:x16; val_offset:2000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2000, x17, x15, 2000, x18)

inst_1775:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x27fff80; valaddr_reg:x16; val_offset:2008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2008, x17, x15, 2008, x18)

inst_1776:
// fs1 == 0 and fe1 == 0x04 and fm1 == 0x0000ff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x20000ff; op2val:0x800000; valaddr_reg:x16; val_offset:2016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2016, x17, x15, 2016, x18)

inst_1777:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x20000ff; valaddr_reg:x16; val_offset:2024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_8)

inst_1778:
// fs1 == 0 and fe1 == 0x04 and fm1 == 0x7fff00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x27fff00; op2val:0x800000; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1779:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x27fff00; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 8, x17, x15, 8, x18)

inst_1780:
// fs1 == 0 and fe1 == 0x04 and fm1 == 0x0001ff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x20001ff; op2val:0x800000; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 16, x17, x15, 16, x18)

inst_1781:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x20001ff; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 24, x17, x15, 24, x18)

inst_1782:
// fs1 == 0 and fe1 == 0x04 and fm1 == 0x7ffe00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x27ffe00; op2val:0x800000; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 32, x17, x15, 32, x18)

inst_1783:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x27ffe00; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 40, x17, x15, 40, x18)

inst_1784:
// fs1 == 0 and fe1 == 0x04 and fm1 == 0x0003ff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x20003ff; op2val:0x800000; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_1785:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x20003ff; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 56, x17, x15, 56, x18)

inst_1786:
// fs1 == 0 and fe1 == 0x04 and fm1 == 0x7ffc00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x27ffc00; op2val:0x800000; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 64, x17, x15, 64, x18)

inst_1787:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x27ffc00; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 72, x17, x15, 72, x18)

inst_1788:
// fs1 == 0 and fe1 == 0x04 and fm1 == 0x0007ff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x20007ff; op2val:0x800000; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_1789:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x20007ff; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 88, x17, x15, 88, x18)

inst_1790:
// fs1 == 0 and fe1 == 0x04 and fm1 == 0x7ff800 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x27ff800; op2val:0x800000; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 96, x17, x15, 96, x18)

inst_1791:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x27ff800; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 104, x17, x15, 104, x18)

inst_1792:
// fs1 == 0 and fe1 == 0x04 and fm1 == 0x000fff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x2000fff; op2val:0x800000; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 112, x17, x15, 112, x18)

inst_1793:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x2000fff; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 120, x17, x15, 120, x18)

inst_1794:
// fs1 == 0 and fe1 == 0x04 and fm1 == 0x7ff000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x27ff000; op2val:0x800000; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_1795:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x27ff000; valaddr_reg:x16; val_offset:136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 136, x17, x15, 136, x18)

inst_1796:
// fs1 == 0 and fe1 == 0x04 and fm1 == 0x001fff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x2001fff; op2val:0x800000; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 144, x17, x15, 144, x18)

inst_1797:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x2001fff; valaddr_reg:x16; val_offset:152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 152, x17, x15, 152, x18)

inst_1798:
// fs1 == 0 and fe1 == 0x04 and fm1 == 0x7fe000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x27fe000; op2val:0x800000; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_1799:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x27fe000; valaddr_reg:x16; val_offset:168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 168, x17, x15, 168, x18)

inst_1800:
// fs1 == 0 and fe1 == 0x04 and fm1 == 0x003fff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x2003fff; op2val:0x800000; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 176, x17, x15, 176, x18)

inst_1801:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x2003fff; valaddr_reg:x16; val_offset:184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 184, x17, x15, 184, x18)

inst_1802:
// fs1 == 0 and fe1 == 0x04 and fm1 == 0x7fc000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x27fc000; op2val:0x800000; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 192, x17, x15, 192, x18)

inst_1803:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x27fc000; valaddr_reg:x16; val_offset:200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 200, x17, x15, 200, x18)

inst_1804:
// fs1 == 0 and fe1 == 0x04 and fm1 == 0x007fff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x2007fff; op2val:0x800000; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_1805:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x2007fff; valaddr_reg:x16; val_offset:216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 216, x17, x15, 216, x18)

inst_1806:
// fs1 == 0 and fe1 == 0x04 and fm1 == 0x7f8000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x27f8000; op2val:0x800000; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 224, x17, x15, 224, x18)

inst_1807:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x27f8000; valaddr_reg:x16; val_offset:232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 232, x17, x15, 232, x18)

inst_1808:
// fs1 == 0 and fe1 == 0x04 and fm1 == 0x00ffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x200ffff; op2val:0x800000; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_1809:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x200ffff; valaddr_reg:x16; val_offset:248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 248, x17, x15, 248, x18)

inst_1810:
// fs1 == 0 and fe1 == 0x04 and fm1 == 0x7f0000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x27f0000; op2val:0x800000; valaddr_reg:x16; val_offset:256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 256, x17, x15, 256, x18)

inst_1811:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x27f0000; valaddr_reg:x16; val_offset:264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 264, x17, x15, 264, x18)

inst_1812:
// fs1 == 0 and fe1 == 0x04 and fm1 == 0x01ffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x201ffff; op2val:0x800000; valaddr_reg:x16; val_offset:272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 272, x17, x15, 272, x18)

inst_1813:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x201ffff; valaddr_reg:x16; val_offset:280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 280, x17, x15, 280, x18)

inst_1814:
// fs1 == 0 and fe1 == 0x04 and fm1 == 0x7e0000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x27e0000; op2val:0x800000; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_1815:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x27e0000; valaddr_reg:x16; val_offset:296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 296, x17, x15, 296, x18)

inst_1816:
// fs1 == 0 and fe1 == 0x04 and fm1 == 0x03ffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x203ffff; op2val:0x800000; valaddr_reg:x16; val_offset:304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 304, x17, x15, 304, x18)

inst_1817:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x203ffff; valaddr_reg:x16; val_offset:312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 312, x17, x15, 312, x18)

inst_1818:
// fs1 == 0 and fe1 == 0x04 and fm1 == 0x7c0000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x27c0000; op2val:0x800000; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_1819:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x27c0000; valaddr_reg:x16; val_offset:328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 328, x17, x15, 328, x18)

inst_1820:
// fs1 == 0 and fe1 == 0x04 and fm1 == 0x07ffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x207ffff; op2val:0x800000; valaddr_reg:x16; val_offset:336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 336, x17, x15, 336, x18)

inst_1821:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x207ffff; valaddr_reg:x16; val_offset:344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 344, x17, x15, 344, x18)

inst_1822:
// fs1 == 0 and fe1 == 0x04 and fm1 == 0x780000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x2780000; op2val:0x800000; valaddr_reg:x16; val_offset:352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 352, x17, x15, 352, x18)

inst_1823:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x2780000; valaddr_reg:x16; val_offset:360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 360, x17, x15, 360, x18)

inst_1824:
// fs1 == 0 and fe1 == 0x04 and fm1 == 0x0fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x20fffff; op2val:0x800000; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_1825:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x20fffff; valaddr_reg:x16; val_offset:376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 376, x17, x15, 376, x18)

inst_1826:
// fs1 == 0 and fe1 == 0x04 and fm1 == 0x700000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x2700000; op2val:0x800000; valaddr_reg:x16; val_offset:384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 384, x17, x15, 384, x18)

inst_1827:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x2700000; valaddr_reg:x16; val_offset:392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 392, x17, x15, 392, x18)

inst_1828:
// fs1 == 0 and fe1 == 0x04 and fm1 == 0x1fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x21fffff; op2val:0x800000; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_1829:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x21fffff; valaddr_reg:x16; val_offset:408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 408, x17, x15, 408, x18)

inst_1830:
// fs1 == 0 and fe1 == 0x04 and fm1 == 0x600000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x2600000; op2val:0x800000; valaddr_reg:x16; val_offset:416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 416, x17, x15, 416, x18)

inst_1831:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x2600000; valaddr_reg:x16; val_offset:424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 424, x17, x15, 424, x18)

inst_1832:
// fs1 == 0 and fe1 == 0x04 and fm1 == 0x3fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x23fffff; op2val:0x800000; valaddr_reg:x16; val_offset:432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 432, x17, x15, 432, x18)

inst_1833:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x23fffff; valaddr_reg:x16; val_offset:440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 440, x17, x15, 440, x18)

inst_1834:
// fs1 == 0 and fe1 == 0x04 and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x2400000; op2val:0x800000; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_1835:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x2400000; valaddr_reg:x16; val_offset:456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 456, x17, x15, 456, x18)

inst_1836:
// fs1 == 0 and fe1 == 0x04 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x27fffff; op2val:0x800000; valaddr_reg:x16; val_offset:464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 464, x17, x15, 464, x18)

inst_1837:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x27fffff; valaddr_reg:x16; val_offset:472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 472, x17, x15, 472, x18)

inst_1838:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1800001; op2val:0x800000; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_1839:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x1800001; valaddr_reg:x16; val_offset:488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 488, x17, x15, 488, x18)

inst_1840:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1800000; op2val:0x800000; valaddr_reg:x16; val_offset:496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 496, x17, x15, 496, x18)

inst_1841:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x1800000; valaddr_reg:x16; val_offset:504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 504, x17, x15, 504, x18)

inst_1842:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7ffffe and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1fffffe; op2val:0x800000; valaddr_reg:x16; val_offset:512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 512, x17, x15, 512, x18)

inst_1843:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x1fffffe; valaddr_reg:x16; val_offset:520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 520, x17, x15, 520, x18)

inst_1844:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x000003 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1800003; op2val:0x800000; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_1845:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x1800003; valaddr_reg:x16; val_offset:536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 536, x17, x15, 536, x18)

inst_1846:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7ffffc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1fffffc; op2val:0x800000; valaddr_reg:x16; val_offset:544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 544, x17, x15, 544, x18)

inst_1847:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x1fffffc; valaddr_reg:x16; val_offset:552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 552, x17, x15, 552, x18)

inst_1848:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x000007 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1800007; op2val:0x800000; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_1849:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x1800007; valaddr_reg:x16; val_offset:568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 568, x17, x15, 568, x18)

inst_1850:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7ffff8 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1fffff8; op2val:0x800000; valaddr_reg:x16; val_offset:576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 576, x17, x15, 576, x18)

inst_1851:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x1fffff8; valaddr_reg:x16; val_offset:584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 584, x17, x15, 584, x18)

inst_1852:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x00000f and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x180000f; op2val:0x800000; valaddr_reg:x16; val_offset:592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 592, x17, x15, 592, x18)

inst_1853:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x180000f; valaddr_reg:x16; val_offset:600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 600, x17, x15, 600, x18)

inst_1854:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7ffff0 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1fffff0; op2val:0x800000; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 608, x17, x15, 608, x18)

inst_1855:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x1fffff0; valaddr_reg:x16; val_offset:616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 616, x17, x15, 616, x18)

inst_1856:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x00001f and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x180001f; op2val:0x800000; valaddr_reg:x16; val_offset:624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 624, x17, x15, 624, x18)

inst_1857:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x180001f; valaddr_reg:x16; val_offset:632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 632, x17, x15, 632, x18)

inst_1858:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7fffe0 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1ffffe0; op2val:0x800000; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_1859:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x1ffffe0; valaddr_reg:x16; val_offset:648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 648, x17, x15, 648, x18)

inst_1860:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x00003f and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x180003f; op2val:0x800000; valaddr_reg:x16; val_offset:656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 656, x17, x15, 656, x18)

inst_1861:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x180003f; valaddr_reg:x16; val_offset:664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 664, x17, x15, 664, x18)

inst_1862:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7fffc0 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1ffffc0; op2val:0x800000; valaddr_reg:x16; val_offset:672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 672, x17, x15, 672, x18)

inst_1863:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x1ffffc0; valaddr_reg:x16; val_offset:680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 680, x17, x15, 680, x18)

inst_1864:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x00007f and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x180007f; op2val:0x800000; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 688, x17, x15, 688, x18)

inst_1865:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x180007f; valaddr_reg:x16; val_offset:696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 696, x17, x15, 696, x18)

inst_1866:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7fff80 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1ffff80; op2val:0x800000; valaddr_reg:x16; val_offset:704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 704, x17, x15, 704, x18)

inst_1867:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x1ffff80; valaddr_reg:x16; val_offset:712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 712, x17, x15, 712, x18)

inst_1868:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x0000ff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x18000ff; op2val:0x800000; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_1869:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x18000ff; valaddr_reg:x16; val_offset:728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 728, x17, x15, 728, x18)

inst_1870:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7fff00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1ffff00; op2val:0x800000; valaddr_reg:x16; val_offset:736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 736, x17, x15, 736, x18)

inst_1871:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x1ffff00; valaddr_reg:x16; val_offset:744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 744, x17, x15, 744, x18)

inst_1872:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x0001ff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x18001ff; op2val:0x800000; valaddr_reg:x16; val_offset:752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 752, x17, x15, 752, x18)

inst_1873:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x18001ff; valaddr_reg:x16; val_offset:760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 760, x17, x15, 760, x18)

inst_1874:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7ffe00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1fffe00; op2val:0x800000; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 768, x17, x15, 768, x18)

inst_1875:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x1fffe00; valaddr_reg:x16; val_offset:776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 776, x17, x15, 776, x18)

inst_1876:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x0003ff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x18003ff; op2val:0x800000; valaddr_reg:x16; val_offset:784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 784, x17, x15, 784, x18)

inst_1877:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x18003ff; valaddr_reg:x16; val_offset:792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 792, x17, x15, 792, x18)

inst_1878:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7ffc00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1fffc00; op2val:0x800000; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_1879:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x1fffc00; valaddr_reg:x16; val_offset:808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 808, x17, x15, 808, x18)

inst_1880:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x0007ff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x18007ff; op2val:0x800000; valaddr_reg:x16; val_offset:816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 816, x17, x15, 816, x18)

inst_1881:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x18007ff; valaddr_reg:x16; val_offset:824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 824, x17, x15, 824, x18)

inst_1882:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7ff800 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1fff800; op2val:0x800000; valaddr_reg:x16; val_offset:832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 832, x17, x15, 832, x18)

inst_1883:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x1fff800; valaddr_reg:x16; val_offset:840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 840, x17, x15, 840, x18)

inst_1884:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x000fff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1800fff; op2val:0x800000; valaddr_reg:x16; val_offset:848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 848, x17, x15, 848, x18)

inst_1885:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x1800fff; valaddr_reg:x16; val_offset:856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 856, x17, x15, 856, x18)

inst_1886:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7ff000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1fff000; op2val:0x800000; valaddr_reg:x16; val_offset:864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 864, x17, x15, 864, x18)

inst_1887:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x1fff000; valaddr_reg:x16; val_offset:872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 872, x17, x15, 872, x18)

inst_1888:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x001fff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1801fff; op2val:0x800000; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 880, x17, x15, 880, x18)

inst_1889:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x1801fff; valaddr_reg:x16; val_offset:888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 888, x17, x15, 888, x18)

inst_1890:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7fe000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1ffe000; op2val:0x800000; valaddr_reg:x16; val_offset:896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 896, x17, x15, 896, x18)

inst_1891:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x1ffe000; valaddr_reg:x16; val_offset:904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 904, x17, x15, 904, x18)

inst_1892:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x003fff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1803fff; op2val:0x800000; valaddr_reg:x16; val_offset:912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 912, x17, x15, 912, x18)

inst_1893:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x1803fff; valaddr_reg:x16; val_offset:920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 920, x17, x15, 920, x18)

inst_1894:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7fc000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1ffc000; op2val:0x800000; valaddr_reg:x16; val_offset:928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 928, x17, x15, 928, x18)

inst_1895:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x1ffc000; valaddr_reg:x16; val_offset:936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 936, x17, x15, 936, x18)

inst_1896:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x007fff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1807fff; op2val:0x800000; valaddr_reg:x16; val_offset:944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 944, x17, x15, 944, x18)

inst_1897:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x1807fff; valaddr_reg:x16; val_offset:952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 952, x17, x15, 952, x18)

inst_1898:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7f8000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1ff8000; op2val:0x800000; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 960, x17, x15, 960, x18)

inst_1899:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x1ff8000; valaddr_reg:x16; val_offset:968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 968, x17, x15, 968, x18)

inst_1900:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x00ffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x180ffff; op2val:0x800000; valaddr_reg:x16; val_offset:976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 976, x17, x15, 976, x18)

inst_1901:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x180ffff; valaddr_reg:x16; val_offset:984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 984, x17, x15, 984, x18)

inst_1902:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7f0000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1ff0000; op2val:0x800000; valaddr_reg:x16; val_offset:992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 992, x17, x15, 992, x18)

inst_1903:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x1ff0000; valaddr_reg:x16; val_offset:1000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1000, x17, x15, 1000, x18)

inst_1904:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x01ffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x181ffff; op2val:0x800000; valaddr_reg:x16; val_offset:1008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1008, x17, x15, 1008, x18)

inst_1905:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x181ffff; valaddr_reg:x16; val_offset:1016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1016, x17, x15, 1016, x18)

inst_1906:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7e0000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1fe0000; op2val:0x800000; valaddr_reg:x16; val_offset:1024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1024, x17, x15, 1024, x18)

inst_1907:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x1fe0000; valaddr_reg:x16; val_offset:1032; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1032, x17, x15, 1032, x18)

inst_1908:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x03ffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x183ffff; op2val:0x800000; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1040, x17, x15, 1040, x18)

inst_1909:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x183ffff; valaddr_reg:x16; val_offset:1048; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1048, x17, x15, 1048, x18)

inst_1910:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7c0000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1fc0000; op2val:0x800000; valaddr_reg:x16; val_offset:1056; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1056, x17, x15, 1056, x18)

inst_1911:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x1fc0000; valaddr_reg:x16; val_offset:1064; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1064, x17, x15, 1064, x18)

inst_1912:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x07ffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x187ffff; op2val:0x800000; valaddr_reg:x16; val_offset:1072; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1072, x17, x15, 1072, x18)

inst_1913:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x187ffff; valaddr_reg:x16; val_offset:1080; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1080, x17, x15, 1080, x18)

inst_1914:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x780000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1f80000; op2val:0x800000; valaddr_reg:x16; val_offset:1088; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1088, x17, x15, 1088, x18)

inst_1915:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x1f80000; valaddr_reg:x16; val_offset:1096; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1096, x17, x15, 1096, x18)

inst_1916:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x0fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x18fffff; op2val:0x800000; valaddr_reg:x16; val_offset:1104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1104, x17, x15, 1104, x18)

inst_1917:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x18fffff; valaddr_reg:x16; val_offset:1112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1112, x17, x15, 1112, x18)

inst_1918:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x700000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1f00000; op2val:0x800000; valaddr_reg:x16; val_offset:1120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1120, x17, x15, 1120, x18)

inst_1919:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x1f00000; valaddr_reg:x16; val_offset:1128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1128, x17, x15, 1128, x18)

inst_1920:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x1fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x19fffff; op2val:0x800000; valaddr_reg:x16; val_offset:1136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1136, x17, x15, 1136, x18)

inst_1921:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x19fffff; valaddr_reg:x16; val_offset:1144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1144, x17, x15, 1144, x18)

inst_1922:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x600000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1e00000; op2val:0x800000; valaddr_reg:x16; val_offset:1152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1152, x17, x15, 1152, x18)

inst_1923:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x1e00000; valaddr_reg:x16; val_offset:1160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1160, x17, x15, 1160, x18)

inst_1924:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x3fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1bfffff; op2val:0x800000; valaddr_reg:x16; val_offset:1168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1168, x17, x15, 1168, x18)

inst_1925:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x1bfffff; valaddr_reg:x16; val_offset:1176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1176, x17, x15, 1176, x18)

inst_1926:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1c00000; op2val:0x800000; valaddr_reg:x16; val_offset:1184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1184, x17, x15, 1184, x18)

inst_1927:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x1c00000; valaddr_reg:x16; val_offset:1192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1192, x17, x15, 1192, x18)

inst_1928:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1ffffff; op2val:0x800000; valaddr_reg:x16; val_offset:1200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1200, x17, x15, 1200, x18)

inst_1929:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x1ffffff; valaddr_reg:x16; val_offset:1208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1208, x17, x15, 1208, x18)

inst_1930:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1000001; op2val:0x800000; valaddr_reg:x16; val_offset:1216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1216, x17, x15, 1216, x18)

inst_1931:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x1000001; valaddr_reg:x16; val_offset:1224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1224, x17, x15, 1224, x18)

inst_1932:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1000000; op2val:0x800000; valaddr_reg:x16; val_offset:1232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1232, x17, x15, 1232, x18)

inst_1933:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x1000000; valaddr_reg:x16; val_offset:1240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1240, x17, x15, 1240, x18)

inst_1934:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7ffffe and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17ffffe; op2val:0x800000; valaddr_reg:x16; val_offset:1248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1248, x17, x15, 1248, x18)

inst_1935:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x17ffffe; valaddr_reg:x16; val_offset:1256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1256, x17, x15, 1256, x18)

inst_1936:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x000003 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1000003; op2val:0x800000; valaddr_reg:x16; val_offset:1264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1264, x17, x15, 1264, x18)

inst_1937:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x1000003; valaddr_reg:x16; val_offset:1272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1272, x17, x15, 1272, x18)

inst_1938:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7ffffc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17ffffc; op2val:0x800000; valaddr_reg:x16; val_offset:1280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1280, x17, x15, 1280, x18)

inst_1939:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x17ffffc; valaddr_reg:x16; val_offset:1288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1288, x17, x15, 1288, x18)

inst_1940:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x000007 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1000007; op2val:0x800000; valaddr_reg:x16; val_offset:1296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1296, x17, x15, 1296, x18)

inst_1941:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x1000007; valaddr_reg:x16; val_offset:1304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1304, x17, x15, 1304, x18)

inst_1942:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7ffff8 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17ffff8; op2val:0x800000; valaddr_reg:x16; val_offset:1312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1312, x17, x15, 1312, x18)

inst_1943:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x17ffff8; valaddr_reg:x16; val_offset:1320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1320, x17, x15, 1320, x18)

inst_1944:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x00000f and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x100000f; op2val:0x800000; valaddr_reg:x16; val_offset:1328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1328, x17, x15, 1328, x18)

inst_1945:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x100000f; valaddr_reg:x16; val_offset:1336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1336, x17, x15, 1336, x18)

inst_1946:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7ffff0 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17ffff0; op2val:0x800000; valaddr_reg:x16; val_offset:1344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1344, x17, x15, 1344, x18)

inst_1947:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x17ffff0; valaddr_reg:x16; val_offset:1352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1352, x17, x15, 1352, x18)

inst_1948:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x00001f and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x100001f; op2val:0x800000; valaddr_reg:x16; val_offset:1360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1360, x17, x15, 1360, x18)

inst_1949:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x100001f; valaddr_reg:x16; val_offset:1368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1368, x17, x15, 1368, x18)

inst_1950:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7fffe0 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17fffe0; op2val:0x800000; valaddr_reg:x16; val_offset:1376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1376, x17, x15, 1376, x18)

inst_1951:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x17fffe0; valaddr_reg:x16; val_offset:1384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1384, x17, x15, 1384, x18)

inst_1952:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x00003f and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x100003f; op2val:0x800000; valaddr_reg:x16; val_offset:1392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1392, x17, x15, 1392, x18)

inst_1953:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x100003f; valaddr_reg:x16; val_offset:1400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1400, x17, x15, 1400, x18)

inst_1954:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7fffc0 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17fffc0; op2val:0x800000; valaddr_reg:x16; val_offset:1408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1408, x17, x15, 1408, x18)

inst_1955:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x17fffc0; valaddr_reg:x16; val_offset:1416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1416, x17, x15, 1416, x18)

inst_1956:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x00007f and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x100007f; op2val:0x800000; valaddr_reg:x16; val_offset:1424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1424, x17, x15, 1424, x18)

inst_1957:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x100007f; valaddr_reg:x16; val_offset:1432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1432, x17, x15, 1432, x18)

inst_1958:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7fff80 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17fff80; op2val:0x800000; valaddr_reg:x16; val_offset:1440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1440, x17, x15, 1440, x18)

inst_1959:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x17fff80; valaddr_reg:x16; val_offset:1448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1448, x17, x15, 1448, x18)

inst_1960:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x0000ff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x10000ff; op2val:0x800000; valaddr_reg:x16; val_offset:1456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1456, x17, x15, 1456, x18)

inst_1961:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x10000ff; valaddr_reg:x16; val_offset:1464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1464, x17, x15, 1464, x18)

inst_1962:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7fff00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17fff00; op2val:0x800000; valaddr_reg:x16; val_offset:1472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1472, x17, x15, 1472, x18)

inst_1963:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x17fff00; valaddr_reg:x16; val_offset:1480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1480, x17, x15, 1480, x18)

inst_1964:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x0001ff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x10001ff; op2val:0x800000; valaddr_reg:x16; val_offset:1488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1488, x17, x15, 1488, x18)

inst_1965:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x10001ff; valaddr_reg:x16; val_offset:1496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1496, x17, x15, 1496, x18)

inst_1966:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7ffe00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17ffe00; op2val:0x800000; valaddr_reg:x16; val_offset:1504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1504, x17, x15, 1504, x18)

inst_1967:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x17ffe00; valaddr_reg:x16; val_offset:1512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1512, x17, x15, 1512, x18)

inst_1968:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x0003ff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x10003ff; op2val:0x800000; valaddr_reg:x16; val_offset:1520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1520, x17, x15, 1520, x18)

inst_1969:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x10003ff; valaddr_reg:x16; val_offset:1528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1528, x17, x15, 1528, x18)

inst_1970:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7ffc00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17ffc00; op2val:0x800000; valaddr_reg:x16; val_offset:1536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1536, x17, x15, 1536, x18)

inst_1971:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x17ffc00; valaddr_reg:x16; val_offset:1544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1544, x17, x15, 1544, x18)

inst_1972:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x0007ff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x10007ff; op2val:0x800000; valaddr_reg:x16; val_offset:1552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1552, x17, x15, 1552, x18)

inst_1973:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x10007ff; valaddr_reg:x16; val_offset:1560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1560, x17, x15, 1560, x18)

inst_1974:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7ff800 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17ff800; op2val:0x800000; valaddr_reg:x16; val_offset:1568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1568, x17, x15, 1568, x18)

inst_1975:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x17ff800; valaddr_reg:x16; val_offset:1576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1576, x17, x15, 1576, x18)

inst_1976:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x000fff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1000fff; op2val:0x800000; valaddr_reg:x16; val_offset:1584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1584, x17, x15, 1584, x18)

inst_1977:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x1000fff; valaddr_reg:x16; val_offset:1592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1592, x17, x15, 1592, x18)

inst_1978:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7ff000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17ff000; op2val:0x800000; valaddr_reg:x16; val_offset:1600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1600, x17, x15, 1600, x18)

inst_1979:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x17ff000; valaddr_reg:x16; val_offset:1608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1608, x17, x15, 1608, x18)

inst_1980:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x001fff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1001fff; op2val:0x800000; valaddr_reg:x16; val_offset:1616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1616, x17, x15, 1616, x18)

inst_1981:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x1001fff; valaddr_reg:x16; val_offset:1624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1624, x17, x15, 1624, x18)

inst_1982:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7fe000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17fe000; op2val:0x800000; valaddr_reg:x16; val_offset:1632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1632, x17, x15, 1632, x18)

inst_1983:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x17fe000; valaddr_reg:x16; val_offset:1640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1640, x17, x15, 1640, x18)

inst_1984:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x003fff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1003fff; op2val:0x800000; valaddr_reg:x16; val_offset:1648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1648, x17, x15, 1648, x18)

inst_1985:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x1003fff; valaddr_reg:x16; val_offset:1656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1656, x17, x15, 1656, x18)

inst_1986:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7fc000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17fc000; op2val:0x800000; valaddr_reg:x16; val_offset:1664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1664, x17, x15, 1664, x18)

inst_1987:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x17fc000; valaddr_reg:x16; val_offset:1672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1672, x17, x15, 1672, x18)

inst_1988:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x007fff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1007fff; op2val:0x800000; valaddr_reg:x16; val_offset:1680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1680, x17, x15, 1680, x18)

inst_1989:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x1007fff; valaddr_reg:x16; val_offset:1688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1688, x17, x15, 1688, x18)

inst_1990:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7f8000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17f8000; op2val:0x800000; valaddr_reg:x16; val_offset:1696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1696, x17, x15, 1696, x18)

inst_1991:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x17f8000; valaddr_reg:x16; val_offset:1704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1704, x17, x15, 1704, x18)

inst_1992:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x00ffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x100ffff; op2val:0x800000; valaddr_reg:x16; val_offset:1712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1712, x17, x15, 1712, x18)

inst_1993:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x100ffff; valaddr_reg:x16; val_offset:1720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1720, x17, x15, 1720, x18)

inst_1994:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7f0000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17f0000; op2val:0x800000; valaddr_reg:x16; val_offset:1728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1728, x17, x15, 1728, x18)

inst_1995:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x17f0000; valaddr_reg:x16; val_offset:1736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1736, x17, x15, 1736, x18)

inst_1996:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x01ffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x101ffff; op2val:0x800000; valaddr_reg:x16; val_offset:1744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1744, x17, x15, 1744, x18)

inst_1997:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x101ffff; valaddr_reg:x16; val_offset:1752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1752, x17, x15, 1752, x18)

inst_1998:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7e0000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17e0000; op2val:0x800000; valaddr_reg:x16; val_offset:1760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1760, x17, x15, 1760, x18)

inst_1999:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x17e0000; valaddr_reg:x16; val_offset:1768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1768, x17, x15, 1768, x18)

inst_2000:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x03ffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x103ffff; op2val:0x800000; valaddr_reg:x16; val_offset:1776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1776, x17, x15, 1776, x18)

inst_2001:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x103ffff; valaddr_reg:x16; val_offset:1784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1784, x17, x15, 1784, x18)

inst_2002:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7c0000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17c0000; op2val:0x800000; valaddr_reg:x16; val_offset:1792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1792, x17, x15, 1792, x18)

inst_2003:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x17c0000; valaddr_reg:x16; val_offset:1800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1800, x17, x15, 1800, x18)

inst_2004:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x07ffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x107ffff; op2val:0x800000; valaddr_reg:x16; val_offset:1808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1808, x17, x15, 1808, x18)

inst_2005:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x107ffff; valaddr_reg:x16; val_offset:1816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1816, x17, x15, 1816, x18)

inst_2006:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x780000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1780000; op2val:0x800000; valaddr_reg:x16; val_offset:1824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1824, x17, x15, 1824, x18)

inst_2007:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x1780000; valaddr_reg:x16; val_offset:1832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1832, x17, x15, 1832, x18)

inst_2008:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x0fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x10fffff; op2val:0x800000; valaddr_reg:x16; val_offset:1840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1840, x17, x15, 1840, x18)

inst_2009:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x10fffff; valaddr_reg:x16; val_offset:1848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1848, x17, x15, 1848, x18)

inst_2010:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x700000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1700000; op2val:0x800000; valaddr_reg:x16; val_offset:1856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1856, x17, x15, 1856, x18)

inst_2011:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x1700000; valaddr_reg:x16; val_offset:1864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1864, x17, x15, 1864, x18)

inst_2012:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x1fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x11fffff; op2val:0x800000; valaddr_reg:x16; val_offset:1872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1872, x17, x15, 1872, x18)

inst_2013:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x11fffff; valaddr_reg:x16; val_offset:1880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1880, x17, x15, 1880, x18)

inst_2014:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x600000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1600000; op2val:0x800000; valaddr_reg:x16; val_offset:1888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1888, x17, x15, 1888, x18)

inst_2015:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x1600000; valaddr_reg:x16; val_offset:1896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1896, x17, x15, 1896, x18)

inst_2016:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x3fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x13fffff; op2val:0x800000; valaddr_reg:x16; val_offset:1904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1904, x17, x15, 1904, x18)

inst_2017:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x13fffff; valaddr_reg:x16; val_offset:1912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1912, x17, x15, 1912, x18)

inst_2018:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1400000; op2val:0x800000; valaddr_reg:x16; val_offset:1920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1920, x17, x15, 1920, x18)

inst_2019:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x1400000; valaddr_reg:x16; val_offset:1928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1928, x17, x15, 1928, x18)

inst_2020:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17fffff; op2val:0x800000; valaddr_reg:x16; val_offset:1936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1936, x17, x15, 1936, x18)

inst_2021:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x17fffff; valaddr_reg:x16; val_offset:1944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1944, x17, x15, 1944, x18)

inst_2022:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x800000; valaddr_reg:x16; val_offset:1952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1952, x17, x15, 1952, x18)

inst_2023:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00000f and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000f; op2val:0x800000; valaddr_reg:x16; val_offset:1960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1960, x17, x15, 1960, x18)

inst_2024:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x80000f; valaddr_reg:x16; val_offset:1968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1968, x17, x15, 1968, x18)

inst_2025:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7ffff0 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfffff0; op2val:0x800000; valaddr_reg:x16; val_offset:1976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1976, x17, x15, 1976, x18)

inst_2026:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0xfffff0; valaddr_reg:x16; val_offset:1984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1984, x17, x15, 1984, x18)

inst_2027:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00001f and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80001f; op2val:0x800000; valaddr_reg:x16; val_offset:1992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1992, x17, x15, 1992, x18)

inst_2028:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x80001f; valaddr_reg:x16; val_offset:2000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2000, x17, x15, 2000, x18)

inst_2029:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7fffe0 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xffffe0; op2val:0x800000; valaddr_reg:x16; val_offset:2008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2008, x17, x15, 2008, x18)

inst_2030:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0xffffe0; valaddr_reg:x16; val_offset:2016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2016, x17, x15, 2016, x18)

inst_2031:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00003f and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80003f; op2val:0x800000; valaddr_reg:x16; val_offset:2024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_9)

inst_2032:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x80003f; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_2033:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7fffc0 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xffffc0; op2val:0x800000; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 8, x17, x15, 8, x18)

inst_2034:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0xffffc0; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 16, x17, x15, 16, x18)

inst_2035:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00007f and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80007f; op2val:0x800000; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 24, x17, x15, 24, x18)

inst_2036:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x80007f; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 32, x17, x15, 32, x18)

inst_2037:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7fff80 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xffff80; op2val:0x800000; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 40, x17, x15, 40, x18)

inst_2038:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0xffff80; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_2039:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x0000ff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8000ff; op2val:0x800000; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 56, x17, x15, 56, x18)

inst_2040:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x8000ff; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 64, x17, x15, 64, x18)

inst_2041:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7fff00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xffff00; op2val:0x800000; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 72, x17, x15, 72, x18)

inst_2042:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0xffff00; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_2043:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x0001ff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8001ff; op2val:0x800000; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 88, x17, x15, 88, x18)

inst_2044:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x8001ff; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 96, x17, x15, 96, x18)

inst_2045:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7ffe00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfffe00; op2val:0x800000; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 104, x17, x15, 104, x18)

inst_2046:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0xfffe00; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 112, x17, x15, 112, x18)

inst_2047:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x0003ff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8003ff; op2val:0x800000; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 120, x17, x15, 120, x18)

inst_2048:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x8003ff; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_2049:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7ffc00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfffc00; op2val:0x800000; valaddr_reg:x16; val_offset:136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 136, x17, x15, 136, x18)

inst_2050:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0xfffc00; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 144, x17, x15, 144, x18)

inst_2051:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x0007ff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8007ff; op2val:0x800000; valaddr_reg:x16; val_offset:152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 152, x17, x15, 152, x18)

inst_2052:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x8007ff; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_2053:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7ff800 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfff800; op2val:0x800000; valaddr_reg:x16; val_offset:168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 168, x17, x15, 168, x18)

inst_2054:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0xfff800; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 176, x17, x15, 176, x18)

inst_2055:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000fff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800fff; op2val:0x800000; valaddr_reg:x16; val_offset:184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 184, x17, x15, 184, x18)

inst_2056:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x800fff; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 192, x17, x15, 192, x18)

inst_2057:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7ff000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfff000; op2val:0x800000; valaddr_reg:x16; val_offset:200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 200, x17, x15, 200, x18)

inst_2058:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0xfff000; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_2059:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x001fff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x801fff; op2val:0x800000; valaddr_reg:x16; val_offset:216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 216, x17, x15, 216, x18)

inst_2060:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x801fff; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 224, x17, x15, 224, x18)

inst_2061:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7fe000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xffe000; op2val:0x800000; valaddr_reg:x16; val_offset:232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 232, x17, x15, 232, x18)

inst_2062:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0xffe000; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_2063:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x003fff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x803fff; op2val:0x800000; valaddr_reg:x16; val_offset:248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 248, x17, x15, 248, x18)

inst_2064:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x803fff; valaddr_reg:x16; val_offset:256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 256, x17, x15, 256, x18)

inst_2065:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7fc000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xffc000; op2val:0x800000; valaddr_reg:x16; val_offset:264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 264, x17, x15, 264, x18)

inst_2066:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0xffc000; valaddr_reg:x16; val_offset:272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 272, x17, x15, 272, x18)

inst_2067:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x007fff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fff; op2val:0x800000; valaddr_reg:x16; val_offset:280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 280, x17, x15, 280, x18)

inst_2068:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x807fff; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_2069:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7f8000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff8000; op2val:0x800000; valaddr_reg:x16; val_offset:296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 296, x17, x15, 296, x18)

inst_2070:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0xff8000; valaddr_reg:x16; val_offset:304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 304, x17, x15, 304, x18)

inst_2071:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00ffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80ffff; op2val:0x800000; valaddr_reg:x16; val_offset:312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 312, x17, x15, 312, x18)

inst_2072:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x80ffff; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_2073:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7f0000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff0000; op2val:0x800000; valaddr_reg:x16; val_offset:328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 328, x17, x15, 328, x18)

inst_2074:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0xff0000; valaddr_reg:x16; val_offset:336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 336, x17, x15, 336, x18)

inst_2075:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x01ffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81ffff; op2val:0x800000; valaddr_reg:x16; val_offset:344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 344, x17, x15, 344, x18)

inst_2076:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x81ffff; valaddr_reg:x16; val_offset:352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 352, x17, x15, 352, x18)

inst_2077:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7e0000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe0000; op2val:0x800000; valaddr_reg:x16; val_offset:360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 360, x17, x15, 360, x18)

inst_2078:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0xfe0000; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_2079:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x03ffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x83ffff; op2val:0x800000; valaddr_reg:x16; val_offset:376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 376, x17, x15, 376, x18)

inst_2080:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x83ffff; valaddr_reg:x16; val_offset:384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 384, x17, x15, 384, x18)

inst_2081:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7c0000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfc0000; op2val:0x800000; valaddr_reg:x16; val_offset:392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 392, x17, x15, 392, x18)

inst_2082:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0xfc0000; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_2083:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x07ffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x87ffff; op2val:0x800000; valaddr_reg:x16; val_offset:408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 408, x17, x15, 408, x18)

inst_2084:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x87ffff; valaddr_reg:x16; val_offset:416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 416, x17, x15, 416, x18)

inst_2085:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x780000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf80000; op2val:0x800000; valaddr_reg:x16; val_offset:424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 424, x17, x15, 424, x18)

inst_2086:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0xf80000; valaddr_reg:x16; val_offset:432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 432, x17, x15, 432, x18)

inst_2087:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x0fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8fffff; op2val:0x800000; valaddr_reg:x16; val_offset:440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 440, x17, x15, 440, x18)

inst_2088:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x8fffff; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_2089:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x700000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf00000; op2val:0x800000; valaddr_reg:x16; val_offset:456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 456, x17, x15, 456, x18)

inst_2090:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0xf00000; valaddr_reg:x16; val_offset:464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 464, x17, x15, 464, x18)

inst_2091:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x1fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x9fffff; op2val:0x800000; valaddr_reg:x16; val_offset:472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 472, x17, x15, 472, x18)

inst_2092:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x9fffff; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_2093:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x600000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xe00000; op2val:0x800000; valaddr_reg:x16; val_offset:488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 488, x17, x15, 488, x18)

inst_2094:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0xe00000; valaddr_reg:x16; val_offset:496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 496, x17, x15, 496, x18)

inst_2095:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x3fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbfffff; op2val:0x800000; valaddr_reg:x16; val_offset:504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 504, x17, x15, 504, x18)

inst_2096:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0xbfffff; valaddr_reg:x16; val_offset:512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 512, x17, x15, 512, x18)

inst_2097:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc00000; op2val:0x800000; valaddr_reg:x16; val_offset:520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 520, x17, x15, 520, x18)

inst_2098:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0xc00000; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_2099:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xffffff; op2val:0x800000; valaddr_reg:x16; val_offset:536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 536, x17, x15, 536, x18)

inst_2100:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0xffffff; valaddr_reg:x16; val_offset:544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 544, x17, x15, 544, x18)

inst_2101:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x800000; valaddr_reg:x16; val_offset:552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 552, x17, x15, 552, x18)

inst_2102:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x1; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_2103:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x800000; valaddr_reg:x16; val_offset:568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 568, x17, x15, 568, x18)

inst_2104:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x0; valaddr_reg:x16; val_offset:576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 576, x17, x15, 576, x18)

inst_2105:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7ffffe and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ffffe; op2val:0x800000; valaddr_reg:x16; val_offset:584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 584, x17, x15, 584, x18)

inst_2106:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x7ffffe; valaddr_reg:x16; val_offset:592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 592, x17, x15, 592, x18)

inst_2107:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000003 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3; op2val:0x800000; valaddr_reg:x16; val_offset:600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 600, x17, x15, 600, x18)

inst_2108:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x3; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 608, x17, x15, 608, x18)

inst_2109:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7ffffc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ffffc; op2val:0x800000; valaddr_reg:x16; val_offset:616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 616, x17, x15, 616, x18)

inst_2110:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x7ffffc; valaddr_reg:x16; val_offset:624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 624, x17, x15, 624, x18)

inst_2111:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000007 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7; op2val:0x800000; valaddr_reg:x16; val_offset:632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 632, x17, x15, 632, x18)

inst_2112:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x7; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_2113:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7ffff8 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ffff8; op2val:0x800000; valaddr_reg:x16; val_offset:648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 648, x17, x15, 648, x18)

inst_2114:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x7ffff8; valaddr_reg:x16; val_offset:656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 656, x17, x15, 656, x18)

inst_2115:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000f and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf; op2val:0x800000; valaddr_reg:x16; val_offset:664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 664, x17, x15, 664, x18)

inst_2116:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0xf; valaddr_reg:x16; val_offset:672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 672, x17, x15, 672, x18)

inst_2117:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7ffff0 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ffff0; op2val:0x800000; valaddr_reg:x16; val_offset:680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 680, x17, x15, 680, x18)

inst_2118:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x7ffff0; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 688, x17, x15, 688, x18)

inst_2119:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001f and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1f; op2val:0x800000; valaddr_reg:x16; val_offset:696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 696, x17, x15, 696, x18)

inst_2120:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x1f; valaddr_reg:x16; val_offset:704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 704, x17, x15, 704, x18)

inst_2121:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffe0 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffe0; op2val:0x800000; valaddr_reg:x16; val_offset:712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 712, x17, x15, 712, x18)

inst_2122:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x7fffe0; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_2123:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003f and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f; op2val:0x800000; valaddr_reg:x16; val_offset:728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 728, x17, x15, 728, x18)

inst_2124:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x3f; valaddr_reg:x16; val_offset:736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 736, x17, x15, 736, x18)

inst_2125:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffc0 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffc0; op2val:0x800000; valaddr_reg:x16; val_offset:744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 744, x17, x15, 744, x18)

inst_2126:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x7fffc0; valaddr_reg:x16; val_offset:752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 752, x17, x15, 752, x18)

inst_2127:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00007f and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f; op2val:0x800000; valaddr_reg:x16; val_offset:760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 760, x17, x15, 760, x18)

inst_2128:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x7f; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 768, x17, x15, 768, x18)

inst_2129:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fff80 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fff80; op2val:0x800000; valaddr_reg:x16; val_offset:776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 776, x17, x15, 776, x18)

inst_2130:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x7fff80; valaddr_reg:x16; val_offset:784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 784, x17, x15, 784, x18)

inst_2131:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0000ff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff; op2val:0x800000; valaddr_reg:x16; val_offset:792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 792, x17, x15, 792, x18)

inst_2132:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0xff; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_2133:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fff00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fff00; op2val:0x800000; valaddr_reg:x16; val_offset:808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 808, x17, x15, 808, x18)

inst_2134:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x7fff00; valaddr_reg:x16; val_offset:816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 816, x17, x15, 816, x18)

inst_2135:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0001ff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1ff; op2val:0x800000; valaddr_reg:x16; val_offset:824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 824, x17, x15, 824, x18)

inst_2136:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x1ff; valaddr_reg:x16; val_offset:832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 832, x17, x15, 832, x18)

inst_2137:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7ffe00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ffe00; op2val:0x800000; valaddr_reg:x16; val_offset:840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 840, x17, x15, 840, x18)

inst_2138:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x7ffe00; valaddr_reg:x16; val_offset:848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 848, x17, x15, 848, x18)

inst_2139:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0003ff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ff; op2val:0x800000; valaddr_reg:x16; val_offset:856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 856, x17, x15, 856, x18)

inst_2140:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x3ff; valaddr_reg:x16; val_offset:864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 864, x17, x15, 864, x18)

inst_2141:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7ffc00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ffc00; op2val:0x800000; valaddr_reg:x16; val_offset:872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 872, x17, x15, 872, x18)

inst_2142:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x7ffc00; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 880, x17, x15, 880, x18)

inst_2143:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0007ff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ff; op2val:0x800000; valaddr_reg:x16; val_offset:888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 888, x17, x15, 888, x18)

inst_2144:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x7ff; valaddr_reg:x16; val_offset:896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 896, x17, x15, 896, x18)

inst_2145:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7ff800 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ff800; op2val:0x800000; valaddr_reg:x16; val_offset:904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 904, x17, x15, 904, x18)

inst_2146:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x7ff800; valaddr_reg:x16; val_offset:912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 912, x17, x15, 912, x18)

inst_2147:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000fff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfff; op2val:0x800000; valaddr_reg:x16; val_offset:920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 920, x17, x15, 920, x18)

inst_2148:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0xfff; valaddr_reg:x16; val_offset:928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 928, x17, x15, 928, x18)

inst_2149:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7ff000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ff000; op2val:0x800000; valaddr_reg:x16; val_offset:936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 936, x17, x15, 936, x18)

inst_2150:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x7ff000; valaddr_reg:x16; val_offset:944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 944, x17, x15, 944, x18)

inst_2151:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x001fff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1fff; op2val:0x800000; valaddr_reg:x16; val_offset:952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 952, x17, x15, 952, x18)

inst_2152:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x1fff; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 960, x17, x15, 960, x18)

inst_2153:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fe000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fe000; op2val:0x800000; valaddr_reg:x16; val_offset:968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 968, x17, x15, 968, x18)

inst_2154:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x7fe000; valaddr_reg:x16; val_offset:976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 976, x17, x15, 976, x18)

inst_2155:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x003fff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3fff; op2val:0x800000; valaddr_reg:x16; val_offset:984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 984, x17, x15, 984, x18)

inst_2156:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x3fff; valaddr_reg:x16; val_offset:992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 992, x17, x15, 992, x18)

inst_2157:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fc000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fc000; op2val:0x800000; valaddr_reg:x16; val_offset:1000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1000, x17, x15, 1000, x18)

inst_2158:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x7fc000; valaddr_reg:x16; val_offset:1008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1008, x17, x15, 1008, x18)

inst_2159:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x007fff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fff; op2val:0x800000; valaddr_reg:x16; val_offset:1016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1016, x17, x15, 1016, x18)

inst_2160:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x7fff; valaddr_reg:x16; val_offset:1024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1024, x17, x15, 1024, x18)

inst_2161:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7f8000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f8000; op2val:0x800000; valaddr_reg:x16; val_offset:1032; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1032, x17, x15, 1032, x18)

inst_2162:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x7f8000; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1040, x17, x15, 1040, x18)

inst_2163:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00ffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xffff; op2val:0x800000; valaddr_reg:x16; val_offset:1048; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1048, x17, x15, 1048, x18)

inst_2164:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0xffff; valaddr_reg:x16; val_offset:1056; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1056, x17, x15, 1056, x18)

inst_2165:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7f0000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0000; op2val:0x800000; valaddr_reg:x16; val_offset:1064; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1064, x17, x15, 1064, x18)

inst_2166:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x7f0000; valaddr_reg:x16; val_offset:1072; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1072, x17, x15, 1072, x18)

inst_2167:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x01ffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1ffff; op2val:0x800000; valaddr_reg:x16; val_offset:1080; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1080, x17, x15, 1080, x18)

inst_2168:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x1ffff; valaddr_reg:x16; val_offset:1088; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1088, x17, x15, 1088, x18)

inst_2169:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7e0000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e0000; op2val:0x800000; valaddr_reg:x16; val_offset:1096; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1096, x17, x15, 1096, x18)

inst_2170:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x7e0000; valaddr_reg:x16; val_offset:1104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1104, x17, x15, 1104, x18)

inst_2171:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x03ffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ffff; op2val:0x800000; valaddr_reg:x16; val_offset:1112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1112, x17, x15, 1112, x18)

inst_2172:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x3ffff; valaddr_reg:x16; val_offset:1120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1120, x17, x15, 1120, x18)

inst_2173:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7c0000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7c0000; op2val:0x800000; valaddr_reg:x16; val_offset:1128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1128, x17, x15, 1128, x18)

inst_2174:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x7c0000; valaddr_reg:x16; val_offset:1136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1136, x17, x15, 1136, x18)

inst_2175:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x07ffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ffff; op2val:0x800000; valaddr_reg:x16; val_offset:1144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1144, x17, x15, 1144, x18)

inst_2176:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x7ffff; valaddr_reg:x16; val_offset:1152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1152, x17, x15, 1152, x18)

inst_2177:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x780000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x780000; op2val:0x800000; valaddr_reg:x16; val_offset:1160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1160, x17, x15, 1160, x18)

inst_2178:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x780000; valaddr_reg:x16; val_offset:1168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1168, x17, x15, 1168, x18)

inst_2179:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfffff; op2val:0x800000; valaddr_reg:x16; val_offset:1176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1176, x17, x15, 1176, x18)

inst_2180:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0xfffff; valaddr_reg:x16; val_offset:1184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1184, x17, x15, 1184, x18)

inst_2181:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x700000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x700000; op2val:0x800000; valaddr_reg:x16; val_offset:1192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1192, x17, x15, 1192, x18)

inst_2182:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x700000; valaddr_reg:x16; val_offset:1200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1200, x17, x15, 1200, x18)

inst_2183:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x1fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1fffff; op2val:0x800000; valaddr_reg:x16; val_offset:1208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1208, x17, x15, 1208, x18)

inst_2184:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x1fffff; valaddr_reg:x16; val_offset:1216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1216, x17, x15, 1216, x18)

inst_2185:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x600000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x600000; op2val:0x800000; valaddr_reg:x16; val_offset:1224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1224, x17, x15, 1224, x18)

inst_2186:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x600000; valaddr_reg:x16; val_offset:1232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1232, x17, x15, 1232, x18)

inst_2187:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x3fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3fffff; op2val:0x800000; valaddr_reg:x16; val_offset:1240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1240, x17, x15, 1240, x18)

inst_2188:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x3fffff; valaddr_reg:x16; val_offset:1248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1248, x17, x15, 1248, x18)

inst_2189:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x400000; op2val:0x800000; valaddr_reg:x16; val_offset:1256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1256, x17, x15, 1256, x18)

inst_2190:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x400000; valaddr_reg:x16; val_offset:1264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1264, x17, x15, 1264, x18)

inst_2191:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x800000; valaddr_reg:x16; val_offset:1272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1272, x17, x15, 1272, x18)

inst_2192:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x7fffff; valaddr_reg:x16; val_offset:1280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1280, x17, x15, 1280, x18)

inst_2193:
// fs1 == 0 and fe1 == 0x6c and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x36000001; op2val:0x800000; valaddr_reg:x16; val_offset:1288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1288, x17, x15, 1288, x18)

inst_2194:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6c and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x36000001; valaddr_reg:x16; val_offset:1296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1296, x17, x15, 1296, x18)

inst_2195:
// fs1 == 0 and fe1 == 0x6c and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x36000000; op2val:0x800000; valaddr_reg:x16; val_offset:1304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1304, x17, x15, 1304, x18)

inst_2196:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6c and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x36000000; valaddr_reg:x16; val_offset:1312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1312, x17, x15, 1312, x18)

inst_2197:
// fs1 == 0 and fe1 == 0x6c and fm1 == 0x7ffffe and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x367ffffe; op2val:0x800000; valaddr_reg:x16; val_offset:1320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1320, x17, x15, 1320, x18)

inst_2198:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6c and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x367ffffe; valaddr_reg:x16; val_offset:1328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1328, x17, x15, 1328, x18)

inst_2199:
// fs1 == 0 and fe1 == 0x6c and fm1 == 0x000003 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x36000003; op2val:0x800000; valaddr_reg:x16; val_offset:1336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1336, x17, x15, 1336, x18)

inst_2200:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6c and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x36000003; valaddr_reg:x16; val_offset:1344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1344, x17, x15, 1344, x18)

inst_2201:
// fs1 == 0 and fe1 == 0x6c and fm1 == 0x7ffffc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x367ffffc; op2val:0x800000; valaddr_reg:x16; val_offset:1352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1352, x17, x15, 1352, x18)

inst_2202:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6c and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x367ffffc; valaddr_reg:x16; val_offset:1360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1360, x17, x15, 1360, x18)

inst_2203:
// fs1 == 0 and fe1 == 0x6c and fm1 == 0x000007 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x36000007; op2val:0x800000; valaddr_reg:x16; val_offset:1368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1368, x17, x15, 1368, x18)

inst_2204:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6c and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x36000007; valaddr_reg:x16; val_offset:1376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1376, x17, x15, 1376, x18)

inst_2205:
// fs1 == 0 and fe1 == 0x6c and fm1 == 0x7ffff8 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x367ffff8; op2val:0x800000; valaddr_reg:x16; val_offset:1384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1384, x17, x15, 1384, x18)

inst_2206:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6c and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x367ffff8; valaddr_reg:x16; val_offset:1392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1392, x17, x15, 1392, x18)

inst_2207:
// fs1 == 0 and fe1 == 0x6c and fm1 == 0x00000f and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3600000f; op2val:0x800000; valaddr_reg:x16; val_offset:1400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1400, x17, x15, 1400, x18)

inst_2208:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6c and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x3600000f; valaddr_reg:x16; val_offset:1408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1408, x17, x15, 1408, x18)

inst_2209:
// fs1 == 0 and fe1 == 0x6c and fm1 == 0x7ffff0 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x367ffff0; op2val:0x800000; valaddr_reg:x16; val_offset:1416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1416, x17, x15, 1416, x18)

inst_2210:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6c and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x367ffff0; valaddr_reg:x16; val_offset:1424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1424, x17, x15, 1424, x18)

inst_2211:
// fs1 == 0 and fe1 == 0x6c and fm1 == 0x00001f and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3600001f; op2val:0x800000; valaddr_reg:x16; val_offset:1432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1432, x17, x15, 1432, x18)

inst_2212:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6c and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x3600001f; valaddr_reg:x16; val_offset:1440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1440, x17, x15, 1440, x18)

inst_2213:
// fs1 == 0 and fe1 == 0x6c and fm1 == 0x7fffe0 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x367fffe0; op2val:0x800000; valaddr_reg:x16; val_offset:1448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1448, x17, x15, 1448, x18)

inst_2214:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6c and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x367fffe0; valaddr_reg:x16; val_offset:1456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1456, x17, x15, 1456, x18)

inst_2215:
// fs1 == 0 and fe1 == 0x6c and fm1 == 0x00003f and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3600003f; op2val:0x800000; valaddr_reg:x16; val_offset:1464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1464, x17, x15, 1464, x18)

inst_2216:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6c and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x3600003f; valaddr_reg:x16; val_offset:1472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1472, x17, x15, 1472, x18)

inst_2217:
// fs1 == 0 and fe1 == 0x6c and fm1 == 0x7fffc0 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x367fffc0; op2val:0x800000; valaddr_reg:x16; val_offset:1480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1480, x17, x15, 1480, x18)

inst_2218:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6c and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x367fffc0; valaddr_reg:x16; val_offset:1488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1488, x17, x15, 1488, x18)

inst_2219:
// fs1 == 0 and fe1 == 0x6c and fm1 == 0x00007f and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3600007f; op2val:0x800000; valaddr_reg:x16; val_offset:1496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1496, x17, x15, 1496, x18)

inst_2220:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6c and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x3600007f; valaddr_reg:x16; val_offset:1504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1504, x17, x15, 1504, x18)

inst_2221:
// fs1 == 0 and fe1 == 0x6c and fm1 == 0x7fff80 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x367fff80; op2val:0x800000; valaddr_reg:x16; val_offset:1512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1512, x17, x15, 1512, x18)

inst_2222:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6c and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x367fff80; valaddr_reg:x16; val_offset:1520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1520, x17, x15, 1520, x18)

inst_2223:
// fs1 == 0 and fe1 == 0x6c and fm1 == 0x0000ff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x360000ff; op2val:0x800000; valaddr_reg:x16; val_offset:1528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1528, x17, x15, 1528, x18)

inst_2224:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6c and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x360000ff; valaddr_reg:x16; val_offset:1536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1536, x17, x15, 1536, x18)

inst_2225:
// fs1 == 0 and fe1 == 0x6c and fm1 == 0x7fff00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x367fff00; op2val:0x800000; valaddr_reg:x16; val_offset:1544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1544, x17, x15, 1544, x18)

inst_2226:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6c and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x367fff00; valaddr_reg:x16; val_offset:1552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1552, x17, x15, 1552, x18)

inst_2227:
// fs1 == 0 and fe1 == 0x6c and fm1 == 0x0001ff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x360001ff; op2val:0x800000; valaddr_reg:x16; val_offset:1560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1560, x17, x15, 1560, x18)

inst_2228:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6c and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x360001ff; valaddr_reg:x16; val_offset:1568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1568, x17, x15, 1568, x18)

inst_2229:
// fs1 == 0 and fe1 == 0x6c and fm1 == 0x7ffe00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x367ffe00; op2val:0x800000; valaddr_reg:x16; val_offset:1576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1576, x17, x15, 1576, x18)

inst_2230:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6c and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x367ffe00; valaddr_reg:x16; val_offset:1584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1584, x17, x15, 1584, x18)

inst_2231:
// fs1 == 0 and fe1 == 0x6c and fm1 == 0x0003ff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x360003ff; op2val:0x800000; valaddr_reg:x16; val_offset:1592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1592, x17, x15, 1592, x18)

inst_2232:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6c and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x360003ff; valaddr_reg:x16; val_offset:1600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1600, x17, x15, 1600, x18)

inst_2233:
// fs1 == 0 and fe1 == 0x6c and fm1 == 0x7ffc00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x367ffc00; op2val:0x800000; valaddr_reg:x16; val_offset:1608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1608, x17, x15, 1608, x18)

inst_2234:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6c and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x367ffc00; valaddr_reg:x16; val_offset:1616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1616, x17, x15, 1616, x18)

inst_2235:
// fs1 == 0 and fe1 == 0x6c and fm1 == 0x0007ff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x360007ff; op2val:0x800000; valaddr_reg:x16; val_offset:1624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1624, x17, x15, 1624, x18)

inst_2236:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6c and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x360007ff; valaddr_reg:x16; val_offset:1632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1632, x17, x15, 1632, x18)

inst_2237:
// fs1 == 0 and fe1 == 0x6c and fm1 == 0x7ff800 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x367ff800; op2val:0x800000; valaddr_reg:x16; val_offset:1640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1640, x17, x15, 1640, x18)

inst_2238:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6c and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x367ff800; valaddr_reg:x16; val_offset:1648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1648, x17, x15, 1648, x18)

inst_2239:
// fs1 == 0 and fe1 == 0x6c and fm1 == 0x000fff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x36000fff; op2val:0x800000; valaddr_reg:x16; val_offset:1656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1656, x17, x15, 1656, x18)

inst_2240:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6c and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x36000fff; valaddr_reg:x16; val_offset:1664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1664, x17, x15, 1664, x18)

inst_2241:
// fs1 == 0 and fe1 == 0x6c and fm1 == 0x7ff000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x367ff000; op2val:0x800000; valaddr_reg:x16; val_offset:1672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1672, x17, x15, 1672, x18)

inst_2242:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6c and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x367ff000; valaddr_reg:x16; val_offset:1680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1680, x17, x15, 1680, x18)

inst_2243:
// fs1 == 0 and fe1 == 0x6c and fm1 == 0x001fff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x36001fff; op2val:0x800000; valaddr_reg:x16; val_offset:1688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1688, x17, x15, 1688, x18)

inst_2244:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6c and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x36001fff; valaddr_reg:x16; val_offset:1696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1696, x17, x15, 1696, x18)

inst_2245:
// fs1 == 0 and fe1 == 0x6c and fm1 == 0x7fe000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x367fe000; op2val:0x800000; valaddr_reg:x16; val_offset:1704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1704, x17, x15, 1704, x18)

inst_2246:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6c and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x367fe000; valaddr_reg:x16; val_offset:1712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1712, x17, x15, 1712, x18)

inst_2247:
// fs1 == 0 and fe1 == 0x6c and fm1 == 0x003fff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x36003fff; op2val:0x800000; valaddr_reg:x16; val_offset:1720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1720, x17, x15, 1720, x18)

inst_2248:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6c and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x36003fff; valaddr_reg:x16; val_offset:1728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1728, x17, x15, 1728, x18)

inst_2249:
// fs1 == 0 and fe1 == 0x6c and fm1 == 0x7fc000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x367fc000; op2val:0x800000; valaddr_reg:x16; val_offset:1736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1736, x17, x15, 1736, x18)

inst_2250:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6c and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x367fc000; valaddr_reg:x16; val_offset:1744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1744, x17, x15, 1744, x18)

inst_2251:
// fs1 == 0 and fe1 == 0x6c and fm1 == 0x007fff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x36007fff; op2val:0x800000; valaddr_reg:x16; val_offset:1752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1752, x17, x15, 1752, x18)

inst_2252:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6c and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x36007fff; valaddr_reg:x16; val_offset:1760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1760, x17, x15, 1760, x18)

inst_2253:
// fs1 == 0 and fe1 == 0x6c and fm1 == 0x7f8000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x367f8000; op2val:0x800000; valaddr_reg:x16; val_offset:1768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1768, x17, x15, 1768, x18)

inst_2254:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6c and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x367f8000; valaddr_reg:x16; val_offset:1776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1776, x17, x15, 1776, x18)

inst_2255:
// fs1 == 0 and fe1 == 0x6c and fm1 == 0x00ffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3600ffff; op2val:0x800000; valaddr_reg:x16; val_offset:1784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1784, x17, x15, 1784, x18)

inst_2256:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6c and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x3600ffff; valaddr_reg:x16; val_offset:1792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1792, x17, x15, 1792, x18)

inst_2257:
// fs1 == 0 and fe1 == 0x6c and fm1 == 0x7f0000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x367f0000; op2val:0x800000; valaddr_reg:x16; val_offset:1800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1800, x17, x15, 1800, x18)

inst_2258:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6c and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x367f0000; valaddr_reg:x16; val_offset:1808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1808, x17, x15, 1808, x18)

inst_2259:
// fs1 == 0 and fe1 == 0x6c and fm1 == 0x01ffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3601ffff; op2val:0x800000; valaddr_reg:x16; val_offset:1816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1816, x17, x15, 1816, x18)

inst_2260:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6c and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x3601ffff; valaddr_reg:x16; val_offset:1824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1824, x17, x15, 1824, x18)

inst_2261:
// fs1 == 0 and fe1 == 0x6c and fm1 == 0x7e0000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x367e0000; op2val:0x800000; valaddr_reg:x16; val_offset:1832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1832, x17, x15, 1832, x18)

inst_2262:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6c and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x367e0000; valaddr_reg:x16; val_offset:1840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1840, x17, x15, 1840, x18)

inst_2263:
// fs1 == 0 and fe1 == 0x6c and fm1 == 0x03ffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3603ffff; op2val:0x800000; valaddr_reg:x16; val_offset:1848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1848, x17, x15, 1848, x18)

inst_2264:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6c and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x3603ffff; valaddr_reg:x16; val_offset:1856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1856, x17, x15, 1856, x18)

inst_2265:
// fs1 == 0 and fe1 == 0x6c and fm1 == 0x7c0000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x367c0000; op2val:0x800000; valaddr_reg:x16; val_offset:1864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1864, x17, x15, 1864, x18)

inst_2266:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6c and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x367c0000; valaddr_reg:x16; val_offset:1872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1872, x17, x15, 1872, x18)

inst_2267:
// fs1 == 0 and fe1 == 0x6c and fm1 == 0x07ffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3607ffff; op2val:0x800000; valaddr_reg:x16; val_offset:1880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1880, x17, x15, 1880, x18)

inst_2268:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6c and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x3607ffff; valaddr_reg:x16; val_offset:1888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1888, x17, x15, 1888, x18)

inst_2269:
// fs1 == 0 and fe1 == 0x6c and fm1 == 0x780000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x36780000; op2val:0x800000; valaddr_reg:x16; val_offset:1896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1896, x17, x15, 1896, x18)

inst_2270:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6c and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x36780000; valaddr_reg:x16; val_offset:1904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1904, x17, x15, 1904, x18)

inst_2271:
// fs1 == 0 and fe1 == 0x6c and fm1 == 0x0fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x360fffff; op2val:0x800000; valaddr_reg:x16; val_offset:1912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1912, x17, x15, 1912, x18)

inst_2272:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6c and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x360fffff; valaddr_reg:x16; val_offset:1920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1920, x17, x15, 1920, x18)

inst_2273:
// fs1 == 0 and fe1 == 0x6c and fm1 == 0x700000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x36700000; op2val:0x800000; valaddr_reg:x16; val_offset:1928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1928, x17, x15, 1928, x18)

inst_2274:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6c and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x36700000; valaddr_reg:x16; val_offset:1936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1936, x17, x15, 1936, x18)

inst_2275:
// fs1 == 0 and fe1 == 0x6c and fm1 == 0x1fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x361fffff; op2val:0x800000; valaddr_reg:x16; val_offset:1944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1944, x17, x15, 1944, x18)

inst_2276:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6c and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x361fffff; valaddr_reg:x16; val_offset:1952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1952, x17, x15, 1952, x18)

inst_2277:
// fs1 == 0 and fe1 == 0x6c and fm1 == 0x600000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x36600000; op2val:0x800000; valaddr_reg:x16; val_offset:1960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1960, x17, x15, 1960, x18)

inst_2278:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6c and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x36600000; valaddr_reg:x16; val_offset:1968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1968, x17, x15, 1968, x18)

inst_2279:
// fs1 == 0 and fe1 == 0x6c and fm1 == 0x3fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x363fffff; op2val:0x800000; valaddr_reg:x16; val_offset:1976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1976, x17, x15, 1976, x18)

inst_2280:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6c and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x363fffff; valaddr_reg:x16; val_offset:1984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1984, x17, x15, 1984, x18)

inst_2281:
// fs1 == 0 and fe1 == 0x6c and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x36400000; op2val:0x800000; valaddr_reg:x16; val_offset:1992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1992, x17, x15, 1992, x18)

inst_2282:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6c and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x36400000; valaddr_reg:x16; val_offset:2000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2000, x17, x15, 2000, x18)

inst_2283:
// fs1 == 0 and fe1 == 0x6c and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x367fffff; op2val:0x800000; valaddr_reg:x16; val_offset:2008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2008, x17, x15, 2008, x18)

inst_2284:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6c and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000; op2val:0x367fffff; valaddr_reg:x16; val_offset:2016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2016, x17, x15, 2016, x18)

inst_2285:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x4ccccc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x804ccccc; op2val:0x807fffff; valaddr_reg:x16; val_offset:2024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_10)

inst_2286:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4ccccc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x804ccccc; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_2287:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x333333 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80333333; op2val:0x807fffff; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 8, x17, x15, 8, x18)

inst_2288:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x333333 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x80333333; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 16, x17, x15, 16, x18)

inst_2289:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x5b6db6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x805b6db6; op2val:0x807fffff; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 24, x17, x15, 24, x18)

inst_2290:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5b6db6 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x805b6db6; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 32, x17, x15, 32, x18)

inst_2291:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x249249 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80249249; op2val:0x807fffff; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 40, x17, x15, 40, x18)

inst_2292:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x249249 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x80249249; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_2293:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x444444 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80444444; op2val:0x807fffff; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 56, x17, x15, 56, x18)

inst_2294:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x444444 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x80444444; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 64, x17, x15, 64, x18)

inst_2295:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x3bbbbb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x803bbbbb; op2val:0x807fffff; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 72, x17, x15, 72, x18)

inst_2296:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3bbbbb and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x803bbbbb; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_2297:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x666666 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80666666; op2val:0x807fffff; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 88, x17, x15, 88, x18)

inst_2298:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x666666 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x80666666; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 96, x17, x15, 96, x18)

inst_2299:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x199999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80199999; op2val:0x807fffff; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 104, x17, x15, 104, x18)

inst_2300:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x199999 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x80199999; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 112, x17, x15, 112, x18)

inst_2301:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x6db6db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x806db6db; op2val:0x807fffff; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 120, x17, x15, 120, x18)

inst_2302:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6db6db and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x806db6db; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_2303:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x36db6d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8036db6d; op2val:0x807fffff; valaddr_reg:x16; val_offset:136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 136, x17, x15, 136, x18)

inst_2304:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x36db6d and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x8036db6d; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 144, x17, x15, 144, x18)

inst_2305:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x807fffff; valaddr_reg:x16; val_offset:152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 152, x17, x15, 152, x18)

inst_2306:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x80000001; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_2307:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ffffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807ffffe; op2val:0x807fffff; valaddr_reg:x16; val_offset:168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 168, x17, x15, 168, x18)

inst_2308:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x807ffffe; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 176, x17, x15, 176, x18)

inst_2309:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000003 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000003; op2val:0x807fffff; valaddr_reg:x16; val_offset:184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 184, x17, x15, 184, x18)

inst_2310:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x80000003; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 192, x17, x15, 192, x18)

inst_2311:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ffffc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807ffffc; op2val:0x807fffff; valaddr_reg:x16; val_offset:200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 200, x17, x15, 200, x18)

inst_2312:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x807ffffc; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_2313:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000007 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000007; op2val:0x807fffff; valaddr_reg:x16; val_offset:216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 216, x17, x15, 216, x18)

inst_2314:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x80000007; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 224, x17, x15, 224, x18)

inst_2315:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ffff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807ffff8; op2val:0x807fffff; valaddr_reg:x16; val_offset:232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 232, x17, x15, 232, x18)

inst_2316:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x807ffff8; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_2317:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81800001; op2val:0x807fffff; valaddr_reg:x16; val_offset:248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 248, x17, x15, 248, x18)

inst_2318:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x03 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x81800001; valaddr_reg:x16; val_offset:256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 256, x17, x15, 256, x18)

inst_2319:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7ffffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81fffffe; op2val:0x807fffff; valaddr_reg:x16; val_offset:264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 264, x17, x15, 264, x18)

inst_2320:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x81fffffe; valaddr_reg:x16; val_offset:272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 272, x17, x15, 272, x18)

inst_2321:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x000003 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81800003; op2val:0x807fffff; valaddr_reg:x16; val_offset:280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 280, x17, x15, 280, x18)

inst_2322:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x03 and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x81800003; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_2323:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7ffffc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81fffffc; op2val:0x807fffff; valaddr_reg:x16; val_offset:296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 296, x17, x15, 296, x18)

inst_2324:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x81fffffc; valaddr_reg:x16; val_offset:304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 304, x17, x15, 304, x18)

inst_2325:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x000007 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81800007; op2val:0x807fffff; valaddr_reg:x16; val_offset:312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 312, x17, x15, 312, x18)

inst_2326:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x03 and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x81800007; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_2327:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7ffff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81fffff8; op2val:0x807fffff; valaddr_reg:x16; val_offset:328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 328, x17, x15, 328, x18)

inst_2328:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x81fffff8; valaddr_reg:x16; val_offset:336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 336, x17, x15, 336, x18)

inst_2329:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x00000f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8180000f; op2val:0x807fffff; valaddr_reg:x16; val_offset:344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 344, x17, x15, 344, x18)

inst_2330:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x03 and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x8180000f; valaddr_reg:x16; val_offset:352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 352, x17, x15, 352, x18)

inst_2331:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7ffff0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81fffff0; op2val:0x807fffff; valaddr_reg:x16; val_offset:360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 360, x17, x15, 360, x18)

inst_2332:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x81fffff0; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_2333:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x00001f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8180001f; op2val:0x807fffff; valaddr_reg:x16; val_offset:376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 376, x17, x15, 376, x18)

inst_2334:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x03 and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x8180001f; valaddr_reg:x16; val_offset:384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 384, x17, x15, 384, x18)

inst_2335:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7fffe0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81ffffe0; op2val:0x807fffff; valaddr_reg:x16; val_offset:392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 392, x17, x15, 392, x18)

inst_2336:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x81ffffe0; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_2337:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8180003f; op2val:0x807fffff; valaddr_reg:x16; val_offset:408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 408, x17, x15, 408, x18)

inst_2338:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x03 and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x8180003f; valaddr_reg:x16; val_offset:416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 416, x17, x15, 416, x18)

inst_2339:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7fffc0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81ffffc0; op2val:0x807fffff; valaddr_reg:x16; val_offset:424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 424, x17, x15, 424, x18)

inst_2340:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x81ffffc0; valaddr_reg:x16; val_offset:432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 432, x17, x15, 432, x18)

inst_2341:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x00007f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8180007f; op2val:0x807fffff; valaddr_reg:x16; val_offset:440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 440, x17, x15, 440, x18)

inst_2342:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x03 and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x8180007f; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_2343:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7fff80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81ffff80; op2val:0x807fffff; valaddr_reg:x16; val_offset:456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 456, x17, x15, 456, x18)

inst_2344:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x81ffff80; valaddr_reg:x16; val_offset:464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 464, x17, x15, 464, x18)

inst_2345:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x0000ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x818000ff; op2val:0x807fffff; valaddr_reg:x16; val_offset:472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 472, x17, x15, 472, x18)

inst_2346:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x818000ff; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_2347:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7fff00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81ffff00; op2val:0x807fffff; valaddr_reg:x16; val_offset:488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 488, x17, x15, 488, x18)

inst_2348:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x81ffff00; valaddr_reg:x16; val_offset:496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 496, x17, x15, 496, x18)

inst_2349:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x0001ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x818001ff; op2val:0x807fffff; valaddr_reg:x16; val_offset:504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 504, x17, x15, 504, x18)

inst_2350:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x818001ff; valaddr_reg:x16; val_offset:512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 512, x17, x15, 512, x18)

inst_2351:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7ffe00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81fffe00; op2val:0x807fffff; valaddr_reg:x16; val_offset:520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 520, x17, x15, 520, x18)

inst_2352:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x81fffe00; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_2353:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x0003ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x818003ff; op2val:0x807fffff; valaddr_reg:x16; val_offset:536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 536, x17, x15, 536, x18)

inst_2354:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x818003ff; valaddr_reg:x16; val_offset:544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 544, x17, x15, 544, x18)

inst_2355:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7ffc00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81fffc00; op2val:0x807fffff; valaddr_reg:x16; val_offset:552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 552, x17, x15, 552, x18)

inst_2356:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x81fffc00; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_2357:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x0007ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x818007ff; op2val:0x807fffff; valaddr_reg:x16; val_offset:568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 568, x17, x15, 568, x18)

inst_2358:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x818007ff; valaddr_reg:x16; val_offset:576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 576, x17, x15, 576, x18)

inst_2359:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7ff800 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81fff800; op2val:0x807fffff; valaddr_reg:x16; val_offset:584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 584, x17, x15, 584, x18)

inst_2360:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x81fff800; valaddr_reg:x16; val_offset:592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 592, x17, x15, 592, x18)

inst_2361:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x000fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81800fff; op2val:0x807fffff; valaddr_reg:x16; val_offset:600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 600, x17, x15, 600, x18)

inst_2362:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x03 and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x81800fff; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 608, x17, x15, 608, x18)

inst_2363:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7ff000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81fff000; op2val:0x807fffff; valaddr_reg:x16; val_offset:616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 616, x17, x15, 616, x18)

inst_2364:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x81fff000; valaddr_reg:x16; val_offset:624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 624, x17, x15, 624, x18)

inst_2365:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x001fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81801fff; op2val:0x807fffff; valaddr_reg:x16; val_offset:632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 632, x17, x15, 632, x18)

inst_2366:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x03 and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x81801fff; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_2367:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7fe000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81ffe000; op2val:0x807fffff; valaddr_reg:x16; val_offset:648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 648, x17, x15, 648, x18)

inst_2368:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x81ffe000; valaddr_reg:x16; val_offset:656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 656, x17, x15, 656, x18)

inst_2369:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x003fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81803fff; op2val:0x807fffff; valaddr_reg:x16; val_offset:664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 664, x17, x15, 664, x18)

inst_2370:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x03 and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x81803fff; valaddr_reg:x16; val_offset:672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 672, x17, x15, 672, x18)

inst_2371:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7fc000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81ffc000; op2val:0x807fffff; valaddr_reg:x16; val_offset:680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 680, x17, x15, 680, x18)

inst_2372:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x81ffc000; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 688, x17, x15, 688, x18)

inst_2373:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x007fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81807fff; op2val:0x807fffff; valaddr_reg:x16; val_offset:696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 696, x17, x15, 696, x18)

inst_2374:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x03 and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x81807fff; valaddr_reg:x16; val_offset:704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 704, x17, x15, 704, x18)

inst_2375:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7f8000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81ff8000; op2val:0x807fffff; valaddr_reg:x16; val_offset:712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 712, x17, x15, 712, x18)

inst_2376:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x81ff8000; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_2377:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x00ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8180ffff; op2val:0x807fffff; valaddr_reg:x16; val_offset:728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 728, x17, x15, 728, x18)

inst_2378:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x03 and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x8180ffff; valaddr_reg:x16; val_offset:736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 736, x17, x15, 736, x18)

inst_2379:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7f0000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81ff0000; op2val:0x807fffff; valaddr_reg:x16; val_offset:744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 744, x17, x15, 744, x18)

inst_2380:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x81ff0000; valaddr_reg:x16; val_offset:752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 752, x17, x15, 752, x18)

inst_2381:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x01ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8181ffff; op2val:0x807fffff; valaddr_reg:x16; val_offset:760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 760, x17, x15, 760, x18)

inst_2382:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x03 and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x8181ffff; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 768, x17, x15, 768, x18)

inst_2383:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7e0000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81fe0000; op2val:0x807fffff; valaddr_reg:x16; val_offset:776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 776, x17, x15, 776, x18)

inst_2384:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x81fe0000; valaddr_reg:x16; val_offset:784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 784, x17, x15, 784, x18)

inst_2385:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x03ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8183ffff; op2val:0x807fffff; valaddr_reg:x16; val_offset:792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 792, x17, x15, 792, x18)

inst_2386:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x03 and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x8183ffff; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_2387:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7c0000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81fc0000; op2val:0x807fffff; valaddr_reg:x16; val_offset:808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 808, x17, x15, 808, x18)

inst_2388:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x81fc0000; valaddr_reg:x16; val_offset:816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 816, x17, x15, 816, x18)

inst_2389:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x07ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8187ffff; op2val:0x807fffff; valaddr_reg:x16; val_offset:824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 824, x17, x15, 824, x18)

inst_2390:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x03 and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x8187ffff; valaddr_reg:x16; val_offset:832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 832, x17, x15, 832, x18)

inst_2391:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x780000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81f80000; op2val:0x807fffff; valaddr_reg:x16; val_offset:840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 840, x17, x15, 840, x18)

inst_2392:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x03 and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x81f80000; valaddr_reg:x16; val_offset:848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 848, x17, x15, 848, x18)

inst_2393:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x0fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x818fffff; op2val:0x807fffff; valaddr_reg:x16; val_offset:856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 856, x17, x15, 856, x18)

inst_2394:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x818fffff; valaddr_reg:x16; val_offset:864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 864, x17, x15, 864, x18)

inst_2395:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x700000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81f00000; op2val:0x807fffff; valaddr_reg:x16; val_offset:872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 872, x17, x15, 872, x18)

inst_2396:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x03 and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x81f00000; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 880, x17, x15, 880, x18)

inst_2397:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x1fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x819fffff; op2val:0x807fffff; valaddr_reg:x16; val_offset:888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 888, x17, x15, 888, x18)

inst_2398:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x03 and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x819fffff; valaddr_reg:x16; val_offset:896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 896, x17, x15, 896, x18)

inst_2399:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x600000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81e00000; op2val:0x807fffff; valaddr_reg:x16; val_offset:904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 904, x17, x15, 904, x18)

inst_2400:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x03 and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x81e00000; valaddr_reg:x16; val_offset:912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 912, x17, x15, 912, x18)

inst_2401:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x3fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81bfffff; op2val:0x807fffff; valaddr_reg:x16; val_offset:920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 920, x17, x15, 920, x18)

inst_2402:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x03 and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x81bfffff; valaddr_reg:x16; val_offset:928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 928, x17, x15, 928, x18)

inst_2403:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81c00000; op2val:0x807fffff; valaddr_reg:x16; val_offset:936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 936, x17, x15, 936, x18)

inst_2404:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x03 and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x81c00000; valaddr_reg:x16; val_offset:944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 944, x17, x15, 944, x18)

inst_2405:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81ffffff; op2val:0x807fffff; valaddr_reg:x16; val_offset:952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 952, x17, x15, 952, x18)

inst_2406:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x81ffffff; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 960, x17, x15, 960, x18)

inst_2407:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81800000; op2val:0x807fffff; valaddr_reg:x16; val_offset:968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 968, x17, x15, 968, x18)

inst_2408:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x03 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x81800000; valaddr_reg:x16; val_offset:976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 976, x17, x15, 976, x18)

inst_2409:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81000001; op2val:0x807fffff; valaddr_reg:x16; val_offset:984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 984, x17, x15, 984, x18)

inst_2410:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x02 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x81000001; valaddr_reg:x16; val_offset:992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 992, x17, x15, 992, x18)

inst_2411:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7ffffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817ffffe; op2val:0x807fffff; valaddr_reg:x16; val_offset:1000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1000, x17, x15, 1000, x18)

inst_2412:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x817ffffe; valaddr_reg:x16; val_offset:1008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1008, x17, x15, 1008, x18)

inst_2413:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x000003 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81000003; op2val:0x807fffff; valaddr_reg:x16; val_offset:1016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1016, x17, x15, 1016, x18)

inst_2414:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x02 and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x81000003; valaddr_reg:x16; val_offset:1024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1024, x17, x15, 1024, x18)

inst_2415:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7ffffc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817ffffc; op2val:0x807fffff; valaddr_reg:x16; val_offset:1032; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1032, x17, x15, 1032, x18)

inst_2416:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x817ffffc; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1040, x17, x15, 1040, x18)

inst_2417:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x000007 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81000007; op2val:0x807fffff; valaddr_reg:x16; val_offset:1048; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1048, x17, x15, 1048, x18)

inst_2418:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x02 and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x81000007; valaddr_reg:x16; val_offset:1056; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1056, x17, x15, 1056, x18)

inst_2419:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7ffff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817ffff8; op2val:0x807fffff; valaddr_reg:x16; val_offset:1064; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1064, x17, x15, 1064, x18)

inst_2420:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x817ffff8; valaddr_reg:x16; val_offset:1072; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1072, x17, x15, 1072, x18)

inst_2421:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x00000f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8100000f; op2val:0x807fffff; valaddr_reg:x16; val_offset:1080; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1080, x17, x15, 1080, x18)

inst_2422:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x02 and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x8100000f; valaddr_reg:x16; val_offset:1088; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1088, x17, x15, 1088, x18)

inst_2423:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7ffff0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817ffff0; op2val:0x807fffff; valaddr_reg:x16; val_offset:1096; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1096, x17, x15, 1096, x18)

inst_2424:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x817ffff0; valaddr_reg:x16; val_offset:1104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1104, x17, x15, 1104, x18)

inst_2425:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x00001f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8100001f; op2val:0x807fffff; valaddr_reg:x16; val_offset:1112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1112, x17, x15, 1112, x18)

inst_2426:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x02 and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x8100001f; valaddr_reg:x16; val_offset:1120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1120, x17, x15, 1120, x18)

inst_2427:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7fffe0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817fffe0; op2val:0x807fffff; valaddr_reg:x16; val_offset:1128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1128, x17, x15, 1128, x18)

inst_2428:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x817fffe0; valaddr_reg:x16; val_offset:1136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1136, x17, x15, 1136, x18)

inst_2429:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8100003f; op2val:0x807fffff; valaddr_reg:x16; val_offset:1144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1144, x17, x15, 1144, x18)

inst_2430:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x02 and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x8100003f; valaddr_reg:x16; val_offset:1152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1152, x17, x15, 1152, x18)

inst_2431:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7fffc0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817fffc0; op2val:0x807fffff; valaddr_reg:x16; val_offset:1160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1160, x17, x15, 1160, x18)

inst_2432:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x817fffc0; valaddr_reg:x16; val_offset:1168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1168, x17, x15, 1168, x18)

inst_2433:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x00007f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8100007f; op2val:0x807fffff; valaddr_reg:x16; val_offset:1176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1176, x17, x15, 1176, x18)

inst_2434:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x02 and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x8100007f; valaddr_reg:x16; val_offset:1184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1184, x17, x15, 1184, x18)

inst_2435:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7fff80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817fff80; op2val:0x807fffff; valaddr_reg:x16; val_offset:1192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1192, x17, x15, 1192, x18)

inst_2436:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x817fff80; valaddr_reg:x16; val_offset:1200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1200, x17, x15, 1200, x18)

inst_2437:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x0000ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x810000ff; op2val:0x807fffff; valaddr_reg:x16; val_offset:1208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1208, x17, x15, 1208, x18)

inst_2438:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x810000ff; valaddr_reg:x16; val_offset:1216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1216, x17, x15, 1216, x18)

inst_2439:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7fff00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817fff00; op2val:0x807fffff; valaddr_reg:x16; val_offset:1224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1224, x17, x15, 1224, x18)

inst_2440:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x817fff00; valaddr_reg:x16; val_offset:1232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1232, x17, x15, 1232, x18)

inst_2441:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x0001ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x810001ff; op2val:0x807fffff; valaddr_reg:x16; val_offset:1240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1240, x17, x15, 1240, x18)

inst_2442:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x810001ff; valaddr_reg:x16; val_offset:1248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1248, x17, x15, 1248, x18)

inst_2443:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7ffe00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817ffe00; op2val:0x807fffff; valaddr_reg:x16; val_offset:1256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1256, x17, x15, 1256, x18)

inst_2444:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x817ffe00; valaddr_reg:x16; val_offset:1264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1264, x17, x15, 1264, x18)

inst_2445:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x0003ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x810003ff; op2val:0x807fffff; valaddr_reg:x16; val_offset:1272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1272, x17, x15, 1272, x18)

inst_2446:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x810003ff; valaddr_reg:x16; val_offset:1280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1280, x17, x15, 1280, x18)

inst_2447:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7ffc00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817ffc00; op2val:0x807fffff; valaddr_reg:x16; val_offset:1288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1288, x17, x15, 1288, x18)

inst_2448:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x817ffc00; valaddr_reg:x16; val_offset:1296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1296, x17, x15, 1296, x18)

inst_2449:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x0007ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x810007ff; op2val:0x807fffff; valaddr_reg:x16; val_offset:1304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1304, x17, x15, 1304, x18)

inst_2450:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x810007ff; valaddr_reg:x16; val_offset:1312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1312, x17, x15, 1312, x18)

inst_2451:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7ff800 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817ff800; op2val:0x807fffff; valaddr_reg:x16; val_offset:1320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1320, x17, x15, 1320, x18)

inst_2452:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x817ff800; valaddr_reg:x16; val_offset:1328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1328, x17, x15, 1328, x18)

inst_2453:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x000fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81000fff; op2val:0x807fffff; valaddr_reg:x16; val_offset:1336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1336, x17, x15, 1336, x18)

inst_2454:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x02 and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x81000fff; valaddr_reg:x16; val_offset:1344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1344, x17, x15, 1344, x18)

inst_2455:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7ff000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817ff000; op2val:0x807fffff; valaddr_reg:x16; val_offset:1352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1352, x17, x15, 1352, x18)

inst_2456:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x817ff000; valaddr_reg:x16; val_offset:1360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1360, x17, x15, 1360, x18)

inst_2457:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x001fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81001fff; op2val:0x807fffff; valaddr_reg:x16; val_offset:1368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1368, x17, x15, 1368, x18)

inst_2458:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x02 and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x81001fff; valaddr_reg:x16; val_offset:1376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1376, x17, x15, 1376, x18)

inst_2459:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7fe000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817fe000; op2val:0x807fffff; valaddr_reg:x16; val_offset:1384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1384, x17, x15, 1384, x18)

inst_2460:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x817fe000; valaddr_reg:x16; val_offset:1392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1392, x17, x15, 1392, x18)

inst_2461:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x003fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81003fff; op2val:0x807fffff; valaddr_reg:x16; val_offset:1400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1400, x17, x15, 1400, x18)

inst_2462:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x02 and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x81003fff; valaddr_reg:x16; val_offset:1408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1408, x17, x15, 1408, x18)

inst_2463:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7fc000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817fc000; op2val:0x807fffff; valaddr_reg:x16; val_offset:1416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1416, x17, x15, 1416, x18)

inst_2464:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x817fc000; valaddr_reg:x16; val_offset:1424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1424, x17, x15, 1424, x18)

inst_2465:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x007fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81007fff; op2val:0x807fffff; valaddr_reg:x16; val_offset:1432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1432, x17, x15, 1432, x18)

inst_2466:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x02 and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x81007fff; valaddr_reg:x16; val_offset:1440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1440, x17, x15, 1440, x18)

inst_2467:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7f8000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817f8000; op2val:0x807fffff; valaddr_reg:x16; val_offset:1448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1448, x17, x15, 1448, x18)

inst_2468:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x817f8000; valaddr_reg:x16; val_offset:1456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1456, x17, x15, 1456, x18)

inst_2469:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x00ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8100ffff; op2val:0x807fffff; valaddr_reg:x16; val_offset:1464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1464, x17, x15, 1464, x18)

inst_2470:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x02 and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x8100ffff; valaddr_reg:x16; val_offset:1472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1472, x17, x15, 1472, x18)

inst_2471:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7f0000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817f0000; op2val:0x807fffff; valaddr_reg:x16; val_offset:1480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1480, x17, x15, 1480, x18)

inst_2472:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x817f0000; valaddr_reg:x16; val_offset:1488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1488, x17, x15, 1488, x18)

inst_2473:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x01ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8101ffff; op2val:0x807fffff; valaddr_reg:x16; val_offset:1496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1496, x17, x15, 1496, x18)

inst_2474:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x02 and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x8101ffff; valaddr_reg:x16; val_offset:1504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1504, x17, x15, 1504, x18)

inst_2475:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7e0000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817e0000; op2val:0x807fffff; valaddr_reg:x16; val_offset:1512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1512, x17, x15, 1512, x18)

inst_2476:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x817e0000; valaddr_reg:x16; val_offset:1520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1520, x17, x15, 1520, x18)

inst_2477:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x03ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8103ffff; op2val:0x807fffff; valaddr_reg:x16; val_offset:1528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1528, x17, x15, 1528, x18)

inst_2478:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x8103ffff; valaddr_reg:x16; val_offset:1536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1536, x17, x15, 1536, x18)

inst_2479:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7c0000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817c0000; op2val:0x807fffff; valaddr_reg:x16; val_offset:1544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1544, x17, x15, 1544, x18)

inst_2480:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x817c0000; valaddr_reg:x16; val_offset:1552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1552, x17, x15, 1552, x18)

inst_2481:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x07ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8107ffff; op2val:0x807fffff; valaddr_reg:x16; val_offset:1560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1560, x17, x15, 1560, x18)

inst_2482:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x8107ffff; valaddr_reg:x16; val_offset:1568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1568, x17, x15, 1568, x18)

inst_2483:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x780000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81780000; op2val:0x807fffff; valaddr_reg:x16; val_offset:1576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1576, x17, x15, 1576, x18)

inst_2484:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x02 and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x81780000; valaddr_reg:x16; val_offset:1584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1584, x17, x15, 1584, x18)

inst_2485:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x0fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x810fffff; op2val:0x807fffff; valaddr_reg:x16; val_offset:1592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1592, x17, x15, 1592, x18)

inst_2486:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x810fffff; valaddr_reg:x16; val_offset:1600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1600, x17, x15, 1600, x18)

inst_2487:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x700000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81700000; op2val:0x807fffff; valaddr_reg:x16; val_offset:1608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1608, x17, x15, 1608, x18)

inst_2488:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x02 and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x81700000; valaddr_reg:x16; val_offset:1616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1616, x17, x15, 1616, x18)

inst_2489:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x1fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x811fffff; op2val:0x807fffff; valaddr_reg:x16; val_offset:1624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1624, x17, x15, 1624, x18)

inst_2490:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x02 and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x811fffff; valaddr_reg:x16; val_offset:1632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1632, x17, x15, 1632, x18)

inst_2491:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x600000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81600000; op2val:0x807fffff; valaddr_reg:x16; val_offset:1640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1640, x17, x15, 1640, x18)

inst_2492:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x02 and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x81600000; valaddr_reg:x16; val_offset:1648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1648, x17, x15, 1648, x18)

inst_2493:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x3fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x813fffff; op2val:0x807fffff; valaddr_reg:x16; val_offset:1656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1656, x17, x15, 1656, x18)

inst_2494:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x813fffff; valaddr_reg:x16; val_offset:1664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1664, x17, x15, 1664, x18)

inst_2495:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81400000; op2val:0x807fffff; valaddr_reg:x16; val_offset:1672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1672, x17, x15, 1672, x18)

inst_2496:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x02 and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x81400000; valaddr_reg:x16; val_offset:1680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1680, x17, x15, 1680, x18)

inst_2497:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817fffff; op2val:0x807fffff; valaddr_reg:x16; val_offset:1688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1688, x17, x15, 1688, x18)

inst_2498:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x817fffff; valaddr_reg:x16; val_offset:1696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1696, x17, x15, 1696, x18)

inst_2499:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81000000; op2val:0x807fffff; valaddr_reg:x16; val_offset:1704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1704, x17, x15, 1704, x18)

inst_2500:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x02 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x81000000; valaddr_reg:x16; val_offset:1712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1712, x17, x15, 1712, x18)

inst_2501:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800001; op2val:0x807fffff; valaddr_reg:x16; val_offset:1720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1720, x17, x15, 1720, x18)

inst_2502:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x80800001; valaddr_reg:x16; val_offset:1728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1728, x17, x15, 1728, x18)

inst_2503:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7ffffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80fffffe; op2val:0x807fffff; valaddr_reg:x16; val_offset:1736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1736, x17, x15, 1736, x18)

inst_2504:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x80fffffe; valaddr_reg:x16; val_offset:1744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1744, x17, x15, 1744, x18)

inst_2505:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000003 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800003; op2val:0x807fffff; valaddr_reg:x16; val_offset:1752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1752, x17, x15, 1752, x18)

inst_2506:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x80800003; valaddr_reg:x16; val_offset:1760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1760, x17, x15, 1760, x18)

inst_2507:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7ffffc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80fffffc; op2val:0x807fffff; valaddr_reg:x16; val_offset:1768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1768, x17, x15, 1768, x18)

inst_2508:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x80fffffc; valaddr_reg:x16; val_offset:1776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1776, x17, x15, 1776, x18)

inst_2509:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000007 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800007; op2val:0x807fffff; valaddr_reg:x16; val_offset:1784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1784, x17, x15, 1784, x18)

inst_2510:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x80800007; valaddr_reg:x16; val_offset:1792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1792, x17, x15, 1792, x18)

inst_2511:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7ffff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80fffff8; op2val:0x807fffff; valaddr_reg:x16; val_offset:1800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1800, x17, x15, 1800, x18)

inst_2512:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x80fffff8; valaddr_reg:x16; val_offset:1808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1808, x17, x15, 1808, x18)

inst_2513:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x00000f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8080000f; op2val:0x807fffff; valaddr_reg:x16; val_offset:1816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1816, x17, x15, 1816, x18)

inst_2514:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x8080000f; valaddr_reg:x16; val_offset:1824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1824, x17, x15, 1824, x18)

inst_2515:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7ffff0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80fffff0; op2val:0x807fffff; valaddr_reg:x16; val_offset:1832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1832, x17, x15, 1832, x18)

inst_2516:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x80fffff0; valaddr_reg:x16; val_offset:1840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1840, x17, x15, 1840, x18)

inst_2517:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x00001f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8080001f; op2val:0x807fffff; valaddr_reg:x16; val_offset:1848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1848, x17, x15, 1848, x18)

inst_2518:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x8080001f; valaddr_reg:x16; val_offset:1856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1856, x17, x15, 1856, x18)

inst_2519:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7fffe0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80ffffe0; op2val:0x807fffff; valaddr_reg:x16; val_offset:1864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1864, x17, x15, 1864, x18)

inst_2520:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x80ffffe0; valaddr_reg:x16; val_offset:1872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1872, x17, x15, 1872, x18)

inst_2521:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8080003f; op2val:0x807fffff; valaddr_reg:x16; val_offset:1880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1880, x17, x15, 1880, x18)

inst_2522:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x8080003f; valaddr_reg:x16; val_offset:1888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1888, x17, x15, 1888, x18)

inst_2523:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7fffc0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80ffffc0; op2val:0x807fffff; valaddr_reg:x16; val_offset:1896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1896, x17, x15, 1896, x18)

inst_2524:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x80ffffc0; valaddr_reg:x16; val_offset:1904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1904, x17, x15, 1904, x18)

inst_2525:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x00007f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8080007f; op2val:0x807fffff; valaddr_reg:x16; val_offset:1912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1912, x17, x15, 1912, x18)

inst_2526:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x8080007f; valaddr_reg:x16; val_offset:1920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1920, x17, x15, 1920, x18)

inst_2527:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7fff80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80ffff80; op2val:0x807fffff; valaddr_reg:x16; val_offset:1928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1928, x17, x15, 1928, x18)

inst_2528:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x80ffff80; valaddr_reg:x16; val_offset:1936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1936, x17, x15, 1936, x18)

inst_2529:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x0000ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x808000ff; op2val:0x807fffff; valaddr_reg:x16; val_offset:1944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1944, x17, x15, 1944, x18)

inst_2530:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x808000ff; valaddr_reg:x16; val_offset:1952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1952, x17, x15, 1952, x18)

inst_2531:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7fff00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80ffff00; op2val:0x807fffff; valaddr_reg:x16; val_offset:1960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1960, x17, x15, 1960, x18)

inst_2532:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x80ffff00; valaddr_reg:x16; val_offset:1968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1968, x17, x15, 1968, x18)

inst_2533:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x0001ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x808001ff; op2val:0x807fffff; valaddr_reg:x16; val_offset:1976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1976, x17, x15, 1976, x18)

inst_2534:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x808001ff; valaddr_reg:x16; val_offset:1984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1984, x17, x15, 1984, x18)

inst_2535:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7ffe00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80fffe00; op2val:0x807fffff; valaddr_reg:x16; val_offset:1992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1992, x17, x15, 1992, x18)

inst_2536:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x80fffe00; valaddr_reg:x16; val_offset:2000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2000, x17, x15, 2000, x18)

inst_2537:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x0003ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x808003ff; op2val:0x807fffff; valaddr_reg:x16; val_offset:2008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2008, x17, x15, 2008, x18)

inst_2538:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x808003ff; valaddr_reg:x16; val_offset:2016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2016, x17, x15, 2016, x18)

inst_2539:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7ffc00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80fffc00; op2val:0x807fffff; valaddr_reg:x16; val_offset:2024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_11)

inst_2540:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x80fffc00; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_2541:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x0007ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x808007ff; op2val:0x807fffff; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 8, x17, x15, 8, x18)

inst_2542:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x808007ff; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 16, x17, x15, 16, x18)

inst_2543:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7ff800 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80fff800; op2val:0x807fffff; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 24, x17, x15, 24, x18)

inst_2544:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x80fff800; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 32, x17, x15, 32, x18)

inst_2545:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800fff; op2val:0x807fffff; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 40, x17, x15, 40, x18)

inst_2546:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x80800fff; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_2547:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7ff000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80fff000; op2val:0x807fffff; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 56, x17, x15, 56, x18)

inst_2548:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x80fff000; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 64, x17, x15, 64, x18)

inst_2549:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x001fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80801fff; op2val:0x807fffff; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 72, x17, x15, 72, x18)

inst_2550:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x80801fff; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_2551:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7fe000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80ffe000; op2val:0x807fffff; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 88, x17, x15, 88, x18)

inst_2552:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x80ffe000; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 96, x17, x15, 96, x18)

inst_2553:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x003fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80803fff; op2val:0x807fffff; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 104, x17, x15, 104, x18)

inst_2554:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x80803fff; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 112, x17, x15, 112, x18)

inst_2555:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7fc000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80ffc000; op2val:0x807fffff; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 120, x17, x15, 120, x18)

inst_2556:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x80ffc000; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_2557:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x007fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80807fff; op2val:0x807fffff; valaddr_reg:x16; val_offset:136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 136, x17, x15, 136, x18)

inst_2558:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x80807fff; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 144, x17, x15, 144, x18)

inst_2559:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7f8000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80ff8000; op2val:0x807fffff; valaddr_reg:x16; val_offset:152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 152, x17, x15, 152, x18)

inst_2560:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x80ff8000; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_2561:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x00ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8080ffff; op2val:0x807fffff; valaddr_reg:x16; val_offset:168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 168, x17, x15, 168, x18)

inst_2562:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x8080ffff; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 176, x17, x15, 176, x18)

inst_2563:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7f0000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80ff0000; op2val:0x807fffff; valaddr_reg:x16; val_offset:184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 184, x17, x15, 184, x18)

inst_2564:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x80ff0000; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 192, x17, x15, 192, x18)

inst_2565:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x01ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8081ffff; op2val:0x807fffff; valaddr_reg:x16; val_offset:200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 200, x17, x15, 200, x18)

inst_2566:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x8081ffff; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_2567:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7e0000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80fe0000; op2val:0x807fffff; valaddr_reg:x16; val_offset:216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 216, x17, x15, 216, x18)

inst_2568:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x80fe0000; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 224, x17, x15, 224, x18)

inst_2569:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x03ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8083ffff; op2val:0x807fffff; valaddr_reg:x16; val_offset:232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 232, x17, x15, 232, x18)

inst_2570:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x8083ffff; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_2571:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7c0000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80fc0000; op2val:0x807fffff; valaddr_reg:x16; val_offset:248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 248, x17, x15, 248, x18)

inst_2572:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x80fc0000; valaddr_reg:x16; val_offset:256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 256, x17, x15, 256, x18)

inst_2573:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x07ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8087ffff; op2val:0x807fffff; valaddr_reg:x16; val_offset:264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 264, x17, x15, 264, x18)

inst_2574:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x8087ffff; valaddr_reg:x16; val_offset:272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 272, x17, x15, 272, x18)

inst_2575:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x780000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80f80000; op2val:0x807fffff; valaddr_reg:x16; val_offset:280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 280, x17, x15, 280, x18)

inst_2576:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x80f80000; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_2577:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x0fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x808fffff; op2val:0x807fffff; valaddr_reg:x16; val_offset:296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 296, x17, x15, 296, x18)

inst_2578:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x808fffff; valaddr_reg:x16; val_offset:304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 304, x17, x15, 304, x18)

inst_2579:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x700000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80f00000; op2val:0x807fffff; valaddr_reg:x16; val_offset:312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 312, x17, x15, 312, x18)

inst_2580:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x80f00000; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_2581:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x1fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x809fffff; op2val:0x807fffff; valaddr_reg:x16; val_offset:328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 328, x17, x15, 328, x18)

inst_2582:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x809fffff; valaddr_reg:x16; val_offset:336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 336, x17, x15, 336, x18)

inst_2583:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x600000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80e00000; op2val:0x807fffff; valaddr_reg:x16; val_offset:344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 344, x17, x15, 344, x18)

inst_2584:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x80e00000; valaddr_reg:x16; val_offset:352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 352, x17, x15, 352, x18)

inst_2585:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x3fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80bfffff; op2val:0x807fffff; valaddr_reg:x16; val_offset:360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 360, x17, x15, 360, x18)

inst_2586:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x80bfffff; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_2587:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80c00000; op2val:0x807fffff; valaddr_reg:x16; val_offset:376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 376, x17, x15, 376, x18)

inst_2588:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x80c00000; valaddr_reg:x16; val_offset:384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 384, x17, x15, 384, x18)

inst_2589:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80ffffff; op2val:0x807fffff; valaddr_reg:x16; val_offset:392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 392, x17, x15, 392, x18)

inst_2590:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x80ffffff; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_2591:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x00000f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8000000f; op2val:0x807fffff; valaddr_reg:x16; val_offset:408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 408, x17, x15, 408, x18)

inst_2592:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x8000000f; valaddr_reg:x16; val_offset:416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 416, x17, x15, 416, x18)

inst_2593:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ffff0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807ffff0; op2val:0x807fffff; valaddr_reg:x16; val_offset:424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 424, x17, x15, 424, x18)

inst_2594:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x807ffff0; valaddr_reg:x16; val_offset:432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 432, x17, x15, 432, x18)

inst_2595:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x00001f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8000001f; op2val:0x807fffff; valaddr_reg:x16; val_offset:440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 440, x17, x15, 440, x18)

inst_2596:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x8000001f; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_2597:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffe0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffe0; op2val:0x807fffff; valaddr_reg:x16; val_offset:456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 456, x17, x15, 456, x18)

inst_2598:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x807fffe0; valaddr_reg:x16; val_offset:464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 464, x17, x15, 464, x18)

inst_2599:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8000003f; op2val:0x807fffff; valaddr_reg:x16; val_offset:472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 472, x17, x15, 472, x18)

inst_2600:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x8000003f; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_2601:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffc0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffc0; op2val:0x807fffff; valaddr_reg:x16; val_offset:488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 488, x17, x15, 488, x18)

inst_2602:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x807fffc0; valaddr_reg:x16; val_offset:496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 496, x17, x15, 496, x18)

inst_2603:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x00007f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8000007f; op2val:0x807fffff; valaddr_reg:x16; val_offset:504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 504, x17, x15, 504, x18)

inst_2604:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x8000007f; valaddr_reg:x16; val_offset:512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 512, x17, x15, 512, x18)

inst_2605:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fff80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fff80; op2val:0x807fffff; valaddr_reg:x16; val_offset:520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 520, x17, x15, 520, x18)

inst_2606:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x807fff80; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_2607:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0000ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000ff; op2val:0x807fffff; valaddr_reg:x16; val_offset:536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 536, x17, x15, 536, x18)

inst_2608:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x800000ff; valaddr_reg:x16; val_offset:544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 544, x17, x15, 544, x18)

inst_2609:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fff00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fff00; op2val:0x807fffff; valaddr_reg:x16; val_offset:552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 552, x17, x15, 552, x18)

inst_2610:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x807fff00; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_2611:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0001ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800001ff; op2val:0x807fffff; valaddr_reg:x16; val_offset:568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 568, x17, x15, 568, x18)

inst_2612:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x800001ff; valaddr_reg:x16; val_offset:576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 576, x17, x15, 576, x18)

inst_2613:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ffe00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807ffe00; op2val:0x807fffff; valaddr_reg:x16; val_offset:584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 584, x17, x15, 584, x18)

inst_2614:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x807ffe00; valaddr_reg:x16; val_offset:592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 592, x17, x15, 592, x18)

inst_2615:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0003ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800003ff; op2val:0x807fffff; valaddr_reg:x16; val_offset:600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 600, x17, x15, 600, x18)

inst_2616:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x800003ff; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 608, x17, x15, 608, x18)

inst_2617:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ffc00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807ffc00; op2val:0x807fffff; valaddr_reg:x16; val_offset:616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 616, x17, x15, 616, x18)

inst_2618:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x807ffc00; valaddr_reg:x16; val_offset:624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 624, x17, x15, 624, x18)

inst_2619:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0007ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800007ff; op2val:0x807fffff; valaddr_reg:x16; val_offset:632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 632, x17, x15, 632, x18)

inst_2620:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x800007ff; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_2621:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ff800 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807ff800; op2val:0x807fffff; valaddr_reg:x16; val_offset:648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 648, x17, x15, 648, x18)

inst_2622:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x807ff800; valaddr_reg:x16; val_offset:656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 656, x17, x15, 656, x18)

inst_2623:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000fff; op2val:0x807fffff; valaddr_reg:x16; val_offset:664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 664, x17, x15, 664, x18)

inst_2624:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x80000fff; valaddr_reg:x16; val_offset:672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 672, x17, x15, 672, x18)

inst_2625:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ff000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807ff000; op2val:0x807fffff; valaddr_reg:x16; val_offset:680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 680, x17, x15, 680, x18)

inst_2626:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x807ff000; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 688, x17, x15, 688, x18)

inst_2627:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x001fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80001fff; op2val:0x807fffff; valaddr_reg:x16; val_offset:696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 696, x17, x15, 696, x18)

inst_2628:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x80001fff; valaddr_reg:x16; val_offset:704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 704, x17, x15, 704, x18)

inst_2629:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fe000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fe000; op2val:0x807fffff; valaddr_reg:x16; val_offset:712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 712, x17, x15, 712, x18)

inst_2630:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x807fe000; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_2631:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x003fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80003fff; op2val:0x807fffff; valaddr_reg:x16; val_offset:728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 728, x17, x15, 728, x18)

inst_2632:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x80003fff; valaddr_reg:x16; val_offset:736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 736, x17, x15, 736, x18)

inst_2633:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fc000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fc000; op2val:0x807fffff; valaddr_reg:x16; val_offset:744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 744, x17, x15, 744, x18)

inst_2634:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x807fc000; valaddr_reg:x16; val_offset:752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 752, x17, x15, 752, x18)

inst_2635:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x007fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80007fff; op2val:0x807fffff; valaddr_reg:x16; val_offset:760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 760, x17, x15, 760, x18)

inst_2636:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x80007fff; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 768, x17, x15, 768, x18)

inst_2637:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7f8000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807f8000; op2val:0x807fffff; valaddr_reg:x16; val_offset:776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 776, x17, x15, 776, x18)

inst_2638:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x807f8000; valaddr_reg:x16; val_offset:784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 784, x17, x15, 784, x18)

inst_2639:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x00ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8000ffff; op2val:0x807fffff; valaddr_reg:x16; val_offset:792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 792, x17, x15, 792, x18)

inst_2640:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x8000ffff; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_2641:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7f0000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807f0000; op2val:0x807fffff; valaddr_reg:x16; val_offset:808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 808, x17, x15, 808, x18)

inst_2642:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x807f0000; valaddr_reg:x16; val_offset:816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 816, x17, x15, 816, x18)

inst_2643:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x01ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8001ffff; op2val:0x807fffff; valaddr_reg:x16; val_offset:824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 824, x17, x15, 824, x18)

inst_2644:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x8001ffff; valaddr_reg:x16; val_offset:832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 832, x17, x15, 832, x18)

inst_2645:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7e0000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807e0000; op2val:0x807fffff; valaddr_reg:x16; val_offset:840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 840, x17, x15, 840, x18)

inst_2646:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x807e0000; valaddr_reg:x16; val_offset:848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 848, x17, x15, 848, x18)

inst_2647:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x03ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8003ffff; op2val:0x807fffff; valaddr_reg:x16; val_offset:856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 856, x17, x15, 856, x18)

inst_2648:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x8003ffff; valaddr_reg:x16; val_offset:864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 864, x17, x15, 864, x18)

inst_2649:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7c0000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807c0000; op2val:0x807fffff; valaddr_reg:x16; val_offset:872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 872, x17, x15, 872, x18)

inst_2650:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x807c0000; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 880, x17, x15, 880, x18)

inst_2651:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x07ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8007ffff; op2val:0x807fffff; valaddr_reg:x16; val_offset:888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 888, x17, x15, 888, x18)

inst_2652:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x8007ffff; valaddr_reg:x16; val_offset:896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 896, x17, x15, 896, x18)

inst_2653:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x780000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80780000; op2val:0x807fffff; valaddr_reg:x16; val_offset:904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 904, x17, x15, 904, x18)

inst_2654:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x80780000; valaddr_reg:x16; val_offset:912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 912, x17, x15, 912, x18)

inst_2655:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800fffff; op2val:0x807fffff; valaddr_reg:x16; val_offset:920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 920, x17, x15, 920, x18)

inst_2656:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x800fffff; valaddr_reg:x16; val_offset:928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 928, x17, x15, 928, x18)

inst_2657:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x700000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80700000; op2val:0x807fffff; valaddr_reg:x16; val_offset:936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 936, x17, x15, 936, x18)

inst_2658:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x80700000; valaddr_reg:x16; val_offset:944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 944, x17, x15, 944, x18)

inst_2659:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x1fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x801fffff; op2val:0x807fffff; valaddr_reg:x16; val_offset:952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 952, x17, x15, 952, x18)

inst_2660:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x801fffff; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 960, x17, x15, 960, x18)

inst_2661:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x600000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80600000; op2val:0x807fffff; valaddr_reg:x16; val_offset:968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 968, x17, x15, 968, x18)

inst_2662:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x80600000; valaddr_reg:x16; val_offset:976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 976, x17, x15, 976, x18)

inst_2663:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x3fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x803fffff; op2val:0x807fffff; valaddr_reg:x16; val_offset:984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 984, x17, x15, 984, x18)

inst_2664:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x803fffff; valaddr_reg:x16; val_offset:992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 992, x17, x15, 992, x18)

inst_2665:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80400000; op2val:0x807fffff; valaddr_reg:x16; val_offset:1000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1000, x17, x15, 1000, x18)

inst_2666:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x80400000; valaddr_reg:x16; val_offset:1008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1008, x17, x15, 1008, x18)

inst_2667:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x807fffff; valaddr_reg:x16; val_offset:1016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1016, x17, x15, 1016, x18)

inst_2668:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x807fffff; valaddr_reg:x16; val_offset:1024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1024, x17, x15, 1024, x18)

inst_2669:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0x80000000; valaddr_reg:x16; val_offset:1032; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1032, x17, x15, 1032, x18)

inst_2670:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0000001; op2val:0x807fffff; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1040, x17, x15, 1040, x18)

inst_2671:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0xc0000001; valaddr_reg:x16; val_offset:1048; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1048, x17, x15, 1048, x18)

inst_2672:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x7ffffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc07ffffe; op2val:0x807fffff; valaddr_reg:x16; val_offset:1056; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1056, x17, x15, 1056, x18)

inst_2673:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0xc07ffffe; valaddr_reg:x16; val_offset:1064; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1064, x17, x15, 1064, x18)

inst_2674:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x000003 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0000003; op2val:0x807fffff; valaddr_reg:x16; val_offset:1072; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1072, x17, x15, 1072, x18)

inst_2675:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0xc0000003; valaddr_reg:x16; val_offset:1080; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1080, x17, x15, 1080, x18)

inst_2676:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x7ffffc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc07ffffc; op2val:0x807fffff; valaddr_reg:x16; val_offset:1088; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1088, x17, x15, 1088, x18)

inst_2677:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0xc07ffffc; valaddr_reg:x16; val_offset:1096; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1096, x17, x15, 1096, x18)

inst_2678:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x000007 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0000007; op2val:0x807fffff; valaddr_reg:x16; val_offset:1104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1104, x17, x15, 1104, x18)

inst_2679:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0xc0000007; valaddr_reg:x16; val_offset:1112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1112, x17, x15, 1112, x18)

inst_2680:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x7ffff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc07ffff8; op2val:0x807fffff; valaddr_reg:x16; val_offset:1120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1120, x17, x15, 1120, x18)

inst_2681:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0xc07ffff8; valaddr_reg:x16; val_offset:1128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1128, x17, x15, 1128, x18)

inst_2682:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x00000f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc000000f; op2val:0x807fffff; valaddr_reg:x16; val_offset:1136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1136, x17, x15, 1136, x18)

inst_2683:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0xc000000f; valaddr_reg:x16; val_offset:1144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1144, x17, x15, 1144, x18)

inst_2684:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x7ffff0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc07ffff0; op2val:0x807fffff; valaddr_reg:x16; val_offset:1152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1152, x17, x15, 1152, x18)

inst_2685:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0xc07ffff0; valaddr_reg:x16; val_offset:1160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1160, x17, x15, 1160, x18)

inst_2686:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x00001f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc000001f; op2val:0x807fffff; valaddr_reg:x16; val_offset:1168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1168, x17, x15, 1168, x18)

inst_2687:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0xc000001f; valaddr_reg:x16; val_offset:1176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1176, x17, x15, 1176, x18)

inst_2688:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x7fffe0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc07fffe0; op2val:0x807fffff; valaddr_reg:x16; val_offset:1184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1184, x17, x15, 1184, x18)

inst_2689:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0xc07fffe0; valaddr_reg:x16; val_offset:1192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1192, x17, x15, 1192, x18)

inst_2690:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc000003f; op2val:0x807fffff; valaddr_reg:x16; val_offset:1200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1200, x17, x15, 1200, x18)

inst_2691:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0xc000003f; valaddr_reg:x16; val_offset:1208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1208, x17, x15, 1208, x18)

inst_2692:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x7fffc0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc07fffc0; op2val:0x807fffff; valaddr_reg:x16; val_offset:1216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1216, x17, x15, 1216, x18)

inst_2693:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0xc07fffc0; valaddr_reg:x16; val_offset:1224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1224, x17, x15, 1224, x18)

inst_2694:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x00007f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc000007f; op2val:0x807fffff; valaddr_reg:x16; val_offset:1232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1232, x17, x15, 1232, x18)

inst_2695:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0xc000007f; valaddr_reg:x16; val_offset:1240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1240, x17, x15, 1240, x18)

inst_2696:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x7fff80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc07fff80; op2val:0x807fffff; valaddr_reg:x16; val_offset:1248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1248, x17, x15, 1248, x18)

inst_2697:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0xc07fff80; valaddr_reg:x16; val_offset:1256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1256, x17, x15, 1256, x18)

inst_2698:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x0000ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc00000ff; op2val:0x807fffff; valaddr_reg:x16; val_offset:1264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1264, x17, x15, 1264, x18)

inst_2699:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0xc00000ff; valaddr_reg:x16; val_offset:1272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1272, x17, x15, 1272, x18)

inst_2700:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x7fff00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc07fff00; op2val:0x807fffff; valaddr_reg:x16; val_offset:1280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1280, x17, x15, 1280, x18)

inst_2701:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0xc07fff00; valaddr_reg:x16; val_offset:1288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1288, x17, x15, 1288, x18)

inst_2702:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x0001ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc00001ff; op2val:0x807fffff; valaddr_reg:x16; val_offset:1296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1296, x17, x15, 1296, x18)

inst_2703:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0xc00001ff; valaddr_reg:x16; val_offset:1304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1304, x17, x15, 1304, x18)

inst_2704:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x7ffe00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc07ffe00; op2val:0x807fffff; valaddr_reg:x16; val_offset:1312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1312, x17, x15, 1312, x18)

inst_2705:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0xc07ffe00; valaddr_reg:x16; val_offset:1320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1320, x17, x15, 1320, x18)

inst_2706:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x0003ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc00003ff; op2val:0x807fffff; valaddr_reg:x16; val_offset:1328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1328, x17, x15, 1328, x18)

inst_2707:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0xc00003ff; valaddr_reg:x16; val_offset:1336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1336, x17, x15, 1336, x18)

inst_2708:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x7ffc00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc07ffc00; op2val:0x807fffff; valaddr_reg:x16; val_offset:1344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1344, x17, x15, 1344, x18)

inst_2709:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0xc07ffc00; valaddr_reg:x16; val_offset:1352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1352, x17, x15, 1352, x18)

inst_2710:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x0007ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc00007ff; op2val:0x807fffff; valaddr_reg:x16; val_offset:1360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1360, x17, x15, 1360, x18)

inst_2711:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0xc00007ff; valaddr_reg:x16; val_offset:1368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1368, x17, x15, 1368, x18)

inst_2712:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x7ff800 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc07ff800; op2val:0x807fffff; valaddr_reg:x16; val_offset:1376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1376, x17, x15, 1376, x18)

inst_2713:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0xc07ff800; valaddr_reg:x16; val_offset:1384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1384, x17, x15, 1384, x18)

inst_2714:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x000fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0000fff; op2val:0x807fffff; valaddr_reg:x16; val_offset:1392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1392, x17, x15, 1392, x18)

inst_2715:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0xc0000fff; valaddr_reg:x16; val_offset:1400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1400, x17, x15, 1400, x18)

inst_2716:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x7ff000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc07ff000; op2val:0x807fffff; valaddr_reg:x16; val_offset:1408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1408, x17, x15, 1408, x18)

inst_2717:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0xc07ff000; valaddr_reg:x16; val_offset:1416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1416, x17, x15, 1416, x18)

inst_2718:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x001fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0001fff; op2val:0x807fffff; valaddr_reg:x16; val_offset:1424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1424, x17, x15, 1424, x18)

inst_2719:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x80 and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0xc0001fff; valaddr_reg:x16; val_offset:1432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1432, x17, x15, 1432, x18)

inst_2720:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x7fe000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc07fe000; op2val:0x807fffff; valaddr_reg:x16; val_offset:1440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1440, x17, x15, 1440, x18)

inst_2721:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0xc07fe000; valaddr_reg:x16; val_offset:1448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1448, x17, x15, 1448, x18)

inst_2722:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x003fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0003fff; op2val:0x807fffff; valaddr_reg:x16; val_offset:1456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1456, x17, x15, 1456, x18)

inst_2723:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x80 and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0xc0003fff; valaddr_reg:x16; val_offset:1464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1464, x17, x15, 1464, x18)

inst_2724:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x7fc000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc07fc000; op2val:0x807fffff; valaddr_reg:x16; val_offset:1472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1472, x17, x15, 1472, x18)

inst_2725:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0xc07fc000; valaddr_reg:x16; val_offset:1480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1480, x17, x15, 1480, x18)

inst_2726:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x007fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0007fff; op2val:0x807fffff; valaddr_reg:x16; val_offset:1488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1488, x17, x15, 1488, x18)

inst_2727:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x80 and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0xc0007fff; valaddr_reg:x16; val_offset:1496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1496, x17, x15, 1496, x18)

inst_2728:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x7f8000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc07f8000; op2val:0x807fffff; valaddr_reg:x16; val_offset:1504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1504, x17, x15, 1504, x18)

inst_2729:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0xc07f8000; valaddr_reg:x16; val_offset:1512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1512, x17, x15, 1512, x18)

inst_2730:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x00ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc000ffff; op2val:0x807fffff; valaddr_reg:x16; val_offset:1520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1520, x17, x15, 1520, x18)

inst_2731:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0xc000ffff; valaddr_reg:x16; val_offset:1528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1528, x17, x15, 1528, x18)

inst_2732:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x7f0000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc07f0000; op2val:0x807fffff; valaddr_reg:x16; val_offset:1536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1536, x17, x15, 1536, x18)

inst_2733:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0xc07f0000; valaddr_reg:x16; val_offset:1544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1544, x17, x15, 1544, x18)

inst_2734:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x01ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc001ffff; op2val:0x807fffff; valaddr_reg:x16; val_offset:1552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1552, x17, x15, 1552, x18)

inst_2735:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x80 and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0xc001ffff; valaddr_reg:x16; val_offset:1560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1560, x17, x15, 1560, x18)

inst_2736:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x7e0000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc07e0000; op2val:0x807fffff; valaddr_reg:x16; val_offset:1568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1568, x17, x15, 1568, x18)

inst_2737:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0xc07e0000; valaddr_reg:x16; val_offset:1576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1576, x17, x15, 1576, x18)

inst_2738:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x03ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc003ffff; op2val:0x807fffff; valaddr_reg:x16; val_offset:1584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1584, x17, x15, 1584, x18)

inst_2739:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x80 and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0xc003ffff; valaddr_reg:x16; val_offset:1592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1592, x17, x15, 1592, x18)

inst_2740:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x7c0000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc07c0000; op2val:0x807fffff; valaddr_reg:x16; val_offset:1600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1600, x17, x15, 1600, x18)

inst_2741:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0xc07c0000; valaddr_reg:x16; val_offset:1608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1608, x17, x15, 1608, x18)

inst_2742:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x07ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc007ffff; op2val:0x807fffff; valaddr_reg:x16; val_offset:1616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1616, x17, x15, 1616, x18)

inst_2743:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x80 and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0xc007ffff; valaddr_reg:x16; val_offset:1624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1624, x17, x15, 1624, x18)

inst_2744:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x780000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0780000; op2val:0x807fffff; valaddr_reg:x16; val_offset:1632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1632, x17, x15, 1632, x18)

inst_2745:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x80 and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0xc0780000; valaddr_reg:x16; val_offset:1640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1640, x17, x15, 1640, x18)

inst_2746:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x0fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc00fffff; op2val:0x807fffff; valaddr_reg:x16; val_offset:1648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1648, x17, x15, 1648, x18)

inst_2747:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0xc00fffff; valaddr_reg:x16; val_offset:1656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1656, x17, x15, 1656, x18)

inst_2748:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x700000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0700000; op2val:0x807fffff; valaddr_reg:x16; val_offset:1664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1664, x17, x15, 1664, x18)

inst_2749:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x80 and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0xc0700000; valaddr_reg:x16; val_offset:1672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1672, x17, x15, 1672, x18)

inst_2750:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x1fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc01fffff; op2val:0x807fffff; valaddr_reg:x16; val_offset:1680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1680, x17, x15, 1680, x18)

inst_2751:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0xc01fffff; valaddr_reg:x16; val_offset:1688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1688, x17, x15, 1688, x18)

inst_2752:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x600000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0600000; op2val:0x807fffff; valaddr_reg:x16; val_offset:1696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1696, x17, x15, 1696, x18)

inst_2753:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x80 and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0xc0600000; valaddr_reg:x16; val_offset:1704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1704, x17, x15, 1704, x18)

inst_2754:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x3fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc03fffff; op2val:0x807fffff; valaddr_reg:x16; val_offset:1712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1712, x17, x15, 1712, x18)

inst_2755:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0xc03fffff; valaddr_reg:x16; val_offset:1720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1720, x17, x15, 1720, x18)

inst_2756:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0400000; op2val:0x807fffff; valaddr_reg:x16; val_offset:1728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1728, x17, x15, 1728, x18)

inst_2757:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x80 and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0xc0400000; valaddr_reg:x16; val_offset:1736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1736, x17, x15, 1736, x18)

inst_2758:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc07fffff; op2val:0x807fffff; valaddr_reg:x16; val_offset:1744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1744, x17, x15, 1744, x18)

inst_2759:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0xc07fffff; valaddr_reg:x16; val_offset:1752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1752, x17, x15, 1752, x18)

inst_2760:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0000000; op2val:0x807fffff; valaddr_reg:x16; val_offset:1760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1760, x17, x15, 1760, x18)

inst_2761:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffff; op2val:0xc0000000; valaddr_reg:x16; val_offset:1768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1768, x17, x15, 1768, x18)

inst_2762:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x4ccccc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x4ccccc; op2val:0x7fffff; valaddr_reg:x16; val_offset:1776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1776, x17, x15, 1776, x18)

inst_2763:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4ccccc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x4ccccc; valaddr_reg:x16; val_offset:1784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1784, x17, x15, 1784, x18)

inst_2764:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x333333 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x333333; op2val:0x7fffff; valaddr_reg:x16; val_offset:1792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1792, x17, x15, 1792, x18)

inst_2765:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x333333 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x333333; valaddr_reg:x16; val_offset:1800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1800, x17, x15, 1800, x18)

inst_2766:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x5b6db6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x5b6db6; op2val:0x7fffff; valaddr_reg:x16; val_offset:1808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1808, x17, x15, 1808, x18)

inst_2767:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b6db6 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x5b6db6; valaddr_reg:x16; val_offset:1816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1816, x17, x15, 1816, x18)

inst_2768:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x249249 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x249249; op2val:0x7fffff; valaddr_reg:x16; val_offset:1824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1824, x17, x15, 1824, x18)

inst_2769:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x249249 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x249249; valaddr_reg:x16; val_offset:1832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1832, x17, x15, 1832, x18)

inst_2770:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x444444 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x444444; op2val:0x7fffff; valaddr_reg:x16; val_offset:1840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1840, x17, x15, 1840, x18)

inst_2771:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x444444 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x444444; valaddr_reg:x16; val_offset:1848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1848, x17, x15, 1848, x18)

inst_2772:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x3bbbbb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3bbbbb; op2val:0x7fffff; valaddr_reg:x16; val_offset:1856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1856, x17, x15, 1856, x18)

inst_2773:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3bbbbb and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x3bbbbb; valaddr_reg:x16; val_offset:1864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1864, x17, x15, 1864, x18)

inst_2774:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x666666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x666666; op2val:0x7fffff; valaddr_reg:x16; val_offset:1872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1872, x17, x15, 1872, x18)

inst_2775:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x666666 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x666666; valaddr_reg:x16; val_offset:1880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1880, x17, x15, 1880, x18)

inst_2776:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x199999 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x199999; op2val:0x7fffff; valaddr_reg:x16; val_offset:1888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1888, x17, x15, 1888, x18)

inst_2777:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x199999 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x199999; valaddr_reg:x16; val_offset:1896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1896, x17, x15, 1896, x18)

inst_2778:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x6db6db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6db6db; op2val:0x7fffff; valaddr_reg:x16; val_offset:1904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1904, x17, x15, 1904, x18)

inst_2779:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6db6db and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x6db6db; valaddr_reg:x16; val_offset:1912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1912, x17, x15, 1912, x18)

inst_2780:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x36db6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x36db6d; op2val:0x7fffff; valaddr_reg:x16; val_offset:1920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1920, x17, x15, 1920, x18)

inst_2781:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36db6d and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x36db6d; valaddr_reg:x16; val_offset:1928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1928, x17, x15, 1928, x18)

inst_2782:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x7fffff; valaddr_reg:x16; val_offset:1936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1936, x17, x15, 1936, x18)

inst_2783:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x1; valaddr_reg:x16; val_offset:1944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1944, x17, x15, 1944, x18)

inst_2784:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7ffffe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ffffe; op2val:0x7fffff; valaddr_reg:x16; val_offset:1952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1952, x17, x15, 1952, x18)

inst_2785:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x7ffffe; valaddr_reg:x16; val_offset:1960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1960, x17, x15, 1960, x18)

inst_2786:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000003 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3; op2val:0x7fffff; valaddr_reg:x16; val_offset:1968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1968, x17, x15, 1968, x18)

inst_2787:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x3; valaddr_reg:x16; val_offset:1976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1976, x17, x15, 1976, x18)

inst_2788:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7ffffc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ffffc; op2val:0x7fffff; valaddr_reg:x16; val_offset:1984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1984, x17, x15, 1984, x18)

inst_2789:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x7ffffc; valaddr_reg:x16; val_offset:1992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1992, x17, x15, 1992, x18)

inst_2790:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000007 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7; op2val:0x7fffff; valaddr_reg:x16; val_offset:2000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2000, x17, x15, 2000, x18)

inst_2791:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x7; valaddr_reg:x16; val_offset:2008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2008, x17, x15, 2008, x18)

inst_2792:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7ffff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ffff8; op2val:0x7fffff; valaddr_reg:x16; val_offset:2016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2016, x17, x15, 2016, x18)

inst_2793:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x7ffff8; valaddr_reg:x16; val_offset:2024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_12)

inst_2794:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1800001; op2val:0x7fffff; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_2795:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x03 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x1800001; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 8, x17, x15, 8, x18)

inst_2796:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7ffffe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1fffffe; op2val:0x7fffff; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 16, x17, x15, 16, x18)

inst_2797:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x1fffffe; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 24, x17, x15, 24, x18)

inst_2798:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x000003 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1800003; op2val:0x7fffff; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 32, x17, x15, 32, x18)

inst_2799:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x03 and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x1800003; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 40, x17, x15, 40, x18)

inst_2800:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7ffffc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1fffffc; op2val:0x7fffff; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_2801:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x1fffffc; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 56, x17, x15, 56, x18)

inst_2802:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x000007 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1800007; op2val:0x7fffff; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 64, x17, x15, 64, x18)

inst_2803:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x03 and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x1800007; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 72, x17, x15, 72, x18)

inst_2804:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7ffff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1fffff8; op2val:0x7fffff; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_2805:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x1fffff8; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 88, x17, x15, 88, x18)

inst_2806:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x00000f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x180000f; op2val:0x7fffff; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 96, x17, x15, 96, x18)

inst_2807:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x03 and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x180000f; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 104, x17, x15, 104, x18)

inst_2808:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7ffff0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1fffff0; op2val:0x7fffff; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 112, x17, x15, 112, x18)

inst_2809:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x1fffff0; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 120, x17, x15, 120, x18)

inst_2810:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x00001f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x180001f; op2val:0x7fffff; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_2811:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x03 and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x180001f; valaddr_reg:x16; val_offset:136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 136, x17, x15, 136, x18)

inst_2812:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7fffe0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1ffffe0; op2val:0x7fffff; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 144, x17, x15, 144, x18)

inst_2813:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x1ffffe0; valaddr_reg:x16; val_offset:152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 152, x17, x15, 152, x18)

inst_2814:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x00003f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x180003f; op2val:0x7fffff; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_2815:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x03 and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x180003f; valaddr_reg:x16; val_offset:168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 168, x17, x15, 168, x18)

inst_2816:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7fffc0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1ffffc0; op2val:0x7fffff; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 176, x17, x15, 176, x18)

inst_2817:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x1ffffc0; valaddr_reg:x16; val_offset:184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 184, x17, x15, 184, x18)

inst_2818:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x00007f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x180007f; op2val:0x7fffff; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 192, x17, x15, 192, x18)

inst_2819:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x03 and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x180007f; valaddr_reg:x16; val_offset:200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 200, x17, x15, 200, x18)

inst_2820:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7fff80 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1ffff80; op2val:0x7fffff; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_2821:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x1ffff80; valaddr_reg:x16; val_offset:216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 216, x17, x15, 216, x18)

inst_2822:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x0000ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x18000ff; op2val:0x7fffff; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 224, x17, x15, 224, x18)

inst_2823:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x03 and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x18000ff; valaddr_reg:x16; val_offset:232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 232, x17, x15, 232, x18)

inst_2824:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7fff00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1ffff00; op2val:0x7fffff; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_2825:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x1ffff00; valaddr_reg:x16; val_offset:248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 248, x17, x15, 248, x18)

inst_2826:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x0001ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x18001ff; op2val:0x7fffff; valaddr_reg:x16; val_offset:256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 256, x17, x15, 256, x18)

inst_2827:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x03 and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x18001ff; valaddr_reg:x16; val_offset:264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 264, x17, x15, 264, x18)

inst_2828:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7ffe00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1fffe00; op2val:0x7fffff; valaddr_reg:x16; val_offset:272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 272, x17, x15, 272, x18)

inst_2829:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x1fffe00; valaddr_reg:x16; val_offset:280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 280, x17, x15, 280, x18)

inst_2830:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x0003ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x18003ff; op2val:0x7fffff; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_2831:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x03 and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x18003ff; valaddr_reg:x16; val_offset:296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 296, x17, x15, 296, x18)

inst_2832:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7ffc00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1fffc00; op2val:0x7fffff; valaddr_reg:x16; val_offset:304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 304, x17, x15, 304, x18)

inst_2833:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x1fffc00; valaddr_reg:x16; val_offset:312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 312, x17, x15, 312, x18)

inst_2834:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x0007ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x18007ff; op2val:0x7fffff; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_2835:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x03 and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x18007ff; valaddr_reg:x16; val_offset:328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 328, x17, x15, 328, x18)

inst_2836:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7ff800 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1fff800; op2val:0x7fffff; valaddr_reg:x16; val_offset:336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 336, x17, x15, 336, x18)

inst_2837:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x1fff800; valaddr_reg:x16; val_offset:344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 344, x17, x15, 344, x18)

inst_2838:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x000fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1800fff; op2val:0x7fffff; valaddr_reg:x16; val_offset:352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 352, x17, x15, 352, x18)

inst_2839:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x03 and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x1800fff; valaddr_reg:x16; val_offset:360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 360, x17, x15, 360, x18)

inst_2840:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7ff000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1fff000; op2val:0x7fffff; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_2841:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x1fff000; valaddr_reg:x16; val_offset:376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 376, x17, x15, 376, x18)

inst_2842:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x001fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1801fff; op2val:0x7fffff; valaddr_reg:x16; val_offset:384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 384, x17, x15, 384, x18)

inst_2843:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x03 and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x1801fff; valaddr_reg:x16; val_offset:392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 392, x17, x15, 392, x18)

inst_2844:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7fe000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1ffe000; op2val:0x7fffff; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_2845:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x1ffe000; valaddr_reg:x16; val_offset:408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 408, x17, x15, 408, x18)

inst_2846:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x003fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1803fff; op2val:0x7fffff; valaddr_reg:x16; val_offset:416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 416, x17, x15, 416, x18)

inst_2847:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x03 and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x1803fff; valaddr_reg:x16; val_offset:424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 424, x17, x15, 424, x18)

inst_2848:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7fc000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1ffc000; op2val:0x7fffff; valaddr_reg:x16; val_offset:432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 432, x17, x15, 432, x18)

inst_2849:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x1ffc000; valaddr_reg:x16; val_offset:440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 440, x17, x15, 440, x18)

inst_2850:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x007fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1807fff; op2val:0x7fffff; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_2851:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x03 and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x1807fff; valaddr_reg:x16; val_offset:456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 456, x17, x15, 456, x18)

inst_2852:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7f8000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1ff8000; op2val:0x7fffff; valaddr_reg:x16; val_offset:464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 464, x17, x15, 464, x18)

inst_2853:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x1ff8000; valaddr_reg:x16; val_offset:472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 472, x17, x15, 472, x18)

inst_2854:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x00ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x180ffff; op2val:0x7fffff; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_2855:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x03 and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x180ffff; valaddr_reg:x16; val_offset:488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 488, x17, x15, 488, x18)

inst_2856:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7f0000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1ff0000; op2val:0x7fffff; valaddr_reg:x16; val_offset:496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 496, x17, x15, 496, x18)

inst_2857:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x1ff0000; valaddr_reg:x16; val_offset:504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 504, x17, x15, 504, x18)

inst_2858:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x01ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x181ffff; op2val:0x7fffff; valaddr_reg:x16; val_offset:512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 512, x17, x15, 512, x18)

inst_2859:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x03 and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x181ffff; valaddr_reg:x16; val_offset:520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 520, x17, x15, 520, x18)

inst_2860:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7e0000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1fe0000; op2val:0x7fffff; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_2861:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x1fe0000; valaddr_reg:x16; val_offset:536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 536, x17, x15, 536, x18)

inst_2862:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x03ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x183ffff; op2val:0x7fffff; valaddr_reg:x16; val_offset:544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 544, x17, x15, 544, x18)

inst_2863:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x03 and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x183ffff; valaddr_reg:x16; val_offset:552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 552, x17, x15, 552, x18)

inst_2864:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7c0000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1fc0000; op2val:0x7fffff; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_2865:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x1fc0000; valaddr_reg:x16; val_offset:568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 568, x17, x15, 568, x18)

inst_2866:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x07ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x187ffff; op2val:0x7fffff; valaddr_reg:x16; val_offset:576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 576, x17, x15, 576, x18)

inst_2867:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x03 and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x187ffff; valaddr_reg:x16; val_offset:584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 584, x17, x15, 584, x18)

inst_2868:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x780000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1f80000; op2val:0x7fffff; valaddr_reg:x16; val_offset:592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 592, x17, x15, 592, x18)

inst_2869:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x03 and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x1f80000; valaddr_reg:x16; val_offset:600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 600, x17, x15, 600, x18)

inst_2870:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x0fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x18fffff; op2val:0x7fffff; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 608, x17, x15, 608, x18)

inst_2871:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x03 and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x18fffff; valaddr_reg:x16; val_offset:616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 616, x17, x15, 616, x18)

inst_2872:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x700000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1f00000; op2val:0x7fffff; valaddr_reg:x16; val_offset:624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 624, x17, x15, 624, x18)

inst_2873:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x03 and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x1f00000; valaddr_reg:x16; val_offset:632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 632, x17, x15, 632, x18)

inst_2874:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x1fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x19fffff; op2val:0x7fffff; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_2875:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x19fffff; valaddr_reg:x16; val_offset:648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 648, x17, x15, 648, x18)

inst_2876:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x600000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1e00000; op2val:0x7fffff; valaddr_reg:x16; val_offset:656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 656, x17, x15, 656, x18)

inst_2877:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x03 and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x1e00000; valaddr_reg:x16; val_offset:664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 664, x17, x15, 664, x18)

inst_2878:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x3fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1bfffff; op2val:0x7fffff; valaddr_reg:x16; val_offset:672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 672, x17, x15, 672, x18)

inst_2879:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x03 and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x1bfffff; valaddr_reg:x16; val_offset:680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 680, x17, x15, 680, x18)

inst_2880:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1c00000; op2val:0x7fffff; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 688, x17, x15, 688, x18)

inst_2881:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x03 and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x1c00000; valaddr_reg:x16; val_offset:696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 696, x17, x15, 696, x18)

inst_2882:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1ffffff; op2val:0x7fffff; valaddr_reg:x16; val_offset:704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 704, x17, x15, 704, x18)

inst_2883:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x1ffffff; valaddr_reg:x16; val_offset:712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 712, x17, x15, 712, x18)

inst_2884:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1800000; op2val:0x7fffff; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_2885:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x03 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x1800000; valaddr_reg:x16; val_offset:728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 728, x17, x15, 728, x18)

inst_2886:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1000001; op2val:0x7fffff; valaddr_reg:x16; val_offset:736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 736, x17, x15, 736, x18)

inst_2887:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x02 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x1000001; valaddr_reg:x16; val_offset:744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 744, x17, x15, 744, x18)

inst_2888:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7ffffe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17ffffe; op2val:0x7fffff; valaddr_reg:x16; val_offset:752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 752, x17, x15, 752, x18)

inst_2889:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x17ffffe; valaddr_reg:x16; val_offset:760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 760, x17, x15, 760, x18)

inst_2890:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x000003 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1000003; op2val:0x7fffff; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 768, x17, x15, 768, x18)

inst_2891:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x02 and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x1000003; valaddr_reg:x16; val_offset:776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 776, x17, x15, 776, x18)

inst_2892:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7ffffc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17ffffc; op2val:0x7fffff; valaddr_reg:x16; val_offset:784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 784, x17, x15, 784, x18)

inst_2893:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x17ffffc; valaddr_reg:x16; val_offset:792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 792, x17, x15, 792, x18)

inst_2894:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x000007 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1000007; op2val:0x7fffff; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_2895:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x02 and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x1000007; valaddr_reg:x16; val_offset:808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 808, x17, x15, 808, x18)

inst_2896:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7ffff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17ffff8; op2val:0x7fffff; valaddr_reg:x16; val_offset:816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 816, x17, x15, 816, x18)

inst_2897:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x17ffff8; valaddr_reg:x16; val_offset:824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 824, x17, x15, 824, x18)

inst_2898:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x00000f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x100000f; op2val:0x7fffff; valaddr_reg:x16; val_offset:832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 832, x17, x15, 832, x18)

inst_2899:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x02 and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x100000f; valaddr_reg:x16; val_offset:840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 840, x17, x15, 840, x18)

inst_2900:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7ffff0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17ffff0; op2val:0x7fffff; valaddr_reg:x16; val_offset:848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 848, x17, x15, 848, x18)

inst_2901:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x17ffff0; valaddr_reg:x16; val_offset:856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 856, x17, x15, 856, x18)

inst_2902:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x00001f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x100001f; op2val:0x7fffff; valaddr_reg:x16; val_offset:864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 864, x17, x15, 864, x18)

inst_2903:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x02 and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x100001f; valaddr_reg:x16; val_offset:872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 872, x17, x15, 872, x18)

inst_2904:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7fffe0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17fffe0; op2val:0x7fffff; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 880, x17, x15, 880, x18)

inst_2905:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x17fffe0; valaddr_reg:x16; val_offset:888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 888, x17, x15, 888, x18)

inst_2906:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x00003f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x100003f; op2val:0x7fffff; valaddr_reg:x16; val_offset:896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 896, x17, x15, 896, x18)

inst_2907:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x02 and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x100003f; valaddr_reg:x16; val_offset:904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 904, x17, x15, 904, x18)

inst_2908:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7fffc0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17fffc0; op2val:0x7fffff; valaddr_reg:x16; val_offset:912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 912, x17, x15, 912, x18)

inst_2909:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x17fffc0; valaddr_reg:x16; val_offset:920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 920, x17, x15, 920, x18)

inst_2910:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x00007f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x100007f; op2val:0x7fffff; valaddr_reg:x16; val_offset:928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 928, x17, x15, 928, x18)

inst_2911:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x02 and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x100007f; valaddr_reg:x16; val_offset:936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 936, x17, x15, 936, x18)

inst_2912:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7fff80 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17fff80; op2val:0x7fffff; valaddr_reg:x16; val_offset:944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 944, x17, x15, 944, x18)

inst_2913:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x17fff80; valaddr_reg:x16; val_offset:952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 952, x17, x15, 952, x18)

inst_2914:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x0000ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x10000ff; op2val:0x7fffff; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 960, x17, x15, 960, x18)

inst_2915:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x10000ff; valaddr_reg:x16; val_offset:968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 968, x17, x15, 968, x18)

inst_2916:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7fff00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17fff00; op2val:0x7fffff; valaddr_reg:x16; val_offset:976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 976, x17, x15, 976, x18)

inst_2917:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x17fff00; valaddr_reg:x16; val_offset:984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 984, x17, x15, 984, x18)

inst_2918:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x0001ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x10001ff; op2val:0x7fffff; valaddr_reg:x16; val_offset:992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 992, x17, x15, 992, x18)

inst_2919:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x10001ff; valaddr_reg:x16; val_offset:1000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1000, x17, x15, 1000, x18)

inst_2920:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7ffe00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17ffe00; op2val:0x7fffff; valaddr_reg:x16; val_offset:1008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1008, x17, x15, 1008, x18)

inst_2921:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x17ffe00; valaddr_reg:x16; val_offset:1016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1016, x17, x15, 1016, x18)

inst_2922:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x0003ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x10003ff; op2val:0x7fffff; valaddr_reg:x16; val_offset:1024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1024, x17, x15, 1024, x18)

inst_2923:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x10003ff; valaddr_reg:x16; val_offset:1032; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1032, x17, x15, 1032, x18)

inst_2924:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7ffc00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17ffc00; op2val:0x7fffff; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1040, x17, x15, 1040, x18)

inst_2925:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x17ffc00; valaddr_reg:x16; val_offset:1048; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1048, x17, x15, 1048, x18)

inst_2926:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x0007ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x10007ff; op2val:0x7fffff; valaddr_reg:x16; val_offset:1056; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1056, x17, x15, 1056, x18)

inst_2927:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x10007ff; valaddr_reg:x16; val_offset:1064; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1064, x17, x15, 1064, x18)

inst_2928:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7ff800 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17ff800; op2val:0x7fffff; valaddr_reg:x16; val_offset:1072; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1072, x17, x15, 1072, x18)

inst_2929:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x17ff800; valaddr_reg:x16; val_offset:1080; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1080, x17, x15, 1080, x18)

inst_2930:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x000fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1000fff; op2val:0x7fffff; valaddr_reg:x16; val_offset:1088; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1088, x17, x15, 1088, x18)

inst_2931:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x02 and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x1000fff; valaddr_reg:x16; val_offset:1096; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1096, x17, x15, 1096, x18)

inst_2932:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7ff000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17ff000; op2val:0x7fffff; valaddr_reg:x16; val_offset:1104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1104, x17, x15, 1104, x18)

inst_2933:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x17ff000; valaddr_reg:x16; val_offset:1112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1112, x17, x15, 1112, x18)

inst_2934:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x001fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1001fff; op2val:0x7fffff; valaddr_reg:x16; val_offset:1120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1120, x17, x15, 1120, x18)

inst_2935:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x02 and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x1001fff; valaddr_reg:x16; val_offset:1128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1128, x17, x15, 1128, x18)

inst_2936:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7fe000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17fe000; op2val:0x7fffff; valaddr_reg:x16; val_offset:1136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1136, x17, x15, 1136, x18)

inst_2937:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x17fe000; valaddr_reg:x16; val_offset:1144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1144, x17, x15, 1144, x18)

inst_2938:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x003fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1003fff; op2val:0x7fffff; valaddr_reg:x16; val_offset:1152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1152, x17, x15, 1152, x18)

inst_2939:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x02 and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x1003fff; valaddr_reg:x16; val_offset:1160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1160, x17, x15, 1160, x18)

inst_2940:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7fc000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17fc000; op2val:0x7fffff; valaddr_reg:x16; val_offset:1168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1168, x17, x15, 1168, x18)

inst_2941:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x17fc000; valaddr_reg:x16; val_offset:1176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1176, x17, x15, 1176, x18)

inst_2942:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x007fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1007fff; op2val:0x7fffff; valaddr_reg:x16; val_offset:1184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1184, x17, x15, 1184, x18)

inst_2943:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x02 and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x1007fff; valaddr_reg:x16; val_offset:1192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1192, x17, x15, 1192, x18)

inst_2944:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7f8000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17f8000; op2val:0x7fffff; valaddr_reg:x16; val_offset:1200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1200, x17, x15, 1200, x18)

inst_2945:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x17f8000; valaddr_reg:x16; val_offset:1208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1208, x17, x15, 1208, x18)

inst_2946:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x00ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x100ffff; op2val:0x7fffff; valaddr_reg:x16; val_offset:1216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1216, x17, x15, 1216, x18)

inst_2947:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x02 and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x100ffff; valaddr_reg:x16; val_offset:1224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1224, x17, x15, 1224, x18)

inst_2948:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7f0000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17f0000; op2val:0x7fffff; valaddr_reg:x16; val_offset:1232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1232, x17, x15, 1232, x18)

inst_2949:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x17f0000; valaddr_reg:x16; val_offset:1240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1240, x17, x15, 1240, x18)

inst_2950:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x01ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x101ffff; op2val:0x7fffff; valaddr_reg:x16; val_offset:1248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1248, x17, x15, 1248, x18)

inst_2951:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x02 and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x101ffff; valaddr_reg:x16; val_offset:1256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1256, x17, x15, 1256, x18)

inst_2952:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7e0000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17e0000; op2val:0x7fffff; valaddr_reg:x16; val_offset:1264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1264, x17, x15, 1264, x18)

inst_2953:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x17e0000; valaddr_reg:x16; val_offset:1272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1272, x17, x15, 1272, x18)

inst_2954:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x03ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x103ffff; op2val:0x7fffff; valaddr_reg:x16; val_offset:1280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1280, x17, x15, 1280, x18)

inst_2955:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x103ffff; valaddr_reg:x16; val_offset:1288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1288, x17, x15, 1288, x18)

inst_2956:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7c0000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17c0000; op2val:0x7fffff; valaddr_reg:x16; val_offset:1296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1296, x17, x15, 1296, x18)

inst_2957:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x17c0000; valaddr_reg:x16; val_offset:1304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1304, x17, x15, 1304, x18)

inst_2958:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x07ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x107ffff; op2val:0x7fffff; valaddr_reg:x16; val_offset:1312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1312, x17, x15, 1312, x18)

inst_2959:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x02 and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x107ffff; valaddr_reg:x16; val_offset:1320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1320, x17, x15, 1320, x18)

inst_2960:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x780000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1780000; op2val:0x7fffff; valaddr_reg:x16; val_offset:1328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1328, x17, x15, 1328, x18)

inst_2961:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x02 and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x1780000; valaddr_reg:x16; val_offset:1336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1336, x17, x15, 1336, x18)

inst_2962:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x0fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x10fffff; op2val:0x7fffff; valaddr_reg:x16; val_offset:1344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1344, x17, x15, 1344, x18)

inst_2963:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x10fffff; valaddr_reg:x16; val_offset:1352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1352, x17, x15, 1352, x18)

inst_2964:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x700000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1700000; op2val:0x7fffff; valaddr_reg:x16; val_offset:1360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1360, x17, x15, 1360, x18)

inst_2965:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x02 and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x1700000; valaddr_reg:x16; val_offset:1368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1368, x17, x15, 1368, x18)

inst_2966:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x1fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x11fffff; op2val:0x7fffff; valaddr_reg:x16; val_offset:1376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1376, x17, x15, 1376, x18)

inst_2967:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x02 and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x11fffff; valaddr_reg:x16; val_offset:1384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1384, x17, x15, 1384, x18)

inst_2968:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x600000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1600000; op2val:0x7fffff; valaddr_reg:x16; val_offset:1392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1392, x17, x15, 1392, x18)

inst_2969:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x02 and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x1600000; valaddr_reg:x16; val_offset:1400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1400, x17, x15, 1400, x18)

inst_2970:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x3fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x13fffff; op2val:0x7fffff; valaddr_reg:x16; val_offset:1408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1408, x17, x15, 1408, x18)

inst_2971:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x02 and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x13fffff; valaddr_reg:x16; val_offset:1416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1416, x17, x15, 1416, x18)

inst_2972:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1400000; op2val:0x7fffff; valaddr_reg:x16; val_offset:1424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1424, x17, x15, 1424, x18)

inst_2973:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x02 and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x1400000; valaddr_reg:x16; val_offset:1432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1432, x17, x15, 1432, x18)

inst_2974:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17fffff; op2val:0x7fffff; valaddr_reg:x16; val_offset:1440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1440, x17, x15, 1440, x18)

inst_2975:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x17fffff; valaddr_reg:x16; val_offset:1448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1448, x17, x15, 1448, x18)

inst_2976:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1000000; op2val:0x7fffff; valaddr_reg:x16; val_offset:1456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1456, x17, x15, 1456, x18)

inst_2977:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x02 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x1000000; valaddr_reg:x16; val_offset:1464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1464, x17, x15, 1464, x18)

inst_2978:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800001; op2val:0x7fffff; valaddr_reg:x16; val_offset:1472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1472, x17, x15, 1472, x18)

inst_2979:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x800001; valaddr_reg:x16; val_offset:1480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1480, x17, x15, 1480, x18)

inst_2980:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7ffffe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfffffe; op2val:0x7fffff; valaddr_reg:x16; val_offset:1488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1488, x17, x15, 1488, x18)

inst_2981:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0xfffffe; valaddr_reg:x16; val_offset:1496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1496, x17, x15, 1496, x18)

inst_2982:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000003 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800003; op2val:0x7fffff; valaddr_reg:x16; val_offset:1504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1504, x17, x15, 1504, x18)

inst_2983:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x800003; valaddr_reg:x16; val_offset:1512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1512, x17, x15, 1512, x18)

inst_2984:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7ffffc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfffffc; op2val:0x7fffff; valaddr_reg:x16; val_offset:1520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1520, x17, x15, 1520, x18)

inst_2985:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0xfffffc; valaddr_reg:x16; val_offset:1528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1528, x17, x15, 1528, x18)

inst_2986:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000007 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800007; op2val:0x7fffff; valaddr_reg:x16; val_offset:1536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1536, x17, x15, 1536, x18)

inst_2987:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x800007; valaddr_reg:x16; val_offset:1544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1544, x17, x15, 1544, x18)

inst_2988:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7ffff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfffff8; op2val:0x7fffff; valaddr_reg:x16; val_offset:1552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1552, x17, x15, 1552, x18)

inst_2989:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0xfffff8; valaddr_reg:x16; val_offset:1560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1560, x17, x15, 1560, x18)

inst_2990:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00000f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000f; op2val:0x7fffff; valaddr_reg:x16; val_offset:1568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1568, x17, x15, 1568, x18)

inst_2991:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x80000f; valaddr_reg:x16; val_offset:1576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1576, x17, x15, 1576, x18)

inst_2992:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7ffff0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfffff0; op2val:0x7fffff; valaddr_reg:x16; val_offset:1584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1584, x17, x15, 1584, x18)

inst_2993:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0xfffff0; valaddr_reg:x16; val_offset:1592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1592, x17, x15, 1592, x18)

inst_2994:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00001f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80001f; op2val:0x7fffff; valaddr_reg:x16; val_offset:1600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1600, x17, x15, 1600, x18)

inst_2995:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x80001f; valaddr_reg:x16; val_offset:1608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1608, x17, x15, 1608, x18)

inst_2996:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7fffe0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xffffe0; op2val:0x7fffff; valaddr_reg:x16; val_offset:1616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1616, x17, x15, 1616, x18)

inst_2997:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0xffffe0; valaddr_reg:x16; val_offset:1624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1624, x17, x15, 1624, x18)

inst_2998:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00003f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80003f; op2val:0x7fffff; valaddr_reg:x16; val_offset:1632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1632, x17, x15, 1632, x18)

inst_2999:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x80003f; valaddr_reg:x16; val_offset:1640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1640, x17, x15, 1640, x18)

inst_3000:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7fffc0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xffffc0; op2val:0x7fffff; valaddr_reg:x16; val_offset:1648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1648, x17, x15, 1648, x18)

inst_3001:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0xffffc0; valaddr_reg:x16; val_offset:1656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1656, x17, x15, 1656, x18)

inst_3002:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00007f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80007f; op2val:0x7fffff; valaddr_reg:x16; val_offset:1664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1664, x17, x15, 1664, x18)

inst_3003:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x80007f; valaddr_reg:x16; val_offset:1672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1672, x17, x15, 1672, x18)

inst_3004:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7fff80 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xffff80; op2val:0x7fffff; valaddr_reg:x16; val_offset:1680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1680, x17, x15, 1680, x18)

inst_3005:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0xffff80; valaddr_reg:x16; val_offset:1688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1688, x17, x15, 1688, x18)

inst_3006:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x0000ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8000ff; op2val:0x7fffff; valaddr_reg:x16; val_offset:1696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1696, x17, x15, 1696, x18)

inst_3007:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x8000ff; valaddr_reg:x16; val_offset:1704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1704, x17, x15, 1704, x18)

inst_3008:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7fff00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xffff00; op2val:0x7fffff; valaddr_reg:x16; val_offset:1712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1712, x17, x15, 1712, x18)

inst_3009:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0xffff00; valaddr_reg:x16; val_offset:1720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1720, x17, x15, 1720, x18)

inst_3010:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x0001ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8001ff; op2val:0x7fffff; valaddr_reg:x16; val_offset:1728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1728, x17, x15, 1728, x18)

inst_3011:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x8001ff; valaddr_reg:x16; val_offset:1736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1736, x17, x15, 1736, x18)

inst_3012:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7ffe00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfffe00; op2val:0x7fffff; valaddr_reg:x16; val_offset:1744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1744, x17, x15, 1744, x18)

inst_3013:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0xfffe00; valaddr_reg:x16; val_offset:1752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1752, x17, x15, 1752, x18)

inst_3014:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x0003ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8003ff; op2val:0x7fffff; valaddr_reg:x16; val_offset:1760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1760, x17, x15, 1760, x18)

inst_3015:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x8003ff; valaddr_reg:x16; val_offset:1768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1768, x17, x15, 1768, x18)

inst_3016:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7ffc00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfffc00; op2val:0x7fffff; valaddr_reg:x16; val_offset:1776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1776, x17, x15, 1776, x18)

inst_3017:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0xfffc00; valaddr_reg:x16; val_offset:1784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1784, x17, x15, 1784, x18)

inst_3018:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x0007ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8007ff; op2val:0x7fffff; valaddr_reg:x16; val_offset:1792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1792, x17, x15, 1792, x18)

inst_3019:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x8007ff; valaddr_reg:x16; val_offset:1800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1800, x17, x15, 1800, x18)

inst_3020:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7ff800 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfff800; op2val:0x7fffff; valaddr_reg:x16; val_offset:1808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1808, x17, x15, 1808, x18)

inst_3021:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0xfff800; valaddr_reg:x16; val_offset:1816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1816, x17, x15, 1816, x18)

inst_3022:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800fff; op2val:0x7fffff; valaddr_reg:x16; val_offset:1824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1824, x17, x15, 1824, x18)

inst_3023:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x800fff; valaddr_reg:x16; val_offset:1832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1832, x17, x15, 1832, x18)

inst_3024:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7ff000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfff000; op2val:0x7fffff; valaddr_reg:x16; val_offset:1840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1840, x17, x15, 1840, x18)

inst_3025:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0xfff000; valaddr_reg:x16; val_offset:1848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1848, x17, x15, 1848, x18)

inst_3026:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x001fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x801fff; op2val:0x7fffff; valaddr_reg:x16; val_offset:1856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1856, x17, x15, 1856, x18)

inst_3027:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x801fff; valaddr_reg:x16; val_offset:1864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1864, x17, x15, 1864, x18)

inst_3028:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7fe000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xffe000; op2val:0x7fffff; valaddr_reg:x16; val_offset:1872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1872, x17, x15, 1872, x18)

inst_3029:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0xffe000; valaddr_reg:x16; val_offset:1880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1880, x17, x15, 1880, x18)

inst_3030:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x003fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x803fff; op2val:0x7fffff; valaddr_reg:x16; val_offset:1888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1888, x17, x15, 1888, x18)

inst_3031:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x803fff; valaddr_reg:x16; val_offset:1896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1896, x17, x15, 1896, x18)

inst_3032:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7fc000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xffc000; op2val:0x7fffff; valaddr_reg:x16; val_offset:1904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1904, x17, x15, 1904, x18)

inst_3033:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0xffc000; valaddr_reg:x16; val_offset:1912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1912, x17, x15, 1912, x18)

inst_3034:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x007fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fff; op2val:0x7fffff; valaddr_reg:x16; val_offset:1920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1920, x17, x15, 1920, x18)

inst_3035:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x807fff; valaddr_reg:x16; val_offset:1928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1928, x17, x15, 1928, x18)

inst_3036:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7f8000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff8000; op2val:0x7fffff; valaddr_reg:x16; val_offset:1936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1936, x17, x15, 1936, x18)

inst_3037:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0xff8000; valaddr_reg:x16; val_offset:1944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1944, x17, x15, 1944, x18)

inst_3038:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80ffff; op2val:0x7fffff; valaddr_reg:x16; val_offset:1952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1952, x17, x15, 1952, x18)

inst_3039:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x80ffff; valaddr_reg:x16; val_offset:1960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1960, x17, x15, 1960, x18)

inst_3040:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7f0000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff0000; op2val:0x7fffff; valaddr_reg:x16; val_offset:1968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1968, x17, x15, 1968, x18)

inst_3041:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0xff0000; valaddr_reg:x16; val_offset:1976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1976, x17, x15, 1976, x18)

inst_3042:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x01ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81ffff; op2val:0x7fffff; valaddr_reg:x16; val_offset:1984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1984, x17, x15, 1984, x18)

inst_3043:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x81ffff; valaddr_reg:x16; val_offset:1992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1992, x17, x15, 1992, x18)

inst_3044:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7e0000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe0000; op2val:0x7fffff; valaddr_reg:x16; val_offset:2000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2000, x17, x15, 2000, x18)

inst_3045:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0xfe0000; valaddr_reg:x16; val_offset:2008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2008, x17, x15, 2008, x18)

inst_3046:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x03ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x83ffff; op2val:0x7fffff; valaddr_reg:x16; val_offset:2016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2016, x17, x15, 2016, x18)

inst_3047:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x83ffff; valaddr_reg:x16; val_offset:2024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_13)

inst_3048:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7c0000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfc0000; op2val:0x7fffff; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_3049:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0xfc0000; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 8, x17, x15, 8, x18)

inst_3050:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x07ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x87ffff; op2val:0x7fffff; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 16, x17, x15, 16, x18)

inst_3051:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x87ffff; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 24, x17, x15, 24, x18)

inst_3052:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x780000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf80000; op2val:0x7fffff; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 32, x17, x15, 32, x18)

inst_3053:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0xf80000; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 40, x17, x15, 40, x18)

inst_3054:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x0fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8fffff; op2val:0x7fffff; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_3055:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x8fffff; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 56, x17, x15, 56, x18)

inst_3056:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x700000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf00000; op2val:0x7fffff; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 64, x17, x15, 64, x18)

inst_3057:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0xf00000; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 72, x17, x15, 72, x18)

inst_3058:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x1fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x9fffff; op2val:0x7fffff; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_3059:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x9fffff; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 88, x17, x15, 88, x18)

inst_3060:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x600000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xe00000; op2val:0x7fffff; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 96, x17, x15, 96, x18)

inst_3061:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0xe00000; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 104, x17, x15, 104, x18)

inst_3062:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x3fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbfffff; op2val:0x7fffff; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 112, x17, x15, 112, x18)

inst_3063:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0xbfffff; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 120, x17, x15, 120, x18)

inst_3064:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc00000; op2val:0x7fffff; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_3065:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0xc00000; valaddr_reg:x16; val_offset:136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 136, x17, x15, 136, x18)

inst_3066:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xffffff; op2val:0x7fffff; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 144, x17, x15, 144, x18)

inst_3067:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0xffffff; valaddr_reg:x16; val_offset:152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 152, x17, x15, 152, x18)

inst_3068:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf; op2val:0x7fffff; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_3069:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0xf; valaddr_reg:x16; val_offset:168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 168, x17, x15, 168, x18)

inst_3070:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7ffff0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ffff0; op2val:0x7fffff; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 176, x17, x15, 176, x18)

inst_3071:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x7ffff0; valaddr_reg:x16; val_offset:184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 184, x17, x15, 184, x18)

inst_3072:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1f; op2val:0x7fffff; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 192, x17, x15, 192, x18)

inst_3073:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x1f; valaddr_reg:x16; val_offset:200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 200, x17, x15, 200, x18)

inst_3074:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffe0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffe0; op2val:0x7fffff; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_3075:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x7fffe0; valaddr_reg:x16; val_offset:216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 216, x17, x15, 216, x18)

inst_3076:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f; op2val:0x7fffff; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 224, x17, x15, 224, x18)

inst_3077:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x3f; valaddr_reg:x16; val_offset:232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 232, x17, x15, 232, x18)

inst_3078:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffc0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffc0; op2val:0x7fffff; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_3079:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x7fffc0; valaddr_reg:x16; val_offset:248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 248, x17, x15, 248, x18)

inst_3080:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00007f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f; op2val:0x7fffff; valaddr_reg:x16; val_offset:256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 256, x17, x15, 256, x18)

inst_3081:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x7f; valaddr_reg:x16; val_offset:264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 264, x17, x15, 264, x18)

inst_3082:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fff80 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fff80; op2val:0x7fffff; valaddr_reg:x16; val_offset:272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 272, x17, x15, 272, x18)

inst_3083:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x7fff80; valaddr_reg:x16; val_offset:280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 280, x17, x15, 280, x18)

inst_3084:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0000ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff; op2val:0x7fffff; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_3085:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0xff; valaddr_reg:x16; val_offset:296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 296, x17, x15, 296, x18)

inst_3086:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fff00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fff00; op2val:0x7fffff; valaddr_reg:x16; val_offset:304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 304, x17, x15, 304, x18)

inst_3087:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x7fff00; valaddr_reg:x16; val_offset:312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 312, x17, x15, 312, x18)

inst_3088:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0001ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1ff; op2val:0x7fffff; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_3089:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x1ff; valaddr_reg:x16; val_offset:328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 328, x17, x15, 328, x18)

inst_3090:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7ffe00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ffe00; op2val:0x7fffff; valaddr_reg:x16; val_offset:336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 336, x17, x15, 336, x18)

inst_3091:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x7ffe00; valaddr_reg:x16; val_offset:344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 344, x17, x15, 344, x18)

inst_3092:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0003ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ff; op2val:0x7fffff; valaddr_reg:x16; val_offset:352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 352, x17, x15, 352, x18)

inst_3093:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x3ff; valaddr_reg:x16; val_offset:360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 360, x17, x15, 360, x18)

inst_3094:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7ffc00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ffc00; op2val:0x7fffff; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_3095:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x7ffc00; valaddr_reg:x16; val_offset:376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 376, x17, x15, 376, x18)

inst_3096:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0007ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ff; op2val:0x7fffff; valaddr_reg:x16; val_offset:384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 384, x17, x15, 384, x18)

inst_3097:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x7ff; valaddr_reg:x16; val_offset:392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 392, x17, x15, 392, x18)

inst_3098:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7ff800 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ff800; op2val:0x7fffff; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_3099:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x7ff800; valaddr_reg:x16; val_offset:408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 408, x17, x15, 408, x18)

inst_3100:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfff; op2val:0x7fffff; valaddr_reg:x16; val_offset:416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 416, x17, x15, 416, x18)

inst_3101:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0xfff; valaddr_reg:x16; val_offset:424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 424, x17, x15, 424, x18)

inst_3102:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7ff000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ff000; op2val:0x7fffff; valaddr_reg:x16; val_offset:432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 432, x17, x15, 432, x18)

inst_3103:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x7ff000; valaddr_reg:x16; val_offset:440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 440, x17, x15, 440, x18)

inst_3104:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x001fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1fff; op2val:0x7fffff; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_3105:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x1fff; valaddr_reg:x16; val_offset:456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 456, x17, x15, 456, x18)

inst_3106:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fe000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fe000; op2val:0x7fffff; valaddr_reg:x16; val_offset:464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 464, x17, x15, 464, x18)

inst_3107:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x7fe000; valaddr_reg:x16; val_offset:472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 472, x17, x15, 472, x18)

inst_3108:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x003fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3fff; op2val:0x7fffff; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_3109:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x3fff; valaddr_reg:x16; val_offset:488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 488, x17, x15, 488, x18)

inst_3110:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fc000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fc000; op2val:0x7fffff; valaddr_reg:x16; val_offset:496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 496, x17, x15, 496, x18)

inst_3111:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x7fc000; valaddr_reg:x16; val_offset:504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 504, x17, x15, 504, x18)

inst_3112:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x007fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fff; op2val:0x7fffff; valaddr_reg:x16; val_offset:512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 512, x17, x15, 512, x18)

inst_3113:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x7fff; valaddr_reg:x16; val_offset:520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 520, x17, x15, 520, x18)

inst_3114:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7f8000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f8000; op2val:0x7fffff; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_3115:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x7f8000; valaddr_reg:x16; val_offset:536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 536, x17, x15, 536, x18)

inst_3116:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xffff; op2val:0x7fffff; valaddr_reg:x16; val_offset:544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 544, x17, x15, 544, x18)

inst_3117:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0xffff; valaddr_reg:x16; val_offset:552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 552, x17, x15, 552, x18)

inst_3118:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7f0000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0000; op2val:0x7fffff; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_3119:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x7f0000; valaddr_reg:x16; val_offset:568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 568, x17, x15, 568, x18)

inst_3120:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x01ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1ffff; op2val:0x7fffff; valaddr_reg:x16; val_offset:576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 576, x17, x15, 576, x18)

inst_3121:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x1ffff; valaddr_reg:x16; val_offset:584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 584, x17, x15, 584, x18)

inst_3122:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7e0000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e0000; op2val:0x7fffff; valaddr_reg:x16; val_offset:592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 592, x17, x15, 592, x18)

inst_3123:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x7e0000; valaddr_reg:x16; val_offset:600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 600, x17, x15, 600, x18)

inst_3124:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x03ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ffff; op2val:0x7fffff; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 608, x17, x15, 608, x18)

inst_3125:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x3ffff; valaddr_reg:x16; val_offset:616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 616, x17, x15, 616, x18)

inst_3126:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7c0000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7c0000; op2val:0x7fffff; valaddr_reg:x16; val_offset:624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 624, x17, x15, 624, x18)

inst_3127:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x7c0000; valaddr_reg:x16; val_offset:632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 632, x17, x15, 632, x18)

inst_3128:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x07ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ffff; op2val:0x7fffff; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_3129:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x7ffff; valaddr_reg:x16; val_offset:648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 648, x17, x15, 648, x18)

inst_3130:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x780000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x780000; op2val:0x7fffff; valaddr_reg:x16; val_offset:656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 656, x17, x15, 656, x18)

inst_3131:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x780000; valaddr_reg:x16; val_offset:664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 664, x17, x15, 664, x18)

inst_3132:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfffff; op2val:0x7fffff; valaddr_reg:x16; val_offset:672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 672, x17, x15, 672, x18)

inst_3133:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0xfffff; valaddr_reg:x16; val_offset:680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 680, x17, x15, 680, x18)

inst_3134:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x700000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x700000; op2val:0x7fffff; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 688, x17, x15, 688, x18)

inst_3135:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x700000; valaddr_reg:x16; val_offset:696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 696, x17, x15, 696, x18)

inst_3136:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x1fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1fffff; op2val:0x7fffff; valaddr_reg:x16; val_offset:704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 704, x17, x15, 704, x18)

inst_3137:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x1fffff; valaddr_reg:x16; val_offset:712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 712, x17, x15, 712, x18)

inst_3138:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x600000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x600000; op2val:0x7fffff; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_3139:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x600000; valaddr_reg:x16; val_offset:728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 728, x17, x15, 728, x18)

inst_3140:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x3fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3fffff; op2val:0x7fffff; valaddr_reg:x16; val_offset:736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 736, x17, x15, 736, x18)

inst_3141:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x3fffff; valaddr_reg:x16; val_offset:744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 744, x17, x15, 744, x18)

inst_3142:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x400000; op2val:0x7fffff; valaddr_reg:x16; val_offset:752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 752, x17, x15, 752, x18)

inst_3143:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x400000; valaddr_reg:x16; val_offset:760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 760, x17, x15, 760, x18)

inst_3144:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x7fffff; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 768, x17, x15, 768, x18)

inst_3145:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x7fffff; valaddr_reg:x16; val_offset:776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 776, x17, x15, 776, x18)

inst_3146:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x0; valaddr_reg:x16; val_offset:784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 784, x17, x15, 784, x18)

inst_3147:
// fs1 == 0 and fe1 == 0x86 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x43000001; op2val:0x7fffff; valaddr_reg:x16; val_offset:792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 792, x17, x15, 792, x18)

inst_3148:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x86 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x43000001; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_3149:
// fs1 == 0 and fe1 == 0x86 and fm1 == 0x7ffffe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x437ffffe; op2val:0x7fffff; valaddr_reg:x16; val_offset:808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 808, x17, x15, 808, x18)

inst_3150:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x86 and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x437ffffe; valaddr_reg:x16; val_offset:816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 816, x17, x15, 816, x18)

inst_3151:
// fs1 == 0 and fe1 == 0x86 and fm1 == 0x000003 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x43000003; op2val:0x7fffff; valaddr_reg:x16; val_offset:824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 824, x17, x15, 824, x18)

inst_3152:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x86 and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x43000003; valaddr_reg:x16; val_offset:832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 832, x17, x15, 832, x18)

inst_3153:
// fs1 == 0 and fe1 == 0x86 and fm1 == 0x7ffffc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x437ffffc; op2val:0x7fffff; valaddr_reg:x16; val_offset:840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 840, x17, x15, 840, x18)

inst_3154:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x86 and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x437ffffc; valaddr_reg:x16; val_offset:848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 848, x17, x15, 848, x18)

inst_3155:
// fs1 == 0 and fe1 == 0x86 and fm1 == 0x000007 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x43000007; op2val:0x7fffff; valaddr_reg:x16; val_offset:856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 856, x17, x15, 856, x18)

inst_3156:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x86 and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x43000007; valaddr_reg:x16; val_offset:864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 864, x17, x15, 864, x18)

inst_3157:
// fs1 == 0 and fe1 == 0x86 and fm1 == 0x7ffff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x437ffff8; op2val:0x7fffff; valaddr_reg:x16; val_offset:872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 872, x17, x15, 872, x18)

inst_3158:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x86 and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x437ffff8; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 880, x17, x15, 880, x18)

inst_3159:
// fs1 == 0 and fe1 == 0x86 and fm1 == 0x00000f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x4300000f; op2val:0x7fffff; valaddr_reg:x16; val_offset:888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 888, x17, x15, 888, x18)

inst_3160:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x86 and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x4300000f; valaddr_reg:x16; val_offset:896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 896, x17, x15, 896, x18)

inst_3161:
// fs1 == 0 and fe1 == 0x86 and fm1 == 0x7ffff0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x437ffff0; op2val:0x7fffff; valaddr_reg:x16; val_offset:904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 904, x17, x15, 904, x18)

inst_3162:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x86 and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x437ffff0; valaddr_reg:x16; val_offset:912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 912, x17, x15, 912, x18)

inst_3163:
// fs1 == 0 and fe1 == 0x86 and fm1 == 0x00001f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x4300001f; op2val:0x7fffff; valaddr_reg:x16; val_offset:920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 920, x17, x15, 920, x18)

inst_3164:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x86 and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x4300001f; valaddr_reg:x16; val_offset:928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 928, x17, x15, 928, x18)

inst_3165:
// fs1 == 0 and fe1 == 0x86 and fm1 == 0x7fffe0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x437fffe0; op2val:0x7fffff; valaddr_reg:x16; val_offset:936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 936, x17, x15, 936, x18)

inst_3166:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x86 and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x437fffe0; valaddr_reg:x16; val_offset:944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 944, x17, x15, 944, x18)

inst_3167:
// fs1 == 0 and fe1 == 0x86 and fm1 == 0x00003f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x4300003f; op2val:0x7fffff; valaddr_reg:x16; val_offset:952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 952, x17, x15, 952, x18)

inst_3168:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x86 and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x4300003f; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 960, x17, x15, 960, x18)

inst_3169:
// fs1 == 0 and fe1 == 0x86 and fm1 == 0x7fffc0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x437fffc0; op2val:0x7fffff; valaddr_reg:x16; val_offset:968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 968, x17, x15, 968, x18)

inst_3170:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x86 and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x437fffc0; valaddr_reg:x16; val_offset:976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 976, x17, x15, 976, x18)

inst_3171:
// fs1 == 0 and fe1 == 0x86 and fm1 == 0x00007f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x4300007f; op2val:0x7fffff; valaddr_reg:x16; val_offset:984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 984, x17, x15, 984, x18)

inst_3172:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x86 and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x4300007f; valaddr_reg:x16; val_offset:992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 992, x17, x15, 992, x18)

inst_3173:
// fs1 == 0 and fe1 == 0x86 and fm1 == 0x7fff80 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x437fff80; op2val:0x7fffff; valaddr_reg:x16; val_offset:1000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1000, x17, x15, 1000, x18)

inst_3174:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x86 and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x437fff80; valaddr_reg:x16; val_offset:1008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1008, x17, x15, 1008, x18)

inst_3175:
// fs1 == 0 and fe1 == 0x86 and fm1 == 0x0000ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x430000ff; op2val:0x7fffff; valaddr_reg:x16; val_offset:1016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1016, x17, x15, 1016, x18)

inst_3176:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x86 and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x430000ff; valaddr_reg:x16; val_offset:1024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1024, x17, x15, 1024, x18)

inst_3177:
// fs1 == 0 and fe1 == 0x86 and fm1 == 0x7fff00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x437fff00; op2val:0x7fffff; valaddr_reg:x16; val_offset:1032; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1032, x17, x15, 1032, x18)

inst_3178:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x86 and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x437fff00; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1040, x17, x15, 1040, x18)

inst_3179:
// fs1 == 0 and fe1 == 0x86 and fm1 == 0x0001ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x430001ff; op2val:0x7fffff; valaddr_reg:x16; val_offset:1048; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1048, x17, x15, 1048, x18)

inst_3180:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x86 and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x430001ff; valaddr_reg:x16; val_offset:1056; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1056, x17, x15, 1056, x18)

inst_3181:
// fs1 == 0 and fe1 == 0x86 and fm1 == 0x7ffe00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x437ffe00; op2val:0x7fffff; valaddr_reg:x16; val_offset:1064; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1064, x17, x15, 1064, x18)

inst_3182:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x86 and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x437ffe00; valaddr_reg:x16; val_offset:1072; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1072, x17, x15, 1072, x18)

inst_3183:
// fs1 == 0 and fe1 == 0x86 and fm1 == 0x0003ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x430003ff; op2val:0x7fffff; valaddr_reg:x16; val_offset:1080; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1080, x17, x15, 1080, x18)

inst_3184:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x86 and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x430003ff; valaddr_reg:x16; val_offset:1088; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1088, x17, x15, 1088, x18)

inst_3185:
// fs1 == 0 and fe1 == 0x86 and fm1 == 0x7ffc00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x437ffc00; op2val:0x7fffff; valaddr_reg:x16; val_offset:1096; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1096, x17, x15, 1096, x18)

inst_3186:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x86 and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x437ffc00; valaddr_reg:x16; val_offset:1104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1104, x17, x15, 1104, x18)

inst_3187:
// fs1 == 0 and fe1 == 0x86 and fm1 == 0x0007ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x430007ff; op2val:0x7fffff; valaddr_reg:x16; val_offset:1112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1112, x17, x15, 1112, x18)

inst_3188:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x86 and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x430007ff; valaddr_reg:x16; val_offset:1120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1120, x17, x15, 1120, x18)

inst_3189:
// fs1 == 0 and fe1 == 0x86 and fm1 == 0x7ff800 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x437ff800; op2val:0x7fffff; valaddr_reg:x16; val_offset:1128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1128, x17, x15, 1128, x18)

inst_3190:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x86 and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x437ff800; valaddr_reg:x16; val_offset:1136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1136, x17, x15, 1136, x18)

inst_3191:
// fs1 == 0 and fe1 == 0x86 and fm1 == 0x000fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x43000fff; op2val:0x7fffff; valaddr_reg:x16; val_offset:1144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1144, x17, x15, 1144, x18)

inst_3192:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x86 and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x43000fff; valaddr_reg:x16; val_offset:1152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1152, x17, x15, 1152, x18)

inst_3193:
// fs1 == 0 and fe1 == 0x86 and fm1 == 0x7ff000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x437ff000; op2val:0x7fffff; valaddr_reg:x16; val_offset:1160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1160, x17, x15, 1160, x18)

inst_3194:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x86 and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x437ff000; valaddr_reg:x16; val_offset:1168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1168, x17, x15, 1168, x18)

inst_3195:
// fs1 == 0 and fe1 == 0x86 and fm1 == 0x001fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x43001fff; op2val:0x7fffff; valaddr_reg:x16; val_offset:1176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1176, x17, x15, 1176, x18)

inst_3196:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x86 and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x43001fff; valaddr_reg:x16; val_offset:1184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1184, x17, x15, 1184, x18)

inst_3197:
// fs1 == 0 and fe1 == 0x86 and fm1 == 0x7fe000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x437fe000; op2val:0x7fffff; valaddr_reg:x16; val_offset:1192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1192, x17, x15, 1192, x18)

inst_3198:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x86 and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x437fe000; valaddr_reg:x16; val_offset:1200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1200, x17, x15, 1200, x18)

inst_3199:
// fs1 == 0 and fe1 == 0x86 and fm1 == 0x003fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x43003fff; op2val:0x7fffff; valaddr_reg:x16; val_offset:1208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1208, x17, x15, 1208, x18)

inst_3200:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x86 and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x43003fff; valaddr_reg:x16; val_offset:1216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1216, x17, x15, 1216, x18)

inst_3201:
// fs1 == 0 and fe1 == 0x86 and fm1 == 0x7fc000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x437fc000; op2val:0x7fffff; valaddr_reg:x16; val_offset:1224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1224, x17, x15, 1224, x18)

inst_3202:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x86 and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x437fc000; valaddr_reg:x16; val_offset:1232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1232, x17, x15, 1232, x18)

inst_3203:
// fs1 == 0 and fe1 == 0x86 and fm1 == 0x007fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x43007fff; op2val:0x7fffff; valaddr_reg:x16; val_offset:1240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1240, x17, x15, 1240, x18)

inst_3204:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x86 and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x43007fff; valaddr_reg:x16; val_offset:1248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1248, x17, x15, 1248, x18)

inst_3205:
// fs1 == 0 and fe1 == 0x86 and fm1 == 0x7f8000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x437f8000; op2val:0x7fffff; valaddr_reg:x16; val_offset:1256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1256, x17, x15, 1256, x18)

inst_3206:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x86 and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x437f8000; valaddr_reg:x16; val_offset:1264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1264, x17, x15, 1264, x18)

inst_3207:
// fs1 == 0 and fe1 == 0x86 and fm1 == 0x00ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x4300ffff; op2val:0x7fffff; valaddr_reg:x16; val_offset:1272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1272, x17, x15, 1272, x18)

inst_3208:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x86 and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x4300ffff; valaddr_reg:x16; val_offset:1280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1280, x17, x15, 1280, x18)

inst_3209:
// fs1 == 0 and fe1 == 0x86 and fm1 == 0x7f0000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x437f0000; op2val:0x7fffff; valaddr_reg:x16; val_offset:1288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1288, x17, x15, 1288, x18)

inst_3210:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x86 and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x437f0000; valaddr_reg:x16; val_offset:1296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1296, x17, x15, 1296, x18)

inst_3211:
// fs1 == 0 and fe1 == 0x86 and fm1 == 0x01ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x4301ffff; op2val:0x7fffff; valaddr_reg:x16; val_offset:1304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1304, x17, x15, 1304, x18)

inst_3212:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x86 and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x4301ffff; valaddr_reg:x16; val_offset:1312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1312, x17, x15, 1312, x18)

inst_3213:
// fs1 == 0 and fe1 == 0x86 and fm1 == 0x7e0000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x437e0000; op2val:0x7fffff; valaddr_reg:x16; val_offset:1320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1320, x17, x15, 1320, x18)

inst_3214:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x86 and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x437e0000; valaddr_reg:x16; val_offset:1328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1328, x17, x15, 1328, x18)

inst_3215:
// fs1 == 0 and fe1 == 0x86 and fm1 == 0x03ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x4303ffff; op2val:0x7fffff; valaddr_reg:x16; val_offset:1336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1336, x17, x15, 1336, x18)

inst_3216:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x86 and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x4303ffff; valaddr_reg:x16; val_offset:1344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1344, x17, x15, 1344, x18)

inst_3217:
// fs1 == 0 and fe1 == 0x86 and fm1 == 0x7c0000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x437c0000; op2val:0x7fffff; valaddr_reg:x16; val_offset:1352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1352, x17, x15, 1352, x18)

inst_3218:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x86 and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x437c0000; valaddr_reg:x16; val_offset:1360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1360, x17, x15, 1360, x18)

inst_3219:
// fs1 == 0 and fe1 == 0x86 and fm1 == 0x07ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x4307ffff; op2val:0x7fffff; valaddr_reg:x16; val_offset:1368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1368, x17, x15, 1368, x18)

inst_3220:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x86 and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x4307ffff; valaddr_reg:x16; val_offset:1376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1376, x17, x15, 1376, x18)

inst_3221:
// fs1 == 0 and fe1 == 0x86 and fm1 == 0x780000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x43780000; op2val:0x7fffff; valaddr_reg:x16; val_offset:1384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1384, x17, x15, 1384, x18)

inst_3222:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x86 and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x43780000; valaddr_reg:x16; val_offset:1392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1392, x17, x15, 1392, x18)

inst_3223:
// fs1 == 0 and fe1 == 0x86 and fm1 == 0x0fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x430fffff; op2val:0x7fffff; valaddr_reg:x16; val_offset:1400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1400, x17, x15, 1400, x18)

inst_3224:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x86 and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x430fffff; valaddr_reg:x16; val_offset:1408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1408, x17, x15, 1408, x18)

inst_3225:
// fs1 == 0 and fe1 == 0x86 and fm1 == 0x700000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x43700000; op2val:0x7fffff; valaddr_reg:x16; val_offset:1416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1416, x17, x15, 1416, x18)

inst_3226:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x86 and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x43700000; valaddr_reg:x16; val_offset:1424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1424, x17, x15, 1424, x18)

inst_3227:
// fs1 == 0 and fe1 == 0x86 and fm1 == 0x1fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x431fffff; op2val:0x7fffff; valaddr_reg:x16; val_offset:1432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1432, x17, x15, 1432, x18)

inst_3228:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x86 and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x431fffff; valaddr_reg:x16; val_offset:1440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1440, x17, x15, 1440, x18)

inst_3229:
// fs1 == 0 and fe1 == 0x86 and fm1 == 0x600000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x43600000; op2val:0x7fffff; valaddr_reg:x16; val_offset:1448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1448, x17, x15, 1448, x18)

inst_3230:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x86 and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x43600000; valaddr_reg:x16; val_offset:1456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1456, x17, x15, 1456, x18)

inst_3231:
// fs1 == 0 and fe1 == 0x86 and fm1 == 0x3fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x433fffff; op2val:0x7fffff; valaddr_reg:x16; val_offset:1464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1464, x17, x15, 1464, x18)

inst_3232:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x86 and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x433fffff; valaddr_reg:x16; val_offset:1472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1472, x17, x15, 1472, x18)

inst_3233:
// fs1 == 0 and fe1 == 0x86 and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x43400000; op2val:0x7fffff; valaddr_reg:x16; val_offset:1480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1480, x17, x15, 1480, x18)

inst_3234:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x86 and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x43400000; valaddr_reg:x16; val_offset:1488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1488, x17, x15, 1488, x18)

inst_3235:
// fs1 == 0 and fe1 == 0x86 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x437fffff; op2val:0x7fffff; valaddr_reg:x16; val_offset:1496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1496, x17, x15, 1496, x18)

inst_3236:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x86 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x437fffff; valaddr_reg:x16; val_offset:1504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1504, x17, x15, 1504, x18)

inst_3237:
// fs1 == 0 and fe1 == 0x86 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x43000000; op2val:0x7fffff; valaddr_reg:x16; val_offset:1512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1512, x17, x15, 1512, x18)

inst_3238:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x86 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffff; op2val:0x43000000; valaddr_reg:x16; val_offset:1520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1520, x17, x15, 1520, x18)

inst_3239:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x4ccccc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x804ccccc; op2val:0x80000001; valaddr_reg:x16; val_offset:1528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1528, x17, x15, 1528, x18)

inst_3240:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4ccccc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x804ccccc; valaddr_reg:x16; val_offset:1536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1536, x17, x15, 1536, x18)

inst_3241:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x333333 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80333333; op2val:0x80000001; valaddr_reg:x16; val_offset:1544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1544, x17, x15, 1544, x18)

inst_3242:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x333333 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x80333333; valaddr_reg:x16; val_offset:1552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1552, x17, x15, 1552, x18)

inst_3243:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x5b6db6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x805b6db6; op2val:0x80000001; valaddr_reg:x16; val_offset:1560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1560, x17, x15, 1560, x18)

inst_3244:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5b6db6 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x805b6db6; valaddr_reg:x16; val_offset:1568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1568, x17, x15, 1568, x18)

inst_3245:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x249249 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80249249; op2val:0x80000001; valaddr_reg:x16; val_offset:1576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1576, x17, x15, 1576, x18)

inst_3246:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x249249 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x80249249; valaddr_reg:x16; val_offset:1584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1584, x17, x15, 1584, x18)

inst_3247:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x444444 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80444444; op2val:0x80000001; valaddr_reg:x16; val_offset:1592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1592, x17, x15, 1592, x18)

inst_3248:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x444444 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x80444444; valaddr_reg:x16; val_offset:1600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1600, x17, x15, 1600, x18)

inst_3249:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x3bbbbb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x803bbbbb; op2val:0x80000001; valaddr_reg:x16; val_offset:1608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1608, x17, x15, 1608, x18)

inst_3250:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3bbbbb and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x803bbbbb; valaddr_reg:x16; val_offset:1616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1616, x17, x15, 1616, x18)

inst_3251:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x666666 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80666666; op2val:0x80000001; valaddr_reg:x16; val_offset:1624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1624, x17, x15, 1624, x18)

inst_3252:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x666666 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x80666666; valaddr_reg:x16; val_offset:1632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1632, x17, x15, 1632, x18)

inst_3253:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x199999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80199999; op2val:0x80000001; valaddr_reg:x16; val_offset:1640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1640, x17, x15, 1640, x18)

inst_3254:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x199999 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x80199999; valaddr_reg:x16; val_offset:1648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1648, x17, x15, 1648, x18)

inst_3255:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x6db6db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x806db6db; op2val:0x80000001; valaddr_reg:x16; val_offset:1656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1656, x17, x15, 1656, x18)

inst_3256:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6db6db and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x806db6db; valaddr_reg:x16; val_offset:1664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1664, x17, x15, 1664, x18)

inst_3257:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x36db6d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8036db6d; op2val:0x80000001; valaddr_reg:x16; val_offset:1672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1672, x17, x15, 1672, x18)

inst_3258:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x36db6d and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x8036db6d; valaddr_reg:x16; val_offset:1680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1680, x17, x15, 1680, x18)

inst_3259:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x80000001; valaddr_reg:x16; val_offset:1688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1688, x17, x15, 1688, x18)

inst_3260:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ffffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807ffffe; op2val:0x80000001; valaddr_reg:x16; val_offset:1696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1696, x17, x15, 1696, x18)

inst_3261:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x807ffffe; valaddr_reg:x16; val_offset:1704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1704, x17, x15, 1704, x18)

inst_3262:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000003 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000003; op2val:0x80000001; valaddr_reg:x16; val_offset:1712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1712, x17, x15, 1712, x18)

inst_3263:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x80000003; valaddr_reg:x16; val_offset:1720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1720, x17, x15, 1720, x18)

inst_3264:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ffffc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807ffffc; op2val:0x80000001; valaddr_reg:x16; val_offset:1728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1728, x17, x15, 1728, x18)

inst_3265:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x807ffffc; valaddr_reg:x16; val_offset:1736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1736, x17, x15, 1736, x18)

inst_3266:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000007 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000007; op2val:0x80000001; valaddr_reg:x16; val_offset:1744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1744, x17, x15, 1744, x18)

inst_3267:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x80000007; valaddr_reg:x16; val_offset:1752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1752, x17, x15, 1752, x18)

inst_3268:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ffff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807ffff8; op2val:0x80000001; valaddr_reg:x16; val_offset:1760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1760, x17, x15, 1760, x18)

inst_3269:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x807ffff8; valaddr_reg:x16; val_offset:1768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1768, x17, x15, 1768, x18)

inst_3270:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81800001; op2val:0x80000001; valaddr_reg:x16; val_offset:1776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1776, x17, x15, 1776, x18)

inst_3271:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x81800001; valaddr_reg:x16; val_offset:1784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1784, x17, x15, 1784, x18)

inst_3272:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81800000; op2val:0x80000001; valaddr_reg:x16; val_offset:1792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1792, x17, x15, 1792, x18)

inst_3273:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x81800000; valaddr_reg:x16; val_offset:1800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1800, x17, x15, 1800, x18)

inst_3274:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7ffffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81fffffe; op2val:0x80000001; valaddr_reg:x16; val_offset:1808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1808, x17, x15, 1808, x18)

inst_3275:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x81fffffe; valaddr_reg:x16; val_offset:1816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1816, x17, x15, 1816, x18)

inst_3276:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x000003 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81800003; op2val:0x80000001; valaddr_reg:x16; val_offset:1824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1824, x17, x15, 1824, x18)

inst_3277:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x81800003; valaddr_reg:x16; val_offset:1832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1832, x17, x15, 1832, x18)

inst_3278:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7ffffc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81fffffc; op2val:0x80000001; valaddr_reg:x16; val_offset:1840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1840, x17, x15, 1840, x18)

inst_3279:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x81fffffc; valaddr_reg:x16; val_offset:1848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1848, x17, x15, 1848, x18)

inst_3280:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x000007 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81800007; op2val:0x80000001; valaddr_reg:x16; val_offset:1856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1856, x17, x15, 1856, x18)

inst_3281:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x81800007; valaddr_reg:x16; val_offset:1864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1864, x17, x15, 1864, x18)

inst_3282:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7ffff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81fffff8; op2val:0x80000001; valaddr_reg:x16; val_offset:1872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1872, x17, x15, 1872, x18)

inst_3283:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x81fffff8; valaddr_reg:x16; val_offset:1880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1880, x17, x15, 1880, x18)

inst_3284:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x00000f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8180000f; op2val:0x80000001; valaddr_reg:x16; val_offset:1888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1888, x17, x15, 1888, x18)

inst_3285:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x8180000f; valaddr_reg:x16; val_offset:1896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1896, x17, x15, 1896, x18)

inst_3286:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7ffff0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81fffff0; op2val:0x80000001; valaddr_reg:x16; val_offset:1904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1904, x17, x15, 1904, x18)

inst_3287:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x81fffff0; valaddr_reg:x16; val_offset:1912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1912, x17, x15, 1912, x18)

inst_3288:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x00001f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8180001f; op2val:0x80000001; valaddr_reg:x16; val_offset:1920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1920, x17, x15, 1920, x18)

inst_3289:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x8180001f; valaddr_reg:x16; val_offset:1928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1928, x17, x15, 1928, x18)

inst_3290:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7fffe0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81ffffe0; op2val:0x80000001; valaddr_reg:x16; val_offset:1936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1936, x17, x15, 1936, x18)

inst_3291:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x81ffffe0; valaddr_reg:x16; val_offset:1944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1944, x17, x15, 1944, x18)

inst_3292:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8180003f; op2val:0x80000001; valaddr_reg:x16; val_offset:1952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1952, x17, x15, 1952, x18)

inst_3293:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x8180003f; valaddr_reg:x16; val_offset:1960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1960, x17, x15, 1960, x18)

inst_3294:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7fffc0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81ffffc0; op2val:0x80000001; valaddr_reg:x16; val_offset:1968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1968, x17, x15, 1968, x18)

inst_3295:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x81ffffc0; valaddr_reg:x16; val_offset:1976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1976, x17, x15, 1976, x18)

inst_3296:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x00007f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8180007f; op2val:0x80000001; valaddr_reg:x16; val_offset:1984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1984, x17, x15, 1984, x18)

inst_3297:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x8180007f; valaddr_reg:x16; val_offset:1992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1992, x17, x15, 1992, x18)

inst_3298:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7fff80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81ffff80; op2val:0x80000001; valaddr_reg:x16; val_offset:2000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2000, x17, x15, 2000, x18)

inst_3299:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x81ffff80; valaddr_reg:x16; val_offset:2008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2008, x17, x15, 2008, x18)

inst_3300:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x0000ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x818000ff; op2val:0x80000001; valaddr_reg:x16; val_offset:2016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2016, x17, x15, 2016, x18)

inst_3301:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x818000ff; valaddr_reg:x16; val_offset:2024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_14)

inst_3302:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7fff00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81ffff00; op2val:0x80000001; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_3303:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x81ffff00; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 8, x17, x15, 8, x18)

inst_3304:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x0001ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x818001ff; op2val:0x80000001; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 16, x17, x15, 16, x18)

inst_3305:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x818001ff; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 24, x17, x15, 24, x18)

inst_3306:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7ffe00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81fffe00; op2val:0x80000001; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 32, x17, x15, 32, x18)

inst_3307:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x81fffe00; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 40, x17, x15, 40, x18)

inst_3308:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x0003ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x818003ff; op2val:0x80000001; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_3309:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x818003ff; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 56, x17, x15, 56, x18)

inst_3310:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7ffc00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81fffc00; op2val:0x80000001; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 64, x17, x15, 64, x18)

inst_3311:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x81fffc00; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 72, x17, x15, 72, x18)

inst_3312:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x0007ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x818007ff; op2val:0x80000001; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_3313:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x818007ff; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 88, x17, x15, 88, x18)

inst_3314:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7ff800 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81fff800; op2val:0x80000001; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 96, x17, x15, 96, x18)

inst_3315:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x81fff800; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 104, x17, x15, 104, x18)

inst_3316:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x000fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81800fff; op2val:0x80000001; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 112, x17, x15, 112, x18)

inst_3317:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x81800fff; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 120, x17, x15, 120, x18)

inst_3318:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7ff000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81fff000; op2val:0x80000001; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_3319:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x81fff000; valaddr_reg:x16; val_offset:136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 136, x17, x15, 136, x18)

inst_3320:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x001fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81801fff; op2val:0x80000001; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 144, x17, x15, 144, x18)

inst_3321:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x81801fff; valaddr_reg:x16; val_offset:152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 152, x17, x15, 152, x18)

inst_3322:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7fe000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81ffe000; op2val:0x80000001; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_3323:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x81ffe000; valaddr_reg:x16; val_offset:168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 168, x17, x15, 168, x18)

inst_3324:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x003fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81803fff; op2val:0x80000001; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 176, x17, x15, 176, x18)

inst_3325:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x81803fff; valaddr_reg:x16; val_offset:184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 184, x17, x15, 184, x18)

inst_3326:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7fc000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81ffc000; op2val:0x80000001; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 192, x17, x15, 192, x18)

inst_3327:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x81ffc000; valaddr_reg:x16; val_offset:200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 200, x17, x15, 200, x18)

inst_3328:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x007fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81807fff; op2val:0x80000001; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_3329:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x81807fff; valaddr_reg:x16; val_offset:216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 216, x17, x15, 216, x18)

inst_3330:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7f8000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81ff8000; op2val:0x80000001; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 224, x17, x15, 224, x18)

inst_3331:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x81ff8000; valaddr_reg:x16; val_offset:232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 232, x17, x15, 232, x18)

inst_3332:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x00ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8180ffff; op2val:0x80000001; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_3333:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x8180ffff; valaddr_reg:x16; val_offset:248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 248, x17, x15, 248, x18)

inst_3334:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7f0000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81ff0000; op2val:0x80000001; valaddr_reg:x16; val_offset:256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 256, x17, x15, 256, x18)

inst_3335:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x81ff0000; valaddr_reg:x16; val_offset:264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 264, x17, x15, 264, x18)

inst_3336:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x01ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8181ffff; op2val:0x80000001; valaddr_reg:x16; val_offset:272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 272, x17, x15, 272, x18)

inst_3337:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x8181ffff; valaddr_reg:x16; val_offset:280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 280, x17, x15, 280, x18)

inst_3338:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7e0000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81fe0000; op2val:0x80000001; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_3339:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x81fe0000; valaddr_reg:x16; val_offset:296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 296, x17, x15, 296, x18)

inst_3340:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x03ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8183ffff; op2val:0x80000001; valaddr_reg:x16; val_offset:304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 304, x17, x15, 304, x18)

inst_3341:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x8183ffff; valaddr_reg:x16; val_offset:312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 312, x17, x15, 312, x18)

inst_3342:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7c0000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81fc0000; op2val:0x80000001; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_3343:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x81fc0000; valaddr_reg:x16; val_offset:328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 328, x17, x15, 328, x18)

inst_3344:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x07ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8187ffff; op2val:0x80000001; valaddr_reg:x16; val_offset:336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 336, x17, x15, 336, x18)

inst_3345:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x8187ffff; valaddr_reg:x16; val_offset:344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 344, x17, x15, 344, x18)

inst_3346:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x780000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81f80000; op2val:0x80000001; valaddr_reg:x16; val_offset:352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 352, x17, x15, 352, x18)

inst_3347:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x81f80000; valaddr_reg:x16; val_offset:360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 360, x17, x15, 360, x18)

inst_3348:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x0fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x818fffff; op2val:0x80000001; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_3349:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x818fffff; valaddr_reg:x16; val_offset:376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 376, x17, x15, 376, x18)

inst_3350:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x700000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81f00000; op2val:0x80000001; valaddr_reg:x16; val_offset:384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 384, x17, x15, 384, x18)

inst_3351:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x81f00000; valaddr_reg:x16; val_offset:392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 392, x17, x15, 392, x18)

inst_3352:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x1fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x819fffff; op2val:0x80000001; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_3353:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x819fffff; valaddr_reg:x16; val_offset:408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 408, x17, x15, 408, x18)

inst_3354:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x600000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81e00000; op2val:0x80000001; valaddr_reg:x16; val_offset:416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 416, x17, x15, 416, x18)

inst_3355:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x81e00000; valaddr_reg:x16; val_offset:424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 424, x17, x15, 424, x18)

inst_3356:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x3fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81bfffff; op2val:0x80000001; valaddr_reg:x16; val_offset:432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 432, x17, x15, 432, x18)

inst_3357:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x81bfffff; valaddr_reg:x16; val_offset:440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 440, x17, x15, 440, x18)

inst_3358:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81c00000; op2val:0x80000001; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_3359:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x81c00000; valaddr_reg:x16; val_offset:456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 456, x17, x15, 456, x18)

inst_3360:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81ffffff; op2val:0x80000001; valaddr_reg:x16; val_offset:464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 464, x17, x15, 464, x18)

inst_3361:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x81ffffff; valaddr_reg:x16; val_offset:472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 472, x17, x15, 472, x18)

inst_3362:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81000001; op2val:0x80000001; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_3363:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x81000001; valaddr_reg:x16; val_offset:488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 488, x17, x15, 488, x18)

inst_3364:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81000000; op2val:0x80000001; valaddr_reg:x16; val_offset:496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 496, x17, x15, 496, x18)

inst_3365:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x81000000; valaddr_reg:x16; val_offset:504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 504, x17, x15, 504, x18)

inst_3366:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7ffffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817ffffe; op2val:0x80000001; valaddr_reg:x16; val_offset:512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 512, x17, x15, 512, x18)

inst_3367:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x817ffffe; valaddr_reg:x16; val_offset:520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 520, x17, x15, 520, x18)

inst_3368:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x000003 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81000003; op2val:0x80000001; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_3369:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x81000003; valaddr_reg:x16; val_offset:536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 536, x17, x15, 536, x18)

inst_3370:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7ffffc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817ffffc; op2val:0x80000001; valaddr_reg:x16; val_offset:544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 544, x17, x15, 544, x18)

inst_3371:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x817ffffc; valaddr_reg:x16; val_offset:552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 552, x17, x15, 552, x18)

inst_3372:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x000007 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81000007; op2val:0x80000001; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_3373:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x81000007; valaddr_reg:x16; val_offset:568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 568, x17, x15, 568, x18)

inst_3374:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7ffff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817ffff8; op2val:0x80000001; valaddr_reg:x16; val_offset:576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 576, x17, x15, 576, x18)

inst_3375:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x817ffff8; valaddr_reg:x16; val_offset:584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 584, x17, x15, 584, x18)

inst_3376:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x00000f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8100000f; op2val:0x80000001; valaddr_reg:x16; val_offset:592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 592, x17, x15, 592, x18)

inst_3377:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x8100000f; valaddr_reg:x16; val_offset:600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 600, x17, x15, 600, x18)

inst_3378:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7ffff0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817ffff0; op2val:0x80000001; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 608, x17, x15, 608, x18)

inst_3379:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x817ffff0; valaddr_reg:x16; val_offset:616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 616, x17, x15, 616, x18)

inst_3380:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x00001f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8100001f; op2val:0x80000001; valaddr_reg:x16; val_offset:624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 624, x17, x15, 624, x18)

inst_3381:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x8100001f; valaddr_reg:x16; val_offset:632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 632, x17, x15, 632, x18)

inst_3382:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7fffe0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817fffe0; op2val:0x80000001; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_3383:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x817fffe0; valaddr_reg:x16; val_offset:648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 648, x17, x15, 648, x18)

inst_3384:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8100003f; op2val:0x80000001; valaddr_reg:x16; val_offset:656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 656, x17, x15, 656, x18)

inst_3385:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x8100003f; valaddr_reg:x16; val_offset:664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 664, x17, x15, 664, x18)

inst_3386:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7fffc0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817fffc0; op2val:0x80000001; valaddr_reg:x16; val_offset:672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 672, x17, x15, 672, x18)

inst_3387:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x817fffc0; valaddr_reg:x16; val_offset:680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 680, x17, x15, 680, x18)

inst_3388:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x00007f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8100007f; op2val:0x80000001; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 688, x17, x15, 688, x18)

inst_3389:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x8100007f; valaddr_reg:x16; val_offset:696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 696, x17, x15, 696, x18)

inst_3390:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7fff80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817fff80; op2val:0x80000001; valaddr_reg:x16; val_offset:704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 704, x17, x15, 704, x18)

inst_3391:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x817fff80; valaddr_reg:x16; val_offset:712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 712, x17, x15, 712, x18)

inst_3392:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x0000ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x810000ff; op2val:0x80000001; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_3393:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x810000ff; valaddr_reg:x16; val_offset:728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 728, x17, x15, 728, x18)

inst_3394:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7fff00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817fff00; op2val:0x80000001; valaddr_reg:x16; val_offset:736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 736, x17, x15, 736, x18)

inst_3395:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x817fff00; valaddr_reg:x16; val_offset:744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 744, x17, x15, 744, x18)

inst_3396:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x0001ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x810001ff; op2val:0x80000001; valaddr_reg:x16; val_offset:752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 752, x17, x15, 752, x18)

inst_3397:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x810001ff; valaddr_reg:x16; val_offset:760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 760, x17, x15, 760, x18)

inst_3398:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7ffe00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817ffe00; op2val:0x80000001; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 768, x17, x15, 768, x18)

inst_3399:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x817ffe00; valaddr_reg:x16; val_offset:776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 776, x17, x15, 776, x18)

inst_3400:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x0003ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x810003ff; op2val:0x80000001; valaddr_reg:x16; val_offset:784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 784, x17, x15, 784, x18)

inst_3401:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x810003ff; valaddr_reg:x16; val_offset:792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 792, x17, x15, 792, x18)

inst_3402:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7ffc00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817ffc00; op2val:0x80000001; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_3403:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x817ffc00; valaddr_reg:x16; val_offset:808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 808, x17, x15, 808, x18)

inst_3404:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x0007ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x810007ff; op2val:0x80000001; valaddr_reg:x16; val_offset:816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 816, x17, x15, 816, x18)

inst_3405:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x810007ff; valaddr_reg:x16; val_offset:824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 824, x17, x15, 824, x18)

inst_3406:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7ff800 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817ff800; op2val:0x80000001; valaddr_reg:x16; val_offset:832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 832, x17, x15, 832, x18)

inst_3407:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x817ff800; valaddr_reg:x16; val_offset:840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 840, x17, x15, 840, x18)

inst_3408:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x000fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81000fff; op2val:0x80000001; valaddr_reg:x16; val_offset:848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 848, x17, x15, 848, x18)

inst_3409:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x81000fff; valaddr_reg:x16; val_offset:856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 856, x17, x15, 856, x18)

inst_3410:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7ff000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817ff000; op2val:0x80000001; valaddr_reg:x16; val_offset:864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 864, x17, x15, 864, x18)

inst_3411:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x817ff000; valaddr_reg:x16; val_offset:872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 872, x17, x15, 872, x18)

inst_3412:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x001fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81001fff; op2val:0x80000001; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 880, x17, x15, 880, x18)

inst_3413:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x81001fff; valaddr_reg:x16; val_offset:888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 888, x17, x15, 888, x18)

inst_3414:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7fe000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817fe000; op2val:0x80000001; valaddr_reg:x16; val_offset:896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 896, x17, x15, 896, x18)

inst_3415:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x817fe000; valaddr_reg:x16; val_offset:904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 904, x17, x15, 904, x18)

inst_3416:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x003fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81003fff; op2val:0x80000001; valaddr_reg:x16; val_offset:912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 912, x17, x15, 912, x18)

inst_3417:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x81003fff; valaddr_reg:x16; val_offset:920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 920, x17, x15, 920, x18)

inst_3418:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7fc000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817fc000; op2val:0x80000001; valaddr_reg:x16; val_offset:928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 928, x17, x15, 928, x18)

inst_3419:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x817fc000; valaddr_reg:x16; val_offset:936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 936, x17, x15, 936, x18)

inst_3420:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x007fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81007fff; op2val:0x80000001; valaddr_reg:x16; val_offset:944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 944, x17, x15, 944, x18)

inst_3421:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x81007fff; valaddr_reg:x16; val_offset:952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 952, x17, x15, 952, x18)

inst_3422:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7f8000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817f8000; op2val:0x80000001; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 960, x17, x15, 960, x18)

inst_3423:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x817f8000; valaddr_reg:x16; val_offset:968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 968, x17, x15, 968, x18)

inst_3424:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x00ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8100ffff; op2val:0x80000001; valaddr_reg:x16; val_offset:976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 976, x17, x15, 976, x18)

inst_3425:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x8100ffff; valaddr_reg:x16; val_offset:984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 984, x17, x15, 984, x18)

inst_3426:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7f0000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817f0000; op2val:0x80000001; valaddr_reg:x16; val_offset:992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 992, x17, x15, 992, x18)

inst_3427:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x817f0000; valaddr_reg:x16; val_offset:1000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1000, x17, x15, 1000, x18)

inst_3428:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x01ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8101ffff; op2val:0x80000001; valaddr_reg:x16; val_offset:1008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1008, x17, x15, 1008, x18)

inst_3429:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x8101ffff; valaddr_reg:x16; val_offset:1016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1016, x17, x15, 1016, x18)

inst_3430:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7e0000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817e0000; op2val:0x80000001; valaddr_reg:x16; val_offset:1024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1024, x17, x15, 1024, x18)

inst_3431:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x817e0000; valaddr_reg:x16; val_offset:1032; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1032, x17, x15, 1032, x18)

inst_3432:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x03ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8103ffff; op2val:0x80000001; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1040, x17, x15, 1040, x18)

inst_3433:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x8103ffff; valaddr_reg:x16; val_offset:1048; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1048, x17, x15, 1048, x18)

inst_3434:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7c0000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817c0000; op2val:0x80000001; valaddr_reg:x16; val_offset:1056; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1056, x17, x15, 1056, x18)

inst_3435:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x817c0000; valaddr_reg:x16; val_offset:1064; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1064, x17, x15, 1064, x18)

inst_3436:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x07ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8107ffff; op2val:0x80000001; valaddr_reg:x16; val_offset:1072; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1072, x17, x15, 1072, x18)

inst_3437:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x8107ffff; valaddr_reg:x16; val_offset:1080; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1080, x17, x15, 1080, x18)

inst_3438:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x780000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81780000; op2val:0x80000001; valaddr_reg:x16; val_offset:1088; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1088, x17, x15, 1088, x18)

inst_3439:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x81780000; valaddr_reg:x16; val_offset:1096; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1096, x17, x15, 1096, x18)

inst_3440:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x0fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x810fffff; op2val:0x80000001; valaddr_reg:x16; val_offset:1104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1104, x17, x15, 1104, x18)

inst_3441:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x810fffff; valaddr_reg:x16; val_offset:1112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1112, x17, x15, 1112, x18)

inst_3442:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x700000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81700000; op2val:0x80000001; valaddr_reg:x16; val_offset:1120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1120, x17, x15, 1120, x18)

inst_3443:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x81700000; valaddr_reg:x16; val_offset:1128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1128, x17, x15, 1128, x18)

inst_3444:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x1fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x811fffff; op2val:0x80000001; valaddr_reg:x16; val_offset:1136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1136, x17, x15, 1136, x18)

inst_3445:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x811fffff; valaddr_reg:x16; val_offset:1144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1144, x17, x15, 1144, x18)

inst_3446:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x600000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81600000; op2val:0x80000001; valaddr_reg:x16; val_offset:1152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1152, x17, x15, 1152, x18)

inst_3447:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x81600000; valaddr_reg:x16; val_offset:1160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1160, x17, x15, 1160, x18)

inst_3448:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x3fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x813fffff; op2val:0x80000001; valaddr_reg:x16; val_offset:1168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1168, x17, x15, 1168, x18)

inst_3449:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x813fffff; valaddr_reg:x16; val_offset:1176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1176, x17, x15, 1176, x18)

inst_3450:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81400000; op2val:0x80000001; valaddr_reg:x16; val_offset:1184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1184, x17, x15, 1184, x18)

inst_3451:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x81400000; valaddr_reg:x16; val_offset:1192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1192, x17, x15, 1192, x18)

inst_3452:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817fffff; op2val:0x80000001; valaddr_reg:x16; val_offset:1200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1200, x17, x15, 1200, x18)

inst_3453:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x817fffff; valaddr_reg:x16; val_offset:1208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1208, x17, x15, 1208, x18)

inst_3454:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800001; op2val:0x80000001; valaddr_reg:x16; val_offset:1216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1216, x17, x15, 1216, x18)

inst_3455:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x80800001; valaddr_reg:x16; val_offset:1224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1224, x17, x15, 1224, x18)

inst_3456:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7ffffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80fffffe; op2val:0x80000001; valaddr_reg:x16; val_offset:1232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1232, x17, x15, 1232, x18)

inst_3457:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x80fffffe; valaddr_reg:x16; val_offset:1240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1240, x17, x15, 1240, x18)

inst_3458:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000003 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800003; op2val:0x80000001; valaddr_reg:x16; val_offset:1248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1248, x17, x15, 1248, x18)

inst_3459:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x80800003; valaddr_reg:x16; val_offset:1256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1256, x17, x15, 1256, x18)

inst_3460:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7ffffc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80fffffc; op2val:0x80000001; valaddr_reg:x16; val_offset:1264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1264, x17, x15, 1264, x18)

inst_3461:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x80fffffc; valaddr_reg:x16; val_offset:1272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1272, x17, x15, 1272, x18)

inst_3462:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000007 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800007; op2val:0x80000001; valaddr_reg:x16; val_offset:1280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1280, x17, x15, 1280, x18)

inst_3463:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x80800007; valaddr_reg:x16; val_offset:1288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1288, x17, x15, 1288, x18)

inst_3464:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7ffff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80fffff8; op2val:0x80000001; valaddr_reg:x16; val_offset:1296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1296, x17, x15, 1296, x18)

inst_3465:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x80fffff8; valaddr_reg:x16; val_offset:1304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1304, x17, x15, 1304, x18)

inst_3466:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x00000f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8080000f; op2val:0x80000001; valaddr_reg:x16; val_offset:1312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1312, x17, x15, 1312, x18)

inst_3467:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x8080000f; valaddr_reg:x16; val_offset:1320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1320, x17, x15, 1320, x18)

inst_3468:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7ffff0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80fffff0; op2val:0x80000001; valaddr_reg:x16; val_offset:1328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1328, x17, x15, 1328, x18)

inst_3469:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x80fffff0; valaddr_reg:x16; val_offset:1336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1336, x17, x15, 1336, x18)

inst_3470:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x00001f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8080001f; op2val:0x80000001; valaddr_reg:x16; val_offset:1344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1344, x17, x15, 1344, x18)

inst_3471:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x8080001f; valaddr_reg:x16; val_offset:1352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1352, x17, x15, 1352, x18)

inst_3472:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7fffe0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80ffffe0; op2val:0x80000001; valaddr_reg:x16; val_offset:1360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1360, x17, x15, 1360, x18)

inst_3473:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x80ffffe0; valaddr_reg:x16; val_offset:1368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1368, x17, x15, 1368, x18)

inst_3474:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8080003f; op2val:0x80000001; valaddr_reg:x16; val_offset:1376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1376, x17, x15, 1376, x18)

inst_3475:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x8080003f; valaddr_reg:x16; val_offset:1384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1384, x17, x15, 1384, x18)

inst_3476:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7fffc0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80ffffc0; op2val:0x80000001; valaddr_reg:x16; val_offset:1392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1392, x17, x15, 1392, x18)

inst_3477:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x80ffffc0; valaddr_reg:x16; val_offset:1400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1400, x17, x15, 1400, x18)

inst_3478:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x00007f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8080007f; op2val:0x80000001; valaddr_reg:x16; val_offset:1408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1408, x17, x15, 1408, x18)

inst_3479:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x8080007f; valaddr_reg:x16; val_offset:1416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1416, x17, x15, 1416, x18)

inst_3480:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7fff80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80ffff80; op2val:0x80000001; valaddr_reg:x16; val_offset:1424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1424, x17, x15, 1424, x18)

inst_3481:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x80ffff80; valaddr_reg:x16; val_offset:1432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1432, x17, x15, 1432, x18)

inst_3482:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x0000ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x808000ff; op2val:0x80000001; valaddr_reg:x16; val_offset:1440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1440, x17, x15, 1440, x18)

inst_3483:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x808000ff; valaddr_reg:x16; val_offset:1448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1448, x17, x15, 1448, x18)

inst_3484:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7fff00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80ffff00; op2val:0x80000001; valaddr_reg:x16; val_offset:1456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1456, x17, x15, 1456, x18)

inst_3485:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x80ffff00; valaddr_reg:x16; val_offset:1464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1464, x17, x15, 1464, x18)

inst_3486:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x0001ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x808001ff; op2val:0x80000001; valaddr_reg:x16; val_offset:1472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1472, x17, x15, 1472, x18)

inst_3487:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x808001ff; valaddr_reg:x16; val_offset:1480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1480, x17, x15, 1480, x18)

inst_3488:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7ffe00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80fffe00; op2val:0x80000001; valaddr_reg:x16; val_offset:1488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1488, x17, x15, 1488, x18)

inst_3489:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x80fffe00; valaddr_reg:x16; val_offset:1496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1496, x17, x15, 1496, x18)

inst_3490:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x0003ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x808003ff; op2val:0x80000001; valaddr_reg:x16; val_offset:1504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1504, x17, x15, 1504, x18)

inst_3491:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x808003ff; valaddr_reg:x16; val_offset:1512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1512, x17, x15, 1512, x18)

inst_3492:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7ffc00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80fffc00; op2val:0x80000001; valaddr_reg:x16; val_offset:1520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1520, x17, x15, 1520, x18)

inst_3493:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x80fffc00; valaddr_reg:x16; val_offset:1528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1528, x17, x15, 1528, x18)

inst_3494:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x0007ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x808007ff; op2val:0x80000001; valaddr_reg:x16; val_offset:1536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1536, x17, x15, 1536, x18)

inst_3495:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x808007ff; valaddr_reg:x16; val_offset:1544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1544, x17, x15, 1544, x18)

inst_3496:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7ff800 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80fff800; op2val:0x80000001; valaddr_reg:x16; val_offset:1552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1552, x17, x15, 1552, x18)

inst_3497:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x80fff800; valaddr_reg:x16; val_offset:1560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1560, x17, x15, 1560, x18)

inst_3498:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800fff; op2val:0x80000001; valaddr_reg:x16; val_offset:1568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1568, x17, x15, 1568, x18)

inst_3499:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x80800fff; valaddr_reg:x16; val_offset:1576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1576, x17, x15, 1576, x18)

inst_3500:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7ff000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80fff000; op2val:0x80000001; valaddr_reg:x16; val_offset:1584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1584, x17, x15, 1584, x18)

inst_3501:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x80fff000; valaddr_reg:x16; val_offset:1592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1592, x17, x15, 1592, x18)

inst_3502:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x001fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80801fff; op2val:0x80000001; valaddr_reg:x16; val_offset:1600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1600, x17, x15, 1600, x18)

inst_3503:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x80801fff; valaddr_reg:x16; val_offset:1608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1608, x17, x15, 1608, x18)

inst_3504:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7fe000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80ffe000; op2val:0x80000001; valaddr_reg:x16; val_offset:1616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1616, x17, x15, 1616, x18)

inst_3505:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x80ffe000; valaddr_reg:x16; val_offset:1624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1624, x17, x15, 1624, x18)

inst_3506:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x003fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80803fff; op2val:0x80000001; valaddr_reg:x16; val_offset:1632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1632, x17, x15, 1632, x18)

inst_3507:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x80803fff; valaddr_reg:x16; val_offset:1640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1640, x17, x15, 1640, x18)

inst_3508:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7fc000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80ffc000; op2val:0x80000001; valaddr_reg:x16; val_offset:1648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1648, x17, x15, 1648, x18)

inst_3509:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x80ffc000; valaddr_reg:x16; val_offset:1656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1656, x17, x15, 1656, x18)

inst_3510:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x007fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80807fff; op2val:0x80000001; valaddr_reg:x16; val_offset:1664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1664, x17, x15, 1664, x18)

inst_3511:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x80807fff; valaddr_reg:x16; val_offset:1672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1672, x17, x15, 1672, x18)

inst_3512:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7f8000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80ff8000; op2val:0x80000001; valaddr_reg:x16; val_offset:1680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1680, x17, x15, 1680, x18)

inst_3513:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x80ff8000; valaddr_reg:x16; val_offset:1688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1688, x17, x15, 1688, x18)

inst_3514:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x00ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8080ffff; op2val:0x80000001; valaddr_reg:x16; val_offset:1696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1696, x17, x15, 1696, x18)

inst_3515:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x8080ffff; valaddr_reg:x16; val_offset:1704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1704, x17, x15, 1704, x18)

inst_3516:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7f0000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80ff0000; op2val:0x80000001; valaddr_reg:x16; val_offset:1712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1712, x17, x15, 1712, x18)

inst_3517:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x80ff0000; valaddr_reg:x16; val_offset:1720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1720, x17, x15, 1720, x18)

inst_3518:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x01ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8081ffff; op2val:0x80000001; valaddr_reg:x16; val_offset:1728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1728, x17, x15, 1728, x18)

inst_3519:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x8081ffff; valaddr_reg:x16; val_offset:1736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1736, x17, x15, 1736, x18)

inst_3520:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7e0000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80fe0000; op2val:0x80000001; valaddr_reg:x16; val_offset:1744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1744, x17, x15, 1744, x18)

inst_3521:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x80fe0000; valaddr_reg:x16; val_offset:1752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1752, x17, x15, 1752, x18)

inst_3522:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x03ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8083ffff; op2val:0x80000001; valaddr_reg:x16; val_offset:1760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1760, x17, x15, 1760, x18)

inst_3523:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x8083ffff; valaddr_reg:x16; val_offset:1768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1768, x17, x15, 1768, x18)

inst_3524:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7c0000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80fc0000; op2val:0x80000001; valaddr_reg:x16; val_offset:1776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1776, x17, x15, 1776, x18)

inst_3525:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x80fc0000; valaddr_reg:x16; val_offset:1784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1784, x17, x15, 1784, x18)

inst_3526:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x07ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8087ffff; op2val:0x80000001; valaddr_reg:x16; val_offset:1792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1792, x17, x15, 1792, x18)

inst_3527:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x8087ffff; valaddr_reg:x16; val_offset:1800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1800, x17, x15, 1800, x18)

inst_3528:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x780000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80f80000; op2val:0x80000001; valaddr_reg:x16; val_offset:1808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1808, x17, x15, 1808, x18)

inst_3529:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x80f80000; valaddr_reg:x16; val_offset:1816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1816, x17, x15, 1816, x18)

inst_3530:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x0fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x808fffff; op2val:0x80000001; valaddr_reg:x16; val_offset:1824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1824, x17, x15, 1824, x18)

inst_3531:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x808fffff; valaddr_reg:x16; val_offset:1832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1832, x17, x15, 1832, x18)

inst_3532:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x700000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80f00000; op2val:0x80000001; valaddr_reg:x16; val_offset:1840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1840, x17, x15, 1840, x18)

inst_3533:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x80f00000; valaddr_reg:x16; val_offset:1848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1848, x17, x15, 1848, x18)

inst_3534:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x1fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x809fffff; op2val:0x80000001; valaddr_reg:x16; val_offset:1856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1856, x17, x15, 1856, x18)

inst_3535:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x809fffff; valaddr_reg:x16; val_offset:1864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1864, x17, x15, 1864, x18)

inst_3536:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x600000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80e00000; op2val:0x80000001; valaddr_reg:x16; val_offset:1872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1872, x17, x15, 1872, x18)

inst_3537:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x80e00000; valaddr_reg:x16; val_offset:1880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1880, x17, x15, 1880, x18)

inst_3538:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x3fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80bfffff; op2val:0x80000001; valaddr_reg:x16; val_offset:1888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1888, x17, x15, 1888, x18)

inst_3539:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x80bfffff; valaddr_reg:x16; val_offset:1896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1896, x17, x15, 1896, x18)

inst_3540:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80c00000; op2val:0x80000001; valaddr_reg:x16; val_offset:1904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1904, x17, x15, 1904, x18)

inst_3541:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x80c00000; valaddr_reg:x16; val_offset:1912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1912, x17, x15, 1912, x18)

inst_3542:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80ffffff; op2val:0x80000001; valaddr_reg:x16; val_offset:1920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1920, x17, x15, 1920, x18)

inst_3543:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x80ffffff; valaddr_reg:x16; val_offset:1928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1928, x17, x15, 1928, x18)

inst_3544:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x80000001; valaddr_reg:x16; val_offset:1936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1936, x17, x15, 1936, x18)

inst_3545:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x80000000; valaddr_reg:x16; val_offset:1944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1944, x17, x15, 1944, x18)

inst_3546:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x00000f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8000000f; op2val:0x80000001; valaddr_reg:x16; val_offset:1952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1952, x17, x15, 1952, x18)

inst_3547:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x8000000f; valaddr_reg:x16; val_offset:1960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1960, x17, x15, 1960, x18)

inst_3548:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ffff0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807ffff0; op2val:0x80000001; valaddr_reg:x16; val_offset:1968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1968, x17, x15, 1968, x18)

inst_3549:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x807ffff0; valaddr_reg:x16; val_offset:1976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1976, x17, x15, 1976, x18)

inst_3550:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x00001f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8000001f; op2val:0x80000001; valaddr_reg:x16; val_offset:1984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1984, x17, x15, 1984, x18)

inst_3551:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x8000001f; valaddr_reg:x16; val_offset:1992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1992, x17, x15, 1992, x18)

inst_3552:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffe0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffe0; op2val:0x80000001; valaddr_reg:x16; val_offset:2000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2000, x17, x15, 2000, x18)

inst_3553:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x807fffe0; valaddr_reg:x16; val_offset:2008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2008, x17, x15, 2008, x18)

inst_3554:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8000003f; op2val:0x80000001; valaddr_reg:x16; val_offset:2016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2016, x17, x15, 2016, x18)

inst_3555:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x8000003f; valaddr_reg:x16; val_offset:2024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_15)

inst_3556:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffc0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffc0; op2val:0x80000001; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_3557:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x807fffc0; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 8, x17, x15, 8, x18)

inst_3558:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x00007f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8000007f; op2val:0x80000001; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 16, x17, x15, 16, x18)

inst_3559:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x8000007f; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 24, x17, x15, 24, x18)

inst_3560:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fff80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fff80; op2val:0x80000001; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 32, x17, x15, 32, x18)

inst_3561:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x807fff80; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 40, x17, x15, 40, x18)

inst_3562:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0000ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000ff; op2val:0x80000001; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_3563:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x800000ff; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 56, x17, x15, 56, x18)

inst_3564:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fff00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fff00; op2val:0x80000001; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 64, x17, x15, 64, x18)

inst_3565:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x807fff00; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 72, x17, x15, 72, x18)

inst_3566:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0001ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800001ff; op2val:0x80000001; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_3567:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x800001ff; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 88, x17, x15, 88, x18)

inst_3568:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ffe00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807ffe00; op2val:0x80000001; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 96, x17, x15, 96, x18)

inst_3569:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x807ffe00; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 104, x17, x15, 104, x18)

inst_3570:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0003ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800003ff; op2val:0x80000001; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 112, x17, x15, 112, x18)

inst_3571:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x800003ff; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 120, x17, x15, 120, x18)

inst_3572:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ffc00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807ffc00; op2val:0x80000001; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_3573:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x807ffc00; valaddr_reg:x16; val_offset:136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 136, x17, x15, 136, x18)

inst_3574:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0007ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800007ff; op2val:0x80000001; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 144, x17, x15, 144, x18)

inst_3575:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x800007ff; valaddr_reg:x16; val_offset:152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 152, x17, x15, 152, x18)

inst_3576:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ff800 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807ff800; op2val:0x80000001; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_3577:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x807ff800; valaddr_reg:x16; val_offset:168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 168, x17, x15, 168, x18)

inst_3578:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000fff; op2val:0x80000001; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 176, x17, x15, 176, x18)

inst_3579:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x80000fff; valaddr_reg:x16; val_offset:184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 184, x17, x15, 184, x18)

inst_3580:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ff000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807ff000; op2val:0x80000001; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 192, x17, x15, 192, x18)

inst_3581:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x807ff000; valaddr_reg:x16; val_offset:200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 200, x17, x15, 200, x18)

inst_3582:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x001fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80001fff; op2val:0x80000001; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_3583:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x80001fff; valaddr_reg:x16; val_offset:216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 216, x17, x15, 216, x18)

inst_3584:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fe000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fe000; op2val:0x80000001; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 224, x17, x15, 224, x18)

inst_3585:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x807fe000; valaddr_reg:x16; val_offset:232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 232, x17, x15, 232, x18)

inst_3586:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x003fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80003fff; op2val:0x80000001; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_3587:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x80003fff; valaddr_reg:x16; val_offset:248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 248, x17, x15, 248, x18)

inst_3588:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fc000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fc000; op2val:0x80000001; valaddr_reg:x16; val_offset:256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 256, x17, x15, 256, x18)

inst_3589:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x807fc000; valaddr_reg:x16; val_offset:264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 264, x17, x15, 264, x18)

inst_3590:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x007fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80007fff; op2val:0x80000001; valaddr_reg:x16; val_offset:272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 272, x17, x15, 272, x18)

inst_3591:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x80007fff; valaddr_reg:x16; val_offset:280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 280, x17, x15, 280, x18)

inst_3592:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7f8000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807f8000; op2val:0x80000001; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_3593:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x807f8000; valaddr_reg:x16; val_offset:296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 296, x17, x15, 296, x18)

inst_3594:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x00ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8000ffff; op2val:0x80000001; valaddr_reg:x16; val_offset:304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 304, x17, x15, 304, x18)

inst_3595:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x8000ffff; valaddr_reg:x16; val_offset:312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 312, x17, x15, 312, x18)

inst_3596:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7f0000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807f0000; op2val:0x80000001; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_3597:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x807f0000; valaddr_reg:x16; val_offset:328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 328, x17, x15, 328, x18)

inst_3598:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x01ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8001ffff; op2val:0x80000001; valaddr_reg:x16; val_offset:336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 336, x17, x15, 336, x18)

inst_3599:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x8001ffff; valaddr_reg:x16; val_offset:344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 344, x17, x15, 344, x18)

inst_3600:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7e0000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807e0000; op2val:0x80000001; valaddr_reg:x16; val_offset:352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 352, x17, x15, 352, x18)

inst_3601:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x807e0000; valaddr_reg:x16; val_offset:360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 360, x17, x15, 360, x18)

inst_3602:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x03ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8003ffff; op2val:0x80000001; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_3603:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x8003ffff; valaddr_reg:x16; val_offset:376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 376, x17, x15, 376, x18)

inst_3604:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7c0000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807c0000; op2val:0x80000001; valaddr_reg:x16; val_offset:384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 384, x17, x15, 384, x18)

inst_3605:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x807c0000; valaddr_reg:x16; val_offset:392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 392, x17, x15, 392, x18)

inst_3606:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x07ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8007ffff; op2val:0x80000001; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_3607:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x8007ffff; valaddr_reg:x16; val_offset:408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 408, x17, x15, 408, x18)

inst_3608:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x780000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80780000; op2val:0x80000001; valaddr_reg:x16; val_offset:416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 416, x17, x15, 416, x18)

inst_3609:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x80780000; valaddr_reg:x16; val_offset:424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 424, x17, x15, 424, x18)

inst_3610:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800fffff; op2val:0x80000001; valaddr_reg:x16; val_offset:432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 432, x17, x15, 432, x18)

inst_3611:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x800fffff; valaddr_reg:x16; val_offset:440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 440, x17, x15, 440, x18)

inst_3612:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x700000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80700000; op2val:0x80000001; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_3613:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x80700000; valaddr_reg:x16; val_offset:456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 456, x17, x15, 456, x18)

inst_3614:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x1fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x801fffff; op2val:0x80000001; valaddr_reg:x16; val_offset:464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 464, x17, x15, 464, x18)

inst_3615:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x801fffff; valaddr_reg:x16; val_offset:472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 472, x17, x15, 472, x18)

inst_3616:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x600000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80600000; op2val:0x80000001; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_3617:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x80600000; valaddr_reg:x16; val_offset:488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 488, x17, x15, 488, x18)

inst_3618:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x3fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x803fffff; op2val:0x80000001; valaddr_reg:x16; val_offset:496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 496, x17, x15, 496, x18)

inst_3619:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x803fffff; valaddr_reg:x16; val_offset:504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 504, x17, x15, 504, x18)

inst_3620:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80400000; op2val:0x80000001; valaddr_reg:x16; val_offset:512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 512, x17, x15, 512, x18)

inst_3621:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0x80400000; valaddr_reg:x16; val_offset:520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 520, x17, x15, 520, x18)

inst_3622:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd800001; op2val:0x80000001; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_3623:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0xfd800001; valaddr_reg:x16; val_offset:536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 536, x17, x15, 536, x18)

inst_3624:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd800000; op2val:0x80000001; valaddr_reg:x16; val_offset:544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 544, x17, x15, 544, x18)

inst_3625:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0xfd800000; valaddr_reg:x16; val_offset:552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 552, x17, x15, 552, x18)

inst_3626:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x7ffffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdfffffe; op2val:0x80000001; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_3627:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0xfdfffffe; valaddr_reg:x16; val_offset:568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 568, x17, x15, 568, x18)

inst_3628:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x000003 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd800003; op2val:0x80000001; valaddr_reg:x16; val_offset:576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 576, x17, x15, 576, x18)

inst_3629:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0xfd800003; valaddr_reg:x16; val_offset:584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 584, x17, x15, 584, x18)

inst_3630:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x7ffffc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdfffffc; op2val:0x80000001; valaddr_reg:x16; val_offset:592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 592, x17, x15, 592, x18)

inst_3631:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0xfdfffffc; valaddr_reg:x16; val_offset:600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 600, x17, x15, 600, x18)

inst_3632:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x000007 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd800007; op2val:0x80000001; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 608, x17, x15, 608, x18)

inst_3633:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0xfd800007; valaddr_reg:x16; val_offset:616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 616, x17, x15, 616, x18)

inst_3634:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x7ffff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdfffff8; op2val:0x80000001; valaddr_reg:x16; val_offset:624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 624, x17, x15, 624, x18)

inst_3635:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0xfdfffff8; valaddr_reg:x16; val_offset:632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 632, x17, x15, 632, x18)

inst_3636:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x00000f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd80000f; op2val:0x80000001; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_3637:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0xfd80000f; valaddr_reg:x16; val_offset:648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 648, x17, x15, 648, x18)

inst_3638:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x7ffff0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdfffff0; op2val:0x80000001; valaddr_reg:x16; val_offset:656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 656, x17, x15, 656, x18)

inst_3639:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0xfdfffff0; valaddr_reg:x16; val_offset:664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 664, x17, x15, 664, x18)

inst_3640:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x00001f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd80001f; op2val:0x80000001; valaddr_reg:x16; val_offset:672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 672, x17, x15, 672, x18)

inst_3641:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0xfd80001f; valaddr_reg:x16; val_offset:680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 680, x17, x15, 680, x18)

inst_3642:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x7fffe0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdffffe0; op2val:0x80000001; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 688, x17, x15, 688, x18)

inst_3643:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0xfdffffe0; valaddr_reg:x16; val_offset:696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 696, x17, x15, 696, x18)

inst_3644:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd80003f; op2val:0x80000001; valaddr_reg:x16; val_offset:704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 704, x17, x15, 704, x18)

inst_3645:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0xfd80003f; valaddr_reg:x16; val_offset:712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 712, x17, x15, 712, x18)

inst_3646:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x7fffc0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdffffc0; op2val:0x80000001; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_3647:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0xfdffffc0; valaddr_reg:x16; val_offset:728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 728, x17, x15, 728, x18)

inst_3648:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x00007f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd80007f; op2val:0x80000001; valaddr_reg:x16; val_offset:736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 736, x17, x15, 736, x18)

inst_3649:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0xfd80007f; valaddr_reg:x16; val_offset:744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 744, x17, x15, 744, x18)

inst_3650:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x7fff80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdffff80; op2val:0x80000001; valaddr_reg:x16; val_offset:752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 752, x17, x15, 752, x18)

inst_3651:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0xfdffff80; valaddr_reg:x16; val_offset:760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 760, x17, x15, 760, x18)

inst_3652:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x0000ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd8000ff; op2val:0x80000001; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 768, x17, x15, 768, x18)

inst_3653:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0xfd8000ff; valaddr_reg:x16; val_offset:776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 776, x17, x15, 776, x18)

inst_3654:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x7fff00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdffff00; op2val:0x80000001; valaddr_reg:x16; val_offset:784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 784, x17, x15, 784, x18)

inst_3655:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0xfdffff00; valaddr_reg:x16; val_offset:792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 792, x17, x15, 792, x18)

inst_3656:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x0001ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd8001ff; op2val:0x80000001; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_3657:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0xfd8001ff; valaddr_reg:x16; val_offset:808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 808, x17, x15, 808, x18)

inst_3658:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x7ffe00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdfffe00; op2val:0x80000001; valaddr_reg:x16; val_offset:816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 816, x17, x15, 816, x18)

inst_3659:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0xfdfffe00; valaddr_reg:x16; val_offset:824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 824, x17, x15, 824, x18)

inst_3660:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x0003ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd8003ff; op2val:0x80000001; valaddr_reg:x16; val_offset:832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 832, x17, x15, 832, x18)

inst_3661:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0xfd8003ff; valaddr_reg:x16; val_offset:840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 840, x17, x15, 840, x18)

inst_3662:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x7ffc00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdfffc00; op2val:0x80000001; valaddr_reg:x16; val_offset:848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 848, x17, x15, 848, x18)

inst_3663:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0xfdfffc00; valaddr_reg:x16; val_offset:856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 856, x17, x15, 856, x18)

inst_3664:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x0007ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd8007ff; op2val:0x80000001; valaddr_reg:x16; val_offset:864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 864, x17, x15, 864, x18)

inst_3665:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0xfd8007ff; valaddr_reg:x16; val_offset:872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 872, x17, x15, 872, x18)

inst_3666:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x7ff800 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdfff800; op2val:0x80000001; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 880, x17, x15, 880, x18)

inst_3667:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0xfdfff800; valaddr_reg:x16; val_offset:888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 888, x17, x15, 888, x18)

inst_3668:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x000fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd800fff; op2val:0x80000001; valaddr_reg:x16; val_offset:896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 896, x17, x15, 896, x18)

inst_3669:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0xfd800fff; valaddr_reg:x16; val_offset:904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 904, x17, x15, 904, x18)

inst_3670:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x7ff000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdfff000; op2val:0x80000001; valaddr_reg:x16; val_offset:912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 912, x17, x15, 912, x18)

inst_3671:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0xfdfff000; valaddr_reg:x16; val_offset:920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 920, x17, x15, 920, x18)

inst_3672:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x001fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd801fff; op2val:0x80000001; valaddr_reg:x16; val_offset:928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 928, x17, x15, 928, x18)

inst_3673:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0xfd801fff; valaddr_reg:x16; val_offset:936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 936, x17, x15, 936, x18)

inst_3674:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x7fe000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdffe000; op2val:0x80000001; valaddr_reg:x16; val_offset:944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 944, x17, x15, 944, x18)

inst_3675:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0xfdffe000; valaddr_reg:x16; val_offset:952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 952, x17, x15, 952, x18)

inst_3676:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x003fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd803fff; op2val:0x80000001; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 960, x17, x15, 960, x18)

inst_3677:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0xfd803fff; valaddr_reg:x16; val_offset:968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 968, x17, x15, 968, x18)

inst_3678:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x7fc000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdffc000; op2val:0x80000001; valaddr_reg:x16; val_offset:976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 976, x17, x15, 976, x18)

inst_3679:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0xfdffc000; valaddr_reg:x16; val_offset:984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 984, x17, x15, 984, x18)

inst_3680:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x007fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd807fff; op2val:0x80000001; valaddr_reg:x16; val_offset:992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 992, x17, x15, 992, x18)

inst_3681:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0xfd807fff; valaddr_reg:x16; val_offset:1000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1000, x17, x15, 1000, x18)

inst_3682:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x7f8000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdff8000; op2val:0x80000001; valaddr_reg:x16; val_offset:1008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1008, x17, x15, 1008, x18)

inst_3683:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0xfdff8000; valaddr_reg:x16; val_offset:1016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1016, x17, x15, 1016, x18)

inst_3684:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x00ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd80ffff; op2val:0x80000001; valaddr_reg:x16; val_offset:1024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1024, x17, x15, 1024, x18)

inst_3685:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0xfd80ffff; valaddr_reg:x16; val_offset:1032; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1032, x17, x15, 1032, x18)

inst_3686:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x7f0000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdff0000; op2val:0x80000001; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1040, x17, x15, 1040, x18)

inst_3687:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0xfdff0000; valaddr_reg:x16; val_offset:1048; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1048, x17, x15, 1048, x18)

inst_3688:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x01ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd81ffff; op2val:0x80000001; valaddr_reg:x16; val_offset:1056; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1056, x17, x15, 1056, x18)

inst_3689:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0xfd81ffff; valaddr_reg:x16; val_offset:1064; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1064, x17, x15, 1064, x18)

inst_3690:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x7e0000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdfe0000; op2val:0x80000001; valaddr_reg:x16; val_offset:1072; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1072, x17, x15, 1072, x18)

inst_3691:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0xfdfe0000; valaddr_reg:x16; val_offset:1080; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1080, x17, x15, 1080, x18)

inst_3692:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x03ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd83ffff; op2val:0x80000001; valaddr_reg:x16; val_offset:1088; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1088, x17, x15, 1088, x18)

inst_3693:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0xfd83ffff; valaddr_reg:x16; val_offset:1096; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1096, x17, x15, 1096, x18)

inst_3694:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x7c0000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdfc0000; op2val:0x80000001; valaddr_reg:x16; val_offset:1104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1104, x17, x15, 1104, x18)

inst_3695:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0xfdfc0000; valaddr_reg:x16; val_offset:1112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1112, x17, x15, 1112, x18)

inst_3696:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x07ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd87ffff; op2val:0x80000001; valaddr_reg:x16; val_offset:1120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1120, x17, x15, 1120, x18)

inst_3697:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0xfd87ffff; valaddr_reg:x16; val_offset:1128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1128, x17, x15, 1128, x18)

inst_3698:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x780000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdf80000; op2val:0x80000001; valaddr_reg:x16; val_offset:1136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1136, x17, x15, 1136, x18)

inst_3699:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0xfdf80000; valaddr_reg:x16; val_offset:1144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1144, x17, x15, 1144, x18)

inst_3700:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x0fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd8fffff; op2val:0x80000001; valaddr_reg:x16; val_offset:1152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1152, x17, x15, 1152, x18)

inst_3701:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0xfd8fffff; valaddr_reg:x16; val_offset:1160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1160, x17, x15, 1160, x18)

inst_3702:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x700000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdf00000; op2val:0x80000001; valaddr_reg:x16; val_offset:1168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1168, x17, x15, 1168, x18)

inst_3703:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0xfdf00000; valaddr_reg:x16; val_offset:1176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1176, x17, x15, 1176, x18)

inst_3704:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x1fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd9fffff; op2val:0x80000001; valaddr_reg:x16; val_offset:1184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1184, x17, x15, 1184, x18)

inst_3705:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0xfd9fffff; valaddr_reg:x16; val_offset:1192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1192, x17, x15, 1192, x18)

inst_3706:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x600000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfde00000; op2val:0x80000001; valaddr_reg:x16; val_offset:1200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1200, x17, x15, 1200, x18)

inst_3707:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0xfde00000; valaddr_reg:x16; val_offset:1208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1208, x17, x15, 1208, x18)

inst_3708:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x3fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdbfffff; op2val:0x80000001; valaddr_reg:x16; val_offset:1216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1216, x17, x15, 1216, x18)

inst_3709:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0xfdbfffff; valaddr_reg:x16; val_offset:1224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1224, x17, x15, 1224, x18)

inst_3710:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdc00000; op2val:0x80000001; valaddr_reg:x16; val_offset:1232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1232, x17, x15, 1232, x18)

inst_3711:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0xfdc00000; valaddr_reg:x16; val_offset:1240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1240, x17, x15, 1240, x18)

inst_3712:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdffffff; op2val:0x80000001; valaddr_reg:x16; val_offset:1248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1248, x17, x15, 1248, x18)

inst_3713:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000001; op2val:0xfdffffff; valaddr_reg:x16; val_offset:1256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1256, x17, x15, 1256, x18)

inst_3714:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x4ccccc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x4ccccc; op2val:0x1; valaddr_reg:x16; val_offset:1264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1264, x17, x15, 1264, x18)

inst_3715:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4ccccc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x4ccccc; valaddr_reg:x16; val_offset:1272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1272, x17, x15, 1272, x18)

inst_3716:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x333333 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x333333; op2val:0x1; valaddr_reg:x16; val_offset:1280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1280, x17, x15, 1280, x18)

inst_3717:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x333333 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x333333; valaddr_reg:x16; val_offset:1288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1288, x17, x15, 1288, x18)

inst_3718:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x5b6db6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x5b6db6; op2val:0x1; valaddr_reg:x16; val_offset:1296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1296, x17, x15, 1296, x18)

inst_3719:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b6db6 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x5b6db6; valaddr_reg:x16; val_offset:1304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1304, x17, x15, 1304, x18)

inst_3720:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x249249 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x249249; op2val:0x1; valaddr_reg:x16; val_offset:1312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1312, x17, x15, 1312, x18)

inst_3721:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x249249 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x249249; valaddr_reg:x16; val_offset:1320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1320, x17, x15, 1320, x18)

inst_3722:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x444444 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x444444; op2val:0x1; valaddr_reg:x16; val_offset:1328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1328, x17, x15, 1328, x18)

inst_3723:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x444444 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x444444; valaddr_reg:x16; val_offset:1336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1336, x17, x15, 1336, x18)

inst_3724:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x3bbbbb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3bbbbb; op2val:0x1; valaddr_reg:x16; val_offset:1344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1344, x17, x15, 1344, x18)

inst_3725:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3bbbbb and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x3bbbbb; valaddr_reg:x16; val_offset:1352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1352, x17, x15, 1352, x18)

inst_3726:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x666666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x666666; op2val:0x1; valaddr_reg:x16; val_offset:1360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1360, x17, x15, 1360, x18)

inst_3727:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x666666 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x666666; valaddr_reg:x16; val_offset:1368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1368, x17, x15, 1368, x18)

inst_3728:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x199999 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x199999; op2val:0x1; valaddr_reg:x16; val_offset:1376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1376, x17, x15, 1376, x18)

inst_3729:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x199999 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x199999; valaddr_reg:x16; val_offset:1384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1384, x17, x15, 1384, x18)

inst_3730:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x6db6db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6db6db; op2val:0x1; valaddr_reg:x16; val_offset:1392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1392, x17, x15, 1392, x18)

inst_3731:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6db6db and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x6db6db; valaddr_reg:x16; val_offset:1400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1400, x17, x15, 1400, x18)

inst_3732:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x36db6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x36db6d; op2val:0x1; valaddr_reg:x16; val_offset:1408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1408, x17, x15, 1408, x18)

inst_3733:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36db6d and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x36db6d; valaddr_reg:x16; val_offset:1416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1416, x17, x15, 1416, x18)

inst_3734:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x1; valaddr_reg:x16; val_offset:1424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1424, x17, x15, 1424, x18)

inst_3735:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7ffffe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ffffe; op2val:0x1; valaddr_reg:x16; val_offset:1432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1432, x17, x15, 1432, x18)

inst_3736:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x7ffffe; valaddr_reg:x16; val_offset:1440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1440, x17, x15, 1440, x18)

inst_3737:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000003 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3; op2val:0x1; valaddr_reg:x16; val_offset:1448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1448, x17, x15, 1448, x18)

inst_3738:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x3; valaddr_reg:x16; val_offset:1456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1456, x17, x15, 1456, x18)

inst_3739:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7ffffc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ffffc; op2val:0x1; valaddr_reg:x16; val_offset:1464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1464, x17, x15, 1464, x18)

inst_3740:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x7ffffc; valaddr_reg:x16; val_offset:1472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1472, x17, x15, 1472, x18)

inst_3741:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000007 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7; op2val:0x1; valaddr_reg:x16; val_offset:1480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1480, x17, x15, 1480, x18)

inst_3742:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x7; valaddr_reg:x16; val_offset:1488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1488, x17, x15, 1488, x18)

inst_3743:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7ffff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ffff8; op2val:0x1; valaddr_reg:x16; val_offset:1496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1496, x17, x15, 1496, x18)

inst_3744:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x7ffff8; valaddr_reg:x16; val_offset:1504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1504, x17, x15, 1504, x18)

inst_3745:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1800001; op2val:0x1; valaddr_reg:x16; val_offset:1512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1512, x17, x15, 1512, x18)

inst_3746:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x1800001; valaddr_reg:x16; val_offset:1520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1520, x17, x15, 1520, x18)

inst_3747:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1800000; op2val:0x1; valaddr_reg:x16; val_offset:1528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1528, x17, x15, 1528, x18)

inst_3748:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x1800000; valaddr_reg:x16; val_offset:1536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1536, x17, x15, 1536, x18)

inst_3749:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7ffffe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1fffffe; op2val:0x1; valaddr_reg:x16; val_offset:1544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1544, x17, x15, 1544, x18)

inst_3750:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x1fffffe; valaddr_reg:x16; val_offset:1552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1552, x17, x15, 1552, x18)

inst_3751:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x000003 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1800003; op2val:0x1; valaddr_reg:x16; val_offset:1560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1560, x17, x15, 1560, x18)

inst_3752:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x1800003; valaddr_reg:x16; val_offset:1568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1568, x17, x15, 1568, x18)

inst_3753:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7ffffc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1fffffc; op2val:0x1; valaddr_reg:x16; val_offset:1576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1576, x17, x15, 1576, x18)

inst_3754:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x1fffffc; valaddr_reg:x16; val_offset:1584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1584, x17, x15, 1584, x18)

inst_3755:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x000007 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1800007; op2val:0x1; valaddr_reg:x16; val_offset:1592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1592, x17, x15, 1592, x18)

inst_3756:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x1800007; valaddr_reg:x16; val_offset:1600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1600, x17, x15, 1600, x18)

inst_3757:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7ffff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1fffff8; op2val:0x1; valaddr_reg:x16; val_offset:1608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1608, x17, x15, 1608, x18)

inst_3758:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x1fffff8; valaddr_reg:x16; val_offset:1616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1616, x17, x15, 1616, x18)

inst_3759:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x00000f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x180000f; op2val:0x1; valaddr_reg:x16; val_offset:1624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1624, x17, x15, 1624, x18)

inst_3760:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x180000f; valaddr_reg:x16; val_offset:1632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1632, x17, x15, 1632, x18)

inst_3761:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7ffff0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1fffff0; op2val:0x1; valaddr_reg:x16; val_offset:1640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1640, x17, x15, 1640, x18)

inst_3762:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x1fffff0; valaddr_reg:x16; val_offset:1648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1648, x17, x15, 1648, x18)

inst_3763:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x00001f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x180001f; op2val:0x1; valaddr_reg:x16; val_offset:1656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1656, x17, x15, 1656, x18)

inst_3764:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x180001f; valaddr_reg:x16; val_offset:1664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1664, x17, x15, 1664, x18)

inst_3765:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7fffe0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1ffffe0; op2val:0x1; valaddr_reg:x16; val_offset:1672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1672, x17, x15, 1672, x18)

inst_3766:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x1ffffe0; valaddr_reg:x16; val_offset:1680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1680, x17, x15, 1680, x18)

inst_3767:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x00003f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x180003f; op2val:0x1; valaddr_reg:x16; val_offset:1688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1688, x17, x15, 1688, x18)

inst_3768:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x180003f; valaddr_reg:x16; val_offset:1696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1696, x17, x15, 1696, x18)

inst_3769:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7fffc0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1ffffc0; op2val:0x1; valaddr_reg:x16; val_offset:1704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1704, x17, x15, 1704, x18)

inst_3770:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x1ffffc0; valaddr_reg:x16; val_offset:1712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1712, x17, x15, 1712, x18)

inst_3771:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x00007f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x180007f; op2val:0x1; valaddr_reg:x16; val_offset:1720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1720, x17, x15, 1720, x18)

inst_3772:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x180007f; valaddr_reg:x16; val_offset:1728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1728, x17, x15, 1728, x18)

inst_3773:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7fff80 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1ffff80; op2val:0x1; valaddr_reg:x16; val_offset:1736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1736, x17, x15, 1736, x18)

inst_3774:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x1ffff80; valaddr_reg:x16; val_offset:1744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1744, x17, x15, 1744, x18)

inst_3775:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x0000ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x18000ff; op2val:0x1; valaddr_reg:x16; val_offset:1752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1752, x17, x15, 1752, x18)

inst_3776:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x18000ff; valaddr_reg:x16; val_offset:1760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1760, x17, x15, 1760, x18)

inst_3777:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7fff00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1ffff00; op2val:0x1; valaddr_reg:x16; val_offset:1768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1768, x17, x15, 1768, x18)

inst_3778:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x1ffff00; valaddr_reg:x16; val_offset:1776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1776, x17, x15, 1776, x18)

inst_3779:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x0001ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x18001ff; op2val:0x1; valaddr_reg:x16; val_offset:1784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1784, x17, x15, 1784, x18)

inst_3780:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x18001ff; valaddr_reg:x16; val_offset:1792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1792, x17, x15, 1792, x18)

inst_3781:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7ffe00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1fffe00; op2val:0x1; valaddr_reg:x16; val_offset:1800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1800, x17, x15, 1800, x18)

inst_3782:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x1fffe00; valaddr_reg:x16; val_offset:1808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1808, x17, x15, 1808, x18)

inst_3783:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x0003ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x18003ff; op2val:0x1; valaddr_reg:x16; val_offset:1816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1816, x17, x15, 1816, x18)

inst_3784:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x18003ff; valaddr_reg:x16; val_offset:1824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1824, x17, x15, 1824, x18)

inst_3785:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7ffc00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1fffc00; op2val:0x1; valaddr_reg:x16; val_offset:1832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1832, x17, x15, 1832, x18)

inst_3786:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x1fffc00; valaddr_reg:x16; val_offset:1840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1840, x17, x15, 1840, x18)

inst_3787:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x0007ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x18007ff; op2val:0x1; valaddr_reg:x16; val_offset:1848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1848, x17, x15, 1848, x18)

inst_3788:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x18007ff; valaddr_reg:x16; val_offset:1856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1856, x17, x15, 1856, x18)

inst_3789:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7ff800 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1fff800; op2val:0x1; valaddr_reg:x16; val_offset:1864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1864, x17, x15, 1864, x18)

inst_3790:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x1fff800; valaddr_reg:x16; val_offset:1872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1872, x17, x15, 1872, x18)

inst_3791:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x000fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1800fff; op2val:0x1; valaddr_reg:x16; val_offset:1880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1880, x17, x15, 1880, x18)

inst_3792:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x1800fff; valaddr_reg:x16; val_offset:1888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1888, x17, x15, 1888, x18)

inst_3793:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7ff000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1fff000; op2val:0x1; valaddr_reg:x16; val_offset:1896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1896, x17, x15, 1896, x18)

inst_3794:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x1fff000; valaddr_reg:x16; val_offset:1904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1904, x17, x15, 1904, x18)

inst_3795:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x001fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1801fff; op2val:0x1; valaddr_reg:x16; val_offset:1912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1912, x17, x15, 1912, x18)

inst_3796:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x1801fff; valaddr_reg:x16; val_offset:1920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1920, x17, x15, 1920, x18)

inst_3797:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7fe000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1ffe000; op2val:0x1; valaddr_reg:x16; val_offset:1928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1928, x17, x15, 1928, x18)

inst_3798:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x1ffe000; valaddr_reg:x16; val_offset:1936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1936, x17, x15, 1936, x18)

inst_3799:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x003fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1803fff; op2val:0x1; valaddr_reg:x16; val_offset:1944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1944, x17, x15, 1944, x18)

inst_3800:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x1803fff; valaddr_reg:x16; val_offset:1952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1952, x17, x15, 1952, x18)

inst_3801:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7fc000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1ffc000; op2val:0x1; valaddr_reg:x16; val_offset:1960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1960, x17, x15, 1960, x18)

inst_3802:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x1ffc000; valaddr_reg:x16; val_offset:1968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1968, x17, x15, 1968, x18)

inst_3803:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x007fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1807fff; op2val:0x1; valaddr_reg:x16; val_offset:1976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1976, x17, x15, 1976, x18)

inst_3804:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x1807fff; valaddr_reg:x16; val_offset:1984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1984, x17, x15, 1984, x18)

inst_3805:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7f8000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1ff8000; op2val:0x1; valaddr_reg:x16; val_offset:1992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1992, x17, x15, 1992, x18)

inst_3806:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x1ff8000; valaddr_reg:x16; val_offset:2000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2000, x17, x15, 2000, x18)

inst_3807:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x00ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x180ffff; op2val:0x1; valaddr_reg:x16; val_offset:2008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2008, x17, x15, 2008, x18)

inst_3808:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x180ffff; valaddr_reg:x16; val_offset:2016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2016, x17, x15, 2016, x18)

inst_3809:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7f0000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1ff0000; op2val:0x1; valaddr_reg:x16; val_offset:2024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_16)

inst_3810:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x1ff0000; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_3811:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x01ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x181ffff; op2val:0x1; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 8, x17, x15, 8, x18)

inst_3812:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x181ffff; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 16, x17, x15, 16, x18)

inst_3813:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7e0000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1fe0000; op2val:0x1; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 24, x17, x15, 24, x18)

inst_3814:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x1fe0000; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 32, x17, x15, 32, x18)

inst_3815:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x03ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x183ffff; op2val:0x1; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 40, x17, x15, 40, x18)

inst_3816:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x183ffff; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_3817:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7c0000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1fc0000; op2val:0x1; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 56, x17, x15, 56, x18)

inst_3818:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x1fc0000; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 64, x17, x15, 64, x18)

inst_3819:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x07ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x187ffff; op2val:0x1; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 72, x17, x15, 72, x18)

inst_3820:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x187ffff; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_3821:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x780000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1f80000; op2val:0x1; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 88, x17, x15, 88, x18)

inst_3822:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x1f80000; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 96, x17, x15, 96, x18)

inst_3823:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x0fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x18fffff; op2val:0x1; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 104, x17, x15, 104, x18)

inst_3824:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x18fffff; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 112, x17, x15, 112, x18)

inst_3825:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x700000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1f00000; op2val:0x1; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 120, x17, x15, 120, x18)

inst_3826:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x1f00000; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_3827:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x1fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x19fffff; op2val:0x1; valaddr_reg:x16; val_offset:136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 136, x17, x15, 136, x18)

inst_3828:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x19fffff; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 144, x17, x15, 144, x18)

inst_3829:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x600000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1e00000; op2val:0x1; valaddr_reg:x16; val_offset:152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 152, x17, x15, 152, x18)

inst_3830:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x1e00000; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_3831:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x3fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1bfffff; op2val:0x1; valaddr_reg:x16; val_offset:168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 168, x17, x15, 168, x18)

inst_3832:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x1bfffff; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 176, x17, x15, 176, x18)

inst_3833:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1c00000; op2val:0x1; valaddr_reg:x16; val_offset:184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 184, x17, x15, 184, x18)

inst_3834:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x1c00000; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 192, x17, x15, 192, x18)

inst_3835:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1ffffff; op2val:0x1; valaddr_reg:x16; val_offset:200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 200, x17, x15, 200, x18)

inst_3836:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x1ffffff; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_3837:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1000001; op2val:0x1; valaddr_reg:x16; val_offset:216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 216, x17, x15, 216, x18)

inst_3838:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x1000001; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 224, x17, x15, 224, x18)

inst_3839:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1000000; op2val:0x1; valaddr_reg:x16; val_offset:232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 232, x17, x15, 232, x18)

inst_3840:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x1000000; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_3841:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7ffffe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17ffffe; op2val:0x1; valaddr_reg:x16; val_offset:248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 248, x17, x15, 248, x18)

inst_3842:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x17ffffe; valaddr_reg:x16; val_offset:256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 256, x17, x15, 256, x18)

inst_3843:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x000003 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1000003; op2val:0x1; valaddr_reg:x16; val_offset:264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 264, x17, x15, 264, x18)

inst_3844:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x1000003; valaddr_reg:x16; val_offset:272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 272, x17, x15, 272, x18)

inst_3845:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7ffffc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17ffffc; op2val:0x1; valaddr_reg:x16; val_offset:280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 280, x17, x15, 280, x18)

inst_3846:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x17ffffc; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_3847:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x000007 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1000007; op2val:0x1; valaddr_reg:x16; val_offset:296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 296, x17, x15, 296, x18)

inst_3848:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x1000007; valaddr_reg:x16; val_offset:304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 304, x17, x15, 304, x18)

inst_3849:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7ffff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17ffff8; op2val:0x1; valaddr_reg:x16; val_offset:312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 312, x17, x15, 312, x18)

inst_3850:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x17ffff8; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_3851:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x00000f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x100000f; op2val:0x1; valaddr_reg:x16; val_offset:328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 328, x17, x15, 328, x18)

inst_3852:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x100000f; valaddr_reg:x16; val_offset:336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 336, x17, x15, 336, x18)

inst_3853:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7ffff0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17ffff0; op2val:0x1; valaddr_reg:x16; val_offset:344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 344, x17, x15, 344, x18)

inst_3854:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x17ffff0; valaddr_reg:x16; val_offset:352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 352, x17, x15, 352, x18)

inst_3855:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x00001f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x100001f; op2val:0x1; valaddr_reg:x16; val_offset:360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 360, x17, x15, 360, x18)

inst_3856:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x100001f; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_3857:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7fffe0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17fffe0; op2val:0x1; valaddr_reg:x16; val_offset:376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 376, x17, x15, 376, x18)

inst_3858:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x17fffe0; valaddr_reg:x16; val_offset:384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 384, x17, x15, 384, x18)

inst_3859:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x00003f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x100003f; op2val:0x1; valaddr_reg:x16; val_offset:392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 392, x17, x15, 392, x18)

inst_3860:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x100003f; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_3861:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7fffc0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17fffc0; op2val:0x1; valaddr_reg:x16; val_offset:408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 408, x17, x15, 408, x18)

inst_3862:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x17fffc0; valaddr_reg:x16; val_offset:416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 416, x17, x15, 416, x18)

inst_3863:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x00007f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x100007f; op2val:0x1; valaddr_reg:x16; val_offset:424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 424, x17, x15, 424, x18)

inst_3864:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x100007f; valaddr_reg:x16; val_offset:432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 432, x17, x15, 432, x18)

inst_3865:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7fff80 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17fff80; op2val:0x1; valaddr_reg:x16; val_offset:440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 440, x17, x15, 440, x18)

inst_3866:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x17fff80; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_3867:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x0000ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x10000ff; op2val:0x1; valaddr_reg:x16; val_offset:456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 456, x17, x15, 456, x18)

inst_3868:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x10000ff; valaddr_reg:x16; val_offset:464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 464, x17, x15, 464, x18)

inst_3869:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7fff00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17fff00; op2val:0x1; valaddr_reg:x16; val_offset:472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 472, x17, x15, 472, x18)

inst_3870:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x17fff00; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_3871:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x0001ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x10001ff; op2val:0x1; valaddr_reg:x16; val_offset:488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 488, x17, x15, 488, x18)

inst_3872:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x10001ff; valaddr_reg:x16; val_offset:496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 496, x17, x15, 496, x18)

inst_3873:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7ffe00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17ffe00; op2val:0x1; valaddr_reg:x16; val_offset:504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 504, x17, x15, 504, x18)

inst_3874:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x17ffe00; valaddr_reg:x16; val_offset:512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 512, x17, x15, 512, x18)

inst_3875:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x0003ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x10003ff; op2val:0x1; valaddr_reg:x16; val_offset:520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 520, x17, x15, 520, x18)

inst_3876:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x10003ff; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_3877:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7ffc00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17ffc00; op2val:0x1; valaddr_reg:x16; val_offset:536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 536, x17, x15, 536, x18)

inst_3878:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x17ffc00; valaddr_reg:x16; val_offset:544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 544, x17, x15, 544, x18)

inst_3879:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x0007ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x10007ff; op2val:0x1; valaddr_reg:x16; val_offset:552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 552, x17, x15, 552, x18)

inst_3880:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x10007ff; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_3881:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7ff800 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17ff800; op2val:0x1; valaddr_reg:x16; val_offset:568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 568, x17, x15, 568, x18)

inst_3882:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x17ff800; valaddr_reg:x16; val_offset:576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 576, x17, x15, 576, x18)

inst_3883:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x000fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1000fff; op2val:0x1; valaddr_reg:x16; val_offset:584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 584, x17, x15, 584, x18)

inst_3884:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x1000fff; valaddr_reg:x16; val_offset:592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 592, x17, x15, 592, x18)

inst_3885:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7ff000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17ff000; op2val:0x1; valaddr_reg:x16; val_offset:600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 600, x17, x15, 600, x18)

inst_3886:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x17ff000; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 608, x17, x15, 608, x18)

inst_3887:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x001fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1001fff; op2val:0x1; valaddr_reg:x16; val_offset:616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 616, x17, x15, 616, x18)

inst_3888:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x1001fff; valaddr_reg:x16; val_offset:624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 624, x17, x15, 624, x18)

inst_3889:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7fe000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17fe000; op2val:0x1; valaddr_reg:x16; val_offset:632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 632, x17, x15, 632, x18)

inst_3890:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x17fe000; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_3891:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x003fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1003fff; op2val:0x1; valaddr_reg:x16; val_offset:648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 648, x17, x15, 648, x18)

inst_3892:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x1003fff; valaddr_reg:x16; val_offset:656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 656, x17, x15, 656, x18)

inst_3893:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7fc000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17fc000; op2val:0x1; valaddr_reg:x16; val_offset:664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 664, x17, x15, 664, x18)

inst_3894:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x17fc000; valaddr_reg:x16; val_offset:672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 672, x17, x15, 672, x18)

inst_3895:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x007fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1007fff; op2val:0x1; valaddr_reg:x16; val_offset:680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 680, x17, x15, 680, x18)

inst_3896:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x1007fff; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 688, x17, x15, 688, x18)

inst_3897:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7f8000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17f8000; op2val:0x1; valaddr_reg:x16; val_offset:696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 696, x17, x15, 696, x18)

inst_3898:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x17f8000; valaddr_reg:x16; val_offset:704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 704, x17, x15, 704, x18)

inst_3899:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x00ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x100ffff; op2val:0x1; valaddr_reg:x16; val_offset:712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 712, x17, x15, 712, x18)

inst_3900:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x100ffff; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_3901:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7f0000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17f0000; op2val:0x1; valaddr_reg:x16; val_offset:728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 728, x17, x15, 728, x18)

inst_3902:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x17f0000; valaddr_reg:x16; val_offset:736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 736, x17, x15, 736, x18)

inst_3903:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x01ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x101ffff; op2val:0x1; valaddr_reg:x16; val_offset:744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 744, x17, x15, 744, x18)

inst_3904:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x101ffff; valaddr_reg:x16; val_offset:752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 752, x17, x15, 752, x18)

inst_3905:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7e0000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17e0000; op2val:0x1; valaddr_reg:x16; val_offset:760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 760, x17, x15, 760, x18)

inst_3906:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x17e0000; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 768, x17, x15, 768, x18)

inst_3907:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x03ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x103ffff; op2val:0x1; valaddr_reg:x16; val_offset:776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 776, x17, x15, 776, x18)

inst_3908:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x103ffff; valaddr_reg:x16; val_offset:784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 784, x17, x15, 784, x18)

inst_3909:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7c0000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17c0000; op2val:0x1; valaddr_reg:x16; val_offset:792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 792, x17, x15, 792, x18)

inst_3910:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x17c0000; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_3911:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x07ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x107ffff; op2val:0x1; valaddr_reg:x16; val_offset:808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 808, x17, x15, 808, x18)

inst_3912:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x107ffff; valaddr_reg:x16; val_offset:816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 816, x17, x15, 816, x18)

inst_3913:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x780000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1780000; op2val:0x1; valaddr_reg:x16; val_offset:824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 824, x17, x15, 824, x18)

inst_3914:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x1780000; valaddr_reg:x16; val_offset:832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 832, x17, x15, 832, x18)

inst_3915:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x0fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x10fffff; op2val:0x1; valaddr_reg:x16; val_offset:840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 840, x17, x15, 840, x18)

inst_3916:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x10fffff; valaddr_reg:x16; val_offset:848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 848, x17, x15, 848, x18)

inst_3917:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x700000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1700000; op2val:0x1; valaddr_reg:x16; val_offset:856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 856, x17, x15, 856, x18)

inst_3918:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x1700000; valaddr_reg:x16; val_offset:864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 864, x17, x15, 864, x18)

inst_3919:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x1fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x11fffff; op2val:0x1; valaddr_reg:x16; val_offset:872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 872, x17, x15, 872, x18)

inst_3920:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x11fffff; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 880, x17, x15, 880, x18)

inst_3921:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x600000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1600000; op2val:0x1; valaddr_reg:x16; val_offset:888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 888, x17, x15, 888, x18)

inst_3922:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x1600000; valaddr_reg:x16; val_offset:896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 896, x17, x15, 896, x18)

inst_3923:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x3fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x13fffff; op2val:0x1; valaddr_reg:x16; val_offset:904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 904, x17, x15, 904, x18)

inst_3924:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x13fffff; valaddr_reg:x16; val_offset:912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 912, x17, x15, 912, x18)

inst_3925:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1400000; op2val:0x1; valaddr_reg:x16; val_offset:920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 920, x17, x15, 920, x18)

inst_3926:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x1400000; valaddr_reg:x16; val_offset:928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 928, x17, x15, 928, x18)

inst_3927:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17fffff; op2val:0x1; valaddr_reg:x16; val_offset:936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 936, x17, x15, 936, x18)

inst_3928:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x17fffff; valaddr_reg:x16; val_offset:944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 944, x17, x15, 944, x18)

inst_3929:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800001; op2val:0x1; valaddr_reg:x16; val_offset:952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 952, x17, x15, 952, x18)

inst_3930:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x800001; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 960, x17, x15, 960, x18)

inst_3931:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7ffffe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfffffe; op2val:0x1; valaddr_reg:x16; val_offset:968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 968, x17, x15, 968, x18)

inst_3932:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0xfffffe; valaddr_reg:x16; val_offset:976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 976, x17, x15, 976, x18)

inst_3933:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000003 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800003; op2val:0x1; valaddr_reg:x16; val_offset:984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 984, x17, x15, 984, x18)

inst_3934:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x800003; valaddr_reg:x16; val_offset:992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 992, x17, x15, 992, x18)

inst_3935:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7ffffc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfffffc; op2val:0x1; valaddr_reg:x16; val_offset:1000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1000, x17, x15, 1000, x18)

inst_3936:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0xfffffc; valaddr_reg:x16; val_offset:1008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1008, x17, x15, 1008, x18)

inst_3937:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000007 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800007; op2val:0x1; valaddr_reg:x16; val_offset:1016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1016, x17, x15, 1016, x18)

inst_3938:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x800007; valaddr_reg:x16; val_offset:1024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1024, x17, x15, 1024, x18)

inst_3939:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7ffff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfffff8; op2val:0x1; valaddr_reg:x16; val_offset:1032; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1032, x17, x15, 1032, x18)

inst_3940:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0xfffff8; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1040, x17, x15, 1040, x18)

inst_3941:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00000f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000f; op2val:0x1; valaddr_reg:x16; val_offset:1048; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1048, x17, x15, 1048, x18)

inst_3942:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x80000f; valaddr_reg:x16; val_offset:1056; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1056, x17, x15, 1056, x18)

inst_3943:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7ffff0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfffff0; op2val:0x1; valaddr_reg:x16; val_offset:1064; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1064, x17, x15, 1064, x18)

inst_3944:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0xfffff0; valaddr_reg:x16; val_offset:1072; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1072, x17, x15, 1072, x18)

inst_3945:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00001f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80001f; op2val:0x1; valaddr_reg:x16; val_offset:1080; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1080, x17, x15, 1080, x18)

inst_3946:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x80001f; valaddr_reg:x16; val_offset:1088; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1088, x17, x15, 1088, x18)

inst_3947:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7fffe0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xffffe0; op2val:0x1; valaddr_reg:x16; val_offset:1096; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1096, x17, x15, 1096, x18)

inst_3948:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0xffffe0; valaddr_reg:x16; val_offset:1104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1104, x17, x15, 1104, x18)

inst_3949:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00003f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80003f; op2val:0x1; valaddr_reg:x16; val_offset:1112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1112, x17, x15, 1112, x18)

inst_3950:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x80003f; valaddr_reg:x16; val_offset:1120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1120, x17, x15, 1120, x18)

inst_3951:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7fffc0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xffffc0; op2val:0x1; valaddr_reg:x16; val_offset:1128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1128, x17, x15, 1128, x18)

inst_3952:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0xffffc0; valaddr_reg:x16; val_offset:1136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1136, x17, x15, 1136, x18)

inst_3953:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00007f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80007f; op2val:0x1; valaddr_reg:x16; val_offset:1144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1144, x17, x15, 1144, x18)

inst_3954:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x80007f; valaddr_reg:x16; val_offset:1152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1152, x17, x15, 1152, x18)

inst_3955:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7fff80 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xffff80; op2val:0x1; valaddr_reg:x16; val_offset:1160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1160, x17, x15, 1160, x18)

inst_3956:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0xffff80; valaddr_reg:x16; val_offset:1168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1168, x17, x15, 1168, x18)

inst_3957:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x0000ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8000ff; op2val:0x1; valaddr_reg:x16; val_offset:1176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1176, x17, x15, 1176, x18)

inst_3958:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x8000ff; valaddr_reg:x16; val_offset:1184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1184, x17, x15, 1184, x18)

inst_3959:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7fff00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xffff00; op2val:0x1; valaddr_reg:x16; val_offset:1192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1192, x17, x15, 1192, x18)

inst_3960:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0xffff00; valaddr_reg:x16; val_offset:1200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1200, x17, x15, 1200, x18)

inst_3961:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x0001ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8001ff; op2val:0x1; valaddr_reg:x16; val_offset:1208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1208, x17, x15, 1208, x18)

inst_3962:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x8001ff; valaddr_reg:x16; val_offset:1216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1216, x17, x15, 1216, x18)

inst_3963:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7ffe00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfffe00; op2val:0x1; valaddr_reg:x16; val_offset:1224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1224, x17, x15, 1224, x18)

inst_3964:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0xfffe00; valaddr_reg:x16; val_offset:1232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1232, x17, x15, 1232, x18)

inst_3965:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x0003ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8003ff; op2val:0x1; valaddr_reg:x16; val_offset:1240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1240, x17, x15, 1240, x18)

inst_3966:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x8003ff; valaddr_reg:x16; val_offset:1248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1248, x17, x15, 1248, x18)

inst_3967:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7ffc00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfffc00; op2val:0x1; valaddr_reg:x16; val_offset:1256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1256, x17, x15, 1256, x18)

inst_3968:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0xfffc00; valaddr_reg:x16; val_offset:1264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1264, x17, x15, 1264, x18)

inst_3969:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x0007ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8007ff; op2val:0x1; valaddr_reg:x16; val_offset:1272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1272, x17, x15, 1272, x18)

inst_3970:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x8007ff; valaddr_reg:x16; val_offset:1280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1280, x17, x15, 1280, x18)

inst_3971:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7ff800 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfff800; op2val:0x1; valaddr_reg:x16; val_offset:1288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1288, x17, x15, 1288, x18)

inst_3972:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0xfff800; valaddr_reg:x16; val_offset:1296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1296, x17, x15, 1296, x18)

inst_3973:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800fff; op2val:0x1; valaddr_reg:x16; val_offset:1304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1304, x17, x15, 1304, x18)

inst_3974:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x800fff; valaddr_reg:x16; val_offset:1312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1312, x17, x15, 1312, x18)

inst_3975:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7ff000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfff000; op2val:0x1; valaddr_reg:x16; val_offset:1320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1320, x17, x15, 1320, x18)

inst_3976:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0xfff000; valaddr_reg:x16; val_offset:1328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1328, x17, x15, 1328, x18)

inst_3977:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x001fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x801fff; op2val:0x1; valaddr_reg:x16; val_offset:1336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1336, x17, x15, 1336, x18)

inst_3978:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x801fff; valaddr_reg:x16; val_offset:1344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1344, x17, x15, 1344, x18)

inst_3979:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7fe000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xffe000; op2val:0x1; valaddr_reg:x16; val_offset:1352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1352, x17, x15, 1352, x18)

inst_3980:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0xffe000; valaddr_reg:x16; val_offset:1360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1360, x17, x15, 1360, x18)

inst_3981:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x003fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x803fff; op2val:0x1; valaddr_reg:x16; val_offset:1368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1368, x17, x15, 1368, x18)

inst_3982:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x803fff; valaddr_reg:x16; val_offset:1376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1376, x17, x15, 1376, x18)

inst_3983:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7fc000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xffc000; op2val:0x1; valaddr_reg:x16; val_offset:1384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1384, x17, x15, 1384, x18)

inst_3984:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0xffc000; valaddr_reg:x16; val_offset:1392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1392, x17, x15, 1392, x18)

inst_3985:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x007fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fff; op2val:0x1; valaddr_reg:x16; val_offset:1400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1400, x17, x15, 1400, x18)

inst_3986:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x807fff; valaddr_reg:x16; val_offset:1408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1408, x17, x15, 1408, x18)

inst_3987:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7f8000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff8000; op2val:0x1; valaddr_reg:x16; val_offset:1416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1416, x17, x15, 1416, x18)

inst_3988:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0xff8000; valaddr_reg:x16; val_offset:1424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1424, x17, x15, 1424, x18)

inst_3989:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80ffff; op2val:0x1; valaddr_reg:x16; val_offset:1432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1432, x17, x15, 1432, x18)

inst_3990:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x80ffff; valaddr_reg:x16; val_offset:1440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1440, x17, x15, 1440, x18)

inst_3991:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7f0000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff0000; op2val:0x1; valaddr_reg:x16; val_offset:1448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1448, x17, x15, 1448, x18)

inst_3992:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0xff0000; valaddr_reg:x16; val_offset:1456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1456, x17, x15, 1456, x18)

inst_3993:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x01ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81ffff; op2val:0x1; valaddr_reg:x16; val_offset:1464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1464, x17, x15, 1464, x18)

inst_3994:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x81ffff; valaddr_reg:x16; val_offset:1472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1472, x17, x15, 1472, x18)

inst_3995:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7e0000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe0000; op2val:0x1; valaddr_reg:x16; val_offset:1480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1480, x17, x15, 1480, x18)

inst_3996:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0xfe0000; valaddr_reg:x16; val_offset:1488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1488, x17, x15, 1488, x18)

inst_3997:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x03ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x83ffff; op2val:0x1; valaddr_reg:x16; val_offset:1496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1496, x17, x15, 1496, x18)

inst_3998:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x83ffff; valaddr_reg:x16; val_offset:1504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1504, x17, x15, 1504, x18)

inst_3999:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7c0000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfc0000; op2val:0x1; valaddr_reg:x16; val_offset:1512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1512, x17, x15, 1512, x18)

inst_4000:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0xfc0000; valaddr_reg:x16; val_offset:1520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1520, x17, x15, 1520, x18)

inst_4001:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x07ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x87ffff; op2val:0x1; valaddr_reg:x16; val_offset:1528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1528, x17, x15, 1528, x18)

inst_4002:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x87ffff; valaddr_reg:x16; val_offset:1536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1536, x17, x15, 1536, x18)

inst_4003:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x780000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf80000; op2val:0x1; valaddr_reg:x16; val_offset:1544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1544, x17, x15, 1544, x18)

inst_4004:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0xf80000; valaddr_reg:x16; val_offset:1552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1552, x17, x15, 1552, x18)

inst_4005:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x0fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8fffff; op2val:0x1; valaddr_reg:x16; val_offset:1560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1560, x17, x15, 1560, x18)

inst_4006:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x8fffff; valaddr_reg:x16; val_offset:1568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1568, x17, x15, 1568, x18)

inst_4007:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x700000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf00000; op2val:0x1; valaddr_reg:x16; val_offset:1576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1576, x17, x15, 1576, x18)

inst_4008:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0xf00000; valaddr_reg:x16; val_offset:1584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1584, x17, x15, 1584, x18)

inst_4009:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x1fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x9fffff; op2val:0x1; valaddr_reg:x16; val_offset:1592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1592, x17, x15, 1592, x18)

inst_4010:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x9fffff; valaddr_reg:x16; val_offset:1600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1600, x17, x15, 1600, x18)

inst_4011:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x600000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xe00000; op2val:0x1; valaddr_reg:x16; val_offset:1608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1608, x17, x15, 1608, x18)

inst_4012:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0xe00000; valaddr_reg:x16; val_offset:1616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1616, x17, x15, 1616, x18)

inst_4013:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x3fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbfffff; op2val:0x1; valaddr_reg:x16; val_offset:1624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1624, x17, x15, 1624, x18)

inst_4014:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0xbfffff; valaddr_reg:x16; val_offset:1632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1632, x17, x15, 1632, x18)

inst_4015:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc00000; op2val:0x1; valaddr_reg:x16; val_offset:1640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1640, x17, x15, 1640, x18)

inst_4016:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0xc00000; valaddr_reg:x16; val_offset:1648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1648, x17, x15, 1648, x18)

inst_4017:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xffffff; op2val:0x1; valaddr_reg:x16; val_offset:1656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1656, x17, x15, 1656, x18)

inst_4018:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0xffffff; valaddr_reg:x16; val_offset:1664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1664, x17, x15, 1664, x18)

inst_4019:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x1; valaddr_reg:x16; val_offset:1672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1672, x17, x15, 1672, x18)

inst_4020:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x0; valaddr_reg:x16; val_offset:1680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1680, x17, x15, 1680, x18)

inst_4021:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf; op2val:0x1; valaddr_reg:x16; val_offset:1688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1688, x17, x15, 1688, x18)

inst_4022:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0xf; valaddr_reg:x16; val_offset:1696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1696, x17, x15, 1696, x18)

inst_4023:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7ffff0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ffff0; op2val:0x1; valaddr_reg:x16; val_offset:1704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1704, x17, x15, 1704, x18)

inst_4024:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x7ffff0; valaddr_reg:x16; val_offset:1712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1712, x17, x15, 1712, x18)

inst_4025:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1f; op2val:0x1; valaddr_reg:x16; val_offset:1720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1720, x17, x15, 1720, x18)

inst_4026:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x1f; valaddr_reg:x16; val_offset:1728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1728, x17, x15, 1728, x18)

inst_4027:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffe0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffe0; op2val:0x1; valaddr_reg:x16; val_offset:1736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1736, x17, x15, 1736, x18)

inst_4028:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x7fffe0; valaddr_reg:x16; val_offset:1744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1744, x17, x15, 1744, x18)

inst_4029:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f; op2val:0x1; valaddr_reg:x16; val_offset:1752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1752, x17, x15, 1752, x18)

inst_4030:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x3f; valaddr_reg:x16; val_offset:1760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1760, x17, x15, 1760, x18)

inst_4031:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffc0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffc0; op2val:0x1; valaddr_reg:x16; val_offset:1768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1768, x17, x15, 1768, x18)

inst_4032:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x7fffc0; valaddr_reg:x16; val_offset:1776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1776, x17, x15, 1776, x18)

inst_4033:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00007f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f; op2val:0x1; valaddr_reg:x16; val_offset:1784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1784, x17, x15, 1784, x18)

inst_4034:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x7f; valaddr_reg:x16; val_offset:1792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1792, x17, x15, 1792, x18)

inst_4035:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fff80 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fff80; op2val:0x1; valaddr_reg:x16; val_offset:1800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1800, x17, x15, 1800, x18)

inst_4036:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x7fff80; valaddr_reg:x16; val_offset:1808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1808, x17, x15, 1808, x18)

inst_4037:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0000ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff; op2val:0x1; valaddr_reg:x16; val_offset:1816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1816, x17, x15, 1816, x18)

inst_4038:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0xff; valaddr_reg:x16; val_offset:1824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1824, x17, x15, 1824, x18)

inst_4039:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fff00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fff00; op2val:0x1; valaddr_reg:x16; val_offset:1832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1832, x17, x15, 1832, x18)

inst_4040:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x7fff00; valaddr_reg:x16; val_offset:1840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1840, x17, x15, 1840, x18)

inst_4041:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0001ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1ff; op2val:0x1; valaddr_reg:x16; val_offset:1848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1848, x17, x15, 1848, x18)

inst_4042:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x1ff; valaddr_reg:x16; val_offset:1856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1856, x17, x15, 1856, x18)

inst_4043:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7ffe00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ffe00; op2val:0x1; valaddr_reg:x16; val_offset:1864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1864, x17, x15, 1864, x18)

inst_4044:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x7ffe00; valaddr_reg:x16; val_offset:1872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1872, x17, x15, 1872, x18)

inst_4045:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0003ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ff; op2val:0x1; valaddr_reg:x16; val_offset:1880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1880, x17, x15, 1880, x18)

inst_4046:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x3ff; valaddr_reg:x16; val_offset:1888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1888, x17, x15, 1888, x18)

inst_4047:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7ffc00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ffc00; op2val:0x1; valaddr_reg:x16; val_offset:1896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1896, x17, x15, 1896, x18)

inst_4048:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x7ffc00; valaddr_reg:x16; val_offset:1904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1904, x17, x15, 1904, x18)

inst_4049:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0007ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ff; op2val:0x1; valaddr_reg:x16; val_offset:1912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1912, x17, x15, 1912, x18)

inst_4050:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x7ff; valaddr_reg:x16; val_offset:1920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1920, x17, x15, 1920, x18)

inst_4051:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7ff800 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ff800; op2val:0x1; valaddr_reg:x16; val_offset:1928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1928, x17, x15, 1928, x18)

inst_4052:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x7ff800; valaddr_reg:x16; val_offset:1936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1936, x17, x15, 1936, x18)

inst_4053:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfff; op2val:0x1; valaddr_reg:x16; val_offset:1944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1944, x17, x15, 1944, x18)

inst_4054:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0xfff; valaddr_reg:x16; val_offset:1952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1952, x17, x15, 1952, x18)

inst_4055:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7ff000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ff000; op2val:0x1; valaddr_reg:x16; val_offset:1960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1960, x17, x15, 1960, x18)

inst_4056:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x7ff000; valaddr_reg:x16; val_offset:1968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1968, x17, x15, 1968, x18)

inst_4057:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x001fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1fff; op2val:0x1; valaddr_reg:x16; val_offset:1976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1976, x17, x15, 1976, x18)

inst_4058:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x1fff; valaddr_reg:x16; val_offset:1984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1984, x17, x15, 1984, x18)

inst_4059:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fe000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fe000; op2val:0x1; valaddr_reg:x16; val_offset:1992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1992, x17, x15, 1992, x18)

inst_4060:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x7fe000; valaddr_reg:x16; val_offset:2000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2000, x17, x15, 2000, x18)

inst_4061:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x003fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3fff; op2val:0x1; valaddr_reg:x16; val_offset:2008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2008, x17, x15, 2008, x18)

inst_4062:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x3fff; valaddr_reg:x16; val_offset:2016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2016, x17, x15, 2016, x18)

inst_4063:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fc000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fc000; op2val:0x1; valaddr_reg:x16; val_offset:2024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_17)

inst_4064:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x7fc000; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_4065:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x007fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fff; op2val:0x1; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 8, x17, x15, 8, x18)

inst_4066:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x7fff; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 16, x17, x15, 16, x18)

inst_4067:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7f8000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f8000; op2val:0x1; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 24, x17, x15, 24, x18)

inst_4068:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x7f8000; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 32, x17, x15, 32, x18)

inst_4069:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xffff; op2val:0x1; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 40, x17, x15, 40, x18)

inst_4070:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0xffff; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_4071:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7f0000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0000; op2val:0x1; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 56, x17, x15, 56, x18)

inst_4072:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x7f0000; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 64, x17, x15, 64, x18)

inst_4073:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x01ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1ffff; op2val:0x1; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 72, x17, x15, 72, x18)

inst_4074:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x1ffff; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_4075:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7e0000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e0000; op2val:0x1; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 88, x17, x15, 88, x18)

inst_4076:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x7e0000; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 96, x17, x15, 96, x18)

inst_4077:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x03ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ffff; op2val:0x1; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 104, x17, x15, 104, x18)

inst_4078:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x3ffff; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 112, x17, x15, 112, x18)

inst_4079:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7c0000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7c0000; op2val:0x1; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 120, x17, x15, 120, x18)

inst_4080:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x7c0000; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_4081:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x07ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ffff; op2val:0x1; valaddr_reg:x16; val_offset:136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 136, x17, x15, 136, x18)

inst_4082:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x7ffff; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 144, x17, x15, 144, x18)

inst_4083:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x780000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x780000; op2val:0x1; valaddr_reg:x16; val_offset:152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 152, x17, x15, 152, x18)

inst_4084:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x780000; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_4085:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfffff; op2val:0x1; valaddr_reg:x16; val_offset:168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 168, x17, x15, 168, x18)

inst_4086:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0xfffff; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 176, x17, x15, 176, x18)

inst_4087:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x700000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x700000; op2val:0x1; valaddr_reg:x16; val_offset:184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 184, x17, x15, 184, x18)

inst_4088:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x700000; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 192, x17, x15, 192, x18)

inst_4089:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x1fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1fffff; op2val:0x1; valaddr_reg:x16; val_offset:200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 200, x17, x15, 200, x18)

inst_4090:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x1fffff; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_4091:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x600000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x600000; op2val:0x1; valaddr_reg:x16; val_offset:216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 216, x17, x15, 216, x18)

inst_4092:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x600000; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 224, x17, x15, 224, x18)

inst_4093:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x3fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3fffff; op2val:0x1; valaddr_reg:x16; val_offset:232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 232, x17, x15, 232, x18)

inst_4094:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x3fffff; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_4095:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x400000; op2val:0x1; valaddr_reg:x16; val_offset:248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 248, x17, x15, 248, x18)

inst_4096:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x400000; valaddr_reg:x16; val_offset:256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 256, x17, x15, 256, x18)

inst_4097:
// fs1 == 0 and fe1 == 0x46 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x23000001; op2val:0x1; valaddr_reg:x16; val_offset:264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 264, x17, x15, 264, x18)

inst_4098:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x46 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x23000001; valaddr_reg:x16; val_offset:272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 272, x17, x15, 272, x18)

inst_4099:
// fs1 == 0 and fe1 == 0x46 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x23000000; op2val:0x1; valaddr_reg:x16; val_offset:280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 280, x17, x15, 280, x18)

inst_4100:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x46 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x23000000; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_4101:
// fs1 == 0 and fe1 == 0x46 and fm1 == 0x7ffffe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x237ffffe; op2val:0x1; valaddr_reg:x16; val_offset:296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 296, x17, x15, 296, x18)

inst_4102:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x46 and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x237ffffe; valaddr_reg:x16; val_offset:304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 304, x17, x15, 304, x18)

inst_4103:
// fs1 == 0 and fe1 == 0x46 and fm1 == 0x000003 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x23000003; op2val:0x1; valaddr_reg:x16; val_offset:312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 312, x17, x15, 312, x18)

inst_4104:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x46 and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x23000003; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_4105:
// fs1 == 0 and fe1 == 0x46 and fm1 == 0x7ffffc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x237ffffc; op2val:0x1; valaddr_reg:x16; val_offset:328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 328, x17, x15, 328, x18)

inst_4106:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x46 and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x237ffffc; valaddr_reg:x16; val_offset:336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 336, x17, x15, 336, x18)

inst_4107:
// fs1 == 0 and fe1 == 0x46 and fm1 == 0x000007 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x23000007; op2val:0x1; valaddr_reg:x16; val_offset:344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 344, x17, x15, 344, x18)

inst_4108:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x46 and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x23000007; valaddr_reg:x16; val_offset:352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 352, x17, x15, 352, x18)

inst_4109:
// fs1 == 0 and fe1 == 0x46 and fm1 == 0x7ffff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x237ffff8; op2val:0x1; valaddr_reg:x16; val_offset:360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 360, x17, x15, 360, x18)

inst_4110:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x46 and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x237ffff8; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_4111:
// fs1 == 0 and fe1 == 0x46 and fm1 == 0x00000f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x2300000f; op2val:0x1; valaddr_reg:x16; val_offset:376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 376, x17, x15, 376, x18)

inst_4112:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x46 and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x2300000f; valaddr_reg:x16; val_offset:384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 384, x17, x15, 384, x18)

inst_4113:
// fs1 == 0 and fe1 == 0x46 and fm1 == 0x7ffff0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x237ffff0; op2val:0x1; valaddr_reg:x16; val_offset:392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 392, x17, x15, 392, x18)

inst_4114:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x46 and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x237ffff0; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_4115:
// fs1 == 0 and fe1 == 0x46 and fm1 == 0x00001f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x2300001f; op2val:0x1; valaddr_reg:x16; val_offset:408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 408, x17, x15, 408, x18)

inst_4116:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x46 and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x2300001f; valaddr_reg:x16; val_offset:416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 416, x17, x15, 416, x18)

inst_4117:
// fs1 == 0 and fe1 == 0x46 and fm1 == 0x7fffe0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x237fffe0; op2val:0x1; valaddr_reg:x16; val_offset:424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 424, x17, x15, 424, x18)

inst_4118:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x46 and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x237fffe0; valaddr_reg:x16; val_offset:432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 432, x17, x15, 432, x18)

inst_4119:
// fs1 == 0 and fe1 == 0x46 and fm1 == 0x00003f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x2300003f; op2val:0x1; valaddr_reg:x16; val_offset:440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 440, x17, x15, 440, x18)

inst_4120:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x46 and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x2300003f; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_4121:
// fs1 == 0 and fe1 == 0x46 and fm1 == 0x7fffc0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x237fffc0; op2val:0x1; valaddr_reg:x16; val_offset:456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 456, x17, x15, 456, x18)

inst_4122:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x46 and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x237fffc0; valaddr_reg:x16; val_offset:464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 464, x17, x15, 464, x18)

inst_4123:
// fs1 == 0 and fe1 == 0x46 and fm1 == 0x00007f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x2300007f; op2val:0x1; valaddr_reg:x16; val_offset:472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 472, x17, x15, 472, x18)

inst_4124:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x46 and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x2300007f; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_4125:
// fs1 == 0 and fe1 == 0x46 and fm1 == 0x7fff80 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x237fff80; op2val:0x1; valaddr_reg:x16; val_offset:488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 488, x17, x15, 488, x18)

inst_4126:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x46 and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x237fff80; valaddr_reg:x16; val_offset:496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 496, x17, x15, 496, x18)

inst_4127:
// fs1 == 0 and fe1 == 0x46 and fm1 == 0x0000ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x230000ff; op2val:0x1; valaddr_reg:x16; val_offset:504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 504, x17, x15, 504, x18)

inst_4128:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x46 and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x230000ff; valaddr_reg:x16; val_offset:512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 512, x17, x15, 512, x18)

inst_4129:
// fs1 == 0 and fe1 == 0x46 and fm1 == 0x7fff00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x237fff00; op2val:0x1; valaddr_reg:x16; val_offset:520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 520, x17, x15, 520, x18)

inst_4130:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x46 and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x237fff00; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_4131:
// fs1 == 0 and fe1 == 0x46 and fm1 == 0x0001ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x230001ff; op2val:0x1; valaddr_reg:x16; val_offset:536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 536, x17, x15, 536, x18)

inst_4132:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x46 and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x230001ff; valaddr_reg:x16; val_offset:544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 544, x17, x15, 544, x18)

inst_4133:
// fs1 == 0 and fe1 == 0x46 and fm1 == 0x7ffe00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x237ffe00; op2val:0x1; valaddr_reg:x16; val_offset:552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 552, x17, x15, 552, x18)

inst_4134:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x46 and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x237ffe00; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_4135:
// fs1 == 0 and fe1 == 0x46 and fm1 == 0x0003ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x230003ff; op2val:0x1; valaddr_reg:x16; val_offset:568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 568, x17, x15, 568, x18)

inst_4136:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x46 and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x230003ff; valaddr_reg:x16; val_offset:576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 576, x17, x15, 576, x18)

inst_4137:
// fs1 == 0 and fe1 == 0x46 and fm1 == 0x7ffc00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x237ffc00; op2val:0x1; valaddr_reg:x16; val_offset:584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 584, x17, x15, 584, x18)

inst_4138:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x46 and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x237ffc00; valaddr_reg:x16; val_offset:592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 592, x17, x15, 592, x18)

inst_4139:
// fs1 == 0 and fe1 == 0x46 and fm1 == 0x0007ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x230007ff; op2val:0x1; valaddr_reg:x16; val_offset:600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 600, x17, x15, 600, x18)

inst_4140:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x46 and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x230007ff; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 608, x17, x15, 608, x18)

inst_4141:
// fs1 == 0 and fe1 == 0x46 and fm1 == 0x7ff800 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x237ff800; op2val:0x1; valaddr_reg:x16; val_offset:616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 616, x17, x15, 616, x18)

inst_4142:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x46 and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x237ff800; valaddr_reg:x16; val_offset:624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 624, x17, x15, 624, x18)

inst_4143:
// fs1 == 0 and fe1 == 0x46 and fm1 == 0x000fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x23000fff; op2val:0x1; valaddr_reg:x16; val_offset:632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 632, x17, x15, 632, x18)

inst_4144:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x46 and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x23000fff; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_4145:
// fs1 == 0 and fe1 == 0x46 and fm1 == 0x7ff000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x237ff000; op2val:0x1; valaddr_reg:x16; val_offset:648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 648, x17, x15, 648, x18)

inst_4146:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x46 and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x237ff000; valaddr_reg:x16; val_offset:656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 656, x17, x15, 656, x18)

inst_4147:
// fs1 == 0 and fe1 == 0x46 and fm1 == 0x001fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x23001fff; op2val:0x1; valaddr_reg:x16; val_offset:664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 664, x17, x15, 664, x18)

inst_4148:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x46 and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x23001fff; valaddr_reg:x16; val_offset:672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 672, x17, x15, 672, x18)

inst_4149:
// fs1 == 0 and fe1 == 0x46 and fm1 == 0x7fe000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x237fe000; op2val:0x1; valaddr_reg:x16; val_offset:680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 680, x17, x15, 680, x18)

inst_4150:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x46 and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x237fe000; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 688, x17, x15, 688, x18)

inst_4151:
// fs1 == 0 and fe1 == 0x46 and fm1 == 0x003fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x23003fff; op2val:0x1; valaddr_reg:x16; val_offset:696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 696, x17, x15, 696, x18)

inst_4152:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x46 and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x23003fff; valaddr_reg:x16; val_offset:704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 704, x17, x15, 704, x18)

inst_4153:
// fs1 == 0 and fe1 == 0x46 and fm1 == 0x7fc000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x237fc000; op2val:0x1; valaddr_reg:x16; val_offset:712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 712, x17, x15, 712, x18)

inst_4154:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x46 and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x237fc000; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_4155:
// fs1 == 0 and fe1 == 0x46 and fm1 == 0x007fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x23007fff; op2val:0x1; valaddr_reg:x16; val_offset:728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 728, x17, x15, 728, x18)

inst_4156:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x46 and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x23007fff; valaddr_reg:x16; val_offset:736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 736, x17, x15, 736, x18)

inst_4157:
// fs1 == 0 and fe1 == 0x46 and fm1 == 0x7f8000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x237f8000; op2val:0x1; valaddr_reg:x16; val_offset:744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 744, x17, x15, 744, x18)

inst_4158:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x46 and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x237f8000; valaddr_reg:x16; val_offset:752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 752, x17, x15, 752, x18)

inst_4159:
// fs1 == 0 and fe1 == 0x46 and fm1 == 0x00ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x2300ffff; op2val:0x1; valaddr_reg:x16; val_offset:760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 760, x17, x15, 760, x18)

inst_4160:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x46 and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x2300ffff; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 768, x17, x15, 768, x18)

inst_4161:
// fs1 == 0 and fe1 == 0x46 and fm1 == 0x7f0000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x237f0000; op2val:0x1; valaddr_reg:x16; val_offset:776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 776, x17, x15, 776, x18)

inst_4162:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x46 and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x237f0000; valaddr_reg:x16; val_offset:784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 784, x17, x15, 784, x18)

inst_4163:
// fs1 == 0 and fe1 == 0x46 and fm1 == 0x01ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x2301ffff; op2val:0x1; valaddr_reg:x16; val_offset:792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 792, x17, x15, 792, x18)

inst_4164:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x46 and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x2301ffff; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_4165:
// fs1 == 0 and fe1 == 0x46 and fm1 == 0x7e0000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x237e0000; op2val:0x1; valaddr_reg:x16; val_offset:808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 808, x17, x15, 808, x18)

inst_4166:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x46 and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x237e0000; valaddr_reg:x16; val_offset:816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 816, x17, x15, 816, x18)

inst_4167:
// fs1 == 0 and fe1 == 0x46 and fm1 == 0x03ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x2303ffff; op2val:0x1; valaddr_reg:x16; val_offset:824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 824, x17, x15, 824, x18)

inst_4168:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x46 and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x2303ffff; valaddr_reg:x16; val_offset:832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 832, x17, x15, 832, x18)

inst_4169:
// fs1 == 0 and fe1 == 0x46 and fm1 == 0x7c0000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x237c0000; op2val:0x1; valaddr_reg:x16; val_offset:840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 840, x17, x15, 840, x18)

inst_4170:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x46 and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x237c0000; valaddr_reg:x16; val_offset:848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 848, x17, x15, 848, x18)

inst_4171:
// fs1 == 0 and fe1 == 0x46 and fm1 == 0x07ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x2307ffff; op2val:0x1; valaddr_reg:x16; val_offset:856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 856, x17, x15, 856, x18)

inst_4172:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x46 and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x2307ffff; valaddr_reg:x16; val_offset:864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 864, x17, x15, 864, x18)

inst_4173:
// fs1 == 0 and fe1 == 0x46 and fm1 == 0x780000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x23780000; op2val:0x1; valaddr_reg:x16; val_offset:872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 872, x17, x15, 872, x18)

inst_4174:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x46 and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x23780000; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 880, x17, x15, 880, x18)

inst_4175:
// fs1 == 0 and fe1 == 0x46 and fm1 == 0x0fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x230fffff; op2val:0x1; valaddr_reg:x16; val_offset:888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 888, x17, x15, 888, x18)

inst_4176:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x46 and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x230fffff; valaddr_reg:x16; val_offset:896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 896, x17, x15, 896, x18)

inst_4177:
// fs1 == 0 and fe1 == 0x46 and fm1 == 0x700000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x23700000; op2val:0x1; valaddr_reg:x16; val_offset:904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 904, x17, x15, 904, x18)

inst_4178:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x46 and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x23700000; valaddr_reg:x16; val_offset:912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 912, x17, x15, 912, x18)

inst_4179:
// fs1 == 0 and fe1 == 0x46 and fm1 == 0x1fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x231fffff; op2val:0x1; valaddr_reg:x16; val_offset:920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 920, x17, x15, 920, x18)

inst_4180:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x46 and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x231fffff; valaddr_reg:x16; val_offset:928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 928, x17, x15, 928, x18)

inst_4181:
// fs1 == 0 and fe1 == 0x46 and fm1 == 0x600000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x23600000; op2val:0x1; valaddr_reg:x16; val_offset:936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 936, x17, x15, 936, x18)

inst_4182:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x46 and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x23600000; valaddr_reg:x16; val_offset:944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 944, x17, x15, 944, x18)

inst_4183:
// fs1 == 0 and fe1 == 0x46 and fm1 == 0x3fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x233fffff; op2val:0x1; valaddr_reg:x16; val_offset:952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 952, x17, x15, 952, x18)

inst_4184:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x46 and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x233fffff; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 960, x17, x15, 960, x18)

inst_4185:
// fs1 == 0 and fe1 == 0x46 and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x23400000; op2val:0x1; valaddr_reg:x16; val_offset:968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 968, x17, x15, 968, x18)

inst_4186:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x46 and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x23400000; valaddr_reg:x16; val_offset:976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 976, x17, x15, 976, x18)

inst_4187:
// fs1 == 0 and fe1 == 0x46 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x237fffff; op2val:0x1; valaddr_reg:x16; val_offset:984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 984, x17, x15, 984, x18)

inst_4188:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x46 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x237fffff; valaddr_reg:x16; val_offset:992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 992, x17, x15, 992, x18)

inst_4189:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x4ccccc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbfcccccc; op2val:0xbf800000; valaddr_reg:x16; val_offset:1000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1000, x17, x15, 1000, x18)

inst_4190:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4ccccc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbfcccccc; valaddr_reg:x16; val_offset:1008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1008, x17, x15, 1008, x18)

inst_4191:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x333333 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbfb33333; op2val:0xbf800000; valaddr_reg:x16; val_offset:1016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1016, x17, x15, 1016, x18)

inst_4192:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x333333 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbfb33333; valaddr_reg:x16; val_offset:1024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1024, x17, x15, 1024, x18)

inst_4193:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x5b6db6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbfdb6db6; op2val:0xbf800000; valaddr_reg:x16; val_offset:1032; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1032, x17, x15, 1032, x18)

inst_4194:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b6db6 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbfdb6db6; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1040, x17, x15, 1040, x18)

inst_4195:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x249249 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbfa49249; op2val:0xbf800000; valaddr_reg:x16; val_offset:1048; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1048, x17, x15, 1048, x18)

inst_4196:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x249249 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbfa49249; valaddr_reg:x16; val_offset:1056; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1056, x17, x15, 1056, x18)

inst_4197:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x444444 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbfc44444; op2val:0xbf800000; valaddr_reg:x16; val_offset:1064; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1064, x17, x15, 1064, x18)

inst_4198:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x444444 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbfc44444; valaddr_reg:x16; val_offset:1072; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1072, x17, x15, 1072, x18)

inst_4199:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x3bbbbb and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbfbbbbbb; op2val:0xbf800000; valaddr_reg:x16; val_offset:1080; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1080, x17, x15, 1080, x18)

inst_4200:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3bbbbb and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbfbbbbbb; valaddr_reg:x16; val_offset:1088; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1088, x17, x15, 1088, x18)

inst_4201:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x666666 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbfe66666; op2val:0xbf800000; valaddr_reg:x16; val_offset:1096; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1096, x17, x15, 1096, x18)

inst_4202:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x666666 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbfe66666; valaddr_reg:x16; val_offset:1104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1104, x17, x15, 1104, x18)

inst_4203:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x199999 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf999999; op2val:0xbf800000; valaddr_reg:x16; val_offset:1112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1112, x17, x15, 1112, x18)

inst_4204:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x199999 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf999999; valaddr_reg:x16; val_offset:1120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1120, x17, x15, 1120, x18)

inst_4205:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x6db6db and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbfedb6db; op2val:0xbf800000; valaddr_reg:x16; val_offset:1128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1128, x17, x15, 1128, x18)

inst_4206:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6db6db and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbfedb6db; valaddr_reg:x16; val_offset:1136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1136, x17, x15, 1136, x18)

inst_4207:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x36db6d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbfb6db6d; op2val:0xbf800000; valaddr_reg:x16; val_offset:1144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1144, x17, x15, 1144, x18)

inst_4208:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36db6d and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbfb6db6d; valaddr_reg:x16; val_offset:1152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1152, x17, x15, 1152, x18)

inst_4209:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800001; op2val:0xbf800000; valaddr_reg:x16; val_offset:1160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1160, x17, x15, 1160, x18)

inst_4210:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf800001; valaddr_reg:x16; val_offset:1168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1168, x17, x15, 1168, x18)

inst_4211:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x7ffffe and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbffffffe; op2val:0xbf800000; valaddr_reg:x16; val_offset:1176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1176, x17, x15, 1176, x18)

inst_4212:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbffffffe; valaddr_reg:x16; val_offset:1184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1184, x17, x15, 1184, x18)

inst_4213:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000003 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800003; op2val:0xbf800000; valaddr_reg:x16; val_offset:1192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1192, x17, x15, 1192, x18)

inst_4214:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf800003; valaddr_reg:x16; val_offset:1200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1200, x17, x15, 1200, x18)

inst_4215:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x7ffffc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbffffffc; op2val:0xbf800000; valaddr_reg:x16; val_offset:1208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1208, x17, x15, 1208, x18)

inst_4216:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbffffffc; valaddr_reg:x16; val_offset:1216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1216, x17, x15, 1216, x18)

inst_4217:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000007 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800007; op2val:0xbf800000; valaddr_reg:x16; val_offset:1224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1224, x17, x15, 1224, x18)

inst_4218:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf800007; valaddr_reg:x16; val_offset:1232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1232, x17, x15, 1232, x18)

inst_4219:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x7ffff8 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbffffff8; op2val:0xbf800000; valaddr_reg:x16; val_offset:1240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1240, x17, x15, 1240, x18)

inst_4220:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbffffff8; valaddr_reg:x16; val_offset:1248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1248, x17, x15, 1248, x18)

inst_4221:
// fs1 == 1 and fe1 == 0x82 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc1000001; op2val:0xbf800000; valaddr_reg:x16; val_offset:1256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1256, x17, x15, 1256, x18)

inst_4222:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc1000001; valaddr_reg:x16; val_offset:1264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1264, x17, x15, 1264, x18)

inst_4223:
// fs1 == 1 and fe1 == 0x82 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc1000000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1272, x17, x15, 1272, x18)

inst_4224:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc1000000; valaddr_reg:x16; val_offset:1280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1280, x17, x15, 1280, x18)

inst_4225:
// fs1 == 1 and fe1 == 0x82 and fm1 == 0x7ffffe and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc17ffffe; op2val:0xbf800000; valaddr_reg:x16; val_offset:1288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1288, x17, x15, 1288, x18)

inst_4226:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc17ffffe; valaddr_reg:x16; val_offset:1296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1296, x17, x15, 1296, x18)

inst_4227:
// fs1 == 1 and fe1 == 0x82 and fm1 == 0x000003 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc1000003; op2val:0xbf800000; valaddr_reg:x16; val_offset:1304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1304, x17, x15, 1304, x18)

inst_4228:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc1000003; valaddr_reg:x16; val_offset:1312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1312, x17, x15, 1312, x18)

inst_4229:
// fs1 == 1 and fe1 == 0x82 and fm1 == 0x7ffffc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc17ffffc; op2val:0xbf800000; valaddr_reg:x16; val_offset:1320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1320, x17, x15, 1320, x18)

inst_4230:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc17ffffc; valaddr_reg:x16; val_offset:1328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1328, x17, x15, 1328, x18)

inst_4231:
// fs1 == 1 and fe1 == 0x82 and fm1 == 0x000007 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc1000007; op2val:0xbf800000; valaddr_reg:x16; val_offset:1336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1336, x17, x15, 1336, x18)

inst_4232:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc1000007; valaddr_reg:x16; val_offset:1344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1344, x17, x15, 1344, x18)

inst_4233:
// fs1 == 1 and fe1 == 0x82 and fm1 == 0x7ffff8 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc17ffff8; op2val:0xbf800000; valaddr_reg:x16; val_offset:1352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1352, x17, x15, 1352, x18)

inst_4234:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc17ffff8; valaddr_reg:x16; val_offset:1360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1360, x17, x15, 1360, x18)

inst_4235:
// fs1 == 1 and fe1 == 0x82 and fm1 == 0x00000f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc100000f; op2val:0xbf800000; valaddr_reg:x16; val_offset:1368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1368, x17, x15, 1368, x18)

inst_4236:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc100000f; valaddr_reg:x16; val_offset:1376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1376, x17, x15, 1376, x18)

inst_4237:
// fs1 == 1 and fe1 == 0x82 and fm1 == 0x7ffff0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc17ffff0; op2val:0xbf800000; valaddr_reg:x16; val_offset:1384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1384, x17, x15, 1384, x18)

inst_4238:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc17ffff0; valaddr_reg:x16; val_offset:1392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1392, x17, x15, 1392, x18)

inst_4239:
// fs1 == 1 and fe1 == 0x82 and fm1 == 0x00001f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc100001f; op2val:0xbf800000; valaddr_reg:x16; val_offset:1400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1400, x17, x15, 1400, x18)

inst_4240:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc100001f; valaddr_reg:x16; val_offset:1408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1408, x17, x15, 1408, x18)

inst_4241:
// fs1 == 1 and fe1 == 0x82 and fm1 == 0x7fffe0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc17fffe0; op2val:0xbf800000; valaddr_reg:x16; val_offset:1416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1416, x17, x15, 1416, x18)

inst_4242:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc17fffe0; valaddr_reg:x16; val_offset:1424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1424, x17, x15, 1424, x18)

inst_4243:
// fs1 == 1 and fe1 == 0x82 and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc100003f; op2val:0xbf800000; valaddr_reg:x16; val_offset:1432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1432, x17, x15, 1432, x18)

inst_4244:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc100003f; valaddr_reg:x16; val_offset:1440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1440, x17, x15, 1440, x18)

inst_4245:
// fs1 == 1 and fe1 == 0x82 and fm1 == 0x7fffc0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc17fffc0; op2val:0xbf800000; valaddr_reg:x16; val_offset:1448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1448, x17, x15, 1448, x18)

inst_4246:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc17fffc0; valaddr_reg:x16; val_offset:1456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1456, x17, x15, 1456, x18)

inst_4247:
// fs1 == 1 and fe1 == 0x82 and fm1 == 0x00007f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc100007f; op2val:0xbf800000; valaddr_reg:x16; val_offset:1464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1464, x17, x15, 1464, x18)

inst_4248:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc100007f; valaddr_reg:x16; val_offset:1472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1472, x17, x15, 1472, x18)

inst_4249:
// fs1 == 1 and fe1 == 0x82 and fm1 == 0x7fff80 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc17fff80; op2val:0xbf800000; valaddr_reg:x16; val_offset:1480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1480, x17, x15, 1480, x18)

inst_4250:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc17fff80; valaddr_reg:x16; val_offset:1488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1488, x17, x15, 1488, x18)

inst_4251:
// fs1 == 1 and fe1 == 0x82 and fm1 == 0x0000ff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc10000ff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1496, x17, x15, 1496, x18)

inst_4252:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc10000ff; valaddr_reg:x16; val_offset:1504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1504, x17, x15, 1504, x18)

inst_4253:
// fs1 == 1 and fe1 == 0x82 and fm1 == 0x7fff00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc17fff00; op2val:0xbf800000; valaddr_reg:x16; val_offset:1512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1512, x17, x15, 1512, x18)

inst_4254:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc17fff00; valaddr_reg:x16; val_offset:1520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1520, x17, x15, 1520, x18)

inst_4255:
// fs1 == 1 and fe1 == 0x82 and fm1 == 0x0001ff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc10001ff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1528, x17, x15, 1528, x18)

inst_4256:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc10001ff; valaddr_reg:x16; val_offset:1536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1536, x17, x15, 1536, x18)

inst_4257:
// fs1 == 1 and fe1 == 0x82 and fm1 == 0x7ffe00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc17ffe00; op2val:0xbf800000; valaddr_reg:x16; val_offset:1544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1544, x17, x15, 1544, x18)

inst_4258:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc17ffe00; valaddr_reg:x16; val_offset:1552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1552, x17, x15, 1552, x18)

inst_4259:
// fs1 == 1 and fe1 == 0x82 and fm1 == 0x0003ff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc10003ff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1560, x17, x15, 1560, x18)

inst_4260:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc10003ff; valaddr_reg:x16; val_offset:1568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1568, x17, x15, 1568, x18)

inst_4261:
// fs1 == 1 and fe1 == 0x82 and fm1 == 0x7ffc00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc17ffc00; op2val:0xbf800000; valaddr_reg:x16; val_offset:1576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1576, x17, x15, 1576, x18)

inst_4262:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc17ffc00; valaddr_reg:x16; val_offset:1584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1584, x17, x15, 1584, x18)

inst_4263:
// fs1 == 1 and fe1 == 0x82 and fm1 == 0x0007ff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc10007ff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1592, x17, x15, 1592, x18)

inst_4264:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc10007ff; valaddr_reg:x16; val_offset:1600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1600, x17, x15, 1600, x18)

inst_4265:
// fs1 == 1 and fe1 == 0x82 and fm1 == 0x7ff800 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc17ff800; op2val:0xbf800000; valaddr_reg:x16; val_offset:1608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1608, x17, x15, 1608, x18)

inst_4266:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc17ff800; valaddr_reg:x16; val_offset:1616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1616, x17, x15, 1616, x18)

inst_4267:
// fs1 == 1 and fe1 == 0x82 and fm1 == 0x000fff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc1000fff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1624, x17, x15, 1624, x18)

inst_4268:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc1000fff; valaddr_reg:x16; val_offset:1632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1632, x17, x15, 1632, x18)

inst_4269:
// fs1 == 1 and fe1 == 0x82 and fm1 == 0x7ff000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc17ff000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1640, x17, x15, 1640, x18)

inst_4270:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc17ff000; valaddr_reg:x16; val_offset:1648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1648, x17, x15, 1648, x18)

inst_4271:
// fs1 == 1 and fe1 == 0x82 and fm1 == 0x001fff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc1001fff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1656, x17, x15, 1656, x18)

inst_4272:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc1001fff; valaddr_reg:x16; val_offset:1664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1664, x17, x15, 1664, x18)

inst_4273:
// fs1 == 1 and fe1 == 0x82 and fm1 == 0x7fe000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc17fe000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1672, x17, x15, 1672, x18)

inst_4274:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc17fe000; valaddr_reg:x16; val_offset:1680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1680, x17, x15, 1680, x18)

inst_4275:
// fs1 == 1 and fe1 == 0x82 and fm1 == 0x003fff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc1003fff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1688, x17, x15, 1688, x18)

inst_4276:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc1003fff; valaddr_reg:x16; val_offset:1696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1696, x17, x15, 1696, x18)

inst_4277:
// fs1 == 1 and fe1 == 0x82 and fm1 == 0x7fc000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc17fc000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1704, x17, x15, 1704, x18)

inst_4278:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc17fc000; valaddr_reg:x16; val_offset:1712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1712, x17, x15, 1712, x18)

inst_4279:
// fs1 == 1 and fe1 == 0x82 and fm1 == 0x007fff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc1007fff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1720, x17, x15, 1720, x18)

inst_4280:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc1007fff; valaddr_reg:x16; val_offset:1728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1728, x17, x15, 1728, x18)

inst_4281:
// fs1 == 1 and fe1 == 0x82 and fm1 == 0x7f8000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc17f8000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1736, x17, x15, 1736, x18)

inst_4282:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc17f8000; valaddr_reg:x16; val_offset:1744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1744, x17, x15, 1744, x18)

inst_4283:
// fs1 == 1 and fe1 == 0x82 and fm1 == 0x00ffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc100ffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1752, x17, x15, 1752, x18)

inst_4284:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc100ffff; valaddr_reg:x16; val_offset:1760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1760, x17, x15, 1760, x18)

inst_4285:
// fs1 == 1 and fe1 == 0x82 and fm1 == 0x7f0000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc17f0000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1768, x17, x15, 1768, x18)

inst_4286:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc17f0000; valaddr_reg:x16; val_offset:1776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1776, x17, x15, 1776, x18)

inst_4287:
// fs1 == 1 and fe1 == 0x82 and fm1 == 0x01ffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc101ffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1784, x17, x15, 1784, x18)

inst_4288:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc101ffff; valaddr_reg:x16; val_offset:1792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1792, x17, x15, 1792, x18)

inst_4289:
// fs1 == 1 and fe1 == 0x82 and fm1 == 0x7e0000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc17e0000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1800, x17, x15, 1800, x18)

inst_4290:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc17e0000; valaddr_reg:x16; val_offset:1808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1808, x17, x15, 1808, x18)

inst_4291:
// fs1 == 1 and fe1 == 0x82 and fm1 == 0x03ffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc103ffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1816, x17, x15, 1816, x18)

inst_4292:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc103ffff; valaddr_reg:x16; val_offset:1824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1824, x17, x15, 1824, x18)

inst_4293:
// fs1 == 1 and fe1 == 0x82 and fm1 == 0x7c0000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc17c0000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1832, x17, x15, 1832, x18)

inst_4294:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc17c0000; valaddr_reg:x16; val_offset:1840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1840, x17, x15, 1840, x18)

inst_4295:
// fs1 == 1 and fe1 == 0x82 and fm1 == 0x07ffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc107ffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1848, x17, x15, 1848, x18)

inst_4296:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc107ffff; valaddr_reg:x16; val_offset:1856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1856, x17, x15, 1856, x18)

inst_4297:
// fs1 == 1 and fe1 == 0x82 and fm1 == 0x780000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc1780000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1864, x17, x15, 1864, x18)

inst_4298:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc1780000; valaddr_reg:x16; val_offset:1872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1872, x17, x15, 1872, x18)

inst_4299:
// fs1 == 1 and fe1 == 0x82 and fm1 == 0x0fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc10fffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1880, x17, x15, 1880, x18)

inst_4300:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc10fffff; valaddr_reg:x16; val_offset:1888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1888, x17, x15, 1888, x18)

inst_4301:
// fs1 == 1 and fe1 == 0x82 and fm1 == 0x700000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc1700000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1896, x17, x15, 1896, x18)

inst_4302:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc1700000; valaddr_reg:x16; val_offset:1904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1904, x17, x15, 1904, x18)

inst_4303:
// fs1 == 1 and fe1 == 0x82 and fm1 == 0x1fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc11fffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1912, x17, x15, 1912, x18)

inst_4304:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc11fffff; valaddr_reg:x16; val_offset:1920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1920, x17, x15, 1920, x18)

inst_4305:
// fs1 == 1 and fe1 == 0x82 and fm1 == 0x600000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc1600000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1928, x17, x15, 1928, x18)

inst_4306:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc1600000; valaddr_reg:x16; val_offset:1936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1936, x17, x15, 1936, x18)

inst_4307:
// fs1 == 1 and fe1 == 0x82 and fm1 == 0x3fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc13fffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1944, x17, x15, 1944, x18)

inst_4308:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc13fffff; valaddr_reg:x16; val_offset:1952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1952, x17, x15, 1952, x18)

inst_4309:
// fs1 == 1 and fe1 == 0x82 and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc1400000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1960, x17, x15, 1960, x18)

inst_4310:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc1400000; valaddr_reg:x16; val_offset:1968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1968, x17, x15, 1968, x18)

inst_4311:
// fs1 == 1 and fe1 == 0x82 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc17fffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1976, x17, x15, 1976, x18)

inst_4312:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc17fffff; valaddr_reg:x16; val_offset:1984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1984, x17, x15, 1984, x18)

inst_4313:
// fs1 == 1 and fe1 == 0x81 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0800001; op2val:0xbf800000; valaddr_reg:x16; val_offset:1992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1992, x17, x15, 1992, x18)

inst_4314:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc0800001; valaddr_reg:x16; val_offset:2000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2000, x17, x15, 2000, x18)

inst_4315:
// fs1 == 1 and fe1 == 0x81 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0800000; op2val:0xbf800000; valaddr_reg:x16; val_offset:2008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2008, x17, x15, 2008, x18)

inst_4316:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc0800000; valaddr_reg:x16; val_offset:2016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2016, x17, x15, 2016, x18)

inst_4317:
// fs1 == 1 and fe1 == 0x81 and fm1 == 0x7ffffe and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0fffffe; op2val:0xbf800000; valaddr_reg:x16; val_offset:2024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_18)

inst_4318:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc0fffffe; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_4319:
// fs1 == 1 and fe1 == 0x81 and fm1 == 0x000003 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0800003; op2val:0xbf800000; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 8, x17, x15, 8, x18)

inst_4320:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc0800003; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 16, x17, x15, 16, x18)

inst_4321:
// fs1 == 1 and fe1 == 0x81 and fm1 == 0x7ffffc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0fffffc; op2val:0xbf800000; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 24, x17, x15, 24, x18)

inst_4322:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc0fffffc; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 32, x17, x15, 32, x18)

inst_4323:
// fs1 == 1 and fe1 == 0x81 and fm1 == 0x000007 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0800007; op2val:0xbf800000; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 40, x17, x15, 40, x18)

inst_4324:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc0800007; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_4325:
// fs1 == 1 and fe1 == 0x81 and fm1 == 0x7ffff8 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0fffff8; op2val:0xbf800000; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 56, x17, x15, 56, x18)

inst_4326:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc0fffff8; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 64, x17, x15, 64, x18)

inst_4327:
// fs1 == 1 and fe1 == 0x81 and fm1 == 0x00000f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc080000f; op2val:0xbf800000; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 72, x17, x15, 72, x18)

inst_4328:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc080000f; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_4329:
// fs1 == 1 and fe1 == 0x81 and fm1 == 0x7ffff0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0fffff0; op2val:0xbf800000; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 88, x17, x15, 88, x18)

inst_4330:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc0fffff0; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 96, x17, x15, 96, x18)

inst_4331:
// fs1 == 1 and fe1 == 0x81 and fm1 == 0x00001f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc080001f; op2val:0xbf800000; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 104, x17, x15, 104, x18)

inst_4332:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc080001f; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 112, x17, x15, 112, x18)

inst_4333:
// fs1 == 1 and fe1 == 0x81 and fm1 == 0x7fffe0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0ffffe0; op2val:0xbf800000; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 120, x17, x15, 120, x18)

inst_4334:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc0ffffe0; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_4335:
// fs1 == 1 and fe1 == 0x81 and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc080003f; op2val:0xbf800000; valaddr_reg:x16; val_offset:136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 136, x17, x15, 136, x18)

inst_4336:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc080003f; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 144, x17, x15, 144, x18)

inst_4337:
// fs1 == 1 and fe1 == 0x81 and fm1 == 0x7fffc0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0ffffc0; op2val:0xbf800000; valaddr_reg:x16; val_offset:152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 152, x17, x15, 152, x18)

inst_4338:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc0ffffc0; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_4339:
// fs1 == 1 and fe1 == 0x81 and fm1 == 0x00007f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc080007f; op2val:0xbf800000; valaddr_reg:x16; val_offset:168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 168, x17, x15, 168, x18)

inst_4340:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc080007f; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 176, x17, x15, 176, x18)

inst_4341:
// fs1 == 1 and fe1 == 0x81 and fm1 == 0x7fff80 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0ffff80; op2val:0xbf800000; valaddr_reg:x16; val_offset:184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 184, x17, x15, 184, x18)

inst_4342:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc0ffff80; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 192, x17, x15, 192, x18)

inst_4343:
// fs1 == 1 and fe1 == 0x81 and fm1 == 0x0000ff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc08000ff; op2val:0xbf800000; valaddr_reg:x16; val_offset:200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 200, x17, x15, 200, x18)

inst_4344:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc08000ff; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_4345:
// fs1 == 1 and fe1 == 0x81 and fm1 == 0x7fff00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0ffff00; op2val:0xbf800000; valaddr_reg:x16; val_offset:216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 216, x17, x15, 216, x18)

inst_4346:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc0ffff00; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 224, x17, x15, 224, x18)

inst_4347:
// fs1 == 1 and fe1 == 0x81 and fm1 == 0x0001ff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc08001ff; op2val:0xbf800000; valaddr_reg:x16; val_offset:232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 232, x17, x15, 232, x18)

inst_4348:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc08001ff; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_4349:
// fs1 == 1 and fe1 == 0x81 and fm1 == 0x7ffe00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0fffe00; op2val:0xbf800000; valaddr_reg:x16; val_offset:248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 248, x17, x15, 248, x18)

inst_4350:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc0fffe00; valaddr_reg:x16; val_offset:256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 256, x17, x15, 256, x18)

inst_4351:
// fs1 == 1 and fe1 == 0x81 and fm1 == 0x0003ff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc08003ff; op2val:0xbf800000; valaddr_reg:x16; val_offset:264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 264, x17, x15, 264, x18)

inst_4352:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc08003ff; valaddr_reg:x16; val_offset:272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 272, x17, x15, 272, x18)

inst_4353:
// fs1 == 1 and fe1 == 0x81 and fm1 == 0x7ffc00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0fffc00; op2val:0xbf800000; valaddr_reg:x16; val_offset:280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 280, x17, x15, 280, x18)

inst_4354:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc0fffc00; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_4355:
// fs1 == 1 and fe1 == 0x81 and fm1 == 0x0007ff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc08007ff; op2val:0xbf800000; valaddr_reg:x16; val_offset:296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 296, x17, x15, 296, x18)

inst_4356:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc08007ff; valaddr_reg:x16; val_offset:304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 304, x17, x15, 304, x18)

inst_4357:
// fs1 == 1 and fe1 == 0x81 and fm1 == 0x7ff800 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0fff800; op2val:0xbf800000; valaddr_reg:x16; val_offset:312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 312, x17, x15, 312, x18)

inst_4358:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc0fff800; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_4359:
// fs1 == 1 and fe1 == 0x81 and fm1 == 0x000fff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0800fff; op2val:0xbf800000; valaddr_reg:x16; val_offset:328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 328, x17, x15, 328, x18)

inst_4360:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc0800fff; valaddr_reg:x16; val_offset:336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 336, x17, x15, 336, x18)

inst_4361:
// fs1 == 1 and fe1 == 0x81 and fm1 == 0x7ff000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0fff000; op2val:0xbf800000; valaddr_reg:x16; val_offset:344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 344, x17, x15, 344, x18)

inst_4362:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc0fff000; valaddr_reg:x16; val_offset:352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 352, x17, x15, 352, x18)

inst_4363:
// fs1 == 1 and fe1 == 0x81 and fm1 == 0x001fff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0801fff; op2val:0xbf800000; valaddr_reg:x16; val_offset:360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 360, x17, x15, 360, x18)

inst_4364:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc0801fff; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_4365:
// fs1 == 1 and fe1 == 0x81 and fm1 == 0x7fe000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0ffe000; op2val:0xbf800000; valaddr_reg:x16; val_offset:376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 376, x17, x15, 376, x18)

inst_4366:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc0ffe000; valaddr_reg:x16; val_offset:384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 384, x17, x15, 384, x18)

inst_4367:
// fs1 == 1 and fe1 == 0x81 and fm1 == 0x003fff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0803fff; op2val:0xbf800000; valaddr_reg:x16; val_offset:392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 392, x17, x15, 392, x18)

inst_4368:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc0803fff; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_4369:
// fs1 == 1 and fe1 == 0x81 and fm1 == 0x7fc000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0ffc000; op2val:0xbf800000; valaddr_reg:x16; val_offset:408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 408, x17, x15, 408, x18)

inst_4370:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc0ffc000; valaddr_reg:x16; val_offset:416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 416, x17, x15, 416, x18)

inst_4371:
// fs1 == 1 and fe1 == 0x81 and fm1 == 0x007fff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0807fff; op2val:0xbf800000; valaddr_reg:x16; val_offset:424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 424, x17, x15, 424, x18)

inst_4372:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc0807fff; valaddr_reg:x16; val_offset:432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 432, x17, x15, 432, x18)

inst_4373:
// fs1 == 1 and fe1 == 0x81 and fm1 == 0x7f8000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0ff8000; op2val:0xbf800000; valaddr_reg:x16; val_offset:440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 440, x17, x15, 440, x18)

inst_4374:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc0ff8000; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_4375:
// fs1 == 1 and fe1 == 0x81 and fm1 == 0x00ffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc080ffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 456, x17, x15, 456, x18)

inst_4376:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc080ffff; valaddr_reg:x16; val_offset:464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 464, x17, x15, 464, x18)

inst_4377:
// fs1 == 1 and fe1 == 0x81 and fm1 == 0x7f0000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0ff0000; op2val:0xbf800000; valaddr_reg:x16; val_offset:472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 472, x17, x15, 472, x18)

inst_4378:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc0ff0000; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_4379:
// fs1 == 1 and fe1 == 0x81 and fm1 == 0x01ffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc081ffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 488, x17, x15, 488, x18)

inst_4380:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc081ffff; valaddr_reg:x16; val_offset:496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 496, x17, x15, 496, x18)

inst_4381:
// fs1 == 1 and fe1 == 0x81 and fm1 == 0x7e0000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0fe0000; op2val:0xbf800000; valaddr_reg:x16; val_offset:504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 504, x17, x15, 504, x18)

inst_4382:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc0fe0000; valaddr_reg:x16; val_offset:512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 512, x17, x15, 512, x18)

inst_4383:
// fs1 == 1 and fe1 == 0x81 and fm1 == 0x03ffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc083ffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 520, x17, x15, 520, x18)

inst_4384:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc083ffff; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_4385:
// fs1 == 1 and fe1 == 0x81 and fm1 == 0x7c0000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0fc0000; op2val:0xbf800000; valaddr_reg:x16; val_offset:536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 536, x17, x15, 536, x18)

inst_4386:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc0fc0000; valaddr_reg:x16; val_offset:544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 544, x17, x15, 544, x18)

inst_4387:
// fs1 == 1 and fe1 == 0x81 and fm1 == 0x07ffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc087ffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 552, x17, x15, 552, x18)

inst_4388:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc087ffff; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_4389:
// fs1 == 1 and fe1 == 0x81 and fm1 == 0x780000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0f80000; op2val:0xbf800000; valaddr_reg:x16; val_offset:568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 568, x17, x15, 568, x18)

inst_4390:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc0f80000; valaddr_reg:x16; val_offset:576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 576, x17, x15, 576, x18)

inst_4391:
// fs1 == 1 and fe1 == 0x81 and fm1 == 0x0fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc08fffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 584, x17, x15, 584, x18)

inst_4392:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc08fffff; valaddr_reg:x16; val_offset:592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 592, x17, x15, 592, x18)

inst_4393:
// fs1 == 1 and fe1 == 0x81 and fm1 == 0x700000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0f00000; op2val:0xbf800000; valaddr_reg:x16; val_offset:600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 600, x17, x15, 600, x18)

inst_4394:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc0f00000; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 608, x17, x15, 608, x18)

inst_4395:
// fs1 == 1 and fe1 == 0x81 and fm1 == 0x1fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc09fffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 616, x17, x15, 616, x18)

inst_4396:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc09fffff; valaddr_reg:x16; val_offset:624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 624, x17, x15, 624, x18)

inst_4397:
// fs1 == 1 and fe1 == 0x81 and fm1 == 0x600000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0e00000; op2val:0xbf800000; valaddr_reg:x16; val_offset:632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 632, x17, x15, 632, x18)

inst_4398:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc0e00000; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_4399:
// fs1 == 1 and fe1 == 0x81 and fm1 == 0x3fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0bfffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 648, x17, x15, 648, x18)

inst_4400:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc0bfffff; valaddr_reg:x16; val_offset:656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 656, x17, x15, 656, x18)

inst_4401:
// fs1 == 1 and fe1 == 0x81 and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0c00000; op2val:0xbf800000; valaddr_reg:x16; val_offset:664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 664, x17, x15, 664, x18)

inst_4402:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc0c00000; valaddr_reg:x16; val_offset:672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 672, x17, x15, 672, x18)

inst_4403:
// fs1 == 1 and fe1 == 0x81 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0ffffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 680, x17, x15, 680, x18)

inst_4404:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc0ffffff; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 688, x17, x15, 688, x18)

inst_4405:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0000001; op2val:0xbf800000; valaddr_reg:x16; val_offset:696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 696, x17, x15, 696, x18)

inst_4406:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc0000001; valaddr_reg:x16; val_offset:704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 704, x17, x15, 704, x18)

inst_4407:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0000000; op2val:0xbf800000; valaddr_reg:x16; val_offset:712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 712, x17, x15, 712, x18)

inst_4408:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc0000000; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_4409:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x7ffffe and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc07ffffe; op2val:0xbf800000; valaddr_reg:x16; val_offset:728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 728, x17, x15, 728, x18)

inst_4410:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc07ffffe; valaddr_reg:x16; val_offset:736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 736, x17, x15, 736, x18)

inst_4411:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x000003 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0000003; op2val:0xbf800000; valaddr_reg:x16; val_offset:744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 744, x17, x15, 744, x18)

inst_4412:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc0000003; valaddr_reg:x16; val_offset:752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 752, x17, x15, 752, x18)

inst_4413:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x7ffffc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc07ffffc; op2val:0xbf800000; valaddr_reg:x16; val_offset:760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 760, x17, x15, 760, x18)

inst_4414:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc07ffffc; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 768, x17, x15, 768, x18)

inst_4415:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x000007 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0000007; op2val:0xbf800000; valaddr_reg:x16; val_offset:776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 776, x17, x15, 776, x18)

inst_4416:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc0000007; valaddr_reg:x16; val_offset:784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 784, x17, x15, 784, x18)

inst_4417:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x7ffff8 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc07ffff8; op2val:0xbf800000; valaddr_reg:x16; val_offset:792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 792, x17, x15, 792, x18)

inst_4418:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc07ffff8; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_4419:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x00000f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc000000f; op2val:0xbf800000; valaddr_reg:x16; val_offset:808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 808, x17, x15, 808, x18)

inst_4420:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc000000f; valaddr_reg:x16; val_offset:816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 816, x17, x15, 816, x18)

inst_4421:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x7ffff0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc07ffff0; op2val:0xbf800000; valaddr_reg:x16; val_offset:824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 824, x17, x15, 824, x18)

inst_4422:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc07ffff0; valaddr_reg:x16; val_offset:832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 832, x17, x15, 832, x18)

inst_4423:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x00001f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc000001f; op2val:0xbf800000; valaddr_reg:x16; val_offset:840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 840, x17, x15, 840, x18)

inst_4424:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc000001f; valaddr_reg:x16; val_offset:848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 848, x17, x15, 848, x18)

inst_4425:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x7fffe0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc07fffe0; op2val:0xbf800000; valaddr_reg:x16; val_offset:856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 856, x17, x15, 856, x18)

inst_4426:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc07fffe0; valaddr_reg:x16; val_offset:864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 864, x17, x15, 864, x18)

inst_4427:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc000003f; op2val:0xbf800000; valaddr_reg:x16; val_offset:872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 872, x17, x15, 872, x18)

inst_4428:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc000003f; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 880, x17, x15, 880, x18)

inst_4429:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x7fffc0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc07fffc0; op2val:0xbf800000; valaddr_reg:x16; val_offset:888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 888, x17, x15, 888, x18)

inst_4430:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc07fffc0; valaddr_reg:x16; val_offset:896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 896, x17, x15, 896, x18)

inst_4431:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x00007f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc000007f; op2val:0xbf800000; valaddr_reg:x16; val_offset:904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 904, x17, x15, 904, x18)

inst_4432:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc000007f; valaddr_reg:x16; val_offset:912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 912, x17, x15, 912, x18)

inst_4433:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x7fff80 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc07fff80; op2val:0xbf800000; valaddr_reg:x16; val_offset:920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 920, x17, x15, 920, x18)

inst_4434:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc07fff80; valaddr_reg:x16; val_offset:928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 928, x17, x15, 928, x18)

inst_4435:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x0000ff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc00000ff; op2val:0xbf800000; valaddr_reg:x16; val_offset:936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 936, x17, x15, 936, x18)

inst_4436:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc00000ff; valaddr_reg:x16; val_offset:944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 944, x17, x15, 944, x18)

inst_4437:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x7fff00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc07fff00; op2val:0xbf800000; valaddr_reg:x16; val_offset:952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 952, x17, x15, 952, x18)

inst_4438:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc07fff00; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 960, x17, x15, 960, x18)

inst_4439:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x0001ff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc00001ff; op2val:0xbf800000; valaddr_reg:x16; val_offset:968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 968, x17, x15, 968, x18)

inst_4440:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc00001ff; valaddr_reg:x16; val_offset:976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 976, x17, x15, 976, x18)

inst_4441:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x7ffe00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc07ffe00; op2val:0xbf800000; valaddr_reg:x16; val_offset:984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 984, x17, x15, 984, x18)

inst_4442:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc07ffe00; valaddr_reg:x16; val_offset:992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 992, x17, x15, 992, x18)

inst_4443:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x0003ff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc00003ff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1000, x17, x15, 1000, x18)

inst_4444:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc00003ff; valaddr_reg:x16; val_offset:1008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1008, x17, x15, 1008, x18)

inst_4445:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x7ffc00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc07ffc00; op2val:0xbf800000; valaddr_reg:x16; val_offset:1016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1016, x17, x15, 1016, x18)

inst_4446:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc07ffc00; valaddr_reg:x16; val_offset:1024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1024, x17, x15, 1024, x18)

inst_4447:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x0007ff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc00007ff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1032; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1032, x17, x15, 1032, x18)

inst_4448:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc00007ff; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1040, x17, x15, 1040, x18)

inst_4449:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x7ff800 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc07ff800; op2val:0xbf800000; valaddr_reg:x16; val_offset:1048; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1048, x17, x15, 1048, x18)

inst_4450:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc07ff800; valaddr_reg:x16; val_offset:1056; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1056, x17, x15, 1056, x18)

inst_4451:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x000fff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0000fff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1064; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1064, x17, x15, 1064, x18)

inst_4452:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc0000fff; valaddr_reg:x16; val_offset:1072; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1072, x17, x15, 1072, x18)

inst_4453:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x7ff000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc07ff000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1080; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1080, x17, x15, 1080, x18)

inst_4454:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc07ff000; valaddr_reg:x16; val_offset:1088; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1088, x17, x15, 1088, x18)

inst_4455:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x001fff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0001fff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1096; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1096, x17, x15, 1096, x18)

inst_4456:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc0001fff; valaddr_reg:x16; val_offset:1104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1104, x17, x15, 1104, x18)

inst_4457:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x7fe000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc07fe000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1112, x17, x15, 1112, x18)

inst_4458:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc07fe000; valaddr_reg:x16; val_offset:1120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1120, x17, x15, 1120, x18)

inst_4459:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x003fff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0003fff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1128, x17, x15, 1128, x18)

inst_4460:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc0003fff; valaddr_reg:x16; val_offset:1136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1136, x17, x15, 1136, x18)

inst_4461:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x7fc000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc07fc000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1144, x17, x15, 1144, x18)

inst_4462:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc07fc000; valaddr_reg:x16; val_offset:1152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1152, x17, x15, 1152, x18)

inst_4463:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x007fff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0007fff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1160, x17, x15, 1160, x18)

inst_4464:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc0007fff; valaddr_reg:x16; val_offset:1168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1168, x17, x15, 1168, x18)

inst_4465:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x7f8000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc07f8000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1176, x17, x15, 1176, x18)

inst_4466:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc07f8000; valaddr_reg:x16; val_offset:1184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1184, x17, x15, 1184, x18)

inst_4467:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x00ffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc000ffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1192, x17, x15, 1192, x18)

inst_4468:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc000ffff; valaddr_reg:x16; val_offset:1200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1200, x17, x15, 1200, x18)

inst_4469:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x7f0000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc07f0000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1208, x17, x15, 1208, x18)

inst_4470:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc07f0000; valaddr_reg:x16; val_offset:1216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1216, x17, x15, 1216, x18)

inst_4471:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x01ffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc001ffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1224, x17, x15, 1224, x18)

inst_4472:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc001ffff; valaddr_reg:x16; val_offset:1232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1232, x17, x15, 1232, x18)

inst_4473:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x7e0000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc07e0000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1240, x17, x15, 1240, x18)

inst_4474:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc07e0000; valaddr_reg:x16; val_offset:1248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1248, x17, x15, 1248, x18)

inst_4475:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x03ffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc003ffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1256, x17, x15, 1256, x18)

inst_4476:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc003ffff; valaddr_reg:x16; val_offset:1264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1264, x17, x15, 1264, x18)

inst_4477:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x7c0000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc07c0000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1272, x17, x15, 1272, x18)

inst_4478:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc07c0000; valaddr_reg:x16; val_offset:1280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1280, x17, x15, 1280, x18)

inst_4479:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x07ffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc007ffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1288, x17, x15, 1288, x18)

inst_4480:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc007ffff; valaddr_reg:x16; val_offset:1296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1296, x17, x15, 1296, x18)

inst_4481:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x780000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0780000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1304, x17, x15, 1304, x18)

inst_4482:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc0780000; valaddr_reg:x16; val_offset:1312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1312, x17, x15, 1312, x18)

inst_4483:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x0fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc00fffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1320, x17, x15, 1320, x18)

inst_4484:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc00fffff; valaddr_reg:x16; val_offset:1328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1328, x17, x15, 1328, x18)

inst_4485:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x700000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0700000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1336, x17, x15, 1336, x18)

inst_4486:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc0700000; valaddr_reg:x16; val_offset:1344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1344, x17, x15, 1344, x18)

inst_4487:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x1fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc01fffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1352, x17, x15, 1352, x18)

inst_4488:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc01fffff; valaddr_reg:x16; val_offset:1360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1360, x17, x15, 1360, x18)

inst_4489:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x600000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0600000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1368, x17, x15, 1368, x18)

inst_4490:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc0600000; valaddr_reg:x16; val_offset:1376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1376, x17, x15, 1376, x18)

inst_4491:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x3fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc03fffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1384, x17, x15, 1384, x18)

inst_4492:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc03fffff; valaddr_reg:x16; val_offset:1392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1392, x17, x15, 1392, x18)

inst_4493:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc0400000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1400, x17, x15, 1400, x18)

inst_4494:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc0400000; valaddr_reg:x16; val_offset:1408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1408, x17, x15, 1408, x18)

inst_4495:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc07fffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1416, x17, x15, 1416, x18)

inst_4496:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc07fffff; valaddr_reg:x16; val_offset:1424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1424, x17, x15, 1424, x18)

inst_4497:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1432, x17, x15, 1432, x18)

inst_4498:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x00000f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf80000f; op2val:0xbf800000; valaddr_reg:x16; val_offset:1440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1440, x17, x15, 1440, x18)

inst_4499:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf80000f; valaddr_reg:x16; val_offset:1448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1448, x17, x15, 1448, x18)

inst_4500:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x7ffff0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbffffff0; op2val:0xbf800000; valaddr_reg:x16; val_offset:1456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1456, x17, x15, 1456, x18)

inst_4501:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbffffff0; valaddr_reg:x16; val_offset:1464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1464, x17, x15, 1464, x18)

inst_4502:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x00001f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf80001f; op2val:0xbf800000; valaddr_reg:x16; val_offset:1472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1472, x17, x15, 1472, x18)

inst_4503:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf80001f; valaddr_reg:x16; val_offset:1480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1480, x17, x15, 1480, x18)

inst_4504:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x7fffe0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbfffffe0; op2val:0xbf800000; valaddr_reg:x16; val_offset:1488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1488, x17, x15, 1488, x18)

inst_4505:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbfffffe0; valaddr_reg:x16; val_offset:1496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1496, x17, x15, 1496, x18)

inst_4506:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf80003f; op2val:0xbf800000; valaddr_reg:x16; val_offset:1504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1504, x17, x15, 1504, x18)

inst_4507:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf80003f; valaddr_reg:x16; val_offset:1512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1512, x17, x15, 1512, x18)

inst_4508:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x7fffc0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbfffffc0; op2val:0xbf800000; valaddr_reg:x16; val_offset:1520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1520, x17, x15, 1520, x18)

inst_4509:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbfffffc0; valaddr_reg:x16; val_offset:1528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1528, x17, x15, 1528, x18)

inst_4510:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x00007f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf80007f; op2val:0xbf800000; valaddr_reg:x16; val_offset:1536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1536, x17, x15, 1536, x18)

inst_4511:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf80007f; valaddr_reg:x16; val_offset:1544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1544, x17, x15, 1544, x18)

inst_4512:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x7fff80 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbfffff80; op2val:0xbf800000; valaddr_reg:x16; val_offset:1552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1552, x17, x15, 1552, x18)

inst_4513:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbfffff80; valaddr_reg:x16; val_offset:1560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1560, x17, x15, 1560, x18)

inst_4514:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x0000ff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf8000ff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1568, x17, x15, 1568, x18)

inst_4515:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf8000ff; valaddr_reg:x16; val_offset:1576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1576, x17, x15, 1576, x18)

inst_4516:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x7fff00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbfffff00; op2val:0xbf800000; valaddr_reg:x16; val_offset:1584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1584, x17, x15, 1584, x18)

inst_4517:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbfffff00; valaddr_reg:x16; val_offset:1592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1592, x17, x15, 1592, x18)

inst_4518:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x0001ff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf8001ff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1600, x17, x15, 1600, x18)

inst_4519:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf8001ff; valaddr_reg:x16; val_offset:1608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1608, x17, x15, 1608, x18)

inst_4520:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x7ffe00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbffffe00; op2val:0xbf800000; valaddr_reg:x16; val_offset:1616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1616, x17, x15, 1616, x18)

inst_4521:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbffffe00; valaddr_reg:x16; val_offset:1624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1624, x17, x15, 1624, x18)

inst_4522:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x0003ff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf8003ff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1632, x17, x15, 1632, x18)

inst_4523:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf8003ff; valaddr_reg:x16; val_offset:1640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1640, x17, x15, 1640, x18)

inst_4524:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x7ffc00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbffffc00; op2val:0xbf800000; valaddr_reg:x16; val_offset:1648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1648, x17, x15, 1648, x18)

inst_4525:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbffffc00; valaddr_reg:x16; val_offset:1656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1656, x17, x15, 1656, x18)

inst_4526:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x0007ff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf8007ff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1664, x17, x15, 1664, x18)

inst_4527:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf8007ff; valaddr_reg:x16; val_offset:1672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1672, x17, x15, 1672, x18)

inst_4528:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x7ff800 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbffff800; op2val:0xbf800000; valaddr_reg:x16; val_offset:1680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1680, x17, x15, 1680, x18)

inst_4529:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbffff800; valaddr_reg:x16; val_offset:1688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1688, x17, x15, 1688, x18)

inst_4530:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000fff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800fff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1696, x17, x15, 1696, x18)

inst_4531:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf800fff; valaddr_reg:x16; val_offset:1704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1704, x17, x15, 1704, x18)

inst_4532:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x7ff000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbffff000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1712, x17, x15, 1712, x18)

inst_4533:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbffff000; valaddr_reg:x16; val_offset:1720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1720, x17, x15, 1720, x18)

inst_4534:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x001fff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf801fff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1728, x17, x15, 1728, x18)

inst_4535:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf801fff; valaddr_reg:x16; val_offset:1736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1736, x17, x15, 1736, x18)

inst_4536:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x7fe000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbfffe000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1744, x17, x15, 1744, x18)

inst_4537:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbfffe000; valaddr_reg:x16; val_offset:1752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1752, x17, x15, 1752, x18)

inst_4538:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x003fff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf803fff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1760, x17, x15, 1760, x18)

inst_4539:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf803fff; valaddr_reg:x16; val_offset:1768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1768, x17, x15, 1768, x18)

inst_4540:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x7fc000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbfffc000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1776, x17, x15, 1776, x18)

inst_4541:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbfffc000; valaddr_reg:x16; val_offset:1784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1784, x17, x15, 1784, x18)

inst_4542:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x007fff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf807fff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1792, x17, x15, 1792, x18)

inst_4543:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf807fff; valaddr_reg:x16; val_offset:1800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1800, x17, x15, 1800, x18)

inst_4544:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x7f8000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbfff8000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1808, x17, x15, 1808, x18)

inst_4545:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbfff8000; valaddr_reg:x16; val_offset:1816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1816, x17, x15, 1816, x18)

inst_4546:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x00ffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf80ffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1824, x17, x15, 1824, x18)

inst_4547:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf80ffff; valaddr_reg:x16; val_offset:1832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1832, x17, x15, 1832, x18)

inst_4548:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x7f0000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbfff0000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1840, x17, x15, 1840, x18)

inst_4549:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbfff0000; valaddr_reg:x16; val_offset:1848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1848, x17, x15, 1848, x18)

inst_4550:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x01ffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf81ffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1856, x17, x15, 1856, x18)

inst_4551:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf81ffff; valaddr_reg:x16; val_offset:1864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1864, x17, x15, 1864, x18)

inst_4552:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x7e0000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbffe0000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1872, x17, x15, 1872, x18)

inst_4553:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbffe0000; valaddr_reg:x16; val_offset:1880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1880, x17, x15, 1880, x18)

inst_4554:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x03ffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf83ffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1888, x17, x15, 1888, x18)

inst_4555:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf83ffff; valaddr_reg:x16; val_offset:1896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1896, x17, x15, 1896, x18)

inst_4556:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x7c0000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbffc0000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1904, x17, x15, 1904, x18)

inst_4557:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbffc0000; valaddr_reg:x16; val_offset:1912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1912, x17, x15, 1912, x18)

inst_4558:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x07ffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf87ffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1920, x17, x15, 1920, x18)

inst_4559:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf87ffff; valaddr_reg:x16; val_offset:1928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1928, x17, x15, 1928, x18)

inst_4560:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x780000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbff80000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1936, x17, x15, 1936, x18)

inst_4561:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbff80000; valaddr_reg:x16; val_offset:1944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1944, x17, x15, 1944, x18)

inst_4562:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x0fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf8fffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1952, x17, x15, 1952, x18)

inst_4563:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf8fffff; valaddr_reg:x16; val_offset:1960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1960, x17, x15, 1960, x18)

inst_4564:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x700000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbff00000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1968, x17, x15, 1968, x18)

inst_4565:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbff00000; valaddr_reg:x16; val_offset:1976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1976, x17, x15, 1976, x18)

inst_4566:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x1fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf9fffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1984, x17, x15, 1984, x18)

inst_4567:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf9fffff; valaddr_reg:x16; val_offset:1992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1992, x17, x15, 1992, x18)

inst_4568:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x600000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbfe00000; op2val:0xbf800000; valaddr_reg:x16; val_offset:2000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2000, x17, x15, 2000, x18)

inst_4569:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbfe00000; valaddr_reg:x16; val_offset:2008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2008, x17, x15, 2008, x18)

inst_4570:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x3fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbfbfffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:2016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2016, x17, x15, 2016, x18)

inst_4571:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbfbfffff; valaddr_reg:x16; val_offset:2024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_19)

inst_4572:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbfc00000; op2val:0xbf800000; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_4573:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbfc00000; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 8, x17, x15, 8, x18)

inst_4574:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbfffffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 16, x17, x15, 16, x18)

inst_4575:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbfffffff; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 24, x17, x15, 24, x18)

inst_4576:
// fs1 == 1 and fe1 == 0x7e and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf000001; op2val:0xbf800000; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 32, x17, x15, 32, x18)

inst_4577:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf000001; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 40, x17, x15, 40, x18)

inst_4578:
// fs1 == 1 and fe1 == 0x7e and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf000000; op2val:0xbf800000; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_4579:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf000000; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 56, x17, x15, 56, x18)

inst_4580:
// fs1 == 1 and fe1 == 0x7e and fm1 == 0x7ffffe and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf7ffffe; op2val:0xbf800000; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 64, x17, x15, 64, x18)

inst_4581:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf7ffffe; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 72, x17, x15, 72, x18)

inst_4582:
// fs1 == 1 and fe1 == 0x7e and fm1 == 0x000003 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf000003; op2val:0xbf800000; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_4583:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf000003; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 88, x17, x15, 88, x18)

inst_4584:
// fs1 == 1 and fe1 == 0x7e and fm1 == 0x7ffffc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf7ffffc; op2val:0xbf800000; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 96, x17, x15, 96, x18)

inst_4585:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf7ffffc; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 104, x17, x15, 104, x18)

inst_4586:
// fs1 == 1 and fe1 == 0x7e and fm1 == 0x000007 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf000007; op2val:0xbf800000; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 112, x17, x15, 112, x18)

inst_4587:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf000007; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 120, x17, x15, 120, x18)

inst_4588:
// fs1 == 1 and fe1 == 0x7e and fm1 == 0x7ffff8 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf7ffff8; op2val:0xbf800000; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_4589:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf7ffff8; valaddr_reg:x16; val_offset:136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 136, x17, x15, 136, x18)

inst_4590:
// fs1 == 1 and fe1 == 0x7e and fm1 == 0x00000f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf00000f; op2val:0xbf800000; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 144, x17, x15, 144, x18)

inst_4591:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf00000f; valaddr_reg:x16; val_offset:152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 152, x17, x15, 152, x18)

inst_4592:
// fs1 == 1 and fe1 == 0x7e and fm1 == 0x7ffff0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf7ffff0; op2val:0xbf800000; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_4593:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf7ffff0; valaddr_reg:x16; val_offset:168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 168, x17, x15, 168, x18)

inst_4594:
// fs1 == 1 and fe1 == 0x7e and fm1 == 0x00001f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf00001f; op2val:0xbf800000; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 176, x17, x15, 176, x18)

inst_4595:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf00001f; valaddr_reg:x16; val_offset:184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 184, x17, x15, 184, x18)

inst_4596:
// fs1 == 1 and fe1 == 0x7e and fm1 == 0x7fffe0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf7fffe0; op2val:0xbf800000; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 192, x17, x15, 192, x18)

inst_4597:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf7fffe0; valaddr_reg:x16; val_offset:200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 200, x17, x15, 200, x18)

inst_4598:
// fs1 == 1 and fe1 == 0x7e and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf00003f; op2val:0xbf800000; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_4599:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf00003f; valaddr_reg:x16; val_offset:216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 216, x17, x15, 216, x18)

inst_4600:
// fs1 == 1 and fe1 == 0x7e and fm1 == 0x7fffc0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf7fffc0; op2val:0xbf800000; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 224, x17, x15, 224, x18)

inst_4601:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf7fffc0; valaddr_reg:x16; val_offset:232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 232, x17, x15, 232, x18)

inst_4602:
// fs1 == 1 and fe1 == 0x7e and fm1 == 0x00007f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf00007f; op2val:0xbf800000; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_4603:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf00007f; valaddr_reg:x16; val_offset:248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 248, x17, x15, 248, x18)

inst_4604:
// fs1 == 1 and fe1 == 0x7e and fm1 == 0x7fff80 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf7fff80; op2val:0xbf800000; valaddr_reg:x16; val_offset:256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 256, x17, x15, 256, x18)

inst_4605:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf7fff80; valaddr_reg:x16; val_offset:264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 264, x17, x15, 264, x18)

inst_4606:
// fs1 == 1 and fe1 == 0x7e and fm1 == 0x0000ff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf0000ff; op2val:0xbf800000; valaddr_reg:x16; val_offset:272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 272, x17, x15, 272, x18)

inst_4607:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf0000ff; valaddr_reg:x16; val_offset:280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 280, x17, x15, 280, x18)

inst_4608:
// fs1 == 1 and fe1 == 0x7e and fm1 == 0x7fff00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf7fff00; op2val:0xbf800000; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_4609:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf7fff00; valaddr_reg:x16; val_offset:296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 296, x17, x15, 296, x18)

inst_4610:
// fs1 == 1 and fe1 == 0x7e and fm1 == 0x0001ff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf0001ff; op2val:0xbf800000; valaddr_reg:x16; val_offset:304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 304, x17, x15, 304, x18)

inst_4611:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf0001ff; valaddr_reg:x16; val_offset:312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 312, x17, x15, 312, x18)

inst_4612:
// fs1 == 1 and fe1 == 0x7e and fm1 == 0x7ffe00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf7ffe00; op2val:0xbf800000; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_4613:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf7ffe00; valaddr_reg:x16; val_offset:328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 328, x17, x15, 328, x18)

inst_4614:
// fs1 == 1 and fe1 == 0x7e and fm1 == 0x0003ff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf0003ff; op2val:0xbf800000; valaddr_reg:x16; val_offset:336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 336, x17, x15, 336, x18)

inst_4615:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf0003ff; valaddr_reg:x16; val_offset:344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 344, x17, x15, 344, x18)

inst_4616:
// fs1 == 1 and fe1 == 0x7e and fm1 == 0x7ffc00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf7ffc00; op2val:0xbf800000; valaddr_reg:x16; val_offset:352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 352, x17, x15, 352, x18)

inst_4617:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf7ffc00; valaddr_reg:x16; val_offset:360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 360, x17, x15, 360, x18)

inst_4618:
// fs1 == 1 and fe1 == 0x7e and fm1 == 0x0007ff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf0007ff; op2val:0xbf800000; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_4619:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf0007ff; valaddr_reg:x16; val_offset:376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 376, x17, x15, 376, x18)

inst_4620:
// fs1 == 1 and fe1 == 0x7e and fm1 == 0x7ff800 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf7ff800; op2val:0xbf800000; valaddr_reg:x16; val_offset:384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 384, x17, x15, 384, x18)

inst_4621:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf7ff800; valaddr_reg:x16; val_offset:392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 392, x17, x15, 392, x18)

inst_4622:
// fs1 == 1 and fe1 == 0x7e and fm1 == 0x000fff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf000fff; op2val:0xbf800000; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_4623:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf000fff; valaddr_reg:x16; val_offset:408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 408, x17, x15, 408, x18)

inst_4624:
// fs1 == 1 and fe1 == 0x7e and fm1 == 0x7ff000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf7ff000; op2val:0xbf800000; valaddr_reg:x16; val_offset:416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 416, x17, x15, 416, x18)

inst_4625:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf7ff000; valaddr_reg:x16; val_offset:424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 424, x17, x15, 424, x18)

inst_4626:
// fs1 == 1 and fe1 == 0x7e and fm1 == 0x001fff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf001fff; op2val:0xbf800000; valaddr_reg:x16; val_offset:432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 432, x17, x15, 432, x18)

inst_4627:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf001fff; valaddr_reg:x16; val_offset:440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 440, x17, x15, 440, x18)

inst_4628:
// fs1 == 1 and fe1 == 0x7e and fm1 == 0x7fe000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf7fe000; op2val:0xbf800000; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_4629:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf7fe000; valaddr_reg:x16; val_offset:456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 456, x17, x15, 456, x18)

inst_4630:
// fs1 == 1 and fe1 == 0x7e and fm1 == 0x003fff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf003fff; op2val:0xbf800000; valaddr_reg:x16; val_offset:464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 464, x17, x15, 464, x18)

inst_4631:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf003fff; valaddr_reg:x16; val_offset:472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 472, x17, x15, 472, x18)

inst_4632:
// fs1 == 1 and fe1 == 0x7e and fm1 == 0x7fc000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf7fc000; op2val:0xbf800000; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_4633:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf7fc000; valaddr_reg:x16; val_offset:488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 488, x17, x15, 488, x18)

inst_4634:
// fs1 == 1 and fe1 == 0x7e and fm1 == 0x007fff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf007fff; op2val:0xbf800000; valaddr_reg:x16; val_offset:496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 496, x17, x15, 496, x18)

inst_4635:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf007fff; valaddr_reg:x16; val_offset:504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 504, x17, x15, 504, x18)

inst_4636:
// fs1 == 1 and fe1 == 0x7e and fm1 == 0x7f8000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf7f8000; op2val:0xbf800000; valaddr_reg:x16; val_offset:512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 512, x17, x15, 512, x18)

inst_4637:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf7f8000; valaddr_reg:x16; val_offset:520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 520, x17, x15, 520, x18)

inst_4638:
// fs1 == 1 and fe1 == 0x7e and fm1 == 0x00ffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf00ffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_4639:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf00ffff; valaddr_reg:x16; val_offset:536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 536, x17, x15, 536, x18)

inst_4640:
// fs1 == 1 and fe1 == 0x7e and fm1 == 0x7f0000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf7f0000; op2val:0xbf800000; valaddr_reg:x16; val_offset:544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 544, x17, x15, 544, x18)

inst_4641:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf7f0000; valaddr_reg:x16; val_offset:552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 552, x17, x15, 552, x18)

inst_4642:
// fs1 == 1 and fe1 == 0x7e and fm1 == 0x01ffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf01ffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_4643:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf01ffff; valaddr_reg:x16; val_offset:568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 568, x17, x15, 568, x18)

inst_4644:
// fs1 == 1 and fe1 == 0x7e and fm1 == 0x7e0000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf7e0000; op2val:0xbf800000; valaddr_reg:x16; val_offset:576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 576, x17, x15, 576, x18)

inst_4645:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf7e0000; valaddr_reg:x16; val_offset:584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 584, x17, x15, 584, x18)

inst_4646:
// fs1 == 1 and fe1 == 0x7e and fm1 == 0x03ffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf03ffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 592, x17, x15, 592, x18)

inst_4647:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf03ffff; valaddr_reg:x16; val_offset:600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 600, x17, x15, 600, x18)

inst_4648:
// fs1 == 1 and fe1 == 0x7e and fm1 == 0x7c0000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf7c0000; op2val:0xbf800000; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 608, x17, x15, 608, x18)

inst_4649:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf7c0000; valaddr_reg:x16; val_offset:616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 616, x17, x15, 616, x18)

inst_4650:
// fs1 == 1 and fe1 == 0x7e and fm1 == 0x07ffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf07ffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 624, x17, x15, 624, x18)

inst_4651:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf07ffff; valaddr_reg:x16; val_offset:632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 632, x17, x15, 632, x18)

inst_4652:
// fs1 == 1 and fe1 == 0x7e and fm1 == 0x780000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf780000; op2val:0xbf800000; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_4653:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf780000; valaddr_reg:x16; val_offset:648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 648, x17, x15, 648, x18)

inst_4654:
// fs1 == 1 and fe1 == 0x7e and fm1 == 0x0fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf0fffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 656, x17, x15, 656, x18)

inst_4655:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf0fffff; valaddr_reg:x16; val_offset:664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 664, x17, x15, 664, x18)

inst_4656:
// fs1 == 1 and fe1 == 0x7e and fm1 == 0x700000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf700000; op2val:0xbf800000; valaddr_reg:x16; val_offset:672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 672, x17, x15, 672, x18)

inst_4657:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf700000; valaddr_reg:x16; val_offset:680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 680, x17, x15, 680, x18)

inst_4658:
// fs1 == 1 and fe1 == 0x7e and fm1 == 0x1fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf1fffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 688, x17, x15, 688, x18)

inst_4659:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf1fffff; valaddr_reg:x16; val_offset:696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 696, x17, x15, 696, x18)

inst_4660:
// fs1 == 1 and fe1 == 0x7e and fm1 == 0x600000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf600000; op2val:0xbf800000; valaddr_reg:x16; val_offset:704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 704, x17, x15, 704, x18)

inst_4661:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf600000; valaddr_reg:x16; val_offset:712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 712, x17, x15, 712, x18)

inst_4662:
// fs1 == 1 and fe1 == 0x7e and fm1 == 0x3fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf3fffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_4663:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf3fffff; valaddr_reg:x16; val_offset:728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 728, x17, x15, 728, x18)

inst_4664:
// fs1 == 1 and fe1 == 0x7e and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf400000; op2val:0xbf800000; valaddr_reg:x16; val_offset:736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 736, x17, x15, 736, x18)

inst_4665:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf400000; valaddr_reg:x16; val_offset:744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 744, x17, x15, 744, x18)

inst_4666:
// fs1 == 1 and fe1 == 0x7e and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf7fffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 752, x17, x15, 752, x18)

inst_4667:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbf7fffff; valaddr_reg:x16; val_offset:760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 760, x17, x15, 760, x18)

inst_4668:
// fs1 == 1 and fe1 == 0x7d and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe800001; op2val:0xbf800000; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 768, x17, x15, 768, x18)

inst_4669:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe800001; valaddr_reg:x16; val_offset:776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 776, x17, x15, 776, x18)

inst_4670:
// fs1 == 1 and fe1 == 0x7d and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe800000; op2val:0xbf800000; valaddr_reg:x16; val_offset:784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 784, x17, x15, 784, x18)

inst_4671:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe800000; valaddr_reg:x16; val_offset:792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 792, x17, x15, 792, x18)

inst_4672:
// fs1 == 1 and fe1 == 0x7d and fm1 == 0x7ffffe and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbefffffe; op2val:0xbf800000; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_4673:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbefffffe; valaddr_reg:x16; val_offset:808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 808, x17, x15, 808, x18)

inst_4674:
// fs1 == 1 and fe1 == 0x7d and fm1 == 0x000003 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe800003; op2val:0xbf800000; valaddr_reg:x16; val_offset:816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 816, x17, x15, 816, x18)

inst_4675:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe800003; valaddr_reg:x16; val_offset:824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 824, x17, x15, 824, x18)

inst_4676:
// fs1 == 1 and fe1 == 0x7d and fm1 == 0x7ffffc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbefffffc; op2val:0xbf800000; valaddr_reg:x16; val_offset:832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 832, x17, x15, 832, x18)

inst_4677:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbefffffc; valaddr_reg:x16; val_offset:840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 840, x17, x15, 840, x18)

inst_4678:
// fs1 == 1 and fe1 == 0x7d and fm1 == 0x000007 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe800007; op2val:0xbf800000; valaddr_reg:x16; val_offset:848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 848, x17, x15, 848, x18)

inst_4679:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe800007; valaddr_reg:x16; val_offset:856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 856, x17, x15, 856, x18)

inst_4680:
// fs1 == 1 and fe1 == 0x7d and fm1 == 0x7ffff8 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbefffff8; op2val:0xbf800000; valaddr_reg:x16; val_offset:864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 864, x17, x15, 864, x18)

inst_4681:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbefffff8; valaddr_reg:x16; val_offset:872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 872, x17, x15, 872, x18)

inst_4682:
// fs1 == 1 and fe1 == 0x7d and fm1 == 0x00000f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe80000f; op2val:0xbf800000; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 880, x17, x15, 880, x18)

inst_4683:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe80000f; valaddr_reg:x16; val_offset:888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 888, x17, x15, 888, x18)

inst_4684:
// fs1 == 1 and fe1 == 0x7d and fm1 == 0x7ffff0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbefffff0; op2val:0xbf800000; valaddr_reg:x16; val_offset:896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 896, x17, x15, 896, x18)

inst_4685:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbefffff0; valaddr_reg:x16; val_offset:904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 904, x17, x15, 904, x18)

inst_4686:
// fs1 == 1 and fe1 == 0x7d and fm1 == 0x00001f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe80001f; op2val:0xbf800000; valaddr_reg:x16; val_offset:912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 912, x17, x15, 912, x18)

inst_4687:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe80001f; valaddr_reg:x16; val_offset:920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 920, x17, x15, 920, x18)

inst_4688:
// fs1 == 1 and fe1 == 0x7d and fm1 == 0x7fffe0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbeffffe0; op2val:0xbf800000; valaddr_reg:x16; val_offset:928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 928, x17, x15, 928, x18)

inst_4689:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbeffffe0; valaddr_reg:x16; val_offset:936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 936, x17, x15, 936, x18)

inst_4690:
// fs1 == 1 and fe1 == 0x7d and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe80003f; op2val:0xbf800000; valaddr_reg:x16; val_offset:944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 944, x17, x15, 944, x18)

inst_4691:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe80003f; valaddr_reg:x16; val_offset:952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 952, x17, x15, 952, x18)

inst_4692:
// fs1 == 1 and fe1 == 0x7d and fm1 == 0x7fffc0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbeffffc0; op2val:0xbf800000; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 960, x17, x15, 960, x18)

inst_4693:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbeffffc0; valaddr_reg:x16; val_offset:968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 968, x17, x15, 968, x18)

inst_4694:
// fs1 == 1 and fe1 == 0x7d and fm1 == 0x00007f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe80007f; op2val:0xbf800000; valaddr_reg:x16; val_offset:976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 976, x17, x15, 976, x18)

inst_4695:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe80007f; valaddr_reg:x16; val_offset:984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 984, x17, x15, 984, x18)

inst_4696:
// fs1 == 1 and fe1 == 0x7d and fm1 == 0x7fff80 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbeffff80; op2val:0xbf800000; valaddr_reg:x16; val_offset:992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 992, x17, x15, 992, x18)

inst_4697:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbeffff80; valaddr_reg:x16; val_offset:1000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1000, x17, x15, 1000, x18)

inst_4698:
// fs1 == 1 and fe1 == 0x7d and fm1 == 0x0000ff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe8000ff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1008, x17, x15, 1008, x18)

inst_4699:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe8000ff; valaddr_reg:x16; val_offset:1016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1016, x17, x15, 1016, x18)

inst_4700:
// fs1 == 1 and fe1 == 0x7d and fm1 == 0x7fff00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbeffff00; op2val:0xbf800000; valaddr_reg:x16; val_offset:1024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1024, x17, x15, 1024, x18)

inst_4701:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbeffff00; valaddr_reg:x16; val_offset:1032; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1032, x17, x15, 1032, x18)

inst_4702:
// fs1 == 1 and fe1 == 0x7d and fm1 == 0x0001ff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe8001ff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1040, x17, x15, 1040, x18)

inst_4703:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe8001ff; valaddr_reg:x16; val_offset:1048; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1048, x17, x15, 1048, x18)

inst_4704:
// fs1 == 1 and fe1 == 0x7d and fm1 == 0x7ffe00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbefffe00; op2val:0xbf800000; valaddr_reg:x16; val_offset:1056; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1056, x17, x15, 1056, x18)

inst_4705:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbefffe00; valaddr_reg:x16; val_offset:1064; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1064, x17, x15, 1064, x18)

inst_4706:
// fs1 == 1 and fe1 == 0x7d and fm1 == 0x0003ff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe8003ff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1072; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1072, x17, x15, 1072, x18)

inst_4707:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe8003ff; valaddr_reg:x16; val_offset:1080; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1080, x17, x15, 1080, x18)

inst_4708:
// fs1 == 1 and fe1 == 0x7d and fm1 == 0x7ffc00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbefffc00; op2val:0xbf800000; valaddr_reg:x16; val_offset:1088; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1088, x17, x15, 1088, x18)

inst_4709:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbefffc00; valaddr_reg:x16; val_offset:1096; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1096, x17, x15, 1096, x18)

inst_4710:
// fs1 == 1 and fe1 == 0x7d and fm1 == 0x0007ff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe8007ff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1104, x17, x15, 1104, x18)

inst_4711:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe8007ff; valaddr_reg:x16; val_offset:1112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1112, x17, x15, 1112, x18)

inst_4712:
// fs1 == 1 and fe1 == 0x7d and fm1 == 0x7ff800 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbefff800; op2val:0xbf800000; valaddr_reg:x16; val_offset:1120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1120, x17, x15, 1120, x18)

inst_4713:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbefff800; valaddr_reg:x16; val_offset:1128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1128, x17, x15, 1128, x18)

inst_4714:
// fs1 == 1 and fe1 == 0x7d and fm1 == 0x000fff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe800fff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1136, x17, x15, 1136, x18)

inst_4715:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe800fff; valaddr_reg:x16; val_offset:1144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1144, x17, x15, 1144, x18)

inst_4716:
// fs1 == 1 and fe1 == 0x7d and fm1 == 0x7ff000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbefff000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1152, x17, x15, 1152, x18)

inst_4717:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbefff000; valaddr_reg:x16; val_offset:1160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1160, x17, x15, 1160, x18)

inst_4718:
// fs1 == 1 and fe1 == 0x7d and fm1 == 0x001fff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe801fff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1168, x17, x15, 1168, x18)

inst_4719:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe801fff; valaddr_reg:x16; val_offset:1176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1176, x17, x15, 1176, x18)

inst_4720:
// fs1 == 1 and fe1 == 0x7d and fm1 == 0x7fe000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbeffe000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1184, x17, x15, 1184, x18)

inst_4721:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbeffe000; valaddr_reg:x16; val_offset:1192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1192, x17, x15, 1192, x18)

inst_4722:
// fs1 == 1 and fe1 == 0x7d and fm1 == 0x003fff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe803fff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1200, x17, x15, 1200, x18)

inst_4723:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe803fff; valaddr_reg:x16; val_offset:1208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1208, x17, x15, 1208, x18)

inst_4724:
// fs1 == 1 and fe1 == 0x7d and fm1 == 0x7fc000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbeffc000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1216, x17, x15, 1216, x18)

inst_4725:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbeffc000; valaddr_reg:x16; val_offset:1224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1224, x17, x15, 1224, x18)

inst_4726:
// fs1 == 1 and fe1 == 0x7d and fm1 == 0x007fff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe807fff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1232, x17, x15, 1232, x18)

inst_4727:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe807fff; valaddr_reg:x16; val_offset:1240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1240, x17, x15, 1240, x18)

inst_4728:
// fs1 == 1 and fe1 == 0x7d and fm1 == 0x7f8000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbeff8000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1248, x17, x15, 1248, x18)

inst_4729:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbeff8000; valaddr_reg:x16; val_offset:1256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1256, x17, x15, 1256, x18)

inst_4730:
// fs1 == 1 and fe1 == 0x7d and fm1 == 0x00ffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe80ffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1264, x17, x15, 1264, x18)

inst_4731:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe80ffff; valaddr_reg:x16; val_offset:1272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1272, x17, x15, 1272, x18)

inst_4732:
// fs1 == 1 and fe1 == 0x7d and fm1 == 0x7f0000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbeff0000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1280, x17, x15, 1280, x18)

inst_4733:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbeff0000; valaddr_reg:x16; val_offset:1288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1288, x17, x15, 1288, x18)

inst_4734:
// fs1 == 1 and fe1 == 0x7d and fm1 == 0x01ffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe81ffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1296, x17, x15, 1296, x18)

inst_4735:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe81ffff; valaddr_reg:x16; val_offset:1304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1304, x17, x15, 1304, x18)

inst_4736:
// fs1 == 1 and fe1 == 0x7d and fm1 == 0x7e0000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbefe0000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1312, x17, x15, 1312, x18)

inst_4737:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbefe0000; valaddr_reg:x16; val_offset:1320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1320, x17, x15, 1320, x18)

inst_4738:
// fs1 == 1 and fe1 == 0x7d and fm1 == 0x03ffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe83ffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1328, x17, x15, 1328, x18)

inst_4739:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe83ffff; valaddr_reg:x16; val_offset:1336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1336, x17, x15, 1336, x18)

inst_4740:
// fs1 == 1 and fe1 == 0x7d and fm1 == 0x7c0000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbefc0000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1344, x17, x15, 1344, x18)

inst_4741:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbefc0000; valaddr_reg:x16; val_offset:1352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1352, x17, x15, 1352, x18)

inst_4742:
// fs1 == 1 and fe1 == 0x7d and fm1 == 0x07ffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe87ffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1360, x17, x15, 1360, x18)

inst_4743:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe87ffff; valaddr_reg:x16; val_offset:1368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1368, x17, x15, 1368, x18)

inst_4744:
// fs1 == 1 and fe1 == 0x7d and fm1 == 0x780000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbef80000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1376, x17, x15, 1376, x18)

inst_4745:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbef80000; valaddr_reg:x16; val_offset:1384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1384, x17, x15, 1384, x18)

inst_4746:
// fs1 == 1 and fe1 == 0x7d and fm1 == 0x0fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe8fffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1392, x17, x15, 1392, x18)

inst_4747:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe8fffff; valaddr_reg:x16; val_offset:1400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1400, x17, x15, 1400, x18)

inst_4748:
// fs1 == 1 and fe1 == 0x7d and fm1 == 0x700000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbef00000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1408, x17, x15, 1408, x18)

inst_4749:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbef00000; valaddr_reg:x16; val_offset:1416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1416, x17, x15, 1416, x18)

inst_4750:
// fs1 == 1 and fe1 == 0x7d and fm1 == 0x1fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe9fffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1424, x17, x15, 1424, x18)

inst_4751:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe9fffff; valaddr_reg:x16; val_offset:1432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1432, x17, x15, 1432, x18)

inst_4752:
// fs1 == 1 and fe1 == 0x7d and fm1 == 0x600000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbee00000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1440, x17, x15, 1440, x18)

inst_4753:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbee00000; valaddr_reg:x16; val_offset:1448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1448, x17, x15, 1448, x18)

inst_4754:
// fs1 == 1 and fe1 == 0x7d and fm1 == 0x3fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbebfffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1456, x17, x15, 1456, x18)

inst_4755:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbebfffff; valaddr_reg:x16; val_offset:1464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1464, x17, x15, 1464, x18)

inst_4756:
// fs1 == 1 and fe1 == 0x7d and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbec00000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1472, x17, x15, 1472, x18)

inst_4757:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbec00000; valaddr_reg:x16; val_offset:1480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1480, x17, x15, 1480, x18)

inst_4758:
// fs1 == 1 and fe1 == 0x7d and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbeffffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1488, x17, x15, 1488, x18)

inst_4759:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbeffffff; valaddr_reg:x16; val_offset:1496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1496, x17, x15, 1496, x18)

inst_4760:
// fs1 == 1 and fe1 == 0x7c and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe000001; op2val:0xbf800000; valaddr_reg:x16; val_offset:1504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1504, x17, x15, 1504, x18)

inst_4761:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe000001; valaddr_reg:x16; val_offset:1512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1512, x17, x15, 1512, x18)

inst_4762:
// fs1 == 1 and fe1 == 0x7c and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe000000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1520, x17, x15, 1520, x18)

inst_4763:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe000000; valaddr_reg:x16; val_offset:1528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1528, x17, x15, 1528, x18)

inst_4764:
// fs1 == 1 and fe1 == 0x7c and fm1 == 0x7ffffe and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe7ffffe; op2val:0xbf800000; valaddr_reg:x16; val_offset:1536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1536, x17, x15, 1536, x18)

inst_4765:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe7ffffe; valaddr_reg:x16; val_offset:1544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1544, x17, x15, 1544, x18)

inst_4766:
// fs1 == 1 and fe1 == 0x7c and fm1 == 0x000003 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe000003; op2val:0xbf800000; valaddr_reg:x16; val_offset:1552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1552, x17, x15, 1552, x18)

inst_4767:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe000003; valaddr_reg:x16; val_offset:1560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1560, x17, x15, 1560, x18)

inst_4768:
// fs1 == 1 and fe1 == 0x7c and fm1 == 0x7ffffc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe7ffffc; op2val:0xbf800000; valaddr_reg:x16; val_offset:1568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1568, x17, x15, 1568, x18)

inst_4769:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe7ffffc; valaddr_reg:x16; val_offset:1576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1576, x17, x15, 1576, x18)

inst_4770:
// fs1 == 1 and fe1 == 0x7c and fm1 == 0x000007 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe000007; op2val:0xbf800000; valaddr_reg:x16; val_offset:1584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1584, x17, x15, 1584, x18)

inst_4771:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe000007; valaddr_reg:x16; val_offset:1592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1592, x17, x15, 1592, x18)

inst_4772:
// fs1 == 1 and fe1 == 0x7c and fm1 == 0x7ffff8 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe7ffff8; op2val:0xbf800000; valaddr_reg:x16; val_offset:1600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1600, x17, x15, 1600, x18)

inst_4773:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe7ffff8; valaddr_reg:x16; val_offset:1608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1608, x17, x15, 1608, x18)

inst_4774:
// fs1 == 1 and fe1 == 0x7c and fm1 == 0x00000f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe00000f; op2val:0xbf800000; valaddr_reg:x16; val_offset:1616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1616, x17, x15, 1616, x18)

inst_4775:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe00000f; valaddr_reg:x16; val_offset:1624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1624, x17, x15, 1624, x18)

inst_4776:
// fs1 == 1 and fe1 == 0x7c and fm1 == 0x7ffff0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe7ffff0; op2val:0xbf800000; valaddr_reg:x16; val_offset:1632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1632, x17, x15, 1632, x18)

inst_4777:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe7ffff0; valaddr_reg:x16; val_offset:1640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1640, x17, x15, 1640, x18)

inst_4778:
// fs1 == 1 and fe1 == 0x7c and fm1 == 0x00001f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe00001f; op2val:0xbf800000; valaddr_reg:x16; val_offset:1648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1648, x17, x15, 1648, x18)

inst_4779:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe00001f; valaddr_reg:x16; val_offset:1656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1656, x17, x15, 1656, x18)

inst_4780:
// fs1 == 1 and fe1 == 0x7c and fm1 == 0x7fffe0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe7fffe0; op2val:0xbf800000; valaddr_reg:x16; val_offset:1664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1664, x17, x15, 1664, x18)

inst_4781:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe7fffe0; valaddr_reg:x16; val_offset:1672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1672, x17, x15, 1672, x18)

inst_4782:
// fs1 == 1 and fe1 == 0x7c and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe00003f; op2val:0xbf800000; valaddr_reg:x16; val_offset:1680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1680, x17, x15, 1680, x18)

inst_4783:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe00003f; valaddr_reg:x16; val_offset:1688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1688, x17, x15, 1688, x18)

inst_4784:
// fs1 == 1 and fe1 == 0x7c and fm1 == 0x7fffc0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe7fffc0; op2val:0xbf800000; valaddr_reg:x16; val_offset:1696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1696, x17, x15, 1696, x18)

inst_4785:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe7fffc0; valaddr_reg:x16; val_offset:1704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1704, x17, x15, 1704, x18)

inst_4786:
// fs1 == 1 and fe1 == 0x7c and fm1 == 0x00007f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe00007f; op2val:0xbf800000; valaddr_reg:x16; val_offset:1712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1712, x17, x15, 1712, x18)

inst_4787:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe00007f; valaddr_reg:x16; val_offset:1720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1720, x17, x15, 1720, x18)

inst_4788:
// fs1 == 1 and fe1 == 0x7c and fm1 == 0x7fff80 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe7fff80; op2val:0xbf800000; valaddr_reg:x16; val_offset:1728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1728, x17, x15, 1728, x18)

inst_4789:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe7fff80; valaddr_reg:x16; val_offset:1736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1736, x17, x15, 1736, x18)

inst_4790:
// fs1 == 1 and fe1 == 0x7c and fm1 == 0x0000ff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe0000ff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1744, x17, x15, 1744, x18)

inst_4791:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe0000ff; valaddr_reg:x16; val_offset:1752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1752, x17, x15, 1752, x18)

inst_4792:
// fs1 == 1 and fe1 == 0x7c and fm1 == 0x7fff00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe7fff00; op2val:0xbf800000; valaddr_reg:x16; val_offset:1760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1760, x17, x15, 1760, x18)

inst_4793:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe7fff00; valaddr_reg:x16; val_offset:1768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1768, x17, x15, 1768, x18)

inst_4794:
// fs1 == 1 and fe1 == 0x7c and fm1 == 0x0001ff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe0001ff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1776, x17, x15, 1776, x18)

inst_4795:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe0001ff; valaddr_reg:x16; val_offset:1784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1784, x17, x15, 1784, x18)

inst_4796:
// fs1 == 1 and fe1 == 0x7c and fm1 == 0x7ffe00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe7ffe00; op2val:0xbf800000; valaddr_reg:x16; val_offset:1792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1792, x17, x15, 1792, x18)

inst_4797:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe7ffe00; valaddr_reg:x16; val_offset:1800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1800, x17, x15, 1800, x18)

inst_4798:
// fs1 == 1 and fe1 == 0x7c and fm1 == 0x0003ff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe0003ff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1808, x17, x15, 1808, x18)

inst_4799:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe0003ff; valaddr_reg:x16; val_offset:1816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1816, x17, x15, 1816, x18)

inst_4800:
// fs1 == 1 and fe1 == 0x7c and fm1 == 0x7ffc00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe7ffc00; op2val:0xbf800000; valaddr_reg:x16; val_offset:1824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1824, x17, x15, 1824, x18)

inst_4801:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe7ffc00; valaddr_reg:x16; val_offset:1832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1832, x17, x15, 1832, x18)

inst_4802:
// fs1 == 1 and fe1 == 0x7c and fm1 == 0x0007ff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe0007ff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1840, x17, x15, 1840, x18)

inst_4803:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe0007ff; valaddr_reg:x16; val_offset:1848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1848, x17, x15, 1848, x18)

inst_4804:
// fs1 == 1 and fe1 == 0x7c and fm1 == 0x7ff800 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe7ff800; op2val:0xbf800000; valaddr_reg:x16; val_offset:1856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1856, x17, x15, 1856, x18)

inst_4805:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe7ff800; valaddr_reg:x16; val_offset:1864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1864, x17, x15, 1864, x18)

inst_4806:
// fs1 == 1 and fe1 == 0x7c and fm1 == 0x000fff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe000fff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1872, x17, x15, 1872, x18)

inst_4807:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe000fff; valaddr_reg:x16; val_offset:1880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1880, x17, x15, 1880, x18)

inst_4808:
// fs1 == 1 and fe1 == 0x7c and fm1 == 0x7ff000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe7ff000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1888, x17, x15, 1888, x18)

inst_4809:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe7ff000; valaddr_reg:x16; val_offset:1896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1896, x17, x15, 1896, x18)

inst_4810:
// fs1 == 1 and fe1 == 0x7c and fm1 == 0x001fff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe001fff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1904, x17, x15, 1904, x18)

inst_4811:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe001fff; valaddr_reg:x16; val_offset:1912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1912, x17, x15, 1912, x18)

inst_4812:
// fs1 == 1 and fe1 == 0x7c and fm1 == 0x7fe000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe7fe000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1920, x17, x15, 1920, x18)

inst_4813:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe7fe000; valaddr_reg:x16; val_offset:1928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1928, x17, x15, 1928, x18)

inst_4814:
// fs1 == 1 and fe1 == 0x7c and fm1 == 0x003fff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe003fff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1936, x17, x15, 1936, x18)

inst_4815:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe003fff; valaddr_reg:x16; val_offset:1944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1944, x17, x15, 1944, x18)

inst_4816:
// fs1 == 1 and fe1 == 0x7c and fm1 == 0x7fc000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe7fc000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1952, x17, x15, 1952, x18)

inst_4817:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe7fc000; valaddr_reg:x16; val_offset:1960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1960, x17, x15, 1960, x18)

inst_4818:
// fs1 == 1 and fe1 == 0x7c and fm1 == 0x007fff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe007fff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1968, x17, x15, 1968, x18)

inst_4819:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe007fff; valaddr_reg:x16; val_offset:1976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1976, x17, x15, 1976, x18)

inst_4820:
// fs1 == 1 and fe1 == 0x7c and fm1 == 0x7f8000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe7f8000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1984, x17, x15, 1984, x18)

inst_4821:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe7f8000; valaddr_reg:x16; val_offset:1992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1992, x17, x15, 1992, x18)

inst_4822:
// fs1 == 1 and fe1 == 0x7c and fm1 == 0x00ffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe00ffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:2000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2000, x17, x15, 2000, x18)

inst_4823:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe00ffff; valaddr_reg:x16; val_offset:2008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2008, x17, x15, 2008, x18)

inst_4824:
// fs1 == 1 and fe1 == 0x7c and fm1 == 0x7f0000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe7f0000; op2val:0xbf800000; valaddr_reg:x16; val_offset:2016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2016, x17, x15, 2016, x18)

inst_4825:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe7f0000; valaddr_reg:x16; val_offset:2024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_20)

inst_4826:
// fs1 == 1 and fe1 == 0x7c and fm1 == 0x01ffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe01ffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_4827:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe01ffff; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 8, x17, x15, 8, x18)

inst_4828:
// fs1 == 1 and fe1 == 0x7c and fm1 == 0x7e0000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe7e0000; op2val:0xbf800000; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 16, x17, x15, 16, x18)

inst_4829:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe7e0000; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 24, x17, x15, 24, x18)

inst_4830:
// fs1 == 1 and fe1 == 0x7c and fm1 == 0x03ffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe03ffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 32, x17, x15, 32, x18)

inst_4831:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe03ffff; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 40, x17, x15, 40, x18)

inst_4832:
// fs1 == 1 and fe1 == 0x7c and fm1 == 0x7c0000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe7c0000; op2val:0xbf800000; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_4833:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe7c0000; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 56, x17, x15, 56, x18)

inst_4834:
// fs1 == 1 and fe1 == 0x7c and fm1 == 0x07ffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe07ffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 64, x17, x15, 64, x18)

inst_4835:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe07ffff; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 72, x17, x15, 72, x18)

inst_4836:
// fs1 == 1 and fe1 == 0x7c and fm1 == 0x780000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe780000; op2val:0xbf800000; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_4837:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe780000; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 88, x17, x15, 88, x18)

inst_4838:
// fs1 == 1 and fe1 == 0x7c and fm1 == 0x0fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe0fffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 96, x17, x15, 96, x18)

inst_4839:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe0fffff; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 104, x17, x15, 104, x18)

inst_4840:
// fs1 == 1 and fe1 == 0x7c and fm1 == 0x700000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe700000; op2val:0xbf800000; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 112, x17, x15, 112, x18)

inst_4841:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe700000; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 120, x17, x15, 120, x18)

inst_4842:
// fs1 == 1 and fe1 == 0x7c and fm1 == 0x1fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe1fffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_4843:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe1fffff; valaddr_reg:x16; val_offset:136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 136, x17, x15, 136, x18)

inst_4844:
// fs1 == 1 and fe1 == 0x7c and fm1 == 0x600000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe600000; op2val:0xbf800000; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 144, x17, x15, 144, x18)

inst_4845:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe600000; valaddr_reg:x16; val_offset:152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 152, x17, x15, 152, x18)

inst_4846:
// fs1 == 1 and fe1 == 0x7c and fm1 == 0x3fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe3fffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_4847:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe3fffff; valaddr_reg:x16; val_offset:168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 168, x17, x15, 168, x18)

inst_4848:
// fs1 == 1 and fe1 == 0x7c and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe400000; op2val:0xbf800000; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 176, x17, x15, 176, x18)

inst_4849:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe400000; valaddr_reg:x16; val_offset:184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 184, x17, x15, 184, x18)

inst_4850:
// fs1 == 1 and fe1 == 0x7c and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbe7fffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 192, x17, x15, 192, x18)

inst_4851:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbe7fffff; valaddr_reg:x16; val_offset:200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 200, x17, x15, 200, x18)

inst_4852:
// fs1 == 1 and fe1 == 0x7b and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbd800001; op2val:0xbf800000; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_4853:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbd800001; valaddr_reg:x16; val_offset:216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 216, x17, x15, 216, x18)

inst_4854:
// fs1 == 1 and fe1 == 0x7b and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbd800000; op2val:0xbf800000; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 224, x17, x15, 224, x18)

inst_4855:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbd800000; valaddr_reg:x16; val_offset:232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 232, x17, x15, 232, x18)

inst_4856:
// fs1 == 1 and fe1 == 0x7b and fm1 == 0x7ffffe and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbdfffffe; op2val:0xbf800000; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_4857:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbdfffffe; valaddr_reg:x16; val_offset:248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 248, x17, x15, 248, x18)

inst_4858:
// fs1 == 1 and fe1 == 0x7b and fm1 == 0x000003 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbd800003; op2val:0xbf800000; valaddr_reg:x16; val_offset:256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 256, x17, x15, 256, x18)

inst_4859:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbd800003; valaddr_reg:x16; val_offset:264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 264, x17, x15, 264, x18)

inst_4860:
// fs1 == 1 and fe1 == 0x7b and fm1 == 0x7ffffc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbdfffffc; op2val:0xbf800000; valaddr_reg:x16; val_offset:272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 272, x17, x15, 272, x18)

inst_4861:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbdfffffc; valaddr_reg:x16; val_offset:280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 280, x17, x15, 280, x18)

inst_4862:
// fs1 == 1 and fe1 == 0x7b and fm1 == 0x000007 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbd800007; op2val:0xbf800000; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_4863:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbd800007; valaddr_reg:x16; val_offset:296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 296, x17, x15, 296, x18)

inst_4864:
// fs1 == 1 and fe1 == 0x7b and fm1 == 0x7ffff8 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbdfffff8; op2val:0xbf800000; valaddr_reg:x16; val_offset:304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 304, x17, x15, 304, x18)

inst_4865:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbdfffff8; valaddr_reg:x16; val_offset:312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 312, x17, x15, 312, x18)

inst_4866:
// fs1 == 1 and fe1 == 0x7b and fm1 == 0x00000f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbd80000f; op2val:0xbf800000; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_4867:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbd80000f; valaddr_reg:x16; val_offset:328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 328, x17, x15, 328, x18)

inst_4868:
// fs1 == 1 and fe1 == 0x7b and fm1 == 0x7ffff0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbdfffff0; op2val:0xbf800000; valaddr_reg:x16; val_offset:336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 336, x17, x15, 336, x18)

inst_4869:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbdfffff0; valaddr_reg:x16; val_offset:344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 344, x17, x15, 344, x18)

inst_4870:
// fs1 == 1 and fe1 == 0x7b and fm1 == 0x00001f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbd80001f; op2val:0xbf800000; valaddr_reg:x16; val_offset:352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 352, x17, x15, 352, x18)

inst_4871:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbd80001f; valaddr_reg:x16; val_offset:360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 360, x17, x15, 360, x18)

inst_4872:
// fs1 == 1 and fe1 == 0x7b and fm1 == 0x7fffe0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbdffffe0; op2val:0xbf800000; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_4873:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbdffffe0; valaddr_reg:x16; val_offset:376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 376, x17, x15, 376, x18)

inst_4874:
// fs1 == 1 and fe1 == 0x7b and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbd80003f; op2val:0xbf800000; valaddr_reg:x16; val_offset:384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 384, x17, x15, 384, x18)

inst_4875:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbd80003f; valaddr_reg:x16; val_offset:392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 392, x17, x15, 392, x18)

inst_4876:
// fs1 == 1 and fe1 == 0x7b and fm1 == 0x7fffc0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbdffffc0; op2val:0xbf800000; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_4877:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbdffffc0; valaddr_reg:x16; val_offset:408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 408, x17, x15, 408, x18)

inst_4878:
// fs1 == 1 and fe1 == 0x7b and fm1 == 0x00007f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbd80007f; op2val:0xbf800000; valaddr_reg:x16; val_offset:416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 416, x17, x15, 416, x18)

inst_4879:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbd80007f; valaddr_reg:x16; val_offset:424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 424, x17, x15, 424, x18)

inst_4880:
// fs1 == 1 and fe1 == 0x7b and fm1 == 0x7fff80 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbdffff80; op2val:0xbf800000; valaddr_reg:x16; val_offset:432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 432, x17, x15, 432, x18)

inst_4881:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbdffff80; valaddr_reg:x16; val_offset:440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 440, x17, x15, 440, x18)

inst_4882:
// fs1 == 1 and fe1 == 0x7b and fm1 == 0x0000ff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbd8000ff; op2val:0xbf800000; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_4883:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbd8000ff; valaddr_reg:x16; val_offset:456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 456, x17, x15, 456, x18)

inst_4884:
// fs1 == 1 and fe1 == 0x7b and fm1 == 0x7fff00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbdffff00; op2val:0xbf800000; valaddr_reg:x16; val_offset:464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 464, x17, x15, 464, x18)

inst_4885:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbdffff00; valaddr_reg:x16; val_offset:472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 472, x17, x15, 472, x18)

inst_4886:
// fs1 == 1 and fe1 == 0x7b and fm1 == 0x0001ff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbd8001ff; op2val:0xbf800000; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_4887:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbd8001ff; valaddr_reg:x16; val_offset:488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 488, x17, x15, 488, x18)

inst_4888:
// fs1 == 1 and fe1 == 0x7b and fm1 == 0x7ffe00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbdfffe00; op2val:0xbf800000; valaddr_reg:x16; val_offset:496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 496, x17, x15, 496, x18)

inst_4889:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbdfffe00; valaddr_reg:x16; val_offset:504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 504, x17, x15, 504, x18)

inst_4890:
// fs1 == 1 and fe1 == 0x7b and fm1 == 0x0003ff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbd8003ff; op2val:0xbf800000; valaddr_reg:x16; val_offset:512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 512, x17, x15, 512, x18)

inst_4891:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbd8003ff; valaddr_reg:x16; val_offset:520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 520, x17, x15, 520, x18)

inst_4892:
// fs1 == 1 and fe1 == 0x7b and fm1 == 0x7ffc00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbdfffc00; op2val:0xbf800000; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_4893:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbdfffc00; valaddr_reg:x16; val_offset:536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 536, x17, x15, 536, x18)

inst_4894:
// fs1 == 1 and fe1 == 0x7b and fm1 == 0x0007ff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbd8007ff; op2val:0xbf800000; valaddr_reg:x16; val_offset:544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 544, x17, x15, 544, x18)

inst_4895:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbd8007ff; valaddr_reg:x16; val_offset:552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 552, x17, x15, 552, x18)

inst_4896:
// fs1 == 1 and fe1 == 0x7b and fm1 == 0x7ff800 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbdfff800; op2val:0xbf800000; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_4897:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbdfff800; valaddr_reg:x16; val_offset:568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 568, x17, x15, 568, x18)

inst_4898:
// fs1 == 1 and fe1 == 0x7b and fm1 == 0x000fff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbd800fff; op2val:0xbf800000; valaddr_reg:x16; val_offset:576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 576, x17, x15, 576, x18)

inst_4899:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbd800fff; valaddr_reg:x16; val_offset:584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 584, x17, x15, 584, x18)

inst_4900:
// fs1 == 1 and fe1 == 0x7b and fm1 == 0x7ff000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbdfff000; op2val:0xbf800000; valaddr_reg:x16; val_offset:592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 592, x17, x15, 592, x18)

inst_4901:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbdfff000; valaddr_reg:x16; val_offset:600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 600, x17, x15, 600, x18)

inst_4902:
// fs1 == 1 and fe1 == 0x7b and fm1 == 0x001fff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbd801fff; op2val:0xbf800000; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 608, x17, x15, 608, x18)

inst_4903:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbd801fff; valaddr_reg:x16; val_offset:616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 616, x17, x15, 616, x18)

inst_4904:
// fs1 == 1 and fe1 == 0x7b and fm1 == 0x7fe000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbdffe000; op2val:0xbf800000; valaddr_reg:x16; val_offset:624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 624, x17, x15, 624, x18)

inst_4905:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbdffe000; valaddr_reg:x16; val_offset:632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 632, x17, x15, 632, x18)

inst_4906:
// fs1 == 1 and fe1 == 0x7b and fm1 == 0x003fff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbd803fff; op2val:0xbf800000; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_4907:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbd803fff; valaddr_reg:x16; val_offset:648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 648, x17, x15, 648, x18)

inst_4908:
// fs1 == 1 and fe1 == 0x7b and fm1 == 0x7fc000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbdffc000; op2val:0xbf800000; valaddr_reg:x16; val_offset:656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 656, x17, x15, 656, x18)

inst_4909:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbdffc000; valaddr_reg:x16; val_offset:664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 664, x17, x15, 664, x18)

inst_4910:
// fs1 == 1 and fe1 == 0x7b and fm1 == 0x007fff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbd807fff; op2val:0xbf800000; valaddr_reg:x16; val_offset:672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 672, x17, x15, 672, x18)

inst_4911:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbd807fff; valaddr_reg:x16; val_offset:680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 680, x17, x15, 680, x18)

inst_4912:
// fs1 == 1 and fe1 == 0x7b and fm1 == 0x7f8000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbdff8000; op2val:0xbf800000; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 688, x17, x15, 688, x18)

inst_4913:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbdff8000; valaddr_reg:x16; val_offset:696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 696, x17, x15, 696, x18)

inst_4914:
// fs1 == 1 and fe1 == 0x7b and fm1 == 0x00ffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbd80ffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 704, x17, x15, 704, x18)

inst_4915:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbd80ffff; valaddr_reg:x16; val_offset:712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 712, x17, x15, 712, x18)

inst_4916:
// fs1 == 1 and fe1 == 0x7b and fm1 == 0x7f0000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbdff0000; op2val:0xbf800000; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_4917:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbdff0000; valaddr_reg:x16; val_offset:728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 728, x17, x15, 728, x18)

inst_4918:
// fs1 == 1 and fe1 == 0x7b and fm1 == 0x01ffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbd81ffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 736, x17, x15, 736, x18)

inst_4919:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbd81ffff; valaddr_reg:x16; val_offset:744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 744, x17, x15, 744, x18)

inst_4920:
// fs1 == 1 and fe1 == 0x7b and fm1 == 0x7e0000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbdfe0000; op2val:0xbf800000; valaddr_reg:x16; val_offset:752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 752, x17, x15, 752, x18)

inst_4921:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbdfe0000; valaddr_reg:x16; val_offset:760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 760, x17, x15, 760, x18)

inst_4922:
// fs1 == 1 and fe1 == 0x7b and fm1 == 0x03ffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbd83ffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 768, x17, x15, 768, x18)

inst_4923:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbd83ffff; valaddr_reg:x16; val_offset:776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 776, x17, x15, 776, x18)

inst_4924:
// fs1 == 1 and fe1 == 0x7b and fm1 == 0x7c0000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbdfc0000; op2val:0xbf800000; valaddr_reg:x16; val_offset:784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 784, x17, x15, 784, x18)

inst_4925:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbdfc0000; valaddr_reg:x16; val_offset:792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 792, x17, x15, 792, x18)

inst_4926:
// fs1 == 1 and fe1 == 0x7b and fm1 == 0x07ffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbd87ffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_4927:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbd87ffff; valaddr_reg:x16; val_offset:808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 808, x17, x15, 808, x18)

inst_4928:
// fs1 == 1 and fe1 == 0x7b and fm1 == 0x780000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbdf80000; op2val:0xbf800000; valaddr_reg:x16; val_offset:816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 816, x17, x15, 816, x18)

inst_4929:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbdf80000; valaddr_reg:x16; val_offset:824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 824, x17, x15, 824, x18)

inst_4930:
// fs1 == 1 and fe1 == 0x7b and fm1 == 0x0fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbd8fffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 832, x17, x15, 832, x18)

inst_4931:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbd8fffff; valaddr_reg:x16; val_offset:840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 840, x17, x15, 840, x18)

inst_4932:
// fs1 == 1 and fe1 == 0x7b and fm1 == 0x700000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbdf00000; op2val:0xbf800000; valaddr_reg:x16; val_offset:848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 848, x17, x15, 848, x18)

inst_4933:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbdf00000; valaddr_reg:x16; val_offset:856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 856, x17, x15, 856, x18)

inst_4934:
// fs1 == 1 and fe1 == 0x7b and fm1 == 0x1fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbd9fffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 864, x17, x15, 864, x18)

inst_4935:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbd9fffff; valaddr_reg:x16; val_offset:872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 872, x17, x15, 872, x18)

inst_4936:
// fs1 == 1 and fe1 == 0x7b and fm1 == 0x600000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbde00000; op2val:0xbf800000; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 880, x17, x15, 880, x18)

inst_4937:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbde00000; valaddr_reg:x16; val_offset:888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 888, x17, x15, 888, x18)

inst_4938:
// fs1 == 1 and fe1 == 0x7b and fm1 == 0x3fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbdbfffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 896, x17, x15, 896, x18)

inst_4939:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbdbfffff; valaddr_reg:x16; val_offset:904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 904, x17, x15, 904, x18)

inst_4940:
// fs1 == 1 and fe1 == 0x7b and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbdc00000; op2val:0xbf800000; valaddr_reg:x16; val_offset:912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 912, x17, x15, 912, x18)

inst_4941:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbdc00000; valaddr_reg:x16; val_offset:920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 920, x17, x15, 920, x18)

inst_4942:
// fs1 == 1 and fe1 == 0x7b and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbdffffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 928, x17, x15, 928, x18)

inst_4943:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xbdffffff; valaddr_reg:x16; val_offset:936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 936, x17, x15, 936, x18)

inst_4944:
// fs1 == 1 and fe1 == 0x88 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc4000001; op2val:0xbf800000; valaddr_reg:x16; val_offset:944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 944, x17, x15, 944, x18)

inst_4945:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc4000001; valaddr_reg:x16; val_offset:952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 952, x17, x15, 952, x18)

inst_4946:
// fs1 == 1 and fe1 == 0x88 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc4000000; op2val:0xbf800000; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 960, x17, x15, 960, x18)

inst_4947:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc4000000; valaddr_reg:x16; val_offset:968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 968, x17, x15, 968, x18)

inst_4948:
// fs1 == 1 and fe1 == 0x88 and fm1 == 0x7ffffe and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc47ffffe; op2val:0xbf800000; valaddr_reg:x16; val_offset:976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 976, x17, x15, 976, x18)

inst_4949:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc47ffffe; valaddr_reg:x16; val_offset:984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 984, x17, x15, 984, x18)

inst_4950:
// fs1 == 1 and fe1 == 0x88 and fm1 == 0x000003 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc4000003; op2val:0xbf800000; valaddr_reg:x16; val_offset:992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 992, x17, x15, 992, x18)

inst_4951:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc4000003; valaddr_reg:x16; val_offset:1000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1000, x17, x15, 1000, x18)

inst_4952:
// fs1 == 1 and fe1 == 0x88 and fm1 == 0x7ffffc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc47ffffc; op2val:0xbf800000; valaddr_reg:x16; val_offset:1008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1008, x17, x15, 1008, x18)

inst_4953:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc47ffffc; valaddr_reg:x16; val_offset:1016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1016, x17, x15, 1016, x18)

inst_4954:
// fs1 == 1 and fe1 == 0x88 and fm1 == 0x000007 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc4000007; op2val:0xbf800000; valaddr_reg:x16; val_offset:1024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1024, x17, x15, 1024, x18)

inst_4955:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc4000007; valaddr_reg:x16; val_offset:1032; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1032, x17, x15, 1032, x18)

inst_4956:
// fs1 == 1 and fe1 == 0x88 and fm1 == 0x7ffff8 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc47ffff8; op2val:0xbf800000; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1040, x17, x15, 1040, x18)

inst_4957:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc47ffff8; valaddr_reg:x16; val_offset:1048; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1048, x17, x15, 1048, x18)

inst_4958:
// fs1 == 1 and fe1 == 0x88 and fm1 == 0x00000f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc400000f; op2val:0xbf800000; valaddr_reg:x16; val_offset:1056; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1056, x17, x15, 1056, x18)

inst_4959:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc400000f; valaddr_reg:x16; val_offset:1064; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1064, x17, x15, 1064, x18)

inst_4960:
// fs1 == 1 and fe1 == 0x88 and fm1 == 0x7ffff0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc47ffff0; op2val:0xbf800000; valaddr_reg:x16; val_offset:1072; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1072, x17, x15, 1072, x18)

inst_4961:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc47ffff0; valaddr_reg:x16; val_offset:1080; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1080, x17, x15, 1080, x18)

inst_4962:
// fs1 == 1 and fe1 == 0x88 and fm1 == 0x00001f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc400001f; op2val:0xbf800000; valaddr_reg:x16; val_offset:1088; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1088, x17, x15, 1088, x18)

inst_4963:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc400001f; valaddr_reg:x16; val_offset:1096; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1096, x17, x15, 1096, x18)

inst_4964:
// fs1 == 1 and fe1 == 0x88 and fm1 == 0x7fffe0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc47fffe0; op2val:0xbf800000; valaddr_reg:x16; val_offset:1104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1104, x17, x15, 1104, x18)

inst_4965:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc47fffe0; valaddr_reg:x16; val_offset:1112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1112, x17, x15, 1112, x18)

inst_4966:
// fs1 == 1 and fe1 == 0x88 and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc400003f; op2val:0xbf800000; valaddr_reg:x16; val_offset:1120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1120, x17, x15, 1120, x18)

inst_4967:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc400003f; valaddr_reg:x16; val_offset:1128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1128, x17, x15, 1128, x18)

inst_4968:
// fs1 == 1 and fe1 == 0x88 and fm1 == 0x7fffc0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc47fffc0; op2val:0xbf800000; valaddr_reg:x16; val_offset:1136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1136, x17, x15, 1136, x18)

inst_4969:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc47fffc0; valaddr_reg:x16; val_offset:1144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1144, x17, x15, 1144, x18)

inst_4970:
// fs1 == 1 and fe1 == 0x88 and fm1 == 0x00007f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc400007f; op2val:0xbf800000; valaddr_reg:x16; val_offset:1152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1152, x17, x15, 1152, x18)

inst_4971:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc400007f; valaddr_reg:x16; val_offset:1160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1160, x17, x15, 1160, x18)

inst_4972:
// fs1 == 1 and fe1 == 0x88 and fm1 == 0x7fff80 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc47fff80; op2val:0xbf800000; valaddr_reg:x16; val_offset:1168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1168, x17, x15, 1168, x18)

inst_4973:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc47fff80; valaddr_reg:x16; val_offset:1176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1176, x17, x15, 1176, x18)

inst_4974:
// fs1 == 1 and fe1 == 0x88 and fm1 == 0x0000ff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc40000ff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1184, x17, x15, 1184, x18)

inst_4975:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc40000ff; valaddr_reg:x16; val_offset:1192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1192, x17, x15, 1192, x18)

inst_4976:
// fs1 == 1 and fe1 == 0x88 and fm1 == 0x7fff00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc47fff00; op2val:0xbf800000; valaddr_reg:x16; val_offset:1200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1200, x17, x15, 1200, x18)

inst_4977:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc47fff00; valaddr_reg:x16; val_offset:1208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1208, x17, x15, 1208, x18)

inst_4978:
// fs1 == 1 and fe1 == 0x88 and fm1 == 0x0001ff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc40001ff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1216, x17, x15, 1216, x18)

inst_4979:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc40001ff; valaddr_reg:x16; val_offset:1224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1224, x17, x15, 1224, x18)

inst_4980:
// fs1 == 1 and fe1 == 0x88 and fm1 == 0x7ffe00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc47ffe00; op2val:0xbf800000; valaddr_reg:x16; val_offset:1232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1232, x17, x15, 1232, x18)

inst_4981:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc47ffe00; valaddr_reg:x16; val_offset:1240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1240, x17, x15, 1240, x18)

inst_4982:
// fs1 == 1 and fe1 == 0x88 and fm1 == 0x0003ff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc40003ff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1248, x17, x15, 1248, x18)

inst_4983:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc40003ff; valaddr_reg:x16; val_offset:1256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1256, x17, x15, 1256, x18)

inst_4984:
// fs1 == 1 and fe1 == 0x88 and fm1 == 0x7ffc00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc47ffc00; op2val:0xbf800000; valaddr_reg:x16; val_offset:1264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1264, x17, x15, 1264, x18)

inst_4985:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc47ffc00; valaddr_reg:x16; val_offset:1272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1272, x17, x15, 1272, x18)

inst_4986:
// fs1 == 1 and fe1 == 0x88 and fm1 == 0x0007ff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc40007ff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1280, x17, x15, 1280, x18)

inst_4987:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc40007ff; valaddr_reg:x16; val_offset:1288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1288, x17, x15, 1288, x18)

inst_4988:
// fs1 == 1 and fe1 == 0x88 and fm1 == 0x7ff800 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc47ff800; op2val:0xbf800000; valaddr_reg:x16; val_offset:1296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1296, x17, x15, 1296, x18)

inst_4989:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc47ff800; valaddr_reg:x16; val_offset:1304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1304, x17, x15, 1304, x18)

inst_4990:
// fs1 == 1 and fe1 == 0x88 and fm1 == 0x000fff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc4000fff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1312, x17, x15, 1312, x18)

inst_4991:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc4000fff; valaddr_reg:x16; val_offset:1320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1320, x17, x15, 1320, x18)

inst_4992:
// fs1 == 1 and fe1 == 0x88 and fm1 == 0x7ff000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc47ff000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1328, x17, x15, 1328, x18)

inst_4993:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc47ff000; valaddr_reg:x16; val_offset:1336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1336, x17, x15, 1336, x18)

inst_4994:
// fs1 == 1 and fe1 == 0x88 and fm1 == 0x001fff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc4001fff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1344, x17, x15, 1344, x18)

inst_4995:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc4001fff; valaddr_reg:x16; val_offset:1352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1352, x17, x15, 1352, x18)

inst_4996:
// fs1 == 1 and fe1 == 0x88 and fm1 == 0x7fe000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc47fe000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1360, x17, x15, 1360, x18)

inst_4997:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc47fe000; valaddr_reg:x16; val_offset:1368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1368, x17, x15, 1368, x18)

inst_4998:
// fs1 == 1 and fe1 == 0x88 and fm1 == 0x003fff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc4003fff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1376, x17, x15, 1376, x18)

inst_4999:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc4003fff; valaddr_reg:x16; val_offset:1384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1384, x17, x15, 1384, x18)

inst_5000:
// fs1 == 1 and fe1 == 0x88 and fm1 == 0x7fc000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc47fc000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1392, x17, x15, 1392, x18)

inst_5001:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc47fc000; valaddr_reg:x16; val_offset:1400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1400, x17, x15, 1400, x18)

inst_5002:
// fs1 == 1 and fe1 == 0x88 and fm1 == 0x007fff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc4007fff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1408, x17, x15, 1408, x18)

inst_5003:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc4007fff; valaddr_reg:x16; val_offset:1416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1416, x17, x15, 1416, x18)

inst_5004:
// fs1 == 1 and fe1 == 0x88 and fm1 == 0x7f8000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc47f8000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1424, x17, x15, 1424, x18)

inst_5005:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc47f8000; valaddr_reg:x16; val_offset:1432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1432, x17, x15, 1432, x18)

inst_5006:
// fs1 == 1 and fe1 == 0x88 and fm1 == 0x00ffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc400ffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1440, x17, x15, 1440, x18)

inst_5007:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc400ffff; valaddr_reg:x16; val_offset:1448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1448, x17, x15, 1448, x18)

inst_5008:
// fs1 == 1 and fe1 == 0x88 and fm1 == 0x7f0000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc47f0000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1456, x17, x15, 1456, x18)

inst_5009:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc47f0000; valaddr_reg:x16; val_offset:1464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1464, x17, x15, 1464, x18)

inst_5010:
// fs1 == 1 and fe1 == 0x88 and fm1 == 0x01ffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc401ffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1472, x17, x15, 1472, x18)

inst_5011:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc401ffff; valaddr_reg:x16; val_offset:1480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1480, x17, x15, 1480, x18)

inst_5012:
// fs1 == 1 and fe1 == 0x88 and fm1 == 0x7e0000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc47e0000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1488, x17, x15, 1488, x18)

inst_5013:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc47e0000; valaddr_reg:x16; val_offset:1496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1496, x17, x15, 1496, x18)

inst_5014:
// fs1 == 1 and fe1 == 0x88 and fm1 == 0x03ffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc403ffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1504, x17, x15, 1504, x18)

inst_5015:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc403ffff; valaddr_reg:x16; val_offset:1512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1512, x17, x15, 1512, x18)

inst_5016:
// fs1 == 1 and fe1 == 0x88 and fm1 == 0x7c0000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc47c0000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1520, x17, x15, 1520, x18)

inst_5017:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc47c0000; valaddr_reg:x16; val_offset:1528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1528, x17, x15, 1528, x18)

inst_5018:
// fs1 == 1 and fe1 == 0x88 and fm1 == 0x07ffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc407ffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1536, x17, x15, 1536, x18)

inst_5019:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc407ffff; valaddr_reg:x16; val_offset:1544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1544, x17, x15, 1544, x18)

inst_5020:
// fs1 == 1 and fe1 == 0x88 and fm1 == 0x780000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc4780000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1552, x17, x15, 1552, x18)

inst_5021:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc4780000; valaddr_reg:x16; val_offset:1560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1560, x17, x15, 1560, x18)

inst_5022:
// fs1 == 1 and fe1 == 0x88 and fm1 == 0x0fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc40fffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1568, x17, x15, 1568, x18)

inst_5023:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc40fffff; valaddr_reg:x16; val_offset:1576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1576, x17, x15, 1576, x18)

inst_5024:
// fs1 == 1 and fe1 == 0x88 and fm1 == 0x700000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc4700000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1584, x17, x15, 1584, x18)

inst_5025:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc4700000; valaddr_reg:x16; val_offset:1592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1592, x17, x15, 1592, x18)

inst_5026:
// fs1 == 1 and fe1 == 0x88 and fm1 == 0x1fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc41fffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1600, x17, x15, 1600, x18)

inst_5027:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc41fffff; valaddr_reg:x16; val_offset:1608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1608, x17, x15, 1608, x18)

inst_5028:
// fs1 == 1 and fe1 == 0x88 and fm1 == 0x600000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc4600000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1616, x17, x15, 1616, x18)

inst_5029:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc4600000; valaddr_reg:x16; val_offset:1624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1624, x17, x15, 1624, x18)

inst_5030:
// fs1 == 1 and fe1 == 0x88 and fm1 == 0x3fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc43fffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1632, x17, x15, 1632, x18)

inst_5031:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc43fffff; valaddr_reg:x16; val_offset:1640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1640, x17, x15, 1640, x18)

inst_5032:
// fs1 == 1 and fe1 == 0x88 and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc4400000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1648, x17, x15, 1648, x18)

inst_5033:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc4400000; valaddr_reg:x16; val_offset:1656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1656, x17, x15, 1656, x18)

inst_5034:
// fs1 == 1 and fe1 == 0x88 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc47fffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1664, x17, x15, 1664, x18)

inst_5035:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0xc47fffff; valaddr_reg:x16; val_offset:1672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1672, x17, x15, 1672, x18)

inst_5036:
// fs1 == 1 and fe1 == 0x35 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x9a800001; op2val:0xbf800000; valaddr_reg:x16; val_offset:1680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1680, x17, x15, 1680, x18)

inst_5037:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x35 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0x9a800001; valaddr_reg:x16; val_offset:1688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1688, x17, x15, 1688, x18)

inst_5038:
// fs1 == 1 and fe1 == 0x35 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x9a800000; op2val:0xbf800000; valaddr_reg:x16; val_offset:1696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1696, x17, x15, 1696, x18)

inst_5039:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x35 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0x9a800000; valaddr_reg:x16; val_offset:1704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1704, x17, x15, 1704, x18)

inst_5040:
// fs1 == 1 and fe1 == 0x35 and fm1 == 0x7ffffe and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x9afffffe; op2val:0xbf800000; valaddr_reg:x16; val_offset:1712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1712, x17, x15, 1712, x18)

inst_5041:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x35 and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0x9afffffe; valaddr_reg:x16; val_offset:1720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1720, x17, x15, 1720, x18)

inst_5042:
// fs1 == 1 and fe1 == 0x35 and fm1 == 0x000003 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x9a800003; op2val:0xbf800000; valaddr_reg:x16; val_offset:1728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1728, x17, x15, 1728, x18)

inst_5043:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x35 and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0x9a800003; valaddr_reg:x16; val_offset:1736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1736, x17, x15, 1736, x18)

inst_5044:
// fs1 == 1 and fe1 == 0x35 and fm1 == 0x7ffffc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x9afffffc; op2val:0xbf800000; valaddr_reg:x16; val_offset:1744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1744, x17, x15, 1744, x18)

inst_5045:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x35 and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0x9afffffc; valaddr_reg:x16; val_offset:1752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1752, x17, x15, 1752, x18)

inst_5046:
// fs1 == 1 and fe1 == 0x35 and fm1 == 0x000007 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x9a800007; op2val:0xbf800000; valaddr_reg:x16; val_offset:1760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1760, x17, x15, 1760, x18)

inst_5047:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x35 and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0x9a800007; valaddr_reg:x16; val_offset:1768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1768, x17, x15, 1768, x18)

inst_5048:
// fs1 == 1 and fe1 == 0x35 and fm1 == 0x7ffff8 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x9afffff8; op2val:0xbf800000; valaddr_reg:x16; val_offset:1776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1776, x17, x15, 1776, x18)

inst_5049:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x35 and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0x9afffff8; valaddr_reg:x16; val_offset:1784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1784, x17, x15, 1784, x18)

inst_5050:
// fs1 == 1 and fe1 == 0x35 and fm1 == 0x00000f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x9a80000f; op2val:0xbf800000; valaddr_reg:x16; val_offset:1792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1792, x17, x15, 1792, x18)

inst_5051:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x35 and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0x9a80000f; valaddr_reg:x16; val_offset:1800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1800, x17, x15, 1800, x18)

inst_5052:
// fs1 == 1 and fe1 == 0x35 and fm1 == 0x7ffff0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x9afffff0; op2val:0xbf800000; valaddr_reg:x16; val_offset:1808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1808, x17, x15, 1808, x18)

inst_5053:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x35 and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0x9afffff0; valaddr_reg:x16; val_offset:1816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1816, x17, x15, 1816, x18)

inst_5054:
// fs1 == 1 and fe1 == 0x35 and fm1 == 0x00001f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x9a80001f; op2val:0xbf800000; valaddr_reg:x16; val_offset:1824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1824, x17, x15, 1824, x18)

inst_5055:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x35 and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0x9a80001f; valaddr_reg:x16; val_offset:1832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1832, x17, x15, 1832, x18)

inst_5056:
// fs1 == 1 and fe1 == 0x35 and fm1 == 0x7fffe0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x9affffe0; op2val:0xbf800000; valaddr_reg:x16; val_offset:1840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1840, x17, x15, 1840, x18)

inst_5057:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x35 and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0x9affffe0; valaddr_reg:x16; val_offset:1848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1848, x17, x15, 1848, x18)

inst_5058:
// fs1 == 1 and fe1 == 0x35 and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x9a80003f; op2val:0xbf800000; valaddr_reg:x16; val_offset:1856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1856, x17, x15, 1856, x18)

inst_5059:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x35 and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0x9a80003f; valaddr_reg:x16; val_offset:1864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1864, x17, x15, 1864, x18)

inst_5060:
// fs1 == 1 and fe1 == 0x35 and fm1 == 0x7fffc0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x9affffc0; op2val:0xbf800000; valaddr_reg:x16; val_offset:1872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1872, x17, x15, 1872, x18)

inst_5061:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x35 and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0x9affffc0; valaddr_reg:x16; val_offset:1880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1880, x17, x15, 1880, x18)

inst_5062:
// fs1 == 1 and fe1 == 0x35 and fm1 == 0x00007f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x9a80007f; op2val:0xbf800000; valaddr_reg:x16; val_offset:1888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1888, x17, x15, 1888, x18)

inst_5063:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x35 and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0x9a80007f; valaddr_reg:x16; val_offset:1896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1896, x17, x15, 1896, x18)

inst_5064:
// fs1 == 1 and fe1 == 0x35 and fm1 == 0x7fff80 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x9affff80; op2val:0xbf800000; valaddr_reg:x16; val_offset:1904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1904, x17, x15, 1904, x18)

inst_5065:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x35 and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0x9affff80; valaddr_reg:x16; val_offset:1912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1912, x17, x15, 1912, x18)

inst_5066:
// fs1 == 1 and fe1 == 0x35 and fm1 == 0x0000ff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x9a8000ff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1920, x17, x15, 1920, x18)

inst_5067:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x35 and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0x9a8000ff; valaddr_reg:x16; val_offset:1928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1928, x17, x15, 1928, x18)

inst_5068:
// fs1 == 1 and fe1 == 0x35 and fm1 == 0x7fff00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x9affff00; op2val:0xbf800000; valaddr_reg:x16; val_offset:1936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1936, x17, x15, 1936, x18)

inst_5069:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x35 and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0x9affff00; valaddr_reg:x16; val_offset:1944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1944, x17, x15, 1944, x18)

inst_5070:
// fs1 == 1 and fe1 == 0x35 and fm1 == 0x0001ff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x9a8001ff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1952, x17, x15, 1952, x18)

inst_5071:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x35 and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0x9a8001ff; valaddr_reg:x16; val_offset:1960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1960, x17, x15, 1960, x18)

inst_5072:
// fs1 == 1 and fe1 == 0x35 and fm1 == 0x7ffe00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x9afffe00; op2val:0xbf800000; valaddr_reg:x16; val_offset:1968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1968, x17, x15, 1968, x18)

inst_5073:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x35 and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0x9afffe00; valaddr_reg:x16; val_offset:1976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1976, x17, x15, 1976, x18)

inst_5074:
// fs1 == 1 and fe1 == 0x35 and fm1 == 0x0003ff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x9a8003ff; op2val:0xbf800000; valaddr_reg:x16; val_offset:1984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1984, x17, x15, 1984, x18)

inst_5075:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x35 and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0x9a8003ff; valaddr_reg:x16; val_offset:1992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1992, x17, x15, 1992, x18)

inst_5076:
// fs1 == 1 and fe1 == 0x35 and fm1 == 0x7ffc00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x9afffc00; op2val:0xbf800000; valaddr_reg:x16; val_offset:2000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2000, x17, x15, 2000, x18)

inst_5077:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x35 and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0x9afffc00; valaddr_reg:x16; val_offset:2008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2008, x17, x15, 2008, x18)

inst_5078:
// fs1 == 1 and fe1 == 0x35 and fm1 == 0x0007ff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x9a8007ff; op2val:0xbf800000; valaddr_reg:x16; val_offset:2016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2016, x17, x15, 2016, x18)

inst_5079:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x35 and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0x9a8007ff; valaddr_reg:x16; val_offset:2024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_21)

inst_5080:
// fs1 == 1 and fe1 == 0x35 and fm1 == 0x7ff800 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x9afff800; op2val:0xbf800000; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_5081:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x35 and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0x9afff800; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 8, x17, x15, 8, x18)

inst_5082:
// fs1 == 1 and fe1 == 0x35 and fm1 == 0x000fff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x9a800fff; op2val:0xbf800000; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 16, x17, x15, 16, x18)

inst_5083:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x35 and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0x9a800fff; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 24, x17, x15, 24, x18)

inst_5084:
// fs1 == 1 and fe1 == 0x35 and fm1 == 0x7ff000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x9afff000; op2val:0xbf800000; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 32, x17, x15, 32, x18)

inst_5085:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x35 and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0x9afff000; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 40, x17, x15, 40, x18)

inst_5086:
// fs1 == 1 and fe1 == 0x35 and fm1 == 0x001fff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x9a801fff; op2val:0xbf800000; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_5087:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x35 and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0x9a801fff; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 56, x17, x15, 56, x18)

inst_5088:
// fs1 == 1 and fe1 == 0x35 and fm1 == 0x7fe000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x9affe000; op2val:0xbf800000; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 64, x17, x15, 64, x18)

inst_5089:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x35 and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0x9affe000; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 72, x17, x15, 72, x18)

inst_5090:
// fs1 == 1 and fe1 == 0x35 and fm1 == 0x003fff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x9a803fff; op2val:0xbf800000; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_5091:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x35 and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0x9a803fff; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 88, x17, x15, 88, x18)

inst_5092:
// fs1 == 1 and fe1 == 0x35 and fm1 == 0x7fc000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x9affc000; op2val:0xbf800000; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 96, x17, x15, 96, x18)

inst_5093:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x35 and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0x9affc000; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 104, x17, x15, 104, x18)

inst_5094:
// fs1 == 1 and fe1 == 0x35 and fm1 == 0x007fff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x9a807fff; op2val:0xbf800000; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 112, x17, x15, 112, x18)

inst_5095:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x35 and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0x9a807fff; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 120, x17, x15, 120, x18)

inst_5096:
// fs1 == 1 and fe1 == 0x35 and fm1 == 0x7f8000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x9aff8000; op2val:0xbf800000; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_5097:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x35 and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0x9aff8000; valaddr_reg:x16; val_offset:136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 136, x17, x15, 136, x18)

inst_5098:
// fs1 == 1 and fe1 == 0x35 and fm1 == 0x00ffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x9a80ffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 144, x17, x15, 144, x18)

inst_5099:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x35 and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0x9a80ffff; valaddr_reg:x16; val_offset:152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 152, x17, x15, 152, x18)

inst_5100:
// fs1 == 1 and fe1 == 0x35 and fm1 == 0x7f0000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x9aff0000; op2val:0xbf800000; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_5101:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x35 and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0x9aff0000; valaddr_reg:x16; val_offset:168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 168, x17, x15, 168, x18)

inst_5102:
// fs1 == 1 and fe1 == 0x35 and fm1 == 0x01ffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x9a81ffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 176, x17, x15, 176, x18)

inst_5103:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x35 and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0x9a81ffff; valaddr_reg:x16; val_offset:184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 184, x17, x15, 184, x18)

inst_5104:
// fs1 == 1 and fe1 == 0x35 and fm1 == 0x7e0000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x9afe0000; op2val:0xbf800000; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 192, x17, x15, 192, x18)

inst_5105:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x35 and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0x9afe0000; valaddr_reg:x16; val_offset:200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 200, x17, x15, 200, x18)

inst_5106:
// fs1 == 1 and fe1 == 0x35 and fm1 == 0x03ffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x9a83ffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_5107:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x35 and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0x9a83ffff; valaddr_reg:x16; val_offset:216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 216, x17, x15, 216, x18)

inst_5108:
// fs1 == 1 and fe1 == 0x35 and fm1 == 0x7c0000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x9afc0000; op2val:0xbf800000; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 224, x17, x15, 224, x18)

inst_5109:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x35 and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0x9afc0000; valaddr_reg:x16; val_offset:232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 232, x17, x15, 232, x18)

inst_5110:
// fs1 == 1 and fe1 == 0x35 and fm1 == 0x07ffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x9a87ffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_5111:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x35 and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0x9a87ffff; valaddr_reg:x16; val_offset:248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 248, x17, x15, 248, x18)

inst_5112:
// fs1 == 1 and fe1 == 0x35 and fm1 == 0x780000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x9af80000; op2val:0xbf800000; valaddr_reg:x16; val_offset:256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 256, x17, x15, 256, x18)

inst_5113:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x35 and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0x9af80000; valaddr_reg:x16; val_offset:264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 264, x17, x15, 264, x18)

inst_5114:
// fs1 == 1 and fe1 == 0x35 and fm1 == 0x0fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x9a8fffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 272, x17, x15, 272, x18)

inst_5115:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x35 and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0x9a8fffff; valaddr_reg:x16; val_offset:280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 280, x17, x15, 280, x18)

inst_5116:
// fs1 == 1 and fe1 == 0x35 and fm1 == 0x700000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x9af00000; op2val:0xbf800000; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_5117:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x35 and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0x9af00000; valaddr_reg:x16; val_offset:296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 296, x17, x15, 296, x18)

inst_5118:
// fs1 == 1 and fe1 == 0x35 and fm1 == 0x1fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x9a9fffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 304, x17, x15, 304, x18)

inst_5119:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x35 and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0x9a9fffff; valaddr_reg:x16; val_offset:312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 312, x17, x15, 312, x18)

inst_5120:
// fs1 == 1 and fe1 == 0x35 and fm1 == 0x600000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x9ae00000; op2val:0xbf800000; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_5121:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x35 and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0x9ae00000; valaddr_reg:x16; val_offset:328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 328, x17, x15, 328, x18)

inst_5122:
// fs1 == 1 and fe1 == 0x35 and fm1 == 0x3fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x9abfffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 336, x17, x15, 336, x18)

inst_5123:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x35 and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0x9abfffff; valaddr_reg:x16; val_offset:344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 344, x17, x15, 344, x18)

inst_5124:
// fs1 == 1 and fe1 == 0x35 and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x9ac00000; op2val:0xbf800000; valaddr_reg:x16; val_offset:352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 352, x17, x15, 352, x18)

inst_5125:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x35 and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0x9ac00000; valaddr_reg:x16; val_offset:360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 360, x17, x15, 360, x18)

inst_5126:
// fs1 == 1 and fe1 == 0x35 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x9affffff; op2val:0xbf800000; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_5127:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x35 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbf800000; op2val:0x9affffff; valaddr_reg:x16; val_offset:376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 376, x17, x15, 376, x18)

inst_5128:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x4ccccc and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3fcccccc; op2val:0x3f800000; valaddr_reg:x16; val_offset:384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 384, x17, x15, 384, x18)

inst_5129:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4ccccc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3fcccccc; valaddr_reg:x16; val_offset:392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 392, x17, x15, 392, x18)

inst_5130:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x333333 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3fb33333; op2val:0x3f800000; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_5131:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x333333 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3fb33333; valaddr_reg:x16; val_offset:408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 408, x17, x15, 408, x18)

inst_5132:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x5b6db6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb6db6; op2val:0x3f800000; valaddr_reg:x16; val_offset:416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 416, x17, x15, 416, x18)

inst_5133:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b6db6 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3fdb6db6; valaddr_reg:x16; val_offset:424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 424, x17, x15, 424, x18)

inst_5134:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x249249 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3fa49249; op2val:0x3f800000; valaddr_reg:x16; val_offset:432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 432, x17, x15, 432, x18)

inst_5135:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x249249 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3fa49249; valaddr_reg:x16; val_offset:440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 440, x17, x15, 440, x18)

inst_5136:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x444444 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3fc44444; op2val:0x3f800000; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_5137:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x444444 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3fc44444; valaddr_reg:x16; val_offset:456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 456, x17, x15, 456, x18)

inst_5138:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x3bbbbb and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3fbbbbbb; op2val:0x3f800000; valaddr_reg:x16; val_offset:464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 464, x17, x15, 464, x18)

inst_5139:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3bbbbb and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3fbbbbbb; valaddr_reg:x16; val_offset:472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 472, x17, x15, 472, x18)

inst_5140:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x666666 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3fe66666; op2val:0x3f800000; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_5141:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x666666 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3fe66666; valaddr_reg:x16; val_offset:488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 488, x17, x15, 488, x18)

inst_5142:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x199999 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f999999; op2val:0x3f800000; valaddr_reg:x16; val_offset:496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 496, x17, x15, 496, x18)

inst_5143:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x199999 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f999999; valaddr_reg:x16; val_offset:504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 504, x17, x15, 504, x18)

inst_5144:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x6db6db and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3fedb6db; op2val:0x3f800000; valaddr_reg:x16; val_offset:512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 512, x17, x15, 512, x18)

inst_5145:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6db6db and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3fedb6db; valaddr_reg:x16; val_offset:520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 520, x17, x15, 520, x18)

inst_5146:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x36db6d and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3fb6db6d; op2val:0x3f800000; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_5147:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x36db6d and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3fb6db6d; valaddr_reg:x16; val_offset:536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 536, x17, x15, 536, x18)

inst_5148:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800001; op2val:0x3f800000; valaddr_reg:x16; val_offset:544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 544, x17, x15, 544, x18)

inst_5149:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f800001; valaddr_reg:x16; val_offset:552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 552, x17, x15, 552, x18)

inst_5150:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7ffffe and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ffffffe; op2val:0x3f800000; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_5151:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3ffffffe; valaddr_reg:x16; val_offset:568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 568, x17, x15, 568, x18)

inst_5152:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000003 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800003; op2val:0x3f800000; valaddr_reg:x16; val_offset:576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 576, x17, x15, 576, x18)

inst_5153:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f800003; valaddr_reg:x16; val_offset:584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 584, x17, x15, 584, x18)

inst_5154:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7ffffc and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ffffffc; op2val:0x3f800000; valaddr_reg:x16; val_offset:592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 592, x17, x15, 592, x18)

inst_5155:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3ffffffc; valaddr_reg:x16; val_offset:600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 600, x17, x15, 600, x18)

inst_5156:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000007 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800007; op2val:0x3f800000; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 608, x17, x15, 608, x18)

inst_5157:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f800007; valaddr_reg:x16; val_offset:616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 616, x17, x15, 616, x18)

inst_5158:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7ffff8 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ffffff8; op2val:0x3f800000; valaddr_reg:x16; val_offset:624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 624, x17, x15, 624, x18)

inst_5159:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3ffffff8; valaddr_reg:x16; val_offset:632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 632, x17, x15, 632, x18)

inst_5160:
// fs1 == 0 and fe1 == 0x82 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x41000001; op2val:0x3f800000; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_5161:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x41000001; valaddr_reg:x16; val_offset:648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 648, x17, x15, 648, x18)

inst_5162:
// fs1 == 0 and fe1 == 0x82 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x41000000; op2val:0x3f800000; valaddr_reg:x16; val_offset:656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 656, x17, x15, 656, x18)

inst_5163:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x41000000; valaddr_reg:x16; val_offset:664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 664, x17, x15, 664, x18)

inst_5164:
// fs1 == 0 and fe1 == 0x82 and fm1 == 0x7ffffe and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x417ffffe; op2val:0x3f800000; valaddr_reg:x16; val_offset:672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 672, x17, x15, 672, x18)

inst_5165:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x417ffffe; valaddr_reg:x16; val_offset:680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 680, x17, x15, 680, x18)

inst_5166:
// fs1 == 0 and fe1 == 0x82 and fm1 == 0x000003 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x41000003; op2val:0x3f800000; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 688, x17, x15, 688, x18)

inst_5167:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x41000003; valaddr_reg:x16; val_offset:696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 696, x17, x15, 696, x18)

inst_5168:
// fs1 == 0 and fe1 == 0x82 and fm1 == 0x7ffffc and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x417ffffc; op2val:0x3f800000; valaddr_reg:x16; val_offset:704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 704, x17, x15, 704, x18)

inst_5169:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x417ffffc; valaddr_reg:x16; val_offset:712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 712, x17, x15, 712, x18)

inst_5170:
// fs1 == 0 and fe1 == 0x82 and fm1 == 0x000007 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x41000007; op2val:0x3f800000; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_5171:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x41000007; valaddr_reg:x16; val_offset:728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 728, x17, x15, 728, x18)

inst_5172:
// fs1 == 0 and fe1 == 0x82 and fm1 == 0x7ffff8 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x417ffff8; op2val:0x3f800000; valaddr_reg:x16; val_offset:736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 736, x17, x15, 736, x18)

inst_5173:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x417ffff8; valaddr_reg:x16; val_offset:744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 744, x17, x15, 744, x18)

inst_5174:
// fs1 == 0 and fe1 == 0x82 and fm1 == 0x00000f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x4100000f; op2val:0x3f800000; valaddr_reg:x16; val_offset:752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 752, x17, x15, 752, x18)

inst_5175:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x4100000f; valaddr_reg:x16; val_offset:760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 760, x17, x15, 760, x18)

inst_5176:
// fs1 == 0 and fe1 == 0x82 and fm1 == 0x7ffff0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x417ffff0; op2val:0x3f800000; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 768, x17, x15, 768, x18)

inst_5177:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x417ffff0; valaddr_reg:x16; val_offset:776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 776, x17, x15, 776, x18)

inst_5178:
// fs1 == 0 and fe1 == 0x82 and fm1 == 0x00001f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x4100001f; op2val:0x3f800000; valaddr_reg:x16; val_offset:784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 784, x17, x15, 784, x18)

inst_5179:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x4100001f; valaddr_reg:x16; val_offset:792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 792, x17, x15, 792, x18)

inst_5180:
// fs1 == 0 and fe1 == 0x82 and fm1 == 0x7fffe0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x417fffe0; op2val:0x3f800000; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_5181:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x417fffe0; valaddr_reg:x16; val_offset:808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 808, x17, x15, 808, x18)

inst_5182:
// fs1 == 0 and fe1 == 0x82 and fm1 == 0x00003f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x4100003f; op2val:0x3f800000; valaddr_reg:x16; val_offset:816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 816, x17, x15, 816, x18)

inst_5183:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x4100003f; valaddr_reg:x16; val_offset:824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 824, x17, x15, 824, x18)

inst_5184:
// fs1 == 0 and fe1 == 0x82 and fm1 == 0x7fffc0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x417fffc0; op2val:0x3f800000; valaddr_reg:x16; val_offset:832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 832, x17, x15, 832, x18)

inst_5185:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x417fffc0; valaddr_reg:x16; val_offset:840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 840, x17, x15, 840, x18)

inst_5186:
// fs1 == 0 and fe1 == 0x82 and fm1 == 0x00007f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x4100007f; op2val:0x3f800000; valaddr_reg:x16; val_offset:848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 848, x17, x15, 848, x18)

inst_5187:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x4100007f; valaddr_reg:x16; val_offset:856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 856, x17, x15, 856, x18)

inst_5188:
// fs1 == 0 and fe1 == 0x82 and fm1 == 0x7fff80 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x417fff80; op2val:0x3f800000; valaddr_reg:x16; val_offset:864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 864, x17, x15, 864, x18)

inst_5189:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x417fff80; valaddr_reg:x16; val_offset:872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 872, x17, x15, 872, x18)

inst_5190:
// fs1 == 0 and fe1 == 0x82 and fm1 == 0x0000ff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x410000ff; op2val:0x3f800000; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 880, x17, x15, 880, x18)

inst_5191:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x410000ff; valaddr_reg:x16; val_offset:888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 888, x17, x15, 888, x18)

inst_5192:
// fs1 == 0 and fe1 == 0x82 and fm1 == 0x7fff00 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x417fff00; op2val:0x3f800000; valaddr_reg:x16; val_offset:896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 896, x17, x15, 896, x18)

inst_5193:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x417fff00; valaddr_reg:x16; val_offset:904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 904, x17, x15, 904, x18)

inst_5194:
// fs1 == 0 and fe1 == 0x82 and fm1 == 0x0001ff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x410001ff; op2val:0x3f800000; valaddr_reg:x16; val_offset:912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 912, x17, x15, 912, x18)

inst_5195:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x410001ff; valaddr_reg:x16; val_offset:920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 920, x17, x15, 920, x18)

inst_5196:
// fs1 == 0 and fe1 == 0x82 and fm1 == 0x7ffe00 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x417ffe00; op2val:0x3f800000; valaddr_reg:x16; val_offset:928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 928, x17, x15, 928, x18)

inst_5197:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x417ffe00; valaddr_reg:x16; val_offset:936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 936, x17, x15, 936, x18)

inst_5198:
// fs1 == 0 and fe1 == 0x82 and fm1 == 0x0003ff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x410003ff; op2val:0x3f800000; valaddr_reg:x16; val_offset:944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 944, x17, x15, 944, x18)

inst_5199:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x410003ff; valaddr_reg:x16; val_offset:952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 952, x17, x15, 952, x18)

inst_5200:
// fs1 == 0 and fe1 == 0x82 and fm1 == 0x7ffc00 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x417ffc00; op2val:0x3f800000; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 960, x17, x15, 960, x18)

inst_5201:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x417ffc00; valaddr_reg:x16; val_offset:968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 968, x17, x15, 968, x18)

inst_5202:
// fs1 == 0 and fe1 == 0x82 and fm1 == 0x0007ff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x410007ff; op2val:0x3f800000; valaddr_reg:x16; val_offset:976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 976, x17, x15, 976, x18)

inst_5203:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x410007ff; valaddr_reg:x16; val_offset:984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 984, x17, x15, 984, x18)

inst_5204:
// fs1 == 0 and fe1 == 0x82 and fm1 == 0x7ff800 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x417ff800; op2val:0x3f800000; valaddr_reg:x16; val_offset:992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 992, x17, x15, 992, x18)

inst_5205:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x417ff800; valaddr_reg:x16; val_offset:1000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1000, x17, x15, 1000, x18)

inst_5206:
// fs1 == 0 and fe1 == 0x82 and fm1 == 0x000fff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x41000fff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1008, x17, x15, 1008, x18)

inst_5207:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x41000fff; valaddr_reg:x16; val_offset:1016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1016, x17, x15, 1016, x18)

inst_5208:
// fs1 == 0 and fe1 == 0x82 and fm1 == 0x7ff000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x417ff000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1024, x17, x15, 1024, x18)

inst_5209:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x417ff000; valaddr_reg:x16; val_offset:1032; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1032, x17, x15, 1032, x18)

inst_5210:
// fs1 == 0 and fe1 == 0x82 and fm1 == 0x001fff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x41001fff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1040, x17, x15, 1040, x18)

inst_5211:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x41001fff; valaddr_reg:x16; val_offset:1048; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1048, x17, x15, 1048, x18)

inst_5212:
// fs1 == 0 and fe1 == 0x82 and fm1 == 0x7fe000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x417fe000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1056; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1056, x17, x15, 1056, x18)

inst_5213:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x417fe000; valaddr_reg:x16; val_offset:1064; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1064, x17, x15, 1064, x18)

inst_5214:
// fs1 == 0 and fe1 == 0x82 and fm1 == 0x003fff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x41003fff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1072; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1072, x17, x15, 1072, x18)

inst_5215:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x41003fff; valaddr_reg:x16; val_offset:1080; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1080, x17, x15, 1080, x18)

inst_5216:
// fs1 == 0 and fe1 == 0x82 and fm1 == 0x7fc000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x417fc000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1088; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1088, x17, x15, 1088, x18)

inst_5217:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x417fc000; valaddr_reg:x16; val_offset:1096; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1096, x17, x15, 1096, x18)

inst_5218:
// fs1 == 0 and fe1 == 0x82 and fm1 == 0x007fff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x41007fff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1104, x17, x15, 1104, x18)

inst_5219:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x41007fff; valaddr_reg:x16; val_offset:1112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1112, x17, x15, 1112, x18)

inst_5220:
// fs1 == 0 and fe1 == 0x82 and fm1 == 0x7f8000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x417f8000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1120, x17, x15, 1120, x18)

inst_5221:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x417f8000; valaddr_reg:x16; val_offset:1128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1128, x17, x15, 1128, x18)

inst_5222:
// fs1 == 0 and fe1 == 0x82 and fm1 == 0x00ffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x4100ffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1136, x17, x15, 1136, x18)

inst_5223:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x4100ffff; valaddr_reg:x16; val_offset:1144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1144, x17, x15, 1144, x18)

inst_5224:
// fs1 == 0 and fe1 == 0x82 and fm1 == 0x7f0000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x417f0000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1152, x17, x15, 1152, x18)

inst_5225:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x417f0000; valaddr_reg:x16; val_offset:1160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1160, x17, x15, 1160, x18)

inst_5226:
// fs1 == 0 and fe1 == 0x82 and fm1 == 0x01ffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x4101ffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1168, x17, x15, 1168, x18)

inst_5227:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x4101ffff; valaddr_reg:x16; val_offset:1176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1176, x17, x15, 1176, x18)

inst_5228:
// fs1 == 0 and fe1 == 0x82 and fm1 == 0x7e0000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x417e0000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1184, x17, x15, 1184, x18)

inst_5229:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x417e0000; valaddr_reg:x16; val_offset:1192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1192, x17, x15, 1192, x18)

inst_5230:
// fs1 == 0 and fe1 == 0x82 and fm1 == 0x03ffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x4103ffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1200, x17, x15, 1200, x18)

inst_5231:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x4103ffff; valaddr_reg:x16; val_offset:1208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1208, x17, x15, 1208, x18)

inst_5232:
// fs1 == 0 and fe1 == 0x82 and fm1 == 0x7c0000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x417c0000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1216, x17, x15, 1216, x18)

inst_5233:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x417c0000; valaddr_reg:x16; val_offset:1224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1224, x17, x15, 1224, x18)

inst_5234:
// fs1 == 0 and fe1 == 0x82 and fm1 == 0x07ffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x4107ffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1232, x17, x15, 1232, x18)

inst_5235:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x4107ffff; valaddr_reg:x16; val_offset:1240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1240, x17, x15, 1240, x18)

inst_5236:
// fs1 == 0 and fe1 == 0x82 and fm1 == 0x780000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x41780000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1248, x17, x15, 1248, x18)

inst_5237:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x41780000; valaddr_reg:x16; val_offset:1256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1256, x17, x15, 1256, x18)

inst_5238:
// fs1 == 0 and fe1 == 0x82 and fm1 == 0x0fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x410fffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1264, x17, x15, 1264, x18)

inst_5239:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x410fffff; valaddr_reg:x16; val_offset:1272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1272, x17, x15, 1272, x18)

inst_5240:
// fs1 == 0 and fe1 == 0x82 and fm1 == 0x700000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x41700000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1280, x17, x15, 1280, x18)

inst_5241:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x41700000; valaddr_reg:x16; val_offset:1288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1288, x17, x15, 1288, x18)

inst_5242:
// fs1 == 0 and fe1 == 0x82 and fm1 == 0x1fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x411fffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1296, x17, x15, 1296, x18)

inst_5243:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x411fffff; valaddr_reg:x16; val_offset:1304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1304, x17, x15, 1304, x18)

inst_5244:
// fs1 == 0 and fe1 == 0x82 and fm1 == 0x600000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x41600000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1312, x17, x15, 1312, x18)

inst_5245:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x41600000; valaddr_reg:x16; val_offset:1320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1320, x17, x15, 1320, x18)

inst_5246:
// fs1 == 0 and fe1 == 0x82 and fm1 == 0x3fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x413fffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1328, x17, x15, 1328, x18)

inst_5247:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x413fffff; valaddr_reg:x16; val_offset:1336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1336, x17, x15, 1336, x18)

inst_5248:
// fs1 == 0 and fe1 == 0x82 and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x41400000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1344, x17, x15, 1344, x18)

inst_5249:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x41400000; valaddr_reg:x16; val_offset:1352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1352, x17, x15, 1352, x18)

inst_5250:
// fs1 == 0 and fe1 == 0x82 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x417fffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1360, x17, x15, 1360, x18)

inst_5251:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x417fffff; valaddr_reg:x16; val_offset:1368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1368, x17, x15, 1368, x18)

inst_5252:
// fs1 == 0 and fe1 == 0x81 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x40800001; op2val:0x3f800000; valaddr_reg:x16; val_offset:1376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1376, x17, x15, 1376, x18)

inst_5253:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x40800001; valaddr_reg:x16; val_offset:1384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1384, x17, x15, 1384, x18)

inst_5254:
// fs1 == 0 and fe1 == 0x81 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x40800000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1392, x17, x15, 1392, x18)

inst_5255:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x40800000; valaddr_reg:x16; val_offset:1400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1400, x17, x15, 1400, x18)

inst_5256:
// fs1 == 0 and fe1 == 0x81 and fm1 == 0x7ffffe and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x40fffffe; op2val:0x3f800000; valaddr_reg:x16; val_offset:1408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1408, x17, x15, 1408, x18)

inst_5257:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x40fffffe; valaddr_reg:x16; val_offset:1416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1416, x17, x15, 1416, x18)

inst_5258:
// fs1 == 0 and fe1 == 0x81 and fm1 == 0x000003 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x40800003; op2val:0x3f800000; valaddr_reg:x16; val_offset:1424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1424, x17, x15, 1424, x18)

inst_5259:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x40800003; valaddr_reg:x16; val_offset:1432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1432, x17, x15, 1432, x18)

inst_5260:
// fs1 == 0 and fe1 == 0x81 and fm1 == 0x7ffffc and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x40fffffc; op2val:0x3f800000; valaddr_reg:x16; val_offset:1440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1440, x17, x15, 1440, x18)

inst_5261:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x40fffffc; valaddr_reg:x16; val_offset:1448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1448, x17, x15, 1448, x18)

inst_5262:
// fs1 == 0 and fe1 == 0x81 and fm1 == 0x000007 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x40800007; op2val:0x3f800000; valaddr_reg:x16; val_offset:1456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1456, x17, x15, 1456, x18)

inst_5263:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x40800007; valaddr_reg:x16; val_offset:1464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1464, x17, x15, 1464, x18)

inst_5264:
// fs1 == 0 and fe1 == 0x81 and fm1 == 0x7ffff8 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x40fffff8; op2val:0x3f800000; valaddr_reg:x16; val_offset:1472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1472, x17, x15, 1472, x18)

inst_5265:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x40fffff8; valaddr_reg:x16; val_offset:1480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1480, x17, x15, 1480, x18)

inst_5266:
// fs1 == 0 and fe1 == 0x81 and fm1 == 0x00000f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x4080000f; op2val:0x3f800000; valaddr_reg:x16; val_offset:1488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1488, x17, x15, 1488, x18)

inst_5267:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x4080000f; valaddr_reg:x16; val_offset:1496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1496, x17, x15, 1496, x18)

inst_5268:
// fs1 == 0 and fe1 == 0x81 and fm1 == 0x7ffff0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x40fffff0; op2val:0x3f800000; valaddr_reg:x16; val_offset:1504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1504, x17, x15, 1504, x18)

inst_5269:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x40fffff0; valaddr_reg:x16; val_offset:1512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1512, x17, x15, 1512, x18)

inst_5270:
// fs1 == 0 and fe1 == 0x81 and fm1 == 0x00001f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x4080001f; op2val:0x3f800000; valaddr_reg:x16; val_offset:1520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1520, x17, x15, 1520, x18)

inst_5271:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x4080001f; valaddr_reg:x16; val_offset:1528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1528, x17, x15, 1528, x18)

inst_5272:
// fs1 == 0 and fe1 == 0x81 and fm1 == 0x7fffe0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x40ffffe0; op2val:0x3f800000; valaddr_reg:x16; val_offset:1536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1536, x17, x15, 1536, x18)

inst_5273:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x40ffffe0; valaddr_reg:x16; val_offset:1544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1544, x17, x15, 1544, x18)

inst_5274:
// fs1 == 0 and fe1 == 0x81 and fm1 == 0x00003f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x4080003f; op2val:0x3f800000; valaddr_reg:x16; val_offset:1552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1552, x17, x15, 1552, x18)

inst_5275:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x4080003f; valaddr_reg:x16; val_offset:1560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1560, x17, x15, 1560, x18)

inst_5276:
// fs1 == 0 and fe1 == 0x81 and fm1 == 0x7fffc0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x40ffffc0; op2val:0x3f800000; valaddr_reg:x16; val_offset:1568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1568, x17, x15, 1568, x18)

inst_5277:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x40ffffc0; valaddr_reg:x16; val_offset:1576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1576, x17, x15, 1576, x18)

inst_5278:
// fs1 == 0 and fe1 == 0x81 and fm1 == 0x00007f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x4080007f; op2val:0x3f800000; valaddr_reg:x16; val_offset:1584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1584, x17, x15, 1584, x18)

inst_5279:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x4080007f; valaddr_reg:x16; val_offset:1592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1592, x17, x15, 1592, x18)

inst_5280:
// fs1 == 0 and fe1 == 0x81 and fm1 == 0x7fff80 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x40ffff80; op2val:0x3f800000; valaddr_reg:x16; val_offset:1600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1600, x17, x15, 1600, x18)

inst_5281:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x40ffff80; valaddr_reg:x16; val_offset:1608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1608, x17, x15, 1608, x18)

inst_5282:
// fs1 == 0 and fe1 == 0x81 and fm1 == 0x0000ff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x408000ff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1616, x17, x15, 1616, x18)

inst_5283:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x408000ff; valaddr_reg:x16; val_offset:1624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1624, x17, x15, 1624, x18)

inst_5284:
// fs1 == 0 and fe1 == 0x81 and fm1 == 0x7fff00 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x40ffff00; op2val:0x3f800000; valaddr_reg:x16; val_offset:1632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1632, x17, x15, 1632, x18)

inst_5285:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x40ffff00; valaddr_reg:x16; val_offset:1640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1640, x17, x15, 1640, x18)

inst_5286:
// fs1 == 0 and fe1 == 0x81 and fm1 == 0x0001ff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x408001ff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1648, x17, x15, 1648, x18)

inst_5287:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x408001ff; valaddr_reg:x16; val_offset:1656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1656, x17, x15, 1656, x18)

inst_5288:
// fs1 == 0 and fe1 == 0x81 and fm1 == 0x7ffe00 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x40fffe00; op2val:0x3f800000; valaddr_reg:x16; val_offset:1664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1664, x17, x15, 1664, x18)

inst_5289:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x40fffe00; valaddr_reg:x16; val_offset:1672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1672, x17, x15, 1672, x18)

inst_5290:
// fs1 == 0 and fe1 == 0x81 and fm1 == 0x0003ff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x408003ff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1680, x17, x15, 1680, x18)

inst_5291:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x408003ff; valaddr_reg:x16; val_offset:1688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1688, x17, x15, 1688, x18)

inst_5292:
// fs1 == 0 and fe1 == 0x81 and fm1 == 0x7ffc00 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x40fffc00; op2val:0x3f800000; valaddr_reg:x16; val_offset:1696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1696, x17, x15, 1696, x18)

inst_5293:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x40fffc00; valaddr_reg:x16; val_offset:1704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1704, x17, x15, 1704, x18)

inst_5294:
// fs1 == 0 and fe1 == 0x81 and fm1 == 0x0007ff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x408007ff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1712, x17, x15, 1712, x18)

inst_5295:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x408007ff; valaddr_reg:x16; val_offset:1720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1720, x17, x15, 1720, x18)

inst_5296:
// fs1 == 0 and fe1 == 0x81 and fm1 == 0x7ff800 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x40fff800; op2val:0x3f800000; valaddr_reg:x16; val_offset:1728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1728, x17, x15, 1728, x18)

inst_5297:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x40fff800; valaddr_reg:x16; val_offset:1736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1736, x17, x15, 1736, x18)

inst_5298:
// fs1 == 0 and fe1 == 0x81 and fm1 == 0x000fff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x40800fff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1744, x17, x15, 1744, x18)

inst_5299:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x40800fff; valaddr_reg:x16; val_offset:1752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1752, x17, x15, 1752, x18)

inst_5300:
// fs1 == 0 and fe1 == 0x81 and fm1 == 0x7ff000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x40fff000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1760, x17, x15, 1760, x18)

inst_5301:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x40fff000; valaddr_reg:x16; val_offset:1768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1768, x17, x15, 1768, x18)

inst_5302:
// fs1 == 0 and fe1 == 0x81 and fm1 == 0x001fff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x40801fff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1776, x17, x15, 1776, x18)

inst_5303:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x40801fff; valaddr_reg:x16; val_offset:1784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1784, x17, x15, 1784, x18)

inst_5304:
// fs1 == 0 and fe1 == 0x81 and fm1 == 0x7fe000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x40ffe000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1792, x17, x15, 1792, x18)

inst_5305:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x40ffe000; valaddr_reg:x16; val_offset:1800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1800, x17, x15, 1800, x18)

inst_5306:
// fs1 == 0 and fe1 == 0x81 and fm1 == 0x003fff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x40803fff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1808, x17, x15, 1808, x18)

inst_5307:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x40803fff; valaddr_reg:x16; val_offset:1816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1816, x17, x15, 1816, x18)

inst_5308:
// fs1 == 0 and fe1 == 0x81 and fm1 == 0x7fc000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x40ffc000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1824, x17, x15, 1824, x18)

inst_5309:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x40ffc000; valaddr_reg:x16; val_offset:1832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1832, x17, x15, 1832, x18)

inst_5310:
// fs1 == 0 and fe1 == 0x81 and fm1 == 0x007fff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x40807fff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1840, x17, x15, 1840, x18)

inst_5311:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x40807fff; valaddr_reg:x16; val_offset:1848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1848, x17, x15, 1848, x18)

inst_5312:
// fs1 == 0 and fe1 == 0x81 and fm1 == 0x7f8000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x40ff8000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1856, x17, x15, 1856, x18)

inst_5313:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x40ff8000; valaddr_reg:x16; val_offset:1864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1864, x17, x15, 1864, x18)

inst_5314:
// fs1 == 0 and fe1 == 0x81 and fm1 == 0x00ffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x4080ffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1872, x17, x15, 1872, x18)

inst_5315:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x4080ffff; valaddr_reg:x16; val_offset:1880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1880, x17, x15, 1880, x18)

inst_5316:
// fs1 == 0 and fe1 == 0x81 and fm1 == 0x7f0000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x40ff0000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1888, x17, x15, 1888, x18)

inst_5317:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x40ff0000; valaddr_reg:x16; val_offset:1896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1896, x17, x15, 1896, x18)

inst_5318:
// fs1 == 0 and fe1 == 0x81 and fm1 == 0x01ffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x4081ffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1904, x17, x15, 1904, x18)

inst_5319:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x4081ffff; valaddr_reg:x16; val_offset:1912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1912, x17, x15, 1912, x18)

inst_5320:
// fs1 == 0 and fe1 == 0x81 and fm1 == 0x7e0000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x40fe0000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1920, x17, x15, 1920, x18)

inst_5321:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x40fe0000; valaddr_reg:x16; val_offset:1928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1928, x17, x15, 1928, x18)

inst_5322:
// fs1 == 0 and fe1 == 0x81 and fm1 == 0x03ffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x4083ffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1936, x17, x15, 1936, x18)

inst_5323:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x4083ffff; valaddr_reg:x16; val_offset:1944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1944, x17, x15, 1944, x18)

inst_5324:
// fs1 == 0 and fe1 == 0x81 and fm1 == 0x7c0000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x40fc0000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1952, x17, x15, 1952, x18)

inst_5325:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x40fc0000; valaddr_reg:x16; val_offset:1960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1960, x17, x15, 1960, x18)

inst_5326:
// fs1 == 0 and fe1 == 0x81 and fm1 == 0x07ffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x4087ffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1968, x17, x15, 1968, x18)

inst_5327:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x4087ffff; valaddr_reg:x16; val_offset:1976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1976, x17, x15, 1976, x18)

inst_5328:
// fs1 == 0 and fe1 == 0x81 and fm1 == 0x780000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x40f80000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1984, x17, x15, 1984, x18)

inst_5329:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x40f80000; valaddr_reg:x16; val_offset:1992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1992, x17, x15, 1992, x18)

inst_5330:
// fs1 == 0 and fe1 == 0x81 and fm1 == 0x0fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x408fffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:2000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2000, x17, x15, 2000, x18)

inst_5331:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x408fffff; valaddr_reg:x16; val_offset:2008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2008, x17, x15, 2008, x18)

inst_5332:
// fs1 == 0 and fe1 == 0x81 and fm1 == 0x700000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x40f00000; op2val:0x3f800000; valaddr_reg:x16; val_offset:2016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2016, x17, x15, 2016, x18)

inst_5333:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x40f00000; valaddr_reg:x16; val_offset:2024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_22)

inst_5334:
// fs1 == 0 and fe1 == 0x81 and fm1 == 0x1fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x409fffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_5335:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x409fffff; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 8, x17, x15, 8, x18)

inst_5336:
// fs1 == 0 and fe1 == 0x81 and fm1 == 0x600000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x40e00000; op2val:0x3f800000; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 16, x17, x15, 16, x18)

inst_5337:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x40e00000; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 24, x17, x15, 24, x18)

inst_5338:
// fs1 == 0 and fe1 == 0x81 and fm1 == 0x3fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x40bfffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 32, x17, x15, 32, x18)

inst_5339:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x40bfffff; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 40, x17, x15, 40, x18)

inst_5340:
// fs1 == 0 and fe1 == 0x81 and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x40c00000; op2val:0x3f800000; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_5341:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x40c00000; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 56, x17, x15, 56, x18)

inst_5342:
// fs1 == 0 and fe1 == 0x81 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x40ffffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 64, x17, x15, 64, x18)

inst_5343:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x40ffffff; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 72, x17, x15, 72, x18)

inst_5344:
// fs1 == 0 and fe1 == 0x80 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x40000001; op2val:0x3f800000; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_5345:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x40000001; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 88, x17, x15, 88, x18)

inst_5346:
// fs1 == 0 and fe1 == 0x80 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x40000000; op2val:0x3f800000; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 96, x17, x15, 96, x18)

inst_5347:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x40000000; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 104, x17, x15, 104, x18)

inst_5348:
// fs1 == 0 and fe1 == 0x80 and fm1 == 0x7ffffe and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x407ffffe; op2val:0x3f800000; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 112, x17, x15, 112, x18)

inst_5349:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x407ffffe; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 120, x17, x15, 120, x18)

inst_5350:
// fs1 == 0 and fe1 == 0x80 and fm1 == 0x000003 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x40000003; op2val:0x3f800000; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_5351:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x40000003; valaddr_reg:x16; val_offset:136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 136, x17, x15, 136, x18)

inst_5352:
// fs1 == 0 and fe1 == 0x80 and fm1 == 0x7ffffc and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x407ffffc; op2val:0x3f800000; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 144, x17, x15, 144, x18)

inst_5353:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x407ffffc; valaddr_reg:x16; val_offset:152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 152, x17, x15, 152, x18)

inst_5354:
// fs1 == 0 and fe1 == 0x80 and fm1 == 0x000007 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x40000007; op2val:0x3f800000; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_5355:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x40000007; valaddr_reg:x16; val_offset:168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 168, x17, x15, 168, x18)

inst_5356:
// fs1 == 0 and fe1 == 0x80 and fm1 == 0x7ffff8 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x407ffff8; op2val:0x3f800000; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 176, x17, x15, 176, x18)

inst_5357:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x407ffff8; valaddr_reg:x16; val_offset:184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 184, x17, x15, 184, x18)

inst_5358:
// fs1 == 0 and fe1 == 0x80 and fm1 == 0x00000f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x4000000f; op2val:0x3f800000; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 192, x17, x15, 192, x18)

inst_5359:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x4000000f; valaddr_reg:x16; val_offset:200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 200, x17, x15, 200, x18)

inst_5360:
// fs1 == 0 and fe1 == 0x80 and fm1 == 0x7ffff0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x407ffff0; op2val:0x3f800000; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_5361:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x407ffff0; valaddr_reg:x16; val_offset:216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 216, x17, x15, 216, x18)

inst_5362:
// fs1 == 0 and fe1 == 0x80 and fm1 == 0x00001f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x4000001f; op2val:0x3f800000; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 224, x17, x15, 224, x18)

inst_5363:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x4000001f; valaddr_reg:x16; val_offset:232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 232, x17, x15, 232, x18)

inst_5364:
// fs1 == 0 and fe1 == 0x80 and fm1 == 0x7fffe0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x407fffe0; op2val:0x3f800000; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_5365:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x407fffe0; valaddr_reg:x16; val_offset:248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 248, x17, x15, 248, x18)

inst_5366:
// fs1 == 0 and fe1 == 0x80 and fm1 == 0x00003f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x4000003f; op2val:0x3f800000; valaddr_reg:x16; val_offset:256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 256, x17, x15, 256, x18)

inst_5367:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x4000003f; valaddr_reg:x16; val_offset:264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 264, x17, x15, 264, x18)

inst_5368:
// fs1 == 0 and fe1 == 0x80 and fm1 == 0x7fffc0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x407fffc0; op2val:0x3f800000; valaddr_reg:x16; val_offset:272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 272, x17, x15, 272, x18)

inst_5369:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x407fffc0; valaddr_reg:x16; val_offset:280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 280, x17, x15, 280, x18)

inst_5370:
// fs1 == 0 and fe1 == 0x80 and fm1 == 0x00007f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x4000007f; op2val:0x3f800000; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_5371:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x4000007f; valaddr_reg:x16; val_offset:296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 296, x17, x15, 296, x18)

inst_5372:
// fs1 == 0 and fe1 == 0x80 and fm1 == 0x7fff80 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x407fff80; op2val:0x3f800000; valaddr_reg:x16; val_offset:304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 304, x17, x15, 304, x18)

inst_5373:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x407fff80; valaddr_reg:x16; val_offset:312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 312, x17, x15, 312, x18)

inst_5374:
// fs1 == 0 and fe1 == 0x80 and fm1 == 0x0000ff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x400000ff; op2val:0x3f800000; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_5375:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x400000ff; valaddr_reg:x16; val_offset:328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 328, x17, x15, 328, x18)

inst_5376:
// fs1 == 0 and fe1 == 0x80 and fm1 == 0x7fff00 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x407fff00; op2val:0x3f800000; valaddr_reg:x16; val_offset:336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 336, x17, x15, 336, x18)

inst_5377:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x407fff00; valaddr_reg:x16; val_offset:344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 344, x17, x15, 344, x18)

inst_5378:
// fs1 == 0 and fe1 == 0x80 and fm1 == 0x0001ff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x400001ff; op2val:0x3f800000; valaddr_reg:x16; val_offset:352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 352, x17, x15, 352, x18)

inst_5379:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x400001ff; valaddr_reg:x16; val_offset:360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 360, x17, x15, 360, x18)

inst_5380:
// fs1 == 0 and fe1 == 0x80 and fm1 == 0x7ffe00 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x407ffe00; op2val:0x3f800000; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_5381:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x407ffe00; valaddr_reg:x16; val_offset:376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 376, x17, x15, 376, x18)

inst_5382:
// fs1 == 0 and fe1 == 0x80 and fm1 == 0x0003ff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x400003ff; op2val:0x3f800000; valaddr_reg:x16; val_offset:384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 384, x17, x15, 384, x18)

inst_5383:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x400003ff; valaddr_reg:x16; val_offset:392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 392, x17, x15, 392, x18)

inst_5384:
// fs1 == 0 and fe1 == 0x80 and fm1 == 0x7ffc00 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x407ffc00; op2val:0x3f800000; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_5385:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x407ffc00; valaddr_reg:x16; val_offset:408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 408, x17, x15, 408, x18)

inst_5386:
// fs1 == 0 and fe1 == 0x80 and fm1 == 0x0007ff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x400007ff; op2val:0x3f800000; valaddr_reg:x16; val_offset:416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 416, x17, x15, 416, x18)

inst_5387:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x400007ff; valaddr_reg:x16; val_offset:424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 424, x17, x15, 424, x18)

inst_5388:
// fs1 == 0 and fe1 == 0x80 and fm1 == 0x7ff800 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x407ff800; op2val:0x3f800000; valaddr_reg:x16; val_offset:432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 432, x17, x15, 432, x18)

inst_5389:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x407ff800; valaddr_reg:x16; val_offset:440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 440, x17, x15, 440, x18)

inst_5390:
// fs1 == 0 and fe1 == 0x80 and fm1 == 0x000fff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x40000fff; op2val:0x3f800000; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_5391:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x40000fff; valaddr_reg:x16; val_offset:456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 456, x17, x15, 456, x18)

inst_5392:
// fs1 == 0 and fe1 == 0x80 and fm1 == 0x7ff000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x407ff000; op2val:0x3f800000; valaddr_reg:x16; val_offset:464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 464, x17, x15, 464, x18)

inst_5393:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x407ff000; valaddr_reg:x16; val_offset:472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 472, x17, x15, 472, x18)

inst_5394:
// fs1 == 0 and fe1 == 0x80 and fm1 == 0x001fff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x40001fff; op2val:0x3f800000; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_5395:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x40001fff; valaddr_reg:x16; val_offset:488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 488, x17, x15, 488, x18)

inst_5396:
// fs1 == 0 and fe1 == 0x80 and fm1 == 0x7fe000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x407fe000; op2val:0x3f800000; valaddr_reg:x16; val_offset:496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 496, x17, x15, 496, x18)

inst_5397:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x407fe000; valaddr_reg:x16; val_offset:504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 504, x17, x15, 504, x18)

inst_5398:
// fs1 == 0 and fe1 == 0x80 and fm1 == 0x003fff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x40003fff; op2val:0x3f800000; valaddr_reg:x16; val_offset:512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 512, x17, x15, 512, x18)

inst_5399:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x40003fff; valaddr_reg:x16; val_offset:520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 520, x17, x15, 520, x18)

inst_5400:
// fs1 == 0 and fe1 == 0x80 and fm1 == 0x7fc000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x407fc000; op2val:0x3f800000; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_5401:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x407fc000; valaddr_reg:x16; val_offset:536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 536, x17, x15, 536, x18)

inst_5402:
// fs1 == 0 and fe1 == 0x80 and fm1 == 0x007fff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x40007fff; op2val:0x3f800000; valaddr_reg:x16; val_offset:544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 544, x17, x15, 544, x18)

inst_5403:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x40007fff; valaddr_reg:x16; val_offset:552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 552, x17, x15, 552, x18)

inst_5404:
// fs1 == 0 and fe1 == 0x80 and fm1 == 0x7f8000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x407f8000; op2val:0x3f800000; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_5405:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x407f8000; valaddr_reg:x16; val_offset:568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 568, x17, x15, 568, x18)

inst_5406:
// fs1 == 0 and fe1 == 0x80 and fm1 == 0x00ffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x4000ffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 576, x17, x15, 576, x18)

inst_5407:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x4000ffff; valaddr_reg:x16; val_offset:584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 584, x17, x15, 584, x18)

inst_5408:
// fs1 == 0 and fe1 == 0x80 and fm1 == 0x7f0000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x407f0000; op2val:0x3f800000; valaddr_reg:x16; val_offset:592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 592, x17, x15, 592, x18)

inst_5409:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x407f0000; valaddr_reg:x16; val_offset:600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 600, x17, x15, 600, x18)

inst_5410:
// fs1 == 0 and fe1 == 0x80 and fm1 == 0x01ffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x4001ffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 608, x17, x15, 608, x18)

inst_5411:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x4001ffff; valaddr_reg:x16; val_offset:616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 616, x17, x15, 616, x18)

inst_5412:
// fs1 == 0 and fe1 == 0x80 and fm1 == 0x7e0000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x407e0000; op2val:0x3f800000; valaddr_reg:x16; val_offset:624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 624, x17, x15, 624, x18)

inst_5413:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x407e0000; valaddr_reg:x16; val_offset:632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 632, x17, x15, 632, x18)

inst_5414:
// fs1 == 0 and fe1 == 0x80 and fm1 == 0x03ffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x4003ffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_5415:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x4003ffff; valaddr_reg:x16; val_offset:648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 648, x17, x15, 648, x18)

inst_5416:
// fs1 == 0 and fe1 == 0x80 and fm1 == 0x7c0000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x407c0000; op2val:0x3f800000; valaddr_reg:x16; val_offset:656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 656, x17, x15, 656, x18)

inst_5417:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x407c0000; valaddr_reg:x16; val_offset:664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 664, x17, x15, 664, x18)

inst_5418:
// fs1 == 0 and fe1 == 0x80 and fm1 == 0x07ffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x4007ffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 672, x17, x15, 672, x18)

inst_5419:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x4007ffff; valaddr_reg:x16; val_offset:680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 680, x17, x15, 680, x18)

inst_5420:
// fs1 == 0 and fe1 == 0x80 and fm1 == 0x780000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x40780000; op2val:0x3f800000; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 688, x17, x15, 688, x18)

inst_5421:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x40780000; valaddr_reg:x16; val_offset:696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 696, x17, x15, 696, x18)

inst_5422:
// fs1 == 0 and fe1 == 0x80 and fm1 == 0x0fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x400fffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 704, x17, x15, 704, x18)

inst_5423:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x400fffff; valaddr_reg:x16; val_offset:712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 712, x17, x15, 712, x18)

inst_5424:
// fs1 == 0 and fe1 == 0x80 and fm1 == 0x700000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x40700000; op2val:0x3f800000; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_5425:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x40700000; valaddr_reg:x16; val_offset:728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 728, x17, x15, 728, x18)

inst_5426:
// fs1 == 0 and fe1 == 0x80 and fm1 == 0x1fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x401fffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 736, x17, x15, 736, x18)

inst_5427:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x401fffff; valaddr_reg:x16; val_offset:744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 744, x17, x15, 744, x18)

inst_5428:
// fs1 == 0 and fe1 == 0x80 and fm1 == 0x600000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x40600000; op2val:0x3f800000; valaddr_reg:x16; val_offset:752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 752, x17, x15, 752, x18)

inst_5429:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x40600000; valaddr_reg:x16; val_offset:760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 760, x17, x15, 760, x18)

inst_5430:
// fs1 == 0 and fe1 == 0x80 and fm1 == 0x3fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x403fffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 768, x17, x15, 768, x18)

inst_5431:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x403fffff; valaddr_reg:x16; val_offset:776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 776, x17, x15, 776, x18)

inst_5432:
// fs1 == 0 and fe1 == 0x80 and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x40400000; op2val:0x3f800000; valaddr_reg:x16; val_offset:784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 784, x17, x15, 784, x18)

inst_5433:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x40400000; valaddr_reg:x16; val_offset:792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 792, x17, x15, 792, x18)

inst_5434:
// fs1 == 0 and fe1 == 0x80 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x407fffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_5435:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x407fffff; valaddr_reg:x16; val_offset:808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 808, x17, x15, 808, x18)

inst_5436:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f800000; valaddr_reg:x16; val_offset:816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 816, x17, x15, 816, x18)

inst_5437:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00000f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80000f; op2val:0x3f800000; valaddr_reg:x16; val_offset:824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 824, x17, x15, 824, x18)

inst_5438:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f80000f; valaddr_reg:x16; val_offset:832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 832, x17, x15, 832, x18)

inst_5439:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7ffff0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ffffff0; op2val:0x3f800000; valaddr_reg:x16; val_offset:840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 840, x17, x15, 840, x18)

inst_5440:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3ffffff0; valaddr_reg:x16; val_offset:848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 848, x17, x15, 848, x18)

inst_5441:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00001f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80001f; op2val:0x3f800000; valaddr_reg:x16; val_offset:856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 856, x17, x15, 856, x18)

inst_5442:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f80001f; valaddr_reg:x16; val_offset:864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 864, x17, x15, 864, x18)

inst_5443:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7fffe0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3fffffe0; op2val:0x3f800000; valaddr_reg:x16; val_offset:872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 872, x17, x15, 872, x18)

inst_5444:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3fffffe0; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 880, x17, x15, 880, x18)

inst_5445:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00003f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80003f; op2val:0x3f800000; valaddr_reg:x16; val_offset:888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 888, x17, x15, 888, x18)

inst_5446:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f80003f; valaddr_reg:x16; val_offset:896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 896, x17, x15, 896, x18)

inst_5447:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7fffc0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3fffffc0; op2val:0x3f800000; valaddr_reg:x16; val_offset:904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 904, x17, x15, 904, x18)

inst_5448:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3fffffc0; valaddr_reg:x16; val_offset:912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 912, x17, x15, 912, x18)

inst_5449:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00007f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80007f; op2val:0x3f800000; valaddr_reg:x16; val_offset:920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 920, x17, x15, 920, x18)

inst_5450:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f80007f; valaddr_reg:x16; val_offset:928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 928, x17, x15, 928, x18)

inst_5451:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7fff80 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3fffff80; op2val:0x3f800000; valaddr_reg:x16; val_offset:936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 936, x17, x15, 936, x18)

inst_5452:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3fffff80; valaddr_reg:x16; val_offset:944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 944, x17, x15, 944, x18)

inst_5453:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x0000ff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f8000ff; op2val:0x3f800000; valaddr_reg:x16; val_offset:952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 952, x17, x15, 952, x18)

inst_5454:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f8000ff; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 960, x17, x15, 960, x18)

inst_5455:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7fff00 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3fffff00; op2val:0x3f800000; valaddr_reg:x16; val_offset:968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 968, x17, x15, 968, x18)

inst_5456:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3fffff00; valaddr_reg:x16; val_offset:976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 976, x17, x15, 976, x18)

inst_5457:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x0001ff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f8001ff; op2val:0x3f800000; valaddr_reg:x16; val_offset:984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 984, x17, x15, 984, x18)

inst_5458:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f8001ff; valaddr_reg:x16; val_offset:992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 992, x17, x15, 992, x18)

inst_5459:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7ffe00 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ffffe00; op2val:0x3f800000; valaddr_reg:x16; val_offset:1000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1000, x17, x15, 1000, x18)

inst_5460:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3ffffe00; valaddr_reg:x16; val_offset:1008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1008, x17, x15, 1008, x18)

inst_5461:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x0003ff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f8003ff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1016, x17, x15, 1016, x18)

inst_5462:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f8003ff; valaddr_reg:x16; val_offset:1024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1024, x17, x15, 1024, x18)

inst_5463:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7ffc00 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ffffc00; op2val:0x3f800000; valaddr_reg:x16; val_offset:1032; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1032, x17, x15, 1032, x18)

inst_5464:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3ffffc00; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1040, x17, x15, 1040, x18)

inst_5465:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x0007ff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f8007ff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1048; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1048, x17, x15, 1048, x18)

inst_5466:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f8007ff; valaddr_reg:x16; val_offset:1056; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1056, x17, x15, 1056, x18)

inst_5467:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7ff800 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ffff800; op2val:0x3f800000; valaddr_reg:x16; val_offset:1064; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1064, x17, x15, 1064, x18)

inst_5468:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3ffff800; valaddr_reg:x16; val_offset:1072; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1072, x17, x15, 1072, x18)

inst_5469:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000fff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800fff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1080; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1080, x17, x15, 1080, x18)

inst_5470:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f800fff; valaddr_reg:x16; val_offset:1088; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1088, x17, x15, 1088, x18)

inst_5471:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7ff000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ffff000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1096; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1096, x17, x15, 1096, x18)

inst_5472:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3ffff000; valaddr_reg:x16; val_offset:1104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1104, x17, x15, 1104, x18)

inst_5473:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x001fff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f801fff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1112, x17, x15, 1112, x18)

inst_5474:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f801fff; valaddr_reg:x16; val_offset:1120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1120, x17, x15, 1120, x18)

inst_5475:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7fe000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3fffe000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1128, x17, x15, 1128, x18)

inst_5476:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3fffe000; valaddr_reg:x16; val_offset:1136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1136, x17, x15, 1136, x18)

inst_5477:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x003fff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f803fff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1144, x17, x15, 1144, x18)

inst_5478:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f803fff; valaddr_reg:x16; val_offset:1152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1152, x17, x15, 1152, x18)

inst_5479:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7fc000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3fffc000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1160, x17, x15, 1160, x18)

inst_5480:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3fffc000; valaddr_reg:x16; val_offset:1168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1168, x17, x15, 1168, x18)

inst_5481:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x007fff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f807fff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1176, x17, x15, 1176, x18)

inst_5482:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f807fff; valaddr_reg:x16; val_offset:1184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1184, x17, x15, 1184, x18)

inst_5483:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7f8000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3fff8000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1192, x17, x15, 1192, x18)

inst_5484:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3fff8000; valaddr_reg:x16; val_offset:1200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1200, x17, x15, 1200, x18)

inst_5485:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00ffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80ffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1208, x17, x15, 1208, x18)

inst_5486:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f80ffff; valaddr_reg:x16; val_offset:1216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1216, x17, x15, 1216, x18)

inst_5487:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7f0000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3fff0000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1224, x17, x15, 1224, x18)

inst_5488:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3fff0000; valaddr_reg:x16; val_offset:1232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1232, x17, x15, 1232, x18)

inst_5489:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x01ffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f81ffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1240, x17, x15, 1240, x18)

inst_5490:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f81ffff; valaddr_reg:x16; val_offset:1248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1248, x17, x15, 1248, x18)

inst_5491:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7e0000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ffe0000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1256, x17, x15, 1256, x18)

inst_5492:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3ffe0000; valaddr_reg:x16; val_offset:1264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1264, x17, x15, 1264, x18)

inst_5493:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x03ffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f83ffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1272, x17, x15, 1272, x18)

inst_5494:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f83ffff; valaddr_reg:x16; val_offset:1280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1280, x17, x15, 1280, x18)

inst_5495:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7c0000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ffc0000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1288, x17, x15, 1288, x18)

inst_5496:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3ffc0000; valaddr_reg:x16; val_offset:1296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1296, x17, x15, 1296, x18)

inst_5497:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x07ffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f87ffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1304, x17, x15, 1304, x18)

inst_5498:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f87ffff; valaddr_reg:x16; val_offset:1312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1312, x17, x15, 1312, x18)

inst_5499:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x780000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ff80000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1320, x17, x15, 1320, x18)

inst_5500:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3ff80000; valaddr_reg:x16; val_offset:1328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1328, x17, x15, 1328, x18)

inst_5501:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x0fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f8fffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1336, x17, x15, 1336, x18)

inst_5502:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f8fffff; valaddr_reg:x16; val_offset:1344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1344, x17, x15, 1344, x18)

inst_5503:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x700000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ff00000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1352, x17, x15, 1352, x18)

inst_5504:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3ff00000; valaddr_reg:x16; val_offset:1360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1360, x17, x15, 1360, x18)

inst_5505:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x1fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f9fffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1368, x17, x15, 1368, x18)

inst_5506:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f9fffff; valaddr_reg:x16; val_offset:1376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1376, x17, x15, 1376, x18)

inst_5507:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x600000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3fe00000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1384, x17, x15, 1384, x18)

inst_5508:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3fe00000; valaddr_reg:x16; val_offset:1392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1392, x17, x15, 1392, x18)

inst_5509:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x3fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3fbfffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1400, x17, x15, 1400, x18)

inst_5510:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3fbfffff; valaddr_reg:x16; val_offset:1408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1408, x17, x15, 1408, x18)

inst_5511:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3fc00000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1416, x17, x15, 1416, x18)

inst_5512:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3fc00000; valaddr_reg:x16; val_offset:1424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1424, x17, x15, 1424, x18)

inst_5513:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3fffffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1432, x17, x15, 1432, x18)

inst_5514:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3fffffff; valaddr_reg:x16; val_offset:1440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1440, x17, x15, 1440, x18)

inst_5515:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f000001; op2val:0x3f800000; valaddr_reg:x16; val_offset:1448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1448, x17, x15, 1448, x18)

inst_5516:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f000001; valaddr_reg:x16; val_offset:1456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1456, x17, x15, 1456, x18)

inst_5517:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f000000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1464, x17, x15, 1464, x18)

inst_5518:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f000000; valaddr_reg:x16; val_offset:1472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1472, x17, x15, 1472, x18)

inst_5519:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7ffffe and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7ffffe; op2val:0x3f800000; valaddr_reg:x16; val_offset:1480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1480, x17, x15, 1480, x18)

inst_5520:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f7ffffe; valaddr_reg:x16; val_offset:1488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1488, x17, x15, 1488, x18)

inst_5521:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x000003 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f000003; op2val:0x3f800000; valaddr_reg:x16; val_offset:1496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1496, x17, x15, 1496, x18)

inst_5522:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f000003; valaddr_reg:x16; val_offset:1504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1504, x17, x15, 1504, x18)

inst_5523:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7ffffc and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7ffffc; op2val:0x3f800000; valaddr_reg:x16; val_offset:1512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1512, x17, x15, 1512, x18)

inst_5524:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f7ffffc; valaddr_reg:x16; val_offset:1520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1520, x17, x15, 1520, x18)

inst_5525:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x000007 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f000007; op2val:0x3f800000; valaddr_reg:x16; val_offset:1528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1528, x17, x15, 1528, x18)

inst_5526:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f000007; valaddr_reg:x16; val_offset:1536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1536, x17, x15, 1536, x18)

inst_5527:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7ffff8 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7ffff8; op2val:0x3f800000; valaddr_reg:x16; val_offset:1544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1544, x17, x15, 1544, x18)

inst_5528:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f7ffff8; valaddr_reg:x16; val_offset:1552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1552, x17, x15, 1552, x18)

inst_5529:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x00000f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f00000f; op2val:0x3f800000; valaddr_reg:x16; val_offset:1560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1560, x17, x15, 1560, x18)

inst_5530:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f00000f; valaddr_reg:x16; val_offset:1568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1568, x17, x15, 1568, x18)

inst_5531:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7ffff0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7ffff0; op2val:0x3f800000; valaddr_reg:x16; val_offset:1576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1576, x17, x15, 1576, x18)

inst_5532:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f7ffff0; valaddr_reg:x16; val_offset:1584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1584, x17, x15, 1584, x18)

inst_5533:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x00001f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f00001f; op2val:0x3f800000; valaddr_reg:x16; val_offset:1592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1592, x17, x15, 1592, x18)

inst_5534:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f00001f; valaddr_reg:x16; val_offset:1600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1600, x17, x15, 1600, x18)

inst_5535:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7fffe0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7fffe0; op2val:0x3f800000; valaddr_reg:x16; val_offset:1608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1608, x17, x15, 1608, x18)

inst_5536:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f7fffe0; valaddr_reg:x16; val_offset:1616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1616, x17, x15, 1616, x18)

inst_5537:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x00003f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f00003f; op2val:0x3f800000; valaddr_reg:x16; val_offset:1624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1624, x17, x15, 1624, x18)

inst_5538:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f00003f; valaddr_reg:x16; val_offset:1632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1632, x17, x15, 1632, x18)

inst_5539:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7fffc0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7fffc0; op2val:0x3f800000; valaddr_reg:x16; val_offset:1640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1640, x17, x15, 1640, x18)

inst_5540:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f7fffc0; valaddr_reg:x16; val_offset:1648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1648, x17, x15, 1648, x18)

inst_5541:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x00007f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f00007f; op2val:0x3f800000; valaddr_reg:x16; val_offset:1656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1656, x17, x15, 1656, x18)

inst_5542:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f00007f; valaddr_reg:x16; val_offset:1664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1664, x17, x15, 1664, x18)

inst_5543:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7fff80 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7fff80; op2val:0x3f800000; valaddr_reg:x16; val_offset:1672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1672, x17, x15, 1672, x18)

inst_5544:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f7fff80; valaddr_reg:x16; val_offset:1680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1680, x17, x15, 1680, x18)

inst_5545:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0000ff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0000ff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1688, x17, x15, 1688, x18)

inst_5546:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f0000ff; valaddr_reg:x16; val_offset:1696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1696, x17, x15, 1696, x18)

inst_5547:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7fff00 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7fff00; op2val:0x3f800000; valaddr_reg:x16; val_offset:1704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1704, x17, x15, 1704, x18)

inst_5548:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f7fff00; valaddr_reg:x16; val_offset:1712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1712, x17, x15, 1712, x18)

inst_5549:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0001ff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0001ff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1720, x17, x15, 1720, x18)

inst_5550:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f0001ff; valaddr_reg:x16; val_offset:1728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1728, x17, x15, 1728, x18)

inst_5551:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7ffe00 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7ffe00; op2val:0x3f800000; valaddr_reg:x16; val_offset:1736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1736, x17, x15, 1736, x18)

inst_5552:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f7ffe00; valaddr_reg:x16; val_offset:1744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1744, x17, x15, 1744, x18)

inst_5553:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0003ff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0003ff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1752, x17, x15, 1752, x18)

inst_5554:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f0003ff; valaddr_reg:x16; val_offset:1760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1760, x17, x15, 1760, x18)

inst_5555:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7ffc00 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7ffc00; op2val:0x3f800000; valaddr_reg:x16; val_offset:1768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1768, x17, x15, 1768, x18)

inst_5556:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f7ffc00; valaddr_reg:x16; val_offset:1776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1776, x17, x15, 1776, x18)

inst_5557:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0007ff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0007ff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1784, x17, x15, 1784, x18)

inst_5558:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f0007ff; valaddr_reg:x16; val_offset:1792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1792, x17, x15, 1792, x18)

inst_5559:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7ff800 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7ff800; op2val:0x3f800000; valaddr_reg:x16; val_offset:1800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1800, x17, x15, 1800, x18)

inst_5560:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f7ff800; valaddr_reg:x16; val_offset:1808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1808, x17, x15, 1808, x18)

inst_5561:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x000fff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f000fff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1816, x17, x15, 1816, x18)

inst_5562:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f000fff; valaddr_reg:x16; val_offset:1824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1824, x17, x15, 1824, x18)

inst_5563:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7ff000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7ff000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1832, x17, x15, 1832, x18)

inst_5564:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f7ff000; valaddr_reg:x16; val_offset:1840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1840, x17, x15, 1840, x18)

inst_5565:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x001fff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f001fff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1848, x17, x15, 1848, x18)

inst_5566:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f001fff; valaddr_reg:x16; val_offset:1856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1856, x17, x15, 1856, x18)

inst_5567:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7fe000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7fe000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1864, x17, x15, 1864, x18)

inst_5568:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f7fe000; valaddr_reg:x16; val_offset:1872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1872, x17, x15, 1872, x18)

inst_5569:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x003fff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f003fff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1880, x17, x15, 1880, x18)

inst_5570:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f003fff; valaddr_reg:x16; val_offset:1888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1888, x17, x15, 1888, x18)

inst_5571:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7fc000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7fc000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1896, x17, x15, 1896, x18)

inst_5572:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f7fc000; valaddr_reg:x16; val_offset:1904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1904, x17, x15, 1904, x18)

inst_5573:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x007fff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f007fff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1912, x17, x15, 1912, x18)

inst_5574:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f007fff; valaddr_reg:x16; val_offset:1920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1920, x17, x15, 1920, x18)

inst_5575:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7f8000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7f8000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1928, x17, x15, 1928, x18)

inst_5576:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f7f8000; valaddr_reg:x16; val_offset:1936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1936, x17, x15, 1936, x18)

inst_5577:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x00ffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f00ffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1944, x17, x15, 1944, x18)

inst_5578:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f00ffff; valaddr_reg:x16; val_offset:1952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1952, x17, x15, 1952, x18)

inst_5579:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7f0000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7f0000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1960, x17, x15, 1960, x18)

inst_5580:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f7f0000; valaddr_reg:x16; val_offset:1968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1968, x17, x15, 1968, x18)

inst_5581:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x01ffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f01ffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1976, x17, x15, 1976, x18)

inst_5582:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f01ffff; valaddr_reg:x16; val_offset:1984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1984, x17, x15, 1984, x18)

inst_5583:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7e0000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7e0000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1992, x17, x15, 1992, x18)

inst_5584:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f7e0000; valaddr_reg:x16; val_offset:2000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2000, x17, x15, 2000, x18)

inst_5585:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x03ffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f03ffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:2008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2008, x17, x15, 2008, x18)

inst_5586:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f03ffff; valaddr_reg:x16; val_offset:2016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2016, x17, x15, 2016, x18)

inst_5587:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7c0000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7c0000; op2val:0x3f800000; valaddr_reg:x16; val_offset:2024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_23)

inst_5588:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f7c0000; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_5589:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x07ffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f07ffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 8, x17, x15, 8, x18)

inst_5590:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f07ffff; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 16, x17, x15, 16, x18)

inst_5591:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x780000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f780000; op2val:0x3f800000; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 24, x17, x15, 24, x18)

inst_5592:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f780000; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 32, x17, x15, 32, x18)

inst_5593:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0fffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 40, x17, x15, 40, x18)

inst_5594:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f0fffff; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_5595:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x700000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f700000; op2val:0x3f800000; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 56, x17, x15, 56, x18)

inst_5596:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f700000; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 64, x17, x15, 64, x18)

inst_5597:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1fffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 72, x17, x15, 72, x18)

inst_5598:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f1fffff; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_5599:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x600000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f600000; op2val:0x3f800000; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 88, x17, x15, 88, x18)

inst_5600:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f600000; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 96, x17, x15, 96, x18)

inst_5601:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3fffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 104, x17, x15, 104, x18)

inst_5602:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f3fffff; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 112, x17, x15, 112, x18)

inst_5603:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f400000; op2val:0x3f800000; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 120, x17, x15, 120, x18)

inst_5604:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f400000; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_5605:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7fffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 136, x17, x15, 136, x18)

inst_5606:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3f7fffff; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 144, x17, x15, 144, x18)

inst_5607:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e800001; op2val:0x3f800000; valaddr_reg:x16; val_offset:152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 152, x17, x15, 152, x18)

inst_5608:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e800001; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_5609:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e800000; op2val:0x3f800000; valaddr_reg:x16; val_offset:168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 168, x17, x15, 168, x18)

inst_5610:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e800000; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 176, x17, x15, 176, x18)

inst_5611:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7ffffe and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efffffe; op2val:0x3f800000; valaddr_reg:x16; val_offset:184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 184, x17, x15, 184, x18)

inst_5612:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3efffffe; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 192, x17, x15, 192, x18)

inst_5613:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x000003 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e800003; op2val:0x3f800000; valaddr_reg:x16; val_offset:200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 200, x17, x15, 200, x18)

inst_5614:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e800003; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_5615:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7ffffc and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efffffc; op2val:0x3f800000; valaddr_reg:x16; val_offset:216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 216, x17, x15, 216, x18)

inst_5616:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3efffffc; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 224, x17, x15, 224, x18)

inst_5617:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x000007 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e800007; op2val:0x3f800000; valaddr_reg:x16; val_offset:232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 232, x17, x15, 232, x18)

inst_5618:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e800007; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_5619:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7ffff8 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efffff8; op2val:0x3f800000; valaddr_reg:x16; val_offset:248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 248, x17, x15, 248, x18)

inst_5620:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3efffff8; valaddr_reg:x16; val_offset:256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 256, x17, x15, 256, x18)

inst_5621:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x00000f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e80000f; op2val:0x3f800000; valaddr_reg:x16; val_offset:264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 264, x17, x15, 264, x18)

inst_5622:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e80000f; valaddr_reg:x16; val_offset:272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 272, x17, x15, 272, x18)

inst_5623:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7ffff0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efffff0; op2val:0x3f800000; valaddr_reg:x16; val_offset:280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 280, x17, x15, 280, x18)

inst_5624:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3efffff0; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_5625:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x00001f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e80001f; op2val:0x3f800000; valaddr_reg:x16; val_offset:296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 296, x17, x15, 296, x18)

inst_5626:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e80001f; valaddr_reg:x16; val_offset:304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 304, x17, x15, 304, x18)

inst_5627:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7fffe0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3effffe0; op2val:0x3f800000; valaddr_reg:x16; val_offset:312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 312, x17, x15, 312, x18)

inst_5628:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3effffe0; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_5629:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x00003f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e80003f; op2val:0x3f800000; valaddr_reg:x16; val_offset:328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 328, x17, x15, 328, x18)

inst_5630:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e80003f; valaddr_reg:x16; val_offset:336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 336, x17, x15, 336, x18)

inst_5631:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7fffc0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3effffc0; op2val:0x3f800000; valaddr_reg:x16; val_offset:344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 344, x17, x15, 344, x18)

inst_5632:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3effffc0; valaddr_reg:x16; val_offset:352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 352, x17, x15, 352, x18)

inst_5633:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x00007f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e80007f; op2val:0x3f800000; valaddr_reg:x16; val_offset:360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 360, x17, x15, 360, x18)

inst_5634:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e80007f; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_5635:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7fff80 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3effff80; op2val:0x3f800000; valaddr_reg:x16; val_offset:376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 376, x17, x15, 376, x18)

inst_5636:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3effff80; valaddr_reg:x16; val_offset:384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 384, x17, x15, 384, x18)

inst_5637:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0000ff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8000ff; op2val:0x3f800000; valaddr_reg:x16; val_offset:392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 392, x17, x15, 392, x18)

inst_5638:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e8000ff; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_5639:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7fff00 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3effff00; op2val:0x3f800000; valaddr_reg:x16; val_offset:408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 408, x17, x15, 408, x18)

inst_5640:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3effff00; valaddr_reg:x16; val_offset:416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 416, x17, x15, 416, x18)

inst_5641:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0001ff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8001ff; op2val:0x3f800000; valaddr_reg:x16; val_offset:424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 424, x17, x15, 424, x18)

inst_5642:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e8001ff; valaddr_reg:x16; val_offset:432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 432, x17, x15, 432, x18)

inst_5643:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7ffe00 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efffe00; op2val:0x3f800000; valaddr_reg:x16; val_offset:440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 440, x17, x15, 440, x18)

inst_5644:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3efffe00; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_5645:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0003ff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8003ff; op2val:0x3f800000; valaddr_reg:x16; val_offset:456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 456, x17, x15, 456, x18)

inst_5646:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e8003ff; valaddr_reg:x16; val_offset:464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 464, x17, x15, 464, x18)

inst_5647:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7ffc00 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efffc00; op2val:0x3f800000; valaddr_reg:x16; val_offset:472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 472, x17, x15, 472, x18)

inst_5648:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3efffc00; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_5649:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0007ff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8007ff; op2val:0x3f800000; valaddr_reg:x16; val_offset:488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 488, x17, x15, 488, x18)

inst_5650:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e8007ff; valaddr_reg:x16; val_offset:496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 496, x17, x15, 496, x18)

inst_5651:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7ff800 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efff800; op2val:0x3f800000; valaddr_reg:x16; val_offset:504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 504, x17, x15, 504, x18)

inst_5652:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3efff800; valaddr_reg:x16; val_offset:512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 512, x17, x15, 512, x18)

inst_5653:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x000fff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e800fff; op2val:0x3f800000; valaddr_reg:x16; val_offset:520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 520, x17, x15, 520, x18)

inst_5654:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e800fff; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_5655:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7ff000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efff000; op2val:0x3f800000; valaddr_reg:x16; val_offset:536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 536, x17, x15, 536, x18)

inst_5656:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3efff000; valaddr_reg:x16; val_offset:544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 544, x17, x15, 544, x18)

inst_5657:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x001fff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e801fff; op2val:0x3f800000; valaddr_reg:x16; val_offset:552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 552, x17, x15, 552, x18)

inst_5658:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e801fff; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_5659:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7fe000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3effe000; op2val:0x3f800000; valaddr_reg:x16; val_offset:568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 568, x17, x15, 568, x18)

inst_5660:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3effe000; valaddr_reg:x16; val_offset:576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 576, x17, x15, 576, x18)

inst_5661:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x003fff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e803fff; op2val:0x3f800000; valaddr_reg:x16; val_offset:584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 584, x17, x15, 584, x18)

inst_5662:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e803fff; valaddr_reg:x16; val_offset:592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 592, x17, x15, 592, x18)

inst_5663:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7fc000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3effc000; op2val:0x3f800000; valaddr_reg:x16; val_offset:600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 600, x17, x15, 600, x18)

inst_5664:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3effc000; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 608, x17, x15, 608, x18)

inst_5665:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x007fff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e807fff; op2val:0x3f800000; valaddr_reg:x16; val_offset:616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 616, x17, x15, 616, x18)

inst_5666:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e807fff; valaddr_reg:x16; val_offset:624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 624, x17, x15, 624, x18)

inst_5667:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7f8000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eff8000; op2val:0x3f800000; valaddr_reg:x16; val_offset:632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 632, x17, x15, 632, x18)

inst_5668:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3eff8000; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_5669:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x00ffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e80ffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 648, x17, x15, 648, x18)

inst_5670:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e80ffff; valaddr_reg:x16; val_offset:656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 656, x17, x15, 656, x18)

inst_5671:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7f0000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eff0000; op2val:0x3f800000; valaddr_reg:x16; val_offset:664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 664, x17, x15, 664, x18)

inst_5672:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3eff0000; valaddr_reg:x16; val_offset:672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 672, x17, x15, 672, x18)

inst_5673:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x01ffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e81ffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 680, x17, x15, 680, x18)

inst_5674:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e81ffff; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 688, x17, x15, 688, x18)

inst_5675:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7e0000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efe0000; op2val:0x3f800000; valaddr_reg:x16; val_offset:696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 696, x17, x15, 696, x18)

inst_5676:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3efe0000; valaddr_reg:x16; val_offset:704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 704, x17, x15, 704, x18)

inst_5677:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x03ffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e83ffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 712, x17, x15, 712, x18)

inst_5678:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e83ffff; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_5679:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7c0000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efc0000; op2val:0x3f800000; valaddr_reg:x16; val_offset:728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 728, x17, x15, 728, x18)

inst_5680:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3efc0000; valaddr_reg:x16; val_offset:736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 736, x17, x15, 736, x18)

inst_5681:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x07ffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e87ffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 744, x17, x15, 744, x18)

inst_5682:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e87ffff; valaddr_reg:x16; val_offset:752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 752, x17, x15, 752, x18)

inst_5683:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x780000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef80000; op2val:0x3f800000; valaddr_reg:x16; val_offset:760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 760, x17, x15, 760, x18)

inst_5684:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3ef80000; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 768, x17, x15, 768, x18)

inst_5685:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8fffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 776, x17, x15, 776, x18)

inst_5686:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e8fffff; valaddr_reg:x16; val_offset:784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 784, x17, x15, 784, x18)

inst_5687:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x700000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef00000; op2val:0x3f800000; valaddr_reg:x16; val_offset:792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 792, x17, x15, 792, x18)

inst_5688:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3ef00000; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_5689:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9fffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 808, x17, x15, 808, x18)

inst_5690:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e9fffff; valaddr_reg:x16; val_offset:816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 816, x17, x15, 816, x18)

inst_5691:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x600000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ee00000; op2val:0x3f800000; valaddr_reg:x16; val_offset:824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 824, x17, x15, 824, x18)

inst_5692:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3ee00000; valaddr_reg:x16; val_offset:832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 832, x17, x15, 832, x18)

inst_5693:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebfffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 840, x17, x15, 840, x18)

inst_5694:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3ebfffff; valaddr_reg:x16; val_offset:848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 848, x17, x15, 848, x18)

inst_5695:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec00000; op2val:0x3f800000; valaddr_reg:x16; val_offset:856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 856, x17, x15, 856, x18)

inst_5696:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3ec00000; valaddr_reg:x16; val_offset:864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 864, x17, x15, 864, x18)

inst_5697:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3effffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 872, x17, x15, 872, x18)

inst_5698:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3effffff; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 880, x17, x15, 880, x18)

inst_5699:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e000001; op2val:0x3f800000; valaddr_reg:x16; val_offset:888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 888, x17, x15, 888, x18)

inst_5700:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e000001; valaddr_reg:x16; val_offset:896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 896, x17, x15, 896, x18)

inst_5701:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e000000; op2val:0x3f800000; valaddr_reg:x16; val_offset:904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 904, x17, x15, 904, x18)

inst_5702:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e000000; valaddr_reg:x16; val_offset:912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 912, x17, x15, 912, x18)

inst_5703:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7ffffe and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e7ffffe; op2val:0x3f800000; valaddr_reg:x16; val_offset:920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 920, x17, x15, 920, x18)

inst_5704:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e7ffffe; valaddr_reg:x16; val_offset:928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 928, x17, x15, 928, x18)

inst_5705:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x000003 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e000003; op2val:0x3f800000; valaddr_reg:x16; val_offset:936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 936, x17, x15, 936, x18)

inst_5706:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e000003; valaddr_reg:x16; val_offset:944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 944, x17, x15, 944, x18)

inst_5707:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7ffffc and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e7ffffc; op2val:0x3f800000; valaddr_reg:x16; val_offset:952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 952, x17, x15, 952, x18)

inst_5708:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e7ffffc; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 960, x17, x15, 960, x18)

inst_5709:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x000007 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e000007; op2val:0x3f800000; valaddr_reg:x16; val_offset:968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 968, x17, x15, 968, x18)

inst_5710:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e000007; valaddr_reg:x16; val_offset:976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 976, x17, x15, 976, x18)

inst_5711:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7ffff8 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e7ffff8; op2val:0x3f800000; valaddr_reg:x16; val_offset:984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 984, x17, x15, 984, x18)

inst_5712:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e7ffff8; valaddr_reg:x16; val_offset:992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 992, x17, x15, 992, x18)

inst_5713:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x00000f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e00000f; op2val:0x3f800000; valaddr_reg:x16; val_offset:1000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1000, x17, x15, 1000, x18)

inst_5714:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e00000f; valaddr_reg:x16; val_offset:1008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1008, x17, x15, 1008, x18)

inst_5715:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7ffff0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e7ffff0; op2val:0x3f800000; valaddr_reg:x16; val_offset:1016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1016, x17, x15, 1016, x18)

inst_5716:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e7ffff0; valaddr_reg:x16; val_offset:1024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1024, x17, x15, 1024, x18)

inst_5717:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x00001f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e00001f; op2val:0x3f800000; valaddr_reg:x16; val_offset:1032; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1032, x17, x15, 1032, x18)

inst_5718:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e00001f; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1040, x17, x15, 1040, x18)

inst_5719:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7fffe0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e7fffe0; op2val:0x3f800000; valaddr_reg:x16; val_offset:1048; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1048, x17, x15, 1048, x18)

inst_5720:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e7fffe0; valaddr_reg:x16; val_offset:1056; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1056, x17, x15, 1056, x18)

inst_5721:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x00003f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e00003f; op2val:0x3f800000; valaddr_reg:x16; val_offset:1064; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1064, x17, x15, 1064, x18)

inst_5722:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e00003f; valaddr_reg:x16; val_offset:1072; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1072, x17, x15, 1072, x18)

inst_5723:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7fffc0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e7fffc0; op2val:0x3f800000; valaddr_reg:x16; val_offset:1080; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1080, x17, x15, 1080, x18)

inst_5724:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e7fffc0; valaddr_reg:x16; val_offset:1088; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1088, x17, x15, 1088, x18)

inst_5725:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x00007f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e00007f; op2val:0x3f800000; valaddr_reg:x16; val_offset:1096; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1096, x17, x15, 1096, x18)

inst_5726:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e00007f; valaddr_reg:x16; val_offset:1104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1104, x17, x15, 1104, x18)

inst_5727:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7fff80 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e7fff80; op2val:0x3f800000; valaddr_reg:x16; val_offset:1112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1112, x17, x15, 1112, x18)

inst_5728:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e7fff80; valaddr_reg:x16; val_offset:1120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1120, x17, x15, 1120, x18)

inst_5729:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x0000ff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e0000ff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1128, x17, x15, 1128, x18)

inst_5730:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e0000ff; valaddr_reg:x16; val_offset:1136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1136, x17, x15, 1136, x18)

inst_5731:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7fff00 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e7fff00; op2val:0x3f800000; valaddr_reg:x16; val_offset:1144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1144, x17, x15, 1144, x18)

inst_5732:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e7fff00; valaddr_reg:x16; val_offset:1152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1152, x17, x15, 1152, x18)

inst_5733:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x0001ff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e0001ff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1160, x17, x15, 1160, x18)

inst_5734:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e0001ff; valaddr_reg:x16; val_offset:1168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1168, x17, x15, 1168, x18)

inst_5735:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7ffe00 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e7ffe00; op2val:0x3f800000; valaddr_reg:x16; val_offset:1176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1176, x17, x15, 1176, x18)

inst_5736:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e7ffe00; valaddr_reg:x16; val_offset:1184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1184, x17, x15, 1184, x18)

inst_5737:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x0003ff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e0003ff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1192, x17, x15, 1192, x18)

inst_5738:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e0003ff; valaddr_reg:x16; val_offset:1200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1200, x17, x15, 1200, x18)

inst_5739:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7ffc00 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e7ffc00; op2val:0x3f800000; valaddr_reg:x16; val_offset:1208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1208, x17, x15, 1208, x18)

inst_5740:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e7ffc00; valaddr_reg:x16; val_offset:1216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1216, x17, x15, 1216, x18)

inst_5741:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x0007ff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e0007ff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1224, x17, x15, 1224, x18)

inst_5742:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e0007ff; valaddr_reg:x16; val_offset:1232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1232, x17, x15, 1232, x18)

inst_5743:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7ff800 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e7ff800; op2val:0x3f800000; valaddr_reg:x16; val_offset:1240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1240, x17, x15, 1240, x18)

inst_5744:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e7ff800; valaddr_reg:x16; val_offset:1248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1248, x17, x15, 1248, x18)

inst_5745:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x000fff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e000fff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1256, x17, x15, 1256, x18)

inst_5746:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e000fff; valaddr_reg:x16; val_offset:1264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1264, x17, x15, 1264, x18)

inst_5747:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7ff000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e7ff000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1272, x17, x15, 1272, x18)

inst_5748:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e7ff000; valaddr_reg:x16; val_offset:1280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1280, x17, x15, 1280, x18)

inst_5749:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x001fff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e001fff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1288, x17, x15, 1288, x18)

inst_5750:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e001fff; valaddr_reg:x16; val_offset:1296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1296, x17, x15, 1296, x18)

inst_5751:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7fe000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e7fe000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1304, x17, x15, 1304, x18)

inst_5752:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e7fe000; valaddr_reg:x16; val_offset:1312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1312, x17, x15, 1312, x18)

inst_5753:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x003fff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e003fff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1320, x17, x15, 1320, x18)

inst_5754:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e003fff; valaddr_reg:x16; val_offset:1328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1328, x17, x15, 1328, x18)

inst_5755:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7fc000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e7fc000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1336, x17, x15, 1336, x18)

inst_5756:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e7fc000; valaddr_reg:x16; val_offset:1344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1344, x17, x15, 1344, x18)

inst_5757:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x007fff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e007fff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1352, x17, x15, 1352, x18)

inst_5758:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e007fff; valaddr_reg:x16; val_offset:1360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1360, x17, x15, 1360, x18)

inst_5759:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7f8000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e7f8000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1368, x17, x15, 1368, x18)

inst_5760:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e7f8000; valaddr_reg:x16; val_offset:1376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1376, x17, x15, 1376, x18)

inst_5761:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x00ffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e00ffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1384, x17, x15, 1384, x18)

inst_5762:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e00ffff; valaddr_reg:x16; val_offset:1392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1392, x17, x15, 1392, x18)

inst_5763:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7f0000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e7f0000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1400, x17, x15, 1400, x18)

inst_5764:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e7f0000; valaddr_reg:x16; val_offset:1408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1408, x17, x15, 1408, x18)

inst_5765:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x01ffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e01ffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1416, x17, x15, 1416, x18)

inst_5766:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e01ffff; valaddr_reg:x16; val_offset:1424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1424, x17, x15, 1424, x18)

inst_5767:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7e0000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e7e0000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1432, x17, x15, 1432, x18)

inst_5768:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e7e0000; valaddr_reg:x16; val_offset:1440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1440, x17, x15, 1440, x18)

inst_5769:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x03ffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e03ffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1448, x17, x15, 1448, x18)

inst_5770:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e03ffff; valaddr_reg:x16; val_offset:1456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1456, x17, x15, 1456, x18)

inst_5771:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7c0000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e7c0000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1464, x17, x15, 1464, x18)

inst_5772:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e7c0000; valaddr_reg:x16; val_offset:1472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1472, x17, x15, 1472, x18)

inst_5773:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x07ffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e07ffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1480, x17, x15, 1480, x18)

inst_5774:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e07ffff; valaddr_reg:x16; val_offset:1488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1488, x17, x15, 1488, x18)

inst_5775:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x780000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e780000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1496, x17, x15, 1496, x18)

inst_5776:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e780000; valaddr_reg:x16; val_offset:1504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1504, x17, x15, 1504, x18)

inst_5777:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x0fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e0fffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1512, x17, x15, 1512, x18)

inst_5778:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e0fffff; valaddr_reg:x16; val_offset:1520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1520, x17, x15, 1520, x18)

inst_5779:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x700000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e700000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1528, x17, x15, 1528, x18)

inst_5780:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e700000; valaddr_reg:x16; val_offset:1536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1536, x17, x15, 1536, x18)

inst_5781:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x1fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e1fffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1544, x17, x15, 1544, x18)

inst_5782:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e1fffff; valaddr_reg:x16; val_offset:1552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1552, x17, x15, 1552, x18)

inst_5783:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x600000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e600000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1560, x17, x15, 1560, x18)

inst_5784:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e600000; valaddr_reg:x16; val_offset:1568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1568, x17, x15, 1568, x18)

inst_5785:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x3fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e3fffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1576, x17, x15, 1576, x18)

inst_5786:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e3fffff; valaddr_reg:x16; val_offset:1584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1584, x17, x15, 1584, x18)

inst_5787:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e400000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1592, x17, x15, 1592, x18)

inst_5788:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e400000; valaddr_reg:x16; val_offset:1600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1600, x17, x15, 1600, x18)

inst_5789:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e7fffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1608, x17, x15, 1608, x18)

inst_5790:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3e7fffff; valaddr_reg:x16; val_offset:1616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1616, x17, x15, 1616, x18)

inst_5791:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d800001; op2val:0x3f800000; valaddr_reg:x16; val_offset:1624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1624, x17, x15, 1624, x18)

inst_5792:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3d800001; valaddr_reg:x16; val_offset:1632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1632, x17, x15, 1632, x18)

inst_5793:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d800000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1640, x17, x15, 1640, x18)

inst_5794:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3d800000; valaddr_reg:x16; val_offset:1648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1648, x17, x15, 1648, x18)

inst_5795:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7ffffe and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dfffffe; op2val:0x3f800000; valaddr_reg:x16; val_offset:1656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1656, x17, x15, 1656, x18)

inst_5796:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3dfffffe; valaddr_reg:x16; val_offset:1664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1664, x17, x15, 1664, x18)

inst_5797:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x000003 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d800003; op2val:0x3f800000; valaddr_reg:x16; val_offset:1672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1672, x17, x15, 1672, x18)

inst_5798:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3d800003; valaddr_reg:x16; val_offset:1680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1680, x17, x15, 1680, x18)

inst_5799:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7ffffc and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dfffffc; op2val:0x3f800000; valaddr_reg:x16; val_offset:1688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1688, x17, x15, 1688, x18)

inst_5800:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3dfffffc; valaddr_reg:x16; val_offset:1696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1696, x17, x15, 1696, x18)

inst_5801:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x000007 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d800007; op2val:0x3f800000; valaddr_reg:x16; val_offset:1704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1704, x17, x15, 1704, x18)

inst_5802:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3d800007; valaddr_reg:x16; val_offset:1712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1712, x17, x15, 1712, x18)

inst_5803:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7ffff8 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dfffff8; op2val:0x3f800000; valaddr_reg:x16; val_offset:1720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1720, x17, x15, 1720, x18)

inst_5804:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3dfffff8; valaddr_reg:x16; val_offset:1728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1728, x17, x15, 1728, x18)

inst_5805:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x00000f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d80000f; op2val:0x3f800000; valaddr_reg:x16; val_offset:1736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1736, x17, x15, 1736, x18)

inst_5806:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3d80000f; valaddr_reg:x16; val_offset:1744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1744, x17, x15, 1744, x18)

inst_5807:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7ffff0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dfffff0; op2val:0x3f800000; valaddr_reg:x16; val_offset:1752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1752, x17, x15, 1752, x18)

inst_5808:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3dfffff0; valaddr_reg:x16; val_offset:1760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1760, x17, x15, 1760, x18)

inst_5809:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x00001f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d80001f; op2val:0x3f800000; valaddr_reg:x16; val_offset:1768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1768, x17, x15, 1768, x18)

inst_5810:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3d80001f; valaddr_reg:x16; val_offset:1776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1776, x17, x15, 1776, x18)

inst_5811:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7fffe0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dffffe0; op2val:0x3f800000; valaddr_reg:x16; val_offset:1784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1784, x17, x15, 1784, x18)

inst_5812:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3dffffe0; valaddr_reg:x16; val_offset:1792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1792, x17, x15, 1792, x18)

inst_5813:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x00003f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d80003f; op2val:0x3f800000; valaddr_reg:x16; val_offset:1800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1800, x17, x15, 1800, x18)

inst_5814:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3d80003f; valaddr_reg:x16; val_offset:1808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1808, x17, x15, 1808, x18)

inst_5815:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7fffc0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dffffc0; op2val:0x3f800000; valaddr_reg:x16; val_offset:1816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1816, x17, x15, 1816, x18)

inst_5816:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3dffffc0; valaddr_reg:x16; val_offset:1824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1824, x17, x15, 1824, x18)

inst_5817:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x00007f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d80007f; op2val:0x3f800000; valaddr_reg:x16; val_offset:1832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1832, x17, x15, 1832, x18)

inst_5818:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3d80007f; valaddr_reg:x16; val_offset:1840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1840, x17, x15, 1840, x18)

inst_5819:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7fff80 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dffff80; op2val:0x3f800000; valaddr_reg:x16; val_offset:1848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1848, x17, x15, 1848, x18)

inst_5820:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3dffff80; valaddr_reg:x16; val_offset:1856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1856, x17, x15, 1856, x18)

inst_5821:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x0000ff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d8000ff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1864, x17, x15, 1864, x18)

inst_5822:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3d8000ff; valaddr_reg:x16; val_offset:1872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1872, x17, x15, 1872, x18)

inst_5823:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7fff00 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dffff00; op2val:0x3f800000; valaddr_reg:x16; val_offset:1880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1880, x17, x15, 1880, x18)

inst_5824:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3dffff00; valaddr_reg:x16; val_offset:1888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1888, x17, x15, 1888, x18)

inst_5825:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x0001ff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d8001ff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1896, x17, x15, 1896, x18)

inst_5826:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3d8001ff; valaddr_reg:x16; val_offset:1904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1904, x17, x15, 1904, x18)

inst_5827:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7ffe00 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dfffe00; op2val:0x3f800000; valaddr_reg:x16; val_offset:1912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1912, x17, x15, 1912, x18)

inst_5828:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3dfffe00; valaddr_reg:x16; val_offset:1920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1920, x17, x15, 1920, x18)

inst_5829:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x0003ff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d8003ff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1928, x17, x15, 1928, x18)

inst_5830:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3d8003ff; valaddr_reg:x16; val_offset:1936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1936, x17, x15, 1936, x18)

inst_5831:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7ffc00 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dfffc00; op2val:0x3f800000; valaddr_reg:x16; val_offset:1944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1944, x17, x15, 1944, x18)

inst_5832:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3dfffc00; valaddr_reg:x16; val_offset:1952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1952, x17, x15, 1952, x18)

inst_5833:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x0007ff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d8007ff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1960, x17, x15, 1960, x18)

inst_5834:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3d8007ff; valaddr_reg:x16; val_offset:1968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1968, x17, x15, 1968, x18)

inst_5835:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7ff800 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dfff800; op2val:0x3f800000; valaddr_reg:x16; val_offset:1976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1976, x17, x15, 1976, x18)

inst_5836:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3dfff800; valaddr_reg:x16; val_offset:1984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1984, x17, x15, 1984, x18)

inst_5837:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x000fff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d800fff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1992, x17, x15, 1992, x18)

inst_5838:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3d800fff; valaddr_reg:x16; val_offset:2000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2000, x17, x15, 2000, x18)

inst_5839:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7ff000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dfff000; op2val:0x3f800000; valaddr_reg:x16; val_offset:2008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2008, x17, x15, 2008, x18)

inst_5840:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3dfff000; valaddr_reg:x16; val_offset:2016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2016, x17, x15, 2016, x18)

inst_5841:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x001fff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d801fff; op2val:0x3f800000; valaddr_reg:x16; val_offset:2024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_24)

inst_5842:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3d801fff; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_5843:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7fe000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dffe000; op2val:0x3f800000; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 8, x17, x15, 8, x18)

inst_5844:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3dffe000; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 16, x17, x15, 16, x18)

inst_5845:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x003fff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d803fff; op2val:0x3f800000; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 24, x17, x15, 24, x18)

inst_5846:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3d803fff; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 32, x17, x15, 32, x18)

inst_5847:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7fc000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dffc000; op2val:0x3f800000; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 40, x17, x15, 40, x18)

inst_5848:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3dffc000; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_5849:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x007fff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d807fff; op2val:0x3f800000; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 56, x17, x15, 56, x18)

inst_5850:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3d807fff; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 64, x17, x15, 64, x18)

inst_5851:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7f8000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dff8000; op2val:0x3f800000; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 72, x17, x15, 72, x18)

inst_5852:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3dff8000; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_5853:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x00ffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d80ffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 88, x17, x15, 88, x18)

inst_5854:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3d80ffff; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 96, x17, x15, 96, x18)

inst_5855:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7f0000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dff0000; op2val:0x3f800000; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 104, x17, x15, 104, x18)

inst_5856:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3dff0000; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 112, x17, x15, 112, x18)

inst_5857:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x01ffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d81ffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 120, x17, x15, 120, x18)

inst_5858:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3d81ffff; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_5859:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7e0000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dfe0000; op2val:0x3f800000; valaddr_reg:x16; val_offset:136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 136, x17, x15, 136, x18)

inst_5860:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3dfe0000; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 144, x17, x15, 144, x18)

inst_5861:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x03ffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d83ffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 152, x17, x15, 152, x18)

inst_5862:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3d83ffff; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_5863:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7c0000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dfc0000; op2val:0x3f800000; valaddr_reg:x16; val_offset:168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 168, x17, x15, 168, x18)

inst_5864:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3dfc0000; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 176, x17, x15, 176, x18)

inst_5865:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x07ffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d87ffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 184, x17, x15, 184, x18)

inst_5866:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3d87ffff; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 192, x17, x15, 192, x18)

inst_5867:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x780000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3df80000; op2val:0x3f800000; valaddr_reg:x16; val_offset:200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 200, x17, x15, 200, x18)

inst_5868:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3df80000; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_5869:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x0fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d8fffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 216, x17, x15, 216, x18)

inst_5870:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3d8fffff; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 224, x17, x15, 224, x18)

inst_5871:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x700000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3df00000; op2val:0x3f800000; valaddr_reg:x16; val_offset:232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 232, x17, x15, 232, x18)

inst_5872:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3df00000; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_5873:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x1fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d9fffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 248, x17, x15, 248, x18)

inst_5874:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3d9fffff; valaddr_reg:x16; val_offset:256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 256, x17, x15, 256, x18)

inst_5875:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x600000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3de00000; op2val:0x3f800000; valaddr_reg:x16; val_offset:264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 264, x17, x15, 264, x18)

inst_5876:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3de00000; valaddr_reg:x16; val_offset:272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 272, x17, x15, 272, x18)

inst_5877:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x3fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dbfffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 280, x17, x15, 280, x18)

inst_5878:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3dbfffff; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_5879:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dc00000; op2val:0x3f800000; valaddr_reg:x16; val_offset:296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 296, x17, x15, 296, x18)

inst_5880:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3dc00000; valaddr_reg:x16; val_offset:304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 304, x17, x15, 304, x18)

inst_5881:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dffffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 312, x17, x15, 312, x18)

inst_5882:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3dffffff; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_5883:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a000001; op2val:0x3f800000; valaddr_reg:x16; val_offset:328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 328, x17, x15, 328, x18)

inst_5884:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xf4 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x7a000001; valaddr_reg:x16; val_offset:336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 336, x17, x15, 336, x18)

inst_5885:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a000000; op2val:0x3f800000; valaddr_reg:x16; val_offset:344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 344, x17, x15, 344, x18)

inst_5886:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xf4 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x7a000000; valaddr_reg:x16; val_offset:352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 352, x17, x15, 352, x18)

inst_5887:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x7ffffe and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a7ffffe; op2val:0x3f800000; valaddr_reg:x16; val_offset:360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 360, x17, x15, 360, x18)

inst_5888:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xf4 and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x7a7ffffe; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_5889:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x000003 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a000003; op2val:0x3f800000; valaddr_reg:x16; val_offset:376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 376, x17, x15, 376, x18)

inst_5890:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xf4 and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x7a000003; valaddr_reg:x16; val_offset:384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 384, x17, x15, 384, x18)

inst_5891:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x7ffffc and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a7ffffc; op2val:0x3f800000; valaddr_reg:x16; val_offset:392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 392, x17, x15, 392, x18)

inst_5892:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xf4 and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x7a7ffffc; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_5893:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x000007 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a000007; op2val:0x3f800000; valaddr_reg:x16; val_offset:408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 408, x17, x15, 408, x18)

inst_5894:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xf4 and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x7a000007; valaddr_reg:x16; val_offset:416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 416, x17, x15, 416, x18)

inst_5895:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x7ffff8 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a7ffff8; op2val:0x3f800000; valaddr_reg:x16; val_offset:424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 424, x17, x15, 424, x18)

inst_5896:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xf4 and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x7a7ffff8; valaddr_reg:x16; val_offset:432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 432, x17, x15, 432, x18)

inst_5897:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x00000f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a00000f; op2val:0x3f800000; valaddr_reg:x16; val_offset:440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 440, x17, x15, 440, x18)

inst_5898:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xf4 and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x7a00000f; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_5899:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x7ffff0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a7ffff0; op2val:0x3f800000; valaddr_reg:x16; val_offset:456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 456, x17, x15, 456, x18)

inst_5900:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xf4 and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x7a7ffff0; valaddr_reg:x16; val_offset:464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 464, x17, x15, 464, x18)

inst_5901:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x00001f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a00001f; op2val:0x3f800000; valaddr_reg:x16; val_offset:472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 472, x17, x15, 472, x18)

inst_5902:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xf4 and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x7a00001f; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_5903:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x7fffe0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a7fffe0; op2val:0x3f800000; valaddr_reg:x16; val_offset:488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 488, x17, x15, 488, x18)

inst_5904:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xf4 and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x7a7fffe0; valaddr_reg:x16; val_offset:496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 496, x17, x15, 496, x18)

inst_5905:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x00003f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a00003f; op2val:0x3f800000; valaddr_reg:x16; val_offset:504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 504, x17, x15, 504, x18)

inst_5906:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xf4 and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x7a00003f; valaddr_reg:x16; val_offset:512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 512, x17, x15, 512, x18)

inst_5907:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x7fffc0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a7fffc0; op2val:0x3f800000; valaddr_reg:x16; val_offset:520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 520, x17, x15, 520, x18)

inst_5908:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xf4 and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x7a7fffc0; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_5909:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x00007f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a00007f; op2val:0x3f800000; valaddr_reg:x16; val_offset:536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 536, x17, x15, 536, x18)

inst_5910:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xf4 and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x7a00007f; valaddr_reg:x16; val_offset:544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 544, x17, x15, 544, x18)

inst_5911:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x7fff80 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a7fff80; op2val:0x3f800000; valaddr_reg:x16; val_offset:552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 552, x17, x15, 552, x18)

inst_5912:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xf4 and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x7a7fff80; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_5913:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x0000ff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a0000ff; op2val:0x3f800000; valaddr_reg:x16; val_offset:568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 568, x17, x15, 568, x18)

inst_5914:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xf4 and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x7a0000ff; valaddr_reg:x16; val_offset:576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 576, x17, x15, 576, x18)

inst_5915:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x7fff00 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a7fff00; op2val:0x3f800000; valaddr_reg:x16; val_offset:584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 584, x17, x15, 584, x18)

inst_5916:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xf4 and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x7a7fff00; valaddr_reg:x16; val_offset:592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 592, x17, x15, 592, x18)

inst_5917:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x0001ff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a0001ff; op2val:0x3f800000; valaddr_reg:x16; val_offset:600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 600, x17, x15, 600, x18)

inst_5918:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xf4 and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x7a0001ff; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 608, x17, x15, 608, x18)

inst_5919:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x7ffe00 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a7ffe00; op2val:0x3f800000; valaddr_reg:x16; val_offset:616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 616, x17, x15, 616, x18)

inst_5920:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xf4 and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x7a7ffe00; valaddr_reg:x16; val_offset:624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 624, x17, x15, 624, x18)

inst_5921:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x0003ff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a0003ff; op2val:0x3f800000; valaddr_reg:x16; val_offset:632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 632, x17, x15, 632, x18)

inst_5922:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xf4 and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x7a0003ff; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_5923:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x7ffc00 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a7ffc00; op2val:0x3f800000; valaddr_reg:x16; val_offset:648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 648, x17, x15, 648, x18)

inst_5924:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xf4 and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x7a7ffc00; valaddr_reg:x16; val_offset:656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 656, x17, x15, 656, x18)

inst_5925:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x0007ff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a0007ff; op2val:0x3f800000; valaddr_reg:x16; val_offset:664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 664, x17, x15, 664, x18)

inst_5926:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xf4 and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x7a0007ff; valaddr_reg:x16; val_offset:672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 672, x17, x15, 672, x18)

inst_5927:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x7ff800 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a7ff800; op2val:0x3f800000; valaddr_reg:x16; val_offset:680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 680, x17, x15, 680, x18)

inst_5928:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xf4 and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x7a7ff800; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 688, x17, x15, 688, x18)

inst_5929:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x000fff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a000fff; op2val:0x3f800000; valaddr_reg:x16; val_offset:696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 696, x17, x15, 696, x18)

inst_5930:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xf4 and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x7a000fff; valaddr_reg:x16; val_offset:704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 704, x17, x15, 704, x18)

inst_5931:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x7ff000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a7ff000; op2val:0x3f800000; valaddr_reg:x16; val_offset:712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 712, x17, x15, 712, x18)

inst_5932:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xf4 and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x7a7ff000; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_5933:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x001fff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a001fff; op2val:0x3f800000; valaddr_reg:x16; val_offset:728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 728, x17, x15, 728, x18)

inst_5934:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xf4 and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x7a001fff; valaddr_reg:x16; val_offset:736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 736, x17, x15, 736, x18)

inst_5935:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x7fe000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a7fe000; op2val:0x3f800000; valaddr_reg:x16; val_offset:744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 744, x17, x15, 744, x18)

inst_5936:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xf4 and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x7a7fe000; valaddr_reg:x16; val_offset:752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 752, x17, x15, 752, x18)

inst_5937:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x003fff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a003fff; op2val:0x3f800000; valaddr_reg:x16; val_offset:760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 760, x17, x15, 760, x18)

inst_5938:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xf4 and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x7a003fff; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 768, x17, x15, 768, x18)

inst_5939:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x7fc000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a7fc000; op2val:0x3f800000; valaddr_reg:x16; val_offset:776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 776, x17, x15, 776, x18)

inst_5940:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xf4 and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x7a7fc000; valaddr_reg:x16; val_offset:784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 784, x17, x15, 784, x18)

inst_5941:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x007fff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a007fff; op2val:0x3f800000; valaddr_reg:x16; val_offset:792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 792, x17, x15, 792, x18)

inst_5942:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xf4 and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x7a007fff; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_5943:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x7f8000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a7f8000; op2val:0x3f800000; valaddr_reg:x16; val_offset:808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 808, x17, x15, 808, x18)

inst_5944:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xf4 and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x7a7f8000; valaddr_reg:x16; val_offset:816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 816, x17, x15, 816, x18)

inst_5945:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x00ffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a00ffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 824, x17, x15, 824, x18)

inst_5946:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xf4 and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x7a00ffff; valaddr_reg:x16; val_offset:832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 832, x17, x15, 832, x18)

inst_5947:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x7f0000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a7f0000; op2val:0x3f800000; valaddr_reg:x16; val_offset:840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 840, x17, x15, 840, x18)

inst_5948:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xf4 and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x7a7f0000; valaddr_reg:x16; val_offset:848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 848, x17, x15, 848, x18)

inst_5949:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x01ffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a01ffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 856, x17, x15, 856, x18)

inst_5950:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xf4 and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x7a01ffff; valaddr_reg:x16; val_offset:864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 864, x17, x15, 864, x18)

inst_5951:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x7e0000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a7e0000; op2val:0x3f800000; valaddr_reg:x16; val_offset:872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 872, x17, x15, 872, x18)

inst_5952:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xf4 and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x7a7e0000; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 880, x17, x15, 880, x18)

inst_5953:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x03ffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a03ffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 888, x17, x15, 888, x18)

inst_5954:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xf4 and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x7a03ffff; valaddr_reg:x16; val_offset:896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 896, x17, x15, 896, x18)

inst_5955:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x7c0000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a7c0000; op2val:0x3f800000; valaddr_reg:x16; val_offset:904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 904, x17, x15, 904, x18)

inst_5956:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xf4 and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x7a7c0000; valaddr_reg:x16; val_offset:912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 912, x17, x15, 912, x18)

inst_5957:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x07ffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a07ffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 920, x17, x15, 920, x18)

inst_5958:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xf4 and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x7a07ffff; valaddr_reg:x16; val_offset:928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 928, x17, x15, 928, x18)

inst_5959:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x780000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a780000; op2val:0x3f800000; valaddr_reg:x16; val_offset:936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 936, x17, x15, 936, x18)

inst_5960:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xf4 and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x7a780000; valaddr_reg:x16; val_offset:944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 944, x17, x15, 944, x18)

inst_5961:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x0fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a0fffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 952, x17, x15, 952, x18)

inst_5962:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xf4 and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x7a0fffff; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 960, x17, x15, 960, x18)

inst_5963:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x700000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a700000; op2val:0x3f800000; valaddr_reg:x16; val_offset:968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 968, x17, x15, 968, x18)

inst_5964:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xf4 and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x7a700000; valaddr_reg:x16; val_offset:976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 976, x17, x15, 976, x18)

inst_5965:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x1fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a1fffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 984, x17, x15, 984, x18)

inst_5966:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xf4 and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x7a1fffff; valaddr_reg:x16; val_offset:992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 992, x17, x15, 992, x18)

inst_5967:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x600000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a600000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1000, x17, x15, 1000, x18)

inst_5968:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xf4 and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x7a600000; valaddr_reg:x16; val_offset:1008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1008, x17, x15, 1008, x18)

inst_5969:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x3fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a3fffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1016, x17, x15, 1016, x18)

inst_5970:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xf4 and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x7a3fffff; valaddr_reg:x16; val_offset:1024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1024, x17, x15, 1024, x18)

inst_5971:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a400000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1032; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1032, x17, x15, 1032, x18)

inst_5972:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xf4 and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x7a400000; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1040, x17, x15, 1040, x18)

inst_5973:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a7fffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1048; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1048, x17, x15, 1048, x18)

inst_5974:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xf4 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x7a7fffff; valaddr_reg:x16; val_offset:1056; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1056, x17, x15, 1056, x18)

inst_5975:
// fs1 == 0 and fe1 == 0x61 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x30800001; op2val:0x3f800000; valaddr_reg:x16; val_offset:1064; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1064, x17, x15, 1064, x18)

inst_5976:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x61 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x30800001; valaddr_reg:x16; val_offset:1072; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1072, x17, x15, 1072, x18)

inst_5977:
// fs1 == 0 and fe1 == 0x61 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x30800000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1080; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1080, x17, x15, 1080, x18)

inst_5978:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x61 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x30800000; valaddr_reg:x16; val_offset:1088; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1088, x17, x15, 1088, x18)

inst_5979:
// fs1 == 0 and fe1 == 0x61 and fm1 == 0x7ffffe and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x30fffffe; op2val:0x3f800000; valaddr_reg:x16; val_offset:1096; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1096, x17, x15, 1096, x18)

inst_5980:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x61 and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x30fffffe; valaddr_reg:x16; val_offset:1104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1104, x17, x15, 1104, x18)

inst_5981:
// fs1 == 0 and fe1 == 0x61 and fm1 == 0x000003 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x30800003; op2val:0x3f800000; valaddr_reg:x16; val_offset:1112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1112, x17, x15, 1112, x18)

inst_5982:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x61 and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x30800003; valaddr_reg:x16; val_offset:1120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1120, x17, x15, 1120, x18)

inst_5983:
// fs1 == 0 and fe1 == 0x61 and fm1 == 0x7ffffc and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x30fffffc; op2val:0x3f800000; valaddr_reg:x16; val_offset:1128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1128, x17, x15, 1128, x18)

inst_5984:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x61 and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x30fffffc; valaddr_reg:x16; val_offset:1136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1136, x17, x15, 1136, x18)

inst_5985:
// fs1 == 0 and fe1 == 0x61 and fm1 == 0x000007 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x30800007; op2val:0x3f800000; valaddr_reg:x16; val_offset:1144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1144, x17, x15, 1144, x18)

inst_5986:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x61 and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x30800007; valaddr_reg:x16; val_offset:1152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1152, x17, x15, 1152, x18)

inst_5987:
// fs1 == 0 and fe1 == 0x61 and fm1 == 0x7ffff8 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x30fffff8; op2val:0x3f800000; valaddr_reg:x16; val_offset:1160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1160, x17, x15, 1160, x18)

inst_5988:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x61 and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x30fffff8; valaddr_reg:x16; val_offset:1168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1168, x17, x15, 1168, x18)

inst_5989:
// fs1 == 0 and fe1 == 0x61 and fm1 == 0x00000f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3080000f; op2val:0x3f800000; valaddr_reg:x16; val_offset:1176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1176, x17, x15, 1176, x18)

inst_5990:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x61 and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3080000f; valaddr_reg:x16; val_offset:1184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1184, x17, x15, 1184, x18)

inst_5991:
// fs1 == 0 and fe1 == 0x61 and fm1 == 0x7ffff0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x30fffff0; op2val:0x3f800000; valaddr_reg:x16; val_offset:1192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1192, x17, x15, 1192, x18)

inst_5992:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x61 and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x30fffff0; valaddr_reg:x16; val_offset:1200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1200, x17, x15, 1200, x18)

inst_5993:
// fs1 == 0 and fe1 == 0x61 and fm1 == 0x00001f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3080001f; op2val:0x3f800000; valaddr_reg:x16; val_offset:1208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1208, x17, x15, 1208, x18)

inst_5994:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x61 and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3080001f; valaddr_reg:x16; val_offset:1216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1216, x17, x15, 1216, x18)

inst_5995:
// fs1 == 0 and fe1 == 0x61 and fm1 == 0x7fffe0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x30ffffe0; op2val:0x3f800000; valaddr_reg:x16; val_offset:1224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1224, x17, x15, 1224, x18)

inst_5996:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x61 and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x30ffffe0; valaddr_reg:x16; val_offset:1232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1232, x17, x15, 1232, x18)

inst_5997:
// fs1 == 0 and fe1 == 0x61 and fm1 == 0x00003f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3080003f; op2val:0x3f800000; valaddr_reg:x16; val_offset:1240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1240, x17, x15, 1240, x18)

inst_5998:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x61 and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3080003f; valaddr_reg:x16; val_offset:1248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1248, x17, x15, 1248, x18)

inst_5999:
// fs1 == 0 and fe1 == 0x61 and fm1 == 0x7fffc0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x30ffffc0; op2val:0x3f800000; valaddr_reg:x16; val_offset:1256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1256, x17, x15, 1256, x18)

inst_6000:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x61 and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x30ffffc0; valaddr_reg:x16; val_offset:1264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1264, x17, x15, 1264, x18)

inst_6001:
// fs1 == 0 and fe1 == 0x61 and fm1 == 0x00007f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3080007f; op2val:0x3f800000; valaddr_reg:x16; val_offset:1272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1272, x17, x15, 1272, x18)

inst_6002:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x61 and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3080007f; valaddr_reg:x16; val_offset:1280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1280, x17, x15, 1280, x18)

inst_6003:
// fs1 == 0 and fe1 == 0x61 and fm1 == 0x7fff80 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x30ffff80; op2val:0x3f800000; valaddr_reg:x16; val_offset:1288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1288, x17, x15, 1288, x18)

inst_6004:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x61 and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x30ffff80; valaddr_reg:x16; val_offset:1296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1296, x17, x15, 1296, x18)

inst_6005:
// fs1 == 0 and fe1 == 0x61 and fm1 == 0x0000ff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x308000ff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1304, x17, x15, 1304, x18)

inst_6006:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x61 and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x308000ff; valaddr_reg:x16; val_offset:1312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1312, x17, x15, 1312, x18)

inst_6007:
// fs1 == 0 and fe1 == 0x61 and fm1 == 0x7fff00 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x30ffff00; op2val:0x3f800000; valaddr_reg:x16; val_offset:1320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1320, x17, x15, 1320, x18)

inst_6008:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x61 and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x30ffff00; valaddr_reg:x16; val_offset:1328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1328, x17, x15, 1328, x18)

inst_6009:
// fs1 == 0 and fe1 == 0x61 and fm1 == 0x0001ff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x308001ff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1336, x17, x15, 1336, x18)

inst_6010:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x61 and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x308001ff; valaddr_reg:x16; val_offset:1344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1344, x17, x15, 1344, x18)

inst_6011:
// fs1 == 0 and fe1 == 0x61 and fm1 == 0x7ffe00 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x30fffe00; op2val:0x3f800000; valaddr_reg:x16; val_offset:1352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1352, x17, x15, 1352, x18)

inst_6012:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x61 and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x30fffe00; valaddr_reg:x16; val_offset:1360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1360, x17, x15, 1360, x18)

inst_6013:
// fs1 == 0 and fe1 == 0x61 and fm1 == 0x0003ff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x308003ff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1368, x17, x15, 1368, x18)

inst_6014:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x61 and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x308003ff; valaddr_reg:x16; val_offset:1376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1376, x17, x15, 1376, x18)

inst_6015:
// fs1 == 0 and fe1 == 0x61 and fm1 == 0x7ffc00 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x30fffc00; op2val:0x3f800000; valaddr_reg:x16; val_offset:1384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1384, x17, x15, 1384, x18)

inst_6016:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x61 and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x30fffc00; valaddr_reg:x16; val_offset:1392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1392, x17, x15, 1392, x18)

inst_6017:
// fs1 == 0 and fe1 == 0x61 and fm1 == 0x0007ff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x308007ff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1400, x17, x15, 1400, x18)

inst_6018:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x61 and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x308007ff; valaddr_reg:x16; val_offset:1408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1408, x17, x15, 1408, x18)

inst_6019:
// fs1 == 0 and fe1 == 0x61 and fm1 == 0x7ff800 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x30fff800; op2val:0x3f800000; valaddr_reg:x16; val_offset:1416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1416, x17, x15, 1416, x18)

inst_6020:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x61 and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x30fff800; valaddr_reg:x16; val_offset:1424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1424, x17, x15, 1424, x18)

inst_6021:
// fs1 == 0 and fe1 == 0x61 and fm1 == 0x000fff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x30800fff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1432, x17, x15, 1432, x18)

inst_6022:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x61 and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x30800fff; valaddr_reg:x16; val_offset:1440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1440, x17, x15, 1440, x18)

inst_6023:
// fs1 == 0 and fe1 == 0x61 and fm1 == 0x7ff000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x30fff000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1448, x17, x15, 1448, x18)

inst_6024:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x61 and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x30fff000; valaddr_reg:x16; val_offset:1456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1456, x17, x15, 1456, x18)

inst_6025:
// fs1 == 0 and fe1 == 0x61 and fm1 == 0x001fff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x30801fff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1464, x17, x15, 1464, x18)

inst_6026:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x61 and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x30801fff; valaddr_reg:x16; val_offset:1472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1472, x17, x15, 1472, x18)

inst_6027:
// fs1 == 0 and fe1 == 0x61 and fm1 == 0x7fe000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x30ffe000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1480, x17, x15, 1480, x18)

inst_6028:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x61 and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x30ffe000; valaddr_reg:x16; val_offset:1488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1488, x17, x15, 1488, x18)

inst_6029:
// fs1 == 0 and fe1 == 0x61 and fm1 == 0x003fff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x30803fff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1496, x17, x15, 1496, x18)

inst_6030:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x61 and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x30803fff; valaddr_reg:x16; val_offset:1504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1504, x17, x15, 1504, x18)

inst_6031:
// fs1 == 0 and fe1 == 0x61 and fm1 == 0x7fc000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x30ffc000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1512, x17, x15, 1512, x18)

inst_6032:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x61 and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x30ffc000; valaddr_reg:x16; val_offset:1520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1520, x17, x15, 1520, x18)

inst_6033:
// fs1 == 0 and fe1 == 0x61 and fm1 == 0x007fff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x30807fff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1528, x17, x15, 1528, x18)

inst_6034:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x61 and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x30807fff; valaddr_reg:x16; val_offset:1536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1536, x17, x15, 1536, x18)

inst_6035:
// fs1 == 0 and fe1 == 0x61 and fm1 == 0x7f8000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x30ff8000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1544, x17, x15, 1544, x18)

inst_6036:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x61 and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x30ff8000; valaddr_reg:x16; val_offset:1552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1552, x17, x15, 1552, x18)

inst_6037:
// fs1 == 0 and fe1 == 0x61 and fm1 == 0x00ffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3080ffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1560, x17, x15, 1560, x18)

inst_6038:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x61 and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3080ffff; valaddr_reg:x16; val_offset:1568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1568, x17, x15, 1568, x18)

inst_6039:
// fs1 == 0 and fe1 == 0x61 and fm1 == 0x7f0000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x30ff0000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1576, x17, x15, 1576, x18)

inst_6040:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x61 and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x30ff0000; valaddr_reg:x16; val_offset:1584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1584, x17, x15, 1584, x18)

inst_6041:
// fs1 == 0 and fe1 == 0x61 and fm1 == 0x01ffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3081ffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1592, x17, x15, 1592, x18)

inst_6042:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x61 and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3081ffff; valaddr_reg:x16; val_offset:1600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1600, x17, x15, 1600, x18)

inst_6043:
// fs1 == 0 and fe1 == 0x61 and fm1 == 0x7e0000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x30fe0000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1608, x17, x15, 1608, x18)

inst_6044:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x61 and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x30fe0000; valaddr_reg:x16; val_offset:1616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1616, x17, x15, 1616, x18)

inst_6045:
// fs1 == 0 and fe1 == 0x61 and fm1 == 0x03ffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3083ffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1624, x17, x15, 1624, x18)

inst_6046:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x61 and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3083ffff; valaddr_reg:x16; val_offset:1632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1632, x17, x15, 1632, x18)

inst_6047:
// fs1 == 0 and fe1 == 0x61 and fm1 == 0x7c0000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x30fc0000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1640, x17, x15, 1640, x18)

inst_6048:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x61 and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x30fc0000; valaddr_reg:x16; val_offset:1648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1648, x17, x15, 1648, x18)

inst_6049:
// fs1 == 0 and fe1 == 0x61 and fm1 == 0x07ffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3087ffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1656, x17, x15, 1656, x18)

inst_6050:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x61 and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x3087ffff; valaddr_reg:x16; val_offset:1664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1664, x17, x15, 1664, x18)

inst_6051:
// fs1 == 0 and fe1 == 0x61 and fm1 == 0x780000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x30f80000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1672, x17, x15, 1672, x18)

inst_6052:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x61 and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x30f80000; valaddr_reg:x16; val_offset:1680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1680, x17, x15, 1680, x18)

inst_6053:
// fs1 == 0 and fe1 == 0x61 and fm1 == 0x0fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x308fffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1688, x17, x15, 1688, x18)

inst_6054:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x61 and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x308fffff; valaddr_reg:x16; val_offset:1696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1696, x17, x15, 1696, x18)

inst_6055:
// fs1 == 0 and fe1 == 0x61 and fm1 == 0x700000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x30f00000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1704, x17, x15, 1704, x18)

inst_6056:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x61 and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x30f00000; valaddr_reg:x16; val_offset:1712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1712, x17, x15, 1712, x18)

inst_6057:
// fs1 == 0 and fe1 == 0x61 and fm1 == 0x1fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x309fffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1720, x17, x15, 1720, x18)

inst_6058:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x61 and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x309fffff; valaddr_reg:x16; val_offset:1728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1728, x17, x15, 1728, x18)

inst_6059:
// fs1 == 0 and fe1 == 0x61 and fm1 == 0x600000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x30e00000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1736, x17, x15, 1736, x18)

inst_6060:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x61 and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x30e00000; valaddr_reg:x16; val_offset:1744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1744, x17, x15, 1744, x18)

inst_6061:
// fs1 == 0 and fe1 == 0x61 and fm1 == 0x3fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x30bfffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1752, x17, x15, 1752, x18)

inst_6062:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x61 and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x30bfffff; valaddr_reg:x16; val_offset:1760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1760, x17, x15, 1760, x18)

inst_6063:
// fs1 == 0 and fe1 == 0x61 and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x30c00000; op2val:0x3f800000; valaddr_reg:x16; val_offset:1768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1768, x17, x15, 1768, x18)

inst_6064:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x61 and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x30c00000; valaddr_reg:x16; val_offset:1776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1776, x17, x15, 1776, x18)

inst_6065:
// fs1 == 0 and fe1 == 0x61 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x30ffffff; op2val:0x3f800000; valaddr_reg:x16; val_offset:1784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1784, x17, x15, 1784, x18)

inst_6066:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x61 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800000; op2val:0x30ffffff; valaddr_reg:x16; val_offset:1792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1792, x17, x15, 1792, x18)

inst_6067:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x4ccccc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x804ccccc; op2val:0x80000000; valaddr_reg:x16; val_offset:1800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1800, x17, x15, 1800, x18)

inst_6068:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4ccccc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x804ccccc; valaddr_reg:x16; val_offset:1808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1808, x17, x15, 1808, x18)

inst_6069:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x333333 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80333333; op2val:0x80000000; valaddr_reg:x16; val_offset:1816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1816, x17, x15, 1816, x18)

inst_6070:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x333333 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x80333333; valaddr_reg:x16; val_offset:1824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1824, x17, x15, 1824, x18)

inst_6071:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x5b6db6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x805b6db6; op2val:0x80000000; valaddr_reg:x16; val_offset:1832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1832, x17, x15, 1832, x18)

inst_6072:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5b6db6 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x805b6db6; valaddr_reg:x16; val_offset:1840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1840, x17, x15, 1840, x18)

inst_6073:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x249249 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80249249; op2val:0x80000000; valaddr_reg:x16; val_offset:1848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1848, x17, x15, 1848, x18)

inst_6074:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x249249 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x80249249; valaddr_reg:x16; val_offset:1856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1856, x17, x15, 1856, x18)

inst_6075:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x444444 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80444444; op2val:0x80000000; valaddr_reg:x16; val_offset:1864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1864, x17, x15, 1864, x18)

inst_6076:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x444444 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x80444444; valaddr_reg:x16; val_offset:1872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1872, x17, x15, 1872, x18)

inst_6077:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x3bbbbb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x803bbbbb; op2val:0x80000000; valaddr_reg:x16; val_offset:1880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1880, x17, x15, 1880, x18)

inst_6078:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3bbbbb and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x803bbbbb; valaddr_reg:x16; val_offset:1888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1888, x17, x15, 1888, x18)

inst_6079:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x666666 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80666666; op2val:0x80000000; valaddr_reg:x16; val_offset:1896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1896, x17, x15, 1896, x18)

inst_6080:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x666666 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x80666666; valaddr_reg:x16; val_offset:1904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1904, x17, x15, 1904, x18)

inst_6081:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x199999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80199999; op2val:0x80000000; valaddr_reg:x16; val_offset:1912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1912, x17, x15, 1912, x18)

inst_6082:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x199999 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x80199999; valaddr_reg:x16; val_offset:1920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1920, x17, x15, 1920, x18)

inst_6083:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x6db6db and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x806db6db; op2val:0x80000000; valaddr_reg:x16; val_offset:1928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1928, x17, x15, 1928, x18)

inst_6084:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6db6db and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x806db6db; valaddr_reg:x16; val_offset:1936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1936, x17, x15, 1936, x18)

inst_6085:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x36db6d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8036db6d; op2val:0x80000000; valaddr_reg:x16; val_offset:1944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1944, x17, x15, 1944, x18)

inst_6086:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x36db6d and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x8036db6d; valaddr_reg:x16; val_offset:1952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1952, x17, x15, 1952, x18)

inst_6087:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ffffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807ffffe; op2val:0x80000000; valaddr_reg:x16; val_offset:1960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1960, x17, x15, 1960, x18)

inst_6088:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x807ffffe; valaddr_reg:x16; val_offset:1968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1968, x17, x15, 1968, x18)

inst_6089:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000003 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000003; op2val:0x80000000; valaddr_reg:x16; val_offset:1976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1976, x17, x15, 1976, x18)

inst_6090:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x80000003; valaddr_reg:x16; val_offset:1984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1984, x17, x15, 1984, x18)

inst_6091:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ffffc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807ffffc; op2val:0x80000000; valaddr_reg:x16; val_offset:1992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1992, x17, x15, 1992, x18)

inst_6092:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x807ffffc; valaddr_reg:x16; val_offset:2000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2000, x17, x15, 2000, x18)

inst_6093:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000007 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000007; op2val:0x80000000; valaddr_reg:x16; val_offset:2008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2008, x17, x15, 2008, x18)

inst_6094:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x80000007; valaddr_reg:x16; val_offset:2016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2016, x17, x15, 2016, x18)

inst_6095:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ffff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807ffff8; op2val:0x80000000; valaddr_reg:x16; val_offset:2024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_25)

inst_6096:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x807ffff8; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_6097:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81800001; op2val:0x80000000; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 8, x17, x15, 8, x18)

inst_6098:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x81800001; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 16, x17, x15, 16, x18)

inst_6099:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81800000; op2val:0x80000000; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 24, x17, x15, 24, x18)

inst_6100:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x81800000; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 32, x17, x15, 32, x18)

inst_6101:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7ffffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81fffffe; op2val:0x80000000; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 40, x17, x15, 40, x18)

inst_6102:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x81fffffe; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_6103:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x000003 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81800003; op2val:0x80000000; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 56, x17, x15, 56, x18)

inst_6104:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x81800003; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 64, x17, x15, 64, x18)

inst_6105:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7ffffc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81fffffc; op2val:0x80000000; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 72, x17, x15, 72, x18)

inst_6106:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x81fffffc; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_6107:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x000007 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81800007; op2val:0x80000000; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 88, x17, x15, 88, x18)

inst_6108:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x81800007; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 96, x17, x15, 96, x18)

inst_6109:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7ffff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81fffff8; op2val:0x80000000; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 104, x17, x15, 104, x18)

inst_6110:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x81fffff8; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 112, x17, x15, 112, x18)

inst_6111:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x00000f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8180000f; op2val:0x80000000; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 120, x17, x15, 120, x18)

inst_6112:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x8180000f; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_6113:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7ffff0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81fffff0; op2val:0x80000000; valaddr_reg:x16; val_offset:136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 136, x17, x15, 136, x18)

inst_6114:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x81fffff0; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 144, x17, x15, 144, x18)

inst_6115:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x00001f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8180001f; op2val:0x80000000; valaddr_reg:x16; val_offset:152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 152, x17, x15, 152, x18)

inst_6116:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x8180001f; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_6117:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7fffe0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81ffffe0; op2val:0x80000000; valaddr_reg:x16; val_offset:168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 168, x17, x15, 168, x18)

inst_6118:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x81ffffe0; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 176, x17, x15, 176, x18)

inst_6119:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8180003f; op2val:0x80000000; valaddr_reg:x16; val_offset:184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 184, x17, x15, 184, x18)

inst_6120:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x8180003f; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 192, x17, x15, 192, x18)

inst_6121:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7fffc0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81ffffc0; op2val:0x80000000; valaddr_reg:x16; val_offset:200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 200, x17, x15, 200, x18)

inst_6122:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x81ffffc0; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_6123:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x00007f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8180007f; op2val:0x80000000; valaddr_reg:x16; val_offset:216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 216, x17, x15, 216, x18)

inst_6124:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x8180007f; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 224, x17, x15, 224, x18)

inst_6125:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7fff80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81ffff80; op2val:0x80000000; valaddr_reg:x16; val_offset:232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 232, x17, x15, 232, x18)

inst_6126:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x81ffff80; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_6127:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x0000ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x818000ff; op2val:0x80000000; valaddr_reg:x16; val_offset:248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 248, x17, x15, 248, x18)

inst_6128:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x818000ff; valaddr_reg:x16; val_offset:256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 256, x17, x15, 256, x18)

inst_6129:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7fff00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81ffff00; op2val:0x80000000; valaddr_reg:x16; val_offset:264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 264, x17, x15, 264, x18)

inst_6130:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x81ffff00; valaddr_reg:x16; val_offset:272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 272, x17, x15, 272, x18)

inst_6131:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x0001ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x818001ff; op2val:0x80000000; valaddr_reg:x16; val_offset:280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 280, x17, x15, 280, x18)

inst_6132:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x818001ff; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_6133:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7ffe00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81fffe00; op2val:0x80000000; valaddr_reg:x16; val_offset:296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 296, x17, x15, 296, x18)

inst_6134:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x81fffe00; valaddr_reg:x16; val_offset:304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 304, x17, x15, 304, x18)

inst_6135:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x0003ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x818003ff; op2val:0x80000000; valaddr_reg:x16; val_offset:312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 312, x17, x15, 312, x18)

inst_6136:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x818003ff; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_6137:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7ffc00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81fffc00; op2val:0x80000000; valaddr_reg:x16; val_offset:328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 328, x17, x15, 328, x18)

inst_6138:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x81fffc00; valaddr_reg:x16; val_offset:336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 336, x17, x15, 336, x18)

inst_6139:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x0007ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x818007ff; op2val:0x80000000; valaddr_reg:x16; val_offset:344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 344, x17, x15, 344, x18)

inst_6140:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x818007ff; valaddr_reg:x16; val_offset:352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 352, x17, x15, 352, x18)

inst_6141:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7ff800 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81fff800; op2val:0x80000000; valaddr_reg:x16; val_offset:360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 360, x17, x15, 360, x18)

inst_6142:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x81fff800; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_6143:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x000fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81800fff; op2val:0x80000000; valaddr_reg:x16; val_offset:376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 376, x17, x15, 376, x18)

inst_6144:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x81800fff; valaddr_reg:x16; val_offset:384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 384, x17, x15, 384, x18)

inst_6145:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7ff000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81fff000; op2val:0x80000000; valaddr_reg:x16; val_offset:392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 392, x17, x15, 392, x18)

inst_6146:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x81fff000; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_6147:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x001fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81801fff; op2val:0x80000000; valaddr_reg:x16; val_offset:408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 408, x17, x15, 408, x18)

inst_6148:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x81801fff; valaddr_reg:x16; val_offset:416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 416, x17, x15, 416, x18)

inst_6149:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7fe000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81ffe000; op2val:0x80000000; valaddr_reg:x16; val_offset:424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 424, x17, x15, 424, x18)

inst_6150:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x81ffe000; valaddr_reg:x16; val_offset:432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 432, x17, x15, 432, x18)

inst_6151:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x003fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81803fff; op2val:0x80000000; valaddr_reg:x16; val_offset:440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 440, x17, x15, 440, x18)

inst_6152:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x81803fff; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_6153:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7fc000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81ffc000; op2val:0x80000000; valaddr_reg:x16; val_offset:456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 456, x17, x15, 456, x18)

inst_6154:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x81ffc000; valaddr_reg:x16; val_offset:464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 464, x17, x15, 464, x18)

inst_6155:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x007fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81807fff; op2val:0x80000000; valaddr_reg:x16; val_offset:472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 472, x17, x15, 472, x18)

inst_6156:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x81807fff; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_6157:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7f8000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81ff8000; op2val:0x80000000; valaddr_reg:x16; val_offset:488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 488, x17, x15, 488, x18)

inst_6158:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x81ff8000; valaddr_reg:x16; val_offset:496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 496, x17, x15, 496, x18)

inst_6159:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x00ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8180ffff; op2val:0x80000000; valaddr_reg:x16; val_offset:504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 504, x17, x15, 504, x18)

inst_6160:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x8180ffff; valaddr_reg:x16; val_offset:512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 512, x17, x15, 512, x18)

inst_6161:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7f0000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81ff0000; op2val:0x80000000; valaddr_reg:x16; val_offset:520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 520, x17, x15, 520, x18)

inst_6162:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x81ff0000; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_6163:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x01ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8181ffff; op2val:0x80000000; valaddr_reg:x16; val_offset:536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 536, x17, x15, 536, x18)

inst_6164:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x8181ffff; valaddr_reg:x16; val_offset:544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 544, x17, x15, 544, x18)

inst_6165:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7e0000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81fe0000; op2val:0x80000000; valaddr_reg:x16; val_offset:552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 552, x17, x15, 552, x18)

inst_6166:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x81fe0000; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_6167:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x03ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8183ffff; op2val:0x80000000; valaddr_reg:x16; val_offset:568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 568, x17, x15, 568, x18)

inst_6168:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x8183ffff; valaddr_reg:x16; val_offset:576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 576, x17, x15, 576, x18)

inst_6169:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7c0000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81fc0000; op2val:0x80000000; valaddr_reg:x16; val_offset:584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 584, x17, x15, 584, x18)

inst_6170:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x81fc0000; valaddr_reg:x16; val_offset:592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 592, x17, x15, 592, x18)

inst_6171:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x07ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8187ffff; op2val:0x80000000; valaddr_reg:x16; val_offset:600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 600, x17, x15, 600, x18)

inst_6172:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x8187ffff; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 608, x17, x15, 608, x18)

inst_6173:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x780000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81f80000; op2val:0x80000000; valaddr_reg:x16; val_offset:616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 616, x17, x15, 616, x18)

inst_6174:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x81f80000; valaddr_reg:x16; val_offset:624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 624, x17, x15, 624, x18)

inst_6175:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x0fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x818fffff; op2val:0x80000000; valaddr_reg:x16; val_offset:632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 632, x17, x15, 632, x18)

inst_6176:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x818fffff; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_6177:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x700000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81f00000; op2val:0x80000000; valaddr_reg:x16; val_offset:648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 648, x17, x15, 648, x18)

inst_6178:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x81f00000; valaddr_reg:x16; val_offset:656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 656, x17, x15, 656, x18)

inst_6179:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x1fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x819fffff; op2val:0x80000000; valaddr_reg:x16; val_offset:664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 664, x17, x15, 664, x18)

inst_6180:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x819fffff; valaddr_reg:x16; val_offset:672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 672, x17, x15, 672, x18)

inst_6181:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x600000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81e00000; op2val:0x80000000; valaddr_reg:x16; val_offset:680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 680, x17, x15, 680, x18)

inst_6182:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x81e00000; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 688, x17, x15, 688, x18)

inst_6183:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x3fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81bfffff; op2val:0x80000000; valaddr_reg:x16; val_offset:696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 696, x17, x15, 696, x18)

inst_6184:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x81bfffff; valaddr_reg:x16; val_offset:704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 704, x17, x15, 704, x18)

inst_6185:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81c00000; op2val:0x80000000; valaddr_reg:x16; val_offset:712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 712, x17, x15, 712, x18)

inst_6186:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x81c00000; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_6187:
// fs1 == 1 and fe1 == 0x03 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81ffffff; op2val:0x80000000; valaddr_reg:x16; val_offset:728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 728, x17, x15, 728, x18)

inst_6188:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x81ffffff; valaddr_reg:x16; val_offset:736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 736, x17, x15, 736, x18)

inst_6189:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81000001; op2val:0x80000000; valaddr_reg:x16; val_offset:744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 744, x17, x15, 744, x18)

inst_6190:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x81000001; valaddr_reg:x16; val_offset:752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 752, x17, x15, 752, x18)

inst_6191:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81000000; op2val:0x80000000; valaddr_reg:x16; val_offset:760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 760, x17, x15, 760, x18)

inst_6192:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x81000000; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 768, x17, x15, 768, x18)

inst_6193:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7ffffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817ffffe; op2val:0x80000000; valaddr_reg:x16; val_offset:776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 776, x17, x15, 776, x18)

inst_6194:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x817ffffe; valaddr_reg:x16; val_offset:784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 784, x17, x15, 784, x18)

inst_6195:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x000003 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81000003; op2val:0x80000000; valaddr_reg:x16; val_offset:792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 792, x17, x15, 792, x18)

inst_6196:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x81000003; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_6197:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7ffffc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817ffffc; op2val:0x80000000; valaddr_reg:x16; val_offset:808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 808, x17, x15, 808, x18)

inst_6198:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x817ffffc; valaddr_reg:x16; val_offset:816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 816, x17, x15, 816, x18)

inst_6199:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x000007 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81000007; op2val:0x80000000; valaddr_reg:x16; val_offset:824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 824, x17, x15, 824, x18)

inst_6200:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x81000007; valaddr_reg:x16; val_offset:832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 832, x17, x15, 832, x18)

inst_6201:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7ffff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817ffff8; op2val:0x80000000; valaddr_reg:x16; val_offset:840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 840, x17, x15, 840, x18)

inst_6202:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x817ffff8; valaddr_reg:x16; val_offset:848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 848, x17, x15, 848, x18)

inst_6203:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x00000f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8100000f; op2val:0x80000000; valaddr_reg:x16; val_offset:856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 856, x17, x15, 856, x18)

inst_6204:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x8100000f; valaddr_reg:x16; val_offset:864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 864, x17, x15, 864, x18)

inst_6205:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7ffff0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817ffff0; op2val:0x80000000; valaddr_reg:x16; val_offset:872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 872, x17, x15, 872, x18)

inst_6206:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x817ffff0; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 880, x17, x15, 880, x18)

inst_6207:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x00001f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8100001f; op2val:0x80000000; valaddr_reg:x16; val_offset:888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 888, x17, x15, 888, x18)

inst_6208:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x8100001f; valaddr_reg:x16; val_offset:896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 896, x17, x15, 896, x18)

inst_6209:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7fffe0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817fffe0; op2val:0x80000000; valaddr_reg:x16; val_offset:904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 904, x17, x15, 904, x18)

inst_6210:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x817fffe0; valaddr_reg:x16; val_offset:912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 912, x17, x15, 912, x18)

inst_6211:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8100003f; op2val:0x80000000; valaddr_reg:x16; val_offset:920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 920, x17, x15, 920, x18)

inst_6212:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x8100003f; valaddr_reg:x16; val_offset:928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 928, x17, x15, 928, x18)

inst_6213:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7fffc0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817fffc0; op2val:0x80000000; valaddr_reg:x16; val_offset:936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 936, x17, x15, 936, x18)

inst_6214:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x817fffc0; valaddr_reg:x16; val_offset:944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 944, x17, x15, 944, x18)

inst_6215:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x00007f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8100007f; op2val:0x80000000; valaddr_reg:x16; val_offset:952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 952, x17, x15, 952, x18)

inst_6216:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x8100007f; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 960, x17, x15, 960, x18)

inst_6217:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7fff80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817fff80; op2val:0x80000000; valaddr_reg:x16; val_offset:968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 968, x17, x15, 968, x18)

inst_6218:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x817fff80; valaddr_reg:x16; val_offset:976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 976, x17, x15, 976, x18)

inst_6219:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x0000ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x810000ff; op2val:0x80000000; valaddr_reg:x16; val_offset:984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 984, x17, x15, 984, x18)

inst_6220:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x810000ff; valaddr_reg:x16; val_offset:992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 992, x17, x15, 992, x18)

inst_6221:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7fff00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817fff00; op2val:0x80000000; valaddr_reg:x16; val_offset:1000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1000, x17, x15, 1000, x18)

inst_6222:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x817fff00; valaddr_reg:x16; val_offset:1008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1008, x17, x15, 1008, x18)

inst_6223:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x0001ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x810001ff; op2val:0x80000000; valaddr_reg:x16; val_offset:1016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1016, x17, x15, 1016, x18)

inst_6224:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x810001ff; valaddr_reg:x16; val_offset:1024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1024, x17, x15, 1024, x18)

inst_6225:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7ffe00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817ffe00; op2val:0x80000000; valaddr_reg:x16; val_offset:1032; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1032, x17, x15, 1032, x18)

inst_6226:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x817ffe00; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1040, x17, x15, 1040, x18)

inst_6227:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x0003ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x810003ff; op2val:0x80000000; valaddr_reg:x16; val_offset:1048; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1048, x17, x15, 1048, x18)

inst_6228:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x810003ff; valaddr_reg:x16; val_offset:1056; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1056, x17, x15, 1056, x18)

inst_6229:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7ffc00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817ffc00; op2val:0x80000000; valaddr_reg:x16; val_offset:1064; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1064, x17, x15, 1064, x18)

inst_6230:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x817ffc00; valaddr_reg:x16; val_offset:1072; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1072, x17, x15, 1072, x18)

inst_6231:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x0007ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x810007ff; op2val:0x80000000; valaddr_reg:x16; val_offset:1080; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1080, x17, x15, 1080, x18)

inst_6232:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x810007ff; valaddr_reg:x16; val_offset:1088; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1088, x17, x15, 1088, x18)

inst_6233:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7ff800 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817ff800; op2val:0x80000000; valaddr_reg:x16; val_offset:1096; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1096, x17, x15, 1096, x18)

inst_6234:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x817ff800; valaddr_reg:x16; val_offset:1104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1104, x17, x15, 1104, x18)

inst_6235:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x000fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81000fff; op2val:0x80000000; valaddr_reg:x16; val_offset:1112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1112, x17, x15, 1112, x18)

inst_6236:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x81000fff; valaddr_reg:x16; val_offset:1120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1120, x17, x15, 1120, x18)

inst_6237:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7ff000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817ff000; op2val:0x80000000; valaddr_reg:x16; val_offset:1128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1128, x17, x15, 1128, x18)

inst_6238:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x817ff000; valaddr_reg:x16; val_offset:1136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1136, x17, x15, 1136, x18)

inst_6239:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x001fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81001fff; op2val:0x80000000; valaddr_reg:x16; val_offset:1144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1144, x17, x15, 1144, x18)

inst_6240:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x81001fff; valaddr_reg:x16; val_offset:1152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1152, x17, x15, 1152, x18)

inst_6241:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7fe000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817fe000; op2val:0x80000000; valaddr_reg:x16; val_offset:1160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1160, x17, x15, 1160, x18)

inst_6242:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x817fe000; valaddr_reg:x16; val_offset:1168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1168, x17, x15, 1168, x18)

inst_6243:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x003fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81003fff; op2val:0x80000000; valaddr_reg:x16; val_offset:1176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1176, x17, x15, 1176, x18)

inst_6244:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x81003fff; valaddr_reg:x16; val_offset:1184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1184, x17, x15, 1184, x18)

inst_6245:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7fc000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817fc000; op2val:0x80000000; valaddr_reg:x16; val_offset:1192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1192, x17, x15, 1192, x18)

inst_6246:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x817fc000; valaddr_reg:x16; val_offset:1200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1200, x17, x15, 1200, x18)

inst_6247:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x007fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81007fff; op2val:0x80000000; valaddr_reg:x16; val_offset:1208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1208, x17, x15, 1208, x18)

inst_6248:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x81007fff; valaddr_reg:x16; val_offset:1216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1216, x17, x15, 1216, x18)

inst_6249:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7f8000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817f8000; op2val:0x80000000; valaddr_reg:x16; val_offset:1224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1224, x17, x15, 1224, x18)

inst_6250:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x817f8000; valaddr_reg:x16; val_offset:1232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1232, x17, x15, 1232, x18)

inst_6251:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x00ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8100ffff; op2val:0x80000000; valaddr_reg:x16; val_offset:1240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1240, x17, x15, 1240, x18)

inst_6252:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x8100ffff; valaddr_reg:x16; val_offset:1248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1248, x17, x15, 1248, x18)

inst_6253:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7f0000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817f0000; op2val:0x80000000; valaddr_reg:x16; val_offset:1256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1256, x17, x15, 1256, x18)

inst_6254:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x817f0000; valaddr_reg:x16; val_offset:1264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1264, x17, x15, 1264, x18)

inst_6255:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x01ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8101ffff; op2val:0x80000000; valaddr_reg:x16; val_offset:1272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1272, x17, x15, 1272, x18)

inst_6256:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x8101ffff; valaddr_reg:x16; val_offset:1280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1280, x17, x15, 1280, x18)

inst_6257:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7e0000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817e0000; op2val:0x80000000; valaddr_reg:x16; val_offset:1288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1288, x17, x15, 1288, x18)

inst_6258:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x817e0000; valaddr_reg:x16; val_offset:1296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1296, x17, x15, 1296, x18)

inst_6259:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x03ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8103ffff; op2val:0x80000000; valaddr_reg:x16; val_offset:1304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1304, x17, x15, 1304, x18)

inst_6260:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x8103ffff; valaddr_reg:x16; val_offset:1312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1312, x17, x15, 1312, x18)

inst_6261:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7c0000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817c0000; op2val:0x80000000; valaddr_reg:x16; val_offset:1320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1320, x17, x15, 1320, x18)

inst_6262:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x817c0000; valaddr_reg:x16; val_offset:1328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1328, x17, x15, 1328, x18)

inst_6263:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x07ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8107ffff; op2val:0x80000000; valaddr_reg:x16; val_offset:1336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1336, x17, x15, 1336, x18)

inst_6264:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x8107ffff; valaddr_reg:x16; val_offset:1344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1344, x17, x15, 1344, x18)

inst_6265:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x780000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81780000; op2val:0x80000000; valaddr_reg:x16; val_offset:1352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1352, x17, x15, 1352, x18)

inst_6266:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x81780000; valaddr_reg:x16; val_offset:1360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1360, x17, x15, 1360, x18)

inst_6267:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x0fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x810fffff; op2val:0x80000000; valaddr_reg:x16; val_offset:1368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1368, x17, x15, 1368, x18)

inst_6268:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x810fffff; valaddr_reg:x16; val_offset:1376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1376, x17, x15, 1376, x18)

inst_6269:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x700000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81700000; op2val:0x80000000; valaddr_reg:x16; val_offset:1384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1384, x17, x15, 1384, x18)

inst_6270:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x81700000; valaddr_reg:x16; val_offset:1392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1392, x17, x15, 1392, x18)

inst_6271:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x1fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x811fffff; op2val:0x80000000; valaddr_reg:x16; val_offset:1400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1400, x17, x15, 1400, x18)

inst_6272:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x811fffff; valaddr_reg:x16; val_offset:1408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1408, x17, x15, 1408, x18)

inst_6273:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x600000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81600000; op2val:0x80000000; valaddr_reg:x16; val_offset:1416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1416, x17, x15, 1416, x18)

inst_6274:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x81600000; valaddr_reg:x16; val_offset:1424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1424, x17, x15, 1424, x18)

inst_6275:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x3fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x813fffff; op2val:0x80000000; valaddr_reg:x16; val_offset:1432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1432, x17, x15, 1432, x18)

inst_6276:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x813fffff; valaddr_reg:x16; val_offset:1440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1440, x17, x15, 1440, x18)

inst_6277:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81400000; op2val:0x80000000; valaddr_reg:x16; val_offset:1448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1448, x17, x15, 1448, x18)

inst_6278:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x81400000; valaddr_reg:x16; val_offset:1456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1456, x17, x15, 1456, x18)

inst_6279:
// fs1 == 1 and fe1 == 0x02 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x817fffff; op2val:0x80000000; valaddr_reg:x16; val_offset:1464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1464, x17, x15, 1464, x18)

inst_6280:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x817fffff; valaddr_reg:x16; val_offset:1472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1472, x17, x15, 1472, x18)

inst_6281:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800001; op2val:0x80000000; valaddr_reg:x16; val_offset:1480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1480, x17, x15, 1480, x18)

inst_6282:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x80800001; valaddr_reg:x16; val_offset:1488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1488, x17, x15, 1488, x18)

inst_6283:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7ffffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80fffffe; op2val:0x80000000; valaddr_reg:x16; val_offset:1496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1496, x17, x15, 1496, x18)

inst_6284:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x80fffffe; valaddr_reg:x16; val_offset:1504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1504, x17, x15, 1504, x18)

inst_6285:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000003 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800003; op2val:0x80000000; valaddr_reg:x16; val_offset:1512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1512, x17, x15, 1512, x18)

inst_6286:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x80800003; valaddr_reg:x16; val_offset:1520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1520, x17, x15, 1520, x18)

inst_6287:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7ffffc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80fffffc; op2val:0x80000000; valaddr_reg:x16; val_offset:1528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1528, x17, x15, 1528, x18)

inst_6288:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x80fffffc; valaddr_reg:x16; val_offset:1536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1536, x17, x15, 1536, x18)

inst_6289:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000007 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800007; op2val:0x80000000; valaddr_reg:x16; val_offset:1544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1544, x17, x15, 1544, x18)

inst_6290:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x80800007; valaddr_reg:x16; val_offset:1552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1552, x17, x15, 1552, x18)

inst_6291:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7ffff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80fffff8; op2val:0x80000000; valaddr_reg:x16; val_offset:1560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1560, x17, x15, 1560, x18)

inst_6292:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x80fffff8; valaddr_reg:x16; val_offset:1568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1568, x17, x15, 1568, x18)

inst_6293:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x00000f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8080000f; op2val:0x80000000; valaddr_reg:x16; val_offset:1576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1576, x17, x15, 1576, x18)

inst_6294:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x8080000f; valaddr_reg:x16; val_offset:1584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1584, x17, x15, 1584, x18)

inst_6295:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7ffff0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80fffff0; op2val:0x80000000; valaddr_reg:x16; val_offset:1592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1592, x17, x15, 1592, x18)

inst_6296:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x80fffff0; valaddr_reg:x16; val_offset:1600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1600, x17, x15, 1600, x18)

inst_6297:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x00001f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8080001f; op2val:0x80000000; valaddr_reg:x16; val_offset:1608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1608, x17, x15, 1608, x18)

inst_6298:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x8080001f; valaddr_reg:x16; val_offset:1616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1616, x17, x15, 1616, x18)

inst_6299:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7fffe0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80ffffe0; op2val:0x80000000; valaddr_reg:x16; val_offset:1624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1624, x17, x15, 1624, x18)

inst_6300:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x80ffffe0; valaddr_reg:x16; val_offset:1632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1632, x17, x15, 1632, x18)

inst_6301:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8080003f; op2val:0x80000000; valaddr_reg:x16; val_offset:1640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1640, x17, x15, 1640, x18)

inst_6302:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x8080003f; valaddr_reg:x16; val_offset:1648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1648, x17, x15, 1648, x18)

inst_6303:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7fffc0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80ffffc0; op2val:0x80000000; valaddr_reg:x16; val_offset:1656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1656, x17, x15, 1656, x18)

inst_6304:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x80ffffc0; valaddr_reg:x16; val_offset:1664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1664, x17, x15, 1664, x18)

inst_6305:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x00007f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8080007f; op2val:0x80000000; valaddr_reg:x16; val_offset:1672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1672, x17, x15, 1672, x18)

inst_6306:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x8080007f; valaddr_reg:x16; val_offset:1680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1680, x17, x15, 1680, x18)

inst_6307:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7fff80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80ffff80; op2val:0x80000000; valaddr_reg:x16; val_offset:1688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1688, x17, x15, 1688, x18)

inst_6308:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x80ffff80; valaddr_reg:x16; val_offset:1696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1696, x17, x15, 1696, x18)

inst_6309:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x0000ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x808000ff; op2val:0x80000000; valaddr_reg:x16; val_offset:1704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1704, x17, x15, 1704, x18)

inst_6310:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x808000ff; valaddr_reg:x16; val_offset:1712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1712, x17, x15, 1712, x18)

inst_6311:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7fff00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80ffff00; op2val:0x80000000; valaddr_reg:x16; val_offset:1720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1720, x17, x15, 1720, x18)

inst_6312:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x80ffff00; valaddr_reg:x16; val_offset:1728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1728, x17, x15, 1728, x18)

inst_6313:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x0001ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x808001ff; op2val:0x80000000; valaddr_reg:x16; val_offset:1736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1736, x17, x15, 1736, x18)

inst_6314:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x808001ff; valaddr_reg:x16; val_offset:1744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1744, x17, x15, 1744, x18)

inst_6315:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7ffe00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80fffe00; op2val:0x80000000; valaddr_reg:x16; val_offset:1752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1752, x17, x15, 1752, x18)

inst_6316:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x80fffe00; valaddr_reg:x16; val_offset:1760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1760, x17, x15, 1760, x18)

inst_6317:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x0003ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x808003ff; op2val:0x80000000; valaddr_reg:x16; val_offset:1768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1768, x17, x15, 1768, x18)

inst_6318:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x808003ff; valaddr_reg:x16; val_offset:1776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1776, x17, x15, 1776, x18)

inst_6319:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7ffc00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80fffc00; op2val:0x80000000; valaddr_reg:x16; val_offset:1784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1784, x17, x15, 1784, x18)

inst_6320:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x80fffc00; valaddr_reg:x16; val_offset:1792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1792, x17, x15, 1792, x18)

inst_6321:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x0007ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x808007ff; op2val:0x80000000; valaddr_reg:x16; val_offset:1800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1800, x17, x15, 1800, x18)

inst_6322:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x808007ff; valaddr_reg:x16; val_offset:1808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1808, x17, x15, 1808, x18)

inst_6323:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7ff800 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80fff800; op2val:0x80000000; valaddr_reg:x16; val_offset:1816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1816, x17, x15, 1816, x18)

inst_6324:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x80fff800; valaddr_reg:x16; val_offset:1824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1824, x17, x15, 1824, x18)

inst_6325:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80800fff; op2val:0x80000000; valaddr_reg:x16; val_offset:1832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1832, x17, x15, 1832, x18)

inst_6326:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x80800fff; valaddr_reg:x16; val_offset:1840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1840, x17, x15, 1840, x18)

inst_6327:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7ff000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80fff000; op2val:0x80000000; valaddr_reg:x16; val_offset:1848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1848, x17, x15, 1848, x18)

inst_6328:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x80fff000; valaddr_reg:x16; val_offset:1856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1856, x17, x15, 1856, x18)

inst_6329:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x001fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80801fff; op2val:0x80000000; valaddr_reg:x16; val_offset:1864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1864, x17, x15, 1864, x18)

inst_6330:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x80801fff; valaddr_reg:x16; val_offset:1872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1872, x17, x15, 1872, x18)

inst_6331:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7fe000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80ffe000; op2val:0x80000000; valaddr_reg:x16; val_offset:1880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1880, x17, x15, 1880, x18)

inst_6332:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x80ffe000; valaddr_reg:x16; val_offset:1888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1888, x17, x15, 1888, x18)

inst_6333:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x003fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80803fff; op2val:0x80000000; valaddr_reg:x16; val_offset:1896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1896, x17, x15, 1896, x18)

inst_6334:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x80803fff; valaddr_reg:x16; val_offset:1904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1904, x17, x15, 1904, x18)

inst_6335:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7fc000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80ffc000; op2val:0x80000000; valaddr_reg:x16; val_offset:1912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1912, x17, x15, 1912, x18)

inst_6336:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x80ffc000; valaddr_reg:x16; val_offset:1920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1920, x17, x15, 1920, x18)

inst_6337:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x007fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80807fff; op2val:0x80000000; valaddr_reg:x16; val_offset:1928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1928, x17, x15, 1928, x18)

inst_6338:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x80807fff; valaddr_reg:x16; val_offset:1936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1936, x17, x15, 1936, x18)

inst_6339:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7f8000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80ff8000; op2val:0x80000000; valaddr_reg:x16; val_offset:1944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1944, x17, x15, 1944, x18)

inst_6340:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x80ff8000; valaddr_reg:x16; val_offset:1952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1952, x17, x15, 1952, x18)

inst_6341:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x00ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8080ffff; op2val:0x80000000; valaddr_reg:x16; val_offset:1960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1960, x17, x15, 1960, x18)

inst_6342:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x8080ffff; valaddr_reg:x16; val_offset:1968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1968, x17, x15, 1968, x18)

inst_6343:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7f0000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80ff0000; op2val:0x80000000; valaddr_reg:x16; val_offset:1976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1976, x17, x15, 1976, x18)

inst_6344:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x80ff0000; valaddr_reg:x16; val_offset:1984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1984, x17, x15, 1984, x18)

inst_6345:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x01ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8081ffff; op2val:0x80000000; valaddr_reg:x16; val_offset:1992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1992, x17, x15, 1992, x18)

inst_6346:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x8081ffff; valaddr_reg:x16; val_offset:2000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2000, x17, x15, 2000, x18)

inst_6347:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7e0000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80fe0000; op2val:0x80000000; valaddr_reg:x16; val_offset:2008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2008, x17, x15, 2008, x18)

inst_6348:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x80fe0000; valaddr_reg:x16; val_offset:2016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2016, x17, x15, 2016, x18)

inst_6349:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x03ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8083ffff; op2val:0x80000000; valaddr_reg:x16; val_offset:2024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_26)

inst_6350:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x8083ffff; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_6351:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7c0000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80fc0000; op2val:0x80000000; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 8, x17, x15, 8, x18)

inst_6352:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x80fc0000; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 16, x17, x15, 16, x18)

inst_6353:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x07ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8087ffff; op2val:0x80000000; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 24, x17, x15, 24, x18)

inst_6354:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x8087ffff; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 32, x17, x15, 32, x18)

inst_6355:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x780000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80f80000; op2val:0x80000000; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 40, x17, x15, 40, x18)

inst_6356:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x80f80000; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_6357:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x0fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x808fffff; op2val:0x80000000; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 56, x17, x15, 56, x18)

inst_6358:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x808fffff; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 64, x17, x15, 64, x18)

inst_6359:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x700000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80f00000; op2val:0x80000000; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 72, x17, x15, 72, x18)

inst_6360:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x80f00000; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_6361:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x1fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x809fffff; op2val:0x80000000; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 88, x17, x15, 88, x18)

inst_6362:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x809fffff; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 96, x17, x15, 96, x18)

inst_6363:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x600000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80e00000; op2val:0x80000000; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 104, x17, x15, 104, x18)

inst_6364:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x80e00000; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 112, x17, x15, 112, x18)

inst_6365:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x3fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80bfffff; op2val:0x80000000; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 120, x17, x15, 120, x18)

inst_6366:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x80bfffff; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_6367:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80c00000; op2val:0x80000000; valaddr_reg:x16; val_offset:136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 136, x17, x15, 136, x18)

inst_6368:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x80c00000; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 144, x17, x15, 144, x18)

inst_6369:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80ffffff; op2val:0x80000000; valaddr_reg:x16; val_offset:152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 152, x17, x15, 152, x18)

inst_6370:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x80ffffff; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_6371:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x80000000; valaddr_reg:x16; val_offset:168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 168, x17, x15, 168, x18)

inst_6372:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x00000f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8000000f; op2val:0x80000000; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 176, x17, x15, 176, x18)

inst_6373:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x8000000f; valaddr_reg:x16; val_offset:184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 184, x17, x15, 184, x18)

inst_6374:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ffff0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807ffff0; op2val:0x80000000; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 192, x17, x15, 192, x18)

inst_6375:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x807ffff0; valaddr_reg:x16; val_offset:200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 200, x17, x15, 200, x18)

inst_6376:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x00001f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8000001f; op2val:0x80000000; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_6377:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x8000001f; valaddr_reg:x16; val_offset:216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 216, x17, x15, 216, x18)

inst_6378:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffe0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffe0; op2val:0x80000000; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 224, x17, x15, 224, x18)

inst_6379:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x807fffe0; valaddr_reg:x16; val_offset:232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 232, x17, x15, 232, x18)

inst_6380:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8000003f; op2val:0x80000000; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_6381:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x8000003f; valaddr_reg:x16; val_offset:248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 248, x17, x15, 248, x18)

inst_6382:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffc0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fffc0; op2val:0x80000000; valaddr_reg:x16; val_offset:256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 256, x17, x15, 256, x18)

inst_6383:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x807fffc0; valaddr_reg:x16; val_offset:264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 264, x17, x15, 264, x18)

inst_6384:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x00007f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8000007f; op2val:0x80000000; valaddr_reg:x16; val_offset:272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 272, x17, x15, 272, x18)

inst_6385:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x8000007f; valaddr_reg:x16; val_offset:280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 280, x17, x15, 280, x18)

inst_6386:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fff80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fff80; op2val:0x80000000; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_6387:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x807fff80; valaddr_reg:x16; val_offset:296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 296, x17, x15, 296, x18)

inst_6388:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0000ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800000ff; op2val:0x80000000; valaddr_reg:x16; val_offset:304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 304, x17, x15, 304, x18)

inst_6389:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x800000ff; valaddr_reg:x16; val_offset:312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 312, x17, x15, 312, x18)

inst_6390:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fff00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fff00; op2val:0x80000000; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_6391:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x807fff00; valaddr_reg:x16; val_offset:328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 328, x17, x15, 328, x18)

inst_6392:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0001ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800001ff; op2val:0x80000000; valaddr_reg:x16; val_offset:336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 336, x17, x15, 336, x18)

inst_6393:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x800001ff; valaddr_reg:x16; val_offset:344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 344, x17, x15, 344, x18)

inst_6394:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ffe00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807ffe00; op2val:0x80000000; valaddr_reg:x16; val_offset:352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 352, x17, x15, 352, x18)

inst_6395:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x807ffe00; valaddr_reg:x16; val_offset:360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 360, x17, x15, 360, x18)

inst_6396:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0003ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800003ff; op2val:0x80000000; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_6397:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x800003ff; valaddr_reg:x16; val_offset:376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 376, x17, x15, 376, x18)

inst_6398:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ffc00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807ffc00; op2val:0x80000000; valaddr_reg:x16; val_offset:384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 384, x17, x15, 384, x18)

inst_6399:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x807ffc00; valaddr_reg:x16; val_offset:392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 392, x17, x15, 392, x18)

inst_6400:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0007ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800007ff; op2val:0x80000000; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_6401:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x800007ff; valaddr_reg:x16; val_offset:408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 408, x17, x15, 408, x18)

inst_6402:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ff800 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807ff800; op2val:0x80000000; valaddr_reg:x16; val_offset:416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 416, x17, x15, 416, x18)

inst_6403:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x807ff800; valaddr_reg:x16; val_offset:424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 424, x17, x15, 424, x18)

inst_6404:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000fff; op2val:0x80000000; valaddr_reg:x16; val_offset:432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 432, x17, x15, 432, x18)

inst_6405:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x80000fff; valaddr_reg:x16; val_offset:440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 440, x17, x15, 440, x18)

inst_6406:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ff000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807ff000; op2val:0x80000000; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_6407:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x807ff000; valaddr_reg:x16; val_offset:456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 456, x17, x15, 456, x18)

inst_6408:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x001fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80001fff; op2val:0x80000000; valaddr_reg:x16; val_offset:464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 464, x17, x15, 464, x18)

inst_6409:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x80001fff; valaddr_reg:x16; val_offset:472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 472, x17, x15, 472, x18)

inst_6410:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fe000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fe000; op2val:0x80000000; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_6411:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x807fe000; valaddr_reg:x16; val_offset:488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 488, x17, x15, 488, x18)

inst_6412:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x003fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80003fff; op2val:0x80000000; valaddr_reg:x16; val_offset:496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 496, x17, x15, 496, x18)

inst_6413:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x80003fff; valaddr_reg:x16; val_offset:504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 504, x17, x15, 504, x18)

inst_6414:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fc000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fc000; op2val:0x80000000; valaddr_reg:x16; val_offset:512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 512, x17, x15, 512, x18)

inst_6415:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x807fc000; valaddr_reg:x16; val_offset:520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 520, x17, x15, 520, x18)

inst_6416:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x007fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80007fff; op2val:0x80000000; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_6417:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x80007fff; valaddr_reg:x16; val_offset:536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 536, x17, x15, 536, x18)

inst_6418:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7f8000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807f8000; op2val:0x80000000; valaddr_reg:x16; val_offset:544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 544, x17, x15, 544, x18)

inst_6419:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x807f8000; valaddr_reg:x16; val_offset:552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 552, x17, x15, 552, x18)

inst_6420:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x00ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8000ffff; op2val:0x80000000; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_6421:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x8000ffff; valaddr_reg:x16; val_offset:568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 568, x17, x15, 568, x18)

inst_6422:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7f0000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807f0000; op2val:0x80000000; valaddr_reg:x16; val_offset:576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 576, x17, x15, 576, x18)

inst_6423:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x807f0000; valaddr_reg:x16; val_offset:584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 584, x17, x15, 584, x18)

inst_6424:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x01ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8001ffff; op2val:0x80000000; valaddr_reg:x16; val_offset:592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 592, x17, x15, 592, x18)

inst_6425:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x8001ffff; valaddr_reg:x16; val_offset:600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 600, x17, x15, 600, x18)

inst_6426:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7e0000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807e0000; op2val:0x80000000; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 608, x17, x15, 608, x18)

inst_6427:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x807e0000; valaddr_reg:x16; val_offset:616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 616, x17, x15, 616, x18)

inst_6428:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x03ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8003ffff; op2val:0x80000000; valaddr_reg:x16; val_offset:624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 624, x17, x15, 624, x18)

inst_6429:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x8003ffff; valaddr_reg:x16; val_offset:632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 632, x17, x15, 632, x18)

inst_6430:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7c0000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807c0000; op2val:0x80000000; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_6431:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x807c0000; valaddr_reg:x16; val_offset:648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 648, x17, x15, 648, x18)

inst_6432:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x07ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8007ffff; op2val:0x80000000; valaddr_reg:x16; val_offset:656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 656, x17, x15, 656, x18)

inst_6433:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x8007ffff; valaddr_reg:x16; val_offset:664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 664, x17, x15, 664, x18)

inst_6434:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x780000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80780000; op2val:0x80000000; valaddr_reg:x16; val_offset:672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 672, x17, x15, 672, x18)

inst_6435:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x80780000; valaddr_reg:x16; val_offset:680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 680, x17, x15, 680, x18)

inst_6436:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800fffff; op2val:0x80000000; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 688, x17, x15, 688, x18)

inst_6437:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x800fffff; valaddr_reg:x16; val_offset:696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 696, x17, x15, 696, x18)

inst_6438:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x700000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80700000; op2val:0x80000000; valaddr_reg:x16; val_offset:704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 704, x17, x15, 704, x18)

inst_6439:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x80700000; valaddr_reg:x16; val_offset:712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 712, x17, x15, 712, x18)

inst_6440:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x1fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x801fffff; op2val:0x80000000; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_6441:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x801fffff; valaddr_reg:x16; val_offset:728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 728, x17, x15, 728, x18)

inst_6442:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x600000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80600000; op2val:0x80000000; valaddr_reg:x16; val_offset:736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 736, x17, x15, 736, x18)

inst_6443:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x80600000; valaddr_reg:x16; val_offset:744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 744, x17, x15, 744, x18)

inst_6444:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x3fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x803fffff; op2val:0x80000000; valaddr_reg:x16; val_offset:752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 752, x17, x15, 752, x18)

inst_6445:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x803fffff; valaddr_reg:x16; val_offset:760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 760, x17, x15, 760, x18)

inst_6446:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80400000; op2val:0x80000000; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 768, x17, x15, 768, x18)

inst_6447:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0x80400000; valaddr_reg:x16; val_offset:776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 776, x17, x15, 776, x18)

inst_6448:
// fs1 == 1 and fe1 == 0x66 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xb3000001; op2val:0x80000000; valaddr_reg:x16; val_offset:784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 784, x17, x15, 784, x18)

inst_6449:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x66 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0xb3000001; valaddr_reg:x16; val_offset:792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 792, x17, x15, 792, x18)

inst_6450:
// fs1 == 1 and fe1 == 0x66 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xb3000000; op2val:0x80000000; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_6451:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x66 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0xb3000000; valaddr_reg:x16; val_offset:808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 808, x17, x15, 808, x18)

inst_6452:
// fs1 == 1 and fe1 == 0x66 and fm1 == 0x7ffffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xb37ffffe; op2val:0x80000000; valaddr_reg:x16; val_offset:816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 816, x17, x15, 816, x18)

inst_6453:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x66 and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0xb37ffffe; valaddr_reg:x16; val_offset:824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 824, x17, x15, 824, x18)

inst_6454:
// fs1 == 1 and fe1 == 0x66 and fm1 == 0x000003 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xb3000003; op2val:0x80000000; valaddr_reg:x16; val_offset:832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 832, x17, x15, 832, x18)

inst_6455:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x66 and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0xb3000003; valaddr_reg:x16; val_offset:840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 840, x17, x15, 840, x18)

inst_6456:
// fs1 == 1 and fe1 == 0x66 and fm1 == 0x7ffffc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xb37ffffc; op2val:0x80000000; valaddr_reg:x16; val_offset:848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 848, x17, x15, 848, x18)

inst_6457:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x66 and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0xb37ffffc; valaddr_reg:x16; val_offset:856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 856, x17, x15, 856, x18)

inst_6458:
// fs1 == 1 and fe1 == 0x66 and fm1 == 0x000007 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xb3000007; op2val:0x80000000; valaddr_reg:x16; val_offset:864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 864, x17, x15, 864, x18)

inst_6459:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x66 and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0xb3000007; valaddr_reg:x16; val_offset:872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 872, x17, x15, 872, x18)

inst_6460:
// fs1 == 1 and fe1 == 0x66 and fm1 == 0x7ffff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xb37ffff8; op2val:0x80000000; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 880, x17, x15, 880, x18)

inst_6461:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x66 and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0xb37ffff8; valaddr_reg:x16; val_offset:888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 888, x17, x15, 888, x18)

inst_6462:
// fs1 == 1 and fe1 == 0x66 and fm1 == 0x00000f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xb300000f; op2val:0x80000000; valaddr_reg:x16; val_offset:896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 896, x17, x15, 896, x18)

inst_6463:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x66 and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0xb300000f; valaddr_reg:x16; val_offset:904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 904, x17, x15, 904, x18)

inst_6464:
// fs1 == 1 and fe1 == 0x66 and fm1 == 0x7ffff0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xb37ffff0; op2val:0x80000000; valaddr_reg:x16; val_offset:912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 912, x17, x15, 912, x18)

inst_6465:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x66 and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0xb37ffff0; valaddr_reg:x16; val_offset:920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 920, x17, x15, 920, x18)

inst_6466:
// fs1 == 1 and fe1 == 0x66 and fm1 == 0x00001f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xb300001f; op2val:0x80000000; valaddr_reg:x16; val_offset:928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 928, x17, x15, 928, x18)

inst_6467:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x66 and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0xb300001f; valaddr_reg:x16; val_offset:936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 936, x17, x15, 936, x18)

inst_6468:
// fs1 == 1 and fe1 == 0x66 and fm1 == 0x7fffe0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xb37fffe0; op2val:0x80000000; valaddr_reg:x16; val_offset:944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 944, x17, x15, 944, x18)

inst_6469:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x66 and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0xb37fffe0; valaddr_reg:x16; val_offset:952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 952, x17, x15, 952, x18)

inst_6470:
// fs1 == 1 and fe1 == 0x66 and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xb300003f; op2val:0x80000000; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 960, x17, x15, 960, x18)

inst_6471:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x66 and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0xb300003f; valaddr_reg:x16; val_offset:968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 968, x17, x15, 968, x18)

inst_6472:
// fs1 == 1 and fe1 == 0x66 and fm1 == 0x7fffc0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xb37fffc0; op2val:0x80000000; valaddr_reg:x16; val_offset:976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 976, x17, x15, 976, x18)

inst_6473:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x66 and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0xb37fffc0; valaddr_reg:x16; val_offset:984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 984, x17, x15, 984, x18)

inst_6474:
// fs1 == 1 and fe1 == 0x66 and fm1 == 0x00007f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xb300007f; op2val:0x80000000; valaddr_reg:x16; val_offset:992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 992, x17, x15, 992, x18)

inst_6475:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x66 and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0xb300007f; valaddr_reg:x16; val_offset:1000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1000, x17, x15, 1000, x18)

inst_6476:
// fs1 == 1 and fe1 == 0x66 and fm1 == 0x7fff80 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xb37fff80; op2val:0x80000000; valaddr_reg:x16; val_offset:1008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1008, x17, x15, 1008, x18)

inst_6477:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x66 and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0xb37fff80; valaddr_reg:x16; val_offset:1016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1016, x17, x15, 1016, x18)

inst_6478:
// fs1 == 1 and fe1 == 0x66 and fm1 == 0x0000ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xb30000ff; op2val:0x80000000; valaddr_reg:x16; val_offset:1024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1024, x17, x15, 1024, x18)

inst_6479:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x66 and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0xb30000ff; valaddr_reg:x16; val_offset:1032; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1032, x17, x15, 1032, x18)

inst_6480:
// fs1 == 1 and fe1 == 0x66 and fm1 == 0x7fff00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xb37fff00; op2val:0x80000000; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1040, x17, x15, 1040, x18)

inst_6481:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x66 and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0xb37fff00; valaddr_reg:x16; val_offset:1048; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1048, x17, x15, 1048, x18)

inst_6482:
// fs1 == 1 and fe1 == 0x66 and fm1 == 0x0001ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xb30001ff; op2val:0x80000000; valaddr_reg:x16; val_offset:1056; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1056, x17, x15, 1056, x18)

inst_6483:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x66 and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0xb30001ff; valaddr_reg:x16; val_offset:1064; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1064, x17, x15, 1064, x18)

inst_6484:
// fs1 == 1 and fe1 == 0x66 and fm1 == 0x7ffe00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xb37ffe00; op2val:0x80000000; valaddr_reg:x16; val_offset:1072; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1072, x17, x15, 1072, x18)

inst_6485:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x66 and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0xb37ffe00; valaddr_reg:x16; val_offset:1080; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1080, x17, x15, 1080, x18)

inst_6486:
// fs1 == 1 and fe1 == 0x66 and fm1 == 0x0003ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xb30003ff; op2val:0x80000000; valaddr_reg:x16; val_offset:1088; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1088, x17, x15, 1088, x18)

inst_6487:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x66 and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0xb30003ff; valaddr_reg:x16; val_offset:1096; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1096, x17, x15, 1096, x18)

inst_6488:
// fs1 == 1 and fe1 == 0x66 and fm1 == 0x7ffc00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xb37ffc00; op2val:0x80000000; valaddr_reg:x16; val_offset:1104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1104, x17, x15, 1104, x18)

inst_6489:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x66 and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0xb37ffc00; valaddr_reg:x16; val_offset:1112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1112, x17, x15, 1112, x18)

inst_6490:
// fs1 == 1 and fe1 == 0x66 and fm1 == 0x0007ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xb30007ff; op2val:0x80000000; valaddr_reg:x16; val_offset:1120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1120, x17, x15, 1120, x18)

inst_6491:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x66 and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0xb30007ff; valaddr_reg:x16; val_offset:1128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1128, x17, x15, 1128, x18)

inst_6492:
// fs1 == 1 and fe1 == 0x66 and fm1 == 0x7ff800 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xb37ff800; op2val:0x80000000; valaddr_reg:x16; val_offset:1136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1136, x17, x15, 1136, x18)

inst_6493:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x66 and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0xb37ff800; valaddr_reg:x16; val_offset:1144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1144, x17, x15, 1144, x18)

inst_6494:
// fs1 == 1 and fe1 == 0x66 and fm1 == 0x000fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xb3000fff; op2val:0x80000000; valaddr_reg:x16; val_offset:1152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1152, x17, x15, 1152, x18)

inst_6495:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x66 and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0xb3000fff; valaddr_reg:x16; val_offset:1160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1160, x17, x15, 1160, x18)

inst_6496:
// fs1 == 1 and fe1 == 0x66 and fm1 == 0x7ff000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xb37ff000; op2val:0x80000000; valaddr_reg:x16; val_offset:1168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1168, x17, x15, 1168, x18)

inst_6497:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x66 and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0xb37ff000; valaddr_reg:x16; val_offset:1176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1176, x17, x15, 1176, x18)

inst_6498:
// fs1 == 1 and fe1 == 0x66 and fm1 == 0x001fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xb3001fff; op2val:0x80000000; valaddr_reg:x16; val_offset:1184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1184, x17, x15, 1184, x18)

inst_6499:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x66 and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0xb3001fff; valaddr_reg:x16; val_offset:1192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1192, x17, x15, 1192, x18)

inst_6500:
// fs1 == 1 and fe1 == 0x66 and fm1 == 0x7fe000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xb37fe000; op2val:0x80000000; valaddr_reg:x16; val_offset:1200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1200, x17, x15, 1200, x18)

inst_6501:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x66 and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0xb37fe000; valaddr_reg:x16; val_offset:1208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1208, x17, x15, 1208, x18)

inst_6502:
// fs1 == 1 and fe1 == 0x66 and fm1 == 0x003fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xb3003fff; op2val:0x80000000; valaddr_reg:x16; val_offset:1216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1216, x17, x15, 1216, x18)

inst_6503:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x66 and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0xb3003fff; valaddr_reg:x16; val_offset:1224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1224, x17, x15, 1224, x18)

inst_6504:
// fs1 == 1 and fe1 == 0x66 and fm1 == 0x7fc000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xb37fc000; op2val:0x80000000; valaddr_reg:x16; val_offset:1232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1232, x17, x15, 1232, x18)

inst_6505:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x66 and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0xb37fc000; valaddr_reg:x16; val_offset:1240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1240, x17, x15, 1240, x18)

inst_6506:
// fs1 == 1 and fe1 == 0x66 and fm1 == 0x007fff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xb3007fff; op2val:0x80000000; valaddr_reg:x16; val_offset:1248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1248, x17, x15, 1248, x18)

inst_6507:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x66 and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0xb3007fff; valaddr_reg:x16; val_offset:1256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1256, x17, x15, 1256, x18)

inst_6508:
// fs1 == 1 and fe1 == 0x66 and fm1 == 0x7f8000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xb37f8000; op2val:0x80000000; valaddr_reg:x16; val_offset:1264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1264, x17, x15, 1264, x18)

inst_6509:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x66 and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0xb37f8000; valaddr_reg:x16; val_offset:1272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1272, x17, x15, 1272, x18)

inst_6510:
// fs1 == 1 and fe1 == 0x66 and fm1 == 0x00ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xb300ffff; op2val:0x80000000; valaddr_reg:x16; val_offset:1280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1280, x17, x15, 1280, x18)

inst_6511:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x66 and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0xb300ffff; valaddr_reg:x16; val_offset:1288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1288, x17, x15, 1288, x18)

inst_6512:
// fs1 == 1 and fe1 == 0x66 and fm1 == 0x7f0000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xb37f0000; op2val:0x80000000; valaddr_reg:x16; val_offset:1296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1296, x17, x15, 1296, x18)

inst_6513:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x66 and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0xb37f0000; valaddr_reg:x16; val_offset:1304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1304, x17, x15, 1304, x18)

inst_6514:
// fs1 == 1 and fe1 == 0x66 and fm1 == 0x01ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xb301ffff; op2val:0x80000000; valaddr_reg:x16; val_offset:1312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1312, x17, x15, 1312, x18)

inst_6515:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x66 and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0xb301ffff; valaddr_reg:x16; val_offset:1320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1320, x17, x15, 1320, x18)

inst_6516:
// fs1 == 1 and fe1 == 0x66 and fm1 == 0x7e0000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xb37e0000; op2val:0x80000000; valaddr_reg:x16; val_offset:1328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1328, x17, x15, 1328, x18)

inst_6517:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x66 and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0xb37e0000; valaddr_reg:x16; val_offset:1336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1336, x17, x15, 1336, x18)

inst_6518:
// fs1 == 1 and fe1 == 0x66 and fm1 == 0x03ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xb303ffff; op2val:0x80000000; valaddr_reg:x16; val_offset:1344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1344, x17, x15, 1344, x18)

inst_6519:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x66 and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0xb303ffff; valaddr_reg:x16; val_offset:1352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1352, x17, x15, 1352, x18)

inst_6520:
// fs1 == 1 and fe1 == 0x66 and fm1 == 0x7c0000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xb37c0000; op2val:0x80000000; valaddr_reg:x16; val_offset:1360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1360, x17, x15, 1360, x18)

inst_6521:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x66 and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0xb37c0000; valaddr_reg:x16; val_offset:1368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1368, x17, x15, 1368, x18)

inst_6522:
// fs1 == 1 and fe1 == 0x66 and fm1 == 0x07ffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xb307ffff; op2val:0x80000000; valaddr_reg:x16; val_offset:1376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1376, x17, x15, 1376, x18)

inst_6523:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x66 and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0xb307ffff; valaddr_reg:x16; val_offset:1384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1384, x17, x15, 1384, x18)

inst_6524:
// fs1 == 1 and fe1 == 0x66 and fm1 == 0x780000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xb3780000; op2val:0x80000000; valaddr_reg:x16; val_offset:1392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1392, x17, x15, 1392, x18)

inst_6525:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x66 and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0xb3780000; valaddr_reg:x16; val_offset:1400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1400, x17, x15, 1400, x18)

inst_6526:
// fs1 == 1 and fe1 == 0x66 and fm1 == 0x0fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xb30fffff; op2val:0x80000000; valaddr_reg:x16; val_offset:1408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1408, x17, x15, 1408, x18)

inst_6527:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x66 and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0xb30fffff; valaddr_reg:x16; val_offset:1416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1416, x17, x15, 1416, x18)

inst_6528:
// fs1 == 1 and fe1 == 0x66 and fm1 == 0x700000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xb3700000; op2val:0x80000000; valaddr_reg:x16; val_offset:1424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1424, x17, x15, 1424, x18)

inst_6529:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x66 and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0xb3700000; valaddr_reg:x16; val_offset:1432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1432, x17, x15, 1432, x18)

inst_6530:
// fs1 == 1 and fe1 == 0x66 and fm1 == 0x1fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xb31fffff; op2val:0x80000000; valaddr_reg:x16; val_offset:1440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1440, x17, x15, 1440, x18)

inst_6531:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x66 and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0xb31fffff; valaddr_reg:x16; val_offset:1448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1448, x17, x15, 1448, x18)

inst_6532:
// fs1 == 1 and fe1 == 0x66 and fm1 == 0x600000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xb3600000; op2val:0x80000000; valaddr_reg:x16; val_offset:1456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1456, x17, x15, 1456, x18)

inst_6533:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x66 and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0xb3600000; valaddr_reg:x16; val_offset:1464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1464, x17, x15, 1464, x18)

inst_6534:
// fs1 == 1 and fe1 == 0x66 and fm1 == 0x3fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xb33fffff; op2val:0x80000000; valaddr_reg:x16; val_offset:1472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1472, x17, x15, 1472, x18)

inst_6535:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x66 and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0xb33fffff; valaddr_reg:x16; val_offset:1480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1480, x17, x15, 1480, x18)

inst_6536:
// fs1 == 1 and fe1 == 0x66 and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xb3400000; op2val:0x80000000; valaddr_reg:x16; val_offset:1488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1488, x17, x15, 1488, x18)

inst_6537:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x66 and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0xb3400000; valaddr_reg:x16; val_offset:1496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1496, x17, x15, 1496, x18)

inst_6538:
// fs1 == 1 and fe1 == 0x66 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xb37fffff; op2val:0x80000000; valaddr_reg:x16; val_offset:1504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1504, x17, x15, 1504, x18)

inst_6539:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x66 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000000; op2val:0xb37fffff; valaddr_reg:x16; val_offset:1512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1512, x17, x15, 1512, x18)

inst_6540:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x4ccccc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x4ccccc; op2val:0x0; valaddr_reg:x16; val_offset:1520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1520, x17, x15, 1520, x18)

inst_6541:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4ccccc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x4ccccc; valaddr_reg:x16; val_offset:1528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1528, x17, x15, 1528, x18)

inst_6542:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x333333 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x333333; op2val:0x0; valaddr_reg:x16; val_offset:1536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1536, x17, x15, 1536, x18)

inst_6543:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x333333 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x333333; valaddr_reg:x16; val_offset:1544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1544, x17, x15, 1544, x18)

inst_6544:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x5b6db6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x5b6db6; op2val:0x0; valaddr_reg:x16; val_offset:1552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1552, x17, x15, 1552, x18)

inst_6545:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5b6db6 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x5b6db6; valaddr_reg:x16; val_offset:1560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1560, x17, x15, 1560, x18)

inst_6546:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x249249 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x249249; op2val:0x0; valaddr_reg:x16; val_offset:1568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1568, x17, x15, 1568, x18)

inst_6547:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x249249 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x249249; valaddr_reg:x16; val_offset:1576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1576, x17, x15, 1576, x18)

inst_6548:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x444444 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x444444; op2val:0x0; valaddr_reg:x16; val_offset:1584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1584, x17, x15, 1584, x18)

inst_6549:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x444444 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x444444; valaddr_reg:x16; val_offset:1592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1592, x17, x15, 1592, x18)

inst_6550:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x3bbbbb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3bbbbb; op2val:0x0; valaddr_reg:x16; val_offset:1600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1600, x17, x15, 1600, x18)

inst_6551:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3bbbbb and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x3bbbbb; valaddr_reg:x16; val_offset:1608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1608, x17, x15, 1608, x18)

inst_6552:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x666666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x666666; op2val:0x0; valaddr_reg:x16; val_offset:1616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1616, x17, x15, 1616, x18)

inst_6553:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x666666 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x666666; valaddr_reg:x16; val_offset:1624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1624, x17, x15, 1624, x18)

inst_6554:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x199999 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x199999; op2val:0x0; valaddr_reg:x16; val_offset:1632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1632, x17, x15, 1632, x18)

inst_6555:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x199999 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x199999; valaddr_reg:x16; val_offset:1640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1640, x17, x15, 1640, x18)

inst_6556:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x6db6db and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6db6db; op2val:0x0; valaddr_reg:x16; val_offset:1648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1648, x17, x15, 1648, x18)

inst_6557:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6db6db and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x6db6db; valaddr_reg:x16; val_offset:1656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1656, x17, x15, 1656, x18)

inst_6558:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x36db6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x36db6d; op2val:0x0; valaddr_reg:x16; val_offset:1664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1664, x17, x15, 1664, x18)

inst_6559:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36db6d and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x36db6d; valaddr_reg:x16; val_offset:1672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1672, x17, x15, 1672, x18)

inst_6560:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7ffffe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ffffe; op2val:0x0; valaddr_reg:x16; val_offset:1680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1680, x17, x15, 1680, x18)

inst_6561:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x7ffffe; valaddr_reg:x16; val_offset:1688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1688, x17, x15, 1688, x18)

inst_6562:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000003 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3; op2val:0x0; valaddr_reg:x16; val_offset:1696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1696, x17, x15, 1696, x18)

inst_6563:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x3; valaddr_reg:x16; val_offset:1704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1704, x17, x15, 1704, x18)

inst_6564:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7ffffc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ffffc; op2val:0x0; valaddr_reg:x16; val_offset:1712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1712, x17, x15, 1712, x18)

inst_6565:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x7ffffc; valaddr_reg:x16; val_offset:1720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1720, x17, x15, 1720, x18)

inst_6566:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000007 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7; op2val:0x0; valaddr_reg:x16; val_offset:1728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1728, x17, x15, 1728, x18)

inst_6567:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x7; valaddr_reg:x16; val_offset:1736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1736, x17, x15, 1736, x18)

inst_6568:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7ffff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ffff8; op2val:0x0; valaddr_reg:x16; val_offset:1744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1744, x17, x15, 1744, x18)

inst_6569:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x7ffff8; valaddr_reg:x16; val_offset:1752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1752, x17, x15, 1752, x18)

inst_6570:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1800001; op2val:0x0; valaddr_reg:x16; val_offset:1760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1760, x17, x15, 1760, x18)

inst_6571:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x1800001; valaddr_reg:x16; val_offset:1768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1768, x17, x15, 1768, x18)

inst_6572:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1800000; op2val:0x0; valaddr_reg:x16; val_offset:1776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1776, x17, x15, 1776, x18)

inst_6573:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x1800000; valaddr_reg:x16; val_offset:1784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1784, x17, x15, 1784, x18)

inst_6574:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7ffffe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1fffffe; op2val:0x0; valaddr_reg:x16; val_offset:1792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1792, x17, x15, 1792, x18)

inst_6575:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x1fffffe; valaddr_reg:x16; val_offset:1800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1800, x17, x15, 1800, x18)

inst_6576:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x000003 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1800003; op2val:0x0; valaddr_reg:x16; val_offset:1808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1808, x17, x15, 1808, x18)

inst_6577:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x1800003; valaddr_reg:x16; val_offset:1816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1816, x17, x15, 1816, x18)

inst_6578:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7ffffc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1fffffc; op2val:0x0; valaddr_reg:x16; val_offset:1824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1824, x17, x15, 1824, x18)

inst_6579:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x1fffffc; valaddr_reg:x16; val_offset:1832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1832, x17, x15, 1832, x18)

inst_6580:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x000007 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1800007; op2val:0x0; valaddr_reg:x16; val_offset:1840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1840, x17, x15, 1840, x18)

inst_6581:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x1800007; valaddr_reg:x16; val_offset:1848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1848, x17, x15, 1848, x18)

inst_6582:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7ffff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1fffff8; op2val:0x0; valaddr_reg:x16; val_offset:1856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1856, x17, x15, 1856, x18)

inst_6583:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x1fffff8; valaddr_reg:x16; val_offset:1864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1864, x17, x15, 1864, x18)

inst_6584:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x00000f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x180000f; op2val:0x0; valaddr_reg:x16; val_offset:1872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1872, x17, x15, 1872, x18)

inst_6585:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x180000f; valaddr_reg:x16; val_offset:1880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1880, x17, x15, 1880, x18)

inst_6586:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7ffff0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1fffff0; op2val:0x0; valaddr_reg:x16; val_offset:1888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1888, x17, x15, 1888, x18)

inst_6587:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x1fffff0; valaddr_reg:x16; val_offset:1896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1896, x17, x15, 1896, x18)

inst_6588:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x00001f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x180001f; op2val:0x0; valaddr_reg:x16; val_offset:1904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1904, x17, x15, 1904, x18)

inst_6589:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x180001f; valaddr_reg:x16; val_offset:1912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1912, x17, x15, 1912, x18)

inst_6590:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7fffe0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1ffffe0; op2val:0x0; valaddr_reg:x16; val_offset:1920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1920, x17, x15, 1920, x18)

inst_6591:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x1ffffe0; valaddr_reg:x16; val_offset:1928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1928, x17, x15, 1928, x18)

inst_6592:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x00003f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x180003f; op2val:0x0; valaddr_reg:x16; val_offset:1936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1936, x17, x15, 1936, x18)

inst_6593:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x180003f; valaddr_reg:x16; val_offset:1944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1944, x17, x15, 1944, x18)

inst_6594:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7fffc0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1ffffc0; op2val:0x0; valaddr_reg:x16; val_offset:1952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1952, x17, x15, 1952, x18)

inst_6595:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x1ffffc0; valaddr_reg:x16; val_offset:1960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1960, x17, x15, 1960, x18)

inst_6596:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x00007f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x180007f; op2val:0x0; valaddr_reg:x16; val_offset:1968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1968, x17, x15, 1968, x18)

inst_6597:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x180007f; valaddr_reg:x16; val_offset:1976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1976, x17, x15, 1976, x18)

inst_6598:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7fff80 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1ffff80; op2val:0x0; valaddr_reg:x16; val_offset:1984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1984, x17, x15, 1984, x18)

inst_6599:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x1ffff80; valaddr_reg:x16; val_offset:1992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1992, x17, x15, 1992, x18)

inst_6600:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x0000ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x18000ff; op2val:0x0; valaddr_reg:x16; val_offset:2000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2000, x17, x15, 2000, x18)

inst_6601:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x18000ff; valaddr_reg:x16; val_offset:2008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2008, x17, x15, 2008, x18)

inst_6602:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7fff00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1ffff00; op2val:0x0; valaddr_reg:x16; val_offset:2016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2016, x17, x15, 2016, x18)

inst_6603:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x1ffff00; valaddr_reg:x16; val_offset:2024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_27)

inst_6604:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x0001ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x18001ff; op2val:0x0; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_6605:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x18001ff; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 8, x17, x15, 8, x18)

inst_6606:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7ffe00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1fffe00; op2val:0x0; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 16, x17, x15, 16, x18)

inst_6607:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x1fffe00; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 24, x17, x15, 24, x18)

inst_6608:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x0003ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x18003ff; op2val:0x0; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 32, x17, x15, 32, x18)

inst_6609:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x18003ff; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 40, x17, x15, 40, x18)

inst_6610:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7ffc00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1fffc00; op2val:0x0; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_6611:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x1fffc00; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 56, x17, x15, 56, x18)

inst_6612:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x0007ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x18007ff; op2val:0x0; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 64, x17, x15, 64, x18)

inst_6613:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x18007ff; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 72, x17, x15, 72, x18)

inst_6614:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7ff800 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1fff800; op2val:0x0; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_6615:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x1fff800; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 88, x17, x15, 88, x18)

inst_6616:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x000fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1800fff; op2val:0x0; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 96, x17, x15, 96, x18)

inst_6617:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x1800fff; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 104, x17, x15, 104, x18)

inst_6618:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7ff000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1fff000; op2val:0x0; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 112, x17, x15, 112, x18)

inst_6619:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x1fff000; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 120, x17, x15, 120, x18)

inst_6620:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x001fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1801fff; op2val:0x0; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_6621:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x1801fff; valaddr_reg:x16; val_offset:136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 136, x17, x15, 136, x18)

inst_6622:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7fe000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1ffe000; op2val:0x0; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 144, x17, x15, 144, x18)

inst_6623:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x1ffe000; valaddr_reg:x16; val_offset:152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 152, x17, x15, 152, x18)

inst_6624:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x003fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1803fff; op2val:0x0; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_6625:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x1803fff; valaddr_reg:x16; val_offset:168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 168, x17, x15, 168, x18)

inst_6626:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7fc000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1ffc000; op2val:0x0; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 176, x17, x15, 176, x18)

inst_6627:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x1ffc000; valaddr_reg:x16; val_offset:184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 184, x17, x15, 184, x18)

inst_6628:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x007fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1807fff; op2val:0x0; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 192, x17, x15, 192, x18)

inst_6629:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x1807fff; valaddr_reg:x16; val_offset:200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 200, x17, x15, 200, x18)

inst_6630:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7f8000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1ff8000; op2val:0x0; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_6631:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x1ff8000; valaddr_reg:x16; val_offset:216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 216, x17, x15, 216, x18)

inst_6632:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x00ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x180ffff; op2val:0x0; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 224, x17, x15, 224, x18)

inst_6633:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x180ffff; valaddr_reg:x16; val_offset:232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 232, x17, x15, 232, x18)

inst_6634:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7f0000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1ff0000; op2val:0x0; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_6635:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x1ff0000; valaddr_reg:x16; val_offset:248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 248, x17, x15, 248, x18)

inst_6636:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x01ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x181ffff; op2val:0x0; valaddr_reg:x16; val_offset:256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 256, x17, x15, 256, x18)

inst_6637:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x181ffff; valaddr_reg:x16; val_offset:264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 264, x17, x15, 264, x18)

inst_6638:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7e0000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1fe0000; op2val:0x0; valaddr_reg:x16; val_offset:272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 272, x17, x15, 272, x18)

inst_6639:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x1fe0000; valaddr_reg:x16; val_offset:280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 280, x17, x15, 280, x18)

inst_6640:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x03ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x183ffff; op2val:0x0; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_6641:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x183ffff; valaddr_reg:x16; val_offset:296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 296, x17, x15, 296, x18)

inst_6642:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7c0000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1fc0000; op2val:0x0; valaddr_reg:x16; val_offset:304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 304, x17, x15, 304, x18)

inst_6643:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x1fc0000; valaddr_reg:x16; val_offset:312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 312, x17, x15, 312, x18)

inst_6644:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x07ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x187ffff; op2val:0x0; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_6645:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x187ffff; valaddr_reg:x16; val_offset:328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 328, x17, x15, 328, x18)

inst_6646:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x780000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1f80000; op2val:0x0; valaddr_reg:x16; val_offset:336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 336, x17, x15, 336, x18)

inst_6647:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x1f80000; valaddr_reg:x16; val_offset:344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 344, x17, x15, 344, x18)

inst_6648:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x0fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x18fffff; op2val:0x0; valaddr_reg:x16; val_offset:352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 352, x17, x15, 352, x18)

inst_6649:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x18fffff; valaddr_reg:x16; val_offset:360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 360, x17, x15, 360, x18)

inst_6650:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x700000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1f00000; op2val:0x0; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_6651:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x1f00000; valaddr_reg:x16; val_offset:376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 376, x17, x15, 376, x18)

inst_6652:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x1fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x19fffff; op2val:0x0; valaddr_reg:x16; val_offset:384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 384, x17, x15, 384, x18)

inst_6653:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x19fffff; valaddr_reg:x16; val_offset:392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 392, x17, x15, 392, x18)

inst_6654:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x600000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1e00000; op2val:0x0; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_6655:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x1e00000; valaddr_reg:x16; val_offset:408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 408, x17, x15, 408, x18)

inst_6656:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x3fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1bfffff; op2val:0x0; valaddr_reg:x16; val_offset:416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 416, x17, x15, 416, x18)

inst_6657:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x1bfffff; valaddr_reg:x16; val_offset:424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 424, x17, x15, 424, x18)

inst_6658:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1c00000; op2val:0x0; valaddr_reg:x16; val_offset:432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 432, x17, x15, 432, x18)

inst_6659:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x1c00000; valaddr_reg:x16; val_offset:440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 440, x17, x15, 440, x18)

inst_6660:
// fs1 == 0 and fe1 == 0x03 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1ffffff; op2val:0x0; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_6661:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x1ffffff; valaddr_reg:x16; val_offset:456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 456, x17, x15, 456, x18)

inst_6662:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1000001; op2val:0x0; valaddr_reg:x16; val_offset:464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 464, x17, x15, 464, x18)

inst_6663:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x1000001; valaddr_reg:x16; val_offset:472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 472, x17, x15, 472, x18)

inst_6664:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1000000; op2val:0x0; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_6665:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x1000000; valaddr_reg:x16; val_offset:488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 488, x17, x15, 488, x18)

inst_6666:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7ffffe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17ffffe; op2val:0x0; valaddr_reg:x16; val_offset:496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 496, x17, x15, 496, x18)

inst_6667:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x17ffffe; valaddr_reg:x16; val_offset:504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 504, x17, x15, 504, x18)

inst_6668:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x000003 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1000003; op2val:0x0; valaddr_reg:x16; val_offset:512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 512, x17, x15, 512, x18)

inst_6669:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x1000003; valaddr_reg:x16; val_offset:520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 520, x17, x15, 520, x18)

inst_6670:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7ffffc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17ffffc; op2val:0x0; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_6671:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x17ffffc; valaddr_reg:x16; val_offset:536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 536, x17, x15, 536, x18)

inst_6672:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x000007 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1000007; op2val:0x0; valaddr_reg:x16; val_offset:544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 544, x17, x15, 544, x18)

inst_6673:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x1000007; valaddr_reg:x16; val_offset:552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 552, x17, x15, 552, x18)

inst_6674:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7ffff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17ffff8; op2val:0x0; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_6675:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x17ffff8; valaddr_reg:x16; val_offset:568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 568, x17, x15, 568, x18)

inst_6676:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x00000f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x100000f; op2val:0x0; valaddr_reg:x16; val_offset:576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 576, x17, x15, 576, x18)

inst_6677:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x100000f; valaddr_reg:x16; val_offset:584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 584, x17, x15, 584, x18)

inst_6678:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7ffff0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17ffff0; op2val:0x0; valaddr_reg:x16; val_offset:592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 592, x17, x15, 592, x18)

inst_6679:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x17ffff0; valaddr_reg:x16; val_offset:600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 600, x17, x15, 600, x18)

inst_6680:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x00001f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x100001f; op2val:0x0; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 608, x17, x15, 608, x18)

inst_6681:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x100001f; valaddr_reg:x16; val_offset:616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 616, x17, x15, 616, x18)

inst_6682:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7fffe0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17fffe0; op2val:0x0; valaddr_reg:x16; val_offset:624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 624, x17, x15, 624, x18)

inst_6683:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x17fffe0; valaddr_reg:x16; val_offset:632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 632, x17, x15, 632, x18)

inst_6684:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x00003f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x100003f; op2val:0x0; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_6685:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x100003f; valaddr_reg:x16; val_offset:648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 648, x17, x15, 648, x18)

inst_6686:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7fffc0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17fffc0; op2val:0x0; valaddr_reg:x16; val_offset:656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 656, x17, x15, 656, x18)

inst_6687:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x17fffc0; valaddr_reg:x16; val_offset:664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 664, x17, x15, 664, x18)

inst_6688:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x00007f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x100007f; op2val:0x0; valaddr_reg:x16; val_offset:672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 672, x17, x15, 672, x18)

inst_6689:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x100007f; valaddr_reg:x16; val_offset:680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 680, x17, x15, 680, x18)

inst_6690:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7fff80 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17fff80; op2val:0x0; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 688, x17, x15, 688, x18)

inst_6691:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x17fff80; valaddr_reg:x16; val_offset:696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 696, x17, x15, 696, x18)

inst_6692:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x0000ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x10000ff; op2val:0x0; valaddr_reg:x16; val_offset:704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 704, x17, x15, 704, x18)

inst_6693:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x10000ff; valaddr_reg:x16; val_offset:712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 712, x17, x15, 712, x18)

inst_6694:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7fff00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17fff00; op2val:0x0; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_6695:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x17fff00; valaddr_reg:x16; val_offset:728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 728, x17, x15, 728, x18)

inst_6696:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x0001ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x10001ff; op2val:0x0; valaddr_reg:x16; val_offset:736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 736, x17, x15, 736, x18)

inst_6697:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x10001ff; valaddr_reg:x16; val_offset:744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 744, x17, x15, 744, x18)

inst_6698:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7ffe00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17ffe00; op2val:0x0; valaddr_reg:x16; val_offset:752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 752, x17, x15, 752, x18)

inst_6699:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x17ffe00; valaddr_reg:x16; val_offset:760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 760, x17, x15, 760, x18)

inst_6700:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x0003ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x10003ff; op2val:0x0; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 768, x17, x15, 768, x18)

inst_6701:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x10003ff; valaddr_reg:x16; val_offset:776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 776, x17, x15, 776, x18)

inst_6702:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7ffc00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17ffc00; op2val:0x0; valaddr_reg:x16; val_offset:784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 784, x17, x15, 784, x18)

inst_6703:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x17ffc00; valaddr_reg:x16; val_offset:792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 792, x17, x15, 792, x18)

inst_6704:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x0007ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x10007ff; op2val:0x0; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_6705:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x10007ff; valaddr_reg:x16; val_offset:808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 808, x17, x15, 808, x18)

inst_6706:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7ff800 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17ff800; op2val:0x0; valaddr_reg:x16; val_offset:816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 816, x17, x15, 816, x18)

inst_6707:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x17ff800; valaddr_reg:x16; val_offset:824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 824, x17, x15, 824, x18)

inst_6708:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x000fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1000fff; op2val:0x0; valaddr_reg:x16; val_offset:832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 832, x17, x15, 832, x18)

inst_6709:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x1000fff; valaddr_reg:x16; val_offset:840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 840, x17, x15, 840, x18)

inst_6710:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7ff000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17ff000; op2val:0x0; valaddr_reg:x16; val_offset:848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 848, x17, x15, 848, x18)

inst_6711:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x17ff000; valaddr_reg:x16; val_offset:856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 856, x17, x15, 856, x18)

inst_6712:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x001fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1001fff; op2val:0x0; valaddr_reg:x16; val_offset:864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 864, x17, x15, 864, x18)

inst_6713:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x1001fff; valaddr_reg:x16; val_offset:872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 872, x17, x15, 872, x18)

inst_6714:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7fe000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17fe000; op2val:0x0; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 880, x17, x15, 880, x18)

inst_6715:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x17fe000; valaddr_reg:x16; val_offset:888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 888, x17, x15, 888, x18)

inst_6716:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x003fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1003fff; op2val:0x0; valaddr_reg:x16; val_offset:896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 896, x17, x15, 896, x18)

inst_6717:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x1003fff; valaddr_reg:x16; val_offset:904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 904, x17, x15, 904, x18)

inst_6718:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7fc000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17fc000; op2val:0x0; valaddr_reg:x16; val_offset:912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 912, x17, x15, 912, x18)

inst_6719:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x17fc000; valaddr_reg:x16; val_offset:920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 920, x17, x15, 920, x18)

inst_6720:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x007fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1007fff; op2val:0x0; valaddr_reg:x16; val_offset:928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 928, x17, x15, 928, x18)

inst_6721:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x1007fff; valaddr_reg:x16; val_offset:936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 936, x17, x15, 936, x18)

inst_6722:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7f8000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17f8000; op2val:0x0; valaddr_reg:x16; val_offset:944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 944, x17, x15, 944, x18)

inst_6723:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x17f8000; valaddr_reg:x16; val_offset:952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 952, x17, x15, 952, x18)

inst_6724:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x00ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x100ffff; op2val:0x0; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 960, x17, x15, 960, x18)

inst_6725:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x100ffff; valaddr_reg:x16; val_offset:968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 968, x17, x15, 968, x18)

inst_6726:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7f0000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17f0000; op2val:0x0; valaddr_reg:x16; val_offset:976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 976, x17, x15, 976, x18)

inst_6727:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x17f0000; valaddr_reg:x16; val_offset:984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 984, x17, x15, 984, x18)

inst_6728:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x01ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x101ffff; op2val:0x0; valaddr_reg:x16; val_offset:992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 992, x17, x15, 992, x18)

inst_6729:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x101ffff; valaddr_reg:x16; val_offset:1000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1000, x17, x15, 1000, x18)

inst_6730:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7e0000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17e0000; op2val:0x0; valaddr_reg:x16; val_offset:1008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1008, x17, x15, 1008, x18)

inst_6731:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x17e0000; valaddr_reg:x16; val_offset:1016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1016, x17, x15, 1016, x18)

inst_6732:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x03ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x103ffff; op2val:0x0; valaddr_reg:x16; val_offset:1024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1024, x17, x15, 1024, x18)

inst_6733:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x103ffff; valaddr_reg:x16; val_offset:1032; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1032, x17, x15, 1032, x18)

inst_6734:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7c0000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17c0000; op2val:0x0; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1040, x17, x15, 1040, x18)

inst_6735:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x17c0000; valaddr_reg:x16; val_offset:1048; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1048, x17, x15, 1048, x18)

inst_6736:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x07ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x107ffff; op2val:0x0; valaddr_reg:x16; val_offset:1056; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1056, x17, x15, 1056, x18)

inst_6737:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x107ffff; valaddr_reg:x16; val_offset:1064; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1064, x17, x15, 1064, x18)

inst_6738:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x780000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1780000; op2val:0x0; valaddr_reg:x16; val_offset:1072; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1072, x17, x15, 1072, x18)

inst_6739:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x1780000; valaddr_reg:x16; val_offset:1080; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1080, x17, x15, 1080, x18)

inst_6740:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x0fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x10fffff; op2val:0x0; valaddr_reg:x16; val_offset:1088; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1088, x17, x15, 1088, x18)

inst_6741:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x10fffff; valaddr_reg:x16; val_offset:1096; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1096, x17, x15, 1096, x18)

inst_6742:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x700000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1700000; op2val:0x0; valaddr_reg:x16; val_offset:1104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1104, x17, x15, 1104, x18)

inst_6743:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x1700000; valaddr_reg:x16; val_offset:1112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1112, x17, x15, 1112, x18)

inst_6744:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x1fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x11fffff; op2val:0x0; valaddr_reg:x16; val_offset:1120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1120, x17, x15, 1120, x18)

inst_6745:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x11fffff; valaddr_reg:x16; val_offset:1128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1128, x17, x15, 1128, x18)

inst_6746:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x600000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1600000; op2val:0x0; valaddr_reg:x16; val_offset:1136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1136, x17, x15, 1136, x18)

inst_6747:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x1600000; valaddr_reg:x16; val_offset:1144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1144, x17, x15, 1144, x18)

inst_6748:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x3fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x13fffff; op2val:0x0; valaddr_reg:x16; val_offset:1152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1152, x17, x15, 1152, x18)

inst_6749:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x13fffff; valaddr_reg:x16; val_offset:1160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1160, x17, x15, 1160, x18)

inst_6750:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1400000; op2val:0x0; valaddr_reg:x16; val_offset:1168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1168, x17, x15, 1168, x18)

inst_6751:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x1400000; valaddr_reg:x16; val_offset:1176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1176, x17, x15, 1176, x18)

inst_6752:
// fs1 == 0 and fe1 == 0x02 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x17fffff; op2val:0x0; valaddr_reg:x16; val_offset:1184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1184, x17, x15, 1184, x18)

inst_6753:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x17fffff; valaddr_reg:x16; val_offset:1192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1192, x17, x15, 1192, x18)

inst_6754:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800001; op2val:0x0; valaddr_reg:x16; val_offset:1200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1200, x17, x15, 1200, x18)

inst_6755:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x800001; valaddr_reg:x16; val_offset:1208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1208, x17, x15, 1208, x18)

inst_6756:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7ffffe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfffffe; op2val:0x0; valaddr_reg:x16; val_offset:1216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1216, x17, x15, 1216, x18)

inst_6757:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0xfffffe; valaddr_reg:x16; val_offset:1224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1224, x17, x15, 1224, x18)

inst_6758:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000003 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800003; op2val:0x0; valaddr_reg:x16; val_offset:1232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1232, x17, x15, 1232, x18)

inst_6759:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x800003; valaddr_reg:x16; val_offset:1240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1240, x17, x15, 1240, x18)

inst_6760:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7ffffc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfffffc; op2val:0x0; valaddr_reg:x16; val_offset:1248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1248, x17, x15, 1248, x18)

inst_6761:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0xfffffc; valaddr_reg:x16; val_offset:1256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1256, x17, x15, 1256, x18)

inst_6762:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000007 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800007; op2val:0x0; valaddr_reg:x16; val_offset:1264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1264, x17, x15, 1264, x18)

inst_6763:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x800007; valaddr_reg:x16; val_offset:1272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1272, x17, x15, 1272, x18)

inst_6764:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7ffff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfffff8; op2val:0x0; valaddr_reg:x16; val_offset:1280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1280, x17, x15, 1280, x18)

inst_6765:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0xfffff8; valaddr_reg:x16; val_offset:1288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1288, x17, x15, 1288, x18)

inst_6766:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00000f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000f; op2val:0x0; valaddr_reg:x16; val_offset:1296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1296, x17, x15, 1296, x18)

inst_6767:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x80000f; valaddr_reg:x16; val_offset:1304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1304, x17, x15, 1304, x18)

inst_6768:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7ffff0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfffff0; op2val:0x0; valaddr_reg:x16; val_offset:1312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1312, x17, x15, 1312, x18)

inst_6769:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0xfffff0; valaddr_reg:x16; val_offset:1320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1320, x17, x15, 1320, x18)

inst_6770:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00001f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80001f; op2val:0x0; valaddr_reg:x16; val_offset:1328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1328, x17, x15, 1328, x18)

inst_6771:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x80001f; valaddr_reg:x16; val_offset:1336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1336, x17, x15, 1336, x18)

inst_6772:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7fffe0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xffffe0; op2val:0x0; valaddr_reg:x16; val_offset:1344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1344, x17, x15, 1344, x18)

inst_6773:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0xffffe0; valaddr_reg:x16; val_offset:1352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1352, x17, x15, 1352, x18)

inst_6774:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00003f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80003f; op2val:0x0; valaddr_reg:x16; val_offset:1360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1360, x17, x15, 1360, x18)

inst_6775:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x80003f; valaddr_reg:x16; val_offset:1368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1368, x17, x15, 1368, x18)

inst_6776:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7fffc0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xffffc0; op2val:0x0; valaddr_reg:x16; val_offset:1376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1376, x17, x15, 1376, x18)

inst_6777:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0xffffc0; valaddr_reg:x16; val_offset:1384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1384, x17, x15, 1384, x18)

inst_6778:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00007f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80007f; op2val:0x0; valaddr_reg:x16; val_offset:1392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1392, x17, x15, 1392, x18)

inst_6779:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x80007f; valaddr_reg:x16; val_offset:1400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1400, x17, x15, 1400, x18)

inst_6780:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7fff80 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xffff80; op2val:0x0; valaddr_reg:x16; val_offset:1408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1408, x17, x15, 1408, x18)

inst_6781:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0xffff80; valaddr_reg:x16; val_offset:1416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1416, x17, x15, 1416, x18)

inst_6782:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x0000ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8000ff; op2val:0x0; valaddr_reg:x16; val_offset:1424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1424, x17, x15, 1424, x18)

inst_6783:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x8000ff; valaddr_reg:x16; val_offset:1432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1432, x17, x15, 1432, x18)

inst_6784:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7fff00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xffff00; op2val:0x0; valaddr_reg:x16; val_offset:1440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1440, x17, x15, 1440, x18)

inst_6785:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0xffff00; valaddr_reg:x16; val_offset:1448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1448, x17, x15, 1448, x18)

inst_6786:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x0001ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8001ff; op2val:0x0; valaddr_reg:x16; val_offset:1456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1456, x17, x15, 1456, x18)

inst_6787:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x8001ff; valaddr_reg:x16; val_offset:1464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1464, x17, x15, 1464, x18)

inst_6788:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7ffe00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfffe00; op2val:0x0; valaddr_reg:x16; val_offset:1472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1472, x17, x15, 1472, x18)

inst_6789:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0xfffe00; valaddr_reg:x16; val_offset:1480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1480, x17, x15, 1480, x18)

inst_6790:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x0003ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8003ff; op2val:0x0; valaddr_reg:x16; val_offset:1488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1488, x17, x15, 1488, x18)

inst_6791:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x8003ff; valaddr_reg:x16; val_offset:1496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1496, x17, x15, 1496, x18)

inst_6792:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7ffc00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfffc00; op2val:0x0; valaddr_reg:x16; val_offset:1504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1504, x17, x15, 1504, x18)

inst_6793:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0xfffc00; valaddr_reg:x16; val_offset:1512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1512, x17, x15, 1512, x18)

inst_6794:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x0007ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8007ff; op2val:0x0; valaddr_reg:x16; val_offset:1520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1520, x17, x15, 1520, x18)

inst_6795:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x8007ff; valaddr_reg:x16; val_offset:1528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1528, x17, x15, 1528, x18)

inst_6796:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7ff800 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfff800; op2val:0x0; valaddr_reg:x16; val_offset:1536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1536, x17, x15, 1536, x18)

inst_6797:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0xfff800; valaddr_reg:x16; val_offset:1544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1544, x17, x15, 1544, x18)

inst_6798:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800fff; op2val:0x0; valaddr_reg:x16; val_offset:1552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1552, x17, x15, 1552, x18)

inst_6799:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x800fff; valaddr_reg:x16; val_offset:1560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1560, x17, x15, 1560, x18)

inst_6800:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7ff000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfff000; op2val:0x0; valaddr_reg:x16; val_offset:1568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1568, x17, x15, 1568, x18)

inst_6801:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0xfff000; valaddr_reg:x16; val_offset:1576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1576, x17, x15, 1576, x18)

inst_6802:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x001fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x801fff; op2val:0x0; valaddr_reg:x16; val_offset:1584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1584, x17, x15, 1584, x18)

inst_6803:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x801fff; valaddr_reg:x16; val_offset:1592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1592, x17, x15, 1592, x18)

inst_6804:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7fe000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xffe000; op2val:0x0; valaddr_reg:x16; val_offset:1600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1600, x17, x15, 1600, x18)

inst_6805:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0xffe000; valaddr_reg:x16; val_offset:1608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1608, x17, x15, 1608, x18)

inst_6806:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x003fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x803fff; op2val:0x0; valaddr_reg:x16; val_offset:1616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1616, x17, x15, 1616, x18)

inst_6807:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x803fff; valaddr_reg:x16; val_offset:1624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1624, x17, x15, 1624, x18)

inst_6808:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7fc000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xffc000; op2val:0x0; valaddr_reg:x16; val_offset:1632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1632, x17, x15, 1632, x18)

inst_6809:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0xffc000; valaddr_reg:x16; val_offset:1640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1640, x17, x15, 1640, x18)

inst_6810:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x007fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x807fff; op2val:0x0; valaddr_reg:x16; val_offset:1648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1648, x17, x15, 1648, x18)

inst_6811:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x807fff; valaddr_reg:x16; val_offset:1656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1656, x17, x15, 1656, x18)

inst_6812:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7f8000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff8000; op2val:0x0; valaddr_reg:x16; val_offset:1664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1664, x17, x15, 1664, x18)

inst_6813:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0xff8000; valaddr_reg:x16; val_offset:1672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1672, x17, x15, 1672, x18)

inst_6814:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80ffff; op2val:0x0; valaddr_reg:x16; val_offset:1680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1680, x17, x15, 1680, x18)

inst_6815:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x80ffff; valaddr_reg:x16; val_offset:1688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1688, x17, x15, 1688, x18)

inst_6816:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7f0000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff0000; op2val:0x0; valaddr_reg:x16; val_offset:1696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1696, x17, x15, 1696, x18)

inst_6817:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0xff0000; valaddr_reg:x16; val_offset:1704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1704, x17, x15, 1704, x18)

inst_6818:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x01ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x81ffff; op2val:0x0; valaddr_reg:x16; val_offset:1712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1712, x17, x15, 1712, x18)

inst_6819:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x81ffff; valaddr_reg:x16; val_offset:1720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1720, x17, x15, 1720, x18)

inst_6820:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7e0000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe0000; op2val:0x0; valaddr_reg:x16; val_offset:1728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1728, x17, x15, 1728, x18)

inst_6821:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0xfe0000; valaddr_reg:x16; val_offset:1736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1736, x17, x15, 1736, x18)

inst_6822:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x03ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x83ffff; op2val:0x0; valaddr_reg:x16; val_offset:1744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1744, x17, x15, 1744, x18)

inst_6823:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x83ffff; valaddr_reg:x16; val_offset:1752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1752, x17, x15, 1752, x18)

inst_6824:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7c0000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfc0000; op2val:0x0; valaddr_reg:x16; val_offset:1760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1760, x17, x15, 1760, x18)

inst_6825:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0xfc0000; valaddr_reg:x16; val_offset:1768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1768, x17, x15, 1768, x18)

inst_6826:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x07ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x87ffff; op2val:0x0; valaddr_reg:x16; val_offset:1776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1776, x17, x15, 1776, x18)

inst_6827:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x87ffff; valaddr_reg:x16; val_offset:1784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1784, x17, x15, 1784, x18)

inst_6828:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x780000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf80000; op2val:0x0; valaddr_reg:x16; val_offset:1792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1792, x17, x15, 1792, x18)

inst_6829:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0xf80000; valaddr_reg:x16; val_offset:1800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1800, x17, x15, 1800, x18)

inst_6830:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x0fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8fffff; op2val:0x0; valaddr_reg:x16; val_offset:1808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1808, x17, x15, 1808, x18)

inst_6831:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x8fffff; valaddr_reg:x16; val_offset:1816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1816, x17, x15, 1816, x18)

inst_6832:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x700000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf00000; op2val:0x0; valaddr_reg:x16; val_offset:1824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1824, x17, x15, 1824, x18)

inst_6833:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0xf00000; valaddr_reg:x16; val_offset:1832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1832, x17, x15, 1832, x18)

inst_6834:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x1fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x9fffff; op2val:0x0; valaddr_reg:x16; val_offset:1840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1840, x17, x15, 1840, x18)

inst_6835:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x9fffff; valaddr_reg:x16; val_offset:1848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1848, x17, x15, 1848, x18)

inst_6836:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x600000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xe00000; op2val:0x0; valaddr_reg:x16; val_offset:1856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1856, x17, x15, 1856, x18)

inst_6837:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0xe00000; valaddr_reg:x16; val_offset:1864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1864, x17, x15, 1864, x18)

inst_6838:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x3fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xbfffff; op2val:0x0; valaddr_reg:x16; val_offset:1872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1872, x17, x15, 1872, x18)

inst_6839:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0xbfffff; valaddr_reg:x16; val_offset:1880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1880, x17, x15, 1880, x18)

inst_6840:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc00000; op2val:0x0; valaddr_reg:x16; val_offset:1888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1888, x17, x15, 1888, x18)

inst_6841:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0xc00000; valaddr_reg:x16; val_offset:1896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1896, x17, x15, 1896, x18)

inst_6842:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xffffff; op2val:0x0; valaddr_reg:x16; val_offset:1904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1904, x17, x15, 1904, x18)

inst_6843:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0xffffff; valaddr_reg:x16; val_offset:1912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1912, x17, x15, 1912, x18)

inst_6844:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf; op2val:0x0; valaddr_reg:x16; val_offset:1920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1920, x17, x15, 1920, x18)

inst_6845:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0xf; valaddr_reg:x16; val_offset:1928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1928, x17, x15, 1928, x18)

inst_6846:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7ffff0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ffff0; op2val:0x0; valaddr_reg:x16; val_offset:1936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1936, x17, x15, 1936, x18)

inst_6847:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x7ffff0; valaddr_reg:x16; val_offset:1944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1944, x17, x15, 1944, x18)

inst_6848:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1f; op2val:0x0; valaddr_reg:x16; val_offset:1952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1952, x17, x15, 1952, x18)

inst_6849:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x1f; valaddr_reg:x16; val_offset:1960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1960, x17, x15, 1960, x18)

inst_6850:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffe0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffe0; op2val:0x0; valaddr_reg:x16; val_offset:1968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1968, x17, x15, 1968, x18)

inst_6851:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x7fffe0; valaddr_reg:x16; val_offset:1976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1976, x17, x15, 1976, x18)

inst_6852:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f; op2val:0x0; valaddr_reg:x16; val_offset:1984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1984, x17, x15, 1984, x18)

inst_6853:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x3f; valaddr_reg:x16; val_offset:1992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1992, x17, x15, 1992, x18)

inst_6854:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffc0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fffc0; op2val:0x0; valaddr_reg:x16; val_offset:2000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2000, x17, x15, 2000, x18)

inst_6855:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x7fffc0; valaddr_reg:x16; val_offset:2008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2008, x17, x15, 2008, x18)

inst_6856:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00007f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f; op2val:0x0; valaddr_reg:x16; val_offset:2016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2016, x17, x15, 2016, x18)

inst_6857:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x7f; valaddr_reg:x16; val_offset:2024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_28)

inst_6858:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fff80 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fff80; op2val:0x0; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_6859:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x7fff80; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 8, x17, x15, 8, x18)

inst_6860:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0000ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff; op2val:0x0; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 16, x17, x15, 16, x18)

inst_6861:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0xff; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 24, x17, x15, 24, x18)

inst_6862:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fff00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fff00; op2val:0x0; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 32, x17, x15, 32, x18)

inst_6863:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x7fff00; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 40, x17, x15, 40, x18)

inst_6864:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0001ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1ff; op2val:0x0; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_6865:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x1ff; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 56, x17, x15, 56, x18)

inst_6866:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7ffe00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ffe00; op2val:0x0; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 64, x17, x15, 64, x18)

inst_6867:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x7ffe00; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 72, x17, x15, 72, x18)

inst_6868:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0003ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ff; op2val:0x0; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_6869:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x3ff; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 88, x17, x15, 88, x18)

inst_6870:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7ffc00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ffc00; op2val:0x0; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 96, x17, x15, 96, x18)

inst_6871:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x7ffc00; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 104, x17, x15, 104, x18)

inst_6872:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0007ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ff; op2val:0x0; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 112, x17, x15, 112, x18)

inst_6873:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x7ff; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 120, x17, x15, 120, x18)

inst_6874:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7ff800 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ff800; op2val:0x0; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_6875:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x7ff800; valaddr_reg:x16; val_offset:136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 136, x17, x15, 136, x18)

inst_6876:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfff; op2val:0x0; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 144, x17, x15, 144, x18)

inst_6877:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0xfff; valaddr_reg:x16; val_offset:152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 152, x17, x15, 152, x18)

inst_6878:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7ff000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ff000; op2val:0x0; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_6879:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x7ff000; valaddr_reg:x16; val_offset:168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 168, x17, x15, 168, x18)

inst_6880:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x001fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1fff; op2val:0x0; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 176, x17, x15, 176, x18)

inst_6881:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x1fff; valaddr_reg:x16; val_offset:184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 184, x17, x15, 184, x18)

inst_6882:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fe000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fe000; op2val:0x0; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 192, x17, x15, 192, x18)

inst_6883:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x7fe000; valaddr_reg:x16; val_offset:200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 200, x17, x15, 200, x18)

inst_6884:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x003fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3fff; op2val:0x0; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_6885:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x3fff; valaddr_reg:x16; val_offset:216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 216, x17, x15, 216, x18)

inst_6886:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fc000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fc000; op2val:0x0; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 224, x17, x15, 224, x18)

inst_6887:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x7fc000; valaddr_reg:x16; val_offset:232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 232, x17, x15, 232, x18)

inst_6888:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x007fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7fff; op2val:0x0; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_6889:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x7fff; valaddr_reg:x16; val_offset:248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 248, x17, x15, 248, x18)

inst_6890:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7f8000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f8000; op2val:0x0; valaddr_reg:x16; val_offset:256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 256, x17, x15, 256, x18)

inst_6891:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x7f8000; valaddr_reg:x16; val_offset:264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 264, x17, x15, 264, x18)

inst_6892:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xffff; op2val:0x0; valaddr_reg:x16; val_offset:272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 272, x17, x15, 272, x18)

inst_6893:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0xffff; valaddr_reg:x16; val_offset:280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 280, x17, x15, 280, x18)

inst_6894:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7f0000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0000; op2val:0x0; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_6895:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x7f0000; valaddr_reg:x16; val_offset:296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 296, x17, x15, 296, x18)

inst_6896:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x01ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1ffff; op2val:0x0; valaddr_reg:x16; val_offset:304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 304, x17, x15, 304, x18)

inst_6897:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x1ffff; valaddr_reg:x16; val_offset:312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 312, x17, x15, 312, x18)

inst_6898:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7e0000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e0000; op2val:0x0; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_6899:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x7e0000; valaddr_reg:x16; val_offset:328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 328, x17, x15, 328, x18)

inst_6900:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x03ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ffff; op2val:0x0; valaddr_reg:x16; val_offset:336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 336, x17, x15, 336, x18)

inst_6901:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x3ffff; valaddr_reg:x16; val_offset:344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 344, x17, x15, 344, x18)

inst_6902:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7c0000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7c0000; op2val:0x0; valaddr_reg:x16; val_offset:352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 352, x17, x15, 352, x18)

inst_6903:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x7c0000; valaddr_reg:x16; val_offset:360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 360, x17, x15, 360, x18)

inst_6904:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x07ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ffff; op2val:0x0; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_6905:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x7ffff; valaddr_reg:x16; val_offset:376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 376, x17, x15, 376, x18)

inst_6906:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x780000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x780000; op2val:0x0; valaddr_reg:x16; val_offset:384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 384, x17, x15, 384, x18)

inst_6907:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x780000; valaddr_reg:x16; val_offset:392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 392, x17, x15, 392, x18)

inst_6908:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfffff; op2val:0x0; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_6909:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0xfffff; valaddr_reg:x16; val_offset:408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 408, x17, x15, 408, x18)

inst_6910:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x700000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x700000; op2val:0x0; valaddr_reg:x16; val_offset:416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 416, x17, x15, 416, x18)

inst_6911:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x700000; valaddr_reg:x16; val_offset:424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 424, x17, x15, 424, x18)

inst_6912:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x1fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1fffff; op2val:0x0; valaddr_reg:x16; val_offset:432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 432, x17, x15, 432, x18)

inst_6913:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x1fffff; valaddr_reg:x16; val_offset:440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 440, x17, x15, 440, x18)

inst_6914:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x600000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x600000; op2val:0x0; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_6915:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x600000; valaddr_reg:x16; val_offset:456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 456, x17, x15, 456, x18)

inst_6916:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x3fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3fffff; op2val:0x0; valaddr_reg:x16; val_offset:464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 464, x17, x15, 464, x18)

inst_6917:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x3fffff; valaddr_reg:x16; val_offset:472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 472, x17, x15, 472, x18)

inst_6918:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x400000; op2val:0x0; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_6919:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x400000; valaddr_reg:x16; val_offset:488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 488, x17, x15, 488, x18)

inst_6920:
// fs1 == 0 and fe1 == 0xdc and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6e000001; op2val:0x0; valaddr_reg:x16; val_offset:496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 496, x17, x15, 496, x18)

inst_6921:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xdc and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x6e000001; valaddr_reg:x16; val_offset:504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 504, x17, x15, 504, x18)

inst_6922:
// fs1 == 0 and fe1 == 0xdc and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6e000000; op2val:0x0; valaddr_reg:x16; val_offset:512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 512, x17, x15, 512, x18)

inst_6923:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xdc and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x6e000000; valaddr_reg:x16; val_offset:520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 520, x17, x15, 520, x18)

inst_6924:
// fs1 == 0 and fe1 == 0xdc and fm1 == 0x7ffffe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6e7ffffe; op2val:0x0; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_6925:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xdc and fm2 == 0x7ffffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x6e7ffffe; valaddr_reg:x16; val_offset:536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 536, x17, x15, 536, x18)

inst_6926:
// fs1 == 0 and fe1 == 0xdc and fm1 == 0x000003 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6e000003; op2val:0x0; valaddr_reg:x16; val_offset:544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 544, x17, x15, 544, x18)

inst_6927:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xdc and fm2 == 0x000003 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x6e000003; valaddr_reg:x16; val_offset:552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 552, x17, x15, 552, x18)

inst_6928:
// fs1 == 0 and fe1 == 0xdc and fm1 == 0x7ffffc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6e7ffffc; op2val:0x0; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_6929:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xdc and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x6e7ffffc; valaddr_reg:x16; val_offset:568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 568, x17, x15, 568, x18)

inst_6930:
// fs1 == 0 and fe1 == 0xdc and fm1 == 0x000007 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6e000007; op2val:0x0; valaddr_reg:x16; val_offset:576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 576, x17, x15, 576, x18)

inst_6931:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xdc and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x6e000007; valaddr_reg:x16; val_offset:584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 584, x17, x15, 584, x18)

inst_6932:
// fs1 == 0 and fe1 == 0xdc and fm1 == 0x7ffff8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6e7ffff8; op2val:0x0; valaddr_reg:x16; val_offset:592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 592, x17, x15, 592, x18)

inst_6933:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xdc and fm2 == 0x7ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x6e7ffff8; valaddr_reg:x16; val_offset:600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 600, x17, x15, 600, x18)

inst_6934:
// fs1 == 0 and fe1 == 0xdc and fm1 == 0x00000f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6e00000f; op2val:0x0; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 608, x17, x15, 608, x18)

inst_6935:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xdc and fm2 == 0x00000f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x6e00000f; valaddr_reg:x16; val_offset:616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 616, x17, x15, 616, x18)

inst_6936:
// fs1 == 0 and fe1 == 0xdc and fm1 == 0x7ffff0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6e7ffff0; op2val:0x0; valaddr_reg:x16; val_offset:624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 624, x17, x15, 624, x18)

inst_6937:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xdc and fm2 == 0x7ffff0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x6e7ffff0; valaddr_reg:x16; val_offset:632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 632, x17, x15, 632, x18)

inst_6938:
// fs1 == 0 and fe1 == 0xdc and fm1 == 0x00001f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6e00001f; op2val:0x0; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_6939:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xdc and fm2 == 0x00001f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x6e00001f; valaddr_reg:x16; val_offset:648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 648, x17, x15, 648, x18)

inst_6940:
// fs1 == 0 and fe1 == 0xdc and fm1 == 0x7fffe0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6e7fffe0; op2val:0x0; valaddr_reg:x16; val_offset:656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 656, x17, x15, 656, x18)

inst_6941:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xdc and fm2 == 0x7fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x6e7fffe0; valaddr_reg:x16; val_offset:664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 664, x17, x15, 664, x18)

inst_6942:
// fs1 == 0 and fe1 == 0xdc and fm1 == 0x00003f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6e00003f; op2val:0x0; valaddr_reg:x16; val_offset:672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 672, x17, x15, 672, x18)

inst_6943:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xdc and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x6e00003f; valaddr_reg:x16; val_offset:680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 680, x17, x15, 680, x18)

inst_6944:
// fs1 == 0 and fe1 == 0xdc and fm1 == 0x7fffc0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6e7fffc0; op2val:0x0; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 688, x17, x15, 688, x18)

inst_6945:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xdc and fm2 == 0x7fffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x6e7fffc0; valaddr_reg:x16; val_offset:696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 696, x17, x15, 696, x18)

inst_6946:
// fs1 == 0 and fe1 == 0xdc and fm1 == 0x00007f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6e00007f; op2val:0x0; valaddr_reg:x16; val_offset:704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 704, x17, x15, 704, x18)

inst_6947:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xdc and fm2 == 0x00007f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x6e00007f; valaddr_reg:x16; val_offset:712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 712, x17, x15, 712, x18)

inst_6948:
// fs1 == 0 and fe1 == 0xdc and fm1 == 0x7fff80 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6e7fff80; op2val:0x0; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_6949:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xdc and fm2 == 0x7fff80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x6e7fff80; valaddr_reg:x16; val_offset:728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 728, x17, x15, 728, x18)

inst_6950:
// fs1 == 0 and fe1 == 0xdc and fm1 == 0x0000ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6e0000ff; op2val:0x0; valaddr_reg:x16; val_offset:736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 736, x17, x15, 736, x18)

inst_6951:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xdc and fm2 == 0x0000ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x6e0000ff; valaddr_reg:x16; val_offset:744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 744, x17, x15, 744, x18)

inst_6952:
// fs1 == 0 and fe1 == 0xdc and fm1 == 0x7fff00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6e7fff00; op2val:0x0; valaddr_reg:x16; val_offset:752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 752, x17, x15, 752, x18)

inst_6953:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xdc and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x6e7fff00; valaddr_reg:x16; val_offset:760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 760, x17, x15, 760, x18)

inst_6954:
// fs1 == 0 and fe1 == 0xdc and fm1 == 0x0001ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6e0001ff; op2val:0x0; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 768, x17, x15, 768, x18)

inst_6955:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xdc and fm2 == 0x0001ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x6e0001ff; valaddr_reg:x16; val_offset:776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 776, x17, x15, 776, x18)

inst_6956:
// fs1 == 0 and fe1 == 0xdc and fm1 == 0x7ffe00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6e7ffe00; op2val:0x0; valaddr_reg:x16; val_offset:784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 784, x17, x15, 784, x18)

inst_6957:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xdc and fm2 == 0x7ffe00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x6e7ffe00; valaddr_reg:x16; val_offset:792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 792, x17, x15, 792, x18)

inst_6958:
// fs1 == 0 and fe1 == 0xdc and fm1 == 0x0003ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6e0003ff; op2val:0x0; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_6959:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xdc and fm2 == 0x0003ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x6e0003ff; valaddr_reg:x16; val_offset:808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 808, x17, x15, 808, x18)

inst_6960:
// fs1 == 0 and fe1 == 0xdc and fm1 == 0x7ffc00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6e7ffc00; op2val:0x0; valaddr_reg:x16; val_offset:816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 816, x17, x15, 816, x18)

inst_6961:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xdc and fm2 == 0x7ffc00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x6e7ffc00; valaddr_reg:x16; val_offset:824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 824, x17, x15, 824, x18)

inst_6962:
// fs1 == 0 and fe1 == 0xdc and fm1 == 0x0007ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6e0007ff; op2val:0x0; valaddr_reg:x16; val_offset:832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 832, x17, x15, 832, x18)

inst_6963:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xdc and fm2 == 0x0007ff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x6e0007ff; valaddr_reg:x16; val_offset:840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 840, x17, x15, 840, x18)

inst_6964:
// fs1 == 0 and fe1 == 0xdc and fm1 == 0x7ff800 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6e7ff800; op2val:0x0; valaddr_reg:x16; val_offset:848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 848, x17, x15, 848, x18)

inst_6965:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xdc and fm2 == 0x7ff800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x6e7ff800; valaddr_reg:x16; val_offset:856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 856, x17, x15, 856, x18)

inst_6966:
// fs1 == 0 and fe1 == 0xdc and fm1 == 0x000fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6e000fff; op2val:0x0; valaddr_reg:x16; val_offset:864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 864, x17, x15, 864, x18)

inst_6967:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xdc and fm2 == 0x000fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x6e000fff; valaddr_reg:x16; val_offset:872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 872, x17, x15, 872, x18)

inst_6968:
// fs1 == 0 and fe1 == 0xdc and fm1 == 0x7ff000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6e7ff000; op2val:0x0; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 880, x17, x15, 880, x18)

inst_6969:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xdc and fm2 == 0x7ff000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x6e7ff000; valaddr_reg:x16; val_offset:888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 888, x17, x15, 888, x18)

inst_6970:
// fs1 == 0 and fe1 == 0xdc and fm1 == 0x001fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6e001fff; op2val:0x0; valaddr_reg:x16; val_offset:896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 896, x17, x15, 896, x18)

inst_6971:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xdc and fm2 == 0x001fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x6e001fff; valaddr_reg:x16; val_offset:904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 904, x17, x15, 904, x18)

inst_6972:
// fs1 == 0 and fe1 == 0xdc and fm1 == 0x7fe000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6e7fe000; op2val:0x0; valaddr_reg:x16; val_offset:912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 912, x17, x15, 912, x18)

inst_6973:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xdc and fm2 == 0x7fe000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x6e7fe000; valaddr_reg:x16; val_offset:920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 920, x17, x15, 920, x18)

inst_6974:
// fs1 == 0 and fe1 == 0xdc and fm1 == 0x003fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6e003fff; op2val:0x0; valaddr_reg:x16; val_offset:928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 928, x17, x15, 928, x18)

inst_6975:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xdc and fm2 == 0x003fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x6e003fff; valaddr_reg:x16; val_offset:936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 936, x17, x15, 936, x18)

inst_6976:
// fs1 == 0 and fe1 == 0xdc and fm1 == 0x7fc000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6e7fc000; op2val:0x0; valaddr_reg:x16; val_offset:944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 944, x17, x15, 944, x18)

inst_6977:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xdc and fm2 == 0x7fc000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x6e7fc000; valaddr_reg:x16; val_offset:952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 952, x17, x15, 952, x18)

inst_6978:
// fs1 == 0 and fe1 == 0xdc and fm1 == 0x007fff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6e007fff; op2val:0x0; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 960, x17, x15, 960, x18)

inst_6979:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xdc and fm2 == 0x007fff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x6e007fff; valaddr_reg:x16; val_offset:968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 968, x17, x15, 968, x18)

inst_6980:
// fs1 == 0 and fe1 == 0xdc and fm1 == 0x7f8000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6e7f8000; op2val:0x0; valaddr_reg:x16; val_offset:976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 976, x17, x15, 976, x18)

inst_6981:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xdc and fm2 == 0x7f8000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x6e7f8000; valaddr_reg:x16; val_offset:984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 984, x17, x15, 984, x18)

inst_6982:
// fs1 == 0 and fe1 == 0xdc and fm1 == 0x00ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6e00ffff; op2val:0x0; valaddr_reg:x16; val_offset:992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 992, x17, x15, 992, x18)

inst_6983:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xdc and fm2 == 0x00ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x6e00ffff; valaddr_reg:x16; val_offset:1000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1000, x17, x15, 1000, x18)

inst_6984:
// fs1 == 0 and fe1 == 0xdc and fm1 == 0x7f0000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6e7f0000; op2val:0x0; valaddr_reg:x16; val_offset:1008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1008, x17, x15, 1008, x18)

inst_6985:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xdc and fm2 == 0x7f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x6e7f0000; valaddr_reg:x16; val_offset:1016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1016, x17, x15, 1016, x18)

inst_6986:
// fs1 == 0 and fe1 == 0xdc and fm1 == 0x01ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6e01ffff; op2val:0x0; valaddr_reg:x16; val_offset:1024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1024, x17, x15, 1024, x18)

inst_6987:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xdc and fm2 == 0x01ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x6e01ffff; valaddr_reg:x16; val_offset:1032; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1032, x17, x15, 1032, x18)

inst_6988:
// fs1 == 0 and fe1 == 0xdc and fm1 == 0x7e0000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6e7e0000; op2val:0x0; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1040, x17, x15, 1040, x18)

inst_6989:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xdc and fm2 == 0x7e0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x6e7e0000; valaddr_reg:x16; val_offset:1048; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1048, x17, x15, 1048, x18)

inst_6990:
// fs1 == 0 and fe1 == 0xdc and fm1 == 0x03ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6e03ffff; op2val:0x0; valaddr_reg:x16; val_offset:1056; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1056, x17, x15, 1056, x18)

inst_6991:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xdc and fm2 == 0x03ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x6e03ffff; valaddr_reg:x16; val_offset:1064; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1064, x17, x15, 1064, x18)

inst_6992:
// fs1 == 0 and fe1 == 0xdc and fm1 == 0x7c0000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6e7c0000; op2val:0x0; valaddr_reg:x16; val_offset:1072; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1072, x17, x15, 1072, x18)

inst_6993:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xdc and fm2 == 0x7c0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x6e7c0000; valaddr_reg:x16; val_offset:1080; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1080, x17, x15, 1080, x18)

inst_6994:
// fs1 == 0 and fe1 == 0xdc and fm1 == 0x07ffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6e07ffff; op2val:0x0; valaddr_reg:x16; val_offset:1088; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1088, x17, x15, 1088, x18)

inst_6995:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xdc and fm2 == 0x07ffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x6e07ffff; valaddr_reg:x16; val_offset:1096; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1096, x17, x15, 1096, x18)

inst_6996:
// fs1 == 0 and fe1 == 0xdc and fm1 == 0x780000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6e780000; op2val:0x0; valaddr_reg:x16; val_offset:1104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1104, x17, x15, 1104, x18)

inst_6997:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xdc and fm2 == 0x780000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x6e780000; valaddr_reg:x16; val_offset:1112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1112, x17, x15, 1112, x18)

inst_6998:
// fs1 == 0 and fe1 == 0xdc and fm1 == 0x0fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6e0fffff; op2val:0x0; valaddr_reg:x16; val_offset:1120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1120, x17, x15, 1120, x18)

inst_6999:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xdc and fm2 == 0x0fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x6e0fffff; valaddr_reg:x16; val_offset:1128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1128, x17, x15, 1128, x18)

inst_7000:
// fs1 == 0 and fe1 == 0xdc and fm1 == 0x700000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6e700000; op2val:0x0; valaddr_reg:x16; val_offset:1136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1136, x17, x15, 1136, x18)

inst_7001:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xdc and fm2 == 0x700000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x6e700000; valaddr_reg:x16; val_offset:1144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1144, x17, x15, 1144, x18)

inst_7002:
// fs1 == 0 and fe1 == 0xdc and fm1 == 0x1fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6e1fffff; op2val:0x0; valaddr_reg:x16; val_offset:1152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1152, x17, x15, 1152, x18)

inst_7003:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xdc and fm2 == 0x1fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x6e1fffff; valaddr_reg:x16; val_offset:1160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1160, x17, x15, 1160, x18)

inst_7004:
// fs1 == 0 and fe1 == 0xdc and fm1 == 0x600000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6e600000; op2val:0x0; valaddr_reg:x16; val_offset:1168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1168, x17, x15, 1168, x18)

inst_7005:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xdc and fm2 == 0x600000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x6e600000; valaddr_reg:x16; val_offset:1176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1176, x17, x15, 1176, x18)

inst_7006:
// fs1 == 0 and fe1 == 0xdc and fm1 == 0x3fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6e3fffff; op2val:0x0; valaddr_reg:x16; val_offset:1184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1184, x17, x15, 1184, x18)

inst_7007:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xdc and fm2 == 0x3fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x6e3fffff; valaddr_reg:x16; val_offset:1192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1192, x17, x15, 1192, x18)

inst_7008:
// fs1 == 0 and fe1 == 0xdc and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6e400000; op2val:0x0; valaddr_reg:x16; val_offset:1200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1200, x17, x15, 1200, x18)

inst_7009:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xdc and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x6e400000; valaddr_reg:x16; val_offset:1208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1208, x17, x15, 1208, x18)

inst_7010:
// fs1 == 0 and fe1 == 0xdc and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6e7fffff; op2val:0x0; valaddr_reg:x16; val_offset:1216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1216, x17, x15, 1216, x18)

inst_7011:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xdc and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x6e7fffff; valaddr_reg:x16; val_offset:1224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1224, x17, x15, 1224, x18)

inst_7012:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x0; op2val:0x0; valaddr_reg:x16; val_offset:1232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1232, x17, x15, 1232, x18)

inst_7013:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x333333 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xff333333; valaddr_reg:x16; val_offset:1240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1240, x17, x15, 1240, x18)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
test_fp:
.word 0x0
.word 0x0
.word 0xff4ccccc
.word 0xff7fffff
.word 0xff7fffff
.word 0xff4ccccc
.word 0xff333333
.word 0xff7fffff
.word 0xff7fffff
.word 0xff7fffff
.word 0xff5b6db6
.word 0xff7fffff
.word 0xff7fffff
.word 0xff5b6db6
.word 0xff249249
.word 0xff7fffff
.word 0xff7fffff
.word 0xff249249
.word 0xff444444
.word 0xff7fffff
.word 0xff7fffff
.word 0xff444444
.word 0xff3bbbbb
.word 0xff7fffff
.word 0xff7fffff
.word 0xff3bbbbb
.word 0xff666666
.word 0xff7fffff
.word 0xff7fffff
.word 0xff666666
.word 0xff199999
.word 0xff7fffff
.word 0xff7fffff
.word 0xff199999
.word 0xff6db6db
.word 0xff7fffff
.word 0xff7fffff
.word 0xff6db6db
.word 0xff36db6d
.word 0xff7fffff
.word 0xff7fffff
.word 0xff36db6d
.word 0xff000001
.word 0xff7fffff
.word 0xff7fffff
.word 0xff000001
.word 0xff7ffffe
.word 0xff7fffff
.word 0xff7fffff
.word 0xff7ffffe
.word 0xff000003
.word 0xff7fffff
.word 0xff7fffff
.word 0xff000003
.word 0xff7ffffc
.word 0xff7fffff
.word 0xff7fffff
.word 0xff7ffffc
.word 0xff000007
.word 0xff7fffff
.word 0xff7fffff
.word 0xff000007
.word 0xff7ffff8
.word 0xff7fffff
.word 0xff7fffff
.word 0xff7ffff8
.word 0xfe800001
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe800001
.word 0xfefffffe
.word 0xff7fffff
.word 0xff7fffff
.word 0xfefffffe
.word 0xfe800003
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe800003
.word 0xfefffffc
.word 0xff7fffff
.word 0xff7fffff
.word 0xfefffffc
.word 0xfe800007
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe800007
.word 0xfefffff8
.word 0xff7fffff
.word 0xff7fffff
.word 0xfefffff8
.word 0xfe80000f
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe80000f
.word 0xfefffff0
.word 0xff7fffff
.word 0xff7fffff
.word 0xfefffff0
.word 0xfe80001f
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe80001f
.word 0xfeffffe0
.word 0xff7fffff
.word 0xff7fffff
.word 0xfeffffe0
.word 0xfe80003f
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe80003f
.word 0xfeffffc0
.word 0xff7fffff
.word 0xff7fffff
.word 0xfeffffc0
.word 0xfe80007f
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe80007f
.word 0xfeffff80
.word 0xff7fffff
.word 0xff7fffff
.word 0xfeffff80
.word 0xfe8000ff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe8000ff
.word 0xfeffff00
.word 0xff7fffff
.word 0xff7fffff
.word 0xfeffff00
.word 0xfe8001ff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe8001ff
.word 0xfefffe00
.word 0xff7fffff
.word 0xff7fffff
.word 0xfefffe00
.word 0xfe8003ff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe8003ff
.word 0xfefffc00
.word 0xff7fffff
.word 0xff7fffff
.word 0xfefffc00
.word 0xfe8007ff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe8007ff
.word 0xfefff800
.word 0xff7fffff
.word 0xff7fffff
.word 0xfefff800
.word 0xfe800fff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe800fff
.word 0xfefff000
.word 0xff7fffff
.word 0xff7fffff
.word 0xfefff000
.word 0xfe801fff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe801fff
.word 0xfeffe000
.word 0xff7fffff
.word 0xff7fffff
.word 0xfeffe000
.word 0xfe803fff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe803fff
.word 0xfeffc000
.word 0xff7fffff
.word 0xff7fffff
.word 0xfeffc000
.word 0xfe807fff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe807fff
.word 0xfeff8000
.word 0xff7fffff
.word 0xff7fffff
.word 0xfeff8000
.word 0xfe80ffff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe80ffff
.word 0xfeff0000
.word 0xff7fffff
.word 0xff7fffff
.word 0xfeff0000
.word 0xfe81ffff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe81ffff
.word 0xfefe0000
.word 0xff7fffff
.word 0xff7fffff
.word 0xfefe0000
.word 0xfe83ffff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe83ffff
.word 0xfefc0000
.word 0xff7fffff
.word 0xff7fffff
.word 0xfefc0000
.word 0xfe87ffff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe87ffff
.word 0xfef80000
.word 0xff7fffff
.word 0xff7fffff
.word 0xfef80000
.word 0xfe8fffff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe8fffff
.word 0xfef00000
.word 0xff7fffff
.word 0xff7fffff
.word 0xfef00000
.word 0xfe9fffff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe9fffff
.word 0xfee00000
.word 0xff7fffff
.word 0xff7fffff
.word 0xfee00000
.word 0xfebfffff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfebfffff
.word 0xfec00000
.word 0xff7fffff
.word 0xff7fffff
.word 0xfec00000
.word 0xfeffffff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfeffffff
.word 0xfe800000
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe800000
.word 0xfe000001
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe000001
.word 0xfe7ffffe
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe7ffffe
.word 0xfe000003
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe000003
.word 0xfe7ffffc
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe7ffffc
.word 0xfe000007
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe000007
.word 0xfe7ffff8
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe7ffff8
.word 0xfe00000f
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe00000f
.word 0xfe7ffff0
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe7ffff0
.word 0xfe00001f
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe00001f
.word 0xfe7fffe0
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe7fffe0
.word 0xfe00003f
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe00003f
.word 0xfe7fffc0
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe7fffc0
.word 0xfe00007f
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe00007f
.word 0xfe7fff80
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe7fff80
.word 0xfe0000ff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe0000ff
.word 0xfe7fff00
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe7fff00
.word 0xfe0001ff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe0001ff
.word 0xfe7ffe00
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe7ffe00
.word 0xfe0003ff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe0003ff
.word 0xfe7ffc00
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe7ffc00
.word 0xfe0007ff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe0007ff
.word 0xfe7ff800
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe7ff800
.word 0xfe000fff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe000fff
.word 0xfe7ff000
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe7ff000
.word 0xfe001fff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe001fff
.word 0xfe7fe000
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe7fe000
.word 0xfe003fff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe003fff
.word 0xfe7fc000
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe7fc000
.word 0xfe007fff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe007fff
.word 0xfe7f8000
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe7f8000
.word 0xfe00ffff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe00ffff
.word 0xfe7f0000
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe7f0000
.word 0xfe01ffff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe01ffff
.word 0xfe7e0000
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe7e0000
.word 0xfe03ffff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe03ffff
.word 0xfe7c0000
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe7c0000
.word 0xfe07ffff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe07ffff
.word 0xfe780000
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe780000
.word 0xfe0fffff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe0fffff
.word 0xfe700000
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe700000
.word 0xfe1fffff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe1fffff
.word 0xfe600000
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe600000
.word 0xfe3fffff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe3fffff
.word 0xfe400000
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe400000
.word 0xfe7fffff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe7fffff
.word 0xfe000000
.word 0xff7fffff
.word 0xff7fffff
.word 0xfe000000
.word 0xfd800001
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd800001
.word 0xfdfffffe
.word 0xff7fffff
.word 0xff7fffff
.word 0xfdfffffe
.word 0xfd800003
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd800003
.word 0xfdfffffc
.word 0xff7fffff
.word 0xff7fffff
.word 0xfdfffffc
.word 0xfd800007
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd800007
.word 0xfdfffff8
.word 0xff7fffff
.word 0xff7fffff
.word 0xfdfffff8
.word 0xfd80000f
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd80000f
.word 0xfdfffff0
.word 0xff7fffff
.word 0xff7fffff
.word 0xfdfffff0
.word 0xfd80001f
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd80001f
.word 0xfdffffe0
.word 0xff7fffff
.word 0xff7fffff
.word 0xfdffffe0
.word 0xfd80003f
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd80003f
.word 0xfdffffc0
.word 0xff7fffff
.word 0xff7fffff
.word 0xfdffffc0
.word 0xfd80007f
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd80007f
.word 0xfdffff80
.word 0xff7fffff
.word 0xff7fffff
.word 0xfdffff80
.word 0xfd8000ff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd8000ff
.word 0xfdffff00
.word 0xff7fffff
.word 0xff7fffff
.word 0xfdffff00
.word 0xfd8001ff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd8001ff
.word 0xfdfffe00
.word 0xff7fffff
.word 0xff7fffff
.word 0xfdfffe00
.word 0xfd8003ff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd8003ff
.word 0xfdfffc00
.word 0xff7fffff
.word 0xff7fffff
.word 0xfdfffc00
.word 0xfd8007ff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd8007ff
.word 0xfdfff800
.word 0xff7fffff
.word 0xff7fffff
.word 0xfdfff800
.word 0xfd800fff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd800fff
.word 0xfdfff000
.word 0xff7fffff
.word 0xff7fffff
.word 0xfdfff000
.word 0xfd801fff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd801fff
.word 0xfdffe000
.word 0xff7fffff
.word 0xff7fffff
.word 0xfdffe000
.word 0xfd803fff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd803fff
.word 0xfdffc000
.word 0xff7fffff
.word 0xff7fffff
.word 0xfdffc000
.word 0xfd807fff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd807fff
.word 0xfdff8000
.word 0xff7fffff
.word 0xff7fffff
.word 0xfdff8000
.word 0xfd80ffff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd80ffff
.word 0xfdff0000
.word 0xff7fffff
.word 0xff7fffff
.word 0xfdff0000
.word 0xfd81ffff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd81ffff
.word 0xfdfe0000
.word 0xff7fffff
.word 0xff7fffff
.word 0xfdfe0000
.word 0xfd83ffff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd83ffff
.word 0xfdfc0000
.word 0xff7fffff
.word 0xff7fffff
.word 0xfdfc0000
.word 0xfd87ffff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd87ffff
.word 0xfdf80000
.word 0xff7fffff
.word 0xff7fffff
.word 0xfdf80000
.word 0xfd8fffff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd8fffff
.word 0xfdf00000
.word 0xff7fffff
.word 0xff7fffff
.word 0xfdf00000
.word 0xfd9fffff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd9fffff
.word 0xfde00000
.word 0xff7fffff
.word 0xff7fffff
.word 0xfde00000
.word 0xfdbfffff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfdbfffff
.word 0xfdc00000
.word 0xff7fffff
.word 0xff7fffff
.word 0xfdc00000
.word 0xfdffffff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfdffffff
.word 0xfd800000
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd800000
.word 0xfd000001
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd000001
.word 0xfd7ffffe
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd7ffffe
.word 0xfd000003
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd000003
.word 0xfd7ffffc
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd7ffffc
.word 0xfd000007
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd000007
.word 0xfd7ffff8
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd7ffff8
.word 0xfd00000f
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd00000f
.word 0xfd7ffff0
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd7ffff0
.word 0xfd00001f
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd00001f
.word 0xfd7fffe0
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd7fffe0
.word 0xfd00003f
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd00003f
.word 0xfd7fffc0
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd7fffc0
.word 0xfd00007f
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd00007f
.word 0xfd7fff80
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd7fff80
.word 0xfd0000ff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd0000ff
.word 0xfd7fff00
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd7fff00
.word 0xfd0001ff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd0001ff
.word 0xfd7ffe00
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd7ffe00
.word 0xfd0003ff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd0003ff
.word 0xfd7ffc00
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd7ffc00
.word 0xfd0007ff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd0007ff
.word 0xfd7ff800
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd7ff800
.word 0xfd000fff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd000fff
.word 0xfd7ff000
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd7ff000
.word 0xfd001fff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd001fff
.word 0xfd7fe000
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd7fe000
.word 0xfd003fff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd003fff
.word 0xfd7fc000
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd7fc000
.word 0xfd007fff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd007fff
.word 0xfd7f8000
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd7f8000
.word 0xfd00ffff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd00ffff
.word 0xfd7f0000
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd7f0000
.word 0xfd01ffff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd01ffff
.word 0xfd7e0000
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd7e0000
.word 0xfd03ffff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd03ffff
.word 0xfd7c0000
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd7c0000
.word 0xfd07ffff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd07ffff
.word 0xfd780000
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd780000
.word 0xfd0fffff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd0fffff
.word 0xfd700000
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd700000
.word 0xfd1fffff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd1fffff
.word 0xfd600000
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd600000
.word 0xfd3fffff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd3fffff
.word 0xfd400000
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd400000
.word 0xfd7fffff
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd7fffff
.word 0xfd000000
.word 0xff7fffff
.word 0xff7fffff
.word 0xfd000000
.word 0xff00000f
.word 0xff7fffff
.word 0xff7fffff
.word 0xff00000f
.word 0xff7ffff0
.word 0xff7fffff
.word 0xff7fffff
.word 0xff7ffff0
.word 0xff00001f
.word 0xff7fffff
.word 0xff7fffff
.word 0xff00001f
.word 0xff7fffe0
.word 0xff7fffff
.word 0xff7fffff
.word 0xff7fffe0
.word 0xff00003f
.word 0xff7fffff
.word 0xff7fffff
.word 0xff00003f
.word 0xff7fffc0
.word 0xff7fffff
.word 0xff7fffff
.word 0xff7fffc0
.word 0xff00007f
.word 0xff7fffff
.word 0xff7fffff
.word 0xff00007f
.word 0xff7fff80
.word 0xff7fffff
.word 0xff7fffff
.word 0xff7fff80
.word 0xff0000ff
.word 0xff7fffff
.word 0xff7fffff
.word 0xff0000ff
.word 0xff7fff00
.word 0xff7fffff
.word 0xff7fffff
.word 0xff7fff00
.word 0xff0001ff
.word 0xff7fffff
.word 0xff7fffff
.word 0xff0001ff
.word 0xff7ffe00
.word 0xff7fffff
.word 0xff7fffff
.word 0xff7ffe00
.word 0xff0003ff
.word 0xff7fffff
.word 0xff7fffff
.word 0xff0003ff
.word 0xff7ffc00
.word 0xff7fffff
.word 0xff7fffff
.word 0xff7ffc00
.word 0xff0007ff
.word 0xff7fffff
.word 0xff7fffff
.word 0xff0007ff
.word 0xff7ff800
.word 0xff7fffff
.word 0xff7fffff
.word 0xff7ff800
.word 0xff000fff
.word 0xff7fffff
.word 0xff7fffff
.word 0xff000fff
.word 0xff7ff000
.word 0xff7fffff
.word 0xff7fffff
.word 0xff7ff000
.word 0xff001fff
.word 0xff7fffff
.word 0xff7fffff
.word 0xff001fff
.word 0xff7fe000
.word 0xff7fffff
.word 0xff7fffff
.word 0xff7fe000
.word 0xff003fff
.word 0xff7fffff
.word 0xff7fffff
.word 0xff003fff
.word 0xff7fc000
.word 0xff7fffff
.word 0xff7fffff
.word 0xff7fc000
.word 0xff007fff
.word 0xff7fffff
.word 0xff7fffff
.word 0xff007fff
.word 0xff7f8000
.word 0xff7fffff
.word 0xff7fffff
.word 0xff7f8000
.word 0xff00ffff
.word 0xff7fffff
.word 0xff7fffff
.word 0xff00ffff
.word 0xff7f0000
.word 0xff7fffff
.word 0xff7fffff
.word 0xff7f0000
.word 0xff01ffff
.word 0xff7fffff
.word 0xff7fffff
.word 0xff01ffff
.word 0xff7e0000
.word 0xff7fffff
.word 0xff7fffff
.word 0xff7e0000
.word 0xff03ffff
.word 0xff7fffff
.word 0xff7fffff
.word 0xff03ffff
.word 0xff7c0000
.word 0xff7fffff
.word 0xff7fffff
.word 0xff7c0000
.word 0xff07ffff
.word 0xff7fffff
.word 0xff7fffff
.word 0xff07ffff
.word 0xff780000
.word 0xff7fffff
.word 0xff7fffff
.word 0xff780000
.word 0xff0fffff
.word 0xff7fffff
.word 0xff7fffff
.word 0xff0fffff
.word 0xff700000
.word 0xff7fffff
.word 0xff7fffff
.word 0xff700000
.word 0xff1fffff
.word 0xff7fffff
.word 0xff7fffff
.word 0xff1fffff
.word 0xff600000
.word 0xff7fffff
.word 0xff7fffff
.word 0xff600000
.word 0xff3fffff
.word 0xff7fffff
.word 0xff7fffff
.word 0xff3fffff
.word 0xff400000
.word 0xff7fffff
.word 0xff7fffff
.word 0xff400000
.word 0xff7fffff
.word 0xff7fffff
.word 0xff000000
.word 0xff7fffff
.word 0xff7fffff
.word 0xff000000
.word 0xea000001
.word 0xff7fffff
.word 0xff7fffff
.word 0xea000001
.word 0xea7ffffe
.word 0xff7fffff
.word 0xff7fffff
.word 0xea7ffffe
.word 0xea000003
.word 0xff7fffff
.word 0xff7fffff
.word 0xea000003
.word 0xea7ffffc
.word 0xff7fffff
.word 0xff7fffff
.word 0xea7ffffc
.word 0xea000007
.word 0xff7fffff
.word 0xff7fffff
.word 0xea000007
.word 0xea7ffff8
.word 0xff7fffff
.word 0xff7fffff
.word 0xea7ffff8
.word 0xea00000f
.word 0xff7fffff
.word 0xff7fffff
.word 0xea00000f
.word 0xea7ffff0
.word 0xff7fffff
.word 0xff7fffff
.word 0xea7ffff0
.word 0xea00001f
.word 0xff7fffff
.word 0xff7fffff
.word 0xea00001f
.word 0xea7fffe0
.word 0xff7fffff
.word 0xff7fffff
.word 0xea7fffe0
.word 0xea00003f
.word 0xff7fffff
.word 0xff7fffff
.word 0xea00003f
.word 0xea7fffc0
.word 0xff7fffff
.word 0xff7fffff
.word 0xea7fffc0
.word 0xea00007f
.word 0xff7fffff
.word 0xff7fffff
.word 0xea00007f
.word 0xea7fff80
.word 0xff7fffff
.word 0xff7fffff
.word 0xea7fff80
.word 0xea0000ff
.word 0xff7fffff
.word 0xff7fffff
.word 0xea0000ff
.word 0xea7fff00
.word 0xff7fffff
.word 0xff7fffff
.word 0xea7fff00
.word 0xea0001ff
.word 0xff7fffff
.word 0xff7fffff
.word 0xea0001ff
.word 0xea7ffe00
.word 0xff7fffff
.word 0xff7fffff
.word 0xea7ffe00
.word 0xea0003ff
.word 0xff7fffff
.word 0xff7fffff
.word 0xea0003ff
.word 0xea7ffc00
.word 0xff7fffff
.word 0xff7fffff
.word 0xea7ffc00
.word 0xea0007ff
.word 0xff7fffff
.word 0xff7fffff
.word 0xea0007ff
.word 0xea7ff800
.word 0xff7fffff
.word 0xff7fffff
.word 0xea7ff800
.word 0xea000fff
.word 0xff7fffff
.word 0xff7fffff
.word 0xea000fff
.word 0xea7ff000
.word 0xff7fffff
.word 0xff7fffff
.word 0xea7ff000
.word 0xea001fff
.word 0xff7fffff
.word 0xff7fffff
.word 0xea001fff
.word 0xea7fe000
.word 0xff7fffff
.word 0xff7fffff
.word 0xea7fe000
.word 0xea003fff
.word 0xff7fffff
.word 0xff7fffff
.word 0xea003fff
.word 0xea7fc000
.word 0xff7fffff
.word 0xff7fffff
.word 0xea7fc000
.word 0xea007fff
.word 0xff7fffff
.word 0xff7fffff
.word 0xea007fff
.word 0xea7f8000
.word 0xff7fffff
.word 0xff7fffff
.word 0xea7f8000
.word 0xea00ffff
.word 0xff7fffff
.word 0xff7fffff
.word 0xea00ffff
.word 0xea7f0000
.word 0xff7fffff
.word 0xff7fffff
.word 0xea7f0000
.word 0xea01ffff
.word 0xff7fffff
.word 0xff7fffff
.word 0xea01ffff
.word 0xea7e0000
.word 0xff7fffff
.word 0xff7fffff
.word 0xea7e0000
.word 0xea03ffff
.word 0xff7fffff
.word 0xff7fffff
.word 0xea03ffff
.word 0xea7c0000
.word 0xff7fffff
.word 0xff7fffff
.word 0xea7c0000
.word 0xea07ffff
.word 0xff7fffff
.word 0xff7fffff
.word 0xea07ffff
.word 0xea780000
.word 0xff7fffff
.word 0xff7fffff
.word 0xea780000
.word 0xea0fffff
.word 0xff7fffff
.word 0xff7fffff
.word 0xea0fffff
.word 0xea700000
.word 0xff7fffff
.word 0xff7fffff
.word 0xea700000
.word 0xea1fffff
.word 0xff7fffff
.word 0xff7fffff
.word 0xea1fffff
.word 0xea600000
.word 0xff7fffff
.word 0xff7fffff
.word 0xea600000
.word 0xea3fffff
.word 0xff7fffff
.word 0xff7fffff
.word 0xea3fffff
.word 0xea400000
.word 0xff7fffff
.word 0xff7fffff
.word 0xea400000
.word 0xea7fffff
.word 0xff7fffff
.word 0xff7fffff
.word 0xea7fffff
.word 0xea000000
.word 0xff7fffff
.word 0xff7fffff
.word 0xea000000
.word 0x7f4ccccc
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f4ccccc
.word 0x7f333333
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f333333
.word 0x7f5b6db6
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f5b6db6
.word 0x7f249249
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f249249
.word 0x7f444444
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f444444
.word 0x7f3bbbbb
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f3bbbbb
.word 0x7f666666
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f666666
.word 0x7f199999
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f199999
.word 0x7f6db6db
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f6db6db
.word 0x7f36db6d
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f36db6d
.word 0x7f000001
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f000001
.word 0x7f7ffffe
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f7ffffe
.word 0x7f000003
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f000003
.word 0x7f7ffffc
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f7ffffc
.word 0x7f000007
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f000007
.word 0x7f7ffff8
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f7ffff8
.word 0x7e800001
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e800001
.word 0x7efffffe
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7efffffe
.word 0x7e800003
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e800003
.word 0x7efffffc
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7efffffc
.word 0x7e800007
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e800007
.word 0x7efffff8
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7efffff8
.word 0x7e80000f
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e80000f
.word 0x7efffff0
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7efffff0
.word 0x7e80001f
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e80001f
.word 0x7effffe0
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7effffe0
.word 0x7e80003f
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e80003f
.word 0x7effffc0
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7effffc0
.word 0x7e80007f
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e80007f
.word 0x7effff80
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7effff80
.word 0x7e8000ff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e8000ff
.word 0x7effff00
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7effff00
.word 0x7e8001ff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e8001ff
.word 0x7efffe00
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7efffe00
.word 0x7e8003ff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e8003ff
.word 0x7efffc00
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7efffc00
.word 0x7e8007ff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e8007ff
.word 0x7efff800
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7efff800
.word 0x7e800fff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e800fff
.word 0x7efff000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7efff000
.word 0x7e801fff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e801fff
.word 0x7effe000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7effe000
.word 0x7e803fff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e803fff
.word 0x7effc000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7effc000
.word 0x7e807fff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e807fff
.word 0x7eff8000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7eff8000
.word 0x7e80ffff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e80ffff
.word 0x7eff0000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7eff0000
.word 0x7e81ffff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e81ffff
.word 0x7efe0000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7efe0000
.word 0x7e83ffff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e83ffff
.word 0x7efc0000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7efc0000
.word 0x7e87ffff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e87ffff
.word 0x7ef80000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7ef80000
.word 0x7e8fffff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e8fffff
.word 0x7ef00000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7ef00000
.word 0x7e9fffff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e9fffff
.word 0x7ee00000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7ee00000
.word 0x7ebfffff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7ebfffff
.word 0x7ec00000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7ec00000
.word 0x7effffff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7effffff
.word 0x7e800000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e800000
.word 0x7e000001
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e000001
.word 0x7e7ffffe
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e7ffffe
.word 0x7e000003
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e000003
.word 0x7e7ffffc
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e7ffffc
.word 0x7e000007
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e000007
.word 0x7e7ffff8
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e7ffff8
.word 0x7e00000f
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e00000f
.word 0x7e7ffff0
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e7ffff0
.word 0x7e00001f
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e00001f
.word 0x7e7fffe0
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e7fffe0
.word 0x7e00003f
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e00003f
.word 0x7e7fffc0
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e7fffc0
.word 0x7e00007f
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e00007f
.word 0x7e7fff80
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e7fff80
.word 0x7e0000ff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e0000ff
.word 0x7e7fff00
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e7fff00
.word 0x7e0001ff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e0001ff
.word 0x7e7ffe00
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e7ffe00
.word 0x7e0003ff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e0003ff
.word 0x7e7ffc00
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e7ffc00
.word 0x7e0007ff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e0007ff
.word 0x7e7ff800
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e7ff800
.word 0x7e000fff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e000fff
.word 0x7e7ff000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e7ff000
.word 0x7e001fff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e001fff
.word 0x7e7fe000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e7fe000
.word 0x7e003fff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e003fff
.word 0x7e7fc000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e7fc000
.word 0x7e007fff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e007fff
.word 0x7e7f8000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e7f8000
.word 0x7e00ffff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e00ffff
.word 0x7e7f0000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e7f0000
.word 0x7e01ffff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e01ffff
.word 0x7e7e0000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e7e0000
.word 0x7e03ffff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e03ffff
.word 0x7e7c0000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e7c0000
.word 0x7e07ffff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e07ffff
.word 0x7e780000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e780000
.word 0x7e0fffff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e0fffff
.word 0x7e700000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e700000
.word 0x7e1fffff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e1fffff
.word 0x7e600000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e600000
.word 0x7e3fffff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e3fffff
.word 0x7e400000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e400000
.word 0x7e7fffff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e7fffff
.word 0x7e000000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7e000000
.word 0x7d800001
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d800001
.word 0x7dfffffe
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7dfffffe
.word 0x7d800003
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d800003
.word 0x7dfffffc
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7dfffffc
.word 0x7d800007
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d800007
.word 0x7dfffff8
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7dfffff8
.word 0x7d80000f
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d80000f
.word 0x7dfffff0
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7dfffff0
.word 0x7d80001f
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d80001f
.word 0x7dffffe0
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7dffffe0
.word 0x7d80003f
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d80003f
.word 0x7dffffc0
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7dffffc0
.word 0x7d80007f
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d80007f
.word 0x7dffff80
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7dffff80
.word 0x7d8000ff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d8000ff
.word 0x7dffff00
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7dffff00
.word 0x7d8001ff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d8001ff
.word 0x7dfffe00
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7dfffe00
.word 0x7d8003ff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d8003ff
.word 0x7dfffc00
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7dfffc00
.word 0x7d8007ff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d8007ff
.word 0x7dfff800
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7dfff800
.word 0x7d800fff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d800fff
.word 0x7dfff000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7dfff000
.word 0x7d801fff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d801fff
.word 0x7dffe000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7dffe000
.word 0x7d803fff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d803fff
.word 0x7dffc000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7dffc000
.word 0x7d807fff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d807fff
.word 0x7dff8000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7dff8000
.word 0x7d80ffff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d80ffff
.word 0x7dff0000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7dff0000
.word 0x7d81ffff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d81ffff
.word 0x7dfe0000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7dfe0000
.word 0x7d83ffff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d83ffff
.word 0x7dfc0000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7dfc0000
.word 0x7d87ffff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d87ffff
.word 0x7df80000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7df80000
.word 0x7d8fffff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d8fffff
.word 0x7df00000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7df00000
.word 0x7d9fffff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d9fffff
.word 0x7de00000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7de00000
.word 0x7dbfffff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7dbfffff
.word 0x7dc00000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7dc00000
.word 0x7dffffff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7dffffff
.word 0x7d800000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d800000
.word 0x7d000001
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d000001
.word 0x7d7ffffe
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d7ffffe
.word 0x7d000003
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d000003
.word 0x7d7ffffc
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d7ffffc
.word 0x7d000007
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d000007
.word 0x7d7ffff8
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d7ffff8
.word 0x7d00000f
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d00000f
.word 0x7d7ffff0
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d7ffff0
.word 0x7d00001f
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d00001f
.word 0x7d7fffe0
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d7fffe0
.word 0x7d00003f
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d00003f
.word 0x7d7fffc0
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d7fffc0
.word 0x7d00007f
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d00007f
.word 0x7d7fff80
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d7fff80
.word 0x7d0000ff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d0000ff
.word 0x7d7fff00
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d7fff00
.word 0x7d0001ff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d0001ff
.word 0x7d7ffe00
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d7ffe00
.word 0x7d0003ff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d0003ff
.word 0x7d7ffc00
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d7ffc00
.word 0x7d0007ff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d0007ff
.word 0x7d7ff800
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d7ff800
.word 0x7d000fff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d000fff
.word 0x7d7ff000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d7ff000
.word 0x7d001fff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d001fff
.word 0x7d7fe000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d7fe000
.word 0x7d003fff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d003fff
.word 0x7d7fc000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d7fc000
.word 0x7d007fff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d007fff
.word 0x7d7f8000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d7f8000
.word 0x7d00ffff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d00ffff
.word 0x7d7f0000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d7f0000
.word 0x7d01ffff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d01ffff
.word 0x7d7e0000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d7e0000
.word 0x7d03ffff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d03ffff
.word 0x7d7c0000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d7c0000
.word 0x7d07ffff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d07ffff
.word 0x7d780000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d780000
.word 0x7d0fffff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d0fffff
.word 0x7d700000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d700000
.word 0x7d1fffff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d1fffff
.word 0x7d600000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d600000
.word 0x7d3fffff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d3fffff
.word 0x7d400000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d400000
.word 0x7d7fffff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d7fffff
.word 0x7d000000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d000000
.word 0x7f00000f
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f00000f
.word 0x7f7ffff0
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f7ffff0
.word 0x7f00001f
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f00001f
.word 0x7f7fffe0
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f7fffe0
.word 0x7f00003f
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f00003f
.word 0x7f7fffc0
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f7fffc0
.word 0x7f00007f
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f00007f
.word 0x7f7fff80
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f7fff80
.word 0x7f0000ff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f0000ff
.word 0x7f7fff00
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f7fff00
.word 0x7f0001ff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f0001ff
.word 0x7f7ffe00
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f7ffe00
.word 0x7f0003ff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f0003ff
.word 0x7f7ffc00
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f7ffc00
.word 0x7f0007ff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f0007ff
.word 0x7f7ff800
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f7ff800
.word 0x7f000fff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f000fff
.word 0x7f7ff000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f7ff000
.word 0x7f001fff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f001fff
.word 0x7f7fe000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f7fe000
.word 0x7f003fff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f003fff
.word 0x7f7fc000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f7fc000
.word 0x7f007fff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f007fff
.word 0x7f7f8000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f7f8000
.word 0x7f00ffff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f00ffff
.word 0x7f7f0000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f7f0000
.word 0x7f01ffff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f01ffff
.word 0x7f7e0000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f7e0000
.word 0x7f03ffff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f03ffff
.word 0x7f7c0000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f7c0000
.word 0x7f07ffff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f07ffff
.word 0x7f780000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f780000
.word 0x7f0fffff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f0fffff
.word 0x7f700000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f700000
.word 0x7f1fffff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f1fffff
.word 0x7f600000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f600000
.word 0x7f3fffff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f3fffff
.word 0x7f400000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f400000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f000000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7f000000
.word 0x64000001
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x64000001
.word 0x647ffffe
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x647ffffe
.word 0x64000003
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x64000003
.word 0x647ffffc
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x647ffffc
.word 0x64000007
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x64000007
.word 0x647ffff8
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x647ffff8
.word 0x6400000f
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x6400000f
.word 0x647ffff0
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x647ffff0
.word 0x6400001f
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x6400001f
.word 0x647fffe0
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x647fffe0
.word 0x6400003f
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x6400003f
.word 0x647fffc0
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x647fffc0
.word 0x6400007f
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x6400007f
.word 0x647fff80
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x647fff80
.word 0x640000ff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x640000ff
.word 0x647fff00
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x647fff00
.word 0x640001ff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x640001ff
.word 0x647ffe00
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x647ffe00
.word 0x640003ff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x640003ff
.word 0x647ffc00
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x647ffc00
.word 0x640007ff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x640007ff
.word 0x647ff800
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x647ff800
.word 0x64000fff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x64000fff
.word 0x647ff000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x647ff000
.word 0x64001fff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x64001fff
.word 0x647fe000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x647fe000
.word 0x64003fff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x64003fff
.word 0x647fc000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x647fc000
.word 0x64007fff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x64007fff
.word 0x647f8000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x647f8000
.word 0x6400ffff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x6400ffff
.word 0x647f0000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x647f0000
.word 0x6401ffff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x6401ffff
.word 0x647e0000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x647e0000
.word 0x6403ffff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x6403ffff
.word 0x647c0000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x647c0000
.word 0x6407ffff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x6407ffff
.word 0x64780000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x64780000
.word 0x640fffff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x640fffff
.word 0x64700000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x64700000
.word 0x641fffff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x641fffff
.word 0x64600000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x64600000
.word 0x643fffff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x643fffff
.word 0x64400000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x64400000
.word 0x647fffff
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x647fffff
.word 0x64000000
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x64000000
.word 0x80cccccc
.word 0x80800000
.word 0x80800000
.word 0x80cccccc
.word 0x80b33333
.word 0x80800000
.word 0x80800000
.word 0x80b33333
.word 0x80db6db6
.word 0x80800000
.word 0x80800000
.word 0x80db6db6
.word 0x80a49249
.word 0x80800000
.word 0x80800000
.word 0x80a49249
.word 0x80c44444
.word 0x80800000
.word 0x80800000
.word 0x80c44444
.word 0x80bbbbbb
.word 0x80800000
.word 0x80800000
.word 0x80bbbbbb
.word 0x80e66666
.word 0x80800000
.word 0x80800000
.word 0x80e66666
.word 0x80999999
.word 0x80800000
.word 0x80800000
.word 0x80999999
.word 0x80edb6db
.word 0x80800000
.word 0x80800000
.word 0x80edb6db
.word 0x80b6db6d
.word 0x80800000
.word 0x80800000
.word 0x80b6db6d
.word 0x80800001
.word 0x80800000
.word 0x80800000
.word 0x80800001
.word 0x80fffffe
.word 0x80800000
.word 0x80800000
.word 0x80fffffe
.word 0x80800003
.word 0x80800000
.word 0x80800000
.word 0x80800003
.word 0x80fffffc
.word 0x80800000
.word 0x80800000
.word 0x80fffffc
.word 0x80800007
.word 0x80800000
.word 0x80800000
.word 0x80800007
.word 0x80fffff8
.word 0x80800000
.word 0x80800000
.word 0x80fffff8
.word 0x82000001
.word 0x80800000
.word 0x80800000
.word 0x82000001
.word 0x82000000
.word 0x80800000
.word 0x80800000
.word 0x82000000
.word 0x827ffffe
.word 0x80800000
.word 0x80800000
.word 0x827ffffe
.word 0x82000003
.word 0x80800000
.word 0x80800000
.word 0x82000003
.word 0x827ffffc
.word 0x80800000
.word 0x80800000
.word 0x827ffffc
.word 0x82000007
.word 0x80800000
.word 0x80800000
.word 0x82000007
.word 0x827ffff8
.word 0x80800000
.word 0x80800000
.word 0x827ffff8
.word 0x8200000f
.word 0x80800000
.word 0x80800000
.word 0x8200000f
.word 0x827ffff0
.word 0x80800000
.word 0x80800000
.word 0x827ffff0
.word 0x8200001f
.word 0x80800000
.word 0x80800000
.word 0x8200001f
.word 0x827fffe0
.word 0x80800000
.word 0x80800000
.word 0x827fffe0
.word 0x8200003f
.word 0x80800000
.word 0x80800000
.word 0x8200003f
.word 0x827fffc0
.word 0x80800000
.word 0x80800000
.word 0x827fffc0
.word 0x8200007f
.word 0x80800000
.word 0x80800000
.word 0x8200007f
.word 0x827fff80
.word 0x80800000
.word 0x80800000
.word 0x827fff80
.word 0x820000ff
.word 0x80800000
.word 0x80800000
.word 0x820000ff
.word 0x827fff00
.word 0x80800000
.word 0x80800000
.word 0x827fff00
.word 0x820001ff
.word 0x80800000
.word 0x80800000
.word 0x820001ff
.word 0x827ffe00
.word 0x80800000
.word 0x80800000
.word 0x827ffe00
.word 0x820003ff
.word 0x80800000
.word 0x80800000
.word 0x820003ff
.word 0x827ffc00
.word 0x80800000
.word 0x80800000
.word 0x827ffc00
.word 0x820007ff
.word 0x80800000
.word 0x80800000
.word 0x820007ff
.word 0x827ff800
.word 0x80800000
.word 0x80800000
.word 0x827ff800
.word 0x82000fff
.word 0x80800000
.word 0x80800000
.word 0x82000fff
.word 0x827ff000
.word 0x80800000
.word 0x80800000
.word 0x827ff000
.word 0x82001fff
.word 0x80800000
.word 0x80800000
.word 0x82001fff
.word 0x827fe000
.word 0x80800000
.word 0x80800000
.word 0x827fe000
.word 0x82003fff
.word 0x80800000
.word 0x80800000
.word 0x82003fff
.word 0x827fc000
.word 0x80800000
.word 0x80800000
.word 0x827fc000
.word 0x82007fff
.word 0x80800000
.word 0x80800000
.word 0x82007fff
.word 0x827f8000
.word 0x80800000
.word 0x80800000
.word 0x827f8000
.word 0x8200ffff
.word 0x80800000
.word 0x80800000
.word 0x8200ffff
.word 0x827f0000
.word 0x80800000
.word 0x80800000
.word 0x827f0000
.word 0x8201ffff
.word 0x80800000
.word 0x80800000
.word 0x8201ffff
.word 0x827e0000
.word 0x80800000
.word 0x80800000
.word 0x827e0000
.word 0x8203ffff
.word 0x80800000
.word 0x80800000
.word 0x8203ffff
.word 0x827c0000
.word 0x80800000
.word 0x80800000
.word 0x827c0000
.word 0x8207ffff
.word 0x80800000
.word 0x80800000
.word 0x8207ffff
.word 0x82780000
.word 0x80800000
.word 0x80800000
.word 0x82780000
.word 0x820fffff
.word 0x80800000
.word 0x80800000
.word 0x820fffff
.word 0x82700000
.word 0x80800000
.word 0x80800000
.word 0x82700000
.word 0x821fffff
.word 0x80800000
.word 0x80800000
.word 0x821fffff
.word 0x82600000
.word 0x80800000
.word 0x80800000
.word 0x82600000
.word 0x823fffff
.word 0x80800000
.word 0x80800000
.word 0x823fffff
.word 0x82400000
.word 0x80800000
.word 0x80800000
.word 0x82400000
.word 0x827fffff
.word 0x80800000
.word 0x80800000
.word 0x827fffff
.word 0x81800001
.word 0x80800000
.word 0x80800000
.word 0x81800001
.word 0x81800000
.word 0x80800000
.word 0x80800000
.word 0x81800000
.word 0x81fffffe
.word 0x80800000
.word 0x80800000
.word 0x81fffffe
.word 0x81800003
.word 0x80800000
.word 0x80800000
.word 0x81800003
.word 0x81fffffc
.word 0x80800000
.word 0x80800000
.word 0x81fffffc
.word 0x81800007
.word 0x80800000
.word 0x80800000
.word 0x81800007
.word 0x81fffff8
.word 0x80800000
.word 0x80800000
.word 0x81fffff8
.word 0x8180000f
.word 0x80800000
.word 0x80800000
.word 0x8180000f
.word 0x81fffff0
.word 0x80800000
.word 0x80800000
.word 0x81fffff0
.word 0x8180001f
.word 0x80800000
.word 0x80800000
.word 0x8180001f
.word 0x81ffffe0
.word 0x80800000
.word 0x80800000
.word 0x81ffffe0
.word 0x8180003f
.word 0x80800000
.word 0x80800000
.word 0x8180003f
.word 0x81ffffc0
.word 0x80800000
.word 0x80800000
.word 0x81ffffc0
.word 0x8180007f
.word 0x80800000
.word 0x80800000
.word 0x8180007f
.word 0x81ffff80
.word 0x80800000
.word 0x80800000
.word 0x81ffff80
.word 0x818000ff
.word 0x80800000
.word 0x80800000
.word 0x818000ff
.word 0x81ffff00
.word 0x80800000
.word 0x80800000
.word 0x81ffff00
.word 0x818001ff
.word 0x80800000
.word 0x80800000
.word 0x818001ff
.word 0x81fffe00
.word 0x80800000
.word 0x80800000
.word 0x81fffe00
.word 0x818003ff
.word 0x80800000
.word 0x80800000
.word 0x818003ff
.word 0x81fffc00
.word 0x80800000
.word 0x80800000
.word 0x81fffc00
.word 0x818007ff
.word 0x80800000
.word 0x80800000
.word 0x818007ff
.word 0x81fff800
.word 0x80800000
.word 0x80800000
.word 0x81fff800
.word 0x81800fff
.word 0x80800000
.word 0x80800000
.word 0x81800fff
.word 0x81fff000
.word 0x80800000
.word 0x80800000
.word 0x81fff000
.word 0x81801fff
.word 0x80800000
.word 0x80800000
.word 0x81801fff
.word 0x81ffe000
.word 0x80800000
.word 0x80800000
.word 0x81ffe000
.word 0x81803fff
.word 0x80800000
.word 0x80800000
.word 0x81803fff
.word 0x81ffc000
.word 0x80800000
.word 0x80800000
.word 0x81ffc000
.word 0x81807fff
.word 0x80800000
.word 0x80800000
.word 0x81807fff
.word 0x81ff8000
.word 0x80800000
.word 0x80800000
.word 0x81ff8000
.word 0x8180ffff
.word 0x80800000
.word 0x80800000
.word 0x8180ffff
.word 0x81ff0000
.word 0x80800000
.word 0x80800000
.word 0x81ff0000
.word 0x8181ffff
.word 0x80800000
.word 0x80800000
.word 0x8181ffff
.word 0x81fe0000
.word 0x80800000
.word 0x80800000
.word 0x81fe0000
.word 0x8183ffff
.word 0x80800000
.word 0x80800000
.word 0x8183ffff
.word 0x81fc0000
.word 0x80800000
.word 0x80800000
.word 0x81fc0000
.word 0x8187ffff
.word 0x80800000
.word 0x80800000
.word 0x8187ffff
.word 0x81f80000
.word 0x80800000
.word 0x80800000
.word 0x81f80000
.word 0x818fffff
.word 0x80800000
.word 0x80800000
.word 0x818fffff
.word 0x81f00000
.word 0x80800000
.word 0x80800000
.word 0x81f00000
.word 0x819fffff
.word 0x80800000
.word 0x80800000
.word 0x819fffff
.word 0x81e00000
.word 0x80800000
.word 0x80800000
.word 0x81e00000
.word 0x81bfffff
.word 0x80800000
.word 0x80800000
.word 0x81bfffff
.word 0x81c00000
.word 0x80800000
.word 0x80800000
.word 0x81c00000
.word 0x81ffffff
.word 0x80800000
.word 0x80800000
.word 0x81ffffff
.word 0x81000001
.word 0x80800000
.word 0x80800000
.word 0x81000001
.word 0x81000000
.word 0x80800000
.word 0x80800000
.word 0x81000000
.word 0x817ffffe
.word 0x80800000
.word 0x80800000
.word 0x817ffffe
.word 0x81000003
.word 0x80800000
.word 0x80800000
.word 0x81000003
.word 0x817ffffc
.word 0x80800000
.word 0x80800000
.word 0x817ffffc
.word 0x81000007
.word 0x80800000
.word 0x80800000
.word 0x81000007
.word 0x817ffff8
.word 0x80800000
.word 0x80800000
.word 0x817ffff8
.word 0x8100000f
.word 0x80800000
.word 0x80800000
.word 0x8100000f
.word 0x817ffff0
.word 0x80800000
.word 0x80800000
.word 0x817ffff0
.word 0x8100001f
.word 0x80800000
.word 0x80800000
.word 0x8100001f
.word 0x817fffe0
.word 0x80800000
.word 0x80800000
.word 0x817fffe0
.word 0x8100003f
.word 0x80800000
.word 0x80800000
.word 0x8100003f
.word 0x817fffc0
.word 0x80800000
.word 0x80800000
.word 0x817fffc0
.word 0x8100007f
.word 0x80800000
.word 0x80800000
.word 0x8100007f
.word 0x817fff80
.word 0x80800000
.word 0x80800000
.word 0x817fff80
.word 0x810000ff
.word 0x80800000
.word 0x80800000
.word 0x810000ff
.word 0x817fff00
.word 0x80800000
.word 0x80800000
.word 0x817fff00
.word 0x810001ff
.word 0x80800000
.word 0x80800000
.word 0x810001ff
.word 0x817ffe00
.word 0x80800000
.word 0x80800000
.word 0x817ffe00
.word 0x810003ff
.word 0x80800000
.word 0x80800000
.word 0x810003ff
.word 0x817ffc00
.word 0x80800000
.word 0x80800000
.word 0x817ffc00
.word 0x810007ff
.word 0x80800000
.word 0x80800000
.word 0x810007ff
.word 0x817ff800
.word 0x80800000
.word 0x80800000
.word 0x817ff800
.word 0x81000fff
.word 0x80800000
.word 0x80800000
.word 0x81000fff
.word 0x817ff000
.word 0x80800000
.word 0x80800000
.word 0x817ff000
.word 0x81001fff
.word 0x80800000
.word 0x80800000
.word 0x81001fff
.word 0x817fe000
.word 0x80800000
.word 0x80800000
.word 0x817fe000
.word 0x81003fff
.word 0x80800000
.word 0x80800000
.word 0x81003fff
.word 0x817fc000
.word 0x80800000
.word 0x80800000
.word 0x817fc000
.word 0x81007fff
.word 0x80800000
.word 0x80800000
.word 0x81007fff
.word 0x817f8000
.word 0x80800000
.word 0x80800000
.word 0x817f8000
.word 0x8100ffff
.word 0x80800000
.word 0x80800000
.word 0x8100ffff
.word 0x817f0000
.word 0x80800000
.word 0x80800000
.word 0x817f0000
.word 0x8101ffff
.word 0x80800000
.word 0x80800000
.word 0x8101ffff
.word 0x817e0000
.word 0x80800000
.word 0x80800000
.word 0x817e0000
.word 0x8103ffff
.word 0x80800000
.word 0x80800000
.word 0x8103ffff
.word 0x817c0000
.word 0x80800000
.word 0x80800000
.word 0x817c0000
.word 0x8107ffff
.word 0x80800000
.word 0x80800000
.word 0x8107ffff
.word 0x81780000
.word 0x80800000
.word 0x80800000
.word 0x81780000
.word 0x810fffff
.word 0x80800000
.word 0x80800000
.word 0x810fffff
.word 0x81700000
.word 0x80800000
.word 0x80800000
.word 0x81700000
.word 0x811fffff
.word 0x80800000
.word 0x80800000
.word 0x811fffff
.word 0x81600000
.word 0x80800000
.word 0x80800000
.word 0x81600000
.word 0x813fffff
.word 0x80800000
.word 0x80800000
.word 0x813fffff
.word 0x81400000
.word 0x80800000
.word 0x80800000
.word 0x81400000
.word 0x817fffff
.word 0x80800000
.word 0x80800000
.word 0x817fffff
.word 0x80800000
.word 0x80800000
.word 0x8080000f
.word 0x80800000
.word 0x80800000
.word 0x8080000f
.word 0x80fffff0
.word 0x80800000
.word 0x80800000
.word 0x80fffff0
.word 0x8080001f
.word 0x80800000
.word 0x80800000
.word 0x8080001f
.word 0x80ffffe0
.word 0x80800000
.word 0x80800000
.word 0x80ffffe0
.word 0x8080003f
.word 0x80800000
.word 0x80800000
.word 0x8080003f
.word 0x80ffffc0
.word 0x80800000
.word 0x80800000
.word 0x80ffffc0
.word 0x8080007f
.word 0x80800000
.word 0x80800000
.word 0x8080007f
.word 0x80ffff80
.word 0x80800000
.word 0x80800000
.word 0x80ffff80
.word 0x808000ff
.word 0x80800000
.word 0x80800000
.word 0x808000ff
.word 0x80ffff00
.word 0x80800000
.word 0x80800000
.word 0x80ffff00
.word 0x808001ff
.word 0x80800000
.word 0x80800000
.word 0x808001ff
.word 0x80fffe00
.word 0x80800000
.word 0x80800000
.word 0x80fffe00
.word 0x808003ff
.word 0x80800000
.word 0x80800000
.word 0x808003ff
.word 0x80fffc00
.word 0x80800000
.word 0x80800000
.word 0x80fffc00
.word 0x808007ff
.word 0x80800000
.word 0x80800000
.word 0x808007ff
.word 0x80fff800
.word 0x80800000
.word 0x80800000
.word 0x80fff800
.word 0x80800fff
.word 0x80800000
.word 0x80800000
.word 0x80800fff
.word 0x80fff000
.word 0x80800000
.word 0x80800000
.word 0x80fff000
.word 0x80801fff
.word 0x80800000
.word 0x80800000
.word 0x80801fff
.word 0x80ffe000
.word 0x80800000
.word 0x80800000
.word 0x80ffe000
.word 0x80803fff
.word 0x80800000
.word 0x80800000
.word 0x80803fff
.word 0x80ffc000
.word 0x80800000
.word 0x80800000
.word 0x80ffc000
.word 0x80807fff
.word 0x80800000
.word 0x80800000
.word 0x80807fff
.word 0x80ff8000
.word 0x80800000
.word 0x80800000
.word 0x80ff8000
.word 0x8080ffff
.word 0x80800000
.word 0x80800000
.word 0x8080ffff
.word 0x80ff0000
.word 0x80800000
.word 0x80800000
.word 0x80ff0000
.word 0x8081ffff
.word 0x80800000
.word 0x80800000
.word 0x8081ffff
.word 0x80fe0000
.word 0x80800000
.word 0x80800000
.word 0x80fe0000
.word 0x8083ffff
.word 0x80800000
.word 0x80800000
.word 0x8083ffff
.word 0x80fc0000
.word 0x80800000
.word 0x80800000
.word 0x80fc0000
.word 0x8087ffff
.word 0x80800000
.word 0x80800000
.word 0x8087ffff
.word 0x80f80000
.word 0x80800000
.word 0x80800000
.word 0x80f80000
.word 0x808fffff
.word 0x80800000
.word 0x80800000
.word 0x808fffff
.word 0x80f00000
.word 0x80800000
.word 0x80800000
.word 0x80f00000
.word 0x809fffff
.word 0x80800000
.word 0x80800000
.word 0x809fffff
.word 0x80e00000
.word 0x80800000
.word 0x80800000
.word 0x80e00000
.word 0x80bfffff
.word 0x80800000
.word 0x80800000
.word 0x80bfffff
.word 0x80c00000
.word 0x80800000
.word 0x80800000
.word 0x80c00000
.word 0x80ffffff
.word 0x80800000
.word 0x80800000
.word 0x80ffffff
.word 0x80000001
.word 0x80800000
.word 0x80800000
.word 0x80000001
.word 0x80000000
.word 0x80800000
.word 0x80800000
.word 0x80000000
.word 0x807ffffe
.word 0x80800000
.word 0x80800000
.word 0x807ffffe
.word 0x80000003
.word 0x80800000
.word 0x80800000
.word 0x80000003
.word 0x807ffffc
.word 0x80800000
.word 0x80800000
.word 0x807ffffc
.word 0x80000007
.word 0x80800000
.word 0x80800000
.word 0x80000007
.word 0x807ffff8
.word 0x80800000
.word 0x80800000
.word 0x807ffff8
.word 0x8000000f
.word 0x80800000
.word 0x80800000
.word 0x8000000f
.word 0x807ffff0
.word 0x80800000
.word 0x80800000
.word 0x807ffff0
.word 0x8000001f
.word 0x80800000
.word 0x80800000
.word 0x8000001f
.word 0x807fffe0
.word 0x80800000
.word 0x80800000
.word 0x807fffe0
.word 0x8000003f
.word 0x80800000
.word 0x80800000
.word 0x8000003f
.word 0x807fffc0
.word 0x80800000
.word 0x80800000
.word 0x807fffc0
.word 0x8000007f
.word 0x80800000
.word 0x80800000
.word 0x8000007f
.word 0x807fff80
.word 0x80800000
.word 0x80800000
.word 0x807fff80
.word 0x800000ff
.word 0x80800000
.word 0x80800000
.word 0x800000ff
.word 0x807fff00
.word 0x80800000
.word 0x80800000
.word 0x807fff00
.word 0x800001ff
.word 0x80800000
.word 0x80800000
.word 0x800001ff
.word 0x807ffe00
.word 0x80800000
.word 0x80800000
.word 0x807ffe00
.word 0x800003ff
.word 0x80800000
.word 0x80800000
.word 0x800003ff
.word 0x807ffc00
.word 0x80800000
.word 0x80800000
.word 0x807ffc00
.word 0x800007ff
.word 0x80800000
.word 0x80800000
.word 0x800007ff
.word 0x807ff800
.word 0x80800000
.word 0x80800000
.word 0x807ff800
.word 0x80000fff
.word 0x80800000
.word 0x80800000
.word 0x80000fff
.word 0x807ff000
.word 0x80800000
.word 0x80800000
.word 0x807ff000
.word 0x80001fff
.word 0x80800000
.word 0x80800000
.word 0x80001fff
.word 0x807fe000
.word 0x80800000
.word 0x80800000
.word 0x807fe000
.word 0x80003fff
.word 0x80800000
.word 0x80800000
.word 0x80003fff
.word 0x807fc000
.word 0x80800000
.word 0x80800000
.word 0x807fc000
.word 0x80007fff
.word 0x80800000
.word 0x80800000
.word 0x80007fff
.word 0x807f8000
.word 0x80800000
.word 0x80800000
.word 0x807f8000
.word 0x8000ffff
.word 0x80800000
.word 0x80800000
.word 0x8000ffff
.word 0x807f0000
.word 0x80800000
.word 0x80800000
.word 0x807f0000
.word 0x8001ffff
.word 0x80800000
.word 0x80800000
.word 0x8001ffff
.word 0x807e0000
.word 0x80800000
.word 0x80800000
.word 0x807e0000
.word 0x8003ffff
.word 0x80800000
.word 0x80800000
.word 0x8003ffff
.word 0x807c0000
.word 0x80800000
.word 0x80800000
.word 0x807c0000
.word 0x8007ffff
.word 0x80800000
.word 0x80800000
.word 0x8007ffff
.word 0x80780000
.word 0x80800000
.word 0x80800000
.word 0x80780000
.word 0x800fffff
.word 0x80800000
.word 0x80800000
.word 0x800fffff
.word 0x80700000
.word 0x80800000
.word 0x80800000
.word 0x80700000
.word 0x801fffff
.word 0x80800000
.word 0x80800000
.word 0x801fffff
.word 0x80600000
.word 0x80800000
.word 0x80800000
.word 0x80600000
.word 0x803fffff
.word 0x80800000
.word 0x80800000
.word 0x803fffff
.word 0x80400000
.word 0x80800000
.word 0x80800000
.word 0x80400000
.word 0x807fffff
.word 0x80800000
.word 0x80800000
.word 0x807fffff
.word 0xf8000001
.word 0x80800000
.word 0x80800000
.word 0xf8000001
.word 0xf8000000
.word 0x80800000
.word 0x80800000
.word 0xf8000000
.word 0xf87ffffe
.word 0x80800000
.word 0x80800000
.word 0xf87ffffe
.word 0xf8000003
.word 0x80800000
.word 0x80800000
.word 0xf8000003
.word 0xf87ffffc
.word 0x80800000
.word 0x80800000
.word 0xf87ffffc
.word 0xf8000007
.word 0x80800000
.word 0x80800000
.word 0xf8000007
.word 0xf87ffff8
.word 0x80800000
.word 0x80800000
.word 0xf87ffff8
.word 0xf800000f
.word 0x80800000
.word 0x80800000
.word 0xf800000f
.word 0xf87ffff0
.word 0x80800000
.word 0x80800000
.word 0xf87ffff0
.word 0xf800001f
.word 0x80800000
.word 0x80800000
.word 0xf800001f
.word 0xf87fffe0
.word 0x80800000
.word 0x80800000
.word 0xf87fffe0
.word 0xf800003f
.word 0x80800000
.word 0x80800000
.word 0xf800003f
.word 0xf87fffc0
.word 0x80800000
.word 0x80800000
.word 0xf87fffc0
.word 0xf800007f
.word 0x80800000
.word 0x80800000
.word 0xf800007f
.word 0xf87fff80
.word 0x80800000
.word 0x80800000
.word 0xf87fff80
.word 0xf80000ff
.word 0x80800000
.word 0x80800000
.word 0xf80000ff
.word 0xf87fff00
.word 0x80800000
.word 0x80800000
.word 0xf87fff00
.word 0xf80001ff
.word 0x80800000
.word 0x80800000
.word 0xf80001ff
.word 0xf87ffe00
.word 0x80800000
.word 0x80800000
.word 0xf87ffe00
.word 0xf80003ff
.word 0x80800000
.word 0x80800000
.word 0xf80003ff
.word 0xf87ffc00
.word 0x80800000
.word 0x80800000
.word 0xf87ffc00
.word 0xf80007ff
.word 0x80800000
.word 0x80800000
.word 0xf80007ff
.word 0xf87ff800
.word 0x80800000
.word 0x80800000
.word 0xf87ff800
.word 0xf8000fff
.word 0x80800000
.word 0x80800000
.word 0xf8000fff
.word 0xf87ff000
.word 0x80800000
.word 0x80800000
.word 0xf87ff000
.word 0xf8001fff
.word 0x80800000
.word 0x80800000
.word 0xf8001fff
.word 0xf87fe000
.word 0x80800000
.word 0x80800000
.word 0xf87fe000
.word 0xf8003fff
.word 0x80800000
.word 0x80800000
.word 0xf8003fff
.word 0xf87fc000
.word 0x80800000
.word 0x80800000
.word 0xf87fc000
.word 0xf8007fff
.word 0x80800000
.word 0x80800000
.word 0xf8007fff
.word 0xf87f8000
.word 0x80800000
.word 0x80800000
.word 0xf87f8000
.word 0xf800ffff
.word 0x80800000
.word 0x80800000
.word 0xf800ffff
.word 0xf87f0000
.word 0x80800000
.word 0x80800000
.word 0xf87f0000
.word 0xf801ffff
.word 0x80800000
.word 0x80800000
.word 0xf801ffff
.word 0xf87e0000
.word 0x80800000
.word 0x80800000
.word 0xf87e0000
.word 0xf803ffff
.word 0x80800000
.word 0x80800000
.word 0xf803ffff
.word 0xf87c0000
.word 0x80800000
.word 0x80800000
.word 0xf87c0000
.word 0xf807ffff
.word 0x80800000
.word 0x80800000
.word 0xf807ffff
.word 0xf8780000
.word 0x80800000
.word 0x80800000
.word 0xf8780000
.word 0xf80fffff
.word 0x80800000
.word 0x80800000
.word 0xf80fffff
.word 0xf8700000
.word 0x80800000
.word 0x80800000
.word 0xf8700000
.word 0xf81fffff
.word 0x80800000
.word 0x80800000
.word 0xf81fffff
.word 0xf8600000
.word 0x80800000
.word 0x80800000
.word 0xf8600000
.word 0xf83fffff
.word 0x80800000
.word 0x80800000
.word 0xf83fffff
.word 0xf8400000
.word 0x80800000
.word 0x80800000
.word 0xf8400000
.word 0xf87fffff
.word 0x80800000
.word 0x80800000
.word 0xf87fffff
.word 0xcccccc
.word 0x800000
.word 0x800000
.word 0xcccccc
.word 0xb33333
.word 0x800000
.word 0x800000
.word 0xb33333
.word 0xdb6db6
.word 0x800000
.word 0x800000
.word 0xdb6db6
.word 0xa49249
.word 0x800000
.word 0x800000
.word 0xa49249
.word 0xc44444
.word 0x800000
.word 0x800000
.word 0xc44444
.word 0xbbbbbb
.word 0x800000
.word 0x800000
.word 0xbbbbbb
.word 0xe66666
.word 0x800000
.word 0x800000
.word 0xe66666
.word 0x999999
.word 0x800000
.word 0x800000
.word 0x999999
.word 0xedb6db
.word 0x800000
.word 0x800000
.word 0xedb6db
.word 0xb6db6d
.word 0x800000
.word 0x800000
.word 0xb6db6d
.word 0x800001
.word 0x800000
.word 0x800000
.word 0x800001
.word 0xfffffe
.word 0x800000
.word 0x800000
.word 0xfffffe
.word 0x800003
.word 0x800000
.word 0x800000
.word 0x800003
.word 0xfffffc
.word 0x800000
.word 0x800000
.word 0xfffffc
.word 0x800007
.word 0x800000
.word 0x800000
.word 0x800007
.word 0xfffff8
.word 0x800000
.word 0x800000
.word 0xfffff8
.word 0x2000001
.word 0x800000
.word 0x800000
.word 0x2000001
.word 0x2000000
.word 0x800000
.word 0x800000
.word 0x2000000
.word 0x27ffffe
.word 0x800000
.word 0x800000
.word 0x27ffffe
.word 0x2000003
.word 0x800000
.word 0x800000
.word 0x2000003
.word 0x27ffffc
.word 0x800000
.word 0x800000
.word 0x27ffffc
.word 0x2000007
.word 0x800000
.word 0x800000
.word 0x2000007
.word 0x27ffff8
.word 0x800000
.word 0x800000
.word 0x27ffff8
.word 0x200000f
.word 0x800000
.word 0x800000
.word 0x200000f
.word 0x27ffff0
.word 0x800000
.word 0x800000
.word 0x27ffff0
.word 0x200001f
.word 0x800000
.word 0x800000
.word 0x200001f
.word 0x27fffe0
.word 0x800000
.word 0x800000
.word 0x27fffe0
.word 0x200003f
.word 0x800000
.word 0x800000
.word 0x200003f
.word 0x27fffc0
.word 0x800000
.word 0x800000
.word 0x27fffc0
.word 0x200007f
.word 0x800000
.word 0x800000
.word 0x200007f
.word 0x27fff80
.word 0x800000
.word 0x800000
.word 0x27fff80
.word 0x20000ff
.word 0x800000
.word 0x800000
.word 0x20000ff
.word 0x27fff00
.word 0x800000
.word 0x800000
.word 0x27fff00
.word 0x20001ff
.word 0x800000
.word 0x800000
.word 0x20001ff
.word 0x27ffe00
.word 0x800000
.word 0x800000
.word 0x27ffe00
.word 0x20003ff
.word 0x800000
.word 0x800000
.word 0x20003ff
.word 0x27ffc00
.word 0x800000
.word 0x800000
.word 0x27ffc00
.word 0x20007ff
.word 0x800000
.word 0x800000
.word 0x20007ff
.word 0x27ff800
.word 0x800000
.word 0x800000
.word 0x27ff800
.word 0x2000fff
.word 0x800000
.word 0x800000
.word 0x2000fff
.word 0x27ff000
.word 0x800000
.word 0x800000
.word 0x27ff000
.word 0x2001fff
.word 0x800000
.word 0x800000
.word 0x2001fff
.word 0x27fe000
.word 0x800000
.word 0x800000
.word 0x27fe000
.word 0x2003fff
.word 0x800000
.word 0x800000
.word 0x2003fff
.word 0x27fc000
.word 0x800000
.word 0x800000
.word 0x27fc000
.word 0x2007fff
.word 0x800000
.word 0x800000
.word 0x2007fff
.word 0x27f8000
.word 0x800000
.word 0x800000
.word 0x27f8000
.word 0x200ffff
.word 0x800000
.word 0x800000
.word 0x200ffff
.word 0x27f0000
.word 0x800000
.word 0x800000
.word 0x27f0000
.word 0x201ffff
.word 0x800000
.word 0x800000
.word 0x201ffff
.word 0x27e0000
.word 0x800000
.word 0x800000
.word 0x27e0000
.word 0x203ffff
.word 0x800000
.word 0x800000
.word 0x203ffff
.word 0x27c0000
.word 0x800000
.word 0x800000
.word 0x27c0000
.word 0x207ffff
.word 0x800000
.word 0x800000
.word 0x207ffff
.word 0x2780000
.word 0x800000
.word 0x800000
.word 0x2780000
.word 0x20fffff
.word 0x800000
.word 0x800000
.word 0x20fffff
.word 0x2700000
.word 0x800000
.word 0x800000
.word 0x2700000
.word 0x21fffff
.word 0x800000
.word 0x800000
.word 0x21fffff
.word 0x2600000
.word 0x800000
.word 0x800000
.word 0x2600000
.word 0x23fffff
.word 0x800000
.word 0x800000
.word 0x23fffff
.word 0x2400000
.word 0x800000
.word 0x800000
.word 0x2400000
.word 0x27fffff
.word 0x800000
.word 0x800000
.word 0x27fffff
.word 0x1800001
.word 0x800000
.word 0x800000
.word 0x1800001
.word 0x1800000
.word 0x800000
.word 0x800000
.word 0x1800000
.word 0x1fffffe
.word 0x800000
.word 0x800000
.word 0x1fffffe
.word 0x1800003
.word 0x800000
.word 0x800000
.word 0x1800003
.word 0x1fffffc
.word 0x800000
.word 0x800000
.word 0x1fffffc
.word 0x1800007
.word 0x800000
.word 0x800000
.word 0x1800007
.word 0x1fffff8
.word 0x800000
.word 0x800000
.word 0x1fffff8
.word 0x180000f
.word 0x800000
.word 0x800000
.word 0x180000f
.word 0x1fffff0
.word 0x800000
.word 0x800000
.word 0x1fffff0
.word 0x180001f
.word 0x800000
.word 0x800000
.word 0x180001f
.word 0x1ffffe0
.word 0x800000
.word 0x800000
.word 0x1ffffe0
.word 0x180003f
.word 0x800000
.word 0x800000
.word 0x180003f
.word 0x1ffffc0
.word 0x800000
.word 0x800000
.word 0x1ffffc0
.word 0x180007f
.word 0x800000
.word 0x800000
.word 0x180007f
.word 0x1ffff80
.word 0x800000
.word 0x800000
.word 0x1ffff80
.word 0x18000ff
.word 0x800000
.word 0x800000
.word 0x18000ff
.word 0x1ffff00
.word 0x800000
.word 0x800000
.word 0x1ffff00
.word 0x18001ff
.word 0x800000
.word 0x800000
.word 0x18001ff
.word 0x1fffe00
.word 0x800000
.word 0x800000
.word 0x1fffe00
.word 0x18003ff
.word 0x800000
.word 0x800000
.word 0x18003ff
.word 0x1fffc00
.word 0x800000
.word 0x800000
.word 0x1fffc00
.word 0x18007ff
.word 0x800000
.word 0x800000
.word 0x18007ff
.word 0x1fff800
.word 0x800000
.word 0x800000
.word 0x1fff800
.word 0x1800fff
.word 0x800000
.word 0x800000
.word 0x1800fff
.word 0x1fff000
.word 0x800000
.word 0x800000
.word 0x1fff000
.word 0x1801fff
.word 0x800000
.word 0x800000
.word 0x1801fff
.word 0x1ffe000
.word 0x800000
.word 0x800000
.word 0x1ffe000
.word 0x1803fff
.word 0x800000
.word 0x800000
.word 0x1803fff
.word 0x1ffc000
.word 0x800000
.word 0x800000
.word 0x1ffc000
.word 0x1807fff
.word 0x800000
.word 0x800000
.word 0x1807fff
.word 0x1ff8000
.word 0x800000
.word 0x800000
.word 0x1ff8000
.word 0x180ffff
.word 0x800000
.word 0x800000
.word 0x180ffff
.word 0x1ff0000
.word 0x800000
.word 0x800000
.word 0x1ff0000
.word 0x181ffff
.word 0x800000
.word 0x800000
.word 0x181ffff
.word 0x1fe0000
.word 0x800000
.word 0x800000
.word 0x1fe0000
.word 0x183ffff
.word 0x800000
.word 0x800000
.word 0x183ffff
.word 0x1fc0000
.word 0x800000
.word 0x800000
.word 0x1fc0000
.word 0x187ffff
.word 0x800000
.word 0x800000
.word 0x187ffff
.word 0x1f80000
.word 0x800000
.word 0x800000
.word 0x1f80000
.word 0x18fffff
.word 0x800000
.word 0x800000
.word 0x18fffff
.word 0x1f00000
.word 0x800000
.word 0x800000
.word 0x1f00000
.word 0x19fffff
.word 0x800000
.word 0x800000
.word 0x19fffff
.word 0x1e00000
.word 0x800000
.word 0x800000
.word 0x1e00000
.word 0x1bfffff
.word 0x800000
.word 0x800000
.word 0x1bfffff
.word 0x1c00000
.word 0x800000
.word 0x800000
.word 0x1c00000
.word 0x1ffffff
.word 0x800000
.word 0x800000
.word 0x1ffffff
.word 0x1000001
.word 0x800000
.word 0x800000
.word 0x1000001
.word 0x1000000
.word 0x800000
.word 0x800000
.word 0x1000000
.word 0x17ffffe
.word 0x800000
.word 0x800000
.word 0x17ffffe
.word 0x1000003
.word 0x800000
.word 0x800000
.word 0x1000003
.word 0x17ffffc
.word 0x800000
.word 0x800000
.word 0x17ffffc
.word 0x1000007
.word 0x800000
.word 0x800000
.word 0x1000007
.word 0x17ffff8
.word 0x800000
.word 0x800000
.word 0x17ffff8
.word 0x100000f
.word 0x800000
.word 0x800000
.word 0x100000f
.word 0x17ffff0
.word 0x800000
.word 0x800000
.word 0x17ffff0
.word 0x100001f
.word 0x800000
.word 0x800000
.word 0x100001f
.word 0x17fffe0
.word 0x800000
.word 0x800000
.word 0x17fffe0
.word 0x100003f
.word 0x800000
.word 0x800000
.word 0x100003f
.word 0x17fffc0
.word 0x800000
.word 0x800000
.word 0x17fffc0
.word 0x100007f
.word 0x800000
.word 0x800000
.word 0x100007f
.word 0x17fff80
.word 0x800000
.word 0x800000
.word 0x17fff80
.word 0x10000ff
.word 0x800000
.word 0x800000
.word 0x10000ff
.word 0x17fff00
.word 0x800000
.word 0x800000
.word 0x17fff00
.word 0x10001ff
.word 0x800000
.word 0x800000
.word 0x10001ff
.word 0x17ffe00
.word 0x800000
.word 0x800000
.word 0x17ffe00
.word 0x10003ff
.word 0x800000
.word 0x800000
.word 0x10003ff
.word 0x17ffc00
.word 0x800000
.word 0x800000
.word 0x17ffc00
.word 0x10007ff
.word 0x800000
.word 0x800000
.word 0x10007ff
.word 0x17ff800
.word 0x800000
.word 0x800000
.word 0x17ff800
.word 0x1000fff
.word 0x800000
.word 0x800000
.word 0x1000fff
.word 0x17ff000
.word 0x800000
.word 0x800000
.word 0x17ff000
.word 0x1001fff
.word 0x800000
.word 0x800000
.word 0x1001fff
.word 0x17fe000
.word 0x800000
.word 0x800000
.word 0x17fe000
.word 0x1003fff
.word 0x800000
.word 0x800000
.word 0x1003fff
.word 0x17fc000
.word 0x800000
.word 0x800000
.word 0x17fc000
.word 0x1007fff
.word 0x800000
.word 0x800000
.word 0x1007fff
.word 0x17f8000
.word 0x800000
.word 0x800000
.word 0x17f8000
.word 0x100ffff
.word 0x800000
.word 0x800000
.word 0x100ffff
.word 0x17f0000
.word 0x800000
.word 0x800000
.word 0x17f0000
.word 0x101ffff
.word 0x800000
.word 0x800000
.word 0x101ffff
.word 0x17e0000
.word 0x800000
.word 0x800000
.word 0x17e0000
.word 0x103ffff
.word 0x800000
.word 0x800000
.word 0x103ffff
.word 0x17c0000
.word 0x800000
.word 0x800000
.word 0x17c0000
.word 0x107ffff
.word 0x800000
.word 0x800000
.word 0x107ffff
.word 0x1780000
.word 0x800000
.word 0x800000
.word 0x1780000
.word 0x10fffff
.word 0x800000
.word 0x800000
.word 0x10fffff
.word 0x1700000
.word 0x800000
.word 0x800000
.word 0x1700000
.word 0x11fffff
.word 0x800000
.word 0x800000
.word 0x11fffff
.word 0x1600000
.word 0x800000
.word 0x800000
.word 0x1600000
.word 0x13fffff
.word 0x800000
.word 0x800000
.word 0x13fffff
.word 0x1400000
.word 0x800000
.word 0x800000
.word 0x1400000
.word 0x17fffff
.word 0x800000
.word 0x800000
.word 0x17fffff
.word 0x800000
.word 0x800000
.word 0x80000f
.word 0x800000
.word 0x800000
.word 0x80000f
.word 0xfffff0
.word 0x800000
.word 0x800000
.word 0xfffff0
.word 0x80001f
.word 0x800000
.word 0x800000
.word 0x80001f
.word 0xffffe0
.word 0x800000
.word 0x800000
.word 0xffffe0
.word 0x80003f
.word 0x800000
.word 0x800000
.word 0x80003f
.word 0xffffc0
.word 0x800000
.word 0x800000
.word 0xffffc0
.word 0x80007f
.word 0x800000
.word 0x800000
.word 0x80007f
.word 0xffff80
.word 0x800000
.word 0x800000
.word 0xffff80
.word 0x8000ff
.word 0x800000
.word 0x800000
.word 0x8000ff
.word 0xffff00
.word 0x800000
.word 0x800000
.word 0xffff00
.word 0x8001ff
.word 0x800000
.word 0x800000
.word 0x8001ff
.word 0xfffe00
.word 0x800000
.word 0x800000
.word 0xfffe00
.word 0x8003ff
.word 0x800000
.word 0x800000
.word 0x8003ff
.word 0xfffc00
.word 0x800000
.word 0x800000
.word 0xfffc00
.word 0x8007ff
.word 0x800000
.word 0x800000
.word 0x8007ff
.word 0xfff800
.word 0x800000
.word 0x800000
.word 0xfff800
.word 0x800fff
.word 0x800000
.word 0x800000
.word 0x800fff
.word 0xfff000
.word 0x800000
.word 0x800000
.word 0xfff000
.word 0x801fff
.word 0x800000
.word 0x800000
.word 0x801fff
.word 0xffe000
.word 0x800000
.word 0x800000
.word 0xffe000
.word 0x803fff
.word 0x800000
.word 0x800000
.word 0x803fff
.word 0xffc000
.word 0x800000
.word 0x800000
.word 0xffc000
.word 0x807fff
.word 0x800000
.word 0x800000
.word 0x807fff
.word 0xff8000
.word 0x800000
.word 0x800000
.word 0xff8000
.word 0x80ffff
.word 0x800000
.word 0x800000
.word 0x80ffff
.word 0xff0000
.word 0x800000
.word 0x800000
.word 0xff0000
.word 0x81ffff
.word 0x800000
.word 0x800000
.word 0x81ffff
.word 0xfe0000
.word 0x800000
.word 0x800000
.word 0xfe0000
.word 0x83ffff
.word 0x800000
.word 0x800000
.word 0x83ffff
.word 0xfc0000
.word 0x800000
.word 0x800000
.word 0xfc0000
.word 0x87ffff
.word 0x800000
.word 0x800000
.word 0x87ffff
.word 0xf80000
.word 0x800000
.word 0x800000
.word 0xf80000
.word 0x8fffff
.word 0x800000
.word 0x800000
.word 0x8fffff
.word 0xf00000
.word 0x800000
.word 0x800000
.word 0xf00000
.word 0x9fffff
.word 0x800000
.word 0x800000
.word 0x9fffff
.word 0xe00000
.word 0x800000
.word 0x800000
.word 0xe00000
.word 0xbfffff
.word 0x800000
.word 0x800000
.word 0xbfffff
.word 0xc00000
.word 0x800000
.word 0x800000
.word 0xc00000
.word 0xffffff
.word 0x800000
.word 0x800000
.word 0xffffff
.word 0x1
.word 0x800000
.word 0x800000
.word 0x1
.word 0x0
.word 0x800000
.word 0x800000
.word 0x0
.word 0x7ffffe
.word 0x800000
.word 0x800000
.word 0x7ffffe
.word 0x3
.word 0x800000
.word 0x800000
.word 0x3
.word 0x7ffffc
.word 0x800000
.word 0x800000
.word 0x7ffffc
.word 0x7
.word 0x800000
.word 0x800000
.word 0x7
.word 0x7ffff8
.word 0x800000
.word 0x800000
.word 0x7ffff8
.word 0xf
.word 0x800000
.word 0x800000
.word 0xf
.word 0x7ffff0
.word 0x800000
.word 0x800000
.word 0x7ffff0
.word 0x1f
.word 0x800000
.word 0x800000
.word 0x1f
.word 0x7fffe0
.word 0x800000
.word 0x800000
.word 0x7fffe0
.word 0x3f
.word 0x800000
.word 0x800000
.word 0x3f
.word 0x7fffc0
.word 0x800000
.word 0x800000
.word 0x7fffc0
.word 0x7f
.word 0x800000
.word 0x800000
.word 0x7f
.word 0x7fff80
.word 0x800000
.word 0x800000
.word 0x7fff80
.word 0xff
.word 0x800000
.word 0x800000
.word 0xff
.word 0x7fff00
.word 0x800000
.word 0x800000
.word 0x7fff00
.word 0x1ff
.word 0x800000
.word 0x800000
.word 0x1ff
.word 0x7ffe00
.word 0x800000
.word 0x800000
.word 0x7ffe00
.word 0x3ff
.word 0x800000
.word 0x800000
.word 0x3ff
.word 0x7ffc00
.word 0x800000
.word 0x800000
.word 0x7ffc00
.word 0x7ff
.word 0x800000
.word 0x800000
.word 0x7ff
.word 0x7ff800
.word 0x800000
.word 0x800000
.word 0x7ff800
.word 0xfff
.word 0x800000
.word 0x800000
.word 0xfff
.word 0x7ff000
.word 0x800000
.word 0x800000
.word 0x7ff000
.word 0x1fff
.word 0x800000
.word 0x800000
.word 0x1fff
.word 0x7fe000
.word 0x800000
.word 0x800000
.word 0x7fe000
.word 0x3fff
.word 0x800000
.word 0x800000
.word 0x3fff
.word 0x7fc000
.word 0x800000
.word 0x800000
.word 0x7fc000
.word 0x7fff
.word 0x800000
.word 0x800000
.word 0x7fff
.word 0x7f8000
.word 0x800000
.word 0x800000
.word 0x7f8000
.word 0xffff
.word 0x800000
.word 0x800000
.word 0xffff
.word 0x7f0000
.word 0x800000
.word 0x800000
.word 0x7f0000
.word 0x1ffff
.word 0x800000
.word 0x800000
.word 0x1ffff
.word 0x7e0000
.word 0x800000
.word 0x800000
.word 0x7e0000
.word 0x3ffff
.word 0x800000
.word 0x800000
.word 0x3ffff
.word 0x7c0000
.word 0x800000
.word 0x800000
.word 0x7c0000
.word 0x7ffff
.word 0x800000
.word 0x800000
.word 0x7ffff
.word 0x780000
.word 0x800000
.word 0x800000
.word 0x780000
.word 0xfffff
.word 0x800000
.word 0x800000
.word 0xfffff
.word 0x700000
.word 0x800000
.word 0x800000
.word 0x700000
.word 0x1fffff
.word 0x800000
.word 0x800000
.word 0x1fffff
.word 0x600000
.word 0x800000
.word 0x800000
.word 0x600000
.word 0x3fffff
.word 0x800000
.word 0x800000
.word 0x3fffff
.word 0x400000
.word 0x800000
.word 0x800000
.word 0x400000
.word 0x7fffff
.word 0x800000
.word 0x800000
.word 0x7fffff
.word 0x36000001
.word 0x800000
.word 0x800000
.word 0x36000001
.word 0x36000000
.word 0x800000
.word 0x800000
.word 0x36000000
.word 0x367ffffe
.word 0x800000
.word 0x800000
.word 0x367ffffe
.word 0x36000003
.word 0x800000
.word 0x800000
.word 0x36000003
.word 0x367ffffc
.word 0x800000
.word 0x800000
.word 0x367ffffc
.word 0x36000007
.word 0x800000
.word 0x800000
.word 0x36000007
.word 0x367ffff8
.word 0x800000
.word 0x800000
.word 0x367ffff8
.word 0x3600000f
.word 0x800000
.word 0x800000
.word 0x3600000f
.word 0x367ffff0
.word 0x800000
.word 0x800000
.word 0x367ffff0
.word 0x3600001f
.word 0x800000
.word 0x800000
.word 0x3600001f
.word 0x367fffe0
.word 0x800000
.word 0x800000
.word 0x367fffe0
.word 0x3600003f
.word 0x800000
.word 0x800000
.word 0x3600003f
.word 0x367fffc0
.word 0x800000
.word 0x800000
.word 0x367fffc0
.word 0x3600007f
.word 0x800000
.word 0x800000
.word 0x3600007f
.word 0x367fff80
.word 0x800000
.word 0x800000
.word 0x367fff80
.word 0x360000ff
.word 0x800000
.word 0x800000
.word 0x360000ff
.word 0x367fff00
.word 0x800000
.word 0x800000
.word 0x367fff00
.word 0x360001ff
.word 0x800000
.word 0x800000
.word 0x360001ff
.word 0x367ffe00
.word 0x800000
.word 0x800000
.word 0x367ffe00
.word 0x360003ff
.word 0x800000
.word 0x800000
.word 0x360003ff
.word 0x367ffc00
.word 0x800000
.word 0x800000
.word 0x367ffc00
.word 0x360007ff
.word 0x800000
.word 0x800000
.word 0x360007ff
.word 0x367ff800
.word 0x800000
.word 0x800000
.word 0x367ff800
.word 0x36000fff
.word 0x800000
.word 0x800000
.word 0x36000fff
.word 0x367ff000
.word 0x800000
.word 0x800000
.word 0x367ff000
.word 0x36001fff
.word 0x800000
.word 0x800000
.word 0x36001fff
.word 0x367fe000
.word 0x800000
.word 0x800000
.word 0x367fe000
.word 0x36003fff
.word 0x800000
.word 0x800000
.word 0x36003fff
.word 0x367fc000
.word 0x800000
.word 0x800000
.word 0x367fc000
.word 0x36007fff
.word 0x800000
.word 0x800000
.word 0x36007fff
.word 0x367f8000
.word 0x800000
.word 0x800000
.word 0x367f8000
.word 0x3600ffff
.word 0x800000
.word 0x800000
.word 0x3600ffff
.word 0x367f0000
.word 0x800000
.word 0x800000
.word 0x367f0000
.word 0x3601ffff
.word 0x800000
.word 0x800000
.word 0x3601ffff
.word 0x367e0000
.word 0x800000
.word 0x800000
.word 0x367e0000
.word 0x3603ffff
.word 0x800000
.word 0x800000
.word 0x3603ffff
.word 0x367c0000
.word 0x800000
.word 0x800000
.word 0x367c0000
.word 0x3607ffff
.word 0x800000
.word 0x800000
.word 0x3607ffff
.word 0x36780000
.word 0x800000
.word 0x800000
.word 0x36780000
.word 0x360fffff
.word 0x800000
.word 0x800000
.word 0x360fffff
.word 0x36700000
.word 0x800000
.word 0x800000
.word 0x36700000
.word 0x361fffff
.word 0x800000
.word 0x800000
.word 0x361fffff
.word 0x36600000
.word 0x800000
.word 0x800000
.word 0x36600000
.word 0x363fffff
.word 0x800000
.word 0x800000
.word 0x363fffff
.word 0x36400000
.word 0x800000
.word 0x800000
.word 0x36400000
.word 0x367fffff
.word 0x800000
.word 0x800000
.word 0x367fffff
.word 0x804ccccc
.word 0x807fffff
.word 0x807fffff
.word 0x804ccccc
.word 0x80333333
.word 0x807fffff
.word 0x807fffff
.word 0x80333333
.word 0x805b6db6
.word 0x807fffff
.word 0x807fffff
.word 0x805b6db6
.word 0x80249249
.word 0x807fffff
.word 0x807fffff
.word 0x80249249
.word 0x80444444
.word 0x807fffff
.word 0x807fffff
.word 0x80444444
.word 0x803bbbbb
.word 0x807fffff
.word 0x807fffff
.word 0x803bbbbb
.word 0x80666666
.word 0x807fffff
.word 0x807fffff
.word 0x80666666
.word 0x80199999
.word 0x807fffff
.word 0x807fffff
.word 0x80199999
.word 0x806db6db
.word 0x807fffff
.word 0x807fffff
.word 0x806db6db
.word 0x8036db6d
.word 0x807fffff
.word 0x807fffff
.word 0x8036db6d
.word 0x80000001
.word 0x807fffff
.word 0x807fffff
.word 0x80000001
.word 0x807ffffe
.word 0x807fffff
.word 0x807fffff
.word 0x807ffffe
.word 0x80000003
.word 0x807fffff
.word 0x807fffff
.word 0x80000003
.word 0x807ffffc
.word 0x807fffff
.word 0x807fffff
.word 0x807ffffc
.word 0x80000007
.word 0x807fffff
.word 0x807fffff
.word 0x80000007
.word 0x807ffff8
.word 0x807fffff
.word 0x807fffff
.word 0x807ffff8
.word 0x81800001
.word 0x807fffff
.word 0x807fffff
.word 0x81800001
.word 0x81fffffe
.word 0x807fffff
.word 0x807fffff
.word 0x81fffffe
.word 0x81800003
.word 0x807fffff
.word 0x807fffff
.word 0x81800003
.word 0x81fffffc
.word 0x807fffff
.word 0x807fffff
.word 0x81fffffc
.word 0x81800007
.word 0x807fffff
.word 0x807fffff
.word 0x81800007
.word 0x81fffff8
.word 0x807fffff
.word 0x807fffff
.word 0x81fffff8
.word 0x8180000f
.word 0x807fffff
.word 0x807fffff
.word 0x8180000f
.word 0x81fffff0
.word 0x807fffff
.word 0x807fffff
.word 0x81fffff0
.word 0x8180001f
.word 0x807fffff
.word 0x807fffff
.word 0x8180001f
.word 0x81ffffe0
.word 0x807fffff
.word 0x807fffff
.word 0x81ffffe0
.word 0x8180003f
.word 0x807fffff
.word 0x807fffff
.word 0x8180003f
.word 0x81ffffc0
.word 0x807fffff
.word 0x807fffff
.word 0x81ffffc0
.word 0x8180007f
.word 0x807fffff
.word 0x807fffff
.word 0x8180007f
.word 0x81ffff80
.word 0x807fffff
.word 0x807fffff
.word 0x81ffff80
.word 0x818000ff
.word 0x807fffff
.word 0x807fffff
.word 0x818000ff
.word 0x81ffff00
.word 0x807fffff
.word 0x807fffff
.word 0x81ffff00
.word 0x818001ff
.word 0x807fffff
.word 0x807fffff
.word 0x818001ff
.word 0x81fffe00
.word 0x807fffff
.word 0x807fffff
.word 0x81fffe00
.word 0x818003ff
.word 0x807fffff
.word 0x807fffff
.word 0x818003ff
.word 0x81fffc00
.word 0x807fffff
.word 0x807fffff
.word 0x81fffc00
.word 0x818007ff
.word 0x807fffff
.word 0x807fffff
.word 0x818007ff
.word 0x81fff800
.word 0x807fffff
.word 0x807fffff
.word 0x81fff800
.word 0x81800fff
.word 0x807fffff
.word 0x807fffff
.word 0x81800fff
.word 0x81fff000
.word 0x807fffff
.word 0x807fffff
.word 0x81fff000
.word 0x81801fff
.word 0x807fffff
.word 0x807fffff
.word 0x81801fff
.word 0x81ffe000
.word 0x807fffff
.word 0x807fffff
.word 0x81ffe000
.word 0x81803fff
.word 0x807fffff
.word 0x807fffff
.word 0x81803fff
.word 0x81ffc000
.word 0x807fffff
.word 0x807fffff
.word 0x81ffc000
.word 0x81807fff
.word 0x807fffff
.word 0x807fffff
.word 0x81807fff
.word 0x81ff8000
.word 0x807fffff
.word 0x807fffff
.word 0x81ff8000
.word 0x8180ffff
.word 0x807fffff
.word 0x807fffff
.word 0x8180ffff
.word 0x81ff0000
.word 0x807fffff
.word 0x807fffff
.word 0x81ff0000
.word 0x8181ffff
.word 0x807fffff
.word 0x807fffff
.word 0x8181ffff
.word 0x81fe0000
.word 0x807fffff
.word 0x807fffff
.word 0x81fe0000
.word 0x8183ffff
.word 0x807fffff
.word 0x807fffff
.word 0x8183ffff
.word 0x81fc0000
.word 0x807fffff
.word 0x807fffff
.word 0x81fc0000
.word 0x8187ffff
.word 0x807fffff
.word 0x807fffff
.word 0x8187ffff
.word 0x81f80000
.word 0x807fffff
.word 0x807fffff
.word 0x81f80000
.word 0x818fffff
.word 0x807fffff
.word 0x807fffff
.word 0x818fffff
.word 0x81f00000
.word 0x807fffff
.word 0x807fffff
.word 0x81f00000
.word 0x819fffff
.word 0x807fffff
.word 0x807fffff
.word 0x819fffff
.word 0x81e00000
.word 0x807fffff
.word 0x807fffff
.word 0x81e00000
.word 0x81bfffff
.word 0x807fffff
.word 0x807fffff
.word 0x81bfffff
.word 0x81c00000
.word 0x807fffff
.word 0x807fffff
.word 0x81c00000
.word 0x81ffffff
.word 0x807fffff
.word 0x807fffff
.word 0x81ffffff
.word 0x81800000
.word 0x807fffff
.word 0x807fffff
.word 0x81800000
.word 0x81000001
.word 0x807fffff
.word 0x807fffff
.word 0x81000001
.word 0x817ffffe
.word 0x807fffff
.word 0x807fffff
.word 0x817ffffe
.word 0x81000003
.word 0x807fffff
.word 0x807fffff
.word 0x81000003
.word 0x817ffffc
.word 0x807fffff
.word 0x807fffff
.word 0x817ffffc
.word 0x81000007
.word 0x807fffff
.word 0x807fffff
.word 0x81000007
.word 0x817ffff8
.word 0x807fffff
.word 0x807fffff
.word 0x817ffff8
.word 0x8100000f
.word 0x807fffff
.word 0x807fffff
.word 0x8100000f
.word 0x817ffff0
.word 0x807fffff
.word 0x807fffff
.word 0x817ffff0
.word 0x8100001f
.word 0x807fffff
.word 0x807fffff
.word 0x8100001f
.word 0x817fffe0
.word 0x807fffff
.word 0x807fffff
.word 0x817fffe0
.word 0x8100003f
.word 0x807fffff
.word 0x807fffff
.word 0x8100003f
.word 0x817fffc0
.word 0x807fffff
.word 0x807fffff
.word 0x817fffc0
.word 0x8100007f
.word 0x807fffff
.word 0x807fffff
.word 0x8100007f
.word 0x817fff80
.word 0x807fffff
.word 0x807fffff
.word 0x817fff80
.word 0x810000ff
.word 0x807fffff
.word 0x807fffff
.word 0x810000ff
.word 0x817fff00
.word 0x807fffff
.word 0x807fffff
.word 0x817fff00
.word 0x810001ff
.word 0x807fffff
.word 0x807fffff
.word 0x810001ff
.word 0x817ffe00
.word 0x807fffff
.word 0x807fffff
.word 0x817ffe00
.word 0x810003ff
.word 0x807fffff
.word 0x807fffff
.word 0x810003ff
.word 0x817ffc00
.word 0x807fffff
.word 0x807fffff
.word 0x817ffc00
.word 0x810007ff
.word 0x807fffff
.word 0x807fffff
.word 0x810007ff
.word 0x817ff800
.word 0x807fffff
.word 0x807fffff
.word 0x817ff800
.word 0x81000fff
.word 0x807fffff
.word 0x807fffff
.word 0x81000fff
.word 0x817ff000
.word 0x807fffff
.word 0x807fffff
.word 0x817ff000
.word 0x81001fff
.word 0x807fffff
.word 0x807fffff
.word 0x81001fff
.word 0x817fe000
.word 0x807fffff
.word 0x807fffff
.word 0x817fe000
.word 0x81003fff
.word 0x807fffff
.word 0x807fffff
.word 0x81003fff
.word 0x817fc000
.word 0x807fffff
.word 0x807fffff
.word 0x817fc000
.word 0x81007fff
.word 0x807fffff
.word 0x807fffff
.word 0x81007fff
.word 0x817f8000
.word 0x807fffff
.word 0x807fffff
.word 0x817f8000
.word 0x8100ffff
.word 0x807fffff
.word 0x807fffff
.word 0x8100ffff
.word 0x817f0000
.word 0x807fffff
.word 0x807fffff
.word 0x817f0000
.word 0x8101ffff
.word 0x807fffff
.word 0x807fffff
.word 0x8101ffff
.word 0x817e0000
.word 0x807fffff
.word 0x807fffff
.word 0x817e0000
.word 0x8103ffff
.word 0x807fffff
.word 0x807fffff
.word 0x8103ffff
.word 0x817c0000
.word 0x807fffff
.word 0x807fffff
.word 0x817c0000
.word 0x8107ffff
.word 0x807fffff
.word 0x807fffff
.word 0x8107ffff
.word 0x81780000
.word 0x807fffff
.word 0x807fffff
.word 0x81780000
.word 0x810fffff
.word 0x807fffff
.word 0x807fffff
.word 0x810fffff
.word 0x81700000
.word 0x807fffff
.word 0x807fffff
.word 0x81700000
.word 0x811fffff
.word 0x807fffff
.word 0x807fffff
.word 0x811fffff
.word 0x81600000
.word 0x807fffff
.word 0x807fffff
.word 0x81600000
.word 0x813fffff
.word 0x807fffff
.word 0x807fffff
.word 0x813fffff
.word 0x81400000
.word 0x807fffff
.word 0x807fffff
.word 0x81400000
.word 0x817fffff
.word 0x807fffff
.word 0x807fffff
.word 0x817fffff
.word 0x81000000
.word 0x807fffff
.word 0x807fffff
.word 0x81000000
.word 0x80800001
.word 0x807fffff
.word 0x807fffff
.word 0x80800001
.word 0x80fffffe
.word 0x807fffff
.word 0x807fffff
.word 0x80fffffe
.word 0x80800003
.word 0x807fffff
.word 0x807fffff
.word 0x80800003
.word 0x80fffffc
.word 0x807fffff
.word 0x807fffff
.word 0x80fffffc
.word 0x80800007
.word 0x807fffff
.word 0x807fffff
.word 0x80800007
.word 0x80fffff8
.word 0x807fffff
.word 0x807fffff
.word 0x80fffff8
.word 0x8080000f
.word 0x807fffff
.word 0x807fffff
.word 0x8080000f
.word 0x80fffff0
.word 0x807fffff
.word 0x807fffff
.word 0x80fffff0
.word 0x8080001f
.word 0x807fffff
.word 0x807fffff
.word 0x8080001f
.word 0x80ffffe0
.word 0x807fffff
.word 0x807fffff
.word 0x80ffffe0
.word 0x8080003f
.word 0x807fffff
.word 0x807fffff
.word 0x8080003f
.word 0x80ffffc0
.word 0x807fffff
.word 0x807fffff
.word 0x80ffffc0
.word 0x8080007f
.word 0x807fffff
.word 0x807fffff
.word 0x8080007f
.word 0x80ffff80
.word 0x807fffff
.word 0x807fffff
.word 0x80ffff80
.word 0x808000ff
.word 0x807fffff
.word 0x807fffff
.word 0x808000ff
.word 0x80ffff00
.word 0x807fffff
.word 0x807fffff
.word 0x80ffff00
.word 0x808001ff
.word 0x807fffff
.word 0x807fffff
.word 0x808001ff
.word 0x80fffe00
.word 0x807fffff
.word 0x807fffff
.word 0x80fffe00
.word 0x808003ff
.word 0x807fffff
.word 0x807fffff
.word 0x808003ff
.word 0x80fffc00
.word 0x807fffff
.word 0x807fffff
.word 0x80fffc00
.word 0x808007ff
.word 0x807fffff
.word 0x807fffff
.word 0x808007ff
.word 0x80fff800
.word 0x807fffff
.word 0x807fffff
.word 0x80fff800
.word 0x80800fff
.word 0x807fffff
.word 0x807fffff
.word 0x80800fff
.word 0x80fff000
.word 0x807fffff
.word 0x807fffff
.word 0x80fff000
.word 0x80801fff
.word 0x807fffff
.word 0x807fffff
.word 0x80801fff
.word 0x80ffe000
.word 0x807fffff
.word 0x807fffff
.word 0x80ffe000
.word 0x80803fff
.word 0x807fffff
.word 0x807fffff
.word 0x80803fff
.word 0x80ffc000
.word 0x807fffff
.word 0x807fffff
.word 0x80ffc000
.word 0x80807fff
.word 0x807fffff
.word 0x807fffff
.word 0x80807fff
.word 0x80ff8000
.word 0x807fffff
.word 0x807fffff
.word 0x80ff8000
.word 0x8080ffff
.word 0x807fffff
.word 0x807fffff
.word 0x8080ffff
.word 0x80ff0000
.word 0x807fffff
.word 0x807fffff
.word 0x80ff0000
.word 0x8081ffff
.word 0x807fffff
.word 0x807fffff
.word 0x8081ffff
.word 0x80fe0000
.word 0x807fffff
.word 0x807fffff
.word 0x80fe0000
.word 0x8083ffff
.word 0x807fffff
.word 0x807fffff
.word 0x8083ffff
.word 0x80fc0000
.word 0x807fffff
.word 0x807fffff
.word 0x80fc0000
.word 0x8087ffff
.word 0x807fffff
.word 0x807fffff
.word 0x8087ffff
.word 0x80f80000
.word 0x807fffff
.word 0x807fffff
.word 0x80f80000
.word 0x808fffff
.word 0x807fffff
.word 0x807fffff
.word 0x808fffff
.word 0x80f00000
.word 0x807fffff
.word 0x807fffff
.word 0x80f00000
.word 0x809fffff
.word 0x807fffff
.word 0x807fffff
.word 0x809fffff
.word 0x80e00000
.word 0x807fffff
.word 0x807fffff
.word 0x80e00000
.word 0x80bfffff
.word 0x807fffff
.word 0x807fffff
.word 0x80bfffff
.word 0x80c00000
.word 0x807fffff
.word 0x807fffff
.word 0x80c00000
.word 0x80ffffff
.word 0x807fffff
.word 0x807fffff
.word 0x80ffffff
.word 0x8000000f
.word 0x807fffff
.word 0x807fffff
.word 0x8000000f
.word 0x807ffff0
.word 0x807fffff
.word 0x807fffff
.word 0x807ffff0
.word 0x8000001f
.word 0x807fffff
.word 0x807fffff
.word 0x8000001f
.word 0x807fffe0
.word 0x807fffff
.word 0x807fffff
.word 0x807fffe0
.word 0x8000003f
.word 0x807fffff
.word 0x807fffff
.word 0x8000003f
.word 0x807fffc0
.word 0x807fffff
.word 0x807fffff
.word 0x807fffc0
.word 0x8000007f
.word 0x807fffff
.word 0x807fffff
.word 0x8000007f
.word 0x807fff80
.word 0x807fffff
.word 0x807fffff
.word 0x807fff80
.word 0x800000ff
.word 0x807fffff
.word 0x807fffff
.word 0x800000ff
.word 0x807fff00
.word 0x807fffff
.word 0x807fffff
.word 0x807fff00
.word 0x800001ff
.word 0x807fffff
.word 0x807fffff
.word 0x800001ff
.word 0x807ffe00
.word 0x807fffff
.word 0x807fffff
.word 0x807ffe00
.word 0x800003ff
.word 0x807fffff
.word 0x807fffff
.word 0x800003ff
.word 0x807ffc00
.word 0x807fffff
.word 0x807fffff
.word 0x807ffc00
.word 0x800007ff
.word 0x807fffff
.word 0x807fffff
.word 0x800007ff
.word 0x807ff800
.word 0x807fffff
.word 0x807fffff
.word 0x807ff800
.word 0x80000fff
.word 0x807fffff
.word 0x807fffff
.word 0x80000fff
.word 0x807ff000
.word 0x807fffff
.word 0x807fffff
.word 0x807ff000
.word 0x80001fff
.word 0x807fffff
.word 0x807fffff
.word 0x80001fff
.word 0x807fe000
.word 0x807fffff
.word 0x807fffff
.word 0x807fe000
.word 0x80003fff
.word 0x807fffff
.word 0x807fffff
.word 0x80003fff
.word 0x807fc000
.word 0x807fffff
.word 0x807fffff
.word 0x807fc000
.word 0x80007fff
.word 0x807fffff
.word 0x807fffff
.word 0x80007fff
.word 0x807f8000
.word 0x807fffff
.word 0x807fffff
.word 0x807f8000
.word 0x8000ffff
.word 0x807fffff
.word 0x807fffff
.word 0x8000ffff
.word 0x807f0000
.word 0x807fffff
.word 0x807fffff
.word 0x807f0000
.word 0x8001ffff
.word 0x807fffff
.word 0x807fffff
.word 0x8001ffff
.word 0x807e0000
.word 0x807fffff
.word 0x807fffff
.word 0x807e0000
.word 0x8003ffff
.word 0x807fffff
.word 0x807fffff
.word 0x8003ffff
.word 0x807c0000
.word 0x807fffff
.word 0x807fffff
.word 0x807c0000
.word 0x8007ffff
.word 0x807fffff
.word 0x807fffff
.word 0x8007ffff
.word 0x80780000
.word 0x807fffff
.word 0x807fffff
.word 0x80780000
.word 0x800fffff
.word 0x807fffff
.word 0x807fffff
.word 0x800fffff
.word 0x80700000
.word 0x807fffff
.word 0x807fffff
.word 0x80700000
.word 0x801fffff
.word 0x807fffff
.word 0x807fffff
.word 0x801fffff
.word 0x80600000
.word 0x807fffff
.word 0x807fffff
.word 0x80600000
.word 0x803fffff
.word 0x807fffff
.word 0x807fffff
.word 0x803fffff
.word 0x80400000
.word 0x807fffff
.word 0x807fffff
.word 0x80400000
.word 0x807fffff
.word 0x807fffff
.word 0x80000000
.word 0x807fffff
.word 0x807fffff
.word 0x80000000
.word 0xc0000001
.word 0x807fffff
.word 0x807fffff
.word 0xc0000001
.word 0xc07ffffe
.word 0x807fffff
.word 0x807fffff
.word 0xc07ffffe
.word 0xc0000003
.word 0x807fffff
.word 0x807fffff
.word 0xc0000003
.word 0xc07ffffc
.word 0x807fffff
.word 0x807fffff
.word 0xc07ffffc
.word 0xc0000007
.word 0x807fffff
.word 0x807fffff
.word 0xc0000007
.word 0xc07ffff8
.word 0x807fffff
.word 0x807fffff
.word 0xc07ffff8
.word 0xc000000f
.word 0x807fffff
.word 0x807fffff
.word 0xc000000f
.word 0xc07ffff0
.word 0x807fffff
.word 0x807fffff
.word 0xc07ffff0
.word 0xc000001f
.word 0x807fffff
.word 0x807fffff
.word 0xc000001f
.word 0xc07fffe0
.word 0x807fffff
.word 0x807fffff
.word 0xc07fffe0
.word 0xc000003f
.word 0x807fffff
.word 0x807fffff
.word 0xc000003f
.word 0xc07fffc0
.word 0x807fffff
.word 0x807fffff
.word 0xc07fffc0
.word 0xc000007f
.word 0x807fffff
.word 0x807fffff
.word 0xc000007f
.word 0xc07fff80
.word 0x807fffff
.word 0x807fffff
.word 0xc07fff80
.word 0xc00000ff
.word 0x807fffff
.word 0x807fffff
.word 0xc00000ff
.word 0xc07fff00
.word 0x807fffff
.word 0x807fffff
.word 0xc07fff00
.word 0xc00001ff
.word 0x807fffff
.word 0x807fffff
.word 0xc00001ff
.word 0xc07ffe00
.word 0x807fffff
.word 0x807fffff
.word 0xc07ffe00
.word 0xc00003ff
.word 0x807fffff
.word 0x807fffff
.word 0xc00003ff
.word 0xc07ffc00
.word 0x807fffff
.word 0x807fffff
.word 0xc07ffc00
.word 0xc00007ff
.word 0x807fffff
.word 0x807fffff
.word 0xc00007ff
.word 0xc07ff800
.word 0x807fffff
.word 0x807fffff
.word 0xc07ff800
.word 0xc0000fff
.word 0x807fffff
.word 0x807fffff
.word 0xc0000fff
.word 0xc07ff000
.word 0x807fffff
.word 0x807fffff
.word 0xc07ff000
.word 0xc0001fff
.word 0x807fffff
.word 0x807fffff
.word 0xc0001fff
.word 0xc07fe000
.word 0x807fffff
.word 0x807fffff
.word 0xc07fe000
.word 0xc0003fff
.word 0x807fffff
.word 0x807fffff
.word 0xc0003fff
.word 0xc07fc000
.word 0x807fffff
.word 0x807fffff
.word 0xc07fc000
.word 0xc0007fff
.word 0x807fffff
.word 0x807fffff
.word 0xc0007fff
.word 0xc07f8000
.word 0x807fffff
.word 0x807fffff
.word 0xc07f8000
.word 0xc000ffff
.word 0x807fffff
.word 0x807fffff
.word 0xc000ffff
.word 0xc07f0000
.word 0x807fffff
.word 0x807fffff
.word 0xc07f0000
.word 0xc001ffff
.word 0x807fffff
.word 0x807fffff
.word 0xc001ffff
.word 0xc07e0000
.word 0x807fffff
.word 0x807fffff
.word 0xc07e0000
.word 0xc003ffff
.word 0x807fffff
.word 0x807fffff
.word 0xc003ffff
.word 0xc07c0000
.word 0x807fffff
.word 0x807fffff
.word 0xc07c0000
.word 0xc007ffff
.word 0x807fffff
.word 0x807fffff
.word 0xc007ffff
.word 0xc0780000
.word 0x807fffff
.word 0x807fffff
.word 0xc0780000
.word 0xc00fffff
.word 0x807fffff
.word 0x807fffff
.word 0xc00fffff
.word 0xc0700000
.word 0x807fffff
.word 0x807fffff
.word 0xc0700000
.word 0xc01fffff
.word 0x807fffff
.word 0x807fffff
.word 0xc01fffff
.word 0xc0600000
.word 0x807fffff
.word 0x807fffff
.word 0xc0600000
.word 0xc03fffff
.word 0x807fffff
.word 0x807fffff
.word 0xc03fffff
.word 0xc0400000
.word 0x807fffff
.word 0x807fffff
.word 0xc0400000
.word 0xc07fffff
.word 0x807fffff
.word 0x807fffff
.word 0xc07fffff
.word 0xc0000000
.word 0x807fffff
.word 0x807fffff
.word 0xc0000000
.word 0x4ccccc
.word 0x7fffff
.word 0x7fffff
.word 0x4ccccc
.word 0x333333
.word 0x7fffff
.word 0x7fffff
.word 0x333333
.word 0x5b6db6
.word 0x7fffff
.word 0x7fffff
.word 0x5b6db6
.word 0x249249
.word 0x7fffff
.word 0x7fffff
.word 0x249249
.word 0x444444
.word 0x7fffff
.word 0x7fffff
.word 0x444444
.word 0x3bbbbb
.word 0x7fffff
.word 0x7fffff
.word 0x3bbbbb
.word 0x666666
.word 0x7fffff
.word 0x7fffff
.word 0x666666
.word 0x199999
.word 0x7fffff
.word 0x7fffff
.word 0x199999
.word 0x6db6db
.word 0x7fffff
.word 0x7fffff
.word 0x6db6db
.word 0x36db6d
.word 0x7fffff
.word 0x7fffff
.word 0x36db6d
.word 0x1
.word 0x7fffff
.word 0x7fffff
.word 0x1
.word 0x7ffffe
.word 0x7fffff
.word 0x7fffff
.word 0x7ffffe
.word 0x3
.word 0x7fffff
.word 0x7fffff
.word 0x3
.word 0x7ffffc
.word 0x7fffff
.word 0x7fffff
.word 0x7ffffc
.word 0x7
.word 0x7fffff
.word 0x7fffff
.word 0x7
.word 0x7ffff8
.word 0x7fffff
.word 0x7fffff
.word 0x7ffff8
.word 0x1800001
.word 0x7fffff
.word 0x7fffff
.word 0x1800001
.word 0x1fffffe
.word 0x7fffff
.word 0x7fffff
.word 0x1fffffe
.word 0x1800003
.word 0x7fffff
.word 0x7fffff
.word 0x1800003
.word 0x1fffffc
.word 0x7fffff
.word 0x7fffff
.word 0x1fffffc
.word 0x1800007
.word 0x7fffff
.word 0x7fffff
.word 0x1800007
.word 0x1fffff8
.word 0x7fffff
.word 0x7fffff
.word 0x1fffff8
.word 0x180000f
.word 0x7fffff
.word 0x7fffff
.word 0x180000f
.word 0x1fffff0
.word 0x7fffff
.word 0x7fffff
.word 0x1fffff0
.word 0x180001f
.word 0x7fffff
.word 0x7fffff
.word 0x180001f
.word 0x1ffffe0
.word 0x7fffff
.word 0x7fffff
.word 0x1ffffe0
.word 0x180003f
.word 0x7fffff
.word 0x7fffff
.word 0x180003f
.word 0x1ffffc0
.word 0x7fffff
.word 0x7fffff
.word 0x1ffffc0
.word 0x180007f
.word 0x7fffff
.word 0x7fffff
.word 0x180007f
.word 0x1ffff80
.word 0x7fffff
.word 0x7fffff
.word 0x1ffff80
.word 0x18000ff
.word 0x7fffff
.word 0x7fffff
.word 0x18000ff
.word 0x1ffff00
.word 0x7fffff
.word 0x7fffff
.word 0x1ffff00
.word 0x18001ff
.word 0x7fffff
.word 0x7fffff
.word 0x18001ff
.word 0x1fffe00
.word 0x7fffff
.word 0x7fffff
.word 0x1fffe00
.word 0x18003ff
.word 0x7fffff
.word 0x7fffff
.word 0x18003ff
.word 0x1fffc00
.word 0x7fffff
.word 0x7fffff
.word 0x1fffc00
.word 0x18007ff
.word 0x7fffff
.word 0x7fffff
.word 0x18007ff
.word 0x1fff800
.word 0x7fffff
.word 0x7fffff
.word 0x1fff800
.word 0x1800fff
.word 0x7fffff
.word 0x7fffff
.word 0x1800fff
.word 0x1fff000
.word 0x7fffff
.word 0x7fffff
.word 0x1fff000
.word 0x1801fff
.word 0x7fffff
.word 0x7fffff
.word 0x1801fff
.word 0x1ffe000
.word 0x7fffff
.word 0x7fffff
.word 0x1ffe000
.word 0x1803fff
.word 0x7fffff
.word 0x7fffff
.word 0x1803fff
.word 0x1ffc000
.word 0x7fffff
.word 0x7fffff
.word 0x1ffc000
.word 0x1807fff
.word 0x7fffff
.word 0x7fffff
.word 0x1807fff
.word 0x1ff8000
.word 0x7fffff
.word 0x7fffff
.word 0x1ff8000
.word 0x180ffff
.word 0x7fffff
.word 0x7fffff
.word 0x180ffff
.word 0x1ff0000
.word 0x7fffff
.word 0x7fffff
.word 0x1ff0000
.word 0x181ffff
.word 0x7fffff
.word 0x7fffff
.word 0x181ffff
.word 0x1fe0000
.word 0x7fffff
.word 0x7fffff
.word 0x1fe0000
.word 0x183ffff
.word 0x7fffff
.word 0x7fffff
.word 0x183ffff
.word 0x1fc0000
.word 0x7fffff
.word 0x7fffff
.word 0x1fc0000
.word 0x187ffff
.word 0x7fffff
.word 0x7fffff
.word 0x187ffff
.word 0x1f80000
.word 0x7fffff
.word 0x7fffff
.word 0x1f80000
.word 0x18fffff
.word 0x7fffff
.word 0x7fffff
.word 0x18fffff
.word 0x1f00000
.word 0x7fffff
.word 0x7fffff
.word 0x1f00000
.word 0x19fffff
.word 0x7fffff
.word 0x7fffff
.word 0x19fffff
.word 0x1e00000
.word 0x7fffff
.word 0x7fffff
.word 0x1e00000
.word 0x1bfffff
.word 0x7fffff
.word 0x7fffff
.word 0x1bfffff
.word 0x1c00000
.word 0x7fffff
.word 0x7fffff
.word 0x1c00000
.word 0x1ffffff
.word 0x7fffff
.word 0x7fffff
.word 0x1ffffff
.word 0x1800000
.word 0x7fffff
.word 0x7fffff
.word 0x1800000
.word 0x1000001
.word 0x7fffff
.word 0x7fffff
.word 0x1000001
.word 0x17ffffe
.word 0x7fffff
.word 0x7fffff
.word 0x17ffffe
.word 0x1000003
.word 0x7fffff
.word 0x7fffff
.word 0x1000003
.word 0x17ffffc
.word 0x7fffff
.word 0x7fffff
.word 0x17ffffc
.word 0x1000007
.word 0x7fffff
.word 0x7fffff
.word 0x1000007
.word 0x17ffff8
.word 0x7fffff
.word 0x7fffff
.word 0x17ffff8
.word 0x100000f
.word 0x7fffff
.word 0x7fffff
.word 0x100000f
.word 0x17ffff0
.word 0x7fffff
.word 0x7fffff
.word 0x17ffff0
.word 0x100001f
.word 0x7fffff
.word 0x7fffff
.word 0x100001f
.word 0x17fffe0
.word 0x7fffff
.word 0x7fffff
.word 0x17fffe0
.word 0x100003f
.word 0x7fffff
.word 0x7fffff
.word 0x100003f
.word 0x17fffc0
.word 0x7fffff
.word 0x7fffff
.word 0x17fffc0
.word 0x100007f
.word 0x7fffff
.word 0x7fffff
.word 0x100007f
.word 0x17fff80
.word 0x7fffff
.word 0x7fffff
.word 0x17fff80
.word 0x10000ff
.word 0x7fffff
.word 0x7fffff
.word 0x10000ff
.word 0x17fff00
.word 0x7fffff
.word 0x7fffff
.word 0x17fff00
.word 0x10001ff
.word 0x7fffff
.word 0x7fffff
.word 0x10001ff
.word 0x17ffe00
.word 0x7fffff
.word 0x7fffff
.word 0x17ffe00
.word 0x10003ff
.word 0x7fffff
.word 0x7fffff
.word 0x10003ff
.word 0x17ffc00
.word 0x7fffff
.word 0x7fffff
.word 0x17ffc00
.word 0x10007ff
.word 0x7fffff
.word 0x7fffff
.word 0x10007ff
.word 0x17ff800
.word 0x7fffff
.word 0x7fffff
.word 0x17ff800
.word 0x1000fff
.word 0x7fffff
.word 0x7fffff
.word 0x1000fff
.word 0x17ff000
.word 0x7fffff
.word 0x7fffff
.word 0x17ff000
.word 0x1001fff
.word 0x7fffff
.word 0x7fffff
.word 0x1001fff
.word 0x17fe000
.word 0x7fffff
.word 0x7fffff
.word 0x17fe000
.word 0x1003fff
.word 0x7fffff
.word 0x7fffff
.word 0x1003fff
.word 0x17fc000
.word 0x7fffff
.word 0x7fffff
.word 0x17fc000
.word 0x1007fff
.word 0x7fffff
.word 0x7fffff
.word 0x1007fff
.word 0x17f8000
.word 0x7fffff
.word 0x7fffff
.word 0x17f8000
.word 0x100ffff
.word 0x7fffff
.word 0x7fffff
.word 0x100ffff
.word 0x17f0000
.word 0x7fffff
.word 0x7fffff
.word 0x17f0000
.word 0x101ffff
.word 0x7fffff
.word 0x7fffff
.word 0x101ffff
.word 0x17e0000
.word 0x7fffff
.word 0x7fffff
.word 0x17e0000
.word 0x103ffff
.word 0x7fffff
.word 0x7fffff
.word 0x103ffff
.word 0x17c0000
.word 0x7fffff
.word 0x7fffff
.word 0x17c0000
.word 0x107ffff
.word 0x7fffff
.word 0x7fffff
.word 0x107ffff
.word 0x1780000
.word 0x7fffff
.word 0x7fffff
.word 0x1780000
.word 0x10fffff
.word 0x7fffff
.word 0x7fffff
.word 0x10fffff
.word 0x1700000
.word 0x7fffff
.word 0x7fffff
.word 0x1700000
.word 0x11fffff
.word 0x7fffff
.word 0x7fffff
.word 0x11fffff
.word 0x1600000
.word 0x7fffff
.word 0x7fffff
.word 0x1600000
.word 0x13fffff
.word 0x7fffff
.word 0x7fffff
.word 0x13fffff
.word 0x1400000
.word 0x7fffff
.word 0x7fffff
.word 0x1400000
.word 0x17fffff
.word 0x7fffff
.word 0x7fffff
.word 0x17fffff
.word 0x1000000
.word 0x7fffff
.word 0x7fffff
.word 0x1000000
.word 0x800001
.word 0x7fffff
.word 0x7fffff
.word 0x800001
.word 0xfffffe
.word 0x7fffff
.word 0x7fffff
.word 0xfffffe
.word 0x800003
.word 0x7fffff
.word 0x7fffff
.word 0x800003
.word 0xfffffc
.word 0x7fffff
.word 0x7fffff
.word 0xfffffc
.word 0x800007
.word 0x7fffff
.word 0x7fffff
.word 0x800007
.word 0xfffff8
.word 0x7fffff
.word 0x7fffff
.word 0xfffff8
.word 0x80000f
.word 0x7fffff
.word 0x7fffff
.word 0x80000f
.word 0xfffff0
.word 0x7fffff
.word 0x7fffff
.word 0xfffff0
.word 0x80001f
.word 0x7fffff
.word 0x7fffff
.word 0x80001f
.word 0xffffe0
.word 0x7fffff
.word 0x7fffff
.word 0xffffe0
.word 0x80003f
.word 0x7fffff
.word 0x7fffff
.word 0x80003f
.word 0xffffc0
.word 0x7fffff
.word 0x7fffff
.word 0xffffc0
.word 0x80007f
.word 0x7fffff
.word 0x7fffff
.word 0x80007f
.word 0xffff80
.word 0x7fffff
.word 0x7fffff
.word 0xffff80
.word 0x8000ff
.word 0x7fffff
.word 0x7fffff
.word 0x8000ff
.word 0xffff00
.word 0x7fffff
.word 0x7fffff
.word 0xffff00
.word 0x8001ff
.word 0x7fffff
.word 0x7fffff
.word 0x8001ff
.word 0xfffe00
.word 0x7fffff
.word 0x7fffff
.word 0xfffe00
.word 0x8003ff
.word 0x7fffff
.word 0x7fffff
.word 0x8003ff
.word 0xfffc00
.word 0x7fffff
.word 0x7fffff
.word 0xfffc00
.word 0x8007ff
.word 0x7fffff
.word 0x7fffff
.word 0x8007ff
.word 0xfff800
.word 0x7fffff
.word 0x7fffff
.word 0xfff800
.word 0x800fff
.word 0x7fffff
.word 0x7fffff
.word 0x800fff
.word 0xfff000
.word 0x7fffff
.word 0x7fffff
.word 0xfff000
.word 0x801fff
.word 0x7fffff
.word 0x7fffff
.word 0x801fff
.word 0xffe000
.word 0x7fffff
.word 0x7fffff
.word 0xffe000
.word 0x803fff
.word 0x7fffff
.word 0x7fffff
.word 0x803fff
.word 0xffc000
.word 0x7fffff
.word 0x7fffff
.word 0xffc000
.word 0x807fff
.word 0x7fffff
.word 0x7fffff
.word 0x807fff
.word 0xff8000
.word 0x7fffff
.word 0x7fffff
.word 0xff8000
.word 0x80ffff
.word 0x7fffff
.word 0x7fffff
.word 0x80ffff
.word 0xff0000
.word 0x7fffff
.word 0x7fffff
.word 0xff0000
.word 0x81ffff
.word 0x7fffff
.word 0x7fffff
.word 0x81ffff
.word 0xfe0000
.word 0x7fffff
.word 0x7fffff
.word 0xfe0000
.word 0x83ffff
.word 0x7fffff
.word 0x7fffff
.word 0x83ffff
.word 0xfc0000
.word 0x7fffff
.word 0x7fffff
.word 0xfc0000
.word 0x87ffff
.word 0x7fffff
.word 0x7fffff
.word 0x87ffff
.word 0xf80000
.word 0x7fffff
.word 0x7fffff
.word 0xf80000
.word 0x8fffff
.word 0x7fffff
.word 0x7fffff
.word 0x8fffff
.word 0xf00000
.word 0x7fffff
.word 0x7fffff
.word 0xf00000
.word 0x9fffff
.word 0x7fffff
.word 0x7fffff
.word 0x9fffff
.word 0xe00000
.word 0x7fffff
.word 0x7fffff
.word 0xe00000
.word 0xbfffff
.word 0x7fffff
.word 0x7fffff
.word 0xbfffff
.word 0xc00000
.word 0x7fffff
.word 0x7fffff
.word 0xc00000
.word 0xffffff
.word 0x7fffff
.word 0x7fffff
.word 0xffffff
.word 0xf
.word 0x7fffff
.word 0x7fffff
.word 0xf
.word 0x7ffff0
.word 0x7fffff
.word 0x7fffff
.word 0x7ffff0
.word 0x1f
.word 0x7fffff
.word 0x7fffff
.word 0x1f
.word 0x7fffe0
.word 0x7fffff
.word 0x7fffff
.word 0x7fffe0
.word 0x3f
.word 0x7fffff
.word 0x7fffff
.word 0x3f
.word 0x7fffc0
.word 0x7fffff
.word 0x7fffff
.word 0x7fffc0
.word 0x7f
.word 0x7fffff
.word 0x7fffff
.word 0x7f
.word 0x7fff80
.word 0x7fffff
.word 0x7fffff
.word 0x7fff80
.word 0xff
.word 0x7fffff
.word 0x7fffff
.word 0xff
.word 0x7fff00
.word 0x7fffff
.word 0x7fffff
.word 0x7fff00
.word 0x1ff
.word 0x7fffff
.word 0x7fffff
.word 0x1ff
.word 0x7ffe00
.word 0x7fffff
.word 0x7fffff
.word 0x7ffe00
.word 0x3ff
.word 0x7fffff
.word 0x7fffff
.word 0x3ff
.word 0x7ffc00
.word 0x7fffff
.word 0x7fffff
.word 0x7ffc00
.word 0x7ff
.word 0x7fffff
.word 0x7fffff
.word 0x7ff
.word 0x7ff800
.word 0x7fffff
.word 0x7fffff
.word 0x7ff800
.word 0xfff
.word 0x7fffff
.word 0x7fffff
.word 0xfff
.word 0x7ff000
.word 0x7fffff
.word 0x7fffff
.word 0x7ff000
.word 0x1fff
.word 0x7fffff
.word 0x7fffff
.word 0x1fff
.word 0x7fe000
.word 0x7fffff
.word 0x7fffff
.word 0x7fe000
.word 0x3fff
.word 0x7fffff
.word 0x7fffff
.word 0x3fff
.word 0x7fc000
.word 0x7fffff
.word 0x7fffff
.word 0x7fc000
.word 0x7fff
.word 0x7fffff
.word 0x7fffff
.word 0x7fff
.word 0x7f8000
.word 0x7fffff
.word 0x7fffff
.word 0x7f8000
.word 0xffff
.word 0x7fffff
.word 0x7fffff
.word 0xffff
.word 0x7f0000
.word 0x7fffff
.word 0x7fffff
.word 0x7f0000
.word 0x1ffff
.word 0x7fffff
.word 0x7fffff
.word 0x1ffff
.word 0x7e0000
.word 0x7fffff
.word 0x7fffff
.word 0x7e0000
.word 0x3ffff
.word 0x7fffff
.word 0x7fffff
.word 0x3ffff
.word 0x7c0000
.word 0x7fffff
.word 0x7fffff
.word 0x7c0000
.word 0x7ffff
.word 0x7fffff
.word 0x7fffff
.word 0x7ffff
.word 0x780000
.word 0x7fffff
.word 0x7fffff
.word 0x780000
.word 0xfffff
.word 0x7fffff
.word 0x7fffff
.word 0xfffff
.word 0x700000
.word 0x7fffff
.word 0x7fffff
.word 0x700000
.word 0x1fffff
.word 0x7fffff
.word 0x7fffff
.word 0x1fffff
.word 0x600000
.word 0x7fffff
.word 0x7fffff
.word 0x600000
.word 0x3fffff
.word 0x7fffff
.word 0x7fffff
.word 0x3fffff
.word 0x400000
.word 0x7fffff
.word 0x7fffff
.word 0x400000
.word 0x7fffff
.word 0x7fffff
.word 0x0
.word 0x7fffff
.word 0x7fffff
.word 0x0
.word 0x43000001
.word 0x7fffff
.word 0x7fffff
.word 0x43000001
.word 0x437ffffe
.word 0x7fffff
.word 0x7fffff
.word 0x437ffffe
.word 0x43000003
.word 0x7fffff
.word 0x7fffff
.word 0x43000003
.word 0x437ffffc
.word 0x7fffff
.word 0x7fffff
.word 0x437ffffc
.word 0x43000007
.word 0x7fffff
.word 0x7fffff
.word 0x43000007
.word 0x437ffff8
.word 0x7fffff
.word 0x7fffff
.word 0x437ffff8
.word 0x4300000f
.word 0x7fffff
.word 0x7fffff
.word 0x4300000f
.word 0x437ffff0
.word 0x7fffff
.word 0x7fffff
.word 0x437ffff0
.word 0x4300001f
.word 0x7fffff
.word 0x7fffff
.word 0x4300001f
.word 0x437fffe0
.word 0x7fffff
.word 0x7fffff
.word 0x437fffe0
.word 0x4300003f
.word 0x7fffff
.word 0x7fffff
.word 0x4300003f
.word 0x437fffc0
.word 0x7fffff
.word 0x7fffff
.word 0x437fffc0
.word 0x4300007f
.word 0x7fffff
.word 0x7fffff
.word 0x4300007f
.word 0x437fff80
.word 0x7fffff
.word 0x7fffff
.word 0x437fff80
.word 0x430000ff
.word 0x7fffff
.word 0x7fffff
.word 0x430000ff
.word 0x437fff00
.word 0x7fffff
.word 0x7fffff
.word 0x437fff00
.word 0x430001ff
.word 0x7fffff
.word 0x7fffff
.word 0x430001ff
.word 0x437ffe00
.word 0x7fffff
.word 0x7fffff
.word 0x437ffe00
.word 0x430003ff
.word 0x7fffff
.word 0x7fffff
.word 0x430003ff
.word 0x437ffc00
.word 0x7fffff
.word 0x7fffff
.word 0x437ffc00
.word 0x430007ff
.word 0x7fffff
.word 0x7fffff
.word 0x430007ff
.word 0x437ff800
.word 0x7fffff
.word 0x7fffff
.word 0x437ff800
.word 0x43000fff
.word 0x7fffff
.word 0x7fffff
.word 0x43000fff
.word 0x437ff000
.word 0x7fffff
.word 0x7fffff
.word 0x437ff000
.word 0x43001fff
.word 0x7fffff
.word 0x7fffff
.word 0x43001fff
.word 0x437fe000
.word 0x7fffff
.word 0x7fffff
.word 0x437fe000
.word 0x43003fff
.word 0x7fffff
.word 0x7fffff
.word 0x43003fff
.word 0x437fc000
.word 0x7fffff
.word 0x7fffff
.word 0x437fc000
.word 0x43007fff
.word 0x7fffff
.word 0x7fffff
.word 0x43007fff
.word 0x437f8000
.word 0x7fffff
.word 0x7fffff
.word 0x437f8000
.word 0x4300ffff
.word 0x7fffff
.word 0x7fffff
.word 0x4300ffff
.word 0x437f0000
.word 0x7fffff
.word 0x7fffff
.word 0x437f0000
.word 0x4301ffff
.word 0x7fffff
.word 0x7fffff
.word 0x4301ffff
.word 0x437e0000
.word 0x7fffff
.word 0x7fffff
.word 0x437e0000
.word 0x4303ffff
.word 0x7fffff
.word 0x7fffff
.word 0x4303ffff
.word 0x437c0000
.word 0x7fffff
.word 0x7fffff
.word 0x437c0000
.word 0x4307ffff
.word 0x7fffff
.word 0x7fffff
.word 0x4307ffff
.word 0x43780000
.word 0x7fffff
.word 0x7fffff
.word 0x43780000
.word 0x430fffff
.word 0x7fffff
.word 0x7fffff
.word 0x430fffff
.word 0x43700000
.word 0x7fffff
.word 0x7fffff
.word 0x43700000
.word 0x431fffff
.word 0x7fffff
.word 0x7fffff
.word 0x431fffff
.word 0x43600000
.word 0x7fffff
.word 0x7fffff
.word 0x43600000
.word 0x433fffff
.word 0x7fffff
.word 0x7fffff
.word 0x433fffff
.word 0x43400000
.word 0x7fffff
.word 0x7fffff
.word 0x43400000
.word 0x437fffff
.word 0x7fffff
.word 0x7fffff
.word 0x437fffff
.word 0x43000000
.word 0x7fffff
.word 0x7fffff
.word 0x43000000
.word 0x804ccccc
.word 0x80000001
.word 0x80000001
.word 0x804ccccc
.word 0x80333333
.word 0x80000001
.word 0x80000001
.word 0x80333333
.word 0x805b6db6
.word 0x80000001
.word 0x80000001
.word 0x805b6db6
.word 0x80249249
.word 0x80000001
.word 0x80000001
.word 0x80249249
.word 0x80444444
.word 0x80000001
.word 0x80000001
.word 0x80444444
.word 0x803bbbbb
.word 0x80000001
.word 0x80000001
.word 0x803bbbbb
.word 0x80666666
.word 0x80000001
.word 0x80000001
.word 0x80666666
.word 0x80199999
.word 0x80000001
.word 0x80000001
.word 0x80199999
.word 0x806db6db
.word 0x80000001
.word 0x80000001
.word 0x806db6db
.word 0x8036db6d
.word 0x80000001
.word 0x80000001
.word 0x8036db6d
.word 0x80000001
.word 0x80000001
.word 0x807ffffe
.word 0x80000001
.word 0x80000001
.word 0x807ffffe
.word 0x80000003
.word 0x80000001
.word 0x80000001
.word 0x80000003
.word 0x807ffffc
.word 0x80000001
.word 0x80000001
.word 0x807ffffc
.word 0x80000007
.word 0x80000001
.word 0x80000001
.word 0x80000007
.word 0x807ffff8
.word 0x80000001
.word 0x80000001
.word 0x807ffff8
.word 0x81800001
.word 0x80000001
.word 0x80000001
.word 0x81800001
.word 0x81800000
.word 0x80000001
.word 0x80000001
.word 0x81800000
.word 0x81fffffe
.word 0x80000001
.word 0x80000001
.word 0x81fffffe
.word 0x81800003
.word 0x80000001
.word 0x80000001
.word 0x81800003
.word 0x81fffffc
.word 0x80000001
.word 0x80000001
.word 0x81fffffc
.word 0x81800007
.word 0x80000001
.word 0x80000001
.word 0x81800007
.word 0x81fffff8
.word 0x80000001
.word 0x80000001
.word 0x81fffff8
.word 0x8180000f
.word 0x80000001
.word 0x80000001
.word 0x8180000f
.word 0x81fffff0
.word 0x80000001
.word 0x80000001
.word 0x81fffff0
.word 0x8180001f
.word 0x80000001
.word 0x80000001
.word 0x8180001f
.word 0x81ffffe0
.word 0x80000001
.word 0x80000001
.word 0x81ffffe0
.word 0x8180003f
.word 0x80000001
.word 0x80000001
.word 0x8180003f
.word 0x81ffffc0
.word 0x80000001
.word 0x80000001
.word 0x81ffffc0
.word 0x8180007f
.word 0x80000001
.word 0x80000001
.word 0x8180007f
.word 0x81ffff80
.word 0x80000001
.word 0x80000001
.word 0x81ffff80
.word 0x818000ff
.word 0x80000001
.word 0x80000001
.word 0x818000ff
.word 0x81ffff00
.word 0x80000001
.word 0x80000001
.word 0x81ffff00
.word 0x818001ff
.word 0x80000001
.word 0x80000001
.word 0x818001ff
.word 0x81fffe00
.word 0x80000001
.word 0x80000001
.word 0x81fffe00
.word 0x818003ff
.word 0x80000001
.word 0x80000001
.word 0x818003ff
.word 0x81fffc00
.word 0x80000001
.word 0x80000001
.word 0x81fffc00
.word 0x818007ff
.word 0x80000001
.word 0x80000001
.word 0x818007ff
.word 0x81fff800
.word 0x80000001
.word 0x80000001
.word 0x81fff800
.word 0x81800fff
.word 0x80000001
.word 0x80000001
.word 0x81800fff
.word 0x81fff000
.word 0x80000001
.word 0x80000001
.word 0x81fff000
.word 0x81801fff
.word 0x80000001
.word 0x80000001
.word 0x81801fff
.word 0x81ffe000
.word 0x80000001
.word 0x80000001
.word 0x81ffe000
.word 0x81803fff
.word 0x80000001
.word 0x80000001
.word 0x81803fff
.word 0x81ffc000
.word 0x80000001
.word 0x80000001
.word 0x81ffc000
.word 0x81807fff
.word 0x80000001
.word 0x80000001
.word 0x81807fff
.word 0x81ff8000
.word 0x80000001
.word 0x80000001
.word 0x81ff8000
.word 0x8180ffff
.word 0x80000001
.word 0x80000001
.word 0x8180ffff
.word 0x81ff0000
.word 0x80000001
.word 0x80000001
.word 0x81ff0000
.word 0x8181ffff
.word 0x80000001
.word 0x80000001
.word 0x8181ffff
.word 0x81fe0000
.word 0x80000001
.word 0x80000001
.word 0x81fe0000
.word 0x8183ffff
.word 0x80000001
.word 0x80000001
.word 0x8183ffff
.word 0x81fc0000
.word 0x80000001
.word 0x80000001
.word 0x81fc0000
.word 0x8187ffff
.word 0x80000001
.word 0x80000001
.word 0x8187ffff
.word 0x81f80000
.word 0x80000001
.word 0x80000001
.word 0x81f80000
.word 0x818fffff
.word 0x80000001
.word 0x80000001
.word 0x818fffff
.word 0x81f00000
.word 0x80000001
.word 0x80000001
.word 0x81f00000
.word 0x819fffff
.word 0x80000001
.word 0x80000001
.word 0x819fffff
.word 0x81e00000
.word 0x80000001
.word 0x80000001
.word 0x81e00000
.word 0x81bfffff
.word 0x80000001
.word 0x80000001
.word 0x81bfffff
.word 0x81c00000
.word 0x80000001
.word 0x80000001
.word 0x81c00000
.word 0x81ffffff
.word 0x80000001
.word 0x80000001
.word 0x81ffffff
.word 0x81000001
.word 0x80000001
.word 0x80000001
.word 0x81000001
.word 0x81000000
.word 0x80000001
.word 0x80000001
.word 0x81000000
.word 0x817ffffe
.word 0x80000001
.word 0x80000001
.word 0x817ffffe
.word 0x81000003
.word 0x80000001
.word 0x80000001
.word 0x81000003
.word 0x817ffffc
.word 0x80000001
.word 0x80000001
.word 0x817ffffc
.word 0x81000007
.word 0x80000001
.word 0x80000001
.word 0x81000007
.word 0x817ffff8
.word 0x80000001
.word 0x80000001
.word 0x817ffff8
.word 0x8100000f
.word 0x80000001
.word 0x80000001
.word 0x8100000f
.word 0x817ffff0
.word 0x80000001
.word 0x80000001
.word 0x817ffff0
.word 0x8100001f
.word 0x80000001
.word 0x80000001
.word 0x8100001f
.word 0x817fffe0
.word 0x80000001
.word 0x80000001
.word 0x817fffe0
.word 0x8100003f
.word 0x80000001
.word 0x80000001
.word 0x8100003f
.word 0x817fffc0
.word 0x80000001
.word 0x80000001
.word 0x817fffc0
.word 0x8100007f
.word 0x80000001
.word 0x80000001
.word 0x8100007f
.word 0x817fff80
.word 0x80000001
.word 0x80000001
.word 0x817fff80
.word 0x810000ff
.word 0x80000001
.word 0x80000001
.word 0x810000ff
.word 0x817fff00
.word 0x80000001
.word 0x80000001
.word 0x817fff00
.word 0x810001ff
.word 0x80000001
.word 0x80000001
.word 0x810001ff
.word 0x817ffe00
.word 0x80000001
.word 0x80000001
.word 0x817ffe00
.word 0x810003ff
.word 0x80000001
.word 0x80000001
.word 0x810003ff
.word 0x817ffc00
.word 0x80000001
.word 0x80000001
.word 0x817ffc00
.word 0x810007ff
.word 0x80000001
.word 0x80000001
.word 0x810007ff
.word 0x817ff800
.word 0x80000001
.word 0x80000001
.word 0x817ff800
.word 0x81000fff
.word 0x80000001
.word 0x80000001
.word 0x81000fff
.word 0x817ff000
.word 0x80000001
.word 0x80000001
.word 0x817ff000
.word 0x81001fff
.word 0x80000001
.word 0x80000001
.word 0x81001fff
.word 0x817fe000
.word 0x80000001
.word 0x80000001
.word 0x817fe000
.word 0x81003fff
.word 0x80000001
.word 0x80000001
.word 0x81003fff
.word 0x817fc000
.word 0x80000001
.word 0x80000001
.word 0x817fc000
.word 0x81007fff
.word 0x80000001
.word 0x80000001
.word 0x81007fff
.word 0x817f8000
.word 0x80000001
.word 0x80000001
.word 0x817f8000
.word 0x8100ffff
.word 0x80000001
.word 0x80000001
.word 0x8100ffff
.word 0x817f0000
.word 0x80000001
.word 0x80000001
.word 0x817f0000
.word 0x8101ffff
.word 0x80000001
.word 0x80000001
.word 0x8101ffff
.word 0x817e0000
.word 0x80000001
.word 0x80000001
.word 0x817e0000
.word 0x8103ffff
.word 0x80000001
.word 0x80000001
.word 0x8103ffff
.word 0x817c0000
.word 0x80000001
.word 0x80000001
.word 0x817c0000
.word 0x8107ffff
.word 0x80000001
.word 0x80000001
.word 0x8107ffff
.word 0x81780000
.word 0x80000001
.word 0x80000001
.word 0x81780000
.word 0x810fffff
.word 0x80000001
.word 0x80000001
.word 0x810fffff
.word 0x81700000
.word 0x80000001
.word 0x80000001
.word 0x81700000
.word 0x811fffff
.word 0x80000001
.word 0x80000001
.word 0x811fffff
.word 0x81600000
.word 0x80000001
.word 0x80000001
.word 0x81600000
.word 0x813fffff
.word 0x80000001
.word 0x80000001
.word 0x813fffff
.word 0x81400000
.word 0x80000001
.word 0x80000001
.word 0x81400000
.word 0x817fffff
.word 0x80000001
.word 0x80000001
.word 0x817fffff
.word 0x80800001
.word 0x80000001
.word 0x80000001
.word 0x80800001
.word 0x80fffffe
.word 0x80000001
.word 0x80000001
.word 0x80fffffe
.word 0x80800003
.word 0x80000001
.word 0x80000001
.word 0x80800003
.word 0x80fffffc
.word 0x80000001
.word 0x80000001
.word 0x80fffffc
.word 0x80800007
.word 0x80000001
.word 0x80000001
.word 0x80800007
.word 0x80fffff8
.word 0x80000001
.word 0x80000001
.word 0x80fffff8
.word 0x8080000f
.word 0x80000001
.word 0x80000001
.word 0x8080000f
.word 0x80fffff0
.word 0x80000001
.word 0x80000001
.word 0x80fffff0
.word 0x8080001f
.word 0x80000001
.word 0x80000001
.word 0x8080001f
.word 0x80ffffe0
.word 0x80000001
.word 0x80000001
.word 0x80ffffe0
.word 0x8080003f
.word 0x80000001
.word 0x80000001
.word 0x8080003f
.word 0x80ffffc0
.word 0x80000001
.word 0x80000001
.word 0x80ffffc0
.word 0x8080007f
.word 0x80000001
.word 0x80000001
.word 0x8080007f
.word 0x80ffff80
.word 0x80000001
.word 0x80000001
.word 0x80ffff80
.word 0x808000ff
.word 0x80000001
.word 0x80000001
.word 0x808000ff
.word 0x80ffff00
.word 0x80000001
.word 0x80000001
.word 0x80ffff00
.word 0x808001ff
.word 0x80000001
.word 0x80000001
.word 0x808001ff
.word 0x80fffe00
.word 0x80000001
.word 0x80000001
.word 0x80fffe00
.word 0x808003ff
.word 0x80000001
.word 0x80000001
.word 0x808003ff
.word 0x80fffc00
.word 0x80000001
.word 0x80000001
.word 0x80fffc00
.word 0x808007ff
.word 0x80000001
.word 0x80000001
.word 0x808007ff
.word 0x80fff800
.word 0x80000001
.word 0x80000001
.word 0x80fff800
.word 0x80800fff
.word 0x80000001
.word 0x80000001
.word 0x80800fff
.word 0x80fff000
.word 0x80000001
.word 0x80000001
.word 0x80fff000
.word 0x80801fff
.word 0x80000001
.word 0x80000001
.word 0x80801fff
.word 0x80ffe000
.word 0x80000001
.word 0x80000001
.word 0x80ffe000
.word 0x80803fff
.word 0x80000001
.word 0x80000001
.word 0x80803fff
.word 0x80ffc000
.word 0x80000001
.word 0x80000001
.word 0x80ffc000
.word 0x80807fff
.word 0x80000001
.word 0x80000001
.word 0x80807fff
.word 0x80ff8000
.word 0x80000001
.word 0x80000001
.word 0x80ff8000
.word 0x8080ffff
.word 0x80000001
.word 0x80000001
.word 0x8080ffff
.word 0x80ff0000
.word 0x80000001
.word 0x80000001
.word 0x80ff0000
.word 0x8081ffff
.word 0x80000001
.word 0x80000001
.word 0x8081ffff
.word 0x80fe0000
.word 0x80000001
.word 0x80000001
.word 0x80fe0000
.word 0x8083ffff
.word 0x80000001
.word 0x80000001
.word 0x8083ffff
.word 0x80fc0000
.word 0x80000001
.word 0x80000001
.word 0x80fc0000
.word 0x8087ffff
.word 0x80000001
.word 0x80000001
.word 0x8087ffff
.word 0x80f80000
.word 0x80000001
.word 0x80000001
.word 0x80f80000
.word 0x808fffff
.word 0x80000001
.word 0x80000001
.word 0x808fffff
.word 0x80f00000
.word 0x80000001
.word 0x80000001
.word 0x80f00000
.word 0x809fffff
.word 0x80000001
.word 0x80000001
.word 0x809fffff
.word 0x80e00000
.word 0x80000001
.word 0x80000001
.word 0x80e00000
.word 0x80bfffff
.word 0x80000001
.word 0x80000001
.word 0x80bfffff
.word 0x80c00000
.word 0x80000001
.word 0x80000001
.word 0x80c00000
.word 0x80ffffff
.word 0x80000001
.word 0x80000001
.word 0x80ffffff
.word 0x80000000
.word 0x80000001
.word 0x80000001
.word 0x80000000
.word 0x8000000f
.word 0x80000001
.word 0x80000001
.word 0x8000000f
.word 0x807ffff0
.word 0x80000001
.word 0x80000001
.word 0x807ffff0
.word 0x8000001f
.word 0x80000001
.word 0x80000001
.word 0x8000001f
.word 0x807fffe0
.word 0x80000001
.word 0x80000001
.word 0x807fffe0
.word 0x8000003f
.word 0x80000001
.word 0x80000001
.word 0x8000003f
.word 0x807fffc0
.word 0x80000001
.word 0x80000001
.word 0x807fffc0
.word 0x8000007f
.word 0x80000001
.word 0x80000001
.word 0x8000007f
.word 0x807fff80
.word 0x80000001
.word 0x80000001
.word 0x807fff80
.word 0x800000ff
.word 0x80000001
.word 0x80000001
.word 0x800000ff
.word 0x807fff00
.word 0x80000001
.word 0x80000001
.word 0x807fff00
.word 0x800001ff
.word 0x80000001
.word 0x80000001
.word 0x800001ff
.word 0x807ffe00
.word 0x80000001
.word 0x80000001
.word 0x807ffe00
.word 0x800003ff
.word 0x80000001
.word 0x80000001
.word 0x800003ff
.word 0x807ffc00
.word 0x80000001
.word 0x80000001
.word 0x807ffc00
.word 0x800007ff
.word 0x80000001
.word 0x80000001
.word 0x800007ff
.word 0x807ff800
.word 0x80000001
.word 0x80000001
.word 0x807ff800
.word 0x80000fff
.word 0x80000001
.word 0x80000001
.word 0x80000fff
.word 0x807ff000
.word 0x80000001
.word 0x80000001
.word 0x807ff000
.word 0x80001fff
.word 0x80000001
.word 0x80000001
.word 0x80001fff
.word 0x807fe000
.word 0x80000001
.word 0x80000001
.word 0x807fe000
.word 0x80003fff
.word 0x80000001
.word 0x80000001
.word 0x80003fff
.word 0x807fc000
.word 0x80000001
.word 0x80000001
.word 0x807fc000
.word 0x80007fff
.word 0x80000001
.word 0x80000001
.word 0x80007fff
.word 0x807f8000
.word 0x80000001
.word 0x80000001
.word 0x807f8000
.word 0x8000ffff
.word 0x80000001
.word 0x80000001
.word 0x8000ffff
.word 0x807f0000
.word 0x80000001
.word 0x80000001
.word 0x807f0000
.word 0x8001ffff
.word 0x80000001
.word 0x80000001
.word 0x8001ffff
.word 0x807e0000
.word 0x80000001
.word 0x80000001
.word 0x807e0000
.word 0x8003ffff
.word 0x80000001
.word 0x80000001
.word 0x8003ffff
.word 0x807c0000
.word 0x80000001
.word 0x80000001
.word 0x807c0000
.word 0x8007ffff
.word 0x80000001
.word 0x80000001
.word 0x8007ffff
.word 0x80780000
.word 0x80000001
.word 0x80000001
.word 0x80780000
.word 0x800fffff
.word 0x80000001
.word 0x80000001
.word 0x800fffff
.word 0x80700000
.word 0x80000001
.word 0x80000001
.word 0x80700000
.word 0x801fffff
.word 0x80000001
.word 0x80000001
.word 0x801fffff
.word 0x80600000
.word 0x80000001
.word 0x80000001
.word 0x80600000
.word 0x803fffff
.word 0x80000001
.word 0x80000001
.word 0x803fffff
.word 0x80400000
.word 0x80000001
.word 0x80000001
.word 0x80400000
.word 0xfd800001
.word 0x80000001
.word 0x80000001
.word 0xfd800001
.word 0xfd800000
.word 0x80000001
.word 0x80000001
.word 0xfd800000
.word 0xfdfffffe
.word 0x80000001
.word 0x80000001
.word 0xfdfffffe
.word 0xfd800003
.word 0x80000001
.word 0x80000001
.word 0xfd800003
.word 0xfdfffffc
.word 0x80000001
.word 0x80000001
.word 0xfdfffffc
.word 0xfd800007
.word 0x80000001
.word 0x80000001
.word 0xfd800007
.word 0xfdfffff8
.word 0x80000001
.word 0x80000001
.word 0xfdfffff8
.word 0xfd80000f
.word 0x80000001
.word 0x80000001
.word 0xfd80000f
.word 0xfdfffff0
.word 0x80000001
.word 0x80000001
.word 0xfdfffff0
.word 0xfd80001f
.word 0x80000001
.word 0x80000001
.word 0xfd80001f
.word 0xfdffffe0
.word 0x80000001
.word 0x80000001
.word 0xfdffffe0
.word 0xfd80003f
.word 0x80000001
.word 0x80000001
.word 0xfd80003f
.word 0xfdffffc0
.word 0x80000001
.word 0x80000001
.word 0xfdffffc0
.word 0xfd80007f
.word 0x80000001
.word 0x80000001
.word 0xfd80007f
.word 0xfdffff80
.word 0x80000001
.word 0x80000001
.word 0xfdffff80
.word 0xfd8000ff
.word 0x80000001
.word 0x80000001
.word 0xfd8000ff
.word 0xfdffff00
.word 0x80000001
.word 0x80000001
.word 0xfdffff00
.word 0xfd8001ff
.word 0x80000001
.word 0x80000001
.word 0xfd8001ff
.word 0xfdfffe00
.word 0x80000001
.word 0x80000001
.word 0xfdfffe00
.word 0xfd8003ff
.word 0x80000001
.word 0x80000001
.word 0xfd8003ff
.word 0xfdfffc00
.word 0x80000001
.word 0x80000001
.word 0xfdfffc00
.word 0xfd8007ff
.word 0x80000001
.word 0x80000001
.word 0xfd8007ff
.word 0xfdfff800
.word 0x80000001
.word 0x80000001
.word 0xfdfff800
.word 0xfd800fff
.word 0x80000001
.word 0x80000001
.word 0xfd800fff
.word 0xfdfff000
.word 0x80000001
.word 0x80000001
.word 0xfdfff000
.word 0xfd801fff
.word 0x80000001
.word 0x80000001
.word 0xfd801fff
.word 0xfdffe000
.word 0x80000001
.word 0x80000001
.word 0xfdffe000
.word 0xfd803fff
.word 0x80000001
.word 0x80000001
.word 0xfd803fff
.word 0xfdffc000
.word 0x80000001
.word 0x80000001
.word 0xfdffc000
.word 0xfd807fff
.word 0x80000001
.word 0x80000001
.word 0xfd807fff
.word 0xfdff8000
.word 0x80000001
.word 0x80000001
.word 0xfdff8000
.word 0xfd80ffff
.word 0x80000001
.word 0x80000001
.word 0xfd80ffff
.word 0xfdff0000
.word 0x80000001
.word 0x80000001
.word 0xfdff0000
.word 0xfd81ffff
.word 0x80000001
.word 0x80000001
.word 0xfd81ffff
.word 0xfdfe0000
.word 0x80000001
.word 0x80000001
.word 0xfdfe0000
.word 0xfd83ffff
.word 0x80000001
.word 0x80000001
.word 0xfd83ffff
.word 0xfdfc0000
.word 0x80000001
.word 0x80000001
.word 0xfdfc0000
.word 0xfd87ffff
.word 0x80000001
.word 0x80000001
.word 0xfd87ffff
.word 0xfdf80000
.word 0x80000001
.word 0x80000001
.word 0xfdf80000
.word 0xfd8fffff
.word 0x80000001
.word 0x80000001
.word 0xfd8fffff
.word 0xfdf00000
.word 0x80000001
.word 0x80000001
.word 0xfdf00000
.word 0xfd9fffff
.word 0x80000001
.word 0x80000001
.word 0xfd9fffff
.word 0xfde00000
.word 0x80000001
.word 0x80000001
.word 0xfde00000
.word 0xfdbfffff
.word 0x80000001
.word 0x80000001
.word 0xfdbfffff
.word 0xfdc00000
.word 0x80000001
.word 0x80000001
.word 0xfdc00000
.word 0xfdffffff
.word 0x80000001
.word 0x80000001
.word 0xfdffffff
.word 0x4ccccc
.word 0x1
.word 0x1
.word 0x4ccccc
.word 0x333333
.word 0x1
.word 0x1
.word 0x333333
.word 0x5b6db6
.word 0x1
.word 0x1
.word 0x5b6db6
.word 0x249249
.word 0x1
.word 0x1
.word 0x249249
.word 0x444444
.word 0x1
.word 0x1
.word 0x444444
.word 0x3bbbbb
.word 0x1
.word 0x1
.word 0x3bbbbb
.word 0x666666
.word 0x1
.word 0x1
.word 0x666666
.word 0x199999
.word 0x1
.word 0x1
.word 0x199999
.word 0x6db6db
.word 0x1
.word 0x1
.word 0x6db6db
.word 0x36db6d
.word 0x1
.word 0x1
.word 0x36db6d
.word 0x1
.word 0x1
.word 0x7ffffe
.word 0x1
.word 0x1
.word 0x7ffffe
.word 0x3
.word 0x1
.word 0x1
.word 0x3
.word 0x7ffffc
.word 0x1
.word 0x1
.word 0x7ffffc
.word 0x7
.word 0x1
.word 0x1
.word 0x7
.word 0x7ffff8
.word 0x1
.word 0x1
.word 0x7ffff8
.word 0x1800001
.word 0x1
.word 0x1
.word 0x1800001
.word 0x1800000
.word 0x1
.word 0x1
.word 0x1800000
.word 0x1fffffe
.word 0x1
.word 0x1
.word 0x1fffffe
.word 0x1800003
.word 0x1
.word 0x1
.word 0x1800003
.word 0x1fffffc
.word 0x1
.word 0x1
.word 0x1fffffc
.word 0x1800007
.word 0x1
.word 0x1
.word 0x1800007
.word 0x1fffff8
.word 0x1
.word 0x1
.word 0x1fffff8
.word 0x180000f
.word 0x1
.word 0x1
.word 0x180000f
.word 0x1fffff0
.word 0x1
.word 0x1
.word 0x1fffff0
.word 0x180001f
.word 0x1
.word 0x1
.word 0x180001f
.word 0x1ffffe0
.word 0x1
.word 0x1
.word 0x1ffffe0
.word 0x180003f
.word 0x1
.word 0x1
.word 0x180003f
.word 0x1ffffc0
.word 0x1
.word 0x1
.word 0x1ffffc0
.word 0x180007f
.word 0x1
.word 0x1
.word 0x180007f
.word 0x1ffff80
.word 0x1
.word 0x1
.word 0x1ffff80
.word 0x18000ff
.word 0x1
.word 0x1
.word 0x18000ff
.word 0x1ffff00
.word 0x1
.word 0x1
.word 0x1ffff00
.word 0x18001ff
.word 0x1
.word 0x1
.word 0x18001ff
.word 0x1fffe00
.word 0x1
.word 0x1
.word 0x1fffe00
.word 0x18003ff
.word 0x1
.word 0x1
.word 0x18003ff
.word 0x1fffc00
.word 0x1
.word 0x1
.word 0x1fffc00
.word 0x18007ff
.word 0x1
.word 0x1
.word 0x18007ff
.word 0x1fff800
.word 0x1
.word 0x1
.word 0x1fff800
.word 0x1800fff
.word 0x1
.word 0x1
.word 0x1800fff
.word 0x1fff000
.word 0x1
.word 0x1
.word 0x1fff000
.word 0x1801fff
.word 0x1
.word 0x1
.word 0x1801fff
.word 0x1ffe000
.word 0x1
.word 0x1
.word 0x1ffe000
.word 0x1803fff
.word 0x1
.word 0x1
.word 0x1803fff
.word 0x1ffc000
.word 0x1
.word 0x1
.word 0x1ffc000
.word 0x1807fff
.word 0x1
.word 0x1
.word 0x1807fff
.word 0x1ff8000
.word 0x1
.word 0x1
.word 0x1ff8000
.word 0x180ffff
.word 0x1
.word 0x1
.word 0x180ffff
.word 0x1ff0000
.word 0x1
.word 0x1
.word 0x1ff0000
.word 0x181ffff
.word 0x1
.word 0x1
.word 0x181ffff
.word 0x1fe0000
.word 0x1
.word 0x1
.word 0x1fe0000
.word 0x183ffff
.word 0x1
.word 0x1
.word 0x183ffff
.word 0x1fc0000
.word 0x1
.word 0x1
.word 0x1fc0000
.word 0x187ffff
.word 0x1
.word 0x1
.word 0x187ffff
.word 0x1f80000
.word 0x1
.word 0x1
.word 0x1f80000
.word 0x18fffff
.word 0x1
.word 0x1
.word 0x18fffff
.word 0x1f00000
.word 0x1
.word 0x1
.word 0x1f00000
.word 0x19fffff
.word 0x1
.word 0x1
.word 0x19fffff
.word 0x1e00000
.word 0x1
.word 0x1
.word 0x1e00000
.word 0x1bfffff
.word 0x1
.word 0x1
.word 0x1bfffff
.word 0x1c00000
.word 0x1
.word 0x1
.word 0x1c00000
.word 0x1ffffff
.word 0x1
.word 0x1
.word 0x1ffffff
.word 0x1000001
.word 0x1
.word 0x1
.word 0x1000001
.word 0x1000000
.word 0x1
.word 0x1
.word 0x1000000
.word 0x17ffffe
.word 0x1
.word 0x1
.word 0x17ffffe
.word 0x1000003
.word 0x1
.word 0x1
.word 0x1000003
.word 0x17ffffc
.word 0x1
.word 0x1
.word 0x17ffffc
.word 0x1000007
.word 0x1
.word 0x1
.word 0x1000007
.word 0x17ffff8
.word 0x1
.word 0x1
.word 0x17ffff8
.word 0x100000f
.word 0x1
.word 0x1
.word 0x100000f
.word 0x17ffff0
.word 0x1
.word 0x1
.word 0x17ffff0
.word 0x100001f
.word 0x1
.word 0x1
.word 0x100001f
.word 0x17fffe0
.word 0x1
.word 0x1
.word 0x17fffe0
.word 0x100003f
.word 0x1
.word 0x1
.word 0x100003f
.word 0x17fffc0
.word 0x1
.word 0x1
.word 0x17fffc0
.word 0x100007f
.word 0x1
.word 0x1
.word 0x100007f
.word 0x17fff80
.word 0x1
.word 0x1
.word 0x17fff80
.word 0x10000ff
.word 0x1
.word 0x1
.word 0x10000ff
.word 0x17fff00
.word 0x1
.word 0x1
.word 0x17fff00
.word 0x10001ff
.word 0x1
.word 0x1
.word 0x10001ff
.word 0x17ffe00
.word 0x1
.word 0x1
.word 0x17ffe00
.word 0x10003ff
.word 0x1
.word 0x1
.word 0x10003ff
.word 0x17ffc00
.word 0x1
.word 0x1
.word 0x17ffc00
.word 0x10007ff
.word 0x1
.word 0x1
.word 0x10007ff
.word 0x17ff800
.word 0x1
.word 0x1
.word 0x17ff800
.word 0x1000fff
.word 0x1
.word 0x1
.word 0x1000fff
.word 0x17ff000
.word 0x1
.word 0x1
.word 0x17ff000
.word 0x1001fff
.word 0x1
.word 0x1
.word 0x1001fff
.word 0x17fe000
.word 0x1
.word 0x1
.word 0x17fe000
.word 0x1003fff
.word 0x1
.word 0x1
.word 0x1003fff
.word 0x17fc000
.word 0x1
.word 0x1
.word 0x17fc000
.word 0x1007fff
.word 0x1
.word 0x1
.word 0x1007fff
.word 0x17f8000
.word 0x1
.word 0x1
.word 0x17f8000
.word 0x100ffff
.word 0x1
.word 0x1
.word 0x100ffff
.word 0x17f0000
.word 0x1
.word 0x1
.word 0x17f0000
.word 0x101ffff
.word 0x1
.word 0x1
.word 0x101ffff
.word 0x17e0000
.word 0x1
.word 0x1
.word 0x17e0000
.word 0x103ffff
.word 0x1
.word 0x1
.word 0x103ffff
.word 0x17c0000
.word 0x1
.word 0x1
.word 0x17c0000
.word 0x107ffff
.word 0x1
.word 0x1
.word 0x107ffff
.word 0x1780000
.word 0x1
.word 0x1
.word 0x1780000
.word 0x10fffff
.word 0x1
.word 0x1
.word 0x10fffff
.word 0x1700000
.word 0x1
.word 0x1
.word 0x1700000
.word 0x11fffff
.word 0x1
.word 0x1
.word 0x11fffff
.word 0x1600000
.word 0x1
.word 0x1
.word 0x1600000
.word 0x13fffff
.word 0x1
.word 0x1
.word 0x13fffff
.word 0x1400000
.word 0x1
.word 0x1
.word 0x1400000
.word 0x17fffff
.word 0x1
.word 0x1
.word 0x17fffff
.word 0x800001
.word 0x1
.word 0x1
.word 0x800001
.word 0xfffffe
.word 0x1
.word 0x1
.word 0xfffffe
.word 0x800003
.word 0x1
.word 0x1
.word 0x800003
.word 0xfffffc
.word 0x1
.word 0x1
.word 0xfffffc
.word 0x800007
.word 0x1
.word 0x1
.word 0x800007
.word 0xfffff8
.word 0x1
.word 0x1
.word 0xfffff8
.word 0x80000f
.word 0x1
.word 0x1
.word 0x80000f
.word 0xfffff0
.word 0x1
.word 0x1
.word 0xfffff0
.word 0x80001f
.word 0x1
.word 0x1
.word 0x80001f
.word 0xffffe0
.word 0x1
.word 0x1
.word 0xffffe0
.word 0x80003f
.word 0x1
.word 0x1
.word 0x80003f
.word 0xffffc0
.word 0x1
.word 0x1
.word 0xffffc0
.word 0x80007f
.word 0x1
.word 0x1
.word 0x80007f
.word 0xffff80
.word 0x1
.word 0x1
.word 0xffff80
.word 0x8000ff
.word 0x1
.word 0x1
.word 0x8000ff
.word 0xffff00
.word 0x1
.word 0x1
.word 0xffff00
.word 0x8001ff
.word 0x1
.word 0x1
.word 0x8001ff
.word 0xfffe00
.word 0x1
.word 0x1
.word 0xfffe00
.word 0x8003ff
.word 0x1
.word 0x1
.word 0x8003ff
.word 0xfffc00
.word 0x1
.word 0x1
.word 0xfffc00
.word 0x8007ff
.word 0x1
.word 0x1
.word 0x8007ff
.word 0xfff800
.word 0x1
.word 0x1
.word 0xfff800
.word 0x800fff
.word 0x1
.word 0x1
.word 0x800fff
.word 0xfff000
.word 0x1
.word 0x1
.word 0xfff000
.word 0x801fff
.word 0x1
.word 0x1
.word 0x801fff
.word 0xffe000
.word 0x1
.word 0x1
.word 0xffe000
.word 0x803fff
.word 0x1
.word 0x1
.word 0x803fff
.word 0xffc000
.word 0x1
.word 0x1
.word 0xffc000
.word 0x807fff
.word 0x1
.word 0x1
.word 0x807fff
.word 0xff8000
.word 0x1
.word 0x1
.word 0xff8000
.word 0x80ffff
.word 0x1
.word 0x1
.word 0x80ffff
.word 0xff0000
.word 0x1
.word 0x1
.word 0xff0000
.word 0x81ffff
.word 0x1
.word 0x1
.word 0x81ffff
.word 0xfe0000
.word 0x1
.word 0x1
.word 0xfe0000
.word 0x83ffff
.word 0x1
.word 0x1
.word 0x83ffff
.word 0xfc0000
.word 0x1
.word 0x1
.word 0xfc0000
.word 0x87ffff
.word 0x1
.word 0x1
.word 0x87ffff
.word 0xf80000
.word 0x1
.word 0x1
.word 0xf80000
.word 0x8fffff
.word 0x1
.word 0x1
.word 0x8fffff
.word 0xf00000
.word 0x1
.word 0x1
.word 0xf00000
.word 0x9fffff
.word 0x1
.word 0x1
.word 0x9fffff
.word 0xe00000
.word 0x1
.word 0x1
.word 0xe00000
.word 0xbfffff
.word 0x1
.word 0x1
.word 0xbfffff
.word 0xc00000
.word 0x1
.word 0x1
.word 0xc00000
.word 0xffffff
.word 0x1
.word 0x1
.word 0xffffff
.word 0x0
.word 0x1
.word 0x1
.word 0x0
.word 0xf
.word 0x1
.word 0x1
.word 0xf
.word 0x7ffff0
.word 0x1
.word 0x1
.word 0x7ffff0
.word 0x1f
.word 0x1
.word 0x1
.word 0x1f
.word 0x7fffe0
.word 0x1
.word 0x1
.word 0x7fffe0
.word 0x3f
.word 0x1
.word 0x1
.word 0x3f
.word 0x7fffc0
.word 0x1
.word 0x1
.word 0x7fffc0
.word 0x7f
.word 0x1
.word 0x1
.word 0x7f
.word 0x7fff80
.word 0x1
.word 0x1
.word 0x7fff80
.word 0xff
.word 0x1
.word 0x1
.word 0xff
.word 0x7fff00
.word 0x1
.word 0x1
.word 0x7fff00
.word 0x1ff
.word 0x1
.word 0x1
.word 0x1ff
.word 0x7ffe00
.word 0x1
.word 0x1
.word 0x7ffe00
.word 0x3ff
.word 0x1
.word 0x1
.word 0x3ff
.word 0x7ffc00
.word 0x1
.word 0x1
.word 0x7ffc00
.word 0x7ff
.word 0x1
.word 0x1
.word 0x7ff
.word 0x7ff800
.word 0x1
.word 0x1
.word 0x7ff800
.word 0xfff
.word 0x1
.word 0x1
.word 0xfff
.word 0x7ff000
.word 0x1
.word 0x1
.word 0x7ff000
.word 0x1fff
.word 0x1
.word 0x1
.word 0x1fff
.word 0x7fe000
.word 0x1
.word 0x1
.word 0x7fe000
.word 0x3fff
.word 0x1
.word 0x1
.word 0x3fff
.word 0x7fc000
.word 0x1
.word 0x1
.word 0x7fc000
.word 0x7fff
.word 0x1
.word 0x1
.word 0x7fff
.word 0x7f8000
.word 0x1
.word 0x1
.word 0x7f8000
.word 0xffff
.word 0x1
.word 0x1
.word 0xffff
.word 0x7f0000
.word 0x1
.word 0x1
.word 0x7f0000
.word 0x1ffff
.word 0x1
.word 0x1
.word 0x1ffff
.word 0x7e0000
.word 0x1
.word 0x1
.word 0x7e0000
.word 0x3ffff
.word 0x1
.word 0x1
.word 0x3ffff
.word 0x7c0000
.word 0x1
.word 0x1
.word 0x7c0000
.word 0x7ffff
.word 0x1
.word 0x1
.word 0x7ffff
.word 0x780000
.word 0x1
.word 0x1
.word 0x780000
.word 0xfffff
.word 0x1
.word 0x1
.word 0xfffff
.word 0x700000
.word 0x1
.word 0x1
.word 0x700000
.word 0x1fffff
.word 0x1
.word 0x1
.word 0x1fffff
.word 0x600000
.word 0x1
.word 0x1
.word 0x600000
.word 0x3fffff
.word 0x1
.word 0x1
.word 0x3fffff
.word 0x400000
.word 0x1
.word 0x1
.word 0x400000
.word 0x23000001
.word 0x1
.word 0x1
.word 0x23000001
.word 0x23000000
.word 0x1
.word 0x1
.word 0x23000000
.word 0x237ffffe
.word 0x1
.word 0x1
.word 0x237ffffe
.word 0x23000003
.word 0x1
.word 0x1
.word 0x23000003
.word 0x237ffffc
.word 0x1
.word 0x1
.word 0x237ffffc
.word 0x23000007
.word 0x1
.word 0x1
.word 0x23000007
.word 0x237ffff8
.word 0x1
.word 0x1
.word 0x237ffff8
.word 0x2300000f
.word 0x1
.word 0x1
.word 0x2300000f
.word 0x237ffff0
.word 0x1
.word 0x1
.word 0x237ffff0
.word 0x2300001f
.word 0x1
.word 0x1
.word 0x2300001f
.word 0x237fffe0
.word 0x1
.word 0x1
.word 0x237fffe0
.word 0x2300003f
.word 0x1
.word 0x1
.word 0x2300003f
.word 0x237fffc0
.word 0x1
.word 0x1
.word 0x237fffc0
.word 0x2300007f
.word 0x1
.word 0x1
.word 0x2300007f
.word 0x237fff80
.word 0x1
.word 0x1
.word 0x237fff80
.word 0x230000ff
.word 0x1
.word 0x1
.word 0x230000ff
.word 0x237fff00
.word 0x1
.word 0x1
.word 0x237fff00
.word 0x230001ff
.word 0x1
.word 0x1
.word 0x230001ff
.word 0x237ffe00
.word 0x1
.word 0x1
.word 0x237ffe00
.word 0x230003ff
.word 0x1
.word 0x1
.word 0x230003ff
.word 0x237ffc00
.word 0x1
.word 0x1
.word 0x237ffc00
.word 0x230007ff
.word 0x1
.word 0x1
.word 0x230007ff
.word 0x237ff800
.word 0x1
.word 0x1
.word 0x237ff800
.word 0x23000fff
.word 0x1
.word 0x1
.word 0x23000fff
.word 0x237ff000
.word 0x1
.word 0x1
.word 0x237ff000
.word 0x23001fff
.word 0x1
.word 0x1
.word 0x23001fff
.word 0x237fe000
.word 0x1
.word 0x1
.word 0x237fe000
.word 0x23003fff
.word 0x1
.word 0x1
.word 0x23003fff
.word 0x237fc000
.word 0x1
.word 0x1
.word 0x237fc000
.word 0x23007fff
.word 0x1
.word 0x1
.word 0x23007fff
.word 0x237f8000
.word 0x1
.word 0x1
.word 0x237f8000
.word 0x2300ffff
.word 0x1
.word 0x1
.word 0x2300ffff
.word 0x237f0000
.word 0x1
.word 0x1
.word 0x237f0000
.word 0x2301ffff
.word 0x1
.word 0x1
.word 0x2301ffff
.word 0x237e0000
.word 0x1
.word 0x1
.word 0x237e0000
.word 0x2303ffff
.word 0x1
.word 0x1
.word 0x2303ffff
.word 0x237c0000
.word 0x1
.word 0x1
.word 0x237c0000
.word 0x2307ffff
.word 0x1
.word 0x1
.word 0x2307ffff
.word 0x23780000
.word 0x1
.word 0x1
.word 0x23780000
.word 0x230fffff
.word 0x1
.word 0x1
.word 0x230fffff
.word 0x23700000
.word 0x1
.word 0x1
.word 0x23700000
.word 0x231fffff
.word 0x1
.word 0x1
.word 0x231fffff
.word 0x23600000
.word 0x1
.word 0x1
.word 0x23600000
.word 0x233fffff
.word 0x1
.word 0x1
.word 0x233fffff
.word 0x23400000
.word 0x1
.word 0x1
.word 0x23400000
.word 0x237fffff
.word 0x1
.word 0x1
.word 0x237fffff
.word 0xbfcccccc
.word 0xbf800000
.word 0xbf800000
.word 0xbfcccccc
.word 0xbfb33333
.word 0xbf800000
.word 0xbf800000
.word 0xbfb33333
.word 0xbfdb6db6
.word 0xbf800000
.word 0xbf800000
.word 0xbfdb6db6
.word 0xbfa49249
.word 0xbf800000
.word 0xbf800000
.word 0xbfa49249
.word 0xbfc44444
.word 0xbf800000
.word 0xbf800000
.word 0xbfc44444
.word 0xbfbbbbbb
.word 0xbf800000
.word 0xbf800000
.word 0xbfbbbbbb
.word 0xbfe66666
.word 0xbf800000
.word 0xbf800000
.word 0xbfe66666
.word 0xbf999999
.word 0xbf800000
.word 0xbf800000
.word 0xbf999999
.word 0xbfedb6db
.word 0xbf800000
.word 0xbf800000
.word 0xbfedb6db
.word 0xbfb6db6d
.word 0xbf800000
.word 0xbf800000
.word 0xbfb6db6d
.word 0xbf800001
.word 0xbf800000
.word 0xbf800000
.word 0xbf800001
.word 0xbffffffe
.word 0xbf800000
.word 0xbf800000
.word 0xbffffffe
.word 0xbf800003
.word 0xbf800000
.word 0xbf800000
.word 0xbf800003
.word 0xbffffffc
.word 0xbf800000
.word 0xbf800000
.word 0xbffffffc
.word 0xbf800007
.word 0xbf800000
.word 0xbf800000
.word 0xbf800007
.word 0xbffffff8
.word 0xbf800000
.word 0xbf800000
.word 0xbffffff8
.word 0xc1000001
.word 0xbf800000
.word 0xbf800000
.word 0xc1000001
.word 0xc1000000
.word 0xbf800000
.word 0xbf800000
.word 0xc1000000
.word 0xc17ffffe
.word 0xbf800000
.word 0xbf800000
.word 0xc17ffffe
.word 0xc1000003
.word 0xbf800000
.word 0xbf800000
.word 0xc1000003
.word 0xc17ffffc
.word 0xbf800000
.word 0xbf800000
.word 0xc17ffffc
.word 0xc1000007
.word 0xbf800000
.word 0xbf800000
.word 0xc1000007
.word 0xc17ffff8
.word 0xbf800000
.word 0xbf800000
.word 0xc17ffff8
.word 0xc100000f
.word 0xbf800000
.word 0xbf800000
.word 0xc100000f
.word 0xc17ffff0
.word 0xbf800000
.word 0xbf800000
.word 0xc17ffff0
.word 0xc100001f
.word 0xbf800000
.word 0xbf800000
.word 0xc100001f
.word 0xc17fffe0
.word 0xbf800000
.word 0xbf800000
.word 0xc17fffe0
.word 0xc100003f
.word 0xbf800000
.word 0xbf800000
.word 0xc100003f
.word 0xc17fffc0
.word 0xbf800000
.word 0xbf800000
.word 0xc17fffc0
.word 0xc100007f
.word 0xbf800000
.word 0xbf800000
.word 0xc100007f
.word 0xc17fff80
.word 0xbf800000
.word 0xbf800000
.word 0xc17fff80
.word 0xc10000ff
.word 0xbf800000
.word 0xbf800000
.word 0xc10000ff
.word 0xc17fff00
.word 0xbf800000
.word 0xbf800000
.word 0xc17fff00
.word 0xc10001ff
.word 0xbf800000
.word 0xbf800000
.word 0xc10001ff
.word 0xc17ffe00
.word 0xbf800000
.word 0xbf800000
.word 0xc17ffe00
.word 0xc10003ff
.word 0xbf800000
.word 0xbf800000
.word 0xc10003ff
.word 0xc17ffc00
.word 0xbf800000
.word 0xbf800000
.word 0xc17ffc00
.word 0xc10007ff
.word 0xbf800000
.word 0xbf800000
.word 0xc10007ff
.word 0xc17ff800
.word 0xbf800000
.word 0xbf800000
.word 0xc17ff800
.word 0xc1000fff
.word 0xbf800000
.word 0xbf800000
.word 0xc1000fff
.word 0xc17ff000
.word 0xbf800000
.word 0xbf800000
.word 0xc17ff000
.word 0xc1001fff
.word 0xbf800000
.word 0xbf800000
.word 0xc1001fff
.word 0xc17fe000
.word 0xbf800000
.word 0xbf800000
.word 0xc17fe000
.word 0xc1003fff
.word 0xbf800000
.word 0xbf800000
.word 0xc1003fff
.word 0xc17fc000
.word 0xbf800000
.word 0xbf800000
.word 0xc17fc000
.word 0xc1007fff
.word 0xbf800000
.word 0xbf800000
.word 0xc1007fff
.word 0xc17f8000
.word 0xbf800000
.word 0xbf800000
.word 0xc17f8000
.word 0xc100ffff
.word 0xbf800000
.word 0xbf800000
.word 0xc100ffff
.word 0xc17f0000
.word 0xbf800000
.word 0xbf800000
.word 0xc17f0000
.word 0xc101ffff
.word 0xbf800000
.word 0xbf800000
.word 0xc101ffff
.word 0xc17e0000
.word 0xbf800000
.word 0xbf800000
.word 0xc17e0000
.word 0xc103ffff
.word 0xbf800000
.word 0xbf800000
.word 0xc103ffff
.word 0xc17c0000
.word 0xbf800000
.word 0xbf800000
.word 0xc17c0000
.word 0xc107ffff
.word 0xbf800000
.word 0xbf800000
.word 0xc107ffff
.word 0xc1780000
.word 0xbf800000
.word 0xbf800000
.word 0xc1780000
.word 0xc10fffff
.word 0xbf800000
.word 0xbf800000
.word 0xc10fffff
.word 0xc1700000
.word 0xbf800000
.word 0xbf800000
.word 0xc1700000
.word 0xc11fffff
.word 0xbf800000
.word 0xbf800000
.word 0xc11fffff
.word 0xc1600000
.word 0xbf800000
.word 0xbf800000
.word 0xc1600000
.word 0xc13fffff
.word 0xbf800000
.word 0xbf800000
.word 0xc13fffff
.word 0xc1400000
.word 0xbf800000
.word 0xbf800000
.word 0xc1400000
.word 0xc17fffff
.word 0xbf800000
.word 0xbf800000
.word 0xc17fffff
.word 0xc0800001
.word 0xbf800000
.word 0xbf800000
.word 0xc0800001
.word 0xc0800000
.word 0xbf800000
.word 0xbf800000
.word 0xc0800000
.word 0xc0fffffe
.word 0xbf800000
.word 0xbf800000
.word 0xc0fffffe
.word 0xc0800003
.word 0xbf800000
.word 0xbf800000
.word 0xc0800003
.word 0xc0fffffc
.word 0xbf800000
.word 0xbf800000
.word 0xc0fffffc
.word 0xc0800007
.word 0xbf800000
.word 0xbf800000
.word 0xc0800007
.word 0xc0fffff8
.word 0xbf800000
.word 0xbf800000
.word 0xc0fffff8
.word 0xc080000f
.word 0xbf800000
.word 0xbf800000
.word 0xc080000f
.word 0xc0fffff0
.word 0xbf800000
.word 0xbf800000
.word 0xc0fffff0
.word 0xc080001f
.word 0xbf800000
.word 0xbf800000
.word 0xc080001f
.word 0xc0ffffe0
.word 0xbf800000
.word 0xbf800000
.word 0xc0ffffe0
.word 0xc080003f
.word 0xbf800000
.word 0xbf800000
.word 0xc080003f
.word 0xc0ffffc0
.word 0xbf800000
.word 0xbf800000
.word 0xc0ffffc0
.word 0xc080007f
.word 0xbf800000
.word 0xbf800000
.word 0xc080007f
.word 0xc0ffff80
.word 0xbf800000
.word 0xbf800000
.word 0xc0ffff80
.word 0xc08000ff
.word 0xbf800000
.word 0xbf800000
.word 0xc08000ff
.word 0xc0ffff00
.word 0xbf800000
.word 0xbf800000
.word 0xc0ffff00
.word 0xc08001ff
.word 0xbf800000
.word 0xbf800000
.word 0xc08001ff
.word 0xc0fffe00
.word 0xbf800000
.word 0xbf800000
.word 0xc0fffe00
.word 0xc08003ff
.word 0xbf800000
.word 0xbf800000
.word 0xc08003ff
.word 0xc0fffc00
.word 0xbf800000
.word 0xbf800000
.word 0xc0fffc00
.word 0xc08007ff
.word 0xbf800000
.word 0xbf800000
.word 0xc08007ff
.word 0xc0fff800
.word 0xbf800000
.word 0xbf800000
.word 0xc0fff800
.word 0xc0800fff
.word 0xbf800000
.word 0xbf800000
.word 0xc0800fff
.word 0xc0fff000
.word 0xbf800000
.word 0xbf800000
.word 0xc0fff000
.word 0xc0801fff
.word 0xbf800000
.word 0xbf800000
.word 0xc0801fff
.word 0xc0ffe000
.word 0xbf800000
.word 0xbf800000
.word 0xc0ffe000
.word 0xc0803fff
.word 0xbf800000
.word 0xbf800000
.word 0xc0803fff
.word 0xc0ffc000
.word 0xbf800000
.word 0xbf800000
.word 0xc0ffc000
.word 0xc0807fff
.word 0xbf800000
.word 0xbf800000
.word 0xc0807fff
.word 0xc0ff8000
.word 0xbf800000
.word 0xbf800000
.word 0xc0ff8000
.word 0xc080ffff
.word 0xbf800000
.word 0xbf800000
.word 0xc080ffff
.word 0xc0ff0000
.word 0xbf800000
.word 0xbf800000
.word 0xc0ff0000
.word 0xc081ffff
.word 0xbf800000
.word 0xbf800000
.word 0xc081ffff
.word 0xc0fe0000
.word 0xbf800000
.word 0xbf800000
.word 0xc0fe0000
.word 0xc083ffff
.word 0xbf800000
.word 0xbf800000
.word 0xc083ffff
.word 0xc0fc0000
.word 0xbf800000
.word 0xbf800000
.word 0xc0fc0000
.word 0xc087ffff
.word 0xbf800000
.word 0xbf800000
.word 0xc087ffff
.word 0xc0f80000
.word 0xbf800000
.word 0xbf800000
.word 0xc0f80000
.word 0xc08fffff
.word 0xbf800000
.word 0xbf800000
.word 0xc08fffff
.word 0xc0f00000
.word 0xbf800000
.word 0xbf800000
.word 0xc0f00000
.word 0xc09fffff
.word 0xbf800000
.word 0xbf800000
.word 0xc09fffff
.word 0xc0e00000
.word 0xbf800000
.word 0xbf800000
.word 0xc0e00000
.word 0xc0bfffff
.word 0xbf800000
.word 0xbf800000
.word 0xc0bfffff
.word 0xc0c00000
.word 0xbf800000
.word 0xbf800000
.word 0xc0c00000
.word 0xc0ffffff
.word 0xbf800000
.word 0xbf800000
.word 0xc0ffffff
.word 0xc0000001
.word 0xbf800000
.word 0xbf800000
.word 0xc0000001
.word 0xc0000000
.word 0xbf800000
.word 0xbf800000
.word 0xc0000000
.word 0xc07ffffe
.word 0xbf800000
.word 0xbf800000
.word 0xc07ffffe
.word 0xc0000003
.word 0xbf800000
.word 0xbf800000
.word 0xc0000003
.word 0xc07ffffc
.word 0xbf800000
.word 0xbf800000
.word 0xc07ffffc
.word 0xc0000007
.word 0xbf800000
.word 0xbf800000
.word 0xc0000007
.word 0xc07ffff8
.word 0xbf800000
.word 0xbf800000
.word 0xc07ffff8
.word 0xc000000f
.word 0xbf800000
.word 0xbf800000
.word 0xc000000f
.word 0xc07ffff0
.word 0xbf800000
.word 0xbf800000
.word 0xc07ffff0
.word 0xc000001f
.word 0xbf800000
.word 0xbf800000
.word 0xc000001f
.word 0xc07fffe0
.word 0xbf800000
.word 0xbf800000
.word 0xc07fffe0
.word 0xc000003f
.word 0xbf800000
.word 0xbf800000
.word 0xc000003f
.word 0xc07fffc0
.word 0xbf800000
.word 0xbf800000
.word 0xc07fffc0
.word 0xc000007f
.word 0xbf800000
.word 0xbf800000
.word 0xc000007f
.word 0xc07fff80
.word 0xbf800000
.word 0xbf800000
.word 0xc07fff80
.word 0xc00000ff
.word 0xbf800000
.word 0xbf800000
.word 0xc00000ff
.word 0xc07fff00
.word 0xbf800000
.word 0xbf800000
.word 0xc07fff00
.word 0xc00001ff
.word 0xbf800000
.word 0xbf800000
.word 0xc00001ff
.word 0xc07ffe00
.word 0xbf800000
.word 0xbf800000
.word 0xc07ffe00
.word 0xc00003ff
.word 0xbf800000
.word 0xbf800000
.word 0xc00003ff
.word 0xc07ffc00
.word 0xbf800000
.word 0xbf800000
.word 0xc07ffc00
.word 0xc00007ff
.word 0xbf800000
.word 0xbf800000
.word 0xc00007ff
.word 0xc07ff800
.word 0xbf800000
.word 0xbf800000
.word 0xc07ff800
.word 0xc0000fff
.word 0xbf800000
.word 0xbf800000
.word 0xc0000fff
.word 0xc07ff000
.word 0xbf800000
.word 0xbf800000
.word 0xc07ff000
.word 0xc0001fff
.word 0xbf800000
.word 0xbf800000
.word 0xc0001fff
.word 0xc07fe000
.word 0xbf800000
.word 0xbf800000
.word 0xc07fe000
.word 0xc0003fff
.word 0xbf800000
.word 0xbf800000
.word 0xc0003fff
.word 0xc07fc000
.word 0xbf800000
.word 0xbf800000
.word 0xc07fc000
.word 0xc0007fff
.word 0xbf800000
.word 0xbf800000
.word 0xc0007fff
.word 0xc07f8000
.word 0xbf800000
.word 0xbf800000
.word 0xc07f8000
.word 0xc000ffff
.word 0xbf800000
.word 0xbf800000
.word 0xc000ffff
.word 0xc07f0000
.word 0xbf800000
.word 0xbf800000
.word 0xc07f0000
.word 0xc001ffff
.word 0xbf800000
.word 0xbf800000
.word 0xc001ffff
.word 0xc07e0000
.word 0xbf800000
.word 0xbf800000
.word 0xc07e0000
.word 0xc003ffff
.word 0xbf800000
.word 0xbf800000
.word 0xc003ffff
.word 0xc07c0000
.word 0xbf800000
.word 0xbf800000
.word 0xc07c0000
.word 0xc007ffff
.word 0xbf800000
.word 0xbf800000
.word 0xc007ffff
.word 0xc0780000
.word 0xbf800000
.word 0xbf800000
.word 0xc0780000
.word 0xc00fffff
.word 0xbf800000
.word 0xbf800000
.word 0xc00fffff
.word 0xc0700000
.word 0xbf800000
.word 0xbf800000
.word 0xc0700000
.word 0xc01fffff
.word 0xbf800000
.word 0xbf800000
.word 0xc01fffff
.word 0xc0600000
.word 0xbf800000
.word 0xbf800000
.word 0xc0600000
.word 0xc03fffff
.word 0xbf800000
.word 0xbf800000
.word 0xc03fffff
.word 0xc0400000
.word 0xbf800000
.word 0xbf800000
.word 0xc0400000
.word 0xc07fffff
.word 0xbf800000
.word 0xbf800000
.word 0xc07fffff
.word 0xbf800000
.word 0xbf800000
.word 0xbf80000f
.word 0xbf800000
.word 0xbf800000
.word 0xbf80000f
.word 0xbffffff0
.word 0xbf800000
.word 0xbf800000
.word 0xbffffff0
.word 0xbf80001f
.word 0xbf800000
.word 0xbf800000
.word 0xbf80001f
.word 0xbfffffe0
.word 0xbf800000
.word 0xbf800000
.word 0xbfffffe0
.word 0xbf80003f
.word 0xbf800000
.word 0xbf800000
.word 0xbf80003f
.word 0xbfffffc0
.word 0xbf800000
.word 0xbf800000
.word 0xbfffffc0
.word 0xbf80007f
.word 0xbf800000
.word 0xbf800000
.word 0xbf80007f
.word 0xbfffff80
.word 0xbf800000
.word 0xbf800000
.word 0xbfffff80
.word 0xbf8000ff
.word 0xbf800000
.word 0xbf800000
.word 0xbf8000ff
.word 0xbfffff00
.word 0xbf800000
.word 0xbf800000
.word 0xbfffff00
.word 0xbf8001ff
.word 0xbf800000
.word 0xbf800000
.word 0xbf8001ff
.word 0xbffffe00
.word 0xbf800000
.word 0xbf800000
.word 0xbffffe00
.word 0xbf8003ff
.word 0xbf800000
.word 0xbf800000
.word 0xbf8003ff
.word 0xbffffc00
.word 0xbf800000
.word 0xbf800000
.word 0xbffffc00
.word 0xbf8007ff
.word 0xbf800000
.word 0xbf800000
.word 0xbf8007ff
.word 0xbffff800
.word 0xbf800000
.word 0xbf800000
.word 0xbffff800
.word 0xbf800fff
.word 0xbf800000
.word 0xbf800000
.word 0xbf800fff
.word 0xbffff000
.word 0xbf800000
.word 0xbf800000
.word 0xbffff000
.word 0xbf801fff
.word 0xbf800000
.word 0xbf800000
.word 0xbf801fff
.word 0xbfffe000
.word 0xbf800000
.word 0xbf800000
.word 0xbfffe000
.word 0xbf803fff
.word 0xbf800000
.word 0xbf800000
.word 0xbf803fff
.word 0xbfffc000
.word 0xbf800000
.word 0xbf800000
.word 0xbfffc000
.word 0xbf807fff
.word 0xbf800000
.word 0xbf800000
.word 0xbf807fff
.word 0xbfff8000
.word 0xbf800000
.word 0xbf800000
.word 0xbfff8000
.word 0xbf80ffff
.word 0xbf800000
.word 0xbf800000
.word 0xbf80ffff
.word 0xbfff0000
.word 0xbf800000
.word 0xbf800000
.word 0xbfff0000
.word 0xbf81ffff
.word 0xbf800000
.word 0xbf800000
.word 0xbf81ffff
.word 0xbffe0000
.word 0xbf800000
.word 0xbf800000
.word 0xbffe0000
.word 0xbf83ffff
.word 0xbf800000
.word 0xbf800000
.word 0xbf83ffff
.word 0xbffc0000
.word 0xbf800000
.word 0xbf800000
.word 0xbffc0000
.word 0xbf87ffff
.word 0xbf800000
.word 0xbf800000
.word 0xbf87ffff
.word 0xbff80000
.word 0xbf800000
.word 0xbf800000
.word 0xbff80000
.word 0xbf8fffff
.word 0xbf800000
.word 0xbf800000
.word 0xbf8fffff
.word 0xbff00000
.word 0xbf800000
.word 0xbf800000
.word 0xbff00000
.word 0xbf9fffff
.word 0xbf800000
.word 0xbf800000
.word 0xbf9fffff
.word 0xbfe00000
.word 0xbf800000
.word 0xbf800000
.word 0xbfe00000
.word 0xbfbfffff
.word 0xbf800000
.word 0xbf800000
.word 0xbfbfffff
.word 0xbfc00000
.word 0xbf800000
.word 0xbf800000
.word 0xbfc00000
.word 0xbfffffff
.word 0xbf800000
.word 0xbf800000
.word 0xbfffffff
.word 0xbf000001
.word 0xbf800000
.word 0xbf800000
.word 0xbf000001
.word 0xbf000000
.word 0xbf800000
.word 0xbf800000
.word 0xbf000000
.word 0xbf7ffffe
.word 0xbf800000
.word 0xbf800000
.word 0xbf7ffffe
.word 0xbf000003
.word 0xbf800000
.word 0xbf800000
.word 0xbf000003
.word 0xbf7ffffc
.word 0xbf800000
.word 0xbf800000
.word 0xbf7ffffc
.word 0xbf000007
.word 0xbf800000
.word 0xbf800000
.word 0xbf000007
.word 0xbf7ffff8
.word 0xbf800000
.word 0xbf800000
.word 0xbf7ffff8
.word 0xbf00000f
.word 0xbf800000
.word 0xbf800000
.word 0xbf00000f
.word 0xbf7ffff0
.word 0xbf800000
.word 0xbf800000
.word 0xbf7ffff0
.word 0xbf00001f
.word 0xbf800000
.word 0xbf800000
.word 0xbf00001f
.word 0xbf7fffe0
.word 0xbf800000
.word 0xbf800000
.word 0xbf7fffe0
.word 0xbf00003f
.word 0xbf800000
.word 0xbf800000
.word 0xbf00003f
.word 0xbf7fffc0
.word 0xbf800000
.word 0xbf800000
.word 0xbf7fffc0
.word 0xbf00007f
.word 0xbf800000
.word 0xbf800000
.word 0xbf00007f
.word 0xbf7fff80
.word 0xbf800000
.word 0xbf800000
.word 0xbf7fff80
.word 0xbf0000ff
.word 0xbf800000
.word 0xbf800000
.word 0xbf0000ff
.word 0xbf7fff00
.word 0xbf800000
.word 0xbf800000
.word 0xbf7fff00
.word 0xbf0001ff
.word 0xbf800000
.word 0xbf800000
.word 0xbf0001ff
.word 0xbf7ffe00
.word 0xbf800000
.word 0xbf800000
.word 0xbf7ffe00
.word 0xbf0003ff
.word 0xbf800000
.word 0xbf800000
.word 0xbf0003ff
.word 0xbf7ffc00
.word 0xbf800000
.word 0xbf800000
.word 0xbf7ffc00
.word 0xbf0007ff
.word 0xbf800000
.word 0xbf800000
.word 0xbf0007ff
.word 0xbf7ff800
.word 0xbf800000
.word 0xbf800000
.word 0xbf7ff800
.word 0xbf000fff
.word 0xbf800000
.word 0xbf800000
.word 0xbf000fff
.word 0xbf7ff000
.word 0xbf800000
.word 0xbf800000
.word 0xbf7ff000
.word 0xbf001fff
.word 0xbf800000
.word 0xbf800000
.word 0xbf001fff
.word 0xbf7fe000
.word 0xbf800000
.word 0xbf800000
.word 0xbf7fe000
.word 0xbf003fff
.word 0xbf800000
.word 0xbf800000
.word 0xbf003fff
.word 0xbf7fc000
.word 0xbf800000
.word 0xbf800000
.word 0xbf7fc000
.word 0xbf007fff
.word 0xbf800000
.word 0xbf800000
.word 0xbf007fff
.word 0xbf7f8000
.word 0xbf800000
.word 0xbf800000
.word 0xbf7f8000
.word 0xbf00ffff
.word 0xbf800000
.word 0xbf800000
.word 0xbf00ffff
.word 0xbf7f0000
.word 0xbf800000
.word 0xbf800000
.word 0xbf7f0000
.word 0xbf01ffff
.word 0xbf800000
.word 0xbf800000
.word 0xbf01ffff
.word 0xbf7e0000
.word 0xbf800000
.word 0xbf800000
.word 0xbf7e0000
.word 0xbf03ffff
.word 0xbf800000
.word 0xbf800000
.word 0xbf03ffff
.word 0xbf7c0000
.word 0xbf800000
.word 0xbf800000
.word 0xbf7c0000
.word 0xbf07ffff
.word 0xbf800000
.word 0xbf800000
.word 0xbf07ffff
.word 0xbf780000
.word 0xbf800000
.word 0xbf800000
.word 0xbf780000
.word 0xbf0fffff
.word 0xbf800000
.word 0xbf800000
.word 0xbf0fffff
.word 0xbf700000
.word 0xbf800000
.word 0xbf800000
.word 0xbf700000
.word 0xbf1fffff
.word 0xbf800000
.word 0xbf800000
.word 0xbf1fffff
.word 0xbf600000
.word 0xbf800000
.word 0xbf800000
.word 0xbf600000
.word 0xbf3fffff
.word 0xbf800000
.word 0xbf800000
.word 0xbf3fffff
.word 0xbf400000
.word 0xbf800000
.word 0xbf800000
.word 0xbf400000
.word 0xbf7fffff
.word 0xbf800000
.word 0xbf800000
.word 0xbf7fffff
.word 0xbe800001
.word 0xbf800000
.word 0xbf800000
.word 0xbe800001
.word 0xbe800000
.word 0xbf800000
.word 0xbf800000
.word 0xbe800000
.word 0xbefffffe
.word 0xbf800000
.word 0xbf800000
.word 0xbefffffe
.word 0xbe800003
.word 0xbf800000
.word 0xbf800000
.word 0xbe800003
.word 0xbefffffc
.word 0xbf800000
.word 0xbf800000
.word 0xbefffffc
.word 0xbe800007
.word 0xbf800000
.word 0xbf800000
.word 0xbe800007
.word 0xbefffff8
.word 0xbf800000
.word 0xbf800000
.word 0xbefffff8
.word 0xbe80000f
.word 0xbf800000
.word 0xbf800000
.word 0xbe80000f
.word 0xbefffff0
.word 0xbf800000
.word 0xbf800000
.word 0xbefffff0
.word 0xbe80001f
.word 0xbf800000
.word 0xbf800000
.word 0xbe80001f
.word 0xbeffffe0
.word 0xbf800000
.word 0xbf800000
.word 0xbeffffe0
.word 0xbe80003f
.word 0xbf800000
.word 0xbf800000
.word 0xbe80003f
.word 0xbeffffc0
.word 0xbf800000
.word 0xbf800000
.word 0xbeffffc0
.word 0xbe80007f
.word 0xbf800000
.word 0xbf800000
.word 0xbe80007f
.word 0xbeffff80
.word 0xbf800000
.word 0xbf800000
.word 0xbeffff80
.word 0xbe8000ff
.word 0xbf800000
.word 0xbf800000
.word 0xbe8000ff
.word 0xbeffff00
.word 0xbf800000
.word 0xbf800000
.word 0xbeffff00
.word 0xbe8001ff
.word 0xbf800000
.word 0xbf800000
.word 0xbe8001ff
.word 0xbefffe00
.word 0xbf800000
.word 0xbf800000
.word 0xbefffe00
.word 0xbe8003ff
.word 0xbf800000
.word 0xbf800000
.word 0xbe8003ff
.word 0xbefffc00
.word 0xbf800000
.word 0xbf800000
.word 0xbefffc00
.word 0xbe8007ff
.word 0xbf800000
.word 0xbf800000
.word 0xbe8007ff
.word 0xbefff800
.word 0xbf800000
.word 0xbf800000
.word 0xbefff800
.word 0xbe800fff
.word 0xbf800000
.word 0xbf800000
.word 0xbe800fff
.word 0xbefff000
.word 0xbf800000
.word 0xbf800000
.word 0xbefff000
.word 0xbe801fff
.word 0xbf800000
.word 0xbf800000
.word 0xbe801fff
.word 0xbeffe000
.word 0xbf800000
.word 0xbf800000
.word 0xbeffe000
.word 0xbe803fff
.word 0xbf800000
.word 0xbf800000
.word 0xbe803fff
.word 0xbeffc000
.word 0xbf800000
.word 0xbf800000
.word 0xbeffc000
.word 0xbe807fff
.word 0xbf800000
.word 0xbf800000
.word 0xbe807fff
.word 0xbeff8000
.word 0xbf800000
.word 0xbf800000
.word 0xbeff8000
.word 0xbe80ffff
.word 0xbf800000
.word 0xbf800000
.word 0xbe80ffff
.word 0xbeff0000
.word 0xbf800000
.word 0xbf800000
.word 0xbeff0000
.word 0xbe81ffff
.word 0xbf800000
.word 0xbf800000
.word 0xbe81ffff
.word 0xbefe0000
.word 0xbf800000
.word 0xbf800000
.word 0xbefe0000
.word 0xbe83ffff
.word 0xbf800000
.word 0xbf800000
.word 0xbe83ffff
.word 0xbefc0000
.word 0xbf800000
.word 0xbf800000
.word 0xbefc0000
.word 0xbe87ffff
.word 0xbf800000
.word 0xbf800000
.word 0xbe87ffff
.word 0xbef80000
.word 0xbf800000
.word 0xbf800000
.word 0xbef80000
.word 0xbe8fffff
.word 0xbf800000
.word 0xbf800000
.word 0xbe8fffff
.word 0xbef00000
.word 0xbf800000
.word 0xbf800000
.word 0xbef00000
.word 0xbe9fffff
.word 0xbf800000
.word 0xbf800000
.word 0xbe9fffff
.word 0xbee00000
.word 0xbf800000
.word 0xbf800000
.word 0xbee00000
.word 0xbebfffff
.word 0xbf800000
.word 0xbf800000
.word 0xbebfffff
.word 0xbec00000
.word 0xbf800000
.word 0xbf800000
.word 0xbec00000
.word 0xbeffffff
.word 0xbf800000
.word 0xbf800000
.word 0xbeffffff
.word 0xbe000001
.word 0xbf800000
.word 0xbf800000
.word 0xbe000001
.word 0xbe000000
.word 0xbf800000
.word 0xbf800000
.word 0xbe000000
.word 0xbe7ffffe
.word 0xbf800000
.word 0xbf800000
.word 0xbe7ffffe
.word 0xbe000003
.word 0xbf800000
.word 0xbf800000
.word 0xbe000003
.word 0xbe7ffffc
.word 0xbf800000
.word 0xbf800000
.word 0xbe7ffffc
.word 0xbe000007
.word 0xbf800000
.word 0xbf800000
.word 0xbe000007
.word 0xbe7ffff8
.word 0xbf800000
.word 0xbf800000
.word 0xbe7ffff8
.word 0xbe00000f
.word 0xbf800000
.word 0xbf800000
.word 0xbe00000f
.word 0xbe7ffff0
.word 0xbf800000
.word 0xbf800000
.word 0xbe7ffff0
.word 0xbe00001f
.word 0xbf800000
.word 0xbf800000
.word 0xbe00001f
.word 0xbe7fffe0
.word 0xbf800000
.word 0xbf800000
.word 0xbe7fffe0
.word 0xbe00003f
.word 0xbf800000
.word 0xbf800000
.word 0xbe00003f
.word 0xbe7fffc0
.word 0xbf800000
.word 0xbf800000
.word 0xbe7fffc0
.word 0xbe00007f
.word 0xbf800000
.word 0xbf800000
.word 0xbe00007f
.word 0xbe7fff80
.word 0xbf800000
.word 0xbf800000
.word 0xbe7fff80
.word 0xbe0000ff
.word 0xbf800000
.word 0xbf800000
.word 0xbe0000ff
.word 0xbe7fff00
.word 0xbf800000
.word 0xbf800000
.word 0xbe7fff00
.word 0xbe0001ff
.word 0xbf800000
.word 0xbf800000
.word 0xbe0001ff
.word 0xbe7ffe00
.word 0xbf800000
.word 0xbf800000
.word 0xbe7ffe00
.word 0xbe0003ff
.word 0xbf800000
.word 0xbf800000
.word 0xbe0003ff
.word 0xbe7ffc00
.word 0xbf800000
.word 0xbf800000
.word 0xbe7ffc00
.word 0xbe0007ff
.word 0xbf800000
.word 0xbf800000
.word 0xbe0007ff
.word 0xbe7ff800
.word 0xbf800000
.word 0xbf800000
.word 0xbe7ff800
.word 0xbe000fff
.word 0xbf800000
.word 0xbf800000
.word 0xbe000fff
.word 0xbe7ff000
.word 0xbf800000
.word 0xbf800000
.word 0xbe7ff000
.word 0xbe001fff
.word 0xbf800000
.word 0xbf800000
.word 0xbe001fff
.word 0xbe7fe000
.word 0xbf800000
.word 0xbf800000
.word 0xbe7fe000
.word 0xbe003fff
.word 0xbf800000
.word 0xbf800000
.word 0xbe003fff
.word 0xbe7fc000
.word 0xbf800000
.word 0xbf800000
.word 0xbe7fc000
.word 0xbe007fff
.word 0xbf800000
.word 0xbf800000
.word 0xbe007fff
.word 0xbe7f8000
.word 0xbf800000
.word 0xbf800000
.word 0xbe7f8000
.word 0xbe00ffff
.word 0xbf800000
.word 0xbf800000
.word 0xbe00ffff
.word 0xbe7f0000
.word 0xbf800000
.word 0xbf800000
.word 0xbe7f0000
.word 0xbe01ffff
.word 0xbf800000
.word 0xbf800000
.word 0xbe01ffff
.word 0xbe7e0000
.word 0xbf800000
.word 0xbf800000
.word 0xbe7e0000
.word 0xbe03ffff
.word 0xbf800000
.word 0xbf800000
.word 0xbe03ffff
.word 0xbe7c0000
.word 0xbf800000
.word 0xbf800000
.word 0xbe7c0000
.word 0xbe07ffff
.word 0xbf800000
.word 0xbf800000
.word 0xbe07ffff
.word 0xbe780000
.word 0xbf800000
.word 0xbf800000
.word 0xbe780000
.word 0xbe0fffff
.word 0xbf800000
.word 0xbf800000
.word 0xbe0fffff
.word 0xbe700000
.word 0xbf800000
.word 0xbf800000
.word 0xbe700000
.word 0xbe1fffff
.word 0xbf800000
.word 0xbf800000
.word 0xbe1fffff
.word 0xbe600000
.word 0xbf800000
.word 0xbf800000
.word 0xbe600000
.word 0xbe3fffff
.word 0xbf800000
.word 0xbf800000
.word 0xbe3fffff
.word 0xbe400000
.word 0xbf800000
.word 0xbf800000
.word 0xbe400000
.word 0xbe7fffff
.word 0xbf800000
.word 0xbf800000
.word 0xbe7fffff
.word 0xbd800001
.word 0xbf800000
.word 0xbf800000
.word 0xbd800001
.word 0xbd800000
.word 0xbf800000
.word 0xbf800000
.word 0xbd800000
.word 0xbdfffffe
.word 0xbf800000
.word 0xbf800000
.word 0xbdfffffe
.word 0xbd800003
.word 0xbf800000
.word 0xbf800000
.word 0xbd800003
.word 0xbdfffffc
.word 0xbf800000
.word 0xbf800000
.word 0xbdfffffc
.word 0xbd800007
.word 0xbf800000
.word 0xbf800000
.word 0xbd800007
.word 0xbdfffff8
.word 0xbf800000
.word 0xbf800000
.word 0xbdfffff8
.word 0xbd80000f
.word 0xbf800000
.word 0xbf800000
.word 0xbd80000f
.word 0xbdfffff0
.word 0xbf800000
.word 0xbf800000
.word 0xbdfffff0
.word 0xbd80001f
.word 0xbf800000
.word 0xbf800000
.word 0xbd80001f
.word 0xbdffffe0
.word 0xbf800000
.word 0xbf800000
.word 0xbdffffe0
.word 0xbd80003f
.word 0xbf800000
.word 0xbf800000
.word 0xbd80003f
.word 0xbdffffc0
.word 0xbf800000
.word 0xbf800000
.word 0xbdffffc0
.word 0xbd80007f
.word 0xbf800000
.word 0xbf800000
.word 0xbd80007f
.word 0xbdffff80
.word 0xbf800000
.word 0xbf800000
.word 0xbdffff80
.word 0xbd8000ff
.word 0xbf800000
.word 0xbf800000
.word 0xbd8000ff
.word 0xbdffff00
.word 0xbf800000
.word 0xbf800000
.word 0xbdffff00
.word 0xbd8001ff
.word 0xbf800000
.word 0xbf800000
.word 0xbd8001ff
.word 0xbdfffe00
.word 0xbf800000
.word 0xbf800000
.word 0xbdfffe00
.word 0xbd8003ff
.word 0xbf800000
.word 0xbf800000
.word 0xbd8003ff
.word 0xbdfffc00
.word 0xbf800000
.word 0xbf800000
.word 0xbdfffc00
.word 0xbd8007ff
.word 0xbf800000
.word 0xbf800000
.word 0xbd8007ff
.word 0xbdfff800
.word 0xbf800000
.word 0xbf800000
.word 0xbdfff800
.word 0xbd800fff
.word 0xbf800000
.word 0xbf800000
.word 0xbd800fff
.word 0xbdfff000
.word 0xbf800000
.word 0xbf800000
.word 0xbdfff000
.word 0xbd801fff
.word 0xbf800000
.word 0xbf800000
.word 0xbd801fff
.word 0xbdffe000
.word 0xbf800000
.word 0xbf800000
.word 0xbdffe000
.word 0xbd803fff
.word 0xbf800000
.word 0xbf800000
.word 0xbd803fff
.word 0xbdffc000
.word 0xbf800000
.word 0xbf800000
.word 0xbdffc000
.word 0xbd807fff
.word 0xbf800000
.word 0xbf800000
.word 0xbd807fff
.word 0xbdff8000
.word 0xbf800000
.word 0xbf800000
.word 0xbdff8000
.word 0xbd80ffff
.word 0xbf800000
.word 0xbf800000
.word 0xbd80ffff
.word 0xbdff0000
.word 0xbf800000
.word 0xbf800000
.word 0xbdff0000
.word 0xbd81ffff
.word 0xbf800000
.word 0xbf800000
.word 0xbd81ffff
.word 0xbdfe0000
.word 0xbf800000
.word 0xbf800000
.word 0xbdfe0000
.word 0xbd83ffff
.word 0xbf800000
.word 0xbf800000
.word 0xbd83ffff
.word 0xbdfc0000
.word 0xbf800000
.word 0xbf800000
.word 0xbdfc0000
.word 0xbd87ffff
.word 0xbf800000
.word 0xbf800000
.word 0xbd87ffff
.word 0xbdf80000
.word 0xbf800000
.word 0xbf800000
.word 0xbdf80000
.word 0xbd8fffff
.word 0xbf800000
.word 0xbf800000
.word 0xbd8fffff
.word 0xbdf00000
.word 0xbf800000
.word 0xbf800000
.word 0xbdf00000
.word 0xbd9fffff
.word 0xbf800000
.word 0xbf800000
.word 0xbd9fffff
.word 0xbde00000
.word 0xbf800000
.word 0xbf800000
.word 0xbde00000
.word 0xbdbfffff
.word 0xbf800000
.word 0xbf800000
.word 0xbdbfffff
.word 0xbdc00000
.word 0xbf800000
.word 0xbf800000
.word 0xbdc00000
.word 0xbdffffff
.word 0xbf800000
.word 0xbf800000
.word 0xbdffffff
.word 0xc4000001
.word 0xbf800000
.word 0xbf800000
.word 0xc4000001
.word 0xc4000000
.word 0xbf800000
.word 0xbf800000
.word 0xc4000000
.word 0xc47ffffe
.word 0xbf800000
.word 0xbf800000
.word 0xc47ffffe
.word 0xc4000003
.word 0xbf800000
.word 0xbf800000
.word 0xc4000003
.word 0xc47ffffc
.word 0xbf800000
.word 0xbf800000
.word 0xc47ffffc
.word 0xc4000007
.word 0xbf800000
.word 0xbf800000
.word 0xc4000007
.word 0xc47ffff8
.word 0xbf800000
.word 0xbf800000
.word 0xc47ffff8
.word 0xc400000f
.word 0xbf800000
.word 0xbf800000
.word 0xc400000f
.word 0xc47ffff0
.word 0xbf800000
.word 0xbf800000
.word 0xc47ffff0
.word 0xc400001f
.word 0xbf800000
.word 0xbf800000
.word 0xc400001f
.word 0xc47fffe0
.word 0xbf800000
.word 0xbf800000
.word 0xc47fffe0
.word 0xc400003f
.word 0xbf800000
.word 0xbf800000
.word 0xc400003f
.word 0xc47fffc0
.word 0xbf800000
.word 0xbf800000
.word 0xc47fffc0
.word 0xc400007f
.word 0xbf800000
.word 0xbf800000
.word 0xc400007f
.word 0xc47fff80
.word 0xbf800000
.word 0xbf800000
.word 0xc47fff80
.word 0xc40000ff
.word 0xbf800000
.word 0xbf800000
.word 0xc40000ff
.word 0xc47fff00
.word 0xbf800000
.word 0xbf800000
.word 0xc47fff00
.word 0xc40001ff
.word 0xbf800000
.word 0xbf800000
.word 0xc40001ff
.word 0xc47ffe00
.word 0xbf800000
.word 0xbf800000
.word 0xc47ffe00
.word 0xc40003ff
.word 0xbf800000
.word 0xbf800000
.word 0xc40003ff
.word 0xc47ffc00
.word 0xbf800000
.word 0xbf800000
.word 0xc47ffc00
.word 0xc40007ff
.word 0xbf800000
.word 0xbf800000
.word 0xc40007ff
.word 0xc47ff800
.word 0xbf800000
.word 0xbf800000
.word 0xc47ff800
.word 0xc4000fff
.word 0xbf800000
.word 0xbf800000
.word 0xc4000fff
.word 0xc47ff000
.word 0xbf800000
.word 0xbf800000
.word 0xc47ff000
.word 0xc4001fff
.word 0xbf800000
.word 0xbf800000
.word 0xc4001fff
.word 0xc47fe000
.word 0xbf800000
.word 0xbf800000
.word 0xc47fe000
.word 0xc4003fff
.word 0xbf800000
.word 0xbf800000
.word 0xc4003fff
.word 0xc47fc000
.word 0xbf800000
.word 0xbf800000
.word 0xc47fc000
.word 0xc4007fff
.word 0xbf800000
.word 0xbf800000
.word 0xc4007fff
.word 0xc47f8000
.word 0xbf800000
.word 0xbf800000
.word 0xc47f8000
.word 0xc400ffff
.word 0xbf800000
.word 0xbf800000
.word 0xc400ffff
.word 0xc47f0000
.word 0xbf800000
.word 0xbf800000
.word 0xc47f0000
.word 0xc401ffff
.word 0xbf800000
.word 0xbf800000
.word 0xc401ffff
.word 0xc47e0000
.word 0xbf800000
.word 0xbf800000
.word 0xc47e0000
.word 0xc403ffff
.word 0xbf800000
.word 0xbf800000
.word 0xc403ffff
.word 0xc47c0000
.word 0xbf800000
.word 0xbf800000
.word 0xc47c0000
.word 0xc407ffff
.word 0xbf800000
.word 0xbf800000
.word 0xc407ffff
.word 0xc4780000
.word 0xbf800000
.word 0xbf800000
.word 0xc4780000
.word 0xc40fffff
.word 0xbf800000
.word 0xbf800000
.word 0xc40fffff
.word 0xc4700000
.word 0xbf800000
.word 0xbf800000
.word 0xc4700000
.word 0xc41fffff
.word 0xbf800000
.word 0xbf800000
.word 0xc41fffff
.word 0xc4600000
.word 0xbf800000
.word 0xbf800000
.word 0xc4600000
.word 0xc43fffff
.word 0xbf800000
.word 0xbf800000
.word 0xc43fffff
.word 0xc4400000
.word 0xbf800000
.word 0xbf800000
.word 0xc4400000
.word 0xc47fffff
.word 0xbf800000
.word 0xbf800000
.word 0xc47fffff
.word 0x9a800001
.word 0xbf800000
.word 0xbf800000
.word 0x9a800001
.word 0x9a800000
.word 0xbf800000
.word 0xbf800000
.word 0x9a800000
.word 0x9afffffe
.word 0xbf800000
.word 0xbf800000
.word 0x9afffffe
.word 0x9a800003
.word 0xbf800000
.word 0xbf800000
.word 0x9a800003
.word 0x9afffffc
.word 0xbf800000
.word 0xbf800000
.word 0x9afffffc
.word 0x9a800007
.word 0xbf800000
.word 0xbf800000
.word 0x9a800007
.word 0x9afffff8
.word 0xbf800000
.word 0xbf800000
.word 0x9afffff8
.word 0x9a80000f
.word 0xbf800000
.word 0xbf800000
.word 0x9a80000f
.word 0x9afffff0
.word 0xbf800000
.word 0xbf800000
.word 0x9afffff0
.word 0x9a80001f
.word 0xbf800000
.word 0xbf800000
.word 0x9a80001f
.word 0x9affffe0
.word 0xbf800000
.word 0xbf800000
.word 0x9affffe0
.word 0x9a80003f
.word 0xbf800000
.word 0xbf800000
.word 0x9a80003f
.word 0x9affffc0
.word 0xbf800000
.word 0xbf800000
.word 0x9affffc0
.word 0x9a80007f
.word 0xbf800000
.word 0xbf800000
.word 0x9a80007f
.word 0x9affff80
.word 0xbf800000
.word 0xbf800000
.word 0x9affff80
.word 0x9a8000ff
.word 0xbf800000
.word 0xbf800000
.word 0x9a8000ff
.word 0x9affff00
.word 0xbf800000
.word 0xbf800000
.word 0x9affff00
.word 0x9a8001ff
.word 0xbf800000
.word 0xbf800000
.word 0x9a8001ff
.word 0x9afffe00
.word 0xbf800000
.word 0xbf800000
.word 0x9afffe00
.word 0x9a8003ff
.word 0xbf800000
.word 0xbf800000
.word 0x9a8003ff
.word 0x9afffc00
.word 0xbf800000
.word 0xbf800000
.word 0x9afffc00
.word 0x9a8007ff
.word 0xbf800000
.word 0xbf800000
.word 0x9a8007ff
.word 0x9afff800
.word 0xbf800000
.word 0xbf800000
.word 0x9afff800
.word 0x9a800fff
.word 0xbf800000
.word 0xbf800000
.word 0x9a800fff
.word 0x9afff000
.word 0xbf800000
.word 0xbf800000
.word 0x9afff000
.word 0x9a801fff
.word 0xbf800000
.word 0xbf800000
.word 0x9a801fff
.word 0x9affe000
.word 0xbf800000
.word 0xbf800000
.word 0x9affe000
.word 0x9a803fff
.word 0xbf800000
.word 0xbf800000
.word 0x9a803fff
.word 0x9affc000
.word 0xbf800000
.word 0xbf800000
.word 0x9affc000
.word 0x9a807fff
.word 0xbf800000
.word 0xbf800000
.word 0x9a807fff
.word 0x9aff8000
.word 0xbf800000
.word 0xbf800000
.word 0x9aff8000
.word 0x9a80ffff
.word 0xbf800000
.word 0xbf800000
.word 0x9a80ffff
.word 0x9aff0000
.word 0xbf800000
.word 0xbf800000
.word 0x9aff0000
.word 0x9a81ffff
.word 0xbf800000
.word 0xbf800000
.word 0x9a81ffff
.word 0x9afe0000
.word 0xbf800000
.word 0xbf800000
.word 0x9afe0000
.word 0x9a83ffff
.word 0xbf800000
.word 0xbf800000
.word 0x9a83ffff
.word 0x9afc0000
.word 0xbf800000
.word 0xbf800000
.word 0x9afc0000
.word 0x9a87ffff
.word 0xbf800000
.word 0xbf800000
.word 0x9a87ffff
.word 0x9af80000
.word 0xbf800000
.word 0xbf800000
.word 0x9af80000
.word 0x9a8fffff
.word 0xbf800000
.word 0xbf800000
.word 0x9a8fffff
.word 0x9af00000
.word 0xbf800000
.word 0xbf800000
.word 0x9af00000
.word 0x9a9fffff
.word 0xbf800000
.word 0xbf800000
.word 0x9a9fffff
.word 0x9ae00000
.word 0xbf800000
.word 0xbf800000
.word 0x9ae00000
.word 0x9abfffff
.word 0xbf800000
.word 0xbf800000
.word 0x9abfffff
.word 0x9ac00000
.word 0xbf800000
.word 0xbf800000
.word 0x9ac00000
.word 0x9affffff
.word 0xbf800000
.word 0xbf800000
.word 0x9affffff
.word 0x3fcccccc
.word 0x3f800000
.word 0x3f800000
.word 0x3fcccccc
.word 0x3fb33333
.word 0x3f800000
.word 0x3f800000
.word 0x3fb33333
.word 0x3fdb6db6
.word 0x3f800000
.word 0x3f800000
.word 0x3fdb6db6
.word 0x3fa49249
.word 0x3f800000
.word 0x3f800000
.word 0x3fa49249
.word 0x3fc44444
.word 0x3f800000
.word 0x3f800000
.word 0x3fc44444
.word 0x3fbbbbbb
.word 0x3f800000
.word 0x3f800000
.word 0x3fbbbbbb
.word 0x3fe66666
.word 0x3f800000
.word 0x3f800000
.word 0x3fe66666
.word 0x3f999999
.word 0x3f800000
.word 0x3f800000
.word 0x3f999999
.word 0x3fedb6db
.word 0x3f800000
.word 0x3f800000
.word 0x3fedb6db
.word 0x3fb6db6d
.word 0x3f800000
.word 0x3f800000
.word 0x3fb6db6d
.word 0x3f800001
.word 0x3f800000
.word 0x3f800000
.word 0x3f800001
.word 0x3ffffffe
.word 0x3f800000
.word 0x3f800000
.word 0x3ffffffe
.word 0x3f800003
.word 0x3f800000
.word 0x3f800000
.word 0x3f800003
.word 0x3ffffffc
.word 0x3f800000
.word 0x3f800000
.word 0x3ffffffc
.word 0x3f800007
.word 0x3f800000
.word 0x3f800000
.word 0x3f800007
.word 0x3ffffff8
.word 0x3f800000
.word 0x3f800000
.word 0x3ffffff8
.word 0x41000001
.word 0x3f800000
.word 0x3f800000
.word 0x41000001
.word 0x41000000
.word 0x3f800000
.word 0x3f800000
.word 0x41000000
.word 0x417ffffe
.word 0x3f800000
.word 0x3f800000
.word 0x417ffffe
.word 0x41000003
.word 0x3f800000
.word 0x3f800000
.word 0x41000003
.word 0x417ffffc
.word 0x3f800000
.word 0x3f800000
.word 0x417ffffc
.word 0x41000007
.word 0x3f800000
.word 0x3f800000
.word 0x41000007
.word 0x417ffff8
.word 0x3f800000
.word 0x3f800000
.word 0x417ffff8
.word 0x4100000f
.word 0x3f800000
.word 0x3f800000
.word 0x4100000f
.word 0x417ffff0
.word 0x3f800000
.word 0x3f800000
.word 0x417ffff0
.word 0x4100001f
.word 0x3f800000
.word 0x3f800000
.word 0x4100001f
.word 0x417fffe0
.word 0x3f800000
.word 0x3f800000
.word 0x417fffe0
.word 0x4100003f
.word 0x3f800000
.word 0x3f800000
.word 0x4100003f
.word 0x417fffc0
.word 0x3f800000
.word 0x3f800000
.word 0x417fffc0
.word 0x4100007f
.word 0x3f800000
.word 0x3f800000
.word 0x4100007f
.word 0x417fff80
.word 0x3f800000
.word 0x3f800000
.word 0x417fff80
.word 0x410000ff
.word 0x3f800000
.word 0x3f800000
.word 0x410000ff
.word 0x417fff00
.word 0x3f800000
.word 0x3f800000
.word 0x417fff00
.word 0x410001ff
.word 0x3f800000
.word 0x3f800000
.word 0x410001ff
.word 0x417ffe00
.word 0x3f800000
.word 0x3f800000
.word 0x417ffe00
.word 0x410003ff
.word 0x3f800000
.word 0x3f800000
.word 0x410003ff
.word 0x417ffc00
.word 0x3f800000
.word 0x3f800000
.word 0x417ffc00
.word 0x410007ff
.word 0x3f800000
.word 0x3f800000
.word 0x410007ff
.word 0x417ff800
.word 0x3f800000
.word 0x3f800000
.word 0x417ff800
.word 0x41000fff
.word 0x3f800000
.word 0x3f800000
.word 0x41000fff
.word 0x417ff000
.word 0x3f800000
.word 0x3f800000
.word 0x417ff000
.word 0x41001fff
.word 0x3f800000
.word 0x3f800000
.word 0x41001fff
.word 0x417fe000
.word 0x3f800000
.word 0x3f800000
.word 0x417fe000
.word 0x41003fff
.word 0x3f800000
.word 0x3f800000
.word 0x41003fff
.word 0x417fc000
.word 0x3f800000
.word 0x3f800000
.word 0x417fc000
.word 0x41007fff
.word 0x3f800000
.word 0x3f800000
.word 0x41007fff
.word 0x417f8000
.word 0x3f800000
.word 0x3f800000
.word 0x417f8000
.word 0x4100ffff
.word 0x3f800000
.word 0x3f800000
.word 0x4100ffff
.word 0x417f0000
.word 0x3f800000
.word 0x3f800000
.word 0x417f0000
.word 0x4101ffff
.word 0x3f800000
.word 0x3f800000
.word 0x4101ffff
.word 0x417e0000
.word 0x3f800000
.word 0x3f800000
.word 0x417e0000
.word 0x4103ffff
.word 0x3f800000
.word 0x3f800000
.word 0x4103ffff
.word 0x417c0000
.word 0x3f800000
.word 0x3f800000
.word 0x417c0000
.word 0x4107ffff
.word 0x3f800000
.word 0x3f800000
.word 0x4107ffff
.word 0x41780000
.word 0x3f800000
.word 0x3f800000
.word 0x41780000
.word 0x410fffff
.word 0x3f800000
.word 0x3f800000
.word 0x410fffff
.word 0x41700000
.word 0x3f800000
.word 0x3f800000
.word 0x41700000
.word 0x411fffff
.word 0x3f800000
.word 0x3f800000
.word 0x411fffff
.word 0x41600000
.word 0x3f800000
.word 0x3f800000
.word 0x41600000
.word 0x413fffff
.word 0x3f800000
.word 0x3f800000
.word 0x413fffff
.word 0x41400000
.word 0x3f800000
.word 0x3f800000
.word 0x41400000
.word 0x417fffff
.word 0x3f800000
.word 0x3f800000
.word 0x417fffff
.word 0x40800001
.word 0x3f800000
.word 0x3f800000
.word 0x40800001
.word 0x40800000
.word 0x3f800000
.word 0x3f800000
.word 0x40800000
.word 0x40fffffe
.word 0x3f800000
.word 0x3f800000
.word 0x40fffffe
.word 0x40800003
.word 0x3f800000
.word 0x3f800000
.word 0x40800003
.word 0x40fffffc
.word 0x3f800000
.word 0x3f800000
.word 0x40fffffc
.word 0x40800007
.word 0x3f800000
.word 0x3f800000
.word 0x40800007
.word 0x40fffff8
.word 0x3f800000
.word 0x3f800000
.word 0x40fffff8
.word 0x4080000f
.word 0x3f800000
.word 0x3f800000
.word 0x4080000f
.word 0x40fffff0
.word 0x3f800000
.word 0x3f800000
.word 0x40fffff0
.word 0x4080001f
.word 0x3f800000
.word 0x3f800000
.word 0x4080001f
.word 0x40ffffe0
.word 0x3f800000
.word 0x3f800000
.word 0x40ffffe0
.word 0x4080003f
.word 0x3f800000
.word 0x3f800000
.word 0x4080003f
.word 0x40ffffc0
.word 0x3f800000
.word 0x3f800000
.word 0x40ffffc0
.word 0x4080007f
.word 0x3f800000
.word 0x3f800000
.word 0x4080007f
.word 0x40ffff80
.word 0x3f800000
.word 0x3f800000
.word 0x40ffff80
.word 0x408000ff
.word 0x3f800000
.word 0x3f800000
.word 0x408000ff
.word 0x40ffff00
.word 0x3f800000
.word 0x3f800000
.word 0x40ffff00
.word 0x408001ff
.word 0x3f800000
.word 0x3f800000
.word 0x408001ff
.word 0x40fffe00
.word 0x3f800000
.word 0x3f800000
.word 0x40fffe00
.word 0x408003ff
.word 0x3f800000
.word 0x3f800000
.word 0x408003ff
.word 0x40fffc00
.word 0x3f800000
.word 0x3f800000
.word 0x40fffc00
.word 0x408007ff
.word 0x3f800000
.word 0x3f800000
.word 0x408007ff
.word 0x40fff800
.word 0x3f800000
.word 0x3f800000
.word 0x40fff800
.word 0x40800fff
.word 0x3f800000
.word 0x3f800000
.word 0x40800fff
.word 0x40fff000
.word 0x3f800000
.word 0x3f800000
.word 0x40fff000
.word 0x40801fff
.word 0x3f800000
.word 0x3f800000
.word 0x40801fff
.word 0x40ffe000
.word 0x3f800000
.word 0x3f800000
.word 0x40ffe000
.word 0x40803fff
.word 0x3f800000
.word 0x3f800000
.word 0x40803fff
.word 0x40ffc000
.word 0x3f800000
.word 0x3f800000
.word 0x40ffc000
.word 0x40807fff
.word 0x3f800000
.word 0x3f800000
.word 0x40807fff
.word 0x40ff8000
.word 0x3f800000
.word 0x3f800000
.word 0x40ff8000
.word 0x4080ffff
.word 0x3f800000
.word 0x3f800000
.word 0x4080ffff
.word 0x40ff0000
.word 0x3f800000
.word 0x3f800000
.word 0x40ff0000
.word 0x4081ffff
.word 0x3f800000
.word 0x3f800000
.word 0x4081ffff
.word 0x40fe0000
.word 0x3f800000
.word 0x3f800000
.word 0x40fe0000
.word 0x4083ffff
.word 0x3f800000
.word 0x3f800000
.word 0x4083ffff
.word 0x40fc0000
.word 0x3f800000
.word 0x3f800000
.word 0x40fc0000
.word 0x4087ffff
.word 0x3f800000
.word 0x3f800000
.word 0x4087ffff
.word 0x40f80000
.word 0x3f800000
.word 0x3f800000
.word 0x40f80000
.word 0x408fffff
.word 0x3f800000
.word 0x3f800000
.word 0x408fffff
.word 0x40f00000
.word 0x3f800000
.word 0x3f800000
.word 0x40f00000
.word 0x409fffff
.word 0x3f800000
.word 0x3f800000
.word 0x409fffff
.word 0x40e00000
.word 0x3f800000
.word 0x3f800000
.word 0x40e00000
.word 0x40bfffff
.word 0x3f800000
.word 0x3f800000
.word 0x40bfffff
.word 0x40c00000
.word 0x3f800000
.word 0x3f800000
.word 0x40c00000
.word 0x40ffffff
.word 0x3f800000
.word 0x3f800000
.word 0x40ffffff
.word 0x40000001
.word 0x3f800000
.word 0x3f800000
.word 0x40000001
.word 0x40000000
.word 0x3f800000
.word 0x3f800000
.word 0x40000000
.word 0x407ffffe
.word 0x3f800000
.word 0x3f800000
.word 0x407ffffe
.word 0x40000003
.word 0x3f800000
.word 0x3f800000
.word 0x40000003
.word 0x407ffffc
.word 0x3f800000
.word 0x3f800000
.word 0x407ffffc
.word 0x40000007
.word 0x3f800000
.word 0x3f800000
.word 0x40000007
.word 0x407ffff8
.word 0x3f800000
.word 0x3f800000
.word 0x407ffff8
.word 0x4000000f
.word 0x3f800000
.word 0x3f800000
.word 0x4000000f
.word 0x407ffff0
.word 0x3f800000
.word 0x3f800000
.word 0x407ffff0
.word 0x4000001f
.word 0x3f800000
.word 0x3f800000
.word 0x4000001f
.word 0x407fffe0
.word 0x3f800000
.word 0x3f800000
.word 0x407fffe0
.word 0x4000003f
.word 0x3f800000
.word 0x3f800000
.word 0x4000003f
.word 0x407fffc0
.word 0x3f800000
.word 0x3f800000
.word 0x407fffc0
.word 0x4000007f
.word 0x3f800000
.word 0x3f800000
.word 0x4000007f
.word 0x407fff80
.word 0x3f800000
.word 0x3f800000
.word 0x407fff80
.word 0x400000ff
.word 0x3f800000
.word 0x3f800000
.word 0x400000ff
.word 0x407fff00
.word 0x3f800000
.word 0x3f800000
.word 0x407fff00
.word 0x400001ff
.word 0x3f800000
.word 0x3f800000
.word 0x400001ff
.word 0x407ffe00
.word 0x3f800000
.word 0x3f800000
.word 0x407ffe00
.word 0x400003ff
.word 0x3f800000
.word 0x3f800000
.word 0x400003ff
.word 0x407ffc00
.word 0x3f800000
.word 0x3f800000
.word 0x407ffc00
.word 0x400007ff
.word 0x3f800000
.word 0x3f800000
.word 0x400007ff
.word 0x407ff800
.word 0x3f800000
.word 0x3f800000
.word 0x407ff800
.word 0x40000fff
.word 0x3f800000
.word 0x3f800000
.word 0x40000fff
.word 0x407ff000
.word 0x3f800000
.word 0x3f800000
.word 0x407ff000
.word 0x40001fff
.word 0x3f800000
.word 0x3f800000
.word 0x40001fff
.word 0x407fe000
.word 0x3f800000
.word 0x3f800000
.word 0x407fe000
.word 0x40003fff
.word 0x3f800000
.word 0x3f800000
.word 0x40003fff
.word 0x407fc000
.word 0x3f800000
.word 0x3f800000
.word 0x407fc000
.word 0x40007fff
.word 0x3f800000
.word 0x3f800000
.word 0x40007fff
.word 0x407f8000
.word 0x3f800000
.word 0x3f800000
.word 0x407f8000
.word 0x4000ffff
.word 0x3f800000
.word 0x3f800000
.word 0x4000ffff
.word 0x407f0000
.word 0x3f800000
.word 0x3f800000
.word 0x407f0000
.word 0x4001ffff
.word 0x3f800000
.word 0x3f800000
.word 0x4001ffff
.word 0x407e0000
.word 0x3f800000
.word 0x3f800000
.word 0x407e0000
.word 0x4003ffff
.word 0x3f800000
.word 0x3f800000
.word 0x4003ffff
.word 0x407c0000
.word 0x3f800000
.word 0x3f800000
.word 0x407c0000
.word 0x4007ffff
.word 0x3f800000
.word 0x3f800000
.word 0x4007ffff
.word 0x40780000
.word 0x3f800000
.word 0x3f800000
.word 0x40780000
.word 0x400fffff
.word 0x3f800000
.word 0x3f800000
.word 0x400fffff
.word 0x40700000
.word 0x3f800000
.word 0x3f800000
.word 0x40700000
.word 0x401fffff
.word 0x3f800000
.word 0x3f800000
.word 0x401fffff
.word 0x40600000
.word 0x3f800000
.word 0x3f800000
.word 0x40600000
.word 0x403fffff
.word 0x3f800000
.word 0x3f800000
.word 0x403fffff
.word 0x40400000
.word 0x3f800000
.word 0x3f800000
.word 0x40400000
.word 0x407fffff
.word 0x3f800000
.word 0x3f800000
.word 0x407fffff
.word 0x3f800000
.word 0x3f800000
.word 0x3f80000f
.word 0x3f800000
.word 0x3f800000
.word 0x3f80000f
.word 0x3ffffff0
.word 0x3f800000
.word 0x3f800000
.word 0x3ffffff0
.word 0x3f80001f
.word 0x3f800000
.word 0x3f800000
.word 0x3f80001f
.word 0x3fffffe0
.word 0x3f800000
.word 0x3f800000
.word 0x3fffffe0
.word 0x3f80003f
.word 0x3f800000
.word 0x3f800000
.word 0x3f80003f
.word 0x3fffffc0
.word 0x3f800000
.word 0x3f800000
.word 0x3fffffc0
.word 0x3f80007f
.word 0x3f800000
.word 0x3f800000
.word 0x3f80007f
.word 0x3fffff80
.word 0x3f800000
.word 0x3f800000
.word 0x3fffff80
.word 0x3f8000ff
.word 0x3f800000
.word 0x3f800000
.word 0x3f8000ff
.word 0x3fffff00
.word 0x3f800000
.word 0x3f800000
.word 0x3fffff00
.word 0x3f8001ff
.word 0x3f800000
.word 0x3f800000
.word 0x3f8001ff
.word 0x3ffffe00
.word 0x3f800000
.word 0x3f800000
.word 0x3ffffe00
.word 0x3f8003ff
.word 0x3f800000
.word 0x3f800000
.word 0x3f8003ff
.word 0x3ffffc00
.word 0x3f800000
.word 0x3f800000
.word 0x3ffffc00
.word 0x3f8007ff
.word 0x3f800000
.word 0x3f800000
.word 0x3f8007ff
.word 0x3ffff800
.word 0x3f800000
.word 0x3f800000
.word 0x3ffff800
.word 0x3f800fff
.word 0x3f800000
.word 0x3f800000
.word 0x3f800fff
.word 0x3ffff000
.word 0x3f800000
.word 0x3f800000
.word 0x3ffff000
.word 0x3f801fff
.word 0x3f800000
.word 0x3f800000
.word 0x3f801fff
.word 0x3fffe000
.word 0x3f800000
.word 0x3f800000
.word 0x3fffe000
.word 0x3f803fff
.word 0x3f800000
.word 0x3f800000
.word 0x3f803fff
.word 0x3fffc000
.word 0x3f800000
.word 0x3f800000
.word 0x3fffc000
.word 0x3f807fff
.word 0x3f800000
.word 0x3f800000
.word 0x3f807fff
.word 0x3fff8000
.word 0x3f800000
.word 0x3f800000
.word 0x3fff8000
.word 0x3f80ffff
.word 0x3f800000
.word 0x3f800000
.word 0x3f80ffff
.word 0x3fff0000
.word 0x3f800000
.word 0x3f800000
.word 0x3fff0000
.word 0x3f81ffff
.word 0x3f800000
.word 0x3f800000
.word 0x3f81ffff
.word 0x3ffe0000
.word 0x3f800000
.word 0x3f800000
.word 0x3ffe0000
.word 0x3f83ffff
.word 0x3f800000
.word 0x3f800000
.word 0x3f83ffff
.word 0x3ffc0000
.word 0x3f800000
.word 0x3f800000
.word 0x3ffc0000
.word 0x3f87ffff
.word 0x3f800000
.word 0x3f800000
.word 0x3f87ffff
.word 0x3ff80000
.word 0x3f800000
.word 0x3f800000
.word 0x3ff80000
.word 0x3f8fffff
.word 0x3f800000
.word 0x3f800000
.word 0x3f8fffff
.word 0x3ff00000
.word 0x3f800000
.word 0x3f800000
.word 0x3ff00000
.word 0x3f9fffff
.word 0x3f800000
.word 0x3f800000
.word 0x3f9fffff
.word 0x3fe00000
.word 0x3f800000
.word 0x3f800000
.word 0x3fe00000
.word 0x3fbfffff
.word 0x3f800000
.word 0x3f800000
.word 0x3fbfffff
.word 0x3fc00000
.word 0x3f800000
.word 0x3f800000
.word 0x3fc00000
.word 0x3fffffff
.word 0x3f800000
.word 0x3f800000
.word 0x3fffffff
.word 0x3f000001
.word 0x3f800000
.word 0x3f800000
.word 0x3f000001
.word 0x3f000000
.word 0x3f800000
.word 0x3f800000
.word 0x3f000000
.word 0x3f7ffffe
.word 0x3f800000
.word 0x3f800000
.word 0x3f7ffffe
.word 0x3f000003
.word 0x3f800000
.word 0x3f800000
.word 0x3f000003
.word 0x3f7ffffc
.word 0x3f800000
.word 0x3f800000
.word 0x3f7ffffc
.word 0x3f000007
.word 0x3f800000
.word 0x3f800000
.word 0x3f000007
.word 0x3f7ffff8
.word 0x3f800000
.word 0x3f800000
.word 0x3f7ffff8
.word 0x3f00000f
.word 0x3f800000
.word 0x3f800000
.word 0x3f00000f
.word 0x3f7ffff0
.word 0x3f800000
.word 0x3f800000
.word 0x3f7ffff0
.word 0x3f00001f
.word 0x3f800000
.word 0x3f800000
.word 0x3f00001f
.word 0x3f7fffe0
.word 0x3f800000
.word 0x3f800000
.word 0x3f7fffe0
.word 0x3f00003f
.word 0x3f800000
.word 0x3f800000
.word 0x3f00003f
.word 0x3f7fffc0
.word 0x3f800000
.word 0x3f800000
.word 0x3f7fffc0
.word 0x3f00007f
.word 0x3f800000
.word 0x3f800000
.word 0x3f00007f
.word 0x3f7fff80
.word 0x3f800000
.word 0x3f800000
.word 0x3f7fff80
.word 0x3f0000ff
.word 0x3f800000
.word 0x3f800000
.word 0x3f0000ff
.word 0x3f7fff00
.word 0x3f800000
.word 0x3f800000
.word 0x3f7fff00
.word 0x3f0001ff
.word 0x3f800000
.word 0x3f800000
.word 0x3f0001ff
.word 0x3f7ffe00
.word 0x3f800000
.word 0x3f800000
.word 0x3f7ffe00
.word 0x3f0003ff
.word 0x3f800000
.word 0x3f800000
.word 0x3f0003ff
.word 0x3f7ffc00
.word 0x3f800000
.word 0x3f800000
.word 0x3f7ffc00
.word 0x3f0007ff
.word 0x3f800000
.word 0x3f800000
.word 0x3f0007ff
.word 0x3f7ff800
.word 0x3f800000
.word 0x3f800000
.word 0x3f7ff800
.word 0x3f000fff
.word 0x3f800000
.word 0x3f800000
.word 0x3f000fff
.word 0x3f7ff000
.word 0x3f800000
.word 0x3f800000
.word 0x3f7ff000
.word 0x3f001fff
.word 0x3f800000
.word 0x3f800000
.word 0x3f001fff
.word 0x3f7fe000
.word 0x3f800000
.word 0x3f800000
.word 0x3f7fe000
.word 0x3f003fff
.word 0x3f800000
.word 0x3f800000
.word 0x3f003fff
.word 0x3f7fc000
.word 0x3f800000
.word 0x3f800000
.word 0x3f7fc000
.word 0x3f007fff
.word 0x3f800000
.word 0x3f800000
.word 0x3f007fff
.word 0x3f7f8000
.word 0x3f800000
.word 0x3f800000
.word 0x3f7f8000
.word 0x3f00ffff
.word 0x3f800000
.word 0x3f800000
.word 0x3f00ffff
.word 0x3f7f0000
.word 0x3f800000
.word 0x3f800000
.word 0x3f7f0000
.word 0x3f01ffff
.word 0x3f800000
.word 0x3f800000
.word 0x3f01ffff
.word 0x3f7e0000
.word 0x3f800000
.word 0x3f800000
.word 0x3f7e0000
.word 0x3f03ffff
.word 0x3f800000
.word 0x3f800000
.word 0x3f03ffff
.word 0x3f7c0000
.word 0x3f800000
.word 0x3f800000
.word 0x3f7c0000
.word 0x3f07ffff
.word 0x3f800000
.word 0x3f800000
.word 0x3f07ffff
.word 0x3f780000
.word 0x3f800000
.word 0x3f800000
.word 0x3f780000
.word 0x3f0fffff
.word 0x3f800000
.word 0x3f800000
.word 0x3f0fffff
.word 0x3f700000
.word 0x3f800000
.word 0x3f800000
.word 0x3f700000
.word 0x3f1fffff
.word 0x3f800000
.word 0x3f800000
.word 0x3f1fffff
.word 0x3f600000
.word 0x3f800000
.word 0x3f800000
.word 0x3f600000
.word 0x3f3fffff
.word 0x3f800000
.word 0x3f800000
.word 0x3f3fffff
.word 0x3f400000
.word 0x3f800000
.word 0x3f800000
.word 0x3f400000
.word 0x3f7fffff
.word 0x3f800000
.word 0x3f800000
.word 0x3f7fffff
.word 0x3e800001
.word 0x3f800000
.word 0x3f800000
.word 0x3e800001
.word 0x3e800000
.word 0x3f800000
.word 0x3f800000
.word 0x3e800000
.word 0x3efffffe
.word 0x3f800000
.word 0x3f800000
.word 0x3efffffe
.word 0x3e800003
.word 0x3f800000
.word 0x3f800000
.word 0x3e800003
.word 0x3efffffc
.word 0x3f800000
.word 0x3f800000
.word 0x3efffffc
.word 0x3e800007
.word 0x3f800000
.word 0x3f800000
.word 0x3e800007
.word 0x3efffff8
.word 0x3f800000
.word 0x3f800000
.word 0x3efffff8
.word 0x3e80000f
.word 0x3f800000
.word 0x3f800000
.word 0x3e80000f
.word 0x3efffff0
.word 0x3f800000
.word 0x3f800000
.word 0x3efffff0
.word 0x3e80001f
.word 0x3f800000
.word 0x3f800000
.word 0x3e80001f
.word 0x3effffe0
.word 0x3f800000
.word 0x3f800000
.word 0x3effffe0
.word 0x3e80003f
.word 0x3f800000
.word 0x3f800000
.word 0x3e80003f
.word 0x3effffc0
.word 0x3f800000
.word 0x3f800000
.word 0x3effffc0
.word 0x3e80007f
.word 0x3f800000
.word 0x3f800000
.word 0x3e80007f
.word 0x3effff80
.word 0x3f800000
.word 0x3f800000
.word 0x3effff80
.word 0x3e8000ff
.word 0x3f800000
.word 0x3f800000
.word 0x3e8000ff
.word 0x3effff00
.word 0x3f800000
.word 0x3f800000
.word 0x3effff00
.word 0x3e8001ff
.word 0x3f800000
.word 0x3f800000
.word 0x3e8001ff
.word 0x3efffe00
.word 0x3f800000
.word 0x3f800000
.word 0x3efffe00
.word 0x3e8003ff
.word 0x3f800000
.word 0x3f800000
.word 0x3e8003ff
.word 0x3efffc00
.word 0x3f800000
.word 0x3f800000
.word 0x3efffc00
.word 0x3e8007ff
.word 0x3f800000
.word 0x3f800000
.word 0x3e8007ff
.word 0x3efff800
.word 0x3f800000
.word 0x3f800000
.word 0x3efff800
.word 0x3e800fff
.word 0x3f800000
.word 0x3f800000
.word 0x3e800fff
.word 0x3efff000
.word 0x3f800000
.word 0x3f800000
.word 0x3efff000
.word 0x3e801fff
.word 0x3f800000
.word 0x3f800000
.word 0x3e801fff
.word 0x3effe000
.word 0x3f800000
.word 0x3f800000
.word 0x3effe000
.word 0x3e803fff
.word 0x3f800000
.word 0x3f800000
.word 0x3e803fff
.word 0x3effc000
.word 0x3f800000
.word 0x3f800000
.word 0x3effc000
.word 0x3e807fff
.word 0x3f800000
.word 0x3f800000
.word 0x3e807fff
.word 0x3eff8000
.word 0x3f800000
.word 0x3f800000
.word 0x3eff8000
.word 0x3e80ffff
.word 0x3f800000
.word 0x3f800000
.word 0x3e80ffff
.word 0x3eff0000
.word 0x3f800000
.word 0x3f800000
.word 0x3eff0000
.word 0x3e81ffff
.word 0x3f800000
.word 0x3f800000
.word 0x3e81ffff
.word 0x3efe0000
.word 0x3f800000
.word 0x3f800000
.word 0x3efe0000
.word 0x3e83ffff
.word 0x3f800000
.word 0x3f800000
.word 0x3e83ffff
.word 0x3efc0000
.word 0x3f800000
.word 0x3f800000
.word 0x3efc0000
.word 0x3e87ffff
.word 0x3f800000
.word 0x3f800000
.word 0x3e87ffff
.word 0x3ef80000
.word 0x3f800000
.word 0x3f800000
.word 0x3ef80000
.word 0x3e8fffff
.word 0x3f800000
.word 0x3f800000
.word 0x3e8fffff
.word 0x3ef00000
.word 0x3f800000
.word 0x3f800000
.word 0x3ef00000
.word 0x3e9fffff
.word 0x3f800000
.word 0x3f800000
.word 0x3e9fffff
.word 0x3ee00000
.word 0x3f800000
.word 0x3f800000
.word 0x3ee00000
.word 0x3ebfffff
.word 0x3f800000
.word 0x3f800000
.word 0x3ebfffff
.word 0x3ec00000
.word 0x3f800000
.word 0x3f800000
.word 0x3ec00000
.word 0x3effffff
.word 0x3f800000
.word 0x3f800000
.word 0x3effffff
.word 0x3e000001
.word 0x3f800000
.word 0x3f800000
.word 0x3e000001
.word 0x3e000000
.word 0x3f800000
.word 0x3f800000
.word 0x3e000000
.word 0x3e7ffffe
.word 0x3f800000
.word 0x3f800000
.word 0x3e7ffffe
.word 0x3e000003
.word 0x3f800000
.word 0x3f800000
.word 0x3e000003
.word 0x3e7ffffc
.word 0x3f800000
.word 0x3f800000
.word 0x3e7ffffc
.word 0x3e000007
.word 0x3f800000
.word 0x3f800000
.word 0x3e000007
.word 0x3e7ffff8
.word 0x3f800000
.word 0x3f800000
.word 0x3e7ffff8
.word 0x3e00000f
.word 0x3f800000
.word 0x3f800000
.word 0x3e00000f
.word 0x3e7ffff0
.word 0x3f800000
.word 0x3f800000
.word 0x3e7ffff0
.word 0x3e00001f
.word 0x3f800000
.word 0x3f800000
.word 0x3e00001f
.word 0x3e7fffe0
.word 0x3f800000
.word 0x3f800000
.word 0x3e7fffe0
.word 0x3e00003f
.word 0x3f800000
.word 0x3f800000
.word 0x3e00003f
.word 0x3e7fffc0
.word 0x3f800000
.word 0x3f800000
.word 0x3e7fffc0
.word 0x3e00007f
.word 0x3f800000
.word 0x3f800000
.word 0x3e00007f
.word 0x3e7fff80
.word 0x3f800000
.word 0x3f800000
.word 0x3e7fff80
.word 0x3e0000ff
.word 0x3f800000
.word 0x3f800000
.word 0x3e0000ff
.word 0x3e7fff00
.word 0x3f800000
.word 0x3f800000
.word 0x3e7fff00
.word 0x3e0001ff
.word 0x3f800000
.word 0x3f800000
.word 0x3e0001ff
.word 0x3e7ffe00
.word 0x3f800000
.word 0x3f800000
.word 0x3e7ffe00
.word 0x3e0003ff
.word 0x3f800000
.word 0x3f800000
.word 0x3e0003ff
.word 0x3e7ffc00
.word 0x3f800000
.word 0x3f800000
.word 0x3e7ffc00
.word 0x3e0007ff
.word 0x3f800000
.word 0x3f800000
.word 0x3e0007ff
.word 0x3e7ff800
.word 0x3f800000
.word 0x3f800000
.word 0x3e7ff800
.word 0x3e000fff
.word 0x3f800000
.word 0x3f800000
.word 0x3e000fff
.word 0x3e7ff000
.word 0x3f800000
.word 0x3f800000
.word 0x3e7ff000
.word 0x3e001fff
.word 0x3f800000
.word 0x3f800000
.word 0x3e001fff
.word 0x3e7fe000
.word 0x3f800000
.word 0x3f800000
.word 0x3e7fe000
.word 0x3e003fff
.word 0x3f800000
.word 0x3f800000
.word 0x3e003fff
.word 0x3e7fc000
.word 0x3f800000
.word 0x3f800000
.word 0x3e7fc000
.word 0x3e007fff
.word 0x3f800000
.word 0x3f800000
.word 0x3e007fff
.word 0x3e7f8000
.word 0x3f800000
.word 0x3f800000
.word 0x3e7f8000
.word 0x3e00ffff
.word 0x3f800000
.word 0x3f800000
.word 0x3e00ffff
.word 0x3e7f0000
.word 0x3f800000
.word 0x3f800000
.word 0x3e7f0000
.word 0x3e01ffff
.word 0x3f800000
.word 0x3f800000
.word 0x3e01ffff
.word 0x3e7e0000
.word 0x3f800000
.word 0x3f800000
.word 0x3e7e0000
.word 0x3e03ffff
.word 0x3f800000
.word 0x3f800000
.word 0x3e03ffff
.word 0x3e7c0000
.word 0x3f800000
.word 0x3f800000
.word 0x3e7c0000
.word 0x3e07ffff
.word 0x3f800000
.word 0x3f800000
.word 0x3e07ffff
.word 0x3e780000
.word 0x3f800000
.word 0x3f800000
.word 0x3e780000
.word 0x3e0fffff
.word 0x3f800000
.word 0x3f800000
.word 0x3e0fffff
.word 0x3e700000
.word 0x3f800000
.word 0x3f800000
.word 0x3e700000
.word 0x3e1fffff
.word 0x3f800000
.word 0x3f800000
.word 0x3e1fffff
.word 0x3e600000
.word 0x3f800000
.word 0x3f800000
.word 0x3e600000
.word 0x3e3fffff
.word 0x3f800000
.word 0x3f800000
.word 0x3e3fffff
.word 0x3e400000
.word 0x3f800000
.word 0x3f800000
.word 0x3e400000
.word 0x3e7fffff
.word 0x3f800000
.word 0x3f800000
.word 0x3e7fffff
.word 0x3d800001
.word 0x3f800000
.word 0x3f800000
.word 0x3d800001
.word 0x3d800000
.word 0x3f800000
.word 0x3f800000
.word 0x3d800000
.word 0x3dfffffe
.word 0x3f800000
.word 0x3f800000
.word 0x3dfffffe
.word 0x3d800003
.word 0x3f800000
.word 0x3f800000
.word 0x3d800003
.word 0x3dfffffc
.word 0x3f800000
.word 0x3f800000
.word 0x3dfffffc
.word 0x3d800007
.word 0x3f800000
.word 0x3f800000
.word 0x3d800007
.word 0x3dfffff8
.word 0x3f800000
.word 0x3f800000
.word 0x3dfffff8
.word 0x3d80000f
.word 0x3f800000
.word 0x3f800000
.word 0x3d80000f
.word 0x3dfffff0
.word 0x3f800000
.word 0x3f800000
.word 0x3dfffff0
.word 0x3d80001f
.word 0x3f800000
.word 0x3f800000
.word 0x3d80001f
.word 0x3dffffe0
.word 0x3f800000
.word 0x3f800000
.word 0x3dffffe0
.word 0x3d80003f
.word 0x3f800000
.word 0x3f800000
.word 0x3d80003f
.word 0x3dffffc0
.word 0x3f800000
.word 0x3f800000
.word 0x3dffffc0
.word 0x3d80007f
.word 0x3f800000
.word 0x3f800000
.word 0x3d80007f
.word 0x3dffff80
.word 0x3f800000
.word 0x3f800000
.word 0x3dffff80
.word 0x3d8000ff
.word 0x3f800000
.word 0x3f800000
.word 0x3d8000ff
.word 0x3dffff00
.word 0x3f800000
.word 0x3f800000
.word 0x3dffff00
.word 0x3d8001ff
.word 0x3f800000
.word 0x3f800000
.word 0x3d8001ff
.word 0x3dfffe00
.word 0x3f800000
.word 0x3f800000
.word 0x3dfffe00
.word 0x3d8003ff
.word 0x3f800000
.word 0x3f800000
.word 0x3d8003ff
.word 0x3dfffc00
.word 0x3f800000
.word 0x3f800000
.word 0x3dfffc00
.word 0x3d8007ff
.word 0x3f800000
.word 0x3f800000
.word 0x3d8007ff
.word 0x3dfff800
.word 0x3f800000
.word 0x3f800000
.word 0x3dfff800
.word 0x3d800fff
.word 0x3f800000
.word 0x3f800000
.word 0x3d800fff
.word 0x3dfff000
.word 0x3f800000
.word 0x3f800000
.word 0x3dfff000
.word 0x3d801fff
.word 0x3f800000
.word 0x3f800000
.word 0x3d801fff
.word 0x3dffe000
.word 0x3f800000
.word 0x3f800000
.word 0x3dffe000
.word 0x3d803fff
.word 0x3f800000
.word 0x3f800000
.word 0x3d803fff
.word 0x3dffc000
.word 0x3f800000
.word 0x3f800000
.word 0x3dffc000
.word 0x3d807fff
.word 0x3f800000
.word 0x3f800000
.word 0x3d807fff
.word 0x3dff8000
.word 0x3f800000
.word 0x3f800000
.word 0x3dff8000
.word 0x3d80ffff
.word 0x3f800000
.word 0x3f800000
.word 0x3d80ffff
.word 0x3dff0000
.word 0x3f800000
.word 0x3f800000
.word 0x3dff0000
.word 0x3d81ffff
.word 0x3f800000
.word 0x3f800000
.word 0x3d81ffff
.word 0x3dfe0000
.word 0x3f800000
.word 0x3f800000
.word 0x3dfe0000
.word 0x3d83ffff
.word 0x3f800000
.word 0x3f800000
.word 0x3d83ffff
.word 0x3dfc0000
.word 0x3f800000
.word 0x3f800000
.word 0x3dfc0000
.word 0x3d87ffff
.word 0x3f800000
.word 0x3f800000
.word 0x3d87ffff
.word 0x3df80000
.word 0x3f800000
.word 0x3f800000
.word 0x3df80000
.word 0x3d8fffff
.word 0x3f800000
.word 0x3f800000
.word 0x3d8fffff
.word 0x3df00000
.word 0x3f800000
.word 0x3f800000
.word 0x3df00000
.word 0x3d9fffff
.word 0x3f800000
.word 0x3f800000
.word 0x3d9fffff
.word 0x3de00000
.word 0x3f800000
.word 0x3f800000
.word 0x3de00000
.word 0x3dbfffff
.word 0x3f800000
.word 0x3f800000
.word 0x3dbfffff
.word 0x3dc00000
.word 0x3f800000
.word 0x3f800000
.word 0x3dc00000
.word 0x3dffffff
.word 0x3f800000
.word 0x3f800000
.word 0x3dffffff
.word 0x7a000001
.word 0x3f800000
.word 0x3f800000
.word 0x7a000001
.word 0x7a000000
.word 0x3f800000
.word 0x3f800000
.word 0x7a000000
.word 0x7a7ffffe
.word 0x3f800000
.word 0x3f800000
.word 0x7a7ffffe
.word 0x7a000003
.word 0x3f800000
.word 0x3f800000
.word 0x7a000003
.word 0x7a7ffffc
.word 0x3f800000
.word 0x3f800000
.word 0x7a7ffffc
.word 0x7a000007
.word 0x3f800000
.word 0x3f800000
.word 0x7a000007
.word 0x7a7ffff8
.word 0x3f800000
.word 0x3f800000
.word 0x7a7ffff8
.word 0x7a00000f
.word 0x3f800000
.word 0x3f800000
.word 0x7a00000f
.word 0x7a7ffff0
.word 0x3f800000
.word 0x3f800000
.word 0x7a7ffff0
.word 0x7a00001f
.word 0x3f800000
.word 0x3f800000
.word 0x7a00001f
.word 0x7a7fffe0
.word 0x3f800000
.word 0x3f800000
.word 0x7a7fffe0
.word 0x7a00003f
.word 0x3f800000
.word 0x3f800000
.word 0x7a00003f
.word 0x7a7fffc0
.word 0x3f800000
.word 0x3f800000
.word 0x7a7fffc0
.word 0x7a00007f
.word 0x3f800000
.word 0x3f800000
.word 0x7a00007f
.word 0x7a7fff80
.word 0x3f800000
.word 0x3f800000
.word 0x7a7fff80
.word 0x7a0000ff
.word 0x3f800000
.word 0x3f800000
.word 0x7a0000ff
.word 0x7a7fff00
.word 0x3f800000
.word 0x3f800000
.word 0x7a7fff00
.word 0x7a0001ff
.word 0x3f800000
.word 0x3f800000
.word 0x7a0001ff
.word 0x7a7ffe00
.word 0x3f800000
.word 0x3f800000
.word 0x7a7ffe00
.word 0x7a0003ff
.word 0x3f800000
.word 0x3f800000
.word 0x7a0003ff
.word 0x7a7ffc00
.word 0x3f800000
.word 0x3f800000
.word 0x7a7ffc00
.word 0x7a0007ff
.word 0x3f800000
.word 0x3f800000
.word 0x7a0007ff
.word 0x7a7ff800
.word 0x3f800000
.word 0x3f800000
.word 0x7a7ff800
.word 0x7a000fff
.word 0x3f800000
.word 0x3f800000
.word 0x7a000fff
.word 0x7a7ff000
.word 0x3f800000
.word 0x3f800000
.word 0x7a7ff000
.word 0x7a001fff
.word 0x3f800000
.word 0x3f800000
.word 0x7a001fff
.word 0x7a7fe000
.word 0x3f800000
.word 0x3f800000
.word 0x7a7fe000
.word 0x7a003fff
.word 0x3f800000
.word 0x3f800000
.word 0x7a003fff
.word 0x7a7fc000
.word 0x3f800000
.word 0x3f800000
.word 0x7a7fc000
.word 0x7a007fff
.word 0x3f800000
.word 0x3f800000
.word 0x7a007fff
.word 0x7a7f8000
.word 0x3f800000
.word 0x3f800000
.word 0x7a7f8000
.word 0x7a00ffff
.word 0x3f800000
.word 0x3f800000
.word 0x7a00ffff
.word 0x7a7f0000
.word 0x3f800000
.word 0x3f800000
.word 0x7a7f0000
.word 0x7a01ffff
.word 0x3f800000
.word 0x3f800000
.word 0x7a01ffff
.word 0x7a7e0000
.word 0x3f800000
.word 0x3f800000
.word 0x7a7e0000
.word 0x7a03ffff
.word 0x3f800000
.word 0x3f800000
.word 0x7a03ffff
.word 0x7a7c0000
.word 0x3f800000
.word 0x3f800000
.word 0x7a7c0000
.word 0x7a07ffff
.word 0x3f800000
.word 0x3f800000
.word 0x7a07ffff
.word 0x7a780000
.word 0x3f800000
.word 0x3f800000
.word 0x7a780000
.word 0x7a0fffff
.word 0x3f800000
.word 0x3f800000
.word 0x7a0fffff
.word 0x7a700000
.word 0x3f800000
.word 0x3f800000
.word 0x7a700000
.word 0x7a1fffff
.word 0x3f800000
.word 0x3f800000
.word 0x7a1fffff
.word 0x7a600000
.word 0x3f800000
.word 0x3f800000
.word 0x7a600000
.word 0x7a3fffff
.word 0x3f800000
.word 0x3f800000
.word 0x7a3fffff
.word 0x7a400000
.word 0x3f800000
.word 0x3f800000
.word 0x7a400000
.word 0x7a7fffff
.word 0x3f800000
.word 0x3f800000
.word 0x7a7fffff
.word 0x30800001
.word 0x3f800000
.word 0x3f800000
.word 0x30800001
.word 0x30800000
.word 0x3f800000
.word 0x3f800000
.word 0x30800000
.word 0x30fffffe
.word 0x3f800000
.word 0x3f800000
.word 0x30fffffe
.word 0x30800003
.word 0x3f800000
.word 0x3f800000
.word 0x30800003
.word 0x30fffffc
.word 0x3f800000
.word 0x3f800000
.word 0x30fffffc
.word 0x30800007
.word 0x3f800000
.word 0x3f800000
.word 0x30800007
.word 0x30fffff8
.word 0x3f800000
.word 0x3f800000
.word 0x30fffff8
.word 0x3080000f
.word 0x3f800000
.word 0x3f800000
.word 0x3080000f
.word 0x30fffff0
.word 0x3f800000
.word 0x3f800000
.word 0x30fffff0
.word 0x3080001f
.word 0x3f800000
.word 0x3f800000
.word 0x3080001f
.word 0x30ffffe0
.word 0x3f800000
.word 0x3f800000
.word 0x30ffffe0
.word 0x3080003f
.word 0x3f800000
.word 0x3f800000
.word 0x3080003f
.word 0x30ffffc0
.word 0x3f800000
.word 0x3f800000
.word 0x30ffffc0
.word 0x3080007f
.word 0x3f800000
.word 0x3f800000
.word 0x3080007f
.word 0x30ffff80
.word 0x3f800000
.word 0x3f800000
.word 0x30ffff80
.word 0x308000ff
.word 0x3f800000
.word 0x3f800000
.word 0x308000ff
.word 0x30ffff00
.word 0x3f800000
.word 0x3f800000
.word 0x30ffff00
.word 0x308001ff
.word 0x3f800000
.word 0x3f800000
.word 0x308001ff
.word 0x30fffe00
.word 0x3f800000
.word 0x3f800000
.word 0x30fffe00
.word 0x308003ff
.word 0x3f800000
.word 0x3f800000
.word 0x308003ff
.word 0x30fffc00
.word 0x3f800000
.word 0x3f800000
.word 0x30fffc00
.word 0x308007ff
.word 0x3f800000
.word 0x3f800000
.word 0x308007ff
.word 0x30fff800
.word 0x3f800000
.word 0x3f800000
.word 0x30fff800
.word 0x30800fff
.word 0x3f800000
.word 0x3f800000
.word 0x30800fff
.word 0x30fff000
.word 0x3f800000
.word 0x3f800000
.word 0x30fff000
.word 0x30801fff
.word 0x3f800000
.word 0x3f800000
.word 0x30801fff
.word 0x30ffe000
.word 0x3f800000
.word 0x3f800000
.word 0x30ffe000
.word 0x30803fff
.word 0x3f800000
.word 0x3f800000
.word 0x30803fff
.word 0x30ffc000
.word 0x3f800000
.word 0x3f800000
.word 0x30ffc000
.word 0x30807fff
.word 0x3f800000
.word 0x3f800000
.word 0x30807fff
.word 0x30ff8000
.word 0x3f800000
.word 0x3f800000
.word 0x30ff8000
.word 0x3080ffff
.word 0x3f800000
.word 0x3f800000
.word 0x3080ffff
.word 0x30ff0000
.word 0x3f800000
.word 0x3f800000
.word 0x30ff0000
.word 0x3081ffff
.word 0x3f800000
.word 0x3f800000
.word 0x3081ffff
.word 0x30fe0000
.word 0x3f800000
.word 0x3f800000
.word 0x30fe0000
.word 0x3083ffff
.word 0x3f800000
.word 0x3f800000
.word 0x3083ffff
.word 0x30fc0000
.word 0x3f800000
.word 0x3f800000
.word 0x30fc0000
.word 0x3087ffff
.word 0x3f800000
.word 0x3f800000
.word 0x3087ffff
.word 0x30f80000
.word 0x3f800000
.word 0x3f800000
.word 0x30f80000
.word 0x308fffff
.word 0x3f800000
.word 0x3f800000
.word 0x308fffff
.word 0x30f00000
.word 0x3f800000
.word 0x3f800000
.word 0x30f00000
.word 0x309fffff
.word 0x3f800000
.word 0x3f800000
.word 0x309fffff
.word 0x30e00000
.word 0x3f800000
.word 0x3f800000
.word 0x30e00000
.word 0x30bfffff
.word 0x3f800000
.word 0x3f800000
.word 0x30bfffff
.word 0x30c00000
.word 0x3f800000
.word 0x3f800000
.word 0x30c00000
.word 0x30ffffff
.word 0x3f800000
.word 0x3f800000
.word 0x30ffffff
.word 0x804ccccc
.word 0x80000000
.word 0x80000000
.word 0x804ccccc
.word 0x80333333
.word 0x80000000
.word 0x80000000
.word 0x80333333
.word 0x805b6db6
.word 0x80000000
.word 0x80000000
.word 0x805b6db6
.word 0x80249249
.word 0x80000000
.word 0x80000000
.word 0x80249249
.word 0x80444444
.word 0x80000000
.word 0x80000000
.word 0x80444444
.word 0x803bbbbb
.word 0x80000000
.word 0x80000000
.word 0x803bbbbb
.word 0x80666666
.word 0x80000000
.word 0x80000000
.word 0x80666666
.word 0x80199999
.word 0x80000000
.word 0x80000000
.word 0x80199999
.word 0x806db6db
.word 0x80000000
.word 0x80000000
.word 0x806db6db
.word 0x8036db6d
.word 0x80000000
.word 0x80000000
.word 0x8036db6d
.word 0x807ffffe
.word 0x80000000
.word 0x80000000
.word 0x807ffffe
.word 0x80000003
.word 0x80000000
.word 0x80000000
.word 0x80000003
.word 0x807ffffc
.word 0x80000000
.word 0x80000000
.word 0x807ffffc
.word 0x80000007
.word 0x80000000
.word 0x80000000
.word 0x80000007
.word 0x807ffff8
.word 0x80000000
.word 0x80000000
.word 0x807ffff8
.word 0x81800001
.word 0x80000000
.word 0x80000000
.word 0x81800001
.word 0x81800000
.word 0x80000000
.word 0x80000000
.word 0x81800000
.word 0x81fffffe
.word 0x80000000
.word 0x80000000
.word 0x81fffffe
.word 0x81800003
.word 0x80000000
.word 0x80000000
.word 0x81800003
.word 0x81fffffc
.word 0x80000000
.word 0x80000000
.word 0x81fffffc
.word 0x81800007
.word 0x80000000
.word 0x80000000
.word 0x81800007
.word 0x81fffff8
.word 0x80000000
.word 0x80000000
.word 0x81fffff8
.word 0x8180000f
.word 0x80000000
.word 0x80000000
.word 0x8180000f
.word 0x81fffff0
.word 0x80000000
.word 0x80000000
.word 0x81fffff0
.word 0x8180001f
.word 0x80000000
.word 0x80000000
.word 0x8180001f
.word 0x81ffffe0
.word 0x80000000
.word 0x80000000
.word 0x81ffffe0
.word 0x8180003f
.word 0x80000000
.word 0x80000000
.word 0x8180003f
.word 0x81ffffc0
.word 0x80000000
.word 0x80000000
.word 0x81ffffc0
.word 0x8180007f
.word 0x80000000
.word 0x80000000
.word 0x8180007f
.word 0x81ffff80
.word 0x80000000
.word 0x80000000
.word 0x81ffff80
.word 0x818000ff
.word 0x80000000
.word 0x80000000
.word 0x818000ff
.word 0x81ffff00
.word 0x80000000
.word 0x80000000
.word 0x81ffff00
.word 0x818001ff
.word 0x80000000
.word 0x80000000
.word 0x818001ff
.word 0x81fffe00
.word 0x80000000
.word 0x80000000
.word 0x81fffe00
.word 0x818003ff
.word 0x80000000
.word 0x80000000
.word 0x818003ff
.word 0x81fffc00
.word 0x80000000
.word 0x80000000
.word 0x81fffc00
.word 0x818007ff
.word 0x80000000
.word 0x80000000
.word 0x818007ff
.word 0x81fff800
.word 0x80000000
.word 0x80000000
.word 0x81fff800
.word 0x81800fff
.word 0x80000000
.word 0x80000000
.word 0x81800fff
.word 0x81fff000
.word 0x80000000
.word 0x80000000
.word 0x81fff000
.word 0x81801fff
.word 0x80000000
.word 0x80000000
.word 0x81801fff
.word 0x81ffe000
.word 0x80000000
.word 0x80000000
.word 0x81ffe000
.word 0x81803fff
.word 0x80000000
.word 0x80000000
.word 0x81803fff
.word 0x81ffc000
.word 0x80000000
.word 0x80000000
.word 0x81ffc000
.word 0x81807fff
.word 0x80000000
.word 0x80000000
.word 0x81807fff
.word 0x81ff8000
.word 0x80000000
.word 0x80000000
.word 0x81ff8000
.word 0x8180ffff
.word 0x80000000
.word 0x80000000
.word 0x8180ffff
.word 0x81ff0000
.word 0x80000000
.word 0x80000000
.word 0x81ff0000
.word 0x8181ffff
.word 0x80000000
.word 0x80000000
.word 0x8181ffff
.word 0x81fe0000
.word 0x80000000
.word 0x80000000
.word 0x81fe0000
.word 0x8183ffff
.word 0x80000000
.word 0x80000000
.word 0x8183ffff
.word 0x81fc0000
.word 0x80000000
.word 0x80000000
.word 0x81fc0000
.word 0x8187ffff
.word 0x80000000
.word 0x80000000
.word 0x8187ffff
.word 0x81f80000
.word 0x80000000
.word 0x80000000
.word 0x81f80000
.word 0x818fffff
.word 0x80000000
.word 0x80000000
.word 0x818fffff
.word 0x81f00000
.word 0x80000000
.word 0x80000000
.word 0x81f00000
.word 0x819fffff
.word 0x80000000
.word 0x80000000
.word 0x819fffff
.word 0x81e00000
.word 0x80000000
.word 0x80000000
.word 0x81e00000
.word 0x81bfffff
.word 0x80000000
.word 0x80000000
.word 0x81bfffff
.word 0x81c00000
.word 0x80000000
.word 0x80000000
.word 0x81c00000
.word 0x81ffffff
.word 0x80000000
.word 0x80000000
.word 0x81ffffff
.word 0x81000001
.word 0x80000000
.word 0x80000000
.word 0x81000001
.word 0x81000000
.word 0x80000000
.word 0x80000000
.word 0x81000000
.word 0x817ffffe
.word 0x80000000
.word 0x80000000
.word 0x817ffffe
.word 0x81000003
.word 0x80000000
.word 0x80000000
.word 0x81000003
.word 0x817ffffc
.word 0x80000000
.word 0x80000000
.word 0x817ffffc
.word 0x81000007
.word 0x80000000
.word 0x80000000
.word 0x81000007
.word 0x817ffff8
.word 0x80000000
.word 0x80000000
.word 0x817ffff8
.word 0x8100000f
.word 0x80000000
.word 0x80000000
.word 0x8100000f
.word 0x817ffff0
.word 0x80000000
.word 0x80000000
.word 0x817ffff0
.word 0x8100001f
.word 0x80000000
.word 0x80000000
.word 0x8100001f
.word 0x817fffe0
.word 0x80000000
.word 0x80000000
.word 0x817fffe0
.word 0x8100003f
.word 0x80000000
.word 0x80000000
.word 0x8100003f
.word 0x817fffc0
.word 0x80000000
.word 0x80000000
.word 0x817fffc0
.word 0x8100007f
.word 0x80000000
.word 0x80000000
.word 0x8100007f
.word 0x817fff80
.word 0x80000000
.word 0x80000000
.word 0x817fff80
.word 0x810000ff
.word 0x80000000
.word 0x80000000
.word 0x810000ff
.word 0x817fff00
.word 0x80000000
.word 0x80000000
.word 0x817fff00
.word 0x810001ff
.word 0x80000000
.word 0x80000000
.word 0x810001ff
.word 0x817ffe00
.word 0x80000000
.word 0x80000000
.word 0x817ffe00
.word 0x810003ff
.word 0x80000000
.word 0x80000000
.word 0x810003ff
.word 0x817ffc00
.word 0x80000000
.word 0x80000000
.word 0x817ffc00
.word 0x810007ff
.word 0x80000000
.word 0x80000000
.word 0x810007ff
.word 0x817ff800
.word 0x80000000
.word 0x80000000
.word 0x817ff800
.word 0x81000fff
.word 0x80000000
.word 0x80000000
.word 0x81000fff
.word 0x817ff000
.word 0x80000000
.word 0x80000000
.word 0x817ff000
.word 0x81001fff
.word 0x80000000
.word 0x80000000
.word 0x81001fff
.word 0x817fe000
.word 0x80000000
.word 0x80000000
.word 0x817fe000
.word 0x81003fff
.word 0x80000000
.word 0x80000000
.word 0x81003fff
.word 0x817fc000
.word 0x80000000
.word 0x80000000
.word 0x817fc000
.word 0x81007fff
.word 0x80000000
.word 0x80000000
.word 0x81007fff
.word 0x817f8000
.word 0x80000000
.word 0x80000000
.word 0x817f8000
.word 0x8100ffff
.word 0x80000000
.word 0x80000000
.word 0x8100ffff
.word 0x817f0000
.word 0x80000000
.word 0x80000000
.word 0x817f0000
.word 0x8101ffff
.word 0x80000000
.word 0x80000000
.word 0x8101ffff
.word 0x817e0000
.word 0x80000000
.word 0x80000000
.word 0x817e0000
.word 0x8103ffff
.word 0x80000000
.word 0x80000000
.word 0x8103ffff
.word 0x817c0000
.word 0x80000000
.word 0x80000000
.word 0x817c0000
.word 0x8107ffff
.word 0x80000000
.word 0x80000000
.word 0x8107ffff
.word 0x81780000
.word 0x80000000
.word 0x80000000
.word 0x81780000
.word 0x810fffff
.word 0x80000000
.word 0x80000000
.word 0x810fffff
.word 0x81700000
.word 0x80000000
.word 0x80000000
.word 0x81700000
.word 0x811fffff
.word 0x80000000
.word 0x80000000
.word 0x811fffff
.word 0x81600000
.word 0x80000000
.word 0x80000000
.word 0x81600000
.word 0x813fffff
.word 0x80000000
.word 0x80000000
.word 0x813fffff
.word 0x81400000
.word 0x80000000
.word 0x80000000
.word 0x81400000
.word 0x817fffff
.word 0x80000000
.word 0x80000000
.word 0x817fffff
.word 0x80800001
.word 0x80000000
.word 0x80000000
.word 0x80800001
.word 0x80fffffe
.word 0x80000000
.word 0x80000000
.word 0x80fffffe
.word 0x80800003
.word 0x80000000
.word 0x80000000
.word 0x80800003
.word 0x80fffffc
.word 0x80000000
.word 0x80000000
.word 0x80fffffc
.word 0x80800007
.word 0x80000000
.word 0x80000000
.word 0x80800007
.word 0x80fffff8
.word 0x80000000
.word 0x80000000
.word 0x80fffff8
.word 0x8080000f
.word 0x80000000
.word 0x80000000
.word 0x8080000f
.word 0x80fffff0
.word 0x80000000
.word 0x80000000
.word 0x80fffff0
.word 0x8080001f
.word 0x80000000
.word 0x80000000
.word 0x8080001f
.word 0x80ffffe0
.word 0x80000000
.word 0x80000000
.word 0x80ffffe0
.word 0x8080003f
.word 0x80000000
.word 0x80000000
.word 0x8080003f
.word 0x80ffffc0
.word 0x80000000
.word 0x80000000
.word 0x80ffffc0
.word 0x8080007f
.word 0x80000000
.word 0x80000000
.word 0x8080007f
.word 0x80ffff80
.word 0x80000000
.word 0x80000000
.word 0x80ffff80
.word 0x808000ff
.word 0x80000000
.word 0x80000000
.word 0x808000ff
.word 0x80ffff00
.word 0x80000000
.word 0x80000000
.word 0x80ffff00
.word 0x808001ff
.word 0x80000000
.word 0x80000000
.word 0x808001ff
.word 0x80fffe00
.word 0x80000000
.word 0x80000000
.word 0x80fffe00
.word 0x808003ff
.word 0x80000000
.word 0x80000000
.word 0x808003ff
.word 0x80fffc00
.word 0x80000000
.word 0x80000000
.word 0x80fffc00
.word 0x808007ff
.word 0x80000000
.word 0x80000000
.word 0x808007ff
.word 0x80fff800
.word 0x80000000
.word 0x80000000
.word 0x80fff800
.word 0x80800fff
.word 0x80000000
.word 0x80000000
.word 0x80800fff
.word 0x80fff000
.word 0x80000000
.word 0x80000000
.word 0x80fff000
.word 0x80801fff
.word 0x80000000
.word 0x80000000
.word 0x80801fff
.word 0x80ffe000
.word 0x80000000
.word 0x80000000
.word 0x80ffe000
.word 0x80803fff
.word 0x80000000
.word 0x80000000
.word 0x80803fff
.word 0x80ffc000
.word 0x80000000
.word 0x80000000
.word 0x80ffc000
.word 0x80807fff
.word 0x80000000
.word 0x80000000
.word 0x80807fff
.word 0x80ff8000
.word 0x80000000
.word 0x80000000
.word 0x80ff8000
.word 0x8080ffff
.word 0x80000000
.word 0x80000000
.word 0x8080ffff
.word 0x80ff0000
.word 0x80000000
.word 0x80000000
.word 0x80ff0000
.word 0x8081ffff
.word 0x80000000
.word 0x80000000
.word 0x8081ffff
.word 0x80fe0000
.word 0x80000000
.word 0x80000000
.word 0x80fe0000
.word 0x8083ffff
.word 0x80000000
.word 0x80000000
.word 0x8083ffff
.word 0x80fc0000
.word 0x80000000
.word 0x80000000
.word 0x80fc0000
.word 0x8087ffff
.word 0x80000000
.word 0x80000000
.word 0x8087ffff
.word 0x80f80000
.word 0x80000000
.word 0x80000000
.word 0x80f80000
.word 0x808fffff
.word 0x80000000
.word 0x80000000
.word 0x808fffff
.word 0x80f00000
.word 0x80000000
.word 0x80000000
.word 0x80f00000
.word 0x809fffff
.word 0x80000000
.word 0x80000000
.word 0x809fffff
.word 0x80e00000
.word 0x80000000
.word 0x80000000
.word 0x80e00000
.word 0x80bfffff
.word 0x80000000
.word 0x80000000
.word 0x80bfffff
.word 0x80c00000
.word 0x80000000
.word 0x80000000
.word 0x80c00000
.word 0x80ffffff
.word 0x80000000
.word 0x80000000
.word 0x80ffffff
.word 0x80000000
.word 0x80000000
.word 0x8000000f
.word 0x80000000
.word 0x80000000
.word 0x8000000f
.word 0x807ffff0
.word 0x80000000
.word 0x80000000
.word 0x807ffff0
.word 0x8000001f
.word 0x80000000
.word 0x80000000
.word 0x8000001f
.word 0x807fffe0
.word 0x80000000
.word 0x80000000
.word 0x807fffe0
.word 0x8000003f
.word 0x80000000
.word 0x80000000
.word 0x8000003f
.word 0x807fffc0
.word 0x80000000
.word 0x80000000
.word 0x807fffc0
.word 0x8000007f
.word 0x80000000
.word 0x80000000
.word 0x8000007f
.word 0x807fff80
.word 0x80000000
.word 0x80000000
.word 0x807fff80
.word 0x800000ff
.word 0x80000000
.word 0x80000000
.word 0x800000ff
.word 0x807fff00
.word 0x80000000
.word 0x80000000
.word 0x807fff00
.word 0x800001ff
.word 0x80000000
.word 0x80000000
.word 0x800001ff
.word 0x807ffe00
.word 0x80000000
.word 0x80000000
.word 0x807ffe00
.word 0x800003ff
.word 0x80000000
.word 0x80000000
.word 0x800003ff
.word 0x807ffc00
.word 0x80000000
.word 0x80000000
.word 0x807ffc00
.word 0x800007ff
.word 0x80000000
.word 0x80000000
.word 0x800007ff
.word 0x807ff800
.word 0x80000000
.word 0x80000000
.word 0x807ff800
.word 0x80000fff
.word 0x80000000
.word 0x80000000
.word 0x80000fff
.word 0x807ff000
.word 0x80000000
.word 0x80000000
.word 0x807ff000
.word 0x80001fff
.word 0x80000000
.word 0x80000000
.word 0x80001fff
.word 0x807fe000
.word 0x80000000
.word 0x80000000
.word 0x807fe000
.word 0x80003fff
.word 0x80000000
.word 0x80000000
.word 0x80003fff
.word 0x807fc000
.word 0x80000000
.word 0x80000000
.word 0x807fc000
.word 0x80007fff
.word 0x80000000
.word 0x80000000
.word 0x80007fff
.word 0x807f8000
.word 0x80000000
.word 0x80000000
.word 0x807f8000
.word 0x8000ffff
.word 0x80000000
.word 0x80000000
.word 0x8000ffff
.word 0x807f0000
.word 0x80000000
.word 0x80000000
.word 0x807f0000
.word 0x8001ffff
.word 0x80000000
.word 0x80000000
.word 0x8001ffff
.word 0x807e0000
.word 0x80000000
.word 0x80000000
.word 0x807e0000
.word 0x8003ffff
.word 0x80000000
.word 0x80000000
.word 0x8003ffff
.word 0x807c0000
.word 0x80000000
.word 0x80000000
.word 0x807c0000
.word 0x8007ffff
.word 0x80000000
.word 0x80000000
.word 0x8007ffff
.word 0x80780000
.word 0x80000000
.word 0x80000000
.word 0x80780000
.word 0x800fffff
.word 0x80000000
.word 0x80000000
.word 0x800fffff
.word 0x80700000
.word 0x80000000
.word 0x80000000
.word 0x80700000
.word 0x801fffff
.word 0x80000000
.word 0x80000000
.word 0x801fffff
.word 0x80600000
.word 0x80000000
.word 0x80000000
.word 0x80600000
.word 0x803fffff
.word 0x80000000
.word 0x80000000
.word 0x803fffff
.word 0x80400000
.word 0x80000000
.word 0x80000000
.word 0x80400000
.word 0xb3000001
.word 0x80000000
.word 0x80000000
.word 0xb3000001
.word 0xb3000000
.word 0x80000000
.word 0x80000000
.word 0xb3000000
.word 0xb37ffffe
.word 0x80000000
.word 0x80000000
.word 0xb37ffffe
.word 0xb3000003
.word 0x80000000
.word 0x80000000
.word 0xb3000003
.word 0xb37ffffc
.word 0x80000000
.word 0x80000000
.word 0xb37ffffc
.word 0xb3000007
.word 0x80000000
.word 0x80000000
.word 0xb3000007
.word 0xb37ffff8
.word 0x80000000
.word 0x80000000
.word 0xb37ffff8
.word 0xb300000f
.word 0x80000000
.word 0x80000000
.word 0xb300000f
.word 0xb37ffff0
.word 0x80000000
.word 0x80000000
.word 0xb37ffff0
.word 0xb300001f
.word 0x80000000
.word 0x80000000
.word 0xb300001f
.word 0xb37fffe0
.word 0x80000000
.word 0x80000000
.word 0xb37fffe0
.word 0xb300003f
.word 0x80000000
.word 0x80000000
.word 0xb300003f
.word 0xb37fffc0
.word 0x80000000
.word 0x80000000
.word 0xb37fffc0
.word 0xb300007f
.word 0x80000000
.word 0x80000000
.word 0xb300007f
.word 0xb37fff80
.word 0x80000000
.word 0x80000000
.word 0xb37fff80
.word 0xb30000ff
.word 0x80000000
.word 0x80000000
.word 0xb30000ff
.word 0xb37fff00
.word 0x80000000
.word 0x80000000
.word 0xb37fff00
.word 0xb30001ff
.word 0x80000000
.word 0x80000000
.word 0xb30001ff
.word 0xb37ffe00
.word 0x80000000
.word 0x80000000
.word 0xb37ffe00
.word 0xb30003ff
.word 0x80000000
.word 0x80000000
.word 0xb30003ff
.word 0xb37ffc00
.word 0x80000000
.word 0x80000000
.word 0xb37ffc00
.word 0xb30007ff
.word 0x80000000
.word 0x80000000
.word 0xb30007ff
.word 0xb37ff800
.word 0x80000000
.word 0x80000000
.word 0xb37ff800
.word 0xb3000fff
.word 0x80000000
.word 0x80000000
.word 0xb3000fff
.word 0xb37ff000
.word 0x80000000
.word 0x80000000
.word 0xb37ff000
.word 0xb3001fff
.word 0x80000000
.word 0x80000000
.word 0xb3001fff
.word 0xb37fe000
.word 0x80000000
.word 0x80000000
.word 0xb37fe000
.word 0xb3003fff
.word 0x80000000
.word 0x80000000
.word 0xb3003fff
.word 0xb37fc000
.word 0x80000000
.word 0x80000000
.word 0xb37fc000
.word 0xb3007fff
.word 0x80000000
.word 0x80000000
.word 0xb3007fff
.word 0xb37f8000
.word 0x80000000
.word 0x80000000
.word 0xb37f8000
.word 0xb300ffff
.word 0x80000000
.word 0x80000000
.word 0xb300ffff
.word 0xb37f0000
.word 0x80000000
.word 0x80000000
.word 0xb37f0000
.word 0xb301ffff
.word 0x80000000
.word 0x80000000
.word 0xb301ffff
.word 0xb37e0000
.word 0x80000000
.word 0x80000000
.word 0xb37e0000
.word 0xb303ffff
.word 0x80000000
.word 0x80000000
.word 0xb303ffff
.word 0xb37c0000
.word 0x80000000
.word 0x80000000
.word 0xb37c0000
.word 0xb307ffff
.word 0x80000000
.word 0x80000000
.word 0xb307ffff
.word 0xb3780000
.word 0x80000000
.word 0x80000000
.word 0xb3780000
.word 0xb30fffff
.word 0x80000000
.word 0x80000000
.word 0xb30fffff
.word 0xb3700000
.word 0x80000000
.word 0x80000000
.word 0xb3700000
.word 0xb31fffff
.word 0x80000000
.word 0x80000000
.word 0xb31fffff
.word 0xb3600000
.word 0x80000000
.word 0x80000000
.word 0xb3600000
.word 0xb33fffff
.word 0x80000000
.word 0x80000000
.word 0xb33fffff
.word 0xb3400000
.word 0x80000000
.word 0x80000000
.word 0xb3400000
.word 0xb37fffff
.word 0x80000000
.word 0x80000000
.word 0xb37fffff
.word 0x4ccccc
.word 0x0
.word 0x0
.word 0x4ccccc
.word 0x333333
.word 0x0
.word 0x0
.word 0x333333
.word 0x5b6db6
.word 0x0
.word 0x0
.word 0x5b6db6
.word 0x249249
.word 0x0
.word 0x0
.word 0x249249
.word 0x444444
.word 0x0
.word 0x0
.word 0x444444
.word 0x3bbbbb
.word 0x0
.word 0x0
.word 0x3bbbbb
.word 0x666666
.word 0x0
.word 0x0
.word 0x666666
.word 0x199999
.word 0x0
.word 0x0
.word 0x199999
.word 0x6db6db
.word 0x0
.word 0x0
.word 0x6db6db
.word 0x36db6d
.word 0x0
.word 0x0
.word 0x36db6d
.word 0x7ffffe
.word 0x0
.word 0x0
.word 0x7ffffe
.word 0x3
.word 0x0
.word 0x0
.word 0x3
.word 0x7ffffc
.word 0x0
.word 0x0
.word 0x7ffffc
.word 0x7
.word 0x0
.word 0x0
.word 0x7
.word 0x7ffff8
.word 0x0
.word 0x0
.word 0x7ffff8
.word 0x1800001
.word 0x0
.word 0x0
.word 0x1800001
.word 0x1800000
.word 0x0
.word 0x0
.word 0x1800000
.word 0x1fffffe
.word 0x0
.word 0x0
.word 0x1fffffe
.word 0x1800003
.word 0x0
.word 0x0
.word 0x1800003
.word 0x1fffffc
.word 0x0
.word 0x0
.word 0x1fffffc
.word 0x1800007
.word 0x0
.word 0x0
.word 0x1800007
.word 0x1fffff8
.word 0x0
.word 0x0
.word 0x1fffff8
.word 0x180000f
.word 0x0
.word 0x0
.word 0x180000f
.word 0x1fffff0
.word 0x0
.word 0x0
.word 0x1fffff0
.word 0x180001f
.word 0x0
.word 0x0
.word 0x180001f
.word 0x1ffffe0
.word 0x0
.word 0x0
.word 0x1ffffe0
.word 0x180003f
.word 0x0
.word 0x0
.word 0x180003f
.word 0x1ffffc0
.word 0x0
.word 0x0
.word 0x1ffffc0
.word 0x180007f
.word 0x0
.word 0x0
.word 0x180007f
.word 0x1ffff80
.word 0x0
.word 0x0
.word 0x1ffff80
.word 0x18000ff
.word 0x0
.word 0x0
.word 0x18000ff
.word 0x1ffff00
.word 0x0
.word 0x0
.word 0x1ffff00
.word 0x18001ff
.word 0x0
.word 0x0
.word 0x18001ff
.word 0x1fffe00
.word 0x0
.word 0x0
.word 0x1fffe00
.word 0x18003ff
.word 0x0
.word 0x0
.word 0x18003ff
.word 0x1fffc00
.word 0x0
.word 0x0
.word 0x1fffc00
.word 0x18007ff
.word 0x0
.word 0x0
.word 0x18007ff
.word 0x1fff800
.word 0x0
.word 0x0
.word 0x1fff800
.word 0x1800fff
.word 0x0
.word 0x0
.word 0x1800fff
.word 0x1fff000
.word 0x0
.word 0x0
.word 0x1fff000
.word 0x1801fff
.word 0x0
.word 0x0
.word 0x1801fff
.word 0x1ffe000
.word 0x0
.word 0x0
.word 0x1ffe000
.word 0x1803fff
.word 0x0
.word 0x0
.word 0x1803fff
.word 0x1ffc000
.word 0x0
.word 0x0
.word 0x1ffc000
.word 0x1807fff
.word 0x0
.word 0x0
.word 0x1807fff
.word 0x1ff8000
.word 0x0
.word 0x0
.word 0x1ff8000
.word 0x180ffff
.word 0x0
.word 0x0
.word 0x180ffff
.word 0x1ff0000
.word 0x0
.word 0x0
.word 0x1ff0000
.word 0x181ffff
.word 0x0
.word 0x0
.word 0x181ffff
.word 0x1fe0000
.word 0x0
.word 0x0
.word 0x1fe0000
.word 0x183ffff
.word 0x0
.word 0x0
.word 0x183ffff
.word 0x1fc0000
.word 0x0
.word 0x0
.word 0x1fc0000
.word 0x187ffff
.word 0x0
.word 0x0
.word 0x187ffff
.word 0x1f80000
.word 0x0
.word 0x0
.word 0x1f80000
.word 0x18fffff
.word 0x0
.word 0x0
.word 0x18fffff
.word 0x1f00000
.word 0x0
.word 0x0
.word 0x1f00000
.word 0x19fffff
.word 0x0
.word 0x0
.word 0x19fffff
.word 0x1e00000
.word 0x0
.word 0x0
.word 0x1e00000
.word 0x1bfffff
.word 0x0
.word 0x0
.word 0x1bfffff
.word 0x1c00000
.word 0x0
.word 0x0
.word 0x1c00000
.word 0x1ffffff
.word 0x0
.word 0x0
.word 0x1ffffff
.word 0x1000001
.word 0x0
.word 0x0
.word 0x1000001
.word 0x1000000
.word 0x0
.word 0x0
.word 0x1000000
.word 0x17ffffe
.word 0x0
.word 0x0
.word 0x17ffffe
.word 0x1000003
.word 0x0
.word 0x0
.word 0x1000003
.word 0x17ffffc
.word 0x0
.word 0x0
.word 0x17ffffc
.word 0x1000007
.word 0x0
.word 0x0
.word 0x1000007
.word 0x17ffff8
.word 0x0
.word 0x0
.word 0x17ffff8
.word 0x100000f
.word 0x0
.word 0x0
.word 0x100000f
.word 0x17ffff0
.word 0x0
.word 0x0
.word 0x17ffff0
.word 0x100001f
.word 0x0
.word 0x0
.word 0x100001f
.word 0x17fffe0
.word 0x0
.word 0x0
.word 0x17fffe0
.word 0x100003f
.word 0x0
.word 0x0
.word 0x100003f
.word 0x17fffc0
.word 0x0
.word 0x0
.word 0x17fffc0
.word 0x100007f
.word 0x0
.word 0x0
.word 0x100007f
.word 0x17fff80
.word 0x0
.word 0x0
.word 0x17fff80
.word 0x10000ff
.word 0x0
.word 0x0
.word 0x10000ff
.word 0x17fff00
.word 0x0
.word 0x0
.word 0x17fff00
.word 0x10001ff
.word 0x0
.word 0x0
.word 0x10001ff
.word 0x17ffe00
.word 0x0
.word 0x0
.word 0x17ffe00
.word 0x10003ff
.word 0x0
.word 0x0
.word 0x10003ff
.word 0x17ffc00
.word 0x0
.word 0x0
.word 0x17ffc00
.word 0x10007ff
.word 0x0
.word 0x0
.word 0x10007ff
.word 0x17ff800
.word 0x0
.word 0x0
.word 0x17ff800
.word 0x1000fff
.word 0x0
.word 0x0
.word 0x1000fff
.word 0x17ff000
.word 0x0
.word 0x0
.word 0x17ff000
.word 0x1001fff
.word 0x0
.word 0x0
.word 0x1001fff
.word 0x17fe000
.word 0x0
.word 0x0
.word 0x17fe000
.word 0x1003fff
.word 0x0
.word 0x0
.word 0x1003fff
.word 0x17fc000
.word 0x0
.word 0x0
.word 0x17fc000
.word 0x1007fff
.word 0x0
.word 0x0
.word 0x1007fff
.word 0x17f8000
.word 0x0
.word 0x0
.word 0x17f8000
.word 0x100ffff
.word 0x0
.word 0x0
.word 0x100ffff
.word 0x17f0000
.word 0x0
.word 0x0
.word 0x17f0000
.word 0x101ffff
.word 0x0
.word 0x0
.word 0x101ffff
.word 0x17e0000
.word 0x0
.word 0x0
.word 0x17e0000
.word 0x103ffff
.word 0x0
.word 0x0
.word 0x103ffff
.word 0x17c0000
.word 0x0
.word 0x0
.word 0x17c0000
.word 0x107ffff
.word 0x0
.word 0x0
.word 0x107ffff
.word 0x1780000
.word 0x0
.word 0x0
.word 0x1780000
.word 0x10fffff
.word 0x0
.word 0x0
.word 0x10fffff
.word 0x1700000
.word 0x0
.word 0x0
.word 0x1700000
.word 0x11fffff
.word 0x0
.word 0x0
.word 0x11fffff
.word 0x1600000
.word 0x0
.word 0x0
.word 0x1600000
.word 0x13fffff
.word 0x0
.word 0x0
.word 0x13fffff
.word 0x1400000
.word 0x0
.word 0x0
.word 0x1400000
.word 0x17fffff
.word 0x0
.word 0x0
.word 0x17fffff
.word 0x800001
.word 0x0
.word 0x0
.word 0x800001
.word 0xfffffe
.word 0x0
.word 0x0
.word 0xfffffe
.word 0x800003
.word 0x0
.word 0x0
.word 0x800003
.word 0xfffffc
.word 0x0
.word 0x0
.word 0xfffffc
.word 0x800007
.word 0x0
.word 0x0
.word 0x800007
.word 0xfffff8
.word 0x0
.word 0x0
.word 0xfffff8
.word 0x80000f
.word 0x0
.word 0x0
.word 0x80000f
.word 0xfffff0
.word 0x0
.word 0x0
.word 0xfffff0
.word 0x80001f
.word 0x0
.word 0x0
.word 0x80001f
.word 0xffffe0
.word 0x0
.word 0x0
.word 0xffffe0
.word 0x80003f
.word 0x0
.word 0x0
.word 0x80003f
.word 0xffffc0
.word 0x0
.word 0x0
.word 0xffffc0
.word 0x80007f
.word 0x0
.word 0x0
.word 0x80007f
.word 0xffff80
.word 0x0
.word 0x0
.word 0xffff80
.word 0x8000ff
.word 0x0
.word 0x0
.word 0x8000ff
.word 0xffff00
.word 0x0
.word 0x0
.word 0xffff00
.word 0x8001ff
.word 0x0
.word 0x0
.word 0x8001ff
.word 0xfffe00
.word 0x0
.word 0x0
.word 0xfffe00
.word 0x8003ff
.word 0x0
.word 0x0
.word 0x8003ff
.word 0xfffc00
.word 0x0
.word 0x0
.word 0xfffc00
.word 0x8007ff
.word 0x0
.word 0x0
.word 0x8007ff
.word 0xfff800
.word 0x0
.word 0x0
.word 0xfff800
.word 0x800fff
.word 0x0
.word 0x0
.word 0x800fff
.word 0xfff000
.word 0x0
.word 0x0
.word 0xfff000
.word 0x801fff
.word 0x0
.word 0x0
.word 0x801fff
.word 0xffe000
.word 0x0
.word 0x0
.word 0xffe000
.word 0x803fff
.word 0x0
.word 0x0
.word 0x803fff
.word 0xffc000
.word 0x0
.word 0x0
.word 0xffc000
.word 0x807fff
.word 0x0
.word 0x0
.word 0x807fff
.word 0xff8000
.word 0x0
.word 0x0
.word 0xff8000
.word 0x80ffff
.word 0x0
.word 0x0
.word 0x80ffff
.word 0xff0000
.word 0x0
.word 0x0
.word 0xff0000
.word 0x81ffff
.word 0x0
.word 0x0
.word 0x81ffff
.word 0xfe0000
.word 0x0
.word 0x0
.word 0xfe0000
.word 0x83ffff
.word 0x0
.word 0x0
.word 0x83ffff
.word 0xfc0000
.word 0x0
.word 0x0
.word 0xfc0000
.word 0x87ffff
.word 0x0
.word 0x0
.word 0x87ffff
.word 0xf80000
.word 0x0
.word 0x0
.word 0xf80000
.word 0x8fffff
.word 0x0
.word 0x0
.word 0x8fffff
.word 0xf00000
.word 0x0
.word 0x0
.word 0xf00000
.word 0x9fffff
.word 0x0
.word 0x0
.word 0x9fffff
.word 0xe00000
.word 0x0
.word 0x0
.word 0xe00000
.word 0xbfffff
.word 0x0
.word 0x0
.word 0xbfffff
.word 0xc00000
.word 0x0
.word 0x0
.word 0xc00000
.word 0xffffff
.word 0x0
.word 0x0
.word 0xffffff
.word 0xf
.word 0x0
.word 0x0
.word 0xf
.word 0x7ffff0
.word 0x0
.word 0x0
.word 0x7ffff0
.word 0x1f
.word 0x0
.word 0x0
.word 0x1f
.word 0x7fffe0
.word 0x0
.word 0x0
.word 0x7fffe0
.word 0x3f
.word 0x0
.word 0x0
.word 0x3f
.word 0x7fffc0
.word 0x0
.word 0x0
.word 0x7fffc0
.word 0x7f
.word 0x0
.word 0x0
.word 0x7f
.word 0x7fff80
.word 0x0
.word 0x0
.word 0x7fff80
.word 0xff
.word 0x0
.word 0x0
.word 0xff
.word 0x7fff00
.word 0x0
.word 0x0
.word 0x7fff00
.word 0x1ff
.word 0x0
.word 0x0
.word 0x1ff
.word 0x7ffe00
.word 0x0
.word 0x0
.word 0x7ffe00
.word 0x3ff
.word 0x0
.word 0x0
.word 0x3ff
.word 0x7ffc00
.word 0x0
.word 0x0
.word 0x7ffc00
.word 0x7ff
.word 0x0
.word 0x0
.word 0x7ff
.word 0x7ff800
.word 0x0
.word 0x0
.word 0x7ff800
.word 0xfff
.word 0x0
.word 0x0
.word 0xfff
.word 0x7ff000
.word 0x0
.word 0x0
.word 0x7ff000
.word 0x1fff
.word 0x0
.word 0x0
.word 0x1fff
.word 0x7fe000
.word 0x0
.word 0x0
.word 0x7fe000
.word 0x3fff
.word 0x0
.word 0x0
.word 0x3fff
.word 0x7fc000
.word 0x0
.word 0x0
.word 0x7fc000
.word 0x7fff
.word 0x0
.word 0x0
.word 0x7fff
.word 0x7f8000
.word 0x0
.word 0x0
.word 0x7f8000
.word 0xffff
.word 0x0
.word 0x0
.word 0xffff
.word 0x7f0000
.word 0x0
.word 0x0
.word 0x7f0000
.word 0x1ffff
.word 0x0
.word 0x0
.word 0x1ffff
.word 0x7e0000
.word 0x0
.word 0x0
.word 0x7e0000
.word 0x3ffff
.word 0x0
.word 0x0
.word 0x3ffff
.word 0x7c0000
.word 0x0
.word 0x0
.word 0x7c0000
.word 0x7ffff
.word 0x0
.word 0x0
.word 0x7ffff
.word 0x780000
.word 0x0
.word 0x0
.word 0x780000
.word 0xfffff
.word 0x0
.word 0x0
.word 0xfffff
.word 0x700000
.word 0x0
.word 0x0
.word 0x700000
.word 0x1fffff
.word 0x0
.word 0x0
.word 0x1fffff
.word 0x600000
.word 0x0
.word 0x0
.word 0x600000
.word 0x3fffff
.word 0x0
.word 0x0
.word 0x3fffff
.word 0x400000
.word 0x0
.word 0x0
.word 0x400000
.word 0x6e000001
.word 0x0
.word 0x0
.word 0x6e000001
.word 0x6e000000
.word 0x0
.word 0x0
.word 0x6e000000
.word 0x6e7ffffe
.word 0x0
.word 0x0
.word 0x6e7ffffe
.word 0x6e000003
.word 0x0
.word 0x0
.word 0x6e000003
.word 0x6e7ffffc
.word 0x0
.word 0x0
.word 0x6e7ffffc
.word 0x6e000007
.word 0x0
.word 0x0
.word 0x6e000007
.word 0x6e7ffff8
.word 0x0
.word 0x0
.word 0x6e7ffff8
.word 0x6e00000f
.word 0x0
.word 0x0
.word 0x6e00000f
.word 0x6e7ffff0
.word 0x0
.word 0x0
.word 0x6e7ffff0
.word 0x6e00001f
.word 0x0
.word 0x0
.word 0x6e00001f
.word 0x6e7fffe0
.word 0x0
.word 0x0
.word 0x6e7fffe0
.word 0x6e00003f
.word 0x0
.word 0x0
.word 0x6e00003f
.word 0x6e7fffc0
.word 0x0
.word 0x0
.word 0x6e7fffc0
.word 0x6e00007f
.word 0x0
.word 0x0
.word 0x6e00007f
.word 0x6e7fff80
.word 0x0
.word 0x0
.word 0x6e7fff80
.word 0x6e0000ff
.word 0x0
.word 0x0
.word 0x6e0000ff
.word 0x6e7fff00
.word 0x0
.word 0x0
.word 0x6e7fff00
.word 0x6e0001ff
.word 0x0
.word 0x0
.word 0x6e0001ff
.word 0x6e7ffe00
.word 0x0
.word 0x0
.word 0x6e7ffe00
.word 0x6e0003ff
.word 0x0
.word 0x0
.word 0x6e0003ff
.word 0x6e7ffc00
.word 0x0
.word 0x0
.word 0x6e7ffc00
.word 0x6e0007ff
.word 0x0
.word 0x0
.word 0x6e0007ff
.word 0x6e7ff800
.word 0x0
.word 0x0
.word 0x6e7ff800
.word 0x6e000fff
.word 0x0
.word 0x0
.word 0x6e000fff
.word 0x6e7ff000
.word 0x0
.word 0x0
.word 0x6e7ff000
.word 0x6e001fff
.word 0x0
.word 0x0
.word 0x6e001fff
.word 0x6e7fe000
.word 0x0
.word 0x0
.word 0x6e7fe000
.word 0x6e003fff
.word 0x0
.word 0x0
.word 0x6e003fff
.word 0x6e7fc000
.word 0x0
.word 0x0
.word 0x6e7fc000
.word 0x6e007fff
.word 0x0
.word 0x0
.word 0x6e007fff
.word 0x6e7f8000
.word 0x0
.word 0x0
.word 0x6e7f8000
.word 0x6e00ffff
.word 0x0
.word 0x0
.word 0x6e00ffff
.word 0x6e7f0000
.word 0x0
.word 0x0
.word 0x6e7f0000
.word 0x6e01ffff
.word 0x0
.word 0x0
.word 0x6e01ffff
.word 0x6e7e0000
.word 0x0
.word 0x0
.word 0x6e7e0000
.word 0x6e03ffff
.word 0x0
.word 0x0
.word 0x6e03ffff
.word 0x6e7c0000
.word 0x0
.word 0x0
.word 0x6e7c0000
.word 0x6e07ffff
.word 0x0
.word 0x0
.word 0x6e07ffff
.word 0x6e780000
.word 0x0
.word 0x0
.word 0x6e780000
.word 0x6e0fffff
.word 0x0
.word 0x0
.word 0x6e0fffff
.word 0x6e700000
.word 0x0
.word 0x0
.word 0x6e700000
.word 0x6e1fffff
.word 0x0
.word 0x0
.word 0x6e1fffff
.word 0x6e600000
.word 0x0
.word 0x0
.word 0x6e600000
.word 0x6e3fffff
.word 0x0
.word 0x0
.word 0x6e3fffff
.word 0x6e400000
.word 0x0
.word 0x0
.word 0x6e400000
.word 0x6e7fffff
.word 0x0
.word 0x0
.word 0x6e7fffff
.word 0x0
.word 0x0
.word 0xff7fffff
.word 0xff333333
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_2:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_3:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_4:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_5:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_6:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_7:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_8:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_9:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_10:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_11:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_12:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_13:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_14:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_15:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_16:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_17:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_18:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_19:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_20:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_21:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_22:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_23:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_24:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_25:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_26:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_27:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_28:
    .fill 312*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
