
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.5.2
// timestamp : Tue Sep  7 16:50:33 2021 GMT
// usage     : riscv_ctg \
//                  -- cgf $cgf \
//                  -- xlen $xlen \
// -----------
//
// -----------
// Copyright (c) 2021. IIT Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fsub.s instruction of the RISC-V F extension for the fsub_b10 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fsub_b10)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs1 == rs2 == rd, rs1==f29, rs2==f29, rd==f29, fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x178cde and rm_val == 0  
// opcode: fsub.s ; op1:f29; op2:f29; dest:f29; op1val:0x78d35630; op2val:0x78d35630; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f29, f29, f29, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1:
// rs1 == rd != rs2, rs1==f5, rs2==f6, rd==f5, fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fsub.s ; op1:f5; op2:f6; dest:f5; op1val:0x78d35630; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f5, f5, f6, 0x0, 0, x16, 8, x17, x15, 8, x18)

inst_2:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==f25, rs2==f13, rd==f24, fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0xf1 and fm2 == 0x054a30 and rm_val == 0  
// opcode: fsub.s ; op1:f25; op2:f13; dest:f24; op1val:0x78d35630; op2val:0x78854a30; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f24, f25, f13, 0x0, 0, x16, 16, x17, x15, 16, x18)

inst_3:
// rs2 == rd != rs1, rs1==f23, rs2==f8, rd==f8, fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0xed and fm2 == 0x554380 and rm_val == 0  
// opcode: fsub.s ; op1:f23; op2:f8; dest:f8; op1val:0x78d35630; op2val:0x76d54380; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f8, f23, f8, 0x0, 0, x16, 24, x17, x15, 24, x18)

inst_4:
// rs1 == rs2 != rd, rs1==f17, rs2==f17, rd==f20, fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0xea and fm2 == 0x2a9c66 and rm_val == 0  
// opcode: fsub.s ; op1:f17; op2:f17; dest:f20; op1val:0x78d35630; op2val:0x78d35630; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f20, f17, f17, 0x0, 0, x16, 32, x17, x15, 32, x18)

inst_5:
// rs1==f4, rs2==f24, rd==f7, fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0xe7 and fm2 == 0x087d1e and rm_val == 0  
// opcode: fsub.s ; op1:f4; op2:f24; dest:f7; op1val:0x78d35630; op2val:0x73887d1e; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f7, f4, f24, 0x0, 0, x16, 40, x17, x15, 40, x18)

inst_6:
// rs1==f19, rs2==f23, rd==f11, fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0xe3 and fm2 == 0x5a61ca and rm_val == 0  
// opcode: fsub.s ; op1:f19; op2:f23; dest:f11; op1val:0x78d35630; op2val:0x71da61ca; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f11, f19, f23, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_7:
// rs1==f10, rs2==f15, rd==f0, fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0xe0 and fm2 == 0x2eb4a2 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f15; dest:f0; op1val:0x78d35630; op2val:0x702eb4a2; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f0, f10, f15, 0x0, 0, x16, 56, x17, x15, 56, x18)

inst_8:
// rs1==f27, rs2==f4, rd==f17, fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0xdd and fm2 == 0x0bc3b5 and rm_val == 0  
// opcode: fsub.s ; op1:f27; op2:f4; dest:f17; op1val:0x78d35630; op2val:0x6e8bc3b5; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f17, f27, f4, 0x0, 0, x16, 64, x17, x15, 64, x18)

inst_9:
// rs1==f6, rs2==f0, rd==f15, fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0xd9 and fm2 == 0x5f9f88 and rm_val == 0  
// opcode: fsub.s ; op1:f6; op2:f0; dest:f15; op1val:0x78d35630; op2val:0x6cdf9f88; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f15, f6, f0, 0x0, 0, x16, 72, x17, x15, 72, x18)

inst_10:
// rs1==f1, rs2==f31, rd==f21, fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0xd6 and fm2 == 0x32e606 and rm_val == 0  
// opcode: fsub.s ; op1:f1; op2:f31; dest:f21; op1val:0x78d35630; op2val:0x6b32e606; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f21, f1, f31, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_11:
// rs1==f24, rs2==f1, rd==f28, fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0xd3 and fm2 == 0x0f1e6b and rm_val == 0  
// opcode: fsub.s ; op1:f24; op2:f1; dest:f28; op1val:0x78d35630; op2val:0x698f1e6b; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f28, f24, f1, 0x0, 0, x16, 88, x17, x15, 88, x18)

inst_12:
// rs1==f11, rs2==f10, rd==f26, fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0xcf and fm2 == 0x64fd78 and rm_val == 0  
// opcode: fsub.s ; op1:f11; op2:f10; dest:f26; op1val:0x78d35630; op2val:0x67e4fd78; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f26, f11, f10, 0x0, 0, x16, 96, x17, x15, 96, x18)

inst_13:
// rs1==f8, rs2==f30, rd==f9, fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0xcc and fm2 == 0x37312d and rm_val == 0  
// opcode: fsub.s ; op1:f8; op2:f30; dest:f9; op1val:0x78d35630; op2val:0x6637312d; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f9, f8, f30, 0x0, 0, x16, 104, x17, x15, 104, x18)

inst_14:
// rs1==f9, rs2==f20, rd==f2, fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0xc9 and fm2 == 0x128dbe and rm_val == 0  
// opcode: fsub.s ; op1:f9; op2:f20; dest:f2; op1val:0x78d35630; op2val:0x64928dbe; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f2, f9, f20, 0x0, 0, x16, 112, x17, x15, 112, x18)

inst_15:
// rs1==f21, rs2==f28, rd==f16, fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0xc5 and fm2 == 0x6a7c63 and rm_val == 0  
// opcode: fsub.s ; op1:f21; op2:f28; dest:f16; op1val:0x78d35630; op2val:0x62ea7c63; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f16, f21, f28, 0x0, 0, x16, 120, x17, x15, 120, x18)

inst_16:
// rs1==f30, rs2==f14, rd==f27, fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0xc2 and fm2 == 0x3b96b5 and rm_val == 0  
// opcode: fsub.s ; op1:f30; op2:f14; dest:f27; op1val:0x78d35630; op2val:0x613b96b5; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f27, f30, f14, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_17:
// rs1==f15, rs2==f9, rd==f19, fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0xbf and fm2 == 0x16122b and rm_val == 0  
// opcode: fsub.s ; op1:f15; op2:f9; dest:f19; op1val:0x78d35630; op2val:0x5f96122b; valaddr_reg:x16; val_offset:136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f19, f15, f9, 0x0, 0, x16, 136, x17, x15, 136, x18)

inst_18:
// rs1==f14, rs2==f11, rd==f4, fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0xbb and fm2 == 0x701d11 and rm_val == 0  
// opcode: fsub.s ; op1:f14; op2:f11; dest:f4; op1val:0x78d35630; op2val:0x5df01d11; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f4, f14, f11, 0x0, 0, x16, 144, x17, x15, 144, x18)

inst_19:
// rs1==f22, rs2==f27, rd==f18, fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0xb8 and fm2 == 0x401741 and rm_val == 0  
// opcode: fsub.s ; op1:f22; op2:f27; dest:f18; op1val:0x78d35630; op2val:0x5c401741; valaddr_reg:x16; val_offset:152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f18, f22, f27, 0x0, 0, x16, 152, x17, x15, 152, x18)

inst_20:
// rs1==f3, rs2==f25, rd==f13, fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0xb5 and fm2 == 0x19ac34 and rm_val == 0  
// opcode: fsub.s ; op1:f3; op2:f25; dest:f13; op1val:0x78d35630; op2val:0x5a99ac34; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f13, f3, f25, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_21:
// rs1==f18, rs2==f2, rd==f12, fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0xb1 and fm2 == 0x75e053 and rm_val == 0  
// opcode: fsub.s ; op1:f18; op2:f2; dest:f12; op1val:0x78d35630; op2val:0x58f5e053; valaddr_reg:x16; val_offset:168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f18, f2, 0x0, 0, x16, 168, x17, x15, 168, x18)

inst_22:
// rs1==f28, rs2==f3, rd==f10, fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0xae and fm2 == 0x44b376 and rm_val == 0  
// opcode: fsub.s ; op1:f28; op2:f3; dest:f10; op1val:0x78d35630; op2val:0x5744b376; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f10, f28, f3, 0x0, 0, x16, 176, x17, x15, 176, x18)

inst_23:
// rs1==f16, rs2==f18, rd==f3, fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0xab and fm2 == 0x1d5c5e and rm_val == 0  
// opcode: fsub.s ; op1:f16; op2:f18; dest:f3; op1val:0x78d35630; op2val:0x559d5c5e; valaddr_reg:x16; val_offset:184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f3, f16, f18, 0x0, 0, x16, 184, x17, x15, 184, x18)

inst_24:
// rs1==f20, rs2==f16, rd==f30, fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0xa7 and fm2 == 0x7bc6fd and rm_val == 0  
// opcode: fsub.s ; op1:f20; op2:f16; dest:f30; op1val:0x78d35630; op2val:0x53fbc6fd; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f30, f20, f16, 0x0, 0, x16, 192, x17, x15, 192, x18)

inst_25:
// rs1==f2, rs2==f12, rd==f1, fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0xa4 and fm2 == 0x496bfe and rm_val == 0  
// opcode: fsub.s ; op1:f2; op2:f12; dest:f1; op1val:0x78d35630; op2val:0x52496bfe; valaddr_reg:x16; val_offset:200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f1, f2, f12, 0x0, 0, x16, 200, x17, x15, 200, x18)

inst_26:
// rs1==f13, rs2==f19, rd==f25, fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0xa1 and fm2 == 0x212331 and rm_val == 0  
// opcode: fsub.s ; op1:f13; op2:f19; dest:f25; op1val:0x78d35630; op2val:0x50a12331; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f25, f13, f19, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_27:
// rs1==f7, rs2==f21, rd==f14, fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x9e and fm2 == 0x00e8f4 and rm_val == 0  
// opcode: fsub.s ; op1:f7; op2:f21; dest:f14; op1val:0x78d35630; op2val:0x4f00e8f4; valaddr_reg:x16; val_offset:216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f14, f7, f21, 0x0, 0, x16, 216, x17, x15, 216, x18)

inst_28:
// rs1==f26, rs2==f7, rd==f22, fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x9a and fm2 == 0x4e4187 and rm_val == 0  
// opcode: fsub.s ; op1:f26; op2:f7; dest:f22; op1val:0x78d35630; op2val:0x4d4e4187; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f22, f26, f7, 0x0, 0, x16, 224, x17, x15, 224, x18)

inst_29:
// rs1==f0, rs2==f26, rd==f31, fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x97 and fm2 == 0x250138 and rm_val == 0  
// opcode: fsub.s ; op1:f0; op2:f26; dest:f31; op1val:0x78d35630; op2val:0x4ba50138; valaddr_reg:x16; val_offset:232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f31, f0, f26, 0x0, 0, x16, 232, x17, x15, 232, x18)

inst_30:
// rs1==f12, rs2==f5, rd==f6, fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x94 and fm2 == 0x0400fa and rm_val == 0  
// opcode: fsub.s ; op1:f12; op2:f5; dest:f6; op1val:0x78d35630; op2val:0x4a0400fa; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f6, f12, f5, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_31:
// rs1==f31, rs2==f22, rd==f23, fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x90 and fm2 == 0x5334c3 and rm_val == 0  
// opcode: fsub.s ; op1:f31; op2:f22; dest:f23; op1val:0x78d35630; op2val:0x485334c3; valaddr_reg:x16; val_offset:248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f23, f31, f22, 0x0, 0, x16, 248, x17, x15, 248, x18)

inst_32:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x8d and fm2 == 0x28f703 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x78d35630; op2val:0x46a8f703; valaddr_reg:x16; val_offset:256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 256, x17, x15, 256, x18)

inst_33:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x8a and fm2 == 0x072c02 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x78d35630; op2val:0x45072c02; valaddr_reg:x16; val_offset:264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 264, x17, x15, 264, x18)

inst_34:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x58466a and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x78d35630; op2val:0x4358466a; valaddr_reg:x16; val_offset:272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 272, x17, x15, 272, x18)

inst_35:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x2d0521 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x78d35630; op2val:0x41ad0521; valaddr_reg:x16; val_offset:280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 280, x17, x15, 280, x18)

inst_36:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0a6a81 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x78d35630; op2val:0x400a6a81; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_37:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x5d7735 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x78d35630; op2val:0x3e5d7735; valaddr_reg:x16; val_offset:296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 296, x17, x15, 296, x18)

inst_38:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x312c2a and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x78d35630; op2val:0x3cb12c2a; valaddr_reg:x16; val_offset:304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 304, x17, x15, 304, x18)

inst_39:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x76 and fm2 == 0x0dbcef and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x78d35630; op2val:0x3b0dbcef; valaddr_reg:x16; val_offset:312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 312, x17, x15, 312, x18)

inst_40:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x72 and fm2 == 0x62c7e4 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x78d35630; op2val:0x3962c7e4; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_41:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x6f and fm2 == 0x356cb7 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x78d35630; op2val:0x37b56cb7; valaddr_reg:x16; val_offset:328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 328, x17, x15, 328, x18)

inst_42:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x6c and fm2 == 0x1123c5 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x78d35630; op2val:0x361123c5; valaddr_reg:x16; val_offset:336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 336, x17, x15, 336, x18)

inst_43:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x68 and fm2 == 0x68393c and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x78d35630; op2val:0x3468393c; valaddr_reg:x16; val_offset:344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 344, x17, x15, 344, x18)

inst_44:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x65 and fm2 == 0x39c763 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x78d35630; op2val:0x32b9c763; valaddr_reg:x16; val_offset:352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 352, x17, x15, 352, x18)

inst_45:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x62 and fm2 == 0x149f82 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x78d35630; op2val:0x31149f82; valaddr_reg:x16; val_offset:360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 360, x17, x15, 360, x18)

inst_46:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x5e and fm2 == 0x6dcc04 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x78d35630; op2val:0x2f6dcc04; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_47:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x5b and fm2 == 0x3e3cd0 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x78d35630; op2val:0x2dbe3cd0; valaddr_reg:x16; val_offset:376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 376, x17, x15, 376, x18)

inst_48:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x58 and fm2 == 0x1830a6 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x78d35630; op2val:0x2c1830a6; valaddr_reg:x16; val_offset:384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 384, x17, x15, 384, x18)

inst_49:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x73810a and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x78d35630; op2val:0x2a73810a; valaddr_reg:x16; val_offset:392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 392, x17, x15, 392, x18)

inst_50:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x51 and fm2 == 0x42cda2 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x78d35630; op2val:0x28c2cda2; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_51:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x4e and fm2 == 0x1bd7b4 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x78d35630; op2val:0x271bd7b4; valaddr_reg:x16; val_offset:408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 408, x17, x15, 408, x18)

inst_52:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x4a and fm2 == 0x795921 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x78d35630; op2val:0x25795921; valaddr_reg:x16; val_offset:416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 416, x17, x15, 416, x18)

inst_53:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x47 and fm2 == 0x477a81 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x78d35630; op2val:0x23c77a81; valaddr_reg:x16; val_offset:424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 424, x17, x15, 424, x18)

inst_54:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x44 and fm2 == 0x1f9534 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x78d35630; op2val:0x221f9534; valaddr_reg:x16; val_offset:432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 432, x17, x15, 432, x18)

inst_55:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x40 and fm2 == 0x7f5520 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x78d35630; op2val:0x207f5520; valaddr_reg:x16; val_offset:440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 440, x17, x15, 440, x18)

inst_56:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x3d and fm2 == 0x4c4419 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x78d35630; op2val:0x1ecc4419; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_57:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x3a and fm2 == 0x2369ae and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x78d35630; op2val:0x1d2369ae; valaddr_reg:x16; val_offset:456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 456, x17, x15, 456, x18)

inst_58:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x37 and fm2 == 0x02baf1 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x78d35630; op2val:0x1b82baf1; valaddr_reg:x16; val_offset:464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 464, x17, x15, 464, x18)

inst_59:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x33 and fm2 == 0x512b1c and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x78d35630; op2val:0x19d12b1c; valaddr_reg:x16; val_offset:472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 472, x17, x15, 472, x18)

inst_60:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x30 and fm2 == 0x2755b0 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x78d35630; op2val:0x182755b0; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_61:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x2d and fm2 == 0x05de26 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x78d35630; op2val:0x1685de26; valaddr_reg:x16; val_offset:488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 488, x17, x15, 488, x18)

inst_62:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x29 and fm2 == 0x56303d and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x78d35630; op2val:0x14d6303d; valaddr_reg:x16; val_offset:496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 496, x17, x15, 496, x18)

inst_63:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x26 and fm2 == 0x2b59cb and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x78d35630; op2val:0x132b59cb; valaddr_reg:x16; val_offset:504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 504, x17, x15, 504, x18)

inst_64:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x23 and fm2 == 0x0914a2 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x78d35630; op2val:0x118914a2; valaddr_reg:x16; val_offset:512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 512, x17, x15, 512, x18)

inst_65:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x1f and fm2 == 0x5b5437 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x78d35630; op2val:0xfdb5437; valaddr_reg:x16; val_offset:520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 520, x17, x15, 520, x18)

inst_66:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x1c and fm2 == 0x2f7692 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x78d35630; op2val:0xe2f7692; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_67:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x19 and fm2 == 0x0c5edb and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x78d35630; op2val:0xc8c5edb; valaddr_reg:x16; val_offset:536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 536, x17, x15, 536, x18)

inst_68:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x15 and fm2 == 0x6097c5 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x78d35630; op2val:0xae097c5; valaddr_reg:x16; val_offset:544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 544, x17, x15, 544, x18)

inst_69:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x12 and fm2 == 0x33ac9e and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x78d35630; op2val:0x933ac9e; valaddr_reg:x16; val_offset:552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 552, x17, x15, 552, x18)

inst_70:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x0f and fm2 == 0x0fbd4b and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x78d35630; op2val:0x78fbd4b; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_71:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x178cde and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x78d35630; op2val:0x178cde; valaddr_reg:x16; val_offset:568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 568, x17, x15, 568, x18)

inst_72:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0xea and fm2 == 0x2a9c66 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x78d35630; op2val:0x752a9c66; valaddr_reg:x16; val_offset:576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 576, x17, x15, 576, x18)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
test_fp:
.word 0x78d35630
.word 0x78d35630
.word 0x78d35630
.word 0x7f7fffff
.word 0x78d35630
.word 0x78854a30
.word 0x78d35630
.word 0x76d54380
.word 0x78d35630
.word 0x78d35630
.word 0x78d35630
.word 0x73887d1e
.word 0x78d35630
.word 0x71da61ca
.word 0x78d35630
.word 0x702eb4a2
.word 0x78d35630
.word 0x6e8bc3b5
.word 0x78d35630
.word 0x6cdf9f88
.word 0x78d35630
.word 0x6b32e606
.word 0x78d35630
.word 0x698f1e6b
.word 0x78d35630
.word 0x67e4fd78
.word 0x78d35630
.word 0x6637312d
.word 0x78d35630
.word 0x64928dbe
.word 0x78d35630
.word 0x62ea7c63
.word 0x78d35630
.word 0x613b96b5
.word 0x78d35630
.word 0x5f96122b
.word 0x78d35630
.word 0x5df01d11
.word 0x78d35630
.word 0x5c401741
.word 0x78d35630
.word 0x5a99ac34
.word 0x78d35630
.word 0x58f5e053
.word 0x78d35630
.word 0x5744b376
.word 0x78d35630
.word 0x559d5c5e
.word 0x78d35630
.word 0x53fbc6fd
.word 0x78d35630
.word 0x52496bfe
.word 0x78d35630
.word 0x50a12331
.word 0x78d35630
.word 0x4f00e8f4
.word 0x78d35630
.word 0x4d4e4187
.word 0x78d35630
.word 0x4ba50138
.word 0x78d35630
.word 0x4a0400fa
.word 0x78d35630
.word 0x485334c3
.word 0x78d35630
.word 0x46a8f703
.word 0x78d35630
.word 0x45072c02
.word 0x78d35630
.word 0x4358466a
.word 0x78d35630
.word 0x41ad0521
.word 0x78d35630
.word 0x400a6a81
.word 0x78d35630
.word 0x3e5d7735
.word 0x78d35630
.word 0x3cb12c2a
.word 0x78d35630
.word 0x3b0dbcef
.word 0x78d35630
.word 0x3962c7e4
.word 0x78d35630
.word 0x37b56cb7
.word 0x78d35630
.word 0x361123c5
.word 0x78d35630
.word 0x3468393c
.word 0x78d35630
.word 0x32b9c763
.word 0x78d35630
.word 0x31149f82
.word 0x78d35630
.word 0x2f6dcc04
.word 0x78d35630
.word 0x2dbe3cd0
.word 0x78d35630
.word 0x2c1830a6
.word 0x78d35630
.word 0x2a73810a
.word 0x78d35630
.word 0x28c2cda2
.word 0x78d35630
.word 0x271bd7b4
.word 0x78d35630
.word 0x25795921
.word 0x78d35630
.word 0x23c77a81
.word 0x78d35630
.word 0x221f9534
.word 0x78d35630
.word 0x207f5520
.word 0x78d35630
.word 0x1ecc4419
.word 0x78d35630
.word 0x1d2369ae
.word 0x78d35630
.word 0x1b82baf1
.word 0x78d35630
.word 0x19d12b1c
.word 0x78d35630
.word 0x182755b0
.word 0x78d35630
.word 0x1685de26
.word 0x78d35630
.word 0x14d6303d
.word 0x78d35630
.word 0x132b59cb
.word 0x78d35630
.word 0x118914a2
.word 0x78d35630
.word 0xfdb5437
.word 0x78d35630
.word 0xe2f7692
.word 0x78d35630
.word 0xc8c5edb
.word 0x78d35630
.word 0xae097c5
.word 0x78d35630
.word 0x933ac9e
.word 0x78d35630
.word 0x78fbd4b
.word 0x78d35630
.word 0x178cde
.word 0x78d35630
.word 0x752a9c66
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 146*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
