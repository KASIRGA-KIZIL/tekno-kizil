
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.5.2
// timestamp : Tue Sep  7 16:50:33 2021 GMT
// usage     : riscv_ctg \
//                  -- cgf $cgf \
//                  -- xlen $xlen \
// -----------
//
// -----------
// Copyright (c) 2021. IIT Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fsub.s instruction of the RISC-V F extension for the fsub_b2 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fsub_b2)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs1 == rs2 == rd, rs1==f14, rs2==f14, rd==f14, fs1 == 0 and fe1 == 0x00 and fm1 == 0x000012 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000011 and rm_val == 0  
// opcode: fsub.s ; op1:f14; op2:f14; dest:f14; op1val:0x12; op2val:0x12; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f14, f14, f14, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1:
// rs1 == rd != rs2, rs1==f9, rs2==f1, rd==f9, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000033 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and rm_val == 0  
// opcode: fsub.s ; op1:f9; op2:f1; dest:f9; op1val:0x7f000033; op2val:0x7f800000; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f9, f9, f1, 0x0, 0, x16, 8, x17, x15, 8, x18)

inst_2:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==f3, rs2==f31, rd==f30, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00003b and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and rm_val == 0  
// opcode: fsub.s ; op1:f3; op2:f31; dest:f30; op1val:0x7f00003b; op2val:0x7f800000; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f30, f3, f31, 0x0, 0, x16, 16, x17, x15, 16, x18)

inst_3:
// rs2 == rd != rs1, rs1==f20, rs2==f18, rd==f18, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000039 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and rm_val == 0  
// opcode: fsub.s ; op1:f20; op2:f18; dest:f18; op1val:0x7f000039; op2val:0x7f800000; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f18, f20, f18, 0x0, 0, x16, 24, x17, x15, 24, x18)

inst_4:
// rs1 == rs2 != rd, rs1==f7, rs2==f7, rd==f3, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000021 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and rm_val == 0  
// opcode: fsub.s ; op1:f7; op2:f7; dest:f3; op1val:0x7f000021; op2val:0x7f000021; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f3, f7, f7, 0x0, 0, x16, 32, x17, x15, 32, x18)

inst_5:
// rs1==f29, rs2==f12, rd==f15, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000038 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and rm_val == 0  
// opcode: fsub.s ; op1:f29; op2:f12; dest:f15; op1val:0x7f000038; op2val:0x7f800000; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f15, f29, f12, 0x0, 0, x16, 40, x17, x15, 40, x18)

inst_6:
// rs1==f11, rs2==f19, rd==f16, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000058 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and rm_val == 0  
// opcode: fsub.s ; op1:f11; op2:f19; dest:f16; op1val:0x7f000058; op2val:0x7f800000; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f16, f11, f19, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_7:
// rs1==f31, rs2==f8, rd==f25, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000056 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and rm_val == 0  
// opcode: fsub.s ; op1:f31; op2:f8; dest:f25; op1val:0x7f000056; op2val:0x7f800000; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f25, f31, f8, 0x0, 0, x16, 56, x17, x15, 56, x18)

inst_8:
// rs1==f2, rs2==f5, rd==f4, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000007 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and rm_val == 0  
// opcode: fsub.s ; op1:f2; op2:f5; dest:f4; op1val:0x7f000007; op2val:0x7f800000; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f4, f2, f5, 0x0, 0, x16, 64, x17, x15, 64, x18)

inst_9:
// rs1==f26, rs2==f21, rd==f28, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000045 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and rm_val == 0  
// opcode: fsub.s ; op1:f26; op2:f21; dest:f28; op1val:0x7f000045; op2val:0x7f800000; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f28, f26, f21, 0x0, 0, x16, 72, x17, x15, 72, x18)

inst_10:
// rs1==f30, rs2==f6, rd==f22, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000027 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and rm_val == 0  
// opcode: fsub.s ; op1:f30; op2:f6; dest:f22; op1val:0x7f000027; op2val:0x7f800000; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f22, f30, f6, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_11:
// rs1==f8, rs2==f30, rd==f21, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00001b and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and rm_val == 0  
// opcode: fsub.s ; op1:f8; op2:f30; dest:f21; op1val:0x7f00001b; op2val:0x7f800000; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f21, f8, f30, 0x0, 0, x16, 88, x17, x15, 88, x18)

inst_12:
// rs1==f10, rs2==f4, rd==f31, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000060 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f4; dest:f31; op1val:0x7f000060; op2val:0x7f800000; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f31, f10, f4, 0x0, 0, x16, 96, x17, x15, 96, x18)

inst_13:
// rs1==f16, rs2==f25, rd==f26, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000057 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and rm_val == 0  
// opcode: fsub.s ; op1:f16; op2:f25; dest:f26; op1val:0x7f000057; op2val:0x7f800000; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f26, f16, f25, 0x0, 0, x16, 104, x17, x15, 104, x18)

inst_14:
// rs1==f25, rs2==f24, rd==f17, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000029 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and rm_val == 0  
// opcode: fsub.s ; op1:f25; op2:f24; dest:f17; op1val:0x7f000029; op2val:0x7f800000; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f17, f25, f24, 0x0, 0, x16, 112, x17, x15, 112, x18)

inst_15:
// rs1==f24, rs2==f11, rd==f1, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00005d and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and rm_val == 0  
// opcode: fsub.s ; op1:f24; op2:f11; dest:f1; op1val:0x7f00005d; op2val:0x7f800000; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f1, f24, f11, 0x0, 0, x16, 120, x17, x15, 120, x18)

inst_16:
// rs1==f28, rs2==f26, rd==f29, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000013 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and rm_val == 0  
// opcode: fsub.s ; op1:f28; op2:f26; dest:f29; op1val:0x7f000013; op2val:0x7f800000; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f29, f28, f26, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_17:
// rs1==f18, rs2==f23, rd==f13, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000011 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and rm_val == 0  
// opcode: fsub.s ; op1:f18; op2:f23; dest:f13; op1val:0x7f000011; op2val:0x7f800000; valaddr_reg:x16; val_offset:136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f13, f18, f23, 0x0, 0, x16, 136, x17, x15, 136, x18)

inst_18:
// rs1==f17, rs2==f16, rd==f20, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00004e and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and rm_val == 0  
// opcode: fsub.s ; op1:f17; op2:f16; dest:f20; op1val:0x7f00004e; op2val:0x7f800000; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f20, f17, f16, 0x0, 0, x16, 144, x17, x15, 144, x18)

inst_19:
// rs1==f15, rs2==f28, rd==f10, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00005b and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and rm_val == 0  
// opcode: fsub.s ; op1:f15; op2:f28; dest:f10; op1val:0x7f00005b; op2val:0x7f800000; valaddr_reg:x16; val_offset:152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f10, f15, f28, 0x0, 0, x16, 152, x17, x15, 152, x18)

inst_20:
// rs1==f6, rs2==f27, rd==f24, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000028 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and rm_val == 0  
// opcode: fsub.s ; op1:f6; op2:f27; dest:f24; op1val:0x7f000028; op2val:0x7f800000; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f24, f6, f27, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_21:
// rs1==f21, rs2==f17, rd==f0, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000017 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and rm_val == 0  
// opcode: fsub.s ; op1:f21; op2:f17; dest:f0; op1val:0x7f000017; op2val:0x7f800000; valaddr_reg:x16; val_offset:168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f0, f21, f17, 0x0, 0, x16, 168, x17, x15, 168, x18)

inst_22:
// rs1==f1, rs2==f29, rd==f2, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000056 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x7ffea4 and rm_val == 0  
// opcode: fsub.s ; op1:f1; op2:f29; dest:f2; op1val:0x7f000056; op2val:0xfe7ffea4; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f2, f1, f29, 0x0, 0, x16, 176, x17, x15, 176, x18)

inst_23:
// rs1==f13, rs2==f2, rd==f19, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00000a and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3fffea and rm_val == 0  
// opcode: fsub.s ; op1:f13; op2:f2; dest:f19; op1val:0x7f00000a; op2val:0xfebfffea; valaddr_reg:x16; val_offset:184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f19, f13, f2, 0x0, 0, x16, 184, x17, x15, 184, x18)

inst_24:
// rs1==f23, rs2==f22, rd==f27, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000041 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x5fff7c and rm_val == 0  
// opcode: fsub.s ; op1:f23; op2:f22; dest:f27; op1val:0x7f000041; op2val:0xfedfff7c; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f27, f23, f22, 0x0, 0, x16, 192, x17, x15, 192, x18)

inst_25:
// rs1==f5, rs2==f3, rd==f23, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000014 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x6fffd6 and rm_val == 0  
// opcode: fsub.s ; op1:f5; op2:f3; dest:f23; op1val:0x7f000014; op2val:0xfeefffd6; valaddr_reg:x16; val_offset:200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f23, f5, f3, 0x0, 0, x16, 200, x17, x15, 200, x18)

inst_26:
// rs1==f22, rs2==f0, rd==f11, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000040 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x77ff7e and rm_val == 0  
// opcode: fsub.s ; op1:f22; op2:f0; dest:f11; op1val:0x7f000040; op2val:0xfef7ff7e; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f11, f22, f0, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_27:
// rs1==f4, rs2==f15, rd==f12, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000061 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7bff3c and rm_val == 0  
// opcode: fsub.s ; op1:f4; op2:f15; dest:f12; op1val:0x7f000061; op2val:0xfefbff3c; valaddr_reg:x16; val_offset:216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f4, f15, 0x0, 0, x16, 216, x17, x15, 216, x18)

inst_28:
// rs1==f0, rs2==f20, rd==f7, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000002 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7dfffa and rm_val == 0  
// opcode: fsub.s ; op1:f0; op2:f20; dest:f7; op1val:0x7f000002; op2val:0xfefdfffa; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f7, f0, f20, 0x0, 0, x16, 224, x17, x15, 224, x18)

inst_29:
// rs1==f12, rs2==f13, rd==f6, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000003 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7efff8 and rm_val == 0  
// opcode: fsub.s ; op1:f12; op2:f13; dest:f6; op1val:0x7f000003; op2val:0xfefefff8; valaddr_reg:x16; val_offset:232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f6, f12, f13, 0x0, 0, x16, 232, x17, x15, 232, x18)

inst_30:
// rs1==f27, rs2==f10, rd==f8, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00005e and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7f7f42 and rm_val == 0  
// opcode: fsub.s ; op1:f27; op2:f10; dest:f8; op1val:0x7f00005e; op2val:0xfeff7f42; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f8, f27, f10, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_31:
// rs1==f19, rs2==f9, rd==f5, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000047 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7fbf70 and rm_val == 0  
// opcode: fsub.s ; op1:f19; op2:f9; dest:f5; op1val:0x7f000047; op2val:0xfeffbf70; valaddr_reg:x16; val_offset:248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f5, f19, f9, 0x0, 0, x16, 248, x17, x15, 248, x18)

inst_32:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00000a and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7fdfea and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f00000a; op2val:0xfeffdfea; valaddr_reg:x16; val_offset:256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 256, x17, x15, 256, x18)

inst_33:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000020 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7fefbe and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f000020; op2val:0xfeffefbe; valaddr_reg:x16; val_offset:264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 264, x17, x15, 264, x18)

inst_34:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00001d and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7ff7c4 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f00001d; op2val:0xfefff7c4; valaddr_reg:x16; val_offset:272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 272, x17, x15, 272, x18)

inst_35:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00000c and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7ffbe6 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f00000c; op2val:0xfefffbe6; valaddr_reg:x16; val_offset:280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 280, x17, x15, 280, x18)

inst_36:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00004b and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7ffd68 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f00004b; op2val:0xfefffd68; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_37:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000046 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7ffe72 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f000046; op2val:0xfefffe72; valaddr_reg:x16; val_offset:296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 296, x17, x15, 296, x18)

inst_38:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00002b and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7fff28 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f00002b; op2val:0xfeffff28; valaddr_reg:x16; val_offset:304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 304, x17, x15, 304, x18)

inst_39:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000027 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7fff70 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f000027; op2val:0xfeffff70; valaddr_reg:x16; val_offset:312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 312, x17, x15, 312, x18)

inst_40:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000029 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7fff8c and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f000029; op2val:0xfeffff8c; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_41:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00002a and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7fff9a and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f00002a; op2val:0xfeffff9a; valaddr_reg:x16; val_offset:328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 328, x17, x15, 328, x18)

inst_42:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000028 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7fffa6 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f000028; op2val:0xfeffffa6; valaddr_reg:x16; val_offset:336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 336, x17, x15, 336, x18)

inst_43:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00001e and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7fffbe and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f00001e; op2val:0xfeffffbe; valaddr_reg:x16; val_offset:344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 344, x17, x15, 344, x18)

inst_44:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000053 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7fff56 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f000053; op2val:0xfeffff56; valaddr_reg:x16; val_offset:352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 352, x17, x15, 352, x18)

inst_45:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000054 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x20002a and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x800054; op2val:0x120002a; valaddr_reg:x16; val_offset:360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 360, x17, x15, 360, x18)

inst_46:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00003a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x10001d and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x80003a; op2val:0x110001d; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_47:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00000c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x080006 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000c; op2val:0x1080006; valaddr_reg:x16; val_offset:376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 376, x17, x15, 376, x18)

inst_48:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00000b and fs2 == 0 and fe2 == 0x02 and fm2 == 0x040006 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000b; op2val:0x1040006; valaddr_reg:x16; val_offset:384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 384, x17, x15, 384, x18)

inst_49:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000020 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x020010 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x800020; op2val:0x1020010; valaddr_reg:x16; val_offset:392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 392, x17, x15, 392, x18)

inst_50:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000028 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x010014 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x800028; op2val:0x1010014; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_51:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000046 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x008023 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x800046; op2val:0x1008023; valaddr_reg:x16; val_offset:408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 408, x17, x15, 408, x18)

inst_52:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000022 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x004011 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x800022; op2val:0x1004011; valaddr_reg:x16; val_offset:416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 416, x17, x15, 416, x18)

inst_53:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000055 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x00202a and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x800055; op2val:0x100202a; valaddr_reg:x16; val_offset:424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 424, x17, x15, 424, x18)

inst_54:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000059 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x00102c and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x800059; op2val:0x100102c; valaddr_reg:x16; val_offset:432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 432, x17, x15, 432, x18)

inst_55:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000050 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x000828 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x800050; op2val:0x1000828; valaddr_reg:x16; val_offset:440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 440, x17, x15, 440, x18)

inst_56:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000021 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x000410 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x800021; op2val:0x1000410; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_57:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00003b and fs2 == 0 and fe2 == 0x02 and fm2 == 0x00021e and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x80003b; op2val:0x100021e; valaddr_reg:x16; val_offset:456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 456, x17, x15, 456, x18)

inst_58:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000029 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x000114 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x800029; op2val:0x1000114; valaddr_reg:x16; val_offset:464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 464, x17, x15, 464, x18)

inst_59:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000009 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x000084 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x800009; op2val:0x1000084; valaddr_reg:x16; val_offset:472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 472, x17, x15, 472, x18)

inst_60:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000029 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x000054 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x800029; op2val:0x1000054; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_61:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00003a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x00003d and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x80003a; op2val:0x100003d; valaddr_reg:x16; val_offset:488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 488, x17, x15, 488, x18)

inst_62:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00004d and fs2 == 0 and fe2 == 0x02 and fm2 == 0x000036 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x80004d; op2val:0x1000036; valaddr_reg:x16; val_offset:496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 496, x17, x15, 496, x18)

inst_63:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000026 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x00001b and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x800026; op2val:0x100001b; valaddr_reg:x16; val_offset:504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 504, x17, x15, 504, x18)

inst_64:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000004 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x000006 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x800004; op2val:0x1000006; valaddr_reg:x16; val_offset:512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 512, x17, x15, 512, x18)

inst_65:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000029 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x000016 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x800029; op2val:0x1000016; valaddr_reg:x16; val_offset:520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 520, x17, x15, 520, x18)

inst_66:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00001b and fs2 == 0 and fe2 == 0x02 and fm2 == 0x00000e and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x80001b; op2val:0x100000e; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_67:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000029 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x000015 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x800029; op2val:0x1000015; valaddr_reg:x16; val_offset:536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 536, x17, x15, 536, x18)

inst_68:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00005c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3fffa4 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x80005c; op2val:0x803fffa4; valaddr_reg:x16; val_offset:544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 544, x17, x15, 544, x18)

inst_69:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000047 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x1fffb9 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x800047; op2val:0x801fffb9; valaddr_reg:x16; val_offset:552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 552, x17, x15, 552, x18)

inst_70:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000046 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0fffba and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x800046; op2val:0x800fffba; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_71:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000038 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x07ffc8 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x800038; op2val:0x8007ffc8; valaddr_reg:x16; val_offset:568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 568, x17, x15, 568, x18)

inst_72:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000060 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x03ffa0 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x800060; op2val:0x8003ffa0; valaddr_reg:x16; val_offset:576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 576, x17, x15, 576, x18)

inst_73:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00001f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x01ffe1 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x80001f; op2val:0x8001ffe1; valaddr_reg:x16; val_offset:584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 584, x17, x15, 584, x18)

inst_74:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000016 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00ffea and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x800016; op2val:0x8000ffea; valaddr_reg:x16; val_offset:592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 592, x17, x15, 592, x18)

inst_75:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00000f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x007ff1 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000f; op2val:0x80007ff1; valaddr_reg:x16; val_offset:600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 600, x17, x15, 600, x18)

inst_76:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000036 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x003fca and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x800036; op2val:0x80003fca; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 608, x17, x15, 608, x18)

inst_77:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00001f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x001fe1 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x80001f; op2val:0x80001fe1; valaddr_reg:x16; val_offset:616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 616, x17, x15, 616, x18)

inst_78:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000ffa and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x800006; op2val:0x80000ffa; valaddr_reg:x16; val_offset:624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 624, x17, x15, 624, x18)

inst_79:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000035 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0007cb and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x800035; op2val:0x800007cb; valaddr_reg:x16; val_offset:632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 632, x17, x15, 632, x18)

inst_80:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000002 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0003fe and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x800002; op2val:0x800003fe; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_81:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00004f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0001b1 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x80004f; op2val:0x800001b1; valaddr_reg:x16; val_offset:648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 648, x17, x15, 648, x18)

inst_82:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0000da and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x800026; op2val:0x800000da; valaddr_reg:x16; val_offset:656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 656, x17, x15, 656, x18)

inst_83:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00000e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000072 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000e; op2val:0x80000072; valaddr_reg:x16; val_offset:664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 664, x17, x15, 664, x18)

inst_84:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00003b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000005 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x80003b; op2val:0x80000005; valaddr_reg:x16; val_offset:672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 672, x17, x15, 672, x18)

inst_85:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000045 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000025 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x800045; op2val:0x25; valaddr_reg:x16; val_offset:680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 680, x17, x15, 680, x18)

inst_86:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000026 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000016 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x800026; op2val:0x16; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 688, x17, x15, 688, x18)

inst_87:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000023 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00001b and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x800023; op2val:0x1b; valaddr_reg:x16; val_offset:696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 696, x17, x15, 696, x18)

inst_88:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000049 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000045 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x800049; op2val:0x45; valaddr_reg:x16; val_offset:704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 704, x17, x15, 704, x18)

inst_89:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000047 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000045 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x800047; op2val:0x45; valaddr_reg:x16; val_offset:712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 712, x17, x15, 712, x18)

inst_90:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00000a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000009 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000a; op2val:0x9; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_91:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40004b and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x4c; op2val:0x40004b; valaddr_reg:x16; val_offset:728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 728, x17, x15, 728, x18)

inst_92:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x60000e and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0xf; op2val:0x60000e; valaddr_reg:x16; val_offset:736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 736, x17, x15, 736, x18)

inst_93:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000011 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x700010 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x11; op2val:0x700010; valaddr_reg:x16; val_offset:744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 744, x17, x15, 744, x18)

inst_94:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000031 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x780030 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x31; op2val:0x780030; valaddr_reg:x16; val_offset:752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 752, x17, x15, 752, x18)

inst_95:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000035 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7c0034 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x35; op2val:0x7c0034; valaddr_reg:x16; val_offset:760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 760, x17, x15, 760, x18)

inst_96:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7e0029 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x2a; op2val:0x7e0029; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 768, x17, x15, 768, x18)

inst_97:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000063 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f0062 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x63; op2val:0x7f0062; valaddr_reg:x16; val_offset:776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 776, x17, x15, 776, x18)

inst_98:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f804a and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x4b; op2val:0x7f804a; valaddr_reg:x16; val_offset:784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 784, x17, x15, 784, x18)

inst_99:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fc03e and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f; op2val:0x7fc03e; valaddr_reg:x16; val_offset:792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 792, x17, x15, 792, x18)

inst_100:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fe04d and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x4e; op2val:0x7fe04d; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_101:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000026 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ff025 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x26; op2val:0x7ff025; valaddr_reg:x16; val_offset:808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 808, x17, x15, 808, x18)

inst_102:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ff82b and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x2c; op2val:0x7ff82b; valaddr_reg:x16; val_offset:816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 816, x17, x15, 816, x18)

inst_103:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000030 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ffc2f and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x30; op2val:0x7ffc2f; valaddr_reg:x16; val_offset:824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 824, x17, x15, 824, x18)

inst_104:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000041 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ffe40 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x41; op2val:0x7ffe40; valaddr_reg:x16; val_offset:832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 832, x17, x15, 832, x18)

inst_105:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fff2a and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x2b; op2val:0x7fff2a; valaddr_reg:x16; val_offset:840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 840, x17, x15, 840, x18)

inst_106:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000023 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffa2 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x23; op2val:0x7fffa2; valaddr_reg:x16; val_offset:848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 848, x17, x15, 848, x18)

inst_107:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000004 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x45; op2val:0x800004; valaddr_reg:x16; val_offset:856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 856, x17, x15, 856, x18)

inst_108:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000016 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ffff5 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x16; op2val:0x7ffff5; valaddr_reg:x16; val_offset:864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 864, x17, x15, 864, x18)

inst_109:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ffffa and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0xb; op2val:0x7ffffa; valaddr_reg:x16; val_offset:872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 872, x17, x15, 872, x18)

inst_110:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000054 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x5d; op2val:0x800054; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 880, x17, x15, 880, x18)

inst_111:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001f and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00001a and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x1f; op2val:0x80001a; valaddr_reg:x16; val_offset:888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 888, x17, x15, 888, x18)

inst_112:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000063 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000060 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x63; op2val:0x800060; valaddr_reg:x16; val_offset:896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 896, x17, x15, 896, x18)

inst_113:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000043 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x45; op2val:0x800043; valaddr_reg:x16; val_offset:904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 904, x17, x15, 904, x18)

inst_114:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3fffd2 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x2d; op2val:0x803fffd2; valaddr_reg:x16; val_offset:912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 912, x17, x15, 912, x18)

inst_115:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000031 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5fffce and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x31; op2val:0x805fffce; valaddr_reg:x16; val_offset:920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 920, x17, x15, 920, x18)

inst_116:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000057 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6fffa8 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x57; op2val:0x806fffa8; valaddr_reg:x16; val_offset:928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 928, x17, x15, 928, x18)

inst_117:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x77ffe3 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x1c; op2val:0x8077ffe3; valaddr_reg:x16; val_offset:936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 936, x17, x15, 936, x18)

inst_118:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7bffd3 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x2c; op2val:0x807bffd3; valaddr_reg:x16; val_offset:944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 944, x17, x15, 944, x18)

inst_119:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7dffb6 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x49; op2val:0x807dffb6; valaddr_reg:x16; val_offset:952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 952, x17, x15, 952, x18)

inst_120:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7effe5 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x1a; op2val:0x807effe5; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 960, x17, x15, 960, x18)

inst_121:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000003 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f7ffc and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3; op2val:0x807f7ffc; valaddr_reg:x16; val_offset:968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 968, x17, x15, 968, x18)

inst_122:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000034 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fbfcb and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x34; op2val:0x807fbfcb; valaddr_reg:x16; val_offset:976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 976, x17, x15, 976, x18)

inst_123:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fdfd5 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x2a; op2val:0x807fdfd5; valaddr_reg:x16; val_offset:984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 984, x17, x15, 984, x18)

inst_124:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000040 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fefbf and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x40; op2val:0x807fefbf; valaddr_reg:x16; val_offset:992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 992, x17, x15, 992, x18)

inst_125:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ff7d9 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x26; op2val:0x807ff7d9; valaddr_reg:x16; val_offset:1000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1000, x17, x15, 1000, x18)

inst_126:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000056 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffba9 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x56; op2val:0x807ffba9; valaddr_reg:x16; val_offset:1008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1008, x17, x15, 1008, x18)

inst_127:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000040 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffdbf and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x40; op2val:0x807ffdbf; valaddr_reg:x16; val_offset:1016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1016, x17, x15, 1016, x18)

inst_128:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffeb3 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x4c; op2val:0x807ffeb3; valaddr_reg:x16; val_offset:1024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1024, x17, x15, 1024, x18)

inst_129:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000057 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fff28 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x57; op2val:0x807fff28; valaddr_reg:x16; val_offset:1032; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1032, x17, x15, 1032, x18)

inst_130:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffa4 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x1b; op2val:0x807fffa4; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1040, x17, x15, 1040, x18)

inst_131:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffb2 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x2d; op2val:0x807fffb2; valaddr_reg:x16; val_offset:1048; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1048, x17, x15, 1048, x18)

inst_132:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000031 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffbe and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x31; op2val:0x807fffbe; valaddr_reg:x16; val_offset:1056; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1056, x17, x15, 1056, x18)

inst_133:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000042 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffb5 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x42; op2val:0x807fffb5; valaddr_reg:x16; val_offset:1064; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1064, x17, x15, 1064, x18)

inst_134:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffa0 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x5b; op2val:0x807fffa0; valaddr_reg:x16; val_offset:1072; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1072, x17, x15, 1072, x18)

inst_135:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffc2 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3b; op2val:0x807fffc2; valaddr_reg:x16; val_offset:1080; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1080, x17, x15, 1080, x18)

inst_136:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffe2 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x1c; op2val:0x807fffe2; valaddr_reg:x16; val_offset:1088; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1088, x17, x15, 1088, x18)

inst_137:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000005 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x400006 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x5; op2val:0x400006; valaddr_reg:x16; val_offset:1096; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1096, x17, x15, 1096, x18)

inst_138:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000002 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x200003 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x2; op2val:0x200003; valaddr_reg:x16; val_offset:1104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1104, x17, x15, 1104, x18)

inst_139:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000021 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x100022 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x21; op2val:0x100022; valaddr_reg:x16; val_offset:1112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1112, x17, x15, 1112, x18)

inst_140:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000036 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x080037 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x36; op2val:0x80037; valaddr_reg:x16; val_offset:1120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1120, x17, x15, 1120, x18)

inst_141:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000060 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x040061 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x60; op2val:0x40061; valaddr_reg:x16; val_offset:1128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1128, x17, x15, 1128, x18)

inst_142:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000028 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x020029 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x28; op2val:0x20029; valaddr_reg:x16; val_offset:1136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1136, x17, x15, 1136, x18)

inst_143:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x01000b and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0xa; op2val:0x1000b; valaddr_reg:x16; val_offset:1144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1144, x17, x15, 1144, x18)

inst_144:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000007 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x008008 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7; op2val:0x8008; valaddr_reg:x16; val_offset:1152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1152, x17, x15, 1152, x18)

inst_145:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000011 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x004012 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x11; op2val:0x4012; valaddr_reg:x16; val_offset:1160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1160, x17, x15, 1160, x18)

inst_146:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x002060 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x5f; op2val:0x2060; valaddr_reg:x16; val_offset:1168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1168, x17, x15, 1168, x18)

inst_147:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000037 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x001038 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x37; op2val:0x1038; valaddr_reg:x16; val_offset:1176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1176, x17, x15, 1176, x18)

inst_148:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000055 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000856 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x55; op2val:0x856; valaddr_reg:x16; val_offset:1184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1184, x17, x15, 1184, x18)

inst_149:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00044b and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x4a; op2val:0x44b; valaddr_reg:x16; val_offset:1192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1192, x17, x15, 1192, x18)

inst_150:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000033 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000234 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x33; op2val:0x234; valaddr_reg:x16; val_offset:1200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1200, x17, x15, 1200, x18)

inst_151:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000054 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000155 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54; op2val:0x155; valaddr_reg:x16; val_offset:1208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1208, x17, x15, 1208, x18)

inst_152:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00009e and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x1d; op2val:0x9e; valaddr_reg:x16; val_offset:1216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1216, x17, x15, 1216, x18)

inst_153:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000043 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000084 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x43; op2val:0x84; valaddr_reg:x16; val_offset:1224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1224, x17, x15, 1224, x18)

inst_154:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000051 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000072 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x51; op2val:0x72; valaddr_reg:x16; val_offset:1232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1232, x17, x15, 1232, x18)

inst_155:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000046 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000057 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x46; op2val:0x57; valaddr_reg:x16; val_offset:1240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1240, x17, x15, 1240, x18)

inst_156:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000057 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000060 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x57; op2val:0x60; valaddr_reg:x16; val_offset:1248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1248, x17, x15, 1248, x18)

inst_157:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000060 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x5b; op2val:0x60; valaddr_reg:x16; val_offset:1256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1256, x17, x15, 1256, x18)

inst_158:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000015 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000018 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x15; op2val:0x18; valaddr_reg:x16; val_offset:1264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1264, x17, x15, 1264, x18)

inst_159:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000005 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000006 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x5; op2val:0x6; valaddr_reg:x16; val_offset:1272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1272, x17, x15, 1272, x18)

inst_160:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3fffce and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x33; op2val:0x803fffce; valaddr_reg:x16; val_offset:1280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1280, x17, x15, 1280, x18)

inst_161:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x1fffe4 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x1d; op2val:0x801fffe4; valaddr_reg:x16; val_offset:1288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1288, x17, x15, 1288, x18)

inst_162:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000038 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0fffc9 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x38; op2val:0x800fffc9; valaddr_reg:x16; val_offset:1296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1296, x17, x15, 1296, x18)

inst_163:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x07ffe6 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x1b; op2val:0x8007ffe6; valaddr_reg:x16; val_offset:1304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1304, x17, x15, 1304, x18)

inst_164:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x03ffa3 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x5e; op2val:0x8003ffa3; valaddr_reg:x16; val_offset:1312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1312, x17, x15, 1312, x18)

inst_165:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x01fff3 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0xe; op2val:0x8001fff3; valaddr_reg:x16; val_offset:1320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1320, x17, x15, 1320, x18)

inst_166:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000019 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00ffe8 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x19; op2val:0x8000ffe8; valaddr_reg:x16; val_offset:1328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1328, x17, x15, 1328, x18)

inst_167:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x007fd5 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x2c; op2val:0x80007fd5; valaddr_reg:x16; val_offset:1336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1336, x17, x15, 1336, x18)

inst_168:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000028 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x003fd9 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x28; op2val:0x80003fd9; valaddr_reg:x16; val_offset:1344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1344, x17, x15, 1344, x18)

inst_169:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x001ff2 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0xf; op2val:0x80001ff2; valaddr_reg:x16; val_offset:1352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1352, x17, x15, 1352, x18)

inst_170:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000040 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000fc1 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x40; op2val:0x80000fc1; valaddr_reg:x16; val_offset:1360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1360, x17, x15, 1360, x18)

inst_171:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0007a7 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x5a; op2val:0x800007a7; valaddr_reg:x16; val_offset:1368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1368, x17, x15, 1368, x18)

inst_172:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0003db and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x26; op2val:0x800003db; valaddr_reg:x16; val_offset:1376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1376, x17, x15, 1376, x18)

inst_173:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000053 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0001ae and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x53; op2val:0x800001ae; valaddr_reg:x16; val_offset:1384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1384, x17, x15, 1384, x18)

inst_174:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000055 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0000ac and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x55; op2val:0x800000ac; valaddr_reg:x16; val_offset:1392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1392, x17, x15, 1392, x18)

inst_175:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000044 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00003d and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x44; op2val:0x8000003d; valaddr_reg:x16; val_offset:1400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1400, x17, x15, 1400, x18)

inst_176:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000015 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00002c and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x15; op2val:0x8000002c; valaddr_reg:x16; val_offset:1408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1408, x17, x15, 1408, x18)

inst_177:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000009 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000018 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x9; op2val:0x80000018; valaddr_reg:x16; val_offset:1416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1416, x17, x15, 1416, x18)

inst_178:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00001c and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x2d; op2val:0x1c; valaddr_reg:x16; val_offset:1424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1424, x17, x15, 1424, x18)

inst_179:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000050 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000047 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x50; op2val:0x47; valaddr_reg:x16; val_offset:1432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1432, x17, x15, 1432, x18)

inst_180:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000023 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00001e and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x23; op2val:0x1e; valaddr_reg:x16; val_offset:1440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1440, x17, x15, 1440, x18)

inst_181:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000024 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000021 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x24; op2val:0x21; valaddr_reg:x16; val_offset:1448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1448, x17, x15, 1448, x18)

inst_182:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000061 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000060 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x61; op2val:0x60; valaddr_reg:x16; val_offset:1456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1456, x17, x15, 1456, x18)

inst_183:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00003a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20001d and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80003a; op2val:0x4020001d; valaddr_reg:x16; val_offset:1464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1464, x17, x15, 1464, x18)

inst_184:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00000b and fs2 == 0 and fe2 == 0x80 and fm2 == 0x100006 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80000b; op2val:0x40100006; valaddr_reg:x16; val_offset:1472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1472, x17, x15, 1472, x18)

inst_185:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000057 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x08002c and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800057; op2val:0x4008002c; valaddr_reg:x16; val_offset:1480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1480, x17, x15, 1480, x18)

inst_186:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000021 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x040010 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800021; op2val:0x40040010; valaddr_reg:x16; val_offset:1488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1488, x17, x15, 1488, x18)

inst_187:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00000c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x020006 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80000c; op2val:0x40020006; valaddr_reg:x16; val_offset:1496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1496, x17, x15, 1496, x18)

inst_188:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00004b and fs2 == 0 and fe2 == 0x80 and fm2 == 0x010026 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80004b; op2val:0x40010026; valaddr_reg:x16; val_offset:1504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1504, x17, x15, 1504, x18)

inst_189:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000017 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00800c and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800017; op2val:0x4000800c; valaddr_reg:x16; val_offset:1512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1512, x17, x15, 1512, x18)

inst_190:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00001e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00400f and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80001e; op2val:0x4000400f; valaddr_reg:x16; val_offset:1520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1520, x17, x15, 1520, x18)

inst_191:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00004d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x002026 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80004d; op2val:0x40002026; valaddr_reg:x16; val_offset:1528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1528, x17, x15, 1528, x18)

inst_192:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00002b and fs2 == 0 and fe2 == 0x80 and fm2 == 0x001016 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80002b; op2val:0x40001016; valaddr_reg:x16; val_offset:1536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1536, x17, x15, 1536, x18)

inst_193:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000050 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000828 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800050; op2val:0x40000828; valaddr_reg:x16; val_offset:1544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1544, x17, x15, 1544, x18)

inst_194:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000045 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000422 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800045; op2val:0x40000422; valaddr_reg:x16; val_offset:1552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1552, x17, x15, 1552, x18)

inst_195:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00002d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000216 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80002d; op2val:0x40000216; valaddr_reg:x16; val_offset:1560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1560, x17, x15, 1560, x18)

inst_196:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00002e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000117 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80002e; op2val:0x40000117; valaddr_reg:x16; val_offset:1568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1568, x17, x15, 1568, x18)

inst_197:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000035 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00009a and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800035; op2val:0x4000009a; valaddr_reg:x16; val_offset:1576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1576, x17, x15, 1576, x18)

inst_198:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00001a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00004d and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80001a; op2val:0x4000004d; valaddr_reg:x16; val_offset:1584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1584, x17, x15, 1584, x18)

inst_199:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000049 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000044 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800049; op2val:0x40000044; valaddr_reg:x16; val_offset:1592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1592, x17, x15, 1592, x18)

inst_200:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00003e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00002f and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80003e; op2val:0x4000002f; valaddr_reg:x16; val_offset:1600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1600, x17, x15, 1600, x18)

inst_201:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000037 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000024 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800037; op2val:0x40000024; valaddr_reg:x16; val_offset:1608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1608, x17, x15, 1608, x18)

inst_202:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000048 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000028 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800048; op2val:0x40000028; valaddr_reg:x16; val_offset:1616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1616, x17, x15, 1616, x18)

inst_203:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000011 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00000a and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800011; op2val:0x4000000a; valaddr_reg:x16; val_offset:1624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1624, x17, x15, 1624, x18)

inst_204:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00005f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000030 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80005f; op2val:0x40000030; valaddr_reg:x16; val_offset:1632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1632, x17, x15, 1632, x18)

inst_205:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000001 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800001; op2val:0x40000001; valaddr_reg:x16; val_offset:1640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1640, x17, x15, 1640, x18)

inst_206:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00004e and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7ffec8 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80004e; op2val:0xbefffec8; valaddr_reg:x16; val_offset:1648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1648, x17, x15, 1648, x18)

inst_207:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000055 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7ffd58 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800055; op2val:0xbe7ffd58; valaddr_reg:x16; val_offset:1656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1656, x17, x15, 1656, x18)

inst_208:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00003b and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7ffc50 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80003b; op2val:0xbdfffc50; valaddr_reg:x16; val_offset:1664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1664, x17, x15, 1664, x18)

inst_209:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00004a and fs2 == 1 and fe2 == 0x7a and fm2 == 0x7ff6c0 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80004a; op2val:0xbd7ff6c0; valaddr_reg:x16; val_offset:1672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1672, x17, x15, 1672, x18)

inst_210:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000042 and fs2 == 1 and fe2 == 0x79 and fm2 == 0x7fef80 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800042; op2val:0xbcffef80; valaddr_reg:x16; val_offset:1680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1680, x17, x15, 1680, x18)

inst_211:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00001e and fs2 == 1 and fe2 == 0x78 and fm2 == 0x7ff100 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80001e; op2val:0xbc7ff100; valaddr_reg:x16; val_offset:1688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1688, x17, x15, 1688, x18)

inst_212:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000046 and fs2 == 1 and fe2 == 0x77 and fm2 == 0x7fba00 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800046; op2val:0xbbffba00; valaddr_reg:x16; val_offset:1696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1696, x17, x15, 1696, x18)

inst_213:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000063 and fs2 == 1 and fe2 == 0x76 and fm2 == 0x7f3a00 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800063; op2val:0xbb7f3a00; valaddr_reg:x16; val_offset:1704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1704, x17, x15, 1704, x18)

inst_214:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00001e and fs2 == 1 and fe2 == 0x75 and fm2 == 0x7f8800 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80001e; op2val:0xbaff8800; valaddr_reg:x16; val_offset:1712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1712, x17, x15, 1712, x18)

inst_215:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000016 and fs2 == 1 and fe2 == 0x74 and fm2 == 0x7f5000 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800016; op2val:0xba7f5000; valaddr_reg:x16; val_offset:1720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1720, x17, x15, 1720, x18)

inst_216:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000053 and fs2 == 1 and fe2 == 0x73 and fm2 == 0x7ad000 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800053; op2val:0xb9fad000; valaddr_reg:x16; val_offset:1728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1728, x17, x15, 1728, x18)

inst_217:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00004b and fs2 == 1 and fe2 == 0x72 and fm2 == 0x76a000 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80004b; op2val:0xb976a000; valaddr_reg:x16; val_offset:1736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1736, x17, x15, 1736, x18)

inst_218:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00004f and fs2 == 1 and fe2 == 0x71 and fm2 == 0x6c4000 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80004f; op2val:0xb8ec4000; valaddr_reg:x16; val_offset:1744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1744, x17, x15, 1744, x18)

inst_219:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000028 and fs2 == 1 and fe2 == 0x70 and fm2 == 0x6c0000 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800028; op2val:0xb86c0000; valaddr_reg:x16; val_offset:1752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1752, x17, x15, 1752, x18)

inst_220:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00003d and fs2 == 1 and fe2 == 0x6f and fm2 == 0x430000 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80003d; op2val:0xb7c30000; valaddr_reg:x16; val_offset:1760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1760, x17, x15, 1760, x18)

inst_221:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00005e and fs2 == 1 and fe2 == 0x6d and fm2 == 0x080000 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80005e; op2val:0xb6880000; valaddr_reg:x16; val_offset:1768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1768, x17, x15, 1768, x18)

inst_222:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000030 and fs2 == 1 and fe2 == 0x6c and fm2 == 0x000000 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800030; op2val:0xb6000000; valaddr_reg:x16; val_offset:1776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1776, x17, x15, 1776, x18)

inst_223:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000043 and fs2 == 0 and fe2 == 0x6d and fm2 == 0x0c0000 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800043; op2val:0x368c0000; valaddr_reg:x16; val_offset:1784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1784, x17, x15, 1784, x18)

inst_224:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00000e and fs2 == 1 and fe2 == 0x69 and fm2 == 0x000000 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80000e; op2val:0xb4800000; valaddr_reg:x16; val_offset:1792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1792, x17, x15, 1792, x18)

inst_225:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000055 and fs2 == 0 and fe2 == 0x6e and fm2 == 0x1a0000 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800055; op2val:0x371a0000; valaddr_reg:x16; val_offset:1800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1800, x17, x15, 1800, x18)

inst_226:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00000c and fs2 == 0 and fe2 == 0x6b and fm2 == 0x000000 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80000c; op2val:0x35800000; valaddr_reg:x16; val_offset:1808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1808, x17, x15, 1808, x18)

inst_227:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00005f and fs2 == 0 and fe2 == 0x6e and fm2 == 0x3a0000 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80005f; op2val:0x373a0000; valaddr_reg:x16; val_offset:1816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1816, x17, x15, 1816, x18)

inst_228:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00005a and fs2 == 0 and fe2 == 0x6e and fm2 == 0x320000 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80005a; op2val:0x37320000; valaddr_reg:x16; val_offset:1824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1824, x17, x15, 1824, x18)

inst_229:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40002f and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x2f; op2val:0x40002f; valaddr_reg:x16; val_offset:1832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1832, x17, x15, 1832, x18)

inst_230:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x200056 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x56; op2val:0x200056; valaddr_reg:x16; val_offset:1840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1840, x17, x15, 1840, x18)

inst_231:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000034 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x100034 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x34; op2val:0x100034; valaddr_reg:x16; val_offset:1848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1848, x17, x15, 1848, x18)

inst_232:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x080020 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x20; op2val:0x80020; valaddr_reg:x16; val_offset:1856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1856, x17, x15, 1856, x18)

inst_233:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000005 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x040005 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x5; op2val:0x40005; valaddr_reg:x16; val_offset:1864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1864, x17, x15, 1864, x18)

inst_234:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000033 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x020033 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x33; op2val:0x20033; valaddr_reg:x16; val_offset:1872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1872, x17, x15, 1872, x18)

inst_235:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000040 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x010040 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x40; op2val:0x10040; valaddr_reg:x16; val_offset:1880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1880, x17, x15, 1880, x18)

inst_236:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000025 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x008025 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x25; op2val:0x8025; valaddr_reg:x16; val_offset:1888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1888, x17, x15, 1888, x18)

inst_237:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000019 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x004019 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x19; op2val:0x4019; valaddr_reg:x16; val_offset:1896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1896, x17, x15, 1896, x18)

inst_238:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000041 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x002041 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x41; op2val:0x2041; valaddr_reg:x16; val_offset:1904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1904, x17, x15, 1904, x18)

inst_239:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000041 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x001041 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x41; op2val:0x1041; valaddr_reg:x16; val_offset:1912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1912, x17, x15, 1912, x18)

inst_240:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00085d and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x5d; op2val:0x85d; valaddr_reg:x16; val_offset:1920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1920, x17, x15, 1920, x18)

inst_241:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000060 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000460 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x60; op2val:0x460; valaddr_reg:x16; val_offset:1928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1928, x17, x15, 1928, x18)

inst_242:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000026 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000226 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x26; op2val:0x226; valaddr_reg:x16; val_offset:1936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1936, x17, x15, 1936, x18)

inst_243:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000051 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000151 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x51; op2val:0x151; valaddr_reg:x16; val_offset:1944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1944, x17, x15, 1944, x18)

inst_244:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00008d and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0xd; op2val:0x8d; valaddr_reg:x16; val_offset:1952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1952, x17, x15, 1952, x18)

inst_245:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000048 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000088 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x48; op2val:0x88; valaddr_reg:x16; val_offset:1960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1960, x17, x15, 1960, x18)

inst_246:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000003 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000023 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3; op2val:0x23; valaddr_reg:x16; val_offset:1968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1968, x17, x15, 1968, x18)

inst_247:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00004b and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3b; op2val:0x4b; valaddr_reg:x16; val_offset:1976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1976, x17, x15, 1976, x18)

inst_248:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000025 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x1d; op2val:0x25; valaddr_reg:x16; val_offset:1984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1984, x17, x15, 1984, x18)

inst_249:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000022 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x1e; op2val:0x22; valaddr_reg:x16; val_offset:1992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1992, x17, x15, 1992, x18)

inst_250:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000020 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x1e; op2val:0x20; valaddr_reg:x16; val_offset:2000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 2000, x17, x15, 2000, x18)

inst_251:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000040 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000041 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x40; op2val:0x41; valaddr_reg:x16; val_offset:2008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 2008, x17, x15, 2008, x18)

inst_252:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000062 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3fff9e and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x62; op2val:0x803fff9e; valaddr_reg:x16; val_offset:2016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 2016, x17, x15, 2016, x18)

inst_253:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000044 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x1fffbc and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x44; op2val:0x801fffbc; valaddr_reg:x16; val_offset:2024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_2)

inst_254:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0fffa3 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x5d; op2val:0x800fffa3; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_255:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x07ffe4 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x1c; op2val:0x8007ffe4; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 8, x17, x15, 8, x18)

inst_256:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000031 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x03ffcf and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x31; op2val:0x8003ffcf; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 16, x17, x15, 16, x18)

inst_257:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000046 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x01ffba and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x46; op2val:0x8001ffba; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 24, x17, x15, 24, x18)

inst_258:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000004 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00fffc and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x4; op2val:0x8000fffc; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 32, x17, x15, 32, x18)

inst_259:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000004 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x007ffc and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x4; op2val:0x80007ffc; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 40, x17, x15, 40, x18)

inst_260:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x003ff2 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0xe; op2val:0x80003ff2; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_261:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x001fe2 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x1e; op2val:0x80001fe2; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 56, x17, x15, 56, x18)

inst_262:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000023 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000fdd and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x23; op2val:0x80000fdd; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 64, x17, x15, 64, x18)

inst_263:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0007a6 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x5a; op2val:0x800007a6; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 72, x17, x15, 72, x18)

inst_264:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000063 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00039d and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x63; op2val:0x8000039d; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_265:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0001b2 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x4e; op2val:0x800001b2; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 88, x17, x15, 88, x18)

inst_266:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000032 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0000ce and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x32; op2val:0x800000ce; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 96, x17, x15, 96, x18)

inst_267:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000041 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f; op2val:0x80000041; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 104, x17, x15, 104, x18)

inst_268:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000025 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x1b; op2val:0x80000025; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 112, x17, x15, 112, x18)

inst_269:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000054 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000034 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54; op2val:0x34; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 120, x17, x15, 120, x18)

inst_270:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00002a and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3a; op2val:0x2a; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_271:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000040 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000038 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x40; op2val:0x38; valaddr_reg:x16; val_offset:136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 136, x17, x15, 136, x18)

inst_272:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000021 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00001d and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x21; op2val:0x1d; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 144, x17, x15, 144, x18)

inst_273:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000062 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000060 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x62; op2val:0x60; valaddr_reg:x16; val_offset:152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 152, x17, x15, 152, x18)

inst_274:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000012 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000011 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x12; op2val:0x11; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_275:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000021 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f000021; op2val:0x7f800000; valaddr_reg:x16; val_offset:168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 168, x17, x15, 168, x18)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
test_fp:
.word 0x12
.word 0x12
.word 0x7f000033
.word 0x7f800000
.word 0x7f00003b
.word 0x7f800000
.word 0x7f000039
.word 0x7f800000
.word 0x7f000021
.word 0x7f000021
.word 0x7f000038
.word 0x7f800000
.word 0x7f000058
.word 0x7f800000
.word 0x7f000056
.word 0x7f800000
.word 0x7f000007
.word 0x7f800000
.word 0x7f000045
.word 0x7f800000
.word 0x7f000027
.word 0x7f800000
.word 0x7f00001b
.word 0x7f800000
.word 0x7f000060
.word 0x7f800000
.word 0x7f000057
.word 0x7f800000
.word 0x7f000029
.word 0x7f800000
.word 0x7f00005d
.word 0x7f800000
.word 0x7f000013
.word 0x7f800000
.word 0x7f000011
.word 0x7f800000
.word 0x7f00004e
.word 0x7f800000
.word 0x7f00005b
.word 0x7f800000
.word 0x7f000028
.word 0x7f800000
.word 0x7f000017
.word 0x7f800000
.word 0x7f000056
.word 0xfe7ffea4
.word 0x7f00000a
.word 0xfebfffea
.word 0x7f000041
.word 0xfedfff7c
.word 0x7f000014
.word 0xfeefffd6
.word 0x7f000040
.word 0xfef7ff7e
.word 0x7f000061
.word 0xfefbff3c
.word 0x7f000002
.word 0xfefdfffa
.word 0x7f000003
.word 0xfefefff8
.word 0x7f00005e
.word 0xfeff7f42
.word 0x7f000047
.word 0xfeffbf70
.word 0x7f00000a
.word 0xfeffdfea
.word 0x7f000020
.word 0xfeffefbe
.word 0x7f00001d
.word 0xfefff7c4
.word 0x7f00000c
.word 0xfefffbe6
.word 0x7f00004b
.word 0xfefffd68
.word 0x7f000046
.word 0xfefffe72
.word 0x7f00002b
.word 0xfeffff28
.word 0x7f000027
.word 0xfeffff70
.word 0x7f000029
.word 0xfeffff8c
.word 0x7f00002a
.word 0xfeffff9a
.word 0x7f000028
.word 0xfeffffa6
.word 0x7f00001e
.word 0xfeffffbe
.word 0x7f000053
.word 0xfeffff56
.word 0x800054
.word 0x120002a
.word 0x80003a
.word 0x110001d
.word 0x80000c
.word 0x1080006
.word 0x80000b
.word 0x1040006
.word 0x800020
.word 0x1020010
.word 0x800028
.word 0x1010014
.word 0x800046
.word 0x1008023
.word 0x800022
.word 0x1004011
.word 0x800055
.word 0x100202a
.word 0x800059
.word 0x100102c
.word 0x800050
.word 0x1000828
.word 0x800021
.word 0x1000410
.word 0x80003b
.word 0x100021e
.word 0x800029
.word 0x1000114
.word 0x800009
.word 0x1000084
.word 0x800029
.word 0x1000054
.word 0x80003a
.word 0x100003d
.word 0x80004d
.word 0x1000036
.word 0x800026
.word 0x100001b
.word 0x800004
.word 0x1000006
.word 0x800029
.word 0x1000016
.word 0x80001b
.word 0x100000e
.word 0x800029
.word 0x1000015
.word 0x80005c
.word 0x803fffa4
.word 0x800047
.word 0x801fffb9
.word 0x800046
.word 0x800fffba
.word 0x800038
.word 0x8007ffc8
.word 0x800060
.word 0x8003ffa0
.word 0x80001f
.word 0x8001ffe1
.word 0x800016
.word 0x8000ffea
.word 0x80000f
.word 0x80007ff1
.word 0x800036
.word 0x80003fca
.word 0x80001f
.word 0x80001fe1
.word 0x800006
.word 0x80000ffa
.word 0x800035
.word 0x800007cb
.word 0x800002
.word 0x800003fe
.word 0x80004f
.word 0x800001b1
.word 0x800026
.word 0x800000da
.word 0x80000e
.word 0x80000072
.word 0x80003b
.word 0x80000005
.word 0x800045
.word 0x25
.word 0x800026
.word 0x16
.word 0x800023
.word 0x1b
.word 0x800049
.word 0x45
.word 0x800047
.word 0x45
.word 0x80000a
.word 0x9
.word 0x4c
.word 0x40004b
.word 0xf
.word 0x60000e
.word 0x11
.word 0x700010
.word 0x31
.word 0x780030
.word 0x35
.word 0x7c0034
.word 0x2a
.word 0x7e0029
.word 0x63
.word 0x7f0062
.word 0x4b
.word 0x7f804a
.word 0x3f
.word 0x7fc03e
.word 0x4e
.word 0x7fe04d
.word 0x26
.word 0x7ff025
.word 0x2c
.word 0x7ff82b
.word 0x30
.word 0x7ffc2f
.word 0x41
.word 0x7ffe40
.word 0x2b
.word 0x7fff2a
.word 0x23
.word 0x7fffa2
.word 0x45
.word 0x800004
.word 0x16
.word 0x7ffff5
.word 0xb
.word 0x7ffffa
.word 0x5d
.word 0x800054
.word 0x1f
.word 0x80001a
.word 0x63
.word 0x800060
.word 0x45
.word 0x800043
.word 0x2d
.word 0x803fffd2
.word 0x31
.word 0x805fffce
.word 0x57
.word 0x806fffa8
.word 0x1c
.word 0x8077ffe3
.word 0x2c
.word 0x807bffd3
.word 0x49
.word 0x807dffb6
.word 0x1a
.word 0x807effe5
.word 0x3
.word 0x807f7ffc
.word 0x34
.word 0x807fbfcb
.word 0x2a
.word 0x807fdfd5
.word 0x40
.word 0x807fefbf
.word 0x26
.word 0x807ff7d9
.word 0x56
.word 0x807ffba9
.word 0x40
.word 0x807ffdbf
.word 0x4c
.word 0x807ffeb3
.word 0x57
.word 0x807fff28
.word 0x1b
.word 0x807fffa4
.word 0x2d
.word 0x807fffb2
.word 0x31
.word 0x807fffbe
.word 0x42
.word 0x807fffb5
.word 0x5b
.word 0x807fffa0
.word 0x3b
.word 0x807fffc2
.word 0x1c
.word 0x807fffe2
.word 0x5
.word 0x400006
.word 0x2
.word 0x200003
.word 0x21
.word 0x100022
.word 0x36
.word 0x80037
.word 0x60
.word 0x40061
.word 0x28
.word 0x20029
.word 0xa
.word 0x1000b
.word 0x7
.word 0x8008
.word 0x11
.word 0x4012
.word 0x5f
.word 0x2060
.word 0x37
.word 0x1038
.word 0x55
.word 0x856
.word 0x4a
.word 0x44b
.word 0x33
.word 0x234
.word 0x54
.word 0x155
.word 0x1d
.word 0x9e
.word 0x43
.word 0x84
.word 0x51
.word 0x72
.word 0x46
.word 0x57
.word 0x57
.word 0x60
.word 0x5b
.word 0x60
.word 0x15
.word 0x18
.word 0x5
.word 0x6
.word 0x33
.word 0x803fffce
.word 0x1d
.word 0x801fffe4
.word 0x38
.word 0x800fffc9
.word 0x1b
.word 0x8007ffe6
.word 0x5e
.word 0x8003ffa3
.word 0xe
.word 0x8001fff3
.word 0x19
.word 0x8000ffe8
.word 0x2c
.word 0x80007fd5
.word 0x28
.word 0x80003fd9
.word 0xf
.word 0x80001ff2
.word 0x40
.word 0x80000fc1
.word 0x5a
.word 0x800007a7
.word 0x26
.word 0x800003db
.word 0x53
.word 0x800001ae
.word 0x55
.word 0x800000ac
.word 0x44
.word 0x8000003d
.word 0x15
.word 0x8000002c
.word 0x9
.word 0x80000018
.word 0x2d
.word 0x1c
.word 0x50
.word 0x47
.word 0x23
.word 0x1e
.word 0x24
.word 0x21
.word 0x61
.word 0x60
.word 0x3f80003a
.word 0x4020001d
.word 0x3f80000b
.word 0x40100006
.word 0x3f800057
.word 0x4008002c
.word 0x3f800021
.word 0x40040010
.word 0x3f80000c
.word 0x40020006
.word 0x3f80004b
.word 0x40010026
.word 0x3f800017
.word 0x4000800c
.word 0x3f80001e
.word 0x4000400f
.word 0x3f80004d
.word 0x40002026
.word 0x3f80002b
.word 0x40001016
.word 0x3f800050
.word 0x40000828
.word 0x3f800045
.word 0x40000422
.word 0x3f80002d
.word 0x40000216
.word 0x3f80002e
.word 0x40000117
.word 0x3f800035
.word 0x4000009a
.word 0x3f80001a
.word 0x4000004d
.word 0x3f800049
.word 0x40000044
.word 0x3f80003e
.word 0x4000002f
.word 0x3f800037
.word 0x40000024
.word 0x3f800048
.word 0x40000028
.word 0x3f800011
.word 0x4000000a
.word 0x3f80005f
.word 0x40000030
.word 0x3f800001
.word 0x40000001
.word 0x3f80004e
.word 0xbefffec8
.word 0x3f800055
.word 0xbe7ffd58
.word 0x3f80003b
.word 0xbdfffc50
.word 0x3f80004a
.word 0xbd7ff6c0
.word 0x3f800042
.word 0xbcffef80
.word 0x3f80001e
.word 0xbc7ff100
.word 0x3f800046
.word 0xbbffba00
.word 0x3f800063
.word 0xbb7f3a00
.word 0x3f80001e
.word 0xbaff8800
.word 0x3f800016
.word 0xba7f5000
.word 0x3f800053
.word 0xb9fad000
.word 0x3f80004b
.word 0xb976a000
.word 0x3f80004f
.word 0xb8ec4000
.word 0x3f800028
.word 0xb86c0000
.word 0x3f80003d
.word 0xb7c30000
.word 0x3f80005e
.word 0xb6880000
.word 0x3f800030
.word 0xb6000000
.word 0x3f800043
.word 0x368c0000
.word 0x3f80000e
.word 0xb4800000
.word 0x3f800055
.word 0x371a0000
.word 0x3f80000c
.word 0x35800000
.word 0x3f80005f
.word 0x373a0000
.word 0x3f80005a
.word 0x37320000
.word 0x2f
.word 0x40002f
.word 0x56
.word 0x200056
.word 0x34
.word 0x100034
.word 0x20
.word 0x80020
.word 0x5
.word 0x40005
.word 0x33
.word 0x20033
.word 0x40
.word 0x10040
.word 0x25
.word 0x8025
.word 0x19
.word 0x4019
.word 0x41
.word 0x2041
.word 0x41
.word 0x1041
.word 0x5d
.word 0x85d
.word 0x60
.word 0x460
.word 0x26
.word 0x226
.word 0x51
.word 0x151
.word 0xd
.word 0x8d
.word 0x48
.word 0x88
.word 0x3
.word 0x23
.word 0x3b
.word 0x4b
.word 0x1d
.word 0x25
.word 0x1e
.word 0x22
.word 0x1e
.word 0x20
.word 0x40
.word 0x41
.word 0x62
.word 0x803fff9e
.word 0x44
.word 0x801fffbc
.word 0x5d
.word 0x800fffa3
.word 0x1c
.word 0x8007ffe4
.word 0x31
.word 0x8003ffcf
.word 0x46
.word 0x8001ffba
.word 0x4
.word 0x8000fffc
.word 0x4
.word 0x80007ffc
.word 0xe
.word 0x80003ff2
.word 0x1e
.word 0x80001fe2
.word 0x23
.word 0x80000fdd
.word 0x5a
.word 0x800007a6
.word 0x63
.word 0x8000039d
.word 0x4e
.word 0x800001b2
.word 0x32
.word 0x800000ce
.word 0x3f
.word 0x80000041
.word 0x1b
.word 0x80000025
.word 0x54
.word 0x34
.word 0x3a
.word 0x2a
.word 0x40
.word 0x38
.word 0x21
.word 0x1d
.word 0x62
.word 0x60
.word 0x12
.word 0x11
.word 0x7f000021
.word 0x7f800000
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_2:
    .fill 44*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
