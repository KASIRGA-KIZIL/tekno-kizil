
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.5.2
// timestamp : Tue Sep  7 16:07:52 2021 GMT
// usage     : riscv_ctg \
//                  -- cgf $cgf \
//                  -- xlen $xlen \
// -----------
//
// -----------
// Copyright (c) 2021. IIT Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fadd.s instruction of the RISC-V F extension for the fadd_b2 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fadd_b2)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs1 == rs2 == rd, rs1==f21, rs2==f21, rd==f21, fs1 == 0 and fe1 == 0x00 and fm1 == 0x000032 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000031 and rm_val == 0  
// opcode: fadd.s ; op1:f21; op2:f21; dest:f21; op1val:0x32; op2val:0x32; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f21, f21, f21, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1:
// rs2 == rd != rs1, rs1==f26, rs2==f12, rd==f12, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000031 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f26; op2:f12; dest:f12; op1val:0x7f000031; op2val:0xff800000; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f26, f12, 0x0, 0, x16, 8, x17, x15, 8, x18)

inst_2:
// rs1 == rd != rs2, rs1==f6, rs2==f19, rd==f6, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00004e and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f6; op2:f19; dest:f6; op1val:0x7f00004e; op2val:0xff800000; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f6, f6, f19, 0x0, 0, x16, 16, x17, x15, 16, x18)

inst_3:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==f18, rs2==f9, rd==f5, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000013 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f18; op2:f9; dest:f5; op1val:0x7f000013; op2val:0xff800000; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f5, f18, f9, 0x0, 0, x16, 24, x17, x15, 24, x18)

inst_4:
// rs1 == rs2 != rd, rs1==f2, rs2==f2, rd==f4, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000005 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f2; op2:f2; dest:f4; op1val:0x7f000005; op2val:0x7f000005; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f4, f2, f2, 0x0, 0, x16, 32, x17, x15, 32, x18)

inst_5:
// rs1==f10, rs2==f0, rd==f23, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000029 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f0; dest:f23; op1val:0x7f000029; op2val:0xff800000; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f23, f10, f0, 0x0, 0, x16, 40, x17, x15, 40, x18)

inst_6:
// rs1==f0, rs2==f24, rd==f22, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00005b and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f0; op2:f24; dest:f22; op1val:0x7f00005b; op2val:0xff800000; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f22, f0, f24, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_7:
// rs1==f30, rs2==f22, rd==f27, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000002 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f30; op2:f22; dest:f27; op1val:0x7f000002; op2val:0xff800000; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f27, f30, f22, 0x0, 0, x16, 56, x17, x15, 56, x18)

inst_8:
// rs1==f11, rs2==f3, rd==f13, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00004f and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f11; op2:f3; dest:f13; op1val:0x7f00004f; op2val:0xff800000; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f13, f11, f3, 0x0, 0, x16, 64, x17, x15, 64, x18)

inst_9:
// rs1==f27, rs2==f14, rd==f19, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00001a and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f27; op2:f14; dest:f19; op1val:0x7f00001a; op2val:0xff800000; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f19, f27, f14, 0x0, 0, x16, 72, x17, x15, 72, x18)

inst_10:
// rs1==f16, rs2==f6, rd==f29, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000052 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f16; op2:f6; dest:f29; op1val:0x7f000052; op2val:0xff800000; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f29, f16, f6, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_11:
// rs1==f20, rs2==f23, rd==f30, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000040 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f20; op2:f23; dest:f30; op1val:0x7f000040; op2val:0xff800000; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f30, f20, f23, 0x0, 0, x16, 88, x17, x15, 88, x18)

inst_12:
// rs1==f28, rs2==f4, rd==f20, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000057 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f28; op2:f4; dest:f20; op1val:0x7f000057; op2val:0xff800000; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f20, f28, f4, 0x0, 0, x16, 96, x17, x15, 96, x18)

inst_13:
// rs1==f3, rs2==f18, rd==f8, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000043 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f3; op2:f18; dest:f8; op1val:0x7f000043; op2val:0xff800000; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f8, f3, f18, 0x0, 0, x16, 104, x17, x15, 104, x18)

inst_14:
// rs1==f17, rs2==f10, rd==f28, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000058 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f17; op2:f10; dest:f28; op1val:0x7f000058; op2val:0xff800000; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f28, f17, f10, 0x0, 0, x16, 112, x17, x15, 112, x18)

inst_15:
// rs1==f15, rs2==f31, rd==f9, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000034 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f15; op2:f31; dest:f9; op1val:0x7f000034; op2val:0xff800000; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f9, f15, f31, 0x0, 0, x16, 120, x17, x15, 120, x18)

inst_16:
// rs1==f1, rs2==f20, rd==f3, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00004d and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f1; op2:f20; dest:f3; op1val:0x7f00004d; op2val:0xff800000; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f3, f1, f20, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_17:
// rs1==f8, rs2==f5, rd==f26, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000014 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f8; op2:f5; dest:f26; op1val:0x7f000014; op2val:0xff800000; valaddr_reg:x16; val_offset:136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f26, f8, f5, 0x0, 0, x16, 136, x17, x15, 136, x18)

inst_18:
// rs1==f13, rs2==f25, rd==f18, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00002f and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f13; op2:f25; dest:f18; op1val:0x7f00002f; op2val:0xff800000; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f18, f13, f25, 0x0, 0, x16, 144, x17, x15, 144, x18)

inst_19:
// rs1==f7, rs2==f27, rd==f17, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00003b and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f7; op2:f27; dest:f17; op1val:0x7f00003b; op2val:0xff800000; valaddr_reg:x16; val_offset:152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f17, f7, f27, 0x0, 0, x16, 152, x17, x15, 152, x18)

inst_20:
// rs1==f5, rs2==f7, rd==f0, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00000e and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f5; op2:f7; dest:f0; op1val:0x7f00000e; op2val:0xff800000; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f0, f5, f7, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_21:
// rs1==f12, rs2==f29, rd==f15, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000050 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f12; op2:f29; dest:f15; op1val:0x7f000050; op2val:0xff800000; valaddr_reg:x16; val_offset:168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f15, f12, f29, 0x0, 0, x16, 168, x17, x15, 168, x18)

inst_22:
// rs1==f23, rs2==f28, rd==f10, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000006 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f23; op2:f28; dest:f10; op1val:0x7f000006; op2val:0xff800000; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f10, f23, f28, 0x0, 0, x16, 176, x17, x15, 176, x18)

inst_23:
// rs1==f4, rs2==f30, rd==f25, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00001b and fs2 == 0 and fe2 == 0xfc and fm2 == 0x7fff90 and rm_val == 0  
// opcode: fadd.s ; op1:f4; op2:f30; dest:f25; op1val:0x7f00001b; op2val:0x7e7fff90; valaddr_reg:x16; val_offset:184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f25, f4, f30, 0x0, 0, x16, 184, x17, x15, 184, x18)

inst_24:
// rs1==f22, rs2==f1, rd==f16, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000033 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3fff98 and rm_val == 0  
// opcode: fadd.s ; op1:f22; op2:f1; dest:f16; op1val:0x7f000033; op2val:0x7ebfff98; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f16, f22, f1, 0x0, 0, x16, 192, x17, x15, 192, x18)

inst_25:
// rs1==f24, rs2==f17, rd==f1, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000010 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5fffde and rm_val == 0  
// opcode: fadd.s ; op1:f24; op2:f17; dest:f1; op1val:0x7f000010; op2val:0x7edfffde; valaddr_reg:x16; val_offset:200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f1, f24, f17, 0x0, 0, x16, 200, x17, x15, 200, x18)

inst_26:
// rs1==f9, rs2==f13, rd==f31, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000057 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x6fff50 and rm_val == 0  
// opcode: fadd.s ; op1:f9; op2:f13; dest:f31; op1val:0x7f000057; op2val:0x7eefff50; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f31, f9, f13, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_27:
// rs1==f25, rs2==f26, rd==f24, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00003a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x77ff8a and rm_val == 0  
// opcode: fadd.s ; op1:f25; op2:f26; dest:f24; op1val:0x7f00003a; op2val:0x7ef7ff8a; valaddr_reg:x16; val_offset:216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f24, f25, f26, 0x0, 0, x16, 216, x17, x15, 216, x18)

inst_28:
// rs1==f31, rs2==f11, rd==f14, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000004 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7bfff6 and rm_val == 0  
// opcode: fadd.s ; op1:f31; op2:f11; dest:f14; op1val:0x7f000004; op2val:0x7efbfff6; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f14, f31, f11, 0x0, 0, x16, 224, x17, x15, 224, x18)

inst_29:
// rs1==f14, rs2==f8, rd==f7, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000009 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7dffec and rm_val == 0  
// opcode: fadd.s ; op1:f14; op2:f8; dest:f7; op1val:0x7f000009; op2val:0x7efdffec; valaddr_reg:x16; val_offset:232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f7, f14, f8, 0x0, 0, x16, 232, x17, x15, 232, x18)

inst_30:
// rs1==f29, rs2==f16, rd==f2, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00002e and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7effa2 and rm_val == 0  
// opcode: fadd.s ; op1:f29; op2:f16; dest:f2; op1val:0x7f00002e; op2val:0x7efeffa2; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f2, f29, f16, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_31:
// rs1==f19, rs2==f15, rd==f11, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000038 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7f7f8e and rm_val == 0  
// opcode: fadd.s ; op1:f19; op2:f15; dest:f11; op1val:0x7f000038; op2val:0x7eff7f8e; valaddr_reg:x16; val_offset:248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f11, f19, f15, 0x0, 0, x16, 248, x17, x15, 248, x18)

inst_32:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00004b and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7fbf68 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f00004b; op2val:0x7effbf68; valaddr_reg:x16; val_offset:256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 256, x17, x15, 256, x18)

inst_33:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00001d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7fdfc4 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f00001d; op2val:0x7effdfc4; valaddr_reg:x16; val_offset:264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 264, x17, x15, 264, x18)

inst_34:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00000b and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7fefe8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f00000b; op2val:0x7effefe8; valaddr_reg:x16; val_offset:272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 272, x17, x15, 272, x18)

inst_35:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00001c and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7ff7c6 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f00001c; op2val:0x7efff7c6; valaddr_reg:x16; val_offset:280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 280, x17, x15, 280, x18)

inst_36:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00005c and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7ffb46 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f00005c; op2val:0x7efffb46; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_37:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00003f and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7ffd80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f00003f; op2val:0x7efffd80; valaddr_reg:x16; val_offset:296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 296, x17, x15, 296, x18)

inst_38:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000026 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7ffeb2 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f000026; op2val:0x7efffeb2; valaddr_reg:x16; val_offset:304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 304, x17, x15, 304, x18)

inst_39:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000048 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7ffeee and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f000048; op2val:0x7efffeee; valaddr_reg:x16; val_offset:312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 312, x17, x15, 312, x18)

inst_40:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00000d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7fffa4 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f00000d; op2val:0x7effffa4; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_41:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000032 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7fff7a and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f000032; op2val:0x7effff7a; valaddr_reg:x16; val_offset:328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 328, x17, x15, 328, x18)

inst_42:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00001d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7fffb4 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f00001d; op2val:0x7effffb4; valaddr_reg:x16; val_offset:336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 336, x17, x15, 336, x18)

inst_43:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00001a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7fffc2 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f00001a; op2val:0x7effffc2; valaddr_reg:x16; val_offset:344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 344, x17, x15, 344, x18)

inst_44:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000009 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7fffe8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f000009; op2val:0x7effffe8; valaddr_reg:x16; val_offset:352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 352, x17, x15, 352, x18)

inst_45:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000052 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7fff58 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f000052; op2val:0x7effff58; valaddr_reg:x16; val_offset:360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 360, x17, x15, 360, x18)

inst_46:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000049 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x200024 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800049; op2val:0x81200024; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_47:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000016 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10000b and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800016; op2val:0x8110000b; valaddr_reg:x16; val_offset:376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 376, x17, x15, 376, x18)

inst_48:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000058 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x08002c and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800058; op2val:0x8108002c; valaddr_reg:x16; val_offset:384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 384, x17, x15, 384, x18)

inst_49:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00002b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x040016 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80002b; op2val:0x81040016; valaddr_reg:x16; val_offset:392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 392, x17, x15, 392, x18)

inst_50:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000005 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x020002 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800005; op2val:0x81020002; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_51:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000040 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x010020 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800040; op2val:0x81010020; valaddr_reg:x16; val_offset:408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 408, x17, x15, 408, x18)

inst_52:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00000f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x008008 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000f; op2val:0x81008008; valaddr_reg:x16; val_offset:416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 416, x17, x15, 416, x18)

inst_53:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000010 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x004008 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800010; op2val:0x81004008; valaddr_reg:x16; val_offset:424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 424, x17, x15, 424, x18)

inst_54:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00002c and fs2 == 1 and fe2 == 0x02 and fm2 == 0x002016 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80002c; op2val:0x81002016; valaddr_reg:x16; val_offset:432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 432, x17, x15, 432, x18)

inst_55:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00003e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x00101f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80003e; op2val:0x8100101f; valaddr_reg:x16; val_offset:440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 440, x17, x15, 440, x18)

inst_56:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00000d and fs2 == 1 and fe2 == 0x02 and fm2 == 0x000806 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000d; op2val:0x81000806; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_57:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000036 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x00041b and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800036; op2val:0x8100041b; valaddr_reg:x16; val_offset:456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 456, x17, x15, 456, x18)

inst_58:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00002b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x000216 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80002b; op2val:0x81000216; valaddr_reg:x16; val_offset:464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 464, x17, x15, 464, x18)

inst_59:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000027 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x000114 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800027; op2val:0x81000114; valaddr_reg:x16; val_offset:472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 472, x17, x15, 472, x18)

inst_60:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00005e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0000af and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80005e; op2val:0x810000af; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_61:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000017 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x00004c and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800017; op2val:0x8100004c; valaddr_reg:x16; val_offset:488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 488, x17, x15, 488, x18)

inst_62:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000007 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x000024 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800007; op2val:0x81000024; valaddr_reg:x16; val_offset:496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 496, x17, x15, 496, x18)

inst_63:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00005e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80005e; op2val:0x8100003f; valaddr_reg:x16; val_offset:504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 504, x17, x15, 504, x18)

inst_64:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00000f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x000010 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000f; op2val:0x81000010; valaddr_reg:x16; val_offset:512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 512, x17, x15, 512, x18)

inst_65:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000011 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x00000c and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800011; op2val:0x8100000c; valaddr_reg:x16; val_offset:520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 520, x17, x15, 520, x18)

inst_66:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000033 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x00001c and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800033; op2val:0x8100001c; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_67:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000026 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x000014 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800026; op2val:0x81000014; valaddr_reg:x16; val_offset:536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 536, x17, x15, 536, x18)

inst_68:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000014 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x00000a and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800014; op2val:0x8100000a; valaddr_reg:x16; val_offset:544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 544, x17, x15, 544, x18)

inst_69:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000023 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fffdd and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800023; op2val:0x3fffdd; valaddr_reg:x16; val_offset:552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 552, x17, x15, 552, x18)

inst_70:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000005 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x1ffffb and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800005; op2val:0x1ffffb; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_71:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00002c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0fffd4 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80002c; op2val:0xfffd4; valaddr_reg:x16; val_offset:568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 568, x17, x15, 568, x18)

inst_72:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00005c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x07ffa4 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80005c; op2val:0x7ffa4; valaddr_reg:x16; val_offset:576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 576, x17, x15, 576, x18)

inst_73:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00002c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x03ffd4 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80002c; op2val:0x3ffd4; valaddr_reg:x16; val_offset:584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 584, x17, x15, 584, x18)

inst_74:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000023 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x01ffdd and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800023; op2val:0x1ffdd; valaddr_reg:x16; val_offset:592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 592, x17, x15, 592, x18)

inst_75:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000012 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00ffee and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800012; op2val:0xffee; valaddr_reg:x16; val_offset:600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 600, x17, x15, 600, x18)

inst_76:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000026 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x007fda and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800026; op2val:0x7fda; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 608, x17, x15, 608, x18)

inst_77:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000031 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x003fcf and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800031; op2val:0x3fcf; valaddr_reg:x16; val_offset:616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 616, x17, x15, 616, x18)

inst_78:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000017 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x001fe9 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800017; op2val:0x1fe9; valaddr_reg:x16; val_offset:624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 624, x17, x15, 624, x18)

inst_79:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000030 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000fd0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800030; op2val:0xfd0; valaddr_reg:x16; val_offset:632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 632, x17, x15, 632, x18)

inst_80:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000052 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0007ae and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800052; op2val:0x7ae; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_81:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000053 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0003ad and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800053; op2val:0x3ad; valaddr_reg:x16; val_offset:648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 648, x17, x15, 648, x18)

inst_82:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000040 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0001c0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800040; op2val:0x1c0; valaddr_reg:x16; val_offset:656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 656, x17, x15, 656, x18)

inst_83:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00004e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0000b2 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80004e; op2val:0xb2; valaddr_reg:x16; val_offset:664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 664, x17, x15, 664, x18)

inst_84:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000060 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000020 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800060; op2val:0x20; valaddr_reg:x16; val_offset:672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 672, x17, x15, 672, x18)

inst_85:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000009 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800049; op2val:0x80000009; valaddr_reg:x16; val_offset:680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 680, x17, x15, 680, x18)

inst_86:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000029 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000009 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800029; op2val:0x80000009; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 688, x17, x15, 688, x18)

inst_87:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000012 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800022; op2val:0x80000012; valaddr_reg:x16; val_offset:696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 696, x17, x15, 696, x18)

inst_88:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00001b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000013 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80001b; op2val:0x80000013; valaddr_reg:x16; val_offset:704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 704, x17, x15, 704, x18)

inst_89:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000002 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800006; op2val:0x80000002; valaddr_reg:x16; val_offset:712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 712, x17, x15, 712, x18)

inst_90:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000024 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000022 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x800024; op2val:0x80000022; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_91:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00000f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00000e and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x80000f; op2val:0x8000000e; valaddr_reg:x16; val_offset:728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 728, x17, x15, 728, x18)

inst_92:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000053 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x400052 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x53; op2val:0x80400052; valaddr_reg:x16; val_offset:736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 736, x17, x15, 736, x18)

inst_93:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000043 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x600042 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x43; op2val:0x80600042; valaddr_reg:x16; val_offset:744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 744, x17, x15, 744, x18)

inst_94:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000012 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x700011 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x12; op2val:0x80700011; valaddr_reg:x16; val_offset:752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 752, x17, x15, 752, x18)

inst_95:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x78000e and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xf; op2val:0x8078000e; valaddr_reg:x16; val_offset:760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 760, x17, x15, 760, x18)

inst_96:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000024 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7c0023 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x24; op2val:0x807c0023; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 768, x17, x15, 768, x18)

inst_97:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e000a and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xb; op2val:0x807e000a; valaddr_reg:x16; val_offset:776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 776, x17, x15, 776, x18)

inst_98:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f0032 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x33; op2val:0x807f0032; valaddr_reg:x16; val_offset:784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 784, x17, x15, 784, x18)

inst_99:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f800c and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xd; op2val:0x807f800c; valaddr_reg:x16; val_offset:792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 792, x17, x15, 792, x18)

inst_100:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000059 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fc058 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x59; op2val:0x807fc058; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_101:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000027 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fe026 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x27; op2val:0x807fe026; valaddr_reg:x16; val_offset:808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 808, x17, x15, 808, x18)

inst_102:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000054 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ff053 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54; op2val:0x807ff053; valaddr_reg:x16; val_offset:816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 816, x17, x15, 816, x18)

inst_103:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000010 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ff80f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x10; op2val:0x807ff80f; valaddr_reg:x16; val_offset:824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 824, x17, x15, 824, x18)

inst_104:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffc0c and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xd; op2val:0x807ffc0c; valaddr_reg:x16; val_offset:832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 832, x17, x15, 832, x18)

inst_105:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000044 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffe43 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x44; op2val:0x807ffe43; valaddr_reg:x16; val_offset:840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 840, x17, x15, 840, x18)

inst_106:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fff00 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x807fff00; valaddr_reg:x16; val_offset:848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 848, x17, x15, 848, x18)

inst_107:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffdb and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x5c; op2val:0x807fffdb; valaddr_reg:x16; val_offset:856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 856, x17, x15, 856, x18)

inst_108:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffdb and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1c; op2val:0x807fffdb; valaddr_reg:x16; val_offset:864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 864, x17, x15, 864, x18)

inst_109:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000029 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000008 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x29; op2val:0x80800008; valaddr_reg:x16; val_offset:872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 872, x17, x15, 872, x18)

inst_110:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000057 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000046 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x57; op2val:0x80800046; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 880, x17, x15, 880, x18)

inst_111:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000002 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffff9 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x2; op2val:0x807ffff9; valaddr_reg:x16; val_offset:888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 888, x17, x15, 888, x18)

inst_112:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000058 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x5d; op2val:0x80800058; valaddr_reg:x16; val_offset:896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 896, x17, x15, 896, x18)

inst_113:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000052 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x00004f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x52; op2val:0x8080004f; valaddr_reg:x16; val_offset:904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 904, x17, x15, 904, x18)

inst_114:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000019 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000017 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x19; op2val:0x80800017; valaddr_reg:x16; val_offset:912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 912, x17, x15, 912, x18)

inst_115:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000007 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ffff8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7; op2val:0x3ffff8; valaddr_reg:x16; val_offset:920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 920, x17, x15, 920, x18)

inst_116:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000028 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5fffd7 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x28; op2val:0x5fffd7; valaddr_reg:x16; val_offset:928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 928, x17, x15, 928, x18)

inst_117:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000040 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6fffbf and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x40; op2val:0x6fffbf; valaddr_reg:x16; val_offset:936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 936, x17, x15, 936, x18)

inst_118:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x77fffe and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x77fffe; valaddr_reg:x16; val_offset:944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 944, x17, x15, 944, x18)

inst_119:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7bffb1 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x4e; op2val:0x7bffb1; valaddr_reg:x16; val_offset:952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 952, x17, x15, 952, x18)

inst_120:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7dffc0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f; op2val:0x7dffc0; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 960, x17, x15, 960, x18)

inst_121:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7effc5 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3a; op2val:0x7effc5; valaddr_reg:x16; val_offset:968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 968, x17, x15, 968, x18)

inst_122:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f7fa5 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x5a; op2val:0x7f7fa5; valaddr_reg:x16; val_offset:976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 976, x17, x15, 976, x18)

inst_123:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000009 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fbff6 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x9; op2val:0x7fbff6; valaddr_reg:x16; val_offset:984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 984, x17, x15, 984, x18)

inst_124:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000016 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fdfe9 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x16; op2val:0x7fdfe9; valaddr_reg:x16; val_offset:992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 992, x17, x15, 992, x18)

inst_125:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fefa4 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x5b; op2val:0x7fefa4; valaddr_reg:x16; val_offset:1000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1000, x17, x15, 1000, x18)

inst_126:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000063 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ff79c and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x63; op2val:0x7ff79c; valaddr_reg:x16; val_offset:1008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1008, x17, x15, 1008, x18)

inst_127:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000049 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ffbb6 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x49; op2val:0x7ffbb6; valaddr_reg:x16; val_offset:1016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1016, x17, x15, 1016, x18)

inst_128:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000034 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ffdcb and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x34; op2val:0x7ffdcb; valaddr_reg:x16; val_offset:1024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1024, x17, x15, 1024, x18)

inst_129:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000036 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ffec9 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x36; op2val:0x7ffec9; valaddr_reg:x16; val_offset:1032; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1032, x17, x15, 1032, x18)

inst_130:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000057 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fff28 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x57; op2val:0x7fff28; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1040, x17, x15, 1040, x18)

inst_131:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000031 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fff8e and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x31; op2val:0x7fff8e; valaddr_reg:x16; val_offset:1048; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1048, x17, x15, 1048, x18)

inst_132:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000052 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fff8d and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x52; op2val:0x7fff8d; valaddr_reg:x16; val_offset:1056; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1056, x17, x15, 1056, x18)

inst_133:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffd0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1f; op2val:0x7fffd0; valaddr_reg:x16; val_offset:1064; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1064, x17, x15, 1064, x18)

inst_134:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffcc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x2b; op2val:0x7fffcc; valaddr_reg:x16; val_offset:1072; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1072, x17, x15, 1072, x18)

inst_135:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000019 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffe2 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x19; op2val:0x7fffe2; valaddr_reg:x16; val_offset:1080; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1080, x17, x15, 1080, x18)

inst_136:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ffffc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x7ffffc; valaddr_reg:x16; val_offset:1088; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1088, x17, x15, 1088, x18)

inst_137:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000054 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffaa and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54; op2val:0x7fffaa; valaddr_reg:x16; val_offset:1096; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1096, x17, x15, 1096, x18)

inst_138:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000060 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x400061 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x60; op2val:0x80400061; valaddr_reg:x16; val_offset:1104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1104, x17, x15, 1104, x18)

inst_139:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000028 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x200029 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x28; op2val:0x80200029; valaddr_reg:x16; val_offset:1112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1112, x17, x15, 1112, x18)

inst_140:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000011 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x100012 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x11; op2val:0x80100012; valaddr_reg:x16; val_offset:1120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1120, x17, x15, 1120, x18)

inst_141:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000052 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x080053 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x52; op2val:0x80080053; valaddr_reg:x16; val_offset:1128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1128, x17, x15, 1128, x18)

inst_142:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x04002f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x2e; op2val:0x8004002f; valaddr_reg:x16; val_offset:1136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1136, x17, x15, 1136, x18)

inst_143:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000025 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x020026 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x25; op2val:0x80020026; valaddr_reg:x16; val_offset:1144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1144, x17, x15, 1144, x18)

inst_144:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x01002f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x2e; op2val:0x8001002f; valaddr_reg:x16; val_offset:1152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1152, x17, x15, 1152, x18)

inst_145:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000062 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x008063 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x62; op2val:0x80008063; valaddr_reg:x16; val_offset:1160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1160, x17, x15, 1160, x18)

inst_146:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000012 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x004013 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x12; op2val:0x80004013; valaddr_reg:x16; val_offset:1168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1168, x17, x15, 1168, x18)

inst_147:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000046 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x002047 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x46; op2val:0x80002047; valaddr_reg:x16; val_offset:1176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1176, x17, x15, 1176, x18)

inst_148:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x001060 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x5f; op2val:0x80001060; valaddr_reg:x16; val_offset:1184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1184, x17, x15, 1184, x18)

inst_149:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00080c and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xb; op2val:0x8000080c; valaddr_reg:x16; val_offset:1192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1192, x17, x15, 1192, x18)

inst_150:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00043c and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3b; op2val:0x8000043c; valaddr_reg:x16; val_offset:1200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1200, x17, x15, 1200, x18)

inst_151:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000059 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00025a and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x59; op2val:0x8000025a; valaddr_reg:x16; val_offset:1208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1208, x17, x15, 1208, x18)

inst_152:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000014 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000115 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x14; op2val:0x80000115; valaddr_reg:x16; val_offset:1216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1216, x17, x15, 1216, x18)

inst_153:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000055 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0000d6 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x55; op2val:0x800000d6; valaddr_reg:x16; val_offset:1224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1224, x17, x15, 1224, x18)

inst_154:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00006f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x2e; op2val:0x8000006f; valaddr_reg:x16; val_offset:1232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1232, x17, x15, 1232, x18)

inst_155:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000028 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000049 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x28; op2val:0x80000049; valaddr_reg:x16; val_offset:1240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1240, x17, x15, 1240, x18)

inst_156:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00005a and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x49; op2val:0x8000005a; valaddr_reg:x16; val_offset:1248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1248, x17, x15, 1248, x18)

inst_157:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000058 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000061 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x58; op2val:0x80000061; valaddr_reg:x16; val_offset:1256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1256, x17, x15, 1256, x18)

inst_158:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000002 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000007 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x2; op2val:0x80000007; valaddr_reg:x16; val_offset:1264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1264, x17, x15, 1264, x18)

inst_159:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000056 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000059 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x56; op2val:0x80000059; valaddr_reg:x16; val_offset:1272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1272, x17, x15, 1272, x18)

inst_160:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00004e and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x4d; op2val:0x8000004e; valaddr_reg:x16; val_offset:1280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1280, x17, x15, 1280, x18)

inst_161:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000021 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fffe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x21; op2val:0x3fffe0; valaddr_reg:x16; val_offset:1288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1288, x17, x15, 1288, x18)

inst_162:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x1fffd5 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x2c; op2val:0x1fffd5; valaddr_reg:x16; val_offset:1296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1296, x17, x15, 1296, x18)

inst_163:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000015 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0fffec and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x15; op2val:0xfffec; valaddr_reg:x16; val_offset:1304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1304, x17, x15, 1304, x18)

inst_164:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000008 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x07fff9 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x8; op2val:0x7fff9; valaddr_reg:x16; val_offset:1312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1312, x17, x15, 1312, x18)

inst_165:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x03ffe6 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1b; op2val:0x3ffe6; valaddr_reg:x16; val_offset:1320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1320, x17, x15, 1320, x18)

inst_166:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x01ffa7 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x5a; op2val:0x1ffa7; valaddr_reg:x16; val_offset:1328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1328, x17, x15, 1328, x18)

inst_167:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000049 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00ffb8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x49; op2val:0xffb8; valaddr_reg:x16; val_offset:1336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1336, x17, x15, 1336, x18)

inst_168:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x007fa3 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x5e; op2val:0x7fa3; valaddr_reg:x16; val_offset:1344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1344, x17, x15, 1344, x18)

inst_169:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000022 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x003fdf and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x22; op2val:0x3fdf; valaddr_reg:x16; val_offset:1352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1352, x17, x15, 1352, x18)

inst_170:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000033 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x001fce and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x33; op2val:0x1fce; valaddr_reg:x16; val_offset:1360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1360, x17, x15, 1360, x18)

inst_171:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000ff4 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xd; op2val:0xff4; valaddr_reg:x16; val_offset:1368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1368, x17, x15, 1368, x18)

inst_172:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0007fb and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x6; op2val:0x7fb; valaddr_reg:x16; val_offset:1376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1376, x17, x15, 1376, x18)

inst_173:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000041 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0003c0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x41; op2val:0x3c0; valaddr_reg:x16; val_offset:1384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1384, x17, x15, 1384, x18)

inst_174:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000018 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0001e9 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x18; op2val:0x1e9; valaddr_reg:x16; val_offset:1392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1392, x17, x15, 1392, x18)

inst_175:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0000d4 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x2d; op2val:0xd4; valaddr_reg:x16; val_offset:1400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1400, x17, x15, 1400, x18)

inst_176:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000053 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00002e and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x53; op2val:0x2e; valaddr_reg:x16; val_offset:1408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1408, x17, x15, 1408, x18)

inst_177:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000024 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1d; op2val:0x24; valaddr_reg:x16; val_offset:1416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1416, x17, x15, 1416, x18)

inst_178:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x22; op2val:0x80000001; valaddr_reg:x16; val_offset:1424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1424, x17, x15, 1424, x18)

inst_179:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000050 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00003f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x50; op2val:0x8000003f; valaddr_reg:x16; val_offset:1432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1432, x17, x15, 1432, x18)

inst_180:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000046 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00003d and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x46; op2val:0x8000003d; valaddr_reg:x16; val_offset:1440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1440, x17, x15, 1440, x18)

inst_181:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000057 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000052 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x57; op2val:0x80000052; valaddr_reg:x16; val_offset:1448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1448, x17, x15, 1448, x18)

inst_182:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00005b and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x5e; op2val:0x8000005b; valaddr_reg:x16; val_offset:1456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1456, x17, x15, 1456, x18)

inst_183:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00003d and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e; op2val:0x8000003d; valaddr_reg:x16; val_offset:1464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1464, x17, x15, 1464, x18)

inst_184:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00005c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x20002e and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80005c; op2val:0xc020002e; valaddr_reg:x16; val_offset:1472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1472, x17, x15, 1472, x18)

inst_185:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000019 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x10000c and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800019; op2val:0xc010000c; valaddr_reg:x16; val_offset:1480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1480, x17, x15, 1480, x18)

inst_186:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00004e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x080027 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80004e; op2val:0xc0080027; valaddr_reg:x16; val_offset:1488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1488, x17, x15, 1488, x18)

inst_187:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00000f and fs2 == 1 and fe2 == 0x80 and fm2 == 0x040008 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80000f; op2val:0xc0040008; valaddr_reg:x16; val_offset:1496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1496, x17, x15, 1496, x18)

inst_188:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00000c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x020006 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80000c; op2val:0xc0020006; valaddr_reg:x16; val_offset:1504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1504, x17, x15, 1504, x18)

inst_189:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000010 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x010008 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800010; op2val:0xc0010008; valaddr_reg:x16; val_offset:1512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1512, x17, x15, 1512, x18)

inst_190:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00004e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x008027 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80004e; op2val:0xc0008027; valaddr_reg:x16; val_offset:1520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1520, x17, x15, 1520, x18)

inst_191:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000052 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x004029 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800052; op2val:0xc0004029; valaddr_reg:x16; val_offset:1528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1528, x17, x15, 1528, x18)

inst_192:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000004 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x002002 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800004; op2val:0xc0002002; valaddr_reg:x16; val_offset:1536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1536, x17, x15, 1536, x18)

inst_193:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000058 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00102c and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800058; op2val:0xc000102c; valaddr_reg:x16; val_offset:1544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1544, x17, x15, 1544, x18)

inst_194:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000045 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000822 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800045; op2val:0xc0000822; valaddr_reg:x16; val_offset:1552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1552, x17, x15, 1552, x18)

inst_195:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00004a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000425 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80004a; op2val:0xc0000425; valaddr_reg:x16; val_offset:1560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1560, x17, x15, 1560, x18)

inst_196:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00001d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00020e and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80001d; op2val:0xc000020e; valaddr_reg:x16; val_offset:1568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1568, x17, x15, 1568, x18)

inst_197:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00010a and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800013; op2val:0xc000010a; valaddr_reg:x16; val_offset:1576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1576, x17, x15, 1576, x18)

inst_198:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000008 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000084 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800008; op2val:0xc0000084; valaddr_reg:x16; val_offset:1584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1584, x17, x15, 1584, x18)

inst_199:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00002b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000056 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80002b; op2val:0xc0000056; valaddr_reg:x16; val_offset:1592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1592, x17, x15, 1592, x18)

inst_200:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000030 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000038 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800030; op2val:0xc0000038; valaddr_reg:x16; val_offset:1600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1600, x17, x15, 1600, x18)

inst_201:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00005b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00003e and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80005b; op2val:0xc000003e; valaddr_reg:x16; val_offset:1608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1608, x17, x15, 1608, x18)

inst_202:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000023 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00001a and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800023; op2val:0xc000001a; valaddr_reg:x16; val_offset:1616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1616, x17, x15, 1616, x18)

inst_203:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000003 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000006 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800003; op2val:0xc0000006; valaddr_reg:x16; val_offset:1624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1624, x17, x15, 1624, x18)

inst_204:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000019 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00000e and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800019; op2val:0xc000000e; valaddr_reg:x16; val_offset:1632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1632, x17, x15, 1632, x18)

inst_205:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000051 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00002a and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800051; op2val:0xc000002a; valaddr_reg:x16; val_offset:1640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1640, x17, x15, 1640, x18)

inst_206:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000020 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80003f; op2val:0xc0000020; valaddr_reg:x16; val_offset:1648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1648, x17, x15, 1648, x18)

inst_207:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00004f and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7ffec4 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80004f; op2val:0x3efffec4; valaddr_reg:x16; val_offset:1656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1656, x17, x15, 1656, x18)

inst_208:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00000b and fs2 == 0 and fe2 == 0x7c and fm2 == 0x7fffa8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80000b; op2val:0x3e7fffa8; valaddr_reg:x16; val_offset:1664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1664, x17, x15, 1664, x18)

inst_209:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00005a and fs2 == 0 and fe2 == 0x7b and fm2 == 0x7ffa60 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80005a; op2val:0x3dfffa60; valaddr_reg:x16; val_offset:1672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1672, x17, x15, 1672, x18)

inst_210:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000055 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x7ff560 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800055; op2val:0x3d7ff560; valaddr_reg:x16; val_offset:1680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1680, x17, x15, 1680, x18)

inst_211:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00003a and fs2 == 0 and fe2 == 0x79 and fm2 == 0x7ff180 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80003a; op2val:0x3cfff180; valaddr_reg:x16; val_offset:1688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1688, x17, x15, 1688, x18)

inst_212:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00004b and fs2 == 0 and fe2 == 0x78 and fm2 == 0x7fda80 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80004b; op2val:0x3c7fda80; valaddr_reg:x16; val_offset:1696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1696, x17, x15, 1696, x18)

inst_213:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00004c and fs2 == 0 and fe2 == 0x77 and fm2 == 0x7fb400 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80004c; op2val:0x3bffb400; valaddr_reg:x16; val_offset:1704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1704, x17, x15, 1704, x18)

inst_214:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00001c and fs2 == 0 and fe2 == 0x76 and fm2 == 0x7fc800 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80001c; op2val:0x3b7fc800; valaddr_reg:x16; val_offset:1712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1712, x17, x15, 1712, x18)

inst_215:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000043 and fs2 == 0 and fe2 == 0x75 and fm2 == 0x7ef400 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800043; op2val:0x3afef400; valaddr_reg:x16; val_offset:1720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1720, x17, x15, 1720, x18)

inst_216:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000044 and fs2 == 0 and fe2 == 0x74 and fm2 == 0x7de000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800044; op2val:0x3a7de000; valaddr_reg:x16; val_offset:1728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1728, x17, x15, 1728, x18)

inst_217:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000033 and fs2 == 0 and fe2 == 0x73 and fm2 == 0x7cd000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800033; op2val:0x39fcd000; valaddr_reg:x16; val_offset:1736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1736, x17, x15, 1736, x18)

inst_218:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000046 and fs2 == 0 and fe2 == 0x72 and fm2 == 0x774000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800046; op2val:0x39774000; valaddr_reg:x16; val_offset:1744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1744, x17, x15, 1744, x18)

inst_219:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00000b and fs2 == 0 and fe2 == 0x71 and fm2 == 0x7d4000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80000b; op2val:0x38fd4000; valaddr_reg:x16; val_offset:1752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1752, x17, x15, 1752, x18)

inst_220:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000014 and fs2 == 0 and fe2 == 0x70 and fm2 == 0x760000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800014; op2val:0x38760000; valaddr_reg:x16; val_offset:1760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1760, x17, x15, 1760, x18)

inst_221:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000061 and fs2 == 0 and fe2 == 0x6f and fm2 == 0x1f0000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800061; op2val:0x379f0000; valaddr_reg:x16; val_offset:1768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1768, x17, x15, 1768, x18)

inst_222:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00000c and fs2 == 0 and fe2 == 0x6e and fm2 == 0x680000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80000c; op2val:0x37680000; valaddr_reg:x16; val_offset:1776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1776, x17, x15, 1776, x18)

inst_223:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00003d and fs2 == 0 and fe2 == 0x69 and fm2 == 0x400000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80003d; op2val:0x34c00000; valaddr_reg:x16; val_offset:1784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1784, x17, x15, 1784, x18)

inst_224:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000055 and fs2 == 1 and fe2 == 0x6d and fm2 == 0x540000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800055; op2val:0xb6d40000; valaddr_reg:x16; val_offset:1792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1792, x17, x15, 1792, x18)

inst_225:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000005 and fs2 == 0 and fe2 == 0x6b and fm2 == 0x300000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800005; op2val:0x35b00000; valaddr_reg:x16; val_offset:1800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1800, x17, x15, 1800, x18)

inst_226:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000019 and fs2 == 1 and fe2 == 0x6c and fm2 == 0x080000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800019; op2val:0xb6080000; valaddr_reg:x16; val_offset:1808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1808, x17, x15, 1808, x18)

inst_227:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000026 and fs2 == 1 and fe2 == 0x6d and fm2 == 0x080000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800026; op2val:0xb6880000; valaddr_reg:x16; val_offset:1816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1816, x17, x15, 1816, x18)

inst_228:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00004a and fs2 == 1 and fe2 == 0x6e and fm2 == 0x100000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f80004a; op2val:0xb7100000; valaddr_reg:x16; val_offset:1824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1824, x17, x15, 1824, x18)

inst_229:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000032 and fs2 == 1 and fe2 == 0x6d and fm2 == 0x440000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f800032; op2val:0xb6c40000; valaddr_reg:x16; val_offset:1832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1832, x17, x15, 1832, x18)

inst_230:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40000c and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc; op2val:0x8040000c; valaddr_reg:x16; val_offset:1840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1840, x17, x15, 1840, x18)

inst_231:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000025 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x200025 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x25; op2val:0x80200025; valaddr_reg:x16; val_offset:1848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1848, x17, x15, 1848, x18)

inst_232:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000047 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x100047 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x47; op2val:0x80100047; valaddr_reg:x16; val_offset:1856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1856, x17, x15, 1856, x18)

inst_233:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x08001b and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1b; op2val:0x8008001b; valaddr_reg:x16; val_offset:1864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1864, x17, x15, 1864, x18)

inst_234:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x04002b and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x2b; op2val:0x8004002b; valaddr_reg:x16; val_offset:1872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1872, x17, x15, 1872, x18)

inst_235:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000010 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x020010 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x10; op2val:0x80020010; valaddr_reg:x16; val_offset:1880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1880, x17, x15, 1880, x18)

inst_236:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x010026 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x26; op2val:0x80010026; valaddr_reg:x16; val_offset:1888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1888, x17, x15, 1888, x18)

inst_237:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000027 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x008027 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x27; op2val:0x80008027; valaddr_reg:x16; val_offset:1896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1896, x17, x15, 1896, x18)

inst_238:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00403f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f; op2val:0x8000403f; valaddr_reg:x16; val_offset:1904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1904, x17, x15, 1904, x18)

inst_239:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000029 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x002029 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x29; op2val:0x80002029; valaddr_reg:x16; val_offset:1912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1912, x17, x15, 1912, x18)

inst_240:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00100c and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc; op2val:0x8000100c; valaddr_reg:x16; val_offset:1920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1920, x17, x15, 1920, x18)

inst_241:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000046 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000846 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x46; op2val:0x80000846; valaddr_reg:x16; val_offset:1928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1928, x17, x15, 1928, x18)

inst_242:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00041f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1f; op2val:0x8000041f; valaddr_reg:x16; val_offset:1936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1936, x17, x15, 1936, x18)

inst_243:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000249 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x49; op2val:0x80000249; valaddr_reg:x16; val_offset:1944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1944, x17, x15, 1944, x18)

inst_244:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000009 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000109 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x9; op2val:0x80000109; valaddr_reg:x16; val_offset:1952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1952, x17, x15, 1952, x18)

inst_245:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0000aa and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x2a; op2val:0x800000aa; valaddr_reg:x16; val_offset:1960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1960, x17, x15, 1960, x18)

inst_246:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000020 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000060 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x20; op2val:0x80000060; valaddr_reg:x16; val_offset:1968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1968, x17, x15, 1968, x18)

inst_247:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000040 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000060 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x40; op2val:0x80000060; valaddr_reg:x16; val_offset:1976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1976, x17, x15, 1976, x18)

inst_248:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000011 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1; op2val:0x80000011; valaddr_reg:x16; val_offset:1984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1984, x17, x15, 1984, x18)

inst_249:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000056 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00005e and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x56; op2val:0x8000005e; valaddr_reg:x16; val_offset:1992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1992, x17, x15, 1992, x18)

inst_250:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000034 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000038 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x34; op2val:0x80000038; valaddr_reg:x16; val_offset:2000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2000, x17, x15, 2000, x18)

inst_251:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00000e and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xc; op2val:0x8000000e; valaddr_reg:x16; val_offset:2008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2008, x17, x15, 2008, x18)

inst_252:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000047 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000048 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x47; op2val:0x80000048; valaddr_reg:x16; val_offset:2016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2016, x17, x15, 2016, x18)

inst_253:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000022 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fffde and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x22; op2val:0x3fffde; valaddr_reg:x16; val_offset:2024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_2)

inst_254:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000039 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x1fffc7 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x39; op2val:0x1fffc7; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_255:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000047 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0fffb9 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x47; op2val:0xfffb9; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 8, x17, x15, 8, x18)

inst_256:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000052 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x07ffae and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x52; op2val:0x7ffae; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 16, x17, x15, 16, x18)

inst_257:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000029 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x03ffd7 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x29; op2val:0x3ffd7; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 24, x17, x15, 24, x18)

inst_258:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x01ffd2 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x2e; op2val:0x1ffd2; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 32, x17, x15, 32, x18)

inst_259:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000048 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00ffb8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x48; op2val:0xffb8; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 40, x17, x15, 40, x18)

inst_260:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x007fd5 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x2b; op2val:0x7fd5; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_261:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x003ff6 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xa; op2val:0x3ff6; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 56, x17, x15, 56, x18)

inst_262:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x001ff3 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xd; op2val:0x1ff3; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 64, x17, x15, 64, x18)

inst_263:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000013 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000fed and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x13; op2val:0xfed; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 72, x17, x15, 72, x18)

inst_264:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0007a5 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x5b; op2val:0x7a5; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_265:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000021 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0003df and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x21; op2val:0x3df; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 88, x17, x15, 88, x18)

inst_266:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0001f3 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xd; op2val:0x1f3; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 96, x17, x15, 96, x18)

inst_267:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000012 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0000ee and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x12; op2val:0xee; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 104, x17, x15, 104, x18)

inst_268:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000012 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00006e and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x12; op2val:0x6e; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 112, x17, x15, 112, x18)

inst_269:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000024 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x1c; op2val:0x24; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 120, x17, x15, 120, x18)

inst_270:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00000e and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x2e; op2val:0x8000000e; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_271:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000027 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000017 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x27; op2val:0x80000017; valaddr_reg:x16; val_offset:136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 136, x17, x15, 136, x18)

inst_272:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000037 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f; op2val:0x80000037; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 144, x17, x15, 144, x18)

inst_273:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00001e and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x22; op2val:0x8000001e; valaddr_reg:x16; val_offset:152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 152, x17, x15, 152, x18)

inst_274:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000036 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000034 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x36; op2val:0x80000034; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_275:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000032 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000031 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x32; op2val:0x80000031; valaddr_reg:x16; val_offset:168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 168, x17, x15, 168, x18)

inst_276:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000005 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f000005; op2val:0xff800000; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 176, x17, x15, 176, x18)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
test_fp:
.word 0x32
.word 0x32
.word 0x7f000031
.word 0xff800000
.word 0x7f00004e
.word 0xff800000
.word 0x7f000013
.word 0xff800000
.word 0x7f000005
.word 0x7f000005
.word 0x7f000029
.word 0xff800000
.word 0x7f00005b
.word 0xff800000
.word 0x7f000002
.word 0xff800000
.word 0x7f00004f
.word 0xff800000
.word 0x7f00001a
.word 0xff800000
.word 0x7f000052
.word 0xff800000
.word 0x7f000040
.word 0xff800000
.word 0x7f000057
.word 0xff800000
.word 0x7f000043
.word 0xff800000
.word 0x7f000058
.word 0xff800000
.word 0x7f000034
.word 0xff800000
.word 0x7f00004d
.word 0xff800000
.word 0x7f000014
.word 0xff800000
.word 0x7f00002f
.word 0xff800000
.word 0x7f00003b
.word 0xff800000
.word 0x7f00000e
.word 0xff800000
.word 0x7f000050
.word 0xff800000
.word 0x7f000006
.word 0xff800000
.word 0x7f00001b
.word 0x7e7fff90
.word 0x7f000033
.word 0x7ebfff98
.word 0x7f000010
.word 0x7edfffde
.word 0x7f000057
.word 0x7eefff50
.word 0x7f00003a
.word 0x7ef7ff8a
.word 0x7f000004
.word 0x7efbfff6
.word 0x7f000009
.word 0x7efdffec
.word 0x7f00002e
.word 0x7efeffa2
.word 0x7f000038
.word 0x7eff7f8e
.word 0x7f00004b
.word 0x7effbf68
.word 0x7f00001d
.word 0x7effdfc4
.word 0x7f00000b
.word 0x7effefe8
.word 0x7f00001c
.word 0x7efff7c6
.word 0x7f00005c
.word 0x7efffb46
.word 0x7f00003f
.word 0x7efffd80
.word 0x7f000026
.word 0x7efffeb2
.word 0x7f000048
.word 0x7efffeee
.word 0x7f00000d
.word 0x7effffa4
.word 0x7f000032
.word 0x7effff7a
.word 0x7f00001d
.word 0x7effffb4
.word 0x7f00001a
.word 0x7effffc2
.word 0x7f000009
.word 0x7effffe8
.word 0x7f000052
.word 0x7effff58
.word 0x800049
.word 0x81200024
.word 0x800016
.word 0x8110000b
.word 0x800058
.word 0x8108002c
.word 0x80002b
.word 0x81040016
.word 0x800005
.word 0x81020002
.word 0x800040
.word 0x81010020
.word 0x80000f
.word 0x81008008
.word 0x800010
.word 0x81004008
.word 0x80002c
.word 0x81002016
.word 0x80003e
.word 0x8100101f
.word 0x80000d
.word 0x81000806
.word 0x800036
.word 0x8100041b
.word 0x80002b
.word 0x81000216
.word 0x800027
.word 0x81000114
.word 0x80005e
.word 0x810000af
.word 0x800017
.word 0x8100004c
.word 0x800007
.word 0x81000024
.word 0x80005e
.word 0x8100003f
.word 0x80000f
.word 0x81000010
.word 0x800011
.word 0x8100000c
.word 0x800033
.word 0x8100001c
.word 0x800026
.word 0x81000014
.word 0x800014
.word 0x8100000a
.word 0x800023
.word 0x3fffdd
.word 0x800005
.word 0x1ffffb
.word 0x80002c
.word 0xfffd4
.word 0x80005c
.word 0x7ffa4
.word 0x80002c
.word 0x3ffd4
.word 0x800023
.word 0x1ffdd
.word 0x800012
.word 0xffee
.word 0x800026
.word 0x7fda
.word 0x800031
.word 0x3fcf
.word 0x800017
.word 0x1fe9
.word 0x800030
.word 0xfd0
.word 0x800052
.word 0x7ae
.word 0x800053
.word 0x3ad
.word 0x800040
.word 0x1c0
.word 0x80004e
.word 0xb2
.word 0x800060
.word 0x20
.word 0x800049
.word 0x80000009
.word 0x800029
.word 0x80000009
.word 0x800022
.word 0x80000012
.word 0x80001b
.word 0x80000013
.word 0x800006
.word 0x80000002
.word 0x800024
.word 0x80000022
.word 0x80000f
.word 0x8000000e
.word 0x53
.word 0x80400052
.word 0x43
.word 0x80600042
.word 0x12
.word 0x80700011
.word 0xf
.word 0x8078000e
.word 0x24
.word 0x807c0023
.word 0xb
.word 0x807e000a
.word 0x33
.word 0x807f0032
.word 0xd
.word 0x807f800c
.word 0x59
.word 0x807fc058
.word 0x27
.word 0x807fe026
.word 0x54
.word 0x807ff053
.word 0x10
.word 0x807ff80f
.word 0xd
.word 0x807ffc0c
.word 0x44
.word 0x807ffe43
.word 0x1
.word 0x807fff00
.word 0x5c
.word 0x807fffdb
.word 0x1c
.word 0x807fffdb
.word 0x29
.word 0x80800008
.word 0x57
.word 0x80800046
.word 0x2
.word 0x807ffff9
.word 0x5d
.word 0x80800058
.word 0x52
.word 0x8080004f
.word 0x19
.word 0x80800017
.word 0x7
.word 0x3ffff8
.word 0x28
.word 0x5fffd7
.word 0x40
.word 0x6fffbf
.word 0x1
.word 0x77fffe
.word 0x4e
.word 0x7bffb1
.word 0x3f
.word 0x7dffc0
.word 0x3a
.word 0x7effc5
.word 0x5a
.word 0x7f7fa5
.word 0x9
.word 0x7fbff6
.word 0x16
.word 0x7fdfe9
.word 0x5b
.word 0x7fefa4
.word 0x63
.word 0x7ff79c
.word 0x49
.word 0x7ffbb6
.word 0x34
.word 0x7ffdcb
.word 0x36
.word 0x7ffec9
.word 0x57
.word 0x7fff28
.word 0x31
.word 0x7fff8e
.word 0x52
.word 0x7fff8d
.word 0x1f
.word 0x7fffd0
.word 0x2b
.word 0x7fffcc
.word 0x19
.word 0x7fffe2
.word 0x1
.word 0x7ffffc
.word 0x54
.word 0x7fffaa
.word 0x60
.word 0x80400061
.word 0x28
.word 0x80200029
.word 0x11
.word 0x80100012
.word 0x52
.word 0x80080053
.word 0x2e
.word 0x8004002f
.word 0x25
.word 0x80020026
.word 0x2e
.word 0x8001002f
.word 0x62
.word 0x80008063
.word 0x12
.word 0x80004013
.word 0x46
.word 0x80002047
.word 0x5f
.word 0x80001060
.word 0xb
.word 0x8000080c
.word 0x3b
.word 0x8000043c
.word 0x59
.word 0x8000025a
.word 0x14
.word 0x80000115
.word 0x55
.word 0x800000d6
.word 0x2e
.word 0x8000006f
.word 0x28
.word 0x80000049
.word 0x49
.word 0x8000005a
.word 0x58
.word 0x80000061
.word 0x2
.word 0x80000007
.word 0x56
.word 0x80000059
.word 0x4d
.word 0x8000004e
.word 0x21
.word 0x3fffe0
.word 0x2c
.word 0x1fffd5
.word 0x15
.word 0xfffec
.word 0x8
.word 0x7fff9
.word 0x1b
.word 0x3ffe6
.word 0x5a
.word 0x1ffa7
.word 0x49
.word 0xffb8
.word 0x5e
.word 0x7fa3
.word 0x22
.word 0x3fdf
.word 0x33
.word 0x1fce
.word 0xd
.word 0xff4
.word 0x6
.word 0x7fb
.word 0x41
.word 0x3c0
.word 0x18
.word 0x1e9
.word 0x2d
.word 0xd4
.word 0x53
.word 0x2e
.word 0x1d
.word 0x24
.word 0x22
.word 0x80000001
.word 0x50
.word 0x8000003f
.word 0x46
.word 0x8000003d
.word 0x57
.word 0x80000052
.word 0x5e
.word 0x8000005b
.word 0x3e
.word 0x8000003d
.word 0x3f80005c
.word 0xc020002e
.word 0x3f800019
.word 0xc010000c
.word 0x3f80004e
.word 0xc0080027
.word 0x3f80000f
.word 0xc0040008
.word 0x3f80000c
.word 0xc0020006
.word 0x3f800010
.word 0xc0010008
.word 0x3f80004e
.word 0xc0008027
.word 0x3f800052
.word 0xc0004029
.word 0x3f800004
.word 0xc0002002
.word 0x3f800058
.word 0xc000102c
.word 0x3f800045
.word 0xc0000822
.word 0x3f80004a
.word 0xc0000425
.word 0x3f80001d
.word 0xc000020e
.word 0x3f800013
.word 0xc000010a
.word 0x3f800008
.word 0xc0000084
.word 0x3f80002b
.word 0xc0000056
.word 0x3f800030
.word 0xc0000038
.word 0x3f80005b
.word 0xc000003e
.word 0x3f800023
.word 0xc000001a
.word 0x3f800003
.word 0xc0000006
.word 0x3f800019
.word 0xc000000e
.word 0x3f800051
.word 0xc000002a
.word 0x3f80003f
.word 0xc0000020
.word 0x3f80004f
.word 0x3efffec4
.word 0x3f80000b
.word 0x3e7fffa8
.word 0x3f80005a
.word 0x3dfffa60
.word 0x3f800055
.word 0x3d7ff560
.word 0x3f80003a
.word 0x3cfff180
.word 0x3f80004b
.word 0x3c7fda80
.word 0x3f80004c
.word 0x3bffb400
.word 0x3f80001c
.word 0x3b7fc800
.word 0x3f800043
.word 0x3afef400
.word 0x3f800044
.word 0x3a7de000
.word 0x3f800033
.word 0x39fcd000
.word 0x3f800046
.word 0x39774000
.word 0x3f80000b
.word 0x38fd4000
.word 0x3f800014
.word 0x38760000
.word 0x3f800061
.word 0x379f0000
.word 0x3f80000c
.word 0x37680000
.word 0x3f80003d
.word 0x34c00000
.word 0x3f800055
.word 0xb6d40000
.word 0x3f800005
.word 0x35b00000
.word 0x3f800019
.word 0xb6080000
.word 0x3f800026
.word 0xb6880000
.word 0x3f80004a
.word 0xb7100000
.word 0x3f800032
.word 0xb6c40000
.word 0xc
.word 0x8040000c
.word 0x25
.word 0x80200025
.word 0x47
.word 0x80100047
.word 0x1b
.word 0x8008001b
.word 0x2b
.word 0x8004002b
.word 0x10
.word 0x80020010
.word 0x26
.word 0x80010026
.word 0x27
.word 0x80008027
.word 0x3f
.word 0x8000403f
.word 0x29
.word 0x80002029
.word 0xc
.word 0x8000100c
.word 0x46
.word 0x80000846
.word 0x1f
.word 0x8000041f
.word 0x49
.word 0x80000249
.word 0x9
.word 0x80000109
.word 0x2a
.word 0x800000aa
.word 0x20
.word 0x80000060
.word 0x40
.word 0x80000060
.word 0x1
.word 0x80000011
.word 0x56
.word 0x8000005e
.word 0x34
.word 0x80000038
.word 0xc
.word 0x8000000e
.word 0x47
.word 0x80000048
.word 0x22
.word 0x3fffde
.word 0x39
.word 0x1fffc7
.word 0x47
.word 0xfffb9
.word 0x52
.word 0x7ffae
.word 0x29
.word 0x3ffd7
.word 0x2e
.word 0x1ffd2
.word 0x48
.word 0xffb8
.word 0x2b
.word 0x7fd5
.word 0xa
.word 0x3ff6
.word 0xd
.word 0x1ff3
.word 0x13
.word 0xfed
.word 0x5b
.word 0x7a5
.word 0x21
.word 0x3df
.word 0xd
.word 0x1f3
.word 0x12
.word 0xee
.word 0x12
.word 0x6e
.word 0x1c
.word 0x24
.word 0x2e
.word 0x8000000e
.word 0x27
.word 0x80000017
.word 0x3f
.word 0x80000037
.word 0x22
.word 0x8000001e
.word 0x36
.word 0x80000034
.word 0x32
.word 0x80000031
.word 0x7f000005
.word 0xff800000
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_2:
    .fill 46*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
