
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.5.2
// timestamp : Tue Sep  7 16:08:13 2021 GMT
// usage     : riscv_ctg \
//                  -- cgf $cgf \
//                  -- xlen $xlen \
// -----------
//
// -----------
// Copyright (c) 2021. IIT Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V F extension for the fnmsub_b2 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b2)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2, rs1==f17, rs2==f9, rs3==f31, rd==f17, fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001e and fs2 == 1 and fe2 == 0x7f and fm2 == 0x511111 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000030 and rm_val == 0  
// opcode: fnmsub.s ; op1:f17; op2:f9; op3:f31; dest:f17; op1val:0x1e; op2val:0xbfd11111; op3val:0x30; valaddr_reg:x16; val_offset:0; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f17, f17, f9, f31, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1:
// rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1, rs1==f29, rs2==f4, rs3==f15, rd==f15, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000003 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7fff12 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000039 and rm_val == 0  
// opcode: fnmsub.s ; op1:f29; op2:f4; op3:f15; dest:f15; op1val:0x7f000003; op2val:0x3effff12; op3val:0x7f000039; valaddr_reg:x16; val_offset:12; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f15, f29, f4, f15, 0x0, 0, x16, 12, x17, x15, 8, x18)

inst_2:
// rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd, rs1==f28, rs2==f18, rs3==f29, rd==f5, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000053 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3fff3c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000023 and rm_val == 0  
// opcode: fnmsub.s ; op1:f28; op2:f18; op3:f29; dest:f5; op1val:0x7f000053; op2val:0x3f3fff3c; op3val:0x7f000023; valaddr_reg:x16; val_offset:24; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f5, f28, f18, f29, 0x0, 0, x16, 24, x17, x15, 16, x18)

inst_3:
// rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3, rs1==f23, rs2==f23, rs3==f28, rd==f6, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000027 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5fff96 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000012 and rm_val == 0  
// opcode: fnmsub.s ; op1:f23; op2:f23; op3:f28; dest:f6; op1val:0x7f000027; op2val:0x7f000027; op3val:0x7f000012; valaddr_reg:x16; val_offset:36; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f6, f23, f23, f28, 0x0, 0, x16, 36, x17, x15, 24, x18)

inst_4:
// rs1 == rs2 == rs3 == rd, rs1==f12, rs2==f12, rs3==f12, rd==f12, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000048 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6fff49 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000017 and rm_val == 0  
// opcode: fnmsub.s ; op1:f12; op2:f12; op3:f12; dest:f12; op1val:0x7f000048; op2val:0x7f000048; op3val:0x7f000048; valaddr_reg:x16; val_offset:48; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f12, f12, f12, f12, 0x0, 0, x16, 48, x17, x15, 32, x18)

inst_5:
// rd == rs2 == rs3 != rs1, rs1==f11, rs2==f13, rs3==f13, rd==f13, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00002f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x77ff29 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00003d and rm_val == 0  
// opcode: fnmsub.s ; op1:f11; op2:f13; op3:f13; dest:f13; op1val:0x7f00002f; op2val:0x3f77ff29; op3val:0x3f77ff29; valaddr_reg:x16; val_offset:60; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f11, f13, f13, 0x0, 0, x16, 60, x17, x15, 40, x18)

inst_6:
// rs1 == rs2 == rd != rs3, rs1==f31, rs2==f31, rs3==f4, rd==f31, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00002f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7bff25 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00003e and rm_val == 0  
// opcode: fnmsub.s ; op1:f31; op2:f31; op3:f4; dest:f31; op1val:0x7f00002f; op2val:0x7f00002f; op3val:0x7f00003e; valaddr_reg:x16; val_offset:72; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f31, f31, f31, f4, 0x0, 0, x16, 72, x17, x15, 48, x18)

inst_7:
// rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2, rs1==f3, rs2==f8, rs3==f3, rd==f4, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00001e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7dff3e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000042 and rm_val == 0  
// opcode: fnmsub.s ; op1:f3; op2:f8; op3:f3; dest:f4; op1val:0x7f00001e; op2val:0x3f7dff3e; op3val:0x7f00001e; valaddr_reg:x16; val_offset:84; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f4, f3, f8, f3, 0x0, 0, x16, 84, x17, x15, 56, x18)

inst_8:
// rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1, rs1==f19, rs2==f2, rs3==f2, rd==f3, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000008 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7effe4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000005 and rm_val == 0  
// opcode: fnmsub.s ; op1:f19; op2:f2; op3:f2; dest:f3; op1val:0x7f000008; op2val:0x3f7effe4; op3val:0x3f7effe4; valaddr_reg:x16; val_offset:96; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f3, f19, f2, f2, 0x0, 0, x16, 96, x17, x15, 64, x18)

inst_9:
// rs1 == rs2 == rs3 != rd, rs1==f25, rs2==f25, rs3==f25, rd==f0, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000054 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7f7f04 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000029 and rm_val == 0  
// opcode: fnmsub.s ; op1:f25; op2:f25; op3:f25; dest:f0; op1val:0x7f000054; op2val:0x7f000054; op3val:0x7f000054; valaddr_reg:x16; val_offset:108; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f0, f25, f25, f25, 0x0, 0, x16, 108, x17, x15, 72, x18)

inst_10:
// rs1 == rd == rs3 != rs2, rs1==f9, rs2==f7, rs3==f9, rd==f9, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00005b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fbe9e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000055 and rm_val == 0  
// opcode: fnmsub.s ; op1:f9; op2:f7; op3:f9; dest:f9; op1val:0x7f00005b; op2val:0x3f7fbe9e; op3val:0x7f00005b; valaddr_reg:x16; val_offset:120; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f9, f9, f7, f9, 0x0, 0, x16, 120, x17, x15, 80, x18)

inst_11:
// rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1, rs1==f20, rs2==f19, rs3==f18, rd==f19, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00005f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fdf1a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000013 and rm_val == 0  
// opcode: fnmsub.s ; op1:f20; op2:f19; op3:f18; dest:f19; op1val:0x7f00005f; op2val:0x3f7fdf1a; op3val:0x7f000013; valaddr_reg:x16; val_offset:132; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f19, f20, f19, f18, 0x0, 0, x16, 132, x17, x15, 88, x18)

inst_12:
// rs1==f27, rs2==f28, rs3==f7, rd==f30, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000056 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fef48 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000005 and rm_val == 0  
// opcode: fnmsub.s ; op1:f27; op2:f28; op3:f7; dest:f30; op1val:0x7f000056; op2val:0x3f7fef48; op3val:0x7f000005; valaddr_reg:x16; val_offset:144; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f30, f27, f28, f7, 0x0, 0, x16, 144, x17, x15, 96, x18)

inst_13:
// rs1==f18, rs2==f16, rs3==f26, rd==f28, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000060 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7ff69c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000051 and rm_val == 0  
// opcode: fnmsub.s ; op1:f18; op2:f16; op3:f26; dest:f28; op1val:0x7f000060; op2val:0x3f7ff69c; op3val:0x7f000051; valaddr_reg:x16; val_offset:156; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f28, f18, f16, f26, 0x0, 0, x16, 156, x17, x15, 104, x18)

inst_14:
// rs1==f0, rs2==f6, rs3==f22, rd==f11, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000037 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7ffb30 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000030 and rm_val == 0  
// opcode: fnmsub.s ; op1:f0; op2:f6; op3:f22; dest:f11; op1val:0x7f000037; op2val:0x3f7ffb30; op3val:0x7f000030; valaddr_reg:x16; val_offset:168; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f11, f0, f6, f22, 0x0, 0, x16, 168, x17, x15, 112, x18)

inst_15:
// rs1==f21, rs2==f30, rs3==f5, rd==f8, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000030 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7ffcdc and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000061 and rm_val == 0  
// opcode: fnmsub.s ; op1:f21; op2:f30; op3:f5; dest:f8; op1val:0x7f000030; op2val:0x3f7ffcdc; op3val:0x7f000061; valaddr_reg:x16; val_offset:180; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f8, f21, f30, f5, 0x0, 0, x16, 180, x17, x15, 120, x18)

inst_16:
// rs1==f4, rs2==f0, rs3==f19, rd==f24, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00004a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7ffe10 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00002d and rm_val == 0  
// opcode: fnmsub.s ; op1:f4; op2:f0; op3:f19; dest:f24; op1val:0x7f00004a; op2val:0x3f7ffe10; op3val:0x7f00002d; valaddr_reg:x16; val_offset:192; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f24, f4, f0, f19, 0x0, 0, x16, 192, x17, x15, 128, x18)

inst_17:
// rs1==f14, rs2==f22, rs3==f20, rd==f25, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00003e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7ffea4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00002f and rm_val == 0  
// opcode: fnmsub.s ; op1:f14; op2:f22; op3:f20; dest:f25; op1val:0x7f00003e; op2val:0x3f7ffea4; op3val:0x7f00002f; valaddr_reg:x16; val_offset:204; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f25, f14, f22, f20, 0x0, 0, x16, 204, x17, x15, 136, x18)

inst_18:
// rs1==f10, rs2==f29, rs3==f21, rd==f14, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000053 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7ffeda and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00001f and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f29; op3:f21; dest:f14; op1val:0x7f000053; op2val:0x3f7ffeda; op3val:0x7f00001f; valaddr_reg:x16; val_offset:216; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f14, f10, f29, f21, 0x0, 0, x16, 216, x17, x15, 144, x18)

inst_19:
// rs1==f5, rs2==f26, rs3==f1, rd==f29, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00003e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fff36 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000016 and rm_val == 0  
// opcode: fnmsub.s ; op1:f5; op2:f26; op3:f1; dest:f29; op1val:0x7f00003e; op2val:0x3f7fff36; op3val:0x7f000016; valaddr_reg:x16; val_offset:228; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f29, f5, f26, f1, 0x0, 0, x16, 228, x17, x15, 152, x18)

inst_20:
// rs1==f13, rs2==f14, rs3==f10, rd==f7, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000054 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fff2a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00000e and rm_val == 0  
// opcode: fnmsub.s ; op1:f13; op2:f14; op3:f10; dest:f7; op1val:0x7f000054; op2val:0x3f7fff2a; op3val:0x7f00000e; valaddr_reg:x16; val_offset:240; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f7, f13, f14, f10, 0x0, 0, x16, 240, x17, x15, 160, x18)

inst_21:
// rs1==f26, rs2==f1, rs3==f14, rd==f27, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00000e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fff88 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000029 and rm_val == 0  
// opcode: fnmsub.s ; op1:f26; op2:f1; op3:f14; dest:f27; op1val:0x7f00000e; op2val:0x3f7fff88; op3val:0x7f000029; valaddr_reg:x16; val_offset:252; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f27, f26, f1, f14, 0x0, 0, x16, 252, x17, x15, 168, x18)

inst_22:
// rs1==f22, rs2==f27, rs3==f23, rd==f18, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000030 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fff3e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00002e and rm_val == 0  
// opcode: fnmsub.s ; op1:f22; op2:f27; op3:f23; dest:f18; op1val:0x7f000030; op2val:0x3f7fff3e; op3val:0x7f00002e; valaddr_reg:x16; val_offset:264; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f18, f22, f27, f23, 0x0, 0, x16, 264, x17, x15, 176, x18)

inst_23:
// rs1==f30, rs2==f17, rs3==f24, rd==f1, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00005c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7ffe9c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000054 and rm_val == 0  
// opcode: fnmsub.s ; op1:f30; op2:f17; op3:f24; dest:f1; op1val:0x7f00005c; op2val:0x3f7ffe9c; op3val:0x7f000054; valaddr_reg:x16; val_offset:276; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f1, f30, f17, f24, 0x0, 0, x16, 276, x17, x15, 184, x18)

inst_24:
// rs1==f6, rs2==f24, rs3==f17, rd==f22, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000006 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x20001e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00004d and rm_val == 0  
// opcode: fnmsub.s ; op1:f6; op2:f24; op3:f17; dest:f22; op1val:0x7f000006; op2val:0xc020001e; op3val:0x7f00004d; valaddr_reg:x16; val_offset:288; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f22, f6, f24, f17, 0x0, 0, x16, 288, x17, x15, 192, x18)

inst_25:
// rs1==f2, rs2==f11, rs3==f16, rd==f23, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000030 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2fffde and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000041 and rm_val == 0  
// opcode: fnmsub.s ; op1:f2; op2:f11; op3:f16; dest:f23; op1val:0x7f000030; op2val:0xc02fffde; op3val:0x7f000041; valaddr_reg:x16; val_offset:300; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f23, f2, f11, f16, 0x0, 0, x16, 300, x17, x15, 200, x18)

inst_26:
// rs1==f8, rs2==f3, rs3==f0, rd==f2, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00004b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x37ff9b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00000e and rm_val == 0  
// opcode: fnmsub.s ; op1:f8; op2:f3; op3:f0; dest:f2; op1val:0x7f00004b; op2val:0xc037ff9b; op3val:0x7f00000e; valaddr_reg:x16; val_offset:312; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f2, f8, f3, f0, 0x0, 0, x16, 312, x17, x15, 208, x18)

inst_27:
// rs1==f7, rs2==f21, rs3==f27, rd==f16, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000049 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3bffbd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000051 and rm_val == 0  
// opcode: fnmsub.s ; op1:f7; op2:f21; op3:f27; dest:f16; op1val:0x7f000049; op2val:0xc03bffbd; op3val:0x7f000051; valaddr_reg:x16; val_offset:324; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f16, f7, f21, f27, 0x0, 0, x16, 324, x17, x15, 216, x18)

inst_28:
// rs1==f16, rs2==f15, rs3==f30, rd==f21, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000063 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3dff88 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000037 and rm_val == 0  
// opcode: fnmsub.s ; op1:f16; op2:f15; op3:f30; dest:f21; op1val:0x7f000063; op2val:0xc03dff88; op3val:0x7f000037; valaddr_reg:x16; val_offset:336; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f21, f16, f15, f30, 0x0, 0, x16, 336, x17, x15, 224, x18)

inst_29:
// rs1==f15, rs2==f20, rs3==f11, rd==f26, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00004b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3eff98 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000011 and rm_val == 0  
// opcode: fnmsub.s ; op1:f15; op2:f20; op3:f11; dest:f26; op1val:0x7f00004b; op2val:0xc03eff98; op3val:0x7f000011; valaddr_reg:x16; val_offset:348; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f26, f15, f20, f11, 0x0, 0, x16, 348, x17, x15, 232, x18)

inst_30:
// rs1==f1, rs2==f5, rs3==f6, rd==f10, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000018 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3f7ff9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00003a and rm_val == 0  
// opcode: fnmsub.s ; op1:f1; op2:f5; op3:f6; dest:f10; op1val:0x7f000018; op2val:0xc03f7ff9; op3val:0x7f00003a; valaddr_reg:x16; val_offset:360; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f10, f1, f5, f6, 0x0, 0, x16, 360, x17, x15, 240, x18)

inst_31:
// rs1==f24, rs2==f10, rs3==f8, rd==f20, fs1 == 0 and fe1 == 0xfe and fm1 == 0x000002 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3fc002 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00000b and rm_val == 0  
// opcode: fnmsub.s ; op1:f24; op2:f10; op3:f8; dest:f20; op1val:0x7f000002; op2val:0xc03fc002; op3val:0x7f00000b; valaddr_reg:x16; val_offset:372; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f20, f24, f10, f8, 0x0, 0, x16, 372, x17, x15, 248, x18)

inst_32:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3fe010 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000059 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f000013; op2val:0xc03fe010; op3val:0x7f000059; valaddr_reg:x16; val_offset:384; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 384, x17, x15, 256, x18)

inst_33:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000004 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3ff022 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000050 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f000004; op2val:0xc03ff022; op3val:0x7f000050; valaddr_reg:x16; val_offset:396; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 396, x17, x15, 264, x18)

inst_34:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000031 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3ff7e3 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00005a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f000031; op2val:0xc03ff7e3; op3val:0x7f00005a; valaddr_reg:x16; val_offset:408; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 408, x17, x15, 272, x18)

inst_35:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000026 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3ffbdd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00002d and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f000026; op2val:0xc03ffbdd; op3val:0x7f00002d; valaddr_reg:x16; val_offset:420; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 420, x17, x15, 280, x18)

inst_36:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000030 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3ffdd8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000041 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f000030; op2val:0xc03ffdd8; op3val:0x7f000041; valaddr_reg:x16; val_offset:432; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 432, x17, x15, 288, x18)

inst_37:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000005 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3ffefb and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000005 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f000005; op2val:0xc03ffefb; op3val:0x7f000005; valaddr_reg:x16; val_offset:444; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 444, x17, x15, 296, x18)

inst_38:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000026 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3fff60 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000033 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f000026; op2val:0xc03fff60; op3val:0x7f000033; valaddr_reg:x16; val_offset:456; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 456, x17, x15, 304, x18)

inst_39:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00003d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3fff6c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000010 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f00003d; op2val:0xc03fff6c; op3val:0x7f000010; valaddr_reg:x16; val_offset:468; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 468, x17, x15, 312, x18)

inst_40:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3fffab and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000053 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f00003f; op2val:0xc03fffab; op3val:0x7f000053; valaddr_reg:x16; val_offset:480; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 480, x17, x15, 320, x18)

inst_41:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000063 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3fff64 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000012 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f000063; op2val:0xc03fff64; op3val:0x7f000012; valaddr_reg:x16; val_offset:492; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 492, x17, x15, 328, x18)

inst_42:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000044 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3fffab and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000033 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f000044; op2val:0xc03fffab; op3val:0x7f000033; valaddr_reg:x16; val_offset:504; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 504, x17, x15, 336, x18)

inst_43:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00001c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3ffff6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000049 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f00001c; op2val:0xc03ffff6; op3val:0x7f000049; valaddr_reg:x16; val_offset:516; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 516, x17, x15, 344, x18)

inst_44:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000042 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3fffae and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000026 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f000042; op2val:0xc03fffae; op3val:0x7f000026; valaddr_reg:x16; val_offset:528; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 528, x17, x15, 352, x18)

inst_45:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000041 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3fffc0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000045 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f000041; op2val:0xc03fffc0; op3val:0x7f000045; valaddr_reg:x16; val_offset:540; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 540, x17, x15, 360, x18)

inst_46:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000040 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3fffc8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000052 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f000040; op2val:0xc03fffc8; op3val:0x7f000052; valaddr_reg:x16; val_offset:552; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 552, x17, x15, 368, x18)

inst_47:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000011 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7fff4e and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000024 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800011; op2val:0x3effff4e; op3val:0x800024; valaddr_reg:x16; val_offset:564; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 564, x17, x15, 376, x18)

inst_48:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000058 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x7ffd68 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00003d and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800058; op2val:0x3e7ffd68; op3val:0x80003d; valaddr_reg:x16; val_offset:576; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 576, x17, x15, 384, x18)

inst_49:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000028 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x7ffd80 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000023 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800028; op2val:0x3dfffd80; op3val:0x800023; valaddr_reg:x16; val_offset:588; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 588, x17, x15, 392, x18)

inst_50:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000044 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x7ffc78 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000018 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800044; op2val:0x3d7ffc78; op3val:0x800018; valaddr_reg:x16; val_offset:600; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 600, x17, x15, 400, x18)

inst_51:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00002f and fs2 == 0 and fe2 == 0x79 and fm2 == 0x7fe7e2 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00005f and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x80002f; op2val:0x3cffe7e2; op3val:0x80005f; valaddr_reg:x16; val_offset:612; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 612, x17, x15, 408, x18)

inst_52:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00005b and fs2 == 0 and fe2 == 0x78 and fm2 == 0x7fdfca and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00003f and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x80005b; op2val:0x3c7fdfca; op3val:0x80003f; valaddr_reg:x16; val_offset:624; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 624, x17, x15, 416, x18)

inst_53:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000059 and fs2 == 0 and fe2 == 0x77 and fm2 == 0x7fb64e and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000049 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800059; op2val:0x3bffb64e; op3val:0x800049; valaddr_reg:x16; val_offset:636; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 636, x17, x15, 424, x18)

inst_54:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00005f and fs2 == 0 and fe2 == 0x76 and fm2 == 0x7f9f42 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000030 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x80005f; op2val:0x3b7f9f42; op3val:0x800030; valaddr_reg:x16; val_offset:648; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 648, x17, x15, 432, x18)

inst_55:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00004b and fs2 == 0 and fe2 == 0x75 and fm2 == 0x7e9f6b and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000058 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x80004b; op2val:0x3afe9f6b; op3val:0x800058; valaddr_reg:x16; val_offset:660; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 660, x17, x15, 440, x18)

inst_56:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000036 and fs2 == 0 and fe2 == 0x74 and fm2 == 0x7e3f95 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000038 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800036; op2val:0x3a7e3f95; op3val:0x800038; valaddr_reg:x16; val_offset:672; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 672, x17, x15, 448, x18)

inst_57:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00004f and fs2 == 0 and fe2 == 0x73 and fm2 == 0x7daf63 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000025 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x80004f; op2val:0x39fdaf63; op3val:0x800025; valaddr_reg:x16; val_offset:684; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 684, x17, x15, 456, x18)

inst_58:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00004b and fs2 == 0 and fe2 == 0x72 and fm2 == 0x753f70 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000056 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x80004b; op2val:0x39753f70; op3val:0x800056; valaddr_reg:x16; val_offset:696; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 696, x17, x15, 464, x18)

inst_59:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000059 and fs2 == 0 and fe2 == 0x71 and fm2 == 0x717f58 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00003a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800059; op2val:0x38f17f58; op3val:0x80003a; valaddr_reg:x16; val_offset:708; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 708, x17, x15, 472, x18)

inst_60:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000039 and fs2 == 0 and fe2 == 0x70 and fm2 == 0x7bff90 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000008 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800039; op2val:0x387bff90; op3val:0x800008; valaddr_reg:x16; val_offset:720; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 720, x17, x15, 480, x18)

inst_61:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000012 and fs2 == 0 and fe2 == 0x6f and fm2 == 0x1dffea and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000062 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800012; op2val:0x379dffea; op3val:0x800062; valaddr_reg:x16; val_offset:732; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 732, x17, x15, 488, x18)

inst_62:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000017 and fs2 == 0 and fe2 == 0x6e and fm2 == 0x53ffda and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000016 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800017; op2val:0x3753ffda; op3val:0x800016; valaddr_reg:x16; val_offset:744; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 744, x17, x15, 496, x18)

inst_63:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00001c and fs2 == 0 and fe2 == 0x6b and fm2 == 0x2fffda and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000035 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x80001c; op2val:0x35afffda; op3val:0x800035; valaddr_reg:x16; val_offset:756; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 756, x17, x15, 504, x18)

inst_64:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00001d and fs2 == 1 and fe2 == 0x6b and fm2 == 0x1fffdc and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00002a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x80001d; op2val:0xb59fffdc; op3val:0x80002a; valaddr_reg:x16; val_offset:768; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 768, x17, x15, 512, x18)

inst_65:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000060 and fs2 == 1 and fe2 == 0x67 and fm2 == 0x7fff40 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000011 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800060; op2val:0xb3ffff40; op3val:0x800011; valaddr_reg:x16; val_offset:780; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 780, x17, x15, 520, x18)

inst_66:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00000b and fs2 == 1 and fe2 == 0x6b and fm2 == 0x1ffff2 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000012 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x80000b; op2val:0xb59ffff2; op3val:0x800012; valaddr_reg:x16; val_offset:792; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 792, x17, x15, 528, x18)

inst_67:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000049 and fs2 == 1 and fe2 == 0x6e and fm2 == 0x2fff9c and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00005c and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800049; op2val:0xb72fff9c; op3val:0x80005c; valaddr_reg:x16; val_offset:804; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 804, x17, x15, 536, x18)

inst_68:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00003e and fs2 == 1 and fe2 == 0x6b and fm2 == 0x4fff9b and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00000f and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x80003e; op2val:0xb5cfff9b; op3val:0x80000f; valaddr_reg:x16; val_offset:816; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 816, x17, x15, 544, x18)

inst_69:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00005f and fs2 == 1 and fe2 == 0x6d and fm2 == 0x7fff42 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000041 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x80005f; op2val:0xb6ffff42; op3val:0x800041; valaddr_reg:x16; val_offset:828; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 828, x17, x15, 552, x18)

inst_70:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000026 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1fffe1 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000020 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800026; op2val:0xc01fffe1; op3val:0x800020; valaddr_reg:x16; val_offset:840; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 840, x17, x15, 560, x18)

inst_71:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000052 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0fffb9 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00002a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800052; op2val:0xc00fffb9; op3val:0x80002a; valaddr_reg:x16; val_offset:852; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 852, x17, x15, 568, x18)

inst_72:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000016 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x08000d and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000048 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800016; op2val:0xc008000d; op3val:0x800048; valaddr_reg:x16; val_offset:864; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 864, x17, x15, 576, x18)

inst_73:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00005f and fs2 == 1 and fe2 == 0x80 and fm2 == 0x03ffaa and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000017 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x80005f; op2val:0xc003ffaa; op3val:0x800017; valaddr_reg:x16; val_offset:876; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 876, x17, x15, 584, x18)

inst_74:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000008 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x02001c and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000048 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800008; op2val:0xc002001c; op3val:0x800048; valaddr_reg:x16; val_offset:888; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 888, x17, x15, 592, x18)

inst_75:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00000e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00fff5 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x80000e; op2val:0xc000fff5; op3val:0x800007; valaddr_reg:x16; val_offset:900; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 900, x17, x15, 600, x18)

inst_76:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000060 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x007fad and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00001a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800060; op2val:0xc0007fad; op3val:0x80001a; valaddr_reg:x16; val_offset:912; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 912, x17, x15, 608, x18)

inst_77:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000017 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x003fff and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00002c and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800017; op2val:0xc0003fff; op3val:0x80002c; valaddr_reg:x16; val_offset:924; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 924, x17, x15, 616, x18)

inst_78:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00000b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x002008 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000026 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x80000b; op2val:0xc0002008; op3val:0x800026; valaddr_reg:x16; val_offset:936; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 936, x17, x15, 624, x18)

inst_79:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000045 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000fc9 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00001d and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800045; op2val:0xc0000fc9; op3val:0x80001d; valaddr_reg:x16; val_offset:948; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 948, x17, x15, 632, x18)

inst_80:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000009 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0007fd and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00000d and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800009; op2val:0xc00007fd; op3val:0x80000d; valaddr_reg:x16; val_offset:960; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 960, x17, x15, 640, x18)

inst_81:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000038 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0003f7 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00005e and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800038; op2val:0xc00003f7; op3val:0x80005e; valaddr_reg:x16; val_offset:972; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 972, x17, x15, 648, x18)

inst_82:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000032 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0001d8 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000014 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800032; op2val:0xc00001d8; op3val:0x800014; valaddr_reg:x16; val_offset:984; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 984, x17, x15, 656, x18)

inst_83:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000015 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0000fb and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000021 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800015; op2val:0xc00000fb; op3val:0x800021; valaddr_reg:x16; val_offset:996; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 996, x17, x15, 664, x18)

inst_84:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000038 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000052 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000015 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800038; op2val:0xc0000052; op3val:0x800015; valaddr_reg:x16; val_offset:1008; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1008, x17, x15, 672, x18)

inst_85:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00004f and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000007 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00002d and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x80004f; op2val:0xc0000007; op3val:0x80002d; valaddr_reg:x16; val_offset:1020; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1020, x17, x15, 680, x18)

inst_86:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00000f and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00003f and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00005d and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x80000f; op2val:0xc000003f; op3val:0x80005d; valaddr_reg:x16; val_offset:1032; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1032, x17, x15, 688, x18)

inst_87:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000009 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000028 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000043 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800009; op2val:0xc0000028; op3val:0x800043; valaddr_reg:x16; val_offset:1044; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1044, x17, x15, 696, x18)

inst_88:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00002e and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7fffde and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00002a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x80002e; op2val:0xbfffffde; op3val:0x80002a; valaddr_reg:x16; val_offset:1056; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1056, x17, x15, 704, x18)

inst_89:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000026 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00000e and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000060 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800026; op2val:0xc000000e; op3val:0x800060; valaddr_reg:x16; val_offset:1068; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1068, x17, x15, 712, x18)

inst_90:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000029 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7fffcf and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00001d and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800029; op2val:0xbfffffcf; op3val:0x80001d; valaddr_reg:x16; val_offset:1080; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1080, x17, x15, 720, x18)

inst_91:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000005 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000022 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00004d and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x800005; op2val:0xc0000022; op3val:0x80004d; valaddr_reg:x16; val_offset:1092; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1092, x17, x15, 728, x18)

inst_92:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00001e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000011 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00005d and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x80001e; op2val:0xc0000011; op3val:0x80005d; valaddr_reg:x16; val_offset:1104; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1104, x17, x15, 736, x18)

inst_93:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002f and fs2 == 0 and fe2 == 0x8f and fm2 == 0x2e4c23 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x2f; op2val:0x47ae4c23; op3val:0xa; valaddr_reg:x16; val_offset:1116; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1116, x17, x15, 744, x18)

inst_94:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000012 and fs2 == 0 and fe2 == 0x91 and fm2 == 0x2aaa14 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000054 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x12; op2val:0x48aaaa14; op3val:0x54; valaddr_reg:x16; val_offset:1128; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1128, x17, x15, 752, x18)

inst_95:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000005 and fs2 == 0 and fe2 == 0x93 and fm2 == 0x333320 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000b and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5; op2val:0x49b33320; op3val:0xb; valaddr_reg:x16; val_offset:1140; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1140, x17, x15, 760, x18)

inst_96:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000009 and fs2 == 0 and fe2 == 0x92 and fm2 == 0x55550b and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000029 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x9; op2val:0x4955550b; op3val:0x29; valaddr_reg:x16; val_offset:1152; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1152, x17, x15, 768, x18)

inst_97:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002e and fs2 == 0 and fe2 == 0x90 and fm2 == 0x2c851a and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000054 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x2e; op2val:0x482c851a; op3val:0x54; valaddr_reg:x16; val_offset:1164; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1164, x17, x15, 776, x18)

inst_98:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000011 and fs2 == 0 and fe2 == 0x91 and fm2 == 0x6d2c98 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004e and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x11; op2val:0x48ed2c98; op3val:0x4e; valaddr_reg:x16; val_offset:1176; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1176, x17, x15, 784, x18)

inst_99:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000049 and fs2 == 0 and fe2 == 0x8f and fm2 == 0x5eaf41 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000c and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x49; op2val:0x47deaf41; op3val:0xc; valaddr_reg:x16; val_offset:1188; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1188, x17, x15, 792, x18)

inst_100:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000056 and fs2 == 0 and fe2 == 0x8f and fm2 == 0x3dc43f and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000025 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x56; op2val:0x47bdc43f; op3val:0x25; valaddr_reg:x16; val_offset:1200; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1200, x17, x15, 800, x18)

inst_101:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003c and fs2 == 0 and fe2 == 0x90 and fm2 == 0x084404 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003b and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3c; op2val:0x48084404; op3val:0x3b; valaddr_reg:x16; val_offset:1212; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1212, x17, x15, 808, x18)

inst_102:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000c and fs2 == 0 and fe2 == 0x92 and fm2 == 0x2a7fed and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000d and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0xc; op2val:0x492a7fed; op3val:0xd; valaddr_reg:x16; val_offset:1224; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1224, x17, x15, 816, x18)

inst_103:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000058 and fs2 == 0 and fe2 == 0x8f and fm2 == 0x3a1713 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000022 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x58; op2val:0x47ba1713; op3val:0x22; valaddr_reg:x16; val_offset:1236; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1236, x17, x15, 824, x18)

inst_104:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004f and fs2 == 0 and fe2 == 0x8f and fm2 == 0x4f5754 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000019 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x4f; op2val:0x47cf5754; op3val:0x19; valaddr_reg:x16; val_offset:1248; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1248, x17, x15, 832, x18)

inst_105:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000012 and fs2 == 0 and fe2 == 0x91 and fm2 == 0x638715 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x12; op2val:0x48e38715; op3val:0x3; valaddr_reg:x16; val_offset:1260; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1260, x17, x15, 840, x18)

inst_106:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000037 and fs2 == 0 and fe2 == 0x90 and fm2 == 0x14efad and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000006 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x37; op2val:0x4814efad; op3val:0x6; valaddr_reg:x16; val_offset:1272; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1272, x17, x15, 848, x18)

inst_107:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000016 and fs2 == 0 and fe2 == 0x91 and fm2 == 0x3a2cac and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000049 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x16; op2val:0x48ba2cac; op3val:0x49; valaddr_reg:x16; val_offset:1284; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1284, x17, x15, 856, x18)

inst_108:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000b and fs2 == 0 and fe2 == 0x92 and fm2 == 0x3a2d56 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000054 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0xb; op2val:0x493a2d56; op3val:0x54; valaddr_reg:x16; val_offset:1296; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1296, x17, x15, 864, x18)

inst_109:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000f and fs2 == 0 and fe2 == 0x92 and fm2 == 0x08880e and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000032 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0xf; op2val:0x4908880e; op3val:0x32; valaddr_reg:x16; val_offset:1308; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1308, x17, x15, 872, x18)

inst_110:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000040 and fs2 == 0 and fe2 == 0x8f and fm2 == 0x7fffa2 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000e and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x40; op2val:0x47ffffa2; op3val:0xe; valaddr_reg:x16; val_offset:1320; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1320, x17, x15, 880, x18)

inst_111:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001a and fs2 == 0 and fe2 == 0x91 and fm2 == 0x1d8989 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000030 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x1a; op2val:0x489d8989; op3val:0x30; valaddr_reg:x16; val_offset:1332; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1332, x17, x15, 888, x18)

inst_112:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004d and fs2 == 0 and fe2 == 0x8f and fm2 == 0x54c6fb and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000044 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x4d; op2val:0x47d4c6fb; op3val:0x44; valaddr_reg:x16; val_offset:1344; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1344, x17, x15, 896, x18)

inst_113:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000020 and fs2 == 0 and fe2 == 0x90 and fm2 == 0x7fffba and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001e and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x20; op2val:0x487fffba; op3val:0x1e; valaddr_reg:x16; val_offset:1356; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1356, x17, x15, 904, x18)

inst_114:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000060 and fs2 == 0 and fe2 == 0x8f and fm2 == 0x2aaa58 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003b and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x60; op2val:0x47aaaa58; op3val:0x3b; valaddr_reg:x16; val_offset:1368; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1368, x17, x15, 912, x18)

inst_115:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000020 and fs2 == 0 and fe2 == 0x90 and fm2 == 0x7fff7a and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000041 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x20; op2val:0x487fff7a; op3val:0x41; valaddr_reg:x16; val_offset:1380; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1380, x17, x15, 920, x18)

inst_116:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002f and fs2 == 1 and fe2 == 0x8f and fm2 == 0x2e4c96 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000020 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x2f; op2val:0xc7ae4c96; op3val:0x20; valaddr_reg:x16; val_offset:1392; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1392, x17, x15, 928, x18)

inst_117:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000035 and fs2 == 1 and fe2 == 0x8f and fm2 == 0x67d9a7 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000020 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x35; op2val:0xc7e7d9a7; op3val:0x20; valaddr_reg:x16; val_offset:1404; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1404, x17, x15, 936, x18)

inst_118:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000024 and fs2 == 1 and fe2 == 0x90 and fm2 == 0x471d00 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000051 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x24; op2val:0xc8471d00; op3val:0x51; valaddr_reg:x16; val_offset:1416; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1416, x17, x15, 944, x18)

inst_119:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000041 and fs2 == 1 and fe2 == 0x8f and fm2 == 0x6c4f08 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000023 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x41; op2val:0xc7ec4f08; op3val:0x23; valaddr_reg:x16; val_offset:1428; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1428, x17, x15, 952, x18)

inst_120:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000026 and fs2 == 1 and fe2 == 0x90 and fm2 == 0x50d7cf and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000024 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x26; op2val:0xc850d7cf; op3val:0x24; valaddr_reg:x16; val_offset:1440; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1440, x17, x15, 960, x18)

inst_121:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000050 and fs2 == 1 and fe2 == 0x8f and fm2 == 0x4999d2 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000024 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x50; op2val:0xc7c999d2; op3val:0x24; valaddr_reg:x16; val_offset:1452; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1452, x17, x15, 968, x18)

inst_122:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000036 and fs2 == 1 and fe2 == 0x90 and fm2 == 0x1684ce and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000f and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x36; op2val:0xc81684ce; op3val:0xf; valaddr_reg:x16; val_offset:1464; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1464, x17, x15, 976, x18)

inst_123:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005e and fs2 == 1 and fe2 == 0x8f and fm2 == 0x2d9e23 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000023 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5e; op2val:0xc7ad9e23; op3val:0x23; valaddr_reg:x16; val_offset:1476; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1476, x17, x15, 984, x18)

inst_124:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000009 and fs2 == 1 and fe2 == 0x92 and fm2 == 0x631ce2 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000040 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x9; op2val:0xc9631ce2; op3val:0x40; valaddr_reg:x16; val_offset:1488; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1488, x17, x15, 992, x18)

inst_125:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000023 and fs2 == 1 and fe2 == 0x90 and fm2 == 0x69d442 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000015 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x23; op2val:0xc869d442; op3val:0x15; valaddr_reg:x16; val_offset:1500; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1500, x17, x15, 1000, x18)

inst_126:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000041 and fs2 == 1 and fe2 == 0x8f and fm2 == 0x7bf053 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000b and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x41; op2val:0xc7fbf053; op3val:0xb; valaddr_reg:x16; val_offset:1512; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1512, x17, x15, 1008, x18)

inst_127:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x90 and fm2 == 0x020044 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000044 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f; op2val:0xc8020044; op3val:0x44; valaddr_reg:x16; val_offset:1524; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1524, x17, x15, 1016, x18)

inst_128:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000037 and fs2 == 1 and fe2 == 0x90 and fm2 == 0x14ed7f and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x37; op2val:0xc814ed7f; op3val:0x1a; valaddr_reg:x16; val_offset:1536; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1536, x17, x15, 1024, x18)

inst_129:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002f and fs2 == 1 and fe2 == 0x90 and fm2 == 0x2e49fd and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000057 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x2f; op2val:0xc82e49fd; op3val:0x57; valaddr_reg:x16; val_offset:1548; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1548, x17, x15, 1032, x18)

inst_130:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004e and fs2 == 1 and fe2 == 0x8f and fm2 == 0x520bf6 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004b and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x4e; op2val:0xc7d20bf6; op3val:0x4b; valaddr_reg:x16; val_offset:1560; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1560, x17, x15, 1040, x18)

inst_131:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002e and fs2 == 1 and fe2 == 0x90 and fm2 == 0x321608 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000057 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x2e; op2val:0xc8321608; op3val:0x57; valaddr_reg:x16; val_offset:1572; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1572, x17, x15, 1048, x18)

inst_132:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000059 and fs2 == 1 and fe2 == 0x8f and fm2 == 0x38172d and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005e and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x59; op2val:0xc7b8172d; op3val:0x5e; valaddr_reg:x16; val_offset:1584; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1584, x17, x15, 1056, x18)

inst_133:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000058 and fs2 == 1 and fe2 == 0x8f and fm2 == 0x3a2ebf and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000044 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x58; op2val:0xc7ba2ebf; op3val:0x44; valaddr_reg:x16; val_offset:1596; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1596, x17, x15, 1064, x18)

inst_134:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004f and fs2 == 1 and fe2 == 0x8f and fm2 == 0x4f64aa and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000032 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x4f; op2val:0xc7cf64aa; op3val:0x32; valaddr_reg:x16; val_offset:1608; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1608, x17, x15, 1072, x18)

inst_135:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000026 and fs2 == 1 and fe2 == 0x90 and fm2 == 0x57947d and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000033 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x26; op2val:0xc857947d; op3val:0x33; valaddr_reg:x16; val_offset:1620; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1620, x17, x15, 1080, x18)

inst_136:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000028 and fs2 == 1 and fe2 == 0x90 and fm2 == 0x4cccf0 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001b and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x28; op2val:0xc84cccf0; op3val:0x1b; valaddr_reg:x16; val_offset:1632; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1632, x17, x15, 1088, x18)

inst_137:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000031 and fs2 == 1 and fe2 == 0x90 and fm2 == 0x272f63 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004b and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x31; op2val:0xc8272f63; op3val:0x4b; valaddr_reg:x16; val_offset:1644; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1644, x17, x15, 1096, x18)

inst_138:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x90 and fm2 == 0x02084f and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000030 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f; op2val:0xc802084f; op3val:0x30; valaddr_reg:x16; val_offset:1656; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1656, x17, x15, 1104, x18)

inst_139:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000e and fs2 == 0 and fe2 == 0x91 and fm2 == 0x1248eb and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0xe; op2val:0x489248eb; op3val:0x1a; valaddr_reg:x16; val_offset:1668; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1668, x17, x15, 1112, x18)

inst_140:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000026 and fs2 == 0 and fe2 == 0x8e and fm2 == 0x579207 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000054 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x26; op2val:0x47579207; op3val:0x54; valaddr_reg:x16; val_offset:1680; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1680, x17, x15, 1120, x18)

inst_141:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000051 and fs2 == 0 and fe2 == 0x8c and fm2 == 0x4a434f and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002e and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x51; op2val:0x464a434f; op3val:0x2e; valaddr_reg:x16; val_offset:1692; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1692, x17, x15, 1128, x18)

inst_142:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000043 and fs2 == 0 and fe2 == 0x8b and fm2 == 0x748504 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000027 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x43; op2val:0x45f48504; op3val:0x27; valaddr_reg:x16; val_offset:1704; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1704, x17, x15, 1136, x18)

inst_143:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005f and fs2 == 0 and fe2 == 0x8a and fm2 == 0x2c6faa and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5f; op2val:0x452c6faa; op3val:0x2a; valaddr_reg:x16; val_offset:1716; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1716, x17, x15, 1144, x18)

inst_144:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000060 and fs2 == 0 and fe2 == 0x89 and fm2 == 0x2a9b00 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000030 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x60; op2val:0x44aa9b00; op3val:0x30; valaddr_reg:x16; val_offset:1728; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1728, x17, x15, 1152, x18)

inst_145:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000047 and fs2 == 0 and fe2 == 0x88 and fm2 == 0x6692ee and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000036 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x47; op2val:0x446692ee; op3val:0x36; valaddr_reg:x16; val_offset:1740; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1740, x17, x15, 1160, x18)

inst_146:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000026 and fs2 == 0 and fe2 == 0x88 and fm2 == 0x57835e and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000b and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x26; op2val:0x4457835e; op3val:0xb; valaddr_reg:x16; val_offset:1752; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1752, x17, x15, 1168, x18)

inst_147:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001d and fs2 == 0 and fe2 == 0x88 and fm2 == 0x0c8d3e and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000051 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x1d; op2val:0x440c8d3e; op3val:0x51; valaddr_reg:x16; val_offset:1764; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1764, x17, x15, 1176, x18)

inst_148:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002a and fs2 == 0 and fe2 == 0x86 and fm2 == 0x41d555 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000034 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x2a; op2val:0x4341d555; op3val:0x34; valaddr_reg:x16; val_offset:1776; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1776, x17, x15, 1184, x18)

inst_149:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000b and fs2 == 0 and fe2 == 0x87 and fm2 == 0x35dd17 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000060 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0xb; op2val:0x43b5dd17; op3val:0x60; valaddr_reg:x16; val_offset:1788; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1788, x17, x15, 1192, x18)

inst_150:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x4ba544 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000026 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x4f; op2val:0x41cba544; op3val:0x26; valaddr_reg:x16; val_offset:1800; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1800, x17, x15, 1200, x18)

inst_151:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x88 and fm2 == 0x76c000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000026 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x1; op2val:0x4476c000; op3val:0x26; valaddr_reg:x16; val_offset:1812; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1812, x17, x15, 1208, x18)

inst_152:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000053 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3bc250 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x53; op2val:0x40bbc250; op3val:0x1a; valaddr_reg:x16; val_offset:1824; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1824, x17, x15, 1216, x18)

inst_153:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000060 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7d5555 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000043 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x60; op2val:0x3ffd5555; op3val:0x43; valaddr_reg:x16; val_offset:1836; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1836, x17, x15, 1224, x18)

inst_154:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000044 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x14b4b5 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000032 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x44; op2val:0x3f94b4b5; op3val:0x32; valaddr_reg:x16; val_offset:1848; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1848, x17, x15, 1232, x18)

inst_155:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x444444 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x1e; op2val:0x3f444444; op3val:0x2a; valaddr_reg:x16; val_offset:1860; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1860, x17, x15, 1240, x18)

inst_156:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x1d89d9 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000041 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x1a; op2val:0xbf9d89d9; op3val:0x41; valaddr_reg:x16; val_offset:1872; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1872, x17, x15, 1248, x18)

inst_157:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1d89d9 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000049 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5b; op2val:0xbf1d89d9; op3val:0x49; valaddr_reg:x16; val_offset:1884; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1884, x17, x15, 1256, x18)

inst_158:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3a2e8c and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000041 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x4d; op2val:0xbf3a2e8c; op3val:0x41; valaddr_reg:x16; val_offset:1896; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1896, x17, x15, 1264, x18)

inst_159:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000060 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x755555 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000061 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x60; op2val:0xbf755555; op3val:0x61; valaddr_reg:x16; val_offset:1908; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1908, x17, x15, 1272, x18)

inst_160:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000044 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x078788 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000c and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x44; op2val:0xbe078788; op3val:0xc; valaddr_reg:x16; val_offset:1920; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1920, x17, x15, 1280, x18)

inst_161:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x169131 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000038 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x2f; op2val:0xbf969131; op3val:0x38; valaddr_reg:x16; val_offset:1932; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1932, x17, x15, 1288, x18)

inst_162:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000003 and fs2 == 1 and fe2 == 0x93 and fm2 == 0x2aab8d and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000054 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3; op2val:0xc9aaab8d; op3val:0x54; valaddr_reg:x16; val_offset:1944; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1944, x17, x15, 1296, x18)

inst_163:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004d and fs2 == 1 and fe2 == 0x8d and fm2 == 0x54c98f and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004f and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x4d; op2val:0xc6d4c98f; op3val:0x4f; valaddr_reg:x16; val_offset:1956; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1956, x17, x15, 1304, x18)

inst_164:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x93 and fm2 == 0x0002e0 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005b and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x1; op2val:0xc98002e0; op3val:0x5b; valaddr_reg:x16; val_offset:1968; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1968, x17, x15, 1312, x18)

inst_165:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001c and fs2 == 1 and fe2 == 0x8d and fm2 == 0x124fdb and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005d and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x1c; op2val:0xc6924fdb; op3val:0x5d; valaddr_reg:x16; val_offset:1980; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1980, x17, x15, 1320, x18)

inst_166:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000f and fs2 == 1 and fe2 == 0x8d and fm2 == 0x088a89 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000e and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0xf; op2val:0xc6888a89; op3val:0xe; valaddr_reg:x16; val_offset:1992; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1992, x17, x15, 1328, x18)

inst_167:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000007 and fs2 == 1 and fe2 == 0x8d and fm2 == 0x125a00 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7; op2val:0xc6925a00; op3val:0x3a; valaddr_reg:x16; val_offset:2004; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 2004, x17, x15, 1336, x18)

inst_168:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000007 and fs2 == 1 and fe2 == 0x8c and fm2 == 0x125892 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7; op2val:0xc6125892; op3val:0x1a; valaddr_reg:x16; val_offset:2016; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 2016, x17, x15, 1344, x18)

inst_169:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003b and fs2 == 1 and fe2 == 0x88 and fm2 == 0x0af97e and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001d and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3b; op2val:0xc40af97e; op3val:0x1d; valaddr_reg:x16; val_offset:2028; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 2028, x17, x15, 1352, x18)
addi x16,x16,2040

inst_170:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000033 and fs2 == 1 and fe2 == 0x87 and fm2 == 0x211919 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002f and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x33; op2val:0xc3a11919; op3val:0x2f; valaddr_reg:x16; val_offset:0; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 0, x17, x15, 1360, x18)

inst_171:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003d and fs2 == 1 and fe2 == 0x86 and fm2 == 0x078219 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000049 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d; op2val:0xc3078219; op3val:0x49; valaddr_reg:x16; val_offset:12; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 12, x17, x15, 1368, x18)

inst_172:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000c and fs2 == 1 and fe2 == 0x87 and fm2 == 0x2e8aab and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005c and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0xc; op2val:0xc3ae8aab; op3val:0x5c; valaddr_reg:x16; val_offset:24; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 24, x17, x15, 1376, x18)

inst_173:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000042 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x01d174 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005d and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x42; op2val:0xc201d174; op3val:0x5d; valaddr_reg:x16; val_offset:36; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 36, x17, x15, 1384, x18)

inst_174:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005d and fs2 == 1 and fe2 == 0x82 and fm2 == 0x3a268a and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000039 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5d; op2val:0xc13a268a; op3val:0x39; valaddr_reg:x16; val_offset:48; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 48, x17, x15, 1392, x18)

inst_175:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000053 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x4c565d and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000011 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x53; op2val:0xc0cc565d; op3val:0x11; valaddr_reg:x16; val_offset:60; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 60, x17, x15, 1400, x18)

inst_176:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x58c632 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5d; op2val:0xc058c632; op3val:0x3a; valaddr_reg:x16; val_offset:72; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 72, x17, x15, 1408, x18)

inst_177:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000e and fs2 == 1 and fe2 == 0x82 and fm2 == 0x692492 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004b and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0xe; op2val:0xc1692492; op3val:0x4b; valaddr_reg:x16; val_offset:84; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 84, x17, x15, 1416, x18)

inst_178:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000031 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539783 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000010 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x31; op2val:0xbfd39783; op3val:0x10; valaddr_reg:x16; val_offset:96; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 96, x17, x15, 1424, x18)

inst_179:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5e6d1d and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000014 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d; op2val:0xbf5e6d1d; op3val:0x14; valaddr_reg:x16; val_offset:108; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 108, x17, x15, 1432, x18)

inst_180:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x32c235 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000040 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x1d; op2val:0xc032c235; op3val:0x40; valaddr_reg:x16; val_offset:120; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 120, x17, x15, 1440, x18)

inst_181:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x562762 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004e and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x1a; op2val:0xc0562762; op3val:0x4e; valaddr_reg:x16; val_offset:132; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 132, x17, x15, 1448, x18)

inst_182:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000010 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000b and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x10; op2val:0xbf800000; op3val:0xb; valaddr_reg:x16; val_offset:144; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 144, x17, x15, 1456, x18)

inst_183:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000038 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x092492 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000039 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x38; op2val:0xbf892492; op3val:0x39; valaddr_reg:x16; val_offset:156; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 156, x17, x15, 1464, x18)

inst_184:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000017 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x78d74e and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002c and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x17; op2val:0xbff8d74e; op3val:0x2c; valaddr_reg:x16; val_offset:168; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 168, x17, x15, 1472, x18)

inst_185:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00004b and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7fff0e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000017 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f80004b; op2val:0x3effff0e; op3val:0x3f800017; valaddr_reg:x16; val_offset:180; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 180, x17, x15, 1480, x18)

inst_186:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000005 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x7ffce6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000062 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800005; op2val:0x3e7ffce6; op3val:0x3f800062; valaddr_reg:x16; val_offset:192; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 192, x17, x15, 1488, x18)

inst_187:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000008 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x7ffaf0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000050 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800008; op2val:0x3dfffaf0; op3val:0x3f800050; valaddr_reg:x16; val_offset:204; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 204, x17, x15, 1496, x18)

inst_188:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000040 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x7ffc20 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00001b and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800040; op2val:0x3d7ffc20; op3val:0x3f80001b; valaddr_reg:x16; val_offset:216; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 216, x17, x15, 1504, x18)

inst_189:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x7feb3e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000053 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800001; op2val:0x3cffeb3e; op3val:0x3f800053; valaddr_reg:x16; val_offset:228; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 228, x17, x15, 1512, x18)

inst_190:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00002a and fs2 == 0 and fe2 == 0x78 and fm2 == 0x7fe82c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00002f and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f80002a; op2val:0x3c7fe82c; op3val:0x3f80002f; valaddr_reg:x16; val_offset:240; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 240, x17, x15, 1520, x18)

inst_191:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000027 and fs2 == 0 and fe2 == 0x77 and fm2 == 0x7fd2b2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00002d and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800027; op2val:0x3bffd2b2; op3val:0x3f80002d; valaddr_reg:x16; val_offset:252; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 252, x17, x15, 1528, x18)

inst_192:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000010 and fs2 == 0 and fe2 == 0x76 and fm2 == 0x7f3fe0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000060 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800010; op2val:0x3b7f3fe0; op3val:0x3f800060; valaddr_reg:x16; val_offset:264; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 264, x17, x15, 1536, x18)

inst_193:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000055 and fs2 == 0 and fe2 == 0x75 and fm2 == 0x7ed757 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00004a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800055; op2val:0x3afed757; op3val:0x3f80004a; valaddr_reg:x16; val_offset:276; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 276, x17, x15, 1544, x18)

inst_194:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00002c and fs2 == 0 and fe2 == 0x74 and fm2 == 0x7e6fa9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000032 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f80002c; op2val:0x3a7e6fa9; op3val:0x3f800032; valaddr_reg:x16; val_offset:288; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 288, x17, x15, 1552, x18)

inst_195:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000003 and fs2 == 0 and fe2 == 0x73 and fm2 == 0x7edffa and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000012 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800003; op2val:0x39fedffa; op3val:0x3f800012; valaddr_reg:x16; val_offset:300; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 300, x17, x15, 1560, x18)

inst_196:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000009 and fs2 == 0 and fe2 == 0x72 and fm2 == 0x7cdfee and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000019 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800009; op2val:0x397cdfee; op3val:0x3f800019; valaddr_reg:x16; val_offset:312; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 312, x17, x15, 1568, x18)

inst_197:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000014 and fs2 == 0 and fe2 == 0x71 and fm2 == 0x6c7fdb and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00004e and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800014; op2val:0x38ec7fdb; op3val:0x3f80004e; valaddr_reg:x16; val_offset:324; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 324, x17, x15, 1576, x18)

inst_198:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00003f and fs2 == 0 and fe2 == 0x70 and fm2 == 0x527f98 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00005b and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f80003f; op2val:0x38527f98; op3val:0x3f80005b; valaddr_reg:x16; val_offset:336; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 336, x17, x15, 1584, x18)

inst_199:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000014 and fs2 == 0 and fe2 == 0x6f and fm2 == 0x3effe2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000041 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800014; op2val:0x37beffe2; op3val:0x3f800041; valaddr_reg:x16; val_offset:348; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 348, x17, x15, 1592, x18)

inst_200:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000044 and fs2 == 0 and fe2 == 0x6e and fm2 == 0x21ffaa and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00002f and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800044; op2val:0x3721ffaa; op3val:0x3f80002f; valaddr_reg:x16; val_offset:360; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 360, x17, x15, 1600, x18)

inst_201:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000062 and fs2 == 1 and fe2 == 0x69 and fm2 == 0x3fff6d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000043 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800062; op2val:0xb4bfff6d; op3val:0x3f800043; valaddr_reg:x16; val_offset:372; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 372, x17, x15, 1608, x18)

inst_202:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000055 and fs2 == 0 and fe2 == 0x6c and fm2 == 0x0fffa0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00000e and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800055; op2val:0x360fffa0; op3val:0x3f80000e; valaddr_reg:x16; val_offset:384; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 384, x17, x15, 1616, x18)

inst_203:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000005 and fs2 == 0 and fe2 == 0x6a and fm2 == 0x1ffffa and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00000b and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800005; op2val:0x351ffffa; op3val:0x3f80000b; valaddr_reg:x16; val_offset:396; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 396, x17, x15, 1624, x18)

inst_204:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00005c and fs2 == 1 and fe2 == 0x6a and fm2 == 0x1fff8d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00000d and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f80005c; op2val:0xb51fff8d; op3val:0x3f80000d; valaddr_reg:x16; val_offset:408; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 408, x17, x15, 1632, x18)

inst_205:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000009 and fs2 == 1 and fe2 == 0x6d and fm2 == 0x03fff7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000025 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800009; op2val:0xb683fff7; op3val:0x3f800025; valaddr_reg:x16; val_offset:420; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 420, x17, x15, 1640, x18)

inst_206:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00000b and fs2 == 1 and fe2 == 0x6e and fm2 == 0x13fff3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00004c and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f80000b; op2val:0xb713fff3; op3val:0x3f80004c; valaddr_reg:x16; val_offset:432; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 432, x17, x15, 1648, x18)

inst_207:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000035 and fs2 == 1 and fe2 == 0x6d and fm2 == 0x53ffa8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000036 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800035; op2val:0xb6d3ffa8; op3val:0x3f800036; valaddr_reg:x16; val_offset:444; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 444, x17, x15, 1656, x18)

inst_208:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000049 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1fffc2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00003a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800049; op2val:0xc01fffc2; op3val:0x3f80003a; valaddr_reg:x16; val_offset:456; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 456, x17, x15, 1664, x18)

inst_209:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000012 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x100006 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000035 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800012; op2val:0xc0100006; op3val:0x3f800035; valaddr_reg:x16; val_offset:468; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 468, x17, x15, 1672, x18)

inst_210:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000038 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x07ffd4 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00001e and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800038; op2val:0xc007ffd4; op3val:0x3f80001e; valaddr_reg:x16; val_offset:480; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 480, x17, x15, 1680, x18)

inst_211:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000016 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x04000e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000049 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800016; op2val:0xc004000e; op3val:0x3f800049; valaddr_reg:x16; val_offset:492; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 492, x17, x15, 1688, x18)

inst_212:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000031 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x01ffe4 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00002c and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800031; op2val:0xc001ffe4; op3val:0x3f80002c; valaddr_reg:x16; val_offset:504; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 504, x17, x15, 1696, x18)

inst_213:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000002 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x01002f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000062 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800002; op2val:0xc001002f; op3val:0x3f800062; valaddr_reg:x16; val_offset:516; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 516, x17, x15, 1704, x18)

inst_214:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000027 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x007fe0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00000f and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800027; op2val:0xc0007fe0; op3val:0x3f80000f; valaddr_reg:x16; val_offset:528; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 528, x17, x15, 1712, x18)

inst_215:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000063 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x003fa7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000015 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800063; op2val:0xc0003fa7; op3val:0x3f800015; valaddr_reg:x16; val_offset:540; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 540, x17, x15, 1720, x18)

inst_216:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000004 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x002009 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00001a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800004; op2val:0xc0002009; op3val:0x3f80001a; valaddr_reg:x16; val_offset:552; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 552, x17, x15, 1728, x18)

inst_217:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000016 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x001014 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000055 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800016; op2val:0xc0001014; op3val:0x3f800055; valaddr_reg:x16; val_offset:564; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 564, x17, x15, 1736, x18)

inst_218:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000033 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0007d4 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00000f and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800033; op2val:0xc00007d4; op3val:0x3f80000f; valaddr_reg:x16; val_offset:576; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 576, x17, x15, 1744, x18)

inst_219:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000017 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000413 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000055 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800017; op2val:0xc0000413; op3val:0x3f800055; valaddr_reg:x16; val_offset:588; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 588, x17, x15, 1752, x18)

inst_220:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00005b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0001c0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000036 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f80005b; op2val:0xc00001c0; op3val:0x3f800036; valaddr_reg:x16; val_offset:600; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 600, x17, x15, 1760, x18)

inst_221:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000031 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0000e2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000027 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800031; op2val:0xc00000e2; op3val:0x3f800027; valaddr_reg:x16; val_offset:612; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 612, x17, x15, 1768, x18)

inst_222:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000037 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000059 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000021 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800037; op2val:0xc0000059; op3val:0x3f800021; valaddr_reg:x16; val_offset:624; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 624, x17, x15, 1776, x18)

inst_223:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000023 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00001f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000005 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800023; op2val:0xc000001f; op3val:0x3f800005; valaddr_reg:x16; val_offset:636; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 636, x17, x15, 1784, x18)

inst_224:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00002c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000002 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00001d and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f80002c; op2val:0xc0000002; op3val:0x3f80001d; valaddr_reg:x16; val_offset:648; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 648, x17, x15, 1792, x18)

inst_225:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000002 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000021 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000026 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800002; op2val:0xc0000021; op3val:0x3f800026; valaddr_reg:x16; val_offset:660; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 660, x17, x15, 1800, x18)

inst_226:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00002d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7fffd6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000020 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f80002d; op2val:0xbfffffd6; op3val:0x3f800020; valaddr_reg:x16; val_offset:672; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 672, x17, x15, 1808, x18)

inst_227:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000046 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7fff99 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00001d and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800046; op2val:0xbfffff99; op3val:0x3f80001d; valaddr_reg:x16; val_offset:684; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 684, x17, x15, 1816, x18)

inst_228:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000041 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7fffdc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00005a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800041; op2val:0xbfffffdc; op3val:0x3f80005a; valaddr_reg:x16; val_offset:696; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 696, x17, x15, 1824, x18)

inst_229:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000055 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7fff62 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00000a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800055; op2val:0xbfffff62; op3val:0x3f80000a; valaddr_reg:x16; val_offset:708; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 708, x17, x15, 1832, x18)

inst_230:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000025 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7ffff9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000042 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f800025; op2val:0xbffffff9; op3val:0x3f800042; valaddr_reg:x16; val_offset:720; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 720, x17, x15, 1840, x18)

inst_231:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002e and fs2 == 0 and fe2 == 0x8f and fm2 == 0x321586 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000044 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x2e; op2val:0x47b21586; op3val:0x44; valaddr_reg:x16; val_offset:732; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 732, x17, x15, 1848, x18)

inst_232:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000028 and fs2 == 0 and fe2 == 0x8e and fm2 == 0x4ccc4d and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000014 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x28; op2val:0x474ccc4d; op3val:0x14; valaddr_reg:x16; val_offset:744; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 744, x17, x15, 1856, x18)

inst_233:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000050 and fs2 == 0 and fe2 == 0x8c and fm2 == 0x4ccb80 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x50; op2val:0x464ccb80; op3val:0x1a; valaddr_reg:x16; val_offset:756; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 756, x17, x15, 1864, x18)

inst_234:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000040 and fs2 == 0 and fe2 == 0x8b and fm2 == 0x7ff7e0 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000041 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x40; op2val:0x45fff7e0; op3val:0x41; valaddr_reg:x16; val_offset:768; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 768, x17, x15, 1872, x18)

inst_235:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002e and fs2 == 0 and fe2 == 0x8b and fm2 == 0x3207d3 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000053 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x2e; op2val:0x45b207d3; op3val:0x53; valaddr_reg:x16; val_offset:780; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 780, x17, x15, 1880, x18)

inst_236:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000029 and fs2 == 0 and fe2 == 0x8a and fm2 == 0x47aaed and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x29; op2val:0x4547aaed; op3val:0x5a; valaddr_reg:x16; val_offset:792; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 792, x17, x15, 1888, x18)

inst_237:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000045 and fs2 == 0 and fe2 == 0x88 and fm2 == 0x6d2077 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000059 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x45; op2val:0x446d2077; op3val:0x59; valaddr_reg:x16; val_offset:804; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 804, x17, x15, 1896, x18)

inst_238:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004d and fs2 == 0 and fe2 == 0x87 and fm2 == 0x54b1df and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000d and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x4d; op2val:0x43d4b1df; op3val:0xd; valaddr_reg:x16; val_offset:816; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 816, x17, x15, 1904, x18)

inst_239:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000015 and fs2 == 0 and fe2 == 0x88 and fm2 == 0x41e186 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000062 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x15; op2val:0x4441e186; op3val:0x62; valaddr_reg:x16; val_offset:828; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 828, x17, x15, 1912, x18)

inst_240:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000037 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x149e41 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000012 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x37; op2val:0x43149e41; op3val:0x12; valaddr_reg:x16; val_offset:840; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 840, x17, x15, 1920, x18)

inst_241:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000048 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x610000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002e and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x48; op2val:0x42610000; op3val:0x2e; valaddr_reg:x16; val_offset:852; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 852, x17, x15, 1928, x18)

inst_242:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000039 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x0d1f70 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000025 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39; op2val:0x420d1f70; op3val:0x25; valaddr_reg:x16; val_offset:864; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 864, x17, x15, 1936, x18)

inst_243:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005e and fs2 == 0 and fe2 == 0x82 and fm2 == 0x21882c and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004b and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5e; op2val:0x4121882c; op3val:0x4b; valaddr_reg:x16; val_offset:876; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 876, x17, x15, 1944, x18)

inst_244:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004b and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4147ae and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003b and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x4b; op2val:0x40c147ae; op3val:0x3b; valaddr_reg:x16; val_offset:888; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 888, x17, x15, 1952, x18)

inst_245:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000019 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x17ae14 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000013 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x19; op2val:0x4117ae14; op3val:0x13; valaddr_reg:x16; val_offset:900; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 900, x17, x15, 1960, x18)

inst_246:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1a69a7 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005a and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f; op2val:0x3f1a69a7; op3val:0x5a; valaddr_reg:x16; val_offset:912; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 912, x17, x15, 1968, x18)

inst_247:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000046 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x57c57c and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000005 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x46; op2val:0x3f57c57c; op3val:0x5; valaddr_reg:x16; val_offset:924; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 924, x17, x15, 1976, x18)

inst_248:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004e and fs2 == 0 and fe2 == 0x7d and fm2 == 0x16f970 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000009 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x4e; op2val:0x3e96f970; op3val:0x9; valaddr_reg:x16; val_offset:936; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 936, x17, x15, 1984, x18)

inst_249:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004b and fs2 == 1 and fe2 == 0x7a and fm2 == 0x23d70a and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000013 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x4b; op2val:0xbd23d70a; op3val:0x13; valaddr_reg:x16; val_offset:948; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 948, x17, x15, 1992, x18)

inst_250:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000043 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x1131ac and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001b and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x43; op2val:0xbe9131ac; op3val:0x1b; valaddr_reg:x16; val_offset:960; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 960, x17, x15, 2000, x18)

inst_251:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000040 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x200000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000054 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x40; op2val:0xbfa00000; op3val:0x54; valaddr_reg:x16; val_offset:972; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 972, x17, x15, 2008, x18)

inst_252:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000059 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x661cc4 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000c and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x59; op2val:0xbde61cc4; op3val:0xc; valaddr_reg:x16; val_offset:984; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 984, x17, x15, 2016, x18)

inst_253:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2e8ba3 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001f and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x2c; op2val:0xbf2e8ba3; op3val:0x1f; valaddr_reg:x16; val_offset:996; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 996, x17, x15, 2024, x18)
RVTEST_SIGBASE(x15,signature_x15_2)

inst_254:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000055 and fs2 == 1 and fe2 == 0x8e and fm2 == 0x40c0d9 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000008 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x55; op2val:0xc740c0d9; op3val:0x8; valaddr_reg:x16; val_offset:1008; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1008, x17, x15, 0, x18)

inst_255:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000031 and fs2 == 1 and fe2 == 0x8e and fm2 == 0x272f4e and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000e and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x31; op2val:0xc7272f4e; op3val:0xe; valaddr_reg:x16; val_offset:1020; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1020, x17, x15, 8, x18)

inst_256:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000032 and fs2 == 1 and fe2 == 0x8d and fm2 == 0x23da3d and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000050 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x32; op2val:0xc6a3da3d; op3val:0x50; valaddr_reg:x16; val_offset:1032; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1032, x17, x15, 16, x18)

inst_257:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000d and fs2 == 1 and fe2 == 0x8e and fm2 == 0x1d8a8a and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000009 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0xd; op2val:0xc71d8a8a; op3val:0x9; valaddr_reg:x16; val_offset:1044; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1044, x17, x15, 24, x18)

inst_258:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000055 and fs2 == 1 and fe2 == 0x8a and fm2 == 0x40c727 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000022 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x55; op2val:0xc540c727; op3val:0x22; valaddr_reg:x16; val_offset:1056; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1056, x17, x15, 32, x18)

inst_259:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005d and fs2 == 1 and fe2 == 0x89 and fm2 == 0x303134 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000f and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5d; op2val:0xc4b03134; op3val:0xf; valaddr_reg:x16; val_offset:1068; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1068, x17, x15, 40, x18)

inst_260:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003d and fs2 == 1 and fe2 == 0x89 and fm2 == 0x06653f and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000031 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d; op2val:0xc486653f; op3val:0x31; valaddr_reg:x16; val_offset:1080; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1080, x17, x15, 48, x18)

inst_261:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000043 and fs2 == 1 and fe2 == 0x87 and fm2 == 0x74eece and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000035 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x43; op2val:0xc3f4eece; op3val:0x35; valaddr_reg:x16; val_offset:1092; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1092, x17, x15, 56, x18)

inst_262:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005a and fs2 == 1 and fe2 == 0x86 and fm2 == 0x366eef and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000023 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5a; op2val:0xc3366eef; op3val:0x23; valaddr_reg:x16; val_offset:1104; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1104, x17, x15, 64, x18)

inst_263:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000062 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x273eb2 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x62; op2val:0xc2a73eb2; op3val:0x3; valaddr_reg:x16; val_offset:1116; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1116, x17, x15, 72, x18)

inst_264:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x85 and fm2 == 0x02fbf0 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001e and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f; op2val:0xc282fbf0; op3val:0x1e; valaddr_reg:x16; val_offset:1128; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1128, x17, x15, 80, x18)

inst_265:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000034 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x1e7627 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000c and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x34; op2val:0xc21e7627; op3val:0xc; valaddr_reg:x16; val_offset:1140; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1140, x17, x15, 88, x18)

inst_266:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004a and fs2 == 1 and fe2 == 0x82 and fm2 == 0x62cf91 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000019 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x4a; op2val:0xc162cf91; op3val:0x19; valaddr_reg:x16; val_offset:1152; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1152, x17, x15, 96, x18)

inst_267:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000032 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x3851ec and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000040 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x32; op2val:0xc13851ec; op3val:0x40; valaddr_reg:x16; val_offset:1164; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1164, x17, x15, 104, x18)

inst_268:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x81 and fm2 == 0x200000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003b and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f; op2val:0xc0a00000; op3val:0x3b; valaddr_reg:x16; val_offset:1176; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1176, x17, x15, 112, x18)

inst_269:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000004 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x3b0000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003b and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x4; op2val:0xc23b0000; op3val:0x3b; valaddr_reg:x16; val_offset:1188; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1188, x17, x15, 120, x18)

inst_270:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000034 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x34ec4f and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000053 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x34; op2val:0xc034ec4f; op3val:0x53; valaddr_reg:x16; val_offset:1200; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1200, x17, x15, 128, x18)

inst_271:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000041 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x685e86 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001b and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x41; op2val:0xbf685e86; op3val:0x1b; valaddr_reg:x16; val_offset:1212; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1212, x17, x15, 136, x18)

inst_272:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000012 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2aaaab and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000020 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x12; op2val:0xc02aaaab; op3val:0x20; valaddr_reg:x16; val_offset:1224; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1224, x17, x15, 144, x18)

inst_273:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000006 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4aaaab and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000b and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x6; op2val:0xc04aaaab; op3val:0xb; valaddr_reg:x16; val_offset:1236; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1236, x17, x15, 152, x18)

inst_274:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000019 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x733333 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005b and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x19; op2val:0xc0733333; op3val:0x5b; valaddr_reg:x16; val_offset:1248; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1248, x17, x15, 160, x18)

inst_275:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000031 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x4687d6 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000011 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x31; op2val:0xbec687d6; op3val:0x11; valaddr_reg:x16; val_offset:1260; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1260, x17, x15, 168, x18)

inst_276:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000027 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5fff96 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000012 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f000027; op2val:0x3f5fff96; op3val:0x7f000012; valaddr_reg:x16; val_offset:1272; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1272, x17, x15, 176, x18)

inst_277:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000048 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6fff49 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000017 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f000048; op2val:0x3f6fff49; op3val:0x7f000017; valaddr_reg:x16; val_offset:1284; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1284, x17, x15, 184, x18)

inst_278:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00002f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x77ff29 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00003d and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f00002f; op2val:0x3f77ff29; op3val:0x7f00003d; valaddr_reg:x16; val_offset:1296; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1296, x17, x15, 192, x18)

inst_279:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00002f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7bff25 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00003e and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f00002f; op2val:0x3f7bff25; op3val:0x7f00003e; valaddr_reg:x16; val_offset:1308; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1308, x17, x15, 200, x18)

inst_280:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00001e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7dff3e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000042 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f00001e; op2val:0x3f7dff3e; op3val:0x7f000042; valaddr_reg:x16; val_offset:1320; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1320, x17, x15, 208, x18)

inst_281:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000008 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7effe4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000005 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f000008; op2val:0x3f7effe4; op3val:0x7f000005; valaddr_reg:x16; val_offset:1332; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1332, x17, x15, 216, x18)

inst_282:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000054 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7f7f04 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000029 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f000054; op2val:0x3f7f7f04; op3val:0x7f000029; valaddr_reg:x16; val_offset:1344; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1344, x17, x15, 224, x18)

inst_283:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00005b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fbe9e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000055 and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f00005b; op2val:0x3f7fbe9e; op3val:0x7f000055; valaddr_reg:x16; val_offset:1356; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1356, x17, x15, 232, x18)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
test_fp:
.word 0x1e
.word 0xbfd11111
.word 0x30
.word 0x7f000003
.word 0x3effff12
.word 0x7f000039
.word 0x7f000053
.word 0x3f3fff3c
.word 0x7f000023
.word 0x7f000027
.word 0x7f000027
.word 0x7f000012
.word 0x7f000048
.word 0x7f000048
.word 0x7f000048
.word 0x7f00002f
.word 0x3f77ff29
.word 0x3f77ff29
.word 0x7f00002f
.word 0x7f00002f
.word 0x7f00003e
.word 0x7f00001e
.word 0x3f7dff3e
.word 0x7f00001e
.word 0x7f000008
.word 0x3f7effe4
.word 0x3f7effe4
.word 0x7f000054
.word 0x7f000054
.word 0x7f000054
.word 0x7f00005b
.word 0x3f7fbe9e
.word 0x7f00005b
.word 0x7f00005f
.word 0x3f7fdf1a
.word 0x7f000013
.word 0x7f000056
.word 0x3f7fef48
.word 0x7f000005
.word 0x7f000060
.word 0x3f7ff69c
.word 0x7f000051
.word 0x7f000037
.word 0x3f7ffb30
.word 0x7f000030
.word 0x7f000030
.word 0x3f7ffcdc
.word 0x7f000061
.word 0x7f00004a
.word 0x3f7ffe10
.word 0x7f00002d
.word 0x7f00003e
.word 0x3f7ffea4
.word 0x7f00002f
.word 0x7f000053
.word 0x3f7ffeda
.word 0x7f00001f
.word 0x7f00003e
.word 0x3f7fff36
.word 0x7f000016
.word 0x7f000054
.word 0x3f7fff2a
.word 0x7f00000e
.word 0x7f00000e
.word 0x3f7fff88
.word 0x7f000029
.word 0x7f000030
.word 0x3f7fff3e
.word 0x7f00002e
.word 0x7f00005c
.word 0x3f7ffe9c
.word 0x7f000054
.word 0x7f000006
.word 0xc020001e
.word 0x7f00004d
.word 0x7f000030
.word 0xc02fffde
.word 0x7f000041
.word 0x7f00004b
.word 0xc037ff9b
.word 0x7f00000e
.word 0x7f000049
.word 0xc03bffbd
.word 0x7f000051
.word 0x7f000063
.word 0xc03dff88
.word 0x7f000037
.word 0x7f00004b
.word 0xc03eff98
.word 0x7f000011
.word 0x7f000018
.word 0xc03f7ff9
.word 0x7f00003a
.word 0x7f000002
.word 0xc03fc002
.word 0x7f00000b
.word 0x7f000013
.word 0xc03fe010
.word 0x7f000059
.word 0x7f000004
.word 0xc03ff022
.word 0x7f000050
.word 0x7f000031
.word 0xc03ff7e3
.word 0x7f00005a
.word 0x7f000026
.word 0xc03ffbdd
.word 0x7f00002d
.word 0x7f000030
.word 0xc03ffdd8
.word 0x7f000041
.word 0x7f000005
.word 0xc03ffefb
.word 0x7f000005
.word 0x7f000026
.word 0xc03fff60
.word 0x7f000033
.word 0x7f00003d
.word 0xc03fff6c
.word 0x7f000010
.word 0x7f00003f
.word 0xc03fffab
.word 0x7f000053
.word 0x7f000063
.word 0xc03fff64
.word 0x7f000012
.word 0x7f000044
.word 0xc03fffab
.word 0x7f000033
.word 0x7f00001c
.word 0xc03ffff6
.word 0x7f000049
.word 0x7f000042
.word 0xc03fffae
.word 0x7f000026
.word 0x7f000041
.word 0xc03fffc0
.word 0x7f000045
.word 0x7f000040
.word 0xc03fffc8
.word 0x7f000052
.word 0x800011
.word 0x3effff4e
.word 0x800024
.word 0x800058
.word 0x3e7ffd68
.word 0x80003d
.word 0x800028
.word 0x3dfffd80
.word 0x800023
.word 0x800044
.word 0x3d7ffc78
.word 0x800018
.word 0x80002f
.word 0x3cffe7e2
.word 0x80005f
.word 0x80005b
.word 0x3c7fdfca
.word 0x80003f
.word 0x800059
.word 0x3bffb64e
.word 0x800049
.word 0x80005f
.word 0x3b7f9f42
.word 0x800030
.word 0x80004b
.word 0x3afe9f6b
.word 0x800058
.word 0x800036
.word 0x3a7e3f95
.word 0x800038
.word 0x80004f
.word 0x39fdaf63
.word 0x800025
.word 0x80004b
.word 0x39753f70
.word 0x800056
.word 0x800059
.word 0x38f17f58
.word 0x80003a
.word 0x800039
.word 0x387bff90
.word 0x800008
.word 0x800012
.word 0x379dffea
.word 0x800062
.word 0x800017
.word 0x3753ffda
.word 0x800016
.word 0x80001c
.word 0x35afffda
.word 0x800035
.word 0x80001d
.word 0xb59fffdc
.word 0x80002a
.word 0x800060
.word 0xb3ffff40
.word 0x800011
.word 0x80000b
.word 0xb59ffff2
.word 0x800012
.word 0x800049
.word 0xb72fff9c
.word 0x80005c
.word 0x80003e
.word 0xb5cfff9b
.word 0x80000f
.word 0x80005f
.word 0xb6ffff42
.word 0x800041
.word 0x800026
.word 0xc01fffe1
.word 0x800020
.word 0x800052
.word 0xc00fffb9
.word 0x80002a
.word 0x800016
.word 0xc008000d
.word 0x800048
.word 0x80005f
.word 0xc003ffaa
.word 0x800017
.word 0x800008
.word 0xc002001c
.word 0x800048
.word 0x80000e
.word 0xc000fff5
.word 0x800007
.word 0x800060
.word 0xc0007fad
.word 0x80001a
.word 0x800017
.word 0xc0003fff
.word 0x80002c
.word 0x80000b
.word 0xc0002008
.word 0x800026
.word 0x800045
.word 0xc0000fc9
.word 0x80001d
.word 0x800009
.word 0xc00007fd
.word 0x80000d
.word 0x800038
.word 0xc00003f7
.word 0x80005e
.word 0x800032
.word 0xc00001d8
.word 0x800014
.word 0x800015
.word 0xc00000fb
.word 0x800021
.word 0x800038
.word 0xc0000052
.word 0x800015
.word 0x80004f
.word 0xc0000007
.word 0x80002d
.word 0x80000f
.word 0xc000003f
.word 0x80005d
.word 0x800009
.word 0xc0000028
.word 0x800043
.word 0x80002e
.word 0xbfffffde
.word 0x80002a
.word 0x800026
.word 0xc000000e
.word 0x800060
.word 0x800029
.word 0xbfffffcf
.word 0x80001d
.word 0x800005
.word 0xc0000022
.word 0x80004d
.word 0x80001e
.word 0xc0000011
.word 0x80005d
.word 0x2f
.word 0x47ae4c23
.word 0xa
.word 0x12
.word 0x48aaaa14
.word 0x54
.word 0x5
.word 0x49b33320
.word 0xb
.word 0x9
.word 0x4955550b
.word 0x29
.word 0x2e
.word 0x482c851a
.word 0x54
.word 0x11
.word 0x48ed2c98
.word 0x4e
.word 0x49
.word 0x47deaf41
.word 0xc
.word 0x56
.word 0x47bdc43f
.word 0x25
.word 0x3c
.word 0x48084404
.word 0x3b
.word 0xc
.word 0x492a7fed
.word 0xd
.word 0x58
.word 0x47ba1713
.word 0x22
.word 0x4f
.word 0x47cf5754
.word 0x19
.word 0x12
.word 0x48e38715
.word 0x3
.word 0x37
.word 0x4814efad
.word 0x6
.word 0x16
.word 0x48ba2cac
.word 0x49
.word 0xb
.word 0x493a2d56
.word 0x54
.word 0xf
.word 0x4908880e
.word 0x32
.word 0x40
.word 0x47ffffa2
.word 0xe
.word 0x1a
.word 0x489d8989
.word 0x30
.word 0x4d
.word 0x47d4c6fb
.word 0x44
.word 0x20
.word 0x487fffba
.word 0x1e
.word 0x60
.word 0x47aaaa58
.word 0x3b
.word 0x20
.word 0x487fff7a
.word 0x41
.word 0x2f
.word 0xc7ae4c96
.word 0x20
.word 0x35
.word 0xc7e7d9a7
.word 0x20
.word 0x24
.word 0xc8471d00
.word 0x51
.word 0x41
.word 0xc7ec4f08
.word 0x23
.word 0x26
.word 0xc850d7cf
.word 0x24
.word 0x50
.word 0xc7c999d2
.word 0x24
.word 0x36
.word 0xc81684ce
.word 0xf
.word 0x5e
.word 0xc7ad9e23
.word 0x23
.word 0x9
.word 0xc9631ce2
.word 0x40
.word 0x23
.word 0xc869d442
.word 0x15
.word 0x41
.word 0xc7fbf053
.word 0xb
.word 0x3f
.word 0xc8020044
.word 0x44
.word 0x37
.word 0xc814ed7f
.word 0x1a
.word 0x2f
.word 0xc82e49fd
.word 0x57
.word 0x4e
.word 0xc7d20bf6
.word 0x4b
.word 0x2e
.word 0xc8321608
.word 0x57
.word 0x59
.word 0xc7b8172d
.word 0x5e
.word 0x58
.word 0xc7ba2ebf
.word 0x44
.word 0x4f
.word 0xc7cf64aa
.word 0x32
.word 0x26
.word 0xc857947d
.word 0x33
.word 0x28
.word 0xc84cccf0
.word 0x1b
.word 0x31
.word 0xc8272f63
.word 0x4b
.word 0x3f
.word 0xc802084f
.word 0x30
.word 0xe
.word 0x489248eb
.word 0x1a
.word 0x26
.word 0x47579207
.word 0x54
.word 0x51
.word 0x464a434f
.word 0x2e
.word 0x43
.word 0x45f48504
.word 0x27
.word 0x5f
.word 0x452c6faa
.word 0x2a
.word 0x60
.word 0x44aa9b00
.word 0x30
.word 0x47
.word 0x446692ee
.word 0x36
.word 0x26
.word 0x4457835e
.word 0xb
.word 0x1d
.word 0x440c8d3e
.word 0x51
.word 0x2a
.word 0x4341d555
.word 0x34
.word 0xb
.word 0x43b5dd17
.word 0x60
.word 0x4f
.word 0x41cba544
.word 0x26
.word 0x1
.word 0x4476c000
.word 0x26
.word 0x53
.word 0x40bbc250
.word 0x1a
.word 0x60
.word 0x3ffd5555
.word 0x43
.word 0x44
.word 0x3f94b4b5
.word 0x32
.word 0x1e
.word 0x3f444444
.word 0x2a
.word 0x1a
.word 0xbf9d89d9
.word 0x41
.word 0x5b
.word 0xbf1d89d9
.word 0x49
.word 0x4d
.word 0xbf3a2e8c
.word 0x41
.word 0x60
.word 0xbf755555
.word 0x61
.word 0x44
.word 0xbe078788
.word 0xc
.word 0x2f
.word 0xbf969131
.word 0x38
.word 0x3
.word 0xc9aaab8d
.word 0x54
.word 0x4d
.word 0xc6d4c98f
.word 0x4f
.word 0x1
.word 0xc98002e0
.word 0x5b
.word 0x1c
.word 0xc6924fdb
.word 0x5d
.word 0xf
.word 0xc6888a89
.word 0xe
.word 0x7
.word 0xc6925a00
.word 0x3a
.word 0x7
.word 0xc6125892
.word 0x1a
.word 0x3b
.word 0xc40af97e
.word 0x1d
.word 0x33
.word 0xc3a11919
.word 0x2f
.word 0x3d
.word 0xc3078219
.word 0x49
.word 0xc
.word 0xc3ae8aab
.word 0x5c
.word 0x42
.word 0xc201d174
.word 0x5d
.word 0x5d
.word 0xc13a268a
.word 0x39
.word 0x53
.word 0xc0cc565d
.word 0x11
.word 0x5d
.word 0xc058c632
.word 0x3a
.word 0xe
.word 0xc1692492
.word 0x4b
.word 0x31
.word 0xbfd39783
.word 0x10
.word 0x3d
.word 0xbf5e6d1d
.word 0x14
.word 0x1d
.word 0xc032c235
.word 0x40
.word 0x1a
.word 0xc0562762
.word 0x4e
.word 0x10
.word 0xbf800000
.word 0xb
.word 0x38
.word 0xbf892492
.word 0x39
.word 0x17
.word 0xbff8d74e
.word 0x2c
.word 0x3f80004b
.word 0x3effff0e
.word 0x3f800017
.word 0x3f800005
.word 0x3e7ffce6
.word 0x3f800062
.word 0x3f800008
.word 0x3dfffaf0
.word 0x3f800050
.word 0x3f800040
.word 0x3d7ffc20
.word 0x3f80001b
.word 0x3f800001
.word 0x3cffeb3e
.word 0x3f800053
.word 0x3f80002a
.word 0x3c7fe82c
.word 0x3f80002f
.word 0x3f800027
.word 0x3bffd2b2
.word 0x3f80002d
.word 0x3f800010
.word 0x3b7f3fe0
.word 0x3f800060
.word 0x3f800055
.word 0x3afed757
.word 0x3f80004a
.word 0x3f80002c
.word 0x3a7e6fa9
.word 0x3f800032
.word 0x3f800003
.word 0x39fedffa
.word 0x3f800012
.word 0x3f800009
.word 0x397cdfee
.word 0x3f800019
.word 0x3f800014
.word 0x38ec7fdb
.word 0x3f80004e
.word 0x3f80003f
.word 0x38527f98
.word 0x3f80005b
.word 0x3f800014
.word 0x37beffe2
.word 0x3f800041
.word 0x3f800044
.word 0x3721ffaa
.word 0x3f80002f
.word 0x3f800062
.word 0xb4bfff6d
.word 0x3f800043
.word 0x3f800055
.word 0x360fffa0
.word 0x3f80000e
.word 0x3f800005
.word 0x351ffffa
.word 0x3f80000b
.word 0x3f80005c
.word 0xb51fff8d
.word 0x3f80000d
.word 0x3f800009
.word 0xb683fff7
.word 0x3f800025
.word 0x3f80000b
.word 0xb713fff3
.word 0x3f80004c
.word 0x3f800035
.word 0xb6d3ffa8
.word 0x3f800036
.word 0x3f800049
.word 0xc01fffc2
.word 0x3f80003a
.word 0x3f800012
.word 0xc0100006
.word 0x3f800035
.word 0x3f800038
.word 0xc007ffd4
.word 0x3f80001e
.word 0x3f800016
.word 0xc004000e
.word 0x3f800049
.word 0x3f800031
.word 0xc001ffe4
.word 0x3f80002c
.word 0x3f800002
.word 0xc001002f
.word 0x3f800062
.word 0x3f800027
.word 0xc0007fe0
.word 0x3f80000f
.word 0x3f800063
.word 0xc0003fa7
.word 0x3f800015
.word 0x3f800004
.word 0xc0002009
.word 0x3f80001a
.word 0x3f800016
.word 0xc0001014
.word 0x3f800055
.word 0x3f800033
.word 0xc00007d4
.word 0x3f80000f
.word 0x3f800017
.word 0xc0000413
.word 0x3f800055
.word 0x3f80005b
.word 0xc00001c0
.word 0x3f800036
.word 0x3f800031
.word 0xc00000e2
.word 0x3f800027
.word 0x3f800037
.word 0xc0000059
.word 0x3f800021
.word 0x3f800023
.word 0xc000001f
.word 0x3f800005
.word 0x3f80002c
.word 0xc0000002
.word 0x3f80001d
.word 0x3f800002
.word 0xc0000021
.word 0x3f800026
.word 0x3f80002d
.word 0xbfffffd6
.word 0x3f800020
.word 0x3f800046
.word 0xbfffff99
.word 0x3f80001d
.word 0x3f800041
.word 0xbfffffdc
.word 0x3f80005a
.word 0x3f800055
.word 0xbfffff62
.word 0x3f80000a
.word 0x3f800025
.word 0xbffffff9
.word 0x3f800042
.word 0x2e
.word 0x47b21586
.word 0x44
.word 0x28
.word 0x474ccc4d
.word 0x14
.word 0x50
.word 0x464ccb80
.word 0x1a
.word 0x40
.word 0x45fff7e0
.word 0x41
.word 0x2e
.word 0x45b207d3
.word 0x53
.word 0x29
.word 0x4547aaed
.word 0x5a
.word 0x45
.word 0x446d2077
.word 0x59
.word 0x4d
.word 0x43d4b1df
.word 0xd
.word 0x15
.word 0x4441e186
.word 0x62
.word 0x37
.word 0x43149e41
.word 0x12
.word 0x48
.word 0x42610000
.word 0x2e
.word 0x39
.word 0x420d1f70
.word 0x25
.word 0x5e
.word 0x4121882c
.word 0x4b
.word 0x4b
.word 0x40c147ae
.word 0x3b
.word 0x19
.word 0x4117ae14
.word 0x13
.word 0x3f
.word 0x3f1a69a7
.word 0x5a
.word 0x46
.word 0x3f57c57c
.word 0x5
.word 0x4e
.word 0x3e96f970
.word 0x9
.word 0x4b
.word 0xbd23d70a
.word 0x13
.word 0x43
.word 0xbe9131ac
.word 0x1b
.word 0x40
.word 0xbfa00000
.word 0x54
.word 0x59
.word 0xbde61cc4
.word 0xc
.word 0x2c
.word 0xbf2e8ba3
.word 0x1f
.word 0x55
.word 0xc740c0d9
.word 0x8
.word 0x31
.word 0xc7272f4e
.word 0xe
.word 0x32
.word 0xc6a3da3d
.word 0x50
.word 0xd
.word 0xc71d8a8a
.word 0x9
.word 0x55
.word 0xc540c727
.word 0x22
.word 0x5d
.word 0xc4b03134
.word 0xf
.word 0x3d
.word 0xc486653f
.word 0x31
.word 0x43
.word 0xc3f4eece
.word 0x35
.word 0x5a
.word 0xc3366eef
.word 0x23
.word 0x62
.word 0xc2a73eb2
.word 0x3
.word 0x3f
.word 0xc282fbf0
.word 0x1e
.word 0x34
.word 0xc21e7627
.word 0xc
.word 0x4a
.word 0xc162cf91
.word 0x19
.word 0x32
.word 0xc13851ec
.word 0x40
.word 0x3f
.word 0xc0a00000
.word 0x3b
.word 0x4
.word 0xc23b0000
.word 0x3b
.word 0x34
.word 0xc034ec4f
.word 0x53
.word 0x41
.word 0xbf685e86
.word 0x1b
.word 0x12
.word 0xc02aaaab
.word 0x20
.word 0x6
.word 0xc04aaaab
.word 0xb
.word 0x19
.word 0xc0733333
.word 0x5b
.word 0x31
.word 0xbec687d6
.word 0x11
.word 0x7f000027
.word 0x3f5fff96
.word 0x7f000012
.word 0x7f000048
.word 0x3f6fff49
.word 0x7f000017
.word 0x7f00002f
.word 0x3f77ff29
.word 0x7f00003d
.word 0x7f00002f
.word 0x3f7bff25
.word 0x7f00003e
.word 0x7f00001e
.word 0x3f7dff3e
.word 0x7f000042
.word 0x7f000008
.word 0x3f7effe4
.word 0x7f000005
.word 0x7f000054
.word 0x3f7f7f04
.word 0x7f000029
.word 0x7f00005b
.word 0x3f7fbe9e
.word 0x7f000055
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_2:
    .fill 60*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
