
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.5.2
// timestamp : Tue Sep  7 16:07:52 2021 GMT
// usage     : riscv_ctg \
//                  -- cgf $cgf \
//                  -- xlen $xlen \
// -----------
//
// -----------
// Copyright (c) 2021. IIT Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fadd.s instruction of the RISC-V F extension for the fadd_b8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fadd_b8)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs1 == rs2 == rd, rs1==f7, rs2==f7, rd==f7, fs1 == 0 and fe1 == 0x7c and fm1 == 0x1f4fe0 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x1f4fe0 and rm_val == 0  
// opcode: fadd.s ; op1:f7; op2:f7; dest:f7; op1val:0x3e1f4fe0; op2val:0x3e1f4fe0; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f7, f7, f7, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1:
// rs2 == rd != rs1, rs1==f24, rs2==f26, rd==f26, fs1 == 0 and fe1 == 0x7e and fm1 == 0x45f7d6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x45f7d6 and rm_val == 4  
// opcode: fadd.s ; op1:f24; op2:f26; dest:f26; op1val:0x3f45f7d6; op2val:0xbf45f7d6; valaddr_reg:x16; val_offset:8; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f26, f24, f26, 0x4, 0, x16, 8, x17, x15, 8, x18)

inst_2:
// rs1 == rd != rs2, rs1==f25, rs2==f20, rd==f25, fs1 == 0 and fe1 == 0x7e and fm1 == 0x45f7d6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x45f7d6 and rm_val == 3  
// opcode: fadd.s ; op1:f25; op2:f20; dest:f25; op1val:0x3f45f7d6; op2val:0xbf45f7d6; valaddr_reg:x16; val_offset:16; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f25, f25, f20, 0x3, 0, x16, 16, x17, x15, 16, x18)

inst_3:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==f31, rs2==f16, rd==f8, fs1 == 0 and fe1 == 0x7e and fm1 == 0x45f7d6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x45f7d6 and rm_val == 2  
// opcode: fadd.s ; op1:f31; op2:f16; dest:f8; op1val:0x3f45f7d6; op2val:0xbf45f7d6; valaddr_reg:x16; val_offset:24; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f8, f31, f16, 0x2, 0, x16, 24, x17, x15, 24, x18)

inst_4:
// rs1 == rs2 != rd, rs1==f6, rs2==f6, rd==f12, fs1 == 0 and fe1 == 0x7e and fm1 == 0x45f7d6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x45f7d6 and rm_val == 1  
// opcode: fadd.s ; op1:f6; op2:f6; dest:f12; op1val:0x3f45f7d6; op2val:0x3f45f7d6; valaddr_reg:x16; val_offset:32; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f6, f6, 0x1, 0, x16, 32, x17, x15, 32, x18)

inst_5:
// rs1==f29, rs2==f31, rd==f22, fs1 == 0 and fe1 == 0x7e and fm1 == 0x45f7d6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x45f7d6 and rm_val == 0  
// opcode: fadd.s ; op1:f29; op2:f31; dest:f22; op1val:0x3f45f7d6; op2val:0xbf45f7d6; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f22, f29, f31, 0x0, 0, x16, 40, x17, x15, 40, x18)

inst_6:
// rs1==f1, rs2==f4, rd==f13, fs1 == 0 and fe1 == 0x7d and fm1 == 0x19c2c8 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x19c2c8 and rm_val == 4  
// opcode: fadd.s ; op1:f1; op2:f4; dest:f13; op1val:0x3e99c2c8; op2val:0xbe99c2c8; valaddr_reg:x16; val_offset:48; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f13, f1, f4, 0x4, 0, x16, 48, x17, x15, 48, x18)

inst_7:
// rs1==f17, rs2==f2, rd==f27, fs1 == 0 and fe1 == 0x7d and fm1 == 0x19c2c8 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x19c2c8 and rm_val == 3  
// opcode: fadd.s ; op1:f17; op2:f2; dest:f27; op1val:0x3e99c2c8; op2val:0xbe99c2c8; valaddr_reg:x16; val_offset:56; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f27, f17, f2, 0x3, 0, x16, 56, x17, x15, 56, x18)

inst_8:
// rs1==f28, rs2==f29, rd==f31, fs1 == 0 and fe1 == 0x7d and fm1 == 0x19c2c8 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x19c2c8 and rm_val == 2  
// opcode: fadd.s ; op1:f28; op2:f29; dest:f31; op1val:0x3e99c2c8; op2val:0xbe99c2c8; valaddr_reg:x16; val_offset:64; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f31, f28, f29, 0x2, 0, x16, 64, x17, x15, 64, x18)

inst_9:
// rs1==f20, rs2==f19, rd==f16, fs1 == 0 and fe1 == 0x7d and fm1 == 0x19c2c8 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x19c2c8 and rm_val == 1  
// opcode: fadd.s ; op1:f20; op2:f19; dest:f16; op1val:0x3e99c2c8; op2val:0xbe99c2c8; valaddr_reg:x16; val_offset:72; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f16, f20, f19, 0x1, 0, x16, 72, x17, x15, 72, x18)

inst_10:
// rs1==f12, rs2==f24, rd==f18, fs1 == 0 and fe1 == 0x7d and fm1 == 0x19c2c8 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x19c2c8 and rm_val == 0  
// opcode: fadd.s ; op1:f12; op2:f24; dest:f18; op1val:0x3e99c2c8; op2val:0xbe99c2c8; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f18, f12, f24, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_11:
// rs1==f14, rs2==f27, rd==f9, fs1 == 0 and fe1 == 0x73 and fm1 == 0x2515ba and fs2 == 1 and fe2 == 0x73 and fm2 == 0x2515ba and rm_val == 4  
// opcode: fadd.s ; op1:f14; op2:f27; dest:f9; op1val:0x39a515ba; op2val:0xb9a515ba; valaddr_reg:x16; val_offset:88; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f9, f14, f27, 0x4, 0, x16, 88, x17, x15, 88, x18)

inst_12:
// rs1==f3, rs2==f23, rd==f2, fs1 == 0 and fe1 == 0x73 and fm1 == 0x2515ba and fs2 == 1 and fe2 == 0x73 and fm2 == 0x2515ba and rm_val == 3  
// opcode: fadd.s ; op1:f3; op2:f23; dest:f2; op1val:0x39a515ba; op2val:0xb9a515ba; valaddr_reg:x16; val_offset:96; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f2, f3, f23, 0x3, 0, x16, 96, x17, x15, 96, x18)

inst_13:
// rs1==f0, rs2==f14, rd==f23, fs1 == 0 and fe1 == 0x73 and fm1 == 0x2515ba and fs2 == 1 and fe2 == 0x73 and fm2 == 0x2515ba and rm_val == 2  
// opcode: fadd.s ; op1:f0; op2:f14; dest:f23; op1val:0x39a515ba; op2val:0xb9a515ba; valaddr_reg:x16; val_offset:104; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f23, f0, f14, 0x2, 0, x16, 104, x17, x15, 104, x18)

inst_14:
// rs1==f30, rs2==f11, rd==f20, fs1 == 0 and fe1 == 0x73 and fm1 == 0x2515ba and fs2 == 1 and fe2 == 0x73 and fm2 == 0x2515ba and rm_val == 1  
// opcode: fadd.s ; op1:f30; op2:f11; dest:f20; op1val:0x39a515ba; op2val:0xb9a515ba; valaddr_reg:x16; val_offset:112; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f20, f30, f11, 0x1, 0, x16, 112, x17, x15, 112, x18)

inst_15:
// rs1==f27, rs2==f13, rd==f6, fs1 == 0 and fe1 == 0x73 and fm1 == 0x2515ba and fs2 == 1 and fe2 == 0x73 and fm2 == 0x2515ba and rm_val == 0  
// opcode: fadd.s ; op1:f27; op2:f13; dest:f6; op1val:0x39a515ba; op2val:0xb9a515ba; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f6, f27, f13, 0x0, 0, x16, 120, x17, x15, 120, x18)

inst_16:
// rs1==f22, rs2==f8, rd==f28, fs1 == 0 and fe1 == 0x7e and fm1 == 0x75755e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x75755e and rm_val == 4  
// opcode: fadd.s ; op1:f22; op2:f8; dest:f28; op1val:0x3f75755e; op2val:0xbf75755e; valaddr_reg:x16; val_offset:128; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f28, f22, f8, 0x4, 0, x16, 128, x17, x15, 128, x18)

inst_17:
// rs1==f18, rs2==f25, rd==f4, fs1 == 0 and fe1 == 0x7e and fm1 == 0x75755e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x75755e and rm_val == 3  
// opcode: fadd.s ; op1:f18; op2:f25; dest:f4; op1val:0x3f75755e; op2val:0xbf75755e; valaddr_reg:x16; val_offset:136; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f4, f18, f25, 0x3, 0, x16, 136, x17, x15, 136, x18)

inst_18:
// rs1==f21, rs2==f9, rd==f10, fs1 == 0 and fe1 == 0x7e and fm1 == 0x75755e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x75755e and rm_val == 2  
// opcode: fadd.s ; op1:f21; op2:f9; dest:f10; op1val:0x3f75755e; op2val:0xbf75755e; valaddr_reg:x16; val_offset:144; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f10, f21, f9, 0x2, 0, x16, 144, x17, x15, 144, x18)

inst_19:
// rs1==f26, rs2==f18, rd==f17, fs1 == 0 and fe1 == 0x7e and fm1 == 0x75755e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x75755e and rm_val == 1  
// opcode: fadd.s ; op1:f26; op2:f18; dest:f17; op1val:0x3f75755e; op2val:0xbf75755e; valaddr_reg:x16; val_offset:152; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f17, f26, f18, 0x1, 0, x16, 152, x17, x15, 152, x18)

inst_20:
// rs1==f9, rs2==f12, rd==f24, fs1 == 0 and fe1 == 0x7e and fm1 == 0x75755e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x75755e and rm_val == 0  
// opcode: fadd.s ; op1:f9; op2:f12; dest:f24; op1val:0x3f75755e; op2val:0xbf75755e; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f24, f9, f12, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_21:
// rs1==f16, rs2==f22, rd==f0, fs1 == 0 and fe1 == 0x7d and fm1 == 0x2977d6 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x2977d6 and rm_val == 4  
// opcode: fadd.s ; op1:f16; op2:f22; dest:f0; op1val:0x3ea977d6; op2val:0xbea977d6; valaddr_reg:x16; val_offset:168; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f0, f16, f22, 0x4, 0, x16, 168, x17, x15, 168, x18)

inst_22:
// rs1==f19, rs2==f0, rd==f5, fs1 == 0 and fe1 == 0x7d and fm1 == 0x2977d6 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x2977d6 and rm_val == 3  
// opcode: fadd.s ; op1:f19; op2:f0; dest:f5; op1val:0x3ea977d6; op2val:0xbea977d6; valaddr_reg:x16; val_offset:176; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f5, f19, f0, 0x3, 0, x16, 176, x17, x15, 176, x18)

inst_23:
// rs1==f23, rs2==f28, rd==f29, fs1 == 0 and fe1 == 0x7d and fm1 == 0x2977d6 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x2977d6 and rm_val == 2  
// opcode: fadd.s ; op1:f23; op2:f28; dest:f29; op1val:0x3ea977d6; op2val:0xbea977d6; valaddr_reg:x16; val_offset:184; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f29, f23, f28, 0x2, 0, x16, 184, x17, x15, 184, x18)

inst_24:
// rs1==f10, rs2==f5, rd==f14, fs1 == 0 and fe1 == 0x7d and fm1 == 0x2977d6 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x2977d6 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f5; dest:f14; op1val:0x3ea977d6; op2val:0xbea977d6; valaddr_reg:x16; val_offset:192; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f14, f10, f5, 0x1, 0, x16, 192, x17, x15, 192, x18)

inst_25:
// rs1==f13, rs2==f3, rd==f11, fs1 == 0 and fe1 == 0x7d and fm1 == 0x2977d6 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x2977d6 and rm_val == 0  
// opcode: fadd.s ; op1:f13; op2:f3; dest:f11; op1val:0x3ea977d6; op2val:0xbea977d6; valaddr_reg:x16; val_offset:200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f11, f13, f3, 0x0, 0, x16, 200, x17, x15, 200, x18)

inst_26:
// rs1==f11, rs2==f17, rd==f19, fs1 == 0 and fe1 == 0x7d and fm1 == 0x209dbe and fs2 == 1 and fe2 == 0x7d and fm2 == 0x209dbe and rm_val == 4  
// opcode: fadd.s ; op1:f11; op2:f17; dest:f19; op1val:0x3ea09dbe; op2val:0xbea09dbe; valaddr_reg:x16; val_offset:208; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f19, f11, f17, 0x4, 0, x16, 208, x17, x15, 208, x18)

inst_27:
// rs1==f8, rs2==f1, rd==f21, fs1 == 0 and fe1 == 0x7d and fm1 == 0x209dbe and fs2 == 1 and fe2 == 0x7d and fm2 == 0x209dbe and rm_val == 3  
// opcode: fadd.s ; op1:f8; op2:f1; dest:f21; op1val:0x3ea09dbe; op2val:0xbea09dbe; valaddr_reg:x16; val_offset:216; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f21, f8, f1, 0x3, 0, x16, 216, x17, x15, 216, x18)

inst_28:
// rs1==f5, rs2==f30, rd==f3, fs1 == 0 and fe1 == 0x7d and fm1 == 0x209dbe and fs2 == 1 and fe2 == 0x7d and fm2 == 0x209dbe and rm_val == 2  
// opcode: fadd.s ; op1:f5; op2:f30; dest:f3; op1val:0x3ea09dbe; op2val:0xbea09dbe; valaddr_reg:x16; val_offset:224; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f3, f5, f30, 0x2, 0, x16, 224, x17, x15, 224, x18)

inst_29:
// rs1==f2, rs2==f15, rd==f1, fs1 == 0 and fe1 == 0x7d and fm1 == 0x209dbe and fs2 == 1 and fe2 == 0x7d and fm2 == 0x209dbe and rm_val == 1  
// opcode: fadd.s ; op1:f2; op2:f15; dest:f1; op1val:0x3ea09dbe; op2val:0xbea09dbe; valaddr_reg:x16; val_offset:232; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f1, f2, f15, 0x1, 0, x16, 232, x17, x15, 232, x18)

inst_30:
// rs1==f15, rs2==f10, rd==f30, fs1 == 0 and fe1 == 0x7d and fm1 == 0x209dbe and fs2 == 1 and fe2 == 0x7d and fm2 == 0x209dbe and rm_val == 0  
// opcode: fadd.s ; op1:f15; op2:f10; dest:f30; op1val:0x3ea09dbe; op2val:0xbea09dbe; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f30, f15, f10, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_31:
// rs1==f4, rs2==f21, rd==f15, fs1 == 0 and fe1 == 0x7e and fm1 == 0x6efcaf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6efcaf and rm_val == 4  
// opcode: fadd.s ; op1:f4; op2:f21; dest:f15; op1val:0x3f6efcaf; op2val:0xbf6efcaf; valaddr_reg:x16; val_offset:248; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f15, f4, f21, 0x4, 0, x16, 248, x17, x15, 248, x18)

inst_32:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6efcaf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6efcaf and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6efcaf; op2val:0xbf6efcaf; valaddr_reg:x16; val_offset:256; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 256, x17, x15, 256, x18)

inst_33:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6efcaf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6efcaf and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6efcaf; op2val:0xbf6efcaf; valaddr_reg:x16; val_offset:264; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 264, x17, x15, 264, x18)

inst_34:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6efcaf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6efcaf and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6efcaf; op2val:0xbf6efcaf; valaddr_reg:x16; val_offset:272; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 272, x17, x15, 272, x18)

inst_35:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6efcaf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6efcaf and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6efcaf; op2val:0xbf6efcaf; valaddr_reg:x16; val_offset:280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 280, x17, x15, 280, x18)

inst_36:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7d696c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7d696c and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7d696c; op2val:0xbf7d696c; valaddr_reg:x16; val_offset:288; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 288, x17, x15, 288, x18)

inst_37:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7d696c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7d696c and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7d696c; op2val:0xbf7d696c; valaddr_reg:x16; val_offset:296; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 296, x17, x15, 296, x18)

inst_38:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7d696c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7d696c and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7d696c; op2val:0xbf7d696c; valaddr_reg:x16; val_offset:304; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 304, x17, x15, 304, x18)

inst_39:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7d696c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7d696c and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7d696c; op2val:0xbf7d696c; valaddr_reg:x16; val_offset:312; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 312, x17, x15, 312, x18)

inst_40:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7d696c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7d696c and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7d696c; op2val:0xbf7d696c; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_41:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0749e2 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0749e2 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0749e2; op2val:0xbf0749e2; valaddr_reg:x16; val_offset:328; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 328, x17, x15, 328, x18)

inst_42:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0749e2 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0749e2 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0749e2; op2val:0xbf0749e2; valaddr_reg:x16; val_offset:336; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 336, x17, x15, 336, x18)

inst_43:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0749e2 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0749e2 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0749e2; op2val:0xbf0749e2; valaddr_reg:x16; val_offset:344; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 344, x17, x15, 344, x18)

inst_44:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0749e2 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0749e2 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0749e2; op2val:0xbf0749e2; valaddr_reg:x16; val_offset:352; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 352, x17, x15, 352, x18)

inst_45:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0749e2 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0749e2 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0749e2; op2val:0xbf0749e2; valaddr_reg:x16; val_offset:360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 360, x17, x15, 360, x18)

inst_46:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x41f9a6 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x41f9a6 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec1f9a6; op2val:0xbec1f9a6; valaddr_reg:x16; val_offset:368; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 368, x17, x15, 368, x18)

inst_47:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x41f9a6 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x41f9a6 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec1f9a6; op2val:0xbec1f9a6; valaddr_reg:x16; val_offset:376; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 376, x17, x15, 376, x18)

inst_48:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x41f9a6 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x41f9a6 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec1f9a6; op2val:0xbec1f9a6; valaddr_reg:x16; val_offset:384; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 384, x17, x15, 384, x18)

inst_49:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x41f9a6 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x41f9a6 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec1f9a6; op2val:0xbec1f9a6; valaddr_reg:x16; val_offset:392; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 392, x17, x15, 392, x18)

inst_50:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x41f9a6 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x41f9a6 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec1f9a6; op2val:0xbec1f9a6; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_51:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0273e0 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x0273e0 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8273e0; op2val:0xbe8273e0; valaddr_reg:x16; val_offset:408; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 408, x17, x15, 408, x18)

inst_52:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0273e0 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x0273e0 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8273e0; op2val:0xbe8273e0; valaddr_reg:x16; val_offset:416; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 416, x17, x15, 416, x18)

inst_53:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0273e0 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x0273e0 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8273e0; op2val:0xbe8273e0; valaddr_reg:x16; val_offset:424; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 424, x17, x15, 424, x18)

inst_54:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0273e0 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x0273e0 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8273e0; op2val:0xbe8273e0; valaddr_reg:x16; val_offset:432; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 432, x17, x15, 432, x18)

inst_55:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0273e0 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x0273e0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8273e0; op2val:0xbe8273e0; valaddr_reg:x16; val_offset:440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 440, x17, x15, 440, x18)

inst_56:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x709548 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x709548 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f709548; op2val:0xbf709548; valaddr_reg:x16; val_offset:448; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 448, x17, x15, 448, x18)

inst_57:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x709548 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x709548 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f709548; op2val:0xbf709548; valaddr_reg:x16; val_offset:456; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 456, x17, x15, 456, x18)

inst_58:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x709548 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x709548 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f709548; op2val:0xbf709548; valaddr_reg:x16; val_offset:464; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 464, x17, x15, 464, x18)

inst_59:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x709548 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x709548 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f709548; op2val:0xbf709548; valaddr_reg:x16; val_offset:472; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 472, x17, x15, 472, x18)

inst_60:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x709548 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x709548 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f709548; op2val:0xbf709548; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_61:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2e87cf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2e87cf and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2e87cf; op2val:0xbf2e87cf; valaddr_reg:x16; val_offset:488; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 488, x17, x15, 488, x18)

inst_62:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2e87cf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2e87cf and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2e87cf; op2val:0xbf2e87cf; valaddr_reg:x16; val_offset:496; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 496, x17, x15, 496, x18)

inst_63:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2e87cf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2e87cf and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2e87cf; op2val:0xbf2e87cf; valaddr_reg:x16; val_offset:504; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 504, x17, x15, 504, x18)

inst_64:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2e87cf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2e87cf and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2e87cf; op2val:0xbf2e87cf; valaddr_reg:x16; val_offset:512; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 512, x17, x15, 512, x18)

inst_65:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2e87cf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2e87cf and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2e87cf; op2val:0xbf2e87cf; valaddr_reg:x16; val_offset:520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 520, x17, x15, 520, x18)

inst_66:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x05f5fd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x05f5fd and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f05f5fd; op2val:0xbf05f5fd; valaddr_reg:x16; val_offset:528; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 528, x17, x15, 528, x18)

inst_67:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x05f5fd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x05f5fd and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f05f5fd; op2val:0xbf05f5fd; valaddr_reg:x16; val_offset:536; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 536, x17, x15, 536, x18)

inst_68:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x05f5fd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x05f5fd and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f05f5fd; op2val:0xbf05f5fd; valaddr_reg:x16; val_offset:544; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 544, x17, x15, 544, x18)

inst_69:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x05f5fd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x05f5fd and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f05f5fd; op2val:0xbf05f5fd; valaddr_reg:x16; val_offset:552; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 552, x17, x15, 552, x18)

inst_70:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x05f5fd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x05f5fd and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f05f5fd; op2val:0xbf05f5fd; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_71:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x06ff63 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x06ff63 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f06ff63; op2val:0xbf06ff63; valaddr_reg:x16; val_offset:568; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 568, x17, x15, 568, x18)

inst_72:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x06ff63 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x06ff63 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f06ff63; op2val:0xbf06ff63; valaddr_reg:x16; val_offset:576; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 576, x17, x15, 576, x18)

inst_73:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x06ff63 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x06ff63 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f06ff63; op2val:0xbf06ff63; valaddr_reg:x16; val_offset:584; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 584, x17, x15, 584, x18)

inst_74:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x06ff63 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x06ff63 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f06ff63; op2val:0xbf06ff63; valaddr_reg:x16; val_offset:592; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 592, x17, x15, 592, x18)

inst_75:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x06ff63 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x06ff63 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f06ff63; op2val:0xbf06ff63; valaddr_reg:x16; val_offset:600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 600, x17, x15, 600, x18)

inst_76:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x29da09 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x29da09 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea9da09; op2val:0xbea9da09; valaddr_reg:x16; val_offset:608; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 608, x17, x15, 608, x18)

inst_77:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x29da09 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x29da09 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea9da09; op2val:0xbea9da09; valaddr_reg:x16; val_offset:616; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 616, x17, x15, 616, x18)

inst_78:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x29da09 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x29da09 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea9da09; op2val:0xbea9da09; valaddr_reg:x16; val_offset:624; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 624, x17, x15, 624, x18)

inst_79:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x29da09 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x29da09 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea9da09; op2val:0xbea9da09; valaddr_reg:x16; val_offset:632; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 632, x17, x15, 632, x18)

inst_80:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x29da09 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x29da09 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea9da09; op2val:0xbea9da09; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_81:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x516042 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x516042 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed16042; op2val:0xbed16042; valaddr_reg:x16; val_offset:648; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 648, x17, x15, 648, x18)

inst_82:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x516042 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x516042 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed16042; op2val:0xbed16042; valaddr_reg:x16; val_offset:656; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 656, x17, x15, 656, x18)

inst_83:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x516042 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x516042 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed16042; op2val:0xbed16042; valaddr_reg:x16; val_offset:664; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 664, x17, x15, 664, x18)

inst_84:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x516042 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x516042 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed16042; op2val:0xbed16042; valaddr_reg:x16; val_offset:672; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 672, x17, x15, 672, x18)

inst_85:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x516042 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x516042 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed16042; op2val:0xbed16042; valaddr_reg:x16; val_offset:680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 680, x17, x15, 680, x18)

inst_86:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1b1ea1 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x1b1ea1 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9b1ea1; op2val:0xbe9b1ea1; valaddr_reg:x16; val_offset:688; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 688, x17, x15, 688, x18)

inst_87:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1b1ea1 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x1b1ea1 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9b1ea1; op2val:0xbe9b1ea1; valaddr_reg:x16; val_offset:696; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 696, x17, x15, 696, x18)

inst_88:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1b1ea1 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x1b1ea1 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9b1ea1; op2val:0xbe9b1ea1; valaddr_reg:x16; val_offset:704; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 704, x17, x15, 704, x18)

inst_89:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1b1ea1 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x1b1ea1 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9b1ea1; op2val:0xbe9b1ea1; valaddr_reg:x16; val_offset:712; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 712, x17, x15, 712, x18)

inst_90:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1b1ea1 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x1b1ea1 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9b1ea1; op2val:0xbe9b1ea1; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_91:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3e0c7f and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3e0c7f and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebe0c7f; op2val:0xbebe0c7f; valaddr_reg:x16; val_offset:728; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 728, x17, x15, 728, x18)

inst_92:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3e0c7f and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3e0c7f and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebe0c7f; op2val:0xbebe0c7f; valaddr_reg:x16; val_offset:736; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 736, x17, x15, 736, x18)

inst_93:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3e0c7f and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3e0c7f and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebe0c7f; op2val:0xbebe0c7f; valaddr_reg:x16; val_offset:744; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 744, x17, x15, 744, x18)

inst_94:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3e0c7f and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3e0c7f and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebe0c7f; op2val:0xbebe0c7f; valaddr_reg:x16; val_offset:752; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 752, x17, x15, 752, x18)

inst_95:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3e0c7f and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3e0c7f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebe0c7f; op2val:0xbebe0c7f; valaddr_reg:x16; val_offset:760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 760, x17, x15, 760, x18)

inst_96:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x352ed4 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x352ed4 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f352ed4; op2val:0xbf352ed4; valaddr_reg:x16; val_offset:768; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 768, x17, x15, 768, x18)

inst_97:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x352ed4 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x352ed4 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f352ed4; op2val:0xbf352ed4; valaddr_reg:x16; val_offset:776; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 776, x17, x15, 776, x18)

inst_98:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x352ed4 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x352ed4 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f352ed4; op2val:0xbf352ed4; valaddr_reg:x16; val_offset:784; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 784, x17, x15, 784, x18)

inst_99:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x352ed4 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x352ed4 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f352ed4; op2val:0xbf352ed4; valaddr_reg:x16; val_offset:792; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 792, x17, x15, 792, x18)

inst_100:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x352ed4 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x352ed4 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f352ed4; op2val:0xbf352ed4; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_101:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x62c3b8 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x62c3b8 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e62c3b8; op2val:0xbe62c3b8; valaddr_reg:x16; val_offset:808; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 808, x17, x15, 808, x18)

inst_102:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x62c3b8 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x62c3b8 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e62c3b8; op2val:0xbe62c3b8; valaddr_reg:x16; val_offset:816; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 816, x17, x15, 816, x18)

inst_103:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x62c3b8 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x62c3b8 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e62c3b8; op2val:0xbe62c3b8; valaddr_reg:x16; val_offset:824; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 824, x17, x15, 824, x18)

inst_104:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x62c3b8 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x62c3b8 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e62c3b8; op2val:0xbe62c3b8; valaddr_reg:x16; val_offset:832; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 832, x17, x15, 832, x18)

inst_105:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x62c3b8 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x62c3b8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e62c3b8; op2val:0xbe62c3b8; valaddr_reg:x16; val_offset:840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 840, x17, x15, 840, x18)

inst_106:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3b167e and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3b167e and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebb167e; op2val:0xbebb167e; valaddr_reg:x16; val_offset:848; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 848, x17, x15, 848, x18)

inst_107:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3b167e and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3b167e and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebb167e; op2val:0xbebb167e; valaddr_reg:x16; val_offset:856; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 856, x17, x15, 856, x18)

inst_108:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3b167e and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3b167e and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebb167e; op2val:0xbebb167e; valaddr_reg:x16; val_offset:864; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 864, x17, x15, 864, x18)

inst_109:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3b167e and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3b167e and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebb167e; op2val:0xbebb167e; valaddr_reg:x16; val_offset:872; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 872, x17, x15, 872, x18)

inst_110:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3b167e and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3b167e and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebb167e; op2val:0xbebb167e; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 880, x17, x15, 880, x18)

inst_111:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6fef82 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x6fef82 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eefef82; op2val:0xbeefef82; valaddr_reg:x16; val_offset:888; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 888, x17, x15, 888, x18)

inst_112:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6fef82 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x6fef82 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eefef82; op2val:0xbeefef82; valaddr_reg:x16; val_offset:896; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 896, x17, x15, 896, x18)

inst_113:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6fef82 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x6fef82 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eefef82; op2val:0xbeefef82; valaddr_reg:x16; val_offset:904; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 904, x17, x15, 904, x18)

inst_114:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6fef82 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x6fef82 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eefef82; op2val:0xbeefef82; valaddr_reg:x16; val_offset:912; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 912, x17, x15, 912, x18)

inst_115:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6fef82 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x6fef82 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eefef82; op2val:0xbeefef82; valaddr_reg:x16; val_offset:920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 920, x17, x15, 920, x18)

inst_116:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5a1f0e and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5a1f0e and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eda1f0e; op2val:0xbeda1f0e; valaddr_reg:x16; val_offset:928; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 928, x17, x15, 928, x18)

inst_117:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5a1f0e and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5a1f0e and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eda1f0e; op2val:0xbeda1f0e; valaddr_reg:x16; val_offset:936; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 936, x17, x15, 936, x18)

inst_118:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5a1f0e and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5a1f0e and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eda1f0e; op2val:0xbeda1f0e; valaddr_reg:x16; val_offset:944; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 944, x17, x15, 944, x18)

inst_119:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5a1f0e and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5a1f0e and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eda1f0e; op2val:0xbeda1f0e; valaddr_reg:x16; val_offset:952; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 952, x17, x15, 952, x18)

inst_120:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5a1f0e and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5a1f0e and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eda1f0e; op2val:0xbeda1f0e; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 960, x17, x15, 960, x18)

inst_121:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x35d6bf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x35d6bf and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f35d6bf; op2val:0xbf35d6bf; valaddr_reg:x16; val_offset:968; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 968, x17, x15, 968, x18)

inst_122:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x35d6bf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x35d6bf and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f35d6bf; op2val:0xbf35d6bf; valaddr_reg:x16; val_offset:976; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 976, x17, x15, 976, x18)

inst_123:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x35d6bf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x35d6bf and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f35d6bf; op2val:0xbf35d6bf; valaddr_reg:x16; val_offset:984; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 984, x17, x15, 984, x18)

inst_124:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x35d6bf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x35d6bf and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f35d6bf; op2val:0xbf35d6bf; valaddr_reg:x16; val_offset:992; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 992, x17, x15, 992, x18)

inst_125:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x35d6bf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x35d6bf and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f35d6bf; op2val:0xbf35d6bf; valaddr_reg:x16; val_offset:1000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1000, x17, x15, 1000, x18)

inst_126:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x562146 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x562146 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f562146; op2val:0xbf562146; valaddr_reg:x16; val_offset:1008; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1008, x17, x15, 1008, x18)

inst_127:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x562146 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x562146 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f562146; op2val:0xbf562146; valaddr_reg:x16; val_offset:1016; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1016, x17, x15, 1016, x18)

inst_128:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x562146 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x562146 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f562146; op2val:0xbf562146; valaddr_reg:x16; val_offset:1024; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1024, x17, x15, 1024, x18)

inst_129:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x562146 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x562146 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f562146; op2val:0xbf562146; valaddr_reg:x16; val_offset:1032; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1032, x17, x15, 1032, x18)

inst_130:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x562146 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x562146 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f562146; op2val:0xbf562146; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1040, x17, x15, 1040, x18)

inst_131:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x403e73 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x403e73 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f403e73; op2val:0xbf403e73; valaddr_reg:x16; val_offset:1048; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1048, x17, x15, 1048, x18)

inst_132:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x403e73 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x403e73 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f403e73; op2val:0xbf403e73; valaddr_reg:x16; val_offset:1056; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1056, x17, x15, 1056, x18)

inst_133:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x403e73 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x403e73 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f403e73; op2val:0xbf403e73; valaddr_reg:x16; val_offset:1064; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1064, x17, x15, 1064, x18)

inst_134:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x403e73 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x403e73 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f403e73; op2val:0xbf403e73; valaddr_reg:x16; val_offset:1072; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1072, x17, x15, 1072, x18)

inst_135:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x403e73 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x403e73 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f403e73; op2val:0xbf403e73; valaddr_reg:x16; val_offset:1080; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1080, x17, x15, 1080, x18)

inst_136:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x28fcf1 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x28fcf1 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f28fcf1; op2val:0xbf28fcf1; valaddr_reg:x16; val_offset:1088; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1088, x17, x15, 1088, x18)

inst_137:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x28fcf1 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x28fcf1 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f28fcf1; op2val:0xbf28fcf1; valaddr_reg:x16; val_offset:1096; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1096, x17, x15, 1096, x18)

inst_138:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x28fcf1 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x28fcf1 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f28fcf1; op2val:0xbf28fcf1; valaddr_reg:x16; val_offset:1104; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1104, x17, x15, 1104, x18)

inst_139:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x28fcf1 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x28fcf1 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f28fcf1; op2val:0xbf28fcf1; valaddr_reg:x16; val_offset:1112; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1112, x17, x15, 1112, x18)

inst_140:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x28fcf1 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x28fcf1 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f28fcf1; op2val:0xbf28fcf1; valaddr_reg:x16; val_offset:1120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1120, x17, x15, 1120, x18)

inst_141:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x54bff6 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x54bff6 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e54bff6; op2val:0xbe54bff6; valaddr_reg:x16; val_offset:1128; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1128, x17, x15, 1128, x18)

inst_142:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x54bff6 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x54bff6 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e54bff6; op2val:0xbe54bff6; valaddr_reg:x16; val_offset:1136; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1136, x17, x15, 1136, x18)

inst_143:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x54bff6 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x54bff6 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e54bff6; op2val:0xbe54bff6; valaddr_reg:x16; val_offset:1144; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1144, x17, x15, 1144, x18)

inst_144:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x54bff6 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x54bff6 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e54bff6; op2val:0xbe54bff6; valaddr_reg:x16; val_offset:1152; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1152, x17, x15, 1152, x18)

inst_145:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x54bff6 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x54bff6 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e54bff6; op2val:0xbe54bff6; valaddr_reg:x16; val_offset:1160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1160, x17, x15, 1160, x18)

inst_146:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4f266e and fs2 == 1 and fe2 == 0x7d and fm2 == 0x4f266e and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ecf266e; op2val:0xbecf266e; valaddr_reg:x16; val_offset:1168; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1168, x17, x15, 1168, x18)

inst_147:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4f266e and fs2 == 1 and fe2 == 0x7d and fm2 == 0x4f266e and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ecf266e; op2val:0xbecf266e; valaddr_reg:x16; val_offset:1176; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1176, x17, x15, 1176, x18)

inst_148:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4f266e and fs2 == 1 and fe2 == 0x7d and fm2 == 0x4f266e and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ecf266e; op2val:0xbecf266e; valaddr_reg:x16; val_offset:1184; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1184, x17, x15, 1184, x18)

inst_149:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4f266e and fs2 == 1 and fe2 == 0x7d and fm2 == 0x4f266e and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ecf266e; op2val:0xbecf266e; valaddr_reg:x16; val_offset:1192; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1192, x17, x15, 1192, x18)

inst_150:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4f266e and fs2 == 1 and fe2 == 0x7d and fm2 == 0x4f266e and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ecf266e; op2val:0xbecf266e; valaddr_reg:x16; val_offset:1200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1200, x17, x15, 1200, x18)

inst_151:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7aa6dc and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7aa6dc and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e7aa6dc; op2val:0xbe7aa6dc; valaddr_reg:x16; val_offset:1208; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1208, x17, x15, 1208, x18)

inst_152:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7aa6dc and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7aa6dc and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e7aa6dc; op2val:0xbe7aa6dc; valaddr_reg:x16; val_offset:1216; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1216, x17, x15, 1216, x18)

inst_153:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7aa6dc and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7aa6dc and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e7aa6dc; op2val:0xbe7aa6dc; valaddr_reg:x16; val_offset:1224; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1224, x17, x15, 1224, x18)

inst_154:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7aa6dc and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7aa6dc and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e7aa6dc; op2val:0xbe7aa6dc; valaddr_reg:x16; val_offset:1232; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1232, x17, x15, 1232, x18)

inst_155:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7aa6dc and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7aa6dc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e7aa6dc; op2val:0xbe7aa6dc; valaddr_reg:x16; val_offset:1240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1240, x17, x15, 1240, x18)

inst_156:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3f5513 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3f5513 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3f5513; op2val:0xbf3f5513; valaddr_reg:x16; val_offset:1248; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1248, x17, x15, 1248, x18)

inst_157:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3f5513 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3f5513 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3f5513; op2val:0xbf3f5513; valaddr_reg:x16; val_offset:1256; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1256, x17, x15, 1256, x18)

inst_158:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3f5513 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3f5513 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3f5513; op2val:0xbf3f5513; valaddr_reg:x16; val_offset:1264; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1264, x17, x15, 1264, x18)

inst_159:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3f5513 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3f5513 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3f5513; op2val:0xbf3f5513; valaddr_reg:x16; val_offset:1272; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1272, x17, x15, 1272, x18)

inst_160:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3f5513 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3f5513 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3f5513; op2val:0xbf3f5513; valaddr_reg:x16; val_offset:1280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1280, x17, x15, 1280, x18)

inst_161:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1a9058 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1a9058 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1a9058; op2val:0xbf1a9058; valaddr_reg:x16; val_offset:1288; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1288, x17, x15, 1288, x18)

inst_162:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1a9058 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1a9058 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1a9058; op2val:0xbf1a9058; valaddr_reg:x16; val_offset:1296; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1296, x17, x15, 1296, x18)

inst_163:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1a9058 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1a9058 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1a9058; op2val:0xbf1a9058; valaddr_reg:x16; val_offset:1304; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1304, x17, x15, 1304, x18)

inst_164:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1a9058 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1a9058 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1a9058; op2val:0xbf1a9058; valaddr_reg:x16; val_offset:1312; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1312, x17, x15, 1312, x18)

inst_165:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1a9058 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1a9058 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1a9058; op2val:0xbf1a9058; valaddr_reg:x16; val_offset:1320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1320, x17, x15, 1320, x18)

inst_166:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x72a2c5 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x72a2c5 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef2a2c5; op2val:0xbef2a2c5; valaddr_reg:x16; val_offset:1328; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1328, x17, x15, 1328, x18)

inst_167:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x72a2c5 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x72a2c5 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef2a2c5; op2val:0xbef2a2c5; valaddr_reg:x16; val_offset:1336; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1336, x17, x15, 1336, x18)

inst_168:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x72a2c5 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x72a2c5 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef2a2c5; op2val:0xbef2a2c5; valaddr_reg:x16; val_offset:1344; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1344, x17, x15, 1344, x18)

inst_169:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x72a2c5 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x72a2c5 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef2a2c5; op2val:0xbef2a2c5; valaddr_reg:x16; val_offset:1352; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1352, x17, x15, 1352, x18)

inst_170:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x72a2c5 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x72a2c5 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef2a2c5; op2val:0xbef2a2c5; valaddr_reg:x16; val_offset:1360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1360, x17, x15, 1360, x18)

inst_171:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x759eb4 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x759eb4 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f759eb4; op2val:0xbf759eb4; valaddr_reg:x16; val_offset:1368; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1368, x17, x15, 1368, x18)

inst_172:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x759eb4 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x759eb4 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f759eb4; op2val:0xbf759eb4; valaddr_reg:x16; val_offset:1376; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1376, x17, x15, 1376, x18)

inst_173:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x759eb4 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x759eb4 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f759eb4; op2val:0xbf759eb4; valaddr_reg:x16; val_offset:1384; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1384, x17, x15, 1384, x18)

inst_174:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x759eb4 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x759eb4 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f759eb4; op2val:0xbf759eb4; valaddr_reg:x16; val_offset:1392; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1392, x17, x15, 1392, x18)

inst_175:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x759eb4 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x759eb4 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f759eb4; op2val:0xbf759eb4; valaddr_reg:x16; val_offset:1400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1400, x17, x15, 1400, x18)

inst_176:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x61112d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x61112d and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f61112d; op2val:0xbf61112d; valaddr_reg:x16; val_offset:1408; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1408, x17, x15, 1408, x18)

inst_177:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x61112d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x61112d and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f61112d; op2val:0xbf61112d; valaddr_reg:x16; val_offset:1416; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1416, x17, x15, 1416, x18)

inst_178:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x61112d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x61112d and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f61112d; op2val:0xbf61112d; valaddr_reg:x16; val_offset:1424; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1424, x17, x15, 1424, x18)

inst_179:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x61112d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x61112d and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f61112d; op2val:0xbf61112d; valaddr_reg:x16; val_offset:1432; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1432, x17, x15, 1432, x18)

inst_180:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x61112d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x61112d and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f61112d; op2val:0xbf61112d; valaddr_reg:x16; val_offset:1440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1440, x17, x15, 1440, x18)

inst_181:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x384c20 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x384c20 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f384c20; op2val:0xbf384c20; valaddr_reg:x16; val_offset:1448; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1448, x17, x15, 1448, x18)

inst_182:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x384c20 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x384c20 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f384c20; op2val:0xbf384c20; valaddr_reg:x16; val_offset:1456; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1456, x17, x15, 1456, x18)

inst_183:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x384c20 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x384c20 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f384c20; op2val:0xbf384c20; valaddr_reg:x16; val_offset:1464; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1464, x17, x15, 1464, x18)

inst_184:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x384c20 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x384c20 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f384c20; op2val:0xbf384c20; valaddr_reg:x16; val_offset:1472; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1472, x17, x15, 1472, x18)

inst_185:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x384c20 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x384c20 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f384c20; op2val:0xbf384c20; valaddr_reg:x16; val_offset:1480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1480, x17, x15, 1480, x18)

inst_186:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4483e0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4483e0 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4483e0; op2val:0xbf4483e0; valaddr_reg:x16; val_offset:1488; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1488, x17, x15, 1488, x18)

inst_187:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4483e0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4483e0 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4483e0; op2val:0xbf4483e0; valaddr_reg:x16; val_offset:1496; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1496, x17, x15, 1496, x18)

inst_188:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4483e0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4483e0 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4483e0; op2val:0xbf4483e0; valaddr_reg:x16; val_offset:1504; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1504, x17, x15, 1504, x18)

inst_189:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4483e0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4483e0 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4483e0; op2val:0xbf4483e0; valaddr_reg:x16; val_offset:1512; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1512, x17, x15, 1512, x18)

inst_190:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4483e0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4483e0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4483e0; op2val:0xbf4483e0; valaddr_reg:x16; val_offset:1520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1520, x17, x15, 1520, x18)

inst_191:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x24c5c1 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x24c5c1 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea4c5c1; op2val:0xbea4c5c1; valaddr_reg:x16; val_offset:1528; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1528, x17, x15, 1528, x18)

inst_192:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x24c5c1 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x24c5c1 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea4c5c1; op2val:0xbea4c5c1; valaddr_reg:x16; val_offset:1536; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1536, x17, x15, 1536, x18)

inst_193:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x24c5c1 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x24c5c1 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea4c5c1; op2val:0xbea4c5c1; valaddr_reg:x16; val_offset:1544; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1544, x17, x15, 1544, x18)

inst_194:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x24c5c1 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x24c5c1 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea4c5c1; op2val:0xbea4c5c1; valaddr_reg:x16; val_offset:1552; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1552, x17, x15, 1552, x18)

inst_195:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x24c5c1 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x24c5c1 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea4c5c1; op2val:0xbea4c5c1; valaddr_reg:x16; val_offset:1560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1560, x17, x15, 1560, x18)

inst_196:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1660a0 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x1660a0 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9660a0; op2val:0xbe9660a0; valaddr_reg:x16; val_offset:1568; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1568, x17, x15, 1568, x18)

inst_197:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1660a0 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x1660a0 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9660a0; op2val:0xbe9660a0; valaddr_reg:x16; val_offset:1576; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1576, x17, x15, 1576, x18)

inst_198:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1660a0 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x1660a0 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9660a0; op2val:0xbe9660a0; valaddr_reg:x16; val_offset:1584; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1584, x17, x15, 1584, x18)

inst_199:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1660a0 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x1660a0 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9660a0; op2val:0xbe9660a0; valaddr_reg:x16; val_offset:1592; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1592, x17, x15, 1592, x18)

inst_200:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1660a0 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x1660a0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9660a0; op2val:0xbe9660a0; valaddr_reg:x16; val_offset:1600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1600, x17, x15, 1600, x18)

inst_201:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x68da7b and fs2 == 1 and fe2 == 0x7d and fm2 == 0x68da7b and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ee8da7b; op2val:0xbee8da7b; valaddr_reg:x16; val_offset:1608; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1608, x17, x15, 1608, x18)

inst_202:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x68da7b and fs2 == 1 and fe2 == 0x7d and fm2 == 0x68da7b and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ee8da7b; op2val:0xbee8da7b; valaddr_reg:x16; val_offset:1616; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1616, x17, x15, 1616, x18)

inst_203:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x68da7b and fs2 == 1 and fe2 == 0x7d and fm2 == 0x68da7b and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ee8da7b; op2val:0xbee8da7b; valaddr_reg:x16; val_offset:1624; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1624, x17, x15, 1624, x18)

inst_204:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x68da7b and fs2 == 1 and fe2 == 0x7d and fm2 == 0x68da7b and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ee8da7b; op2val:0xbee8da7b; valaddr_reg:x16; val_offset:1632; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1632, x17, x15, 1632, x18)

inst_205:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x68da7b and fs2 == 1 and fe2 == 0x7d and fm2 == 0x68da7b and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ee8da7b; op2val:0xbee8da7b; valaddr_reg:x16; val_offset:1640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1640, x17, x15, 1640, x18)

inst_206:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x6ceb24 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x6ceb24 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e6ceb24; op2val:0xbe6ceb24; valaddr_reg:x16; val_offset:1648; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1648, x17, x15, 1648, x18)

inst_207:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x6ceb24 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x6ceb24 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e6ceb24; op2val:0xbe6ceb24; valaddr_reg:x16; val_offset:1656; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1656, x17, x15, 1656, x18)

inst_208:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x6ceb24 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x6ceb24 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e6ceb24; op2val:0xbe6ceb24; valaddr_reg:x16; val_offset:1664; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1664, x17, x15, 1664, x18)

inst_209:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x6ceb24 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x6ceb24 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e6ceb24; op2val:0xbe6ceb24; valaddr_reg:x16; val_offset:1672; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1672, x17, x15, 1672, x18)

inst_210:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x6ceb24 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x6ceb24 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e6ceb24; op2val:0xbe6ceb24; valaddr_reg:x16; val_offset:1680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1680, x17, x15, 1680, x18)

inst_211:
// fs1 == 0 and fe1 == 0xa2 and fm1 == 0x7ed344 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x7e025a and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x517ed344; op2val:0x54fe025a; valaddr_reg:x16; val_offset:1688; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1688, x17, x15, 1688, x18)

inst_212:
// fs1 == 0 and fe1 == 0xa2 and fm1 == 0x7ed344 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x7e025a and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x517ed344; op2val:0x54fe025a; valaddr_reg:x16; val_offset:1696; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1696, x17, x15, 1696, x18)

inst_213:
// fs1 == 0 and fe1 == 0xa2 and fm1 == 0x7ed344 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x7e025a and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x517ed344; op2val:0x54fe025a; valaddr_reg:x16; val_offset:1704; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1704, x17, x15, 1704, x18)

inst_214:
// fs1 == 0 and fe1 == 0xa2 and fm1 == 0x7ed344 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x7e025a and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x517ed344; op2val:0x54fe025a; valaddr_reg:x16; val_offset:1712; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1712, x17, x15, 1712, x18)

inst_215:
// fs1 == 0 and fe1 == 0xa2 and fm1 == 0x7ed344 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x7e025a and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x517ed344; op2val:0x54fe025a; valaddr_reg:x16; val_offset:1720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1720, x17, x15, 1720, x18)

inst_216:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x32f11f and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x1a1dc2 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54b2f11f; op2val:0x541a1dc2; valaddr_reg:x16; val_offset:1728; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1728, x17, x15, 1728, x18)

inst_217:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x32f11f and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x1a1dc2 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54b2f11f; op2val:0x541a1dc2; valaddr_reg:x16; val_offset:1736; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1736, x17, x15, 1736, x18)

inst_218:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x32f11f and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x1a1dc2 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54b2f11f; op2val:0x541a1dc2; valaddr_reg:x16; val_offset:1744; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1744, x17, x15, 1744, x18)

inst_219:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x32f11f and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x1a1dc2 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54b2f11f; op2val:0x541a1dc2; valaddr_reg:x16; val_offset:1752; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1752, x17, x15, 1752, x18)

inst_220:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x32f11f and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x1a1dc2 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54b2f11f; op2val:0x541a1dc2; valaddr_reg:x16; val_offset:1760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1760, x17, x15, 1760, x18)

inst_221:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x5086fb and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x4bde42 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x53d086fb; op2val:0x54cbde42; valaddr_reg:x16; val_offset:1768; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1768, x17, x15, 1768, x18)

inst_222:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x5086fb and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x4bde42 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x53d086fb; op2val:0x54cbde42; valaddr_reg:x16; val_offset:1776; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1776, x17, x15, 1776, x18)

inst_223:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x5086fb and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x4bde42 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x53d086fb; op2val:0x54cbde42; valaddr_reg:x16; val_offset:1784; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1784, x17, x15, 1784, x18)

inst_224:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x5086fb and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x4bde42 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x53d086fb; op2val:0x54cbde42; valaddr_reg:x16; val_offset:1792; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1792, x17, x15, 1792, x18)

inst_225:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x5086fb and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x4bde42 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x53d086fb; op2val:0x54cbde42; valaddr_reg:x16; val_offset:1800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1800, x17, x15, 1800, x18)

inst_226:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x232653 and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x39b35a and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54a32653; op2val:0x5439b35a; valaddr_reg:x16; val_offset:1808; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1808, x17, x15, 1808, x18)

inst_227:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x232653 and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x39b35a and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54a32653; op2val:0x5439b35a; valaddr_reg:x16; val_offset:1816; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1816, x17, x15, 1816, x18)

inst_228:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x232653 and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x39b35a and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54a32653; op2val:0x5439b35a; valaddr_reg:x16; val_offset:1824; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1824, x17, x15, 1824, x18)

inst_229:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x232653 and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x39b35a and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54a32653; op2val:0x5439b35a; valaddr_reg:x16; val_offset:1832; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1832, x17, x15, 1832, x18)

inst_230:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x232653 and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x39b35a and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54a32653; op2val:0x5439b35a; valaddr_reg:x16; val_offset:1840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1840, x17, x15, 1840, x18)

inst_231:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x11fd36 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x5b80b3 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x5391fd36; op2val:0x54db80b3; valaddr_reg:x16; val_offset:1848; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1848, x17, x15, 1848, x18)

inst_232:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x11fd36 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x5b80b3 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x5391fd36; op2val:0x54db80b3; valaddr_reg:x16; val_offset:1856; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1856, x17, x15, 1856, x18)

inst_233:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x11fd36 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x5b80b3 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x5391fd36; op2val:0x54db80b3; valaddr_reg:x16; val_offset:1864; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1864, x17, x15, 1864, x18)

inst_234:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x11fd36 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x5b80b3 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x5391fd36; op2val:0x54db80b3; valaddr_reg:x16; val_offset:1872; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1872, x17, x15, 1872, x18)

inst_235:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x11fd36 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x5b80b3 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x5391fd36; op2val:0x54db80b3; valaddr_reg:x16; val_offset:1880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1880, x17, x15, 1880, x18)

inst_236:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x682a36 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x0beae5 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54682a36; op2val:0x548beae5; valaddr_reg:x16; val_offset:1888; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1888, x17, x15, 1888, x18)

inst_237:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x682a36 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x0beae5 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54682a36; op2val:0x548beae5; valaddr_reg:x16; val_offset:1896; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1896, x17, x15, 1896, x18)

inst_238:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x682a36 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x0beae5 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54682a36; op2val:0x548beae5; valaddr_reg:x16; val_offset:1904; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1904, x17, x15, 1904, x18)

inst_239:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x682a36 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x0beae5 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54682a36; op2val:0x548beae5; valaddr_reg:x16; val_offset:1912; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1912, x17, x15, 1912, x18)

inst_240:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x682a36 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x0beae5 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54682a36; op2val:0x548beae5; valaddr_reg:x16; val_offset:1920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1920, x17, x15, 1920, x18)

inst_241:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x5d09f2 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x117b07 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x545d09f2; op2val:0x54917b07; valaddr_reg:x16; val_offset:1928; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1928, x17, x15, 1928, x18)

inst_242:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x5d09f2 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x117b07 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x545d09f2; op2val:0x54917b07; valaddr_reg:x16; val_offset:1936; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1936, x17, x15, 1936, x18)

inst_243:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x5d09f2 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x117b07 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x545d09f2; op2val:0x54917b07; valaddr_reg:x16; val_offset:1944; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1944, x17, x15, 1944, x18)

inst_244:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x5d09f2 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x117b07 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x545d09f2; op2val:0x54917b07; valaddr_reg:x16; val_offset:1952; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1952, x17, x15, 1952, x18)

inst_245:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x5d09f2 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x117b07 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x545d09f2; op2val:0x54917b07; valaddr_reg:x16; val_offset:1960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1960, x17, x15, 1960, x18)

inst_246:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x4c2c7c and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x19e9c2 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x544c2c7c; op2val:0x5499e9c2; valaddr_reg:x16; val_offset:1968; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1968, x17, x15, 1968, x18)

inst_247:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x4c2c7c and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x19e9c2 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x544c2c7c; op2val:0x5499e9c2; valaddr_reg:x16; val_offset:1976; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1976, x17, x15, 1976, x18)

inst_248:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x4c2c7c and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x19e9c2 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x544c2c7c; op2val:0x5499e9c2; valaddr_reg:x16; val_offset:1984; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1984, x17, x15, 1984, x18)

inst_249:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x4c2c7c and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x19e9c2 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x544c2c7c; op2val:0x5499e9c2; valaddr_reg:x16; val_offset:1992; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1992, x17, x15, 1992, x18)

inst_250:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x4c2c7c and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x19e9c2 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x544c2c7c; op2val:0x5499e9c2; valaddr_reg:x16; val_offset:2000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2000, x17, x15, 2000, x18)

inst_251:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x4bb030 and fs2 == 0 and fe2 == 0xa7 and fm2 == 0x513f40 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54cbb030; op2val:0x53d13f40; valaddr_reg:x16; val_offset:2008; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 2008, x17, x15, 2008, x18)

inst_252:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x4bb030 and fs2 == 0 and fe2 == 0xa7 and fm2 == 0x513f40 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54cbb030; op2val:0x53d13f40; valaddr_reg:x16; val_offset:2016; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 2016, x17, x15, 2016, x18)

inst_253:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x4bb030 and fs2 == 0 and fe2 == 0xa7 and fm2 == 0x513f40 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54cbb030; op2val:0x53d13f40; valaddr_reg:x16; val_offset:2024; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_2)

inst_254:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x4bb030 and fs2 == 0 and fe2 == 0xa7 and fm2 == 0x513f40 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54cbb030; op2val:0x53d13f40; valaddr_reg:x16; val_offset:0; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 0, x17, x15, 0, x18)

inst_255:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x4bb030 and fs2 == 0 and fe2 == 0xa7 and fm2 == 0x513f40 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54cbb030; op2val:0x53d13f40; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 8, x17, x15, 8, x18)

inst_256:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x0ee4fd and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x623606 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x548ee4fd; op2val:0x54623606; valaddr_reg:x16; val_offset:16; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 16, x17, x15, 16, x18)

inst_257:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x0ee4fd and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x623606 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x548ee4fd; op2val:0x54623606; valaddr_reg:x16; val_offset:24; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 24, x17, x15, 24, x18)

inst_258:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x0ee4fd and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x623606 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x548ee4fd; op2val:0x54623606; valaddr_reg:x16; val_offset:32; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 32, x17, x15, 32, x18)

inst_259:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x0ee4fd and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x623606 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x548ee4fd; op2val:0x54623606; valaddr_reg:x16; val_offset:40; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 40, x17, x15, 40, x18)

inst_260:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x0ee4fd and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x623606 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x548ee4fd; op2val:0x54623606; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_261:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x4be88a and fs2 == 0 and fe2 == 0xa7 and fm2 == 0x505dd7 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54cbe88a; op2val:0x53d05dd7; valaddr_reg:x16; val_offset:56; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 56, x17, x15, 56, x18)

inst_262:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x4be88a and fs2 == 0 and fe2 == 0xa7 and fm2 == 0x505dd7 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54cbe88a; op2val:0x53d05dd7; valaddr_reg:x16; val_offset:64; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 64, x17, x15, 64, x18)

inst_263:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x4be88a and fs2 == 0 and fe2 == 0xa7 and fm2 == 0x505dd7 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54cbe88a; op2val:0x53d05dd7; valaddr_reg:x16; val_offset:72; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 72, x17, x15, 72, x18)

inst_264:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x4be88a and fs2 == 0 and fe2 == 0xa7 and fm2 == 0x505dd7 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54cbe88a; op2val:0x53d05dd7; valaddr_reg:x16; val_offset:80; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 80, x17, x15, 80, x18)

inst_265:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x4be88a and fs2 == 0 and fe2 == 0xa7 and fm2 == 0x505dd7 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54cbe88a; op2val:0x53d05dd7; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 88, x17, x15, 88, x18)

inst_266:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x71182c and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x0773ea and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x5471182c; op2val:0x548773ea; valaddr_reg:x16; val_offset:96; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 96, x17, x15, 96, x18)

inst_267:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x71182c and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x0773ea and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x5471182c; op2val:0x548773ea; valaddr_reg:x16; val_offset:104; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 104, x17, x15, 104, x18)

inst_268:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x71182c and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x0773ea and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x5471182c; op2val:0x548773ea; valaddr_reg:x16; val_offset:112; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 112, x17, x15, 112, x18)

inst_269:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x71182c and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x0773ea and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x5471182c; op2val:0x548773ea; valaddr_reg:x16; val_offset:120; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 120, x17, x15, 120, x18)

inst_270:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x71182c and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x0773ea and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x5471182c; op2val:0x548773ea; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_271:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x50e2d3 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x4bc74b and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x53d0e2d3; op2val:0x54cbc74b; valaddr_reg:x16; val_offset:136; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 136, x17, x15, 136, x18)

inst_272:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x50e2d3 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x4bc74b and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x53d0e2d3; op2val:0x54cbc74b; valaddr_reg:x16; val_offset:144; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 144, x17, x15, 144, x18)

inst_273:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x50e2d3 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x4bc74b and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x53d0e2d3; op2val:0x54cbc74b; valaddr_reg:x16; val_offset:152; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 152, x17, x15, 152, x18)

inst_274:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x50e2d3 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x4bc74b and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x53d0e2d3; op2val:0x54cbc74b; valaddr_reg:x16; val_offset:160; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 160, x17, x15, 160, x18)

inst_275:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x50e2d3 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x4bc74b and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x53d0e2d3; op2val:0x54cbc74b; valaddr_reg:x16; val_offset:168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 168, x17, x15, 168, x18)

inst_276:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x3a6a09 and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x0b2bec and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54ba6a09; op2val:0x540b2bec; valaddr_reg:x16; val_offset:176; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 176, x17, x15, 176, x18)

inst_277:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x3a6a09 and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x0b2bec and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54ba6a09; op2val:0x540b2bec; valaddr_reg:x16; val_offset:184; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 184, x17, x15, 184, x18)

inst_278:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x3a6a09 and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x0b2bec and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54ba6a09; op2val:0x540b2bec; valaddr_reg:x16; val_offset:192; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 192, x17, x15, 192, x18)

inst_279:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x3a6a09 and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x0b2bec and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54ba6a09; op2val:0x540b2bec; valaddr_reg:x16; val_offset:200; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 200, x17, x15, 200, x18)

inst_280:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x3a6a09 and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x0b2bec and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54ba6a09; op2val:0x540b2bec; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_281:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x513775 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x176446 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54513775; op2val:0x54976446; valaddr_reg:x16; val_offset:216; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 216, x17, x15, 216, x18)

inst_282:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x513775 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x176446 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54513775; op2val:0x54976446; valaddr_reg:x16; val_offset:224; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 224, x17, x15, 224, x18)

inst_283:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x513775 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x176446 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54513775; op2val:0x54976446; valaddr_reg:x16; val_offset:232; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 232, x17, x15, 232, x18)

inst_284:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x513775 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x176446 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54513775; op2val:0x54976446; valaddr_reg:x16; val_offset:240; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 240, x17, x15, 240, x18)

inst_285:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x513775 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x176446 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54513775; op2val:0x54976446; valaddr_reg:x16; val_offset:248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 248, x17, x15, 248, x18)

inst_286:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x72ed34 and fs2 == 0 and fe2 == 0xa5 and fm2 == 0x512cc1 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54f2ed34; op2val:0x52d12cc1; valaddr_reg:x16; val_offset:256; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 256, x17, x15, 256, x18)

inst_287:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x72ed34 and fs2 == 0 and fe2 == 0xa5 and fm2 == 0x512cc1 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54f2ed34; op2val:0x52d12cc1; valaddr_reg:x16; val_offset:264; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 264, x17, x15, 264, x18)

inst_288:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x72ed34 and fs2 == 0 and fe2 == 0xa5 and fm2 == 0x512cc1 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54f2ed34; op2val:0x52d12cc1; valaddr_reg:x16; val_offset:272; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 272, x17, x15, 272, x18)

inst_289:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x72ed34 and fs2 == 0 and fe2 == 0xa5 and fm2 == 0x512cc1 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54f2ed34; op2val:0x52d12cc1; valaddr_reg:x16; val_offset:280; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 280, x17, x15, 280, x18)

inst_290:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x72ed34 and fs2 == 0 and fe2 == 0xa5 and fm2 == 0x512cc1 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54f2ed34; op2val:0x52d12cc1; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_291:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x63be4a and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x0e20db and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x5463be4a; op2val:0x548e20db; valaddr_reg:x16; val_offset:296; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 296, x17, x15, 296, x18)

inst_292:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x63be4a and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x0e20db and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x5463be4a; op2val:0x548e20db; valaddr_reg:x16; val_offset:304; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 304, x17, x15, 304, x18)

inst_293:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x63be4a and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x0e20db and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x5463be4a; op2val:0x548e20db; valaddr_reg:x16; val_offset:312; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 312, x17, x15, 312, x18)

inst_294:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x63be4a and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x0e20db and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x5463be4a; op2val:0x548e20db; valaddr_reg:x16; val_offset:320; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 320, x17, x15, 320, x18)

inst_295:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x63be4a and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x0e20db and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x5463be4a; op2val:0x548e20db; valaddr_reg:x16; val_offset:328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 328, x17, x15, 328, x18)

inst_296:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x231035 and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x39df96 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54a31035; op2val:0x5439df96; valaddr_reg:x16; val_offset:336; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 336, x17, x15, 336, x18)

inst_297:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x231035 and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x39df96 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54a31035; op2val:0x5439df96; valaddr_reg:x16; val_offset:344; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 344, x17, x15, 344, x18)

inst_298:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x231035 and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x39df96 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54a31035; op2val:0x5439df96; valaddr_reg:x16; val_offset:352; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 352, x17, x15, 352, x18)

inst_299:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x231035 and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x39df96 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54a31035; op2val:0x5439df96; valaddr_reg:x16; val_offset:360; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 360, x17, x15, 360, x18)

inst_300:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x231035 and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x39df96 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54a31035; op2val:0x5439df96; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_301:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x11b2c2 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x5b9350 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x5391b2c2; op2val:0x54db9350; valaddr_reg:x16; val_offset:376; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 376, x17, x15, 376, x18)

inst_302:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x11b2c2 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x5b9350 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x5391b2c2; op2val:0x54db9350; valaddr_reg:x16; val_offset:384; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 384, x17, x15, 384, x18)

inst_303:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x11b2c2 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x5b9350 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x5391b2c2; op2val:0x54db9350; valaddr_reg:x16; val_offset:392; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 392, x17, x15, 392, x18)

inst_304:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x11b2c2 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x5b9350 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x5391b2c2; op2val:0x54db9350; valaddr_reg:x16; val_offset:400; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 400, x17, x15, 400, x18)

inst_305:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x11b2c2 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x5b9350 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x5391b2c2; op2val:0x54db9350; valaddr_reg:x16; val_offset:408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 408, x17, x15, 408, x18)

inst_306:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x0cffbc and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x660089 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x548cffbc; op2val:0x54660089; valaddr_reg:x16; val_offset:416; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 416, x17, x15, 416, x18)

inst_307:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x0cffbc and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x660089 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x548cffbc; op2val:0x54660089; valaddr_reg:x16; val_offset:424; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 424, x17, x15, 424, x18)

inst_308:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x0cffbc and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x660089 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x548cffbc; op2val:0x54660089; valaddr_reg:x16; val_offset:432; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 432, x17, x15, 432, x18)

inst_309:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x0cffbc and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x660089 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x548cffbc; op2val:0x54660089; valaddr_reg:x16; val_offset:440; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 440, x17, x15, 440, x18)

inst_310:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x0cffbc and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x660089 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x548cffbc; op2val:0x54660089; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_311:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x15efba and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x6d4209 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x5315efba; op2val:0x54ed4209; valaddr_reg:x16; val_offset:456; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 456, x17, x15, 456, x18)

inst_312:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x15efba and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x6d4209 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x5315efba; op2val:0x54ed4209; valaddr_reg:x16; val_offset:464; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 464, x17, x15, 464, x18)

inst_313:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x15efba and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x6d4209 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x5315efba; op2val:0x54ed4209; valaddr_reg:x16; val_offset:472; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 472, x17, x15, 472, x18)

inst_314:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x15efba and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x6d4209 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x5315efba; op2val:0x54ed4209; valaddr_reg:x16; val_offset:480; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 480, x17, x15, 480, x18)

inst_315:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x15efba and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x6d4209 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x5315efba; op2val:0x54ed4209; valaddr_reg:x16; val_offset:488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 488, x17, x15, 488, x18)

inst_316:
// fs1 == 0 and fe1 == 0xa4 and fm1 == 0x2857ad and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x7abd43 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x522857ad; op2val:0x54fabd43; valaddr_reg:x16; val_offset:496; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 496, x17, x15, 496, x18)

inst_317:
// fs1 == 0 and fe1 == 0xa4 and fm1 == 0x2857ad and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x7abd43 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x522857ad; op2val:0x54fabd43; valaddr_reg:x16; val_offset:504; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 504, x17, x15, 504, x18)

inst_318:
// fs1 == 0 and fe1 == 0xa4 and fm1 == 0x2857ad and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x7abd43 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x522857ad; op2val:0x54fabd43; valaddr_reg:x16; val_offset:512; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 512, x17, x15, 512, x18)

inst_319:
// fs1 == 0 and fe1 == 0xa4 and fm1 == 0x2857ad and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x7abd43 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x522857ad; op2val:0x54fabd43; valaddr_reg:x16; val_offset:520; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 520, x17, x15, 520, x18)

inst_320:
// fs1 == 0 and fe1 == 0xa4 and fm1 == 0x2857ad and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x7abd43 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x522857ad; op2val:0x54fabd43; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_321:
// fs1 == 0 and fe1 == 0xa5 and fm1 == 0x3d7698 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x742896 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x52bd7698; op2val:0x54f42896; valaddr_reg:x16; val_offset:536; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 536, x17, x15, 536, x18)

inst_322:
// fs1 == 0 and fe1 == 0xa5 and fm1 == 0x3d7698 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x742896 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x52bd7698; op2val:0x54f42896; valaddr_reg:x16; val_offset:544; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 544, x17, x15, 544, x18)

inst_323:
// fs1 == 0 and fe1 == 0xa5 and fm1 == 0x3d7698 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x742896 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x52bd7698; op2val:0x54f42896; valaddr_reg:x16; val_offset:552; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 552, x17, x15, 552, x18)

inst_324:
// fs1 == 0 and fe1 == 0xa5 and fm1 == 0x3d7698 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x742896 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x52bd7698; op2val:0x54f42896; valaddr_reg:x16; val_offset:560; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 560, x17, x15, 560, x18)

inst_325:
// fs1 == 0 and fe1 == 0xa5 and fm1 == 0x3d7698 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x742896 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x52bd7698; op2val:0x54f42896; valaddr_reg:x16; val_offset:568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 568, x17, x15, 568, x18)

inst_326:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x1505c1 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x357d1f and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x541505c1; op2val:0x54b57d1f; valaddr_reg:x16; val_offset:576; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 576, x17, x15, 576, x18)

inst_327:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x1505c1 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x357d1f and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x541505c1; op2val:0x54b57d1f; valaddr_reg:x16; val_offset:584; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 584, x17, x15, 584, x18)

inst_328:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x1505c1 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x357d1f and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x541505c1; op2val:0x54b57d1f; valaddr_reg:x16; val_offset:592; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 592, x17, x15, 592, x18)

inst_329:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x1505c1 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x357d1f and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x541505c1; op2val:0x54b57d1f; valaddr_reg:x16; val_offset:600; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 600, x17, x15, 600, x18)

inst_330:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x1505c1 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x357d1f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x541505c1; op2val:0x54b57d1f; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 608, x17, x15, 608, x18)

inst_331:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x78aab4 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x41d553 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x53f8aab4; op2val:0x54c1d553; valaddr_reg:x16; val_offset:616; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 616, x17, x15, 616, x18)

inst_332:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x78aab4 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x41d553 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x53f8aab4; op2val:0x54c1d553; valaddr_reg:x16; val_offset:624; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 624, x17, x15, 624, x18)

inst_333:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x78aab4 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x41d553 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x53f8aab4; op2val:0x54c1d553; valaddr_reg:x16; val_offset:632; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 632, x17, x15, 632, x18)

inst_334:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x78aab4 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x41d553 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x53f8aab4; op2val:0x54c1d553; valaddr_reg:x16; val_offset:640; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 640, x17, x15, 640, x18)

inst_335:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x78aab4 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x41d553 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x53f8aab4; op2val:0x54c1d553; valaddr_reg:x16; val_offset:648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 648, x17, x15, 648, x18)

inst_336:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x4dec85 and fs2 == 0 and fe2 == 0xa7 and fm2 == 0x484de9 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54cdec85; op2val:0x53c84de9; valaddr_reg:x16; val_offset:656; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 656, x17, x15, 656, x18)

inst_337:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x4dec85 and fs2 == 0 and fe2 == 0xa7 and fm2 == 0x484de9 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54cdec85; op2val:0x53c84de9; valaddr_reg:x16; val_offset:664; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 664, x17, x15, 664, x18)

inst_338:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x4dec85 and fs2 == 0 and fe2 == 0xa7 and fm2 == 0x484de9 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54cdec85; op2val:0x53c84de9; valaddr_reg:x16; val_offset:672; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 672, x17, x15, 672, x18)

inst_339:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x4dec85 and fs2 == 0 and fe2 == 0xa7 and fm2 == 0x484de9 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54cdec85; op2val:0x53c84de9; valaddr_reg:x16; val_offset:680; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 680, x17, x15, 680, x18)

inst_340:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x4dec85 and fs2 == 0 and fe2 == 0xa7 and fm2 == 0x484de9 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54cdec85; op2val:0x53c84de9; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 688, x17, x15, 688, x18)

inst_341:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x65ce0c and fs2 == 0 and fe2 == 0xa6 and fm2 == 0x518f9b and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54e5ce0c; op2val:0x53518f9b; valaddr_reg:x16; val_offset:696; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 696, x17, x15, 696, x18)

inst_342:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x65ce0c and fs2 == 0 and fe2 == 0xa6 and fm2 == 0x518f9b and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54e5ce0c; op2val:0x53518f9b; valaddr_reg:x16; val_offset:704; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 704, x17, x15, 704, x18)

inst_343:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x65ce0c and fs2 == 0 and fe2 == 0xa6 and fm2 == 0x518f9b and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54e5ce0c; op2val:0x53518f9b; valaddr_reg:x16; val_offset:712; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 712, x17, x15, 712, x18)

inst_344:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x65ce0c and fs2 == 0 and fe2 == 0xa6 and fm2 == 0x518f9b and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54e5ce0c; op2val:0x53518f9b; valaddr_reg:x16; val_offset:720; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 720, x17, x15, 720, x18)

inst_345:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x65ce0c and fs2 == 0 and fe2 == 0xa6 and fm2 == 0x518f9b and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54e5ce0c; op2val:0x53518f9b; valaddr_reg:x16; val_offset:728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 728, x17, x15, 728, x18)

inst_346:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x14b28b and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x569ae9 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x5494b28b; op2val:0x54569ae9; valaddr_reg:x16; val_offset:736; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 736, x17, x15, 736, x18)

inst_347:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x14b28b and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x569ae9 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x5494b28b; op2val:0x54569ae9; valaddr_reg:x16; val_offset:744; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 744, x17, x15, 744, x18)

inst_348:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x14b28b and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x569ae9 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x5494b28b; op2val:0x54569ae9; valaddr_reg:x16; val_offset:752; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 752, x17, x15, 752, x18)

inst_349:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x14b28b and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x569ae9 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x5494b28b; op2val:0x54569ae9; valaddr_reg:x16; val_offset:760; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 760, x17, x15, 760, x18)

inst_350:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x14b28b and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x569ae9 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x5494b28b; op2val:0x54569ae9; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 768, x17, x15, 768, x18)

inst_351:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x7e3217 and fs2 == 0 and fe2 == 0xa2 and fm2 == 0x66f4af and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54fe3217; op2val:0x5166f4af; valaddr_reg:x16; val_offset:776; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 776, x17, x15, 776, x18)

inst_352:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x7e3217 and fs2 == 0 and fe2 == 0xa2 and fm2 == 0x66f4af and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54fe3217; op2val:0x5166f4af; valaddr_reg:x16; val_offset:784; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 784, x17, x15, 784, x18)

inst_353:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x7e3217 and fs2 == 0 and fe2 == 0xa2 and fm2 == 0x66f4af and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54fe3217; op2val:0x5166f4af; valaddr_reg:x16; val_offset:792; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 792, x17, x15, 792, x18)

inst_354:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x7e3217 and fs2 == 0 and fe2 == 0xa2 and fm2 == 0x66f4af and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54fe3217; op2val:0x5166f4af; valaddr_reg:x16; val_offset:800; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 800, x17, x15, 800, x18)

inst_355:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x7e3217 and fs2 == 0 and fe2 == 0xa2 and fm2 == 0x66f4af and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54fe3217; op2val:0x5166f4af; valaddr_reg:x16; val_offset:808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 808, x17, x15, 808, x18)

inst_356:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x22cb5f and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x3a6942 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54a2cb5f; op2val:0x543a6942; valaddr_reg:x16; val_offset:816; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 816, x17, x15, 816, x18)

inst_357:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x22cb5f and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x3a6942 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54a2cb5f; op2val:0x543a6942; valaddr_reg:x16; val_offset:824; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 824, x17, x15, 824, x18)

inst_358:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x22cb5f and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x3a6942 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54a2cb5f; op2val:0x543a6942; valaddr_reg:x16; val_offset:832; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 832, x17, x15, 832, x18)

inst_359:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x22cb5f and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x3a6942 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54a2cb5f; op2val:0x543a6942; valaddr_reg:x16; val_offset:840; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 840, x17, x15, 840, x18)

inst_360:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x22cb5f and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x3a6942 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54a2cb5f; op2val:0x543a6942; valaddr_reg:x16; val_offset:848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 848, x17, x15, 848, x18)

inst_361:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x6fe78c and fs2 == 0 and fe2 == 0xa6 and fm2 == 0x00c3a4 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54efe78c; op2val:0x5300c3a4; valaddr_reg:x16; val_offset:856; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 856, x17, x15, 856, x18)

inst_362:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x6fe78c and fs2 == 0 and fe2 == 0xa6 and fm2 == 0x00c3a4 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54efe78c; op2val:0x5300c3a4; valaddr_reg:x16; val_offset:864; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 864, x17, x15, 864, x18)

inst_363:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x6fe78c and fs2 == 0 and fe2 == 0xa6 and fm2 == 0x00c3a4 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54efe78c; op2val:0x5300c3a4; valaddr_reg:x16; val_offset:872; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 872, x17, x15, 872, x18)

inst_364:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x6fe78c and fs2 == 0 and fe2 == 0xa6 and fm2 == 0x00c3a4 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54efe78c; op2val:0x5300c3a4; valaddr_reg:x16; val_offset:880; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 880, x17, x15, 880, x18)

inst_365:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x6fe78c and fs2 == 0 and fe2 == 0xa6 and fm2 == 0x00c3a4 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54efe78c; op2val:0x5300c3a4; valaddr_reg:x16; val_offset:888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 888, x17, x15, 888, x18)

inst_366:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x725d9b and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x06d132 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54725d9b; op2val:0x5486d132; valaddr_reg:x16; val_offset:896; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 896, x17, x15, 896, x18)

inst_367:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x725d9b and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x06d132 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54725d9b; op2val:0x5486d132; valaddr_reg:x16; val_offset:904; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 904, x17, x15, 904, x18)

inst_368:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x725d9b and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x06d132 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54725d9b; op2val:0x5486d132; valaddr_reg:x16; val_offset:912; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 912, x17, x15, 912, x18)

inst_369:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x725d9b and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x06d132 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54725d9b; op2val:0x5486d132; valaddr_reg:x16; val_offset:920; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 920, x17, x15, 920, x18)

inst_370:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x725d9b and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x06d132 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54725d9b; op2val:0x5486d132; valaddr_reg:x16; val_offset:928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 928, x17, x15, 928, x18)

inst_371:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x776dcf and fs2 == 0 and fe2 == 0xa5 and fm2 == 0x092319 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54f76dcf; op2val:0x52892319; valaddr_reg:x16; val_offset:936; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 936, x17, x15, 936, x18)

inst_372:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x776dcf and fs2 == 0 and fe2 == 0xa5 and fm2 == 0x092319 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54f76dcf; op2val:0x52892319; valaddr_reg:x16; val_offset:944; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 944, x17, x15, 944, x18)

inst_373:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x776dcf and fs2 == 0 and fe2 == 0xa5 and fm2 == 0x092319 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54f76dcf; op2val:0x52892319; valaddr_reg:x16; val_offset:952; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 952, x17, x15, 952, x18)

inst_374:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x776dcf and fs2 == 0 and fe2 == 0xa5 and fm2 == 0x092319 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54f76dcf; op2val:0x52892319; valaddr_reg:x16; val_offset:960; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 960, x17, x15, 960, x18)

inst_375:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x776dcf and fs2 == 0 and fe2 == 0xa5 and fm2 == 0x092319 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54f76dcf; op2val:0x52892319; valaddr_reg:x16; val_offset:968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 968, x17, x15, 968, x18)

inst_376:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x758c44 and fs2 == 0 and fe2 == 0xa5 and fm2 == 0x273bc3 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54f58c44; op2val:0x52a73bc3; valaddr_reg:x16; val_offset:976; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 976, x17, x15, 976, x18)

inst_377:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x758c44 and fs2 == 0 and fe2 == 0xa5 and fm2 == 0x273bc3 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54f58c44; op2val:0x52a73bc3; valaddr_reg:x16; val_offset:984; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 984, x17, x15, 984, x18)

inst_378:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x758c44 and fs2 == 0 and fe2 == 0xa5 and fm2 == 0x273bc3 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54f58c44; op2val:0x52a73bc3; valaddr_reg:x16; val_offset:992; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 992, x17, x15, 992, x18)

inst_379:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x758c44 and fs2 == 0 and fe2 == 0xa5 and fm2 == 0x273bc3 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54f58c44; op2val:0x52a73bc3; valaddr_reg:x16; val_offset:1000; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1000, x17, x15, 1000, x18)

inst_380:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x758c44 and fs2 == 0 and fe2 == 0xa5 and fm2 == 0x273bc3 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54f58c44; op2val:0x52a73bc3; valaddr_reg:x16; val_offset:1008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1008, x17, x15, 1008, x18)

inst_381:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x662d46 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x633a57 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x53662d46; op2val:0x54e33a57; valaddr_reg:x16; val_offset:1016; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1016, x17, x15, 1016, x18)

inst_382:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x662d46 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x633a57 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x53662d46; op2val:0x54e33a57; valaddr_reg:x16; val_offset:1024; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1024, x17, x15, 1024, x18)

inst_383:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x662d46 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x633a57 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x53662d46; op2val:0x54e33a57; valaddr_reg:x16; val_offset:1032; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1032, x17, x15, 1032, x18)

inst_384:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x662d46 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x633a57 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x53662d46; op2val:0x54e33a57; valaddr_reg:x16; val_offset:1040; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1040, x17, x15, 1040, x18)

inst_385:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x662d46 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x633a57 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x53662d46; op2val:0x54e33a57; valaddr_reg:x16; val_offset:1048; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1048, x17, x15, 1048, x18)

inst_386:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x5bf2ef and fs2 == 0 and fe2 == 0xa7 and fm2 == 0x103445 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54dbf2ef; op2val:0x53903445; valaddr_reg:x16; val_offset:1056; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1056, x17, x15, 1056, x18)

inst_387:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x5bf2ef and fs2 == 0 and fe2 == 0xa7 and fm2 == 0x103445 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54dbf2ef; op2val:0x53903445; valaddr_reg:x16; val_offset:1064; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1064, x17, x15, 1064, x18)

inst_388:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x5bf2ef and fs2 == 0 and fe2 == 0xa7 and fm2 == 0x103445 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54dbf2ef; op2val:0x53903445; valaddr_reg:x16; val_offset:1072; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1072, x17, x15, 1072, x18)

inst_389:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x5bf2ef and fs2 == 0 and fe2 == 0xa7 and fm2 == 0x103445 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54dbf2ef; op2val:0x53903445; valaddr_reg:x16; val_offset:1080; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1080, x17, x15, 1080, x18)

inst_390:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x5bf2ef and fs2 == 0 and fe2 == 0xa7 and fm2 == 0x103445 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54dbf2ef; op2val:0x53903445; valaddr_reg:x16; val_offset:1088; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1088, x17, x15, 1088, x18)

inst_391:
// fs1 == 0 and fe1 == 0xa4 and fm1 == 0x49eed4 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x79b089 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x5249eed4; op2val:0x54f9b089; valaddr_reg:x16; val_offset:1096; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1096, x17, x15, 1096, x18)

inst_392:
// fs1 == 0 and fe1 == 0xa4 and fm1 == 0x49eed4 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x79b089 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x5249eed4; op2val:0x54f9b089; valaddr_reg:x16; val_offset:1104; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1104, x17, x15, 1104, x18)

inst_393:
// fs1 == 0 and fe1 == 0xa4 and fm1 == 0x49eed4 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x79b089 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x5249eed4; op2val:0x54f9b089; valaddr_reg:x16; val_offset:1112; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1112, x17, x15, 1112, x18)

inst_394:
// fs1 == 0 and fe1 == 0xa4 and fm1 == 0x49eed4 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x79b089 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x5249eed4; op2val:0x54f9b089; valaddr_reg:x16; val_offset:1120; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1120, x17, x15, 1120, x18)

inst_395:
// fs1 == 0 and fe1 == 0xa4 and fm1 == 0x49eed4 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x79b089 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x5249eed4; op2val:0x54f9b089; valaddr_reg:x16; val_offset:1128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1128, x17, x15, 1128, x18)

inst_396:
// fs1 == 0 and fe1 == 0xa2 and fm1 == 0x6b6c85 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x7e2927 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x516b6c85; op2val:0x54fe2927; valaddr_reg:x16; val_offset:1136; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1136, x17, x15, 1136, x18)

inst_397:
// fs1 == 0 and fe1 == 0xa2 and fm1 == 0x6b6c85 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x7e2927 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x516b6c85; op2val:0x54fe2927; valaddr_reg:x16; val_offset:1144; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1144, x17, x15, 1144, x18)

inst_398:
// fs1 == 0 and fe1 == 0xa2 and fm1 == 0x6b6c85 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x7e2927 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x516b6c85; op2val:0x54fe2927; valaddr_reg:x16; val_offset:1152; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1152, x17, x15, 1152, x18)

inst_399:
// fs1 == 0 and fe1 == 0xa2 and fm1 == 0x6b6c85 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x7e2927 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x516b6c85; op2val:0x54fe2927; valaddr_reg:x16; val_offset:1160; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1160, x17, x15, 1160, x18)

inst_400:
// fs1 == 0 and fe1 == 0xa2 and fm1 == 0x6b6c85 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x7e2927 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x516b6c85; op2val:0x54fe2927; valaddr_reg:x16; val_offset:1168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1168, x17, x15, 1168, x18)

inst_401:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x7031f5 and fs2 == 0 and fe2 == 0xa5 and fm2 == 0x7ce0b4 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54f031f5; op2val:0x52fce0b4; valaddr_reg:x16; val_offset:1176; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1176, x17, x15, 1176, x18)

inst_402:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x7031f5 and fs2 == 0 and fe2 == 0xa5 and fm2 == 0x7ce0b4 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54f031f5; op2val:0x52fce0b4; valaddr_reg:x16; val_offset:1184; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1184, x17, x15, 1184, x18)

inst_403:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x7031f5 and fs2 == 0 and fe2 == 0xa5 and fm2 == 0x7ce0b4 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54f031f5; op2val:0x52fce0b4; valaddr_reg:x16; val_offset:1192; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1192, x17, x15, 1192, x18)

inst_404:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x7031f5 and fs2 == 0 and fe2 == 0xa5 and fm2 == 0x7ce0b4 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54f031f5; op2val:0x52fce0b4; valaddr_reg:x16; val_offset:1200; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1200, x17, x15, 1200, x18)

inst_405:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x7031f5 and fs2 == 0 and fe2 == 0xa5 and fm2 == 0x7ce0b4 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54f031f5; op2val:0x52fce0b4; valaddr_reg:x16; val_offset:1208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1208, x17, x15, 1208, x18)

inst_406:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x51b4ae and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x4b92d4 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x53d1b4ae; op2val:0x54cb92d4; valaddr_reg:x16; val_offset:1216; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1216, x17, x15, 1216, x18)

inst_407:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x51b4ae and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x4b92d4 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x53d1b4ae; op2val:0x54cb92d4; valaddr_reg:x16; val_offset:1224; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1224, x17, x15, 1224, x18)

inst_408:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x51b4ae and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x4b92d4 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x53d1b4ae; op2val:0x54cb92d4; valaddr_reg:x16; val_offset:1232; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1232, x17, x15, 1232, x18)

inst_409:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x51b4ae and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x4b92d4 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x53d1b4ae; op2val:0x54cb92d4; valaddr_reg:x16; val_offset:1240; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1240, x17, x15, 1240, x18)

inst_410:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x51b4ae and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x4b92d4 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x53d1b4ae; op2val:0x54cb92d4; valaddr_reg:x16; val_offset:1248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1248, x17, x15, 1248, x18)

inst_411:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x64b829 and fs2 == 0 and fe2 == 0xa6 and fm2 == 0x5a3eb4 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54e4b829; op2val:0x535a3eb4; valaddr_reg:x16; val_offset:1256; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1256, x17, x15, 1256, x18)

inst_412:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x64b829 and fs2 == 0 and fe2 == 0xa6 and fm2 == 0x5a3eb4 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54e4b829; op2val:0x535a3eb4; valaddr_reg:x16; val_offset:1264; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1264, x17, x15, 1264, x18)

inst_413:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x64b829 and fs2 == 0 and fe2 == 0xa6 and fm2 == 0x5a3eb4 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54e4b829; op2val:0x535a3eb4; valaddr_reg:x16; val_offset:1272; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1272, x17, x15, 1272, x18)

inst_414:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x64b829 and fs2 == 0 and fe2 == 0xa6 and fm2 == 0x5a3eb4 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54e4b829; op2val:0x535a3eb4; valaddr_reg:x16; val_offset:1280; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1280, x17, x15, 1280, x18)

inst_415:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x64b829 and fs2 == 0 and fe2 == 0xa6 and fm2 == 0x5a3eb4 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54e4b829; op2val:0x535a3eb4; valaddr_reg:x16; val_offset:1288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1288, x17, x15, 1288, x18)

inst_416:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x51aa6c and fs2 == 0 and fe2 == 0xa7 and fm2 == 0x39564e and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54d1aa6c; op2val:0x53b9564e; valaddr_reg:x16; val_offset:1296; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1296, x17, x15, 1296, x18)

inst_417:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x51aa6c and fs2 == 0 and fe2 == 0xa7 and fm2 == 0x39564e and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54d1aa6c; op2val:0x53b9564e; valaddr_reg:x16; val_offset:1304; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1304, x17, x15, 1304, x18)

inst_418:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x51aa6c and fs2 == 0 and fe2 == 0xa7 and fm2 == 0x39564e and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54d1aa6c; op2val:0x53b9564e; valaddr_reg:x16; val_offset:1312; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1312, x17, x15, 1312, x18)

inst_419:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x51aa6c and fs2 == 0 and fe2 == 0xa7 and fm2 == 0x39564e and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54d1aa6c; op2val:0x53b9564e; valaddr_reg:x16; val_offset:1320; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1320, x17, x15, 1320, x18)

inst_420:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x51aa6c and fs2 == 0 and fe2 == 0xa7 and fm2 == 0x39564e and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x54d1aa6c; op2val:0x53b9564e; valaddr_reg:x16; val_offset:1328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1328, x17, x15, 1328, x18)

inst_421:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7d72fb and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7d72fb and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7d72fb; op2val:0xbf7d72fb; valaddr_reg:x16; val_offset:1336; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1336, x17, x15, 1336, x18)

inst_422:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7d72fb and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7d72fb and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7d72fb; op2val:0xbf7d72fb; valaddr_reg:x16; val_offset:1344; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1344, x17, x15, 1344, x18)

inst_423:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7d72fb and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7d72fb and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7d72fb; op2val:0xbf7d72fb; valaddr_reg:x16; val_offset:1352; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1352, x17, x15, 1352, x18)

inst_424:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7d72fb and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7d72fb and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7d72fb; op2val:0xbf7d72fb; valaddr_reg:x16; val_offset:1360; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1360, x17, x15, 1360, x18)

inst_425:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7d72fb and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7d72fb and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7d72fb; op2val:0xbf7d72fb; valaddr_reg:x16; val_offset:1368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1368, x17, x15, 1368, x18)

inst_426:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x787ab7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x787ab7 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f787ab7; op2val:0xbf787ab7; valaddr_reg:x16; val_offset:1376; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1376, x17, x15, 1376, x18)

inst_427:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x787ab7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x787ab7 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f787ab7; op2val:0xbf787ab7; valaddr_reg:x16; val_offset:1384; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1384, x17, x15, 1384, x18)

inst_428:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x787ab7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x787ab7 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f787ab7; op2val:0xbf787ab7; valaddr_reg:x16; val_offset:1392; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1392, x17, x15, 1392, x18)

inst_429:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x787ab7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x787ab7 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f787ab7; op2val:0xbf787ab7; valaddr_reg:x16; val_offset:1400; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1400, x17, x15, 1400, x18)

inst_430:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x787ab7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x787ab7 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f787ab7; op2val:0xbf787ab7; valaddr_reg:x16; val_offset:1408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1408, x17, x15, 1408, x18)

inst_431:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6dfee3 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6dfee3 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6dfee3; op2val:0xbf6dfee3; valaddr_reg:x16; val_offset:1416; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1416, x17, x15, 1416, x18)

inst_432:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6dfee3 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6dfee3 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6dfee3; op2val:0xbf6dfee3; valaddr_reg:x16; val_offset:1424; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1424, x17, x15, 1424, x18)

inst_433:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6dfee3 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6dfee3 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6dfee3; op2val:0xbf6dfee3; valaddr_reg:x16; val_offset:1432; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1432, x17, x15, 1432, x18)

inst_434:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6dfee3 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6dfee3 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6dfee3; op2val:0xbf6dfee3; valaddr_reg:x16; val_offset:1440; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1440, x17, x15, 1440, x18)

inst_435:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6dfee3 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6dfee3 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6dfee3; op2val:0xbf6dfee3; valaddr_reg:x16; val_offset:1448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1448, x17, x15, 1448, x18)

inst_436:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0e0edf and fs2 == 1 and fe2 == 0x7d and fm2 == 0x0e0edf and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8e0edf; op2val:0xbe8e0edf; valaddr_reg:x16; val_offset:1456; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1456, x17, x15, 1456, x18)

inst_437:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0e0edf and fs2 == 1 and fe2 == 0x7d and fm2 == 0x0e0edf and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8e0edf; op2val:0xbe8e0edf; valaddr_reg:x16; val_offset:1464; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1464, x17, x15, 1464, x18)

inst_438:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0e0edf and fs2 == 1 and fe2 == 0x7d and fm2 == 0x0e0edf and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8e0edf; op2val:0xbe8e0edf; valaddr_reg:x16; val_offset:1472; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1472, x17, x15, 1472, x18)

inst_439:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0e0edf and fs2 == 1 and fe2 == 0x7d and fm2 == 0x0e0edf and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8e0edf; op2val:0xbe8e0edf; valaddr_reg:x16; val_offset:1480; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1480, x17, x15, 1480, x18)

inst_440:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0e0edf and fs2 == 1 and fe2 == 0x7d and fm2 == 0x0e0edf and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8e0edf; op2val:0xbe8e0edf; valaddr_reg:x16; val_offset:1488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1488, x17, x15, 1488, x18)

inst_441:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x254f4b and fs2 == 1 and fe2 == 0x7b and fm2 == 0x254f4b and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3da54f4b; op2val:0xbda54f4b; valaddr_reg:x16; val_offset:1496; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1496, x17, x15, 1496, x18)

inst_442:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x254f4b and fs2 == 1 and fe2 == 0x7b and fm2 == 0x254f4b and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3da54f4b; op2val:0xbda54f4b; valaddr_reg:x16; val_offset:1504; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1504, x17, x15, 1504, x18)

inst_443:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x254f4b and fs2 == 1 and fe2 == 0x7b and fm2 == 0x254f4b and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3da54f4b; op2val:0xbda54f4b; valaddr_reg:x16; val_offset:1512; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1512, x17, x15, 1512, x18)

inst_444:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x254f4b and fs2 == 1 and fe2 == 0x7b and fm2 == 0x254f4b and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3da54f4b; op2val:0xbda54f4b; valaddr_reg:x16; val_offset:1520; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1520, x17, x15, 1520, x18)

inst_445:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x254f4b and fs2 == 1 and fe2 == 0x7b and fm2 == 0x254f4b and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3da54f4b; op2val:0xbda54f4b; valaddr_reg:x16; val_offset:1528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1528, x17, x15, 1528, x18)

inst_446:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x208dce and fs2 == 1 and fe2 == 0x7d and fm2 == 0x208dce and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea08dce; op2val:0xbea08dce; valaddr_reg:x16; val_offset:1536; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1536, x17, x15, 1536, x18)

inst_447:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x208dce and fs2 == 1 and fe2 == 0x7d and fm2 == 0x208dce and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea08dce; op2val:0xbea08dce; valaddr_reg:x16; val_offset:1544; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1544, x17, x15, 1544, x18)

inst_448:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x208dce and fs2 == 1 and fe2 == 0x7d and fm2 == 0x208dce and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea08dce; op2val:0xbea08dce; valaddr_reg:x16; val_offset:1552; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1552, x17, x15, 1552, x18)

inst_449:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x208dce and fs2 == 1 and fe2 == 0x7d and fm2 == 0x208dce and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea08dce; op2val:0xbea08dce; valaddr_reg:x16; val_offset:1560; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1560, x17, x15, 1560, x18)

inst_450:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x208dce and fs2 == 1 and fe2 == 0x7d and fm2 == 0x208dce and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea08dce; op2val:0xbea08dce; valaddr_reg:x16; val_offset:1568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1568, x17, x15, 1568, x18)

inst_451:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7823fd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7823fd and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7823fd; op2val:0xbf7823fd; valaddr_reg:x16; val_offset:1576; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1576, x17, x15, 1576, x18)

inst_452:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7823fd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7823fd and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7823fd; op2val:0xbf7823fd; valaddr_reg:x16; val_offset:1584; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1584, x17, x15, 1584, x18)

inst_453:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7823fd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7823fd and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7823fd; op2val:0xbf7823fd; valaddr_reg:x16; val_offset:1592; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1592, x17, x15, 1592, x18)

inst_454:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7823fd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7823fd and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7823fd; op2val:0xbf7823fd; valaddr_reg:x16; val_offset:1600; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1600, x17, x15, 1600, x18)

inst_455:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7823fd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7823fd and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7823fd; op2val:0xbf7823fd; valaddr_reg:x16; val_offset:1608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1608, x17, x15, 1608, x18)

inst_456:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x679c0f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x679c0f and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e679c0f; op2val:0xbe679c0f; valaddr_reg:x16; val_offset:1616; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1616, x17, x15, 1616, x18)

inst_457:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x679c0f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x679c0f and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e679c0f; op2val:0xbe679c0f; valaddr_reg:x16; val_offset:1624; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1624, x17, x15, 1624, x18)

inst_458:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x679c0f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x679c0f and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e679c0f; op2val:0xbe679c0f; valaddr_reg:x16; val_offset:1632; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1632, x17, x15, 1632, x18)

inst_459:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x679c0f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x679c0f and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e679c0f; op2val:0xbe679c0f; valaddr_reg:x16; val_offset:1640; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1640, x17, x15, 1640, x18)

inst_460:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x679c0f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x679c0f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e679c0f; op2val:0xbe679c0f; valaddr_reg:x16; val_offset:1648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1648, x17, x15, 1648, x18)

inst_461:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x159889 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x159889 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f159889; op2val:0xbf159889; valaddr_reg:x16; val_offset:1656; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1656, x17, x15, 1656, x18)

inst_462:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x159889 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x159889 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f159889; op2val:0xbf159889; valaddr_reg:x16; val_offset:1664; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1664, x17, x15, 1664, x18)

inst_463:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x159889 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x159889 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f159889; op2val:0xbf159889; valaddr_reg:x16; val_offset:1672; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1672, x17, x15, 1672, x18)

inst_464:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x159889 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x159889 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f159889; op2val:0xbf159889; valaddr_reg:x16; val_offset:1680; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1680, x17, x15, 1680, x18)

inst_465:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x159889 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x159889 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f159889; op2val:0xbf159889; valaddr_reg:x16; val_offset:1688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1688, x17, x15, 1688, x18)

inst_466:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x1df0c8 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x1df0c8 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d9df0c8; op2val:0xbd9df0c8; valaddr_reg:x16; val_offset:1696; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1696, x17, x15, 1696, x18)

inst_467:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x1df0c8 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x1df0c8 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d9df0c8; op2val:0xbd9df0c8; valaddr_reg:x16; val_offset:1704; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1704, x17, x15, 1704, x18)

inst_468:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x1df0c8 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x1df0c8 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d9df0c8; op2val:0xbd9df0c8; valaddr_reg:x16; val_offset:1712; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1712, x17, x15, 1712, x18)

inst_469:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x1df0c8 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x1df0c8 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d9df0c8; op2val:0xbd9df0c8; valaddr_reg:x16; val_offset:1720; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1720, x17, x15, 1720, x18)

inst_470:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x1df0c8 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x1df0c8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d9df0c8; op2val:0xbd9df0c8; valaddr_reg:x16; val_offset:1728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1728, x17, x15, 1728, x18)

inst_471:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x12f39d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x12f39d and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f12f39d; op2val:0xbf12f39d; valaddr_reg:x16; val_offset:1736; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1736, x17, x15, 1736, x18)

inst_472:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x12f39d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x12f39d and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f12f39d; op2val:0xbf12f39d; valaddr_reg:x16; val_offset:1744; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1744, x17, x15, 1744, x18)

inst_473:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x12f39d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x12f39d and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f12f39d; op2val:0xbf12f39d; valaddr_reg:x16; val_offset:1752; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1752, x17, x15, 1752, x18)

inst_474:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x12f39d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x12f39d and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f12f39d; op2val:0xbf12f39d; valaddr_reg:x16; val_offset:1760; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1760, x17, x15, 1760, x18)

inst_475:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x12f39d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x12f39d and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f12f39d; op2val:0xbf12f39d; valaddr_reg:x16; val_offset:1768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1768, x17, x15, 1768, x18)

inst_476:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x31d719 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x31d719 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f31d719; op2val:0xbf31d719; valaddr_reg:x16; val_offset:1776; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1776, x17, x15, 1776, x18)

inst_477:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x31d719 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x31d719 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f31d719; op2val:0xbf31d719; valaddr_reg:x16; val_offset:1784; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1784, x17, x15, 1784, x18)

inst_478:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x31d719 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x31d719 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f31d719; op2val:0xbf31d719; valaddr_reg:x16; val_offset:1792; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1792, x17, x15, 1792, x18)

inst_479:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x31d719 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x31d719 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f31d719; op2val:0xbf31d719; valaddr_reg:x16; val_offset:1800; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1800, x17, x15, 1800, x18)

inst_480:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x31d719 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x31d719 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f31d719; op2val:0xbf31d719; valaddr_reg:x16; val_offset:1808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1808, x17, x15, 1808, x18)

inst_481:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1a5de3 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x1a5de3 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9a5de3; op2val:0xbe9a5de3; valaddr_reg:x16; val_offset:1816; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1816, x17, x15, 1816, x18)

inst_482:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1a5de3 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x1a5de3 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9a5de3; op2val:0xbe9a5de3; valaddr_reg:x16; val_offset:1824; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1824, x17, x15, 1824, x18)

inst_483:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1a5de3 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x1a5de3 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9a5de3; op2val:0xbe9a5de3; valaddr_reg:x16; val_offset:1832; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1832, x17, x15, 1832, x18)

inst_484:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1a5de3 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x1a5de3 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9a5de3; op2val:0xbe9a5de3; valaddr_reg:x16; val_offset:1840; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1840, x17, x15, 1840, x18)

inst_485:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1a5de3 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x1a5de3 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9a5de3; op2val:0xbe9a5de3; valaddr_reg:x16; val_offset:1848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1848, x17, x15, 1848, x18)

inst_486:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x63cb78 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x63cb78 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3de3cb78; op2val:0xbde3cb78; valaddr_reg:x16; val_offset:1856; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1856, x17, x15, 1856, x18)

inst_487:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x63cb78 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x63cb78 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3de3cb78; op2val:0xbde3cb78; valaddr_reg:x16; val_offset:1864; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1864, x17, x15, 1864, x18)

inst_488:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x63cb78 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x63cb78 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3de3cb78; op2val:0xbde3cb78; valaddr_reg:x16; val_offset:1872; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1872, x17, x15, 1872, x18)

inst_489:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x63cb78 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x63cb78 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3de3cb78; op2val:0xbde3cb78; valaddr_reg:x16; val_offset:1880; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1880, x17, x15, 1880, x18)

inst_490:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x63cb78 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x63cb78 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3de3cb78; op2val:0xbde3cb78; valaddr_reg:x16; val_offset:1888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1888, x17, x15, 1888, x18)

inst_491:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6811f1 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6811f1 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6811f1; op2val:0xbf6811f1; valaddr_reg:x16; val_offset:1896; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1896, x17, x15, 1896, x18)

inst_492:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6811f1 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6811f1 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6811f1; op2val:0xbf6811f1; valaddr_reg:x16; val_offset:1904; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1904, x17, x15, 1904, x18)

inst_493:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6811f1 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6811f1 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6811f1; op2val:0xbf6811f1; valaddr_reg:x16; val_offset:1912; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1912, x17, x15, 1912, x18)

inst_494:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6811f1 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6811f1 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6811f1; op2val:0xbf6811f1; valaddr_reg:x16; val_offset:1920; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1920, x17, x15, 1920, x18)

inst_495:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6811f1 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6811f1 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6811f1; op2val:0xbf6811f1; valaddr_reg:x16; val_offset:1928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1928, x17, x15, 1928, x18)

inst_496:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5b3d72 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5b3d72 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3edb3d72; op2val:0xbedb3d72; valaddr_reg:x16; val_offset:1936; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1936, x17, x15, 1936, x18)

inst_497:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5b3d72 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5b3d72 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3edb3d72; op2val:0xbedb3d72; valaddr_reg:x16; val_offset:1944; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1944, x17, x15, 1944, x18)

inst_498:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5b3d72 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5b3d72 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3edb3d72; op2val:0xbedb3d72; valaddr_reg:x16; val_offset:1952; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1952, x17, x15, 1952, x18)

inst_499:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5b3d72 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5b3d72 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3edb3d72; op2val:0xbedb3d72; valaddr_reg:x16; val_offset:1960; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1960, x17, x15, 1960, x18)

inst_500:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5b3d72 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5b3d72 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3edb3d72; op2val:0xbedb3d72; valaddr_reg:x16; val_offset:1968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1968, x17, x15, 1968, x18)

inst_501:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x622af4 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x622af4 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d622af4; op2val:0xbd622af4; valaddr_reg:x16; val_offset:1976; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1976, x17, x15, 1976, x18)

inst_502:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x622af4 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x622af4 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d622af4; op2val:0xbd622af4; valaddr_reg:x16; val_offset:1984; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1984, x17, x15, 1984, x18)

inst_503:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x622af4 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x622af4 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d622af4; op2val:0xbd622af4; valaddr_reg:x16; val_offset:1992; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1992, x17, x15, 1992, x18)

inst_504:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x622af4 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x622af4 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d622af4; op2val:0xbd622af4; valaddr_reg:x16; val_offset:2000; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 2000, x17, x15, 2000, x18)

inst_505:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x622af4 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x622af4 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d622af4; op2val:0xbd622af4; valaddr_reg:x16; val_offset:2008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2008, x17, x15, 2008, x18)

inst_506:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x038aaf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x038aaf and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f038aaf; op2val:0xbf038aaf; valaddr_reg:x16; val_offset:2016; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 2016, x17, x15, 2016, x18)

inst_507:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x038aaf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x038aaf and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f038aaf; op2val:0xbf038aaf; valaddr_reg:x16; val_offset:2024; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_3)

inst_508:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x038aaf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x038aaf and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f038aaf; op2val:0xbf038aaf; valaddr_reg:x16; val_offset:0; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 0, x17, x15, 0, x18)

inst_509:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x038aaf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x038aaf and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f038aaf; op2val:0xbf038aaf; valaddr_reg:x16; val_offset:8; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 8, x17, x15, 8, x18)

inst_510:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x038aaf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x038aaf and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f038aaf; op2val:0xbf038aaf; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 16, x17, x15, 16, x18)

inst_511:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x749269 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x749269 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f749269; op2val:0xbf749269; valaddr_reg:x16; val_offset:24; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 24, x17, x15, 24, x18)

inst_512:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x749269 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x749269 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f749269; op2val:0xbf749269; valaddr_reg:x16; val_offset:32; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 32, x17, x15, 32, x18)

inst_513:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x749269 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x749269 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f749269; op2val:0xbf749269; valaddr_reg:x16; val_offset:40; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 40, x17, x15, 40, x18)

inst_514:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x749269 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x749269 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f749269; op2val:0xbf749269; valaddr_reg:x16; val_offset:48; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 48, x17, x15, 48, x18)

inst_515:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x749269 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x749269 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f749269; op2val:0xbf749269; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 56, x17, x15, 56, x18)

inst_516:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x577dea and fs2 == 1 and fe2 == 0x7c and fm2 == 0x577dea and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e577dea; op2val:0xbe577dea; valaddr_reg:x16; val_offset:64; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 64, x17, x15, 64, x18)

inst_517:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x577dea and fs2 == 1 and fe2 == 0x7c and fm2 == 0x577dea and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e577dea; op2val:0xbe577dea; valaddr_reg:x16; val_offset:72; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 72, x17, x15, 72, x18)

inst_518:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x577dea and fs2 == 1 and fe2 == 0x7c and fm2 == 0x577dea and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e577dea; op2val:0xbe577dea; valaddr_reg:x16; val_offset:80; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 80, x17, x15, 80, x18)

inst_519:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x577dea and fs2 == 1 and fe2 == 0x7c and fm2 == 0x577dea and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e577dea; op2val:0xbe577dea; valaddr_reg:x16; val_offset:88; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 88, x17, x15, 88, x18)

inst_520:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x577dea and fs2 == 1 and fe2 == 0x7c and fm2 == 0x577dea and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e577dea; op2val:0xbe577dea; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 96, x17, x15, 96, x18)

inst_521:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x793998 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x793998 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e793998; op2val:0xbe793998; valaddr_reg:x16; val_offset:104; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 104, x17, x15, 104, x18)

inst_522:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x793998 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x793998 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e793998; op2val:0xbe793998; valaddr_reg:x16; val_offset:112; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 112, x17, x15, 112, x18)

inst_523:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x793998 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x793998 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e793998; op2val:0xbe793998; valaddr_reg:x16; val_offset:120; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 120, x17, x15, 120, x18)

inst_524:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x793998 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x793998 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e793998; op2val:0xbe793998; valaddr_reg:x16; val_offset:128; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 128, x17, x15, 128, x18)

inst_525:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x793998 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x793998 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e793998; op2val:0xbe793998; valaddr_reg:x16; val_offset:136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 136, x17, x15, 136, x18)

inst_526:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5f1d7a and fs2 == 1 and fe2 == 0x7c and fm2 == 0x5f1d7a and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e5f1d7a; op2val:0xbe5f1d7a; valaddr_reg:x16; val_offset:144; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 144, x17, x15, 144, x18)

inst_527:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5f1d7a and fs2 == 1 and fe2 == 0x7c and fm2 == 0x5f1d7a and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e5f1d7a; op2val:0xbe5f1d7a; valaddr_reg:x16; val_offset:152; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 152, x17, x15, 152, x18)

inst_528:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5f1d7a and fs2 == 1 and fe2 == 0x7c and fm2 == 0x5f1d7a and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e5f1d7a; op2val:0xbe5f1d7a; valaddr_reg:x16; val_offset:160; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 160, x17, x15, 160, x18)

inst_529:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5f1d7a and fs2 == 1 and fe2 == 0x7c and fm2 == 0x5f1d7a and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e5f1d7a; op2val:0xbe5f1d7a; valaddr_reg:x16; val_offset:168; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 168, x17, x15, 168, x18)

inst_530:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5f1d7a and fs2 == 1 and fe2 == 0x7c and fm2 == 0x5f1d7a and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e5f1d7a; op2val:0xbe5f1d7a; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 176, x17, x15, 176, x18)

inst_531:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5ba8bb and fs2 == 1 and fe2 == 0x7c and fm2 == 0x5ba8bb and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e5ba8bb; op2val:0xbe5ba8bb; valaddr_reg:x16; val_offset:184; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 184, x17, x15, 184, x18)

inst_532:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5ba8bb and fs2 == 1 and fe2 == 0x7c and fm2 == 0x5ba8bb and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e5ba8bb; op2val:0xbe5ba8bb; valaddr_reg:x16; val_offset:192; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 192, x17, x15, 192, x18)

inst_533:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5ba8bb and fs2 == 1 and fe2 == 0x7c and fm2 == 0x5ba8bb and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e5ba8bb; op2val:0xbe5ba8bb; valaddr_reg:x16; val_offset:200; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 200, x17, x15, 200, x18)

inst_534:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5ba8bb and fs2 == 1 and fe2 == 0x7c and fm2 == 0x5ba8bb and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e5ba8bb; op2val:0xbe5ba8bb; valaddr_reg:x16; val_offset:208; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 208, x17, x15, 208, x18)

inst_535:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5ba8bb and fs2 == 1 and fe2 == 0x7c and fm2 == 0x5ba8bb and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e5ba8bb; op2val:0xbe5ba8bb; valaddr_reg:x16; val_offset:216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 216, x17, x15, 216, x18)

inst_536:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x424d99 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x424d99 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e424d99; op2val:0xbe424d99; valaddr_reg:x16; val_offset:224; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 224, x17, x15, 224, x18)

inst_537:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x424d99 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x424d99 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e424d99; op2val:0xbe424d99; valaddr_reg:x16; val_offset:232; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 232, x17, x15, 232, x18)

inst_538:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x424d99 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x424d99 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e424d99; op2val:0xbe424d99; valaddr_reg:x16; val_offset:240; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 240, x17, x15, 240, x18)

inst_539:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x424d99 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x424d99 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e424d99; op2val:0xbe424d99; valaddr_reg:x16; val_offset:248; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 248, x17, x15, 248, x18)

inst_540:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x424d99 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x424d99 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e424d99; op2val:0xbe424d99; valaddr_reg:x16; val_offset:256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 256, x17, x15, 256, x18)

inst_541:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x028642 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x028642 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e028642; op2val:0xbe028642; valaddr_reg:x16; val_offset:264; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 264, x17, x15, 264, x18)

inst_542:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x028642 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x028642 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e028642; op2val:0xbe028642; valaddr_reg:x16; val_offset:272; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 272, x17, x15, 272, x18)

inst_543:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x028642 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x028642 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e028642; op2val:0xbe028642; valaddr_reg:x16; val_offset:280; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 280, x17, x15, 280, x18)

inst_544:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x028642 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x028642 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e028642; op2val:0xbe028642; valaddr_reg:x16; val_offset:288; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 288, x17, x15, 288, x18)

inst_545:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x028642 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x028642 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e028642; op2val:0xbe028642; valaddr_reg:x16; val_offset:296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 296, x17, x15, 296, x18)

inst_546:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4d797f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x4d797f and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4d797f; op2val:0xbe4d797f; valaddr_reg:x16; val_offset:304; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 304, x17, x15, 304, x18)

inst_547:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4d797f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x4d797f and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4d797f; op2val:0xbe4d797f; valaddr_reg:x16; val_offset:312; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 312, x17, x15, 312, x18)

inst_548:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4d797f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x4d797f and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4d797f; op2val:0xbe4d797f; valaddr_reg:x16; val_offset:320; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 320, x17, x15, 320, x18)

inst_549:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4d797f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x4d797f and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4d797f; op2val:0xbe4d797f; valaddr_reg:x16; val_offset:328; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 328, x17, x15, 328, x18)

inst_550:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4d797f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x4d797f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4d797f; op2val:0xbe4d797f; valaddr_reg:x16; val_offset:336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 336, x17, x15, 336, x18)

inst_551:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5f75c6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5f75c6 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5f75c6; op2val:0xbf5f75c6; valaddr_reg:x16; val_offset:344; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 344, x17, x15, 344, x18)

inst_552:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5f75c6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5f75c6 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5f75c6; op2val:0xbf5f75c6; valaddr_reg:x16; val_offset:352; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 352, x17, x15, 352, x18)

inst_553:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5f75c6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5f75c6 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5f75c6; op2val:0xbf5f75c6; valaddr_reg:x16; val_offset:360; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 360, x17, x15, 360, x18)

inst_554:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5f75c6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5f75c6 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5f75c6; op2val:0xbf5f75c6; valaddr_reg:x16; val_offset:368; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 368, x17, x15, 368, x18)

inst_555:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5f75c6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5f75c6 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5f75c6; op2val:0xbf5f75c6; valaddr_reg:x16; val_offset:376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 376, x17, x15, 376, x18)

inst_556:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x41844e and fs2 == 1 and fe2 == 0x7d and fm2 == 0x41844e and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec1844e; op2val:0xbec1844e; valaddr_reg:x16; val_offset:384; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 384, x17, x15, 384, x18)

inst_557:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x41844e and fs2 == 1 and fe2 == 0x7d and fm2 == 0x41844e and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec1844e; op2val:0xbec1844e; valaddr_reg:x16; val_offset:392; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 392, x17, x15, 392, x18)

inst_558:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x41844e and fs2 == 1 and fe2 == 0x7d and fm2 == 0x41844e and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec1844e; op2val:0xbec1844e; valaddr_reg:x16; val_offset:400; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 400, x17, x15, 400, x18)

inst_559:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x41844e and fs2 == 1 and fe2 == 0x7d and fm2 == 0x41844e and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec1844e; op2val:0xbec1844e; valaddr_reg:x16; val_offset:408; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 408, x17, x15, 408, x18)

inst_560:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x41844e and fs2 == 1 and fe2 == 0x7d and fm2 == 0x41844e and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec1844e; op2val:0xbec1844e; valaddr_reg:x16; val_offset:416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 416, x17, x15, 416, x18)

inst_561:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x602c50 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x602c50 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f602c50; op2val:0xbf602c50; valaddr_reg:x16; val_offset:424; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 424, x17, x15, 424, x18)

inst_562:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x602c50 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x602c50 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f602c50; op2val:0xbf602c50; valaddr_reg:x16; val_offset:432; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 432, x17, x15, 432, x18)

inst_563:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x602c50 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x602c50 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f602c50; op2val:0xbf602c50; valaddr_reg:x16; val_offset:440; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 440, x17, x15, 440, x18)

inst_564:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x602c50 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x602c50 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f602c50; op2val:0xbf602c50; valaddr_reg:x16; val_offset:448; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 448, x17, x15, 448, x18)

inst_565:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x602c50 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x602c50 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f602c50; op2val:0xbf602c50; valaddr_reg:x16; val_offset:456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 456, x17, x15, 456, x18)

inst_566:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3c4184 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3c4184 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebc4184; op2val:0xbebc4184; valaddr_reg:x16; val_offset:464; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 464, x17, x15, 464, x18)

inst_567:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3c4184 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3c4184 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebc4184; op2val:0xbebc4184; valaddr_reg:x16; val_offset:472; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 472, x17, x15, 472, x18)

inst_568:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3c4184 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3c4184 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebc4184; op2val:0xbebc4184; valaddr_reg:x16; val_offset:480; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 480, x17, x15, 480, x18)

inst_569:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3c4184 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3c4184 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebc4184; op2val:0xbebc4184; valaddr_reg:x16; val_offset:488; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 488, x17, x15, 488, x18)

inst_570:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3c4184 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3c4184 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebc4184; op2val:0xbebc4184; valaddr_reg:x16; val_offset:496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 496, x17, x15, 496, x18)

inst_571:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x479e62 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x479e62 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec79e62; op2val:0xbec79e62; valaddr_reg:x16; val_offset:504; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 504, x17, x15, 504, x18)

inst_572:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x479e62 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x479e62 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec79e62; op2val:0xbec79e62; valaddr_reg:x16; val_offset:512; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 512, x17, x15, 512, x18)

inst_573:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x479e62 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x479e62 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec79e62; op2val:0xbec79e62; valaddr_reg:x16; val_offset:520; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 520, x17, x15, 520, x18)

inst_574:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x479e62 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x479e62 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec79e62; op2val:0xbec79e62; valaddr_reg:x16; val_offset:528; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 528, x17, x15, 528, x18)

inst_575:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x479e62 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x479e62 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec79e62; op2val:0xbec79e62; valaddr_reg:x16; val_offset:536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 536, x17, x15, 536, x18)

inst_576:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x027a68 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x027a68 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f027a68; op2val:0xbf027a68; valaddr_reg:x16; val_offset:544; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 544, x17, x15, 544, x18)

inst_577:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x027a68 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x027a68 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f027a68; op2val:0xbf027a68; valaddr_reg:x16; val_offset:552; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 552, x17, x15, 552, x18)

inst_578:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x027a68 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x027a68 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f027a68; op2val:0xbf027a68; valaddr_reg:x16; val_offset:560; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 560, x17, x15, 560, x18)

inst_579:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x027a68 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x027a68 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f027a68; op2val:0xbf027a68; valaddr_reg:x16; val_offset:568; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 568, x17, x15, 568, x18)

inst_580:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x027a68 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x027a68 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f027a68; op2val:0xbf027a68; valaddr_reg:x16; val_offset:576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 576, x17, x15, 576, x18)

inst_581:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1dd893 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1dd893 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1dd893; op2val:0xbf1dd893; valaddr_reg:x16; val_offset:584; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 584, x17, x15, 584, x18)

inst_582:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1dd893 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1dd893 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1dd893; op2val:0xbf1dd893; valaddr_reg:x16; val_offset:592; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 592, x17, x15, 592, x18)

inst_583:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1dd893 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1dd893 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1dd893; op2val:0xbf1dd893; valaddr_reg:x16; val_offset:600; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 600, x17, x15, 600, x18)

inst_584:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1dd893 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1dd893 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1dd893; op2val:0xbf1dd893; valaddr_reg:x16; val_offset:608; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 608, x17, x15, 608, x18)

inst_585:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1dd893 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1dd893 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1dd893; op2val:0xbf1dd893; valaddr_reg:x16; val_offset:616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 616, x17, x15, 616, x18)

inst_586:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x66d6a0 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x66d6a0 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ee6d6a0; op2val:0xbee6d6a0; valaddr_reg:x16; val_offset:624; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 624, x17, x15, 624, x18)

inst_587:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x66d6a0 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x66d6a0 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ee6d6a0; op2val:0xbee6d6a0; valaddr_reg:x16; val_offset:632; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 632, x17, x15, 632, x18)

inst_588:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x66d6a0 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x66d6a0 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ee6d6a0; op2val:0xbee6d6a0; valaddr_reg:x16; val_offset:640; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 640, x17, x15, 640, x18)

inst_589:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x66d6a0 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x66d6a0 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ee6d6a0; op2val:0xbee6d6a0; valaddr_reg:x16; val_offset:648; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 648, x17, x15, 648, x18)

inst_590:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x66d6a0 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x66d6a0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ee6d6a0; op2val:0xbee6d6a0; valaddr_reg:x16; val_offset:656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 656, x17, x15, 656, x18)

inst_591:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3d750e and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3d750e and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebd750e; op2val:0xbebd750e; valaddr_reg:x16; val_offset:664; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 664, x17, x15, 664, x18)

inst_592:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3d750e and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3d750e and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebd750e; op2val:0xbebd750e; valaddr_reg:x16; val_offset:672; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 672, x17, x15, 672, x18)

inst_593:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3d750e and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3d750e and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebd750e; op2val:0xbebd750e; valaddr_reg:x16; val_offset:680; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 680, x17, x15, 680, x18)

inst_594:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3d750e and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3d750e and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebd750e; op2val:0xbebd750e; valaddr_reg:x16; val_offset:688; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 688, x17, x15, 688, x18)

inst_595:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3d750e and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3d750e and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebd750e; op2val:0xbebd750e; valaddr_reg:x16; val_offset:696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 696, x17, x15, 696, x18)

inst_596:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x77b057 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x77b057 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f77b057; op2val:0xbf77b057; valaddr_reg:x16; val_offset:704; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 704, x17, x15, 704, x18)

inst_597:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x77b057 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x77b057 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f77b057; op2val:0xbf77b057; valaddr_reg:x16; val_offset:712; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 712, x17, x15, 712, x18)

inst_598:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x77b057 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x77b057 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f77b057; op2val:0xbf77b057; valaddr_reg:x16; val_offset:720; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 720, x17, x15, 720, x18)

inst_599:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x77b057 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x77b057 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f77b057; op2val:0xbf77b057; valaddr_reg:x16; val_offset:728; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 728, x17, x15, 728, x18)

inst_600:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x77b057 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x77b057 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f77b057; op2val:0xbf77b057; valaddr_reg:x16; val_offset:736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 736, x17, x15, 736, x18)

inst_601:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0773ce and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0773ce and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0773ce; op2val:0xbf0773ce; valaddr_reg:x16; val_offset:744; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 744, x17, x15, 744, x18)

inst_602:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0773ce and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0773ce and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0773ce; op2val:0xbf0773ce; valaddr_reg:x16; val_offset:752; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 752, x17, x15, 752, x18)

inst_603:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0773ce and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0773ce and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0773ce; op2val:0xbf0773ce; valaddr_reg:x16; val_offset:760; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 760, x17, x15, 760, x18)

inst_604:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0773ce and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0773ce and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0773ce; op2val:0xbf0773ce; valaddr_reg:x16; val_offset:768; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 768, x17, x15, 768, x18)

inst_605:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0773ce and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0773ce and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0773ce; op2val:0xbf0773ce; valaddr_reg:x16; val_offset:776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 776, x17, x15, 776, x18)

inst_606:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1d0257 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1d0257 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1d0257; op2val:0xbf1d0257; valaddr_reg:x16; val_offset:784; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 784, x17, x15, 784, x18)

inst_607:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1d0257 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1d0257 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1d0257; op2val:0xbf1d0257; valaddr_reg:x16; val_offset:792; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 792, x17, x15, 792, x18)

inst_608:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1d0257 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1d0257 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1d0257; op2val:0xbf1d0257; valaddr_reg:x16; val_offset:800; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 800, x17, x15, 800, x18)

inst_609:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1d0257 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1d0257 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1d0257; op2val:0xbf1d0257; valaddr_reg:x16; val_offset:808; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 808, x17, x15, 808, x18)

inst_610:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1d0257 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1d0257 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1d0257; op2val:0xbf1d0257; valaddr_reg:x16; val_offset:816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 816, x17, x15, 816, x18)

inst_611:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x16bf84 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x16bf84 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f16bf84; op2val:0xbf16bf84; valaddr_reg:x16; val_offset:824; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 824, x17, x15, 824, x18)

inst_612:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x16bf84 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x16bf84 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f16bf84; op2val:0xbf16bf84; valaddr_reg:x16; val_offset:832; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 832, x17, x15, 832, x18)

inst_613:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x16bf84 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x16bf84 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f16bf84; op2val:0xbf16bf84; valaddr_reg:x16; val_offset:840; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 840, x17, x15, 840, x18)

inst_614:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x16bf84 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x16bf84 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f16bf84; op2val:0xbf16bf84; valaddr_reg:x16; val_offset:848; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 848, x17, x15, 848, x18)

inst_615:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x16bf84 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x16bf84 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f16bf84; op2val:0xbf16bf84; valaddr_reg:x16; val_offset:856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 856, x17, x15, 856, x18)

inst_616:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x593f91 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x593f91 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f593f91; op2val:0xbf593f91; valaddr_reg:x16; val_offset:864; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 864, x17, x15, 864, x18)

inst_617:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x593f91 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x593f91 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f593f91; op2val:0xbf593f91; valaddr_reg:x16; val_offset:872; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 872, x17, x15, 872, x18)

inst_618:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x593f91 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x593f91 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f593f91; op2val:0xbf593f91; valaddr_reg:x16; val_offset:880; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 880, x17, x15, 880, x18)

inst_619:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x593f91 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x593f91 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f593f91; op2val:0xbf593f91; valaddr_reg:x16; val_offset:888; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 888, x17, x15, 888, x18)

inst_620:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x593f91 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x593f91 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f593f91; op2val:0xbf593f91; valaddr_reg:x16; val_offset:896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 896, x17, x15, 896, x18)

inst_621:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x10cca2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x10cca2 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e90cca2; op2val:0xbe90cca2; valaddr_reg:x16; val_offset:904; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 904, x17, x15, 904, x18)

inst_622:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x10cca2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x10cca2 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e90cca2; op2val:0xbe90cca2; valaddr_reg:x16; val_offset:912; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 912, x17, x15, 912, x18)

inst_623:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x10cca2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x10cca2 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e90cca2; op2val:0xbe90cca2; valaddr_reg:x16; val_offset:920; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 920, x17, x15, 920, x18)

inst_624:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x10cca2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x10cca2 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e90cca2; op2val:0xbe90cca2; valaddr_reg:x16; val_offset:928; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 928, x17, x15, 928, x18)

inst_625:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x10cca2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x10cca2 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e90cca2; op2val:0xbe90cca2; valaddr_reg:x16; val_offset:936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 936, x17, x15, 936, x18)

inst_626:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x02175d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x02175d and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f02175d; op2val:0xbf02175d; valaddr_reg:x16; val_offset:944; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 944, x17, x15, 944, x18)

inst_627:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x02175d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x02175d and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f02175d; op2val:0xbf02175d; valaddr_reg:x16; val_offset:952; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 952, x17, x15, 952, x18)

inst_628:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x02175d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x02175d and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f02175d; op2val:0xbf02175d; valaddr_reg:x16; val_offset:960; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 960, x17, x15, 960, x18)

inst_629:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x02175d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x02175d and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f02175d; op2val:0xbf02175d; valaddr_reg:x16; val_offset:968; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 968, x17, x15, 968, x18)

inst_630:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x02175d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x02175d and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f02175d; op2val:0xbf02175d; valaddr_reg:x16; val_offset:976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 976, x17, x15, 976, x18)

inst_631:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x76cd0a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x76cd0a and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f76cd0a; op2val:0xbf76cd0a; valaddr_reg:x16; val_offset:984; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 984, x17, x15, 984, x18)

inst_632:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x76cd0a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x76cd0a and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f76cd0a; op2val:0xbf76cd0a; valaddr_reg:x16; val_offset:992; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 992, x17, x15, 992, x18)

inst_633:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x76cd0a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x76cd0a and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f76cd0a; op2val:0xbf76cd0a; valaddr_reg:x16; val_offset:1000; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1000, x17, x15, 1000, x18)

inst_634:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x76cd0a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x76cd0a and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f76cd0a; op2val:0xbf76cd0a; valaddr_reg:x16; val_offset:1008; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1008, x17, x15, 1008, x18)

inst_635:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x76cd0a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x76cd0a and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f76cd0a; op2val:0xbf76cd0a; valaddr_reg:x16; val_offset:1016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1016, x17, x15, 1016, x18)

inst_636:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2e2407 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x2e2407 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e2e2407; op2val:0xbe2e2407; valaddr_reg:x16; val_offset:1024; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1024, x17, x15, 1024, x18)

inst_637:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2e2407 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x2e2407 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e2e2407; op2val:0xbe2e2407; valaddr_reg:x16; val_offset:1032; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1032, x17, x15, 1032, x18)

inst_638:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2e2407 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x2e2407 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e2e2407; op2val:0xbe2e2407; valaddr_reg:x16; val_offset:1040; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1040, x17, x15, 1040, x18)

inst_639:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2e2407 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x2e2407 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e2e2407; op2val:0xbe2e2407; valaddr_reg:x16; val_offset:1048; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1048, x17, x15, 1048, x18)

inst_640:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2e2407 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x2e2407 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e2e2407; op2val:0xbe2e2407; valaddr_reg:x16; val_offset:1056; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1056, x17, x15, 1056, x18)

inst_641:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5f67e7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5f67e7 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5f67e7; op2val:0xbf5f67e7; valaddr_reg:x16; val_offset:1064; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1064, x17, x15, 1064, x18)

inst_642:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5f67e7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5f67e7 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5f67e7; op2val:0xbf5f67e7; valaddr_reg:x16; val_offset:1072; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1072, x17, x15, 1072, x18)

inst_643:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5f67e7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5f67e7 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5f67e7; op2val:0xbf5f67e7; valaddr_reg:x16; val_offset:1080; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1080, x17, x15, 1080, x18)

inst_644:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5f67e7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5f67e7 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5f67e7; op2val:0xbf5f67e7; valaddr_reg:x16; val_offset:1088; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1088, x17, x15, 1088, x18)

inst_645:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5f67e7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5f67e7 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5f67e7; op2val:0xbf5f67e7; valaddr_reg:x16; val_offset:1096; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1096, x17, x15, 1096, x18)

inst_646:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x700fcf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x700fcf and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f700fcf; op2val:0xbf700fcf; valaddr_reg:x16; val_offset:1104; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1104, x17, x15, 1104, x18)

inst_647:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x700fcf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x700fcf and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f700fcf; op2val:0xbf700fcf; valaddr_reg:x16; val_offset:1112; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1112, x17, x15, 1112, x18)

inst_648:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x700fcf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x700fcf and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f700fcf; op2val:0xbf700fcf; valaddr_reg:x16; val_offset:1120; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1120, x17, x15, 1120, x18)

inst_649:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x700fcf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x700fcf and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f700fcf; op2val:0xbf700fcf; valaddr_reg:x16; val_offset:1128; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1128, x17, x15, 1128, x18)

inst_650:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x700fcf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x700fcf and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f700fcf; op2val:0xbf700fcf; valaddr_reg:x16; val_offset:1136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1136, x17, x15, 1136, x18)

inst_651:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x178884 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x178884 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f178884; op2val:0xbf178884; valaddr_reg:x16; val_offset:1144; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1144, x17, x15, 1144, x18)

inst_652:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x178884 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x178884 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f178884; op2val:0xbf178884; valaddr_reg:x16; val_offset:1152; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1152, x17, x15, 1152, x18)

inst_653:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x178884 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x178884 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f178884; op2val:0xbf178884; valaddr_reg:x16; val_offset:1160; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1160, x17, x15, 1160, x18)

inst_654:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x178884 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x178884 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f178884; op2val:0xbf178884; valaddr_reg:x16; val_offset:1168; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1168, x17, x15, 1168, x18)

inst_655:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x178884 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x178884 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f178884; op2val:0xbf178884; valaddr_reg:x16; val_offset:1176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1176, x17, x15, 1176, x18)

inst_656:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x69b062 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x69b062 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d69b062; op2val:0xbd69b062; valaddr_reg:x16; val_offset:1184; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1184, x17, x15, 1184, x18)

inst_657:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x69b062 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x69b062 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d69b062; op2val:0xbd69b062; valaddr_reg:x16; val_offset:1192; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1192, x17, x15, 1192, x18)

inst_658:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x69b062 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x69b062 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d69b062; op2val:0xbd69b062; valaddr_reg:x16; val_offset:1200; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1200, x17, x15, 1200, x18)

inst_659:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x69b062 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x69b062 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d69b062; op2val:0xbd69b062; valaddr_reg:x16; val_offset:1208; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1208, x17, x15, 1208, x18)

inst_660:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x69b062 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x69b062 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d69b062; op2val:0xbd69b062; valaddr_reg:x16; val_offset:1216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1216, x17, x15, 1216, x18)

inst_661:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6f3378 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6f3378 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6f3378; op2val:0xbf6f3378; valaddr_reg:x16; val_offset:1224; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1224, x17, x15, 1224, x18)

inst_662:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6f3378 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6f3378 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6f3378; op2val:0xbf6f3378; valaddr_reg:x16; val_offset:1232; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1232, x17, x15, 1232, x18)

inst_663:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6f3378 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6f3378 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6f3378; op2val:0xbf6f3378; valaddr_reg:x16; val_offset:1240; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1240, x17, x15, 1240, x18)

inst_664:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6f3378 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6f3378 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6f3378; op2val:0xbf6f3378; valaddr_reg:x16; val_offset:1248; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1248, x17, x15, 1248, x18)

inst_665:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6f3378 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6f3378 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6f3378; op2val:0xbf6f3378; valaddr_reg:x16; val_offset:1256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1256, x17, x15, 1256, x18)

inst_666:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7c7d22 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7c7d22 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efc7d22; op2val:0xbefc7d22; valaddr_reg:x16; val_offset:1264; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1264, x17, x15, 1264, x18)

inst_667:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7c7d22 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7c7d22 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efc7d22; op2val:0xbefc7d22; valaddr_reg:x16; val_offset:1272; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1272, x17, x15, 1272, x18)

inst_668:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7c7d22 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7c7d22 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efc7d22; op2val:0xbefc7d22; valaddr_reg:x16; val_offset:1280; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1280, x17, x15, 1280, x18)

inst_669:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7c7d22 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7c7d22 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efc7d22; op2val:0xbefc7d22; valaddr_reg:x16; val_offset:1288; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1288, x17, x15, 1288, x18)

inst_670:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7c7d22 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7c7d22 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efc7d22; op2val:0xbefc7d22; valaddr_reg:x16; val_offset:1296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1296, x17, x15, 1296, x18)

inst_671:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7ff039 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7ff039 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7ff039; op2val:0xbf7ff039; valaddr_reg:x16; val_offset:1304; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1304, x17, x15, 1304, x18)

inst_672:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7ff039 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7ff039 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7ff039; op2val:0xbf7ff039; valaddr_reg:x16; val_offset:1312; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1312, x17, x15, 1312, x18)

inst_673:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7ff039 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7ff039 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7ff039; op2val:0xbf7ff039; valaddr_reg:x16; val_offset:1320; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1320, x17, x15, 1320, x18)

inst_674:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7ff039 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7ff039 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7ff039; op2val:0xbf7ff039; valaddr_reg:x16; val_offset:1328; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1328, x17, x15, 1328, x18)

inst_675:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7ff039 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7ff039 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7ff039; op2val:0xbf7ff039; valaddr_reg:x16; val_offset:1336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1336, x17, x15, 1336, x18)

inst_676:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4ec97f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x4ec97f and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4ec97f; op2val:0xbe4ec97f; valaddr_reg:x16; val_offset:1344; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1344, x17, x15, 1344, x18)

inst_677:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4ec97f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x4ec97f and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4ec97f; op2val:0xbe4ec97f; valaddr_reg:x16; val_offset:1352; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1352, x17, x15, 1352, x18)

inst_678:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4ec97f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x4ec97f and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4ec97f; op2val:0xbe4ec97f; valaddr_reg:x16; val_offset:1360; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1360, x17, x15, 1360, x18)

inst_679:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4ec97f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x4ec97f and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4ec97f; op2val:0xbe4ec97f; valaddr_reg:x16; val_offset:1368; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1368, x17, x15, 1368, x18)

inst_680:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4ec97f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x4ec97f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4ec97f; op2val:0xbe4ec97f; valaddr_reg:x16; val_offset:1376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1376, x17, x15, 1376, x18)

inst_681:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x53c4e4 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x53c4e4 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed3c4e4; op2val:0xbed3c4e4; valaddr_reg:x16; val_offset:1384; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1384, x17, x15, 1384, x18)

inst_682:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x53c4e4 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x53c4e4 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed3c4e4; op2val:0xbed3c4e4; valaddr_reg:x16; val_offset:1392; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1392, x17, x15, 1392, x18)

inst_683:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x53c4e4 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x53c4e4 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed3c4e4; op2val:0xbed3c4e4; valaddr_reg:x16; val_offset:1400; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1400, x17, x15, 1400, x18)

inst_684:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x53c4e4 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x53c4e4 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed3c4e4; op2val:0xbed3c4e4; valaddr_reg:x16; val_offset:1408; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1408, x17, x15, 1408, x18)

inst_685:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x53c4e4 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x53c4e4 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed3c4e4; op2val:0xbed3c4e4; valaddr_reg:x16; val_offset:1416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1416, x17, x15, 1416, x18)

inst_686:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x55f98e and fs2 == 1 and fe2 == 0x7c and fm2 == 0x55f98e and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e55f98e; op2val:0xbe55f98e; valaddr_reg:x16; val_offset:1424; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1424, x17, x15, 1424, x18)

inst_687:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x55f98e and fs2 == 1 and fe2 == 0x7c and fm2 == 0x55f98e and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e55f98e; op2val:0xbe55f98e; valaddr_reg:x16; val_offset:1432; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1432, x17, x15, 1432, x18)

inst_688:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x55f98e and fs2 == 1 and fe2 == 0x7c and fm2 == 0x55f98e and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e55f98e; op2val:0xbe55f98e; valaddr_reg:x16; val_offset:1440; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1440, x17, x15, 1440, x18)

inst_689:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x55f98e and fs2 == 1 and fe2 == 0x7c and fm2 == 0x55f98e and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e55f98e; op2val:0xbe55f98e; valaddr_reg:x16; val_offset:1448; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1448, x17, x15, 1448, x18)

inst_690:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x55f98e and fs2 == 1 and fe2 == 0x7c and fm2 == 0x55f98e and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e55f98e; op2val:0xbe55f98e; valaddr_reg:x16; val_offset:1456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1456, x17, x15, 1456, x18)

inst_691:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x327c96 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x327c96 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e327c96; op2val:0xbe327c96; valaddr_reg:x16; val_offset:1464; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1464, x17, x15, 1464, x18)

inst_692:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x327c96 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x327c96 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e327c96; op2val:0xbe327c96; valaddr_reg:x16; val_offset:1472; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1472, x17, x15, 1472, x18)

inst_693:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x327c96 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x327c96 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e327c96; op2val:0xbe327c96; valaddr_reg:x16; val_offset:1480; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1480, x17, x15, 1480, x18)

inst_694:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x327c96 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x327c96 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e327c96; op2val:0xbe327c96; valaddr_reg:x16; val_offset:1488; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1488, x17, x15, 1488, x18)

inst_695:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x327c96 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x327c96 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e327c96; op2val:0xbe327c96; valaddr_reg:x16; val_offset:1496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1496, x17, x15, 1496, x18)

inst_696:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6dddea and fs2 == 1 and fe2 == 0x7d and fm2 == 0x6dddea and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eedddea; op2val:0xbeedddea; valaddr_reg:x16; val_offset:1504; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1504, x17, x15, 1504, x18)

inst_697:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6dddea and fs2 == 1 and fe2 == 0x7d and fm2 == 0x6dddea and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eedddea; op2val:0xbeedddea; valaddr_reg:x16; val_offset:1512; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1512, x17, x15, 1512, x18)

inst_698:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6dddea and fs2 == 1 and fe2 == 0x7d and fm2 == 0x6dddea and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eedddea; op2val:0xbeedddea; valaddr_reg:x16; val_offset:1520; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1520, x17, x15, 1520, x18)

inst_699:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6dddea and fs2 == 1 and fe2 == 0x7d and fm2 == 0x6dddea and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eedddea; op2val:0xbeedddea; valaddr_reg:x16; val_offset:1528; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1528, x17, x15, 1528, x18)

inst_700:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6dddea and fs2 == 1 and fe2 == 0x7d and fm2 == 0x6dddea and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eedddea; op2val:0xbeedddea; valaddr_reg:x16; val_offset:1536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1536, x17, x15, 1536, x18)

inst_701:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x40f609 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x40f609 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dc0f609; op2val:0xbdc0f609; valaddr_reg:x16; val_offset:1544; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1544, x17, x15, 1544, x18)

inst_702:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x40f609 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x40f609 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dc0f609; op2val:0xbdc0f609; valaddr_reg:x16; val_offset:1552; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1552, x17, x15, 1552, x18)

inst_703:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x40f609 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x40f609 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dc0f609; op2val:0xbdc0f609; valaddr_reg:x16; val_offset:1560; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1560, x17, x15, 1560, x18)

inst_704:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x40f609 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x40f609 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dc0f609; op2val:0xbdc0f609; valaddr_reg:x16; val_offset:1568; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1568, x17, x15, 1568, x18)

inst_705:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x40f609 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x40f609 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dc0f609; op2val:0xbdc0f609; valaddr_reg:x16; val_offset:1576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1576, x17, x15, 1576, x18)

inst_706:
// fs1 == 0 and fe1 == 0x78 and fm1 == 0x1b1d4f and fs2 == 1 and fe2 == 0x78 and fm2 == 0x1b1d4f and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3c1b1d4f; op2val:0xbc1b1d4f; valaddr_reg:x16; val_offset:1584; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1584, x17, x15, 1584, x18)

inst_707:
// fs1 == 0 and fe1 == 0x78 and fm1 == 0x1b1d4f and fs2 == 1 and fe2 == 0x78 and fm2 == 0x1b1d4f and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3c1b1d4f; op2val:0xbc1b1d4f; valaddr_reg:x16; val_offset:1592; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1592, x17, x15, 1592, x18)

inst_708:
// fs1 == 0 and fe1 == 0x78 and fm1 == 0x1b1d4f and fs2 == 1 and fe2 == 0x78 and fm2 == 0x1b1d4f and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3c1b1d4f; op2val:0xbc1b1d4f; valaddr_reg:x16; val_offset:1600; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1600, x17, x15, 1600, x18)

inst_709:
// fs1 == 0 and fe1 == 0x78 and fm1 == 0x1b1d4f and fs2 == 1 and fe2 == 0x78 and fm2 == 0x1b1d4f and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3c1b1d4f; op2val:0xbc1b1d4f; valaddr_reg:x16; val_offset:1608; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1608, x17, x15, 1608, x18)

inst_710:
// fs1 == 0 and fe1 == 0x78 and fm1 == 0x1b1d4f and fs2 == 1 and fe2 == 0x78 and fm2 == 0x1b1d4f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3c1b1d4f; op2val:0xbc1b1d4f; valaddr_reg:x16; val_offset:1616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1616, x17, x15, 1616, x18)

inst_711:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x47913f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x47913f and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e47913f; op2val:0xbe47913f; valaddr_reg:x16; val_offset:1624; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1624, x17, x15, 1624, x18)

inst_712:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x47913f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x47913f and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e47913f; op2val:0xbe47913f; valaddr_reg:x16; val_offset:1632; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1632, x17, x15, 1632, x18)

inst_713:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x47913f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x47913f and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e47913f; op2val:0xbe47913f; valaddr_reg:x16; val_offset:1640; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1640, x17, x15, 1640, x18)

inst_714:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x47913f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x47913f and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e47913f; op2val:0xbe47913f; valaddr_reg:x16; val_offset:1648; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1648, x17, x15, 1648, x18)

inst_715:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x47913f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x47913f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e47913f; op2val:0xbe47913f; valaddr_reg:x16; val_offset:1656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1656, x17, x15, 1656, x18)

inst_716:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5a2d62 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5a2d62 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eda2d62; op2val:0xbeda2d62; valaddr_reg:x16; val_offset:1664; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1664, x17, x15, 1664, x18)

inst_717:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5a2d62 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5a2d62 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eda2d62; op2val:0xbeda2d62; valaddr_reg:x16; val_offset:1672; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1672, x17, x15, 1672, x18)

inst_718:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5a2d62 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5a2d62 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eda2d62; op2val:0xbeda2d62; valaddr_reg:x16; val_offset:1680; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1680, x17, x15, 1680, x18)

inst_719:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5a2d62 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5a2d62 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eda2d62; op2val:0xbeda2d62; valaddr_reg:x16; val_offset:1688; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1688, x17, x15, 1688, x18)

inst_720:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5a2d62 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5a2d62 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eda2d62; op2val:0xbeda2d62; valaddr_reg:x16; val_offset:1696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1696, x17, x15, 1696, x18)

inst_721:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x4a9113 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x4a9113 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dca9113; op2val:0xbdca9113; valaddr_reg:x16; val_offset:1704; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1704, x17, x15, 1704, x18)

inst_722:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x4a9113 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x4a9113 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dca9113; op2val:0xbdca9113; valaddr_reg:x16; val_offset:1712; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1712, x17, x15, 1712, x18)

inst_723:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x4a9113 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x4a9113 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dca9113; op2val:0xbdca9113; valaddr_reg:x16; val_offset:1720; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1720, x17, x15, 1720, x18)

inst_724:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x4a9113 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x4a9113 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dca9113; op2val:0xbdca9113; valaddr_reg:x16; val_offset:1728; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1728, x17, x15, 1728, x18)

inst_725:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x4a9113 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x4a9113 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dca9113; op2val:0xbdca9113; valaddr_reg:x16; val_offset:1736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1736, x17, x15, 1736, x18)

inst_726:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x009f19 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x009f19 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d009f19; op2val:0xbd009f19; valaddr_reg:x16; val_offset:1744; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1744, x17, x15, 1744, x18)

inst_727:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x009f19 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x009f19 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d009f19; op2val:0xbd009f19; valaddr_reg:x16; val_offset:1752; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1752, x17, x15, 1752, x18)

inst_728:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x009f19 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x009f19 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d009f19; op2val:0xbd009f19; valaddr_reg:x16; val_offset:1760; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1760, x17, x15, 1760, x18)

inst_729:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x009f19 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x009f19 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d009f19; op2val:0xbd009f19; valaddr_reg:x16; val_offset:1768; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1768, x17, x15, 1768, x18)

inst_730:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x009f19 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x009f19 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d009f19; op2val:0xbd009f19; valaddr_reg:x16; val_offset:1776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1776, x17, x15, 1776, x18)

inst_731:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x59e6f7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x59e6f7 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f59e6f7; op2val:0xbf59e6f7; valaddr_reg:x16; val_offset:1784; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1784, x17, x15, 1784, x18)

inst_732:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x59e6f7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x59e6f7 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f59e6f7; op2val:0xbf59e6f7; valaddr_reg:x16; val_offset:1792; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1792, x17, x15, 1792, x18)

inst_733:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x59e6f7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x59e6f7 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f59e6f7; op2val:0xbf59e6f7; valaddr_reg:x16; val_offset:1800; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1800, x17, x15, 1800, x18)

inst_734:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x59e6f7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x59e6f7 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f59e6f7; op2val:0xbf59e6f7; valaddr_reg:x16; val_offset:1808; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1808, x17, x15, 1808, x18)

inst_735:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x59e6f7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x59e6f7 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f59e6f7; op2val:0xbf59e6f7; valaddr_reg:x16; val_offset:1816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1816, x17, x15, 1816, x18)

inst_736:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2b5e2a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2b5e2a and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2b5e2a; op2val:0xbf2b5e2a; valaddr_reg:x16; val_offset:1824; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1824, x17, x15, 1824, x18)

inst_737:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2b5e2a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2b5e2a and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2b5e2a; op2val:0xbf2b5e2a; valaddr_reg:x16; val_offset:1832; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1832, x17, x15, 1832, x18)

inst_738:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2b5e2a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2b5e2a and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2b5e2a; op2val:0xbf2b5e2a; valaddr_reg:x16; val_offset:1840; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1840, x17, x15, 1840, x18)

inst_739:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2b5e2a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2b5e2a and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2b5e2a; op2val:0xbf2b5e2a; valaddr_reg:x16; val_offset:1848; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1848, x17, x15, 1848, x18)

inst_740:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2b5e2a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2b5e2a and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2b5e2a; op2val:0xbf2b5e2a; valaddr_reg:x16; val_offset:1856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1856, x17, x15, 1856, x18)

inst_741:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7c1645 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7c1645 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7c1645; op2val:0xbf7c1645; valaddr_reg:x16; val_offset:1864; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1864, x17, x15, 1864, x18)

inst_742:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7c1645 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7c1645 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7c1645; op2val:0xbf7c1645; valaddr_reg:x16; val_offset:1872; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1872, x17, x15, 1872, x18)

inst_743:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7c1645 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7c1645 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7c1645; op2val:0xbf7c1645; valaddr_reg:x16; val_offset:1880; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1880, x17, x15, 1880, x18)

inst_744:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7c1645 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7c1645 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7c1645; op2val:0xbf7c1645; valaddr_reg:x16; val_offset:1888; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1888, x17, x15, 1888, x18)

inst_745:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7c1645 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7c1645 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7c1645; op2val:0xbf7c1645; valaddr_reg:x16; val_offset:1896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1896, x17, x15, 1896, x18)

inst_746:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x466075 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x466075 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f466075; op2val:0xbf466075; valaddr_reg:x16; val_offset:1904; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1904, x17, x15, 1904, x18)

inst_747:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x466075 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x466075 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f466075; op2val:0xbf466075; valaddr_reg:x16; val_offset:1912; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1912, x17, x15, 1912, x18)

inst_748:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x466075 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x466075 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f466075; op2val:0xbf466075; valaddr_reg:x16; val_offset:1920; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1920, x17, x15, 1920, x18)

inst_749:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x466075 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x466075 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f466075; op2val:0xbf466075; valaddr_reg:x16; val_offset:1928; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1928, x17, x15, 1928, x18)

inst_750:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x466075 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x466075 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f466075; op2val:0xbf466075; valaddr_reg:x16; val_offset:1936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1936, x17, x15, 1936, x18)

inst_751:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x06404e and fs2 == 1 and fe2 == 0x7c and fm2 == 0x06404e and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e06404e; op2val:0xbe06404e; valaddr_reg:x16; val_offset:1944; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1944, x17, x15, 1944, x18)

inst_752:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x06404e and fs2 == 1 and fe2 == 0x7c and fm2 == 0x06404e and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e06404e; op2val:0xbe06404e; valaddr_reg:x16; val_offset:1952; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1952, x17, x15, 1952, x18)

inst_753:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x06404e and fs2 == 1 and fe2 == 0x7c and fm2 == 0x06404e and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e06404e; op2val:0xbe06404e; valaddr_reg:x16; val_offset:1960; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1960, x17, x15, 1960, x18)

inst_754:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x06404e and fs2 == 1 and fe2 == 0x7c and fm2 == 0x06404e and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e06404e; op2val:0xbe06404e; valaddr_reg:x16; val_offset:1968; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1968, x17, x15, 1968, x18)

inst_755:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x06404e and fs2 == 1 and fe2 == 0x7c and fm2 == 0x06404e and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e06404e; op2val:0xbe06404e; valaddr_reg:x16; val_offset:1976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1976, x17, x15, 1976, x18)

inst_756:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6f0316 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6f0316 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6f0316; op2val:0xbf6f0316; valaddr_reg:x16; val_offset:1984; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1984, x17, x15, 1984, x18)

inst_757:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6f0316 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6f0316 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6f0316; op2val:0xbf6f0316; valaddr_reg:x16; val_offset:1992; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1992, x17, x15, 1992, x18)

inst_758:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6f0316 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6f0316 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6f0316; op2val:0xbf6f0316; valaddr_reg:x16; val_offset:2000; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 2000, x17, x15, 2000, x18)

inst_759:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6f0316 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6f0316 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6f0316; op2val:0xbf6f0316; valaddr_reg:x16; val_offset:2008; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 2008, x17, x15, 2008, x18)

inst_760:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6f0316 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6f0316 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6f0316; op2val:0xbf6f0316; valaddr_reg:x16; val_offset:2016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2016, x17, x15, 2016, x18)

inst_761:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x10510c and fs2 == 1 and fe2 == 0x7d and fm2 == 0x10510c and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e90510c; op2val:0xbe90510c; valaddr_reg:x16; val_offset:2024; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_4)

inst_762:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x10510c and fs2 == 1 and fe2 == 0x7d and fm2 == 0x10510c and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e90510c; op2val:0xbe90510c; valaddr_reg:x16; val_offset:0; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 0, x17, x15, 0, x18)

inst_763:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x10510c and fs2 == 1 and fe2 == 0x7d and fm2 == 0x10510c and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e90510c; op2val:0xbe90510c; valaddr_reg:x16; val_offset:8; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 8, x17, x15, 8, x18)

inst_764:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x10510c and fs2 == 1 and fe2 == 0x7d and fm2 == 0x10510c and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e90510c; op2val:0xbe90510c; valaddr_reg:x16; val_offset:16; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 16, x17, x15, 16, x18)

inst_765:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x10510c and fs2 == 1 and fe2 == 0x7d and fm2 == 0x10510c and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e90510c; op2val:0xbe90510c; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 24, x17, x15, 24, x18)

inst_766:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x21735f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x21735f and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e21735f; op2val:0xbe21735f; valaddr_reg:x16; val_offset:32; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 32, x17, x15, 32, x18)

inst_767:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x21735f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x21735f and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e21735f; op2val:0xbe21735f; valaddr_reg:x16; val_offset:40; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 40, x17, x15, 40, x18)

inst_768:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x21735f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x21735f and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e21735f; op2val:0xbe21735f; valaddr_reg:x16; val_offset:48; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 48, x17, x15, 48, x18)

inst_769:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x21735f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x21735f and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e21735f; op2val:0xbe21735f; valaddr_reg:x16; val_offset:56; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 56, x17, x15, 56, x18)

inst_770:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x21735f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x21735f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e21735f; op2val:0xbe21735f; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 64, x17, x15, 64, x18)

inst_771:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3e3cfc and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3e3cfc and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3e3cfc; op2val:0xbf3e3cfc; valaddr_reg:x16; val_offset:72; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 72, x17, x15, 72, x18)

inst_772:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3e3cfc and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3e3cfc and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3e3cfc; op2val:0xbf3e3cfc; valaddr_reg:x16; val_offset:80; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 80, x17, x15, 80, x18)

inst_773:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3e3cfc and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3e3cfc and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3e3cfc; op2val:0xbf3e3cfc; valaddr_reg:x16; val_offset:88; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 88, x17, x15, 88, x18)

inst_774:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3e3cfc and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3e3cfc and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3e3cfc; op2val:0xbf3e3cfc; valaddr_reg:x16; val_offset:96; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 96, x17, x15, 96, x18)

inst_775:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3e3cfc and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3e3cfc and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3e3cfc; op2val:0xbf3e3cfc; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 104, x17, x15, 104, x18)

inst_776:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x76eb8d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x76eb8d and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f76eb8d; op2val:0xbf76eb8d; valaddr_reg:x16; val_offset:112; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 112, x17, x15, 112, x18)

inst_777:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x76eb8d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x76eb8d and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f76eb8d; op2val:0xbf76eb8d; valaddr_reg:x16; val_offset:120; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 120, x17, x15, 120, x18)

inst_778:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x76eb8d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x76eb8d and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f76eb8d; op2val:0xbf76eb8d; valaddr_reg:x16; val_offset:128; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 128, x17, x15, 128, x18)

inst_779:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x76eb8d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x76eb8d and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f76eb8d; op2val:0xbf76eb8d; valaddr_reg:x16; val_offset:136; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 136, x17, x15, 136, x18)

inst_780:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x76eb8d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x76eb8d and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f76eb8d; op2val:0xbf76eb8d; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 144, x17, x15, 144, x18)

inst_781:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x4ed4df and fs2 == 1 and fe2 == 0x7b and fm2 == 0x4ed4df and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dced4df; op2val:0xbdced4df; valaddr_reg:x16; val_offset:152; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 152, x17, x15, 152, x18)

inst_782:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x4ed4df and fs2 == 1 and fe2 == 0x7b and fm2 == 0x4ed4df and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dced4df; op2val:0xbdced4df; valaddr_reg:x16; val_offset:160; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 160, x17, x15, 160, x18)

inst_783:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x4ed4df and fs2 == 1 and fe2 == 0x7b and fm2 == 0x4ed4df and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dced4df; op2val:0xbdced4df; valaddr_reg:x16; val_offset:168; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 168, x17, x15, 168, x18)

inst_784:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x4ed4df and fs2 == 1 and fe2 == 0x7b and fm2 == 0x4ed4df and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dced4df; op2val:0xbdced4df; valaddr_reg:x16; val_offset:176; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 176, x17, x15, 176, x18)

inst_785:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x4ed4df and fs2 == 1 and fe2 == 0x7b and fm2 == 0x4ed4df and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dced4df; op2val:0xbdced4df; valaddr_reg:x16; val_offset:184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 184, x17, x15, 184, x18)

inst_786:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x28e752 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x28e752 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f28e752; op2val:0xbf28e752; valaddr_reg:x16; val_offset:192; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 192, x17, x15, 192, x18)

inst_787:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x28e752 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x28e752 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f28e752; op2val:0xbf28e752; valaddr_reg:x16; val_offset:200; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 200, x17, x15, 200, x18)

inst_788:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x28e752 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x28e752 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f28e752; op2val:0xbf28e752; valaddr_reg:x16; val_offset:208; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 208, x17, x15, 208, x18)

inst_789:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x28e752 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x28e752 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f28e752; op2val:0xbf28e752; valaddr_reg:x16; val_offset:216; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 216, x17, x15, 216, x18)

inst_790:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x28e752 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x28e752 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f28e752; op2val:0xbf28e752; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 224, x17, x15, 224, x18)

inst_791:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x47cc25 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x47cc25 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec7cc25; op2val:0xbec7cc25; valaddr_reg:x16; val_offset:232; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 232, x17, x15, 232, x18)

inst_792:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x47cc25 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x47cc25 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec7cc25; op2val:0xbec7cc25; valaddr_reg:x16; val_offset:240; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 240, x17, x15, 240, x18)

inst_793:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x47cc25 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x47cc25 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec7cc25; op2val:0xbec7cc25; valaddr_reg:x16; val_offset:248; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 248, x17, x15, 248, x18)

inst_794:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x47cc25 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x47cc25 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec7cc25; op2val:0xbec7cc25; valaddr_reg:x16; val_offset:256; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 256, x17, x15, 256, x18)

inst_795:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x47cc25 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x47cc25 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec7cc25; op2val:0xbec7cc25; valaddr_reg:x16; val_offset:264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 264, x17, x15, 264, x18)

inst_796:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x28ecd3 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x28ecd3 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea8ecd3; op2val:0xbea8ecd3; valaddr_reg:x16; val_offset:272; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 272, x17, x15, 272, x18)

inst_797:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x28ecd3 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x28ecd3 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea8ecd3; op2val:0xbea8ecd3; valaddr_reg:x16; val_offset:280; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 280, x17, x15, 280, x18)

inst_798:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x28ecd3 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x28ecd3 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea8ecd3; op2val:0xbea8ecd3; valaddr_reg:x16; val_offset:288; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 288, x17, x15, 288, x18)

inst_799:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x28ecd3 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x28ecd3 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea8ecd3; op2val:0xbea8ecd3; valaddr_reg:x16; val_offset:296; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 296, x17, x15, 296, x18)

inst_800:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x28ecd3 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x28ecd3 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea8ecd3; op2val:0xbea8ecd3; valaddr_reg:x16; val_offset:304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 304, x17, x15, 304, x18)

inst_801:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x00662d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x00662d and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f00662d; op2val:0xbf00662d; valaddr_reg:x16; val_offset:312; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 312, x17, x15, 312, x18)

inst_802:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x00662d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x00662d and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f00662d; op2val:0xbf00662d; valaddr_reg:x16; val_offset:320; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 320, x17, x15, 320, x18)

inst_803:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x00662d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x00662d and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f00662d; op2val:0xbf00662d; valaddr_reg:x16; val_offset:328; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 328, x17, x15, 328, x18)

inst_804:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x00662d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x00662d and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f00662d; op2val:0xbf00662d; valaddr_reg:x16; val_offset:336; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 336, x17, x15, 336, x18)

inst_805:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x00662d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x00662d and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f00662d; op2val:0xbf00662d; valaddr_reg:x16; val_offset:344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 344, x17, x15, 344, x18)

inst_806:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x29e36f and fs2 == 1 and fe2 == 0x7b and fm2 == 0x29e36f and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3da9e36f; op2val:0xbda9e36f; valaddr_reg:x16; val_offset:352; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 352, x17, x15, 352, x18)

inst_807:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x29e36f and fs2 == 1 and fe2 == 0x7b and fm2 == 0x29e36f and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3da9e36f; op2val:0xbda9e36f; valaddr_reg:x16; val_offset:360; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 360, x17, x15, 360, x18)

inst_808:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x29e36f and fs2 == 1 and fe2 == 0x7b and fm2 == 0x29e36f and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3da9e36f; op2val:0xbda9e36f; valaddr_reg:x16; val_offset:368; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 368, x17, x15, 368, x18)

inst_809:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x29e36f and fs2 == 1 and fe2 == 0x7b and fm2 == 0x29e36f and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3da9e36f; op2val:0xbda9e36f; valaddr_reg:x16; val_offset:376; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 376, x17, x15, 376, x18)

inst_810:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x29e36f and fs2 == 1 and fe2 == 0x7b and fm2 == 0x29e36f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3da9e36f; op2val:0xbda9e36f; valaddr_reg:x16; val_offset:384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 384, x17, x15, 384, x18)

inst_811:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7a8f2f and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7a8f2f and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dfa8f2f; op2val:0xbdfa8f2f; valaddr_reg:x16; val_offset:392; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 392, x17, x15, 392, x18)

inst_812:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7a8f2f and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7a8f2f and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dfa8f2f; op2val:0xbdfa8f2f; valaddr_reg:x16; val_offset:400; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 400, x17, x15, 400, x18)

inst_813:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7a8f2f and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7a8f2f and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dfa8f2f; op2val:0xbdfa8f2f; valaddr_reg:x16; val_offset:408; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 408, x17, x15, 408, x18)

inst_814:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7a8f2f and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7a8f2f and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dfa8f2f; op2val:0xbdfa8f2f; valaddr_reg:x16; val_offset:416; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 416, x17, x15, 416, x18)

inst_815:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7a8f2f and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7a8f2f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dfa8f2f; op2val:0xbdfa8f2f; valaddr_reg:x16; val_offset:424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 424, x17, x15, 424, x18)

inst_816:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x18167c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x18167c and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f18167c; op2val:0xbf18167c; valaddr_reg:x16; val_offset:432; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 432, x17, x15, 432, x18)

inst_817:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x18167c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x18167c and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f18167c; op2val:0xbf18167c; valaddr_reg:x16; val_offset:440; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 440, x17, x15, 440, x18)

inst_818:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x18167c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x18167c and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f18167c; op2val:0xbf18167c; valaddr_reg:x16; val_offset:448; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 448, x17, x15, 448, x18)

inst_819:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x18167c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x18167c and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f18167c; op2val:0xbf18167c; valaddr_reg:x16; val_offset:456; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 456, x17, x15, 456, x18)

inst_820:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x18167c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x18167c and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f18167c; op2val:0xbf18167c; valaddr_reg:x16; val_offset:464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 464, x17, x15, 464, x18)

inst_821:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x0b5a36 and fs2 == 1 and fe2 == 0x79 and fm2 == 0x0b5a36 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3c8b5a36; op2val:0xbc8b5a36; valaddr_reg:x16; val_offset:472; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 472, x17, x15, 472, x18)

inst_822:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x0b5a36 and fs2 == 1 and fe2 == 0x79 and fm2 == 0x0b5a36 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3c8b5a36; op2val:0xbc8b5a36; valaddr_reg:x16; val_offset:480; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 480, x17, x15, 480, x18)

inst_823:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x0b5a36 and fs2 == 1 and fe2 == 0x79 and fm2 == 0x0b5a36 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3c8b5a36; op2val:0xbc8b5a36; valaddr_reg:x16; val_offset:488; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 488, x17, x15, 488, x18)

inst_824:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x0b5a36 and fs2 == 1 and fe2 == 0x79 and fm2 == 0x0b5a36 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3c8b5a36; op2val:0xbc8b5a36; valaddr_reg:x16; val_offset:496; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 496, x17, x15, 496, x18)

inst_825:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x0b5a36 and fs2 == 1 and fe2 == 0x79 and fm2 == 0x0b5a36 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3c8b5a36; op2val:0xbc8b5a36; valaddr_reg:x16; val_offset:504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 504, x17, x15, 504, x18)

inst_826:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x594226 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x594226 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f594226; op2val:0xbf594226; valaddr_reg:x16; val_offset:512; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 512, x17, x15, 512, x18)

inst_827:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x594226 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x594226 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f594226; op2val:0xbf594226; valaddr_reg:x16; val_offset:520; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 520, x17, x15, 520, x18)

inst_828:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x594226 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x594226 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f594226; op2val:0xbf594226; valaddr_reg:x16; val_offset:528; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 528, x17, x15, 528, x18)

inst_829:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x594226 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x594226 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f594226; op2val:0xbf594226; valaddr_reg:x16; val_offset:536; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 536, x17, x15, 536, x18)

inst_830:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x594226 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x594226 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f594226; op2val:0xbf594226; valaddr_reg:x16; val_offset:544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 544, x17, x15, 544, x18)

inst_831:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1f394c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1f394c and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1f394c; op2val:0xbf1f394c; valaddr_reg:x16; val_offset:552; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 552, x17, x15, 552, x18)

inst_832:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1f394c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1f394c and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1f394c; op2val:0xbf1f394c; valaddr_reg:x16; val_offset:560; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 560, x17, x15, 560, x18)

inst_833:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1f394c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1f394c and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1f394c; op2val:0xbf1f394c; valaddr_reg:x16; val_offset:568; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 568, x17, x15, 568, x18)

inst_834:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1f394c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1f394c and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1f394c; op2val:0xbf1f394c; valaddr_reg:x16; val_offset:576; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 576, x17, x15, 576, x18)

inst_835:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1f394c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1f394c and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1f394c; op2val:0xbf1f394c; valaddr_reg:x16; val_offset:584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 584, x17, x15, 584, x18)

inst_836:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5a8883 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5a8883 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5a8883; op2val:0xbf5a8883; valaddr_reg:x16; val_offset:592; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 592, x17, x15, 592, x18)

inst_837:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5a8883 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5a8883 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5a8883; op2val:0xbf5a8883; valaddr_reg:x16; val_offset:600; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 600, x17, x15, 600, x18)

inst_838:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5a8883 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5a8883 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5a8883; op2val:0xbf5a8883; valaddr_reg:x16; val_offset:608; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 608, x17, x15, 608, x18)

inst_839:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5a8883 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5a8883 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5a8883; op2val:0xbf5a8883; valaddr_reg:x16; val_offset:616; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 616, x17, x15, 616, x18)

inst_840:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5a8883 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5a8883 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5a8883; op2val:0xbf5a8883; valaddr_reg:x16; val_offset:624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 624, x17, x15, 624, x18)

inst_841:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x55267a and fs2 == 1 and fe2 == 0x7a and fm2 == 0x55267a and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d55267a; op2val:0xbd55267a; valaddr_reg:x16; val_offset:632; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 632, x17, x15, 632, x18)

inst_842:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x55267a and fs2 == 1 and fe2 == 0x7a and fm2 == 0x55267a and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d55267a; op2val:0xbd55267a; valaddr_reg:x16; val_offset:640; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 640, x17, x15, 640, x18)

inst_843:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x55267a and fs2 == 1 and fe2 == 0x7a and fm2 == 0x55267a and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d55267a; op2val:0xbd55267a; valaddr_reg:x16; val_offset:648; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 648, x17, x15, 648, x18)

inst_844:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x55267a and fs2 == 1 and fe2 == 0x7a and fm2 == 0x55267a and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d55267a; op2val:0xbd55267a; valaddr_reg:x16; val_offset:656; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 656, x17, x15, 656, x18)

inst_845:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x55267a and fs2 == 1 and fe2 == 0x7a and fm2 == 0x55267a and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d55267a; op2val:0xbd55267a; valaddr_reg:x16; val_offset:664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 664, x17, x15, 664, x18)

inst_846:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4af2d8 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4af2d8 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4af2d8; op2val:0xbf4af2d8; valaddr_reg:x16; val_offset:672; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 672, x17, x15, 672, x18)

inst_847:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4af2d8 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4af2d8 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4af2d8; op2val:0xbf4af2d8; valaddr_reg:x16; val_offset:680; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 680, x17, x15, 680, x18)

inst_848:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4af2d8 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4af2d8 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4af2d8; op2val:0xbf4af2d8; valaddr_reg:x16; val_offset:688; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 688, x17, x15, 688, x18)

inst_849:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4af2d8 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4af2d8 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4af2d8; op2val:0xbf4af2d8; valaddr_reg:x16; val_offset:696; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 696, x17, x15, 696, x18)

inst_850:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4af2d8 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4af2d8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4af2d8; op2val:0xbf4af2d8; valaddr_reg:x16; val_offset:704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 704, x17, x15, 704, x18)

inst_851:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x618f18 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x618f18 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f618f18; op2val:0xbf618f18; valaddr_reg:x16; val_offset:712; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 712, x17, x15, 712, x18)

inst_852:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x618f18 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x618f18 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f618f18; op2val:0xbf618f18; valaddr_reg:x16; val_offset:720; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 720, x17, x15, 720, x18)

inst_853:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x618f18 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x618f18 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f618f18; op2val:0xbf618f18; valaddr_reg:x16; val_offset:728; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 728, x17, x15, 728, x18)

inst_854:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x618f18 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x618f18 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f618f18; op2val:0xbf618f18; valaddr_reg:x16; val_offset:736; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 736, x17, x15, 736, x18)

inst_855:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x618f18 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x618f18 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f618f18; op2val:0xbf618f18; valaddr_reg:x16; val_offset:744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 744, x17, x15, 744, x18)

inst_856:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0c632b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0c632b and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0c632b; op2val:0xbf0c632b; valaddr_reg:x16; val_offset:752; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 752, x17, x15, 752, x18)

inst_857:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0c632b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0c632b and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0c632b; op2val:0xbf0c632b; valaddr_reg:x16; val_offset:760; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 760, x17, x15, 760, x18)

inst_858:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0c632b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0c632b and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0c632b; op2val:0xbf0c632b; valaddr_reg:x16; val_offset:768; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 768, x17, x15, 768, x18)

inst_859:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0c632b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0c632b and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0c632b; op2val:0xbf0c632b; valaddr_reg:x16; val_offset:776; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 776, x17, x15, 776, x18)

inst_860:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0c632b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0c632b and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0c632b; op2val:0xbf0c632b; valaddr_reg:x16; val_offset:784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 784, x17, x15, 784, x18)

inst_861:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1892e9 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x1892e9 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9892e9; op2val:0xbe9892e9; valaddr_reg:x16; val_offset:792; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 792, x17, x15, 792, x18)

inst_862:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1892e9 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x1892e9 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9892e9; op2val:0xbe9892e9; valaddr_reg:x16; val_offset:800; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 800, x17, x15, 800, x18)

inst_863:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1892e9 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x1892e9 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9892e9; op2val:0xbe9892e9; valaddr_reg:x16; val_offset:808; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 808, x17, x15, 808, x18)

inst_864:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1892e9 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x1892e9 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9892e9; op2val:0xbe9892e9; valaddr_reg:x16; val_offset:816; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 816, x17, x15, 816, x18)

inst_865:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1892e9 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x1892e9 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9892e9; op2val:0xbe9892e9; valaddr_reg:x16; val_offset:824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 824, x17, x15, 824, x18)

inst_866:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6fa701 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6fa701 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6fa701; op2val:0xbf6fa701; valaddr_reg:x16; val_offset:832; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 832, x17, x15, 832, x18)

inst_867:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6fa701 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6fa701 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6fa701; op2val:0xbf6fa701; valaddr_reg:x16; val_offset:840; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 840, x17, x15, 840, x18)

inst_868:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6fa701 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6fa701 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6fa701; op2val:0xbf6fa701; valaddr_reg:x16; val_offset:848; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 848, x17, x15, 848, x18)

inst_869:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6fa701 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6fa701 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6fa701; op2val:0xbf6fa701; valaddr_reg:x16; val_offset:856; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 856, x17, x15, 856, x18)

inst_870:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6fa701 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6fa701 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6fa701; op2val:0xbf6fa701; valaddr_reg:x16; val_offset:864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 864, x17, x15, 864, x18)

inst_871:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x119b7f and fs2 == 1 and fe2 == 0x7e and fm2 == 0x119b7f and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f119b7f; op2val:0xbf119b7f; valaddr_reg:x16; val_offset:872; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 872, x17, x15, 872, x18)

inst_872:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x119b7f and fs2 == 1 and fe2 == 0x7e and fm2 == 0x119b7f and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f119b7f; op2val:0xbf119b7f; valaddr_reg:x16; val_offset:880; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 880, x17, x15, 880, x18)

inst_873:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x119b7f and fs2 == 1 and fe2 == 0x7e and fm2 == 0x119b7f and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f119b7f; op2val:0xbf119b7f; valaddr_reg:x16; val_offset:888; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 888, x17, x15, 888, x18)

inst_874:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x119b7f and fs2 == 1 and fe2 == 0x7e and fm2 == 0x119b7f and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f119b7f; op2val:0xbf119b7f; valaddr_reg:x16; val_offset:896; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 896, x17, x15, 896, x18)

inst_875:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x119b7f and fs2 == 1 and fe2 == 0x7e and fm2 == 0x119b7f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f119b7f; op2val:0xbf119b7f; valaddr_reg:x16; val_offset:904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 904, x17, x15, 904, x18)

inst_876:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3d3492 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3d3492 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3d3492; op2val:0xbf3d3492; valaddr_reg:x16; val_offset:912; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 912, x17, x15, 912, x18)

inst_877:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3d3492 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3d3492 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3d3492; op2val:0xbf3d3492; valaddr_reg:x16; val_offset:920; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 920, x17, x15, 920, x18)

inst_878:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3d3492 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3d3492 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3d3492; op2val:0xbf3d3492; valaddr_reg:x16; val_offset:928; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 928, x17, x15, 928, x18)

inst_879:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3d3492 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3d3492 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3d3492; op2val:0xbf3d3492; valaddr_reg:x16; val_offset:936; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 936, x17, x15, 936, x18)

inst_880:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3d3492 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3d3492 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3d3492; op2val:0xbf3d3492; valaddr_reg:x16; val_offset:944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 944, x17, x15, 944, x18)

inst_881:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x21b507 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x21b507 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f21b507; op2val:0xbf21b507; valaddr_reg:x16; val_offset:952; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 952, x17, x15, 952, x18)

inst_882:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x21b507 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x21b507 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f21b507; op2val:0xbf21b507; valaddr_reg:x16; val_offset:960; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 960, x17, x15, 960, x18)

inst_883:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x21b507 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x21b507 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f21b507; op2val:0xbf21b507; valaddr_reg:x16; val_offset:968; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 968, x17, x15, 968, x18)

inst_884:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x21b507 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x21b507 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f21b507; op2val:0xbf21b507; valaddr_reg:x16; val_offset:976; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 976, x17, x15, 976, x18)

inst_885:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x21b507 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x21b507 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f21b507; op2val:0xbf21b507; valaddr_reg:x16; val_offset:984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 984, x17, x15, 984, x18)

inst_886:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x243274 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x243274 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea43274; op2val:0xbea43274; valaddr_reg:x16; val_offset:992; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 992, x17, x15, 992, x18)

inst_887:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x243274 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x243274 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea43274; op2val:0xbea43274; valaddr_reg:x16; val_offset:1000; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1000, x17, x15, 1000, x18)

inst_888:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x243274 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x243274 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea43274; op2val:0xbea43274; valaddr_reg:x16; val_offset:1008; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1008, x17, x15, 1008, x18)

inst_889:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x243274 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x243274 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea43274; op2val:0xbea43274; valaddr_reg:x16; val_offset:1016; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1016, x17, x15, 1016, x18)

inst_890:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x243274 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x243274 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea43274; op2val:0xbea43274; valaddr_reg:x16; val_offset:1024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1024, x17, x15, 1024, x18)

inst_891:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x02e9e0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x02e9e0 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f02e9e0; op2val:0xbf02e9e0; valaddr_reg:x16; val_offset:1032; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1032, x17, x15, 1032, x18)

inst_892:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x02e9e0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x02e9e0 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f02e9e0; op2val:0xbf02e9e0; valaddr_reg:x16; val_offset:1040; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1040, x17, x15, 1040, x18)

inst_893:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x02e9e0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x02e9e0 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f02e9e0; op2val:0xbf02e9e0; valaddr_reg:x16; val_offset:1048; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1048, x17, x15, 1048, x18)

inst_894:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x02e9e0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x02e9e0 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f02e9e0; op2val:0xbf02e9e0; valaddr_reg:x16; val_offset:1056; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1056, x17, x15, 1056, x18)

inst_895:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x02e9e0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x02e9e0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f02e9e0; op2val:0xbf02e9e0; valaddr_reg:x16; val_offset:1064; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1064, x17, x15, 1064, x18)

inst_896:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x764524 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x764524 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef64524; op2val:0xbef64524; valaddr_reg:x16; val_offset:1072; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1072, x17, x15, 1072, x18)

inst_897:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x764524 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x764524 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef64524; op2val:0xbef64524; valaddr_reg:x16; val_offset:1080; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1080, x17, x15, 1080, x18)

inst_898:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x764524 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x764524 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef64524; op2val:0xbef64524; valaddr_reg:x16; val_offset:1088; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1088, x17, x15, 1088, x18)

inst_899:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x764524 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x764524 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef64524; op2val:0xbef64524; valaddr_reg:x16; val_offset:1096; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1096, x17, x15, 1096, x18)

inst_900:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x764524 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x764524 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef64524; op2val:0xbef64524; valaddr_reg:x16; val_offset:1104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1104, x17, x15, 1104, x18)

inst_901:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7dfd79 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7dfd79 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7dfd79; op2val:0xbf7dfd79; valaddr_reg:x16; val_offset:1112; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1112, x17, x15, 1112, x18)

inst_902:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7dfd79 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7dfd79 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7dfd79; op2val:0xbf7dfd79; valaddr_reg:x16; val_offset:1120; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1120, x17, x15, 1120, x18)

inst_903:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7dfd79 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7dfd79 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7dfd79; op2val:0xbf7dfd79; valaddr_reg:x16; val_offset:1128; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1128, x17, x15, 1128, x18)

inst_904:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7dfd79 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7dfd79 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7dfd79; op2val:0xbf7dfd79; valaddr_reg:x16; val_offset:1136; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1136, x17, x15, 1136, x18)

inst_905:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7dfd79 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7dfd79 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7dfd79; op2val:0xbf7dfd79; valaddr_reg:x16; val_offset:1144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1144, x17, x15, 1144, x18)

inst_906:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x001118 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x001118 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e801118; op2val:0xbe801118; valaddr_reg:x16; val_offset:1152; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1152, x17, x15, 1152, x18)

inst_907:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x001118 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x001118 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e801118; op2val:0xbe801118; valaddr_reg:x16; val_offset:1160; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1160, x17, x15, 1160, x18)

inst_908:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x001118 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x001118 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e801118; op2val:0xbe801118; valaddr_reg:x16; val_offset:1168; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1168, x17, x15, 1168, x18)

inst_909:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x001118 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x001118 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e801118; op2val:0xbe801118; valaddr_reg:x16; val_offset:1176; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1176, x17, x15, 1176, x18)

inst_910:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x001118 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x001118 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e801118; op2val:0xbe801118; valaddr_reg:x16; val_offset:1184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1184, x17, x15, 1184, x18)

inst_911:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6f2575 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6f2575 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6f2575; op2val:0xbf6f2575; valaddr_reg:x16; val_offset:1192; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1192, x17, x15, 1192, x18)

inst_912:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6f2575 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6f2575 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6f2575; op2val:0xbf6f2575; valaddr_reg:x16; val_offset:1200; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1200, x17, x15, 1200, x18)

inst_913:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6f2575 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6f2575 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6f2575; op2val:0xbf6f2575; valaddr_reg:x16; val_offset:1208; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1208, x17, x15, 1208, x18)

inst_914:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6f2575 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6f2575 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6f2575; op2val:0xbf6f2575; valaddr_reg:x16; val_offset:1216; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1216, x17, x15, 1216, x18)

inst_915:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6f2575 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6f2575 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6f2575; op2val:0xbf6f2575; valaddr_reg:x16; val_offset:1224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1224, x17, x15, 1224, x18)

inst_916:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x506674 and fs2 == 1 and fe2 == 0x79 and fm2 == 0x506674 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3cd06674; op2val:0xbcd06674; valaddr_reg:x16; val_offset:1232; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1232, x17, x15, 1232, x18)

inst_917:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x506674 and fs2 == 1 and fe2 == 0x79 and fm2 == 0x506674 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3cd06674; op2val:0xbcd06674; valaddr_reg:x16; val_offset:1240; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1240, x17, x15, 1240, x18)

inst_918:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x506674 and fs2 == 1 and fe2 == 0x79 and fm2 == 0x506674 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3cd06674; op2val:0xbcd06674; valaddr_reg:x16; val_offset:1248; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1248, x17, x15, 1248, x18)

inst_919:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x506674 and fs2 == 1 and fe2 == 0x79 and fm2 == 0x506674 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3cd06674; op2val:0xbcd06674; valaddr_reg:x16; val_offset:1256; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1256, x17, x15, 1256, x18)

inst_920:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x506674 and fs2 == 1 and fe2 == 0x79 and fm2 == 0x506674 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3cd06674; op2val:0xbcd06674; valaddr_reg:x16; val_offset:1264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1264, x17, x15, 1264, x18)

inst_921:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3f1baa and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3f1baa and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebf1baa; op2val:0xbebf1baa; valaddr_reg:x16; val_offset:1272; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1272, x17, x15, 1272, x18)

inst_922:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3f1baa and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3f1baa and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebf1baa; op2val:0xbebf1baa; valaddr_reg:x16; val_offset:1280; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1280, x17, x15, 1280, x18)

inst_923:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3f1baa and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3f1baa and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebf1baa; op2val:0xbebf1baa; valaddr_reg:x16; val_offset:1288; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1288, x17, x15, 1288, x18)

inst_924:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3f1baa and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3f1baa and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebf1baa; op2val:0xbebf1baa; valaddr_reg:x16; val_offset:1296; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1296, x17, x15, 1296, x18)

inst_925:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3f1baa and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3f1baa and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebf1baa; op2val:0xbebf1baa; valaddr_reg:x16; val_offset:1304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1304, x17, x15, 1304, x18)

inst_926:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x5844ed and fs2 == 1 and fe2 == 0x7b and fm2 == 0x5844ed and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dd844ed; op2val:0xbdd844ed; valaddr_reg:x16; val_offset:1312; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1312, x17, x15, 1312, x18)

inst_927:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x5844ed and fs2 == 1 and fe2 == 0x7b and fm2 == 0x5844ed and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dd844ed; op2val:0xbdd844ed; valaddr_reg:x16; val_offset:1320; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1320, x17, x15, 1320, x18)

inst_928:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x5844ed and fs2 == 1 and fe2 == 0x7b and fm2 == 0x5844ed and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dd844ed; op2val:0xbdd844ed; valaddr_reg:x16; val_offset:1328; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1328, x17, x15, 1328, x18)

inst_929:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x5844ed and fs2 == 1 and fe2 == 0x7b and fm2 == 0x5844ed and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dd844ed; op2val:0xbdd844ed; valaddr_reg:x16; val_offset:1336; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1336, x17, x15, 1336, x18)

inst_930:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x5844ed and fs2 == 1 and fe2 == 0x7b and fm2 == 0x5844ed and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dd844ed; op2val:0xbdd844ed; valaddr_reg:x16; val_offset:1344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1344, x17, x15, 1344, x18)

inst_931:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x32b67a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x32b67a and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f32b67a; op2val:0xbf32b67a; valaddr_reg:x16; val_offset:1352; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1352, x17, x15, 1352, x18)

inst_932:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x32b67a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x32b67a and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f32b67a; op2val:0xbf32b67a; valaddr_reg:x16; val_offset:1360; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1360, x17, x15, 1360, x18)

inst_933:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x32b67a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x32b67a and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f32b67a; op2val:0xbf32b67a; valaddr_reg:x16; val_offset:1368; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1368, x17, x15, 1368, x18)

inst_934:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x32b67a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x32b67a and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f32b67a; op2val:0xbf32b67a; valaddr_reg:x16; val_offset:1376; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1376, x17, x15, 1376, x18)

inst_935:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x32b67a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x32b67a and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f32b67a; op2val:0xbf32b67a; valaddr_reg:x16; val_offset:1384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1384, x17, x15, 1384, x18)

inst_936:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x19cea5 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x19cea5 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e99cea5; op2val:0xbe99cea5; valaddr_reg:x16; val_offset:1392; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1392, x17, x15, 1392, x18)

inst_937:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x19cea5 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x19cea5 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e99cea5; op2val:0xbe99cea5; valaddr_reg:x16; val_offset:1400; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1400, x17, x15, 1400, x18)

inst_938:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x19cea5 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x19cea5 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e99cea5; op2val:0xbe99cea5; valaddr_reg:x16; val_offset:1408; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1408, x17, x15, 1408, x18)

inst_939:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x19cea5 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x19cea5 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e99cea5; op2val:0xbe99cea5; valaddr_reg:x16; val_offset:1416; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1416, x17, x15, 1416, x18)

inst_940:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x19cea5 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x19cea5 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e99cea5; op2val:0xbe99cea5; valaddr_reg:x16; val_offset:1424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1424, x17, x15, 1424, x18)

inst_941:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x280672 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x280672 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f280672; op2val:0xbf280672; valaddr_reg:x16; val_offset:1432; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1432, x17, x15, 1432, x18)

inst_942:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x280672 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x280672 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f280672; op2val:0xbf280672; valaddr_reg:x16; val_offset:1440; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1440, x17, x15, 1440, x18)

inst_943:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x280672 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x280672 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f280672; op2val:0xbf280672; valaddr_reg:x16; val_offset:1448; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1448, x17, x15, 1448, x18)

inst_944:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x280672 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x280672 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f280672; op2val:0xbf280672; valaddr_reg:x16; val_offset:1456; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1456, x17, x15, 1456, x18)

inst_945:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x280672 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x280672 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f280672; op2val:0xbf280672; valaddr_reg:x16; val_offset:1464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1464, x17, x15, 1464, x18)

inst_946:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x22f8a7 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x22f8a7 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e22f8a7; op2val:0xbe22f8a7; valaddr_reg:x16; val_offset:1472; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1472, x17, x15, 1472, x18)

inst_947:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x22f8a7 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x22f8a7 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e22f8a7; op2val:0xbe22f8a7; valaddr_reg:x16; val_offset:1480; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1480, x17, x15, 1480, x18)

inst_948:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x22f8a7 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x22f8a7 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e22f8a7; op2val:0xbe22f8a7; valaddr_reg:x16; val_offset:1488; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1488, x17, x15, 1488, x18)

inst_949:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x22f8a7 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x22f8a7 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e22f8a7; op2val:0xbe22f8a7; valaddr_reg:x16; val_offset:1496; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1496, x17, x15, 1496, x18)

inst_950:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x22f8a7 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x22f8a7 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e22f8a7; op2val:0xbe22f8a7; valaddr_reg:x16; val_offset:1504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1504, x17, x15, 1504, x18)

inst_951:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x3b11bf and fs2 == 1 and fe2 == 0x7b and fm2 == 0x3b11bf and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dbb11bf; op2val:0xbdbb11bf; valaddr_reg:x16; val_offset:1512; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1512, x17, x15, 1512, x18)

inst_952:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x3b11bf and fs2 == 1 and fe2 == 0x7b and fm2 == 0x3b11bf and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dbb11bf; op2val:0xbdbb11bf; valaddr_reg:x16; val_offset:1520; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1520, x17, x15, 1520, x18)

inst_953:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x3b11bf and fs2 == 1 and fe2 == 0x7b and fm2 == 0x3b11bf and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dbb11bf; op2val:0xbdbb11bf; valaddr_reg:x16; val_offset:1528; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1528, x17, x15, 1528, x18)

inst_954:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x3b11bf and fs2 == 1 and fe2 == 0x7b and fm2 == 0x3b11bf and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dbb11bf; op2val:0xbdbb11bf; valaddr_reg:x16; val_offset:1536; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1536, x17, x15, 1536, x18)

inst_955:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x3b11bf and fs2 == 1 and fe2 == 0x7b and fm2 == 0x3b11bf and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dbb11bf; op2val:0xbdbb11bf; valaddr_reg:x16; val_offset:1544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1544, x17, x15, 1544, x18)

inst_956:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x15d4cd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x15d4cd and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f15d4cd; op2val:0xbf15d4cd; valaddr_reg:x16; val_offset:1552; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1552, x17, x15, 1552, x18)

inst_957:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x15d4cd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x15d4cd and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f15d4cd; op2val:0xbf15d4cd; valaddr_reg:x16; val_offset:1560; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1560, x17, x15, 1560, x18)

inst_958:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x15d4cd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x15d4cd and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f15d4cd; op2val:0xbf15d4cd; valaddr_reg:x16; val_offset:1568; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1568, x17, x15, 1568, x18)

inst_959:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x15d4cd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x15d4cd and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f15d4cd; op2val:0xbf15d4cd; valaddr_reg:x16; val_offset:1576; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1576, x17, x15, 1576, x18)

inst_960:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x15d4cd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x15d4cd and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f15d4cd; op2val:0xbf15d4cd; valaddr_reg:x16; val_offset:1584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1584, x17, x15, 1584, x18)

inst_961:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x18c9e8 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x18c9e8 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f18c9e8; op2val:0xbf18c9e8; valaddr_reg:x16; val_offset:1592; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1592, x17, x15, 1592, x18)

inst_962:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x18c9e8 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x18c9e8 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f18c9e8; op2val:0xbf18c9e8; valaddr_reg:x16; val_offset:1600; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1600, x17, x15, 1600, x18)

inst_963:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x18c9e8 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x18c9e8 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f18c9e8; op2val:0xbf18c9e8; valaddr_reg:x16; val_offset:1608; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1608, x17, x15, 1608, x18)

inst_964:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x18c9e8 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x18c9e8 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f18c9e8; op2val:0xbf18c9e8; valaddr_reg:x16; val_offset:1616; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1616, x17, x15, 1616, x18)

inst_965:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x18c9e8 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x18c9e8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f18c9e8; op2val:0xbf18c9e8; valaddr_reg:x16; val_offset:1624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1624, x17, x15, 1624, x18)

inst_966:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7432c2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7432c2 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef432c2; op2val:0xbef432c2; valaddr_reg:x16; val_offset:1632; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1632, x17, x15, 1632, x18)

inst_967:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7432c2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7432c2 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef432c2; op2val:0xbef432c2; valaddr_reg:x16; val_offset:1640; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1640, x17, x15, 1640, x18)

inst_968:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7432c2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7432c2 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef432c2; op2val:0xbef432c2; valaddr_reg:x16; val_offset:1648; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1648, x17, x15, 1648, x18)

inst_969:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7432c2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7432c2 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef432c2; op2val:0xbef432c2; valaddr_reg:x16; val_offset:1656; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1656, x17, x15, 1656, x18)

inst_970:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7432c2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7432c2 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef432c2; op2val:0xbef432c2; valaddr_reg:x16; val_offset:1664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1664, x17, x15, 1664, x18)

inst_971:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x73a578 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x73a578 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f73a578; op2val:0xbf73a578; valaddr_reg:x16; val_offset:1672; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1672, x17, x15, 1672, x18)

inst_972:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x73a578 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x73a578 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f73a578; op2val:0xbf73a578; valaddr_reg:x16; val_offset:1680; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1680, x17, x15, 1680, x18)

inst_973:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x73a578 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x73a578 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f73a578; op2val:0xbf73a578; valaddr_reg:x16; val_offset:1688; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1688, x17, x15, 1688, x18)

inst_974:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x73a578 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x73a578 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f73a578; op2val:0xbf73a578; valaddr_reg:x16; val_offset:1696; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1696, x17, x15, 1696, x18)

inst_975:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x73a578 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x73a578 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f73a578; op2val:0xbf73a578; valaddr_reg:x16; val_offset:1704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1704, x17, x15, 1704, x18)

inst_976:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x059d8d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x059d8d and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f059d8d; op2val:0xbf059d8d; valaddr_reg:x16; val_offset:1712; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1712, x17, x15, 1712, x18)

inst_977:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x059d8d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x059d8d and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f059d8d; op2val:0xbf059d8d; valaddr_reg:x16; val_offset:1720; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1720, x17, x15, 1720, x18)

inst_978:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x059d8d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x059d8d and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f059d8d; op2val:0xbf059d8d; valaddr_reg:x16; val_offset:1728; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1728, x17, x15, 1728, x18)

inst_979:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x059d8d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x059d8d and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f059d8d; op2val:0xbf059d8d; valaddr_reg:x16; val_offset:1736; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1736, x17, x15, 1736, x18)

inst_980:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x059d8d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x059d8d and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f059d8d; op2val:0xbf059d8d; valaddr_reg:x16; val_offset:1744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1744, x17, x15, 1744, x18)

inst_981:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x672d10 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x672d10 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ee72d10; op2val:0xbee72d10; valaddr_reg:x16; val_offset:1752; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1752, x17, x15, 1752, x18)

inst_982:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x672d10 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x672d10 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ee72d10; op2val:0xbee72d10; valaddr_reg:x16; val_offset:1760; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1760, x17, x15, 1760, x18)

inst_983:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x672d10 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x672d10 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ee72d10; op2val:0xbee72d10; valaddr_reg:x16; val_offset:1768; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1768, x17, x15, 1768, x18)

inst_984:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x672d10 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x672d10 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ee72d10; op2val:0xbee72d10; valaddr_reg:x16; val_offset:1776; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1776, x17, x15, 1776, x18)

inst_985:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x672d10 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x672d10 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ee72d10; op2val:0xbee72d10; valaddr_reg:x16; val_offset:1784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1784, x17, x15, 1784, x18)

inst_986:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x35e14e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x35e14e and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f35e14e; op2val:0xbf35e14e; valaddr_reg:x16; val_offset:1792; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1792, x17, x15, 1792, x18)

inst_987:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x35e14e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x35e14e and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f35e14e; op2val:0xbf35e14e; valaddr_reg:x16; val_offset:1800; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1800, x17, x15, 1800, x18)

inst_988:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x35e14e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x35e14e and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f35e14e; op2val:0xbf35e14e; valaddr_reg:x16; val_offset:1808; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1808, x17, x15, 1808, x18)

inst_989:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x35e14e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x35e14e and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f35e14e; op2val:0xbf35e14e; valaddr_reg:x16; val_offset:1816; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1816, x17, x15, 1816, x18)

inst_990:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x35e14e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x35e14e and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f35e14e; op2val:0xbf35e14e; valaddr_reg:x16; val_offset:1824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1824, x17, x15, 1824, x18)

inst_991:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x560d3c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x560d3c and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f560d3c; op2val:0xbf560d3c; valaddr_reg:x16; val_offset:1832; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1832, x17, x15, 1832, x18)

inst_992:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x560d3c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x560d3c and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f560d3c; op2val:0xbf560d3c; valaddr_reg:x16; val_offset:1840; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1840, x17, x15, 1840, x18)

inst_993:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x560d3c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x560d3c and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f560d3c; op2val:0xbf560d3c; valaddr_reg:x16; val_offset:1848; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1848, x17, x15, 1848, x18)

inst_994:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x560d3c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x560d3c and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f560d3c; op2val:0xbf560d3c; valaddr_reg:x16; val_offset:1856; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1856, x17, x15, 1856, x18)

inst_995:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x560d3c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x560d3c and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f560d3c; op2val:0xbf560d3c; valaddr_reg:x16; val_offset:1864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1864, x17, x15, 1864, x18)

inst_996:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4248d4 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x4248d4 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec248d4; op2val:0xbec248d4; valaddr_reg:x16; val_offset:1872; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1872, x17, x15, 1872, x18)

inst_997:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4248d4 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x4248d4 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec248d4; op2val:0xbec248d4; valaddr_reg:x16; val_offset:1880; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1880, x17, x15, 1880, x18)

inst_998:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4248d4 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x4248d4 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec248d4; op2val:0xbec248d4; valaddr_reg:x16; val_offset:1888; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1888, x17, x15, 1888, x18)

inst_999:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4248d4 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x4248d4 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec248d4; op2val:0xbec248d4; valaddr_reg:x16; val_offset:1896; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1896, x17, x15, 1896, x18)

inst_1000:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4248d4 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x4248d4 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec248d4; op2val:0xbec248d4; valaddr_reg:x16; val_offset:1904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1904, x17, x15, 1904, x18)

inst_1001:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1020d7 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x1020d7 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9020d7; op2val:0xbe9020d7; valaddr_reg:x16; val_offset:1912; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1912, x17, x15, 1912, x18)

inst_1002:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1020d7 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x1020d7 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9020d7; op2val:0xbe9020d7; valaddr_reg:x16; val_offset:1920; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1920, x17, x15, 1920, x18)

inst_1003:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1020d7 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x1020d7 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9020d7; op2val:0xbe9020d7; valaddr_reg:x16; val_offset:1928; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1928, x17, x15, 1928, x18)

inst_1004:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1020d7 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x1020d7 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9020d7; op2val:0xbe9020d7; valaddr_reg:x16; val_offset:1936; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1936, x17, x15, 1936, x18)

inst_1005:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1020d7 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x1020d7 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9020d7; op2val:0xbe9020d7; valaddr_reg:x16; val_offset:1944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1944, x17, x15, 1944, x18)

inst_1006:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2aa5bf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2aa5bf and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2aa5bf; op2val:0xbf2aa5bf; valaddr_reg:x16; val_offset:1952; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1952, x17, x15, 1952, x18)

inst_1007:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2aa5bf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2aa5bf and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2aa5bf; op2val:0xbf2aa5bf; valaddr_reg:x16; val_offset:1960; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1960, x17, x15, 1960, x18)

inst_1008:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2aa5bf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2aa5bf and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2aa5bf; op2val:0xbf2aa5bf; valaddr_reg:x16; val_offset:1968; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1968, x17, x15, 1968, x18)

inst_1009:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2aa5bf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2aa5bf and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2aa5bf; op2val:0xbf2aa5bf; valaddr_reg:x16; val_offset:1976; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1976, x17, x15, 1976, x18)

inst_1010:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2aa5bf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2aa5bf and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2aa5bf; op2val:0xbf2aa5bf; valaddr_reg:x16; val_offset:1984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1984, x17, x15, 1984, x18)

inst_1011:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7db8eb and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7db8eb and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7db8eb; op2val:0xbf7db8eb; valaddr_reg:x16; val_offset:1992; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1992, x17, x15, 1992, x18)

inst_1012:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7db8eb and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7db8eb and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7db8eb; op2val:0xbf7db8eb; valaddr_reg:x16; val_offset:2000; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 2000, x17, x15, 2000, x18)

inst_1013:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7db8eb and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7db8eb and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7db8eb; op2val:0xbf7db8eb; valaddr_reg:x16; val_offset:2008; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 2008, x17, x15, 2008, x18)

inst_1014:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7db8eb and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7db8eb and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7db8eb; op2val:0xbf7db8eb; valaddr_reg:x16; val_offset:2016; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 2016, x17, x15, 2016, x18)

inst_1015:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7db8eb and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7db8eb and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7db8eb; op2val:0xbf7db8eb; valaddr_reg:x16; val_offset:2024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_5)

inst_1016:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4acaba and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4acaba and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4acaba; op2val:0xbf4acaba; valaddr_reg:x16; val_offset:0; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 0, x17, x15, 0, x18)

inst_1017:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4acaba and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4acaba and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4acaba; op2val:0xbf4acaba; valaddr_reg:x16; val_offset:8; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 8, x17, x15, 8, x18)

inst_1018:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4acaba and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4acaba and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4acaba; op2val:0xbf4acaba; valaddr_reg:x16; val_offset:16; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 16, x17, x15, 16, x18)

inst_1019:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4acaba and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4acaba and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4acaba; op2val:0xbf4acaba; valaddr_reg:x16; val_offset:24; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 24, x17, x15, 24, x18)

inst_1020:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4acaba and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4acaba and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4acaba; op2val:0xbf4acaba; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 32, x17, x15, 32, x18)

inst_1021:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x20a72a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x20a72a and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f20a72a; op2val:0xbf20a72a; valaddr_reg:x16; val_offset:40; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 40, x17, x15, 40, x18)

inst_1022:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x20a72a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x20a72a and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f20a72a; op2val:0xbf20a72a; valaddr_reg:x16; val_offset:48; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 48, x17, x15, 48, x18)

inst_1023:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x20a72a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x20a72a and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f20a72a; op2val:0xbf20a72a; valaddr_reg:x16; val_offset:56; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 56, x17, x15, 56, x18)

inst_1024:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x20a72a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x20a72a and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f20a72a; op2val:0xbf20a72a; valaddr_reg:x16; val_offset:64; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 64, x17, x15, 64, x18)

inst_1025:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x20a72a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x20a72a and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f20a72a; op2val:0xbf20a72a; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 72, x17, x15, 72, x18)

inst_1026:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x473fe6 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x473fe6 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dc73fe6; op2val:0xbdc73fe6; valaddr_reg:x16; val_offset:80; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 80, x17, x15, 80, x18)

inst_1027:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x473fe6 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x473fe6 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dc73fe6; op2val:0xbdc73fe6; valaddr_reg:x16; val_offset:88; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 88, x17, x15, 88, x18)

inst_1028:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x473fe6 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x473fe6 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dc73fe6; op2val:0xbdc73fe6; valaddr_reg:x16; val_offset:96; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 96, x17, x15, 96, x18)

inst_1029:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x473fe6 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x473fe6 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dc73fe6; op2val:0xbdc73fe6; valaddr_reg:x16; val_offset:104; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 104, x17, x15, 104, x18)

inst_1030:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x473fe6 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x473fe6 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dc73fe6; op2val:0xbdc73fe6; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 112, x17, x15, 112, x18)

inst_1031:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x307468 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x307468 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb07468; op2val:0xbeb07468; valaddr_reg:x16; val_offset:120; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 120, x17, x15, 120, x18)

inst_1032:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x307468 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x307468 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb07468; op2val:0xbeb07468; valaddr_reg:x16; val_offset:128; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 128, x17, x15, 128, x18)

inst_1033:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x307468 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x307468 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb07468; op2val:0xbeb07468; valaddr_reg:x16; val_offset:136; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 136, x17, x15, 136, x18)

inst_1034:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x307468 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x307468 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb07468; op2val:0xbeb07468; valaddr_reg:x16; val_offset:144; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 144, x17, x15, 144, x18)

inst_1035:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x307468 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x307468 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb07468; op2val:0xbeb07468; valaddr_reg:x16; val_offset:152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 152, x17, x15, 152, x18)

inst_1036:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x007166 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x007166 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e807166; op2val:0xbe807166; valaddr_reg:x16; val_offset:160; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 160, x17, x15, 160, x18)

inst_1037:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x007166 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x007166 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e807166; op2val:0xbe807166; valaddr_reg:x16; val_offset:168; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 168, x17, x15, 168, x18)

inst_1038:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x007166 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x007166 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e807166; op2val:0xbe807166; valaddr_reg:x16; val_offset:176; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 176, x17, x15, 176, x18)

inst_1039:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x007166 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x007166 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e807166; op2val:0xbe807166; valaddr_reg:x16; val_offset:184; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 184, x17, x15, 184, x18)

inst_1040:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x007166 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x007166 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e807166; op2val:0xbe807166; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 192, x17, x15, 192, x18)

inst_1041:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x389ff2 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x389ff2 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db89ff2; op2val:0xbdb89ff2; valaddr_reg:x16; val_offset:200; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 200, x17, x15, 200, x18)

inst_1042:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x389ff2 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x389ff2 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db89ff2; op2val:0xbdb89ff2; valaddr_reg:x16; val_offset:208; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 208, x17, x15, 208, x18)

inst_1043:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x389ff2 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x389ff2 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db89ff2; op2val:0xbdb89ff2; valaddr_reg:x16; val_offset:216; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 216, x17, x15, 216, x18)

inst_1044:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x389ff2 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x389ff2 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db89ff2; op2val:0xbdb89ff2; valaddr_reg:x16; val_offset:224; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 224, x17, x15, 224, x18)

inst_1045:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x389ff2 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x389ff2 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db89ff2; op2val:0xbdb89ff2; valaddr_reg:x16; val_offset:232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 232, x17, x15, 232, x18)

inst_1046:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x5b2023 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x5b2023 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d5b2023; op2val:0xbd5b2023; valaddr_reg:x16; val_offset:240; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 240, x17, x15, 240, x18)

inst_1047:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x5b2023 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x5b2023 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d5b2023; op2val:0xbd5b2023; valaddr_reg:x16; val_offset:248; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 248, x17, x15, 248, x18)

inst_1048:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x5b2023 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x5b2023 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d5b2023; op2val:0xbd5b2023; valaddr_reg:x16; val_offset:256; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 256, x17, x15, 256, x18)

inst_1049:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x5b2023 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x5b2023 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d5b2023; op2val:0xbd5b2023; valaddr_reg:x16; val_offset:264; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 264, x17, x15, 264, x18)

inst_1050:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x5b2023 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x5b2023 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d5b2023; op2val:0xbd5b2023; valaddr_reg:x16; val_offset:272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 272, x17, x15, 272, x18)

inst_1051:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x235464 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x235464 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea35464; op2val:0xbea35464; valaddr_reg:x16; val_offset:280; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 280, x17, x15, 280, x18)

inst_1052:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x235464 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x235464 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea35464; op2val:0xbea35464; valaddr_reg:x16; val_offset:288; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 288, x17, x15, 288, x18)

inst_1053:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x235464 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x235464 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea35464; op2val:0xbea35464; valaddr_reg:x16; val_offset:296; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 296, x17, x15, 296, x18)

inst_1054:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x235464 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x235464 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea35464; op2val:0xbea35464; valaddr_reg:x16; val_offset:304; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 304, x17, x15, 304, x18)

inst_1055:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x235464 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x235464 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea35464; op2val:0xbea35464; valaddr_reg:x16; val_offset:312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 312, x17, x15, 312, x18)

inst_1056:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7b3eb6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7b3eb6 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7b3eb6; op2val:0xbf7b3eb6; valaddr_reg:x16; val_offset:320; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 320, x17, x15, 320, x18)

inst_1057:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7b3eb6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7b3eb6 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7b3eb6; op2val:0xbf7b3eb6; valaddr_reg:x16; val_offset:328; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 328, x17, x15, 328, x18)

inst_1058:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7b3eb6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7b3eb6 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7b3eb6; op2val:0xbf7b3eb6; valaddr_reg:x16; val_offset:336; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 336, x17, x15, 336, x18)

inst_1059:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7b3eb6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7b3eb6 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7b3eb6; op2val:0xbf7b3eb6; valaddr_reg:x16; val_offset:344; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 344, x17, x15, 344, x18)

inst_1060:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7b3eb6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7b3eb6 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7b3eb6; op2val:0xbf7b3eb6; valaddr_reg:x16; val_offset:352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 352, x17, x15, 352, x18)

inst_1061:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x033620 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x033620 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e033620; op2val:0xbe033620; valaddr_reg:x16; val_offset:360; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 360, x17, x15, 360, x18)

inst_1062:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x033620 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x033620 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e033620; op2val:0xbe033620; valaddr_reg:x16; val_offset:368; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 368, x17, x15, 368, x18)

inst_1063:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x033620 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x033620 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e033620; op2val:0xbe033620; valaddr_reg:x16; val_offset:376; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 376, x17, x15, 376, x18)

inst_1064:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x033620 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x033620 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e033620; op2val:0xbe033620; valaddr_reg:x16; val_offset:384; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 384, x17, x15, 384, x18)

inst_1065:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x033620 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x033620 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e033620; op2val:0xbe033620; valaddr_reg:x16; val_offset:392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 392, x17, x15, 392, x18)

inst_1066:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x32cc8a and fs2 == 1 and fe2 == 0x7d and fm2 == 0x32cc8a and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb2cc8a; op2val:0xbeb2cc8a; valaddr_reg:x16; val_offset:400; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 400, x17, x15, 400, x18)

inst_1067:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x32cc8a and fs2 == 1 and fe2 == 0x7d and fm2 == 0x32cc8a and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb2cc8a; op2val:0xbeb2cc8a; valaddr_reg:x16; val_offset:408; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 408, x17, x15, 408, x18)

inst_1068:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x32cc8a and fs2 == 1 and fe2 == 0x7d and fm2 == 0x32cc8a and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb2cc8a; op2val:0xbeb2cc8a; valaddr_reg:x16; val_offset:416; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 416, x17, x15, 416, x18)

inst_1069:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x32cc8a and fs2 == 1 and fe2 == 0x7d and fm2 == 0x32cc8a and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb2cc8a; op2val:0xbeb2cc8a; valaddr_reg:x16; val_offset:424; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 424, x17, x15, 424, x18)

inst_1070:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x32cc8a and fs2 == 1 and fe2 == 0x7d and fm2 == 0x32cc8a and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb2cc8a; op2val:0xbeb2cc8a; valaddr_reg:x16; val_offset:432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 432, x17, x15, 432, x18)

inst_1071:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5dd826 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5dd826 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5dd826; op2val:0xbf5dd826; valaddr_reg:x16; val_offset:440; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 440, x17, x15, 440, x18)

inst_1072:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5dd826 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5dd826 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5dd826; op2val:0xbf5dd826; valaddr_reg:x16; val_offset:448; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 448, x17, x15, 448, x18)

inst_1073:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5dd826 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5dd826 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5dd826; op2val:0xbf5dd826; valaddr_reg:x16; val_offset:456; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 456, x17, x15, 456, x18)

inst_1074:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5dd826 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5dd826 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5dd826; op2val:0xbf5dd826; valaddr_reg:x16; val_offset:464; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 464, x17, x15, 464, x18)

inst_1075:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5dd826 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5dd826 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5dd826; op2val:0xbf5dd826; valaddr_reg:x16; val_offset:472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 472, x17, x15, 472, x18)

inst_1076:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x54a46b and fs2 == 1 and fe2 == 0x7c and fm2 == 0x54a46b and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e54a46b; op2val:0xbe54a46b; valaddr_reg:x16; val_offset:480; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 480, x17, x15, 480, x18)

inst_1077:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x54a46b and fs2 == 1 and fe2 == 0x7c and fm2 == 0x54a46b and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e54a46b; op2val:0xbe54a46b; valaddr_reg:x16; val_offset:488; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 488, x17, x15, 488, x18)

inst_1078:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x54a46b and fs2 == 1 and fe2 == 0x7c and fm2 == 0x54a46b and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e54a46b; op2val:0xbe54a46b; valaddr_reg:x16; val_offset:496; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 496, x17, x15, 496, x18)

inst_1079:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x54a46b and fs2 == 1 and fe2 == 0x7c and fm2 == 0x54a46b and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e54a46b; op2val:0xbe54a46b; valaddr_reg:x16; val_offset:504; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 504, x17, x15, 504, x18)

inst_1080:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x54a46b and fs2 == 1 and fe2 == 0x7c and fm2 == 0x54a46b and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e54a46b; op2val:0xbe54a46b; valaddr_reg:x16; val_offset:512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 512, x17, x15, 512, x18)

inst_1081:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x39ac5a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x39ac5a and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f39ac5a; op2val:0xbf39ac5a; valaddr_reg:x16; val_offset:520; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 520, x17, x15, 520, x18)

inst_1082:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x39ac5a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x39ac5a and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f39ac5a; op2val:0xbf39ac5a; valaddr_reg:x16; val_offset:528; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 528, x17, x15, 528, x18)

inst_1083:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x39ac5a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x39ac5a and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f39ac5a; op2val:0xbf39ac5a; valaddr_reg:x16; val_offset:536; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 536, x17, x15, 536, x18)

inst_1084:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x39ac5a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x39ac5a and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f39ac5a; op2val:0xbf39ac5a; valaddr_reg:x16; val_offset:544; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 544, x17, x15, 544, x18)

inst_1085:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x39ac5a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x39ac5a and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f39ac5a; op2val:0xbf39ac5a; valaddr_reg:x16; val_offset:552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 552, x17, x15, 552, x18)

inst_1086:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1a721e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1a721e and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1a721e; op2val:0xbf1a721e; valaddr_reg:x16; val_offset:560; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 560, x17, x15, 560, x18)

inst_1087:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1a721e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1a721e and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1a721e; op2val:0xbf1a721e; valaddr_reg:x16; val_offset:568; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 568, x17, x15, 568, x18)

inst_1088:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1a721e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1a721e and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1a721e; op2val:0xbf1a721e; valaddr_reg:x16; val_offset:576; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 576, x17, x15, 576, x18)

inst_1089:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1a721e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1a721e and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1a721e; op2val:0xbf1a721e; valaddr_reg:x16; val_offset:584; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 584, x17, x15, 584, x18)

inst_1090:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1a721e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1a721e and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1a721e; op2val:0xbf1a721e; valaddr_reg:x16; val_offset:592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 592, x17, x15, 592, x18)

inst_1091:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x665a8e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x665a8e and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f665a8e; op2val:0xbf665a8e; valaddr_reg:x16; val_offset:600; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 600, x17, x15, 600, x18)

inst_1092:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x665a8e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x665a8e and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f665a8e; op2val:0xbf665a8e; valaddr_reg:x16; val_offset:608; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 608, x17, x15, 608, x18)

inst_1093:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x665a8e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x665a8e and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f665a8e; op2val:0xbf665a8e; valaddr_reg:x16; val_offset:616; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 616, x17, x15, 616, x18)

inst_1094:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x665a8e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x665a8e and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f665a8e; op2val:0xbf665a8e; valaddr_reg:x16; val_offset:624; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 624, x17, x15, 624, x18)

inst_1095:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x665a8e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x665a8e and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f665a8e; op2val:0xbf665a8e; valaddr_reg:x16; val_offset:632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 632, x17, x15, 632, x18)

inst_1096:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x38530d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x38530d and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f38530d; op2val:0xbf38530d; valaddr_reg:x16; val_offset:640; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 640, x17, x15, 640, x18)

inst_1097:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x38530d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x38530d and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f38530d; op2val:0xbf38530d; valaddr_reg:x16; val_offset:648; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 648, x17, x15, 648, x18)

inst_1098:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x38530d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x38530d and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f38530d; op2val:0xbf38530d; valaddr_reg:x16; val_offset:656; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 656, x17, x15, 656, x18)

inst_1099:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x38530d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x38530d and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f38530d; op2val:0xbf38530d; valaddr_reg:x16; val_offset:664; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 664, x17, x15, 664, x18)

inst_1100:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x38530d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x38530d and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f38530d; op2val:0xbf38530d; valaddr_reg:x16; val_offset:672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 672, x17, x15, 672, x18)

inst_1101:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x33937b and fs2 == 1 and fe2 == 0x7d and fm2 == 0x33937b and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb3937b; op2val:0xbeb3937b; valaddr_reg:x16; val_offset:680; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 680, x17, x15, 680, x18)

inst_1102:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x33937b and fs2 == 1 and fe2 == 0x7d and fm2 == 0x33937b and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb3937b; op2val:0xbeb3937b; valaddr_reg:x16; val_offset:688; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 688, x17, x15, 688, x18)

inst_1103:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x33937b and fs2 == 1 and fe2 == 0x7d and fm2 == 0x33937b and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb3937b; op2val:0xbeb3937b; valaddr_reg:x16; val_offset:696; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 696, x17, x15, 696, x18)

inst_1104:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x33937b and fs2 == 1 and fe2 == 0x7d and fm2 == 0x33937b and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb3937b; op2val:0xbeb3937b; valaddr_reg:x16; val_offset:704; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 704, x17, x15, 704, x18)

inst_1105:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x33937b and fs2 == 1 and fe2 == 0x7d and fm2 == 0x33937b and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb3937b; op2val:0xbeb3937b; valaddr_reg:x16; val_offset:712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 712, x17, x15, 712, x18)

inst_1106:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x66f79a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x66f79a and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f66f79a; op2val:0xbf66f79a; valaddr_reg:x16; val_offset:720; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 720, x17, x15, 720, x18)

inst_1107:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x66f79a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x66f79a and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f66f79a; op2val:0xbf66f79a; valaddr_reg:x16; val_offset:728; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 728, x17, x15, 728, x18)

inst_1108:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x66f79a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x66f79a and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f66f79a; op2val:0xbf66f79a; valaddr_reg:x16; val_offset:736; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 736, x17, x15, 736, x18)

inst_1109:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x66f79a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x66f79a and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f66f79a; op2val:0xbf66f79a; valaddr_reg:x16; val_offset:744; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 744, x17, x15, 744, x18)

inst_1110:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x66f79a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x66f79a and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f66f79a; op2val:0xbf66f79a; valaddr_reg:x16; val_offset:752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 752, x17, x15, 752, x18)

inst_1111:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x3585e5 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x3585e5 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e3585e5; op2val:0xbe3585e5; valaddr_reg:x16; val_offset:760; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 760, x17, x15, 760, x18)

inst_1112:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x3585e5 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x3585e5 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e3585e5; op2val:0xbe3585e5; valaddr_reg:x16; val_offset:768; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 768, x17, x15, 768, x18)

inst_1113:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x3585e5 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x3585e5 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e3585e5; op2val:0xbe3585e5; valaddr_reg:x16; val_offset:776; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 776, x17, x15, 776, x18)

inst_1114:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x3585e5 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x3585e5 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e3585e5; op2val:0xbe3585e5; valaddr_reg:x16; val_offset:784; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 784, x17, x15, 784, x18)

inst_1115:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x3585e5 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x3585e5 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e3585e5; op2val:0xbe3585e5; valaddr_reg:x16; val_offset:792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 792, x17, x15, 792, x18)

inst_1116:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x10bae3 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x10bae3 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e90bae3; op2val:0xbe90bae3; valaddr_reg:x16; val_offset:800; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 800, x17, x15, 800, x18)

inst_1117:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x10bae3 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x10bae3 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e90bae3; op2val:0xbe90bae3; valaddr_reg:x16; val_offset:808; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 808, x17, x15, 808, x18)

inst_1118:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x10bae3 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x10bae3 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e90bae3; op2val:0xbe90bae3; valaddr_reg:x16; val_offset:816; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 816, x17, x15, 816, x18)

inst_1119:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x10bae3 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x10bae3 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e90bae3; op2val:0xbe90bae3; valaddr_reg:x16; val_offset:824; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 824, x17, x15, 824, x18)

inst_1120:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x10bae3 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x10bae3 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e90bae3; op2val:0xbe90bae3; valaddr_reg:x16; val_offset:832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 832, x17, x15, 832, x18)

inst_1121:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2f0f03 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2f0f03 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2f0f03; op2val:0xbf2f0f03; valaddr_reg:x16; val_offset:840; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 840, x17, x15, 840, x18)

inst_1122:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2f0f03 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2f0f03 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2f0f03; op2val:0xbf2f0f03; valaddr_reg:x16; val_offset:848; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 848, x17, x15, 848, x18)

inst_1123:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2f0f03 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2f0f03 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2f0f03; op2val:0xbf2f0f03; valaddr_reg:x16; val_offset:856; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 856, x17, x15, 856, x18)

inst_1124:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2f0f03 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2f0f03 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2f0f03; op2val:0xbf2f0f03; valaddr_reg:x16; val_offset:864; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 864, x17, x15, 864, x18)

inst_1125:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2f0f03 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2f0f03 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2f0f03; op2val:0xbf2f0f03; valaddr_reg:x16; val_offset:872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 872, x17, x15, 872, x18)

inst_1126:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x192288 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x192288 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f192288; op2val:0xbf192288; valaddr_reg:x16; val_offset:880; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 880, x17, x15, 880, x18)

inst_1127:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x192288 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x192288 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f192288; op2val:0xbf192288; valaddr_reg:x16; val_offset:888; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 888, x17, x15, 888, x18)

inst_1128:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x192288 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x192288 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f192288; op2val:0xbf192288; valaddr_reg:x16; val_offset:896; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 896, x17, x15, 896, x18)

inst_1129:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x192288 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x192288 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f192288; op2val:0xbf192288; valaddr_reg:x16; val_offset:904; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 904, x17, x15, 904, x18)

inst_1130:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x192288 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x192288 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f192288; op2val:0xbf192288; valaddr_reg:x16; val_offset:912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 912, x17, x15, 912, x18)

inst_1131:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0c8423 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x0c8423 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8c8423; op2val:0xbe8c8423; valaddr_reg:x16; val_offset:920; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 920, x17, x15, 920, x18)

inst_1132:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0c8423 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x0c8423 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8c8423; op2val:0xbe8c8423; valaddr_reg:x16; val_offset:928; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 928, x17, x15, 928, x18)

inst_1133:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0c8423 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x0c8423 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8c8423; op2val:0xbe8c8423; valaddr_reg:x16; val_offset:936; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 936, x17, x15, 936, x18)

inst_1134:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0c8423 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x0c8423 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8c8423; op2val:0xbe8c8423; valaddr_reg:x16; val_offset:944; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 944, x17, x15, 944, x18)

inst_1135:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0c8423 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x0c8423 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8c8423; op2val:0xbe8c8423; valaddr_reg:x16; val_offset:952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 952, x17, x15, 952, x18)

inst_1136:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3bdbca and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3bdbca and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebbdbca; op2val:0xbebbdbca; valaddr_reg:x16; val_offset:960; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 960, x17, x15, 960, x18)

inst_1137:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3bdbca and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3bdbca and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebbdbca; op2val:0xbebbdbca; valaddr_reg:x16; val_offset:968; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 968, x17, x15, 968, x18)

inst_1138:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3bdbca and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3bdbca and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebbdbca; op2val:0xbebbdbca; valaddr_reg:x16; val_offset:976; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 976, x17, x15, 976, x18)

inst_1139:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3bdbca and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3bdbca and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebbdbca; op2val:0xbebbdbca; valaddr_reg:x16; val_offset:984; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 984, x17, x15, 984, x18)

inst_1140:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3bdbca and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3bdbca and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebbdbca; op2val:0xbebbdbca; valaddr_reg:x16; val_offset:992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 992, x17, x15, 992, x18)

inst_1141:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4fdf25 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4fdf25 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4fdf25; op2val:0xbf4fdf25; valaddr_reg:x16; val_offset:1000; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1000, x17, x15, 1000, x18)

inst_1142:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4fdf25 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4fdf25 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4fdf25; op2val:0xbf4fdf25; valaddr_reg:x16; val_offset:1008; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1008, x17, x15, 1008, x18)

inst_1143:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4fdf25 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4fdf25 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4fdf25; op2val:0xbf4fdf25; valaddr_reg:x16; val_offset:1016; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1016, x17, x15, 1016, x18)

inst_1144:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4fdf25 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4fdf25 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4fdf25; op2val:0xbf4fdf25; valaddr_reg:x16; val_offset:1024; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1024, x17, x15, 1024, x18)

inst_1145:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4fdf25 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4fdf25 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4fdf25; op2val:0xbf4fdf25; valaddr_reg:x16; val_offset:1032; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1032, x17, x15, 1032, x18)

inst_1146:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7ff770 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7ff770 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dfff770; op2val:0xbdfff770; valaddr_reg:x16; val_offset:1040; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1040, x17, x15, 1040, x18)

inst_1147:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7ff770 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7ff770 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dfff770; op2val:0xbdfff770; valaddr_reg:x16; val_offset:1048; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1048, x17, x15, 1048, x18)

inst_1148:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7ff770 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7ff770 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dfff770; op2val:0xbdfff770; valaddr_reg:x16; val_offset:1056; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1056, x17, x15, 1056, x18)

inst_1149:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7ff770 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7ff770 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dfff770; op2val:0xbdfff770; valaddr_reg:x16; val_offset:1064; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1064, x17, x15, 1064, x18)

inst_1150:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7ff770 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7ff770 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dfff770; op2val:0xbdfff770; valaddr_reg:x16; val_offset:1072; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1072, x17, x15, 1072, x18)

inst_1151:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0879c0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0879c0 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0879c0; op2val:0xbf0879c0; valaddr_reg:x16; val_offset:1080; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1080, x17, x15, 1080, x18)

inst_1152:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0879c0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0879c0 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0879c0; op2val:0xbf0879c0; valaddr_reg:x16; val_offset:1088; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1088, x17, x15, 1088, x18)

inst_1153:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0879c0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0879c0 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0879c0; op2val:0xbf0879c0; valaddr_reg:x16; val_offset:1096; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1096, x17, x15, 1096, x18)

inst_1154:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0879c0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0879c0 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0879c0; op2val:0xbf0879c0; valaddr_reg:x16; val_offset:1104; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1104, x17, x15, 1104, x18)

inst_1155:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0879c0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0879c0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0879c0; op2val:0xbf0879c0; valaddr_reg:x16; val_offset:1112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1112, x17, x15, 1112, x18)

inst_1156:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x016307 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x016307 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f016307; op2val:0xbf016307; valaddr_reg:x16; val_offset:1120; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1120, x17, x15, 1120, x18)

inst_1157:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x016307 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x016307 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f016307; op2val:0xbf016307; valaddr_reg:x16; val_offset:1128; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1128, x17, x15, 1128, x18)

inst_1158:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x016307 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x016307 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f016307; op2val:0xbf016307; valaddr_reg:x16; val_offset:1136; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1136, x17, x15, 1136, x18)

inst_1159:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x016307 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x016307 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f016307; op2val:0xbf016307; valaddr_reg:x16; val_offset:1144; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1144, x17, x15, 1144, x18)

inst_1160:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x016307 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x016307 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f016307; op2val:0xbf016307; valaddr_reg:x16; val_offset:1152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1152, x17, x15, 1152, x18)

inst_1161:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7a6233 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7a6233 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e7a6233; op2val:0xbe7a6233; valaddr_reg:x16; val_offset:1160; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1160, x17, x15, 1160, x18)

inst_1162:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7a6233 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7a6233 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e7a6233; op2val:0xbe7a6233; valaddr_reg:x16; val_offset:1168; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1168, x17, x15, 1168, x18)

inst_1163:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7a6233 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7a6233 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e7a6233; op2val:0xbe7a6233; valaddr_reg:x16; val_offset:1176; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1176, x17, x15, 1176, x18)

inst_1164:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7a6233 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7a6233 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e7a6233; op2val:0xbe7a6233; valaddr_reg:x16; val_offset:1184; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1184, x17, x15, 1184, x18)

inst_1165:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7a6233 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7a6233 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e7a6233; op2val:0xbe7a6233; valaddr_reg:x16; val_offset:1192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1192, x17, x15, 1192, x18)

inst_1166:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x03428f and fs2 == 1 and fe2 == 0x7e and fm2 == 0x03428f and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f03428f; op2val:0xbf03428f; valaddr_reg:x16; val_offset:1200; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1200, x17, x15, 1200, x18)

inst_1167:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x03428f and fs2 == 1 and fe2 == 0x7e and fm2 == 0x03428f and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f03428f; op2val:0xbf03428f; valaddr_reg:x16; val_offset:1208; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1208, x17, x15, 1208, x18)

inst_1168:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x03428f and fs2 == 1 and fe2 == 0x7e and fm2 == 0x03428f and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f03428f; op2val:0xbf03428f; valaddr_reg:x16; val_offset:1216; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1216, x17, x15, 1216, x18)

inst_1169:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x03428f and fs2 == 1 and fe2 == 0x7e and fm2 == 0x03428f and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f03428f; op2val:0xbf03428f; valaddr_reg:x16; val_offset:1224; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1224, x17, x15, 1224, x18)

inst_1170:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x03428f and fs2 == 1 and fe2 == 0x7e and fm2 == 0x03428f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f03428f; op2val:0xbf03428f; valaddr_reg:x16; val_offset:1232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1232, x17, x15, 1232, x18)

inst_1171:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x57a1da and fs2 == 1 and fe2 == 0x7e and fm2 == 0x57a1da and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f57a1da; op2val:0xbf57a1da; valaddr_reg:x16; val_offset:1240; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1240, x17, x15, 1240, x18)

inst_1172:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x57a1da and fs2 == 1 and fe2 == 0x7e and fm2 == 0x57a1da and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f57a1da; op2val:0xbf57a1da; valaddr_reg:x16; val_offset:1248; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1248, x17, x15, 1248, x18)

inst_1173:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x57a1da and fs2 == 1 and fe2 == 0x7e and fm2 == 0x57a1da and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f57a1da; op2val:0xbf57a1da; valaddr_reg:x16; val_offset:1256; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1256, x17, x15, 1256, x18)

inst_1174:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x57a1da and fs2 == 1 and fe2 == 0x7e and fm2 == 0x57a1da and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f57a1da; op2val:0xbf57a1da; valaddr_reg:x16; val_offset:1264; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1264, x17, x15, 1264, x18)

inst_1175:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x57a1da and fs2 == 1 and fe2 == 0x7e and fm2 == 0x57a1da and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f57a1da; op2val:0xbf57a1da; valaddr_reg:x16; val_offset:1272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1272, x17, x15, 1272, x18)

inst_1176:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0dfd66 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0dfd66 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0dfd66; op2val:0xbf0dfd66; valaddr_reg:x16; val_offset:1280; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1280, x17, x15, 1280, x18)

inst_1177:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0dfd66 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0dfd66 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0dfd66; op2val:0xbf0dfd66; valaddr_reg:x16; val_offset:1288; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1288, x17, x15, 1288, x18)

inst_1178:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0dfd66 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0dfd66 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0dfd66; op2val:0xbf0dfd66; valaddr_reg:x16; val_offset:1296; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1296, x17, x15, 1296, x18)

inst_1179:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0dfd66 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0dfd66 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0dfd66; op2val:0xbf0dfd66; valaddr_reg:x16; val_offset:1304; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1304, x17, x15, 1304, x18)

inst_1180:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0dfd66 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0dfd66 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0dfd66; op2val:0xbf0dfd66; valaddr_reg:x16; val_offset:1312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1312, x17, x15, 1312, x18)

inst_1181:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2cf4a9 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x2cf4a9 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eacf4a9; op2val:0xbeacf4a9; valaddr_reg:x16; val_offset:1320; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1320, x17, x15, 1320, x18)

inst_1182:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2cf4a9 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x2cf4a9 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eacf4a9; op2val:0xbeacf4a9; valaddr_reg:x16; val_offset:1328; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1328, x17, x15, 1328, x18)

inst_1183:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2cf4a9 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x2cf4a9 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eacf4a9; op2val:0xbeacf4a9; valaddr_reg:x16; val_offset:1336; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1336, x17, x15, 1336, x18)

inst_1184:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2cf4a9 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x2cf4a9 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eacf4a9; op2val:0xbeacf4a9; valaddr_reg:x16; val_offset:1344; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1344, x17, x15, 1344, x18)

inst_1185:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2cf4a9 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x2cf4a9 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eacf4a9; op2val:0xbeacf4a9; valaddr_reg:x16; val_offset:1352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1352, x17, x15, 1352, x18)

inst_1186:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x18a9c9 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x18a9c9 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e98a9c9; op2val:0xbe98a9c9; valaddr_reg:x16; val_offset:1360; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1360, x17, x15, 1360, x18)

inst_1187:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x18a9c9 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x18a9c9 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e98a9c9; op2val:0xbe98a9c9; valaddr_reg:x16; val_offset:1368; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1368, x17, x15, 1368, x18)

inst_1188:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x18a9c9 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x18a9c9 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e98a9c9; op2val:0xbe98a9c9; valaddr_reg:x16; val_offset:1376; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1376, x17, x15, 1376, x18)

inst_1189:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x18a9c9 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x18a9c9 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e98a9c9; op2val:0xbe98a9c9; valaddr_reg:x16; val_offset:1384; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1384, x17, x15, 1384, x18)

inst_1190:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x18a9c9 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x18a9c9 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e98a9c9; op2val:0xbe98a9c9; valaddr_reg:x16; val_offset:1392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1392, x17, x15, 1392, x18)

inst_1191:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x15e976 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x15e976 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f15e976; op2val:0xbf15e976; valaddr_reg:x16; val_offset:1400; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1400, x17, x15, 1400, x18)

inst_1192:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x15e976 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x15e976 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f15e976; op2val:0xbf15e976; valaddr_reg:x16; val_offset:1408; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1408, x17, x15, 1408, x18)

inst_1193:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x15e976 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x15e976 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f15e976; op2val:0xbf15e976; valaddr_reg:x16; val_offset:1416; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1416, x17, x15, 1416, x18)

inst_1194:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x15e976 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x15e976 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f15e976; op2val:0xbf15e976; valaddr_reg:x16; val_offset:1424; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1424, x17, x15, 1424, x18)

inst_1195:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x15e976 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x15e976 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f15e976; op2val:0xbf15e976; valaddr_reg:x16; val_offset:1432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1432, x17, x15, 1432, x18)

inst_1196:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7f2205 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7f2205 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dff2205; op2val:0xbdff2205; valaddr_reg:x16; val_offset:1440; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1440, x17, x15, 1440, x18)

inst_1197:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7f2205 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7f2205 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dff2205; op2val:0xbdff2205; valaddr_reg:x16; val_offset:1448; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1448, x17, x15, 1448, x18)

inst_1198:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7f2205 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7f2205 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dff2205; op2val:0xbdff2205; valaddr_reg:x16; val_offset:1456; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1456, x17, x15, 1456, x18)

inst_1199:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7f2205 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7f2205 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dff2205; op2val:0xbdff2205; valaddr_reg:x16; val_offset:1464; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1464, x17, x15, 1464, x18)

inst_1200:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7f2205 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7f2205 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dff2205; op2val:0xbdff2205; valaddr_reg:x16; val_offset:1472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1472, x17, x15, 1472, x18)

inst_1201:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x39a6c9 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x39a6c9 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb9a6c9; op2val:0xbeb9a6c9; valaddr_reg:x16; val_offset:1480; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1480, x17, x15, 1480, x18)

inst_1202:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x39a6c9 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x39a6c9 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb9a6c9; op2val:0xbeb9a6c9; valaddr_reg:x16; val_offset:1488; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1488, x17, x15, 1488, x18)

inst_1203:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x39a6c9 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x39a6c9 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb9a6c9; op2val:0xbeb9a6c9; valaddr_reg:x16; val_offset:1496; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1496, x17, x15, 1496, x18)

inst_1204:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x39a6c9 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x39a6c9 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb9a6c9; op2val:0xbeb9a6c9; valaddr_reg:x16; val_offset:1504; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1504, x17, x15, 1504, x18)

inst_1205:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x39a6c9 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x39a6c9 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb9a6c9; op2val:0xbeb9a6c9; valaddr_reg:x16; val_offset:1512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1512, x17, x15, 1512, x18)

inst_1206:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2a64a6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2a64a6 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2a64a6; op2val:0xbf2a64a6; valaddr_reg:x16; val_offset:1520; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1520, x17, x15, 1520, x18)

inst_1207:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2a64a6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2a64a6 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2a64a6; op2val:0xbf2a64a6; valaddr_reg:x16; val_offset:1528; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1528, x17, x15, 1528, x18)

inst_1208:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2a64a6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2a64a6 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2a64a6; op2val:0xbf2a64a6; valaddr_reg:x16; val_offset:1536; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1536, x17, x15, 1536, x18)

inst_1209:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2a64a6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2a64a6 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2a64a6; op2val:0xbf2a64a6; valaddr_reg:x16; val_offset:1544; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1544, x17, x15, 1544, x18)

inst_1210:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2a64a6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2a64a6 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2a64a6; op2val:0xbf2a64a6; valaddr_reg:x16; val_offset:1552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1552, x17, x15, 1552, x18)

inst_1211:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7f9c1b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7f9c1b and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7f9c1b; op2val:0xbf7f9c1b; valaddr_reg:x16; val_offset:1560; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1560, x17, x15, 1560, x18)

inst_1212:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7f9c1b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7f9c1b and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7f9c1b; op2val:0xbf7f9c1b; valaddr_reg:x16; val_offset:1568; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1568, x17, x15, 1568, x18)

inst_1213:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7f9c1b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7f9c1b and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7f9c1b; op2val:0xbf7f9c1b; valaddr_reg:x16; val_offset:1576; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1576, x17, x15, 1576, x18)

inst_1214:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7f9c1b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7f9c1b and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7f9c1b; op2val:0xbf7f9c1b; valaddr_reg:x16; val_offset:1584; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1584, x17, x15, 1584, x18)

inst_1215:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7f9c1b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7f9c1b and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7f9c1b; op2val:0xbf7f9c1b; valaddr_reg:x16; val_offset:1592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1592, x17, x15, 1592, x18)

inst_1216:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x15e8b3 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x15e8b3 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f15e8b3; op2val:0xbf15e8b3; valaddr_reg:x16; val_offset:1600; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1600, x17, x15, 1600, x18)

inst_1217:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x15e8b3 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x15e8b3 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f15e8b3; op2val:0xbf15e8b3; valaddr_reg:x16; val_offset:1608; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1608, x17, x15, 1608, x18)

inst_1218:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x15e8b3 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x15e8b3 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f15e8b3; op2val:0xbf15e8b3; valaddr_reg:x16; val_offset:1616; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1616, x17, x15, 1616, x18)

inst_1219:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x15e8b3 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x15e8b3 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f15e8b3; op2val:0xbf15e8b3; valaddr_reg:x16; val_offset:1624; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1624, x17, x15, 1624, x18)

inst_1220:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x15e8b3 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x15e8b3 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f15e8b3; op2val:0xbf15e8b3; valaddr_reg:x16; val_offset:1632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1632, x17, x15, 1632, x18)

inst_1221:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x119a57 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x119a57 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e919a57; op2val:0xbe919a57; valaddr_reg:x16; val_offset:1640; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1640, x17, x15, 1640, x18)

inst_1222:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x119a57 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x119a57 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e919a57; op2val:0xbe919a57; valaddr_reg:x16; val_offset:1648; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1648, x17, x15, 1648, x18)

inst_1223:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x119a57 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x119a57 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e919a57; op2val:0xbe919a57; valaddr_reg:x16; val_offset:1656; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1656, x17, x15, 1656, x18)

inst_1224:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x119a57 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x119a57 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e919a57; op2val:0xbe919a57; valaddr_reg:x16; val_offset:1664; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1664, x17, x15, 1664, x18)

inst_1225:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x119a57 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x119a57 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e919a57; op2val:0xbe919a57; valaddr_reg:x16; val_offset:1672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1672, x17, x15, 1672, x18)

inst_1226:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3b8566 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3b8566 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebb8566; op2val:0xbebb8566; valaddr_reg:x16; val_offset:1680; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1680, x17, x15, 1680, x18)

inst_1227:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3b8566 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3b8566 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebb8566; op2val:0xbebb8566; valaddr_reg:x16; val_offset:1688; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1688, x17, x15, 1688, x18)

inst_1228:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3b8566 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3b8566 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebb8566; op2val:0xbebb8566; valaddr_reg:x16; val_offset:1696; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1696, x17, x15, 1696, x18)

inst_1229:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3b8566 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3b8566 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebb8566; op2val:0xbebb8566; valaddr_reg:x16; val_offset:1704; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1704, x17, x15, 1704, x18)

inst_1230:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3b8566 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3b8566 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebb8566; op2val:0xbebb8566; valaddr_reg:x16; val_offset:1712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1712, x17, x15, 1712, x18)

inst_1231:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x240b63 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x240b63 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f240b63; op2val:0xbf240b63; valaddr_reg:x16; val_offset:1720; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1720, x17, x15, 1720, x18)

inst_1232:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x240b63 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x240b63 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f240b63; op2val:0xbf240b63; valaddr_reg:x16; val_offset:1728; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1728, x17, x15, 1728, x18)

inst_1233:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x240b63 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x240b63 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f240b63; op2val:0xbf240b63; valaddr_reg:x16; val_offset:1736; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1736, x17, x15, 1736, x18)

inst_1234:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x240b63 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x240b63 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f240b63; op2val:0xbf240b63; valaddr_reg:x16; val_offset:1744; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1744, x17, x15, 1744, x18)

inst_1235:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x240b63 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x240b63 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f240b63; op2val:0xbf240b63; valaddr_reg:x16; val_offset:1752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1752, x17, x15, 1752, x18)

inst_1236:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x25d48b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x25d48b and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f25d48b; op2val:0xbf25d48b; valaddr_reg:x16; val_offset:1760; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1760, x17, x15, 1760, x18)

inst_1237:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x25d48b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x25d48b and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f25d48b; op2val:0xbf25d48b; valaddr_reg:x16; val_offset:1768; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1768, x17, x15, 1768, x18)

inst_1238:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x25d48b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x25d48b and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f25d48b; op2val:0xbf25d48b; valaddr_reg:x16; val_offset:1776; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1776, x17, x15, 1776, x18)

inst_1239:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x25d48b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x25d48b and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f25d48b; op2val:0xbf25d48b; valaddr_reg:x16; val_offset:1784; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1784, x17, x15, 1784, x18)

inst_1240:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x25d48b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x25d48b and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f25d48b; op2val:0xbf25d48b; valaddr_reg:x16; val_offset:1792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1792, x17, x15, 1792, x18)

inst_1241:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4286d0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4286d0 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4286d0; op2val:0xbf4286d0; valaddr_reg:x16; val_offset:1800; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1800, x17, x15, 1800, x18)

inst_1242:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4286d0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4286d0 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4286d0; op2val:0xbf4286d0; valaddr_reg:x16; val_offset:1808; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1808, x17, x15, 1808, x18)

inst_1243:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4286d0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4286d0 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4286d0; op2val:0xbf4286d0; valaddr_reg:x16; val_offset:1816; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1816, x17, x15, 1816, x18)

inst_1244:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4286d0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4286d0 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4286d0; op2val:0xbf4286d0; valaddr_reg:x16; val_offset:1824; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1824, x17, x15, 1824, x18)

inst_1245:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4286d0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4286d0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4286d0; op2val:0xbf4286d0; valaddr_reg:x16; val_offset:1832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1832, x17, x15, 1832, x18)

inst_1246:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x744d3c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x744d3c and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f744d3c; op2val:0xbf744d3c; valaddr_reg:x16; val_offset:1840; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1840, x17, x15, 1840, x18)

inst_1247:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x744d3c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x744d3c and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f744d3c; op2val:0xbf744d3c; valaddr_reg:x16; val_offset:1848; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1848, x17, x15, 1848, x18)

inst_1248:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x744d3c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x744d3c and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f744d3c; op2val:0xbf744d3c; valaddr_reg:x16; val_offset:1856; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1856, x17, x15, 1856, x18)

inst_1249:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x744d3c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x744d3c and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f744d3c; op2val:0xbf744d3c; valaddr_reg:x16; val_offset:1864; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1864, x17, x15, 1864, x18)

inst_1250:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x744d3c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x744d3c and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f744d3c; op2val:0xbf744d3c; valaddr_reg:x16; val_offset:1872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1872, x17, x15, 1872, x18)

inst_1251:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x04505c and fs2 == 1 and fe2 == 0x7d and fm2 == 0x04505c and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e84505c; op2val:0xbe84505c; valaddr_reg:x16; val_offset:1880; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1880, x17, x15, 1880, x18)

inst_1252:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x04505c and fs2 == 1 and fe2 == 0x7d and fm2 == 0x04505c and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e84505c; op2val:0xbe84505c; valaddr_reg:x16; val_offset:1888; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1888, x17, x15, 1888, x18)

inst_1253:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x04505c and fs2 == 1 and fe2 == 0x7d and fm2 == 0x04505c and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e84505c; op2val:0xbe84505c; valaddr_reg:x16; val_offset:1896; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1896, x17, x15, 1896, x18)

inst_1254:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x04505c and fs2 == 1 and fe2 == 0x7d and fm2 == 0x04505c and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e84505c; op2val:0xbe84505c; valaddr_reg:x16; val_offset:1904; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1904, x17, x15, 1904, x18)

inst_1255:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x04505c and fs2 == 1 and fe2 == 0x7d and fm2 == 0x04505c and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e84505c; op2val:0xbe84505c; valaddr_reg:x16; val_offset:1912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1912, x17, x15, 1912, x18)

inst_1256:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x60f902 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x60f902 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ee0f902; op2val:0xbee0f902; valaddr_reg:x16; val_offset:1920; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1920, x17, x15, 1920, x18)

inst_1257:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x60f902 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x60f902 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ee0f902; op2val:0xbee0f902; valaddr_reg:x16; val_offset:1928; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1928, x17, x15, 1928, x18)

inst_1258:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x60f902 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x60f902 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ee0f902; op2val:0xbee0f902; valaddr_reg:x16; val_offset:1936; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1936, x17, x15, 1936, x18)

inst_1259:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x60f902 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x60f902 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ee0f902; op2val:0xbee0f902; valaddr_reg:x16; val_offset:1944; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1944, x17, x15, 1944, x18)

inst_1260:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x60f902 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x60f902 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ee0f902; op2val:0xbee0f902; valaddr_reg:x16; val_offset:1952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1952, x17, x15, 1952, x18)

inst_1261:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x263c26 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x263c26 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e263c26; op2val:0xbe263c26; valaddr_reg:x16; val_offset:1960; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1960, x17, x15, 1960, x18)

inst_1262:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x263c26 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x263c26 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e263c26; op2val:0xbe263c26; valaddr_reg:x16; val_offset:1968; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1968, x17, x15, 1968, x18)

inst_1263:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x263c26 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x263c26 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e263c26; op2val:0xbe263c26; valaddr_reg:x16; val_offset:1976; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1976, x17, x15, 1976, x18)

inst_1264:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x263c26 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x263c26 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e263c26; op2val:0xbe263c26; valaddr_reg:x16; val_offset:1984; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1984, x17, x15, 1984, x18)

inst_1265:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x263c26 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x263c26 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e263c26; op2val:0xbe263c26; valaddr_reg:x16; val_offset:1992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1992, x17, x15, 1992, x18)

inst_1266:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x304513 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x304513 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f304513; op2val:0xbf304513; valaddr_reg:x16; val_offset:2000; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 2000, x17, x15, 2000, x18)

inst_1267:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x304513 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x304513 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f304513; op2val:0xbf304513; valaddr_reg:x16; val_offset:2008; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 2008, x17, x15, 2008, x18)

inst_1268:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x304513 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x304513 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f304513; op2val:0xbf304513; valaddr_reg:x16; val_offset:2016; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 2016, x17, x15, 2016, x18)

inst_1269:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x304513 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x304513 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f304513; op2val:0xbf304513; valaddr_reg:x16; val_offset:2024; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_6)

inst_1270:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x304513 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x304513 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f304513; op2val:0xbf304513; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1271:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5c9d41 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5c9d41 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3edc9d41; op2val:0xbedc9d41; valaddr_reg:x16; val_offset:8; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 8, x17, x15, 8, x18)

inst_1272:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5c9d41 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5c9d41 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3edc9d41; op2val:0xbedc9d41; valaddr_reg:x16; val_offset:16; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 16, x17, x15, 16, x18)

inst_1273:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5c9d41 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5c9d41 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3edc9d41; op2val:0xbedc9d41; valaddr_reg:x16; val_offset:24; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 24, x17, x15, 24, x18)

inst_1274:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5c9d41 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5c9d41 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3edc9d41; op2val:0xbedc9d41; valaddr_reg:x16; val_offset:32; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 32, x17, x15, 32, x18)

inst_1275:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5c9d41 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5c9d41 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3edc9d41; op2val:0xbedc9d41; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 40, x17, x15, 40, x18)

inst_1276:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x07438e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x07438e and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f07438e; op2val:0xbf07438e; valaddr_reg:x16; val_offset:48; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 48, x17, x15, 48, x18)

inst_1277:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x07438e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x07438e and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f07438e; op2val:0xbf07438e; valaddr_reg:x16; val_offset:56; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 56, x17, x15, 56, x18)

inst_1278:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x07438e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x07438e and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f07438e; op2val:0xbf07438e; valaddr_reg:x16; val_offset:64; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 64, x17, x15, 64, x18)

inst_1279:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x07438e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x07438e and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f07438e; op2val:0xbf07438e; valaddr_reg:x16; val_offset:72; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 72, x17, x15, 72, x18)

inst_1280:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x07438e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x07438e and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f07438e; op2val:0xbf07438e; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_1281:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0ec481 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0ec481 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0ec481; op2val:0xbf0ec481; valaddr_reg:x16; val_offset:88; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 88, x17, x15, 88, x18)

inst_1282:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0ec481 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0ec481 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0ec481; op2val:0xbf0ec481; valaddr_reg:x16; val_offset:96; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 96, x17, x15, 96, x18)

inst_1283:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0ec481 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0ec481 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0ec481; op2val:0xbf0ec481; valaddr_reg:x16; val_offset:104; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 104, x17, x15, 104, x18)

inst_1284:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0ec481 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0ec481 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0ec481; op2val:0xbf0ec481; valaddr_reg:x16; val_offset:112; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 112, x17, x15, 112, x18)

inst_1285:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0ec481 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0ec481 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0ec481; op2val:0xbf0ec481; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 120, x17, x15, 120, x18)

inst_1286:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3fd2f4 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3fd2f4 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3fd2f4; op2val:0xbf3fd2f4; valaddr_reg:x16; val_offset:128; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 128, x17, x15, 128, x18)

inst_1287:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3fd2f4 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3fd2f4 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3fd2f4; op2val:0xbf3fd2f4; valaddr_reg:x16; val_offset:136; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 136, x17, x15, 136, x18)

inst_1288:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3fd2f4 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3fd2f4 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3fd2f4; op2val:0xbf3fd2f4; valaddr_reg:x16; val_offset:144; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 144, x17, x15, 144, x18)

inst_1289:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3fd2f4 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3fd2f4 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3fd2f4; op2val:0xbf3fd2f4; valaddr_reg:x16; val_offset:152; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 152, x17, x15, 152, x18)

inst_1290:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3fd2f4 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3fd2f4 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3fd2f4; op2val:0xbf3fd2f4; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_1291:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x1e4903 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x1e4903 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e1e4903; op2val:0xbe1e4903; valaddr_reg:x16; val_offset:168; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 168, x17, x15, 168, x18)

inst_1292:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x1e4903 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x1e4903 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e1e4903; op2val:0xbe1e4903; valaddr_reg:x16; val_offset:176; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 176, x17, x15, 176, x18)

inst_1293:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x1e4903 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x1e4903 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e1e4903; op2val:0xbe1e4903; valaddr_reg:x16; val_offset:184; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 184, x17, x15, 184, x18)

inst_1294:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x1e4903 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x1e4903 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e1e4903; op2val:0xbe1e4903; valaddr_reg:x16; val_offset:192; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 192, x17, x15, 192, x18)

inst_1295:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x1e4903 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x1e4903 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e1e4903; op2val:0xbe1e4903; valaddr_reg:x16; val_offset:200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 200, x17, x15, 200, x18)

inst_1296:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x712392 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x712392 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f712392; op2val:0xbf712392; valaddr_reg:x16; val_offset:208; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 208, x17, x15, 208, x18)

inst_1297:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x712392 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x712392 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f712392; op2val:0xbf712392; valaddr_reg:x16; val_offset:216; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 216, x17, x15, 216, x18)

inst_1298:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x712392 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x712392 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f712392; op2val:0xbf712392; valaddr_reg:x16; val_offset:224; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 224, x17, x15, 224, x18)

inst_1299:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x712392 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x712392 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f712392; op2val:0xbf712392; valaddr_reg:x16; val_offset:232; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 232, x17, x15, 232, x18)

inst_1300:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x712392 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x712392 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f712392; op2val:0xbf712392; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_1301:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x279ba7 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x279ba7 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea79ba7; op2val:0xbea79ba7; valaddr_reg:x16; val_offset:248; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 248, x17, x15, 248, x18)

inst_1302:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x279ba7 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x279ba7 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea79ba7; op2val:0xbea79ba7; valaddr_reg:x16; val_offset:256; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 256, x17, x15, 256, x18)

inst_1303:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x279ba7 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x279ba7 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea79ba7; op2val:0xbea79ba7; valaddr_reg:x16; val_offset:264; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 264, x17, x15, 264, x18)

inst_1304:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x279ba7 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x279ba7 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea79ba7; op2val:0xbea79ba7; valaddr_reg:x16; val_offset:272; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 272, x17, x15, 272, x18)

inst_1305:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x279ba7 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x279ba7 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea79ba7; op2val:0xbea79ba7; valaddr_reg:x16; val_offset:280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 280, x17, x15, 280, x18)

inst_1306:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x26f2e0 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x26f2e0 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3da6f2e0; op2val:0xbda6f2e0; valaddr_reg:x16; val_offset:288; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 288, x17, x15, 288, x18)

inst_1307:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x26f2e0 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x26f2e0 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3da6f2e0; op2val:0xbda6f2e0; valaddr_reg:x16; val_offset:296; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 296, x17, x15, 296, x18)

inst_1308:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x26f2e0 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x26f2e0 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3da6f2e0; op2val:0xbda6f2e0; valaddr_reg:x16; val_offset:304; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 304, x17, x15, 304, x18)

inst_1309:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x26f2e0 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x26f2e0 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3da6f2e0; op2val:0xbda6f2e0; valaddr_reg:x16; val_offset:312; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 312, x17, x15, 312, x18)

inst_1310:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x26f2e0 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x26f2e0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3da6f2e0; op2val:0xbda6f2e0; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_1311:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x096bf2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x096bf2 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e896bf2; op2val:0xbe896bf2; valaddr_reg:x16; val_offset:328; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 328, x17, x15, 328, x18)

inst_1312:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x096bf2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x096bf2 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e896bf2; op2val:0xbe896bf2; valaddr_reg:x16; val_offset:336; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 336, x17, x15, 336, x18)

inst_1313:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x096bf2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x096bf2 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e896bf2; op2val:0xbe896bf2; valaddr_reg:x16; val_offset:344; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 344, x17, x15, 344, x18)

inst_1314:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x096bf2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x096bf2 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e896bf2; op2val:0xbe896bf2; valaddr_reg:x16; val_offset:352; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 352, x17, x15, 352, x18)

inst_1315:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x096bf2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x096bf2 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e896bf2; op2val:0xbe896bf2; valaddr_reg:x16; val_offset:360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 360, x17, x15, 360, x18)

inst_1316:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4cf704 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4cf704 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4cf704; op2val:0xbf4cf704; valaddr_reg:x16; val_offset:368; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 368, x17, x15, 368, x18)

inst_1317:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4cf704 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4cf704 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4cf704; op2val:0xbf4cf704; valaddr_reg:x16; val_offset:376; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 376, x17, x15, 376, x18)

inst_1318:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4cf704 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4cf704 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4cf704; op2val:0xbf4cf704; valaddr_reg:x16; val_offset:384; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 384, x17, x15, 384, x18)

inst_1319:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4cf704 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4cf704 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4cf704; op2val:0xbf4cf704; valaddr_reg:x16; val_offset:392; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 392, x17, x15, 392, x18)

inst_1320:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4cf704 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4cf704 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4cf704; op2val:0xbf4cf704; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_1321:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x662a06 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x662a06 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f662a06; op2val:0xbf662a06; valaddr_reg:x16; val_offset:408; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 408, x17, x15, 408, x18)

inst_1322:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x662a06 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x662a06 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f662a06; op2val:0xbf662a06; valaddr_reg:x16; val_offset:416; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 416, x17, x15, 416, x18)

inst_1323:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x662a06 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x662a06 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f662a06; op2val:0xbf662a06; valaddr_reg:x16; val_offset:424; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 424, x17, x15, 424, x18)

inst_1324:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x662a06 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x662a06 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f662a06; op2val:0xbf662a06; valaddr_reg:x16; val_offset:432; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 432, x17, x15, 432, x18)

inst_1325:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x662a06 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x662a06 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f662a06; op2val:0xbf662a06; valaddr_reg:x16; val_offset:440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 440, x17, x15, 440, x18)

inst_1326:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7e235b and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7e235b and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efe235b; op2val:0xbefe235b; valaddr_reg:x16; val_offset:448; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 448, x17, x15, 448, x18)

inst_1327:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7e235b and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7e235b and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efe235b; op2val:0xbefe235b; valaddr_reg:x16; val_offset:456; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 456, x17, x15, 456, x18)

inst_1328:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7e235b and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7e235b and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efe235b; op2val:0xbefe235b; valaddr_reg:x16; val_offset:464; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 464, x17, x15, 464, x18)

inst_1329:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7e235b and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7e235b and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efe235b; op2val:0xbefe235b; valaddr_reg:x16; val_offset:472; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 472, x17, x15, 472, x18)

inst_1330:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7e235b and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7e235b and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efe235b; op2val:0xbefe235b; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_1331:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x265322 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x265322 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f265322; op2val:0xbf265322; valaddr_reg:x16; val_offset:488; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 488, x17, x15, 488, x18)

inst_1332:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x265322 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x265322 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f265322; op2val:0xbf265322; valaddr_reg:x16; val_offset:496; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 496, x17, x15, 496, x18)

inst_1333:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x265322 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x265322 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f265322; op2val:0xbf265322; valaddr_reg:x16; val_offset:504; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 504, x17, x15, 504, x18)

inst_1334:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x265322 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x265322 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f265322; op2val:0xbf265322; valaddr_reg:x16; val_offset:512; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 512, x17, x15, 512, x18)

inst_1335:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x265322 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x265322 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f265322; op2val:0xbf265322; valaddr_reg:x16; val_offset:520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 520, x17, x15, 520, x18)

inst_1336:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4777bb and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4777bb and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4777bb; op2val:0xbf4777bb; valaddr_reg:x16; val_offset:528; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 528, x17, x15, 528, x18)

inst_1337:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4777bb and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4777bb and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4777bb; op2val:0xbf4777bb; valaddr_reg:x16; val_offset:536; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 536, x17, x15, 536, x18)

inst_1338:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4777bb and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4777bb and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4777bb; op2val:0xbf4777bb; valaddr_reg:x16; val_offset:544; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 544, x17, x15, 544, x18)

inst_1339:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4777bb and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4777bb and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4777bb; op2val:0xbf4777bb; valaddr_reg:x16; val_offset:552; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 552, x17, x15, 552, x18)

inst_1340:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4777bb and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4777bb and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4777bb; op2val:0xbf4777bb; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_1341:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x660414 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x660414 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f660414; op2val:0xbf660414; valaddr_reg:x16; val_offset:568; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 568, x17, x15, 568, x18)

inst_1342:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x660414 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x660414 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f660414; op2val:0xbf660414; valaddr_reg:x16; val_offset:576; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 576, x17, x15, 576, x18)

inst_1343:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x660414 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x660414 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f660414; op2val:0xbf660414; valaddr_reg:x16; val_offset:584; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 584, x17, x15, 584, x18)

inst_1344:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x660414 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x660414 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f660414; op2val:0xbf660414; valaddr_reg:x16; val_offset:592; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 592, x17, x15, 592, x18)

inst_1345:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x660414 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x660414 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f660414; op2val:0xbf660414; valaddr_reg:x16; val_offset:600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 600, x17, x15, 600, x18)

inst_1346:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7a2aeb and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7a2aeb and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7a2aeb; op2val:0xbf7a2aeb; valaddr_reg:x16; val_offset:608; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 608, x17, x15, 608, x18)

inst_1347:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7a2aeb and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7a2aeb and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7a2aeb; op2val:0xbf7a2aeb; valaddr_reg:x16; val_offset:616; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 616, x17, x15, 616, x18)

inst_1348:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7a2aeb and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7a2aeb and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7a2aeb; op2val:0xbf7a2aeb; valaddr_reg:x16; val_offset:624; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 624, x17, x15, 624, x18)

inst_1349:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7a2aeb and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7a2aeb and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7a2aeb; op2val:0xbf7a2aeb; valaddr_reg:x16; val_offset:632; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 632, x17, x15, 632, x18)

inst_1350:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7a2aeb and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7a2aeb and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7a2aeb; op2val:0xbf7a2aeb; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_1351:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4c0915 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x4c0915 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4c0915; op2val:0xbe4c0915; valaddr_reg:x16; val_offset:648; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 648, x17, x15, 648, x18)

inst_1352:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4c0915 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x4c0915 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4c0915; op2val:0xbe4c0915; valaddr_reg:x16; val_offset:656; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 656, x17, x15, 656, x18)

inst_1353:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4c0915 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x4c0915 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4c0915; op2val:0xbe4c0915; valaddr_reg:x16; val_offset:664; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 664, x17, x15, 664, x18)

inst_1354:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4c0915 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x4c0915 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4c0915; op2val:0xbe4c0915; valaddr_reg:x16; val_offset:672; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 672, x17, x15, 672, x18)

inst_1355:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4c0915 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x4c0915 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4c0915; op2val:0xbe4c0915; valaddr_reg:x16; val_offset:680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 680, x17, x15, 680, x18)

inst_1356:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x604868 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x604868 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f604868; op2val:0xbf604868; valaddr_reg:x16; val_offset:688; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 688, x17, x15, 688, x18)

inst_1357:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x604868 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x604868 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f604868; op2val:0xbf604868; valaddr_reg:x16; val_offset:696; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 696, x17, x15, 696, x18)

inst_1358:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x604868 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x604868 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f604868; op2val:0xbf604868; valaddr_reg:x16; val_offset:704; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 704, x17, x15, 704, x18)

inst_1359:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x604868 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x604868 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f604868; op2val:0xbf604868; valaddr_reg:x16; val_offset:712; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 712, x17, x15, 712, x18)

inst_1360:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x604868 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x604868 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f604868; op2val:0xbf604868; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_1361:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x1f9daa and fs2 == 1 and fe2 == 0x7a and fm2 == 0x1f9daa and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d1f9daa; op2val:0xbd1f9daa; valaddr_reg:x16; val_offset:728; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 728, x17, x15, 728, x18)

inst_1362:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x1f9daa and fs2 == 1 and fe2 == 0x7a and fm2 == 0x1f9daa and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d1f9daa; op2val:0xbd1f9daa; valaddr_reg:x16; val_offset:736; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 736, x17, x15, 736, x18)

inst_1363:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x1f9daa and fs2 == 1 and fe2 == 0x7a and fm2 == 0x1f9daa and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d1f9daa; op2val:0xbd1f9daa; valaddr_reg:x16; val_offset:744; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 744, x17, x15, 744, x18)

inst_1364:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x1f9daa and fs2 == 1 and fe2 == 0x7a and fm2 == 0x1f9daa and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d1f9daa; op2val:0xbd1f9daa; valaddr_reg:x16; val_offset:752; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 752, x17, x15, 752, x18)

inst_1365:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x1f9daa and fs2 == 1 and fe2 == 0x7a and fm2 == 0x1f9daa and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d1f9daa; op2val:0xbd1f9daa; valaddr_reg:x16; val_offset:760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 760, x17, x15, 760, x18)

inst_1366:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x76af02 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x76af02 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f76af02; op2val:0xbf76af02; valaddr_reg:x16; val_offset:768; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 768, x17, x15, 768, x18)

inst_1367:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x76af02 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x76af02 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f76af02; op2val:0xbf76af02; valaddr_reg:x16; val_offset:776; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 776, x17, x15, 776, x18)

inst_1368:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x76af02 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x76af02 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f76af02; op2val:0xbf76af02; valaddr_reg:x16; val_offset:784; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 784, x17, x15, 784, x18)

inst_1369:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x76af02 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x76af02 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f76af02; op2val:0xbf76af02; valaddr_reg:x16; val_offset:792; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 792, x17, x15, 792, x18)

inst_1370:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x76af02 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x76af02 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f76af02; op2val:0xbf76af02; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_1371:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x213e82 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x213e82 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f213e82; op2val:0xbf213e82; valaddr_reg:x16; val_offset:808; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 808, x17, x15, 808, x18)

inst_1372:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x213e82 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x213e82 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f213e82; op2val:0xbf213e82; valaddr_reg:x16; val_offset:816; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 816, x17, x15, 816, x18)

inst_1373:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x213e82 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x213e82 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f213e82; op2val:0xbf213e82; valaddr_reg:x16; val_offset:824; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 824, x17, x15, 824, x18)

inst_1374:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x213e82 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x213e82 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f213e82; op2val:0xbf213e82; valaddr_reg:x16; val_offset:832; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 832, x17, x15, 832, x18)

inst_1375:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x213e82 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x213e82 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f213e82; op2val:0xbf213e82; valaddr_reg:x16; val_offset:840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 840, x17, x15, 840, x18)

inst_1376:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x591cb1 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x591cb1 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed91cb1; op2val:0xbed91cb1; valaddr_reg:x16; val_offset:848; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 848, x17, x15, 848, x18)

inst_1377:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x591cb1 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x591cb1 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed91cb1; op2val:0xbed91cb1; valaddr_reg:x16; val_offset:856; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 856, x17, x15, 856, x18)

inst_1378:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x591cb1 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x591cb1 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed91cb1; op2val:0xbed91cb1; valaddr_reg:x16; val_offset:864; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 864, x17, x15, 864, x18)

inst_1379:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x591cb1 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x591cb1 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed91cb1; op2val:0xbed91cb1; valaddr_reg:x16; val_offset:872; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 872, x17, x15, 872, x18)

inst_1380:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x591cb1 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x591cb1 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed91cb1; op2val:0xbed91cb1; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 880, x17, x15, 880, x18)

inst_1381:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3ae14a and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3ae14a and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebae14a; op2val:0xbebae14a; valaddr_reg:x16; val_offset:888; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 888, x17, x15, 888, x18)

inst_1382:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3ae14a and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3ae14a and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebae14a; op2val:0xbebae14a; valaddr_reg:x16; val_offset:896; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 896, x17, x15, 896, x18)

inst_1383:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3ae14a and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3ae14a and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebae14a; op2val:0xbebae14a; valaddr_reg:x16; val_offset:904; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 904, x17, x15, 904, x18)

inst_1384:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3ae14a and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3ae14a and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebae14a; op2val:0xbebae14a; valaddr_reg:x16; val_offset:912; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 912, x17, x15, 912, x18)

inst_1385:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3ae14a and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3ae14a and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebae14a; op2val:0xbebae14a; valaddr_reg:x16; val_offset:920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 920, x17, x15, 920, x18)

inst_1386:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2389d2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x2389d2 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea389d2; op2val:0xbea389d2; valaddr_reg:x16; val_offset:928; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 928, x17, x15, 928, x18)

inst_1387:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2389d2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x2389d2 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea389d2; op2val:0xbea389d2; valaddr_reg:x16; val_offset:936; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 936, x17, x15, 936, x18)

inst_1388:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2389d2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x2389d2 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea389d2; op2val:0xbea389d2; valaddr_reg:x16; val_offset:944; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 944, x17, x15, 944, x18)

inst_1389:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2389d2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x2389d2 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea389d2; op2val:0xbea389d2; valaddr_reg:x16; val_offset:952; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 952, x17, x15, 952, x18)

inst_1390:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2389d2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x2389d2 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea389d2; op2val:0xbea389d2; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 960, x17, x15, 960, x18)

inst_1391:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x384986 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x384986 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db84986; op2val:0xbdb84986; valaddr_reg:x16; val_offset:968; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 968, x17, x15, 968, x18)

inst_1392:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x384986 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x384986 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db84986; op2val:0xbdb84986; valaddr_reg:x16; val_offset:976; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 976, x17, x15, 976, x18)

inst_1393:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x384986 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x384986 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db84986; op2val:0xbdb84986; valaddr_reg:x16; val_offset:984; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 984, x17, x15, 984, x18)

inst_1394:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x384986 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x384986 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db84986; op2val:0xbdb84986; valaddr_reg:x16; val_offset:992; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 992, x17, x15, 992, x18)

inst_1395:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x384986 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x384986 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db84986; op2val:0xbdb84986; valaddr_reg:x16; val_offset:1000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1000, x17, x15, 1000, x18)

inst_1396:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x746b8a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x746b8a and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f746b8a; op2val:0xbf746b8a; valaddr_reg:x16; val_offset:1008; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1008, x17, x15, 1008, x18)

inst_1397:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x746b8a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x746b8a and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f746b8a; op2val:0xbf746b8a; valaddr_reg:x16; val_offset:1016; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1016, x17, x15, 1016, x18)

inst_1398:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x746b8a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x746b8a and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f746b8a; op2val:0xbf746b8a; valaddr_reg:x16; val_offset:1024; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1024, x17, x15, 1024, x18)

inst_1399:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x746b8a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x746b8a and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f746b8a; op2val:0xbf746b8a; valaddr_reg:x16; val_offset:1032; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1032, x17, x15, 1032, x18)

inst_1400:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x746b8a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x746b8a and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f746b8a; op2val:0xbf746b8a; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1040, x17, x15, 1040, x18)

inst_1401:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5a8840 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5a8840 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5a8840; op2val:0xbf5a8840; valaddr_reg:x16; val_offset:1048; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1048, x17, x15, 1048, x18)

inst_1402:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5a8840 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5a8840 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5a8840; op2val:0xbf5a8840; valaddr_reg:x16; val_offset:1056; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1056, x17, x15, 1056, x18)

inst_1403:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5a8840 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5a8840 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5a8840; op2val:0xbf5a8840; valaddr_reg:x16; val_offset:1064; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1064, x17, x15, 1064, x18)

inst_1404:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5a8840 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5a8840 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5a8840; op2val:0xbf5a8840; valaddr_reg:x16; val_offset:1072; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1072, x17, x15, 1072, x18)

inst_1405:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5a8840 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5a8840 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5a8840; op2val:0xbf5a8840; valaddr_reg:x16; val_offset:1080; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1080, x17, x15, 1080, x18)

inst_1406:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x3c8146 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x3c8146 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e3c8146; op2val:0xbe3c8146; valaddr_reg:x16; val_offset:1088; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1088, x17, x15, 1088, x18)

inst_1407:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x3c8146 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x3c8146 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e3c8146; op2val:0xbe3c8146; valaddr_reg:x16; val_offset:1096; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1096, x17, x15, 1096, x18)

inst_1408:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x3c8146 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x3c8146 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e3c8146; op2val:0xbe3c8146; valaddr_reg:x16; val_offset:1104; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1104, x17, x15, 1104, x18)

inst_1409:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x3c8146 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x3c8146 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e3c8146; op2val:0xbe3c8146; valaddr_reg:x16; val_offset:1112; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1112, x17, x15, 1112, x18)

inst_1410:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x3c8146 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x3c8146 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e3c8146; op2val:0xbe3c8146; valaddr_reg:x16; val_offset:1120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1120, x17, x15, 1120, x18)

inst_1411:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5258d7 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x5258d7 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e5258d7; op2val:0xbe5258d7; valaddr_reg:x16; val_offset:1128; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1128, x17, x15, 1128, x18)

inst_1412:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5258d7 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x5258d7 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e5258d7; op2val:0xbe5258d7; valaddr_reg:x16; val_offset:1136; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1136, x17, x15, 1136, x18)

inst_1413:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5258d7 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x5258d7 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e5258d7; op2val:0xbe5258d7; valaddr_reg:x16; val_offset:1144; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1144, x17, x15, 1144, x18)

inst_1414:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5258d7 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x5258d7 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e5258d7; op2val:0xbe5258d7; valaddr_reg:x16; val_offset:1152; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1152, x17, x15, 1152, x18)

inst_1415:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5258d7 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x5258d7 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e5258d7; op2val:0xbe5258d7; valaddr_reg:x16; val_offset:1160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1160, x17, x15, 1160, x18)

inst_1416:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x62037c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x62037c and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f62037c; op2val:0xbf62037c; valaddr_reg:x16; val_offset:1168; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1168, x17, x15, 1168, x18)

inst_1417:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x62037c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x62037c and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f62037c; op2val:0xbf62037c; valaddr_reg:x16; val_offset:1176; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1176, x17, x15, 1176, x18)

inst_1418:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x62037c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x62037c and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f62037c; op2val:0xbf62037c; valaddr_reg:x16; val_offset:1184; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1184, x17, x15, 1184, x18)

inst_1419:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x62037c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x62037c and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f62037c; op2val:0xbf62037c; valaddr_reg:x16; val_offset:1192; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1192, x17, x15, 1192, x18)

inst_1420:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x62037c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x62037c and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f62037c; op2val:0xbf62037c; valaddr_reg:x16; val_offset:1200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1200, x17, x15, 1200, x18)

inst_1421:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x41c86a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x41c86a and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f41c86a; op2val:0xbf41c86a; valaddr_reg:x16; val_offset:1208; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1208, x17, x15, 1208, x18)

inst_1422:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x41c86a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x41c86a and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f41c86a; op2val:0xbf41c86a; valaddr_reg:x16; val_offset:1216; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1216, x17, x15, 1216, x18)

inst_1423:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x41c86a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x41c86a and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f41c86a; op2val:0xbf41c86a; valaddr_reg:x16; val_offset:1224; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1224, x17, x15, 1224, x18)

inst_1424:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x41c86a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x41c86a and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f41c86a; op2val:0xbf41c86a; valaddr_reg:x16; val_offset:1232; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1232, x17, x15, 1232, x18)

inst_1425:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x41c86a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x41c86a and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f41c86a; op2val:0xbf41c86a; valaddr_reg:x16; val_offset:1240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1240, x17, x15, 1240, x18)

inst_1426:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3d5d53 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3d5d53 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebd5d53; op2val:0xbebd5d53; valaddr_reg:x16; val_offset:1248; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1248, x17, x15, 1248, x18)

inst_1427:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3d5d53 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3d5d53 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebd5d53; op2val:0xbebd5d53; valaddr_reg:x16; val_offset:1256; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1256, x17, x15, 1256, x18)

inst_1428:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3d5d53 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3d5d53 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebd5d53; op2val:0xbebd5d53; valaddr_reg:x16; val_offset:1264; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1264, x17, x15, 1264, x18)

inst_1429:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3d5d53 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3d5d53 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebd5d53; op2val:0xbebd5d53; valaddr_reg:x16; val_offset:1272; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1272, x17, x15, 1272, x18)

inst_1430:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3d5d53 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3d5d53 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebd5d53; op2val:0xbebd5d53; valaddr_reg:x16; val_offset:1280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1280, x17, x15, 1280, x18)

inst_1431:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x46414a and fs2 == 1 and fe2 == 0x7d and fm2 == 0x46414a and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec6414a; op2val:0xbec6414a; valaddr_reg:x16; val_offset:1288; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1288, x17, x15, 1288, x18)

inst_1432:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x46414a and fs2 == 1 and fe2 == 0x7d and fm2 == 0x46414a and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec6414a; op2val:0xbec6414a; valaddr_reg:x16; val_offset:1296; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1296, x17, x15, 1296, x18)

inst_1433:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x46414a and fs2 == 1 and fe2 == 0x7d and fm2 == 0x46414a and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec6414a; op2val:0xbec6414a; valaddr_reg:x16; val_offset:1304; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1304, x17, x15, 1304, x18)

inst_1434:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x46414a and fs2 == 1 and fe2 == 0x7d and fm2 == 0x46414a and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec6414a; op2val:0xbec6414a; valaddr_reg:x16; val_offset:1312; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1312, x17, x15, 1312, x18)

inst_1435:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x46414a and fs2 == 1 and fe2 == 0x7d and fm2 == 0x46414a and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec6414a; op2val:0xbec6414a; valaddr_reg:x16; val_offset:1320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1320, x17, x15, 1320, x18)

inst_1436:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x53a296 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x53a296 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e53a296; op2val:0xbe53a296; valaddr_reg:x16; val_offset:1328; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1328, x17, x15, 1328, x18)

inst_1437:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x53a296 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x53a296 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e53a296; op2val:0xbe53a296; valaddr_reg:x16; val_offset:1336; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1336, x17, x15, 1336, x18)

inst_1438:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x53a296 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x53a296 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e53a296; op2val:0xbe53a296; valaddr_reg:x16; val_offset:1344; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1344, x17, x15, 1344, x18)

inst_1439:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x53a296 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x53a296 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e53a296; op2val:0xbe53a296; valaddr_reg:x16; val_offset:1352; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1352, x17, x15, 1352, x18)

inst_1440:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x53a296 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x53a296 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e53a296; op2val:0xbe53a296; valaddr_reg:x16; val_offset:1360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1360, x17, x15, 1360, x18)

inst_1441:
// fs1 == 0 and fe1 == 0x76 and fm1 == 0x753f09 and fs2 == 1 and fe2 == 0x76 and fm2 == 0x753f09 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3b753f09; op2val:0xbb753f09; valaddr_reg:x16; val_offset:1368; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1368, x17, x15, 1368, x18)

inst_1442:
// fs1 == 0 and fe1 == 0x76 and fm1 == 0x753f09 and fs2 == 1 and fe2 == 0x76 and fm2 == 0x753f09 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3b753f09; op2val:0xbb753f09; valaddr_reg:x16; val_offset:1376; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1376, x17, x15, 1376, x18)

inst_1443:
// fs1 == 0 and fe1 == 0x76 and fm1 == 0x753f09 and fs2 == 1 and fe2 == 0x76 and fm2 == 0x753f09 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3b753f09; op2val:0xbb753f09; valaddr_reg:x16; val_offset:1384; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1384, x17, x15, 1384, x18)

inst_1444:
// fs1 == 0 and fe1 == 0x76 and fm1 == 0x753f09 and fs2 == 1 and fe2 == 0x76 and fm2 == 0x753f09 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3b753f09; op2val:0xbb753f09; valaddr_reg:x16; val_offset:1392; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1392, x17, x15, 1392, x18)

inst_1445:
// fs1 == 0 and fe1 == 0x76 and fm1 == 0x753f09 and fs2 == 1 and fe2 == 0x76 and fm2 == 0x753f09 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3b753f09; op2val:0xbb753f09; valaddr_reg:x16; val_offset:1400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1400, x17, x15, 1400, x18)

inst_1446:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0ca7e5 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0ca7e5 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0ca7e5; op2val:0xbf0ca7e5; valaddr_reg:x16; val_offset:1408; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1408, x17, x15, 1408, x18)

inst_1447:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0ca7e5 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0ca7e5 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0ca7e5; op2val:0xbf0ca7e5; valaddr_reg:x16; val_offset:1416; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1416, x17, x15, 1416, x18)

inst_1448:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0ca7e5 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0ca7e5 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0ca7e5; op2val:0xbf0ca7e5; valaddr_reg:x16; val_offset:1424; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1424, x17, x15, 1424, x18)

inst_1449:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0ca7e5 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0ca7e5 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0ca7e5; op2val:0xbf0ca7e5; valaddr_reg:x16; val_offset:1432; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1432, x17, x15, 1432, x18)

inst_1450:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0ca7e5 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0ca7e5 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0ca7e5; op2val:0xbf0ca7e5; valaddr_reg:x16; val_offset:1440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1440, x17, x15, 1440, x18)

inst_1451:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x4dc359 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x4dc359 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d4dc359; op2val:0xbd4dc359; valaddr_reg:x16; val_offset:1448; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1448, x17, x15, 1448, x18)

inst_1452:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x4dc359 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x4dc359 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d4dc359; op2val:0xbd4dc359; valaddr_reg:x16; val_offset:1456; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1456, x17, x15, 1456, x18)

inst_1453:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x4dc359 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x4dc359 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d4dc359; op2val:0xbd4dc359; valaddr_reg:x16; val_offset:1464; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1464, x17, x15, 1464, x18)

inst_1454:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x4dc359 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x4dc359 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d4dc359; op2val:0xbd4dc359; valaddr_reg:x16; val_offset:1472; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1472, x17, x15, 1472, x18)

inst_1455:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x4dc359 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x4dc359 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d4dc359; op2val:0xbd4dc359; valaddr_reg:x16; val_offset:1480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1480, x17, x15, 1480, x18)

inst_1456:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x56f5cf and fs2 == 1 and fe2 == 0x7b and fm2 == 0x56f5cf and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dd6f5cf; op2val:0xbdd6f5cf; valaddr_reg:x16; val_offset:1488; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1488, x17, x15, 1488, x18)

inst_1457:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x56f5cf and fs2 == 1 and fe2 == 0x7b and fm2 == 0x56f5cf and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dd6f5cf; op2val:0xbdd6f5cf; valaddr_reg:x16; val_offset:1496; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1496, x17, x15, 1496, x18)

inst_1458:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x56f5cf and fs2 == 1 and fe2 == 0x7b and fm2 == 0x56f5cf and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dd6f5cf; op2val:0xbdd6f5cf; valaddr_reg:x16; val_offset:1504; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1504, x17, x15, 1504, x18)

inst_1459:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x56f5cf and fs2 == 1 and fe2 == 0x7b and fm2 == 0x56f5cf and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dd6f5cf; op2val:0xbdd6f5cf; valaddr_reg:x16; val_offset:1512; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1512, x17, x15, 1512, x18)

inst_1460:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x56f5cf and fs2 == 1 and fe2 == 0x7b and fm2 == 0x56f5cf and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dd6f5cf; op2val:0xbdd6f5cf; valaddr_reg:x16; val_offset:1520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1520, x17, x15, 1520, x18)

inst_1461:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x40e467 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x40e467 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e40e467; op2val:0xbe40e467; valaddr_reg:x16; val_offset:1528; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1528, x17, x15, 1528, x18)

inst_1462:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x40e467 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x40e467 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e40e467; op2val:0xbe40e467; valaddr_reg:x16; val_offset:1536; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1536, x17, x15, 1536, x18)

inst_1463:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x40e467 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x40e467 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e40e467; op2val:0xbe40e467; valaddr_reg:x16; val_offset:1544; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1544, x17, x15, 1544, x18)

inst_1464:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x40e467 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x40e467 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e40e467; op2val:0xbe40e467; valaddr_reg:x16; val_offset:1552; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1552, x17, x15, 1552, x18)

inst_1465:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x40e467 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x40e467 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e40e467; op2val:0xbe40e467; valaddr_reg:x16; val_offset:1560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1560, x17, x15, 1560, x18)

inst_1466:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x16e518 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x16e518 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e96e518; op2val:0xbe96e518; valaddr_reg:x16; val_offset:1568; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1568, x17, x15, 1568, x18)

inst_1467:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x16e518 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x16e518 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e96e518; op2val:0xbe96e518; valaddr_reg:x16; val_offset:1576; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1576, x17, x15, 1576, x18)

inst_1468:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x16e518 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x16e518 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e96e518; op2val:0xbe96e518; valaddr_reg:x16; val_offset:1584; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1584, x17, x15, 1584, x18)

inst_1469:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x16e518 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x16e518 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e96e518; op2val:0xbe96e518; valaddr_reg:x16; val_offset:1592; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1592, x17, x15, 1592, x18)

inst_1470:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x16e518 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x16e518 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e96e518; op2val:0xbe96e518; valaddr_reg:x16; val_offset:1600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1600, x17, x15, 1600, x18)

inst_1471:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6b367c and fs2 == 1 and fe2 == 0x7d and fm2 == 0x6b367c and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eeb367c; op2val:0xbeeb367c; valaddr_reg:x16; val_offset:1608; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1608, x17, x15, 1608, x18)

inst_1472:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6b367c and fs2 == 1 and fe2 == 0x7d and fm2 == 0x6b367c and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eeb367c; op2val:0xbeeb367c; valaddr_reg:x16; val_offset:1616; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1616, x17, x15, 1616, x18)

inst_1473:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6b367c and fs2 == 1 and fe2 == 0x7d and fm2 == 0x6b367c and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eeb367c; op2val:0xbeeb367c; valaddr_reg:x16; val_offset:1624; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1624, x17, x15, 1624, x18)

inst_1474:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6b367c and fs2 == 1 and fe2 == 0x7d and fm2 == 0x6b367c and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eeb367c; op2val:0xbeeb367c; valaddr_reg:x16; val_offset:1632; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1632, x17, x15, 1632, x18)

inst_1475:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6b367c and fs2 == 1 and fe2 == 0x7d and fm2 == 0x6b367c and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eeb367c; op2val:0xbeeb367c; valaddr_reg:x16; val_offset:1640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1640, x17, x15, 1640, x18)

inst_1476:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x508a9c and fs2 == 1 and fe2 == 0x7b and fm2 == 0x508a9c and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dd08a9c; op2val:0xbdd08a9c; valaddr_reg:x16; val_offset:1648; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1648, x17, x15, 1648, x18)

inst_1477:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x508a9c and fs2 == 1 and fe2 == 0x7b and fm2 == 0x508a9c and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dd08a9c; op2val:0xbdd08a9c; valaddr_reg:x16; val_offset:1656; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1656, x17, x15, 1656, x18)

inst_1478:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x508a9c and fs2 == 1 and fe2 == 0x7b and fm2 == 0x508a9c and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dd08a9c; op2val:0xbdd08a9c; valaddr_reg:x16; val_offset:1664; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1664, x17, x15, 1664, x18)

inst_1479:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x508a9c and fs2 == 1 and fe2 == 0x7b and fm2 == 0x508a9c and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dd08a9c; op2val:0xbdd08a9c; valaddr_reg:x16; val_offset:1672; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1672, x17, x15, 1672, x18)

inst_1480:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x508a9c and fs2 == 1 and fe2 == 0x7b and fm2 == 0x508a9c and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dd08a9c; op2val:0xbdd08a9c; valaddr_reg:x16; val_offset:1680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1680, x17, x15, 1680, x18)

inst_1481:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x1cea69 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x1cea69 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d9cea69; op2val:0xbd9cea69; valaddr_reg:x16; val_offset:1688; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1688, x17, x15, 1688, x18)

inst_1482:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x1cea69 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x1cea69 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d9cea69; op2val:0xbd9cea69; valaddr_reg:x16; val_offset:1696; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1696, x17, x15, 1696, x18)

inst_1483:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x1cea69 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x1cea69 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d9cea69; op2val:0xbd9cea69; valaddr_reg:x16; val_offset:1704; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1704, x17, x15, 1704, x18)

inst_1484:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x1cea69 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x1cea69 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d9cea69; op2val:0xbd9cea69; valaddr_reg:x16; val_offset:1712; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1712, x17, x15, 1712, x18)

inst_1485:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x1cea69 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x1cea69 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d9cea69; op2val:0xbd9cea69; valaddr_reg:x16; val_offset:1720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1720, x17, x15, 1720, x18)

inst_1486:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7836ad and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7836ad and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e7836ad; op2val:0xbe7836ad; valaddr_reg:x16; val_offset:1728; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1728, x17, x15, 1728, x18)

inst_1487:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7836ad and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7836ad and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e7836ad; op2val:0xbe7836ad; valaddr_reg:x16; val_offset:1736; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1736, x17, x15, 1736, x18)

inst_1488:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7836ad and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7836ad and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e7836ad; op2val:0xbe7836ad; valaddr_reg:x16; val_offset:1744; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1744, x17, x15, 1744, x18)

inst_1489:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7836ad and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7836ad and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e7836ad; op2val:0xbe7836ad; valaddr_reg:x16; val_offset:1752; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1752, x17, x15, 1752, x18)

inst_1490:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7836ad and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7836ad and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e7836ad; op2val:0xbe7836ad; valaddr_reg:x16; val_offset:1760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1760, x17, x15, 1760, x18)

inst_1491:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x060210 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x060210 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f060210; op2val:0xbf060210; valaddr_reg:x16; val_offset:1768; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1768, x17, x15, 1768, x18)

inst_1492:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x060210 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x060210 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f060210; op2val:0xbf060210; valaddr_reg:x16; val_offset:1776; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1776, x17, x15, 1776, x18)

inst_1493:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x060210 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x060210 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f060210; op2val:0xbf060210; valaddr_reg:x16; val_offset:1784; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1784, x17, x15, 1784, x18)

inst_1494:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x060210 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x060210 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f060210; op2val:0xbf060210; valaddr_reg:x16; val_offset:1792; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1792, x17, x15, 1792, x18)

inst_1495:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x060210 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x060210 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f060210; op2val:0xbf060210; valaddr_reg:x16; val_offset:1800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1800, x17, x15, 1800, x18)

inst_1496:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x464298 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x464298 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec64298; op2val:0xbec64298; valaddr_reg:x16; val_offset:1808; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1808, x17, x15, 1808, x18)

inst_1497:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x464298 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x464298 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec64298; op2val:0xbec64298; valaddr_reg:x16; val_offset:1816; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1816, x17, x15, 1816, x18)

inst_1498:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x464298 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x464298 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec64298; op2val:0xbec64298; valaddr_reg:x16; val_offset:1824; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1824, x17, x15, 1824, x18)

inst_1499:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x464298 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x464298 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec64298; op2val:0xbec64298; valaddr_reg:x16; val_offset:1832; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1832, x17, x15, 1832, x18)

inst_1500:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x464298 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x464298 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec64298; op2val:0xbec64298; valaddr_reg:x16; val_offset:1840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1840, x17, x15, 1840, x18)

inst_1501:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4f840c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4f840c and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4f840c; op2val:0xbf4f840c; valaddr_reg:x16; val_offset:1848; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1848, x17, x15, 1848, x18)

inst_1502:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4f840c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4f840c and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4f840c; op2val:0xbf4f840c; valaddr_reg:x16; val_offset:1856; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1856, x17, x15, 1856, x18)

inst_1503:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4f840c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4f840c and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4f840c; op2val:0xbf4f840c; valaddr_reg:x16; val_offset:1864; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1864, x17, x15, 1864, x18)

inst_1504:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4f840c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4f840c and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4f840c; op2val:0xbf4f840c; valaddr_reg:x16; val_offset:1872; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1872, x17, x15, 1872, x18)

inst_1505:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4f840c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4f840c and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4f840c; op2val:0xbf4f840c; valaddr_reg:x16; val_offset:1880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1880, x17, x15, 1880, x18)

inst_1506:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x594445 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x594445 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed94445; op2val:0xbed94445; valaddr_reg:x16; val_offset:1888; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1888, x17, x15, 1888, x18)

inst_1507:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x594445 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x594445 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed94445; op2val:0xbed94445; valaddr_reg:x16; val_offset:1896; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1896, x17, x15, 1896, x18)

inst_1508:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x594445 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x594445 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed94445; op2val:0xbed94445; valaddr_reg:x16; val_offset:1904; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1904, x17, x15, 1904, x18)

inst_1509:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x594445 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x594445 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed94445; op2val:0xbed94445; valaddr_reg:x16; val_offset:1912; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1912, x17, x15, 1912, x18)

inst_1510:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x594445 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x594445 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed94445; op2val:0xbed94445; valaddr_reg:x16; val_offset:1920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1920, x17, x15, 1920, x18)

inst_1511:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4eb37d and fs2 == 1 and fe2 == 0x7d and fm2 == 0x4eb37d and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eceb37d; op2val:0xbeceb37d; valaddr_reg:x16; val_offset:1928; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1928, x17, x15, 1928, x18)

inst_1512:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4eb37d and fs2 == 1 and fe2 == 0x7d and fm2 == 0x4eb37d and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eceb37d; op2val:0xbeceb37d; valaddr_reg:x16; val_offset:1936; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1936, x17, x15, 1936, x18)

inst_1513:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4eb37d and fs2 == 1 and fe2 == 0x7d and fm2 == 0x4eb37d and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eceb37d; op2val:0xbeceb37d; valaddr_reg:x16; val_offset:1944; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1944, x17, x15, 1944, x18)

inst_1514:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4eb37d and fs2 == 1 and fe2 == 0x7d and fm2 == 0x4eb37d and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eceb37d; op2val:0xbeceb37d; valaddr_reg:x16; val_offset:1952; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1952, x17, x15, 1952, x18)

inst_1515:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4eb37d and fs2 == 1 and fe2 == 0x7d and fm2 == 0x4eb37d and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eceb37d; op2val:0xbeceb37d; valaddr_reg:x16; val_offset:1960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1960, x17, x15, 1960, x18)

inst_1516:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5323db and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5323db and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed323db; op2val:0xbed323db; valaddr_reg:x16; val_offset:1968; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1968, x17, x15, 1968, x18)

inst_1517:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5323db and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5323db and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed323db; op2val:0xbed323db; valaddr_reg:x16; val_offset:1976; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1976, x17, x15, 1976, x18)

inst_1518:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5323db and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5323db and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed323db; op2val:0xbed323db; valaddr_reg:x16; val_offset:1984; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1984, x17, x15, 1984, x18)

inst_1519:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5323db and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5323db and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed323db; op2val:0xbed323db; valaddr_reg:x16; val_offset:1992; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1992, x17, x15, 1992, x18)

inst_1520:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5323db and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5323db and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed323db; op2val:0xbed323db; valaddr_reg:x16; val_offset:2000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 2000, x17, x15, 2000, x18)

inst_1521:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x141e08 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x141e08 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d141e08; op2val:0xbd141e08; valaddr_reg:x16; val_offset:2008; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 2008, x17, x15, 2008, x18)

inst_1522:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x141e08 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x141e08 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d141e08; op2val:0xbd141e08; valaddr_reg:x16; val_offset:2016; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 2016, x17, x15, 2016, x18)

inst_1523:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x141e08 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x141e08 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d141e08; op2val:0xbd141e08; valaddr_reg:x16; val_offset:2024; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_7)

inst_1524:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x141e08 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x141e08 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d141e08; op2val:0xbd141e08; valaddr_reg:x16; val_offset:0; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 0, x17, x15, 0, x18)

inst_1525:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x141e08 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x141e08 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d141e08; op2val:0xbd141e08; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 8, x17, x15, 8, x18)

inst_1526:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x3dfc66 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x3dfc66 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e3dfc66; op2val:0xbe3dfc66; valaddr_reg:x16; val_offset:16; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 16, x17, x15, 16, x18)

inst_1527:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x3dfc66 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x3dfc66 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e3dfc66; op2val:0xbe3dfc66; valaddr_reg:x16; val_offset:24; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 24, x17, x15, 24, x18)

inst_1528:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x3dfc66 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x3dfc66 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e3dfc66; op2val:0xbe3dfc66; valaddr_reg:x16; val_offset:32; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 32, x17, x15, 32, x18)

inst_1529:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x3dfc66 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x3dfc66 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e3dfc66; op2val:0xbe3dfc66; valaddr_reg:x16; val_offset:40; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 40, x17, x15, 40, x18)

inst_1530:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x3dfc66 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x3dfc66 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e3dfc66; op2val:0xbe3dfc66; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_1531:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x163d95 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x163d95 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e963d95; op2val:0xbe963d95; valaddr_reg:x16; val_offset:56; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 56, x17, x15, 56, x18)

inst_1532:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x163d95 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x163d95 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e963d95; op2val:0xbe963d95; valaddr_reg:x16; val_offset:64; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 64, x17, x15, 64, x18)

inst_1533:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x163d95 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x163d95 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e963d95; op2val:0xbe963d95; valaddr_reg:x16; val_offset:72; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 72, x17, x15, 72, x18)

inst_1534:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x163d95 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x163d95 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e963d95; op2val:0xbe963d95; valaddr_reg:x16; val_offset:80; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 80, x17, x15, 80, x18)

inst_1535:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x163d95 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x163d95 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e963d95; op2val:0xbe963d95; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 88, x17, x15, 88, x18)

inst_1536:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6414c8 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6414c8 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6414c8; op2val:0xbf6414c8; valaddr_reg:x16; val_offset:96; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 96, x17, x15, 96, x18)

inst_1537:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6414c8 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6414c8 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6414c8; op2val:0xbf6414c8; valaddr_reg:x16; val_offset:104; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 104, x17, x15, 104, x18)

inst_1538:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6414c8 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6414c8 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6414c8; op2val:0xbf6414c8; valaddr_reg:x16; val_offset:112; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 112, x17, x15, 112, x18)

inst_1539:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6414c8 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6414c8 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6414c8; op2val:0xbf6414c8; valaddr_reg:x16; val_offset:120; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 120, x17, x15, 120, x18)

inst_1540:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6414c8 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6414c8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6414c8; op2val:0xbf6414c8; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_1541:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7bef34 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7bef34 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efbef34; op2val:0xbefbef34; valaddr_reg:x16; val_offset:136; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 136, x17, x15, 136, x18)

inst_1542:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7bef34 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7bef34 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efbef34; op2val:0xbefbef34; valaddr_reg:x16; val_offset:144; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 144, x17, x15, 144, x18)

inst_1543:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7bef34 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7bef34 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efbef34; op2val:0xbefbef34; valaddr_reg:x16; val_offset:152; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 152, x17, x15, 152, x18)

inst_1544:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7bef34 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7bef34 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efbef34; op2val:0xbefbef34; valaddr_reg:x16; val_offset:160; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 160, x17, x15, 160, x18)

inst_1545:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7bef34 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7bef34 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efbef34; op2val:0xbefbef34; valaddr_reg:x16; val_offset:168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 168, x17, x15, 168, x18)

inst_1546:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6b67e7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6b67e7 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6b67e7; op2val:0xbf6b67e7; valaddr_reg:x16; val_offset:176; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 176, x17, x15, 176, x18)

inst_1547:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6b67e7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6b67e7 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6b67e7; op2val:0xbf6b67e7; valaddr_reg:x16; val_offset:184; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 184, x17, x15, 184, x18)

inst_1548:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6b67e7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6b67e7 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6b67e7; op2val:0xbf6b67e7; valaddr_reg:x16; val_offset:192; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 192, x17, x15, 192, x18)

inst_1549:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6b67e7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6b67e7 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6b67e7; op2val:0xbf6b67e7; valaddr_reg:x16; val_offset:200; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 200, x17, x15, 200, x18)

inst_1550:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6b67e7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6b67e7 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6b67e7; op2val:0xbf6b67e7; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_1551:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x498b52 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x498b52 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e498b52; op2val:0xbe498b52; valaddr_reg:x16; val_offset:216; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 216, x17, x15, 216, x18)

inst_1552:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x498b52 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x498b52 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e498b52; op2val:0xbe498b52; valaddr_reg:x16; val_offset:224; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 224, x17, x15, 224, x18)

inst_1553:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x498b52 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x498b52 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e498b52; op2val:0xbe498b52; valaddr_reg:x16; val_offset:232; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 232, x17, x15, 232, x18)

inst_1554:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x498b52 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x498b52 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e498b52; op2val:0xbe498b52; valaddr_reg:x16; val_offset:240; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 240, x17, x15, 240, x18)

inst_1555:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x498b52 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x498b52 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e498b52; op2val:0xbe498b52; valaddr_reg:x16; val_offset:248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 248, x17, x15, 248, x18)

inst_1556:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x42ea11 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x42ea11 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f42ea11; op2val:0xbf42ea11; valaddr_reg:x16; val_offset:256; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 256, x17, x15, 256, x18)

inst_1557:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x42ea11 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x42ea11 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f42ea11; op2val:0xbf42ea11; valaddr_reg:x16; val_offset:264; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 264, x17, x15, 264, x18)

inst_1558:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x42ea11 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x42ea11 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f42ea11; op2val:0xbf42ea11; valaddr_reg:x16; val_offset:272; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 272, x17, x15, 272, x18)

inst_1559:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x42ea11 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x42ea11 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f42ea11; op2val:0xbf42ea11; valaddr_reg:x16; val_offset:280; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 280, x17, x15, 280, x18)

inst_1560:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x42ea11 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x42ea11 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f42ea11; op2val:0xbf42ea11; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_1561:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4f163a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4f163a and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4f163a; op2val:0xbf4f163a; valaddr_reg:x16; val_offset:296; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 296, x17, x15, 296, x18)

inst_1562:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4f163a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4f163a and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4f163a; op2val:0xbf4f163a; valaddr_reg:x16; val_offset:304; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 304, x17, x15, 304, x18)

inst_1563:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4f163a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4f163a and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4f163a; op2val:0xbf4f163a; valaddr_reg:x16; val_offset:312; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 312, x17, x15, 312, x18)

inst_1564:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4f163a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4f163a and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4f163a; op2val:0xbf4f163a; valaddr_reg:x16; val_offset:320; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 320, x17, x15, 320, x18)

inst_1565:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4f163a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4f163a and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4f163a; op2val:0xbf4f163a; valaddr_reg:x16; val_offset:328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 328, x17, x15, 328, x18)

inst_1566:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2cbf68 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2cbf68 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2cbf68; op2val:0xbf2cbf68; valaddr_reg:x16; val_offset:336; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 336, x17, x15, 336, x18)

inst_1567:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2cbf68 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2cbf68 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2cbf68; op2val:0xbf2cbf68; valaddr_reg:x16; val_offset:344; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 344, x17, x15, 344, x18)

inst_1568:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2cbf68 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2cbf68 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2cbf68; op2val:0xbf2cbf68; valaddr_reg:x16; val_offset:352; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 352, x17, x15, 352, x18)

inst_1569:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2cbf68 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2cbf68 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2cbf68; op2val:0xbf2cbf68; valaddr_reg:x16; val_offset:360; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 360, x17, x15, 360, x18)

inst_1570:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2cbf68 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2cbf68 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2cbf68; op2val:0xbf2cbf68; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_1571:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x079323 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x079323 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e079323; op2val:0xbe079323; valaddr_reg:x16; val_offset:376; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 376, x17, x15, 376, x18)

inst_1572:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x079323 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x079323 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e079323; op2val:0xbe079323; valaddr_reg:x16; val_offset:384; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 384, x17, x15, 384, x18)

inst_1573:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x079323 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x079323 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e079323; op2val:0xbe079323; valaddr_reg:x16; val_offset:392; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 392, x17, x15, 392, x18)

inst_1574:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x079323 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x079323 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e079323; op2val:0xbe079323; valaddr_reg:x16; val_offset:400; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 400, x17, x15, 400, x18)

inst_1575:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x079323 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x079323 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e079323; op2val:0xbe079323; valaddr_reg:x16; val_offset:408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 408, x17, x15, 408, x18)

inst_1576:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7fb51a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fb51a and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7fb51a; op2val:0xbf7fb51a; valaddr_reg:x16; val_offset:416; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 416, x17, x15, 416, x18)

inst_1577:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7fb51a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fb51a and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7fb51a; op2val:0xbf7fb51a; valaddr_reg:x16; val_offset:424; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 424, x17, x15, 424, x18)

inst_1578:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7fb51a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fb51a and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7fb51a; op2val:0xbf7fb51a; valaddr_reg:x16; val_offset:432; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 432, x17, x15, 432, x18)

inst_1579:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7fb51a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fb51a and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7fb51a; op2val:0xbf7fb51a; valaddr_reg:x16; val_offset:440; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 440, x17, x15, 440, x18)

inst_1580:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7fb51a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fb51a and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7fb51a; op2val:0xbf7fb51a; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_1581:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x335bd6 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x335bd6 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e335bd6; op2val:0xbe335bd6; valaddr_reg:x16; val_offset:456; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 456, x17, x15, 456, x18)

inst_1582:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x335bd6 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x335bd6 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e335bd6; op2val:0xbe335bd6; valaddr_reg:x16; val_offset:464; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 464, x17, x15, 464, x18)

inst_1583:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x335bd6 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x335bd6 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e335bd6; op2val:0xbe335bd6; valaddr_reg:x16; val_offset:472; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 472, x17, x15, 472, x18)

inst_1584:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x335bd6 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x335bd6 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e335bd6; op2val:0xbe335bd6; valaddr_reg:x16; val_offset:480; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 480, x17, x15, 480, x18)

inst_1585:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x335bd6 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x335bd6 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e335bd6; op2val:0xbe335bd6; valaddr_reg:x16; val_offset:488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 488, x17, x15, 488, x18)

inst_1586:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0f82de and fs2 == 1 and fe2 == 0x7d and fm2 == 0x0f82de and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8f82de; op2val:0xbe8f82de; valaddr_reg:x16; val_offset:496; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 496, x17, x15, 496, x18)

inst_1587:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0f82de and fs2 == 1 and fe2 == 0x7d and fm2 == 0x0f82de and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8f82de; op2val:0xbe8f82de; valaddr_reg:x16; val_offset:504; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 504, x17, x15, 504, x18)

inst_1588:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0f82de and fs2 == 1 and fe2 == 0x7d and fm2 == 0x0f82de and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8f82de; op2val:0xbe8f82de; valaddr_reg:x16; val_offset:512; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 512, x17, x15, 512, x18)

inst_1589:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0f82de and fs2 == 1 and fe2 == 0x7d and fm2 == 0x0f82de and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8f82de; op2val:0xbe8f82de; valaddr_reg:x16; val_offset:520; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 520, x17, x15, 520, x18)

inst_1590:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0f82de and fs2 == 1 and fe2 == 0x7d and fm2 == 0x0f82de and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8f82de; op2val:0xbe8f82de; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_1591:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6710e2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x6710e2 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ee710e2; op2val:0xbee710e2; valaddr_reg:x16; val_offset:536; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 536, x17, x15, 536, x18)

inst_1592:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6710e2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x6710e2 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ee710e2; op2val:0xbee710e2; valaddr_reg:x16; val_offset:544; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 544, x17, x15, 544, x18)

inst_1593:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6710e2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x6710e2 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ee710e2; op2val:0xbee710e2; valaddr_reg:x16; val_offset:552; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 552, x17, x15, 552, x18)

inst_1594:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6710e2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x6710e2 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ee710e2; op2val:0xbee710e2; valaddr_reg:x16; val_offset:560; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 560, x17, x15, 560, x18)

inst_1595:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6710e2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x6710e2 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ee710e2; op2val:0xbee710e2; valaddr_reg:x16; val_offset:568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 568, x17, x15, 568, x18)

inst_1596:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3d5060 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3d5060 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3d5060; op2val:0xbf3d5060; valaddr_reg:x16; val_offset:576; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 576, x17, x15, 576, x18)

inst_1597:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3d5060 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3d5060 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3d5060; op2val:0xbf3d5060; valaddr_reg:x16; val_offset:584; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 584, x17, x15, 584, x18)

inst_1598:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3d5060 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3d5060 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3d5060; op2val:0xbf3d5060; valaddr_reg:x16; val_offset:592; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 592, x17, x15, 592, x18)

inst_1599:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3d5060 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3d5060 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3d5060; op2val:0xbf3d5060; valaddr_reg:x16; val_offset:600; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 600, x17, x15, 600, x18)

inst_1600:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3d5060 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3d5060 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3d5060; op2val:0xbf3d5060; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 608, x17, x15, 608, x18)

inst_1601:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x05e2af and fs2 == 1 and fe2 == 0x7e and fm2 == 0x05e2af and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f05e2af; op2val:0xbf05e2af; valaddr_reg:x16; val_offset:616; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 616, x17, x15, 616, x18)

inst_1602:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x05e2af and fs2 == 1 and fe2 == 0x7e and fm2 == 0x05e2af and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f05e2af; op2val:0xbf05e2af; valaddr_reg:x16; val_offset:624; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 624, x17, x15, 624, x18)

inst_1603:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x05e2af and fs2 == 1 and fe2 == 0x7e and fm2 == 0x05e2af and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f05e2af; op2val:0xbf05e2af; valaddr_reg:x16; val_offset:632; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 632, x17, x15, 632, x18)

inst_1604:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x05e2af and fs2 == 1 and fe2 == 0x7e and fm2 == 0x05e2af and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f05e2af; op2val:0xbf05e2af; valaddr_reg:x16; val_offset:640; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 640, x17, x15, 640, x18)

inst_1605:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x05e2af and fs2 == 1 and fe2 == 0x7e and fm2 == 0x05e2af and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f05e2af; op2val:0xbf05e2af; valaddr_reg:x16; val_offset:648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 648, x17, x15, 648, x18)

inst_1606:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x322742 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x322742 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db22742; op2val:0xbdb22742; valaddr_reg:x16; val_offset:656; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 656, x17, x15, 656, x18)

inst_1607:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x322742 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x322742 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db22742; op2val:0xbdb22742; valaddr_reg:x16; val_offset:664; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 664, x17, x15, 664, x18)

inst_1608:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x322742 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x322742 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db22742; op2val:0xbdb22742; valaddr_reg:x16; val_offset:672; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 672, x17, x15, 672, x18)

inst_1609:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x322742 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x322742 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db22742; op2val:0xbdb22742; valaddr_reg:x16; val_offset:680; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 680, x17, x15, 680, x18)

inst_1610:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x322742 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x322742 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db22742; op2val:0xbdb22742; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 688, x17, x15, 688, x18)

inst_1611:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x10da1d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x10da1d and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f10da1d; op2val:0xbf10da1d; valaddr_reg:x16; val_offset:696; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 696, x17, x15, 696, x18)

inst_1612:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x10da1d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x10da1d and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f10da1d; op2val:0xbf10da1d; valaddr_reg:x16; val_offset:704; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 704, x17, x15, 704, x18)

inst_1613:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x10da1d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x10da1d and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f10da1d; op2val:0xbf10da1d; valaddr_reg:x16; val_offset:712; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 712, x17, x15, 712, x18)

inst_1614:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x10da1d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x10da1d and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f10da1d; op2val:0xbf10da1d; valaddr_reg:x16; val_offset:720; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 720, x17, x15, 720, x18)

inst_1615:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x10da1d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x10da1d and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f10da1d; op2val:0xbf10da1d; valaddr_reg:x16; val_offset:728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 728, x17, x15, 728, x18)

inst_1616:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0721a7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0721a7 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0721a7; op2val:0xbf0721a7; valaddr_reg:x16; val_offset:736; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 736, x17, x15, 736, x18)

inst_1617:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0721a7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0721a7 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0721a7; op2val:0xbf0721a7; valaddr_reg:x16; val_offset:744; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 744, x17, x15, 744, x18)

inst_1618:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0721a7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0721a7 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0721a7; op2val:0xbf0721a7; valaddr_reg:x16; val_offset:752; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 752, x17, x15, 752, x18)

inst_1619:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0721a7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0721a7 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0721a7; op2val:0xbf0721a7; valaddr_reg:x16; val_offset:760; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 760, x17, x15, 760, x18)

inst_1620:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0721a7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0721a7 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0721a7; op2val:0xbf0721a7; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 768, x17, x15, 768, x18)

inst_1621:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x4f2ddf and fs2 == 1 and fe2 == 0x7b and fm2 == 0x4f2ddf and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dcf2ddf; op2val:0xbdcf2ddf; valaddr_reg:x16; val_offset:776; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 776, x17, x15, 776, x18)

inst_1622:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x4f2ddf and fs2 == 1 and fe2 == 0x7b and fm2 == 0x4f2ddf and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dcf2ddf; op2val:0xbdcf2ddf; valaddr_reg:x16; val_offset:784; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 784, x17, x15, 784, x18)

inst_1623:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x4f2ddf and fs2 == 1 and fe2 == 0x7b and fm2 == 0x4f2ddf and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dcf2ddf; op2val:0xbdcf2ddf; valaddr_reg:x16; val_offset:792; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 792, x17, x15, 792, x18)

inst_1624:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x4f2ddf and fs2 == 1 and fe2 == 0x7b and fm2 == 0x4f2ddf and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dcf2ddf; op2val:0xbdcf2ddf; valaddr_reg:x16; val_offset:800; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 800, x17, x15, 800, x18)

inst_1625:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x4f2ddf and fs2 == 1 and fe2 == 0x7b and fm2 == 0x4f2ddf and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dcf2ddf; op2val:0xbdcf2ddf; valaddr_reg:x16; val_offset:808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 808, x17, x15, 808, x18)

inst_1626:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x309a2b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x309a2b and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f309a2b; op2val:0xbf309a2b; valaddr_reg:x16; val_offset:816; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 816, x17, x15, 816, x18)

inst_1627:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x309a2b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x309a2b and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f309a2b; op2val:0xbf309a2b; valaddr_reg:x16; val_offset:824; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 824, x17, x15, 824, x18)

inst_1628:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x309a2b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x309a2b and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f309a2b; op2val:0xbf309a2b; valaddr_reg:x16; val_offset:832; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 832, x17, x15, 832, x18)

inst_1629:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x309a2b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x309a2b and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f309a2b; op2val:0xbf309a2b; valaddr_reg:x16; val_offset:840; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 840, x17, x15, 840, x18)

inst_1630:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x309a2b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x309a2b and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f309a2b; op2val:0xbf309a2b; valaddr_reg:x16; val_offset:848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 848, x17, x15, 848, x18)

inst_1631:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x425669 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x425669 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e425669; op2val:0xbe425669; valaddr_reg:x16; val_offset:856; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 856, x17, x15, 856, x18)

inst_1632:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x425669 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x425669 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e425669; op2val:0xbe425669; valaddr_reg:x16; val_offset:864; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 864, x17, x15, 864, x18)

inst_1633:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x425669 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x425669 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e425669; op2val:0xbe425669; valaddr_reg:x16; val_offset:872; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 872, x17, x15, 872, x18)

inst_1634:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x425669 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x425669 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e425669; op2val:0xbe425669; valaddr_reg:x16; val_offset:880; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 880, x17, x15, 880, x18)

inst_1635:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x425669 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x425669 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e425669; op2val:0xbe425669; valaddr_reg:x16; val_offset:888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 888, x17, x15, 888, x18)

inst_1636:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x38d6f4 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x38d6f4 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db8d6f4; op2val:0xbdb8d6f4; valaddr_reg:x16; val_offset:896; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 896, x17, x15, 896, x18)

inst_1637:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x38d6f4 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x38d6f4 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db8d6f4; op2val:0xbdb8d6f4; valaddr_reg:x16; val_offset:904; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 904, x17, x15, 904, x18)

inst_1638:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x38d6f4 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x38d6f4 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db8d6f4; op2val:0xbdb8d6f4; valaddr_reg:x16; val_offset:912; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 912, x17, x15, 912, x18)

inst_1639:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x38d6f4 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x38d6f4 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db8d6f4; op2val:0xbdb8d6f4; valaddr_reg:x16; val_offset:920; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 920, x17, x15, 920, x18)

inst_1640:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x38d6f4 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x38d6f4 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db8d6f4; op2val:0xbdb8d6f4; valaddr_reg:x16; val_offset:928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 928, x17, x15, 928, x18)

inst_1641:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x436523 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x436523 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec36523; op2val:0xbec36523; valaddr_reg:x16; val_offset:936; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 936, x17, x15, 936, x18)

inst_1642:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x436523 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x436523 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec36523; op2val:0xbec36523; valaddr_reg:x16; val_offset:944; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 944, x17, x15, 944, x18)

inst_1643:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x436523 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x436523 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec36523; op2val:0xbec36523; valaddr_reg:x16; val_offset:952; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 952, x17, x15, 952, x18)

inst_1644:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x436523 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x436523 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec36523; op2val:0xbec36523; valaddr_reg:x16; val_offset:960; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 960, x17, x15, 960, x18)

inst_1645:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x436523 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x436523 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec36523; op2val:0xbec36523; valaddr_reg:x16; val_offset:968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 968, x17, x15, 968, x18)

inst_1646:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x37d979 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x37d979 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f37d979; op2val:0xbf37d979; valaddr_reg:x16; val_offset:976; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 976, x17, x15, 976, x18)

inst_1647:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x37d979 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x37d979 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f37d979; op2val:0xbf37d979; valaddr_reg:x16; val_offset:984; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 984, x17, x15, 984, x18)

inst_1648:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x37d979 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x37d979 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f37d979; op2val:0xbf37d979; valaddr_reg:x16; val_offset:992; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 992, x17, x15, 992, x18)

inst_1649:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x37d979 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x37d979 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f37d979; op2val:0xbf37d979; valaddr_reg:x16; val_offset:1000; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1000, x17, x15, 1000, x18)

inst_1650:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x37d979 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x37d979 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f37d979; op2val:0xbf37d979; valaddr_reg:x16; val_offset:1008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1008, x17, x15, 1008, x18)

inst_1651:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x3c2f4f and fs2 == 1 and fe2 == 0x7b and fm2 == 0x3c2f4f and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dbc2f4f; op2val:0xbdbc2f4f; valaddr_reg:x16; val_offset:1016; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1016, x17, x15, 1016, x18)

inst_1652:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x3c2f4f and fs2 == 1 and fe2 == 0x7b and fm2 == 0x3c2f4f and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dbc2f4f; op2val:0xbdbc2f4f; valaddr_reg:x16; val_offset:1024; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1024, x17, x15, 1024, x18)

inst_1653:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x3c2f4f and fs2 == 1 and fe2 == 0x7b and fm2 == 0x3c2f4f and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dbc2f4f; op2val:0xbdbc2f4f; valaddr_reg:x16; val_offset:1032; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1032, x17, x15, 1032, x18)

inst_1654:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x3c2f4f and fs2 == 1 and fe2 == 0x7b and fm2 == 0x3c2f4f and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dbc2f4f; op2val:0xbdbc2f4f; valaddr_reg:x16; val_offset:1040; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1040, x17, x15, 1040, x18)

inst_1655:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x3c2f4f and fs2 == 1 and fe2 == 0x7b and fm2 == 0x3c2f4f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dbc2f4f; op2val:0xbdbc2f4f; valaddr_reg:x16; val_offset:1048; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1048, x17, x15, 1048, x18)

inst_1656:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x05fdbd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x05fdbd and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f05fdbd; op2val:0xbf05fdbd; valaddr_reg:x16; val_offset:1056; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1056, x17, x15, 1056, x18)

inst_1657:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x05fdbd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x05fdbd and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f05fdbd; op2val:0xbf05fdbd; valaddr_reg:x16; val_offset:1064; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1064, x17, x15, 1064, x18)

inst_1658:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x05fdbd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x05fdbd and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f05fdbd; op2val:0xbf05fdbd; valaddr_reg:x16; val_offset:1072; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1072, x17, x15, 1072, x18)

inst_1659:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x05fdbd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x05fdbd and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f05fdbd; op2val:0xbf05fdbd; valaddr_reg:x16; val_offset:1080; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1080, x17, x15, 1080, x18)

inst_1660:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x05fdbd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x05fdbd and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f05fdbd; op2val:0xbf05fdbd; valaddr_reg:x16; val_offset:1088; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1088, x17, x15, 1088, x18)

inst_1661:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5d63e7 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x5d63e7 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e5d63e7; op2val:0xbe5d63e7; valaddr_reg:x16; val_offset:1096; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1096, x17, x15, 1096, x18)

inst_1662:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5d63e7 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x5d63e7 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e5d63e7; op2val:0xbe5d63e7; valaddr_reg:x16; val_offset:1104; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1104, x17, x15, 1104, x18)

inst_1663:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5d63e7 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x5d63e7 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e5d63e7; op2val:0xbe5d63e7; valaddr_reg:x16; val_offset:1112; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1112, x17, x15, 1112, x18)

inst_1664:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5d63e7 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x5d63e7 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e5d63e7; op2val:0xbe5d63e7; valaddr_reg:x16; val_offset:1120; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1120, x17, x15, 1120, x18)

inst_1665:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5d63e7 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x5d63e7 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e5d63e7; op2val:0xbe5d63e7; valaddr_reg:x16; val_offset:1128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1128, x17, x15, 1128, x18)

inst_1666:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7a3a33 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7a3a33 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efa3a33; op2val:0xbefa3a33; valaddr_reg:x16; val_offset:1136; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1136, x17, x15, 1136, x18)

inst_1667:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7a3a33 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7a3a33 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efa3a33; op2val:0xbefa3a33; valaddr_reg:x16; val_offset:1144; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1144, x17, x15, 1144, x18)

inst_1668:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7a3a33 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7a3a33 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efa3a33; op2val:0xbefa3a33; valaddr_reg:x16; val_offset:1152; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1152, x17, x15, 1152, x18)

inst_1669:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7a3a33 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7a3a33 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efa3a33; op2val:0xbefa3a33; valaddr_reg:x16; val_offset:1160; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1160, x17, x15, 1160, x18)

inst_1670:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7a3a33 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7a3a33 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efa3a33; op2val:0xbefa3a33; valaddr_reg:x16; val_offset:1168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1168, x17, x15, 1168, x18)

inst_1671:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x14556b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x14556b and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f14556b; op2val:0xbf14556b; valaddr_reg:x16; val_offset:1176; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1176, x17, x15, 1176, x18)

inst_1672:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x14556b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x14556b and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f14556b; op2val:0xbf14556b; valaddr_reg:x16; val_offset:1184; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1184, x17, x15, 1184, x18)

inst_1673:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x14556b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x14556b and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f14556b; op2val:0xbf14556b; valaddr_reg:x16; val_offset:1192; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1192, x17, x15, 1192, x18)

inst_1674:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x14556b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x14556b and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f14556b; op2val:0xbf14556b; valaddr_reg:x16; val_offset:1200; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1200, x17, x15, 1200, x18)

inst_1675:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x14556b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x14556b and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f14556b; op2val:0xbf14556b; valaddr_reg:x16; val_offset:1208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1208, x17, x15, 1208, x18)

inst_1676:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x1f4fe0 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x1f4fe0 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e1f4fe0; op2val:0xbe1f4fe0; valaddr_reg:x16; val_offset:1216; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1216, x17, x15, 1216, x18)

inst_1677:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x1f4fe0 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x1f4fe0 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e1f4fe0; op2val:0xbe1f4fe0; valaddr_reg:x16; val_offset:1224; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1224, x17, x15, 1224, x18)

inst_1678:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x1f4fe0 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x1f4fe0 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e1f4fe0; op2val:0xbe1f4fe0; valaddr_reg:x16; val_offset:1232; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1232, x17, x15, 1232, x18)

inst_1679:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x1f4fe0 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x1f4fe0 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e1f4fe0; op2val:0xbe1f4fe0; valaddr_reg:x16; val_offset:1240; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1240, x17, x15, 1240, x18)

inst_1680:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x1f4fe0 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x1f4fe0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e1f4fe0; op2val:0xbe1f4fe0; valaddr_reg:x16; val_offset:1248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1248, x17, x15, 1248, x18)

inst_1681:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x45f7d6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x45f7d6 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f45f7d6; op2val:0xbf45f7d6; valaddr_reg:x16; val_offset:1256; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1256, x17, x15, 1256, x18)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
test_fp:
.word 0x3e1f4fe0
.word 0x3e1f4fe0
.word 0x3f45f7d6
.word 0xbf45f7d6
.word 0x3f45f7d6
.word 0xbf45f7d6
.word 0x3f45f7d6
.word 0xbf45f7d6
.word 0x3f45f7d6
.word 0x3f45f7d6
.word 0x3f45f7d6
.word 0xbf45f7d6
.word 0x3e99c2c8
.word 0xbe99c2c8
.word 0x3e99c2c8
.word 0xbe99c2c8
.word 0x3e99c2c8
.word 0xbe99c2c8
.word 0x3e99c2c8
.word 0xbe99c2c8
.word 0x3e99c2c8
.word 0xbe99c2c8
.word 0x39a515ba
.word 0xb9a515ba
.word 0x39a515ba
.word 0xb9a515ba
.word 0x39a515ba
.word 0xb9a515ba
.word 0x39a515ba
.word 0xb9a515ba
.word 0x39a515ba
.word 0xb9a515ba
.word 0x3f75755e
.word 0xbf75755e
.word 0x3f75755e
.word 0xbf75755e
.word 0x3f75755e
.word 0xbf75755e
.word 0x3f75755e
.word 0xbf75755e
.word 0x3f75755e
.word 0xbf75755e
.word 0x3ea977d6
.word 0xbea977d6
.word 0x3ea977d6
.word 0xbea977d6
.word 0x3ea977d6
.word 0xbea977d6
.word 0x3ea977d6
.word 0xbea977d6
.word 0x3ea977d6
.word 0xbea977d6
.word 0x3ea09dbe
.word 0xbea09dbe
.word 0x3ea09dbe
.word 0xbea09dbe
.word 0x3ea09dbe
.word 0xbea09dbe
.word 0x3ea09dbe
.word 0xbea09dbe
.word 0x3ea09dbe
.word 0xbea09dbe
.word 0x3f6efcaf
.word 0xbf6efcaf
.word 0x3f6efcaf
.word 0xbf6efcaf
.word 0x3f6efcaf
.word 0xbf6efcaf
.word 0x3f6efcaf
.word 0xbf6efcaf
.word 0x3f6efcaf
.word 0xbf6efcaf
.word 0x3f7d696c
.word 0xbf7d696c
.word 0x3f7d696c
.word 0xbf7d696c
.word 0x3f7d696c
.word 0xbf7d696c
.word 0x3f7d696c
.word 0xbf7d696c
.word 0x3f7d696c
.word 0xbf7d696c
.word 0x3f0749e2
.word 0xbf0749e2
.word 0x3f0749e2
.word 0xbf0749e2
.word 0x3f0749e2
.word 0xbf0749e2
.word 0x3f0749e2
.word 0xbf0749e2
.word 0x3f0749e2
.word 0xbf0749e2
.word 0x3ec1f9a6
.word 0xbec1f9a6
.word 0x3ec1f9a6
.word 0xbec1f9a6
.word 0x3ec1f9a6
.word 0xbec1f9a6
.word 0x3ec1f9a6
.word 0xbec1f9a6
.word 0x3ec1f9a6
.word 0xbec1f9a6
.word 0x3e8273e0
.word 0xbe8273e0
.word 0x3e8273e0
.word 0xbe8273e0
.word 0x3e8273e0
.word 0xbe8273e0
.word 0x3e8273e0
.word 0xbe8273e0
.word 0x3e8273e0
.word 0xbe8273e0
.word 0x3f709548
.word 0xbf709548
.word 0x3f709548
.word 0xbf709548
.word 0x3f709548
.word 0xbf709548
.word 0x3f709548
.word 0xbf709548
.word 0x3f709548
.word 0xbf709548
.word 0x3f2e87cf
.word 0xbf2e87cf
.word 0x3f2e87cf
.word 0xbf2e87cf
.word 0x3f2e87cf
.word 0xbf2e87cf
.word 0x3f2e87cf
.word 0xbf2e87cf
.word 0x3f2e87cf
.word 0xbf2e87cf
.word 0x3f05f5fd
.word 0xbf05f5fd
.word 0x3f05f5fd
.word 0xbf05f5fd
.word 0x3f05f5fd
.word 0xbf05f5fd
.word 0x3f05f5fd
.word 0xbf05f5fd
.word 0x3f05f5fd
.word 0xbf05f5fd
.word 0x3f06ff63
.word 0xbf06ff63
.word 0x3f06ff63
.word 0xbf06ff63
.word 0x3f06ff63
.word 0xbf06ff63
.word 0x3f06ff63
.word 0xbf06ff63
.word 0x3f06ff63
.word 0xbf06ff63
.word 0x3ea9da09
.word 0xbea9da09
.word 0x3ea9da09
.word 0xbea9da09
.word 0x3ea9da09
.word 0xbea9da09
.word 0x3ea9da09
.word 0xbea9da09
.word 0x3ea9da09
.word 0xbea9da09
.word 0x3ed16042
.word 0xbed16042
.word 0x3ed16042
.word 0xbed16042
.word 0x3ed16042
.word 0xbed16042
.word 0x3ed16042
.word 0xbed16042
.word 0x3ed16042
.word 0xbed16042
.word 0x3e9b1ea1
.word 0xbe9b1ea1
.word 0x3e9b1ea1
.word 0xbe9b1ea1
.word 0x3e9b1ea1
.word 0xbe9b1ea1
.word 0x3e9b1ea1
.word 0xbe9b1ea1
.word 0x3e9b1ea1
.word 0xbe9b1ea1
.word 0x3ebe0c7f
.word 0xbebe0c7f
.word 0x3ebe0c7f
.word 0xbebe0c7f
.word 0x3ebe0c7f
.word 0xbebe0c7f
.word 0x3ebe0c7f
.word 0xbebe0c7f
.word 0x3ebe0c7f
.word 0xbebe0c7f
.word 0x3f352ed4
.word 0xbf352ed4
.word 0x3f352ed4
.word 0xbf352ed4
.word 0x3f352ed4
.word 0xbf352ed4
.word 0x3f352ed4
.word 0xbf352ed4
.word 0x3f352ed4
.word 0xbf352ed4
.word 0x3e62c3b8
.word 0xbe62c3b8
.word 0x3e62c3b8
.word 0xbe62c3b8
.word 0x3e62c3b8
.word 0xbe62c3b8
.word 0x3e62c3b8
.word 0xbe62c3b8
.word 0x3e62c3b8
.word 0xbe62c3b8
.word 0x3ebb167e
.word 0xbebb167e
.word 0x3ebb167e
.word 0xbebb167e
.word 0x3ebb167e
.word 0xbebb167e
.word 0x3ebb167e
.word 0xbebb167e
.word 0x3ebb167e
.word 0xbebb167e
.word 0x3eefef82
.word 0xbeefef82
.word 0x3eefef82
.word 0xbeefef82
.word 0x3eefef82
.word 0xbeefef82
.word 0x3eefef82
.word 0xbeefef82
.word 0x3eefef82
.word 0xbeefef82
.word 0x3eda1f0e
.word 0xbeda1f0e
.word 0x3eda1f0e
.word 0xbeda1f0e
.word 0x3eda1f0e
.word 0xbeda1f0e
.word 0x3eda1f0e
.word 0xbeda1f0e
.word 0x3eda1f0e
.word 0xbeda1f0e
.word 0x3f35d6bf
.word 0xbf35d6bf
.word 0x3f35d6bf
.word 0xbf35d6bf
.word 0x3f35d6bf
.word 0xbf35d6bf
.word 0x3f35d6bf
.word 0xbf35d6bf
.word 0x3f35d6bf
.word 0xbf35d6bf
.word 0x3f562146
.word 0xbf562146
.word 0x3f562146
.word 0xbf562146
.word 0x3f562146
.word 0xbf562146
.word 0x3f562146
.word 0xbf562146
.word 0x3f562146
.word 0xbf562146
.word 0x3f403e73
.word 0xbf403e73
.word 0x3f403e73
.word 0xbf403e73
.word 0x3f403e73
.word 0xbf403e73
.word 0x3f403e73
.word 0xbf403e73
.word 0x3f403e73
.word 0xbf403e73
.word 0x3f28fcf1
.word 0xbf28fcf1
.word 0x3f28fcf1
.word 0xbf28fcf1
.word 0x3f28fcf1
.word 0xbf28fcf1
.word 0x3f28fcf1
.word 0xbf28fcf1
.word 0x3f28fcf1
.word 0xbf28fcf1
.word 0x3e54bff6
.word 0xbe54bff6
.word 0x3e54bff6
.word 0xbe54bff6
.word 0x3e54bff6
.word 0xbe54bff6
.word 0x3e54bff6
.word 0xbe54bff6
.word 0x3e54bff6
.word 0xbe54bff6
.word 0x3ecf266e
.word 0xbecf266e
.word 0x3ecf266e
.word 0xbecf266e
.word 0x3ecf266e
.word 0xbecf266e
.word 0x3ecf266e
.word 0xbecf266e
.word 0x3ecf266e
.word 0xbecf266e
.word 0x3e7aa6dc
.word 0xbe7aa6dc
.word 0x3e7aa6dc
.word 0xbe7aa6dc
.word 0x3e7aa6dc
.word 0xbe7aa6dc
.word 0x3e7aa6dc
.word 0xbe7aa6dc
.word 0x3e7aa6dc
.word 0xbe7aa6dc
.word 0x3f3f5513
.word 0xbf3f5513
.word 0x3f3f5513
.word 0xbf3f5513
.word 0x3f3f5513
.word 0xbf3f5513
.word 0x3f3f5513
.word 0xbf3f5513
.word 0x3f3f5513
.word 0xbf3f5513
.word 0x3f1a9058
.word 0xbf1a9058
.word 0x3f1a9058
.word 0xbf1a9058
.word 0x3f1a9058
.word 0xbf1a9058
.word 0x3f1a9058
.word 0xbf1a9058
.word 0x3f1a9058
.word 0xbf1a9058
.word 0x3ef2a2c5
.word 0xbef2a2c5
.word 0x3ef2a2c5
.word 0xbef2a2c5
.word 0x3ef2a2c5
.word 0xbef2a2c5
.word 0x3ef2a2c5
.word 0xbef2a2c5
.word 0x3ef2a2c5
.word 0xbef2a2c5
.word 0x3f759eb4
.word 0xbf759eb4
.word 0x3f759eb4
.word 0xbf759eb4
.word 0x3f759eb4
.word 0xbf759eb4
.word 0x3f759eb4
.word 0xbf759eb4
.word 0x3f759eb4
.word 0xbf759eb4
.word 0x3f61112d
.word 0xbf61112d
.word 0x3f61112d
.word 0xbf61112d
.word 0x3f61112d
.word 0xbf61112d
.word 0x3f61112d
.word 0xbf61112d
.word 0x3f61112d
.word 0xbf61112d
.word 0x3f384c20
.word 0xbf384c20
.word 0x3f384c20
.word 0xbf384c20
.word 0x3f384c20
.word 0xbf384c20
.word 0x3f384c20
.word 0xbf384c20
.word 0x3f384c20
.word 0xbf384c20
.word 0x3f4483e0
.word 0xbf4483e0
.word 0x3f4483e0
.word 0xbf4483e0
.word 0x3f4483e0
.word 0xbf4483e0
.word 0x3f4483e0
.word 0xbf4483e0
.word 0x3f4483e0
.word 0xbf4483e0
.word 0x3ea4c5c1
.word 0xbea4c5c1
.word 0x3ea4c5c1
.word 0xbea4c5c1
.word 0x3ea4c5c1
.word 0xbea4c5c1
.word 0x3ea4c5c1
.word 0xbea4c5c1
.word 0x3ea4c5c1
.word 0xbea4c5c1
.word 0x3e9660a0
.word 0xbe9660a0
.word 0x3e9660a0
.word 0xbe9660a0
.word 0x3e9660a0
.word 0xbe9660a0
.word 0x3e9660a0
.word 0xbe9660a0
.word 0x3e9660a0
.word 0xbe9660a0
.word 0x3ee8da7b
.word 0xbee8da7b
.word 0x3ee8da7b
.word 0xbee8da7b
.word 0x3ee8da7b
.word 0xbee8da7b
.word 0x3ee8da7b
.word 0xbee8da7b
.word 0x3ee8da7b
.word 0xbee8da7b
.word 0x3e6ceb24
.word 0xbe6ceb24
.word 0x3e6ceb24
.word 0xbe6ceb24
.word 0x3e6ceb24
.word 0xbe6ceb24
.word 0x3e6ceb24
.word 0xbe6ceb24
.word 0x3e6ceb24
.word 0xbe6ceb24
.word 0x517ed344
.word 0x54fe025a
.word 0x517ed344
.word 0x54fe025a
.word 0x517ed344
.word 0x54fe025a
.word 0x517ed344
.word 0x54fe025a
.word 0x517ed344
.word 0x54fe025a
.word 0x54b2f11f
.word 0x541a1dc2
.word 0x54b2f11f
.word 0x541a1dc2
.word 0x54b2f11f
.word 0x541a1dc2
.word 0x54b2f11f
.word 0x541a1dc2
.word 0x54b2f11f
.word 0x541a1dc2
.word 0x53d086fb
.word 0x54cbde42
.word 0x53d086fb
.word 0x54cbde42
.word 0x53d086fb
.word 0x54cbde42
.word 0x53d086fb
.word 0x54cbde42
.word 0x53d086fb
.word 0x54cbde42
.word 0x54a32653
.word 0x5439b35a
.word 0x54a32653
.word 0x5439b35a
.word 0x54a32653
.word 0x5439b35a
.word 0x54a32653
.word 0x5439b35a
.word 0x54a32653
.word 0x5439b35a
.word 0x5391fd36
.word 0x54db80b3
.word 0x5391fd36
.word 0x54db80b3
.word 0x5391fd36
.word 0x54db80b3
.word 0x5391fd36
.word 0x54db80b3
.word 0x5391fd36
.word 0x54db80b3
.word 0x54682a36
.word 0x548beae5
.word 0x54682a36
.word 0x548beae5
.word 0x54682a36
.word 0x548beae5
.word 0x54682a36
.word 0x548beae5
.word 0x54682a36
.word 0x548beae5
.word 0x545d09f2
.word 0x54917b07
.word 0x545d09f2
.word 0x54917b07
.word 0x545d09f2
.word 0x54917b07
.word 0x545d09f2
.word 0x54917b07
.word 0x545d09f2
.word 0x54917b07
.word 0x544c2c7c
.word 0x5499e9c2
.word 0x544c2c7c
.word 0x5499e9c2
.word 0x544c2c7c
.word 0x5499e9c2
.word 0x544c2c7c
.word 0x5499e9c2
.word 0x544c2c7c
.word 0x5499e9c2
.word 0x54cbb030
.word 0x53d13f40
.word 0x54cbb030
.word 0x53d13f40
.word 0x54cbb030
.word 0x53d13f40
.word 0x54cbb030
.word 0x53d13f40
.word 0x54cbb030
.word 0x53d13f40
.word 0x548ee4fd
.word 0x54623606
.word 0x548ee4fd
.word 0x54623606
.word 0x548ee4fd
.word 0x54623606
.word 0x548ee4fd
.word 0x54623606
.word 0x548ee4fd
.word 0x54623606
.word 0x54cbe88a
.word 0x53d05dd7
.word 0x54cbe88a
.word 0x53d05dd7
.word 0x54cbe88a
.word 0x53d05dd7
.word 0x54cbe88a
.word 0x53d05dd7
.word 0x54cbe88a
.word 0x53d05dd7
.word 0x5471182c
.word 0x548773ea
.word 0x5471182c
.word 0x548773ea
.word 0x5471182c
.word 0x548773ea
.word 0x5471182c
.word 0x548773ea
.word 0x5471182c
.word 0x548773ea
.word 0x53d0e2d3
.word 0x54cbc74b
.word 0x53d0e2d3
.word 0x54cbc74b
.word 0x53d0e2d3
.word 0x54cbc74b
.word 0x53d0e2d3
.word 0x54cbc74b
.word 0x53d0e2d3
.word 0x54cbc74b
.word 0x54ba6a09
.word 0x540b2bec
.word 0x54ba6a09
.word 0x540b2bec
.word 0x54ba6a09
.word 0x540b2bec
.word 0x54ba6a09
.word 0x540b2bec
.word 0x54ba6a09
.word 0x540b2bec
.word 0x54513775
.word 0x54976446
.word 0x54513775
.word 0x54976446
.word 0x54513775
.word 0x54976446
.word 0x54513775
.word 0x54976446
.word 0x54513775
.word 0x54976446
.word 0x54f2ed34
.word 0x52d12cc1
.word 0x54f2ed34
.word 0x52d12cc1
.word 0x54f2ed34
.word 0x52d12cc1
.word 0x54f2ed34
.word 0x52d12cc1
.word 0x54f2ed34
.word 0x52d12cc1
.word 0x5463be4a
.word 0x548e20db
.word 0x5463be4a
.word 0x548e20db
.word 0x5463be4a
.word 0x548e20db
.word 0x5463be4a
.word 0x548e20db
.word 0x5463be4a
.word 0x548e20db
.word 0x54a31035
.word 0x5439df96
.word 0x54a31035
.word 0x5439df96
.word 0x54a31035
.word 0x5439df96
.word 0x54a31035
.word 0x5439df96
.word 0x54a31035
.word 0x5439df96
.word 0x5391b2c2
.word 0x54db9350
.word 0x5391b2c2
.word 0x54db9350
.word 0x5391b2c2
.word 0x54db9350
.word 0x5391b2c2
.word 0x54db9350
.word 0x5391b2c2
.word 0x54db9350
.word 0x548cffbc
.word 0x54660089
.word 0x548cffbc
.word 0x54660089
.word 0x548cffbc
.word 0x54660089
.word 0x548cffbc
.word 0x54660089
.word 0x548cffbc
.word 0x54660089
.word 0x5315efba
.word 0x54ed4209
.word 0x5315efba
.word 0x54ed4209
.word 0x5315efba
.word 0x54ed4209
.word 0x5315efba
.word 0x54ed4209
.word 0x5315efba
.word 0x54ed4209
.word 0x522857ad
.word 0x54fabd43
.word 0x522857ad
.word 0x54fabd43
.word 0x522857ad
.word 0x54fabd43
.word 0x522857ad
.word 0x54fabd43
.word 0x522857ad
.word 0x54fabd43
.word 0x52bd7698
.word 0x54f42896
.word 0x52bd7698
.word 0x54f42896
.word 0x52bd7698
.word 0x54f42896
.word 0x52bd7698
.word 0x54f42896
.word 0x52bd7698
.word 0x54f42896
.word 0x541505c1
.word 0x54b57d1f
.word 0x541505c1
.word 0x54b57d1f
.word 0x541505c1
.word 0x54b57d1f
.word 0x541505c1
.word 0x54b57d1f
.word 0x541505c1
.word 0x54b57d1f
.word 0x53f8aab4
.word 0x54c1d553
.word 0x53f8aab4
.word 0x54c1d553
.word 0x53f8aab4
.word 0x54c1d553
.word 0x53f8aab4
.word 0x54c1d553
.word 0x53f8aab4
.word 0x54c1d553
.word 0x54cdec85
.word 0x53c84de9
.word 0x54cdec85
.word 0x53c84de9
.word 0x54cdec85
.word 0x53c84de9
.word 0x54cdec85
.word 0x53c84de9
.word 0x54cdec85
.word 0x53c84de9
.word 0x54e5ce0c
.word 0x53518f9b
.word 0x54e5ce0c
.word 0x53518f9b
.word 0x54e5ce0c
.word 0x53518f9b
.word 0x54e5ce0c
.word 0x53518f9b
.word 0x54e5ce0c
.word 0x53518f9b
.word 0x5494b28b
.word 0x54569ae9
.word 0x5494b28b
.word 0x54569ae9
.word 0x5494b28b
.word 0x54569ae9
.word 0x5494b28b
.word 0x54569ae9
.word 0x5494b28b
.word 0x54569ae9
.word 0x54fe3217
.word 0x5166f4af
.word 0x54fe3217
.word 0x5166f4af
.word 0x54fe3217
.word 0x5166f4af
.word 0x54fe3217
.word 0x5166f4af
.word 0x54fe3217
.word 0x5166f4af
.word 0x54a2cb5f
.word 0x543a6942
.word 0x54a2cb5f
.word 0x543a6942
.word 0x54a2cb5f
.word 0x543a6942
.word 0x54a2cb5f
.word 0x543a6942
.word 0x54a2cb5f
.word 0x543a6942
.word 0x54efe78c
.word 0x5300c3a4
.word 0x54efe78c
.word 0x5300c3a4
.word 0x54efe78c
.word 0x5300c3a4
.word 0x54efe78c
.word 0x5300c3a4
.word 0x54efe78c
.word 0x5300c3a4
.word 0x54725d9b
.word 0x5486d132
.word 0x54725d9b
.word 0x5486d132
.word 0x54725d9b
.word 0x5486d132
.word 0x54725d9b
.word 0x5486d132
.word 0x54725d9b
.word 0x5486d132
.word 0x54f76dcf
.word 0x52892319
.word 0x54f76dcf
.word 0x52892319
.word 0x54f76dcf
.word 0x52892319
.word 0x54f76dcf
.word 0x52892319
.word 0x54f76dcf
.word 0x52892319
.word 0x54f58c44
.word 0x52a73bc3
.word 0x54f58c44
.word 0x52a73bc3
.word 0x54f58c44
.word 0x52a73bc3
.word 0x54f58c44
.word 0x52a73bc3
.word 0x54f58c44
.word 0x52a73bc3
.word 0x53662d46
.word 0x54e33a57
.word 0x53662d46
.word 0x54e33a57
.word 0x53662d46
.word 0x54e33a57
.word 0x53662d46
.word 0x54e33a57
.word 0x53662d46
.word 0x54e33a57
.word 0x54dbf2ef
.word 0x53903445
.word 0x54dbf2ef
.word 0x53903445
.word 0x54dbf2ef
.word 0x53903445
.word 0x54dbf2ef
.word 0x53903445
.word 0x54dbf2ef
.word 0x53903445
.word 0x5249eed4
.word 0x54f9b089
.word 0x5249eed4
.word 0x54f9b089
.word 0x5249eed4
.word 0x54f9b089
.word 0x5249eed4
.word 0x54f9b089
.word 0x5249eed4
.word 0x54f9b089
.word 0x516b6c85
.word 0x54fe2927
.word 0x516b6c85
.word 0x54fe2927
.word 0x516b6c85
.word 0x54fe2927
.word 0x516b6c85
.word 0x54fe2927
.word 0x516b6c85
.word 0x54fe2927
.word 0x54f031f5
.word 0x52fce0b4
.word 0x54f031f5
.word 0x52fce0b4
.word 0x54f031f5
.word 0x52fce0b4
.word 0x54f031f5
.word 0x52fce0b4
.word 0x54f031f5
.word 0x52fce0b4
.word 0x53d1b4ae
.word 0x54cb92d4
.word 0x53d1b4ae
.word 0x54cb92d4
.word 0x53d1b4ae
.word 0x54cb92d4
.word 0x53d1b4ae
.word 0x54cb92d4
.word 0x53d1b4ae
.word 0x54cb92d4
.word 0x54e4b829
.word 0x535a3eb4
.word 0x54e4b829
.word 0x535a3eb4
.word 0x54e4b829
.word 0x535a3eb4
.word 0x54e4b829
.word 0x535a3eb4
.word 0x54e4b829
.word 0x535a3eb4
.word 0x54d1aa6c
.word 0x53b9564e
.word 0x54d1aa6c
.word 0x53b9564e
.word 0x54d1aa6c
.word 0x53b9564e
.word 0x54d1aa6c
.word 0x53b9564e
.word 0x54d1aa6c
.word 0x53b9564e
.word 0x3f7d72fb
.word 0xbf7d72fb
.word 0x3f7d72fb
.word 0xbf7d72fb
.word 0x3f7d72fb
.word 0xbf7d72fb
.word 0x3f7d72fb
.word 0xbf7d72fb
.word 0x3f7d72fb
.word 0xbf7d72fb
.word 0x3f787ab7
.word 0xbf787ab7
.word 0x3f787ab7
.word 0xbf787ab7
.word 0x3f787ab7
.word 0xbf787ab7
.word 0x3f787ab7
.word 0xbf787ab7
.word 0x3f787ab7
.word 0xbf787ab7
.word 0x3f6dfee3
.word 0xbf6dfee3
.word 0x3f6dfee3
.word 0xbf6dfee3
.word 0x3f6dfee3
.word 0xbf6dfee3
.word 0x3f6dfee3
.word 0xbf6dfee3
.word 0x3f6dfee3
.word 0xbf6dfee3
.word 0x3e8e0edf
.word 0xbe8e0edf
.word 0x3e8e0edf
.word 0xbe8e0edf
.word 0x3e8e0edf
.word 0xbe8e0edf
.word 0x3e8e0edf
.word 0xbe8e0edf
.word 0x3e8e0edf
.word 0xbe8e0edf
.word 0x3da54f4b
.word 0xbda54f4b
.word 0x3da54f4b
.word 0xbda54f4b
.word 0x3da54f4b
.word 0xbda54f4b
.word 0x3da54f4b
.word 0xbda54f4b
.word 0x3da54f4b
.word 0xbda54f4b
.word 0x3ea08dce
.word 0xbea08dce
.word 0x3ea08dce
.word 0xbea08dce
.word 0x3ea08dce
.word 0xbea08dce
.word 0x3ea08dce
.word 0xbea08dce
.word 0x3ea08dce
.word 0xbea08dce
.word 0x3f7823fd
.word 0xbf7823fd
.word 0x3f7823fd
.word 0xbf7823fd
.word 0x3f7823fd
.word 0xbf7823fd
.word 0x3f7823fd
.word 0xbf7823fd
.word 0x3f7823fd
.word 0xbf7823fd
.word 0x3e679c0f
.word 0xbe679c0f
.word 0x3e679c0f
.word 0xbe679c0f
.word 0x3e679c0f
.word 0xbe679c0f
.word 0x3e679c0f
.word 0xbe679c0f
.word 0x3e679c0f
.word 0xbe679c0f
.word 0x3f159889
.word 0xbf159889
.word 0x3f159889
.word 0xbf159889
.word 0x3f159889
.word 0xbf159889
.word 0x3f159889
.word 0xbf159889
.word 0x3f159889
.word 0xbf159889
.word 0x3d9df0c8
.word 0xbd9df0c8
.word 0x3d9df0c8
.word 0xbd9df0c8
.word 0x3d9df0c8
.word 0xbd9df0c8
.word 0x3d9df0c8
.word 0xbd9df0c8
.word 0x3d9df0c8
.word 0xbd9df0c8
.word 0x3f12f39d
.word 0xbf12f39d
.word 0x3f12f39d
.word 0xbf12f39d
.word 0x3f12f39d
.word 0xbf12f39d
.word 0x3f12f39d
.word 0xbf12f39d
.word 0x3f12f39d
.word 0xbf12f39d
.word 0x3f31d719
.word 0xbf31d719
.word 0x3f31d719
.word 0xbf31d719
.word 0x3f31d719
.word 0xbf31d719
.word 0x3f31d719
.word 0xbf31d719
.word 0x3f31d719
.word 0xbf31d719
.word 0x3e9a5de3
.word 0xbe9a5de3
.word 0x3e9a5de3
.word 0xbe9a5de3
.word 0x3e9a5de3
.word 0xbe9a5de3
.word 0x3e9a5de3
.word 0xbe9a5de3
.word 0x3e9a5de3
.word 0xbe9a5de3
.word 0x3de3cb78
.word 0xbde3cb78
.word 0x3de3cb78
.word 0xbde3cb78
.word 0x3de3cb78
.word 0xbde3cb78
.word 0x3de3cb78
.word 0xbde3cb78
.word 0x3de3cb78
.word 0xbde3cb78
.word 0x3f6811f1
.word 0xbf6811f1
.word 0x3f6811f1
.word 0xbf6811f1
.word 0x3f6811f1
.word 0xbf6811f1
.word 0x3f6811f1
.word 0xbf6811f1
.word 0x3f6811f1
.word 0xbf6811f1
.word 0x3edb3d72
.word 0xbedb3d72
.word 0x3edb3d72
.word 0xbedb3d72
.word 0x3edb3d72
.word 0xbedb3d72
.word 0x3edb3d72
.word 0xbedb3d72
.word 0x3edb3d72
.word 0xbedb3d72
.word 0x3d622af4
.word 0xbd622af4
.word 0x3d622af4
.word 0xbd622af4
.word 0x3d622af4
.word 0xbd622af4
.word 0x3d622af4
.word 0xbd622af4
.word 0x3d622af4
.word 0xbd622af4
.word 0x3f038aaf
.word 0xbf038aaf
.word 0x3f038aaf
.word 0xbf038aaf
.word 0x3f038aaf
.word 0xbf038aaf
.word 0x3f038aaf
.word 0xbf038aaf
.word 0x3f038aaf
.word 0xbf038aaf
.word 0x3f749269
.word 0xbf749269
.word 0x3f749269
.word 0xbf749269
.word 0x3f749269
.word 0xbf749269
.word 0x3f749269
.word 0xbf749269
.word 0x3f749269
.word 0xbf749269
.word 0x3e577dea
.word 0xbe577dea
.word 0x3e577dea
.word 0xbe577dea
.word 0x3e577dea
.word 0xbe577dea
.word 0x3e577dea
.word 0xbe577dea
.word 0x3e577dea
.word 0xbe577dea
.word 0x3e793998
.word 0xbe793998
.word 0x3e793998
.word 0xbe793998
.word 0x3e793998
.word 0xbe793998
.word 0x3e793998
.word 0xbe793998
.word 0x3e793998
.word 0xbe793998
.word 0x3e5f1d7a
.word 0xbe5f1d7a
.word 0x3e5f1d7a
.word 0xbe5f1d7a
.word 0x3e5f1d7a
.word 0xbe5f1d7a
.word 0x3e5f1d7a
.word 0xbe5f1d7a
.word 0x3e5f1d7a
.word 0xbe5f1d7a
.word 0x3e5ba8bb
.word 0xbe5ba8bb
.word 0x3e5ba8bb
.word 0xbe5ba8bb
.word 0x3e5ba8bb
.word 0xbe5ba8bb
.word 0x3e5ba8bb
.word 0xbe5ba8bb
.word 0x3e5ba8bb
.word 0xbe5ba8bb
.word 0x3e424d99
.word 0xbe424d99
.word 0x3e424d99
.word 0xbe424d99
.word 0x3e424d99
.word 0xbe424d99
.word 0x3e424d99
.word 0xbe424d99
.word 0x3e424d99
.word 0xbe424d99
.word 0x3e028642
.word 0xbe028642
.word 0x3e028642
.word 0xbe028642
.word 0x3e028642
.word 0xbe028642
.word 0x3e028642
.word 0xbe028642
.word 0x3e028642
.word 0xbe028642
.word 0x3e4d797f
.word 0xbe4d797f
.word 0x3e4d797f
.word 0xbe4d797f
.word 0x3e4d797f
.word 0xbe4d797f
.word 0x3e4d797f
.word 0xbe4d797f
.word 0x3e4d797f
.word 0xbe4d797f
.word 0x3f5f75c6
.word 0xbf5f75c6
.word 0x3f5f75c6
.word 0xbf5f75c6
.word 0x3f5f75c6
.word 0xbf5f75c6
.word 0x3f5f75c6
.word 0xbf5f75c6
.word 0x3f5f75c6
.word 0xbf5f75c6
.word 0x3ec1844e
.word 0xbec1844e
.word 0x3ec1844e
.word 0xbec1844e
.word 0x3ec1844e
.word 0xbec1844e
.word 0x3ec1844e
.word 0xbec1844e
.word 0x3ec1844e
.word 0xbec1844e
.word 0x3f602c50
.word 0xbf602c50
.word 0x3f602c50
.word 0xbf602c50
.word 0x3f602c50
.word 0xbf602c50
.word 0x3f602c50
.word 0xbf602c50
.word 0x3f602c50
.word 0xbf602c50
.word 0x3ebc4184
.word 0xbebc4184
.word 0x3ebc4184
.word 0xbebc4184
.word 0x3ebc4184
.word 0xbebc4184
.word 0x3ebc4184
.word 0xbebc4184
.word 0x3ebc4184
.word 0xbebc4184
.word 0x3ec79e62
.word 0xbec79e62
.word 0x3ec79e62
.word 0xbec79e62
.word 0x3ec79e62
.word 0xbec79e62
.word 0x3ec79e62
.word 0xbec79e62
.word 0x3ec79e62
.word 0xbec79e62
.word 0x3f027a68
.word 0xbf027a68
.word 0x3f027a68
.word 0xbf027a68
.word 0x3f027a68
.word 0xbf027a68
.word 0x3f027a68
.word 0xbf027a68
.word 0x3f027a68
.word 0xbf027a68
.word 0x3f1dd893
.word 0xbf1dd893
.word 0x3f1dd893
.word 0xbf1dd893
.word 0x3f1dd893
.word 0xbf1dd893
.word 0x3f1dd893
.word 0xbf1dd893
.word 0x3f1dd893
.word 0xbf1dd893
.word 0x3ee6d6a0
.word 0xbee6d6a0
.word 0x3ee6d6a0
.word 0xbee6d6a0
.word 0x3ee6d6a0
.word 0xbee6d6a0
.word 0x3ee6d6a0
.word 0xbee6d6a0
.word 0x3ee6d6a0
.word 0xbee6d6a0
.word 0x3ebd750e
.word 0xbebd750e
.word 0x3ebd750e
.word 0xbebd750e
.word 0x3ebd750e
.word 0xbebd750e
.word 0x3ebd750e
.word 0xbebd750e
.word 0x3ebd750e
.word 0xbebd750e
.word 0x3f77b057
.word 0xbf77b057
.word 0x3f77b057
.word 0xbf77b057
.word 0x3f77b057
.word 0xbf77b057
.word 0x3f77b057
.word 0xbf77b057
.word 0x3f77b057
.word 0xbf77b057
.word 0x3f0773ce
.word 0xbf0773ce
.word 0x3f0773ce
.word 0xbf0773ce
.word 0x3f0773ce
.word 0xbf0773ce
.word 0x3f0773ce
.word 0xbf0773ce
.word 0x3f0773ce
.word 0xbf0773ce
.word 0x3f1d0257
.word 0xbf1d0257
.word 0x3f1d0257
.word 0xbf1d0257
.word 0x3f1d0257
.word 0xbf1d0257
.word 0x3f1d0257
.word 0xbf1d0257
.word 0x3f1d0257
.word 0xbf1d0257
.word 0x3f16bf84
.word 0xbf16bf84
.word 0x3f16bf84
.word 0xbf16bf84
.word 0x3f16bf84
.word 0xbf16bf84
.word 0x3f16bf84
.word 0xbf16bf84
.word 0x3f16bf84
.word 0xbf16bf84
.word 0x3f593f91
.word 0xbf593f91
.word 0x3f593f91
.word 0xbf593f91
.word 0x3f593f91
.word 0xbf593f91
.word 0x3f593f91
.word 0xbf593f91
.word 0x3f593f91
.word 0xbf593f91
.word 0x3e90cca2
.word 0xbe90cca2
.word 0x3e90cca2
.word 0xbe90cca2
.word 0x3e90cca2
.word 0xbe90cca2
.word 0x3e90cca2
.word 0xbe90cca2
.word 0x3e90cca2
.word 0xbe90cca2
.word 0x3f02175d
.word 0xbf02175d
.word 0x3f02175d
.word 0xbf02175d
.word 0x3f02175d
.word 0xbf02175d
.word 0x3f02175d
.word 0xbf02175d
.word 0x3f02175d
.word 0xbf02175d
.word 0x3f76cd0a
.word 0xbf76cd0a
.word 0x3f76cd0a
.word 0xbf76cd0a
.word 0x3f76cd0a
.word 0xbf76cd0a
.word 0x3f76cd0a
.word 0xbf76cd0a
.word 0x3f76cd0a
.word 0xbf76cd0a
.word 0x3e2e2407
.word 0xbe2e2407
.word 0x3e2e2407
.word 0xbe2e2407
.word 0x3e2e2407
.word 0xbe2e2407
.word 0x3e2e2407
.word 0xbe2e2407
.word 0x3e2e2407
.word 0xbe2e2407
.word 0x3f5f67e7
.word 0xbf5f67e7
.word 0x3f5f67e7
.word 0xbf5f67e7
.word 0x3f5f67e7
.word 0xbf5f67e7
.word 0x3f5f67e7
.word 0xbf5f67e7
.word 0x3f5f67e7
.word 0xbf5f67e7
.word 0x3f700fcf
.word 0xbf700fcf
.word 0x3f700fcf
.word 0xbf700fcf
.word 0x3f700fcf
.word 0xbf700fcf
.word 0x3f700fcf
.word 0xbf700fcf
.word 0x3f700fcf
.word 0xbf700fcf
.word 0x3f178884
.word 0xbf178884
.word 0x3f178884
.word 0xbf178884
.word 0x3f178884
.word 0xbf178884
.word 0x3f178884
.word 0xbf178884
.word 0x3f178884
.word 0xbf178884
.word 0x3d69b062
.word 0xbd69b062
.word 0x3d69b062
.word 0xbd69b062
.word 0x3d69b062
.word 0xbd69b062
.word 0x3d69b062
.word 0xbd69b062
.word 0x3d69b062
.word 0xbd69b062
.word 0x3f6f3378
.word 0xbf6f3378
.word 0x3f6f3378
.word 0xbf6f3378
.word 0x3f6f3378
.word 0xbf6f3378
.word 0x3f6f3378
.word 0xbf6f3378
.word 0x3f6f3378
.word 0xbf6f3378
.word 0x3efc7d22
.word 0xbefc7d22
.word 0x3efc7d22
.word 0xbefc7d22
.word 0x3efc7d22
.word 0xbefc7d22
.word 0x3efc7d22
.word 0xbefc7d22
.word 0x3efc7d22
.word 0xbefc7d22
.word 0x3f7ff039
.word 0xbf7ff039
.word 0x3f7ff039
.word 0xbf7ff039
.word 0x3f7ff039
.word 0xbf7ff039
.word 0x3f7ff039
.word 0xbf7ff039
.word 0x3f7ff039
.word 0xbf7ff039
.word 0x3e4ec97f
.word 0xbe4ec97f
.word 0x3e4ec97f
.word 0xbe4ec97f
.word 0x3e4ec97f
.word 0xbe4ec97f
.word 0x3e4ec97f
.word 0xbe4ec97f
.word 0x3e4ec97f
.word 0xbe4ec97f
.word 0x3ed3c4e4
.word 0xbed3c4e4
.word 0x3ed3c4e4
.word 0xbed3c4e4
.word 0x3ed3c4e4
.word 0xbed3c4e4
.word 0x3ed3c4e4
.word 0xbed3c4e4
.word 0x3ed3c4e4
.word 0xbed3c4e4
.word 0x3e55f98e
.word 0xbe55f98e
.word 0x3e55f98e
.word 0xbe55f98e
.word 0x3e55f98e
.word 0xbe55f98e
.word 0x3e55f98e
.word 0xbe55f98e
.word 0x3e55f98e
.word 0xbe55f98e
.word 0x3e327c96
.word 0xbe327c96
.word 0x3e327c96
.word 0xbe327c96
.word 0x3e327c96
.word 0xbe327c96
.word 0x3e327c96
.word 0xbe327c96
.word 0x3e327c96
.word 0xbe327c96
.word 0x3eedddea
.word 0xbeedddea
.word 0x3eedddea
.word 0xbeedddea
.word 0x3eedddea
.word 0xbeedddea
.word 0x3eedddea
.word 0xbeedddea
.word 0x3eedddea
.word 0xbeedddea
.word 0x3dc0f609
.word 0xbdc0f609
.word 0x3dc0f609
.word 0xbdc0f609
.word 0x3dc0f609
.word 0xbdc0f609
.word 0x3dc0f609
.word 0xbdc0f609
.word 0x3dc0f609
.word 0xbdc0f609
.word 0x3c1b1d4f
.word 0xbc1b1d4f
.word 0x3c1b1d4f
.word 0xbc1b1d4f
.word 0x3c1b1d4f
.word 0xbc1b1d4f
.word 0x3c1b1d4f
.word 0xbc1b1d4f
.word 0x3c1b1d4f
.word 0xbc1b1d4f
.word 0x3e47913f
.word 0xbe47913f
.word 0x3e47913f
.word 0xbe47913f
.word 0x3e47913f
.word 0xbe47913f
.word 0x3e47913f
.word 0xbe47913f
.word 0x3e47913f
.word 0xbe47913f
.word 0x3eda2d62
.word 0xbeda2d62
.word 0x3eda2d62
.word 0xbeda2d62
.word 0x3eda2d62
.word 0xbeda2d62
.word 0x3eda2d62
.word 0xbeda2d62
.word 0x3eda2d62
.word 0xbeda2d62
.word 0x3dca9113
.word 0xbdca9113
.word 0x3dca9113
.word 0xbdca9113
.word 0x3dca9113
.word 0xbdca9113
.word 0x3dca9113
.word 0xbdca9113
.word 0x3dca9113
.word 0xbdca9113
.word 0x3d009f19
.word 0xbd009f19
.word 0x3d009f19
.word 0xbd009f19
.word 0x3d009f19
.word 0xbd009f19
.word 0x3d009f19
.word 0xbd009f19
.word 0x3d009f19
.word 0xbd009f19
.word 0x3f59e6f7
.word 0xbf59e6f7
.word 0x3f59e6f7
.word 0xbf59e6f7
.word 0x3f59e6f7
.word 0xbf59e6f7
.word 0x3f59e6f7
.word 0xbf59e6f7
.word 0x3f59e6f7
.word 0xbf59e6f7
.word 0x3f2b5e2a
.word 0xbf2b5e2a
.word 0x3f2b5e2a
.word 0xbf2b5e2a
.word 0x3f2b5e2a
.word 0xbf2b5e2a
.word 0x3f2b5e2a
.word 0xbf2b5e2a
.word 0x3f2b5e2a
.word 0xbf2b5e2a
.word 0x3f7c1645
.word 0xbf7c1645
.word 0x3f7c1645
.word 0xbf7c1645
.word 0x3f7c1645
.word 0xbf7c1645
.word 0x3f7c1645
.word 0xbf7c1645
.word 0x3f7c1645
.word 0xbf7c1645
.word 0x3f466075
.word 0xbf466075
.word 0x3f466075
.word 0xbf466075
.word 0x3f466075
.word 0xbf466075
.word 0x3f466075
.word 0xbf466075
.word 0x3f466075
.word 0xbf466075
.word 0x3e06404e
.word 0xbe06404e
.word 0x3e06404e
.word 0xbe06404e
.word 0x3e06404e
.word 0xbe06404e
.word 0x3e06404e
.word 0xbe06404e
.word 0x3e06404e
.word 0xbe06404e
.word 0x3f6f0316
.word 0xbf6f0316
.word 0x3f6f0316
.word 0xbf6f0316
.word 0x3f6f0316
.word 0xbf6f0316
.word 0x3f6f0316
.word 0xbf6f0316
.word 0x3f6f0316
.word 0xbf6f0316
.word 0x3e90510c
.word 0xbe90510c
.word 0x3e90510c
.word 0xbe90510c
.word 0x3e90510c
.word 0xbe90510c
.word 0x3e90510c
.word 0xbe90510c
.word 0x3e90510c
.word 0xbe90510c
.word 0x3e21735f
.word 0xbe21735f
.word 0x3e21735f
.word 0xbe21735f
.word 0x3e21735f
.word 0xbe21735f
.word 0x3e21735f
.word 0xbe21735f
.word 0x3e21735f
.word 0xbe21735f
.word 0x3f3e3cfc
.word 0xbf3e3cfc
.word 0x3f3e3cfc
.word 0xbf3e3cfc
.word 0x3f3e3cfc
.word 0xbf3e3cfc
.word 0x3f3e3cfc
.word 0xbf3e3cfc
.word 0x3f3e3cfc
.word 0xbf3e3cfc
.word 0x3f76eb8d
.word 0xbf76eb8d
.word 0x3f76eb8d
.word 0xbf76eb8d
.word 0x3f76eb8d
.word 0xbf76eb8d
.word 0x3f76eb8d
.word 0xbf76eb8d
.word 0x3f76eb8d
.word 0xbf76eb8d
.word 0x3dced4df
.word 0xbdced4df
.word 0x3dced4df
.word 0xbdced4df
.word 0x3dced4df
.word 0xbdced4df
.word 0x3dced4df
.word 0xbdced4df
.word 0x3dced4df
.word 0xbdced4df
.word 0x3f28e752
.word 0xbf28e752
.word 0x3f28e752
.word 0xbf28e752
.word 0x3f28e752
.word 0xbf28e752
.word 0x3f28e752
.word 0xbf28e752
.word 0x3f28e752
.word 0xbf28e752
.word 0x3ec7cc25
.word 0xbec7cc25
.word 0x3ec7cc25
.word 0xbec7cc25
.word 0x3ec7cc25
.word 0xbec7cc25
.word 0x3ec7cc25
.word 0xbec7cc25
.word 0x3ec7cc25
.word 0xbec7cc25
.word 0x3ea8ecd3
.word 0xbea8ecd3
.word 0x3ea8ecd3
.word 0xbea8ecd3
.word 0x3ea8ecd3
.word 0xbea8ecd3
.word 0x3ea8ecd3
.word 0xbea8ecd3
.word 0x3ea8ecd3
.word 0xbea8ecd3
.word 0x3f00662d
.word 0xbf00662d
.word 0x3f00662d
.word 0xbf00662d
.word 0x3f00662d
.word 0xbf00662d
.word 0x3f00662d
.word 0xbf00662d
.word 0x3f00662d
.word 0xbf00662d
.word 0x3da9e36f
.word 0xbda9e36f
.word 0x3da9e36f
.word 0xbda9e36f
.word 0x3da9e36f
.word 0xbda9e36f
.word 0x3da9e36f
.word 0xbda9e36f
.word 0x3da9e36f
.word 0xbda9e36f
.word 0x3dfa8f2f
.word 0xbdfa8f2f
.word 0x3dfa8f2f
.word 0xbdfa8f2f
.word 0x3dfa8f2f
.word 0xbdfa8f2f
.word 0x3dfa8f2f
.word 0xbdfa8f2f
.word 0x3dfa8f2f
.word 0xbdfa8f2f
.word 0x3f18167c
.word 0xbf18167c
.word 0x3f18167c
.word 0xbf18167c
.word 0x3f18167c
.word 0xbf18167c
.word 0x3f18167c
.word 0xbf18167c
.word 0x3f18167c
.word 0xbf18167c
.word 0x3c8b5a36
.word 0xbc8b5a36
.word 0x3c8b5a36
.word 0xbc8b5a36
.word 0x3c8b5a36
.word 0xbc8b5a36
.word 0x3c8b5a36
.word 0xbc8b5a36
.word 0x3c8b5a36
.word 0xbc8b5a36
.word 0x3f594226
.word 0xbf594226
.word 0x3f594226
.word 0xbf594226
.word 0x3f594226
.word 0xbf594226
.word 0x3f594226
.word 0xbf594226
.word 0x3f594226
.word 0xbf594226
.word 0x3f1f394c
.word 0xbf1f394c
.word 0x3f1f394c
.word 0xbf1f394c
.word 0x3f1f394c
.word 0xbf1f394c
.word 0x3f1f394c
.word 0xbf1f394c
.word 0x3f1f394c
.word 0xbf1f394c
.word 0x3f5a8883
.word 0xbf5a8883
.word 0x3f5a8883
.word 0xbf5a8883
.word 0x3f5a8883
.word 0xbf5a8883
.word 0x3f5a8883
.word 0xbf5a8883
.word 0x3f5a8883
.word 0xbf5a8883
.word 0x3d55267a
.word 0xbd55267a
.word 0x3d55267a
.word 0xbd55267a
.word 0x3d55267a
.word 0xbd55267a
.word 0x3d55267a
.word 0xbd55267a
.word 0x3d55267a
.word 0xbd55267a
.word 0x3f4af2d8
.word 0xbf4af2d8
.word 0x3f4af2d8
.word 0xbf4af2d8
.word 0x3f4af2d8
.word 0xbf4af2d8
.word 0x3f4af2d8
.word 0xbf4af2d8
.word 0x3f4af2d8
.word 0xbf4af2d8
.word 0x3f618f18
.word 0xbf618f18
.word 0x3f618f18
.word 0xbf618f18
.word 0x3f618f18
.word 0xbf618f18
.word 0x3f618f18
.word 0xbf618f18
.word 0x3f618f18
.word 0xbf618f18
.word 0x3f0c632b
.word 0xbf0c632b
.word 0x3f0c632b
.word 0xbf0c632b
.word 0x3f0c632b
.word 0xbf0c632b
.word 0x3f0c632b
.word 0xbf0c632b
.word 0x3f0c632b
.word 0xbf0c632b
.word 0x3e9892e9
.word 0xbe9892e9
.word 0x3e9892e9
.word 0xbe9892e9
.word 0x3e9892e9
.word 0xbe9892e9
.word 0x3e9892e9
.word 0xbe9892e9
.word 0x3e9892e9
.word 0xbe9892e9
.word 0x3f6fa701
.word 0xbf6fa701
.word 0x3f6fa701
.word 0xbf6fa701
.word 0x3f6fa701
.word 0xbf6fa701
.word 0x3f6fa701
.word 0xbf6fa701
.word 0x3f6fa701
.word 0xbf6fa701
.word 0x3f119b7f
.word 0xbf119b7f
.word 0x3f119b7f
.word 0xbf119b7f
.word 0x3f119b7f
.word 0xbf119b7f
.word 0x3f119b7f
.word 0xbf119b7f
.word 0x3f119b7f
.word 0xbf119b7f
.word 0x3f3d3492
.word 0xbf3d3492
.word 0x3f3d3492
.word 0xbf3d3492
.word 0x3f3d3492
.word 0xbf3d3492
.word 0x3f3d3492
.word 0xbf3d3492
.word 0x3f3d3492
.word 0xbf3d3492
.word 0x3f21b507
.word 0xbf21b507
.word 0x3f21b507
.word 0xbf21b507
.word 0x3f21b507
.word 0xbf21b507
.word 0x3f21b507
.word 0xbf21b507
.word 0x3f21b507
.word 0xbf21b507
.word 0x3ea43274
.word 0xbea43274
.word 0x3ea43274
.word 0xbea43274
.word 0x3ea43274
.word 0xbea43274
.word 0x3ea43274
.word 0xbea43274
.word 0x3ea43274
.word 0xbea43274
.word 0x3f02e9e0
.word 0xbf02e9e0
.word 0x3f02e9e0
.word 0xbf02e9e0
.word 0x3f02e9e0
.word 0xbf02e9e0
.word 0x3f02e9e0
.word 0xbf02e9e0
.word 0x3f02e9e0
.word 0xbf02e9e0
.word 0x3ef64524
.word 0xbef64524
.word 0x3ef64524
.word 0xbef64524
.word 0x3ef64524
.word 0xbef64524
.word 0x3ef64524
.word 0xbef64524
.word 0x3ef64524
.word 0xbef64524
.word 0x3f7dfd79
.word 0xbf7dfd79
.word 0x3f7dfd79
.word 0xbf7dfd79
.word 0x3f7dfd79
.word 0xbf7dfd79
.word 0x3f7dfd79
.word 0xbf7dfd79
.word 0x3f7dfd79
.word 0xbf7dfd79
.word 0x3e801118
.word 0xbe801118
.word 0x3e801118
.word 0xbe801118
.word 0x3e801118
.word 0xbe801118
.word 0x3e801118
.word 0xbe801118
.word 0x3e801118
.word 0xbe801118
.word 0x3f6f2575
.word 0xbf6f2575
.word 0x3f6f2575
.word 0xbf6f2575
.word 0x3f6f2575
.word 0xbf6f2575
.word 0x3f6f2575
.word 0xbf6f2575
.word 0x3f6f2575
.word 0xbf6f2575
.word 0x3cd06674
.word 0xbcd06674
.word 0x3cd06674
.word 0xbcd06674
.word 0x3cd06674
.word 0xbcd06674
.word 0x3cd06674
.word 0xbcd06674
.word 0x3cd06674
.word 0xbcd06674
.word 0x3ebf1baa
.word 0xbebf1baa
.word 0x3ebf1baa
.word 0xbebf1baa
.word 0x3ebf1baa
.word 0xbebf1baa
.word 0x3ebf1baa
.word 0xbebf1baa
.word 0x3ebf1baa
.word 0xbebf1baa
.word 0x3dd844ed
.word 0xbdd844ed
.word 0x3dd844ed
.word 0xbdd844ed
.word 0x3dd844ed
.word 0xbdd844ed
.word 0x3dd844ed
.word 0xbdd844ed
.word 0x3dd844ed
.word 0xbdd844ed
.word 0x3f32b67a
.word 0xbf32b67a
.word 0x3f32b67a
.word 0xbf32b67a
.word 0x3f32b67a
.word 0xbf32b67a
.word 0x3f32b67a
.word 0xbf32b67a
.word 0x3f32b67a
.word 0xbf32b67a
.word 0x3e99cea5
.word 0xbe99cea5
.word 0x3e99cea5
.word 0xbe99cea5
.word 0x3e99cea5
.word 0xbe99cea5
.word 0x3e99cea5
.word 0xbe99cea5
.word 0x3e99cea5
.word 0xbe99cea5
.word 0x3f280672
.word 0xbf280672
.word 0x3f280672
.word 0xbf280672
.word 0x3f280672
.word 0xbf280672
.word 0x3f280672
.word 0xbf280672
.word 0x3f280672
.word 0xbf280672
.word 0x3e22f8a7
.word 0xbe22f8a7
.word 0x3e22f8a7
.word 0xbe22f8a7
.word 0x3e22f8a7
.word 0xbe22f8a7
.word 0x3e22f8a7
.word 0xbe22f8a7
.word 0x3e22f8a7
.word 0xbe22f8a7
.word 0x3dbb11bf
.word 0xbdbb11bf
.word 0x3dbb11bf
.word 0xbdbb11bf
.word 0x3dbb11bf
.word 0xbdbb11bf
.word 0x3dbb11bf
.word 0xbdbb11bf
.word 0x3dbb11bf
.word 0xbdbb11bf
.word 0x3f15d4cd
.word 0xbf15d4cd
.word 0x3f15d4cd
.word 0xbf15d4cd
.word 0x3f15d4cd
.word 0xbf15d4cd
.word 0x3f15d4cd
.word 0xbf15d4cd
.word 0x3f15d4cd
.word 0xbf15d4cd
.word 0x3f18c9e8
.word 0xbf18c9e8
.word 0x3f18c9e8
.word 0xbf18c9e8
.word 0x3f18c9e8
.word 0xbf18c9e8
.word 0x3f18c9e8
.word 0xbf18c9e8
.word 0x3f18c9e8
.word 0xbf18c9e8
.word 0x3ef432c2
.word 0xbef432c2
.word 0x3ef432c2
.word 0xbef432c2
.word 0x3ef432c2
.word 0xbef432c2
.word 0x3ef432c2
.word 0xbef432c2
.word 0x3ef432c2
.word 0xbef432c2
.word 0x3f73a578
.word 0xbf73a578
.word 0x3f73a578
.word 0xbf73a578
.word 0x3f73a578
.word 0xbf73a578
.word 0x3f73a578
.word 0xbf73a578
.word 0x3f73a578
.word 0xbf73a578
.word 0x3f059d8d
.word 0xbf059d8d
.word 0x3f059d8d
.word 0xbf059d8d
.word 0x3f059d8d
.word 0xbf059d8d
.word 0x3f059d8d
.word 0xbf059d8d
.word 0x3f059d8d
.word 0xbf059d8d
.word 0x3ee72d10
.word 0xbee72d10
.word 0x3ee72d10
.word 0xbee72d10
.word 0x3ee72d10
.word 0xbee72d10
.word 0x3ee72d10
.word 0xbee72d10
.word 0x3ee72d10
.word 0xbee72d10
.word 0x3f35e14e
.word 0xbf35e14e
.word 0x3f35e14e
.word 0xbf35e14e
.word 0x3f35e14e
.word 0xbf35e14e
.word 0x3f35e14e
.word 0xbf35e14e
.word 0x3f35e14e
.word 0xbf35e14e
.word 0x3f560d3c
.word 0xbf560d3c
.word 0x3f560d3c
.word 0xbf560d3c
.word 0x3f560d3c
.word 0xbf560d3c
.word 0x3f560d3c
.word 0xbf560d3c
.word 0x3f560d3c
.word 0xbf560d3c
.word 0x3ec248d4
.word 0xbec248d4
.word 0x3ec248d4
.word 0xbec248d4
.word 0x3ec248d4
.word 0xbec248d4
.word 0x3ec248d4
.word 0xbec248d4
.word 0x3ec248d4
.word 0xbec248d4
.word 0x3e9020d7
.word 0xbe9020d7
.word 0x3e9020d7
.word 0xbe9020d7
.word 0x3e9020d7
.word 0xbe9020d7
.word 0x3e9020d7
.word 0xbe9020d7
.word 0x3e9020d7
.word 0xbe9020d7
.word 0x3f2aa5bf
.word 0xbf2aa5bf
.word 0x3f2aa5bf
.word 0xbf2aa5bf
.word 0x3f2aa5bf
.word 0xbf2aa5bf
.word 0x3f2aa5bf
.word 0xbf2aa5bf
.word 0x3f2aa5bf
.word 0xbf2aa5bf
.word 0x3f7db8eb
.word 0xbf7db8eb
.word 0x3f7db8eb
.word 0xbf7db8eb
.word 0x3f7db8eb
.word 0xbf7db8eb
.word 0x3f7db8eb
.word 0xbf7db8eb
.word 0x3f7db8eb
.word 0xbf7db8eb
.word 0x3f4acaba
.word 0xbf4acaba
.word 0x3f4acaba
.word 0xbf4acaba
.word 0x3f4acaba
.word 0xbf4acaba
.word 0x3f4acaba
.word 0xbf4acaba
.word 0x3f4acaba
.word 0xbf4acaba
.word 0x3f20a72a
.word 0xbf20a72a
.word 0x3f20a72a
.word 0xbf20a72a
.word 0x3f20a72a
.word 0xbf20a72a
.word 0x3f20a72a
.word 0xbf20a72a
.word 0x3f20a72a
.word 0xbf20a72a
.word 0x3dc73fe6
.word 0xbdc73fe6
.word 0x3dc73fe6
.word 0xbdc73fe6
.word 0x3dc73fe6
.word 0xbdc73fe6
.word 0x3dc73fe6
.word 0xbdc73fe6
.word 0x3dc73fe6
.word 0xbdc73fe6
.word 0x3eb07468
.word 0xbeb07468
.word 0x3eb07468
.word 0xbeb07468
.word 0x3eb07468
.word 0xbeb07468
.word 0x3eb07468
.word 0xbeb07468
.word 0x3eb07468
.word 0xbeb07468
.word 0x3e807166
.word 0xbe807166
.word 0x3e807166
.word 0xbe807166
.word 0x3e807166
.word 0xbe807166
.word 0x3e807166
.word 0xbe807166
.word 0x3e807166
.word 0xbe807166
.word 0x3db89ff2
.word 0xbdb89ff2
.word 0x3db89ff2
.word 0xbdb89ff2
.word 0x3db89ff2
.word 0xbdb89ff2
.word 0x3db89ff2
.word 0xbdb89ff2
.word 0x3db89ff2
.word 0xbdb89ff2
.word 0x3d5b2023
.word 0xbd5b2023
.word 0x3d5b2023
.word 0xbd5b2023
.word 0x3d5b2023
.word 0xbd5b2023
.word 0x3d5b2023
.word 0xbd5b2023
.word 0x3d5b2023
.word 0xbd5b2023
.word 0x3ea35464
.word 0xbea35464
.word 0x3ea35464
.word 0xbea35464
.word 0x3ea35464
.word 0xbea35464
.word 0x3ea35464
.word 0xbea35464
.word 0x3ea35464
.word 0xbea35464
.word 0x3f7b3eb6
.word 0xbf7b3eb6
.word 0x3f7b3eb6
.word 0xbf7b3eb6
.word 0x3f7b3eb6
.word 0xbf7b3eb6
.word 0x3f7b3eb6
.word 0xbf7b3eb6
.word 0x3f7b3eb6
.word 0xbf7b3eb6
.word 0x3e033620
.word 0xbe033620
.word 0x3e033620
.word 0xbe033620
.word 0x3e033620
.word 0xbe033620
.word 0x3e033620
.word 0xbe033620
.word 0x3e033620
.word 0xbe033620
.word 0x3eb2cc8a
.word 0xbeb2cc8a
.word 0x3eb2cc8a
.word 0xbeb2cc8a
.word 0x3eb2cc8a
.word 0xbeb2cc8a
.word 0x3eb2cc8a
.word 0xbeb2cc8a
.word 0x3eb2cc8a
.word 0xbeb2cc8a
.word 0x3f5dd826
.word 0xbf5dd826
.word 0x3f5dd826
.word 0xbf5dd826
.word 0x3f5dd826
.word 0xbf5dd826
.word 0x3f5dd826
.word 0xbf5dd826
.word 0x3f5dd826
.word 0xbf5dd826
.word 0x3e54a46b
.word 0xbe54a46b
.word 0x3e54a46b
.word 0xbe54a46b
.word 0x3e54a46b
.word 0xbe54a46b
.word 0x3e54a46b
.word 0xbe54a46b
.word 0x3e54a46b
.word 0xbe54a46b
.word 0x3f39ac5a
.word 0xbf39ac5a
.word 0x3f39ac5a
.word 0xbf39ac5a
.word 0x3f39ac5a
.word 0xbf39ac5a
.word 0x3f39ac5a
.word 0xbf39ac5a
.word 0x3f39ac5a
.word 0xbf39ac5a
.word 0x3f1a721e
.word 0xbf1a721e
.word 0x3f1a721e
.word 0xbf1a721e
.word 0x3f1a721e
.word 0xbf1a721e
.word 0x3f1a721e
.word 0xbf1a721e
.word 0x3f1a721e
.word 0xbf1a721e
.word 0x3f665a8e
.word 0xbf665a8e
.word 0x3f665a8e
.word 0xbf665a8e
.word 0x3f665a8e
.word 0xbf665a8e
.word 0x3f665a8e
.word 0xbf665a8e
.word 0x3f665a8e
.word 0xbf665a8e
.word 0x3f38530d
.word 0xbf38530d
.word 0x3f38530d
.word 0xbf38530d
.word 0x3f38530d
.word 0xbf38530d
.word 0x3f38530d
.word 0xbf38530d
.word 0x3f38530d
.word 0xbf38530d
.word 0x3eb3937b
.word 0xbeb3937b
.word 0x3eb3937b
.word 0xbeb3937b
.word 0x3eb3937b
.word 0xbeb3937b
.word 0x3eb3937b
.word 0xbeb3937b
.word 0x3eb3937b
.word 0xbeb3937b
.word 0x3f66f79a
.word 0xbf66f79a
.word 0x3f66f79a
.word 0xbf66f79a
.word 0x3f66f79a
.word 0xbf66f79a
.word 0x3f66f79a
.word 0xbf66f79a
.word 0x3f66f79a
.word 0xbf66f79a
.word 0x3e3585e5
.word 0xbe3585e5
.word 0x3e3585e5
.word 0xbe3585e5
.word 0x3e3585e5
.word 0xbe3585e5
.word 0x3e3585e5
.word 0xbe3585e5
.word 0x3e3585e5
.word 0xbe3585e5
.word 0x3e90bae3
.word 0xbe90bae3
.word 0x3e90bae3
.word 0xbe90bae3
.word 0x3e90bae3
.word 0xbe90bae3
.word 0x3e90bae3
.word 0xbe90bae3
.word 0x3e90bae3
.word 0xbe90bae3
.word 0x3f2f0f03
.word 0xbf2f0f03
.word 0x3f2f0f03
.word 0xbf2f0f03
.word 0x3f2f0f03
.word 0xbf2f0f03
.word 0x3f2f0f03
.word 0xbf2f0f03
.word 0x3f2f0f03
.word 0xbf2f0f03
.word 0x3f192288
.word 0xbf192288
.word 0x3f192288
.word 0xbf192288
.word 0x3f192288
.word 0xbf192288
.word 0x3f192288
.word 0xbf192288
.word 0x3f192288
.word 0xbf192288
.word 0x3e8c8423
.word 0xbe8c8423
.word 0x3e8c8423
.word 0xbe8c8423
.word 0x3e8c8423
.word 0xbe8c8423
.word 0x3e8c8423
.word 0xbe8c8423
.word 0x3e8c8423
.word 0xbe8c8423
.word 0x3ebbdbca
.word 0xbebbdbca
.word 0x3ebbdbca
.word 0xbebbdbca
.word 0x3ebbdbca
.word 0xbebbdbca
.word 0x3ebbdbca
.word 0xbebbdbca
.word 0x3ebbdbca
.word 0xbebbdbca
.word 0x3f4fdf25
.word 0xbf4fdf25
.word 0x3f4fdf25
.word 0xbf4fdf25
.word 0x3f4fdf25
.word 0xbf4fdf25
.word 0x3f4fdf25
.word 0xbf4fdf25
.word 0x3f4fdf25
.word 0xbf4fdf25
.word 0x3dfff770
.word 0xbdfff770
.word 0x3dfff770
.word 0xbdfff770
.word 0x3dfff770
.word 0xbdfff770
.word 0x3dfff770
.word 0xbdfff770
.word 0x3dfff770
.word 0xbdfff770
.word 0x3f0879c0
.word 0xbf0879c0
.word 0x3f0879c0
.word 0xbf0879c0
.word 0x3f0879c0
.word 0xbf0879c0
.word 0x3f0879c0
.word 0xbf0879c0
.word 0x3f0879c0
.word 0xbf0879c0
.word 0x3f016307
.word 0xbf016307
.word 0x3f016307
.word 0xbf016307
.word 0x3f016307
.word 0xbf016307
.word 0x3f016307
.word 0xbf016307
.word 0x3f016307
.word 0xbf016307
.word 0x3e7a6233
.word 0xbe7a6233
.word 0x3e7a6233
.word 0xbe7a6233
.word 0x3e7a6233
.word 0xbe7a6233
.word 0x3e7a6233
.word 0xbe7a6233
.word 0x3e7a6233
.word 0xbe7a6233
.word 0x3f03428f
.word 0xbf03428f
.word 0x3f03428f
.word 0xbf03428f
.word 0x3f03428f
.word 0xbf03428f
.word 0x3f03428f
.word 0xbf03428f
.word 0x3f03428f
.word 0xbf03428f
.word 0x3f57a1da
.word 0xbf57a1da
.word 0x3f57a1da
.word 0xbf57a1da
.word 0x3f57a1da
.word 0xbf57a1da
.word 0x3f57a1da
.word 0xbf57a1da
.word 0x3f57a1da
.word 0xbf57a1da
.word 0x3f0dfd66
.word 0xbf0dfd66
.word 0x3f0dfd66
.word 0xbf0dfd66
.word 0x3f0dfd66
.word 0xbf0dfd66
.word 0x3f0dfd66
.word 0xbf0dfd66
.word 0x3f0dfd66
.word 0xbf0dfd66
.word 0x3eacf4a9
.word 0xbeacf4a9
.word 0x3eacf4a9
.word 0xbeacf4a9
.word 0x3eacf4a9
.word 0xbeacf4a9
.word 0x3eacf4a9
.word 0xbeacf4a9
.word 0x3eacf4a9
.word 0xbeacf4a9
.word 0x3e98a9c9
.word 0xbe98a9c9
.word 0x3e98a9c9
.word 0xbe98a9c9
.word 0x3e98a9c9
.word 0xbe98a9c9
.word 0x3e98a9c9
.word 0xbe98a9c9
.word 0x3e98a9c9
.word 0xbe98a9c9
.word 0x3f15e976
.word 0xbf15e976
.word 0x3f15e976
.word 0xbf15e976
.word 0x3f15e976
.word 0xbf15e976
.word 0x3f15e976
.word 0xbf15e976
.word 0x3f15e976
.word 0xbf15e976
.word 0x3dff2205
.word 0xbdff2205
.word 0x3dff2205
.word 0xbdff2205
.word 0x3dff2205
.word 0xbdff2205
.word 0x3dff2205
.word 0xbdff2205
.word 0x3dff2205
.word 0xbdff2205
.word 0x3eb9a6c9
.word 0xbeb9a6c9
.word 0x3eb9a6c9
.word 0xbeb9a6c9
.word 0x3eb9a6c9
.word 0xbeb9a6c9
.word 0x3eb9a6c9
.word 0xbeb9a6c9
.word 0x3eb9a6c9
.word 0xbeb9a6c9
.word 0x3f2a64a6
.word 0xbf2a64a6
.word 0x3f2a64a6
.word 0xbf2a64a6
.word 0x3f2a64a6
.word 0xbf2a64a6
.word 0x3f2a64a6
.word 0xbf2a64a6
.word 0x3f2a64a6
.word 0xbf2a64a6
.word 0x3f7f9c1b
.word 0xbf7f9c1b
.word 0x3f7f9c1b
.word 0xbf7f9c1b
.word 0x3f7f9c1b
.word 0xbf7f9c1b
.word 0x3f7f9c1b
.word 0xbf7f9c1b
.word 0x3f7f9c1b
.word 0xbf7f9c1b
.word 0x3f15e8b3
.word 0xbf15e8b3
.word 0x3f15e8b3
.word 0xbf15e8b3
.word 0x3f15e8b3
.word 0xbf15e8b3
.word 0x3f15e8b3
.word 0xbf15e8b3
.word 0x3f15e8b3
.word 0xbf15e8b3
.word 0x3e919a57
.word 0xbe919a57
.word 0x3e919a57
.word 0xbe919a57
.word 0x3e919a57
.word 0xbe919a57
.word 0x3e919a57
.word 0xbe919a57
.word 0x3e919a57
.word 0xbe919a57
.word 0x3ebb8566
.word 0xbebb8566
.word 0x3ebb8566
.word 0xbebb8566
.word 0x3ebb8566
.word 0xbebb8566
.word 0x3ebb8566
.word 0xbebb8566
.word 0x3ebb8566
.word 0xbebb8566
.word 0x3f240b63
.word 0xbf240b63
.word 0x3f240b63
.word 0xbf240b63
.word 0x3f240b63
.word 0xbf240b63
.word 0x3f240b63
.word 0xbf240b63
.word 0x3f240b63
.word 0xbf240b63
.word 0x3f25d48b
.word 0xbf25d48b
.word 0x3f25d48b
.word 0xbf25d48b
.word 0x3f25d48b
.word 0xbf25d48b
.word 0x3f25d48b
.word 0xbf25d48b
.word 0x3f25d48b
.word 0xbf25d48b
.word 0x3f4286d0
.word 0xbf4286d0
.word 0x3f4286d0
.word 0xbf4286d0
.word 0x3f4286d0
.word 0xbf4286d0
.word 0x3f4286d0
.word 0xbf4286d0
.word 0x3f4286d0
.word 0xbf4286d0
.word 0x3f744d3c
.word 0xbf744d3c
.word 0x3f744d3c
.word 0xbf744d3c
.word 0x3f744d3c
.word 0xbf744d3c
.word 0x3f744d3c
.word 0xbf744d3c
.word 0x3f744d3c
.word 0xbf744d3c
.word 0x3e84505c
.word 0xbe84505c
.word 0x3e84505c
.word 0xbe84505c
.word 0x3e84505c
.word 0xbe84505c
.word 0x3e84505c
.word 0xbe84505c
.word 0x3e84505c
.word 0xbe84505c
.word 0x3ee0f902
.word 0xbee0f902
.word 0x3ee0f902
.word 0xbee0f902
.word 0x3ee0f902
.word 0xbee0f902
.word 0x3ee0f902
.word 0xbee0f902
.word 0x3ee0f902
.word 0xbee0f902
.word 0x3e263c26
.word 0xbe263c26
.word 0x3e263c26
.word 0xbe263c26
.word 0x3e263c26
.word 0xbe263c26
.word 0x3e263c26
.word 0xbe263c26
.word 0x3e263c26
.word 0xbe263c26
.word 0x3f304513
.word 0xbf304513
.word 0x3f304513
.word 0xbf304513
.word 0x3f304513
.word 0xbf304513
.word 0x3f304513
.word 0xbf304513
.word 0x3f304513
.word 0xbf304513
.word 0x3edc9d41
.word 0xbedc9d41
.word 0x3edc9d41
.word 0xbedc9d41
.word 0x3edc9d41
.word 0xbedc9d41
.word 0x3edc9d41
.word 0xbedc9d41
.word 0x3edc9d41
.word 0xbedc9d41
.word 0x3f07438e
.word 0xbf07438e
.word 0x3f07438e
.word 0xbf07438e
.word 0x3f07438e
.word 0xbf07438e
.word 0x3f07438e
.word 0xbf07438e
.word 0x3f07438e
.word 0xbf07438e
.word 0x3f0ec481
.word 0xbf0ec481
.word 0x3f0ec481
.word 0xbf0ec481
.word 0x3f0ec481
.word 0xbf0ec481
.word 0x3f0ec481
.word 0xbf0ec481
.word 0x3f0ec481
.word 0xbf0ec481
.word 0x3f3fd2f4
.word 0xbf3fd2f4
.word 0x3f3fd2f4
.word 0xbf3fd2f4
.word 0x3f3fd2f4
.word 0xbf3fd2f4
.word 0x3f3fd2f4
.word 0xbf3fd2f4
.word 0x3f3fd2f4
.word 0xbf3fd2f4
.word 0x3e1e4903
.word 0xbe1e4903
.word 0x3e1e4903
.word 0xbe1e4903
.word 0x3e1e4903
.word 0xbe1e4903
.word 0x3e1e4903
.word 0xbe1e4903
.word 0x3e1e4903
.word 0xbe1e4903
.word 0x3f712392
.word 0xbf712392
.word 0x3f712392
.word 0xbf712392
.word 0x3f712392
.word 0xbf712392
.word 0x3f712392
.word 0xbf712392
.word 0x3f712392
.word 0xbf712392
.word 0x3ea79ba7
.word 0xbea79ba7
.word 0x3ea79ba7
.word 0xbea79ba7
.word 0x3ea79ba7
.word 0xbea79ba7
.word 0x3ea79ba7
.word 0xbea79ba7
.word 0x3ea79ba7
.word 0xbea79ba7
.word 0x3da6f2e0
.word 0xbda6f2e0
.word 0x3da6f2e0
.word 0xbda6f2e0
.word 0x3da6f2e0
.word 0xbda6f2e0
.word 0x3da6f2e0
.word 0xbda6f2e0
.word 0x3da6f2e0
.word 0xbda6f2e0
.word 0x3e896bf2
.word 0xbe896bf2
.word 0x3e896bf2
.word 0xbe896bf2
.word 0x3e896bf2
.word 0xbe896bf2
.word 0x3e896bf2
.word 0xbe896bf2
.word 0x3e896bf2
.word 0xbe896bf2
.word 0x3f4cf704
.word 0xbf4cf704
.word 0x3f4cf704
.word 0xbf4cf704
.word 0x3f4cf704
.word 0xbf4cf704
.word 0x3f4cf704
.word 0xbf4cf704
.word 0x3f4cf704
.word 0xbf4cf704
.word 0x3f662a06
.word 0xbf662a06
.word 0x3f662a06
.word 0xbf662a06
.word 0x3f662a06
.word 0xbf662a06
.word 0x3f662a06
.word 0xbf662a06
.word 0x3f662a06
.word 0xbf662a06
.word 0x3efe235b
.word 0xbefe235b
.word 0x3efe235b
.word 0xbefe235b
.word 0x3efe235b
.word 0xbefe235b
.word 0x3efe235b
.word 0xbefe235b
.word 0x3efe235b
.word 0xbefe235b
.word 0x3f265322
.word 0xbf265322
.word 0x3f265322
.word 0xbf265322
.word 0x3f265322
.word 0xbf265322
.word 0x3f265322
.word 0xbf265322
.word 0x3f265322
.word 0xbf265322
.word 0x3f4777bb
.word 0xbf4777bb
.word 0x3f4777bb
.word 0xbf4777bb
.word 0x3f4777bb
.word 0xbf4777bb
.word 0x3f4777bb
.word 0xbf4777bb
.word 0x3f4777bb
.word 0xbf4777bb
.word 0x3f660414
.word 0xbf660414
.word 0x3f660414
.word 0xbf660414
.word 0x3f660414
.word 0xbf660414
.word 0x3f660414
.word 0xbf660414
.word 0x3f660414
.word 0xbf660414
.word 0x3f7a2aeb
.word 0xbf7a2aeb
.word 0x3f7a2aeb
.word 0xbf7a2aeb
.word 0x3f7a2aeb
.word 0xbf7a2aeb
.word 0x3f7a2aeb
.word 0xbf7a2aeb
.word 0x3f7a2aeb
.word 0xbf7a2aeb
.word 0x3e4c0915
.word 0xbe4c0915
.word 0x3e4c0915
.word 0xbe4c0915
.word 0x3e4c0915
.word 0xbe4c0915
.word 0x3e4c0915
.word 0xbe4c0915
.word 0x3e4c0915
.word 0xbe4c0915
.word 0x3f604868
.word 0xbf604868
.word 0x3f604868
.word 0xbf604868
.word 0x3f604868
.word 0xbf604868
.word 0x3f604868
.word 0xbf604868
.word 0x3f604868
.word 0xbf604868
.word 0x3d1f9daa
.word 0xbd1f9daa
.word 0x3d1f9daa
.word 0xbd1f9daa
.word 0x3d1f9daa
.word 0xbd1f9daa
.word 0x3d1f9daa
.word 0xbd1f9daa
.word 0x3d1f9daa
.word 0xbd1f9daa
.word 0x3f76af02
.word 0xbf76af02
.word 0x3f76af02
.word 0xbf76af02
.word 0x3f76af02
.word 0xbf76af02
.word 0x3f76af02
.word 0xbf76af02
.word 0x3f76af02
.word 0xbf76af02
.word 0x3f213e82
.word 0xbf213e82
.word 0x3f213e82
.word 0xbf213e82
.word 0x3f213e82
.word 0xbf213e82
.word 0x3f213e82
.word 0xbf213e82
.word 0x3f213e82
.word 0xbf213e82
.word 0x3ed91cb1
.word 0xbed91cb1
.word 0x3ed91cb1
.word 0xbed91cb1
.word 0x3ed91cb1
.word 0xbed91cb1
.word 0x3ed91cb1
.word 0xbed91cb1
.word 0x3ed91cb1
.word 0xbed91cb1
.word 0x3ebae14a
.word 0xbebae14a
.word 0x3ebae14a
.word 0xbebae14a
.word 0x3ebae14a
.word 0xbebae14a
.word 0x3ebae14a
.word 0xbebae14a
.word 0x3ebae14a
.word 0xbebae14a
.word 0x3ea389d2
.word 0xbea389d2
.word 0x3ea389d2
.word 0xbea389d2
.word 0x3ea389d2
.word 0xbea389d2
.word 0x3ea389d2
.word 0xbea389d2
.word 0x3ea389d2
.word 0xbea389d2
.word 0x3db84986
.word 0xbdb84986
.word 0x3db84986
.word 0xbdb84986
.word 0x3db84986
.word 0xbdb84986
.word 0x3db84986
.word 0xbdb84986
.word 0x3db84986
.word 0xbdb84986
.word 0x3f746b8a
.word 0xbf746b8a
.word 0x3f746b8a
.word 0xbf746b8a
.word 0x3f746b8a
.word 0xbf746b8a
.word 0x3f746b8a
.word 0xbf746b8a
.word 0x3f746b8a
.word 0xbf746b8a
.word 0x3f5a8840
.word 0xbf5a8840
.word 0x3f5a8840
.word 0xbf5a8840
.word 0x3f5a8840
.word 0xbf5a8840
.word 0x3f5a8840
.word 0xbf5a8840
.word 0x3f5a8840
.word 0xbf5a8840
.word 0x3e3c8146
.word 0xbe3c8146
.word 0x3e3c8146
.word 0xbe3c8146
.word 0x3e3c8146
.word 0xbe3c8146
.word 0x3e3c8146
.word 0xbe3c8146
.word 0x3e3c8146
.word 0xbe3c8146
.word 0x3e5258d7
.word 0xbe5258d7
.word 0x3e5258d7
.word 0xbe5258d7
.word 0x3e5258d7
.word 0xbe5258d7
.word 0x3e5258d7
.word 0xbe5258d7
.word 0x3e5258d7
.word 0xbe5258d7
.word 0x3f62037c
.word 0xbf62037c
.word 0x3f62037c
.word 0xbf62037c
.word 0x3f62037c
.word 0xbf62037c
.word 0x3f62037c
.word 0xbf62037c
.word 0x3f62037c
.word 0xbf62037c
.word 0x3f41c86a
.word 0xbf41c86a
.word 0x3f41c86a
.word 0xbf41c86a
.word 0x3f41c86a
.word 0xbf41c86a
.word 0x3f41c86a
.word 0xbf41c86a
.word 0x3f41c86a
.word 0xbf41c86a
.word 0x3ebd5d53
.word 0xbebd5d53
.word 0x3ebd5d53
.word 0xbebd5d53
.word 0x3ebd5d53
.word 0xbebd5d53
.word 0x3ebd5d53
.word 0xbebd5d53
.word 0x3ebd5d53
.word 0xbebd5d53
.word 0x3ec6414a
.word 0xbec6414a
.word 0x3ec6414a
.word 0xbec6414a
.word 0x3ec6414a
.word 0xbec6414a
.word 0x3ec6414a
.word 0xbec6414a
.word 0x3ec6414a
.word 0xbec6414a
.word 0x3e53a296
.word 0xbe53a296
.word 0x3e53a296
.word 0xbe53a296
.word 0x3e53a296
.word 0xbe53a296
.word 0x3e53a296
.word 0xbe53a296
.word 0x3e53a296
.word 0xbe53a296
.word 0x3b753f09
.word 0xbb753f09
.word 0x3b753f09
.word 0xbb753f09
.word 0x3b753f09
.word 0xbb753f09
.word 0x3b753f09
.word 0xbb753f09
.word 0x3b753f09
.word 0xbb753f09
.word 0x3f0ca7e5
.word 0xbf0ca7e5
.word 0x3f0ca7e5
.word 0xbf0ca7e5
.word 0x3f0ca7e5
.word 0xbf0ca7e5
.word 0x3f0ca7e5
.word 0xbf0ca7e5
.word 0x3f0ca7e5
.word 0xbf0ca7e5
.word 0x3d4dc359
.word 0xbd4dc359
.word 0x3d4dc359
.word 0xbd4dc359
.word 0x3d4dc359
.word 0xbd4dc359
.word 0x3d4dc359
.word 0xbd4dc359
.word 0x3d4dc359
.word 0xbd4dc359
.word 0x3dd6f5cf
.word 0xbdd6f5cf
.word 0x3dd6f5cf
.word 0xbdd6f5cf
.word 0x3dd6f5cf
.word 0xbdd6f5cf
.word 0x3dd6f5cf
.word 0xbdd6f5cf
.word 0x3dd6f5cf
.word 0xbdd6f5cf
.word 0x3e40e467
.word 0xbe40e467
.word 0x3e40e467
.word 0xbe40e467
.word 0x3e40e467
.word 0xbe40e467
.word 0x3e40e467
.word 0xbe40e467
.word 0x3e40e467
.word 0xbe40e467
.word 0x3e96e518
.word 0xbe96e518
.word 0x3e96e518
.word 0xbe96e518
.word 0x3e96e518
.word 0xbe96e518
.word 0x3e96e518
.word 0xbe96e518
.word 0x3e96e518
.word 0xbe96e518
.word 0x3eeb367c
.word 0xbeeb367c
.word 0x3eeb367c
.word 0xbeeb367c
.word 0x3eeb367c
.word 0xbeeb367c
.word 0x3eeb367c
.word 0xbeeb367c
.word 0x3eeb367c
.word 0xbeeb367c
.word 0x3dd08a9c
.word 0xbdd08a9c
.word 0x3dd08a9c
.word 0xbdd08a9c
.word 0x3dd08a9c
.word 0xbdd08a9c
.word 0x3dd08a9c
.word 0xbdd08a9c
.word 0x3dd08a9c
.word 0xbdd08a9c
.word 0x3d9cea69
.word 0xbd9cea69
.word 0x3d9cea69
.word 0xbd9cea69
.word 0x3d9cea69
.word 0xbd9cea69
.word 0x3d9cea69
.word 0xbd9cea69
.word 0x3d9cea69
.word 0xbd9cea69
.word 0x3e7836ad
.word 0xbe7836ad
.word 0x3e7836ad
.word 0xbe7836ad
.word 0x3e7836ad
.word 0xbe7836ad
.word 0x3e7836ad
.word 0xbe7836ad
.word 0x3e7836ad
.word 0xbe7836ad
.word 0x3f060210
.word 0xbf060210
.word 0x3f060210
.word 0xbf060210
.word 0x3f060210
.word 0xbf060210
.word 0x3f060210
.word 0xbf060210
.word 0x3f060210
.word 0xbf060210
.word 0x3ec64298
.word 0xbec64298
.word 0x3ec64298
.word 0xbec64298
.word 0x3ec64298
.word 0xbec64298
.word 0x3ec64298
.word 0xbec64298
.word 0x3ec64298
.word 0xbec64298
.word 0x3f4f840c
.word 0xbf4f840c
.word 0x3f4f840c
.word 0xbf4f840c
.word 0x3f4f840c
.word 0xbf4f840c
.word 0x3f4f840c
.word 0xbf4f840c
.word 0x3f4f840c
.word 0xbf4f840c
.word 0x3ed94445
.word 0xbed94445
.word 0x3ed94445
.word 0xbed94445
.word 0x3ed94445
.word 0xbed94445
.word 0x3ed94445
.word 0xbed94445
.word 0x3ed94445
.word 0xbed94445
.word 0x3eceb37d
.word 0xbeceb37d
.word 0x3eceb37d
.word 0xbeceb37d
.word 0x3eceb37d
.word 0xbeceb37d
.word 0x3eceb37d
.word 0xbeceb37d
.word 0x3eceb37d
.word 0xbeceb37d
.word 0x3ed323db
.word 0xbed323db
.word 0x3ed323db
.word 0xbed323db
.word 0x3ed323db
.word 0xbed323db
.word 0x3ed323db
.word 0xbed323db
.word 0x3ed323db
.word 0xbed323db
.word 0x3d141e08
.word 0xbd141e08
.word 0x3d141e08
.word 0xbd141e08
.word 0x3d141e08
.word 0xbd141e08
.word 0x3d141e08
.word 0xbd141e08
.word 0x3d141e08
.word 0xbd141e08
.word 0x3e3dfc66
.word 0xbe3dfc66
.word 0x3e3dfc66
.word 0xbe3dfc66
.word 0x3e3dfc66
.word 0xbe3dfc66
.word 0x3e3dfc66
.word 0xbe3dfc66
.word 0x3e3dfc66
.word 0xbe3dfc66
.word 0x3e963d95
.word 0xbe963d95
.word 0x3e963d95
.word 0xbe963d95
.word 0x3e963d95
.word 0xbe963d95
.word 0x3e963d95
.word 0xbe963d95
.word 0x3e963d95
.word 0xbe963d95
.word 0x3f6414c8
.word 0xbf6414c8
.word 0x3f6414c8
.word 0xbf6414c8
.word 0x3f6414c8
.word 0xbf6414c8
.word 0x3f6414c8
.word 0xbf6414c8
.word 0x3f6414c8
.word 0xbf6414c8
.word 0x3efbef34
.word 0xbefbef34
.word 0x3efbef34
.word 0xbefbef34
.word 0x3efbef34
.word 0xbefbef34
.word 0x3efbef34
.word 0xbefbef34
.word 0x3efbef34
.word 0xbefbef34
.word 0x3f6b67e7
.word 0xbf6b67e7
.word 0x3f6b67e7
.word 0xbf6b67e7
.word 0x3f6b67e7
.word 0xbf6b67e7
.word 0x3f6b67e7
.word 0xbf6b67e7
.word 0x3f6b67e7
.word 0xbf6b67e7
.word 0x3e498b52
.word 0xbe498b52
.word 0x3e498b52
.word 0xbe498b52
.word 0x3e498b52
.word 0xbe498b52
.word 0x3e498b52
.word 0xbe498b52
.word 0x3e498b52
.word 0xbe498b52
.word 0x3f42ea11
.word 0xbf42ea11
.word 0x3f42ea11
.word 0xbf42ea11
.word 0x3f42ea11
.word 0xbf42ea11
.word 0x3f42ea11
.word 0xbf42ea11
.word 0x3f42ea11
.word 0xbf42ea11
.word 0x3f4f163a
.word 0xbf4f163a
.word 0x3f4f163a
.word 0xbf4f163a
.word 0x3f4f163a
.word 0xbf4f163a
.word 0x3f4f163a
.word 0xbf4f163a
.word 0x3f4f163a
.word 0xbf4f163a
.word 0x3f2cbf68
.word 0xbf2cbf68
.word 0x3f2cbf68
.word 0xbf2cbf68
.word 0x3f2cbf68
.word 0xbf2cbf68
.word 0x3f2cbf68
.word 0xbf2cbf68
.word 0x3f2cbf68
.word 0xbf2cbf68
.word 0x3e079323
.word 0xbe079323
.word 0x3e079323
.word 0xbe079323
.word 0x3e079323
.word 0xbe079323
.word 0x3e079323
.word 0xbe079323
.word 0x3e079323
.word 0xbe079323
.word 0x3f7fb51a
.word 0xbf7fb51a
.word 0x3f7fb51a
.word 0xbf7fb51a
.word 0x3f7fb51a
.word 0xbf7fb51a
.word 0x3f7fb51a
.word 0xbf7fb51a
.word 0x3f7fb51a
.word 0xbf7fb51a
.word 0x3e335bd6
.word 0xbe335bd6
.word 0x3e335bd6
.word 0xbe335bd6
.word 0x3e335bd6
.word 0xbe335bd6
.word 0x3e335bd6
.word 0xbe335bd6
.word 0x3e335bd6
.word 0xbe335bd6
.word 0x3e8f82de
.word 0xbe8f82de
.word 0x3e8f82de
.word 0xbe8f82de
.word 0x3e8f82de
.word 0xbe8f82de
.word 0x3e8f82de
.word 0xbe8f82de
.word 0x3e8f82de
.word 0xbe8f82de
.word 0x3ee710e2
.word 0xbee710e2
.word 0x3ee710e2
.word 0xbee710e2
.word 0x3ee710e2
.word 0xbee710e2
.word 0x3ee710e2
.word 0xbee710e2
.word 0x3ee710e2
.word 0xbee710e2
.word 0x3f3d5060
.word 0xbf3d5060
.word 0x3f3d5060
.word 0xbf3d5060
.word 0x3f3d5060
.word 0xbf3d5060
.word 0x3f3d5060
.word 0xbf3d5060
.word 0x3f3d5060
.word 0xbf3d5060
.word 0x3f05e2af
.word 0xbf05e2af
.word 0x3f05e2af
.word 0xbf05e2af
.word 0x3f05e2af
.word 0xbf05e2af
.word 0x3f05e2af
.word 0xbf05e2af
.word 0x3f05e2af
.word 0xbf05e2af
.word 0x3db22742
.word 0xbdb22742
.word 0x3db22742
.word 0xbdb22742
.word 0x3db22742
.word 0xbdb22742
.word 0x3db22742
.word 0xbdb22742
.word 0x3db22742
.word 0xbdb22742
.word 0x3f10da1d
.word 0xbf10da1d
.word 0x3f10da1d
.word 0xbf10da1d
.word 0x3f10da1d
.word 0xbf10da1d
.word 0x3f10da1d
.word 0xbf10da1d
.word 0x3f10da1d
.word 0xbf10da1d
.word 0x3f0721a7
.word 0xbf0721a7
.word 0x3f0721a7
.word 0xbf0721a7
.word 0x3f0721a7
.word 0xbf0721a7
.word 0x3f0721a7
.word 0xbf0721a7
.word 0x3f0721a7
.word 0xbf0721a7
.word 0x3dcf2ddf
.word 0xbdcf2ddf
.word 0x3dcf2ddf
.word 0xbdcf2ddf
.word 0x3dcf2ddf
.word 0xbdcf2ddf
.word 0x3dcf2ddf
.word 0xbdcf2ddf
.word 0x3dcf2ddf
.word 0xbdcf2ddf
.word 0x3f309a2b
.word 0xbf309a2b
.word 0x3f309a2b
.word 0xbf309a2b
.word 0x3f309a2b
.word 0xbf309a2b
.word 0x3f309a2b
.word 0xbf309a2b
.word 0x3f309a2b
.word 0xbf309a2b
.word 0x3e425669
.word 0xbe425669
.word 0x3e425669
.word 0xbe425669
.word 0x3e425669
.word 0xbe425669
.word 0x3e425669
.word 0xbe425669
.word 0x3e425669
.word 0xbe425669
.word 0x3db8d6f4
.word 0xbdb8d6f4
.word 0x3db8d6f4
.word 0xbdb8d6f4
.word 0x3db8d6f4
.word 0xbdb8d6f4
.word 0x3db8d6f4
.word 0xbdb8d6f4
.word 0x3db8d6f4
.word 0xbdb8d6f4
.word 0x3ec36523
.word 0xbec36523
.word 0x3ec36523
.word 0xbec36523
.word 0x3ec36523
.word 0xbec36523
.word 0x3ec36523
.word 0xbec36523
.word 0x3ec36523
.word 0xbec36523
.word 0x3f37d979
.word 0xbf37d979
.word 0x3f37d979
.word 0xbf37d979
.word 0x3f37d979
.word 0xbf37d979
.word 0x3f37d979
.word 0xbf37d979
.word 0x3f37d979
.word 0xbf37d979
.word 0x3dbc2f4f
.word 0xbdbc2f4f
.word 0x3dbc2f4f
.word 0xbdbc2f4f
.word 0x3dbc2f4f
.word 0xbdbc2f4f
.word 0x3dbc2f4f
.word 0xbdbc2f4f
.word 0x3dbc2f4f
.word 0xbdbc2f4f
.word 0x3f05fdbd
.word 0xbf05fdbd
.word 0x3f05fdbd
.word 0xbf05fdbd
.word 0x3f05fdbd
.word 0xbf05fdbd
.word 0x3f05fdbd
.word 0xbf05fdbd
.word 0x3f05fdbd
.word 0xbf05fdbd
.word 0x3e5d63e7
.word 0xbe5d63e7
.word 0x3e5d63e7
.word 0xbe5d63e7
.word 0x3e5d63e7
.word 0xbe5d63e7
.word 0x3e5d63e7
.word 0xbe5d63e7
.word 0x3e5d63e7
.word 0xbe5d63e7
.word 0x3efa3a33
.word 0xbefa3a33
.word 0x3efa3a33
.word 0xbefa3a33
.word 0x3efa3a33
.word 0xbefa3a33
.word 0x3efa3a33
.word 0xbefa3a33
.word 0x3efa3a33
.word 0xbefa3a33
.word 0x3f14556b
.word 0xbf14556b
.word 0x3f14556b
.word 0xbf14556b
.word 0x3f14556b
.word 0xbf14556b
.word 0x3f14556b
.word 0xbf14556b
.word 0x3f14556b
.word 0xbf14556b
.word 0x3e1f4fe0
.word 0xbe1f4fe0
.word 0x3e1f4fe0
.word 0xbe1f4fe0
.word 0x3e1f4fe0
.word 0xbe1f4fe0
.word 0x3e1f4fe0
.word 0xbe1f4fe0
.word 0x3e1f4fe0
.word 0xbe1f4fe0
.word 0x3f45f7d6
.word 0xbf45f7d6
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_2:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_3:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_4:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_5:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_6:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_7:
    .fill 316*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
