
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.5.2
// timestamp : Tue Sep  7 16:50:33 2021 GMT
// usage     : riscv_ctg \
//                  -- cgf $cgf \
//                  -- xlen $xlen \
// -----------
//
// -----------
// Copyright (c) 2021. IIT Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fsub.s instruction of the RISC-V F extension for the fsub_b8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fsub_b8)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs1 == rs2 == rd, rs1==f26, rs2==f26, rd==f26, fs1 == 0 and fe1 == 0x7e and fm1 == 0x5d9a4e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5d9a4e and rm_val == 0  
// opcode: fsub.s ; op1:f26; op2:f26; dest:f26; op1val:0x3f5d9a4e; op2val:0x3f5d9a4e; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f26, f26, f26, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1:
// rs1 == rd != rs2, rs1==f3, rs2==f31, rd==f3, fs1 == 0 and fe1 == 0x7c and fm1 == 0x773be8 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x773be8 and rm_val == 4  
// opcode: fsub.s ; op1:f3; op2:f31; dest:f3; op1val:0x3e773be8; op2val:0x3e773be8; valaddr_reg:x16; val_offset:8; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f3, f3, f31, 0x4, 0, x16, 8, x17, x15, 8, x18)

inst_2:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==f4, rs2==f8, rd==f18, fs1 == 0 and fe1 == 0x7c and fm1 == 0x773be8 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x773be8 and rm_val == 3  
// opcode: fsub.s ; op1:f4; op2:f8; dest:f18; op1val:0x3e773be8; op2val:0x3e773be8; valaddr_reg:x16; val_offset:16; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f18, f4, f8, 0x3, 0, x16, 16, x17, x15, 16, x18)

inst_3:
// rs2 == rd != rs1, rs1==f18, rs2==f22, rd==f22, fs1 == 0 and fe1 == 0x7c and fm1 == 0x773be8 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x773be8 and rm_val == 2  
// opcode: fsub.s ; op1:f18; op2:f22; dest:f22; op1val:0x3e773be8; op2val:0x3e773be8; valaddr_reg:x16; val_offset:24; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f22, f18, f22, 0x2, 0, x16, 24, x17, x15, 24, x18)

inst_4:
// rs1 == rs2 != rd, rs1==f5, rs2==f5, rd==f24, fs1 == 0 and fe1 == 0x7c and fm1 == 0x773be8 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x773be8 and rm_val == 1  
// opcode: fsub.s ; op1:f5; op2:f5; dest:f24; op1val:0x3e773be8; op2val:0x3e773be8; valaddr_reg:x16; val_offset:32; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f24, f5, f5, 0x1, 0, x16, 32, x17, x15, 32, x18)

inst_5:
// rs1==f28, rs2==f7, rd==f31, fs1 == 0 and fe1 == 0x7c and fm1 == 0x773be8 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x773be8 and rm_val == 0  
// opcode: fsub.s ; op1:f28; op2:f7; dest:f31; op1val:0x3e773be8; op2val:0x3e773be8; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f31, f28, f7, 0x0, 0, x16, 40, x17, x15, 40, x18)

inst_6:
// rs1==f10, rs2==f15, rd==f11, fs1 == 0 and fe1 == 0x7e and fm1 == 0x199e47 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x199e47 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f15; dest:f11; op1val:0x3f199e47; op2val:0x3f199e47; valaddr_reg:x16; val_offset:48; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f11, f10, f15, 0x4, 0, x16, 48, x17, x15, 48, x18)

inst_7:
// rs1==f9, rs2==f0, rd==f16, fs1 == 0 and fe1 == 0x7e and fm1 == 0x199e47 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x199e47 and rm_val == 3  
// opcode: fsub.s ; op1:f9; op2:f0; dest:f16; op1val:0x3f199e47; op2val:0x3f199e47; valaddr_reg:x16; val_offset:56; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f16, f9, f0, 0x3, 0, x16, 56, x17, x15, 56, x18)

inst_8:
// rs1==f17, rs2==f3, rd==f7, fs1 == 0 and fe1 == 0x7e and fm1 == 0x199e47 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x199e47 and rm_val == 2  
// opcode: fsub.s ; op1:f17; op2:f3; dest:f7; op1val:0x3f199e47; op2val:0x3f199e47; valaddr_reg:x16; val_offset:64; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f7, f17, f3, 0x2, 0, x16, 64, x17, x15, 64, x18)

inst_9:
// rs1==f6, rs2==f19, rd==f17, fs1 == 0 and fe1 == 0x7e and fm1 == 0x199e47 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x199e47 and rm_val == 1  
// opcode: fsub.s ; op1:f6; op2:f19; dest:f17; op1val:0x3f199e47; op2val:0x3f199e47; valaddr_reg:x16; val_offset:72; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f17, f6, f19, 0x1, 0, x16, 72, x17, x15, 72, x18)

inst_10:
// rs1==f8, rs2==f27, rd==f0, fs1 == 0 and fe1 == 0x7e and fm1 == 0x199e47 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x199e47 and rm_val == 0  
// opcode: fsub.s ; op1:f8; op2:f27; dest:f0; op1val:0x3f199e47; op2val:0x3f199e47; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f0, f8, f27, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_11:
// rs1==f22, rs2==f25, rd==f29, fs1 == 0 and fe1 == 0x7d and fm1 == 0x56e8fa and fs2 == 0 and fe2 == 0x7d and fm2 == 0x56e8fa and rm_val == 4  
// opcode: fsub.s ; op1:f22; op2:f25; dest:f29; op1val:0x3ed6e8fa; op2val:0x3ed6e8fa; valaddr_reg:x16; val_offset:88; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f29, f22, f25, 0x4, 0, x16, 88, x17, x15, 88, x18)

inst_12:
// rs1==f29, rs2==f16, rd==f9, fs1 == 0 and fe1 == 0x7d and fm1 == 0x56e8fa and fs2 == 0 and fe2 == 0x7d and fm2 == 0x56e8fa and rm_val == 3  
// opcode: fsub.s ; op1:f29; op2:f16; dest:f9; op1val:0x3ed6e8fa; op2val:0x3ed6e8fa; valaddr_reg:x16; val_offset:96; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f9, f29, f16, 0x3, 0, x16, 96, x17, x15, 96, x18)

inst_13:
// rs1==f20, rs2==f14, rd==f30, fs1 == 0 and fe1 == 0x7d and fm1 == 0x56e8fa and fs2 == 0 and fe2 == 0x7d and fm2 == 0x56e8fa and rm_val == 2  
// opcode: fsub.s ; op1:f20; op2:f14; dest:f30; op1val:0x3ed6e8fa; op2val:0x3ed6e8fa; valaddr_reg:x16; val_offset:104; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f30, f20, f14, 0x2, 0, x16, 104, x17, x15, 104, x18)

inst_14:
// rs1==f7, rs2==f11, rd==f28, fs1 == 0 and fe1 == 0x7d and fm1 == 0x56e8fa and fs2 == 0 and fe2 == 0x7d and fm2 == 0x56e8fa and rm_val == 1  
// opcode: fsub.s ; op1:f7; op2:f11; dest:f28; op1val:0x3ed6e8fa; op2val:0x3ed6e8fa; valaddr_reg:x16; val_offset:112; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f28, f7, f11, 0x1, 0, x16, 112, x17, x15, 112, x18)

inst_15:
// rs1==f0, rs2==f20, rd==f27, fs1 == 0 and fe1 == 0x7d and fm1 == 0x56e8fa and fs2 == 0 and fe2 == 0x7d and fm2 == 0x56e8fa and rm_val == 0  
// opcode: fsub.s ; op1:f0; op2:f20; dest:f27; op1val:0x3ed6e8fa; op2val:0x3ed6e8fa; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f27, f0, f20, 0x0, 0, x16, 120, x17, x15, 120, x18)

inst_16:
// rs1==f12, rs2==f13, rd==f20, fs1 == 0 and fe1 == 0x7e and fm1 == 0x2e305e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2e305e and rm_val == 4  
// opcode: fsub.s ; op1:f12; op2:f13; dest:f20; op1val:0x3f2e305e; op2val:0x3f2e305e; valaddr_reg:x16; val_offset:128; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f20, f12, f13, 0x4, 0, x16, 128, x17, x15, 128, x18)

inst_17:
// rs1==f1, rs2==f28, rd==f19, fs1 == 0 and fe1 == 0x7e and fm1 == 0x2e305e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2e305e and rm_val == 3  
// opcode: fsub.s ; op1:f1; op2:f28; dest:f19; op1val:0x3f2e305e; op2val:0x3f2e305e; valaddr_reg:x16; val_offset:136; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f19, f1, f28, 0x3, 0, x16, 136, x17, x15, 136, x18)

inst_18:
// rs1==f15, rs2==f29, rd==f21, fs1 == 0 and fe1 == 0x7e and fm1 == 0x2e305e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2e305e and rm_val == 2  
// opcode: fsub.s ; op1:f15; op2:f29; dest:f21; op1val:0x3f2e305e; op2val:0x3f2e305e; valaddr_reg:x16; val_offset:144; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f21, f15, f29, 0x2, 0, x16, 144, x17, x15, 144, x18)

inst_19:
// rs1==f25, rs2==f9, rd==f15, fs1 == 0 and fe1 == 0x7e and fm1 == 0x2e305e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2e305e and rm_val == 1  
// opcode: fsub.s ; op1:f25; op2:f9; dest:f15; op1val:0x3f2e305e; op2val:0x3f2e305e; valaddr_reg:x16; val_offset:152; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f15, f25, f9, 0x1, 0, x16, 152, x17, x15, 152, x18)

inst_20:
// rs1==f2, rs2==f17, rd==f23, fs1 == 0 and fe1 == 0x7e and fm1 == 0x2e305e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2e305e and rm_val == 0  
// opcode: fsub.s ; op1:f2; op2:f17; dest:f23; op1val:0x3f2e305e; op2val:0x3f2e305e; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f23, f2, f17, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_21:
// rs1==f19, rs2==f18, rd==f1, fs1 == 0 and fe1 == 0x7c and fm1 == 0x4f6b2d and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4f6b2d and rm_val == 4  
// opcode: fsub.s ; op1:f19; op2:f18; dest:f1; op1val:0x3e4f6b2d; op2val:0x3e4f6b2d; valaddr_reg:x16; val_offset:168; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f1, f19, f18, 0x4, 0, x16, 168, x17, x15, 168, x18)

inst_22:
// rs1==f16, rs2==f23, rd==f25, fs1 == 0 and fe1 == 0x7c and fm1 == 0x4f6b2d and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4f6b2d and rm_val == 3  
// opcode: fsub.s ; op1:f16; op2:f23; dest:f25; op1val:0x3e4f6b2d; op2val:0x3e4f6b2d; valaddr_reg:x16; val_offset:176; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f25, f16, f23, 0x3, 0, x16, 176, x17, x15, 176, x18)

inst_23:
// rs1==f31, rs2==f4, rd==f10, fs1 == 0 and fe1 == 0x7c and fm1 == 0x4f6b2d and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4f6b2d and rm_val == 2  
// opcode: fsub.s ; op1:f31; op2:f4; dest:f10; op1val:0x3e4f6b2d; op2val:0x3e4f6b2d; valaddr_reg:x16; val_offset:184; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f10, f31, f4, 0x2, 0, x16, 184, x17, x15, 184, x18)

inst_24:
// rs1==f27, rs2==f12, rd==f13, fs1 == 0 and fe1 == 0x7c and fm1 == 0x4f6b2d and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4f6b2d and rm_val == 1  
// opcode: fsub.s ; op1:f27; op2:f12; dest:f13; op1val:0x3e4f6b2d; op2val:0x3e4f6b2d; valaddr_reg:x16; val_offset:192; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f13, f27, f12, 0x1, 0, x16, 192, x17, x15, 192, x18)

inst_25:
// rs1==f14, rs2==f2, rd==f12, fs1 == 0 and fe1 == 0x7c and fm1 == 0x4f6b2d and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4f6b2d and rm_val == 0  
// opcode: fsub.s ; op1:f14; op2:f2; dest:f12; op1val:0x3e4f6b2d; op2val:0x3e4f6b2d; valaddr_reg:x16; val_offset:200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f14, f2, 0x0, 0, x16, 200, x17, x15, 200, x18)

inst_26:
// rs1==f30, rs2==f10, rd==f5, fs1 == 0 and fe1 == 0x77 and fm1 == 0x37b77e and fs2 == 0 and fe2 == 0x77 and fm2 == 0x37b77e and rm_val == 4  
// opcode: fsub.s ; op1:f30; op2:f10; dest:f5; op1val:0x3bb7b77e; op2val:0x3bb7b77e; valaddr_reg:x16; val_offset:208; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f5, f30, f10, 0x4, 0, x16, 208, x17, x15, 208, x18)

inst_27:
// rs1==f23, rs2==f1, rd==f2, fs1 == 0 and fe1 == 0x77 and fm1 == 0x37b77e and fs2 == 0 and fe2 == 0x77 and fm2 == 0x37b77e and rm_val == 3  
// opcode: fsub.s ; op1:f23; op2:f1; dest:f2; op1val:0x3bb7b77e; op2val:0x3bb7b77e; valaddr_reg:x16; val_offset:216; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f2, f23, f1, 0x3, 0, x16, 216, x17, x15, 216, x18)

inst_28:
// rs1==f24, rs2==f30, rd==f4, fs1 == 0 and fe1 == 0x77 and fm1 == 0x37b77e and fs2 == 0 and fe2 == 0x77 and fm2 == 0x37b77e and rm_val == 2  
// opcode: fsub.s ; op1:f24; op2:f30; dest:f4; op1val:0x3bb7b77e; op2val:0x3bb7b77e; valaddr_reg:x16; val_offset:224; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f4, f24, f30, 0x2, 0, x16, 224, x17, x15, 224, x18)

inst_29:
// rs1==f11, rs2==f6, rd==f14, fs1 == 0 and fe1 == 0x77 and fm1 == 0x37b77e and fs2 == 0 and fe2 == 0x77 and fm2 == 0x37b77e and rm_val == 1  
// opcode: fsub.s ; op1:f11; op2:f6; dest:f14; op1val:0x3bb7b77e; op2val:0x3bb7b77e; valaddr_reg:x16; val_offset:232; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f14, f11, f6, 0x1, 0, x16, 232, x17, x15, 232, x18)

inst_30:
// rs1==f21, rs2==f24, rd==f6, fs1 == 0 and fe1 == 0x77 and fm1 == 0x37b77e and fs2 == 0 and fe2 == 0x77 and fm2 == 0x37b77e and rm_val == 0  
// opcode: fsub.s ; op1:f21; op2:f24; dest:f6; op1val:0x3bb7b77e; op2val:0x3bb7b77e; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f6, f21, f24, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_31:
// rs1==f13, rs2==f21, rd==f8, fs1 == 0 and fe1 == 0x7d and fm1 == 0x501139 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x501139 and rm_val == 4  
// opcode: fsub.s ; op1:f13; op2:f21; dest:f8; op1val:0x3ed01139; op2val:0x3ed01139; valaddr_reg:x16; val_offset:248; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f8, f13, f21, 0x4, 0, x16, 248, x17, x15, 248, x18)

inst_32:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x501139 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x501139 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed01139; op2val:0x3ed01139; valaddr_reg:x16; val_offset:256; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 256, x17, x15, 256, x18)

inst_33:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x501139 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x501139 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed01139; op2val:0x3ed01139; valaddr_reg:x16; val_offset:264; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 264, x17, x15, 264, x18)

inst_34:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x501139 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x501139 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed01139; op2val:0x3ed01139; valaddr_reg:x16; val_offset:272; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 272, x17, x15, 272, x18)

inst_35:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x501139 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x501139 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed01139; op2val:0x3ed01139; valaddr_reg:x16; val_offset:280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 280, x17, x15, 280, x18)

inst_36:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x11f408 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x11f408 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e91f408; op2val:0x3e91f408; valaddr_reg:x16; val_offset:288; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 288, x17, x15, 288, x18)

inst_37:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x11f408 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x11f408 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e91f408; op2val:0x3e91f408; valaddr_reg:x16; val_offset:296; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 296, x17, x15, 296, x18)

inst_38:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x11f408 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x11f408 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e91f408; op2val:0x3e91f408; valaddr_reg:x16; val_offset:304; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 304, x17, x15, 304, x18)

inst_39:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x11f408 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x11f408 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e91f408; op2val:0x3e91f408; valaddr_reg:x16; val_offset:312; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 312, x17, x15, 312, x18)

inst_40:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x11f408 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x11f408 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e91f408; op2val:0x3e91f408; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_41:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x57130e and fs2 == 0 and fe2 == 0x7d and fm2 == 0x57130e and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed7130e; op2val:0x3ed7130e; valaddr_reg:x16; val_offset:328; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 328, x17, x15, 328, x18)

inst_42:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x57130e and fs2 == 0 and fe2 == 0x7d and fm2 == 0x57130e and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed7130e; op2val:0x3ed7130e; valaddr_reg:x16; val_offset:336; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 336, x17, x15, 336, x18)

inst_43:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x57130e and fs2 == 0 and fe2 == 0x7d and fm2 == 0x57130e and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed7130e; op2val:0x3ed7130e; valaddr_reg:x16; val_offset:344; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 344, x17, x15, 344, x18)

inst_44:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x57130e and fs2 == 0 and fe2 == 0x7d and fm2 == 0x57130e and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed7130e; op2val:0x3ed7130e; valaddr_reg:x16; val_offset:352; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 352, x17, x15, 352, x18)

inst_45:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x57130e and fs2 == 0 and fe2 == 0x7d and fm2 == 0x57130e and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed7130e; op2val:0x3ed7130e; valaddr_reg:x16; val_offset:360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 360, x17, x15, 360, x18)

inst_46:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x382a99 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x382a99 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e382a99; op2val:0x3e382a99; valaddr_reg:x16; val_offset:368; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 368, x17, x15, 368, x18)

inst_47:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x382a99 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x382a99 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e382a99; op2val:0x3e382a99; valaddr_reg:x16; val_offset:376; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 376, x17, x15, 376, x18)

inst_48:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x382a99 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x382a99 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e382a99; op2val:0x3e382a99; valaddr_reg:x16; val_offset:384; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 384, x17, x15, 384, x18)

inst_49:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x382a99 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x382a99 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e382a99; op2val:0x3e382a99; valaddr_reg:x16; val_offset:392; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 392, x17, x15, 392, x18)

inst_50:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x382a99 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x382a99 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e382a99; op2val:0x3e382a99; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_51:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x54d6ca and fs2 == 0 and fe2 == 0x7e and fm2 == 0x54d6ca and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f54d6ca; op2val:0x3f54d6ca; valaddr_reg:x16; val_offset:408; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 408, x17, x15, 408, x18)

inst_52:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x54d6ca and fs2 == 0 and fe2 == 0x7e and fm2 == 0x54d6ca and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f54d6ca; op2val:0x3f54d6ca; valaddr_reg:x16; val_offset:416; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 416, x17, x15, 416, x18)

inst_53:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x54d6ca and fs2 == 0 and fe2 == 0x7e and fm2 == 0x54d6ca and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f54d6ca; op2val:0x3f54d6ca; valaddr_reg:x16; val_offset:424; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 424, x17, x15, 424, x18)

inst_54:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x54d6ca and fs2 == 0 and fe2 == 0x7e and fm2 == 0x54d6ca and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f54d6ca; op2val:0x3f54d6ca; valaddr_reg:x16; val_offset:432; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 432, x17, x15, 432, x18)

inst_55:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x54d6ca and fs2 == 0 and fe2 == 0x7e and fm2 == 0x54d6ca and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f54d6ca; op2val:0x3f54d6ca; valaddr_reg:x16; val_offset:440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 440, x17, x15, 440, x18)

inst_56:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x01462e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x01462e and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f01462e; op2val:0x3f01462e; valaddr_reg:x16; val_offset:448; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 448, x17, x15, 448, x18)

inst_57:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x01462e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x01462e and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f01462e; op2val:0x3f01462e; valaddr_reg:x16; val_offset:456; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 456, x17, x15, 456, x18)

inst_58:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x01462e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x01462e and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f01462e; op2val:0x3f01462e; valaddr_reg:x16; val_offset:464; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 464, x17, x15, 464, x18)

inst_59:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x01462e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x01462e and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f01462e; op2val:0x3f01462e; valaddr_reg:x16; val_offset:472; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 472, x17, x15, 472, x18)

inst_60:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x01462e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x01462e and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f01462e; op2val:0x3f01462e; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_61:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x679ef3 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x679ef3 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f679ef3; op2val:0x3f679ef3; valaddr_reg:x16; val_offset:488; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 488, x17, x15, 488, x18)

inst_62:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x679ef3 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x679ef3 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f679ef3; op2val:0x3f679ef3; valaddr_reg:x16; val_offset:496; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 496, x17, x15, 496, x18)

inst_63:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x679ef3 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x679ef3 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f679ef3; op2val:0x3f679ef3; valaddr_reg:x16; val_offset:504; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 504, x17, x15, 504, x18)

inst_64:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x679ef3 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x679ef3 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f679ef3; op2val:0x3f679ef3; valaddr_reg:x16; val_offset:512; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 512, x17, x15, 512, x18)

inst_65:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x679ef3 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x679ef3 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f679ef3; op2val:0x3f679ef3; valaddr_reg:x16; val_offset:520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 520, x17, x15, 520, x18)

inst_66:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x61c65a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x61c65a and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f61c65a; op2val:0x3f61c65a; valaddr_reg:x16; val_offset:528; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 528, x17, x15, 528, x18)

inst_67:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x61c65a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x61c65a and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f61c65a; op2val:0x3f61c65a; valaddr_reg:x16; val_offset:536; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 536, x17, x15, 536, x18)

inst_68:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x61c65a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x61c65a and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f61c65a; op2val:0x3f61c65a; valaddr_reg:x16; val_offset:544; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 544, x17, x15, 544, x18)

inst_69:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x61c65a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x61c65a and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f61c65a; op2val:0x3f61c65a; valaddr_reg:x16; val_offset:552; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 552, x17, x15, 552, x18)

inst_70:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x61c65a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x61c65a and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f61c65a; op2val:0x3f61c65a; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_71:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2855a5 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2855a5 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2855a5; op2val:0x3f2855a5; valaddr_reg:x16; val_offset:568; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 568, x17, x15, 568, x18)

inst_72:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2855a5 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2855a5 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2855a5; op2val:0x3f2855a5; valaddr_reg:x16; val_offset:576; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 576, x17, x15, 576, x18)

inst_73:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2855a5 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2855a5 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2855a5; op2val:0x3f2855a5; valaddr_reg:x16; val_offset:584; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 584, x17, x15, 584, x18)

inst_74:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2855a5 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2855a5 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2855a5; op2val:0x3f2855a5; valaddr_reg:x16; val_offset:592; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 592, x17, x15, 592, x18)

inst_75:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2855a5 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2855a5 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2855a5; op2val:0x3f2855a5; valaddr_reg:x16; val_offset:600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 600, x17, x15, 600, x18)

inst_76:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x12f53e and fs2 == 0 and fe2 == 0x7a and fm2 == 0x12f53e and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d12f53e; op2val:0x3d12f53e; valaddr_reg:x16; val_offset:608; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 608, x17, x15, 608, x18)

inst_77:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x12f53e and fs2 == 0 and fe2 == 0x7a and fm2 == 0x12f53e and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d12f53e; op2val:0x3d12f53e; valaddr_reg:x16; val_offset:616; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 616, x17, x15, 616, x18)

inst_78:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x12f53e and fs2 == 0 and fe2 == 0x7a and fm2 == 0x12f53e and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d12f53e; op2val:0x3d12f53e; valaddr_reg:x16; val_offset:624; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 624, x17, x15, 624, x18)

inst_79:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x12f53e and fs2 == 0 and fe2 == 0x7a and fm2 == 0x12f53e and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d12f53e; op2val:0x3d12f53e; valaddr_reg:x16; val_offset:632; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 632, x17, x15, 632, x18)

inst_80:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x12f53e and fs2 == 0 and fe2 == 0x7a and fm2 == 0x12f53e and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d12f53e; op2val:0x3d12f53e; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_81:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x179753 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x179753 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e979753; op2val:0x3e979753; valaddr_reg:x16; val_offset:648; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 648, x17, x15, 648, x18)

inst_82:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x179753 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x179753 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e979753; op2val:0x3e979753; valaddr_reg:x16; val_offset:656; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 656, x17, x15, 656, x18)

inst_83:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x179753 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x179753 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e979753; op2val:0x3e979753; valaddr_reg:x16; val_offset:664; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 664, x17, x15, 664, x18)

inst_84:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x179753 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x179753 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e979753; op2val:0x3e979753; valaddr_reg:x16; val_offset:672; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 672, x17, x15, 672, x18)

inst_85:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x179753 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x179753 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e979753; op2val:0x3e979753; valaddr_reg:x16; val_offset:680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 680, x17, x15, 680, x18)

inst_86:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x488fab and fs2 == 0 and fe2 == 0x7e and fm2 == 0x488fab and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f488fab; op2val:0x3f488fab; valaddr_reg:x16; val_offset:688; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 688, x17, x15, 688, x18)

inst_87:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x488fab and fs2 == 0 and fe2 == 0x7e and fm2 == 0x488fab and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f488fab; op2val:0x3f488fab; valaddr_reg:x16; val_offset:696; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 696, x17, x15, 696, x18)

inst_88:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x488fab and fs2 == 0 and fe2 == 0x7e and fm2 == 0x488fab and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f488fab; op2val:0x3f488fab; valaddr_reg:x16; val_offset:704; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 704, x17, x15, 704, x18)

inst_89:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x488fab and fs2 == 0 and fe2 == 0x7e and fm2 == 0x488fab and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f488fab; op2val:0x3f488fab; valaddr_reg:x16; val_offset:712; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 712, x17, x15, 712, x18)

inst_90:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x488fab and fs2 == 0 and fe2 == 0x7e and fm2 == 0x488fab and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f488fab; op2val:0x3f488fab; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_91:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4e12b3 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x4e12b3 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ece12b3; op2val:0x3ece12b3; valaddr_reg:x16; val_offset:728; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 728, x17, x15, 728, x18)

inst_92:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4e12b3 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x4e12b3 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ece12b3; op2val:0x3ece12b3; valaddr_reg:x16; val_offset:736; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 736, x17, x15, 736, x18)

inst_93:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4e12b3 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x4e12b3 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ece12b3; op2val:0x3ece12b3; valaddr_reg:x16; val_offset:744; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 744, x17, x15, 744, x18)

inst_94:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4e12b3 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x4e12b3 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ece12b3; op2val:0x3ece12b3; valaddr_reg:x16; val_offset:752; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 752, x17, x15, 752, x18)

inst_95:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4e12b3 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x4e12b3 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ece12b3; op2val:0x3ece12b3; valaddr_reg:x16; val_offset:760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 760, x17, x15, 760, x18)

inst_96:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x503069 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x503069 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f503069; op2val:0x3f503069; valaddr_reg:x16; val_offset:768; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 768, x17, x15, 768, x18)

inst_97:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x503069 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x503069 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f503069; op2val:0x3f503069; valaddr_reg:x16; val_offset:776; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 776, x17, x15, 776, x18)

inst_98:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x503069 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x503069 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f503069; op2val:0x3f503069; valaddr_reg:x16; val_offset:784; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 784, x17, x15, 784, x18)

inst_99:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x503069 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x503069 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f503069; op2val:0x3f503069; valaddr_reg:x16; val_offset:792; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 792, x17, x15, 792, x18)

inst_100:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x503069 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x503069 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f503069; op2val:0x3f503069; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_101:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x01f498 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x01f498 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f01f498; op2val:0x3f01f498; valaddr_reg:x16; val_offset:808; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 808, x17, x15, 808, x18)

inst_102:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x01f498 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x01f498 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f01f498; op2val:0x3f01f498; valaddr_reg:x16; val_offset:816; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 816, x17, x15, 816, x18)

inst_103:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x01f498 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x01f498 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f01f498; op2val:0x3f01f498; valaddr_reg:x16; val_offset:824; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 824, x17, x15, 824, x18)

inst_104:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x01f498 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x01f498 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f01f498; op2val:0x3f01f498; valaddr_reg:x16; val_offset:832; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 832, x17, x15, 832, x18)

inst_105:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x01f498 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x01f498 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f01f498; op2val:0x3f01f498; valaddr_reg:x16; val_offset:840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 840, x17, x15, 840, x18)

inst_106:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x64c3ec and fs2 == 0 and fe2 == 0x7e and fm2 == 0x64c3ec and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f64c3ec; op2val:0x3f64c3ec; valaddr_reg:x16; val_offset:848; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 848, x17, x15, 848, x18)

inst_107:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x64c3ec and fs2 == 0 and fe2 == 0x7e and fm2 == 0x64c3ec and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f64c3ec; op2val:0x3f64c3ec; valaddr_reg:x16; val_offset:856; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 856, x17, x15, 856, x18)

inst_108:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x64c3ec and fs2 == 0 and fe2 == 0x7e and fm2 == 0x64c3ec and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f64c3ec; op2val:0x3f64c3ec; valaddr_reg:x16; val_offset:864; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 864, x17, x15, 864, x18)

inst_109:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x64c3ec and fs2 == 0 and fe2 == 0x7e and fm2 == 0x64c3ec and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f64c3ec; op2val:0x3f64c3ec; valaddr_reg:x16; val_offset:872; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 872, x17, x15, 872, x18)

inst_110:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x64c3ec and fs2 == 0 and fe2 == 0x7e and fm2 == 0x64c3ec and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f64c3ec; op2val:0x3f64c3ec; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 880, x17, x15, 880, x18)

inst_111:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1023ca and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1023ca and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9023ca; op2val:0x3e9023ca; valaddr_reg:x16; val_offset:888; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 888, x17, x15, 888, x18)

inst_112:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1023ca and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1023ca and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9023ca; op2val:0x3e9023ca; valaddr_reg:x16; val_offset:896; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 896, x17, x15, 896, x18)

inst_113:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1023ca and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1023ca and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9023ca; op2val:0x3e9023ca; valaddr_reg:x16; val_offset:904; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 904, x17, x15, 904, x18)

inst_114:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1023ca and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1023ca and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9023ca; op2val:0x3e9023ca; valaddr_reg:x16; val_offset:912; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 912, x17, x15, 912, x18)

inst_115:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1023ca and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1023ca and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9023ca; op2val:0x3e9023ca; valaddr_reg:x16; val_offset:920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 920, x17, x15, 920, x18)

inst_116:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x426f02 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x426f02 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f426f02; op2val:0x3f426f02; valaddr_reg:x16; val_offset:928; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 928, x17, x15, 928, x18)

inst_117:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x426f02 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x426f02 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f426f02; op2val:0x3f426f02; valaddr_reg:x16; val_offset:936; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 936, x17, x15, 936, x18)

inst_118:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x426f02 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x426f02 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f426f02; op2val:0x3f426f02; valaddr_reg:x16; val_offset:944; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 944, x17, x15, 944, x18)

inst_119:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x426f02 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x426f02 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f426f02; op2val:0x3f426f02; valaddr_reg:x16; val_offset:952; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 952, x17, x15, 952, x18)

inst_120:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x426f02 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x426f02 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f426f02; op2val:0x3f426f02; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 960, x17, x15, 960, x18)

inst_121:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x238f9e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x238f9e and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f238f9e; op2val:0x3f238f9e; valaddr_reg:x16; val_offset:968; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 968, x17, x15, 968, x18)

inst_122:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x238f9e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x238f9e and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f238f9e; op2val:0x3f238f9e; valaddr_reg:x16; val_offset:976; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 976, x17, x15, 976, x18)

inst_123:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x238f9e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x238f9e and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f238f9e; op2val:0x3f238f9e; valaddr_reg:x16; val_offset:984; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 984, x17, x15, 984, x18)

inst_124:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x238f9e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x238f9e and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f238f9e; op2val:0x3f238f9e; valaddr_reg:x16; val_offset:992; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 992, x17, x15, 992, x18)

inst_125:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x238f9e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x238f9e and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f238f9e; op2val:0x3f238f9e; valaddr_reg:x16; val_offset:1000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1000, x17, x15, 1000, x18)

inst_126:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5ca59c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5ca59c and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5ca59c; op2val:0x3f5ca59c; valaddr_reg:x16; val_offset:1008; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1008, x17, x15, 1008, x18)

inst_127:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5ca59c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5ca59c and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5ca59c; op2val:0x3f5ca59c; valaddr_reg:x16; val_offset:1016; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1016, x17, x15, 1016, x18)

inst_128:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5ca59c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5ca59c and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5ca59c; op2val:0x3f5ca59c; valaddr_reg:x16; val_offset:1024; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1024, x17, x15, 1024, x18)

inst_129:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5ca59c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5ca59c and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5ca59c; op2val:0x3f5ca59c; valaddr_reg:x16; val_offset:1032; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1032, x17, x15, 1032, x18)

inst_130:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5ca59c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5ca59c and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5ca59c; op2val:0x3f5ca59c; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1040, x17, x15, 1040, x18)

inst_131:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x72627d and fs2 == 0 and fe2 == 0x7d and fm2 == 0x72627d and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef2627d; op2val:0x3ef2627d; valaddr_reg:x16; val_offset:1048; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1048, x17, x15, 1048, x18)

inst_132:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x72627d and fs2 == 0 and fe2 == 0x7d and fm2 == 0x72627d and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef2627d; op2val:0x3ef2627d; valaddr_reg:x16; val_offset:1056; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1056, x17, x15, 1056, x18)

inst_133:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x72627d and fs2 == 0 and fe2 == 0x7d and fm2 == 0x72627d and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef2627d; op2val:0x3ef2627d; valaddr_reg:x16; val_offset:1064; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1064, x17, x15, 1064, x18)

inst_134:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x72627d and fs2 == 0 and fe2 == 0x7d and fm2 == 0x72627d and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef2627d; op2val:0x3ef2627d; valaddr_reg:x16; val_offset:1072; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1072, x17, x15, 1072, x18)

inst_135:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x72627d and fs2 == 0 and fe2 == 0x7d and fm2 == 0x72627d and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef2627d; op2val:0x3ef2627d; valaddr_reg:x16; val_offset:1080; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1080, x17, x15, 1080, x18)

inst_136:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x49984d and fs2 == 0 and fe2 == 0x7d and fm2 == 0x49984d and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec9984d; op2val:0x3ec9984d; valaddr_reg:x16; val_offset:1088; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1088, x17, x15, 1088, x18)

inst_137:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x49984d and fs2 == 0 and fe2 == 0x7d and fm2 == 0x49984d and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec9984d; op2val:0x3ec9984d; valaddr_reg:x16; val_offset:1096; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1096, x17, x15, 1096, x18)

inst_138:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x49984d and fs2 == 0 and fe2 == 0x7d and fm2 == 0x49984d and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec9984d; op2val:0x3ec9984d; valaddr_reg:x16; val_offset:1104; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1104, x17, x15, 1104, x18)

inst_139:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x49984d and fs2 == 0 and fe2 == 0x7d and fm2 == 0x49984d and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec9984d; op2val:0x3ec9984d; valaddr_reg:x16; val_offset:1112; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1112, x17, x15, 1112, x18)

inst_140:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x49984d and fs2 == 0 and fe2 == 0x7d and fm2 == 0x49984d and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec9984d; op2val:0x3ec9984d; valaddr_reg:x16; val_offset:1120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1120, x17, x15, 1120, x18)

inst_141:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x31e108 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x31e108 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db1e108; op2val:0x3db1e108; valaddr_reg:x16; val_offset:1128; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1128, x17, x15, 1128, x18)

inst_142:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x31e108 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x31e108 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db1e108; op2val:0x3db1e108; valaddr_reg:x16; val_offset:1136; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1136, x17, x15, 1136, x18)

inst_143:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x31e108 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x31e108 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db1e108; op2val:0x3db1e108; valaddr_reg:x16; val_offset:1144; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1144, x17, x15, 1144, x18)

inst_144:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x31e108 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x31e108 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db1e108; op2val:0x3db1e108; valaddr_reg:x16; val_offset:1152; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1152, x17, x15, 1152, x18)

inst_145:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x31e108 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x31e108 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db1e108; op2val:0x3db1e108; valaddr_reg:x16; val_offset:1160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1160, x17, x15, 1160, x18)

inst_146:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x5cc699 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x5cc699 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3cdcc699; op2val:0x3cdcc699; valaddr_reg:x16; val_offset:1168; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1168, x17, x15, 1168, x18)

inst_147:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x5cc699 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x5cc699 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3cdcc699; op2val:0x3cdcc699; valaddr_reg:x16; val_offset:1176; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1176, x17, x15, 1176, x18)

inst_148:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x5cc699 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x5cc699 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3cdcc699; op2val:0x3cdcc699; valaddr_reg:x16; val_offset:1184; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1184, x17, x15, 1184, x18)

inst_149:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x5cc699 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x5cc699 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3cdcc699; op2val:0x3cdcc699; valaddr_reg:x16; val_offset:1192; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1192, x17, x15, 1192, x18)

inst_150:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x5cc699 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x5cc699 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3cdcc699; op2val:0x3cdcc699; valaddr_reg:x16; val_offset:1200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1200, x17, x15, 1200, x18)

inst_151:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3f8bcd and fs2 == 0 and fe2 == 0x7d and fm2 == 0x3f8bcd and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebf8bcd; op2val:0x3ebf8bcd; valaddr_reg:x16; val_offset:1208; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1208, x17, x15, 1208, x18)

inst_152:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3f8bcd and fs2 == 0 and fe2 == 0x7d and fm2 == 0x3f8bcd and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebf8bcd; op2val:0x3ebf8bcd; valaddr_reg:x16; val_offset:1216; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1216, x17, x15, 1216, x18)

inst_153:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3f8bcd and fs2 == 0 and fe2 == 0x7d and fm2 == 0x3f8bcd and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebf8bcd; op2val:0x3ebf8bcd; valaddr_reg:x16; val_offset:1224; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1224, x17, x15, 1224, x18)

inst_154:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3f8bcd and fs2 == 0 and fe2 == 0x7d and fm2 == 0x3f8bcd and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebf8bcd; op2val:0x3ebf8bcd; valaddr_reg:x16; val_offset:1232; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1232, x17, x15, 1232, x18)

inst_155:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3f8bcd and fs2 == 0 and fe2 == 0x7d and fm2 == 0x3f8bcd and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebf8bcd; op2val:0x3ebf8bcd; valaddr_reg:x16; val_offset:1240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1240, x17, x15, 1240, x18)

inst_156:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5bbcf7 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x5bbcf7 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e5bbcf7; op2val:0x3e5bbcf7; valaddr_reg:x16; val_offset:1248; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1248, x17, x15, 1248, x18)

inst_157:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5bbcf7 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x5bbcf7 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e5bbcf7; op2val:0x3e5bbcf7; valaddr_reg:x16; val_offset:1256; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1256, x17, x15, 1256, x18)

inst_158:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5bbcf7 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x5bbcf7 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e5bbcf7; op2val:0x3e5bbcf7; valaddr_reg:x16; val_offset:1264; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1264, x17, x15, 1264, x18)

inst_159:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5bbcf7 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x5bbcf7 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e5bbcf7; op2val:0x3e5bbcf7; valaddr_reg:x16; val_offset:1272; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1272, x17, x15, 1272, x18)

inst_160:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5bbcf7 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x5bbcf7 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e5bbcf7; op2val:0x3e5bbcf7; valaddr_reg:x16; val_offset:1280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1280, x17, x15, 1280, x18)

inst_161:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1177ce and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1177ce and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1177ce; op2val:0x3f1177ce; valaddr_reg:x16; val_offset:1288; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1288, x17, x15, 1288, x18)

inst_162:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1177ce and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1177ce and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1177ce; op2val:0x3f1177ce; valaddr_reg:x16; val_offset:1296; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1296, x17, x15, 1296, x18)

inst_163:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1177ce and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1177ce and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1177ce; op2val:0x3f1177ce; valaddr_reg:x16; val_offset:1304; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1304, x17, x15, 1304, x18)

inst_164:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1177ce and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1177ce and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1177ce; op2val:0x3f1177ce; valaddr_reg:x16; val_offset:1312; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1312, x17, x15, 1312, x18)

inst_165:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1177ce and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1177ce and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1177ce; op2val:0x3f1177ce; valaddr_reg:x16; val_offset:1320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1320, x17, x15, 1320, x18)

inst_166:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x414df6 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x414df6 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec14df6; op2val:0x3ec14df6; valaddr_reg:x16; val_offset:1328; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1328, x17, x15, 1328, x18)

inst_167:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x414df6 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x414df6 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec14df6; op2val:0x3ec14df6; valaddr_reg:x16; val_offset:1336; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1336, x17, x15, 1336, x18)

inst_168:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x414df6 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x414df6 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec14df6; op2val:0x3ec14df6; valaddr_reg:x16; val_offset:1344; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1344, x17, x15, 1344, x18)

inst_169:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x414df6 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x414df6 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec14df6; op2val:0x3ec14df6; valaddr_reg:x16; val_offset:1352; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1352, x17, x15, 1352, x18)

inst_170:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x414df6 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x414df6 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec14df6; op2val:0x3ec14df6; valaddr_reg:x16; val_offset:1360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1360, x17, x15, 1360, x18)

inst_171:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x782ee4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x782ee4 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f782ee4; op2val:0x3f782ee4; valaddr_reg:x16; val_offset:1368; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1368, x17, x15, 1368, x18)

inst_172:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x782ee4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x782ee4 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f782ee4; op2val:0x3f782ee4; valaddr_reg:x16; val_offset:1376; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1376, x17, x15, 1376, x18)

inst_173:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x782ee4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x782ee4 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f782ee4; op2val:0x3f782ee4; valaddr_reg:x16; val_offset:1384; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1384, x17, x15, 1384, x18)

inst_174:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x782ee4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x782ee4 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f782ee4; op2val:0x3f782ee4; valaddr_reg:x16; val_offset:1392; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1392, x17, x15, 1392, x18)

inst_175:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x782ee4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x782ee4 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f782ee4; op2val:0x3f782ee4; valaddr_reg:x16; val_offset:1400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1400, x17, x15, 1400, x18)

inst_176:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x162caf and fs2 == 0 and fe2 == 0x7d and fm2 == 0x162caf and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e962caf; op2val:0x3e962caf; valaddr_reg:x16; val_offset:1408; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1408, x17, x15, 1408, x18)

inst_177:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x162caf and fs2 == 0 and fe2 == 0x7d and fm2 == 0x162caf and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e962caf; op2val:0x3e962caf; valaddr_reg:x16; val_offset:1416; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1416, x17, x15, 1416, x18)

inst_178:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x162caf and fs2 == 0 and fe2 == 0x7d and fm2 == 0x162caf and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e962caf; op2val:0x3e962caf; valaddr_reg:x16; val_offset:1424; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1424, x17, x15, 1424, x18)

inst_179:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x162caf and fs2 == 0 and fe2 == 0x7d and fm2 == 0x162caf and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e962caf; op2val:0x3e962caf; valaddr_reg:x16; val_offset:1432; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1432, x17, x15, 1432, x18)

inst_180:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x162caf and fs2 == 0 and fe2 == 0x7d and fm2 == 0x162caf and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e962caf; op2val:0x3e962caf; valaddr_reg:x16; val_offset:1440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1440, x17, x15, 1440, x18)

inst_181:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x471621 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x471621 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f471621; op2val:0x3f471621; valaddr_reg:x16; val_offset:1448; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1448, x17, x15, 1448, x18)

inst_182:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x471621 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x471621 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f471621; op2val:0x3f471621; valaddr_reg:x16; val_offset:1456; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1456, x17, x15, 1456, x18)

inst_183:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x471621 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x471621 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f471621; op2val:0x3f471621; valaddr_reg:x16; val_offset:1464; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1464, x17, x15, 1464, x18)

inst_184:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x471621 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x471621 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f471621; op2val:0x3f471621; valaddr_reg:x16; val_offset:1472; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1472, x17, x15, 1472, x18)

inst_185:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x471621 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x471621 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f471621; op2val:0x3f471621; valaddr_reg:x16; val_offset:1480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1480, x17, x15, 1480, x18)

inst_186:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x087b1c and fs2 == 0 and fe2 == 0x7c and fm2 == 0x087b1c and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e087b1c; op2val:0x3e087b1c; valaddr_reg:x16; val_offset:1488; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1488, x17, x15, 1488, x18)

inst_187:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x087b1c and fs2 == 0 and fe2 == 0x7c and fm2 == 0x087b1c and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e087b1c; op2val:0x3e087b1c; valaddr_reg:x16; val_offset:1496; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1496, x17, x15, 1496, x18)

inst_188:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x087b1c and fs2 == 0 and fe2 == 0x7c and fm2 == 0x087b1c and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e087b1c; op2val:0x3e087b1c; valaddr_reg:x16; val_offset:1504; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1504, x17, x15, 1504, x18)

inst_189:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x087b1c and fs2 == 0 and fe2 == 0x7c and fm2 == 0x087b1c and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e087b1c; op2val:0x3e087b1c; valaddr_reg:x16; val_offset:1512; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1512, x17, x15, 1512, x18)

inst_190:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x087b1c and fs2 == 0 and fe2 == 0x7c and fm2 == 0x087b1c and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e087b1c; op2val:0x3e087b1c; valaddr_reg:x16; val_offset:1520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1520, x17, x15, 1520, x18)

inst_191:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x53e005 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x53e005 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f53e005; op2val:0x3f53e005; valaddr_reg:x16; val_offset:1528; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1528, x17, x15, 1528, x18)

inst_192:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x53e005 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x53e005 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f53e005; op2val:0x3f53e005; valaddr_reg:x16; val_offset:1536; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1536, x17, x15, 1536, x18)

inst_193:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x53e005 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x53e005 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f53e005; op2val:0x3f53e005; valaddr_reg:x16; val_offset:1544; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1544, x17, x15, 1544, x18)

inst_194:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x53e005 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x53e005 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f53e005; op2val:0x3f53e005; valaddr_reg:x16; val_offset:1552; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1552, x17, x15, 1552, x18)

inst_195:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x53e005 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x53e005 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f53e005; op2val:0x3f53e005; valaddr_reg:x16; val_offset:1560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1560, x17, x15, 1560, x18)

inst_196:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x44942f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x44942f and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f44942f; op2val:0x3f44942f; valaddr_reg:x16; val_offset:1568; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1568, x17, x15, 1568, x18)

inst_197:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x44942f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x44942f and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f44942f; op2val:0x3f44942f; valaddr_reg:x16; val_offset:1576; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1576, x17, x15, 1576, x18)

inst_198:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x44942f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x44942f and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f44942f; op2val:0x3f44942f; valaddr_reg:x16; val_offset:1584; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1584, x17, x15, 1584, x18)

inst_199:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x44942f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x44942f and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f44942f; op2val:0x3f44942f; valaddr_reg:x16; val_offset:1592; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1592, x17, x15, 1592, x18)

inst_200:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x44942f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x44942f and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f44942f; op2val:0x3f44942f; valaddr_reg:x16; val_offset:1600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1600, x17, x15, 1600, x18)

inst_201:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3af0f7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3af0f7 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3af0f7; op2val:0x3f3af0f7; valaddr_reg:x16; val_offset:1608; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1608, x17, x15, 1608, x18)

inst_202:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3af0f7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3af0f7 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3af0f7; op2val:0x3f3af0f7; valaddr_reg:x16; val_offset:1616; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1616, x17, x15, 1616, x18)

inst_203:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3af0f7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3af0f7 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3af0f7; op2val:0x3f3af0f7; valaddr_reg:x16; val_offset:1624; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1624, x17, x15, 1624, x18)

inst_204:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3af0f7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3af0f7 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3af0f7; op2val:0x3f3af0f7; valaddr_reg:x16; val_offset:1632; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1632, x17, x15, 1632, x18)

inst_205:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3af0f7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3af0f7 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3af0f7; op2val:0x3f3af0f7; valaddr_reg:x16; val_offset:1640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1640, x17, x15, 1640, x18)

inst_206:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x12b862 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x12b862 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e92b862; op2val:0x3e92b862; valaddr_reg:x16; val_offset:1648; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1648, x17, x15, 1648, x18)

inst_207:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x12b862 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x12b862 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e92b862; op2val:0x3e92b862; valaddr_reg:x16; val_offset:1656; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1656, x17, x15, 1656, x18)

inst_208:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x12b862 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x12b862 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e92b862; op2val:0x3e92b862; valaddr_reg:x16; val_offset:1664; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1664, x17, x15, 1664, x18)

inst_209:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x12b862 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x12b862 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e92b862; op2val:0x3e92b862; valaddr_reg:x16; val_offset:1672; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1672, x17, x15, 1672, x18)

inst_210:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x12b862 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x12b862 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e92b862; op2val:0x3e92b862; valaddr_reg:x16; val_offset:1680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1680, x17, x15, 1680, x18)

inst_211:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x2c9951 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x54d9ac and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x53ac9951; op2val:0xd4d4d9ac; valaddr_reg:x16; val_offset:1688; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1688, x17, x15, 1688, x18)

inst_212:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x2c9951 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x54d9ac and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x53ac9951; op2val:0xd4d4d9ac; valaddr_reg:x16; val_offset:1696; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1696, x17, x15, 1696, x18)

inst_213:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x2c9951 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x54d9ac and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x53ac9951; op2val:0xd4d4d9ac; valaddr_reg:x16; val_offset:1704; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1704, x17, x15, 1704, x18)

inst_214:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x2c9951 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x54d9ac and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x53ac9951; op2val:0xd4d4d9ac; valaddr_reg:x16; val_offset:1712; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1712, x17, x15, 1712, x18)

inst_215:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x2c9951 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x54d9ac and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x53ac9951; op2val:0xd4d4d9ac; valaddr_reg:x16; val_offset:1720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1720, x17, x15, 1720, x18)

inst_216:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x02f2e7 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x7a1a31 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x5482f2e7; op2val:0xd47a1a31; valaddr_reg:x16; val_offset:1728; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1728, x17, x15, 1728, x18)

inst_217:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x02f2e7 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x7a1a31 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x5482f2e7; op2val:0xd47a1a31; valaddr_reg:x16; val_offset:1736; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1736, x17, x15, 1736, x18)

inst_218:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x02f2e7 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x7a1a31 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x5482f2e7; op2val:0xd47a1a31; valaddr_reg:x16; val_offset:1744; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1744, x17, x15, 1744, x18)

inst_219:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x02f2e7 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x7a1a31 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x5482f2e7; op2val:0xd47a1a31; valaddr_reg:x16; val_offset:1752; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1752, x17, x15, 1752, x18)

inst_220:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x02f2e7 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x7a1a31 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x5482f2e7; op2val:0xd47a1a31; valaddr_reg:x16; val_offset:1760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1760, x17, x15, 1760, x18)

inst_221:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x05f04a and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x741f6c and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x5485f04a; op2val:0xd4741f6c; valaddr_reg:x16; val_offset:1768; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1768, x17, x15, 1768, x18)

inst_222:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x05f04a and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x741f6c and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x5485f04a; op2val:0xd4741f6c; valaddr_reg:x16; val_offset:1776; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1776, x17, x15, 1776, x18)

inst_223:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x05f04a and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x741f6c and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x5485f04a; op2val:0xd4741f6c; valaddr_reg:x16; val_offset:1784; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1784, x17, x15, 1784, x18)

inst_224:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x05f04a and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x741f6c and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x5485f04a; op2val:0xd4741f6c; valaddr_reg:x16; val_offset:1792; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1792, x17, x15, 1792, x18)

inst_225:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x05f04a and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x741f6c and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x5485f04a; op2val:0xd4741f6c; valaddr_reg:x16; val_offset:1800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1800, x17, x15, 1800, x18)

inst_226:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x195d31 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x6cd45a and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x53195d31; op2val:0xd4ecd45a; valaddr_reg:x16; val_offset:1808; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1808, x17, x15, 1808, x18)

inst_227:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x195d31 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x6cd45a and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x53195d31; op2val:0xd4ecd45a; valaddr_reg:x16; val_offset:1816; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1816, x17, x15, 1816, x18)

inst_228:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x195d31 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x6cd45a and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x53195d31; op2val:0xd4ecd45a; valaddr_reg:x16; val_offset:1824; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1824, x17, x15, 1824, x18)

inst_229:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x195d31 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x6cd45a and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x53195d31; op2val:0xd4ecd45a; valaddr_reg:x16; val_offset:1832; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1832, x17, x15, 1832, x18)

inst_230:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x195d31 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x6cd45a and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x53195d31; op2val:0xd4ecd45a; valaddr_reg:x16; val_offset:1840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1840, x17, x15, 1840, x18)

inst_231:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x62d28e and fs2 == 1 and fe2 == 0xa6 and fm2 == 0x696b93 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54e2d28e; op2val:0xd3696b93; valaddr_reg:x16; val_offset:1848; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1848, x17, x15, 1848, x18)

inst_232:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x62d28e and fs2 == 1 and fe2 == 0xa6 and fm2 == 0x696b93 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54e2d28e; op2val:0xd3696b93; valaddr_reg:x16; val_offset:1856; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1856, x17, x15, 1856, x18)

inst_233:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x62d28e and fs2 == 1 and fe2 == 0xa6 and fm2 == 0x696b93 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54e2d28e; op2val:0xd3696b93; valaddr_reg:x16; val_offset:1864; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1864, x17, x15, 1864, x18)

inst_234:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x62d28e and fs2 == 1 and fe2 == 0xa6 and fm2 == 0x696b93 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54e2d28e; op2val:0xd3696b93; valaddr_reg:x16; val_offset:1872; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1872, x17, x15, 1872, x18)

inst_235:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x62d28e and fs2 == 1 and fe2 == 0xa6 and fm2 == 0x696b93 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54e2d28e; op2val:0xd3696b93; valaddr_reg:x16; val_offset:1880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1880, x17, x15, 1880, x18)

inst_236:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x55e71a and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x4a863a and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x53d5e71a; op2val:0xd4ca863a; valaddr_reg:x16; val_offset:1888; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1888, x17, x15, 1888, x18)

inst_237:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x55e71a and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x4a863a and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x53d5e71a; op2val:0xd4ca863a; valaddr_reg:x16; val_offset:1896; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1896, x17, x15, 1896, x18)

inst_238:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x55e71a and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x4a863a and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x53d5e71a; op2val:0xd4ca863a; valaddr_reg:x16; val_offset:1904; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1904, x17, x15, 1904, x18)

inst_239:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x55e71a and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x4a863a and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x53d5e71a; op2val:0xd4ca863a; valaddr_reg:x16; val_offset:1912; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1912, x17, x15, 1912, x18)

inst_240:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x55e71a and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x4a863a and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x53d5e71a; op2val:0xd4ca863a; valaddr_reg:x16; val_offset:1920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1920, x17, x15, 1920, x18)

inst_241:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x305c4a and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x1f476b and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54b05c4a; op2val:0xd41f476b; valaddr_reg:x16; val_offset:1928; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1928, x17, x15, 1928, x18)

inst_242:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x305c4a and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x1f476b and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54b05c4a; op2val:0xd41f476b; valaddr_reg:x16; val_offset:1936; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1936, x17, x15, 1936, x18)

inst_243:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x305c4a and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x1f476b and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54b05c4a; op2val:0xd41f476b; valaddr_reg:x16; val_offset:1944; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1944, x17, x15, 1944, x18)

inst_244:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x305c4a and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x1f476b and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54b05c4a; op2val:0xd41f476b; valaddr_reg:x16; val_offset:1952; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1952, x17, x15, 1952, x18)

inst_245:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x305c4a and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x1f476b and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54b05c4a; op2val:0xd41f476b; valaddr_reg:x16; val_offset:1960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1960, x17, x15, 1960, x18)

inst_246:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x30c12c and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x1e7da7 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54b0c12c; op2val:0xd41e7da7; valaddr_reg:x16; val_offset:1968; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1968, x17, x15, 1968, x18)

inst_247:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x30c12c and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x1e7da7 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54b0c12c; op2val:0xd41e7da7; valaddr_reg:x16; val_offset:1976; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1976, x17, x15, 1976, x18)

inst_248:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x30c12c and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x1e7da7 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54b0c12c; op2val:0xd41e7da7; valaddr_reg:x16; val_offset:1984; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1984, x17, x15, 1984, x18)

inst_249:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x30c12c and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x1e7da7 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54b0c12c; op2val:0xd41e7da7; valaddr_reg:x16; val_offset:1992; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1992, x17, x15, 1992, x18)

inst_250:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x30c12c and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x1e7da7 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54b0c12c; op2val:0xd41e7da7; valaddr_reg:x16; val_offset:2000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 2000, x17, x15, 2000, x18)

inst_251:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x01d579 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x7c550e and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x5481d579; op2val:0xd47c550e; valaddr_reg:x16; val_offset:2008; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 2008, x17, x15, 2008, x18)

inst_252:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x01d579 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x7c550e and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x5481d579; op2val:0xd47c550e; valaddr_reg:x16; val_offset:2016; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 2016, x17, x15, 2016, x18)

inst_253:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x01d579 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x7c550e and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x5481d579; op2val:0xd47c550e; valaddr_reg:x16; val_offset:2024; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_2)

inst_254:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x01d579 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x7c550e and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x5481d579; op2val:0xd47c550e; valaddr_reg:x16; val_offset:0; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 0, x17, x15, 0, x18)

inst_255:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x01d579 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x7c550e and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x5481d579; op2val:0xd47c550e; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 8, x17, x15, 8, x18)

inst_256:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x2826e6 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x2fb234 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54a826e6; op2val:0xd42fb234; valaddr_reg:x16; val_offset:16; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 16, x17, x15, 16, x18)

inst_257:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x2826e6 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x2fb234 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54a826e6; op2val:0xd42fb234; valaddr_reg:x16; val_offset:24; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 24, x17, x15, 24, x18)

inst_258:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x2826e6 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x2fb234 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54a826e6; op2val:0xd42fb234; valaddr_reg:x16; val_offset:32; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 32, x17, x15, 32, x18)

inst_259:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x2826e6 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x2fb234 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54a826e6; op2val:0xd42fb234; valaddr_reg:x16; val_offset:40; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 40, x17, x15, 40, x18)

inst_260:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x2826e6 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x2fb234 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54a826e6; op2val:0xd42fb234; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_261:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x585ebd and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x13d0a1 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54585ebd; op2val:0xd493d0a1; valaddr_reg:x16; val_offset:56; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 56, x17, x15, 56, x18)

inst_262:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x585ebd and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x13d0a1 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54585ebd; op2val:0xd493d0a1; valaddr_reg:x16; val_offset:64; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 64, x17, x15, 64, x18)

inst_263:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x585ebd and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x13d0a1 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54585ebd; op2val:0xd493d0a1; valaddr_reg:x16; val_offset:72; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 72, x17, x15, 72, x18)

inst_264:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x585ebd and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x13d0a1 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54585ebd; op2val:0xd493d0a1; valaddr_reg:x16; val_offset:80; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 80, x17, x15, 80, x18)

inst_265:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x585ebd and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x13d0a1 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54585ebd; op2val:0xd493d0a1; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 88, x17, x15, 88, x18)

inst_266:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x02a1c5 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x7abc75 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x5482a1c5; op2val:0xd47abc75; valaddr_reg:x16; val_offset:96; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 96, x17, x15, 96, x18)

inst_267:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x02a1c5 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x7abc75 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x5482a1c5; op2val:0xd47abc75; valaddr_reg:x16; val_offset:104; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 104, x17, x15, 104, x18)

inst_268:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x02a1c5 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x7abc75 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x5482a1c5; op2val:0xd47abc75; valaddr_reg:x16; val_offset:112; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 112, x17, x15, 112, x18)

inst_269:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x02a1c5 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x7abc75 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x5482a1c5; op2val:0xd47abc75; valaddr_reg:x16; val_offset:120; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 120, x17, x15, 120, x18)

inst_270:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x02a1c5 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x7abc75 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x5482a1c5; op2val:0xd47abc75; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_271:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x6f2813 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x086bf6 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x546f2813; op2val:0xd4886bf6; valaddr_reg:x16; val_offset:136; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 136, x17, x15, 136, x18)

inst_272:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x6f2813 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x086bf6 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x546f2813; op2val:0xd4886bf6; valaddr_reg:x16; val_offset:144; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 144, x17, x15, 144, x18)

inst_273:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x6f2813 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x086bf6 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x546f2813; op2val:0xd4886bf6; valaddr_reg:x16; val_offset:152; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 152, x17, x15, 152, x18)

inst_274:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x6f2813 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x086bf6 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x546f2813; op2val:0xd4886bf6; valaddr_reg:x16; val_offset:160; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 160, x17, x15, 160, x18)

inst_275:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x6f2813 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x086bf6 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x546f2813; op2val:0xd4886bf6; valaddr_reg:x16; val_offset:168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 168, x17, x15, 168, x18)

inst_276:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x553dde and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x2b0886 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54d53dde; op2val:0xd3ab0886; valaddr_reg:x16; val_offset:176; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 176, x17, x15, 176, x18)

inst_277:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x553dde and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x2b0886 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54d53dde; op2val:0xd3ab0886; valaddr_reg:x16; val_offset:184; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 184, x17, x15, 184, x18)

inst_278:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x553dde and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x2b0886 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54d53dde; op2val:0xd3ab0886; valaddr_reg:x16; val_offset:192; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 192, x17, x15, 192, x18)

inst_279:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x553dde and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x2b0886 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54d53dde; op2val:0xd3ab0886; valaddr_reg:x16; val_offset:200; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 200, x17, x15, 200, x18)

inst_280:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x553dde and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x2b0886 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54d53dde; op2val:0xd3ab0886; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_281:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x0b53c1 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x69587e and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x548b53c1; op2val:0xd469587e; valaddr_reg:x16; val_offset:216; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 216, x17, x15, 216, x18)

inst_282:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x0b53c1 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x69587e and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x548b53c1; op2val:0xd469587e; valaddr_reg:x16; val_offset:224; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 224, x17, x15, 224, x18)

inst_283:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x0b53c1 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x69587e and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x548b53c1; op2val:0xd469587e; valaddr_reg:x16; val_offset:232; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 232, x17, x15, 232, x18)

inst_284:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x0b53c1 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x69587e and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x548b53c1; op2val:0xd469587e; valaddr_reg:x16; val_offset:240; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 240, x17, x15, 240, x18)

inst_285:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x0b53c1 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x69587e and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x548b53c1; op2val:0xd469587e; valaddr_reg:x16; val_offset:248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 248, x17, x15, 248, x18)

inst_286:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x3540cd and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x157e66 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54b540cd; op2val:0xd4157e66; valaddr_reg:x16; val_offset:256; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 256, x17, x15, 256, x18)

inst_287:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x3540cd and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x157e66 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54b540cd; op2val:0xd4157e66; valaddr_reg:x16; val_offset:264; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 264, x17, x15, 264, x18)

inst_288:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x3540cd and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x157e66 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54b540cd; op2val:0xd4157e66; valaddr_reg:x16; val_offset:272; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 272, x17, x15, 272, x18)

inst_289:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x3540cd and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x157e66 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54b540cd; op2val:0xd4157e66; valaddr_reg:x16; val_offset:280; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 280, x17, x15, 280, x18)

inst_290:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x3540cd and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x157e66 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54b540cd; op2val:0xd4157e66; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_291:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x32eb1f and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x268a70 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x5432eb1f; op2val:0xd4a68a70; valaddr_reg:x16; val_offset:296; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 296, x17, x15, 296, x18)

inst_292:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x32eb1f and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x268a70 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x5432eb1f; op2val:0xd4a68a70; valaddr_reg:x16; val_offset:304; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 304, x17, x15, 304, x18)

inst_293:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x32eb1f and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x268a70 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x5432eb1f; op2val:0xd4a68a70; valaddr_reg:x16; val_offset:312; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 312, x17, x15, 312, x18)

inst_294:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x32eb1f and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x268a70 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x5432eb1f; op2val:0xd4a68a70; valaddr_reg:x16; val_offset:320; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 320, x17, x15, 320, x18)

inst_295:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x32eb1f and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x268a70 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x5432eb1f; op2val:0xd4a68a70; valaddr_reg:x16; val_offset:328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 328, x17, x15, 328, x18)

inst_296:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x50b932 and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x3d1b38 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54d0b932; op2val:0xd3bd1b38; valaddr_reg:x16; val_offset:336; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 336, x17, x15, 336, x18)

inst_297:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x50b932 and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x3d1b38 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54d0b932; op2val:0xd3bd1b38; valaddr_reg:x16; val_offset:344; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 344, x17, x15, 344, x18)

inst_298:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x50b932 and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x3d1b38 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54d0b932; op2val:0xd3bd1b38; valaddr_reg:x16; val_offset:352; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 352, x17, x15, 352, x18)

inst_299:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x50b932 and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x3d1b38 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54d0b932; op2val:0xd3bd1b38; valaddr_reg:x16; val_offset:360; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 360, x17, x15, 360, x18)

inst_300:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x50b932 and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x3d1b38 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54d0b932; op2val:0xd3bd1b38; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_301:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x58a506 and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x1d6be7 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54d8a506; op2val:0xd39d6be7; valaddr_reg:x16; val_offset:376; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 376, x17, x15, 376, x18)

inst_302:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x58a506 and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x1d6be7 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54d8a506; op2val:0xd39d6be7; valaddr_reg:x16; val_offset:384; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 384, x17, x15, 384, x18)

inst_303:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x58a506 and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x1d6be7 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54d8a506; op2val:0xd39d6be7; valaddr_reg:x16; val_offset:392; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 392, x17, x15, 392, x18)

inst_304:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x58a506 and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x1d6be7 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54d8a506; op2val:0xd39d6be7; valaddr_reg:x16; val_offset:400; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 400, x17, x15, 400, x18)

inst_305:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x58a506 and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x1d6be7 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54d8a506; op2val:0xd39d6be7; valaddr_reg:x16; val_offset:408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 408, x17, x15, 408, x18)

inst_306:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x6fe6f7 and fs2 == 1 and fe2 == 0xa6 and fm2 == 0x00c84c and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54efe6f7; op2val:0xd300c84c; valaddr_reg:x16; val_offset:416; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 416, x17, x15, 416, x18)

inst_307:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x6fe6f7 and fs2 == 1 and fe2 == 0xa6 and fm2 == 0x00c84c and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54efe6f7; op2val:0xd300c84c; valaddr_reg:x16; val_offset:424; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 424, x17, x15, 424, x18)

inst_308:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x6fe6f7 and fs2 == 1 and fe2 == 0xa6 and fm2 == 0x00c84c and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54efe6f7; op2val:0xd300c84c; valaddr_reg:x16; val_offset:432; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 432, x17, x15, 432, x18)

inst_309:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x6fe6f7 and fs2 == 1 and fe2 == 0xa6 and fm2 == 0x00c84c and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54efe6f7; op2val:0xd300c84c; valaddr_reg:x16; val_offset:440; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 440, x17, x15, 440, x18)

inst_310:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x6fe6f7 and fs2 == 1 and fe2 == 0xa6 and fm2 == 0x00c84c and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54efe6f7; op2val:0xd300c84c; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_311:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x211751 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x3dd15e and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54a11751; op2val:0xd43dd15e; valaddr_reg:x16; val_offset:456; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 456, x17, x15, 456, x18)

inst_312:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x211751 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x3dd15e and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54a11751; op2val:0xd43dd15e; valaddr_reg:x16; val_offset:464; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 464, x17, x15, 464, x18)

inst_313:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x211751 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x3dd15e and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54a11751; op2val:0xd43dd15e; valaddr_reg:x16; val_offset:472; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 472, x17, x15, 472, x18)

inst_314:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x211751 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x3dd15e and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54a11751; op2val:0xd43dd15e; valaddr_reg:x16; val_offset:480; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 480, x17, x15, 480, x18)

inst_315:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x211751 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x3dd15e and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54a11751; op2val:0xd43dd15e; valaddr_reg:x16; val_offset:488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 488, x17, x15, 488, x18)

inst_316:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x213267 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x3d9b31 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54a13267; op2val:0xd43d9b31; valaddr_reg:x16; val_offset:496; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 496, x17, x15, 496, x18)

inst_317:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x213267 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x3d9b31 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54a13267; op2val:0xd43d9b31; valaddr_reg:x16; val_offset:504; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 504, x17, x15, 504, x18)

inst_318:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x213267 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x3d9b31 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54a13267; op2val:0xd43d9b31; valaddr_reg:x16; val_offset:512; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 512, x17, x15, 512, x18)

inst_319:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x213267 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x3d9b31 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54a13267; op2val:0xd43d9b31; valaddr_reg:x16; val_offset:520; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 520, x17, x15, 520, x18)

inst_320:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x213267 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x3d9b31 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54a13267; op2val:0xd43d9b31; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_321:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x23ee55 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x382356 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54a3ee55; op2val:0xd4382356; valaddr_reg:x16; val_offset:536; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 536, x17, x15, 536, x18)

inst_322:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x23ee55 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x382356 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54a3ee55; op2val:0xd4382356; valaddr_reg:x16; val_offset:544; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 544, x17, x15, 544, x18)

inst_323:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x23ee55 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x382356 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54a3ee55; op2val:0xd4382356; valaddr_reg:x16; val_offset:552; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 552, x17, x15, 552, x18)

inst_324:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x23ee55 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x382356 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54a3ee55; op2val:0xd4382356; valaddr_reg:x16; val_offset:560; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 560, x17, x15, 560, x18)

inst_325:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x23ee55 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x382356 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54a3ee55; op2val:0xd4382356; valaddr_reg:x16; val_offset:568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 568, x17, x15, 568, x18)

inst_326:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x7c4371 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x01de47 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x547c4371; op2val:0xd481de47; valaddr_reg:x16; val_offset:576; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 576, x17, x15, 576, x18)

inst_327:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x7c4371 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x01de47 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x547c4371; op2val:0xd481de47; valaddr_reg:x16; val_offset:584; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 584, x17, x15, 584, x18)

inst_328:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x7c4371 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x01de47 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x547c4371; op2val:0xd481de47; valaddr_reg:x16; val_offset:592; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 592, x17, x15, 592, x18)

inst_329:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x7c4371 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x01de47 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x547c4371; op2val:0xd481de47; valaddr_reg:x16; val_offset:600; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 600, x17, x15, 600, x18)

inst_330:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x7c4371 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x01de47 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x547c4371; op2val:0xd481de47; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 608, x17, x15, 608, x18)

inst_331:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x65dd60 and fs2 == 1 and fe2 == 0xa6 and fm2 == 0x5114ff and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54e5dd60; op2val:0xd35114ff; valaddr_reg:x16; val_offset:616; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 616, x17, x15, 616, x18)

inst_332:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x65dd60 and fs2 == 1 and fe2 == 0xa6 and fm2 == 0x5114ff and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54e5dd60; op2val:0xd35114ff; valaddr_reg:x16; val_offset:624; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 624, x17, x15, 624, x18)

inst_333:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x65dd60 and fs2 == 1 and fe2 == 0xa6 and fm2 == 0x5114ff and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54e5dd60; op2val:0xd35114ff; valaddr_reg:x16; val_offset:632; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 632, x17, x15, 632, x18)

inst_334:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x65dd60 and fs2 == 1 and fe2 == 0xa6 and fm2 == 0x5114ff and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54e5dd60; op2val:0xd35114ff; valaddr_reg:x16; val_offset:640; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 640, x17, x15, 640, x18)

inst_335:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x65dd60 and fs2 == 1 and fe2 == 0xa6 and fm2 == 0x5114ff and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54e5dd60; op2val:0xd35114ff; valaddr_reg:x16; val_offset:648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 648, x17, x15, 648, x18)

inst_336:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x159d13 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x54c5d9 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54959d13; op2val:0xd454c5d9; valaddr_reg:x16; val_offset:656; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 656, x17, x15, 656, x18)

inst_337:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x159d13 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x54c5d9 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54959d13; op2val:0xd454c5d9; valaddr_reg:x16; val_offset:664; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 664, x17, x15, 664, x18)

inst_338:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x159d13 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x54c5d9 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54959d13; op2val:0xd454c5d9; valaddr_reg:x16; val_offset:672; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 672, x17, x15, 672, x18)

inst_339:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x159d13 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x54c5d9 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54959d13; op2val:0xd454c5d9; valaddr_reg:x16; val_offset:680; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 680, x17, x15, 680, x18)

inst_340:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x159d13 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x54c5d9 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54959d13; op2val:0xd454c5d9; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 688, x17, x15, 688, x18)

inst_341:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x4f7d33 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x184166 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x544f7d33; op2val:0xd4984166; valaddr_reg:x16; val_offset:696; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 696, x17, x15, 696, x18)

inst_342:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x4f7d33 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x184166 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x544f7d33; op2val:0xd4984166; valaddr_reg:x16; val_offset:704; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 704, x17, x15, 704, x18)

inst_343:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x4f7d33 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x184166 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x544f7d33; op2val:0xd4984166; valaddr_reg:x16; val_offset:712; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 712, x17, x15, 712, x18)

inst_344:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x4f7d33 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x184166 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x544f7d33; op2val:0xd4984166; valaddr_reg:x16; val_offset:720; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 720, x17, x15, 720, x18)

inst_345:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x4f7d33 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x184166 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x544f7d33; op2val:0xd4984166; valaddr_reg:x16; val_offset:728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 728, x17, x15, 728, x18)

inst_346:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x474053 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x1c5fd6 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54474053; op2val:0xd49c5fd6; valaddr_reg:x16; val_offset:736; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 736, x17, x15, 736, x18)

inst_347:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x474053 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x1c5fd6 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54474053; op2val:0xd49c5fd6; valaddr_reg:x16; val_offset:744; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 744, x17, x15, 744, x18)

inst_348:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x474053 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x1c5fd6 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54474053; op2val:0xd49c5fd6; valaddr_reg:x16; val_offset:752; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 752, x17, x15, 752, x18)

inst_349:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x474053 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x1c5fd6 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54474053; op2val:0xd49c5fd6; valaddr_reg:x16; val_offset:760; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 760, x17, x15, 760, x18)

inst_350:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x474053 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x1c5fd6 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54474053; op2val:0xd49c5fd6; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 768, x17, x15, 768, x18)

inst_351:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x38062a and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x23fceb and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x5438062a; op2val:0xd4a3fceb; valaddr_reg:x16; val_offset:776; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 776, x17, x15, 776, x18)

inst_352:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x38062a and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x23fceb and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x5438062a; op2val:0xd4a3fceb; valaddr_reg:x16; val_offset:784; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 784, x17, x15, 784, x18)

inst_353:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x38062a and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x23fceb and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x5438062a; op2val:0xd4a3fceb; valaddr_reg:x16; val_offset:792; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 792, x17, x15, 792, x18)

inst_354:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x38062a and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x23fceb and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x5438062a; op2val:0xd4a3fceb; valaddr_reg:x16; val_offset:800; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 800, x17, x15, 800, x18)

inst_355:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x38062a and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x23fceb and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x5438062a; op2val:0xd4a3fceb; valaddr_reg:x16; val_offset:808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 808, x17, x15, 808, x18)

inst_356:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x1eba88 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x428af1 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x549eba88; op2val:0xd4428af1; valaddr_reg:x16; val_offset:816; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 816, x17, x15, 816, x18)

inst_357:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x1eba88 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x428af1 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x549eba88; op2val:0xd4428af1; valaddr_reg:x16; val_offset:824; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 824, x17, x15, 824, x18)

inst_358:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x1eba88 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x428af1 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x549eba88; op2val:0xd4428af1; valaddr_reg:x16; val_offset:832; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 832, x17, x15, 832, x18)

inst_359:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x1eba88 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x428af1 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x549eba88; op2val:0xd4428af1; valaddr_reg:x16; val_offset:840; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 840, x17, x15, 840, x18)

inst_360:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x1eba88 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x428af1 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x549eba88; op2val:0xd4428af1; valaddr_reg:x16; val_offset:848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 848, x17, x15, 848, x18)

inst_361:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x1c5514 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x31d576 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x541c5514; op2val:0xd4b1d576; valaddr_reg:x16; val_offset:856; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 856, x17, x15, 856, x18)

inst_362:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x1c5514 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x31d576 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x541c5514; op2val:0xd4b1d576; valaddr_reg:x16; val_offset:864; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 864, x17, x15, 864, x18)

inst_363:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x1c5514 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x31d576 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x541c5514; op2val:0xd4b1d576; valaddr_reg:x16; val_offset:872; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 872, x17, x15, 872, x18)

inst_364:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x1c5514 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x31d576 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x541c5514; op2val:0xd4b1d576; valaddr_reg:x16; val_offset:880; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 880, x17, x15, 880, x18)

inst_365:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x1c5514 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x31d576 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x541c5514; op2val:0xd4b1d576; valaddr_reg:x16; val_offset:888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 888, x17, x15, 888, x18)

inst_366:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x3ea01d and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x02bfc6 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54bea01d; op2val:0xd402bfc6; valaddr_reg:x16; val_offset:896; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 896, x17, x15, 896, x18)

inst_367:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x3ea01d and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x02bfc6 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54bea01d; op2val:0xd402bfc6; valaddr_reg:x16; val_offset:904; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 904, x17, x15, 904, x18)

inst_368:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x3ea01d and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x02bfc6 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54bea01d; op2val:0xd402bfc6; valaddr_reg:x16; val_offset:912; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 912, x17, x15, 912, x18)

inst_369:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x3ea01d and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x02bfc6 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54bea01d; op2val:0xd402bfc6; valaddr_reg:x16; val_offset:920; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 920, x17, x15, 920, x18)

inst_370:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x3ea01d and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x02bfc6 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54bea01d; op2val:0xd402bfc6; valaddr_reg:x16; val_offset:928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 928, x17, x15, 928, x18)

inst_371:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x55a7eb and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x296053 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54d5a7eb; op2val:0xd3a96053; valaddr_reg:x16; val_offset:936; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 936, x17, x15, 936, x18)

inst_372:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x55a7eb and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x296053 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54d5a7eb; op2val:0xd3a96053; valaddr_reg:x16; val_offset:944; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 944, x17, x15, 944, x18)

inst_373:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x55a7eb and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x296053 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54d5a7eb; op2val:0xd3a96053; valaddr_reg:x16; val_offset:952; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 952, x17, x15, 952, x18)

inst_374:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x55a7eb and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x296053 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54d5a7eb; op2val:0xd3a96053; valaddr_reg:x16; val_offset:960; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 960, x17, x15, 960, x18)

inst_375:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x55a7eb and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x296053 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54d5a7eb; op2val:0xd3a96053; valaddr_reg:x16; val_offset:968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 968, x17, x15, 968, x18)

inst_376:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x7cad39 and fs2 == 1 and fe2 == 0xa3 and fm2 == 0x54b1d9 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54fcad39; op2val:0xd1d4b1d9; valaddr_reg:x16; val_offset:976; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 976, x17, x15, 976, x18)

inst_377:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x7cad39 and fs2 == 1 and fe2 == 0xa3 and fm2 == 0x54b1d9 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54fcad39; op2val:0xd1d4b1d9; valaddr_reg:x16; val_offset:984; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 984, x17, x15, 984, x18)

inst_378:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x7cad39 and fs2 == 1 and fe2 == 0xa3 and fm2 == 0x54b1d9 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54fcad39; op2val:0xd1d4b1d9; valaddr_reg:x16; val_offset:992; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 992, x17, x15, 992, x18)

inst_379:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x7cad39 and fs2 == 1 and fe2 == 0xa3 and fm2 == 0x54b1d9 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54fcad39; op2val:0xd1d4b1d9; valaddr_reg:x16; val_offset:1000; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1000, x17, x15, 1000, x18)

inst_380:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x7cad39 and fs2 == 1 and fe2 == 0xa3 and fm2 == 0x54b1d9 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54fcad39; op2val:0xd1d4b1d9; valaddr_reg:x16; val_offset:1008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1008, x17, x15, 1008, x18)

inst_381:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x5454f3 and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x2eac32 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54d454f3; op2val:0xd3aeac32; valaddr_reg:x16; val_offset:1016; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1016, x17, x15, 1016, x18)

inst_382:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x5454f3 and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x2eac32 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54d454f3; op2val:0xd3aeac32; valaddr_reg:x16; val_offset:1024; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1024, x17, x15, 1024, x18)

inst_383:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x5454f3 and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x2eac32 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54d454f3; op2val:0xd3aeac32; valaddr_reg:x16; val_offset:1032; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1032, x17, x15, 1032, x18)

inst_384:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x5454f3 and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x2eac32 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54d454f3; op2val:0xd3aeac32; valaddr_reg:x16; val_offset:1040; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1040, x17, x15, 1040, x18)

inst_385:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x5454f3 and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x2eac32 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54d454f3; op2val:0xd3aeac32; valaddr_reg:x16; val_offset:1048; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1048, x17, x15, 1048, x18)

inst_386:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x19214a and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x4dbd6c and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x5499214a; op2val:0xd44dbd6c; valaddr_reg:x16; val_offset:1056; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1056, x17, x15, 1056, x18)

inst_387:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x19214a and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x4dbd6c and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x5499214a; op2val:0xd44dbd6c; valaddr_reg:x16; val_offset:1064; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1064, x17, x15, 1064, x18)

inst_388:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x19214a and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x4dbd6c and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x5499214a; op2val:0xd44dbd6c; valaddr_reg:x16; val_offset:1072; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1072, x17, x15, 1072, x18)

inst_389:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x19214a and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x4dbd6c and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x5499214a; op2val:0xd44dbd6c; valaddr_reg:x16; val_offset:1080; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1080, x17, x15, 1080, x18)

inst_390:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x19214a and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x4dbd6c and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x5499214a; op2val:0xd44dbd6c; valaddr_reg:x16; val_offset:1088; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1088, x17, x15, 1088, x18)

inst_391:
// fs1 == 0 and fe1 == 0xa1 and fm1 == 0x7dfec0 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x7f0201 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x50fdfec0; op2val:0xd4ff0201; valaddr_reg:x16; val_offset:1096; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1096, x17, x15, 1096, x18)

inst_392:
// fs1 == 0 and fe1 == 0xa1 and fm1 == 0x7dfec0 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x7f0201 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x50fdfec0; op2val:0xd4ff0201; valaddr_reg:x16; val_offset:1104; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1104, x17, x15, 1104, x18)

inst_393:
// fs1 == 0 and fe1 == 0xa1 and fm1 == 0x7dfec0 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x7f0201 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x50fdfec0; op2val:0xd4ff0201; valaddr_reg:x16; val_offset:1112; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1112, x17, x15, 1112, x18)

inst_394:
// fs1 == 0 and fe1 == 0xa1 and fm1 == 0x7dfec0 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x7f0201 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x50fdfec0; op2val:0xd4ff0201; valaddr_reg:x16; val_offset:1120; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1120, x17, x15, 1120, x18)

inst_395:
// fs1 == 0 and fe1 == 0xa1 and fm1 == 0x7dfec0 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x7f0201 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x50fdfec0; op2val:0xd4ff0201; valaddr_reg:x16; val_offset:1128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1128, x17, x15, 1128, x18)

inst_396:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x414f4f and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x1f5858 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54414f4f; op2val:0xd49f5858; valaddr_reg:x16; val_offset:1136; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1136, x17, x15, 1136, x18)

inst_397:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x414f4f and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x1f5858 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54414f4f; op2val:0xd49f5858; valaddr_reg:x16; val_offset:1144; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1144, x17, x15, 1144, x18)

inst_398:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x414f4f and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x1f5858 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54414f4f; op2val:0xd49f5858; valaddr_reg:x16; val_offset:1152; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1152, x17, x15, 1152, x18)

inst_399:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x414f4f and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x1f5858 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54414f4f; op2val:0xd49f5858; valaddr_reg:x16; val_offset:1160; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1160, x17, x15, 1160, x18)

inst_400:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x414f4f and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x1f5858 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54414f4f; op2val:0xd49f5858; valaddr_reg:x16; val_offset:1168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1168, x17, x15, 1168, x18)

inst_401:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x7c0ea2 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x01f8af and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x547c0ea2; op2val:0xd481f8af; valaddr_reg:x16; val_offset:1176; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1176, x17, x15, 1176, x18)

inst_402:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x7c0ea2 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x01f8af and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x547c0ea2; op2val:0xd481f8af; valaddr_reg:x16; val_offset:1184; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1184, x17, x15, 1184, x18)

inst_403:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x7c0ea2 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x01f8af and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x547c0ea2; op2val:0xd481f8af; valaddr_reg:x16; val_offset:1192; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1192, x17, x15, 1192, x18)

inst_404:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x7c0ea2 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x01f8af and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x547c0ea2; op2val:0xd481f8af; valaddr_reg:x16; val_offset:1200; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1200, x17, x15, 1200, x18)

inst_405:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x7c0ea2 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x01f8af and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x547c0ea2; op2val:0xd481f8af; valaddr_reg:x16; val_offset:1208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1208, x17, x15, 1208, x18)

inst_406:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x487869 and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x5e1e5c and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54c87869; op2val:0xd3de1e5c; valaddr_reg:x16; val_offset:1216; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1216, x17, x15, 1216, x18)

inst_407:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x487869 and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x5e1e5c and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54c87869; op2val:0xd3de1e5c; valaddr_reg:x16; val_offset:1224; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1224, x17, x15, 1224, x18)

inst_408:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x487869 and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x5e1e5c and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54c87869; op2val:0xd3de1e5c; valaddr_reg:x16; val_offset:1232; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1232, x17, x15, 1232, x18)

inst_409:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x487869 and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x5e1e5c and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54c87869; op2val:0xd3de1e5c; valaddr_reg:x16; val_offset:1240; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1240, x17, x15, 1240, x18)

inst_410:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x487869 and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x5e1e5c and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54c87869; op2val:0xd3de1e5c; valaddr_reg:x16; val_offset:1248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1248, x17, x15, 1248, x18)

inst_411:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x1c0ea3 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x31f8ae and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x541c0ea3; op2val:0xd4b1f8ae; valaddr_reg:x16; val_offset:1256; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1256, x17, x15, 1256, x18)

inst_412:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x1c0ea3 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x31f8ae and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x541c0ea3; op2val:0xd4b1f8ae; valaddr_reg:x16; val_offset:1264; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1264, x17, x15, 1264, x18)

inst_413:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x1c0ea3 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x31f8ae and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x541c0ea3; op2val:0xd4b1f8ae; valaddr_reg:x16; val_offset:1272; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1272, x17, x15, 1272, x18)

inst_414:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x1c0ea3 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x31f8ae and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x541c0ea3; op2val:0xd4b1f8ae; valaddr_reg:x16; val_offset:1280; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1280, x17, x15, 1280, x18)

inst_415:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x1c0ea3 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x31f8ae and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x541c0ea3; op2val:0xd4b1f8ae; valaddr_reg:x16; val_offset:1288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1288, x17, x15, 1288, x18)

inst_416:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x627706 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x0ec47c and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54627706; op2val:0xd48ec47c; valaddr_reg:x16; val_offset:1296; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1296, x17, x15, 1296, x18)

inst_417:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x627706 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x0ec47c and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54627706; op2val:0xd48ec47c; valaddr_reg:x16; val_offset:1304; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1304, x17, x15, 1304, x18)

inst_418:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x627706 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x0ec47c and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54627706; op2val:0xd48ec47c; valaddr_reg:x16; val_offset:1312; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1312, x17, x15, 1312, x18)

inst_419:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x627706 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x0ec47c and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54627706; op2val:0xd48ec47c; valaddr_reg:x16; val_offset:1320; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1320, x17, x15, 1320, x18)

inst_420:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x627706 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x0ec47c and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x54627706; op2val:0xd48ec47c; valaddr_reg:x16; val_offset:1328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1328, x17, x15, 1328, x18)

inst_421:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x717658 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x717658 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef17658; op2val:0x3ef17658; valaddr_reg:x16; val_offset:1336; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1336, x17, x15, 1336, x18)

inst_422:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x717658 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x717658 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef17658; op2val:0x3ef17658; valaddr_reg:x16; val_offset:1344; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1344, x17, x15, 1344, x18)

inst_423:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x717658 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x717658 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef17658; op2val:0x3ef17658; valaddr_reg:x16; val_offset:1352; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1352, x17, x15, 1352, x18)

inst_424:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x717658 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x717658 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef17658; op2val:0x3ef17658; valaddr_reg:x16; val_offset:1360; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1360, x17, x15, 1360, x18)

inst_425:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x717658 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x717658 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef17658; op2val:0x3ef17658; valaddr_reg:x16; val_offset:1368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1368, x17, x15, 1368, x18)

inst_426:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7e7286 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7e7286 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efe7286; op2val:0x3efe7286; valaddr_reg:x16; val_offset:1376; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1376, x17, x15, 1376, x18)

inst_427:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7e7286 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7e7286 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efe7286; op2val:0x3efe7286; valaddr_reg:x16; val_offset:1384; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1384, x17, x15, 1384, x18)

inst_428:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7e7286 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7e7286 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efe7286; op2val:0x3efe7286; valaddr_reg:x16; val_offset:1392; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1392, x17, x15, 1392, x18)

inst_429:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7e7286 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7e7286 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efe7286; op2val:0x3efe7286; valaddr_reg:x16; val_offset:1400; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1400, x17, x15, 1400, x18)

inst_430:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7e7286 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7e7286 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efe7286; op2val:0x3efe7286; valaddr_reg:x16; val_offset:1408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1408, x17, x15, 1408, x18)

inst_431:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5ad704 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5ad704 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3edad704; op2val:0x3edad704; valaddr_reg:x16; val_offset:1416; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1416, x17, x15, 1416, x18)

inst_432:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5ad704 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5ad704 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3edad704; op2val:0x3edad704; valaddr_reg:x16; val_offset:1424; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1424, x17, x15, 1424, x18)

inst_433:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5ad704 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5ad704 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3edad704; op2val:0x3edad704; valaddr_reg:x16; val_offset:1432; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1432, x17, x15, 1432, x18)

inst_434:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5ad704 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5ad704 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3edad704; op2val:0x3edad704; valaddr_reg:x16; val_offset:1440; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1440, x17, x15, 1440, x18)

inst_435:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5ad704 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5ad704 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3edad704; op2val:0x3edad704; valaddr_reg:x16; val_offset:1448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1448, x17, x15, 1448, x18)

inst_436:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5d082c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5d082c and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5d082c; op2val:0x3f5d082c; valaddr_reg:x16; val_offset:1456; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1456, x17, x15, 1456, x18)

inst_437:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5d082c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5d082c and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5d082c; op2val:0x3f5d082c; valaddr_reg:x16; val_offset:1464; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1464, x17, x15, 1464, x18)

inst_438:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5d082c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5d082c and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5d082c; op2val:0x3f5d082c; valaddr_reg:x16; val_offset:1472; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1472, x17, x15, 1472, x18)

inst_439:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5d082c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5d082c and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5d082c; op2val:0x3f5d082c; valaddr_reg:x16; val_offset:1480; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1480, x17, x15, 1480, x18)

inst_440:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5d082c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5d082c and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5d082c; op2val:0x3f5d082c; valaddr_reg:x16; val_offset:1488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1488, x17, x15, 1488, x18)

inst_441:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x74ab34 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x74ab34 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e74ab34; op2val:0x3e74ab34; valaddr_reg:x16; val_offset:1496; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1496, x17, x15, 1496, x18)

inst_442:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x74ab34 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x74ab34 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e74ab34; op2val:0x3e74ab34; valaddr_reg:x16; val_offset:1504; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1504, x17, x15, 1504, x18)

inst_443:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x74ab34 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x74ab34 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e74ab34; op2val:0x3e74ab34; valaddr_reg:x16; val_offset:1512; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1512, x17, x15, 1512, x18)

inst_444:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x74ab34 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x74ab34 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e74ab34; op2val:0x3e74ab34; valaddr_reg:x16; val_offset:1520; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1520, x17, x15, 1520, x18)

inst_445:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x74ab34 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x74ab34 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e74ab34; op2val:0x3e74ab34; valaddr_reg:x16; val_offset:1528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1528, x17, x15, 1528, x18)

inst_446:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x68d021 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x68d021 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ee8d021; op2val:0x3ee8d021; valaddr_reg:x16; val_offset:1536; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1536, x17, x15, 1536, x18)

inst_447:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x68d021 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x68d021 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ee8d021; op2val:0x3ee8d021; valaddr_reg:x16; val_offset:1544; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1544, x17, x15, 1544, x18)

inst_448:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x68d021 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x68d021 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ee8d021; op2val:0x3ee8d021; valaddr_reg:x16; val_offset:1552; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1552, x17, x15, 1552, x18)

inst_449:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x68d021 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x68d021 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ee8d021; op2val:0x3ee8d021; valaddr_reg:x16; val_offset:1560; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1560, x17, x15, 1560, x18)

inst_450:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x68d021 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x68d021 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ee8d021; op2val:0x3ee8d021; valaddr_reg:x16; val_offset:1568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1568, x17, x15, 1568, x18)

inst_451:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x61c610 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x61c610 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f61c610; op2val:0x3f61c610; valaddr_reg:x16; val_offset:1576; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1576, x17, x15, 1576, x18)

inst_452:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x61c610 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x61c610 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f61c610; op2val:0x3f61c610; valaddr_reg:x16; val_offset:1584; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1584, x17, x15, 1584, x18)

inst_453:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x61c610 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x61c610 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f61c610; op2val:0x3f61c610; valaddr_reg:x16; val_offset:1592; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1592, x17, x15, 1592, x18)

inst_454:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x61c610 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x61c610 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f61c610; op2val:0x3f61c610; valaddr_reg:x16; val_offset:1600; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1600, x17, x15, 1600, x18)

inst_455:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x61c610 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x61c610 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f61c610; op2val:0x3f61c610; valaddr_reg:x16; val_offset:1608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1608, x17, x15, 1608, x18)

inst_456:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6450fd and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6450fd and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6450fd; op2val:0x3f6450fd; valaddr_reg:x16; val_offset:1616; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1616, x17, x15, 1616, x18)

inst_457:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6450fd and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6450fd and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6450fd; op2val:0x3f6450fd; valaddr_reg:x16; val_offset:1624; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1624, x17, x15, 1624, x18)

inst_458:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6450fd and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6450fd and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6450fd; op2val:0x3f6450fd; valaddr_reg:x16; val_offset:1632; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1632, x17, x15, 1632, x18)

inst_459:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6450fd and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6450fd and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6450fd; op2val:0x3f6450fd; valaddr_reg:x16; val_offset:1640; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1640, x17, x15, 1640, x18)

inst_460:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6450fd and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6450fd and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6450fd; op2val:0x3f6450fd; valaddr_reg:x16; val_offset:1648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1648, x17, x15, 1648, x18)

inst_461:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1de2e8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1de2e8 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1de2e8; op2val:0x3f1de2e8; valaddr_reg:x16; val_offset:1656; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1656, x17, x15, 1656, x18)

inst_462:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1de2e8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1de2e8 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1de2e8; op2val:0x3f1de2e8; valaddr_reg:x16; val_offset:1664; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1664, x17, x15, 1664, x18)

inst_463:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1de2e8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1de2e8 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1de2e8; op2val:0x3f1de2e8; valaddr_reg:x16; val_offset:1672; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1672, x17, x15, 1672, x18)

inst_464:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1de2e8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1de2e8 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1de2e8; op2val:0x3f1de2e8; valaddr_reg:x16; val_offset:1680; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1680, x17, x15, 1680, x18)

inst_465:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1de2e8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1de2e8 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1de2e8; op2val:0x3f1de2e8; valaddr_reg:x16; val_offset:1688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1688, x17, x15, 1688, x18)

inst_466:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x6c7999 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x6c7999 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e6c7999; op2val:0x3e6c7999; valaddr_reg:x16; val_offset:1696; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1696, x17, x15, 1696, x18)

inst_467:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x6c7999 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x6c7999 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e6c7999; op2val:0x3e6c7999; valaddr_reg:x16; val_offset:1704; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1704, x17, x15, 1704, x18)

inst_468:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x6c7999 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x6c7999 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e6c7999; op2val:0x3e6c7999; valaddr_reg:x16; val_offset:1712; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1712, x17, x15, 1712, x18)

inst_469:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x6c7999 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x6c7999 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e6c7999; op2val:0x3e6c7999; valaddr_reg:x16; val_offset:1720; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1720, x17, x15, 1720, x18)

inst_470:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x6c7999 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x6c7999 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e6c7999; op2val:0x3e6c7999; valaddr_reg:x16; val_offset:1728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1728, x17, x15, 1728, x18)

inst_471:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x025a52 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x025a52 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f025a52; op2val:0x3f025a52; valaddr_reg:x16; val_offset:1736; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1736, x17, x15, 1736, x18)

inst_472:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x025a52 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x025a52 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f025a52; op2val:0x3f025a52; valaddr_reg:x16; val_offset:1744; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1744, x17, x15, 1744, x18)

inst_473:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x025a52 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x025a52 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f025a52; op2val:0x3f025a52; valaddr_reg:x16; val_offset:1752; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1752, x17, x15, 1752, x18)

inst_474:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x025a52 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x025a52 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f025a52; op2val:0x3f025a52; valaddr_reg:x16; val_offset:1760; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1760, x17, x15, 1760, x18)

inst_475:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x025a52 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x025a52 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f025a52; op2val:0x3f025a52; valaddr_reg:x16; val_offset:1768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1768, x17, x15, 1768, x18)

inst_476:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x582307 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x582307 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3cd82307; op2val:0x3cd82307; valaddr_reg:x16; val_offset:1776; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1776, x17, x15, 1776, x18)

inst_477:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x582307 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x582307 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3cd82307; op2val:0x3cd82307; valaddr_reg:x16; val_offset:1784; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1784, x17, x15, 1784, x18)

inst_478:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x582307 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x582307 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3cd82307; op2val:0x3cd82307; valaddr_reg:x16; val_offset:1792; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1792, x17, x15, 1792, x18)

inst_479:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x582307 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x582307 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3cd82307; op2val:0x3cd82307; valaddr_reg:x16; val_offset:1800; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1800, x17, x15, 1800, x18)

inst_480:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x582307 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x582307 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3cd82307; op2val:0x3cd82307; valaddr_reg:x16; val_offset:1808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1808, x17, x15, 1808, x18)

inst_481:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x55ec50 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x55ec50 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e55ec50; op2val:0x3e55ec50; valaddr_reg:x16; val_offset:1816; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1816, x17, x15, 1816, x18)

inst_482:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x55ec50 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x55ec50 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e55ec50; op2val:0x3e55ec50; valaddr_reg:x16; val_offset:1824; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1824, x17, x15, 1824, x18)

inst_483:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x55ec50 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x55ec50 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e55ec50; op2val:0x3e55ec50; valaddr_reg:x16; val_offset:1832; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1832, x17, x15, 1832, x18)

inst_484:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x55ec50 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x55ec50 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e55ec50; op2val:0x3e55ec50; valaddr_reg:x16; val_offset:1840; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1840, x17, x15, 1840, x18)

inst_485:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x55ec50 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x55ec50 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e55ec50; op2val:0x3e55ec50; valaddr_reg:x16; val_offset:1848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1848, x17, x15, 1848, x18)

inst_486:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3fc62e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3fc62e and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3fc62e; op2val:0x3f3fc62e; valaddr_reg:x16; val_offset:1856; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1856, x17, x15, 1856, x18)

inst_487:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3fc62e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3fc62e and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3fc62e; op2val:0x3f3fc62e; valaddr_reg:x16; val_offset:1864; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1864, x17, x15, 1864, x18)

inst_488:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3fc62e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3fc62e and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3fc62e; op2val:0x3f3fc62e; valaddr_reg:x16; val_offset:1872; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1872, x17, x15, 1872, x18)

inst_489:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3fc62e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3fc62e and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3fc62e; op2val:0x3f3fc62e; valaddr_reg:x16; val_offset:1880; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1880, x17, x15, 1880, x18)

inst_490:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3fc62e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3fc62e and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3fc62e; op2val:0x3f3fc62e; valaddr_reg:x16; val_offset:1888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1888, x17, x15, 1888, x18)

inst_491:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3a0de1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3a0de1 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3a0de1; op2val:0x3f3a0de1; valaddr_reg:x16; val_offset:1896; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1896, x17, x15, 1896, x18)

inst_492:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3a0de1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3a0de1 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3a0de1; op2val:0x3f3a0de1; valaddr_reg:x16; val_offset:1904; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1904, x17, x15, 1904, x18)

inst_493:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3a0de1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3a0de1 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3a0de1; op2val:0x3f3a0de1; valaddr_reg:x16; val_offset:1912; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1912, x17, x15, 1912, x18)

inst_494:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3a0de1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3a0de1 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3a0de1; op2val:0x3f3a0de1; valaddr_reg:x16; val_offset:1920; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1920, x17, x15, 1920, x18)

inst_495:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3a0de1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3a0de1 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3a0de1; op2val:0x3f3a0de1; valaddr_reg:x16; val_offset:1928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1928, x17, x15, 1928, x18)

inst_496:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x37188d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x37188d and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f37188d; op2val:0x3f37188d; valaddr_reg:x16; val_offset:1936; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1936, x17, x15, 1936, x18)

inst_497:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x37188d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x37188d and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f37188d; op2val:0x3f37188d; valaddr_reg:x16; val_offset:1944; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1944, x17, x15, 1944, x18)

inst_498:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x37188d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x37188d and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f37188d; op2val:0x3f37188d; valaddr_reg:x16; val_offset:1952; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1952, x17, x15, 1952, x18)

inst_499:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x37188d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x37188d and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f37188d; op2val:0x3f37188d; valaddr_reg:x16; val_offset:1960; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1960, x17, x15, 1960, x18)

inst_500:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x37188d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x37188d and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f37188d; op2val:0x3f37188d; valaddr_reg:x16; val_offset:1968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1968, x17, x15, 1968, x18)

inst_501:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x289ea2 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x289ea2 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e289ea2; op2val:0x3e289ea2; valaddr_reg:x16; val_offset:1976; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1976, x17, x15, 1976, x18)

inst_502:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x289ea2 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x289ea2 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e289ea2; op2val:0x3e289ea2; valaddr_reg:x16; val_offset:1984; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1984, x17, x15, 1984, x18)

inst_503:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x289ea2 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x289ea2 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e289ea2; op2val:0x3e289ea2; valaddr_reg:x16; val_offset:1992; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1992, x17, x15, 1992, x18)

inst_504:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x289ea2 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x289ea2 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e289ea2; op2val:0x3e289ea2; valaddr_reg:x16; val_offset:2000; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 2000, x17, x15, 2000, x18)

inst_505:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x289ea2 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x289ea2 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e289ea2; op2val:0x3e289ea2; valaddr_reg:x16; val_offset:2008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 2008, x17, x15, 2008, x18)

inst_506:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3eb4d5 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x3eb4d5 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebeb4d5; op2val:0x3ebeb4d5; valaddr_reg:x16; val_offset:2016; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 2016, x17, x15, 2016, x18)

inst_507:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3eb4d5 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x3eb4d5 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebeb4d5; op2val:0x3ebeb4d5; valaddr_reg:x16; val_offset:2024; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_3)

inst_508:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3eb4d5 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x3eb4d5 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebeb4d5; op2val:0x3ebeb4d5; valaddr_reg:x16; val_offset:0; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 0, x17, x15, 0, x18)

inst_509:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3eb4d5 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x3eb4d5 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebeb4d5; op2val:0x3ebeb4d5; valaddr_reg:x16; val_offset:8; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 8, x17, x15, 8, x18)

inst_510:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3eb4d5 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x3eb4d5 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebeb4d5; op2val:0x3ebeb4d5; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 16, x17, x15, 16, x18)

inst_511:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0fac91 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0fac91 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0fac91; op2val:0x3f0fac91; valaddr_reg:x16; val_offset:24; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 24, x17, x15, 24, x18)

inst_512:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0fac91 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0fac91 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0fac91; op2val:0x3f0fac91; valaddr_reg:x16; val_offset:32; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 32, x17, x15, 32, x18)

inst_513:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0fac91 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0fac91 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0fac91; op2val:0x3f0fac91; valaddr_reg:x16; val_offset:40; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 40, x17, x15, 40, x18)

inst_514:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0fac91 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0fac91 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0fac91; op2val:0x3f0fac91; valaddr_reg:x16; val_offset:48; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 48, x17, x15, 48, x18)

inst_515:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0fac91 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0fac91 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0fac91; op2val:0x3f0fac91; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 56, x17, x15, 56, x18)

inst_516:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7ef944 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7ef944 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7ef944; op2val:0x3f7ef944; valaddr_reg:x16; val_offset:64; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 64, x17, x15, 64, x18)

inst_517:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7ef944 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7ef944 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7ef944; op2val:0x3f7ef944; valaddr_reg:x16; val_offset:72; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 72, x17, x15, 72, x18)

inst_518:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7ef944 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7ef944 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7ef944; op2val:0x3f7ef944; valaddr_reg:x16; val_offset:80; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 80, x17, x15, 80, x18)

inst_519:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7ef944 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7ef944 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7ef944; op2val:0x3f7ef944; valaddr_reg:x16; val_offset:88; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 88, x17, x15, 88, x18)

inst_520:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7ef944 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7ef944 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7ef944; op2val:0x3f7ef944; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 96, x17, x15, 96, x18)

inst_521:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4074e4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4074e4 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4074e4; op2val:0x3f4074e4; valaddr_reg:x16; val_offset:104; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 104, x17, x15, 104, x18)

inst_522:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4074e4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4074e4 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4074e4; op2val:0x3f4074e4; valaddr_reg:x16; val_offset:112; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 112, x17, x15, 112, x18)

inst_523:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4074e4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4074e4 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4074e4; op2val:0x3f4074e4; valaddr_reg:x16; val_offset:120; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 120, x17, x15, 120, x18)

inst_524:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4074e4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4074e4 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4074e4; op2val:0x3f4074e4; valaddr_reg:x16; val_offset:128; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 128, x17, x15, 128, x18)

inst_525:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4074e4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4074e4 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4074e4; op2val:0x3f4074e4; valaddr_reg:x16; val_offset:136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 136, x17, x15, 136, x18)

inst_526:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x61c4da and fs2 == 0 and fe2 == 0x7e and fm2 == 0x61c4da and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f61c4da; op2val:0x3f61c4da; valaddr_reg:x16; val_offset:144; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 144, x17, x15, 144, x18)

inst_527:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x61c4da and fs2 == 0 and fe2 == 0x7e and fm2 == 0x61c4da and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f61c4da; op2val:0x3f61c4da; valaddr_reg:x16; val_offset:152; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 152, x17, x15, 152, x18)

inst_528:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x61c4da and fs2 == 0 and fe2 == 0x7e and fm2 == 0x61c4da and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f61c4da; op2val:0x3f61c4da; valaddr_reg:x16; val_offset:160; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 160, x17, x15, 160, x18)

inst_529:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x61c4da and fs2 == 0 and fe2 == 0x7e and fm2 == 0x61c4da and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f61c4da; op2val:0x3f61c4da; valaddr_reg:x16; val_offset:168; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 168, x17, x15, 168, x18)

inst_530:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x61c4da and fs2 == 0 and fe2 == 0x7e and fm2 == 0x61c4da and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f61c4da; op2val:0x3f61c4da; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 176, x17, x15, 176, x18)

inst_531:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4c73ca and fs2 == 0 and fe2 == 0x7d and fm2 == 0x4c73ca and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ecc73ca; op2val:0x3ecc73ca; valaddr_reg:x16; val_offset:184; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 184, x17, x15, 184, x18)

inst_532:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4c73ca and fs2 == 0 and fe2 == 0x7d and fm2 == 0x4c73ca and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ecc73ca; op2val:0x3ecc73ca; valaddr_reg:x16; val_offset:192; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 192, x17, x15, 192, x18)

inst_533:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4c73ca and fs2 == 0 and fe2 == 0x7d and fm2 == 0x4c73ca and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ecc73ca; op2val:0x3ecc73ca; valaddr_reg:x16; val_offset:200; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 200, x17, x15, 200, x18)

inst_534:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4c73ca and fs2 == 0 and fe2 == 0x7d and fm2 == 0x4c73ca and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ecc73ca; op2val:0x3ecc73ca; valaddr_reg:x16; val_offset:208; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 208, x17, x15, 208, x18)

inst_535:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4c73ca and fs2 == 0 and fe2 == 0x7d and fm2 == 0x4c73ca and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ecc73ca; op2val:0x3ecc73ca; valaddr_reg:x16; val_offset:216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 216, x17, x15, 216, x18)

inst_536:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x2632ef and fs2 == 0 and fe2 == 0x7a and fm2 == 0x2632ef and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d2632ef; op2val:0x3d2632ef; valaddr_reg:x16; val_offset:224; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 224, x17, x15, 224, x18)

inst_537:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x2632ef and fs2 == 0 and fe2 == 0x7a and fm2 == 0x2632ef and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d2632ef; op2val:0x3d2632ef; valaddr_reg:x16; val_offset:232; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 232, x17, x15, 232, x18)

inst_538:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x2632ef and fs2 == 0 and fe2 == 0x7a and fm2 == 0x2632ef and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d2632ef; op2val:0x3d2632ef; valaddr_reg:x16; val_offset:240; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 240, x17, x15, 240, x18)

inst_539:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x2632ef and fs2 == 0 and fe2 == 0x7a and fm2 == 0x2632ef and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d2632ef; op2val:0x3d2632ef; valaddr_reg:x16; val_offset:248; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 248, x17, x15, 248, x18)

inst_540:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x2632ef and fs2 == 0 and fe2 == 0x7a and fm2 == 0x2632ef and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d2632ef; op2val:0x3d2632ef; valaddr_reg:x16; val_offset:256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 256, x17, x15, 256, x18)

inst_541:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5fa8d5 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5fa8d5 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5fa8d5; op2val:0x3f5fa8d5; valaddr_reg:x16; val_offset:264; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 264, x17, x15, 264, x18)

inst_542:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5fa8d5 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5fa8d5 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5fa8d5; op2val:0x3f5fa8d5; valaddr_reg:x16; val_offset:272; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 272, x17, x15, 272, x18)

inst_543:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5fa8d5 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5fa8d5 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5fa8d5; op2val:0x3f5fa8d5; valaddr_reg:x16; val_offset:280; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 280, x17, x15, 280, x18)

inst_544:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5fa8d5 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5fa8d5 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5fa8d5; op2val:0x3f5fa8d5; valaddr_reg:x16; val_offset:288; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 288, x17, x15, 288, x18)

inst_545:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5fa8d5 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5fa8d5 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5fa8d5; op2val:0x3f5fa8d5; valaddr_reg:x16; val_offset:296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 296, x17, x15, 296, x18)

inst_546:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x55d2aa and fs2 == 0 and fe2 == 0x7e and fm2 == 0x55d2aa and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f55d2aa; op2val:0x3f55d2aa; valaddr_reg:x16; val_offset:304; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 304, x17, x15, 304, x18)

inst_547:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x55d2aa and fs2 == 0 and fe2 == 0x7e and fm2 == 0x55d2aa and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f55d2aa; op2val:0x3f55d2aa; valaddr_reg:x16; val_offset:312; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 312, x17, x15, 312, x18)

inst_548:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x55d2aa and fs2 == 0 and fe2 == 0x7e and fm2 == 0x55d2aa and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f55d2aa; op2val:0x3f55d2aa; valaddr_reg:x16; val_offset:320; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 320, x17, x15, 320, x18)

inst_549:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x55d2aa and fs2 == 0 and fe2 == 0x7e and fm2 == 0x55d2aa and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f55d2aa; op2val:0x3f55d2aa; valaddr_reg:x16; val_offset:328; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 328, x17, x15, 328, x18)

inst_550:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x55d2aa and fs2 == 0 and fe2 == 0x7e and fm2 == 0x55d2aa and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f55d2aa; op2val:0x3f55d2aa; valaddr_reg:x16; val_offset:336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 336, x17, x15, 336, x18)

inst_551:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4a05fd and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4a05fd and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4a05fd; op2val:0x3e4a05fd; valaddr_reg:x16; val_offset:344; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 344, x17, x15, 344, x18)

inst_552:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4a05fd and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4a05fd and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4a05fd; op2val:0x3e4a05fd; valaddr_reg:x16; val_offset:352; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 352, x17, x15, 352, x18)

inst_553:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4a05fd and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4a05fd and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4a05fd; op2val:0x3e4a05fd; valaddr_reg:x16; val_offset:360; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 360, x17, x15, 360, x18)

inst_554:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4a05fd and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4a05fd and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4a05fd; op2val:0x3e4a05fd; valaddr_reg:x16; val_offset:368; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 368, x17, x15, 368, x18)

inst_555:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4a05fd and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4a05fd and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4a05fd; op2val:0x3e4a05fd; valaddr_reg:x16; val_offset:376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 376, x17, x15, 376, x18)

inst_556:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x6bde30 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x6bde30 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3cebde30; op2val:0x3cebde30; valaddr_reg:x16; val_offset:384; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 384, x17, x15, 384, x18)

inst_557:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x6bde30 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x6bde30 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3cebde30; op2val:0x3cebde30; valaddr_reg:x16; val_offset:392; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 392, x17, x15, 392, x18)

inst_558:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x6bde30 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x6bde30 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3cebde30; op2val:0x3cebde30; valaddr_reg:x16; val_offset:400; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 400, x17, x15, 400, x18)

inst_559:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x6bde30 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x6bde30 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3cebde30; op2val:0x3cebde30; valaddr_reg:x16; val_offset:408; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 408, x17, x15, 408, x18)

inst_560:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x6bde30 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x6bde30 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3cebde30; op2val:0x3cebde30; valaddr_reg:x16; val_offset:416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 416, x17, x15, 416, x18)

inst_561:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0e10a1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0e10a1 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0e10a1; op2val:0x3f0e10a1; valaddr_reg:x16; val_offset:424; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 424, x17, x15, 424, x18)

inst_562:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0e10a1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0e10a1 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0e10a1; op2val:0x3f0e10a1; valaddr_reg:x16; val_offset:432; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 432, x17, x15, 432, x18)

inst_563:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0e10a1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0e10a1 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0e10a1; op2val:0x3f0e10a1; valaddr_reg:x16; val_offset:440; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 440, x17, x15, 440, x18)

inst_564:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0e10a1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0e10a1 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0e10a1; op2val:0x3f0e10a1; valaddr_reg:x16; val_offset:448; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 448, x17, x15, 448, x18)

inst_565:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0e10a1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0e10a1 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0e10a1; op2val:0x3f0e10a1; valaddr_reg:x16; val_offset:456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 456, x17, x15, 456, x18)

inst_566:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2e3986 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x2e3986 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eae3986; op2val:0x3eae3986; valaddr_reg:x16; val_offset:464; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 464, x17, x15, 464, x18)

inst_567:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2e3986 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x2e3986 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eae3986; op2val:0x3eae3986; valaddr_reg:x16; val_offset:472; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 472, x17, x15, 472, x18)

inst_568:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2e3986 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x2e3986 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eae3986; op2val:0x3eae3986; valaddr_reg:x16; val_offset:480; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 480, x17, x15, 480, x18)

inst_569:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2e3986 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x2e3986 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eae3986; op2val:0x3eae3986; valaddr_reg:x16; val_offset:488; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 488, x17, x15, 488, x18)

inst_570:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2e3986 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x2e3986 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eae3986; op2val:0x3eae3986; valaddr_reg:x16; val_offset:496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 496, x17, x15, 496, x18)

inst_571:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x659fe4 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x659fe4 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e659fe4; op2val:0x3e659fe4; valaddr_reg:x16; val_offset:504; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 504, x17, x15, 504, x18)

inst_572:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x659fe4 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x659fe4 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e659fe4; op2val:0x3e659fe4; valaddr_reg:x16; val_offset:512; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 512, x17, x15, 512, x18)

inst_573:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x659fe4 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x659fe4 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e659fe4; op2val:0x3e659fe4; valaddr_reg:x16; val_offset:520; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 520, x17, x15, 520, x18)

inst_574:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x659fe4 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x659fe4 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e659fe4; op2val:0x3e659fe4; valaddr_reg:x16; val_offset:528; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 528, x17, x15, 528, x18)

inst_575:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x659fe4 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x659fe4 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e659fe4; op2val:0x3e659fe4; valaddr_reg:x16; val_offset:536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 536, x17, x15, 536, x18)

inst_576:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x262376 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x262376 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d262376; op2val:0x3d262376; valaddr_reg:x16; val_offset:544; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 544, x17, x15, 544, x18)

inst_577:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x262376 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x262376 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d262376; op2val:0x3d262376; valaddr_reg:x16; val_offset:552; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 552, x17, x15, 552, x18)

inst_578:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x262376 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x262376 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d262376; op2val:0x3d262376; valaddr_reg:x16; val_offset:560; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 560, x17, x15, 560, x18)

inst_579:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x262376 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x262376 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d262376; op2val:0x3d262376; valaddr_reg:x16; val_offset:568; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 568, x17, x15, 568, x18)

inst_580:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x262376 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x262376 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d262376; op2val:0x3d262376; valaddr_reg:x16; val_offset:576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 576, x17, x15, 576, x18)

inst_581:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3b8366 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3b8366 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3b8366; op2val:0x3f3b8366; valaddr_reg:x16; val_offset:584; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 584, x17, x15, 584, x18)

inst_582:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3b8366 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3b8366 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3b8366; op2val:0x3f3b8366; valaddr_reg:x16; val_offset:592; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 592, x17, x15, 592, x18)

inst_583:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3b8366 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3b8366 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3b8366; op2val:0x3f3b8366; valaddr_reg:x16; val_offset:600; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 600, x17, x15, 600, x18)

inst_584:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3b8366 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3b8366 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3b8366; op2val:0x3f3b8366; valaddr_reg:x16; val_offset:608; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 608, x17, x15, 608, x18)

inst_585:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3b8366 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3b8366 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3b8366; op2val:0x3f3b8366; valaddr_reg:x16; val_offset:616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 616, x17, x15, 616, x18)

inst_586:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x44aa65 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x44aa65 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e44aa65; op2val:0x3e44aa65; valaddr_reg:x16; val_offset:624; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 624, x17, x15, 624, x18)

inst_587:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x44aa65 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x44aa65 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e44aa65; op2val:0x3e44aa65; valaddr_reg:x16; val_offset:632; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 632, x17, x15, 632, x18)

inst_588:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x44aa65 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x44aa65 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e44aa65; op2val:0x3e44aa65; valaddr_reg:x16; val_offset:640; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 640, x17, x15, 640, x18)

inst_589:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x44aa65 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x44aa65 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e44aa65; op2val:0x3e44aa65; valaddr_reg:x16; val_offset:648; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 648, x17, x15, 648, x18)

inst_590:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x44aa65 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x44aa65 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e44aa65; op2val:0x3e44aa65; valaddr_reg:x16; val_offset:656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 656, x17, x15, 656, x18)

inst_591:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x75941d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x75941d and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f75941d; op2val:0x3f75941d; valaddr_reg:x16; val_offset:664; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 664, x17, x15, 664, x18)

inst_592:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x75941d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x75941d and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f75941d; op2val:0x3f75941d; valaddr_reg:x16; val_offset:672; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 672, x17, x15, 672, x18)

inst_593:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x75941d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x75941d and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f75941d; op2val:0x3f75941d; valaddr_reg:x16; val_offset:680; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 680, x17, x15, 680, x18)

inst_594:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x75941d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x75941d and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f75941d; op2val:0x3f75941d; valaddr_reg:x16; val_offset:688; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 688, x17, x15, 688, x18)

inst_595:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x75941d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x75941d and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f75941d; op2val:0x3f75941d; valaddr_reg:x16; val_offset:696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 696, x17, x15, 696, x18)

inst_596:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x55cfc9 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x55cfc9 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f55cfc9; op2val:0x3f55cfc9; valaddr_reg:x16; val_offset:704; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 704, x17, x15, 704, x18)

inst_597:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x55cfc9 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x55cfc9 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f55cfc9; op2val:0x3f55cfc9; valaddr_reg:x16; val_offset:712; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 712, x17, x15, 712, x18)

inst_598:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x55cfc9 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x55cfc9 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f55cfc9; op2val:0x3f55cfc9; valaddr_reg:x16; val_offset:720; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 720, x17, x15, 720, x18)

inst_599:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x55cfc9 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x55cfc9 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f55cfc9; op2val:0x3f55cfc9; valaddr_reg:x16; val_offset:728; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 728, x17, x15, 728, x18)

inst_600:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x55cfc9 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x55cfc9 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f55cfc9; op2val:0x3f55cfc9; valaddr_reg:x16; val_offset:736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 736, x17, x15, 736, x18)

inst_601:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x26eaaf and fs2 == 0 and fe2 == 0x7e and fm2 == 0x26eaaf and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f26eaaf; op2val:0x3f26eaaf; valaddr_reg:x16; val_offset:744; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 744, x17, x15, 744, x18)

inst_602:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x26eaaf and fs2 == 0 and fe2 == 0x7e and fm2 == 0x26eaaf and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f26eaaf; op2val:0x3f26eaaf; valaddr_reg:x16; val_offset:752; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 752, x17, x15, 752, x18)

inst_603:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x26eaaf and fs2 == 0 and fe2 == 0x7e and fm2 == 0x26eaaf and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f26eaaf; op2val:0x3f26eaaf; valaddr_reg:x16; val_offset:760; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 760, x17, x15, 760, x18)

inst_604:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x26eaaf and fs2 == 0 and fe2 == 0x7e and fm2 == 0x26eaaf and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f26eaaf; op2val:0x3f26eaaf; valaddr_reg:x16; val_offset:768; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 768, x17, x15, 768, x18)

inst_605:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x26eaaf and fs2 == 0 and fe2 == 0x7e and fm2 == 0x26eaaf and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f26eaaf; op2val:0x3f26eaaf; valaddr_reg:x16; val_offset:776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 776, x17, x15, 776, x18)

inst_606:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x23008b and fs2 == 0 and fe2 == 0x7d and fm2 == 0x23008b and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea3008b; op2val:0x3ea3008b; valaddr_reg:x16; val_offset:784; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 784, x17, x15, 784, x18)

inst_607:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x23008b and fs2 == 0 and fe2 == 0x7d and fm2 == 0x23008b and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea3008b; op2val:0x3ea3008b; valaddr_reg:x16; val_offset:792; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 792, x17, x15, 792, x18)

inst_608:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x23008b and fs2 == 0 and fe2 == 0x7d and fm2 == 0x23008b and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea3008b; op2val:0x3ea3008b; valaddr_reg:x16; val_offset:800; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 800, x17, x15, 800, x18)

inst_609:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x23008b and fs2 == 0 and fe2 == 0x7d and fm2 == 0x23008b and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea3008b; op2val:0x3ea3008b; valaddr_reg:x16; val_offset:808; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 808, x17, x15, 808, x18)

inst_610:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x23008b and fs2 == 0 and fe2 == 0x7d and fm2 == 0x23008b and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea3008b; op2val:0x3ea3008b; valaddr_reg:x16; val_offset:816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 816, x17, x15, 816, x18)

inst_611:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x78105a and fs2 == 0 and fe2 == 0x7c and fm2 == 0x78105a and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e78105a; op2val:0x3e78105a; valaddr_reg:x16; val_offset:824; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 824, x17, x15, 824, x18)

inst_612:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x78105a and fs2 == 0 and fe2 == 0x7c and fm2 == 0x78105a and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e78105a; op2val:0x3e78105a; valaddr_reg:x16; val_offset:832; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 832, x17, x15, 832, x18)

inst_613:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x78105a and fs2 == 0 and fe2 == 0x7c and fm2 == 0x78105a and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e78105a; op2val:0x3e78105a; valaddr_reg:x16; val_offset:840; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 840, x17, x15, 840, x18)

inst_614:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x78105a and fs2 == 0 and fe2 == 0x7c and fm2 == 0x78105a and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e78105a; op2val:0x3e78105a; valaddr_reg:x16; val_offset:848; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 848, x17, x15, 848, x18)

inst_615:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x78105a and fs2 == 0 and fe2 == 0x7c and fm2 == 0x78105a and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e78105a; op2val:0x3e78105a; valaddr_reg:x16; val_offset:856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 856, x17, x15, 856, x18)

inst_616:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x484a24 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x484a24 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f484a24; op2val:0x3f484a24; valaddr_reg:x16; val_offset:864; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 864, x17, x15, 864, x18)

inst_617:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x484a24 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x484a24 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f484a24; op2val:0x3f484a24; valaddr_reg:x16; val_offset:872; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 872, x17, x15, 872, x18)

inst_618:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x484a24 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x484a24 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f484a24; op2val:0x3f484a24; valaddr_reg:x16; val_offset:880; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 880, x17, x15, 880, x18)

inst_619:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x484a24 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x484a24 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f484a24; op2val:0x3f484a24; valaddr_reg:x16; val_offset:888; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 888, x17, x15, 888, x18)

inst_620:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x484a24 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x484a24 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f484a24; op2val:0x3f484a24; valaddr_reg:x16; val_offset:896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 896, x17, x15, 896, x18)

inst_621:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x52df95 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x52df95 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f52df95; op2val:0x3f52df95; valaddr_reg:x16; val_offset:904; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 904, x17, x15, 904, x18)

inst_622:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x52df95 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x52df95 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f52df95; op2val:0x3f52df95; valaddr_reg:x16; val_offset:912; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 912, x17, x15, 912, x18)

inst_623:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x52df95 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x52df95 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f52df95; op2val:0x3f52df95; valaddr_reg:x16; val_offset:920; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 920, x17, x15, 920, x18)

inst_624:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x52df95 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x52df95 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f52df95; op2val:0x3f52df95; valaddr_reg:x16; val_offset:928; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 928, x17, x15, 928, x18)

inst_625:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x52df95 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x52df95 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f52df95; op2val:0x3f52df95; valaddr_reg:x16; val_offset:936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 936, x17, x15, 936, x18)

inst_626:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x238464 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x238464 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d238464; op2val:0x3d238464; valaddr_reg:x16; val_offset:944; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 944, x17, x15, 944, x18)

inst_627:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x238464 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x238464 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d238464; op2val:0x3d238464; valaddr_reg:x16; val_offset:952; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 952, x17, x15, 952, x18)

inst_628:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x238464 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x238464 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d238464; op2val:0x3d238464; valaddr_reg:x16; val_offset:960; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 960, x17, x15, 960, x18)

inst_629:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x238464 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x238464 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d238464; op2val:0x3d238464; valaddr_reg:x16; val_offset:968; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 968, x17, x15, 968, x18)

inst_630:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x238464 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x238464 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d238464; op2val:0x3d238464; valaddr_reg:x16; val_offset:976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 976, x17, x15, 976, x18)

inst_631:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x132c15 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x132c15 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e132c15; op2val:0x3e132c15; valaddr_reg:x16; val_offset:984; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 984, x17, x15, 984, x18)

inst_632:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x132c15 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x132c15 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e132c15; op2val:0x3e132c15; valaddr_reg:x16; val_offset:992; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 992, x17, x15, 992, x18)

inst_633:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x132c15 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x132c15 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e132c15; op2val:0x3e132c15; valaddr_reg:x16; val_offset:1000; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1000, x17, x15, 1000, x18)

inst_634:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x132c15 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x132c15 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e132c15; op2val:0x3e132c15; valaddr_reg:x16; val_offset:1008; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1008, x17, x15, 1008, x18)

inst_635:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x132c15 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x132c15 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e132c15; op2val:0x3e132c15; valaddr_reg:x16; val_offset:1016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1016, x17, x15, 1016, x18)

inst_636:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x06f434 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x06f434 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e86f434; op2val:0x3e86f434; valaddr_reg:x16; val_offset:1024; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1024, x17, x15, 1024, x18)

inst_637:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x06f434 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x06f434 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e86f434; op2val:0x3e86f434; valaddr_reg:x16; val_offset:1032; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1032, x17, x15, 1032, x18)

inst_638:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x06f434 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x06f434 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e86f434; op2val:0x3e86f434; valaddr_reg:x16; val_offset:1040; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1040, x17, x15, 1040, x18)

inst_639:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x06f434 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x06f434 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e86f434; op2val:0x3e86f434; valaddr_reg:x16; val_offset:1048; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1048, x17, x15, 1048, x18)

inst_640:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x06f434 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x06f434 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e86f434; op2val:0x3e86f434; valaddr_reg:x16; val_offset:1056; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1056, x17, x15, 1056, x18)

inst_641:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x20dde2 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x20dde2 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f20dde2; op2val:0x3f20dde2; valaddr_reg:x16; val_offset:1064; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1064, x17, x15, 1064, x18)

inst_642:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x20dde2 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x20dde2 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f20dde2; op2val:0x3f20dde2; valaddr_reg:x16; val_offset:1072; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1072, x17, x15, 1072, x18)

inst_643:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x20dde2 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x20dde2 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f20dde2; op2val:0x3f20dde2; valaddr_reg:x16; val_offset:1080; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1080, x17, x15, 1080, x18)

inst_644:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x20dde2 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x20dde2 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f20dde2; op2val:0x3f20dde2; valaddr_reg:x16; val_offset:1088; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1088, x17, x15, 1088, x18)

inst_645:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x20dde2 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x20dde2 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f20dde2; op2val:0x3f20dde2; valaddr_reg:x16; val_offset:1096; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1096, x17, x15, 1096, x18)

inst_646:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1d692c and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1d692c and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9d692c; op2val:0x3e9d692c; valaddr_reg:x16; val_offset:1104; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1104, x17, x15, 1104, x18)

inst_647:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1d692c and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1d692c and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9d692c; op2val:0x3e9d692c; valaddr_reg:x16; val_offset:1112; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1112, x17, x15, 1112, x18)

inst_648:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1d692c and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1d692c and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9d692c; op2val:0x3e9d692c; valaddr_reg:x16; val_offset:1120; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1120, x17, x15, 1120, x18)

inst_649:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1d692c and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1d692c and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9d692c; op2val:0x3e9d692c; valaddr_reg:x16; val_offset:1128; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1128, x17, x15, 1128, x18)

inst_650:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1d692c and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1d692c and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9d692c; op2val:0x3e9d692c; valaddr_reg:x16; val_offset:1136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1136, x17, x15, 1136, x18)

inst_651:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x6f98ad and fs2 == 0 and fe2 == 0x7b and fm2 == 0x6f98ad and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3def98ad; op2val:0x3def98ad; valaddr_reg:x16; val_offset:1144; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1144, x17, x15, 1144, x18)

inst_652:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x6f98ad and fs2 == 0 and fe2 == 0x7b and fm2 == 0x6f98ad and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3def98ad; op2val:0x3def98ad; valaddr_reg:x16; val_offset:1152; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1152, x17, x15, 1152, x18)

inst_653:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x6f98ad and fs2 == 0 and fe2 == 0x7b and fm2 == 0x6f98ad and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3def98ad; op2val:0x3def98ad; valaddr_reg:x16; val_offset:1160; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1160, x17, x15, 1160, x18)

inst_654:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x6f98ad and fs2 == 0 and fe2 == 0x7b and fm2 == 0x6f98ad and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3def98ad; op2val:0x3def98ad; valaddr_reg:x16; val_offset:1168; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1168, x17, x15, 1168, x18)

inst_655:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x6f98ad and fs2 == 0 and fe2 == 0x7b and fm2 == 0x6f98ad and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3def98ad; op2val:0x3def98ad; valaddr_reg:x16; val_offset:1176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1176, x17, x15, 1176, x18)

inst_656:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x572d1f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x572d1f and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f572d1f; op2val:0x3f572d1f; valaddr_reg:x16; val_offset:1184; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1184, x17, x15, 1184, x18)

inst_657:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x572d1f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x572d1f and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f572d1f; op2val:0x3f572d1f; valaddr_reg:x16; val_offset:1192; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1192, x17, x15, 1192, x18)

inst_658:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x572d1f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x572d1f and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f572d1f; op2val:0x3f572d1f; valaddr_reg:x16; val_offset:1200; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1200, x17, x15, 1200, x18)

inst_659:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x572d1f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x572d1f and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f572d1f; op2val:0x3f572d1f; valaddr_reg:x16; val_offset:1208; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1208, x17, x15, 1208, x18)

inst_660:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x572d1f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x572d1f and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f572d1f; op2val:0x3f572d1f; valaddr_reg:x16; val_offset:1216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1216, x17, x15, 1216, x18)

inst_661:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7a038b and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7a038b and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efa038b; op2val:0x3efa038b; valaddr_reg:x16; val_offset:1224; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1224, x17, x15, 1224, x18)

inst_662:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7a038b and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7a038b and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efa038b; op2val:0x3efa038b; valaddr_reg:x16; val_offset:1232; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1232, x17, x15, 1232, x18)

inst_663:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7a038b and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7a038b and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efa038b; op2val:0x3efa038b; valaddr_reg:x16; val_offset:1240; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1240, x17, x15, 1240, x18)

inst_664:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7a038b and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7a038b and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efa038b; op2val:0x3efa038b; valaddr_reg:x16; val_offset:1248; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1248, x17, x15, 1248, x18)

inst_665:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7a038b and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7a038b and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efa038b; op2val:0x3efa038b; valaddr_reg:x16; val_offset:1256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1256, x17, x15, 1256, x18)

inst_666:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x73a956 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x73a956 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f73a956; op2val:0x3f73a956; valaddr_reg:x16; val_offset:1264; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1264, x17, x15, 1264, x18)

inst_667:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x73a956 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x73a956 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f73a956; op2val:0x3f73a956; valaddr_reg:x16; val_offset:1272; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1272, x17, x15, 1272, x18)

inst_668:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x73a956 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x73a956 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f73a956; op2val:0x3f73a956; valaddr_reg:x16; val_offset:1280; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1280, x17, x15, 1280, x18)

inst_669:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x73a956 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x73a956 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f73a956; op2val:0x3f73a956; valaddr_reg:x16; val_offset:1288; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1288, x17, x15, 1288, x18)

inst_670:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x73a956 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x73a956 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f73a956; op2val:0x3f73a956; valaddr_reg:x16; val_offset:1296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1296, x17, x15, 1296, x18)

inst_671:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x398ad4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x398ad4 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f398ad4; op2val:0x3f398ad4; valaddr_reg:x16; val_offset:1304; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1304, x17, x15, 1304, x18)

inst_672:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x398ad4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x398ad4 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f398ad4; op2val:0x3f398ad4; valaddr_reg:x16; val_offset:1312; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1312, x17, x15, 1312, x18)

inst_673:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x398ad4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x398ad4 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f398ad4; op2val:0x3f398ad4; valaddr_reg:x16; val_offset:1320; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1320, x17, x15, 1320, x18)

inst_674:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x398ad4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x398ad4 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f398ad4; op2val:0x3f398ad4; valaddr_reg:x16; val_offset:1328; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1328, x17, x15, 1328, x18)

inst_675:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x398ad4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x398ad4 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f398ad4; op2val:0x3f398ad4; valaddr_reg:x16; val_offset:1336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1336, x17, x15, 1336, x18)

inst_676:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x3e9680 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x3e9680 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dbe9680; op2val:0x3dbe9680; valaddr_reg:x16; val_offset:1344; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1344, x17, x15, 1344, x18)

inst_677:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x3e9680 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x3e9680 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dbe9680; op2val:0x3dbe9680; valaddr_reg:x16; val_offset:1352; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1352, x17, x15, 1352, x18)

inst_678:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x3e9680 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x3e9680 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dbe9680; op2val:0x3dbe9680; valaddr_reg:x16; val_offset:1360; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1360, x17, x15, 1360, x18)

inst_679:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x3e9680 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x3e9680 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dbe9680; op2val:0x3dbe9680; valaddr_reg:x16; val_offset:1368; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1368, x17, x15, 1368, x18)

inst_680:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x3e9680 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x3e9680 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dbe9680; op2val:0x3dbe9680; valaddr_reg:x16; val_offset:1376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1376, x17, x15, 1376, x18)

inst_681:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x167709 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x167709 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f167709; op2val:0x3f167709; valaddr_reg:x16; val_offset:1384; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1384, x17, x15, 1384, x18)

inst_682:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x167709 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x167709 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f167709; op2val:0x3f167709; valaddr_reg:x16; val_offset:1392; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1392, x17, x15, 1392, x18)

inst_683:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x167709 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x167709 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f167709; op2val:0x3f167709; valaddr_reg:x16; val_offset:1400; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1400, x17, x15, 1400, x18)

inst_684:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x167709 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x167709 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f167709; op2val:0x3f167709; valaddr_reg:x16; val_offset:1408; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1408, x17, x15, 1408, x18)

inst_685:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x167709 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x167709 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f167709; op2val:0x3f167709; valaddr_reg:x16; val_offset:1416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1416, x17, x15, 1416, x18)

inst_686:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x056b99 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x056b99 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f056b99; op2val:0x3f056b99; valaddr_reg:x16; val_offset:1424; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1424, x17, x15, 1424, x18)

inst_687:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x056b99 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x056b99 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f056b99; op2val:0x3f056b99; valaddr_reg:x16; val_offset:1432; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1432, x17, x15, 1432, x18)

inst_688:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x056b99 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x056b99 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f056b99; op2val:0x3f056b99; valaddr_reg:x16; val_offset:1440; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1440, x17, x15, 1440, x18)

inst_689:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x056b99 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x056b99 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f056b99; op2val:0x3f056b99; valaddr_reg:x16; val_offset:1448; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1448, x17, x15, 1448, x18)

inst_690:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x056b99 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x056b99 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f056b99; op2val:0x3f056b99; valaddr_reg:x16; val_offset:1456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1456, x17, x15, 1456, x18)

inst_691:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x42f9e0 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x42f9e0 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f42f9e0; op2val:0x3f42f9e0; valaddr_reg:x16; val_offset:1464; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1464, x17, x15, 1464, x18)

inst_692:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x42f9e0 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x42f9e0 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f42f9e0; op2val:0x3f42f9e0; valaddr_reg:x16; val_offset:1472; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1472, x17, x15, 1472, x18)

inst_693:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x42f9e0 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x42f9e0 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f42f9e0; op2val:0x3f42f9e0; valaddr_reg:x16; val_offset:1480; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1480, x17, x15, 1480, x18)

inst_694:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x42f9e0 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x42f9e0 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f42f9e0; op2val:0x3f42f9e0; valaddr_reg:x16; val_offset:1488; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1488, x17, x15, 1488, x18)

inst_695:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x42f9e0 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x42f9e0 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f42f9e0; op2val:0x3f42f9e0; valaddr_reg:x16; val_offset:1496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1496, x17, x15, 1496, x18)

inst_696:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x208159 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x208159 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea08159; op2val:0x3ea08159; valaddr_reg:x16; val_offset:1504; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1504, x17, x15, 1504, x18)

inst_697:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x208159 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x208159 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea08159; op2val:0x3ea08159; valaddr_reg:x16; val_offset:1512; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1512, x17, x15, 1512, x18)

inst_698:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x208159 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x208159 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea08159; op2val:0x3ea08159; valaddr_reg:x16; val_offset:1520; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1520, x17, x15, 1520, x18)

inst_699:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x208159 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x208159 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea08159; op2val:0x3ea08159; valaddr_reg:x16; val_offset:1528; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1528, x17, x15, 1528, x18)

inst_700:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x208159 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x208159 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea08159; op2val:0x3ea08159; valaddr_reg:x16; val_offset:1536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1536, x17, x15, 1536, x18)

inst_701:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x33cb4c and fs2 == 0 and fe2 == 0x7d and fm2 == 0x33cb4c and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb3cb4c; op2val:0x3eb3cb4c; valaddr_reg:x16; val_offset:1544; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1544, x17, x15, 1544, x18)

inst_702:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x33cb4c and fs2 == 0 and fe2 == 0x7d and fm2 == 0x33cb4c and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb3cb4c; op2val:0x3eb3cb4c; valaddr_reg:x16; val_offset:1552; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1552, x17, x15, 1552, x18)

inst_703:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x33cb4c and fs2 == 0 and fe2 == 0x7d and fm2 == 0x33cb4c and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb3cb4c; op2val:0x3eb3cb4c; valaddr_reg:x16; val_offset:1560; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1560, x17, x15, 1560, x18)

inst_704:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x33cb4c and fs2 == 0 and fe2 == 0x7d and fm2 == 0x33cb4c and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb3cb4c; op2val:0x3eb3cb4c; valaddr_reg:x16; val_offset:1568; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1568, x17, x15, 1568, x18)

inst_705:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x33cb4c and fs2 == 0 and fe2 == 0x7d and fm2 == 0x33cb4c and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb3cb4c; op2val:0x3eb3cb4c; valaddr_reg:x16; val_offset:1576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1576, x17, x15, 1576, x18)

inst_706:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x714e01 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x714e01 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef14e01; op2val:0x3ef14e01; valaddr_reg:x16; val_offset:1584; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1584, x17, x15, 1584, x18)

inst_707:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x714e01 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x714e01 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef14e01; op2val:0x3ef14e01; valaddr_reg:x16; val_offset:1592; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1592, x17, x15, 1592, x18)

inst_708:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x714e01 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x714e01 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef14e01; op2val:0x3ef14e01; valaddr_reg:x16; val_offset:1600; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1600, x17, x15, 1600, x18)

inst_709:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x714e01 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x714e01 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef14e01; op2val:0x3ef14e01; valaddr_reg:x16; val_offset:1608; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1608, x17, x15, 1608, x18)

inst_710:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x714e01 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x714e01 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef14e01; op2val:0x3ef14e01; valaddr_reg:x16; val_offset:1616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1616, x17, x15, 1616, x18)

inst_711:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x443766 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x443766 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f443766; op2val:0x3f443766; valaddr_reg:x16; val_offset:1624; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1624, x17, x15, 1624, x18)

inst_712:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x443766 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x443766 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f443766; op2val:0x3f443766; valaddr_reg:x16; val_offset:1632; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1632, x17, x15, 1632, x18)

inst_713:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x443766 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x443766 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f443766; op2val:0x3f443766; valaddr_reg:x16; val_offset:1640; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1640, x17, x15, 1640, x18)

inst_714:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x443766 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x443766 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f443766; op2val:0x3f443766; valaddr_reg:x16; val_offset:1648; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1648, x17, x15, 1648, x18)

inst_715:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x443766 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x443766 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f443766; op2val:0x3f443766; valaddr_reg:x16; val_offset:1656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1656, x17, x15, 1656, x18)

inst_716:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1952ae and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1952ae and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1952ae; op2val:0x3f1952ae; valaddr_reg:x16; val_offset:1664; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1664, x17, x15, 1664, x18)

inst_717:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1952ae and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1952ae and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1952ae; op2val:0x3f1952ae; valaddr_reg:x16; val_offset:1672; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1672, x17, x15, 1672, x18)

inst_718:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1952ae and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1952ae and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1952ae; op2val:0x3f1952ae; valaddr_reg:x16; val_offset:1680; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1680, x17, x15, 1680, x18)

inst_719:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1952ae and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1952ae and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1952ae; op2val:0x3f1952ae; valaddr_reg:x16; val_offset:1688; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1688, x17, x15, 1688, x18)

inst_720:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1952ae and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1952ae and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1952ae; op2val:0x3f1952ae; valaddr_reg:x16; val_offset:1696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1696, x17, x15, 1696, x18)

inst_721:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2f2bd3 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x2f2bd3 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e2f2bd3; op2val:0x3e2f2bd3; valaddr_reg:x16; val_offset:1704; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1704, x17, x15, 1704, x18)

inst_722:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2f2bd3 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x2f2bd3 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e2f2bd3; op2val:0x3e2f2bd3; valaddr_reg:x16; val_offset:1712; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1712, x17, x15, 1712, x18)

inst_723:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2f2bd3 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x2f2bd3 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e2f2bd3; op2val:0x3e2f2bd3; valaddr_reg:x16; val_offset:1720; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1720, x17, x15, 1720, x18)

inst_724:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2f2bd3 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x2f2bd3 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e2f2bd3; op2val:0x3e2f2bd3; valaddr_reg:x16; val_offset:1728; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1728, x17, x15, 1728, x18)

inst_725:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2f2bd3 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x2f2bd3 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e2f2bd3; op2val:0x3e2f2bd3; valaddr_reg:x16; val_offset:1736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1736, x17, x15, 1736, x18)

inst_726:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5ff78b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5ff78b and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5ff78b; op2val:0x3f5ff78b; valaddr_reg:x16; val_offset:1744; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1744, x17, x15, 1744, x18)

inst_727:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5ff78b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5ff78b and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5ff78b; op2val:0x3f5ff78b; valaddr_reg:x16; val_offset:1752; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1752, x17, x15, 1752, x18)

inst_728:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5ff78b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5ff78b and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5ff78b; op2val:0x3f5ff78b; valaddr_reg:x16; val_offset:1760; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1760, x17, x15, 1760, x18)

inst_729:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5ff78b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5ff78b and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5ff78b; op2val:0x3f5ff78b; valaddr_reg:x16; val_offset:1768; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1768, x17, x15, 1768, x18)

inst_730:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5ff78b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5ff78b and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5ff78b; op2val:0x3f5ff78b; valaddr_reg:x16; val_offset:1776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1776, x17, x15, 1776, x18)

inst_731:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x25226d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x25226d and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f25226d; op2val:0x3f25226d; valaddr_reg:x16; val_offset:1784; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1784, x17, x15, 1784, x18)

inst_732:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x25226d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x25226d and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f25226d; op2val:0x3f25226d; valaddr_reg:x16; val_offset:1792; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1792, x17, x15, 1792, x18)

inst_733:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x25226d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x25226d and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f25226d; op2val:0x3f25226d; valaddr_reg:x16; val_offset:1800; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1800, x17, x15, 1800, x18)

inst_734:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x25226d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x25226d and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f25226d; op2val:0x3f25226d; valaddr_reg:x16; val_offset:1808; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1808, x17, x15, 1808, x18)

inst_735:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x25226d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x25226d and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f25226d; op2val:0x3f25226d; valaddr_reg:x16; val_offset:1816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1816, x17, x15, 1816, x18)

inst_736:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5bd9d7 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5bd9d7 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3edbd9d7; op2val:0x3edbd9d7; valaddr_reg:x16; val_offset:1824; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1824, x17, x15, 1824, x18)

inst_737:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5bd9d7 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5bd9d7 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3edbd9d7; op2val:0x3edbd9d7; valaddr_reg:x16; val_offset:1832; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1832, x17, x15, 1832, x18)

inst_738:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5bd9d7 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5bd9d7 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3edbd9d7; op2val:0x3edbd9d7; valaddr_reg:x16; val_offset:1840; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1840, x17, x15, 1840, x18)

inst_739:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5bd9d7 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5bd9d7 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3edbd9d7; op2val:0x3edbd9d7; valaddr_reg:x16; val_offset:1848; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1848, x17, x15, 1848, x18)

inst_740:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5bd9d7 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5bd9d7 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3edbd9d7; op2val:0x3edbd9d7; valaddr_reg:x16; val_offset:1856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1856, x17, x15, 1856, x18)

inst_741:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3505f7 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x3505f7 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb505f7; op2val:0x3eb505f7; valaddr_reg:x16; val_offset:1864; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1864, x17, x15, 1864, x18)

inst_742:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3505f7 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x3505f7 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb505f7; op2val:0x3eb505f7; valaddr_reg:x16; val_offset:1872; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1872, x17, x15, 1872, x18)

inst_743:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3505f7 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x3505f7 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb505f7; op2val:0x3eb505f7; valaddr_reg:x16; val_offset:1880; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1880, x17, x15, 1880, x18)

inst_744:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3505f7 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x3505f7 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb505f7; op2val:0x3eb505f7; valaddr_reg:x16; val_offset:1888; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1888, x17, x15, 1888, x18)

inst_745:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3505f7 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x3505f7 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb505f7; op2val:0x3eb505f7; valaddr_reg:x16; val_offset:1896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1896, x17, x15, 1896, x18)

inst_746:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3df5bc and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3df5bc and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3df5bc; op2val:0x3f3df5bc; valaddr_reg:x16; val_offset:1904; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1904, x17, x15, 1904, x18)

inst_747:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3df5bc and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3df5bc and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3df5bc; op2val:0x3f3df5bc; valaddr_reg:x16; val_offset:1912; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1912, x17, x15, 1912, x18)

inst_748:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3df5bc and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3df5bc and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3df5bc; op2val:0x3f3df5bc; valaddr_reg:x16; val_offset:1920; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1920, x17, x15, 1920, x18)

inst_749:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3df5bc and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3df5bc and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3df5bc; op2val:0x3f3df5bc; valaddr_reg:x16; val_offset:1928; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1928, x17, x15, 1928, x18)

inst_750:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3df5bc and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3df5bc and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3df5bc; op2val:0x3f3df5bc; valaddr_reg:x16; val_offset:1936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1936, x17, x15, 1936, x18)

inst_751:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1ab2b8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1ab2b8 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1ab2b8; op2val:0x3f1ab2b8; valaddr_reg:x16; val_offset:1944; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1944, x17, x15, 1944, x18)

inst_752:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1ab2b8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1ab2b8 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1ab2b8; op2val:0x3f1ab2b8; valaddr_reg:x16; val_offset:1952; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1952, x17, x15, 1952, x18)

inst_753:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1ab2b8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1ab2b8 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1ab2b8; op2val:0x3f1ab2b8; valaddr_reg:x16; val_offset:1960; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1960, x17, x15, 1960, x18)

inst_754:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1ab2b8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1ab2b8 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1ab2b8; op2val:0x3f1ab2b8; valaddr_reg:x16; val_offset:1968; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1968, x17, x15, 1968, x18)

inst_755:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1ab2b8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1ab2b8 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1ab2b8; op2val:0x3f1ab2b8; valaddr_reg:x16; val_offset:1976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1976, x17, x15, 1976, x18)

inst_756:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x1846bc and fs2 == 0 and fe2 == 0x7c and fm2 == 0x1846bc and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e1846bc; op2val:0x3e1846bc; valaddr_reg:x16; val_offset:1984; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1984, x17, x15, 1984, x18)

inst_757:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x1846bc and fs2 == 0 and fe2 == 0x7c and fm2 == 0x1846bc and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e1846bc; op2val:0x3e1846bc; valaddr_reg:x16; val_offset:1992; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1992, x17, x15, 1992, x18)

inst_758:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x1846bc and fs2 == 0 and fe2 == 0x7c and fm2 == 0x1846bc and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e1846bc; op2val:0x3e1846bc; valaddr_reg:x16; val_offset:2000; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 2000, x17, x15, 2000, x18)

inst_759:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x1846bc and fs2 == 0 and fe2 == 0x7c and fm2 == 0x1846bc and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e1846bc; op2val:0x3e1846bc; valaddr_reg:x16; val_offset:2008; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 2008, x17, x15, 2008, x18)

inst_760:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x1846bc and fs2 == 0 and fe2 == 0x7c and fm2 == 0x1846bc and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e1846bc; op2val:0x3e1846bc; valaddr_reg:x16; val_offset:2016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 2016, x17, x15, 2016, x18)

inst_761:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x66c617 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x66c617 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ee6c617; op2val:0x3ee6c617; valaddr_reg:x16; val_offset:2024; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_4)

inst_762:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x66c617 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x66c617 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ee6c617; op2val:0x3ee6c617; valaddr_reg:x16; val_offset:0; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 0, x17, x15, 0, x18)

inst_763:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x66c617 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x66c617 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ee6c617; op2val:0x3ee6c617; valaddr_reg:x16; val_offset:8; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 8, x17, x15, 8, x18)

inst_764:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x66c617 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x66c617 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ee6c617; op2val:0x3ee6c617; valaddr_reg:x16; val_offset:16; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 16, x17, x15, 16, x18)

inst_765:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x66c617 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x66c617 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ee6c617; op2val:0x3ee6c617; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 24, x17, x15, 24, x18)

inst_766:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x15f8af and fs2 == 0 and fe2 == 0x7a and fm2 == 0x15f8af and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d15f8af; op2val:0x3d15f8af; valaddr_reg:x16; val_offset:32; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 32, x17, x15, 32, x18)

inst_767:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x15f8af and fs2 == 0 and fe2 == 0x7a and fm2 == 0x15f8af and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d15f8af; op2val:0x3d15f8af; valaddr_reg:x16; val_offset:40; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 40, x17, x15, 40, x18)

inst_768:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x15f8af and fs2 == 0 and fe2 == 0x7a and fm2 == 0x15f8af and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d15f8af; op2val:0x3d15f8af; valaddr_reg:x16; val_offset:48; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 48, x17, x15, 48, x18)

inst_769:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x15f8af and fs2 == 0 and fe2 == 0x7a and fm2 == 0x15f8af and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d15f8af; op2val:0x3d15f8af; valaddr_reg:x16; val_offset:56; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 56, x17, x15, 56, x18)

inst_770:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x15f8af and fs2 == 0 and fe2 == 0x7a and fm2 == 0x15f8af and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d15f8af; op2val:0x3d15f8af; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 64, x17, x15, 64, x18)

inst_771:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3f567f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3f567f and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3f567f; op2val:0x3f3f567f; valaddr_reg:x16; val_offset:72; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 72, x17, x15, 72, x18)

inst_772:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3f567f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3f567f and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3f567f; op2val:0x3f3f567f; valaddr_reg:x16; val_offset:80; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 80, x17, x15, 80, x18)

inst_773:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3f567f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3f567f and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3f567f; op2val:0x3f3f567f; valaddr_reg:x16; val_offset:88; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 88, x17, x15, 88, x18)

inst_774:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3f567f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3f567f and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3f567f; op2val:0x3f3f567f; valaddr_reg:x16; val_offset:96; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 96, x17, x15, 96, x18)

inst_775:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3f567f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3f567f and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3f567f; op2val:0x3f3f567f; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 104, x17, x15, 104, x18)

inst_776:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x120287 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x120287 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e920287; op2val:0x3e920287; valaddr_reg:x16; val_offset:112; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 112, x17, x15, 112, x18)

inst_777:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x120287 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x120287 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e920287; op2val:0x3e920287; valaddr_reg:x16; val_offset:120; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 120, x17, x15, 120, x18)

inst_778:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x120287 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x120287 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e920287; op2val:0x3e920287; valaddr_reg:x16; val_offset:128; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 128, x17, x15, 128, x18)

inst_779:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x120287 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x120287 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e920287; op2val:0x3e920287; valaddr_reg:x16; val_offset:136; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 136, x17, x15, 136, x18)

inst_780:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x120287 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x120287 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e920287; op2val:0x3e920287; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 144, x17, x15, 144, x18)

inst_781:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x113ea2 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x113ea2 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f113ea2; op2val:0x3f113ea2; valaddr_reg:x16; val_offset:152; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 152, x17, x15, 152, x18)

inst_782:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x113ea2 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x113ea2 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f113ea2; op2val:0x3f113ea2; valaddr_reg:x16; val_offset:160; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 160, x17, x15, 160, x18)

inst_783:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x113ea2 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x113ea2 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f113ea2; op2val:0x3f113ea2; valaddr_reg:x16; val_offset:168; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 168, x17, x15, 168, x18)

inst_784:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x113ea2 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x113ea2 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f113ea2; op2val:0x3f113ea2; valaddr_reg:x16; val_offset:176; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 176, x17, x15, 176, x18)

inst_785:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x113ea2 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x113ea2 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f113ea2; op2val:0x3f113ea2; valaddr_reg:x16; val_offset:184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 184, x17, x15, 184, x18)

inst_786:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1eed61 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1eed61 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9eed61; op2val:0x3e9eed61; valaddr_reg:x16; val_offset:192; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 192, x17, x15, 192, x18)

inst_787:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1eed61 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1eed61 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9eed61; op2val:0x3e9eed61; valaddr_reg:x16; val_offset:200; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 200, x17, x15, 200, x18)

inst_788:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1eed61 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1eed61 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9eed61; op2val:0x3e9eed61; valaddr_reg:x16; val_offset:208; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 208, x17, x15, 208, x18)

inst_789:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1eed61 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1eed61 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9eed61; op2val:0x3e9eed61; valaddr_reg:x16; val_offset:216; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 216, x17, x15, 216, x18)

inst_790:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1eed61 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1eed61 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9eed61; op2val:0x3e9eed61; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 224, x17, x15, 224, x18)

inst_791:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x231aaf and fs2 == 0 and fe2 == 0x7c and fm2 == 0x231aaf and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e231aaf; op2val:0x3e231aaf; valaddr_reg:x16; val_offset:232; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 232, x17, x15, 232, x18)

inst_792:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x231aaf and fs2 == 0 and fe2 == 0x7c and fm2 == 0x231aaf and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e231aaf; op2val:0x3e231aaf; valaddr_reg:x16; val_offset:240; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 240, x17, x15, 240, x18)

inst_793:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x231aaf and fs2 == 0 and fe2 == 0x7c and fm2 == 0x231aaf and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e231aaf; op2val:0x3e231aaf; valaddr_reg:x16; val_offset:248; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 248, x17, x15, 248, x18)

inst_794:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x231aaf and fs2 == 0 and fe2 == 0x7c and fm2 == 0x231aaf and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e231aaf; op2val:0x3e231aaf; valaddr_reg:x16; val_offset:256; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 256, x17, x15, 256, x18)

inst_795:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x231aaf and fs2 == 0 and fe2 == 0x7c and fm2 == 0x231aaf and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e231aaf; op2val:0x3e231aaf; valaddr_reg:x16; val_offset:264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 264, x17, x15, 264, x18)

inst_796:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x48d9e6 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x48d9e6 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e48d9e6; op2val:0x3e48d9e6; valaddr_reg:x16; val_offset:272; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 272, x17, x15, 272, x18)

inst_797:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x48d9e6 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x48d9e6 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e48d9e6; op2val:0x3e48d9e6; valaddr_reg:x16; val_offset:280; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 280, x17, x15, 280, x18)

inst_798:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x48d9e6 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x48d9e6 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e48d9e6; op2val:0x3e48d9e6; valaddr_reg:x16; val_offset:288; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 288, x17, x15, 288, x18)

inst_799:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x48d9e6 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x48d9e6 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e48d9e6; op2val:0x3e48d9e6; valaddr_reg:x16; val_offset:296; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 296, x17, x15, 296, x18)

inst_800:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x48d9e6 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x48d9e6 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e48d9e6; op2val:0x3e48d9e6; valaddr_reg:x16; val_offset:304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 304, x17, x15, 304, x18)

inst_801:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2f161f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2f161f and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2f161f; op2val:0x3f2f161f; valaddr_reg:x16; val_offset:312; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 312, x17, x15, 312, x18)

inst_802:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2f161f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2f161f and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2f161f; op2val:0x3f2f161f; valaddr_reg:x16; val_offset:320; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 320, x17, x15, 320, x18)

inst_803:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2f161f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2f161f and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2f161f; op2val:0x3f2f161f; valaddr_reg:x16; val_offset:328; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 328, x17, x15, 328, x18)

inst_804:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2f161f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2f161f and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2f161f; op2val:0x3f2f161f; valaddr_reg:x16; val_offset:336; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 336, x17, x15, 336, x18)

inst_805:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2f161f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2f161f and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2f161f; op2val:0x3f2f161f; valaddr_reg:x16; val_offset:344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 344, x17, x15, 344, x18)

inst_806:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x375562 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x375562 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db75562; op2val:0x3db75562; valaddr_reg:x16; val_offset:352; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 352, x17, x15, 352, x18)

inst_807:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x375562 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x375562 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db75562; op2val:0x3db75562; valaddr_reg:x16; val_offset:360; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 360, x17, x15, 360, x18)

inst_808:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x375562 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x375562 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db75562; op2val:0x3db75562; valaddr_reg:x16; val_offset:368; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 368, x17, x15, 368, x18)

inst_809:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x375562 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x375562 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db75562; op2val:0x3db75562; valaddr_reg:x16; val_offset:376; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 376, x17, x15, 376, x18)

inst_810:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x375562 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x375562 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db75562; op2val:0x3db75562; valaddr_reg:x16; val_offset:384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 384, x17, x15, 384, x18)

inst_811:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x5994fc and fs2 == 0 and fe2 == 0x7b and fm2 == 0x5994fc and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dd994fc; op2val:0x3dd994fc; valaddr_reg:x16; val_offset:392; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 392, x17, x15, 392, x18)

inst_812:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x5994fc and fs2 == 0 and fe2 == 0x7b and fm2 == 0x5994fc and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dd994fc; op2val:0x3dd994fc; valaddr_reg:x16; val_offset:400; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 400, x17, x15, 400, x18)

inst_813:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x5994fc and fs2 == 0 and fe2 == 0x7b and fm2 == 0x5994fc and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dd994fc; op2val:0x3dd994fc; valaddr_reg:x16; val_offset:408; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 408, x17, x15, 408, x18)

inst_814:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x5994fc and fs2 == 0 and fe2 == 0x7b and fm2 == 0x5994fc and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dd994fc; op2val:0x3dd994fc; valaddr_reg:x16; val_offset:416; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 416, x17, x15, 416, x18)

inst_815:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x5994fc and fs2 == 0 and fe2 == 0x7b and fm2 == 0x5994fc and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dd994fc; op2val:0x3dd994fc; valaddr_reg:x16; val_offset:424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 424, x17, x15, 424, x18)

inst_816:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x252830 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x252830 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3da52830; op2val:0x3da52830; valaddr_reg:x16; val_offset:432; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 432, x17, x15, 432, x18)

inst_817:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x252830 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x252830 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3da52830; op2val:0x3da52830; valaddr_reg:x16; val_offset:440; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 440, x17, x15, 440, x18)

inst_818:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x252830 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x252830 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3da52830; op2val:0x3da52830; valaddr_reg:x16; val_offset:448; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 448, x17, x15, 448, x18)

inst_819:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x252830 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x252830 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3da52830; op2val:0x3da52830; valaddr_reg:x16; val_offset:456; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 456, x17, x15, 456, x18)

inst_820:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x252830 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x252830 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3da52830; op2val:0x3da52830; valaddr_reg:x16; val_offset:464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 464, x17, x15, 464, x18)

inst_821:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x64a3a9 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x64a3a9 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f64a3a9; op2val:0x3f64a3a9; valaddr_reg:x16; val_offset:472; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 472, x17, x15, 472, x18)

inst_822:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x64a3a9 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x64a3a9 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f64a3a9; op2val:0x3f64a3a9; valaddr_reg:x16; val_offset:480; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 480, x17, x15, 480, x18)

inst_823:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x64a3a9 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x64a3a9 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f64a3a9; op2val:0x3f64a3a9; valaddr_reg:x16; val_offset:488; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 488, x17, x15, 488, x18)

inst_824:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x64a3a9 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x64a3a9 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f64a3a9; op2val:0x3f64a3a9; valaddr_reg:x16; val_offset:496; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 496, x17, x15, 496, x18)

inst_825:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x64a3a9 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x64a3a9 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f64a3a9; op2val:0x3f64a3a9; valaddr_reg:x16; val_offset:504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 504, x17, x15, 504, x18)

inst_826:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x36bb8f and fs2 == 0 and fe2 == 0x7c and fm2 == 0x36bb8f and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e36bb8f; op2val:0x3e36bb8f; valaddr_reg:x16; val_offset:512; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 512, x17, x15, 512, x18)

inst_827:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x36bb8f and fs2 == 0 and fe2 == 0x7c and fm2 == 0x36bb8f and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e36bb8f; op2val:0x3e36bb8f; valaddr_reg:x16; val_offset:520; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 520, x17, x15, 520, x18)

inst_828:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x36bb8f and fs2 == 0 and fe2 == 0x7c and fm2 == 0x36bb8f and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e36bb8f; op2val:0x3e36bb8f; valaddr_reg:x16; val_offset:528; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 528, x17, x15, 528, x18)

inst_829:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x36bb8f and fs2 == 0 and fe2 == 0x7c and fm2 == 0x36bb8f and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e36bb8f; op2val:0x3e36bb8f; valaddr_reg:x16; val_offset:536; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 536, x17, x15, 536, x18)

inst_830:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x36bb8f and fs2 == 0 and fe2 == 0x7c and fm2 == 0x36bb8f and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e36bb8f; op2val:0x3e36bb8f; valaddr_reg:x16; val_offset:544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 544, x17, x15, 544, x18)

inst_831:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x652978 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x652978 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e652978; op2val:0x3e652978; valaddr_reg:x16; val_offset:552; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 552, x17, x15, 552, x18)

inst_832:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x652978 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x652978 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e652978; op2val:0x3e652978; valaddr_reg:x16; val_offset:560; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 560, x17, x15, 560, x18)

inst_833:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x652978 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x652978 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e652978; op2val:0x3e652978; valaddr_reg:x16; val_offset:568; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 568, x17, x15, 568, x18)

inst_834:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x652978 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x652978 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e652978; op2val:0x3e652978; valaddr_reg:x16; val_offset:576; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 576, x17, x15, 576, x18)

inst_835:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x652978 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x652978 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e652978; op2val:0x3e652978; valaddr_reg:x16; val_offset:584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 584, x17, x15, 584, x18)

inst_836:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x4ff65a and fs2 == 0 and fe2 == 0x7a and fm2 == 0x4ff65a and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d4ff65a; op2val:0x3d4ff65a; valaddr_reg:x16; val_offset:592; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 592, x17, x15, 592, x18)

inst_837:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x4ff65a and fs2 == 0 and fe2 == 0x7a and fm2 == 0x4ff65a and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d4ff65a; op2val:0x3d4ff65a; valaddr_reg:x16; val_offset:600; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 600, x17, x15, 600, x18)

inst_838:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x4ff65a and fs2 == 0 and fe2 == 0x7a and fm2 == 0x4ff65a and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d4ff65a; op2val:0x3d4ff65a; valaddr_reg:x16; val_offset:608; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 608, x17, x15, 608, x18)

inst_839:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x4ff65a and fs2 == 0 and fe2 == 0x7a and fm2 == 0x4ff65a and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d4ff65a; op2val:0x3d4ff65a; valaddr_reg:x16; val_offset:616; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 616, x17, x15, 616, x18)

inst_840:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x4ff65a and fs2 == 0 and fe2 == 0x7a and fm2 == 0x4ff65a and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d4ff65a; op2val:0x3d4ff65a; valaddr_reg:x16; val_offset:624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 624, x17, x15, 624, x18)

inst_841:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x51efd8 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x51efd8 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e51efd8; op2val:0x3e51efd8; valaddr_reg:x16; val_offset:632; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 632, x17, x15, 632, x18)

inst_842:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x51efd8 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x51efd8 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e51efd8; op2val:0x3e51efd8; valaddr_reg:x16; val_offset:640; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 640, x17, x15, 640, x18)

inst_843:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x51efd8 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x51efd8 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e51efd8; op2val:0x3e51efd8; valaddr_reg:x16; val_offset:648; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 648, x17, x15, 648, x18)

inst_844:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x51efd8 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x51efd8 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e51efd8; op2val:0x3e51efd8; valaddr_reg:x16; val_offset:656; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 656, x17, x15, 656, x18)

inst_845:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x51efd8 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x51efd8 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e51efd8; op2val:0x3e51efd8; valaddr_reg:x16; val_offset:664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 664, x17, x15, 664, x18)

inst_846:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5887af and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5887af and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5887af; op2val:0x3f5887af; valaddr_reg:x16; val_offset:672; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 672, x17, x15, 672, x18)

inst_847:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5887af and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5887af and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5887af; op2val:0x3f5887af; valaddr_reg:x16; val_offset:680; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 680, x17, x15, 680, x18)

inst_848:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5887af and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5887af and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5887af; op2val:0x3f5887af; valaddr_reg:x16; val_offset:688; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 688, x17, x15, 688, x18)

inst_849:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5887af and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5887af and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5887af; op2val:0x3f5887af; valaddr_reg:x16; val_offset:696; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 696, x17, x15, 696, x18)

inst_850:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5887af and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5887af and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5887af; op2val:0x3f5887af; valaddr_reg:x16; val_offset:704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 704, x17, x15, 704, x18)

inst_851:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x01b9a4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x01b9a4 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f01b9a4; op2val:0x3f01b9a4; valaddr_reg:x16; val_offset:712; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 712, x17, x15, 712, x18)

inst_852:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x01b9a4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x01b9a4 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f01b9a4; op2val:0x3f01b9a4; valaddr_reg:x16; val_offset:720; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 720, x17, x15, 720, x18)

inst_853:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x01b9a4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x01b9a4 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f01b9a4; op2val:0x3f01b9a4; valaddr_reg:x16; val_offset:728; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 728, x17, x15, 728, x18)

inst_854:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x01b9a4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x01b9a4 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f01b9a4; op2val:0x3f01b9a4; valaddr_reg:x16; val_offset:736; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 736, x17, x15, 736, x18)

inst_855:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x01b9a4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x01b9a4 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f01b9a4; op2val:0x3f01b9a4; valaddr_reg:x16; val_offset:744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 744, x17, x15, 744, x18)

inst_856:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x358cb8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x358cb8 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f358cb8; op2val:0x3f358cb8; valaddr_reg:x16; val_offset:752; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 752, x17, x15, 752, x18)

inst_857:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x358cb8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x358cb8 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f358cb8; op2val:0x3f358cb8; valaddr_reg:x16; val_offset:760; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 760, x17, x15, 760, x18)

inst_858:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x358cb8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x358cb8 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f358cb8; op2val:0x3f358cb8; valaddr_reg:x16; val_offset:768; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 768, x17, x15, 768, x18)

inst_859:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x358cb8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x358cb8 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f358cb8; op2val:0x3f358cb8; valaddr_reg:x16; val_offset:776; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 776, x17, x15, 776, x18)

inst_860:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x358cb8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x358cb8 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f358cb8; op2val:0x3f358cb8; valaddr_reg:x16; val_offset:784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 784, x17, x15, 784, x18)

inst_861:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6cc44b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6cc44b and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6cc44b; op2val:0x3f6cc44b; valaddr_reg:x16; val_offset:792; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 792, x17, x15, 792, x18)

inst_862:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6cc44b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6cc44b and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6cc44b; op2val:0x3f6cc44b; valaddr_reg:x16; val_offset:800; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 800, x17, x15, 800, x18)

inst_863:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6cc44b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6cc44b and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6cc44b; op2val:0x3f6cc44b; valaddr_reg:x16; val_offset:808; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 808, x17, x15, 808, x18)

inst_864:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6cc44b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6cc44b and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6cc44b; op2val:0x3f6cc44b; valaddr_reg:x16; val_offset:816; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 816, x17, x15, 816, x18)

inst_865:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6cc44b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6cc44b and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6cc44b; op2val:0x3f6cc44b; valaddr_reg:x16; val_offset:824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 824, x17, x15, 824, x18)

inst_866:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x65c87d and fs2 == 0 and fe2 == 0x7d and fm2 == 0x65c87d and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ee5c87d; op2val:0x3ee5c87d; valaddr_reg:x16; val_offset:832; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 832, x17, x15, 832, x18)

inst_867:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x65c87d and fs2 == 0 and fe2 == 0x7d and fm2 == 0x65c87d and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ee5c87d; op2val:0x3ee5c87d; valaddr_reg:x16; val_offset:840; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 840, x17, x15, 840, x18)

inst_868:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x65c87d and fs2 == 0 and fe2 == 0x7d and fm2 == 0x65c87d and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ee5c87d; op2val:0x3ee5c87d; valaddr_reg:x16; val_offset:848; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 848, x17, x15, 848, x18)

inst_869:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x65c87d and fs2 == 0 and fe2 == 0x7d and fm2 == 0x65c87d and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ee5c87d; op2val:0x3ee5c87d; valaddr_reg:x16; val_offset:856; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 856, x17, x15, 856, x18)

inst_870:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x65c87d and fs2 == 0 and fe2 == 0x7d and fm2 == 0x65c87d and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ee5c87d; op2val:0x3ee5c87d; valaddr_reg:x16; val_offset:864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 864, x17, x15, 864, x18)

inst_871:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4198fd and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4198fd and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4198fd; op2val:0x3f4198fd; valaddr_reg:x16; val_offset:872; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 872, x17, x15, 872, x18)

inst_872:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4198fd and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4198fd and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4198fd; op2val:0x3f4198fd; valaddr_reg:x16; val_offset:880; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 880, x17, x15, 880, x18)

inst_873:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4198fd and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4198fd and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4198fd; op2val:0x3f4198fd; valaddr_reg:x16; val_offset:888; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 888, x17, x15, 888, x18)

inst_874:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4198fd and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4198fd and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4198fd; op2val:0x3f4198fd; valaddr_reg:x16; val_offset:896; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 896, x17, x15, 896, x18)

inst_875:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4198fd and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4198fd and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4198fd; op2val:0x3f4198fd; valaddr_reg:x16; val_offset:904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 904, x17, x15, 904, x18)

inst_876:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x414141 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x414141 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f414141; op2val:0x3f414141; valaddr_reg:x16; val_offset:912; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 912, x17, x15, 912, x18)

inst_877:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x414141 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x414141 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f414141; op2val:0x3f414141; valaddr_reg:x16; val_offset:920; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 920, x17, x15, 920, x18)

inst_878:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x414141 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x414141 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f414141; op2val:0x3f414141; valaddr_reg:x16; val_offset:928; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 928, x17, x15, 928, x18)

inst_879:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x414141 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x414141 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f414141; op2val:0x3f414141; valaddr_reg:x16; val_offset:936; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 936, x17, x15, 936, x18)

inst_880:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x414141 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x414141 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f414141; op2val:0x3f414141; valaddr_reg:x16; val_offset:944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 944, x17, x15, 944, x18)

inst_881:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x578f38 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x578f38 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed78f38; op2val:0x3ed78f38; valaddr_reg:x16; val_offset:952; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 952, x17, x15, 952, x18)

inst_882:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x578f38 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x578f38 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed78f38; op2val:0x3ed78f38; valaddr_reg:x16; val_offset:960; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 960, x17, x15, 960, x18)

inst_883:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x578f38 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x578f38 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed78f38; op2val:0x3ed78f38; valaddr_reg:x16; val_offset:968; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 968, x17, x15, 968, x18)

inst_884:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x578f38 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x578f38 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed78f38; op2val:0x3ed78f38; valaddr_reg:x16; val_offset:976; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 976, x17, x15, 976, x18)

inst_885:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x578f38 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x578f38 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed78f38; op2val:0x3ed78f38; valaddr_reg:x16; val_offset:984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 984, x17, x15, 984, x18)

inst_886:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2a6920 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2a6920 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2a6920; op2val:0x3f2a6920; valaddr_reg:x16; val_offset:992; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 992, x17, x15, 992, x18)

inst_887:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2a6920 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2a6920 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2a6920; op2val:0x3f2a6920; valaddr_reg:x16; val_offset:1000; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1000, x17, x15, 1000, x18)

inst_888:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2a6920 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2a6920 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2a6920; op2val:0x3f2a6920; valaddr_reg:x16; val_offset:1008; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1008, x17, x15, 1008, x18)

inst_889:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2a6920 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2a6920 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2a6920; op2val:0x3f2a6920; valaddr_reg:x16; val_offset:1016; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1016, x17, x15, 1016, x18)

inst_890:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2a6920 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2a6920 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2a6920; op2val:0x3f2a6920; valaddr_reg:x16; val_offset:1024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1024, x17, x15, 1024, x18)

inst_891:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x5a1c8b and fs2 == 0 and fe2 == 0x7b and fm2 == 0x5a1c8b and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dda1c8b; op2val:0x3dda1c8b; valaddr_reg:x16; val_offset:1032; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1032, x17, x15, 1032, x18)

inst_892:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x5a1c8b and fs2 == 0 and fe2 == 0x7b and fm2 == 0x5a1c8b and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dda1c8b; op2val:0x3dda1c8b; valaddr_reg:x16; val_offset:1040; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1040, x17, x15, 1040, x18)

inst_893:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x5a1c8b and fs2 == 0 and fe2 == 0x7b and fm2 == 0x5a1c8b and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dda1c8b; op2val:0x3dda1c8b; valaddr_reg:x16; val_offset:1048; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1048, x17, x15, 1048, x18)

inst_894:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x5a1c8b and fs2 == 0 and fe2 == 0x7b and fm2 == 0x5a1c8b and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dda1c8b; op2val:0x3dda1c8b; valaddr_reg:x16; val_offset:1056; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1056, x17, x15, 1056, x18)

inst_895:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x5a1c8b and fs2 == 0 and fe2 == 0x7b and fm2 == 0x5a1c8b and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dda1c8b; op2val:0x3dda1c8b; valaddr_reg:x16; val_offset:1064; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1064, x17, x15, 1064, x18)

inst_896:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2eea72 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2eea72 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2eea72; op2val:0x3f2eea72; valaddr_reg:x16; val_offset:1072; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1072, x17, x15, 1072, x18)

inst_897:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2eea72 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2eea72 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2eea72; op2val:0x3f2eea72; valaddr_reg:x16; val_offset:1080; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1080, x17, x15, 1080, x18)

inst_898:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2eea72 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2eea72 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2eea72; op2val:0x3f2eea72; valaddr_reg:x16; val_offset:1088; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1088, x17, x15, 1088, x18)

inst_899:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2eea72 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2eea72 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2eea72; op2val:0x3f2eea72; valaddr_reg:x16; val_offset:1096; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1096, x17, x15, 1096, x18)

inst_900:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2eea72 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2eea72 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2eea72; op2val:0x3f2eea72; valaddr_reg:x16; val_offset:1104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1104, x17, x15, 1104, x18)

inst_901:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x317695 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x317695 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f317695; op2val:0x3f317695; valaddr_reg:x16; val_offset:1112; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1112, x17, x15, 1112, x18)

inst_902:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x317695 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x317695 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f317695; op2val:0x3f317695; valaddr_reg:x16; val_offset:1120; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1120, x17, x15, 1120, x18)

inst_903:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x317695 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x317695 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f317695; op2val:0x3f317695; valaddr_reg:x16; val_offset:1128; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1128, x17, x15, 1128, x18)

inst_904:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x317695 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x317695 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f317695; op2val:0x3f317695; valaddr_reg:x16; val_offset:1136; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1136, x17, x15, 1136, x18)

inst_905:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x317695 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x317695 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f317695; op2val:0x3f317695; valaddr_reg:x16; val_offset:1144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1144, x17, x15, 1144, x18)

inst_906:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x72c05b and fs2 == 0 and fe2 == 0x7a and fm2 == 0x72c05b and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d72c05b; op2val:0x3d72c05b; valaddr_reg:x16; val_offset:1152; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1152, x17, x15, 1152, x18)

inst_907:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x72c05b and fs2 == 0 and fe2 == 0x7a and fm2 == 0x72c05b and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d72c05b; op2val:0x3d72c05b; valaddr_reg:x16; val_offset:1160; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1160, x17, x15, 1160, x18)

inst_908:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x72c05b and fs2 == 0 and fe2 == 0x7a and fm2 == 0x72c05b and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d72c05b; op2val:0x3d72c05b; valaddr_reg:x16; val_offset:1168; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1168, x17, x15, 1168, x18)

inst_909:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x72c05b and fs2 == 0 and fe2 == 0x7a and fm2 == 0x72c05b and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d72c05b; op2val:0x3d72c05b; valaddr_reg:x16; val_offset:1176; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1176, x17, x15, 1176, x18)

inst_910:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x72c05b and fs2 == 0 and fe2 == 0x7a and fm2 == 0x72c05b and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d72c05b; op2val:0x3d72c05b; valaddr_reg:x16; val_offset:1184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1184, x17, x15, 1184, x18)

inst_911:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x322bac and fs2 == 0 and fe2 == 0x7d and fm2 == 0x322bac and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb22bac; op2val:0x3eb22bac; valaddr_reg:x16; val_offset:1192; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1192, x17, x15, 1192, x18)

inst_912:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x322bac and fs2 == 0 and fe2 == 0x7d and fm2 == 0x322bac and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb22bac; op2val:0x3eb22bac; valaddr_reg:x16; val_offset:1200; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1200, x17, x15, 1200, x18)

inst_913:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x322bac and fs2 == 0 and fe2 == 0x7d and fm2 == 0x322bac and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb22bac; op2val:0x3eb22bac; valaddr_reg:x16; val_offset:1208; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1208, x17, x15, 1208, x18)

inst_914:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x322bac and fs2 == 0 and fe2 == 0x7d and fm2 == 0x322bac and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb22bac; op2val:0x3eb22bac; valaddr_reg:x16; val_offset:1216; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1216, x17, x15, 1216, x18)

inst_915:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x322bac and fs2 == 0 and fe2 == 0x7d and fm2 == 0x322bac and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb22bac; op2val:0x3eb22bac; valaddr_reg:x16; val_offset:1224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1224, x17, x15, 1224, x18)

inst_916:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x082d8c and fs2 == 0 and fe2 == 0x79 and fm2 == 0x082d8c and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3c882d8c; op2val:0x3c882d8c; valaddr_reg:x16; val_offset:1232; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1232, x17, x15, 1232, x18)

inst_917:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x082d8c and fs2 == 0 and fe2 == 0x79 and fm2 == 0x082d8c and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3c882d8c; op2val:0x3c882d8c; valaddr_reg:x16; val_offset:1240; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1240, x17, x15, 1240, x18)

inst_918:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x082d8c and fs2 == 0 and fe2 == 0x79 and fm2 == 0x082d8c and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3c882d8c; op2val:0x3c882d8c; valaddr_reg:x16; val_offset:1248; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1248, x17, x15, 1248, x18)

inst_919:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x082d8c and fs2 == 0 and fe2 == 0x79 and fm2 == 0x082d8c and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3c882d8c; op2val:0x3c882d8c; valaddr_reg:x16; val_offset:1256; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1256, x17, x15, 1256, x18)

inst_920:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x082d8c and fs2 == 0 and fe2 == 0x79 and fm2 == 0x082d8c and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3c882d8c; op2val:0x3c882d8c; valaddr_reg:x16; val_offset:1264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1264, x17, x15, 1264, x18)

inst_921:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6b2b6a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6b2b6a and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6b2b6a; op2val:0x3f6b2b6a; valaddr_reg:x16; val_offset:1272; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1272, x17, x15, 1272, x18)

inst_922:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6b2b6a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6b2b6a and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6b2b6a; op2val:0x3f6b2b6a; valaddr_reg:x16; val_offset:1280; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1280, x17, x15, 1280, x18)

inst_923:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6b2b6a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6b2b6a and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6b2b6a; op2val:0x3f6b2b6a; valaddr_reg:x16; val_offset:1288; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1288, x17, x15, 1288, x18)

inst_924:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6b2b6a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6b2b6a and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6b2b6a; op2val:0x3f6b2b6a; valaddr_reg:x16; val_offset:1296; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1296, x17, x15, 1296, x18)

inst_925:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6b2b6a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6b2b6a and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6b2b6a; op2val:0x3f6b2b6a; valaddr_reg:x16; val_offset:1304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1304, x17, x15, 1304, x18)

inst_926:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x315367 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x315367 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f315367; op2val:0x3f315367; valaddr_reg:x16; val_offset:1312; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1312, x17, x15, 1312, x18)

inst_927:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x315367 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x315367 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f315367; op2val:0x3f315367; valaddr_reg:x16; val_offset:1320; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1320, x17, x15, 1320, x18)

inst_928:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x315367 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x315367 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f315367; op2val:0x3f315367; valaddr_reg:x16; val_offset:1328; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1328, x17, x15, 1328, x18)

inst_929:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x315367 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x315367 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f315367; op2val:0x3f315367; valaddr_reg:x16; val_offset:1336; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1336, x17, x15, 1336, x18)

inst_930:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x315367 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x315367 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f315367; op2val:0x3f315367; valaddr_reg:x16; val_offset:1344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1344, x17, x15, 1344, x18)

inst_931:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3dac8a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3dac8a and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3dac8a; op2val:0x3f3dac8a; valaddr_reg:x16; val_offset:1352; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1352, x17, x15, 1352, x18)

inst_932:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3dac8a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3dac8a and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3dac8a; op2val:0x3f3dac8a; valaddr_reg:x16; val_offset:1360; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1360, x17, x15, 1360, x18)

inst_933:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3dac8a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3dac8a and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3dac8a; op2val:0x3f3dac8a; valaddr_reg:x16; val_offset:1368; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1368, x17, x15, 1368, x18)

inst_934:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3dac8a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3dac8a and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3dac8a; op2val:0x3f3dac8a; valaddr_reg:x16; val_offset:1376; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1376, x17, x15, 1376, x18)

inst_935:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3dac8a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3dac8a and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3dac8a; op2val:0x3f3dac8a; valaddr_reg:x16; val_offset:1384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1384, x17, x15, 1384, x18)

inst_936:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1fa595 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1fa595 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9fa595; op2val:0x3e9fa595; valaddr_reg:x16; val_offset:1392; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1392, x17, x15, 1392, x18)

inst_937:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1fa595 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1fa595 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9fa595; op2val:0x3e9fa595; valaddr_reg:x16; val_offset:1400; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1400, x17, x15, 1400, x18)

inst_938:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1fa595 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1fa595 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9fa595; op2val:0x3e9fa595; valaddr_reg:x16; val_offset:1408; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1408, x17, x15, 1408, x18)

inst_939:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1fa595 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1fa595 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9fa595; op2val:0x3e9fa595; valaddr_reg:x16; val_offset:1416; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1416, x17, x15, 1416, x18)

inst_940:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1fa595 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1fa595 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9fa595; op2val:0x3e9fa595; valaddr_reg:x16; val_offset:1424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1424, x17, x15, 1424, x18)

inst_941:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x2439d8 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x2439d8 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ca439d8; op2val:0x3ca439d8; valaddr_reg:x16; val_offset:1432; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1432, x17, x15, 1432, x18)

inst_942:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x2439d8 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x2439d8 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ca439d8; op2val:0x3ca439d8; valaddr_reg:x16; val_offset:1440; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1440, x17, x15, 1440, x18)

inst_943:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x2439d8 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x2439d8 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ca439d8; op2val:0x3ca439d8; valaddr_reg:x16; val_offset:1448; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1448, x17, x15, 1448, x18)

inst_944:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x2439d8 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x2439d8 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ca439d8; op2val:0x3ca439d8; valaddr_reg:x16; val_offset:1456; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1456, x17, x15, 1456, x18)

inst_945:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x2439d8 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x2439d8 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ca439d8; op2val:0x3ca439d8; valaddr_reg:x16; val_offset:1464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1464, x17, x15, 1464, x18)

inst_946:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x48e918 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x48e918 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f48e918; op2val:0x3f48e918; valaddr_reg:x16; val_offset:1472; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1472, x17, x15, 1472, x18)

inst_947:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x48e918 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x48e918 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f48e918; op2val:0x3f48e918; valaddr_reg:x16; val_offset:1480; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1480, x17, x15, 1480, x18)

inst_948:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x48e918 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x48e918 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f48e918; op2val:0x3f48e918; valaddr_reg:x16; val_offset:1488; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1488, x17, x15, 1488, x18)

inst_949:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x48e918 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x48e918 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f48e918; op2val:0x3f48e918; valaddr_reg:x16; val_offset:1496; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1496, x17, x15, 1496, x18)

inst_950:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x48e918 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x48e918 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f48e918; op2val:0x3f48e918; valaddr_reg:x16; val_offset:1504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1504, x17, x15, 1504, x18)

inst_951:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x776d52 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x776d52 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3cf76d52; op2val:0x3cf76d52; valaddr_reg:x16; val_offset:1512; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1512, x17, x15, 1512, x18)

inst_952:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x776d52 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x776d52 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3cf76d52; op2val:0x3cf76d52; valaddr_reg:x16; val_offset:1520; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1520, x17, x15, 1520, x18)

inst_953:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x776d52 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x776d52 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3cf76d52; op2val:0x3cf76d52; valaddr_reg:x16; val_offset:1528; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1528, x17, x15, 1528, x18)

inst_954:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x776d52 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x776d52 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3cf76d52; op2val:0x3cf76d52; valaddr_reg:x16; val_offset:1536; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1536, x17, x15, 1536, x18)

inst_955:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x776d52 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x776d52 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3cf76d52; op2val:0x3cf76d52; valaddr_reg:x16; val_offset:1544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1544, x17, x15, 1544, x18)

inst_956:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x315f86 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x315f86 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db15f86; op2val:0x3db15f86; valaddr_reg:x16; val_offset:1552; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1552, x17, x15, 1552, x18)

inst_957:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x315f86 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x315f86 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db15f86; op2val:0x3db15f86; valaddr_reg:x16; val_offset:1560; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1560, x17, x15, 1560, x18)

inst_958:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x315f86 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x315f86 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db15f86; op2val:0x3db15f86; valaddr_reg:x16; val_offset:1568; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1568, x17, x15, 1568, x18)

inst_959:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x315f86 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x315f86 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db15f86; op2val:0x3db15f86; valaddr_reg:x16; val_offset:1576; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1576, x17, x15, 1576, x18)

inst_960:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x315f86 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x315f86 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db15f86; op2val:0x3db15f86; valaddr_reg:x16; val_offset:1584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1584, x17, x15, 1584, x18)

inst_961:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2fccd3 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2fccd3 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2fccd3; op2val:0x3f2fccd3; valaddr_reg:x16; val_offset:1592; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1592, x17, x15, 1592, x18)

inst_962:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2fccd3 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2fccd3 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2fccd3; op2val:0x3f2fccd3; valaddr_reg:x16; val_offset:1600; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1600, x17, x15, 1600, x18)

inst_963:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2fccd3 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2fccd3 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2fccd3; op2val:0x3f2fccd3; valaddr_reg:x16; val_offset:1608; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1608, x17, x15, 1608, x18)

inst_964:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2fccd3 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2fccd3 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2fccd3; op2val:0x3f2fccd3; valaddr_reg:x16; val_offset:1616; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1616, x17, x15, 1616, x18)

inst_965:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2fccd3 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2fccd3 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2fccd3; op2val:0x3f2fccd3; valaddr_reg:x16; val_offset:1624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1624, x17, x15, 1624, x18)

inst_966:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4e8e4a and fs2 == 0 and fe2 == 0x7d and fm2 == 0x4e8e4a and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ece8e4a; op2val:0x3ece8e4a; valaddr_reg:x16; val_offset:1632; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1632, x17, x15, 1632, x18)

inst_967:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4e8e4a and fs2 == 0 and fe2 == 0x7d and fm2 == 0x4e8e4a and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ece8e4a; op2val:0x3ece8e4a; valaddr_reg:x16; val_offset:1640; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1640, x17, x15, 1640, x18)

inst_968:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4e8e4a and fs2 == 0 and fe2 == 0x7d and fm2 == 0x4e8e4a and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ece8e4a; op2val:0x3ece8e4a; valaddr_reg:x16; val_offset:1648; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1648, x17, x15, 1648, x18)

inst_969:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4e8e4a and fs2 == 0 and fe2 == 0x7d and fm2 == 0x4e8e4a and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ece8e4a; op2val:0x3ece8e4a; valaddr_reg:x16; val_offset:1656; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1656, x17, x15, 1656, x18)

inst_970:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4e8e4a and fs2 == 0 and fe2 == 0x7d and fm2 == 0x4e8e4a and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ece8e4a; op2val:0x3ece8e4a; valaddr_reg:x16; val_offset:1664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1664, x17, x15, 1664, x18)

inst_971:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x0eacc8 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x0eacc8 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3c8eacc8; op2val:0x3c8eacc8; valaddr_reg:x16; val_offset:1672; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1672, x17, x15, 1672, x18)

inst_972:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x0eacc8 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x0eacc8 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3c8eacc8; op2val:0x3c8eacc8; valaddr_reg:x16; val_offset:1680; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1680, x17, x15, 1680, x18)

inst_973:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x0eacc8 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x0eacc8 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3c8eacc8; op2val:0x3c8eacc8; valaddr_reg:x16; val_offset:1688; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1688, x17, x15, 1688, x18)

inst_974:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x0eacc8 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x0eacc8 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3c8eacc8; op2val:0x3c8eacc8; valaddr_reg:x16; val_offset:1696; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1696, x17, x15, 1696, x18)

inst_975:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x0eacc8 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x0eacc8 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3c8eacc8; op2val:0x3c8eacc8; valaddr_reg:x16; val_offset:1704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1704, x17, x15, 1704, x18)

inst_976:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x75db73 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x75db73 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f75db73; op2val:0x3f75db73; valaddr_reg:x16; val_offset:1712; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1712, x17, x15, 1712, x18)

inst_977:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x75db73 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x75db73 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f75db73; op2val:0x3f75db73; valaddr_reg:x16; val_offset:1720; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1720, x17, x15, 1720, x18)

inst_978:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x75db73 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x75db73 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f75db73; op2val:0x3f75db73; valaddr_reg:x16; val_offset:1728; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1728, x17, x15, 1728, x18)

inst_979:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x75db73 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x75db73 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f75db73; op2val:0x3f75db73; valaddr_reg:x16; val_offset:1736; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1736, x17, x15, 1736, x18)

inst_980:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x75db73 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x75db73 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f75db73; op2val:0x3f75db73; valaddr_reg:x16; val_offset:1744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1744, x17, x15, 1744, x18)

inst_981:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x665def and fs2 == 0 and fe2 == 0x7e and fm2 == 0x665def and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f665def; op2val:0x3f665def; valaddr_reg:x16; val_offset:1752; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1752, x17, x15, 1752, x18)

inst_982:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x665def and fs2 == 0 and fe2 == 0x7e and fm2 == 0x665def and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f665def; op2val:0x3f665def; valaddr_reg:x16; val_offset:1760; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1760, x17, x15, 1760, x18)

inst_983:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x665def and fs2 == 0 and fe2 == 0x7e and fm2 == 0x665def and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f665def; op2val:0x3f665def; valaddr_reg:x16; val_offset:1768; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1768, x17, x15, 1768, x18)

inst_984:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x665def and fs2 == 0 and fe2 == 0x7e and fm2 == 0x665def and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f665def; op2val:0x3f665def; valaddr_reg:x16; val_offset:1776; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1776, x17, x15, 1776, x18)

inst_985:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x665def and fs2 == 0 and fe2 == 0x7e and fm2 == 0x665def and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f665def; op2val:0x3f665def; valaddr_reg:x16; val_offset:1784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1784, x17, x15, 1784, x18)

inst_986:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3f2083 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3f2083 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3f2083; op2val:0x3f3f2083; valaddr_reg:x16; val_offset:1792; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1792, x17, x15, 1792, x18)

inst_987:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3f2083 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3f2083 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3f2083; op2val:0x3f3f2083; valaddr_reg:x16; val_offset:1800; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1800, x17, x15, 1800, x18)

inst_988:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3f2083 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3f2083 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3f2083; op2val:0x3f3f2083; valaddr_reg:x16; val_offset:1808; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1808, x17, x15, 1808, x18)

inst_989:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3f2083 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3f2083 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3f2083; op2val:0x3f3f2083; valaddr_reg:x16; val_offset:1816; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1816, x17, x15, 1816, x18)

inst_990:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3f2083 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3f2083 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3f2083; op2val:0x3f3f2083; valaddr_reg:x16; val_offset:1824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1824, x17, x15, 1824, x18)

inst_991:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x39e96f and fs2 == 0 and fe2 == 0x7b and fm2 == 0x39e96f and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db9e96f; op2val:0x3db9e96f; valaddr_reg:x16; val_offset:1832; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1832, x17, x15, 1832, x18)

inst_992:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x39e96f and fs2 == 0 and fe2 == 0x7b and fm2 == 0x39e96f and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db9e96f; op2val:0x3db9e96f; valaddr_reg:x16; val_offset:1840; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1840, x17, x15, 1840, x18)

inst_993:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x39e96f and fs2 == 0 and fe2 == 0x7b and fm2 == 0x39e96f and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db9e96f; op2val:0x3db9e96f; valaddr_reg:x16; val_offset:1848; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1848, x17, x15, 1848, x18)

inst_994:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x39e96f and fs2 == 0 and fe2 == 0x7b and fm2 == 0x39e96f and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db9e96f; op2val:0x3db9e96f; valaddr_reg:x16; val_offset:1856; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1856, x17, x15, 1856, x18)

inst_995:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x39e96f and fs2 == 0 and fe2 == 0x7b and fm2 == 0x39e96f and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db9e96f; op2val:0x3db9e96f; valaddr_reg:x16; val_offset:1864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1864, x17, x15, 1864, x18)

inst_996:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1f2938 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1f2938 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1f2938; op2val:0x3f1f2938; valaddr_reg:x16; val_offset:1872; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1872, x17, x15, 1872, x18)

inst_997:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1f2938 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1f2938 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1f2938; op2val:0x3f1f2938; valaddr_reg:x16; val_offset:1880; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1880, x17, x15, 1880, x18)

inst_998:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1f2938 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1f2938 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1f2938; op2val:0x3f1f2938; valaddr_reg:x16; val_offset:1888; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1888, x17, x15, 1888, x18)

inst_999:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1f2938 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1f2938 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1f2938; op2val:0x3f1f2938; valaddr_reg:x16; val_offset:1896; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1896, x17, x15, 1896, x18)

inst_1000:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1f2938 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1f2938 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1f2938; op2val:0x3f1f2938; valaddr_reg:x16; val_offset:1904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1904, x17, x15, 1904, x18)

inst_1001:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x65aca9 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x65aca9 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f65aca9; op2val:0x3f65aca9; valaddr_reg:x16; val_offset:1912; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1912, x17, x15, 1912, x18)

inst_1002:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x65aca9 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x65aca9 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f65aca9; op2val:0x3f65aca9; valaddr_reg:x16; val_offset:1920; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1920, x17, x15, 1920, x18)

inst_1003:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x65aca9 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x65aca9 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f65aca9; op2val:0x3f65aca9; valaddr_reg:x16; val_offset:1928; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1928, x17, x15, 1928, x18)

inst_1004:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x65aca9 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x65aca9 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f65aca9; op2val:0x3f65aca9; valaddr_reg:x16; val_offset:1936; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1936, x17, x15, 1936, x18)

inst_1005:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x65aca9 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x65aca9 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f65aca9; op2val:0x3f65aca9; valaddr_reg:x16; val_offset:1944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1944, x17, x15, 1944, x18)

inst_1006:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x423247 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x423247 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f423247; op2val:0x3f423247; valaddr_reg:x16; val_offset:1952; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1952, x17, x15, 1952, x18)

inst_1007:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x423247 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x423247 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f423247; op2val:0x3f423247; valaddr_reg:x16; val_offset:1960; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1960, x17, x15, 1960, x18)

inst_1008:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x423247 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x423247 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f423247; op2val:0x3f423247; valaddr_reg:x16; val_offset:1968; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1968, x17, x15, 1968, x18)

inst_1009:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x423247 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x423247 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f423247; op2val:0x3f423247; valaddr_reg:x16; val_offset:1976; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1976, x17, x15, 1976, x18)

inst_1010:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x423247 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x423247 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f423247; op2val:0x3f423247; valaddr_reg:x16; val_offset:1984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1984, x17, x15, 1984, x18)

inst_1011:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x626ac7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x626ac7 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f626ac7; op2val:0x3f626ac7; valaddr_reg:x16; val_offset:1992; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1992, x17, x15, 1992, x18)

inst_1012:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x626ac7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x626ac7 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f626ac7; op2val:0x3f626ac7; valaddr_reg:x16; val_offset:2000; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 2000, x17, x15, 2000, x18)

inst_1013:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x626ac7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x626ac7 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f626ac7; op2val:0x3f626ac7; valaddr_reg:x16; val_offset:2008; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 2008, x17, x15, 2008, x18)

inst_1014:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x626ac7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x626ac7 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f626ac7; op2val:0x3f626ac7; valaddr_reg:x16; val_offset:2016; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 2016, x17, x15, 2016, x18)

inst_1015:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x626ac7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x626ac7 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f626ac7; op2val:0x3f626ac7; valaddr_reg:x16; val_offset:2024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_5)

inst_1016:
// fs1 == 0 and fe1 == 0x78 and fm1 == 0x4202db and fs2 == 0 and fe2 == 0x78 and fm2 == 0x4202db and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3c4202db; op2val:0x3c4202db; valaddr_reg:x16; val_offset:0; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 0, x17, x15, 0, x18)

inst_1017:
// fs1 == 0 and fe1 == 0x78 and fm1 == 0x4202db and fs2 == 0 and fe2 == 0x78 and fm2 == 0x4202db and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3c4202db; op2val:0x3c4202db; valaddr_reg:x16; val_offset:8; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 8, x17, x15, 8, x18)

inst_1018:
// fs1 == 0 and fe1 == 0x78 and fm1 == 0x4202db and fs2 == 0 and fe2 == 0x78 and fm2 == 0x4202db and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3c4202db; op2val:0x3c4202db; valaddr_reg:x16; val_offset:16; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 16, x17, x15, 16, x18)

inst_1019:
// fs1 == 0 and fe1 == 0x78 and fm1 == 0x4202db and fs2 == 0 and fe2 == 0x78 and fm2 == 0x4202db and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3c4202db; op2val:0x3c4202db; valaddr_reg:x16; val_offset:24; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 24, x17, x15, 24, x18)

inst_1020:
// fs1 == 0 and fe1 == 0x78 and fm1 == 0x4202db and fs2 == 0 and fe2 == 0x78 and fm2 == 0x4202db and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3c4202db; op2val:0x3c4202db; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 32, x17, x15, 32, x18)

inst_1021:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x75c104 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x75c104 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f75c104; op2val:0x3f75c104; valaddr_reg:x16; val_offset:40; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 40, x17, x15, 40, x18)

inst_1022:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x75c104 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x75c104 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f75c104; op2val:0x3f75c104; valaddr_reg:x16; val_offset:48; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 48, x17, x15, 48, x18)

inst_1023:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x75c104 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x75c104 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f75c104; op2val:0x3f75c104; valaddr_reg:x16; val_offset:56; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 56, x17, x15, 56, x18)

inst_1024:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x75c104 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x75c104 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f75c104; op2val:0x3f75c104; valaddr_reg:x16; val_offset:64; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 64, x17, x15, 64, x18)

inst_1025:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x75c104 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x75c104 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f75c104; op2val:0x3f75c104; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 72, x17, x15, 72, x18)

inst_1026:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6288a4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6288a4 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6288a4; op2val:0x3f6288a4; valaddr_reg:x16; val_offset:80; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 80, x17, x15, 80, x18)

inst_1027:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6288a4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6288a4 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6288a4; op2val:0x3f6288a4; valaddr_reg:x16; val_offset:88; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 88, x17, x15, 88, x18)

inst_1028:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6288a4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6288a4 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6288a4; op2val:0x3f6288a4; valaddr_reg:x16; val_offset:96; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 96, x17, x15, 96, x18)

inst_1029:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6288a4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6288a4 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6288a4; op2val:0x3f6288a4; valaddr_reg:x16; val_offset:104; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 104, x17, x15, 104, x18)

inst_1030:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6288a4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6288a4 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6288a4; op2val:0x3f6288a4; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 112, x17, x15, 112, x18)

inst_1031:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x28bfce and fs2 == 0 and fe2 == 0x7d and fm2 == 0x28bfce and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea8bfce; op2val:0x3ea8bfce; valaddr_reg:x16; val_offset:120; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 120, x17, x15, 120, x18)

inst_1032:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x28bfce and fs2 == 0 and fe2 == 0x7d and fm2 == 0x28bfce and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea8bfce; op2val:0x3ea8bfce; valaddr_reg:x16; val_offset:128; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 128, x17, x15, 128, x18)

inst_1033:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x28bfce and fs2 == 0 and fe2 == 0x7d and fm2 == 0x28bfce and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea8bfce; op2val:0x3ea8bfce; valaddr_reg:x16; val_offset:136; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 136, x17, x15, 136, x18)

inst_1034:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x28bfce and fs2 == 0 and fe2 == 0x7d and fm2 == 0x28bfce and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea8bfce; op2val:0x3ea8bfce; valaddr_reg:x16; val_offset:144; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 144, x17, x15, 144, x18)

inst_1035:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x28bfce and fs2 == 0 and fe2 == 0x7d and fm2 == 0x28bfce and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea8bfce; op2val:0x3ea8bfce; valaddr_reg:x16; val_offset:152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 152, x17, x15, 152, x18)

inst_1036:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x305d8b and fs2 == 0 and fe2 == 0x7c and fm2 == 0x305d8b and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e305d8b; op2val:0x3e305d8b; valaddr_reg:x16; val_offset:160; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 160, x17, x15, 160, x18)

inst_1037:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x305d8b and fs2 == 0 and fe2 == 0x7c and fm2 == 0x305d8b and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e305d8b; op2val:0x3e305d8b; valaddr_reg:x16; val_offset:168; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 168, x17, x15, 168, x18)

inst_1038:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x305d8b and fs2 == 0 and fe2 == 0x7c and fm2 == 0x305d8b and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e305d8b; op2val:0x3e305d8b; valaddr_reg:x16; val_offset:176; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 176, x17, x15, 176, x18)

inst_1039:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x305d8b and fs2 == 0 and fe2 == 0x7c and fm2 == 0x305d8b and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e305d8b; op2val:0x3e305d8b; valaddr_reg:x16; val_offset:184; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 184, x17, x15, 184, x18)

inst_1040:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x305d8b and fs2 == 0 and fe2 == 0x7c and fm2 == 0x305d8b and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e305d8b; op2val:0x3e305d8b; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 192, x17, x15, 192, x18)

inst_1041:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x390a8c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x390a8c and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f390a8c; op2val:0x3f390a8c; valaddr_reg:x16; val_offset:200; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 200, x17, x15, 200, x18)

inst_1042:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x390a8c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x390a8c and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f390a8c; op2val:0x3f390a8c; valaddr_reg:x16; val_offset:208; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 208, x17, x15, 208, x18)

inst_1043:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x390a8c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x390a8c and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f390a8c; op2val:0x3f390a8c; valaddr_reg:x16; val_offset:216; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 216, x17, x15, 216, x18)

inst_1044:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x390a8c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x390a8c and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f390a8c; op2val:0x3f390a8c; valaddr_reg:x16; val_offset:224; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 224, x17, x15, 224, x18)

inst_1045:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x390a8c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x390a8c and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f390a8c; op2val:0x3f390a8c; valaddr_reg:x16; val_offset:232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 232, x17, x15, 232, x18)

inst_1046:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x19765d and fs2 == 0 and fe2 == 0x7b and fm2 == 0x19765d and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d99765d; op2val:0x3d99765d; valaddr_reg:x16; val_offset:240; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 240, x17, x15, 240, x18)

inst_1047:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x19765d and fs2 == 0 and fe2 == 0x7b and fm2 == 0x19765d and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d99765d; op2val:0x3d99765d; valaddr_reg:x16; val_offset:248; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 248, x17, x15, 248, x18)

inst_1048:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x19765d and fs2 == 0 and fe2 == 0x7b and fm2 == 0x19765d and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d99765d; op2val:0x3d99765d; valaddr_reg:x16; val_offset:256; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 256, x17, x15, 256, x18)

inst_1049:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x19765d and fs2 == 0 and fe2 == 0x7b and fm2 == 0x19765d and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d99765d; op2val:0x3d99765d; valaddr_reg:x16; val_offset:264; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 264, x17, x15, 264, x18)

inst_1050:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x19765d and fs2 == 0 and fe2 == 0x7b and fm2 == 0x19765d and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d99765d; op2val:0x3d99765d; valaddr_reg:x16; val_offset:272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 272, x17, x15, 272, x18)

inst_1051:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x5fb4f5 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x5fb4f5 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ddfb4f5; op2val:0x3ddfb4f5; valaddr_reg:x16; val_offset:280; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 280, x17, x15, 280, x18)

inst_1052:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x5fb4f5 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x5fb4f5 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ddfb4f5; op2val:0x3ddfb4f5; valaddr_reg:x16; val_offset:288; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 288, x17, x15, 288, x18)

inst_1053:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x5fb4f5 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x5fb4f5 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ddfb4f5; op2val:0x3ddfb4f5; valaddr_reg:x16; val_offset:296; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 296, x17, x15, 296, x18)

inst_1054:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x5fb4f5 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x5fb4f5 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ddfb4f5; op2val:0x3ddfb4f5; valaddr_reg:x16; val_offset:304; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 304, x17, x15, 304, x18)

inst_1055:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x5fb4f5 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x5fb4f5 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ddfb4f5; op2val:0x3ddfb4f5; valaddr_reg:x16; val_offset:312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 312, x17, x15, 312, x18)

inst_1056:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6b12df and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6b12df and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6b12df; op2val:0x3f6b12df; valaddr_reg:x16; val_offset:320; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 320, x17, x15, 320, x18)

inst_1057:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6b12df and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6b12df and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6b12df; op2val:0x3f6b12df; valaddr_reg:x16; val_offset:328; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 328, x17, x15, 328, x18)

inst_1058:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6b12df and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6b12df and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6b12df; op2val:0x3f6b12df; valaddr_reg:x16; val_offset:336; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 336, x17, x15, 336, x18)

inst_1059:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6b12df and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6b12df and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6b12df; op2val:0x3f6b12df; valaddr_reg:x16; val_offset:344; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 344, x17, x15, 344, x18)

inst_1060:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6b12df and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6b12df and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6b12df; op2val:0x3f6b12df; valaddr_reg:x16; val_offset:352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 352, x17, x15, 352, x18)

inst_1061:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5bc286 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5bc286 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3edbc286; op2val:0x3edbc286; valaddr_reg:x16; val_offset:360; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 360, x17, x15, 360, x18)

inst_1062:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5bc286 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5bc286 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3edbc286; op2val:0x3edbc286; valaddr_reg:x16; val_offset:368; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 368, x17, x15, 368, x18)

inst_1063:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5bc286 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5bc286 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3edbc286; op2val:0x3edbc286; valaddr_reg:x16; val_offset:376; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 376, x17, x15, 376, x18)

inst_1064:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5bc286 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5bc286 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3edbc286; op2val:0x3edbc286; valaddr_reg:x16; val_offset:384; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 384, x17, x15, 384, x18)

inst_1065:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5bc286 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5bc286 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3edbc286; op2val:0x3edbc286; valaddr_reg:x16; val_offset:392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 392, x17, x15, 392, x18)

inst_1066:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5f54a9 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x5f54a9 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e5f54a9; op2val:0x3e5f54a9; valaddr_reg:x16; val_offset:400; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 400, x17, x15, 400, x18)

inst_1067:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5f54a9 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x5f54a9 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e5f54a9; op2val:0x3e5f54a9; valaddr_reg:x16; val_offset:408; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 408, x17, x15, 408, x18)

inst_1068:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5f54a9 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x5f54a9 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e5f54a9; op2val:0x3e5f54a9; valaddr_reg:x16; val_offset:416; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 416, x17, x15, 416, x18)

inst_1069:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5f54a9 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x5f54a9 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e5f54a9; op2val:0x3e5f54a9; valaddr_reg:x16; val_offset:424; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 424, x17, x15, 424, x18)

inst_1070:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5f54a9 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x5f54a9 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e5f54a9; op2val:0x3e5f54a9; valaddr_reg:x16; val_offset:432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 432, x17, x15, 432, x18)

inst_1071:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x28baf1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x28baf1 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f28baf1; op2val:0x3f28baf1; valaddr_reg:x16; val_offset:440; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 440, x17, x15, 440, x18)

inst_1072:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x28baf1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x28baf1 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f28baf1; op2val:0x3f28baf1; valaddr_reg:x16; val_offset:448; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 448, x17, x15, 448, x18)

inst_1073:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x28baf1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x28baf1 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f28baf1; op2val:0x3f28baf1; valaddr_reg:x16; val_offset:456; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 456, x17, x15, 456, x18)

inst_1074:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x28baf1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x28baf1 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f28baf1; op2val:0x3f28baf1; valaddr_reg:x16; val_offset:464; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 464, x17, x15, 464, x18)

inst_1075:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x28baf1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x28baf1 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f28baf1; op2val:0x3f28baf1; valaddr_reg:x16; val_offset:472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 472, x17, x15, 472, x18)

inst_1076:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x58f800 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x58f800 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e58f800; op2val:0x3e58f800; valaddr_reg:x16; val_offset:480; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 480, x17, x15, 480, x18)

inst_1077:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x58f800 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x58f800 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e58f800; op2val:0x3e58f800; valaddr_reg:x16; val_offset:488; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 488, x17, x15, 488, x18)

inst_1078:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x58f800 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x58f800 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e58f800; op2val:0x3e58f800; valaddr_reg:x16; val_offset:496; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 496, x17, x15, 496, x18)

inst_1079:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x58f800 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x58f800 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e58f800; op2val:0x3e58f800; valaddr_reg:x16; val_offset:504; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 504, x17, x15, 504, x18)

inst_1080:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x58f800 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x58f800 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e58f800; op2val:0x3e58f800; valaddr_reg:x16; val_offset:512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 512, x17, x15, 512, x18)

inst_1081:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6d4332 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6d4332 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6d4332; op2val:0x3f6d4332; valaddr_reg:x16; val_offset:520; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 520, x17, x15, 520, x18)

inst_1082:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6d4332 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6d4332 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6d4332; op2val:0x3f6d4332; valaddr_reg:x16; val_offset:528; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 528, x17, x15, 528, x18)

inst_1083:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6d4332 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6d4332 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6d4332; op2val:0x3f6d4332; valaddr_reg:x16; val_offset:536; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 536, x17, x15, 536, x18)

inst_1084:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6d4332 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6d4332 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6d4332; op2val:0x3f6d4332; valaddr_reg:x16; val_offset:544; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 544, x17, x15, 544, x18)

inst_1085:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6d4332 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6d4332 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6d4332; op2val:0x3f6d4332; valaddr_reg:x16; val_offset:552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 552, x17, x15, 552, x18)

inst_1086:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x654e3b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x654e3b and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f654e3b; op2val:0x3f654e3b; valaddr_reg:x16; val_offset:560; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 560, x17, x15, 560, x18)

inst_1087:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x654e3b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x654e3b and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f654e3b; op2val:0x3f654e3b; valaddr_reg:x16; val_offset:568; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 568, x17, x15, 568, x18)

inst_1088:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x654e3b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x654e3b and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f654e3b; op2val:0x3f654e3b; valaddr_reg:x16; val_offset:576; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 576, x17, x15, 576, x18)

inst_1089:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x654e3b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x654e3b and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f654e3b; op2val:0x3f654e3b; valaddr_reg:x16; val_offset:584; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 584, x17, x15, 584, x18)

inst_1090:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x654e3b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x654e3b and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f654e3b; op2val:0x3f654e3b; valaddr_reg:x16; val_offset:592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 592, x17, x15, 592, x18)

inst_1091:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5d59f7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5d59f7 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5d59f7; op2val:0x3f5d59f7; valaddr_reg:x16; val_offset:600; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 600, x17, x15, 600, x18)

inst_1092:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5d59f7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5d59f7 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5d59f7; op2val:0x3f5d59f7; valaddr_reg:x16; val_offset:608; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 608, x17, x15, 608, x18)

inst_1093:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5d59f7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5d59f7 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5d59f7; op2val:0x3f5d59f7; valaddr_reg:x16; val_offset:616; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 616, x17, x15, 616, x18)

inst_1094:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5d59f7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5d59f7 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5d59f7; op2val:0x3f5d59f7; valaddr_reg:x16; val_offset:624; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 624, x17, x15, 624, x18)

inst_1095:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5d59f7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5d59f7 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5d59f7; op2val:0x3f5d59f7; valaddr_reg:x16; val_offset:632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 632, x17, x15, 632, x18)

inst_1096:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x3b281a and fs2 == 0 and fe2 == 0x7a and fm2 == 0x3b281a and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d3b281a; op2val:0x3d3b281a; valaddr_reg:x16; val_offset:640; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 640, x17, x15, 640, x18)

inst_1097:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x3b281a and fs2 == 0 and fe2 == 0x7a and fm2 == 0x3b281a and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d3b281a; op2val:0x3d3b281a; valaddr_reg:x16; val_offset:648; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 648, x17, x15, 648, x18)

inst_1098:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x3b281a and fs2 == 0 and fe2 == 0x7a and fm2 == 0x3b281a and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d3b281a; op2val:0x3d3b281a; valaddr_reg:x16; val_offset:656; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 656, x17, x15, 656, x18)

inst_1099:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x3b281a and fs2 == 0 and fe2 == 0x7a and fm2 == 0x3b281a and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d3b281a; op2val:0x3d3b281a; valaddr_reg:x16; val_offset:664; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 664, x17, x15, 664, x18)

inst_1100:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x3b281a and fs2 == 0 and fe2 == 0x7a and fm2 == 0x3b281a and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d3b281a; op2val:0x3d3b281a; valaddr_reg:x16; val_offset:672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 672, x17, x15, 672, x18)

inst_1101:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x07c319 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x07c319 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e07c319; op2val:0x3e07c319; valaddr_reg:x16; val_offset:680; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 680, x17, x15, 680, x18)

inst_1102:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x07c319 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x07c319 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e07c319; op2val:0x3e07c319; valaddr_reg:x16; val_offset:688; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 688, x17, x15, 688, x18)

inst_1103:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x07c319 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x07c319 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e07c319; op2val:0x3e07c319; valaddr_reg:x16; val_offset:696; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 696, x17, x15, 696, x18)

inst_1104:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x07c319 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x07c319 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e07c319; op2val:0x3e07c319; valaddr_reg:x16; val_offset:704; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 704, x17, x15, 704, x18)

inst_1105:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x07c319 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x07c319 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e07c319; op2val:0x3e07c319; valaddr_reg:x16; val_offset:712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 712, x17, x15, 712, x18)

inst_1106:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x28e311 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x28e311 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f28e311; op2val:0x3f28e311; valaddr_reg:x16; val_offset:720; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 720, x17, x15, 720, x18)

inst_1107:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x28e311 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x28e311 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f28e311; op2val:0x3f28e311; valaddr_reg:x16; val_offset:728; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 728, x17, x15, 728, x18)

inst_1108:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x28e311 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x28e311 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f28e311; op2val:0x3f28e311; valaddr_reg:x16; val_offset:736; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 736, x17, x15, 736, x18)

inst_1109:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x28e311 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x28e311 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f28e311; op2val:0x3f28e311; valaddr_reg:x16; val_offset:744; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 744, x17, x15, 744, x18)

inst_1110:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x28e311 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x28e311 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f28e311; op2val:0x3f28e311; valaddr_reg:x16; val_offset:752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 752, x17, x15, 752, x18)

inst_1111:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x22ae3d and fs2 == 0 and fe2 == 0x7c and fm2 == 0x22ae3d and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e22ae3d; op2val:0x3e22ae3d; valaddr_reg:x16; val_offset:760; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 760, x17, x15, 760, x18)

inst_1112:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x22ae3d and fs2 == 0 and fe2 == 0x7c and fm2 == 0x22ae3d and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e22ae3d; op2val:0x3e22ae3d; valaddr_reg:x16; val_offset:768; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 768, x17, x15, 768, x18)

inst_1113:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x22ae3d and fs2 == 0 and fe2 == 0x7c and fm2 == 0x22ae3d and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e22ae3d; op2val:0x3e22ae3d; valaddr_reg:x16; val_offset:776; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 776, x17, x15, 776, x18)

inst_1114:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x22ae3d and fs2 == 0 and fe2 == 0x7c and fm2 == 0x22ae3d and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e22ae3d; op2val:0x3e22ae3d; valaddr_reg:x16; val_offset:784; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 784, x17, x15, 784, x18)

inst_1115:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x22ae3d and fs2 == 0 and fe2 == 0x7c and fm2 == 0x22ae3d and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e22ae3d; op2val:0x3e22ae3d; valaddr_reg:x16; val_offset:792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 792, x17, x15, 792, x18)

inst_1116:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x76aa3f and fs2 == 0 and fe2 == 0x7c and fm2 == 0x76aa3f and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e76aa3f; op2val:0x3e76aa3f; valaddr_reg:x16; val_offset:800; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 800, x17, x15, 800, x18)

inst_1117:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x76aa3f and fs2 == 0 and fe2 == 0x7c and fm2 == 0x76aa3f and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e76aa3f; op2val:0x3e76aa3f; valaddr_reg:x16; val_offset:808; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 808, x17, x15, 808, x18)

inst_1118:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x76aa3f and fs2 == 0 and fe2 == 0x7c and fm2 == 0x76aa3f and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e76aa3f; op2val:0x3e76aa3f; valaddr_reg:x16; val_offset:816; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 816, x17, x15, 816, x18)

inst_1119:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x76aa3f and fs2 == 0 and fe2 == 0x7c and fm2 == 0x76aa3f and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e76aa3f; op2val:0x3e76aa3f; valaddr_reg:x16; val_offset:824; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 824, x17, x15, 824, x18)

inst_1120:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x76aa3f and fs2 == 0 and fe2 == 0x7c and fm2 == 0x76aa3f and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e76aa3f; op2val:0x3e76aa3f; valaddr_reg:x16; val_offset:832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 832, x17, x15, 832, x18)

inst_1121:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x364c09 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x364c09 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db64c09; op2val:0x3db64c09; valaddr_reg:x16; val_offset:840; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 840, x17, x15, 840, x18)

inst_1122:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x364c09 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x364c09 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db64c09; op2val:0x3db64c09; valaddr_reg:x16; val_offset:848; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 848, x17, x15, 848, x18)

inst_1123:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x364c09 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x364c09 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db64c09; op2val:0x3db64c09; valaddr_reg:x16; val_offset:856; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 856, x17, x15, 856, x18)

inst_1124:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x364c09 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x364c09 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db64c09; op2val:0x3db64c09; valaddr_reg:x16; val_offset:864; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 864, x17, x15, 864, x18)

inst_1125:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x364c09 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x364c09 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db64c09; op2val:0x3db64c09; valaddr_reg:x16; val_offset:872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 872, x17, x15, 872, x18)

inst_1126:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6a5265 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6a5265 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6a5265; op2val:0x3f6a5265; valaddr_reg:x16; val_offset:880; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 880, x17, x15, 880, x18)

inst_1127:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6a5265 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6a5265 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6a5265; op2val:0x3f6a5265; valaddr_reg:x16; val_offset:888; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 888, x17, x15, 888, x18)

inst_1128:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6a5265 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6a5265 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6a5265; op2val:0x3f6a5265; valaddr_reg:x16; val_offset:896; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 896, x17, x15, 896, x18)

inst_1129:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6a5265 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6a5265 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6a5265; op2val:0x3f6a5265; valaddr_reg:x16; val_offset:904; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 904, x17, x15, 904, x18)

inst_1130:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6a5265 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6a5265 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6a5265; op2val:0x3f6a5265; valaddr_reg:x16; val_offset:912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 912, x17, x15, 912, x18)

inst_1131:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x43ee9a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x43ee9a and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f43ee9a; op2val:0x3f43ee9a; valaddr_reg:x16; val_offset:920; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 920, x17, x15, 920, x18)

inst_1132:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x43ee9a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x43ee9a and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f43ee9a; op2val:0x3f43ee9a; valaddr_reg:x16; val_offset:928; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 928, x17, x15, 928, x18)

inst_1133:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x43ee9a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x43ee9a and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f43ee9a; op2val:0x3f43ee9a; valaddr_reg:x16; val_offset:936; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 936, x17, x15, 936, x18)

inst_1134:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x43ee9a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x43ee9a and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f43ee9a; op2val:0x3f43ee9a; valaddr_reg:x16; val_offset:944; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 944, x17, x15, 944, x18)

inst_1135:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x43ee9a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x43ee9a and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f43ee9a; op2val:0x3f43ee9a; valaddr_reg:x16; val_offset:952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 952, x17, x15, 952, x18)

inst_1136:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x03f7e4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x03f7e4 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f03f7e4; op2val:0x3f03f7e4; valaddr_reg:x16; val_offset:960; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 960, x17, x15, 960, x18)

inst_1137:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x03f7e4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x03f7e4 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f03f7e4; op2val:0x3f03f7e4; valaddr_reg:x16; val_offset:968; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 968, x17, x15, 968, x18)

inst_1138:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x03f7e4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x03f7e4 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f03f7e4; op2val:0x3f03f7e4; valaddr_reg:x16; val_offset:976; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 976, x17, x15, 976, x18)

inst_1139:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x03f7e4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x03f7e4 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f03f7e4; op2val:0x3f03f7e4; valaddr_reg:x16; val_offset:984; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 984, x17, x15, 984, x18)

inst_1140:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x03f7e4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x03f7e4 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f03f7e4; op2val:0x3f03f7e4; valaddr_reg:x16; val_offset:992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 992, x17, x15, 992, x18)

inst_1141:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x70dbd5 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x70dbd5 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3df0dbd5; op2val:0x3df0dbd5; valaddr_reg:x16; val_offset:1000; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1000, x17, x15, 1000, x18)

inst_1142:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x70dbd5 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x70dbd5 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3df0dbd5; op2val:0x3df0dbd5; valaddr_reg:x16; val_offset:1008; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1008, x17, x15, 1008, x18)

inst_1143:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x70dbd5 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x70dbd5 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3df0dbd5; op2val:0x3df0dbd5; valaddr_reg:x16; val_offset:1016; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1016, x17, x15, 1016, x18)

inst_1144:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x70dbd5 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x70dbd5 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3df0dbd5; op2val:0x3df0dbd5; valaddr_reg:x16; val_offset:1024; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1024, x17, x15, 1024, x18)

inst_1145:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x70dbd5 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x70dbd5 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3df0dbd5; op2val:0x3df0dbd5; valaddr_reg:x16; val_offset:1032; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1032, x17, x15, 1032, x18)

inst_1146:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x0ae14b and fs2 == 0 and fe2 == 0x7b and fm2 == 0x0ae14b and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d8ae14b; op2val:0x3d8ae14b; valaddr_reg:x16; val_offset:1040; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1040, x17, x15, 1040, x18)

inst_1147:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x0ae14b and fs2 == 0 and fe2 == 0x7b and fm2 == 0x0ae14b and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d8ae14b; op2val:0x3d8ae14b; valaddr_reg:x16; val_offset:1048; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1048, x17, x15, 1048, x18)

inst_1148:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x0ae14b and fs2 == 0 and fe2 == 0x7b and fm2 == 0x0ae14b and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d8ae14b; op2val:0x3d8ae14b; valaddr_reg:x16; val_offset:1056; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1056, x17, x15, 1056, x18)

inst_1149:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x0ae14b and fs2 == 0 and fe2 == 0x7b and fm2 == 0x0ae14b and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d8ae14b; op2val:0x3d8ae14b; valaddr_reg:x16; val_offset:1064; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1064, x17, x15, 1064, x18)

inst_1150:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x0ae14b and fs2 == 0 and fe2 == 0x7b and fm2 == 0x0ae14b and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d8ae14b; op2val:0x3d8ae14b; valaddr_reg:x16; val_offset:1072; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1072, x17, x15, 1072, x18)

inst_1151:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x26add3 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x26add3 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea6add3; op2val:0x3ea6add3; valaddr_reg:x16; val_offset:1080; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1080, x17, x15, 1080, x18)

inst_1152:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x26add3 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x26add3 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea6add3; op2val:0x3ea6add3; valaddr_reg:x16; val_offset:1088; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1088, x17, x15, 1088, x18)

inst_1153:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x26add3 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x26add3 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea6add3; op2val:0x3ea6add3; valaddr_reg:x16; val_offset:1096; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1096, x17, x15, 1096, x18)

inst_1154:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x26add3 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x26add3 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea6add3; op2val:0x3ea6add3; valaddr_reg:x16; val_offset:1104; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1104, x17, x15, 1104, x18)

inst_1155:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x26add3 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x26add3 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea6add3; op2val:0x3ea6add3; valaddr_reg:x16; val_offset:1112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1112, x17, x15, 1112, x18)

inst_1156:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x293107 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x293107 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f293107; op2val:0x3f293107; valaddr_reg:x16; val_offset:1120; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1120, x17, x15, 1120, x18)

inst_1157:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x293107 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x293107 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f293107; op2val:0x3f293107; valaddr_reg:x16; val_offset:1128; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1128, x17, x15, 1128, x18)

inst_1158:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x293107 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x293107 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f293107; op2val:0x3f293107; valaddr_reg:x16; val_offset:1136; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1136, x17, x15, 1136, x18)

inst_1159:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x293107 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x293107 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f293107; op2val:0x3f293107; valaddr_reg:x16; val_offset:1144; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1144, x17, x15, 1144, x18)

inst_1160:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x293107 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x293107 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f293107; op2val:0x3f293107; valaddr_reg:x16; val_offset:1152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1152, x17, x15, 1152, x18)

inst_1161:
// fs1 == 0 and fe1 == 0x78 and fm1 == 0x542d6b and fs2 == 0 and fe2 == 0x78 and fm2 == 0x542d6b and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3c542d6b; op2val:0x3c542d6b; valaddr_reg:x16; val_offset:1160; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1160, x17, x15, 1160, x18)

inst_1162:
// fs1 == 0 and fe1 == 0x78 and fm1 == 0x542d6b and fs2 == 0 and fe2 == 0x78 and fm2 == 0x542d6b and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3c542d6b; op2val:0x3c542d6b; valaddr_reg:x16; val_offset:1168; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1168, x17, x15, 1168, x18)

inst_1163:
// fs1 == 0 and fe1 == 0x78 and fm1 == 0x542d6b and fs2 == 0 and fe2 == 0x78 and fm2 == 0x542d6b and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3c542d6b; op2val:0x3c542d6b; valaddr_reg:x16; val_offset:1176; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1176, x17, x15, 1176, x18)

inst_1164:
// fs1 == 0 and fe1 == 0x78 and fm1 == 0x542d6b and fs2 == 0 and fe2 == 0x78 and fm2 == 0x542d6b and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3c542d6b; op2val:0x3c542d6b; valaddr_reg:x16; val_offset:1184; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1184, x17, x15, 1184, x18)

inst_1165:
// fs1 == 0 and fe1 == 0x78 and fm1 == 0x542d6b and fs2 == 0 and fe2 == 0x78 and fm2 == 0x542d6b and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3c542d6b; op2val:0x3c542d6b; valaddr_reg:x16; val_offset:1192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1192, x17, x15, 1192, x18)

inst_1166:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4c94e5 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4c94e5 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4c94e5; op2val:0x3f4c94e5; valaddr_reg:x16; val_offset:1200; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1200, x17, x15, 1200, x18)

inst_1167:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4c94e5 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4c94e5 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4c94e5; op2val:0x3f4c94e5; valaddr_reg:x16; val_offset:1208; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1208, x17, x15, 1208, x18)

inst_1168:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4c94e5 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4c94e5 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4c94e5; op2val:0x3f4c94e5; valaddr_reg:x16; val_offset:1216; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1216, x17, x15, 1216, x18)

inst_1169:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4c94e5 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4c94e5 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4c94e5; op2val:0x3f4c94e5; valaddr_reg:x16; val_offset:1224; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1224, x17, x15, 1224, x18)

inst_1170:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4c94e5 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4c94e5 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4c94e5; op2val:0x3f4c94e5; valaddr_reg:x16; val_offset:1232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1232, x17, x15, 1232, x18)

inst_1171:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x4d757a and fs2 == 0 and fe2 == 0x7b and fm2 == 0x4d757a and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dcd757a; op2val:0x3dcd757a; valaddr_reg:x16; val_offset:1240; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1240, x17, x15, 1240, x18)

inst_1172:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x4d757a and fs2 == 0 and fe2 == 0x7b and fm2 == 0x4d757a and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dcd757a; op2val:0x3dcd757a; valaddr_reg:x16; val_offset:1248; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1248, x17, x15, 1248, x18)

inst_1173:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x4d757a and fs2 == 0 and fe2 == 0x7b and fm2 == 0x4d757a and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dcd757a; op2val:0x3dcd757a; valaddr_reg:x16; val_offset:1256; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1256, x17, x15, 1256, x18)

inst_1174:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x4d757a and fs2 == 0 and fe2 == 0x7b and fm2 == 0x4d757a and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dcd757a; op2val:0x3dcd757a; valaddr_reg:x16; val_offset:1264; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1264, x17, x15, 1264, x18)

inst_1175:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x4d757a and fs2 == 0 and fe2 == 0x7b and fm2 == 0x4d757a and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dcd757a; op2val:0x3dcd757a; valaddr_reg:x16; val_offset:1272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1272, x17, x15, 1272, x18)

inst_1176:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2cb625 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2cb625 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2cb625; op2val:0x3f2cb625; valaddr_reg:x16; val_offset:1280; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1280, x17, x15, 1280, x18)

inst_1177:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2cb625 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2cb625 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2cb625; op2val:0x3f2cb625; valaddr_reg:x16; val_offset:1288; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1288, x17, x15, 1288, x18)

inst_1178:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2cb625 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2cb625 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2cb625; op2val:0x3f2cb625; valaddr_reg:x16; val_offset:1296; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1296, x17, x15, 1296, x18)

inst_1179:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2cb625 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2cb625 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2cb625; op2val:0x3f2cb625; valaddr_reg:x16; val_offset:1304; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1304, x17, x15, 1304, x18)

inst_1180:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2cb625 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2cb625 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2cb625; op2val:0x3f2cb625; valaddr_reg:x16; val_offset:1312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1312, x17, x15, 1312, x18)

inst_1181:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x343494 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x343494 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f343494; op2val:0x3f343494; valaddr_reg:x16; val_offset:1320; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1320, x17, x15, 1320, x18)

inst_1182:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x343494 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x343494 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f343494; op2val:0x3f343494; valaddr_reg:x16; val_offset:1328; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1328, x17, x15, 1328, x18)

inst_1183:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x343494 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x343494 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f343494; op2val:0x3f343494; valaddr_reg:x16; val_offset:1336; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1336, x17, x15, 1336, x18)

inst_1184:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x343494 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x343494 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f343494; op2val:0x3f343494; valaddr_reg:x16; val_offset:1344; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1344, x17, x15, 1344, x18)

inst_1185:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x343494 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x343494 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f343494; op2val:0x3f343494; valaddr_reg:x16; val_offset:1352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1352, x17, x15, 1352, x18)

inst_1186:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x654474 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x654474 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f654474; op2val:0x3f654474; valaddr_reg:x16; val_offset:1360; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1360, x17, x15, 1360, x18)

inst_1187:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x654474 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x654474 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f654474; op2val:0x3f654474; valaddr_reg:x16; val_offset:1368; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1368, x17, x15, 1368, x18)

inst_1188:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x654474 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x654474 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f654474; op2val:0x3f654474; valaddr_reg:x16; val_offset:1376; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1376, x17, x15, 1376, x18)

inst_1189:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x654474 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x654474 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f654474; op2val:0x3f654474; valaddr_reg:x16; val_offset:1384; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1384, x17, x15, 1384, x18)

inst_1190:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x654474 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x654474 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f654474; op2val:0x3f654474; valaddr_reg:x16; val_offset:1392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1392, x17, x15, 1392, x18)

inst_1191:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x112a2e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x112a2e and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f112a2e; op2val:0x3f112a2e; valaddr_reg:x16; val_offset:1400; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1400, x17, x15, 1400, x18)

inst_1192:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x112a2e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x112a2e and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f112a2e; op2val:0x3f112a2e; valaddr_reg:x16; val_offset:1408; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1408, x17, x15, 1408, x18)

inst_1193:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x112a2e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x112a2e and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f112a2e; op2val:0x3f112a2e; valaddr_reg:x16; val_offset:1416; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1416, x17, x15, 1416, x18)

inst_1194:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x112a2e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x112a2e and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f112a2e; op2val:0x3f112a2e; valaddr_reg:x16; val_offset:1424; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1424, x17, x15, 1424, x18)

inst_1195:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x112a2e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x112a2e and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f112a2e; op2val:0x3f112a2e; valaddr_reg:x16; val_offset:1432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1432, x17, x15, 1432, x18)

inst_1196:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4b5332 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4b5332 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4b5332; op2val:0x3f4b5332; valaddr_reg:x16; val_offset:1440; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1440, x17, x15, 1440, x18)

inst_1197:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4b5332 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4b5332 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4b5332; op2val:0x3f4b5332; valaddr_reg:x16; val_offset:1448; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1448, x17, x15, 1448, x18)

inst_1198:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4b5332 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4b5332 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4b5332; op2val:0x3f4b5332; valaddr_reg:x16; val_offset:1456; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1456, x17, x15, 1456, x18)

inst_1199:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4b5332 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4b5332 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4b5332; op2val:0x3f4b5332; valaddr_reg:x16; val_offset:1464; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1464, x17, x15, 1464, x18)

inst_1200:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4b5332 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4b5332 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4b5332; op2val:0x3f4b5332; valaddr_reg:x16; val_offset:1472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1472, x17, x15, 1472, x18)

inst_1201:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1f3d6f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1f3d6f and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1f3d6f; op2val:0x3f1f3d6f; valaddr_reg:x16; val_offset:1480; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1480, x17, x15, 1480, x18)

inst_1202:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1f3d6f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1f3d6f and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1f3d6f; op2val:0x3f1f3d6f; valaddr_reg:x16; val_offset:1488; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1488, x17, x15, 1488, x18)

inst_1203:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1f3d6f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1f3d6f and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1f3d6f; op2val:0x3f1f3d6f; valaddr_reg:x16; val_offset:1496; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1496, x17, x15, 1496, x18)

inst_1204:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1f3d6f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1f3d6f and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1f3d6f; op2val:0x3f1f3d6f; valaddr_reg:x16; val_offset:1504; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1504, x17, x15, 1504, x18)

inst_1205:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1f3d6f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1f3d6f and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1f3d6f; op2val:0x3f1f3d6f; valaddr_reg:x16; val_offset:1512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1512, x17, x15, 1512, x18)

inst_1206:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x178a47 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x178a47 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e978a47; op2val:0x3e978a47; valaddr_reg:x16; val_offset:1520; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1520, x17, x15, 1520, x18)

inst_1207:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x178a47 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x178a47 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e978a47; op2val:0x3e978a47; valaddr_reg:x16; val_offset:1528; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1528, x17, x15, 1528, x18)

inst_1208:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x178a47 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x178a47 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e978a47; op2val:0x3e978a47; valaddr_reg:x16; val_offset:1536; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1536, x17, x15, 1536, x18)

inst_1209:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x178a47 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x178a47 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e978a47; op2val:0x3e978a47; valaddr_reg:x16; val_offset:1544; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1544, x17, x15, 1544, x18)

inst_1210:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x178a47 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x178a47 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e978a47; op2val:0x3e978a47; valaddr_reg:x16; val_offset:1552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1552, x17, x15, 1552, x18)

inst_1211:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x076466 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x076466 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e076466; op2val:0x3e076466; valaddr_reg:x16; val_offset:1560; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1560, x17, x15, 1560, x18)

inst_1212:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x076466 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x076466 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e076466; op2val:0x3e076466; valaddr_reg:x16; val_offset:1568; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1568, x17, x15, 1568, x18)

inst_1213:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x076466 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x076466 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e076466; op2val:0x3e076466; valaddr_reg:x16; val_offset:1576; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1576, x17, x15, 1576, x18)

inst_1214:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x076466 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x076466 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e076466; op2val:0x3e076466; valaddr_reg:x16; val_offset:1584; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1584, x17, x15, 1584, x18)

inst_1215:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x076466 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x076466 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e076466; op2val:0x3e076466; valaddr_reg:x16; val_offset:1592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1592, x17, x15, 1592, x18)

inst_1216:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5c042f and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5c042f and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3edc042f; op2val:0x3edc042f; valaddr_reg:x16; val_offset:1600; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1600, x17, x15, 1600, x18)

inst_1217:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5c042f and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5c042f and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3edc042f; op2val:0x3edc042f; valaddr_reg:x16; val_offset:1608; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1608, x17, x15, 1608, x18)

inst_1218:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5c042f and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5c042f and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3edc042f; op2val:0x3edc042f; valaddr_reg:x16; val_offset:1616; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1616, x17, x15, 1616, x18)

inst_1219:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5c042f and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5c042f and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3edc042f; op2val:0x3edc042f; valaddr_reg:x16; val_offset:1624; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1624, x17, x15, 1624, x18)

inst_1220:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5c042f and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5c042f and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3edc042f; op2val:0x3edc042f; valaddr_reg:x16; val_offset:1632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1632, x17, x15, 1632, x18)

inst_1221:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x38eb81 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x38eb81 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e38eb81; op2val:0x3e38eb81; valaddr_reg:x16; val_offset:1640; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1640, x17, x15, 1640, x18)

inst_1222:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x38eb81 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x38eb81 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e38eb81; op2val:0x3e38eb81; valaddr_reg:x16; val_offset:1648; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1648, x17, x15, 1648, x18)

inst_1223:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x38eb81 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x38eb81 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e38eb81; op2val:0x3e38eb81; valaddr_reg:x16; val_offset:1656; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1656, x17, x15, 1656, x18)

inst_1224:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x38eb81 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x38eb81 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e38eb81; op2val:0x3e38eb81; valaddr_reg:x16; val_offset:1664; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1664, x17, x15, 1664, x18)

inst_1225:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x38eb81 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x38eb81 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e38eb81; op2val:0x3e38eb81; valaddr_reg:x16; val_offset:1672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1672, x17, x15, 1672, x18)

inst_1226:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7862c0 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x7862c0 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3df862c0; op2val:0x3df862c0; valaddr_reg:x16; val_offset:1680; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1680, x17, x15, 1680, x18)

inst_1227:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7862c0 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x7862c0 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3df862c0; op2val:0x3df862c0; valaddr_reg:x16; val_offset:1688; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1688, x17, x15, 1688, x18)

inst_1228:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7862c0 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x7862c0 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3df862c0; op2val:0x3df862c0; valaddr_reg:x16; val_offset:1696; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1696, x17, x15, 1696, x18)

inst_1229:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7862c0 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x7862c0 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3df862c0; op2val:0x3df862c0; valaddr_reg:x16; val_offset:1704; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1704, x17, x15, 1704, x18)

inst_1230:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7862c0 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x7862c0 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3df862c0; op2val:0x3df862c0; valaddr_reg:x16; val_offset:1712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1712, x17, x15, 1712, x18)

inst_1231:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3f6575 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3f6575 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3f6575; op2val:0x3f3f6575; valaddr_reg:x16; val_offset:1720; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1720, x17, x15, 1720, x18)

inst_1232:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3f6575 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3f6575 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3f6575; op2val:0x3f3f6575; valaddr_reg:x16; val_offset:1728; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1728, x17, x15, 1728, x18)

inst_1233:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3f6575 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3f6575 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3f6575; op2val:0x3f3f6575; valaddr_reg:x16; val_offset:1736; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1736, x17, x15, 1736, x18)

inst_1234:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3f6575 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3f6575 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3f6575; op2val:0x3f3f6575; valaddr_reg:x16; val_offset:1744; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1744, x17, x15, 1744, x18)

inst_1235:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3f6575 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3f6575 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3f6575; op2val:0x3f3f6575; valaddr_reg:x16; val_offset:1752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1752, x17, x15, 1752, x18)

inst_1236:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x032720 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x032720 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e832720; op2val:0x3e832720; valaddr_reg:x16; val_offset:1760; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1760, x17, x15, 1760, x18)

inst_1237:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x032720 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x032720 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e832720; op2val:0x3e832720; valaddr_reg:x16; val_offset:1768; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1768, x17, x15, 1768, x18)

inst_1238:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x032720 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x032720 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e832720; op2val:0x3e832720; valaddr_reg:x16; val_offset:1776; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1776, x17, x15, 1776, x18)

inst_1239:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x032720 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x032720 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e832720; op2val:0x3e832720; valaddr_reg:x16; val_offset:1784; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1784, x17, x15, 1784, x18)

inst_1240:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x032720 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x032720 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e832720; op2val:0x3e832720; valaddr_reg:x16; val_offset:1792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1792, x17, x15, 1792, x18)

inst_1241:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x308c02 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x308c02 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f308c02; op2val:0x3f308c02; valaddr_reg:x16; val_offset:1800; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1800, x17, x15, 1800, x18)

inst_1242:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x308c02 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x308c02 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f308c02; op2val:0x3f308c02; valaddr_reg:x16; val_offset:1808; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1808, x17, x15, 1808, x18)

inst_1243:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x308c02 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x308c02 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f308c02; op2val:0x3f308c02; valaddr_reg:x16; val_offset:1816; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1816, x17, x15, 1816, x18)

inst_1244:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x308c02 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x308c02 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f308c02; op2val:0x3f308c02; valaddr_reg:x16; val_offset:1824; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1824, x17, x15, 1824, x18)

inst_1245:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x308c02 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x308c02 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f308c02; op2val:0x3f308c02; valaddr_reg:x16; val_offset:1832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1832, x17, x15, 1832, x18)

inst_1246:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3190a5 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3190a5 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3190a5; op2val:0x3f3190a5; valaddr_reg:x16; val_offset:1840; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1840, x17, x15, 1840, x18)

inst_1247:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3190a5 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3190a5 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3190a5; op2val:0x3f3190a5; valaddr_reg:x16; val_offset:1848; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1848, x17, x15, 1848, x18)

inst_1248:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3190a5 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3190a5 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3190a5; op2val:0x3f3190a5; valaddr_reg:x16; val_offset:1856; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1856, x17, x15, 1856, x18)

inst_1249:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3190a5 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3190a5 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3190a5; op2val:0x3f3190a5; valaddr_reg:x16; val_offset:1864; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1864, x17, x15, 1864, x18)

inst_1250:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3190a5 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3190a5 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3190a5; op2val:0x3f3190a5; valaddr_reg:x16; val_offset:1872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1872, x17, x15, 1872, x18)

inst_1251:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x0377d1 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x0377d1 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d0377d1; op2val:0x3d0377d1; valaddr_reg:x16; val_offset:1880; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1880, x17, x15, 1880, x18)

inst_1252:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x0377d1 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x0377d1 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d0377d1; op2val:0x3d0377d1; valaddr_reg:x16; val_offset:1888; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1888, x17, x15, 1888, x18)

inst_1253:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x0377d1 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x0377d1 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d0377d1; op2val:0x3d0377d1; valaddr_reg:x16; val_offset:1896; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1896, x17, x15, 1896, x18)

inst_1254:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x0377d1 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x0377d1 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d0377d1; op2val:0x3d0377d1; valaddr_reg:x16; val_offset:1904; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1904, x17, x15, 1904, x18)

inst_1255:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x0377d1 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x0377d1 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d0377d1; op2val:0x3d0377d1; valaddr_reg:x16; val_offset:1912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1912, x17, x15, 1912, x18)

inst_1256:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x70f375 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x70f375 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f70f375; op2val:0x3f70f375; valaddr_reg:x16; val_offset:1920; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1920, x17, x15, 1920, x18)

inst_1257:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x70f375 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x70f375 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f70f375; op2val:0x3f70f375; valaddr_reg:x16; val_offset:1928; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1928, x17, x15, 1928, x18)

inst_1258:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x70f375 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x70f375 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f70f375; op2val:0x3f70f375; valaddr_reg:x16; val_offset:1936; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1936, x17, x15, 1936, x18)

inst_1259:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x70f375 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x70f375 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f70f375; op2val:0x3f70f375; valaddr_reg:x16; val_offset:1944; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1944, x17, x15, 1944, x18)

inst_1260:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x70f375 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x70f375 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f70f375; op2val:0x3f70f375; valaddr_reg:x16; val_offset:1952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1952, x17, x15, 1952, x18)

inst_1261:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2dc2d5 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2dc2d5 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2dc2d5; op2val:0x3f2dc2d5; valaddr_reg:x16; val_offset:1960; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1960, x17, x15, 1960, x18)

inst_1262:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2dc2d5 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2dc2d5 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2dc2d5; op2val:0x3f2dc2d5; valaddr_reg:x16; val_offset:1968; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1968, x17, x15, 1968, x18)

inst_1263:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2dc2d5 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2dc2d5 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2dc2d5; op2val:0x3f2dc2d5; valaddr_reg:x16; val_offset:1976; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1976, x17, x15, 1976, x18)

inst_1264:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2dc2d5 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2dc2d5 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2dc2d5; op2val:0x3f2dc2d5; valaddr_reg:x16; val_offset:1984; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1984, x17, x15, 1984, x18)

inst_1265:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2dc2d5 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2dc2d5 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2dc2d5; op2val:0x3f2dc2d5; valaddr_reg:x16; val_offset:1992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1992, x17, x15, 1992, x18)

inst_1266:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1ae7f6 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1ae7f6 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1ae7f6; op2val:0x3f1ae7f6; valaddr_reg:x16; val_offset:2000; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 2000, x17, x15, 2000, x18)

inst_1267:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1ae7f6 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1ae7f6 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1ae7f6; op2val:0x3f1ae7f6; valaddr_reg:x16; val_offset:2008; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 2008, x17, x15, 2008, x18)

inst_1268:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1ae7f6 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1ae7f6 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1ae7f6; op2val:0x3f1ae7f6; valaddr_reg:x16; val_offset:2016; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 2016, x17, x15, 2016, x18)

inst_1269:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1ae7f6 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1ae7f6 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1ae7f6; op2val:0x3f1ae7f6; valaddr_reg:x16; val_offset:2024; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_6)

inst_1270:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1ae7f6 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1ae7f6 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1ae7f6; op2val:0x3f1ae7f6; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1271:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x46dca4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x46dca4 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f46dca4; op2val:0x3f46dca4; valaddr_reg:x16; val_offset:8; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 8, x17, x15, 8, x18)

inst_1272:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x46dca4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x46dca4 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f46dca4; op2val:0x3f46dca4; valaddr_reg:x16; val_offset:16; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 16, x17, x15, 16, x18)

inst_1273:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x46dca4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x46dca4 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f46dca4; op2val:0x3f46dca4; valaddr_reg:x16; val_offset:24; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 24, x17, x15, 24, x18)

inst_1274:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x46dca4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x46dca4 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f46dca4; op2val:0x3f46dca4; valaddr_reg:x16; val_offset:32; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 32, x17, x15, 32, x18)

inst_1275:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x46dca4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x46dca4 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f46dca4; op2val:0x3f46dca4; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 40, x17, x15, 40, x18)

inst_1276:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4f0aab and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4f0aab and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4f0aab; op2val:0x3e4f0aab; valaddr_reg:x16; val_offset:48; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 48, x17, x15, 48, x18)

inst_1277:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4f0aab and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4f0aab and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4f0aab; op2val:0x3e4f0aab; valaddr_reg:x16; val_offset:56; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 56, x17, x15, 56, x18)

inst_1278:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4f0aab and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4f0aab and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4f0aab; op2val:0x3e4f0aab; valaddr_reg:x16; val_offset:64; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 64, x17, x15, 64, x18)

inst_1279:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4f0aab and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4f0aab and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4f0aab; op2val:0x3e4f0aab; valaddr_reg:x16; val_offset:72; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 72, x17, x15, 72, x18)

inst_1280:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4f0aab and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4f0aab and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4f0aab; op2val:0x3e4f0aab; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_1281:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4786c6 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4786c6 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4786c6; op2val:0x3f4786c6; valaddr_reg:x16; val_offset:88; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 88, x17, x15, 88, x18)

inst_1282:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4786c6 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4786c6 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4786c6; op2val:0x3f4786c6; valaddr_reg:x16; val_offset:96; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 96, x17, x15, 96, x18)

inst_1283:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4786c6 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4786c6 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4786c6; op2val:0x3f4786c6; valaddr_reg:x16; val_offset:104; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 104, x17, x15, 104, x18)

inst_1284:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4786c6 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4786c6 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4786c6; op2val:0x3f4786c6; valaddr_reg:x16; val_offset:112; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 112, x17, x15, 112, x18)

inst_1285:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4786c6 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4786c6 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4786c6; op2val:0x3f4786c6; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 120, x17, x15, 120, x18)

inst_1286:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x24c624 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x24c624 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea4c624; op2val:0x3ea4c624; valaddr_reg:x16; val_offset:128; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 128, x17, x15, 128, x18)

inst_1287:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x24c624 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x24c624 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea4c624; op2val:0x3ea4c624; valaddr_reg:x16; val_offset:136; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 136, x17, x15, 136, x18)

inst_1288:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x24c624 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x24c624 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea4c624; op2val:0x3ea4c624; valaddr_reg:x16; val_offset:144; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 144, x17, x15, 144, x18)

inst_1289:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x24c624 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x24c624 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea4c624; op2val:0x3ea4c624; valaddr_reg:x16; val_offset:152; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 152, x17, x15, 152, x18)

inst_1290:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x24c624 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x24c624 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea4c624; op2val:0x3ea4c624; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_1291:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x56fb53 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x56fb53 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f56fb53; op2val:0x3f56fb53; valaddr_reg:x16; val_offset:168; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 168, x17, x15, 168, x18)

inst_1292:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x56fb53 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x56fb53 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f56fb53; op2val:0x3f56fb53; valaddr_reg:x16; val_offset:176; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 176, x17, x15, 176, x18)

inst_1293:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x56fb53 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x56fb53 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f56fb53; op2val:0x3f56fb53; valaddr_reg:x16; val_offset:184; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 184, x17, x15, 184, x18)

inst_1294:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x56fb53 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x56fb53 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f56fb53; op2val:0x3f56fb53; valaddr_reg:x16; val_offset:192; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 192, x17, x15, 192, x18)

inst_1295:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x56fb53 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x56fb53 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f56fb53; op2val:0x3f56fb53; valaddr_reg:x16; val_offset:200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 200, x17, x15, 200, x18)

inst_1296:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5a817b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5a817b and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5a817b; op2val:0x3f5a817b; valaddr_reg:x16; val_offset:208; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 208, x17, x15, 208, x18)

inst_1297:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5a817b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5a817b and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5a817b; op2val:0x3f5a817b; valaddr_reg:x16; val_offset:216; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 216, x17, x15, 216, x18)

inst_1298:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5a817b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5a817b and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5a817b; op2val:0x3f5a817b; valaddr_reg:x16; val_offset:224; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 224, x17, x15, 224, x18)

inst_1299:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5a817b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5a817b and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5a817b; op2val:0x3f5a817b; valaddr_reg:x16; val_offset:232; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 232, x17, x15, 232, x18)

inst_1300:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5a817b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5a817b and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5a817b; op2val:0x3f5a817b; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_1301:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7aabaa and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7aabaa and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7aabaa; op2val:0x3f7aabaa; valaddr_reg:x16; val_offset:248; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 248, x17, x15, 248, x18)

inst_1302:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7aabaa and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7aabaa and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7aabaa; op2val:0x3f7aabaa; valaddr_reg:x16; val_offset:256; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 256, x17, x15, 256, x18)

inst_1303:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7aabaa and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7aabaa and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7aabaa; op2val:0x3f7aabaa; valaddr_reg:x16; val_offset:264; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 264, x17, x15, 264, x18)

inst_1304:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7aabaa and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7aabaa and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7aabaa; op2val:0x3f7aabaa; valaddr_reg:x16; val_offset:272; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 272, x17, x15, 272, x18)

inst_1305:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7aabaa and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7aabaa and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7aabaa; op2val:0x3f7aabaa; valaddr_reg:x16; val_offset:280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 280, x17, x15, 280, x18)

inst_1306:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x49e86b and fs2 == 0 and fe2 == 0x7d and fm2 == 0x49e86b and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec9e86b; op2val:0x3ec9e86b; valaddr_reg:x16; val_offset:288; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 288, x17, x15, 288, x18)

inst_1307:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x49e86b and fs2 == 0 and fe2 == 0x7d and fm2 == 0x49e86b and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec9e86b; op2val:0x3ec9e86b; valaddr_reg:x16; val_offset:296; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 296, x17, x15, 296, x18)

inst_1308:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x49e86b and fs2 == 0 and fe2 == 0x7d and fm2 == 0x49e86b and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec9e86b; op2val:0x3ec9e86b; valaddr_reg:x16; val_offset:304; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 304, x17, x15, 304, x18)

inst_1309:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x49e86b and fs2 == 0 and fe2 == 0x7d and fm2 == 0x49e86b and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec9e86b; op2val:0x3ec9e86b; valaddr_reg:x16; val_offset:312; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 312, x17, x15, 312, x18)

inst_1310:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x49e86b and fs2 == 0 and fe2 == 0x7d and fm2 == 0x49e86b and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec9e86b; op2val:0x3ec9e86b; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_1311:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7ad214 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7ad214 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efad214; op2val:0x3efad214; valaddr_reg:x16; val_offset:328; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 328, x17, x15, 328, x18)

inst_1312:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7ad214 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7ad214 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efad214; op2val:0x3efad214; valaddr_reg:x16; val_offset:336; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 336, x17, x15, 336, x18)

inst_1313:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7ad214 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7ad214 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efad214; op2val:0x3efad214; valaddr_reg:x16; val_offset:344; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 344, x17, x15, 344, x18)

inst_1314:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7ad214 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7ad214 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efad214; op2val:0x3efad214; valaddr_reg:x16; val_offset:352; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 352, x17, x15, 352, x18)

inst_1315:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7ad214 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7ad214 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efad214; op2val:0x3efad214; valaddr_reg:x16; val_offset:360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 360, x17, x15, 360, x18)

inst_1316:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x642831 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x642831 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f642831; op2val:0x3f642831; valaddr_reg:x16; val_offset:368; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 368, x17, x15, 368, x18)

inst_1317:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x642831 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x642831 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f642831; op2val:0x3f642831; valaddr_reg:x16; val_offset:376; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 376, x17, x15, 376, x18)

inst_1318:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x642831 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x642831 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f642831; op2val:0x3f642831; valaddr_reg:x16; val_offset:384; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 384, x17, x15, 384, x18)

inst_1319:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x642831 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x642831 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f642831; op2val:0x3f642831; valaddr_reg:x16; val_offset:392; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 392, x17, x15, 392, x18)

inst_1320:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x642831 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x642831 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f642831; op2val:0x3f642831; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_1321:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x143eac and fs2 == 0 and fe2 == 0x7e and fm2 == 0x143eac and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f143eac; op2val:0x3f143eac; valaddr_reg:x16; val_offset:408; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 408, x17, x15, 408, x18)

inst_1322:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x143eac and fs2 == 0 and fe2 == 0x7e and fm2 == 0x143eac and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f143eac; op2val:0x3f143eac; valaddr_reg:x16; val_offset:416; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 416, x17, x15, 416, x18)

inst_1323:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x143eac and fs2 == 0 and fe2 == 0x7e and fm2 == 0x143eac and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f143eac; op2val:0x3f143eac; valaddr_reg:x16; val_offset:424; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 424, x17, x15, 424, x18)

inst_1324:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x143eac and fs2 == 0 and fe2 == 0x7e and fm2 == 0x143eac and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f143eac; op2val:0x3f143eac; valaddr_reg:x16; val_offset:432; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 432, x17, x15, 432, x18)

inst_1325:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x143eac and fs2 == 0 and fe2 == 0x7e and fm2 == 0x143eac and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f143eac; op2val:0x3f143eac; valaddr_reg:x16; val_offset:440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 440, x17, x15, 440, x18)

inst_1326:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x79f315 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x79f315 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f79f315; op2val:0x3f79f315; valaddr_reg:x16; val_offset:448; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 448, x17, x15, 448, x18)

inst_1327:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x79f315 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x79f315 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f79f315; op2val:0x3f79f315; valaddr_reg:x16; val_offset:456; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 456, x17, x15, 456, x18)

inst_1328:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x79f315 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x79f315 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f79f315; op2val:0x3f79f315; valaddr_reg:x16; val_offset:464; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 464, x17, x15, 464, x18)

inst_1329:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x79f315 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x79f315 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f79f315; op2val:0x3f79f315; valaddr_reg:x16; val_offset:472; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 472, x17, x15, 472, x18)

inst_1330:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x79f315 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x79f315 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f79f315; op2val:0x3f79f315; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_1331:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2d914a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2d914a and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2d914a; op2val:0x3f2d914a; valaddr_reg:x16; val_offset:488; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 488, x17, x15, 488, x18)

inst_1332:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2d914a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2d914a and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2d914a; op2val:0x3f2d914a; valaddr_reg:x16; val_offset:496; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 496, x17, x15, 496, x18)

inst_1333:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2d914a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2d914a and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2d914a; op2val:0x3f2d914a; valaddr_reg:x16; val_offset:504; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 504, x17, x15, 504, x18)

inst_1334:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2d914a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2d914a and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2d914a; op2val:0x3f2d914a; valaddr_reg:x16; val_offset:512; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 512, x17, x15, 512, x18)

inst_1335:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2d914a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2d914a and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2d914a; op2val:0x3f2d914a; valaddr_reg:x16; val_offset:520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 520, x17, x15, 520, x18)

inst_1336:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x13aa7c and fs2 == 0 and fe2 == 0x7d and fm2 == 0x13aa7c and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e93aa7c; op2val:0x3e93aa7c; valaddr_reg:x16; val_offset:528; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 528, x17, x15, 528, x18)

inst_1337:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x13aa7c and fs2 == 0 and fe2 == 0x7d and fm2 == 0x13aa7c and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e93aa7c; op2val:0x3e93aa7c; valaddr_reg:x16; val_offset:536; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 536, x17, x15, 536, x18)

inst_1338:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x13aa7c and fs2 == 0 and fe2 == 0x7d and fm2 == 0x13aa7c and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e93aa7c; op2val:0x3e93aa7c; valaddr_reg:x16; val_offset:544; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 544, x17, x15, 544, x18)

inst_1339:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x13aa7c and fs2 == 0 and fe2 == 0x7d and fm2 == 0x13aa7c and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e93aa7c; op2val:0x3e93aa7c; valaddr_reg:x16; val_offset:552; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 552, x17, x15, 552, x18)

inst_1340:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x13aa7c and fs2 == 0 and fe2 == 0x7d and fm2 == 0x13aa7c and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e93aa7c; op2val:0x3e93aa7c; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_1341:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x54f473 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x54f473 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f54f473; op2val:0x3f54f473; valaddr_reg:x16; val_offset:568; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 568, x17, x15, 568, x18)

inst_1342:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x54f473 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x54f473 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f54f473; op2val:0x3f54f473; valaddr_reg:x16; val_offset:576; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 576, x17, x15, 576, x18)

inst_1343:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x54f473 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x54f473 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f54f473; op2val:0x3f54f473; valaddr_reg:x16; val_offset:584; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 584, x17, x15, 584, x18)

inst_1344:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x54f473 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x54f473 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f54f473; op2val:0x3f54f473; valaddr_reg:x16; val_offset:592; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 592, x17, x15, 592, x18)

inst_1345:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x54f473 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x54f473 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f54f473; op2val:0x3f54f473; valaddr_reg:x16; val_offset:600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 600, x17, x15, 600, x18)

inst_1346:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5722c8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5722c8 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5722c8; op2val:0x3f5722c8; valaddr_reg:x16; val_offset:608; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 608, x17, x15, 608, x18)

inst_1347:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5722c8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5722c8 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5722c8; op2val:0x3f5722c8; valaddr_reg:x16; val_offset:616; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 616, x17, x15, 616, x18)

inst_1348:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5722c8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5722c8 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5722c8; op2val:0x3f5722c8; valaddr_reg:x16; val_offset:624; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 624, x17, x15, 624, x18)

inst_1349:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5722c8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5722c8 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5722c8; op2val:0x3f5722c8; valaddr_reg:x16; val_offset:632; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 632, x17, x15, 632, x18)

inst_1350:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5722c8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5722c8 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5722c8; op2val:0x3f5722c8; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_1351:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x27d3e7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x27d3e7 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f27d3e7; op2val:0x3f27d3e7; valaddr_reg:x16; val_offset:648; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 648, x17, x15, 648, x18)

inst_1352:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x27d3e7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x27d3e7 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f27d3e7; op2val:0x3f27d3e7; valaddr_reg:x16; val_offset:656; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 656, x17, x15, 656, x18)

inst_1353:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x27d3e7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x27d3e7 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f27d3e7; op2val:0x3f27d3e7; valaddr_reg:x16; val_offset:664; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 664, x17, x15, 664, x18)

inst_1354:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x27d3e7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x27d3e7 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f27d3e7; op2val:0x3f27d3e7; valaddr_reg:x16; val_offset:672; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 672, x17, x15, 672, x18)

inst_1355:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x27d3e7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x27d3e7 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f27d3e7; op2val:0x3f27d3e7; valaddr_reg:x16; val_offset:680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 680, x17, x15, 680, x18)

inst_1356:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x63f88d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x63f88d and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f63f88d; op2val:0x3f63f88d; valaddr_reg:x16; val_offset:688; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 688, x17, x15, 688, x18)

inst_1357:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x63f88d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x63f88d and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f63f88d; op2val:0x3f63f88d; valaddr_reg:x16; val_offset:696; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 696, x17, x15, 696, x18)

inst_1358:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x63f88d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x63f88d and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f63f88d; op2val:0x3f63f88d; valaddr_reg:x16; val_offset:704; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 704, x17, x15, 704, x18)

inst_1359:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x63f88d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x63f88d and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f63f88d; op2val:0x3f63f88d; valaddr_reg:x16; val_offset:712; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 712, x17, x15, 712, x18)

inst_1360:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x63f88d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x63f88d and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f63f88d; op2val:0x3f63f88d; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_1361:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7a4775 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x7a4775 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e7a4775; op2val:0x3e7a4775; valaddr_reg:x16; val_offset:728; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 728, x17, x15, 728, x18)

inst_1362:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7a4775 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x7a4775 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e7a4775; op2val:0x3e7a4775; valaddr_reg:x16; val_offset:736; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 736, x17, x15, 736, x18)

inst_1363:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7a4775 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x7a4775 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e7a4775; op2val:0x3e7a4775; valaddr_reg:x16; val_offset:744; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 744, x17, x15, 744, x18)

inst_1364:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7a4775 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x7a4775 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e7a4775; op2val:0x3e7a4775; valaddr_reg:x16; val_offset:752; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 752, x17, x15, 752, x18)

inst_1365:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7a4775 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x7a4775 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e7a4775; op2val:0x3e7a4775; valaddr_reg:x16; val_offset:760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 760, x17, x15, 760, x18)

inst_1366:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7bba29 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7bba29 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7bba29; op2val:0x3f7bba29; valaddr_reg:x16; val_offset:768; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 768, x17, x15, 768, x18)

inst_1367:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7bba29 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7bba29 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7bba29; op2val:0x3f7bba29; valaddr_reg:x16; val_offset:776; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 776, x17, x15, 776, x18)

inst_1368:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7bba29 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7bba29 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7bba29; op2val:0x3f7bba29; valaddr_reg:x16; val_offset:784; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 784, x17, x15, 784, x18)

inst_1369:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7bba29 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7bba29 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7bba29; op2val:0x3f7bba29; valaddr_reg:x16; val_offset:792; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 792, x17, x15, 792, x18)

inst_1370:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7bba29 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7bba29 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7bba29; op2val:0x3f7bba29; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_1371:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x275da9 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x275da9 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea75da9; op2val:0x3ea75da9; valaddr_reg:x16; val_offset:808; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 808, x17, x15, 808, x18)

inst_1372:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x275da9 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x275da9 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea75da9; op2val:0x3ea75da9; valaddr_reg:x16; val_offset:816; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 816, x17, x15, 816, x18)

inst_1373:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x275da9 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x275da9 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea75da9; op2val:0x3ea75da9; valaddr_reg:x16; val_offset:824; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 824, x17, x15, 824, x18)

inst_1374:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x275da9 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x275da9 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea75da9; op2val:0x3ea75da9; valaddr_reg:x16; val_offset:832; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 832, x17, x15, 832, x18)

inst_1375:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x275da9 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x275da9 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea75da9; op2val:0x3ea75da9; valaddr_reg:x16; val_offset:840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 840, x17, x15, 840, x18)

inst_1376:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3ea50c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3ea50c and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3ea50c; op2val:0x3f3ea50c; valaddr_reg:x16; val_offset:848; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 848, x17, x15, 848, x18)

inst_1377:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3ea50c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3ea50c and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3ea50c; op2val:0x3f3ea50c; valaddr_reg:x16; val_offset:856; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 856, x17, x15, 856, x18)

inst_1378:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3ea50c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3ea50c and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3ea50c; op2val:0x3f3ea50c; valaddr_reg:x16; val_offset:864; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 864, x17, x15, 864, x18)

inst_1379:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3ea50c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3ea50c and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3ea50c; op2val:0x3f3ea50c; valaddr_reg:x16; val_offset:872; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 872, x17, x15, 872, x18)

inst_1380:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3ea50c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3ea50c and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3ea50c; op2val:0x3f3ea50c; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 880, x17, x15, 880, x18)

inst_1381:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4fc5a8 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4fc5a8 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4fc5a8; op2val:0x3e4fc5a8; valaddr_reg:x16; val_offset:888; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 888, x17, x15, 888, x18)

inst_1382:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4fc5a8 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4fc5a8 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4fc5a8; op2val:0x3e4fc5a8; valaddr_reg:x16; val_offset:896; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 896, x17, x15, 896, x18)

inst_1383:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4fc5a8 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4fc5a8 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4fc5a8; op2val:0x3e4fc5a8; valaddr_reg:x16; val_offset:904; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 904, x17, x15, 904, x18)

inst_1384:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4fc5a8 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4fc5a8 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4fc5a8; op2val:0x3e4fc5a8; valaddr_reg:x16; val_offset:912; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 912, x17, x15, 912, x18)

inst_1385:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4fc5a8 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4fc5a8 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4fc5a8; op2val:0x3e4fc5a8; valaddr_reg:x16; val_offset:920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 920, x17, x15, 920, x18)

inst_1386:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x0e53b1 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x0e53b1 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e0e53b1; op2val:0x3e0e53b1; valaddr_reg:x16; val_offset:928; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 928, x17, x15, 928, x18)

inst_1387:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x0e53b1 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x0e53b1 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e0e53b1; op2val:0x3e0e53b1; valaddr_reg:x16; val_offset:936; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 936, x17, x15, 936, x18)

inst_1388:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x0e53b1 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x0e53b1 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e0e53b1; op2val:0x3e0e53b1; valaddr_reg:x16; val_offset:944; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 944, x17, x15, 944, x18)

inst_1389:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x0e53b1 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x0e53b1 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e0e53b1; op2val:0x3e0e53b1; valaddr_reg:x16; val_offset:952; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 952, x17, x15, 952, x18)

inst_1390:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x0e53b1 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x0e53b1 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e0e53b1; op2val:0x3e0e53b1; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 960, x17, x15, 960, x18)

inst_1391:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x52a248 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x52a248 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f52a248; op2val:0x3f52a248; valaddr_reg:x16; val_offset:968; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 968, x17, x15, 968, x18)

inst_1392:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x52a248 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x52a248 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f52a248; op2val:0x3f52a248; valaddr_reg:x16; val_offset:976; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 976, x17, x15, 976, x18)

inst_1393:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x52a248 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x52a248 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f52a248; op2val:0x3f52a248; valaddr_reg:x16; val_offset:984; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 984, x17, x15, 984, x18)

inst_1394:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x52a248 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x52a248 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f52a248; op2val:0x3f52a248; valaddr_reg:x16; val_offset:992; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 992, x17, x15, 992, x18)

inst_1395:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x52a248 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x52a248 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f52a248; op2val:0x3f52a248; valaddr_reg:x16; val_offset:1000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1000, x17, x15, 1000, x18)

inst_1396:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x78d6a1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x78d6a1 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f78d6a1; op2val:0x3f78d6a1; valaddr_reg:x16; val_offset:1008; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1008, x17, x15, 1008, x18)

inst_1397:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x78d6a1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x78d6a1 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f78d6a1; op2val:0x3f78d6a1; valaddr_reg:x16; val_offset:1016; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1016, x17, x15, 1016, x18)

inst_1398:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x78d6a1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x78d6a1 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f78d6a1; op2val:0x3f78d6a1; valaddr_reg:x16; val_offset:1024; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1024, x17, x15, 1024, x18)

inst_1399:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x78d6a1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x78d6a1 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f78d6a1; op2val:0x3f78d6a1; valaddr_reg:x16; val_offset:1032; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1032, x17, x15, 1032, x18)

inst_1400:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x78d6a1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x78d6a1 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f78d6a1; op2val:0x3f78d6a1; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1040, x17, x15, 1040, x18)

inst_1401:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x466ca1 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x466ca1 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec66ca1; op2val:0x3ec66ca1; valaddr_reg:x16; val_offset:1048; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1048, x17, x15, 1048, x18)

inst_1402:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x466ca1 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x466ca1 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec66ca1; op2val:0x3ec66ca1; valaddr_reg:x16; val_offset:1056; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1056, x17, x15, 1056, x18)

inst_1403:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x466ca1 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x466ca1 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec66ca1; op2val:0x3ec66ca1; valaddr_reg:x16; val_offset:1064; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1064, x17, x15, 1064, x18)

inst_1404:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x466ca1 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x466ca1 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec66ca1; op2val:0x3ec66ca1; valaddr_reg:x16; val_offset:1072; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1072, x17, x15, 1072, x18)

inst_1405:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x466ca1 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x466ca1 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec66ca1; op2val:0x3ec66ca1; valaddr_reg:x16; val_offset:1080; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1080, x17, x15, 1080, x18)

inst_1406:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6c4c81 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6c4c81 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eec4c81; op2val:0x3eec4c81; valaddr_reg:x16; val_offset:1088; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1088, x17, x15, 1088, x18)

inst_1407:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6c4c81 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6c4c81 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eec4c81; op2val:0x3eec4c81; valaddr_reg:x16; val_offset:1096; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1096, x17, x15, 1096, x18)

inst_1408:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6c4c81 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6c4c81 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eec4c81; op2val:0x3eec4c81; valaddr_reg:x16; val_offset:1104; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1104, x17, x15, 1104, x18)

inst_1409:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6c4c81 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6c4c81 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eec4c81; op2val:0x3eec4c81; valaddr_reg:x16; val_offset:1112; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1112, x17, x15, 1112, x18)

inst_1410:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6c4c81 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6c4c81 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eec4c81; op2val:0x3eec4c81; valaddr_reg:x16; val_offset:1120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1120, x17, x15, 1120, x18)

inst_1411:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x24a969 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x24a969 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f24a969; op2val:0x3f24a969; valaddr_reg:x16; val_offset:1128; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1128, x17, x15, 1128, x18)

inst_1412:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x24a969 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x24a969 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f24a969; op2val:0x3f24a969; valaddr_reg:x16; val_offset:1136; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1136, x17, x15, 1136, x18)

inst_1413:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x24a969 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x24a969 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f24a969; op2val:0x3f24a969; valaddr_reg:x16; val_offset:1144; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1144, x17, x15, 1144, x18)

inst_1414:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x24a969 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x24a969 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f24a969; op2val:0x3f24a969; valaddr_reg:x16; val_offset:1152; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1152, x17, x15, 1152, x18)

inst_1415:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x24a969 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x24a969 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f24a969; op2val:0x3f24a969; valaddr_reg:x16; val_offset:1160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1160, x17, x15, 1160, x18)

inst_1416:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7d9547 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7d9547 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efd9547; op2val:0x3efd9547; valaddr_reg:x16; val_offset:1168; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1168, x17, x15, 1168, x18)

inst_1417:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7d9547 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7d9547 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efd9547; op2val:0x3efd9547; valaddr_reg:x16; val_offset:1176; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1176, x17, x15, 1176, x18)

inst_1418:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7d9547 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7d9547 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efd9547; op2val:0x3efd9547; valaddr_reg:x16; val_offset:1184; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1184, x17, x15, 1184, x18)

inst_1419:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7d9547 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7d9547 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efd9547; op2val:0x3efd9547; valaddr_reg:x16; val_offset:1192; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1192, x17, x15, 1192, x18)

inst_1420:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7d9547 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7d9547 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efd9547; op2val:0x3efd9547; valaddr_reg:x16; val_offset:1200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1200, x17, x15, 1200, x18)

inst_1421:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5c290c and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5c290c and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3edc290c; op2val:0x3edc290c; valaddr_reg:x16; val_offset:1208; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1208, x17, x15, 1208, x18)

inst_1422:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5c290c and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5c290c and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3edc290c; op2val:0x3edc290c; valaddr_reg:x16; val_offset:1216; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1216, x17, x15, 1216, x18)

inst_1423:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5c290c and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5c290c and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3edc290c; op2val:0x3edc290c; valaddr_reg:x16; val_offset:1224; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1224, x17, x15, 1224, x18)

inst_1424:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5c290c and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5c290c and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3edc290c; op2val:0x3edc290c; valaddr_reg:x16; val_offset:1232; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1232, x17, x15, 1232, x18)

inst_1425:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5c290c and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5c290c and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3edc290c; op2val:0x3edc290c; valaddr_reg:x16; val_offset:1240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1240, x17, x15, 1240, x18)

inst_1426:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x71a1e7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x71a1e7 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f71a1e7; op2val:0x3f71a1e7; valaddr_reg:x16; val_offset:1248; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1248, x17, x15, 1248, x18)

inst_1427:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x71a1e7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x71a1e7 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f71a1e7; op2val:0x3f71a1e7; valaddr_reg:x16; val_offset:1256; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1256, x17, x15, 1256, x18)

inst_1428:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x71a1e7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x71a1e7 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f71a1e7; op2val:0x3f71a1e7; valaddr_reg:x16; val_offset:1264; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1264, x17, x15, 1264, x18)

inst_1429:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x71a1e7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x71a1e7 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f71a1e7; op2val:0x3f71a1e7; valaddr_reg:x16; val_offset:1272; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1272, x17, x15, 1272, x18)

inst_1430:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x71a1e7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x71a1e7 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f71a1e7; op2val:0x3f71a1e7; valaddr_reg:x16; val_offset:1280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1280, x17, x15, 1280, x18)

inst_1431:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6095b3 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6095b3 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ee095b3; op2val:0x3ee095b3; valaddr_reg:x16; val_offset:1288; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1288, x17, x15, 1288, x18)

inst_1432:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6095b3 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6095b3 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ee095b3; op2val:0x3ee095b3; valaddr_reg:x16; val_offset:1296; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1296, x17, x15, 1296, x18)

inst_1433:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6095b3 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6095b3 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ee095b3; op2val:0x3ee095b3; valaddr_reg:x16; val_offset:1304; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1304, x17, x15, 1304, x18)

inst_1434:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6095b3 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6095b3 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ee095b3; op2val:0x3ee095b3; valaddr_reg:x16; val_offset:1312; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1312, x17, x15, 1312, x18)

inst_1435:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6095b3 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6095b3 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ee095b3; op2val:0x3ee095b3; valaddr_reg:x16; val_offset:1320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1320, x17, x15, 1320, x18)

inst_1436:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4370d4 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4370d4 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4370d4; op2val:0x3e4370d4; valaddr_reg:x16; val_offset:1328; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1328, x17, x15, 1328, x18)

inst_1437:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4370d4 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4370d4 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4370d4; op2val:0x3e4370d4; valaddr_reg:x16; val_offset:1336; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1336, x17, x15, 1336, x18)

inst_1438:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4370d4 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4370d4 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4370d4; op2val:0x3e4370d4; valaddr_reg:x16; val_offset:1344; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1344, x17, x15, 1344, x18)

inst_1439:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4370d4 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4370d4 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4370d4; op2val:0x3e4370d4; valaddr_reg:x16; val_offset:1352; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1352, x17, x15, 1352, x18)

inst_1440:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4370d4 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4370d4 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4370d4; op2val:0x3e4370d4; valaddr_reg:x16; val_offset:1360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1360, x17, x15, 1360, x18)

inst_1441:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x691aae and fs2 == 0 and fe2 == 0x7b and fm2 == 0x691aae and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3de91aae; op2val:0x3de91aae; valaddr_reg:x16; val_offset:1368; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1368, x17, x15, 1368, x18)

inst_1442:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x691aae and fs2 == 0 and fe2 == 0x7b and fm2 == 0x691aae and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3de91aae; op2val:0x3de91aae; valaddr_reg:x16; val_offset:1376; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1376, x17, x15, 1376, x18)

inst_1443:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x691aae and fs2 == 0 and fe2 == 0x7b and fm2 == 0x691aae and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3de91aae; op2val:0x3de91aae; valaddr_reg:x16; val_offset:1384; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1384, x17, x15, 1384, x18)

inst_1444:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x691aae and fs2 == 0 and fe2 == 0x7b and fm2 == 0x691aae and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3de91aae; op2val:0x3de91aae; valaddr_reg:x16; val_offset:1392; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1392, x17, x15, 1392, x18)

inst_1445:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x691aae and fs2 == 0 and fe2 == 0x7b and fm2 == 0x691aae and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3de91aae; op2val:0x3de91aae; valaddr_reg:x16; val_offset:1400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1400, x17, x15, 1400, x18)

inst_1446:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5d897b and fs2 == 0 and fe2 == 0x7c and fm2 == 0x5d897b and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e5d897b; op2val:0x3e5d897b; valaddr_reg:x16; val_offset:1408; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1408, x17, x15, 1408, x18)

inst_1447:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5d897b and fs2 == 0 and fe2 == 0x7c and fm2 == 0x5d897b and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e5d897b; op2val:0x3e5d897b; valaddr_reg:x16; val_offset:1416; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1416, x17, x15, 1416, x18)

inst_1448:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5d897b and fs2 == 0 and fe2 == 0x7c and fm2 == 0x5d897b and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e5d897b; op2val:0x3e5d897b; valaddr_reg:x16; val_offset:1424; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1424, x17, x15, 1424, x18)

inst_1449:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5d897b and fs2 == 0 and fe2 == 0x7c and fm2 == 0x5d897b and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e5d897b; op2val:0x3e5d897b; valaddr_reg:x16; val_offset:1432; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1432, x17, x15, 1432, x18)

inst_1450:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5d897b and fs2 == 0 and fe2 == 0x7c and fm2 == 0x5d897b and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e5d897b; op2val:0x3e5d897b; valaddr_reg:x16; val_offset:1440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1440, x17, x15, 1440, x18)

inst_1451:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x2fa6d6 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x2fa6d6 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d2fa6d6; op2val:0x3d2fa6d6; valaddr_reg:x16; val_offset:1448; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1448, x17, x15, 1448, x18)

inst_1452:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x2fa6d6 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x2fa6d6 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d2fa6d6; op2val:0x3d2fa6d6; valaddr_reg:x16; val_offset:1456; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1456, x17, x15, 1456, x18)

inst_1453:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x2fa6d6 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x2fa6d6 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d2fa6d6; op2val:0x3d2fa6d6; valaddr_reg:x16; val_offset:1464; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1464, x17, x15, 1464, x18)

inst_1454:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x2fa6d6 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x2fa6d6 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d2fa6d6; op2val:0x3d2fa6d6; valaddr_reg:x16; val_offset:1472; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1472, x17, x15, 1472, x18)

inst_1455:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x2fa6d6 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x2fa6d6 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d2fa6d6; op2val:0x3d2fa6d6; valaddr_reg:x16; val_offset:1480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1480, x17, x15, 1480, x18)

inst_1456:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3b1080 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3b1080 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3b1080; op2val:0x3f3b1080; valaddr_reg:x16; val_offset:1488; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1488, x17, x15, 1488, x18)

inst_1457:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3b1080 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3b1080 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3b1080; op2val:0x3f3b1080; valaddr_reg:x16; val_offset:1496; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1496, x17, x15, 1496, x18)

inst_1458:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3b1080 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3b1080 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3b1080; op2val:0x3f3b1080; valaddr_reg:x16; val_offset:1504; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1504, x17, x15, 1504, x18)

inst_1459:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3b1080 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3b1080 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3b1080; op2val:0x3f3b1080; valaddr_reg:x16; val_offset:1512; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1512, x17, x15, 1512, x18)

inst_1460:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3b1080 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3b1080 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3b1080; op2val:0x3f3b1080; valaddr_reg:x16; val_offset:1520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1520, x17, x15, 1520, x18)

inst_1461:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x582b47 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x582b47 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed82b47; op2val:0x3ed82b47; valaddr_reg:x16; val_offset:1528; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1528, x17, x15, 1528, x18)

inst_1462:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x582b47 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x582b47 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed82b47; op2val:0x3ed82b47; valaddr_reg:x16; val_offset:1536; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1536, x17, x15, 1536, x18)

inst_1463:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x582b47 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x582b47 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed82b47; op2val:0x3ed82b47; valaddr_reg:x16; val_offset:1544; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1544, x17, x15, 1544, x18)

inst_1464:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x582b47 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x582b47 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed82b47; op2val:0x3ed82b47; valaddr_reg:x16; val_offset:1552; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1552, x17, x15, 1552, x18)

inst_1465:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x582b47 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x582b47 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed82b47; op2val:0x3ed82b47; valaddr_reg:x16; val_offset:1560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1560, x17, x15, 1560, x18)

inst_1466:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x78f2eb and fs2 == 0 and fe2 == 0x7d and fm2 == 0x78f2eb and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef8f2eb; op2val:0x3ef8f2eb; valaddr_reg:x16; val_offset:1568; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1568, x17, x15, 1568, x18)

inst_1467:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x78f2eb and fs2 == 0 and fe2 == 0x7d and fm2 == 0x78f2eb and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef8f2eb; op2val:0x3ef8f2eb; valaddr_reg:x16; val_offset:1576; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1576, x17, x15, 1576, x18)

inst_1468:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x78f2eb and fs2 == 0 and fe2 == 0x7d and fm2 == 0x78f2eb and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef8f2eb; op2val:0x3ef8f2eb; valaddr_reg:x16; val_offset:1584; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1584, x17, x15, 1584, x18)

inst_1469:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x78f2eb and fs2 == 0 and fe2 == 0x7d and fm2 == 0x78f2eb and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef8f2eb; op2val:0x3ef8f2eb; valaddr_reg:x16; val_offset:1592; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1592, x17, x15, 1592, x18)

inst_1470:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x78f2eb and fs2 == 0 and fe2 == 0x7d and fm2 == 0x78f2eb and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef8f2eb; op2val:0x3ef8f2eb; valaddr_reg:x16; val_offset:1600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1600, x17, x15, 1600, x18)

inst_1471:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x0f1032 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x0f1032 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e0f1032; op2val:0x3e0f1032; valaddr_reg:x16; val_offset:1608; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1608, x17, x15, 1608, x18)

inst_1472:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x0f1032 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x0f1032 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e0f1032; op2val:0x3e0f1032; valaddr_reg:x16; val_offset:1616; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1616, x17, x15, 1616, x18)

inst_1473:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x0f1032 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x0f1032 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e0f1032; op2val:0x3e0f1032; valaddr_reg:x16; val_offset:1624; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1624, x17, x15, 1624, x18)

inst_1474:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x0f1032 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x0f1032 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e0f1032; op2val:0x3e0f1032; valaddr_reg:x16; val_offset:1632; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1632, x17, x15, 1632, x18)

inst_1475:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x0f1032 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x0f1032 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e0f1032; op2val:0x3e0f1032; valaddr_reg:x16; val_offset:1640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1640, x17, x15, 1640, x18)

inst_1476:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x6afbfb and fs2 == 0 and fe2 == 0x7c and fm2 == 0x6afbfb and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e6afbfb; op2val:0x3e6afbfb; valaddr_reg:x16; val_offset:1648; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1648, x17, x15, 1648, x18)

inst_1477:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x6afbfb and fs2 == 0 and fe2 == 0x7c and fm2 == 0x6afbfb and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e6afbfb; op2val:0x3e6afbfb; valaddr_reg:x16; val_offset:1656; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1656, x17, x15, 1656, x18)

inst_1478:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x6afbfb and fs2 == 0 and fe2 == 0x7c and fm2 == 0x6afbfb and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e6afbfb; op2val:0x3e6afbfb; valaddr_reg:x16; val_offset:1664; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1664, x17, x15, 1664, x18)

inst_1479:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x6afbfb and fs2 == 0 and fe2 == 0x7c and fm2 == 0x6afbfb and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e6afbfb; op2val:0x3e6afbfb; valaddr_reg:x16; val_offset:1672; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1672, x17, x15, 1672, x18)

inst_1480:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x6afbfb and fs2 == 0 and fe2 == 0x7c and fm2 == 0x6afbfb and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e6afbfb; op2val:0x3e6afbfb; valaddr_reg:x16; val_offset:1680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1680, x17, x15, 1680, x18)

inst_1481:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7eda96 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7eda96 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efeda96; op2val:0x3efeda96; valaddr_reg:x16; val_offset:1688; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1688, x17, x15, 1688, x18)

inst_1482:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7eda96 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7eda96 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efeda96; op2val:0x3efeda96; valaddr_reg:x16; val_offset:1696; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1696, x17, x15, 1696, x18)

inst_1483:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7eda96 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7eda96 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efeda96; op2val:0x3efeda96; valaddr_reg:x16; val_offset:1704; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1704, x17, x15, 1704, x18)

inst_1484:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7eda96 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7eda96 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efeda96; op2val:0x3efeda96; valaddr_reg:x16; val_offset:1712; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1712, x17, x15, 1712, x18)

inst_1485:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7eda96 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7eda96 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efeda96; op2val:0x3efeda96; valaddr_reg:x16; val_offset:1720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1720, x17, x15, 1720, x18)

inst_1486:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1b3d0d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1b3d0d and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1b3d0d; op2val:0x3f1b3d0d; valaddr_reg:x16; val_offset:1728; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1728, x17, x15, 1728, x18)

inst_1487:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1b3d0d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1b3d0d and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1b3d0d; op2val:0x3f1b3d0d; valaddr_reg:x16; val_offset:1736; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1736, x17, x15, 1736, x18)

inst_1488:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1b3d0d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1b3d0d and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1b3d0d; op2val:0x3f1b3d0d; valaddr_reg:x16; val_offset:1744; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1744, x17, x15, 1744, x18)

inst_1489:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1b3d0d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1b3d0d and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1b3d0d; op2val:0x3f1b3d0d; valaddr_reg:x16; val_offset:1752; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1752, x17, x15, 1752, x18)

inst_1490:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1b3d0d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1b3d0d and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1b3d0d; op2val:0x3f1b3d0d; valaddr_reg:x16; val_offset:1760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1760, x17, x15, 1760, x18)

inst_1491:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x09b9e9 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x09b9e9 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3c89b9e9; op2val:0x3c89b9e9; valaddr_reg:x16; val_offset:1768; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1768, x17, x15, 1768, x18)

inst_1492:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x09b9e9 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x09b9e9 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3c89b9e9; op2val:0x3c89b9e9; valaddr_reg:x16; val_offset:1776; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1776, x17, x15, 1776, x18)

inst_1493:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x09b9e9 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x09b9e9 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3c89b9e9; op2val:0x3c89b9e9; valaddr_reg:x16; val_offset:1784; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1784, x17, x15, 1784, x18)

inst_1494:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x09b9e9 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x09b9e9 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3c89b9e9; op2val:0x3c89b9e9; valaddr_reg:x16; val_offset:1792; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1792, x17, x15, 1792, x18)

inst_1495:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x09b9e9 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x09b9e9 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3c89b9e9; op2val:0x3c89b9e9; valaddr_reg:x16; val_offset:1800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1800, x17, x15, 1800, x18)

inst_1496:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x74de04 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x74de04 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f74de04; op2val:0x3f74de04; valaddr_reg:x16; val_offset:1808; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1808, x17, x15, 1808, x18)

inst_1497:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x74de04 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x74de04 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f74de04; op2val:0x3f74de04; valaddr_reg:x16; val_offset:1816; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1816, x17, x15, 1816, x18)

inst_1498:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x74de04 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x74de04 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f74de04; op2val:0x3f74de04; valaddr_reg:x16; val_offset:1824; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1824, x17, x15, 1824, x18)

inst_1499:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x74de04 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x74de04 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f74de04; op2val:0x3f74de04; valaddr_reg:x16; val_offset:1832; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1832, x17, x15, 1832, x18)

inst_1500:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x74de04 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x74de04 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f74de04; op2val:0x3f74de04; valaddr_reg:x16; val_offset:1840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1840, x17, x15, 1840, x18)

inst_1501:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x02a372 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x02a372 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f02a372; op2val:0x3f02a372; valaddr_reg:x16; val_offset:1848; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1848, x17, x15, 1848, x18)

inst_1502:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x02a372 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x02a372 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f02a372; op2val:0x3f02a372; valaddr_reg:x16; val_offset:1856; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1856, x17, x15, 1856, x18)

inst_1503:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x02a372 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x02a372 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f02a372; op2val:0x3f02a372; valaddr_reg:x16; val_offset:1864; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1864, x17, x15, 1864, x18)

inst_1504:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x02a372 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x02a372 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f02a372; op2val:0x3f02a372; valaddr_reg:x16; val_offset:1872; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1872, x17, x15, 1872, x18)

inst_1505:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x02a372 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x02a372 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f02a372; op2val:0x3f02a372; valaddr_reg:x16; val_offset:1880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1880, x17, x15, 1880, x18)

inst_1506:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x75478f and fs2 == 0 and fe2 == 0x7d and fm2 == 0x75478f and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef5478f; op2val:0x3ef5478f; valaddr_reg:x16; val_offset:1888; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1888, x17, x15, 1888, x18)

inst_1507:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x75478f and fs2 == 0 and fe2 == 0x7d and fm2 == 0x75478f and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef5478f; op2val:0x3ef5478f; valaddr_reg:x16; val_offset:1896; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1896, x17, x15, 1896, x18)

inst_1508:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x75478f and fs2 == 0 and fe2 == 0x7d and fm2 == 0x75478f and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef5478f; op2val:0x3ef5478f; valaddr_reg:x16; val_offset:1904; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1904, x17, x15, 1904, x18)

inst_1509:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x75478f and fs2 == 0 and fe2 == 0x7d and fm2 == 0x75478f and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef5478f; op2val:0x3ef5478f; valaddr_reg:x16; val_offset:1912; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1912, x17, x15, 1912, x18)

inst_1510:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x75478f and fs2 == 0 and fe2 == 0x7d and fm2 == 0x75478f and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef5478f; op2val:0x3ef5478f; valaddr_reg:x16; val_offset:1920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1920, x17, x15, 1920, x18)

inst_1511:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7baf85 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7baf85 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efbaf85; op2val:0x3efbaf85; valaddr_reg:x16; val_offset:1928; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1928, x17, x15, 1928, x18)

inst_1512:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7baf85 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7baf85 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efbaf85; op2val:0x3efbaf85; valaddr_reg:x16; val_offset:1936; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1936, x17, x15, 1936, x18)

inst_1513:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7baf85 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7baf85 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efbaf85; op2val:0x3efbaf85; valaddr_reg:x16; val_offset:1944; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1944, x17, x15, 1944, x18)

inst_1514:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7baf85 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7baf85 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efbaf85; op2val:0x3efbaf85; valaddr_reg:x16; val_offset:1952; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1952, x17, x15, 1952, x18)

inst_1515:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7baf85 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7baf85 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efbaf85; op2val:0x3efbaf85; valaddr_reg:x16; val_offset:1960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1960, x17, x15, 1960, x18)

inst_1516:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x201376 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x201376 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f201376; op2val:0x3f201376; valaddr_reg:x16; val_offset:1968; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1968, x17, x15, 1968, x18)

inst_1517:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x201376 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x201376 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f201376; op2val:0x3f201376; valaddr_reg:x16; val_offset:1976; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1976, x17, x15, 1976, x18)

inst_1518:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x201376 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x201376 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f201376; op2val:0x3f201376; valaddr_reg:x16; val_offset:1984; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1984, x17, x15, 1984, x18)

inst_1519:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x201376 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x201376 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f201376; op2val:0x3f201376; valaddr_reg:x16; val_offset:1992; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1992, x17, x15, 1992, x18)

inst_1520:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x201376 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x201376 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f201376; op2val:0x3f201376; valaddr_reg:x16; val_offset:2000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 2000, x17, x15, 2000, x18)

inst_1521:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x180b0a and fs2 == 0 and fe2 == 0x7d and fm2 == 0x180b0a and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e980b0a; op2val:0x3e980b0a; valaddr_reg:x16; val_offset:2008; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 2008, x17, x15, 2008, x18)

inst_1522:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x180b0a and fs2 == 0 and fe2 == 0x7d and fm2 == 0x180b0a and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e980b0a; op2val:0x3e980b0a; valaddr_reg:x16; val_offset:2016; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 2016, x17, x15, 2016, x18)

inst_1523:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x180b0a and fs2 == 0 and fe2 == 0x7d and fm2 == 0x180b0a and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e980b0a; op2val:0x3e980b0a; valaddr_reg:x16; val_offset:2024; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_7)

inst_1524:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x180b0a and fs2 == 0 and fe2 == 0x7d and fm2 == 0x180b0a and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e980b0a; op2val:0x3e980b0a; valaddr_reg:x16; val_offset:0; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 0, x17, x15, 0, x18)

inst_1525:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x180b0a and fs2 == 0 and fe2 == 0x7d and fm2 == 0x180b0a and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e980b0a; op2val:0x3e980b0a; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 8, x17, x15, 8, x18)

inst_1526:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x53b5c9 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x53b5c9 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f53b5c9; op2val:0x3f53b5c9; valaddr_reg:x16; val_offset:16; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 16, x17, x15, 16, x18)

inst_1527:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x53b5c9 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x53b5c9 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f53b5c9; op2val:0x3f53b5c9; valaddr_reg:x16; val_offset:24; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 24, x17, x15, 24, x18)

inst_1528:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x53b5c9 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x53b5c9 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f53b5c9; op2val:0x3f53b5c9; valaddr_reg:x16; val_offset:32; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 32, x17, x15, 32, x18)

inst_1529:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x53b5c9 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x53b5c9 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f53b5c9; op2val:0x3f53b5c9; valaddr_reg:x16; val_offset:40; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 40, x17, x15, 40, x18)

inst_1530:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x53b5c9 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x53b5c9 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f53b5c9; op2val:0x3f53b5c9; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_1531:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4f7542 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4f7542 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4f7542; op2val:0x3e4f7542; valaddr_reg:x16; val_offset:56; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 56, x17, x15, 56, x18)

inst_1532:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4f7542 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4f7542 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4f7542; op2val:0x3e4f7542; valaddr_reg:x16; val_offset:64; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 64, x17, x15, 64, x18)

inst_1533:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4f7542 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4f7542 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4f7542; op2val:0x3e4f7542; valaddr_reg:x16; val_offset:72; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 72, x17, x15, 72, x18)

inst_1534:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4f7542 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4f7542 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4f7542; op2val:0x3e4f7542; valaddr_reg:x16; val_offset:80; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 80, x17, x15, 80, x18)

inst_1535:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4f7542 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4f7542 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4f7542; op2val:0x3e4f7542; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 88, x17, x15, 88, x18)

inst_1536:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x772950 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x772950 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f772950; op2val:0x3f772950; valaddr_reg:x16; val_offset:96; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 96, x17, x15, 96, x18)

inst_1537:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x772950 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x772950 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f772950; op2val:0x3f772950; valaddr_reg:x16; val_offset:104; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 104, x17, x15, 104, x18)

inst_1538:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x772950 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x772950 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f772950; op2val:0x3f772950; valaddr_reg:x16; val_offset:112; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 112, x17, x15, 112, x18)

inst_1539:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x772950 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x772950 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f772950; op2val:0x3f772950; valaddr_reg:x16; val_offset:120; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 120, x17, x15, 120, x18)

inst_1540:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x772950 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x772950 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f772950; op2val:0x3f772950; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_1541:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7d4b70 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7d4b70 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efd4b70; op2val:0x3efd4b70; valaddr_reg:x16; val_offset:136; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 136, x17, x15, 136, x18)

inst_1542:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7d4b70 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7d4b70 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efd4b70; op2val:0x3efd4b70; valaddr_reg:x16; val_offset:144; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 144, x17, x15, 144, x18)

inst_1543:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7d4b70 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7d4b70 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efd4b70; op2val:0x3efd4b70; valaddr_reg:x16; val_offset:152; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 152, x17, x15, 152, x18)

inst_1544:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7d4b70 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7d4b70 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efd4b70; op2val:0x3efd4b70; valaddr_reg:x16; val_offset:160; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 160, x17, x15, 160, x18)

inst_1545:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7d4b70 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7d4b70 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efd4b70; op2val:0x3efd4b70; valaddr_reg:x16; val_offset:168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 168, x17, x15, 168, x18)

inst_1546:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x70aed9 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x70aed9 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3df0aed9; op2val:0x3df0aed9; valaddr_reg:x16; val_offset:176; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 176, x17, x15, 176, x18)

inst_1547:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x70aed9 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x70aed9 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3df0aed9; op2val:0x3df0aed9; valaddr_reg:x16; val_offset:184; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 184, x17, x15, 184, x18)

inst_1548:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x70aed9 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x70aed9 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3df0aed9; op2val:0x3df0aed9; valaddr_reg:x16; val_offset:192; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 192, x17, x15, 192, x18)

inst_1549:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x70aed9 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x70aed9 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3df0aed9; op2val:0x3df0aed9; valaddr_reg:x16; val_offset:200; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 200, x17, x15, 200, x18)

inst_1550:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x70aed9 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x70aed9 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3df0aed9; op2val:0x3df0aed9; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_1551:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x325670 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x325670 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f325670; op2val:0x3f325670; valaddr_reg:x16; val_offset:216; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 216, x17, x15, 216, x18)

inst_1552:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x325670 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x325670 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f325670; op2val:0x3f325670; valaddr_reg:x16; val_offset:224; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 224, x17, x15, 224, x18)

inst_1553:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x325670 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x325670 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f325670; op2val:0x3f325670; valaddr_reg:x16; val_offset:232; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 232, x17, x15, 232, x18)

inst_1554:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x325670 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x325670 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f325670; op2val:0x3f325670; valaddr_reg:x16; val_offset:240; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 240, x17, x15, 240, x18)

inst_1555:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x325670 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x325670 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f325670; op2val:0x3f325670; valaddr_reg:x16; val_offset:248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 248, x17, x15, 248, x18)

inst_1556:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2e0b1f and fs2 == 0 and fe2 == 0x7c and fm2 == 0x2e0b1f and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e2e0b1f; op2val:0x3e2e0b1f; valaddr_reg:x16; val_offset:256; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 256, x17, x15, 256, x18)

inst_1557:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2e0b1f and fs2 == 0 and fe2 == 0x7c and fm2 == 0x2e0b1f and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e2e0b1f; op2val:0x3e2e0b1f; valaddr_reg:x16; val_offset:264; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 264, x17, x15, 264, x18)

inst_1558:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2e0b1f and fs2 == 0 and fe2 == 0x7c and fm2 == 0x2e0b1f and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e2e0b1f; op2val:0x3e2e0b1f; valaddr_reg:x16; val_offset:272; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 272, x17, x15, 272, x18)

inst_1559:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2e0b1f and fs2 == 0 and fe2 == 0x7c and fm2 == 0x2e0b1f and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e2e0b1f; op2val:0x3e2e0b1f; valaddr_reg:x16; val_offset:280; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 280, x17, x15, 280, x18)

inst_1560:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2e0b1f and fs2 == 0 and fe2 == 0x7c and fm2 == 0x2e0b1f and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e2e0b1f; op2val:0x3e2e0b1f; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_1561:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x022b70 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x022b70 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d822b70; op2val:0x3d822b70; valaddr_reg:x16; val_offset:296; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 296, x17, x15, 296, x18)

inst_1562:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x022b70 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x022b70 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d822b70; op2val:0x3d822b70; valaddr_reg:x16; val_offset:304; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 304, x17, x15, 304, x18)

inst_1563:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x022b70 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x022b70 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d822b70; op2val:0x3d822b70; valaddr_reg:x16; val_offset:312; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 312, x17, x15, 312, x18)

inst_1564:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x022b70 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x022b70 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d822b70; op2val:0x3d822b70; valaddr_reg:x16; val_offset:320; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 320, x17, x15, 320, x18)

inst_1565:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x022b70 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x022b70 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d822b70; op2val:0x3d822b70; valaddr_reg:x16; val_offset:328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 328, x17, x15, 328, x18)

inst_1566:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0e9998 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x0e9998 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8e9998; op2val:0x3e8e9998; valaddr_reg:x16; val_offset:336; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 336, x17, x15, 336, x18)

inst_1567:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0e9998 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x0e9998 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8e9998; op2val:0x3e8e9998; valaddr_reg:x16; val_offset:344; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 344, x17, x15, 344, x18)

inst_1568:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0e9998 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x0e9998 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8e9998; op2val:0x3e8e9998; valaddr_reg:x16; val_offset:352; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 352, x17, x15, 352, x18)

inst_1569:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0e9998 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x0e9998 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8e9998; op2val:0x3e8e9998; valaddr_reg:x16; val_offset:360; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 360, x17, x15, 360, x18)

inst_1570:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0e9998 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x0e9998 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8e9998; op2val:0x3e8e9998; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_1571:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x610d5b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x610d5b and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f610d5b; op2val:0x3f610d5b; valaddr_reg:x16; val_offset:376; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 376, x17, x15, 376, x18)

inst_1572:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x610d5b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x610d5b and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f610d5b; op2val:0x3f610d5b; valaddr_reg:x16; val_offset:384; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 384, x17, x15, 384, x18)

inst_1573:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x610d5b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x610d5b and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f610d5b; op2val:0x3f610d5b; valaddr_reg:x16; val_offset:392; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 392, x17, x15, 392, x18)

inst_1574:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x610d5b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x610d5b and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f610d5b; op2val:0x3f610d5b; valaddr_reg:x16; val_offset:400; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 400, x17, x15, 400, x18)

inst_1575:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x610d5b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x610d5b and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f610d5b; op2val:0x3f610d5b; valaddr_reg:x16; val_offset:408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 408, x17, x15, 408, x18)

inst_1576:
// fs1 == 0 and fe1 == 0x77 and fm1 == 0x745664 and fs2 == 0 and fe2 == 0x77 and fm2 == 0x745664 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3bf45664; op2val:0x3bf45664; valaddr_reg:x16; val_offset:416; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 416, x17, x15, 416, x18)

inst_1577:
// fs1 == 0 and fe1 == 0x77 and fm1 == 0x745664 and fs2 == 0 and fe2 == 0x77 and fm2 == 0x745664 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3bf45664; op2val:0x3bf45664; valaddr_reg:x16; val_offset:424; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 424, x17, x15, 424, x18)

inst_1578:
// fs1 == 0 and fe1 == 0x77 and fm1 == 0x745664 and fs2 == 0 and fe2 == 0x77 and fm2 == 0x745664 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3bf45664; op2val:0x3bf45664; valaddr_reg:x16; val_offset:432; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 432, x17, x15, 432, x18)

inst_1579:
// fs1 == 0 and fe1 == 0x77 and fm1 == 0x745664 and fs2 == 0 and fe2 == 0x77 and fm2 == 0x745664 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3bf45664; op2val:0x3bf45664; valaddr_reg:x16; val_offset:440; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 440, x17, x15, 440, x18)

inst_1580:
// fs1 == 0 and fe1 == 0x77 and fm1 == 0x745664 and fs2 == 0 and fe2 == 0x77 and fm2 == 0x745664 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3bf45664; op2val:0x3bf45664; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_1581:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x372531 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x372531 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb72531; op2val:0x3eb72531; valaddr_reg:x16; val_offset:456; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 456, x17, x15, 456, x18)

inst_1582:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x372531 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x372531 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb72531; op2val:0x3eb72531; valaddr_reg:x16; val_offset:464; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 464, x17, x15, 464, x18)

inst_1583:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x372531 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x372531 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb72531; op2val:0x3eb72531; valaddr_reg:x16; val_offset:472; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 472, x17, x15, 472, x18)

inst_1584:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x372531 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x372531 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb72531; op2val:0x3eb72531; valaddr_reg:x16; val_offset:480; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 480, x17, x15, 480, x18)

inst_1585:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x372531 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x372531 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb72531; op2val:0x3eb72531; valaddr_reg:x16; val_offset:488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 488, x17, x15, 488, x18)

inst_1586:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2651f5 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x2651f5 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e2651f5; op2val:0x3e2651f5; valaddr_reg:x16; val_offset:496; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 496, x17, x15, 496, x18)

inst_1587:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2651f5 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x2651f5 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e2651f5; op2val:0x3e2651f5; valaddr_reg:x16; val_offset:504; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 504, x17, x15, 504, x18)

inst_1588:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2651f5 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x2651f5 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e2651f5; op2val:0x3e2651f5; valaddr_reg:x16; val_offset:512; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 512, x17, x15, 512, x18)

inst_1589:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2651f5 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x2651f5 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e2651f5; op2val:0x3e2651f5; valaddr_reg:x16; val_offset:520; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 520, x17, x15, 520, x18)

inst_1590:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2651f5 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x2651f5 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e2651f5; op2val:0x3e2651f5; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_1591:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x35d0df and fs2 == 0 and fe2 == 0x7e and fm2 == 0x35d0df and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f35d0df; op2val:0x3f35d0df; valaddr_reg:x16; val_offset:536; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 536, x17, x15, 536, x18)

inst_1592:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x35d0df and fs2 == 0 and fe2 == 0x7e and fm2 == 0x35d0df and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f35d0df; op2val:0x3f35d0df; valaddr_reg:x16; val_offset:544; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 544, x17, x15, 544, x18)

inst_1593:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x35d0df and fs2 == 0 and fe2 == 0x7e and fm2 == 0x35d0df and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f35d0df; op2val:0x3f35d0df; valaddr_reg:x16; val_offset:552; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 552, x17, x15, 552, x18)

inst_1594:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x35d0df and fs2 == 0 and fe2 == 0x7e and fm2 == 0x35d0df and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f35d0df; op2val:0x3f35d0df; valaddr_reg:x16; val_offset:560; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 560, x17, x15, 560, x18)

inst_1595:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x35d0df and fs2 == 0 and fe2 == 0x7e and fm2 == 0x35d0df and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f35d0df; op2val:0x3f35d0df; valaddr_reg:x16; val_offset:568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 568, x17, x15, 568, x18)

inst_1596:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x47fdf7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x47fdf7 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f47fdf7; op2val:0x3f47fdf7; valaddr_reg:x16; val_offset:576; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 576, x17, x15, 576, x18)

inst_1597:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x47fdf7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x47fdf7 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f47fdf7; op2val:0x3f47fdf7; valaddr_reg:x16; val_offset:584; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 584, x17, x15, 584, x18)

inst_1598:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x47fdf7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x47fdf7 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f47fdf7; op2val:0x3f47fdf7; valaddr_reg:x16; val_offset:592; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 592, x17, x15, 592, x18)

inst_1599:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x47fdf7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x47fdf7 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f47fdf7; op2val:0x3f47fdf7; valaddr_reg:x16; val_offset:600; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 600, x17, x15, 600, x18)

inst_1600:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x47fdf7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x47fdf7 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f47fdf7; op2val:0x3f47fdf7; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 608, x17, x15, 608, x18)

inst_1601:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x445493 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x445493 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f445493; op2val:0x3f445493; valaddr_reg:x16; val_offset:616; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 616, x17, x15, 616, x18)

inst_1602:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x445493 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x445493 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f445493; op2val:0x3f445493; valaddr_reg:x16; val_offset:624; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 624, x17, x15, 624, x18)

inst_1603:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x445493 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x445493 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f445493; op2val:0x3f445493; valaddr_reg:x16; val_offset:632; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 632, x17, x15, 632, x18)

inst_1604:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x445493 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x445493 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f445493; op2val:0x3f445493; valaddr_reg:x16; val_offset:640; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 640, x17, x15, 640, x18)

inst_1605:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x445493 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x445493 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f445493; op2val:0x3f445493; valaddr_reg:x16; val_offset:648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 648, x17, x15, 648, x18)

inst_1606:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0fe699 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0fe699 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0fe699; op2val:0x3f0fe699; valaddr_reg:x16; val_offset:656; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 656, x17, x15, 656, x18)

inst_1607:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0fe699 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0fe699 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0fe699; op2val:0x3f0fe699; valaddr_reg:x16; val_offset:664; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 664, x17, x15, 664, x18)

inst_1608:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0fe699 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0fe699 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0fe699; op2val:0x3f0fe699; valaddr_reg:x16; val_offset:672; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 672, x17, x15, 672, x18)

inst_1609:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0fe699 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0fe699 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0fe699; op2val:0x3f0fe699; valaddr_reg:x16; val_offset:680; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 680, x17, x15, 680, x18)

inst_1610:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0fe699 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0fe699 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0fe699; op2val:0x3f0fe699; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 688, x17, x15, 688, x18)

inst_1611:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7890c8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7890c8 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7890c8; op2val:0x3f7890c8; valaddr_reg:x16; val_offset:696; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 696, x17, x15, 696, x18)

inst_1612:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7890c8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7890c8 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7890c8; op2val:0x3f7890c8; valaddr_reg:x16; val_offset:704; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 704, x17, x15, 704, x18)

inst_1613:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7890c8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7890c8 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7890c8; op2val:0x3f7890c8; valaddr_reg:x16; val_offset:712; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 712, x17, x15, 712, x18)

inst_1614:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7890c8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7890c8 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7890c8; op2val:0x3f7890c8; valaddr_reg:x16; val_offset:720; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 720, x17, x15, 720, x18)

inst_1615:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7890c8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7890c8 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7890c8; op2val:0x3f7890c8; valaddr_reg:x16; val_offset:728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 728, x17, x15, 728, x18)

inst_1616:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x488cf1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x488cf1 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f488cf1; op2val:0x3f488cf1; valaddr_reg:x16; val_offset:736; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 736, x17, x15, 736, x18)

inst_1617:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x488cf1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x488cf1 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f488cf1; op2val:0x3f488cf1; valaddr_reg:x16; val_offset:744; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 744, x17, x15, 744, x18)

inst_1618:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x488cf1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x488cf1 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f488cf1; op2val:0x3f488cf1; valaddr_reg:x16; val_offset:752; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 752, x17, x15, 752, x18)

inst_1619:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x488cf1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x488cf1 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f488cf1; op2val:0x3f488cf1; valaddr_reg:x16; val_offset:760; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 760, x17, x15, 760, x18)

inst_1620:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x488cf1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x488cf1 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f488cf1; op2val:0x3f488cf1; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 768, x17, x15, 768, x18)

inst_1621:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x793eba and fs2 == 0 and fe2 == 0x7a and fm2 == 0x793eba and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d793eba; op2val:0x3d793eba; valaddr_reg:x16; val_offset:776; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 776, x17, x15, 776, x18)

inst_1622:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x793eba and fs2 == 0 and fe2 == 0x7a and fm2 == 0x793eba and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d793eba; op2val:0x3d793eba; valaddr_reg:x16; val_offset:784; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 784, x17, x15, 784, x18)

inst_1623:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x793eba and fs2 == 0 and fe2 == 0x7a and fm2 == 0x793eba and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d793eba; op2val:0x3d793eba; valaddr_reg:x16; val_offset:792; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 792, x17, x15, 792, x18)

inst_1624:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x793eba and fs2 == 0 and fe2 == 0x7a and fm2 == 0x793eba and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d793eba; op2val:0x3d793eba; valaddr_reg:x16; val_offset:800; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 800, x17, x15, 800, x18)

inst_1625:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x793eba and fs2 == 0 and fe2 == 0x7a and fm2 == 0x793eba and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d793eba; op2val:0x3d793eba; valaddr_reg:x16; val_offset:808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 808, x17, x15, 808, x18)

inst_1626:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x797c61 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x797c61 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f797c61; op2val:0x3f797c61; valaddr_reg:x16; val_offset:816; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 816, x17, x15, 816, x18)

inst_1627:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x797c61 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x797c61 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f797c61; op2val:0x3f797c61; valaddr_reg:x16; val_offset:824; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 824, x17, x15, 824, x18)

inst_1628:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x797c61 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x797c61 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f797c61; op2val:0x3f797c61; valaddr_reg:x16; val_offset:832; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 832, x17, x15, 832, x18)

inst_1629:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x797c61 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x797c61 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f797c61; op2val:0x3f797c61; valaddr_reg:x16; val_offset:840; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 840, x17, x15, 840, x18)

inst_1630:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x797c61 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x797c61 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f797c61; op2val:0x3f797c61; valaddr_reg:x16; val_offset:848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 848, x17, x15, 848, x18)

inst_1631:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x49e066 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x49e066 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dc9e066; op2val:0x3dc9e066; valaddr_reg:x16; val_offset:856; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 856, x17, x15, 856, x18)

inst_1632:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x49e066 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x49e066 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dc9e066; op2val:0x3dc9e066; valaddr_reg:x16; val_offset:864; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 864, x17, x15, 864, x18)

inst_1633:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x49e066 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x49e066 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dc9e066; op2val:0x3dc9e066; valaddr_reg:x16; val_offset:872; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 872, x17, x15, 872, x18)

inst_1634:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x49e066 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x49e066 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dc9e066; op2val:0x3dc9e066; valaddr_reg:x16; val_offset:880; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 880, x17, x15, 880, x18)

inst_1635:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x49e066 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x49e066 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dc9e066; op2val:0x3dc9e066; valaddr_reg:x16; val_offset:888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 888, x17, x15, 888, x18)

inst_1636:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x456fd6 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x456fd6 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f456fd6; op2val:0x3f456fd6; valaddr_reg:x16; val_offset:896; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 896, x17, x15, 896, x18)

inst_1637:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x456fd6 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x456fd6 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f456fd6; op2val:0x3f456fd6; valaddr_reg:x16; val_offset:904; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 904, x17, x15, 904, x18)

inst_1638:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x456fd6 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x456fd6 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f456fd6; op2val:0x3f456fd6; valaddr_reg:x16; val_offset:912; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 912, x17, x15, 912, x18)

inst_1639:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x456fd6 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x456fd6 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f456fd6; op2val:0x3f456fd6; valaddr_reg:x16; val_offset:920; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 920, x17, x15, 920, x18)

inst_1640:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x456fd6 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x456fd6 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f456fd6; op2val:0x3f456fd6; valaddr_reg:x16; val_offset:928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 928, x17, x15, 928, x18)

inst_1641:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0dfb1a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0dfb1a and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0dfb1a; op2val:0x3f0dfb1a; valaddr_reg:x16; val_offset:936; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 936, x17, x15, 936, x18)

inst_1642:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0dfb1a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0dfb1a and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0dfb1a; op2val:0x3f0dfb1a; valaddr_reg:x16; val_offset:944; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 944, x17, x15, 944, x18)

inst_1643:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0dfb1a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0dfb1a and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0dfb1a; op2val:0x3f0dfb1a; valaddr_reg:x16; val_offset:952; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 952, x17, x15, 952, x18)

inst_1644:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0dfb1a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0dfb1a and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0dfb1a; op2val:0x3f0dfb1a; valaddr_reg:x16; val_offset:960; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 960, x17, x15, 960, x18)

inst_1645:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0dfb1a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0dfb1a and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0dfb1a; op2val:0x3f0dfb1a; valaddr_reg:x16; val_offset:968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 968, x17, x15, 968, x18)

inst_1646:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x736cd9 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x736cd9 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e736cd9; op2val:0x3e736cd9; valaddr_reg:x16; val_offset:976; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 976, x17, x15, 976, x18)

inst_1647:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x736cd9 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x736cd9 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e736cd9; op2val:0x3e736cd9; valaddr_reg:x16; val_offset:984; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 984, x17, x15, 984, x18)

inst_1648:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x736cd9 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x736cd9 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e736cd9; op2val:0x3e736cd9; valaddr_reg:x16; val_offset:992; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 992, x17, x15, 992, x18)

inst_1649:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x736cd9 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x736cd9 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e736cd9; op2val:0x3e736cd9; valaddr_reg:x16; val_offset:1000; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1000, x17, x15, 1000, x18)

inst_1650:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x736cd9 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x736cd9 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e736cd9; op2val:0x3e736cd9; valaddr_reg:x16; val_offset:1008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1008, x17, x15, 1008, x18)

inst_1651:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x282d31 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x282d31 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e282d31; op2val:0x3e282d31; valaddr_reg:x16; val_offset:1016; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1016, x17, x15, 1016, x18)

inst_1652:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x282d31 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x282d31 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e282d31; op2val:0x3e282d31; valaddr_reg:x16; val_offset:1024; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1024, x17, x15, 1024, x18)

inst_1653:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x282d31 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x282d31 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e282d31; op2val:0x3e282d31; valaddr_reg:x16; val_offset:1032; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1032, x17, x15, 1032, x18)

inst_1654:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x282d31 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x282d31 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e282d31; op2val:0x3e282d31; valaddr_reg:x16; val_offset:1040; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1040, x17, x15, 1040, x18)

inst_1655:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x282d31 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x282d31 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e282d31; op2val:0x3e282d31; valaddr_reg:x16; val_offset:1048; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1048, x17, x15, 1048, x18)

inst_1656:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x67f8d1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x67f8d1 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f67f8d1; op2val:0x3f67f8d1; valaddr_reg:x16; val_offset:1056; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1056, x17, x15, 1056, x18)

inst_1657:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x67f8d1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x67f8d1 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f67f8d1; op2val:0x3f67f8d1; valaddr_reg:x16; val_offset:1064; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1064, x17, x15, 1064, x18)

inst_1658:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x67f8d1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x67f8d1 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f67f8d1; op2val:0x3f67f8d1; valaddr_reg:x16; val_offset:1072; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1072, x17, x15, 1072, x18)

inst_1659:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x67f8d1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x67f8d1 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f67f8d1; op2val:0x3f67f8d1; valaddr_reg:x16; val_offset:1080; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1080, x17, x15, 1080, x18)

inst_1660:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x67f8d1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x67f8d1 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f67f8d1; op2val:0x3f67f8d1; valaddr_reg:x16; val_offset:1088; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1088, x17, x15, 1088, x18)

inst_1661:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x326267 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x326267 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb26267; op2val:0x3eb26267; valaddr_reg:x16; val_offset:1096; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1096, x17, x15, 1096, x18)

inst_1662:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x326267 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x326267 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb26267; op2val:0x3eb26267; valaddr_reg:x16; val_offset:1104; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1104, x17, x15, 1104, x18)

inst_1663:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x326267 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x326267 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb26267; op2val:0x3eb26267; valaddr_reg:x16; val_offset:1112; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1112, x17, x15, 1112, x18)

inst_1664:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x326267 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x326267 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb26267; op2val:0x3eb26267; valaddr_reg:x16; val_offset:1120; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1120, x17, x15, 1120, x18)

inst_1665:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x326267 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x326267 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb26267; op2val:0x3eb26267; valaddr_reg:x16; val_offset:1128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1128, x17, x15, 1128, x18)

inst_1666:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x012b2a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x012b2a and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f012b2a; op2val:0x3f012b2a; valaddr_reg:x16; val_offset:1136; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1136, x17, x15, 1136, x18)

inst_1667:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x012b2a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x012b2a and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f012b2a; op2val:0x3f012b2a; valaddr_reg:x16; val_offset:1144; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1144, x17, x15, 1144, x18)

inst_1668:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x012b2a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x012b2a and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f012b2a; op2val:0x3f012b2a; valaddr_reg:x16; val_offset:1152; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1152, x17, x15, 1152, x18)

inst_1669:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x012b2a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x012b2a and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f012b2a; op2val:0x3f012b2a; valaddr_reg:x16; val_offset:1160; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1160, x17, x15, 1160, x18)

inst_1670:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x012b2a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x012b2a and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f012b2a; op2val:0x3f012b2a; valaddr_reg:x16; val_offset:1168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1168, x17, x15, 1168, x18)

inst_1671:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x71e510 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x71e510 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e71e510; op2val:0x3e71e510; valaddr_reg:x16; val_offset:1176; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1176, x17, x15, 1176, x18)

inst_1672:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x71e510 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x71e510 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e71e510; op2val:0x3e71e510; valaddr_reg:x16; val_offset:1184; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1184, x17, x15, 1184, x18)

inst_1673:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x71e510 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x71e510 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e71e510; op2val:0x3e71e510; valaddr_reg:x16; val_offset:1192; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1192, x17, x15, 1192, x18)

inst_1674:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x71e510 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x71e510 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e71e510; op2val:0x3e71e510; valaddr_reg:x16; val_offset:1200; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1200, x17, x15, 1200, x18)

inst_1675:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x71e510 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x71e510 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e71e510; op2val:0x3e71e510; valaddr_reg:x16; val_offset:1208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1208, x17, x15, 1208, x18)

inst_1676:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5d9a4e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5d9a4e and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5d9a4e; op2val:0x3f5d9a4e; valaddr_reg:x16; val_offset:1216; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1216, x17, x15, 1216, x18)

inst_1677:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5d9a4e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5d9a4e and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5d9a4e; op2val:0x3f5d9a4e; valaddr_reg:x16; val_offset:1224; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1224, x17, x15, 1224, x18)

inst_1678:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5d9a4e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5d9a4e and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5d9a4e; op2val:0x3f5d9a4e; valaddr_reg:x16; val_offset:1232; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1232, x17, x15, 1232, x18)

inst_1679:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5d9a4e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5d9a4e and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5d9a4e; op2val:0x3f5d9a4e; valaddr_reg:x16; val_offset:1240; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1240, x17, x15, 1240, x18)

inst_1680:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5d9a4e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5d9a4e and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5d9a4e; op2val:0x3f5d9a4e; valaddr_reg:x16; val_offset:1248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1248, x17, x15, 1248, x18)

inst_1681:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x773be8 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x773be8 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e773be8; op2val:0x3e773be8; valaddr_reg:x16; val_offset:1256; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1256, x17, x15, 1256, x18)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
test_fp:
.word 0x3f5d9a4e
.word 0x3f5d9a4e
.word 0x3e773be8
.word 0x3e773be8
.word 0x3e773be8
.word 0x3e773be8
.word 0x3e773be8
.word 0x3e773be8
.word 0x3e773be8
.word 0x3e773be8
.word 0x3e773be8
.word 0x3e773be8
.word 0x3f199e47
.word 0x3f199e47
.word 0x3f199e47
.word 0x3f199e47
.word 0x3f199e47
.word 0x3f199e47
.word 0x3f199e47
.word 0x3f199e47
.word 0x3f199e47
.word 0x3f199e47
.word 0x3ed6e8fa
.word 0x3ed6e8fa
.word 0x3ed6e8fa
.word 0x3ed6e8fa
.word 0x3ed6e8fa
.word 0x3ed6e8fa
.word 0x3ed6e8fa
.word 0x3ed6e8fa
.word 0x3ed6e8fa
.word 0x3ed6e8fa
.word 0x3f2e305e
.word 0x3f2e305e
.word 0x3f2e305e
.word 0x3f2e305e
.word 0x3f2e305e
.word 0x3f2e305e
.word 0x3f2e305e
.word 0x3f2e305e
.word 0x3f2e305e
.word 0x3f2e305e
.word 0x3e4f6b2d
.word 0x3e4f6b2d
.word 0x3e4f6b2d
.word 0x3e4f6b2d
.word 0x3e4f6b2d
.word 0x3e4f6b2d
.word 0x3e4f6b2d
.word 0x3e4f6b2d
.word 0x3e4f6b2d
.word 0x3e4f6b2d
.word 0x3bb7b77e
.word 0x3bb7b77e
.word 0x3bb7b77e
.word 0x3bb7b77e
.word 0x3bb7b77e
.word 0x3bb7b77e
.word 0x3bb7b77e
.word 0x3bb7b77e
.word 0x3bb7b77e
.word 0x3bb7b77e
.word 0x3ed01139
.word 0x3ed01139
.word 0x3ed01139
.word 0x3ed01139
.word 0x3ed01139
.word 0x3ed01139
.word 0x3ed01139
.word 0x3ed01139
.word 0x3ed01139
.word 0x3ed01139
.word 0x3e91f408
.word 0x3e91f408
.word 0x3e91f408
.word 0x3e91f408
.word 0x3e91f408
.word 0x3e91f408
.word 0x3e91f408
.word 0x3e91f408
.word 0x3e91f408
.word 0x3e91f408
.word 0x3ed7130e
.word 0x3ed7130e
.word 0x3ed7130e
.word 0x3ed7130e
.word 0x3ed7130e
.word 0x3ed7130e
.word 0x3ed7130e
.word 0x3ed7130e
.word 0x3ed7130e
.word 0x3ed7130e
.word 0x3e382a99
.word 0x3e382a99
.word 0x3e382a99
.word 0x3e382a99
.word 0x3e382a99
.word 0x3e382a99
.word 0x3e382a99
.word 0x3e382a99
.word 0x3e382a99
.word 0x3e382a99
.word 0x3f54d6ca
.word 0x3f54d6ca
.word 0x3f54d6ca
.word 0x3f54d6ca
.word 0x3f54d6ca
.word 0x3f54d6ca
.word 0x3f54d6ca
.word 0x3f54d6ca
.word 0x3f54d6ca
.word 0x3f54d6ca
.word 0x3f01462e
.word 0x3f01462e
.word 0x3f01462e
.word 0x3f01462e
.word 0x3f01462e
.word 0x3f01462e
.word 0x3f01462e
.word 0x3f01462e
.word 0x3f01462e
.word 0x3f01462e
.word 0x3f679ef3
.word 0x3f679ef3
.word 0x3f679ef3
.word 0x3f679ef3
.word 0x3f679ef3
.word 0x3f679ef3
.word 0x3f679ef3
.word 0x3f679ef3
.word 0x3f679ef3
.word 0x3f679ef3
.word 0x3f61c65a
.word 0x3f61c65a
.word 0x3f61c65a
.word 0x3f61c65a
.word 0x3f61c65a
.word 0x3f61c65a
.word 0x3f61c65a
.word 0x3f61c65a
.word 0x3f61c65a
.word 0x3f61c65a
.word 0x3f2855a5
.word 0x3f2855a5
.word 0x3f2855a5
.word 0x3f2855a5
.word 0x3f2855a5
.word 0x3f2855a5
.word 0x3f2855a5
.word 0x3f2855a5
.word 0x3f2855a5
.word 0x3f2855a5
.word 0x3d12f53e
.word 0x3d12f53e
.word 0x3d12f53e
.word 0x3d12f53e
.word 0x3d12f53e
.word 0x3d12f53e
.word 0x3d12f53e
.word 0x3d12f53e
.word 0x3d12f53e
.word 0x3d12f53e
.word 0x3e979753
.word 0x3e979753
.word 0x3e979753
.word 0x3e979753
.word 0x3e979753
.word 0x3e979753
.word 0x3e979753
.word 0x3e979753
.word 0x3e979753
.word 0x3e979753
.word 0x3f488fab
.word 0x3f488fab
.word 0x3f488fab
.word 0x3f488fab
.word 0x3f488fab
.word 0x3f488fab
.word 0x3f488fab
.word 0x3f488fab
.word 0x3f488fab
.word 0x3f488fab
.word 0x3ece12b3
.word 0x3ece12b3
.word 0x3ece12b3
.word 0x3ece12b3
.word 0x3ece12b3
.word 0x3ece12b3
.word 0x3ece12b3
.word 0x3ece12b3
.word 0x3ece12b3
.word 0x3ece12b3
.word 0x3f503069
.word 0x3f503069
.word 0x3f503069
.word 0x3f503069
.word 0x3f503069
.word 0x3f503069
.word 0x3f503069
.word 0x3f503069
.word 0x3f503069
.word 0x3f503069
.word 0x3f01f498
.word 0x3f01f498
.word 0x3f01f498
.word 0x3f01f498
.word 0x3f01f498
.word 0x3f01f498
.word 0x3f01f498
.word 0x3f01f498
.word 0x3f01f498
.word 0x3f01f498
.word 0x3f64c3ec
.word 0x3f64c3ec
.word 0x3f64c3ec
.word 0x3f64c3ec
.word 0x3f64c3ec
.word 0x3f64c3ec
.word 0x3f64c3ec
.word 0x3f64c3ec
.word 0x3f64c3ec
.word 0x3f64c3ec
.word 0x3e9023ca
.word 0x3e9023ca
.word 0x3e9023ca
.word 0x3e9023ca
.word 0x3e9023ca
.word 0x3e9023ca
.word 0x3e9023ca
.word 0x3e9023ca
.word 0x3e9023ca
.word 0x3e9023ca
.word 0x3f426f02
.word 0x3f426f02
.word 0x3f426f02
.word 0x3f426f02
.word 0x3f426f02
.word 0x3f426f02
.word 0x3f426f02
.word 0x3f426f02
.word 0x3f426f02
.word 0x3f426f02
.word 0x3f238f9e
.word 0x3f238f9e
.word 0x3f238f9e
.word 0x3f238f9e
.word 0x3f238f9e
.word 0x3f238f9e
.word 0x3f238f9e
.word 0x3f238f9e
.word 0x3f238f9e
.word 0x3f238f9e
.word 0x3f5ca59c
.word 0x3f5ca59c
.word 0x3f5ca59c
.word 0x3f5ca59c
.word 0x3f5ca59c
.word 0x3f5ca59c
.word 0x3f5ca59c
.word 0x3f5ca59c
.word 0x3f5ca59c
.word 0x3f5ca59c
.word 0x3ef2627d
.word 0x3ef2627d
.word 0x3ef2627d
.word 0x3ef2627d
.word 0x3ef2627d
.word 0x3ef2627d
.word 0x3ef2627d
.word 0x3ef2627d
.word 0x3ef2627d
.word 0x3ef2627d
.word 0x3ec9984d
.word 0x3ec9984d
.word 0x3ec9984d
.word 0x3ec9984d
.word 0x3ec9984d
.word 0x3ec9984d
.word 0x3ec9984d
.word 0x3ec9984d
.word 0x3ec9984d
.word 0x3ec9984d
.word 0x3db1e108
.word 0x3db1e108
.word 0x3db1e108
.word 0x3db1e108
.word 0x3db1e108
.word 0x3db1e108
.word 0x3db1e108
.word 0x3db1e108
.word 0x3db1e108
.word 0x3db1e108
.word 0x3cdcc699
.word 0x3cdcc699
.word 0x3cdcc699
.word 0x3cdcc699
.word 0x3cdcc699
.word 0x3cdcc699
.word 0x3cdcc699
.word 0x3cdcc699
.word 0x3cdcc699
.word 0x3cdcc699
.word 0x3ebf8bcd
.word 0x3ebf8bcd
.word 0x3ebf8bcd
.word 0x3ebf8bcd
.word 0x3ebf8bcd
.word 0x3ebf8bcd
.word 0x3ebf8bcd
.word 0x3ebf8bcd
.word 0x3ebf8bcd
.word 0x3ebf8bcd
.word 0x3e5bbcf7
.word 0x3e5bbcf7
.word 0x3e5bbcf7
.word 0x3e5bbcf7
.word 0x3e5bbcf7
.word 0x3e5bbcf7
.word 0x3e5bbcf7
.word 0x3e5bbcf7
.word 0x3e5bbcf7
.word 0x3e5bbcf7
.word 0x3f1177ce
.word 0x3f1177ce
.word 0x3f1177ce
.word 0x3f1177ce
.word 0x3f1177ce
.word 0x3f1177ce
.word 0x3f1177ce
.word 0x3f1177ce
.word 0x3f1177ce
.word 0x3f1177ce
.word 0x3ec14df6
.word 0x3ec14df6
.word 0x3ec14df6
.word 0x3ec14df6
.word 0x3ec14df6
.word 0x3ec14df6
.word 0x3ec14df6
.word 0x3ec14df6
.word 0x3ec14df6
.word 0x3ec14df6
.word 0x3f782ee4
.word 0x3f782ee4
.word 0x3f782ee4
.word 0x3f782ee4
.word 0x3f782ee4
.word 0x3f782ee4
.word 0x3f782ee4
.word 0x3f782ee4
.word 0x3f782ee4
.word 0x3f782ee4
.word 0x3e962caf
.word 0x3e962caf
.word 0x3e962caf
.word 0x3e962caf
.word 0x3e962caf
.word 0x3e962caf
.word 0x3e962caf
.word 0x3e962caf
.word 0x3e962caf
.word 0x3e962caf
.word 0x3f471621
.word 0x3f471621
.word 0x3f471621
.word 0x3f471621
.word 0x3f471621
.word 0x3f471621
.word 0x3f471621
.word 0x3f471621
.word 0x3f471621
.word 0x3f471621
.word 0x3e087b1c
.word 0x3e087b1c
.word 0x3e087b1c
.word 0x3e087b1c
.word 0x3e087b1c
.word 0x3e087b1c
.word 0x3e087b1c
.word 0x3e087b1c
.word 0x3e087b1c
.word 0x3e087b1c
.word 0x3f53e005
.word 0x3f53e005
.word 0x3f53e005
.word 0x3f53e005
.word 0x3f53e005
.word 0x3f53e005
.word 0x3f53e005
.word 0x3f53e005
.word 0x3f53e005
.word 0x3f53e005
.word 0x3f44942f
.word 0x3f44942f
.word 0x3f44942f
.word 0x3f44942f
.word 0x3f44942f
.word 0x3f44942f
.word 0x3f44942f
.word 0x3f44942f
.word 0x3f44942f
.word 0x3f44942f
.word 0x3f3af0f7
.word 0x3f3af0f7
.word 0x3f3af0f7
.word 0x3f3af0f7
.word 0x3f3af0f7
.word 0x3f3af0f7
.word 0x3f3af0f7
.word 0x3f3af0f7
.word 0x3f3af0f7
.word 0x3f3af0f7
.word 0x3e92b862
.word 0x3e92b862
.word 0x3e92b862
.word 0x3e92b862
.word 0x3e92b862
.word 0x3e92b862
.word 0x3e92b862
.word 0x3e92b862
.word 0x3e92b862
.word 0x3e92b862
.word 0x53ac9951
.word 0xd4d4d9ac
.word 0x53ac9951
.word 0xd4d4d9ac
.word 0x53ac9951
.word 0xd4d4d9ac
.word 0x53ac9951
.word 0xd4d4d9ac
.word 0x53ac9951
.word 0xd4d4d9ac
.word 0x5482f2e7
.word 0xd47a1a31
.word 0x5482f2e7
.word 0xd47a1a31
.word 0x5482f2e7
.word 0xd47a1a31
.word 0x5482f2e7
.word 0xd47a1a31
.word 0x5482f2e7
.word 0xd47a1a31
.word 0x5485f04a
.word 0xd4741f6c
.word 0x5485f04a
.word 0xd4741f6c
.word 0x5485f04a
.word 0xd4741f6c
.word 0x5485f04a
.word 0xd4741f6c
.word 0x5485f04a
.word 0xd4741f6c
.word 0x53195d31
.word 0xd4ecd45a
.word 0x53195d31
.word 0xd4ecd45a
.word 0x53195d31
.word 0xd4ecd45a
.word 0x53195d31
.word 0xd4ecd45a
.word 0x53195d31
.word 0xd4ecd45a
.word 0x54e2d28e
.word 0xd3696b93
.word 0x54e2d28e
.word 0xd3696b93
.word 0x54e2d28e
.word 0xd3696b93
.word 0x54e2d28e
.word 0xd3696b93
.word 0x54e2d28e
.word 0xd3696b93
.word 0x53d5e71a
.word 0xd4ca863a
.word 0x53d5e71a
.word 0xd4ca863a
.word 0x53d5e71a
.word 0xd4ca863a
.word 0x53d5e71a
.word 0xd4ca863a
.word 0x53d5e71a
.word 0xd4ca863a
.word 0x54b05c4a
.word 0xd41f476b
.word 0x54b05c4a
.word 0xd41f476b
.word 0x54b05c4a
.word 0xd41f476b
.word 0x54b05c4a
.word 0xd41f476b
.word 0x54b05c4a
.word 0xd41f476b
.word 0x54b0c12c
.word 0xd41e7da7
.word 0x54b0c12c
.word 0xd41e7da7
.word 0x54b0c12c
.word 0xd41e7da7
.word 0x54b0c12c
.word 0xd41e7da7
.word 0x54b0c12c
.word 0xd41e7da7
.word 0x5481d579
.word 0xd47c550e
.word 0x5481d579
.word 0xd47c550e
.word 0x5481d579
.word 0xd47c550e
.word 0x5481d579
.word 0xd47c550e
.word 0x5481d579
.word 0xd47c550e
.word 0x54a826e6
.word 0xd42fb234
.word 0x54a826e6
.word 0xd42fb234
.word 0x54a826e6
.word 0xd42fb234
.word 0x54a826e6
.word 0xd42fb234
.word 0x54a826e6
.word 0xd42fb234
.word 0x54585ebd
.word 0xd493d0a1
.word 0x54585ebd
.word 0xd493d0a1
.word 0x54585ebd
.word 0xd493d0a1
.word 0x54585ebd
.word 0xd493d0a1
.word 0x54585ebd
.word 0xd493d0a1
.word 0x5482a1c5
.word 0xd47abc75
.word 0x5482a1c5
.word 0xd47abc75
.word 0x5482a1c5
.word 0xd47abc75
.word 0x5482a1c5
.word 0xd47abc75
.word 0x5482a1c5
.word 0xd47abc75
.word 0x546f2813
.word 0xd4886bf6
.word 0x546f2813
.word 0xd4886bf6
.word 0x546f2813
.word 0xd4886bf6
.word 0x546f2813
.word 0xd4886bf6
.word 0x546f2813
.word 0xd4886bf6
.word 0x54d53dde
.word 0xd3ab0886
.word 0x54d53dde
.word 0xd3ab0886
.word 0x54d53dde
.word 0xd3ab0886
.word 0x54d53dde
.word 0xd3ab0886
.word 0x54d53dde
.word 0xd3ab0886
.word 0x548b53c1
.word 0xd469587e
.word 0x548b53c1
.word 0xd469587e
.word 0x548b53c1
.word 0xd469587e
.word 0x548b53c1
.word 0xd469587e
.word 0x548b53c1
.word 0xd469587e
.word 0x54b540cd
.word 0xd4157e66
.word 0x54b540cd
.word 0xd4157e66
.word 0x54b540cd
.word 0xd4157e66
.word 0x54b540cd
.word 0xd4157e66
.word 0x54b540cd
.word 0xd4157e66
.word 0x5432eb1f
.word 0xd4a68a70
.word 0x5432eb1f
.word 0xd4a68a70
.word 0x5432eb1f
.word 0xd4a68a70
.word 0x5432eb1f
.word 0xd4a68a70
.word 0x5432eb1f
.word 0xd4a68a70
.word 0x54d0b932
.word 0xd3bd1b38
.word 0x54d0b932
.word 0xd3bd1b38
.word 0x54d0b932
.word 0xd3bd1b38
.word 0x54d0b932
.word 0xd3bd1b38
.word 0x54d0b932
.word 0xd3bd1b38
.word 0x54d8a506
.word 0xd39d6be7
.word 0x54d8a506
.word 0xd39d6be7
.word 0x54d8a506
.word 0xd39d6be7
.word 0x54d8a506
.word 0xd39d6be7
.word 0x54d8a506
.word 0xd39d6be7
.word 0x54efe6f7
.word 0xd300c84c
.word 0x54efe6f7
.word 0xd300c84c
.word 0x54efe6f7
.word 0xd300c84c
.word 0x54efe6f7
.word 0xd300c84c
.word 0x54efe6f7
.word 0xd300c84c
.word 0x54a11751
.word 0xd43dd15e
.word 0x54a11751
.word 0xd43dd15e
.word 0x54a11751
.word 0xd43dd15e
.word 0x54a11751
.word 0xd43dd15e
.word 0x54a11751
.word 0xd43dd15e
.word 0x54a13267
.word 0xd43d9b31
.word 0x54a13267
.word 0xd43d9b31
.word 0x54a13267
.word 0xd43d9b31
.word 0x54a13267
.word 0xd43d9b31
.word 0x54a13267
.word 0xd43d9b31
.word 0x54a3ee55
.word 0xd4382356
.word 0x54a3ee55
.word 0xd4382356
.word 0x54a3ee55
.word 0xd4382356
.word 0x54a3ee55
.word 0xd4382356
.word 0x54a3ee55
.word 0xd4382356
.word 0x547c4371
.word 0xd481de47
.word 0x547c4371
.word 0xd481de47
.word 0x547c4371
.word 0xd481de47
.word 0x547c4371
.word 0xd481de47
.word 0x547c4371
.word 0xd481de47
.word 0x54e5dd60
.word 0xd35114ff
.word 0x54e5dd60
.word 0xd35114ff
.word 0x54e5dd60
.word 0xd35114ff
.word 0x54e5dd60
.word 0xd35114ff
.word 0x54e5dd60
.word 0xd35114ff
.word 0x54959d13
.word 0xd454c5d9
.word 0x54959d13
.word 0xd454c5d9
.word 0x54959d13
.word 0xd454c5d9
.word 0x54959d13
.word 0xd454c5d9
.word 0x54959d13
.word 0xd454c5d9
.word 0x544f7d33
.word 0xd4984166
.word 0x544f7d33
.word 0xd4984166
.word 0x544f7d33
.word 0xd4984166
.word 0x544f7d33
.word 0xd4984166
.word 0x544f7d33
.word 0xd4984166
.word 0x54474053
.word 0xd49c5fd6
.word 0x54474053
.word 0xd49c5fd6
.word 0x54474053
.word 0xd49c5fd6
.word 0x54474053
.word 0xd49c5fd6
.word 0x54474053
.word 0xd49c5fd6
.word 0x5438062a
.word 0xd4a3fceb
.word 0x5438062a
.word 0xd4a3fceb
.word 0x5438062a
.word 0xd4a3fceb
.word 0x5438062a
.word 0xd4a3fceb
.word 0x5438062a
.word 0xd4a3fceb
.word 0x549eba88
.word 0xd4428af1
.word 0x549eba88
.word 0xd4428af1
.word 0x549eba88
.word 0xd4428af1
.word 0x549eba88
.word 0xd4428af1
.word 0x549eba88
.word 0xd4428af1
.word 0x541c5514
.word 0xd4b1d576
.word 0x541c5514
.word 0xd4b1d576
.word 0x541c5514
.word 0xd4b1d576
.word 0x541c5514
.word 0xd4b1d576
.word 0x541c5514
.word 0xd4b1d576
.word 0x54bea01d
.word 0xd402bfc6
.word 0x54bea01d
.word 0xd402bfc6
.word 0x54bea01d
.word 0xd402bfc6
.word 0x54bea01d
.word 0xd402bfc6
.word 0x54bea01d
.word 0xd402bfc6
.word 0x54d5a7eb
.word 0xd3a96053
.word 0x54d5a7eb
.word 0xd3a96053
.word 0x54d5a7eb
.word 0xd3a96053
.word 0x54d5a7eb
.word 0xd3a96053
.word 0x54d5a7eb
.word 0xd3a96053
.word 0x54fcad39
.word 0xd1d4b1d9
.word 0x54fcad39
.word 0xd1d4b1d9
.word 0x54fcad39
.word 0xd1d4b1d9
.word 0x54fcad39
.word 0xd1d4b1d9
.word 0x54fcad39
.word 0xd1d4b1d9
.word 0x54d454f3
.word 0xd3aeac32
.word 0x54d454f3
.word 0xd3aeac32
.word 0x54d454f3
.word 0xd3aeac32
.word 0x54d454f3
.word 0xd3aeac32
.word 0x54d454f3
.word 0xd3aeac32
.word 0x5499214a
.word 0xd44dbd6c
.word 0x5499214a
.word 0xd44dbd6c
.word 0x5499214a
.word 0xd44dbd6c
.word 0x5499214a
.word 0xd44dbd6c
.word 0x5499214a
.word 0xd44dbd6c
.word 0x50fdfec0
.word 0xd4ff0201
.word 0x50fdfec0
.word 0xd4ff0201
.word 0x50fdfec0
.word 0xd4ff0201
.word 0x50fdfec0
.word 0xd4ff0201
.word 0x50fdfec0
.word 0xd4ff0201
.word 0x54414f4f
.word 0xd49f5858
.word 0x54414f4f
.word 0xd49f5858
.word 0x54414f4f
.word 0xd49f5858
.word 0x54414f4f
.word 0xd49f5858
.word 0x54414f4f
.word 0xd49f5858
.word 0x547c0ea2
.word 0xd481f8af
.word 0x547c0ea2
.word 0xd481f8af
.word 0x547c0ea2
.word 0xd481f8af
.word 0x547c0ea2
.word 0xd481f8af
.word 0x547c0ea2
.word 0xd481f8af
.word 0x54c87869
.word 0xd3de1e5c
.word 0x54c87869
.word 0xd3de1e5c
.word 0x54c87869
.word 0xd3de1e5c
.word 0x54c87869
.word 0xd3de1e5c
.word 0x54c87869
.word 0xd3de1e5c
.word 0x541c0ea3
.word 0xd4b1f8ae
.word 0x541c0ea3
.word 0xd4b1f8ae
.word 0x541c0ea3
.word 0xd4b1f8ae
.word 0x541c0ea3
.word 0xd4b1f8ae
.word 0x541c0ea3
.word 0xd4b1f8ae
.word 0x54627706
.word 0xd48ec47c
.word 0x54627706
.word 0xd48ec47c
.word 0x54627706
.word 0xd48ec47c
.word 0x54627706
.word 0xd48ec47c
.word 0x54627706
.word 0xd48ec47c
.word 0x3ef17658
.word 0x3ef17658
.word 0x3ef17658
.word 0x3ef17658
.word 0x3ef17658
.word 0x3ef17658
.word 0x3ef17658
.word 0x3ef17658
.word 0x3ef17658
.word 0x3ef17658
.word 0x3efe7286
.word 0x3efe7286
.word 0x3efe7286
.word 0x3efe7286
.word 0x3efe7286
.word 0x3efe7286
.word 0x3efe7286
.word 0x3efe7286
.word 0x3efe7286
.word 0x3efe7286
.word 0x3edad704
.word 0x3edad704
.word 0x3edad704
.word 0x3edad704
.word 0x3edad704
.word 0x3edad704
.word 0x3edad704
.word 0x3edad704
.word 0x3edad704
.word 0x3edad704
.word 0x3f5d082c
.word 0x3f5d082c
.word 0x3f5d082c
.word 0x3f5d082c
.word 0x3f5d082c
.word 0x3f5d082c
.word 0x3f5d082c
.word 0x3f5d082c
.word 0x3f5d082c
.word 0x3f5d082c
.word 0x3e74ab34
.word 0x3e74ab34
.word 0x3e74ab34
.word 0x3e74ab34
.word 0x3e74ab34
.word 0x3e74ab34
.word 0x3e74ab34
.word 0x3e74ab34
.word 0x3e74ab34
.word 0x3e74ab34
.word 0x3ee8d021
.word 0x3ee8d021
.word 0x3ee8d021
.word 0x3ee8d021
.word 0x3ee8d021
.word 0x3ee8d021
.word 0x3ee8d021
.word 0x3ee8d021
.word 0x3ee8d021
.word 0x3ee8d021
.word 0x3f61c610
.word 0x3f61c610
.word 0x3f61c610
.word 0x3f61c610
.word 0x3f61c610
.word 0x3f61c610
.word 0x3f61c610
.word 0x3f61c610
.word 0x3f61c610
.word 0x3f61c610
.word 0x3f6450fd
.word 0x3f6450fd
.word 0x3f6450fd
.word 0x3f6450fd
.word 0x3f6450fd
.word 0x3f6450fd
.word 0x3f6450fd
.word 0x3f6450fd
.word 0x3f6450fd
.word 0x3f6450fd
.word 0x3f1de2e8
.word 0x3f1de2e8
.word 0x3f1de2e8
.word 0x3f1de2e8
.word 0x3f1de2e8
.word 0x3f1de2e8
.word 0x3f1de2e8
.word 0x3f1de2e8
.word 0x3f1de2e8
.word 0x3f1de2e8
.word 0x3e6c7999
.word 0x3e6c7999
.word 0x3e6c7999
.word 0x3e6c7999
.word 0x3e6c7999
.word 0x3e6c7999
.word 0x3e6c7999
.word 0x3e6c7999
.word 0x3e6c7999
.word 0x3e6c7999
.word 0x3f025a52
.word 0x3f025a52
.word 0x3f025a52
.word 0x3f025a52
.word 0x3f025a52
.word 0x3f025a52
.word 0x3f025a52
.word 0x3f025a52
.word 0x3f025a52
.word 0x3f025a52
.word 0x3cd82307
.word 0x3cd82307
.word 0x3cd82307
.word 0x3cd82307
.word 0x3cd82307
.word 0x3cd82307
.word 0x3cd82307
.word 0x3cd82307
.word 0x3cd82307
.word 0x3cd82307
.word 0x3e55ec50
.word 0x3e55ec50
.word 0x3e55ec50
.word 0x3e55ec50
.word 0x3e55ec50
.word 0x3e55ec50
.word 0x3e55ec50
.word 0x3e55ec50
.word 0x3e55ec50
.word 0x3e55ec50
.word 0x3f3fc62e
.word 0x3f3fc62e
.word 0x3f3fc62e
.word 0x3f3fc62e
.word 0x3f3fc62e
.word 0x3f3fc62e
.word 0x3f3fc62e
.word 0x3f3fc62e
.word 0x3f3fc62e
.word 0x3f3fc62e
.word 0x3f3a0de1
.word 0x3f3a0de1
.word 0x3f3a0de1
.word 0x3f3a0de1
.word 0x3f3a0de1
.word 0x3f3a0de1
.word 0x3f3a0de1
.word 0x3f3a0de1
.word 0x3f3a0de1
.word 0x3f3a0de1
.word 0x3f37188d
.word 0x3f37188d
.word 0x3f37188d
.word 0x3f37188d
.word 0x3f37188d
.word 0x3f37188d
.word 0x3f37188d
.word 0x3f37188d
.word 0x3f37188d
.word 0x3f37188d
.word 0x3e289ea2
.word 0x3e289ea2
.word 0x3e289ea2
.word 0x3e289ea2
.word 0x3e289ea2
.word 0x3e289ea2
.word 0x3e289ea2
.word 0x3e289ea2
.word 0x3e289ea2
.word 0x3e289ea2
.word 0x3ebeb4d5
.word 0x3ebeb4d5
.word 0x3ebeb4d5
.word 0x3ebeb4d5
.word 0x3ebeb4d5
.word 0x3ebeb4d5
.word 0x3ebeb4d5
.word 0x3ebeb4d5
.word 0x3ebeb4d5
.word 0x3ebeb4d5
.word 0x3f0fac91
.word 0x3f0fac91
.word 0x3f0fac91
.word 0x3f0fac91
.word 0x3f0fac91
.word 0x3f0fac91
.word 0x3f0fac91
.word 0x3f0fac91
.word 0x3f0fac91
.word 0x3f0fac91
.word 0x3f7ef944
.word 0x3f7ef944
.word 0x3f7ef944
.word 0x3f7ef944
.word 0x3f7ef944
.word 0x3f7ef944
.word 0x3f7ef944
.word 0x3f7ef944
.word 0x3f7ef944
.word 0x3f7ef944
.word 0x3f4074e4
.word 0x3f4074e4
.word 0x3f4074e4
.word 0x3f4074e4
.word 0x3f4074e4
.word 0x3f4074e4
.word 0x3f4074e4
.word 0x3f4074e4
.word 0x3f4074e4
.word 0x3f4074e4
.word 0x3f61c4da
.word 0x3f61c4da
.word 0x3f61c4da
.word 0x3f61c4da
.word 0x3f61c4da
.word 0x3f61c4da
.word 0x3f61c4da
.word 0x3f61c4da
.word 0x3f61c4da
.word 0x3f61c4da
.word 0x3ecc73ca
.word 0x3ecc73ca
.word 0x3ecc73ca
.word 0x3ecc73ca
.word 0x3ecc73ca
.word 0x3ecc73ca
.word 0x3ecc73ca
.word 0x3ecc73ca
.word 0x3ecc73ca
.word 0x3ecc73ca
.word 0x3d2632ef
.word 0x3d2632ef
.word 0x3d2632ef
.word 0x3d2632ef
.word 0x3d2632ef
.word 0x3d2632ef
.word 0x3d2632ef
.word 0x3d2632ef
.word 0x3d2632ef
.word 0x3d2632ef
.word 0x3f5fa8d5
.word 0x3f5fa8d5
.word 0x3f5fa8d5
.word 0x3f5fa8d5
.word 0x3f5fa8d5
.word 0x3f5fa8d5
.word 0x3f5fa8d5
.word 0x3f5fa8d5
.word 0x3f5fa8d5
.word 0x3f5fa8d5
.word 0x3f55d2aa
.word 0x3f55d2aa
.word 0x3f55d2aa
.word 0x3f55d2aa
.word 0x3f55d2aa
.word 0x3f55d2aa
.word 0x3f55d2aa
.word 0x3f55d2aa
.word 0x3f55d2aa
.word 0x3f55d2aa
.word 0x3e4a05fd
.word 0x3e4a05fd
.word 0x3e4a05fd
.word 0x3e4a05fd
.word 0x3e4a05fd
.word 0x3e4a05fd
.word 0x3e4a05fd
.word 0x3e4a05fd
.word 0x3e4a05fd
.word 0x3e4a05fd
.word 0x3cebde30
.word 0x3cebde30
.word 0x3cebde30
.word 0x3cebde30
.word 0x3cebde30
.word 0x3cebde30
.word 0x3cebde30
.word 0x3cebde30
.word 0x3cebde30
.word 0x3cebde30
.word 0x3f0e10a1
.word 0x3f0e10a1
.word 0x3f0e10a1
.word 0x3f0e10a1
.word 0x3f0e10a1
.word 0x3f0e10a1
.word 0x3f0e10a1
.word 0x3f0e10a1
.word 0x3f0e10a1
.word 0x3f0e10a1
.word 0x3eae3986
.word 0x3eae3986
.word 0x3eae3986
.word 0x3eae3986
.word 0x3eae3986
.word 0x3eae3986
.word 0x3eae3986
.word 0x3eae3986
.word 0x3eae3986
.word 0x3eae3986
.word 0x3e659fe4
.word 0x3e659fe4
.word 0x3e659fe4
.word 0x3e659fe4
.word 0x3e659fe4
.word 0x3e659fe4
.word 0x3e659fe4
.word 0x3e659fe4
.word 0x3e659fe4
.word 0x3e659fe4
.word 0x3d262376
.word 0x3d262376
.word 0x3d262376
.word 0x3d262376
.word 0x3d262376
.word 0x3d262376
.word 0x3d262376
.word 0x3d262376
.word 0x3d262376
.word 0x3d262376
.word 0x3f3b8366
.word 0x3f3b8366
.word 0x3f3b8366
.word 0x3f3b8366
.word 0x3f3b8366
.word 0x3f3b8366
.word 0x3f3b8366
.word 0x3f3b8366
.word 0x3f3b8366
.word 0x3f3b8366
.word 0x3e44aa65
.word 0x3e44aa65
.word 0x3e44aa65
.word 0x3e44aa65
.word 0x3e44aa65
.word 0x3e44aa65
.word 0x3e44aa65
.word 0x3e44aa65
.word 0x3e44aa65
.word 0x3e44aa65
.word 0x3f75941d
.word 0x3f75941d
.word 0x3f75941d
.word 0x3f75941d
.word 0x3f75941d
.word 0x3f75941d
.word 0x3f75941d
.word 0x3f75941d
.word 0x3f75941d
.word 0x3f75941d
.word 0x3f55cfc9
.word 0x3f55cfc9
.word 0x3f55cfc9
.word 0x3f55cfc9
.word 0x3f55cfc9
.word 0x3f55cfc9
.word 0x3f55cfc9
.word 0x3f55cfc9
.word 0x3f55cfc9
.word 0x3f55cfc9
.word 0x3f26eaaf
.word 0x3f26eaaf
.word 0x3f26eaaf
.word 0x3f26eaaf
.word 0x3f26eaaf
.word 0x3f26eaaf
.word 0x3f26eaaf
.word 0x3f26eaaf
.word 0x3f26eaaf
.word 0x3f26eaaf
.word 0x3ea3008b
.word 0x3ea3008b
.word 0x3ea3008b
.word 0x3ea3008b
.word 0x3ea3008b
.word 0x3ea3008b
.word 0x3ea3008b
.word 0x3ea3008b
.word 0x3ea3008b
.word 0x3ea3008b
.word 0x3e78105a
.word 0x3e78105a
.word 0x3e78105a
.word 0x3e78105a
.word 0x3e78105a
.word 0x3e78105a
.word 0x3e78105a
.word 0x3e78105a
.word 0x3e78105a
.word 0x3e78105a
.word 0x3f484a24
.word 0x3f484a24
.word 0x3f484a24
.word 0x3f484a24
.word 0x3f484a24
.word 0x3f484a24
.word 0x3f484a24
.word 0x3f484a24
.word 0x3f484a24
.word 0x3f484a24
.word 0x3f52df95
.word 0x3f52df95
.word 0x3f52df95
.word 0x3f52df95
.word 0x3f52df95
.word 0x3f52df95
.word 0x3f52df95
.word 0x3f52df95
.word 0x3f52df95
.word 0x3f52df95
.word 0x3d238464
.word 0x3d238464
.word 0x3d238464
.word 0x3d238464
.word 0x3d238464
.word 0x3d238464
.word 0x3d238464
.word 0x3d238464
.word 0x3d238464
.word 0x3d238464
.word 0x3e132c15
.word 0x3e132c15
.word 0x3e132c15
.word 0x3e132c15
.word 0x3e132c15
.word 0x3e132c15
.word 0x3e132c15
.word 0x3e132c15
.word 0x3e132c15
.word 0x3e132c15
.word 0x3e86f434
.word 0x3e86f434
.word 0x3e86f434
.word 0x3e86f434
.word 0x3e86f434
.word 0x3e86f434
.word 0x3e86f434
.word 0x3e86f434
.word 0x3e86f434
.word 0x3e86f434
.word 0x3f20dde2
.word 0x3f20dde2
.word 0x3f20dde2
.word 0x3f20dde2
.word 0x3f20dde2
.word 0x3f20dde2
.word 0x3f20dde2
.word 0x3f20dde2
.word 0x3f20dde2
.word 0x3f20dde2
.word 0x3e9d692c
.word 0x3e9d692c
.word 0x3e9d692c
.word 0x3e9d692c
.word 0x3e9d692c
.word 0x3e9d692c
.word 0x3e9d692c
.word 0x3e9d692c
.word 0x3e9d692c
.word 0x3e9d692c
.word 0x3def98ad
.word 0x3def98ad
.word 0x3def98ad
.word 0x3def98ad
.word 0x3def98ad
.word 0x3def98ad
.word 0x3def98ad
.word 0x3def98ad
.word 0x3def98ad
.word 0x3def98ad
.word 0x3f572d1f
.word 0x3f572d1f
.word 0x3f572d1f
.word 0x3f572d1f
.word 0x3f572d1f
.word 0x3f572d1f
.word 0x3f572d1f
.word 0x3f572d1f
.word 0x3f572d1f
.word 0x3f572d1f
.word 0x3efa038b
.word 0x3efa038b
.word 0x3efa038b
.word 0x3efa038b
.word 0x3efa038b
.word 0x3efa038b
.word 0x3efa038b
.word 0x3efa038b
.word 0x3efa038b
.word 0x3efa038b
.word 0x3f73a956
.word 0x3f73a956
.word 0x3f73a956
.word 0x3f73a956
.word 0x3f73a956
.word 0x3f73a956
.word 0x3f73a956
.word 0x3f73a956
.word 0x3f73a956
.word 0x3f73a956
.word 0x3f398ad4
.word 0x3f398ad4
.word 0x3f398ad4
.word 0x3f398ad4
.word 0x3f398ad4
.word 0x3f398ad4
.word 0x3f398ad4
.word 0x3f398ad4
.word 0x3f398ad4
.word 0x3f398ad4
.word 0x3dbe9680
.word 0x3dbe9680
.word 0x3dbe9680
.word 0x3dbe9680
.word 0x3dbe9680
.word 0x3dbe9680
.word 0x3dbe9680
.word 0x3dbe9680
.word 0x3dbe9680
.word 0x3dbe9680
.word 0x3f167709
.word 0x3f167709
.word 0x3f167709
.word 0x3f167709
.word 0x3f167709
.word 0x3f167709
.word 0x3f167709
.word 0x3f167709
.word 0x3f167709
.word 0x3f167709
.word 0x3f056b99
.word 0x3f056b99
.word 0x3f056b99
.word 0x3f056b99
.word 0x3f056b99
.word 0x3f056b99
.word 0x3f056b99
.word 0x3f056b99
.word 0x3f056b99
.word 0x3f056b99
.word 0x3f42f9e0
.word 0x3f42f9e0
.word 0x3f42f9e0
.word 0x3f42f9e0
.word 0x3f42f9e0
.word 0x3f42f9e0
.word 0x3f42f9e0
.word 0x3f42f9e0
.word 0x3f42f9e0
.word 0x3f42f9e0
.word 0x3ea08159
.word 0x3ea08159
.word 0x3ea08159
.word 0x3ea08159
.word 0x3ea08159
.word 0x3ea08159
.word 0x3ea08159
.word 0x3ea08159
.word 0x3ea08159
.word 0x3ea08159
.word 0x3eb3cb4c
.word 0x3eb3cb4c
.word 0x3eb3cb4c
.word 0x3eb3cb4c
.word 0x3eb3cb4c
.word 0x3eb3cb4c
.word 0x3eb3cb4c
.word 0x3eb3cb4c
.word 0x3eb3cb4c
.word 0x3eb3cb4c
.word 0x3ef14e01
.word 0x3ef14e01
.word 0x3ef14e01
.word 0x3ef14e01
.word 0x3ef14e01
.word 0x3ef14e01
.word 0x3ef14e01
.word 0x3ef14e01
.word 0x3ef14e01
.word 0x3ef14e01
.word 0x3f443766
.word 0x3f443766
.word 0x3f443766
.word 0x3f443766
.word 0x3f443766
.word 0x3f443766
.word 0x3f443766
.word 0x3f443766
.word 0x3f443766
.word 0x3f443766
.word 0x3f1952ae
.word 0x3f1952ae
.word 0x3f1952ae
.word 0x3f1952ae
.word 0x3f1952ae
.word 0x3f1952ae
.word 0x3f1952ae
.word 0x3f1952ae
.word 0x3f1952ae
.word 0x3f1952ae
.word 0x3e2f2bd3
.word 0x3e2f2bd3
.word 0x3e2f2bd3
.word 0x3e2f2bd3
.word 0x3e2f2bd3
.word 0x3e2f2bd3
.word 0x3e2f2bd3
.word 0x3e2f2bd3
.word 0x3e2f2bd3
.word 0x3e2f2bd3
.word 0x3f5ff78b
.word 0x3f5ff78b
.word 0x3f5ff78b
.word 0x3f5ff78b
.word 0x3f5ff78b
.word 0x3f5ff78b
.word 0x3f5ff78b
.word 0x3f5ff78b
.word 0x3f5ff78b
.word 0x3f5ff78b
.word 0x3f25226d
.word 0x3f25226d
.word 0x3f25226d
.word 0x3f25226d
.word 0x3f25226d
.word 0x3f25226d
.word 0x3f25226d
.word 0x3f25226d
.word 0x3f25226d
.word 0x3f25226d
.word 0x3edbd9d7
.word 0x3edbd9d7
.word 0x3edbd9d7
.word 0x3edbd9d7
.word 0x3edbd9d7
.word 0x3edbd9d7
.word 0x3edbd9d7
.word 0x3edbd9d7
.word 0x3edbd9d7
.word 0x3edbd9d7
.word 0x3eb505f7
.word 0x3eb505f7
.word 0x3eb505f7
.word 0x3eb505f7
.word 0x3eb505f7
.word 0x3eb505f7
.word 0x3eb505f7
.word 0x3eb505f7
.word 0x3eb505f7
.word 0x3eb505f7
.word 0x3f3df5bc
.word 0x3f3df5bc
.word 0x3f3df5bc
.word 0x3f3df5bc
.word 0x3f3df5bc
.word 0x3f3df5bc
.word 0x3f3df5bc
.word 0x3f3df5bc
.word 0x3f3df5bc
.word 0x3f3df5bc
.word 0x3f1ab2b8
.word 0x3f1ab2b8
.word 0x3f1ab2b8
.word 0x3f1ab2b8
.word 0x3f1ab2b8
.word 0x3f1ab2b8
.word 0x3f1ab2b8
.word 0x3f1ab2b8
.word 0x3f1ab2b8
.word 0x3f1ab2b8
.word 0x3e1846bc
.word 0x3e1846bc
.word 0x3e1846bc
.word 0x3e1846bc
.word 0x3e1846bc
.word 0x3e1846bc
.word 0x3e1846bc
.word 0x3e1846bc
.word 0x3e1846bc
.word 0x3e1846bc
.word 0x3ee6c617
.word 0x3ee6c617
.word 0x3ee6c617
.word 0x3ee6c617
.word 0x3ee6c617
.word 0x3ee6c617
.word 0x3ee6c617
.word 0x3ee6c617
.word 0x3ee6c617
.word 0x3ee6c617
.word 0x3d15f8af
.word 0x3d15f8af
.word 0x3d15f8af
.word 0x3d15f8af
.word 0x3d15f8af
.word 0x3d15f8af
.word 0x3d15f8af
.word 0x3d15f8af
.word 0x3d15f8af
.word 0x3d15f8af
.word 0x3f3f567f
.word 0x3f3f567f
.word 0x3f3f567f
.word 0x3f3f567f
.word 0x3f3f567f
.word 0x3f3f567f
.word 0x3f3f567f
.word 0x3f3f567f
.word 0x3f3f567f
.word 0x3f3f567f
.word 0x3e920287
.word 0x3e920287
.word 0x3e920287
.word 0x3e920287
.word 0x3e920287
.word 0x3e920287
.word 0x3e920287
.word 0x3e920287
.word 0x3e920287
.word 0x3e920287
.word 0x3f113ea2
.word 0x3f113ea2
.word 0x3f113ea2
.word 0x3f113ea2
.word 0x3f113ea2
.word 0x3f113ea2
.word 0x3f113ea2
.word 0x3f113ea2
.word 0x3f113ea2
.word 0x3f113ea2
.word 0x3e9eed61
.word 0x3e9eed61
.word 0x3e9eed61
.word 0x3e9eed61
.word 0x3e9eed61
.word 0x3e9eed61
.word 0x3e9eed61
.word 0x3e9eed61
.word 0x3e9eed61
.word 0x3e9eed61
.word 0x3e231aaf
.word 0x3e231aaf
.word 0x3e231aaf
.word 0x3e231aaf
.word 0x3e231aaf
.word 0x3e231aaf
.word 0x3e231aaf
.word 0x3e231aaf
.word 0x3e231aaf
.word 0x3e231aaf
.word 0x3e48d9e6
.word 0x3e48d9e6
.word 0x3e48d9e6
.word 0x3e48d9e6
.word 0x3e48d9e6
.word 0x3e48d9e6
.word 0x3e48d9e6
.word 0x3e48d9e6
.word 0x3e48d9e6
.word 0x3e48d9e6
.word 0x3f2f161f
.word 0x3f2f161f
.word 0x3f2f161f
.word 0x3f2f161f
.word 0x3f2f161f
.word 0x3f2f161f
.word 0x3f2f161f
.word 0x3f2f161f
.word 0x3f2f161f
.word 0x3f2f161f
.word 0x3db75562
.word 0x3db75562
.word 0x3db75562
.word 0x3db75562
.word 0x3db75562
.word 0x3db75562
.word 0x3db75562
.word 0x3db75562
.word 0x3db75562
.word 0x3db75562
.word 0x3dd994fc
.word 0x3dd994fc
.word 0x3dd994fc
.word 0x3dd994fc
.word 0x3dd994fc
.word 0x3dd994fc
.word 0x3dd994fc
.word 0x3dd994fc
.word 0x3dd994fc
.word 0x3dd994fc
.word 0x3da52830
.word 0x3da52830
.word 0x3da52830
.word 0x3da52830
.word 0x3da52830
.word 0x3da52830
.word 0x3da52830
.word 0x3da52830
.word 0x3da52830
.word 0x3da52830
.word 0x3f64a3a9
.word 0x3f64a3a9
.word 0x3f64a3a9
.word 0x3f64a3a9
.word 0x3f64a3a9
.word 0x3f64a3a9
.word 0x3f64a3a9
.word 0x3f64a3a9
.word 0x3f64a3a9
.word 0x3f64a3a9
.word 0x3e36bb8f
.word 0x3e36bb8f
.word 0x3e36bb8f
.word 0x3e36bb8f
.word 0x3e36bb8f
.word 0x3e36bb8f
.word 0x3e36bb8f
.word 0x3e36bb8f
.word 0x3e36bb8f
.word 0x3e36bb8f
.word 0x3e652978
.word 0x3e652978
.word 0x3e652978
.word 0x3e652978
.word 0x3e652978
.word 0x3e652978
.word 0x3e652978
.word 0x3e652978
.word 0x3e652978
.word 0x3e652978
.word 0x3d4ff65a
.word 0x3d4ff65a
.word 0x3d4ff65a
.word 0x3d4ff65a
.word 0x3d4ff65a
.word 0x3d4ff65a
.word 0x3d4ff65a
.word 0x3d4ff65a
.word 0x3d4ff65a
.word 0x3d4ff65a
.word 0x3e51efd8
.word 0x3e51efd8
.word 0x3e51efd8
.word 0x3e51efd8
.word 0x3e51efd8
.word 0x3e51efd8
.word 0x3e51efd8
.word 0x3e51efd8
.word 0x3e51efd8
.word 0x3e51efd8
.word 0x3f5887af
.word 0x3f5887af
.word 0x3f5887af
.word 0x3f5887af
.word 0x3f5887af
.word 0x3f5887af
.word 0x3f5887af
.word 0x3f5887af
.word 0x3f5887af
.word 0x3f5887af
.word 0x3f01b9a4
.word 0x3f01b9a4
.word 0x3f01b9a4
.word 0x3f01b9a4
.word 0x3f01b9a4
.word 0x3f01b9a4
.word 0x3f01b9a4
.word 0x3f01b9a4
.word 0x3f01b9a4
.word 0x3f01b9a4
.word 0x3f358cb8
.word 0x3f358cb8
.word 0x3f358cb8
.word 0x3f358cb8
.word 0x3f358cb8
.word 0x3f358cb8
.word 0x3f358cb8
.word 0x3f358cb8
.word 0x3f358cb8
.word 0x3f358cb8
.word 0x3f6cc44b
.word 0x3f6cc44b
.word 0x3f6cc44b
.word 0x3f6cc44b
.word 0x3f6cc44b
.word 0x3f6cc44b
.word 0x3f6cc44b
.word 0x3f6cc44b
.word 0x3f6cc44b
.word 0x3f6cc44b
.word 0x3ee5c87d
.word 0x3ee5c87d
.word 0x3ee5c87d
.word 0x3ee5c87d
.word 0x3ee5c87d
.word 0x3ee5c87d
.word 0x3ee5c87d
.word 0x3ee5c87d
.word 0x3ee5c87d
.word 0x3ee5c87d
.word 0x3f4198fd
.word 0x3f4198fd
.word 0x3f4198fd
.word 0x3f4198fd
.word 0x3f4198fd
.word 0x3f4198fd
.word 0x3f4198fd
.word 0x3f4198fd
.word 0x3f4198fd
.word 0x3f4198fd
.word 0x3f414141
.word 0x3f414141
.word 0x3f414141
.word 0x3f414141
.word 0x3f414141
.word 0x3f414141
.word 0x3f414141
.word 0x3f414141
.word 0x3f414141
.word 0x3f414141
.word 0x3ed78f38
.word 0x3ed78f38
.word 0x3ed78f38
.word 0x3ed78f38
.word 0x3ed78f38
.word 0x3ed78f38
.word 0x3ed78f38
.word 0x3ed78f38
.word 0x3ed78f38
.word 0x3ed78f38
.word 0x3f2a6920
.word 0x3f2a6920
.word 0x3f2a6920
.word 0x3f2a6920
.word 0x3f2a6920
.word 0x3f2a6920
.word 0x3f2a6920
.word 0x3f2a6920
.word 0x3f2a6920
.word 0x3f2a6920
.word 0x3dda1c8b
.word 0x3dda1c8b
.word 0x3dda1c8b
.word 0x3dda1c8b
.word 0x3dda1c8b
.word 0x3dda1c8b
.word 0x3dda1c8b
.word 0x3dda1c8b
.word 0x3dda1c8b
.word 0x3dda1c8b
.word 0x3f2eea72
.word 0x3f2eea72
.word 0x3f2eea72
.word 0x3f2eea72
.word 0x3f2eea72
.word 0x3f2eea72
.word 0x3f2eea72
.word 0x3f2eea72
.word 0x3f2eea72
.word 0x3f2eea72
.word 0x3f317695
.word 0x3f317695
.word 0x3f317695
.word 0x3f317695
.word 0x3f317695
.word 0x3f317695
.word 0x3f317695
.word 0x3f317695
.word 0x3f317695
.word 0x3f317695
.word 0x3d72c05b
.word 0x3d72c05b
.word 0x3d72c05b
.word 0x3d72c05b
.word 0x3d72c05b
.word 0x3d72c05b
.word 0x3d72c05b
.word 0x3d72c05b
.word 0x3d72c05b
.word 0x3d72c05b
.word 0x3eb22bac
.word 0x3eb22bac
.word 0x3eb22bac
.word 0x3eb22bac
.word 0x3eb22bac
.word 0x3eb22bac
.word 0x3eb22bac
.word 0x3eb22bac
.word 0x3eb22bac
.word 0x3eb22bac
.word 0x3c882d8c
.word 0x3c882d8c
.word 0x3c882d8c
.word 0x3c882d8c
.word 0x3c882d8c
.word 0x3c882d8c
.word 0x3c882d8c
.word 0x3c882d8c
.word 0x3c882d8c
.word 0x3c882d8c
.word 0x3f6b2b6a
.word 0x3f6b2b6a
.word 0x3f6b2b6a
.word 0x3f6b2b6a
.word 0x3f6b2b6a
.word 0x3f6b2b6a
.word 0x3f6b2b6a
.word 0x3f6b2b6a
.word 0x3f6b2b6a
.word 0x3f6b2b6a
.word 0x3f315367
.word 0x3f315367
.word 0x3f315367
.word 0x3f315367
.word 0x3f315367
.word 0x3f315367
.word 0x3f315367
.word 0x3f315367
.word 0x3f315367
.word 0x3f315367
.word 0x3f3dac8a
.word 0x3f3dac8a
.word 0x3f3dac8a
.word 0x3f3dac8a
.word 0x3f3dac8a
.word 0x3f3dac8a
.word 0x3f3dac8a
.word 0x3f3dac8a
.word 0x3f3dac8a
.word 0x3f3dac8a
.word 0x3e9fa595
.word 0x3e9fa595
.word 0x3e9fa595
.word 0x3e9fa595
.word 0x3e9fa595
.word 0x3e9fa595
.word 0x3e9fa595
.word 0x3e9fa595
.word 0x3e9fa595
.word 0x3e9fa595
.word 0x3ca439d8
.word 0x3ca439d8
.word 0x3ca439d8
.word 0x3ca439d8
.word 0x3ca439d8
.word 0x3ca439d8
.word 0x3ca439d8
.word 0x3ca439d8
.word 0x3ca439d8
.word 0x3ca439d8
.word 0x3f48e918
.word 0x3f48e918
.word 0x3f48e918
.word 0x3f48e918
.word 0x3f48e918
.word 0x3f48e918
.word 0x3f48e918
.word 0x3f48e918
.word 0x3f48e918
.word 0x3f48e918
.word 0x3cf76d52
.word 0x3cf76d52
.word 0x3cf76d52
.word 0x3cf76d52
.word 0x3cf76d52
.word 0x3cf76d52
.word 0x3cf76d52
.word 0x3cf76d52
.word 0x3cf76d52
.word 0x3cf76d52
.word 0x3db15f86
.word 0x3db15f86
.word 0x3db15f86
.word 0x3db15f86
.word 0x3db15f86
.word 0x3db15f86
.word 0x3db15f86
.word 0x3db15f86
.word 0x3db15f86
.word 0x3db15f86
.word 0x3f2fccd3
.word 0x3f2fccd3
.word 0x3f2fccd3
.word 0x3f2fccd3
.word 0x3f2fccd3
.word 0x3f2fccd3
.word 0x3f2fccd3
.word 0x3f2fccd3
.word 0x3f2fccd3
.word 0x3f2fccd3
.word 0x3ece8e4a
.word 0x3ece8e4a
.word 0x3ece8e4a
.word 0x3ece8e4a
.word 0x3ece8e4a
.word 0x3ece8e4a
.word 0x3ece8e4a
.word 0x3ece8e4a
.word 0x3ece8e4a
.word 0x3ece8e4a
.word 0x3c8eacc8
.word 0x3c8eacc8
.word 0x3c8eacc8
.word 0x3c8eacc8
.word 0x3c8eacc8
.word 0x3c8eacc8
.word 0x3c8eacc8
.word 0x3c8eacc8
.word 0x3c8eacc8
.word 0x3c8eacc8
.word 0x3f75db73
.word 0x3f75db73
.word 0x3f75db73
.word 0x3f75db73
.word 0x3f75db73
.word 0x3f75db73
.word 0x3f75db73
.word 0x3f75db73
.word 0x3f75db73
.word 0x3f75db73
.word 0x3f665def
.word 0x3f665def
.word 0x3f665def
.word 0x3f665def
.word 0x3f665def
.word 0x3f665def
.word 0x3f665def
.word 0x3f665def
.word 0x3f665def
.word 0x3f665def
.word 0x3f3f2083
.word 0x3f3f2083
.word 0x3f3f2083
.word 0x3f3f2083
.word 0x3f3f2083
.word 0x3f3f2083
.word 0x3f3f2083
.word 0x3f3f2083
.word 0x3f3f2083
.word 0x3f3f2083
.word 0x3db9e96f
.word 0x3db9e96f
.word 0x3db9e96f
.word 0x3db9e96f
.word 0x3db9e96f
.word 0x3db9e96f
.word 0x3db9e96f
.word 0x3db9e96f
.word 0x3db9e96f
.word 0x3db9e96f
.word 0x3f1f2938
.word 0x3f1f2938
.word 0x3f1f2938
.word 0x3f1f2938
.word 0x3f1f2938
.word 0x3f1f2938
.word 0x3f1f2938
.word 0x3f1f2938
.word 0x3f1f2938
.word 0x3f1f2938
.word 0x3f65aca9
.word 0x3f65aca9
.word 0x3f65aca9
.word 0x3f65aca9
.word 0x3f65aca9
.word 0x3f65aca9
.word 0x3f65aca9
.word 0x3f65aca9
.word 0x3f65aca9
.word 0x3f65aca9
.word 0x3f423247
.word 0x3f423247
.word 0x3f423247
.word 0x3f423247
.word 0x3f423247
.word 0x3f423247
.word 0x3f423247
.word 0x3f423247
.word 0x3f423247
.word 0x3f423247
.word 0x3f626ac7
.word 0x3f626ac7
.word 0x3f626ac7
.word 0x3f626ac7
.word 0x3f626ac7
.word 0x3f626ac7
.word 0x3f626ac7
.word 0x3f626ac7
.word 0x3f626ac7
.word 0x3f626ac7
.word 0x3c4202db
.word 0x3c4202db
.word 0x3c4202db
.word 0x3c4202db
.word 0x3c4202db
.word 0x3c4202db
.word 0x3c4202db
.word 0x3c4202db
.word 0x3c4202db
.word 0x3c4202db
.word 0x3f75c104
.word 0x3f75c104
.word 0x3f75c104
.word 0x3f75c104
.word 0x3f75c104
.word 0x3f75c104
.word 0x3f75c104
.word 0x3f75c104
.word 0x3f75c104
.word 0x3f75c104
.word 0x3f6288a4
.word 0x3f6288a4
.word 0x3f6288a4
.word 0x3f6288a4
.word 0x3f6288a4
.word 0x3f6288a4
.word 0x3f6288a4
.word 0x3f6288a4
.word 0x3f6288a4
.word 0x3f6288a4
.word 0x3ea8bfce
.word 0x3ea8bfce
.word 0x3ea8bfce
.word 0x3ea8bfce
.word 0x3ea8bfce
.word 0x3ea8bfce
.word 0x3ea8bfce
.word 0x3ea8bfce
.word 0x3ea8bfce
.word 0x3ea8bfce
.word 0x3e305d8b
.word 0x3e305d8b
.word 0x3e305d8b
.word 0x3e305d8b
.word 0x3e305d8b
.word 0x3e305d8b
.word 0x3e305d8b
.word 0x3e305d8b
.word 0x3e305d8b
.word 0x3e305d8b
.word 0x3f390a8c
.word 0x3f390a8c
.word 0x3f390a8c
.word 0x3f390a8c
.word 0x3f390a8c
.word 0x3f390a8c
.word 0x3f390a8c
.word 0x3f390a8c
.word 0x3f390a8c
.word 0x3f390a8c
.word 0x3d99765d
.word 0x3d99765d
.word 0x3d99765d
.word 0x3d99765d
.word 0x3d99765d
.word 0x3d99765d
.word 0x3d99765d
.word 0x3d99765d
.word 0x3d99765d
.word 0x3d99765d
.word 0x3ddfb4f5
.word 0x3ddfb4f5
.word 0x3ddfb4f5
.word 0x3ddfb4f5
.word 0x3ddfb4f5
.word 0x3ddfb4f5
.word 0x3ddfb4f5
.word 0x3ddfb4f5
.word 0x3ddfb4f5
.word 0x3ddfb4f5
.word 0x3f6b12df
.word 0x3f6b12df
.word 0x3f6b12df
.word 0x3f6b12df
.word 0x3f6b12df
.word 0x3f6b12df
.word 0x3f6b12df
.word 0x3f6b12df
.word 0x3f6b12df
.word 0x3f6b12df
.word 0x3edbc286
.word 0x3edbc286
.word 0x3edbc286
.word 0x3edbc286
.word 0x3edbc286
.word 0x3edbc286
.word 0x3edbc286
.word 0x3edbc286
.word 0x3edbc286
.word 0x3edbc286
.word 0x3e5f54a9
.word 0x3e5f54a9
.word 0x3e5f54a9
.word 0x3e5f54a9
.word 0x3e5f54a9
.word 0x3e5f54a9
.word 0x3e5f54a9
.word 0x3e5f54a9
.word 0x3e5f54a9
.word 0x3e5f54a9
.word 0x3f28baf1
.word 0x3f28baf1
.word 0x3f28baf1
.word 0x3f28baf1
.word 0x3f28baf1
.word 0x3f28baf1
.word 0x3f28baf1
.word 0x3f28baf1
.word 0x3f28baf1
.word 0x3f28baf1
.word 0x3e58f800
.word 0x3e58f800
.word 0x3e58f800
.word 0x3e58f800
.word 0x3e58f800
.word 0x3e58f800
.word 0x3e58f800
.word 0x3e58f800
.word 0x3e58f800
.word 0x3e58f800
.word 0x3f6d4332
.word 0x3f6d4332
.word 0x3f6d4332
.word 0x3f6d4332
.word 0x3f6d4332
.word 0x3f6d4332
.word 0x3f6d4332
.word 0x3f6d4332
.word 0x3f6d4332
.word 0x3f6d4332
.word 0x3f654e3b
.word 0x3f654e3b
.word 0x3f654e3b
.word 0x3f654e3b
.word 0x3f654e3b
.word 0x3f654e3b
.word 0x3f654e3b
.word 0x3f654e3b
.word 0x3f654e3b
.word 0x3f654e3b
.word 0x3f5d59f7
.word 0x3f5d59f7
.word 0x3f5d59f7
.word 0x3f5d59f7
.word 0x3f5d59f7
.word 0x3f5d59f7
.word 0x3f5d59f7
.word 0x3f5d59f7
.word 0x3f5d59f7
.word 0x3f5d59f7
.word 0x3d3b281a
.word 0x3d3b281a
.word 0x3d3b281a
.word 0x3d3b281a
.word 0x3d3b281a
.word 0x3d3b281a
.word 0x3d3b281a
.word 0x3d3b281a
.word 0x3d3b281a
.word 0x3d3b281a
.word 0x3e07c319
.word 0x3e07c319
.word 0x3e07c319
.word 0x3e07c319
.word 0x3e07c319
.word 0x3e07c319
.word 0x3e07c319
.word 0x3e07c319
.word 0x3e07c319
.word 0x3e07c319
.word 0x3f28e311
.word 0x3f28e311
.word 0x3f28e311
.word 0x3f28e311
.word 0x3f28e311
.word 0x3f28e311
.word 0x3f28e311
.word 0x3f28e311
.word 0x3f28e311
.word 0x3f28e311
.word 0x3e22ae3d
.word 0x3e22ae3d
.word 0x3e22ae3d
.word 0x3e22ae3d
.word 0x3e22ae3d
.word 0x3e22ae3d
.word 0x3e22ae3d
.word 0x3e22ae3d
.word 0x3e22ae3d
.word 0x3e22ae3d
.word 0x3e76aa3f
.word 0x3e76aa3f
.word 0x3e76aa3f
.word 0x3e76aa3f
.word 0x3e76aa3f
.word 0x3e76aa3f
.word 0x3e76aa3f
.word 0x3e76aa3f
.word 0x3e76aa3f
.word 0x3e76aa3f
.word 0x3db64c09
.word 0x3db64c09
.word 0x3db64c09
.word 0x3db64c09
.word 0x3db64c09
.word 0x3db64c09
.word 0x3db64c09
.word 0x3db64c09
.word 0x3db64c09
.word 0x3db64c09
.word 0x3f6a5265
.word 0x3f6a5265
.word 0x3f6a5265
.word 0x3f6a5265
.word 0x3f6a5265
.word 0x3f6a5265
.word 0x3f6a5265
.word 0x3f6a5265
.word 0x3f6a5265
.word 0x3f6a5265
.word 0x3f43ee9a
.word 0x3f43ee9a
.word 0x3f43ee9a
.word 0x3f43ee9a
.word 0x3f43ee9a
.word 0x3f43ee9a
.word 0x3f43ee9a
.word 0x3f43ee9a
.word 0x3f43ee9a
.word 0x3f43ee9a
.word 0x3f03f7e4
.word 0x3f03f7e4
.word 0x3f03f7e4
.word 0x3f03f7e4
.word 0x3f03f7e4
.word 0x3f03f7e4
.word 0x3f03f7e4
.word 0x3f03f7e4
.word 0x3f03f7e4
.word 0x3f03f7e4
.word 0x3df0dbd5
.word 0x3df0dbd5
.word 0x3df0dbd5
.word 0x3df0dbd5
.word 0x3df0dbd5
.word 0x3df0dbd5
.word 0x3df0dbd5
.word 0x3df0dbd5
.word 0x3df0dbd5
.word 0x3df0dbd5
.word 0x3d8ae14b
.word 0x3d8ae14b
.word 0x3d8ae14b
.word 0x3d8ae14b
.word 0x3d8ae14b
.word 0x3d8ae14b
.word 0x3d8ae14b
.word 0x3d8ae14b
.word 0x3d8ae14b
.word 0x3d8ae14b
.word 0x3ea6add3
.word 0x3ea6add3
.word 0x3ea6add3
.word 0x3ea6add3
.word 0x3ea6add3
.word 0x3ea6add3
.word 0x3ea6add3
.word 0x3ea6add3
.word 0x3ea6add3
.word 0x3ea6add3
.word 0x3f293107
.word 0x3f293107
.word 0x3f293107
.word 0x3f293107
.word 0x3f293107
.word 0x3f293107
.word 0x3f293107
.word 0x3f293107
.word 0x3f293107
.word 0x3f293107
.word 0x3c542d6b
.word 0x3c542d6b
.word 0x3c542d6b
.word 0x3c542d6b
.word 0x3c542d6b
.word 0x3c542d6b
.word 0x3c542d6b
.word 0x3c542d6b
.word 0x3c542d6b
.word 0x3c542d6b
.word 0x3f4c94e5
.word 0x3f4c94e5
.word 0x3f4c94e5
.word 0x3f4c94e5
.word 0x3f4c94e5
.word 0x3f4c94e5
.word 0x3f4c94e5
.word 0x3f4c94e5
.word 0x3f4c94e5
.word 0x3f4c94e5
.word 0x3dcd757a
.word 0x3dcd757a
.word 0x3dcd757a
.word 0x3dcd757a
.word 0x3dcd757a
.word 0x3dcd757a
.word 0x3dcd757a
.word 0x3dcd757a
.word 0x3dcd757a
.word 0x3dcd757a
.word 0x3f2cb625
.word 0x3f2cb625
.word 0x3f2cb625
.word 0x3f2cb625
.word 0x3f2cb625
.word 0x3f2cb625
.word 0x3f2cb625
.word 0x3f2cb625
.word 0x3f2cb625
.word 0x3f2cb625
.word 0x3f343494
.word 0x3f343494
.word 0x3f343494
.word 0x3f343494
.word 0x3f343494
.word 0x3f343494
.word 0x3f343494
.word 0x3f343494
.word 0x3f343494
.word 0x3f343494
.word 0x3f654474
.word 0x3f654474
.word 0x3f654474
.word 0x3f654474
.word 0x3f654474
.word 0x3f654474
.word 0x3f654474
.word 0x3f654474
.word 0x3f654474
.word 0x3f654474
.word 0x3f112a2e
.word 0x3f112a2e
.word 0x3f112a2e
.word 0x3f112a2e
.word 0x3f112a2e
.word 0x3f112a2e
.word 0x3f112a2e
.word 0x3f112a2e
.word 0x3f112a2e
.word 0x3f112a2e
.word 0x3f4b5332
.word 0x3f4b5332
.word 0x3f4b5332
.word 0x3f4b5332
.word 0x3f4b5332
.word 0x3f4b5332
.word 0x3f4b5332
.word 0x3f4b5332
.word 0x3f4b5332
.word 0x3f4b5332
.word 0x3f1f3d6f
.word 0x3f1f3d6f
.word 0x3f1f3d6f
.word 0x3f1f3d6f
.word 0x3f1f3d6f
.word 0x3f1f3d6f
.word 0x3f1f3d6f
.word 0x3f1f3d6f
.word 0x3f1f3d6f
.word 0x3f1f3d6f
.word 0x3e978a47
.word 0x3e978a47
.word 0x3e978a47
.word 0x3e978a47
.word 0x3e978a47
.word 0x3e978a47
.word 0x3e978a47
.word 0x3e978a47
.word 0x3e978a47
.word 0x3e978a47
.word 0x3e076466
.word 0x3e076466
.word 0x3e076466
.word 0x3e076466
.word 0x3e076466
.word 0x3e076466
.word 0x3e076466
.word 0x3e076466
.word 0x3e076466
.word 0x3e076466
.word 0x3edc042f
.word 0x3edc042f
.word 0x3edc042f
.word 0x3edc042f
.word 0x3edc042f
.word 0x3edc042f
.word 0x3edc042f
.word 0x3edc042f
.word 0x3edc042f
.word 0x3edc042f
.word 0x3e38eb81
.word 0x3e38eb81
.word 0x3e38eb81
.word 0x3e38eb81
.word 0x3e38eb81
.word 0x3e38eb81
.word 0x3e38eb81
.word 0x3e38eb81
.word 0x3e38eb81
.word 0x3e38eb81
.word 0x3df862c0
.word 0x3df862c0
.word 0x3df862c0
.word 0x3df862c0
.word 0x3df862c0
.word 0x3df862c0
.word 0x3df862c0
.word 0x3df862c0
.word 0x3df862c0
.word 0x3df862c0
.word 0x3f3f6575
.word 0x3f3f6575
.word 0x3f3f6575
.word 0x3f3f6575
.word 0x3f3f6575
.word 0x3f3f6575
.word 0x3f3f6575
.word 0x3f3f6575
.word 0x3f3f6575
.word 0x3f3f6575
.word 0x3e832720
.word 0x3e832720
.word 0x3e832720
.word 0x3e832720
.word 0x3e832720
.word 0x3e832720
.word 0x3e832720
.word 0x3e832720
.word 0x3e832720
.word 0x3e832720
.word 0x3f308c02
.word 0x3f308c02
.word 0x3f308c02
.word 0x3f308c02
.word 0x3f308c02
.word 0x3f308c02
.word 0x3f308c02
.word 0x3f308c02
.word 0x3f308c02
.word 0x3f308c02
.word 0x3f3190a5
.word 0x3f3190a5
.word 0x3f3190a5
.word 0x3f3190a5
.word 0x3f3190a5
.word 0x3f3190a5
.word 0x3f3190a5
.word 0x3f3190a5
.word 0x3f3190a5
.word 0x3f3190a5
.word 0x3d0377d1
.word 0x3d0377d1
.word 0x3d0377d1
.word 0x3d0377d1
.word 0x3d0377d1
.word 0x3d0377d1
.word 0x3d0377d1
.word 0x3d0377d1
.word 0x3d0377d1
.word 0x3d0377d1
.word 0x3f70f375
.word 0x3f70f375
.word 0x3f70f375
.word 0x3f70f375
.word 0x3f70f375
.word 0x3f70f375
.word 0x3f70f375
.word 0x3f70f375
.word 0x3f70f375
.word 0x3f70f375
.word 0x3f2dc2d5
.word 0x3f2dc2d5
.word 0x3f2dc2d5
.word 0x3f2dc2d5
.word 0x3f2dc2d5
.word 0x3f2dc2d5
.word 0x3f2dc2d5
.word 0x3f2dc2d5
.word 0x3f2dc2d5
.word 0x3f2dc2d5
.word 0x3f1ae7f6
.word 0x3f1ae7f6
.word 0x3f1ae7f6
.word 0x3f1ae7f6
.word 0x3f1ae7f6
.word 0x3f1ae7f6
.word 0x3f1ae7f6
.word 0x3f1ae7f6
.word 0x3f1ae7f6
.word 0x3f1ae7f6
.word 0x3f46dca4
.word 0x3f46dca4
.word 0x3f46dca4
.word 0x3f46dca4
.word 0x3f46dca4
.word 0x3f46dca4
.word 0x3f46dca4
.word 0x3f46dca4
.word 0x3f46dca4
.word 0x3f46dca4
.word 0x3e4f0aab
.word 0x3e4f0aab
.word 0x3e4f0aab
.word 0x3e4f0aab
.word 0x3e4f0aab
.word 0x3e4f0aab
.word 0x3e4f0aab
.word 0x3e4f0aab
.word 0x3e4f0aab
.word 0x3e4f0aab
.word 0x3f4786c6
.word 0x3f4786c6
.word 0x3f4786c6
.word 0x3f4786c6
.word 0x3f4786c6
.word 0x3f4786c6
.word 0x3f4786c6
.word 0x3f4786c6
.word 0x3f4786c6
.word 0x3f4786c6
.word 0x3ea4c624
.word 0x3ea4c624
.word 0x3ea4c624
.word 0x3ea4c624
.word 0x3ea4c624
.word 0x3ea4c624
.word 0x3ea4c624
.word 0x3ea4c624
.word 0x3ea4c624
.word 0x3ea4c624
.word 0x3f56fb53
.word 0x3f56fb53
.word 0x3f56fb53
.word 0x3f56fb53
.word 0x3f56fb53
.word 0x3f56fb53
.word 0x3f56fb53
.word 0x3f56fb53
.word 0x3f56fb53
.word 0x3f56fb53
.word 0x3f5a817b
.word 0x3f5a817b
.word 0x3f5a817b
.word 0x3f5a817b
.word 0x3f5a817b
.word 0x3f5a817b
.word 0x3f5a817b
.word 0x3f5a817b
.word 0x3f5a817b
.word 0x3f5a817b
.word 0x3f7aabaa
.word 0x3f7aabaa
.word 0x3f7aabaa
.word 0x3f7aabaa
.word 0x3f7aabaa
.word 0x3f7aabaa
.word 0x3f7aabaa
.word 0x3f7aabaa
.word 0x3f7aabaa
.word 0x3f7aabaa
.word 0x3ec9e86b
.word 0x3ec9e86b
.word 0x3ec9e86b
.word 0x3ec9e86b
.word 0x3ec9e86b
.word 0x3ec9e86b
.word 0x3ec9e86b
.word 0x3ec9e86b
.word 0x3ec9e86b
.word 0x3ec9e86b
.word 0x3efad214
.word 0x3efad214
.word 0x3efad214
.word 0x3efad214
.word 0x3efad214
.word 0x3efad214
.word 0x3efad214
.word 0x3efad214
.word 0x3efad214
.word 0x3efad214
.word 0x3f642831
.word 0x3f642831
.word 0x3f642831
.word 0x3f642831
.word 0x3f642831
.word 0x3f642831
.word 0x3f642831
.word 0x3f642831
.word 0x3f642831
.word 0x3f642831
.word 0x3f143eac
.word 0x3f143eac
.word 0x3f143eac
.word 0x3f143eac
.word 0x3f143eac
.word 0x3f143eac
.word 0x3f143eac
.word 0x3f143eac
.word 0x3f143eac
.word 0x3f143eac
.word 0x3f79f315
.word 0x3f79f315
.word 0x3f79f315
.word 0x3f79f315
.word 0x3f79f315
.word 0x3f79f315
.word 0x3f79f315
.word 0x3f79f315
.word 0x3f79f315
.word 0x3f79f315
.word 0x3f2d914a
.word 0x3f2d914a
.word 0x3f2d914a
.word 0x3f2d914a
.word 0x3f2d914a
.word 0x3f2d914a
.word 0x3f2d914a
.word 0x3f2d914a
.word 0x3f2d914a
.word 0x3f2d914a
.word 0x3e93aa7c
.word 0x3e93aa7c
.word 0x3e93aa7c
.word 0x3e93aa7c
.word 0x3e93aa7c
.word 0x3e93aa7c
.word 0x3e93aa7c
.word 0x3e93aa7c
.word 0x3e93aa7c
.word 0x3e93aa7c
.word 0x3f54f473
.word 0x3f54f473
.word 0x3f54f473
.word 0x3f54f473
.word 0x3f54f473
.word 0x3f54f473
.word 0x3f54f473
.word 0x3f54f473
.word 0x3f54f473
.word 0x3f54f473
.word 0x3f5722c8
.word 0x3f5722c8
.word 0x3f5722c8
.word 0x3f5722c8
.word 0x3f5722c8
.word 0x3f5722c8
.word 0x3f5722c8
.word 0x3f5722c8
.word 0x3f5722c8
.word 0x3f5722c8
.word 0x3f27d3e7
.word 0x3f27d3e7
.word 0x3f27d3e7
.word 0x3f27d3e7
.word 0x3f27d3e7
.word 0x3f27d3e7
.word 0x3f27d3e7
.word 0x3f27d3e7
.word 0x3f27d3e7
.word 0x3f27d3e7
.word 0x3f63f88d
.word 0x3f63f88d
.word 0x3f63f88d
.word 0x3f63f88d
.word 0x3f63f88d
.word 0x3f63f88d
.word 0x3f63f88d
.word 0x3f63f88d
.word 0x3f63f88d
.word 0x3f63f88d
.word 0x3e7a4775
.word 0x3e7a4775
.word 0x3e7a4775
.word 0x3e7a4775
.word 0x3e7a4775
.word 0x3e7a4775
.word 0x3e7a4775
.word 0x3e7a4775
.word 0x3e7a4775
.word 0x3e7a4775
.word 0x3f7bba29
.word 0x3f7bba29
.word 0x3f7bba29
.word 0x3f7bba29
.word 0x3f7bba29
.word 0x3f7bba29
.word 0x3f7bba29
.word 0x3f7bba29
.word 0x3f7bba29
.word 0x3f7bba29
.word 0x3ea75da9
.word 0x3ea75da9
.word 0x3ea75da9
.word 0x3ea75da9
.word 0x3ea75da9
.word 0x3ea75da9
.word 0x3ea75da9
.word 0x3ea75da9
.word 0x3ea75da9
.word 0x3ea75da9
.word 0x3f3ea50c
.word 0x3f3ea50c
.word 0x3f3ea50c
.word 0x3f3ea50c
.word 0x3f3ea50c
.word 0x3f3ea50c
.word 0x3f3ea50c
.word 0x3f3ea50c
.word 0x3f3ea50c
.word 0x3f3ea50c
.word 0x3e4fc5a8
.word 0x3e4fc5a8
.word 0x3e4fc5a8
.word 0x3e4fc5a8
.word 0x3e4fc5a8
.word 0x3e4fc5a8
.word 0x3e4fc5a8
.word 0x3e4fc5a8
.word 0x3e4fc5a8
.word 0x3e4fc5a8
.word 0x3e0e53b1
.word 0x3e0e53b1
.word 0x3e0e53b1
.word 0x3e0e53b1
.word 0x3e0e53b1
.word 0x3e0e53b1
.word 0x3e0e53b1
.word 0x3e0e53b1
.word 0x3e0e53b1
.word 0x3e0e53b1
.word 0x3f52a248
.word 0x3f52a248
.word 0x3f52a248
.word 0x3f52a248
.word 0x3f52a248
.word 0x3f52a248
.word 0x3f52a248
.word 0x3f52a248
.word 0x3f52a248
.word 0x3f52a248
.word 0x3f78d6a1
.word 0x3f78d6a1
.word 0x3f78d6a1
.word 0x3f78d6a1
.word 0x3f78d6a1
.word 0x3f78d6a1
.word 0x3f78d6a1
.word 0x3f78d6a1
.word 0x3f78d6a1
.word 0x3f78d6a1
.word 0x3ec66ca1
.word 0x3ec66ca1
.word 0x3ec66ca1
.word 0x3ec66ca1
.word 0x3ec66ca1
.word 0x3ec66ca1
.word 0x3ec66ca1
.word 0x3ec66ca1
.word 0x3ec66ca1
.word 0x3ec66ca1
.word 0x3eec4c81
.word 0x3eec4c81
.word 0x3eec4c81
.word 0x3eec4c81
.word 0x3eec4c81
.word 0x3eec4c81
.word 0x3eec4c81
.word 0x3eec4c81
.word 0x3eec4c81
.word 0x3eec4c81
.word 0x3f24a969
.word 0x3f24a969
.word 0x3f24a969
.word 0x3f24a969
.word 0x3f24a969
.word 0x3f24a969
.word 0x3f24a969
.word 0x3f24a969
.word 0x3f24a969
.word 0x3f24a969
.word 0x3efd9547
.word 0x3efd9547
.word 0x3efd9547
.word 0x3efd9547
.word 0x3efd9547
.word 0x3efd9547
.word 0x3efd9547
.word 0x3efd9547
.word 0x3efd9547
.word 0x3efd9547
.word 0x3edc290c
.word 0x3edc290c
.word 0x3edc290c
.word 0x3edc290c
.word 0x3edc290c
.word 0x3edc290c
.word 0x3edc290c
.word 0x3edc290c
.word 0x3edc290c
.word 0x3edc290c
.word 0x3f71a1e7
.word 0x3f71a1e7
.word 0x3f71a1e7
.word 0x3f71a1e7
.word 0x3f71a1e7
.word 0x3f71a1e7
.word 0x3f71a1e7
.word 0x3f71a1e7
.word 0x3f71a1e7
.word 0x3f71a1e7
.word 0x3ee095b3
.word 0x3ee095b3
.word 0x3ee095b3
.word 0x3ee095b3
.word 0x3ee095b3
.word 0x3ee095b3
.word 0x3ee095b3
.word 0x3ee095b3
.word 0x3ee095b3
.word 0x3ee095b3
.word 0x3e4370d4
.word 0x3e4370d4
.word 0x3e4370d4
.word 0x3e4370d4
.word 0x3e4370d4
.word 0x3e4370d4
.word 0x3e4370d4
.word 0x3e4370d4
.word 0x3e4370d4
.word 0x3e4370d4
.word 0x3de91aae
.word 0x3de91aae
.word 0x3de91aae
.word 0x3de91aae
.word 0x3de91aae
.word 0x3de91aae
.word 0x3de91aae
.word 0x3de91aae
.word 0x3de91aae
.word 0x3de91aae
.word 0x3e5d897b
.word 0x3e5d897b
.word 0x3e5d897b
.word 0x3e5d897b
.word 0x3e5d897b
.word 0x3e5d897b
.word 0x3e5d897b
.word 0x3e5d897b
.word 0x3e5d897b
.word 0x3e5d897b
.word 0x3d2fa6d6
.word 0x3d2fa6d6
.word 0x3d2fa6d6
.word 0x3d2fa6d6
.word 0x3d2fa6d6
.word 0x3d2fa6d6
.word 0x3d2fa6d6
.word 0x3d2fa6d6
.word 0x3d2fa6d6
.word 0x3d2fa6d6
.word 0x3f3b1080
.word 0x3f3b1080
.word 0x3f3b1080
.word 0x3f3b1080
.word 0x3f3b1080
.word 0x3f3b1080
.word 0x3f3b1080
.word 0x3f3b1080
.word 0x3f3b1080
.word 0x3f3b1080
.word 0x3ed82b47
.word 0x3ed82b47
.word 0x3ed82b47
.word 0x3ed82b47
.word 0x3ed82b47
.word 0x3ed82b47
.word 0x3ed82b47
.word 0x3ed82b47
.word 0x3ed82b47
.word 0x3ed82b47
.word 0x3ef8f2eb
.word 0x3ef8f2eb
.word 0x3ef8f2eb
.word 0x3ef8f2eb
.word 0x3ef8f2eb
.word 0x3ef8f2eb
.word 0x3ef8f2eb
.word 0x3ef8f2eb
.word 0x3ef8f2eb
.word 0x3ef8f2eb
.word 0x3e0f1032
.word 0x3e0f1032
.word 0x3e0f1032
.word 0x3e0f1032
.word 0x3e0f1032
.word 0x3e0f1032
.word 0x3e0f1032
.word 0x3e0f1032
.word 0x3e0f1032
.word 0x3e0f1032
.word 0x3e6afbfb
.word 0x3e6afbfb
.word 0x3e6afbfb
.word 0x3e6afbfb
.word 0x3e6afbfb
.word 0x3e6afbfb
.word 0x3e6afbfb
.word 0x3e6afbfb
.word 0x3e6afbfb
.word 0x3e6afbfb
.word 0x3efeda96
.word 0x3efeda96
.word 0x3efeda96
.word 0x3efeda96
.word 0x3efeda96
.word 0x3efeda96
.word 0x3efeda96
.word 0x3efeda96
.word 0x3efeda96
.word 0x3efeda96
.word 0x3f1b3d0d
.word 0x3f1b3d0d
.word 0x3f1b3d0d
.word 0x3f1b3d0d
.word 0x3f1b3d0d
.word 0x3f1b3d0d
.word 0x3f1b3d0d
.word 0x3f1b3d0d
.word 0x3f1b3d0d
.word 0x3f1b3d0d
.word 0x3c89b9e9
.word 0x3c89b9e9
.word 0x3c89b9e9
.word 0x3c89b9e9
.word 0x3c89b9e9
.word 0x3c89b9e9
.word 0x3c89b9e9
.word 0x3c89b9e9
.word 0x3c89b9e9
.word 0x3c89b9e9
.word 0x3f74de04
.word 0x3f74de04
.word 0x3f74de04
.word 0x3f74de04
.word 0x3f74de04
.word 0x3f74de04
.word 0x3f74de04
.word 0x3f74de04
.word 0x3f74de04
.word 0x3f74de04
.word 0x3f02a372
.word 0x3f02a372
.word 0x3f02a372
.word 0x3f02a372
.word 0x3f02a372
.word 0x3f02a372
.word 0x3f02a372
.word 0x3f02a372
.word 0x3f02a372
.word 0x3f02a372
.word 0x3ef5478f
.word 0x3ef5478f
.word 0x3ef5478f
.word 0x3ef5478f
.word 0x3ef5478f
.word 0x3ef5478f
.word 0x3ef5478f
.word 0x3ef5478f
.word 0x3ef5478f
.word 0x3ef5478f
.word 0x3efbaf85
.word 0x3efbaf85
.word 0x3efbaf85
.word 0x3efbaf85
.word 0x3efbaf85
.word 0x3efbaf85
.word 0x3efbaf85
.word 0x3efbaf85
.word 0x3efbaf85
.word 0x3efbaf85
.word 0x3f201376
.word 0x3f201376
.word 0x3f201376
.word 0x3f201376
.word 0x3f201376
.word 0x3f201376
.word 0x3f201376
.word 0x3f201376
.word 0x3f201376
.word 0x3f201376
.word 0x3e980b0a
.word 0x3e980b0a
.word 0x3e980b0a
.word 0x3e980b0a
.word 0x3e980b0a
.word 0x3e980b0a
.word 0x3e980b0a
.word 0x3e980b0a
.word 0x3e980b0a
.word 0x3e980b0a
.word 0x3f53b5c9
.word 0x3f53b5c9
.word 0x3f53b5c9
.word 0x3f53b5c9
.word 0x3f53b5c9
.word 0x3f53b5c9
.word 0x3f53b5c9
.word 0x3f53b5c9
.word 0x3f53b5c9
.word 0x3f53b5c9
.word 0x3e4f7542
.word 0x3e4f7542
.word 0x3e4f7542
.word 0x3e4f7542
.word 0x3e4f7542
.word 0x3e4f7542
.word 0x3e4f7542
.word 0x3e4f7542
.word 0x3e4f7542
.word 0x3e4f7542
.word 0x3f772950
.word 0x3f772950
.word 0x3f772950
.word 0x3f772950
.word 0x3f772950
.word 0x3f772950
.word 0x3f772950
.word 0x3f772950
.word 0x3f772950
.word 0x3f772950
.word 0x3efd4b70
.word 0x3efd4b70
.word 0x3efd4b70
.word 0x3efd4b70
.word 0x3efd4b70
.word 0x3efd4b70
.word 0x3efd4b70
.word 0x3efd4b70
.word 0x3efd4b70
.word 0x3efd4b70
.word 0x3df0aed9
.word 0x3df0aed9
.word 0x3df0aed9
.word 0x3df0aed9
.word 0x3df0aed9
.word 0x3df0aed9
.word 0x3df0aed9
.word 0x3df0aed9
.word 0x3df0aed9
.word 0x3df0aed9
.word 0x3f325670
.word 0x3f325670
.word 0x3f325670
.word 0x3f325670
.word 0x3f325670
.word 0x3f325670
.word 0x3f325670
.word 0x3f325670
.word 0x3f325670
.word 0x3f325670
.word 0x3e2e0b1f
.word 0x3e2e0b1f
.word 0x3e2e0b1f
.word 0x3e2e0b1f
.word 0x3e2e0b1f
.word 0x3e2e0b1f
.word 0x3e2e0b1f
.word 0x3e2e0b1f
.word 0x3e2e0b1f
.word 0x3e2e0b1f
.word 0x3d822b70
.word 0x3d822b70
.word 0x3d822b70
.word 0x3d822b70
.word 0x3d822b70
.word 0x3d822b70
.word 0x3d822b70
.word 0x3d822b70
.word 0x3d822b70
.word 0x3d822b70
.word 0x3e8e9998
.word 0x3e8e9998
.word 0x3e8e9998
.word 0x3e8e9998
.word 0x3e8e9998
.word 0x3e8e9998
.word 0x3e8e9998
.word 0x3e8e9998
.word 0x3e8e9998
.word 0x3e8e9998
.word 0x3f610d5b
.word 0x3f610d5b
.word 0x3f610d5b
.word 0x3f610d5b
.word 0x3f610d5b
.word 0x3f610d5b
.word 0x3f610d5b
.word 0x3f610d5b
.word 0x3f610d5b
.word 0x3f610d5b
.word 0x3bf45664
.word 0x3bf45664
.word 0x3bf45664
.word 0x3bf45664
.word 0x3bf45664
.word 0x3bf45664
.word 0x3bf45664
.word 0x3bf45664
.word 0x3bf45664
.word 0x3bf45664
.word 0x3eb72531
.word 0x3eb72531
.word 0x3eb72531
.word 0x3eb72531
.word 0x3eb72531
.word 0x3eb72531
.word 0x3eb72531
.word 0x3eb72531
.word 0x3eb72531
.word 0x3eb72531
.word 0x3e2651f5
.word 0x3e2651f5
.word 0x3e2651f5
.word 0x3e2651f5
.word 0x3e2651f5
.word 0x3e2651f5
.word 0x3e2651f5
.word 0x3e2651f5
.word 0x3e2651f5
.word 0x3e2651f5
.word 0x3f35d0df
.word 0x3f35d0df
.word 0x3f35d0df
.word 0x3f35d0df
.word 0x3f35d0df
.word 0x3f35d0df
.word 0x3f35d0df
.word 0x3f35d0df
.word 0x3f35d0df
.word 0x3f35d0df
.word 0x3f47fdf7
.word 0x3f47fdf7
.word 0x3f47fdf7
.word 0x3f47fdf7
.word 0x3f47fdf7
.word 0x3f47fdf7
.word 0x3f47fdf7
.word 0x3f47fdf7
.word 0x3f47fdf7
.word 0x3f47fdf7
.word 0x3f445493
.word 0x3f445493
.word 0x3f445493
.word 0x3f445493
.word 0x3f445493
.word 0x3f445493
.word 0x3f445493
.word 0x3f445493
.word 0x3f445493
.word 0x3f445493
.word 0x3f0fe699
.word 0x3f0fe699
.word 0x3f0fe699
.word 0x3f0fe699
.word 0x3f0fe699
.word 0x3f0fe699
.word 0x3f0fe699
.word 0x3f0fe699
.word 0x3f0fe699
.word 0x3f0fe699
.word 0x3f7890c8
.word 0x3f7890c8
.word 0x3f7890c8
.word 0x3f7890c8
.word 0x3f7890c8
.word 0x3f7890c8
.word 0x3f7890c8
.word 0x3f7890c8
.word 0x3f7890c8
.word 0x3f7890c8
.word 0x3f488cf1
.word 0x3f488cf1
.word 0x3f488cf1
.word 0x3f488cf1
.word 0x3f488cf1
.word 0x3f488cf1
.word 0x3f488cf1
.word 0x3f488cf1
.word 0x3f488cf1
.word 0x3f488cf1
.word 0x3d793eba
.word 0x3d793eba
.word 0x3d793eba
.word 0x3d793eba
.word 0x3d793eba
.word 0x3d793eba
.word 0x3d793eba
.word 0x3d793eba
.word 0x3d793eba
.word 0x3d793eba
.word 0x3f797c61
.word 0x3f797c61
.word 0x3f797c61
.word 0x3f797c61
.word 0x3f797c61
.word 0x3f797c61
.word 0x3f797c61
.word 0x3f797c61
.word 0x3f797c61
.word 0x3f797c61
.word 0x3dc9e066
.word 0x3dc9e066
.word 0x3dc9e066
.word 0x3dc9e066
.word 0x3dc9e066
.word 0x3dc9e066
.word 0x3dc9e066
.word 0x3dc9e066
.word 0x3dc9e066
.word 0x3dc9e066
.word 0x3f456fd6
.word 0x3f456fd6
.word 0x3f456fd6
.word 0x3f456fd6
.word 0x3f456fd6
.word 0x3f456fd6
.word 0x3f456fd6
.word 0x3f456fd6
.word 0x3f456fd6
.word 0x3f456fd6
.word 0x3f0dfb1a
.word 0x3f0dfb1a
.word 0x3f0dfb1a
.word 0x3f0dfb1a
.word 0x3f0dfb1a
.word 0x3f0dfb1a
.word 0x3f0dfb1a
.word 0x3f0dfb1a
.word 0x3f0dfb1a
.word 0x3f0dfb1a
.word 0x3e736cd9
.word 0x3e736cd9
.word 0x3e736cd9
.word 0x3e736cd9
.word 0x3e736cd9
.word 0x3e736cd9
.word 0x3e736cd9
.word 0x3e736cd9
.word 0x3e736cd9
.word 0x3e736cd9
.word 0x3e282d31
.word 0x3e282d31
.word 0x3e282d31
.word 0x3e282d31
.word 0x3e282d31
.word 0x3e282d31
.word 0x3e282d31
.word 0x3e282d31
.word 0x3e282d31
.word 0x3e282d31
.word 0x3f67f8d1
.word 0x3f67f8d1
.word 0x3f67f8d1
.word 0x3f67f8d1
.word 0x3f67f8d1
.word 0x3f67f8d1
.word 0x3f67f8d1
.word 0x3f67f8d1
.word 0x3f67f8d1
.word 0x3f67f8d1
.word 0x3eb26267
.word 0x3eb26267
.word 0x3eb26267
.word 0x3eb26267
.word 0x3eb26267
.word 0x3eb26267
.word 0x3eb26267
.word 0x3eb26267
.word 0x3eb26267
.word 0x3eb26267
.word 0x3f012b2a
.word 0x3f012b2a
.word 0x3f012b2a
.word 0x3f012b2a
.word 0x3f012b2a
.word 0x3f012b2a
.word 0x3f012b2a
.word 0x3f012b2a
.word 0x3f012b2a
.word 0x3f012b2a
.word 0x3e71e510
.word 0x3e71e510
.word 0x3e71e510
.word 0x3e71e510
.word 0x3e71e510
.word 0x3e71e510
.word 0x3e71e510
.word 0x3e71e510
.word 0x3e71e510
.word 0x3e71e510
.word 0x3f5d9a4e
.word 0x3f5d9a4e
.word 0x3f5d9a4e
.word 0x3f5d9a4e
.word 0x3f5d9a4e
.word 0x3f5d9a4e
.word 0x3f5d9a4e
.word 0x3f5d9a4e
.word 0x3f5d9a4e
.word 0x3f5d9a4e
.word 0x3e773be8
.word 0x3e773be8
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_2:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_3:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_4:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_5:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_6:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_7:
    .fill 316*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
