
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.5.2
// timestamp : Tue Sep  7 16:08:04 2021 GMT
// usage     : riscv_ctg \
//                  -- cgf $cgf \
//                  -- xlen $xlen \
// -----------
//
// -----------
// Copyright (c) 2021. IIT Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V F extension for the fnmadd_b8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b8)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1, rs1==f11, rs2==f30, rs3==f3, rd==f30, fs1 == 0 and fe1 == 0x7c and fm1 == 0x539ea8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5c8df0 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x3651ad and rm_val == 0  
// opcode: fnmadd.s ; op1:f11; op2:f30; op3:f3; dest:f30; op1val:0x3e539ea8; op2val:0x3f5c8df0; op3val:0x3e3651ad; valaddr_reg:x16; val_offset:0; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f30, f11, f30, f3, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1:
// rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2, rs1==f13, rs2==f19, rs3==f22, rd==f13, fs1 == 0 and fe1 == 0x78 and fm1 == 0x143039 and fs2 == 0 and fe2 == 0x85 and fm2 == 0x47444b and fs3 == 0 and fe3 == 0x7e and fm3 == 0x66b20a and rm_val == 4  
// opcode: fnmadd.s ; op1:f13; op2:f19; op3:f22; dest:f13; op1val:0x3c143039; op2val:0x42c7444b; op3val:0x3f66b20a; valaddr_reg:x16; val_offset:12; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f13, f19, f22, 0x4, 0, x16, 12, x17, x15, 8, x18)

inst_2:
// rs1 == rs2 == rd != rs3, rs1==f21, rs2==f21, rs3==f6, rd==f21, fs1 == 0 and fe1 == 0x78 and fm1 == 0x143039 and fs2 == 0 and fe2 == 0x85 and fm2 == 0x47444b and fs3 == 0 and fe3 == 0x7e and fm3 == 0x66b20a and rm_val == 3  
// opcode: fnmadd.s ; op1:f21; op2:f21; op3:f6; dest:f21; op1val:0x3c143039; op2val:0x3c143039; op3val:0x3f66b20a; valaddr_reg:x16; val_offset:24; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f21, f21, f21, f6, 0x3, 0, x16, 24, x17, x15, 16, x18)

inst_3:
// rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd, rs1==f27, rs2==f25, rs3==f1, rd==f6, fs1 == 0 and fe1 == 0x78 and fm1 == 0x143039 and fs2 == 0 and fe2 == 0x85 and fm2 == 0x47444b and fs3 == 0 and fe3 == 0x7e and fm3 == 0x66b20a and rm_val == 2  
// opcode: fnmadd.s ; op1:f27; op2:f25; op3:f1; dest:f6; op1val:0x3c143039; op2val:0x42c7444b; op3val:0x3f66b20a; valaddr_reg:x16; val_offset:36; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f6, f27, f25, f1, 0x2, 0, x16, 36, x17, x15, 24, x18)

inst_4:
// rd == rs2 == rs3 != rs1, rs1==f24, rs2==f31, rs3==f31, rd==f31, fs1 == 0 and fe1 == 0x78 and fm1 == 0x143039 and fs2 == 0 and fe2 == 0x85 and fm2 == 0x47444b and fs3 == 0 and fe3 == 0x7e and fm3 == 0x66b20a and rm_val == 1  
// opcode: fnmadd.s ; op1:f24; op2:f31; op3:f31; dest:f31; op1val:0x3c143039; op2val:0x42c7444b; op3val:0x42c7444b; valaddr_reg:x16; val_offset:48; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f31, f24, f31, f31, 0x1, 0, x16, 48, x17, x15, 32, x18)

inst_5:
// rs1 == rs2 == rs3 != rd, rs1==f8, rs2==f8, rs3==f8, rd==f27, fs1 == 0 and fe1 == 0x78 and fm1 == 0x143039 and fs2 == 0 and fe2 == 0x85 and fm2 == 0x47444b and fs3 == 0 and fe3 == 0x7e and fm3 == 0x66b20a and rm_val == 0  
// opcode: fnmadd.s ; op1:f8; op2:f8; op3:f8; dest:f27; op1val:0x3c143039; op2val:0x3c143039; op3val:0x3c143039; valaddr_reg:x16; val_offset:60; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f27, f8, f8, f8, 0x0, 0, x16, 60, x17, x15, 40, x18)

inst_6:
// rs1 == rs2 == rs3 == rd, rs1==f23, rs2==f23, rs3==f23, rd==f23, fs1 == 0 and fe1 == 0x7d and fm1 == 0x2a2294 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1b6b4f and fs3 == 0 and fe3 == 0x7e and fm3 == 0x4e9482 and rm_val == 4  
// opcode: fnmadd.s ; op1:f23; op2:f23; op3:f23; dest:f23; op1val:0x3eaa2294; op2val:0x3eaa2294; op3val:0x3eaa2294; valaddr_reg:x16; val_offset:72; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f23, f23, f23, f23, 0x4, 0, x16, 72, x17, x15, 48, x18)

inst_7:
// rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2, rs1==f20, rs2==f22, rs3==f20, rd==f9, fs1 == 0 and fe1 == 0x7d and fm1 == 0x2a2294 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1b6b4f and fs3 == 0 and fe3 == 0x7e and fm3 == 0x4e9482 and rm_val == 3  
// opcode: fnmadd.s ; op1:f20; op2:f22; op3:f20; dest:f9; op1val:0x3eaa2294; op2val:0x401b6b4f; op3val:0x3eaa2294; valaddr_reg:x16; val_offset:84; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f9, f20, f22, f20, 0x3, 0, x16, 84, x17, x15, 56, x18)

inst_8:
// rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1, rs1==f15, rs2==f14, rs3==f14, rd==f10, fs1 == 0 and fe1 == 0x7d and fm1 == 0x2a2294 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1b6b4f and fs3 == 0 and fe3 == 0x7e and fm3 == 0x4e9482 and rm_val == 2  
// opcode: fnmadd.s ; op1:f15; op2:f14; op3:f14; dest:f10; op1val:0x3eaa2294; op2val:0x401b6b4f; op3val:0x401b6b4f; valaddr_reg:x16; val_offset:96; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f10, f15, f14, f14, 0x2, 0, x16, 96, x17, x15, 64, x18)

inst_9:
// rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1, rs1==f1, rs2==f18, rs3==f28, rd==f28, fs1 == 0 and fe1 == 0x7d and fm1 == 0x2a2294 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1b6b4f and fs3 == 0 and fe3 == 0x7e and fm3 == 0x4e9482 and rm_val == 1  
// opcode: fnmadd.s ; op1:f1; op2:f18; op3:f28; dest:f28; op1val:0x3eaa2294; op2val:0x401b6b4f; op3val:0x3f4e9482; valaddr_reg:x16; val_offset:108; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f28, f1, f18, f28, 0x1, 0, x16, 108, x17, x15, 72, x18)

inst_10:
// rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3, rs1==f7, rs2==f7, rs3==f30, rd==f14, fs1 == 0 and fe1 == 0x7d and fm1 == 0x2a2294 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1b6b4f and fs3 == 0 and fe3 == 0x7e and fm3 == 0x4e9482 and rm_val == 0  
// opcode: fnmadd.s ; op1:f7; op2:f7; op3:f30; dest:f14; op1val:0x3eaa2294; op2val:0x3eaa2294; op3val:0x3f4e9482; valaddr_reg:x16; val_offset:120; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f14, f7, f7, f30, 0x0, 0, x16, 120, x17, x15, 80, x18)

inst_11:
// rs1 == rd == rs3 != rs2, rs1==f2, rs2==f27, rs3==f2, rd==f2, fs1 == 0 and fe1 == 0x7e and fm1 == 0x6b19be and fs2 == 0 and fe2 == 0x7d and fm2 == 0x3514b1 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x264c34 and rm_val == 4  
// opcode: fnmadd.s ; op1:f2; op2:f27; op3:f2; dest:f2; op1val:0x3f6b19be; op2val:0x3eb514b1; op3val:0x3f6b19be; valaddr_reg:x16; val_offset:132; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f2, f2, f27, f2, 0x4, 0, x16, 132, x17, x15, 88, x18)

inst_12:
// rs1==f25, rs2==f5, rs3==f19, rd==f26, fs1 == 0 and fe1 == 0x7e and fm1 == 0x6b19be and fs2 == 0 and fe2 == 0x7d and fm2 == 0x3514b1 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x264c34 and rm_val == 3  
// opcode: fnmadd.s ; op1:f25; op2:f5; op3:f19; dest:f26; op1val:0x3f6b19be; op2val:0x3eb514b1; op3val:0x3ea64c34; valaddr_reg:x16; val_offset:144; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f26, f25, f5, f19, 0x3, 0, x16, 144, x17, x15, 96, x18)

inst_13:
// rs1==f6, rs2==f1, rs3==f12, rd==f4, fs1 == 0 and fe1 == 0x7e and fm1 == 0x6b19be and fs2 == 0 and fe2 == 0x7d and fm2 == 0x3514b1 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x264c34 and rm_val == 2  
// opcode: fnmadd.s ; op1:f6; op2:f1; op3:f12; dest:f4; op1val:0x3f6b19be; op2val:0x3eb514b1; op3val:0x3ea64c34; valaddr_reg:x16; val_offset:156; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f4, f6, f1, f12, 0x2, 0, x16, 156, x17, x15, 104, x18)

inst_14:
// rs1==f22, rs2==f17, rs3==f27, rd==f0, fs1 == 0 and fe1 == 0x7e and fm1 == 0x6b19be and fs2 == 0 and fe2 == 0x7d and fm2 == 0x3514b1 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x264c34 and rm_val == 1  
// opcode: fnmadd.s ; op1:f22; op2:f17; op3:f27; dest:f0; op1val:0x3f6b19be; op2val:0x3eb514b1; op3val:0x3ea64c34; valaddr_reg:x16; val_offset:168; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f0, f22, f17, f27, 0x1, 0, x16, 168, x17, x15, 112, x18)

inst_15:
// rs1==f26, rs2==f15, rs3==f13, rd==f7, fs1 == 0 and fe1 == 0x7e and fm1 == 0x6b19be and fs2 == 0 and fe2 == 0x7d and fm2 == 0x3514b1 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x264c34 and rm_val == 0  
// opcode: fnmadd.s ; op1:f26; op2:f15; op3:f13; dest:f7; op1val:0x3f6b19be; op2val:0x3eb514b1; op3val:0x3ea64c34; valaddr_reg:x16; val_offset:180; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f7, f26, f15, f13, 0x0, 0, x16, 180, x17, x15, 120, x18)

inst_16:
// rs1==f30, rs2==f3, rs3==f25, rd==f8, fs1 == 0 and fe1 == 0x7c and fm1 == 0x14e79a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4b3dff and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6c6f6e and rm_val == 4  
// opcode: fnmadd.s ; op1:f30; op2:f3; op3:f25; dest:f8; op1val:0x3e14e79a; op2val:0x40cb3dff; op3val:0x3f6c6f6e; valaddr_reg:x16; val_offset:192; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f8, f30, f3, f25, 0x4, 0, x16, 192, x17, x15, 128, x18)

inst_17:
// rs1==f10, rs2==f12, rs3==f18, rd==f25, fs1 == 0 and fe1 == 0x7c and fm1 == 0x14e79a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4b3dff and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6c6f6e and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f12; op3:f18; dest:f25; op1val:0x3e14e79a; op2val:0x40cb3dff; op3val:0x3f6c6f6e; valaddr_reg:x16; val_offset:204; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f25, f10, f12, f18, 0x3, 0, x16, 204, x17, x15, 136, x18)

inst_18:
// rs1==f28, rs2==f16, rs3==f4, rd==f11, fs1 == 0 and fe1 == 0x7c and fm1 == 0x14e79a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4b3dff and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6c6f6e and rm_val == 2  
// opcode: fnmadd.s ; op1:f28; op2:f16; op3:f4; dest:f11; op1val:0x3e14e79a; op2val:0x40cb3dff; op3val:0x3f6c6f6e; valaddr_reg:x16; val_offset:216; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f11, f28, f16, f4, 0x2, 0, x16, 216, x17, x15, 144, x18)

inst_19:
// rs1==f29, rs2==f2, rs3==f0, rd==f3, fs1 == 0 and fe1 == 0x7c and fm1 == 0x14e79a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4b3dff and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6c6f6e and rm_val == 1  
// opcode: fnmadd.s ; op1:f29; op2:f2; op3:f0; dest:f3; op1val:0x3e14e79a; op2val:0x40cb3dff; op3val:0x3f6c6f6e; valaddr_reg:x16; val_offset:228; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f3, f29, f2, f0, 0x1, 0, x16, 228, x17, x15, 152, x18)

inst_20:
// rs1==f9, rs2==f29, rs3==f21, rd==f15, fs1 == 0 and fe1 == 0x7c and fm1 == 0x14e79a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4b3dff and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6c6f6e and rm_val == 0  
// opcode: fnmadd.s ; op1:f9; op2:f29; op3:f21; dest:f15; op1val:0x3e14e79a; op2val:0x40cb3dff; op3val:0x3f6c6f6e; valaddr_reg:x16; val_offset:240; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f15, f9, f29, f21, 0x0, 0, x16, 240, x17, x15, 160, x18)

inst_21:
// rs1==f17, rs2==f11, rs3==f29, rd==f12, fs1 == 0 and fe1 == 0x7e and fm1 == 0x79c1b4 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x34457d and fs3 == 0 and fe3 == 0x7b and fm3 == 0x2fdfff and rm_val == 4  
// opcode: fnmadd.s ; op1:f17; op2:f11; op3:f29; dest:f12; op1val:0x3f79c1b4; op2val:0x3db4457d; op3val:0x3dafdfff; valaddr_reg:x16; val_offset:252; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f12, f17, f11, f29, 0x4, 0, x16, 252, x17, x15, 168, x18)

inst_22:
// rs1==f18, rs2==f24, rs3==f5, rd==f29, fs1 == 0 and fe1 == 0x7e and fm1 == 0x79c1b4 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x34457d and fs3 == 0 and fe3 == 0x7b and fm3 == 0x2fdfff and rm_val == 3  
// opcode: fnmadd.s ; op1:f18; op2:f24; op3:f5; dest:f29; op1val:0x3f79c1b4; op2val:0x3db4457d; op3val:0x3dafdfff; valaddr_reg:x16; val_offset:264; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f29, f18, f24, f5, 0x3, 0, x16, 264, x17, x15, 176, x18)

inst_23:
// rs1==f19, rs2==f28, rs3==f16, rd==f24, fs1 == 0 and fe1 == 0x7e and fm1 == 0x79c1b4 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x34457d and fs3 == 0 and fe3 == 0x7b and fm3 == 0x2fdfff and rm_val == 2  
// opcode: fnmadd.s ; op1:f19; op2:f28; op3:f16; dest:f24; op1val:0x3f79c1b4; op2val:0x3db4457d; op3val:0x3dafdfff; valaddr_reg:x16; val_offset:276; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f24, f19, f28, f16, 0x2, 0, x16, 276, x17, x15, 184, x18)

inst_24:
// rs1==f3, rs2==f4, rs3==f26, rd==f5, fs1 == 0 and fe1 == 0x7e and fm1 == 0x79c1b4 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x34457d and fs3 == 0 and fe3 == 0x7b and fm3 == 0x2fdfff and rm_val == 1  
// opcode: fnmadd.s ; op1:f3; op2:f4; op3:f26; dest:f5; op1val:0x3f79c1b4; op2val:0x3db4457d; op3val:0x3dafdfff; valaddr_reg:x16; val_offset:288; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f5, f3, f4, f26, 0x1, 0, x16, 288, x17, x15, 192, x18)

inst_25:
// rs1==f16, rs2==f13, rs3==f9, rd==f22, fs1 == 0 and fe1 == 0x7e and fm1 == 0x79c1b4 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x34457d and fs3 == 0 and fe3 == 0x7b and fm3 == 0x2fdfff and rm_val == 0  
// opcode: fnmadd.s ; op1:f16; op2:f13; op3:f9; dest:f22; op1val:0x3f79c1b4; op2val:0x3db4457d; op3val:0x3dafdfff; valaddr_reg:x16; val_offset:300; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f22, f16, f13, f9, 0x0, 0, x16, 300, x17, x15, 200, x18)

inst_26:
// rs1==f31, rs2==f10, rs3==f15, rd==f19, fs1 == 0 and fe1 == 0x7d and fm1 == 0x26f6f6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0dc26a and fs3 == 0 and fe3 == 0x7d and fm3 == 0x38e9a5 and rm_val == 4  
// opcode: fnmadd.s ; op1:f31; op2:f10; op3:f15; dest:f19; op1val:0x3ea6f6f6; op2val:0x3f8dc26a; op3val:0x3eb8e9a5; valaddr_reg:x16; val_offset:312; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f19, f31, f10, f15, 0x4, 0, x16, 312, x17, x15, 208, x18)

inst_27:
// rs1==f5, rs2==f6, rs3==f24, rd==f17, fs1 == 0 and fe1 == 0x7d and fm1 == 0x26f6f6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0dc26a and fs3 == 0 and fe3 == 0x7d and fm3 == 0x38e9a5 and rm_val == 3  
// opcode: fnmadd.s ; op1:f5; op2:f6; op3:f24; dest:f17; op1val:0x3ea6f6f6; op2val:0x3f8dc26a; op3val:0x3eb8e9a5; valaddr_reg:x16; val_offset:324; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f17, f5, f6, f24, 0x3, 0, x16, 324, x17, x15, 216, x18)

inst_28:
// rs1==f12, rs2==f20, rs3==f17, rd==f16, fs1 == 0 and fe1 == 0x7d and fm1 == 0x26f6f6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0dc26a and fs3 == 0 and fe3 == 0x7d and fm3 == 0x38e9a5 and rm_val == 2  
// opcode: fnmadd.s ; op1:f12; op2:f20; op3:f17; dest:f16; op1val:0x3ea6f6f6; op2val:0x3f8dc26a; op3val:0x3eb8e9a5; valaddr_reg:x16; val_offset:336; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f16, f12, f20, f17, 0x2, 0, x16, 336, x17, x15, 224, x18)

inst_29:
// rs1==f0, rs2==f9, rs3==f10, rd==f20, fs1 == 0 and fe1 == 0x7d and fm1 == 0x26f6f6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0dc26a and fs3 == 0 and fe3 == 0x7d and fm3 == 0x38e9a5 and rm_val == 1  
// opcode: fnmadd.s ; op1:f0; op2:f9; op3:f10; dest:f20; op1val:0x3ea6f6f6; op2val:0x3f8dc26a; op3val:0x3eb8e9a5; valaddr_reg:x16; val_offset:348; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f20, f0, f9, f10, 0x1, 0, x16, 348, x17, x15, 232, x18)

inst_30:
// rs1==f14, rs2==f0, rs3==f11, rd==f1, fs1 == 0 and fe1 == 0x7d and fm1 == 0x26f6f6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0dc26a and fs3 == 0 and fe3 == 0x7d and fm3 == 0x38e9a5 and rm_val == 0  
// opcode: fnmadd.s ; op1:f14; op2:f0; op3:f11; dest:f1; op1val:0x3ea6f6f6; op2val:0x3f8dc26a; op3val:0x3eb8e9a5; valaddr_reg:x16; val_offset:360; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f1, f14, f0, f11, 0x0, 0, x16, 360, x17, x15, 240, x18)

inst_31:
// rs1==f4, rs2==f26, rs3==f7, rd==f18, fs1 == 0 and fe1 == 0x7d and fm1 == 0x7166a1 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x3189bb and fs3 == 0 and fe3 == 0x7b and fm3 == 0x2769d5 and rm_val == 4  
// opcode: fnmadd.s ; op1:f4; op2:f26; op3:f7; dest:f18; op1val:0x3ef166a1; op2val:0x3e3189bb; op3val:0x3da769d5; valaddr_reg:x16; val_offset:372; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f18, f4, f26, f7, 0x4, 0, x16, 372, x17, x15, 248, x18)

inst_32:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7166a1 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x3189bb and fs3 == 0 and fe3 == 0x7b and fm3 == 0x2769d5 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ef166a1; op2val:0x3e3189bb; op3val:0x3da769d5; valaddr_reg:x16; val_offset:384; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 384, x17, x15, 256, x18)

inst_33:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7166a1 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x3189bb and fs3 == 0 and fe3 == 0x7b and fm3 == 0x2769d5 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ef166a1; op2val:0x3e3189bb; op3val:0x3da769d5; valaddr_reg:x16; val_offset:396; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 396, x17, x15, 264, x18)

inst_34:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7166a1 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x3189bb and fs3 == 0 and fe3 == 0x7b and fm3 == 0x2769d5 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ef166a1; op2val:0x3e3189bb; op3val:0x3da769d5; valaddr_reg:x16; val_offset:408; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 408, x17, x15, 272, x18)

inst_35:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7166a1 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x3189bb and fs3 == 0 and fe3 == 0x7b and fm3 == 0x2769d5 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ef166a1; op2val:0x3e3189bb; op3val:0x3da769d5; valaddr_reg:x16; val_offset:420; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 420, x17, x15, 280, x18)

inst_36:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4c9870 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x70c52e and fs3 == 0 and fe3 == 0x79 and fm3 == 0x406c80 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f4c9870; op2val:0x3cf0c52e; op3val:0x3cc06c80; valaddr_reg:x16; val_offset:432; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 432, x17, x15, 288, x18)

inst_37:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4c9870 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x70c52e and fs3 == 0 and fe3 == 0x79 and fm3 == 0x406c80 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f4c9870; op2val:0x3cf0c52e; op3val:0x3cc06c80; valaddr_reg:x16; val_offset:444; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 444, x17, x15, 296, x18)

inst_38:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4c9870 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x70c52e and fs3 == 0 and fe3 == 0x79 and fm3 == 0x406c80 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f4c9870; op2val:0x3cf0c52e; op3val:0x3cc06c80; valaddr_reg:x16; val_offset:456; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 456, x17, x15, 304, x18)

inst_39:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4c9870 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x70c52e and fs3 == 0 and fe3 == 0x79 and fm3 == 0x406c80 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f4c9870; op2val:0x3cf0c52e; op3val:0x3cc06c80; valaddr_reg:x16; val_offset:468; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 468, x17, x15, 312, x18)

inst_40:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4c9870 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x70c52e and fs3 == 0 and fe3 == 0x79 and fm3 == 0x406c80 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f4c9870; op2val:0x3cf0c52e; op3val:0x3cc06c80; valaddr_reg:x16; val_offset:480; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 480, x17, x15, 320, x18)

inst_41:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x607f8d and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1175e5 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x7f1f46 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ee07f8d; op2val:0x3f9175e5; op3val:0x3eff1f46; valaddr_reg:x16; val_offset:492; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 492, x17, x15, 328, x18)

inst_42:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x607f8d and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1175e5 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x7f1f46 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ee07f8d; op2val:0x3f9175e5; op3val:0x3eff1f46; valaddr_reg:x16; val_offset:504; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 504, x17, x15, 336, x18)

inst_43:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x607f8d and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1175e5 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x7f1f46 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ee07f8d; op2val:0x3f9175e5; op3val:0x3eff1f46; valaddr_reg:x16; val_offset:516; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 516, x17, x15, 344, x18)

inst_44:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x607f8d and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1175e5 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x7f1f46 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ee07f8d; op2val:0x3f9175e5; op3val:0x3eff1f46; valaddr_reg:x16; val_offset:528; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 528, x17, x15, 352, x18)

inst_45:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x607f8d and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1175e5 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x7f1f46 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ee07f8d; op2val:0x3f9175e5; op3val:0x3eff1f46; valaddr_reg:x16; val_offset:540; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 540, x17, x15, 360, x18)

inst_46:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4f4268 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x68911f and fs3 == 0 and fe3 == 0x7c and fm3 == 0x3c49ad and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f4f4268; op2val:0x3e68911f; op3val:0x3e3c49ad; valaddr_reg:x16; val_offset:552; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 552, x17, x15, 368, x18)

inst_47:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4f4268 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x68911f and fs3 == 0 and fe3 == 0x7c and fm3 == 0x3c49ad and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f4f4268; op2val:0x3e68911f; op3val:0x3e3c49ad; valaddr_reg:x16; val_offset:564; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 564, x17, x15, 376, x18)

inst_48:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4f4268 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x68911f and fs3 == 0 and fe3 == 0x7c and fm3 == 0x3c49ad and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f4f4268; op2val:0x3e68911f; op3val:0x3e3c49ad; valaddr_reg:x16; val_offset:576; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 576, x17, x15, 384, x18)

inst_49:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4f4268 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x68911f and fs3 == 0 and fe3 == 0x7c and fm3 == 0x3c49ad and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f4f4268; op2val:0x3e68911f; op3val:0x3e3c49ad; valaddr_reg:x16; val_offset:588; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 588, x17, x15, 392, x18)

inst_50:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4f4268 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x68911f and fs3 == 0 and fe3 == 0x7c and fm3 == 0x3c49ad and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f4f4268; op2val:0x3e68911f; op3val:0x3e3c49ad; valaddr_reg:x16; val_offset:600; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 600, x17, x15, 400, x18)

inst_51:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x395ddd and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ec5eb and fs3 == 0 and fe3 == 0x7e and fm3 == 0x387a71 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eb95ddd; op2val:0x3ffec5eb; op3val:0x3f387a71; valaddr_reg:x16; val_offset:612; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 612, x17, x15, 408, x18)

inst_52:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x395ddd and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ec5eb and fs3 == 0 and fe3 == 0x7e and fm3 == 0x387a71 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eb95ddd; op2val:0x3ffec5eb; op3val:0x3f387a71; valaddr_reg:x16; val_offset:624; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 624, x17, x15, 416, x18)

inst_53:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x395ddd and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ec5eb and fs3 == 0 and fe3 == 0x7e and fm3 == 0x387a71 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eb95ddd; op2val:0x3ffec5eb; op3val:0x3f387a71; valaddr_reg:x16; val_offset:636; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 636, x17, x15, 424, x18)

inst_54:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x395ddd and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ec5eb and fs3 == 0 and fe3 == 0x7e and fm3 == 0x387a71 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eb95ddd; op2val:0x3ffec5eb; op3val:0x3f387a71; valaddr_reg:x16; val_offset:648; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 648, x17, x15, 432, x18)

inst_55:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x395ddd and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ec5eb and fs3 == 0 and fe3 == 0x7e and fm3 == 0x387a71 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eb95ddd; op2val:0x3ffec5eb; op3val:0x3f387a71; valaddr_reg:x16; val_offset:660; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 660, x17, x15, 440, x18)

inst_56:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x212e25 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x46af6d and fs3 == 0 and fe3 == 0x7c and fm3 == 0x7a3049 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f212e25; op2val:0x3ec6af6d; op3val:0x3e7a3049; valaddr_reg:x16; val_offset:672; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 672, x17, x15, 448, x18)

inst_57:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x212e25 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x46af6d and fs3 == 0 and fe3 == 0x7c and fm3 == 0x7a3049 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f212e25; op2val:0x3ec6af6d; op3val:0x3e7a3049; valaddr_reg:x16; val_offset:684; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 684, x17, x15, 456, x18)

inst_58:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x212e25 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x46af6d and fs3 == 0 and fe3 == 0x7c and fm3 == 0x7a3049 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f212e25; op2val:0x3ec6af6d; op3val:0x3e7a3049; valaddr_reg:x16; val_offset:696; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 696, x17, x15, 464, x18)

inst_59:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x212e25 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x46af6d and fs3 == 0 and fe3 == 0x7c and fm3 == 0x7a3049 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f212e25; op2val:0x3ec6af6d; op3val:0x3e7a3049; valaddr_reg:x16; val_offset:708; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 708, x17, x15, 472, x18)

inst_60:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x212e25 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x46af6d and fs3 == 0 and fe3 == 0x7c and fm3 == 0x7a3049 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f212e25; op2val:0x3ec6af6d; op3val:0x3e7a3049; valaddr_reg:x16; val_offset:720; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 720, x17, x15, 480, x18)

inst_61:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x24a42e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7aebea and fs3 == 0 and fe3 == 0x7e and fm3 == 0x21600e and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f24a42e; op2val:0x3f7aebea; op3val:0x3f21600e; valaddr_reg:x16; val_offset:732; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 732, x17, x15, 488, x18)

inst_62:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x24a42e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7aebea and fs3 == 0 and fe3 == 0x7e and fm3 == 0x21600e and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f24a42e; op2val:0x3f7aebea; op3val:0x3f21600e; valaddr_reg:x16; val_offset:744; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 744, x17, x15, 496, x18)

inst_63:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x24a42e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7aebea and fs3 == 0 and fe3 == 0x7e and fm3 == 0x21600e and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f24a42e; op2val:0x3f7aebea; op3val:0x3f21600e; valaddr_reg:x16; val_offset:756; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 756, x17, x15, 504, x18)

inst_64:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x24a42e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7aebea and fs3 == 0 and fe3 == 0x7e and fm3 == 0x21600e and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f24a42e; op2val:0x3f7aebea; op3val:0x3f21600e; valaddr_reg:x16; val_offset:768; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 768, x17, x15, 512, x18)

inst_65:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x24a42e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7aebea and fs3 == 0 and fe3 == 0x7e and fm3 == 0x21600e and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f24a42e; op2val:0x3f7aebea; op3val:0x3f21600e; valaddr_reg:x16; val_offset:780; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 780, x17, x15, 520, x18)

inst_66:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x40363e and fs2 == 0 and fe2 == 0x83 and fm2 == 0x468e38 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x1514bd and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3cc0363e; op2val:0x41c68e38; op3val:0x3f1514bd; valaddr_reg:x16; val_offset:792; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 792, x17, x15, 528, x18)

inst_67:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x40363e and fs2 == 0 and fe2 == 0x83 and fm2 == 0x468e38 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x1514bd and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3cc0363e; op2val:0x41c68e38; op3val:0x3f1514bd; valaddr_reg:x16; val_offset:804; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 804, x17, x15, 536, x18)

inst_68:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x40363e and fs2 == 0 and fe2 == 0x83 and fm2 == 0x468e38 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x1514bd and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3cc0363e; op2val:0x41c68e38; op3val:0x3f1514bd; valaddr_reg:x16; val_offset:816; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 816, x17, x15, 544, x18)

inst_69:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x40363e and fs2 == 0 and fe2 == 0x83 and fm2 == 0x468e38 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x1514bd and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3cc0363e; op2val:0x41c68e38; op3val:0x3f1514bd; valaddr_reg:x16; val_offset:828; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 828, x17, x15, 552, x18)

inst_70:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x40363e and fs2 == 0 and fe2 == 0x83 and fm2 == 0x468e38 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x1514bd and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3cc0363e; op2val:0x41c68e38; op3val:0x3f1514bd; valaddr_reg:x16; val_offset:840; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 840, x17, x15, 560, x18)

inst_71:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x734aea and fs2 == 0 and fe2 == 0x7e and fm2 == 0x515c38 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x46f7ce and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f734aea; op2val:0x3f515c38; op3val:0x3f46f7ce; valaddr_reg:x16; val_offset:852; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 852, x17, x15, 568, x18)

inst_72:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x734aea and fs2 == 0 and fe2 == 0x7e and fm2 == 0x515c38 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x46f7ce and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f734aea; op2val:0x3f515c38; op3val:0x3f46f7ce; valaddr_reg:x16; val_offset:864; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 864, x17, x15, 576, x18)

inst_73:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x734aea and fs2 == 0 and fe2 == 0x7e and fm2 == 0x515c38 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x46f7ce and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f734aea; op2val:0x3f515c38; op3val:0x3f46f7ce; valaddr_reg:x16; val_offset:876; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 876, x17, x15, 584, x18)

inst_74:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x734aea and fs2 == 0 and fe2 == 0x7e and fm2 == 0x515c38 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x46f7ce and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f734aea; op2val:0x3f515c38; op3val:0x3f46f7ce; valaddr_reg:x16; val_offset:888; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 888, x17, x15, 592, x18)

inst_75:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x734aea and fs2 == 0 and fe2 == 0x7e and fm2 == 0x515c38 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x46f7ce and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f734aea; op2val:0x3f515c38; op3val:0x3f46f7ce; valaddr_reg:x16; val_offset:900; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 900, x17, x15, 600, x18)

inst_76:
// fs1 == 0 and fe1 == 0x76 and fm1 == 0x66e09b and fs2 == 0 and fe2 == 0x86 and fm2 == 0x7c9187 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x63c858 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3b66e09b; op2val:0x437c9187; op3val:0x3f63c858; valaddr_reg:x16; val_offset:912; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 912, x17, x15, 608, x18)

inst_77:
// fs1 == 0 and fe1 == 0x76 and fm1 == 0x66e09b and fs2 == 0 and fe2 == 0x86 and fm2 == 0x7c9187 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x63c858 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3b66e09b; op2val:0x437c9187; op3val:0x3f63c858; valaddr_reg:x16; val_offset:924; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 924, x17, x15, 616, x18)

inst_78:
// fs1 == 0 and fe1 == 0x76 and fm1 == 0x66e09b and fs2 == 0 and fe2 == 0x86 and fm2 == 0x7c9187 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x63c858 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3b66e09b; op2val:0x437c9187; op3val:0x3f63c858; valaddr_reg:x16; val_offset:936; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 936, x17, x15, 624, x18)

inst_79:
// fs1 == 0 and fe1 == 0x76 and fm1 == 0x66e09b and fs2 == 0 and fe2 == 0x86 and fm2 == 0x7c9187 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x63c858 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3b66e09b; op2val:0x437c9187; op3val:0x3f63c858; valaddr_reg:x16; val_offset:948; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 948, x17, x15, 632, x18)

inst_80:
// fs1 == 0 and fe1 == 0x76 and fm1 == 0x66e09b and fs2 == 0 and fe2 == 0x86 and fm2 == 0x7c9187 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x63c858 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3b66e09b; op2val:0x437c9187; op3val:0x3f63c858; valaddr_reg:x16; val_offset:960; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 960, x17, x15, 640, x18)

inst_81:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x078fc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3ffec7 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x4b565c and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f078fc4; op2val:0x3fbffec7; op3val:0x3f4b565c; valaddr_reg:x16; val_offset:972; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 972, x17, x15, 648, x18)

inst_82:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x078fc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3ffec7 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x4b565c and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f078fc4; op2val:0x3fbffec7; op3val:0x3f4b565c; valaddr_reg:x16; val_offset:984; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 984, x17, x15, 656, x18)

inst_83:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x078fc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3ffec7 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x4b565c and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f078fc4; op2val:0x3fbffec7; op3val:0x3f4b565c; valaddr_reg:x16; val_offset:996; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 996, x17, x15, 664, x18)

inst_84:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x078fc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3ffec7 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x4b565c and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f078fc4; op2val:0x3fbffec7; op3val:0x3f4b565c; valaddr_reg:x16; val_offset:1008; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1008, x17, x15, 672, x18)

inst_85:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x078fc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3ffec7 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x4b565c and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f078fc4; op2val:0x3fbffec7; op3val:0x3f4b565c; valaddr_reg:x16; val_offset:1020; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1020, x17, x15, 680, x18)

inst_86:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0439e9 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x00e07f and fs3 == 0 and fe3 == 0x7b and fm3 == 0x0521d2 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0439e9; op2val:0x3e00e07f; op3val:0x3d8521d2; valaddr_reg:x16; val_offset:1032; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1032, x17, x15, 688, x18)

inst_87:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0439e9 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x00e07f and fs3 == 0 and fe3 == 0x7b and fm3 == 0x0521d2 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0439e9; op2val:0x3e00e07f; op3val:0x3d8521d2; valaddr_reg:x16; val_offset:1044; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1044, x17, x15, 696, x18)

inst_88:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0439e9 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x00e07f and fs3 == 0 and fe3 == 0x7b and fm3 == 0x0521d2 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0439e9; op2val:0x3e00e07f; op3val:0x3d8521d2; valaddr_reg:x16; val_offset:1056; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1056, x17, x15, 704, x18)

inst_89:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0439e9 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x00e07f and fs3 == 0 and fe3 == 0x7b and fm3 == 0x0521d2 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0439e9; op2val:0x3e00e07f; op3val:0x3d8521d2; valaddr_reg:x16; val_offset:1068; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1068, x17, x15, 712, x18)

inst_90:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0439e9 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x00e07f and fs3 == 0 and fe3 == 0x7b and fm3 == 0x0521d2 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0439e9; op2val:0x3e00e07f; op3val:0x3d8521d2; valaddr_reg:x16; val_offset:1080; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1080, x17, x15, 720, x18)

inst_91:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x35f632 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1db770 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x6034bf and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eb5f632; op2val:0x3f9db770; op3val:0x3ee034bf; valaddr_reg:x16; val_offset:1092; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1092, x17, x15, 728, x18)

inst_92:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x35f632 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1db770 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x6034bf and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eb5f632; op2val:0x3f9db770; op3val:0x3ee034bf; valaddr_reg:x16; val_offset:1104; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1104, x17, x15, 736, x18)

inst_93:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x35f632 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1db770 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x6034bf and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eb5f632; op2val:0x3f9db770; op3val:0x3ee034bf; valaddr_reg:x16; val_offset:1116; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1116, x17, x15, 744, x18)

inst_94:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x35f632 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1db770 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x6034bf and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eb5f632; op2val:0x3f9db770; op3val:0x3ee034bf; valaddr_reg:x16; val_offset:1128; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1128, x17, x15, 752, x18)

inst_95:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x35f632 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1db770 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x6034bf and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eb5f632; op2val:0x3f9db770; op3val:0x3ee034bf; valaddr_reg:x16; val_offset:1140; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1140, x17, x15, 760, x18)

inst_96:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x748e97 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x01eada and fs3 == 0 and fe3 == 0x7e and fm3 == 0x78386a and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f748e97; op2val:0x3f81eada; op3val:0x3f78386a; valaddr_reg:x16; val_offset:1152; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1152, x17, x15, 768, x18)

inst_97:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x748e97 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x01eada and fs3 == 0 and fe3 == 0x7e and fm3 == 0x78386a and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f748e97; op2val:0x3f81eada; op3val:0x3f78386a; valaddr_reg:x16; val_offset:1164; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1164, x17, x15, 776, x18)

inst_98:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x748e97 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x01eada and fs3 == 0 and fe3 == 0x7e and fm3 == 0x78386a and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f748e97; op2val:0x3f81eada; op3val:0x3f78386a; valaddr_reg:x16; val_offset:1176; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1176, x17, x15, 784, x18)

inst_99:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x748e97 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x01eada and fs3 == 0 and fe3 == 0x7e and fm3 == 0x78386a and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f748e97; op2val:0x3f81eada; op3val:0x3f78386a; valaddr_reg:x16; val_offset:1188; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1188, x17, x15, 792, x18)

inst_100:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x748e97 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x01eada and fs3 == 0 and fe3 == 0x7e and fm3 == 0x78386a and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f748e97; op2val:0x3f81eada; op3val:0x3f78386a; valaddr_reg:x16; val_offset:1200; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1200, x17, x15, 800, x18)

inst_101:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x498bf9 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x21858a and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7e5455 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e498bf9; op2val:0x40a1858a; op3val:0x3f7e5455; valaddr_reg:x16; val_offset:1212; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1212, x17, x15, 808, x18)

inst_102:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x498bf9 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x21858a and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7e5455 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e498bf9; op2val:0x40a1858a; op3val:0x3f7e5455; valaddr_reg:x16; val_offset:1224; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1224, x17, x15, 816, x18)

inst_103:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x498bf9 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x21858a and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7e5455 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e498bf9; op2val:0x40a1858a; op3val:0x3f7e5455; valaddr_reg:x16; val_offset:1236; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1236, x17, x15, 824, x18)

inst_104:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x498bf9 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x21858a and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7e5455 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e498bf9; op2val:0x40a1858a; op3val:0x3f7e5455; valaddr_reg:x16; val_offset:1248; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1248, x17, x15, 832, x18)

inst_105:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x498bf9 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x21858a and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7e5455 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e498bf9; op2val:0x40a1858a; op3val:0x3f7e5455; valaddr_reg:x16; val_offset:1260; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1260, x17, x15, 840, x18)

inst_106:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x25b6b0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x42a2af and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7bfb81 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f25b6b0; op2val:0x3fc2a2af; op3val:0x3f7bfb81; valaddr_reg:x16; val_offset:1272; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1272, x17, x15, 848, x18)

inst_107:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x25b6b0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x42a2af and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7bfb81 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f25b6b0; op2val:0x3fc2a2af; op3val:0x3f7bfb81; valaddr_reg:x16; val_offset:1284; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1284, x17, x15, 856, x18)

inst_108:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x25b6b0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x42a2af and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7bfb81 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f25b6b0; op2val:0x3fc2a2af; op3val:0x3f7bfb81; valaddr_reg:x16; val_offset:1296; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1296, x17, x15, 864, x18)

inst_109:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x25b6b0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x42a2af and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7bfb81 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f25b6b0; op2val:0x3fc2a2af; op3val:0x3f7bfb81; valaddr_reg:x16; val_offset:1308; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1308, x17, x15, 872, x18)

inst_110:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x25b6b0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x42a2af and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7bfb81 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f25b6b0; op2val:0x3fc2a2af; op3val:0x3f7bfb81; valaddr_reg:x16; val_offset:1320; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1320, x17, x15, 880, x18)

inst_111:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x533288 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x3cc90d and fs3 == 0 and fe3 == 0x7c and fm3 == 0x1bbefa and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f533288; op2val:0x3e3cc90d; op3val:0x3e1bbefa; valaddr_reg:x16; val_offset:1332; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1332, x17, x15, 888, x18)

inst_112:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x533288 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x3cc90d and fs3 == 0 and fe3 == 0x7c and fm3 == 0x1bbefa and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f533288; op2val:0x3e3cc90d; op3val:0x3e1bbefa; valaddr_reg:x16; val_offset:1344; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1344, x17, x15, 896, x18)

inst_113:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x533288 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x3cc90d and fs3 == 0 and fe3 == 0x7c and fm3 == 0x1bbefa and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f533288; op2val:0x3e3cc90d; op3val:0x3e1bbefa; valaddr_reg:x16; val_offset:1356; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1356, x17, x15, 904, x18)

inst_114:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x533288 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x3cc90d and fs3 == 0 and fe3 == 0x7c and fm3 == 0x1bbefa and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f533288; op2val:0x3e3cc90d; op3val:0x3e1bbefa; valaddr_reg:x16; val_offset:1368; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1368, x17, x15, 912, x18)

inst_115:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x533288 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x3cc90d and fs3 == 0 and fe3 == 0x7c and fm3 == 0x1bbefa and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f533288; op2val:0x3e3cc90d; op3val:0x3e1bbefa; valaddr_reg:x16; val_offset:1380; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1380, x17, x15, 920, x18)

inst_116:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x42f990 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x43953d and fs3 == 0 and fe3 == 0x7e and fm3 == 0x14f5c2 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ec2f990; op2val:0x3fc3953d; op3val:0x3f14f5c2; valaddr_reg:x16; val_offset:1392; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1392, x17, x15, 928, x18)

inst_117:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x42f990 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x43953d and fs3 == 0 and fe3 == 0x7e and fm3 == 0x14f5c2 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ec2f990; op2val:0x3fc3953d; op3val:0x3f14f5c2; valaddr_reg:x16; val_offset:1404; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1404, x17, x15, 936, x18)

inst_118:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x42f990 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x43953d and fs3 == 0 and fe3 == 0x7e and fm3 == 0x14f5c2 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ec2f990; op2val:0x3fc3953d; op3val:0x3f14f5c2; valaddr_reg:x16; val_offset:1416; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1416, x17, x15, 944, x18)

inst_119:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x42f990 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x43953d and fs3 == 0 and fe3 == 0x7e and fm3 == 0x14f5c2 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ec2f990; op2val:0x3fc3953d; op3val:0x3f14f5c2; valaddr_reg:x16; val_offset:1428; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1428, x17, x15, 952, x18)

inst_120:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x42f990 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x43953d and fs3 == 0 and fe3 == 0x7e and fm3 == 0x14f5c2 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ec2f990; op2val:0x3fc3953d; op3val:0x3f14f5c2; valaddr_reg:x16; val_offset:1440; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1440, x17, x15, 960, x18)

inst_121:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2396b4 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x2f9c96 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x607029 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f2396b4; op2val:0x3daf9c96; op3val:0x3d607029; valaddr_reg:x16; val_offset:1452; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1452, x17, x15, 968, x18)

inst_122:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2396b4 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x2f9c96 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x607029 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f2396b4; op2val:0x3daf9c96; op3val:0x3d607029; valaddr_reg:x16; val_offset:1464; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1464, x17, x15, 976, x18)

inst_123:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2396b4 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x2f9c96 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x607029 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f2396b4; op2val:0x3daf9c96; op3val:0x3d607029; valaddr_reg:x16; val_offset:1476; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1476, x17, x15, 984, x18)

inst_124:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2396b4 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x2f9c96 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x607029 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f2396b4; op2val:0x3daf9c96; op3val:0x3d607029; valaddr_reg:x16; val_offset:1488; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1488, x17, x15, 992, x18)

inst_125:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2396b4 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x2f9c96 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x607029 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f2396b4; op2val:0x3daf9c96; op3val:0x3d607029; valaddr_reg:x16; val_offset:1500; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1500, x17, x15, 1000, x18)

inst_126:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3c5d09 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x180803 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x5fba45 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f3c5d09; op2val:0x3e980803; op3val:0x3e5fba45; valaddr_reg:x16; val_offset:1512; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1512, x17, x15, 1008, x18)

inst_127:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3c5d09 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x180803 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x5fba45 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f3c5d09; op2val:0x3e980803; op3val:0x3e5fba45; valaddr_reg:x16; val_offset:1524; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1524, x17, x15, 1016, x18)

inst_128:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3c5d09 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x180803 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x5fba45 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f3c5d09; op2val:0x3e980803; op3val:0x3e5fba45; valaddr_reg:x16; val_offset:1536; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1536, x17, x15, 1024, x18)

inst_129:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3c5d09 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x180803 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x5fba45 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f3c5d09; op2val:0x3e980803; op3val:0x3e5fba45; valaddr_reg:x16; val_offset:1548; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1548, x17, x15, 1032, x18)

inst_130:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3c5d09 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x180803 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x5fba45 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f3c5d09; op2val:0x3e980803; op3val:0x3e5fba45; valaddr_reg:x16; val_offset:1560; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1560, x17, x15, 1040, x18)

inst_131:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x73ebe8 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4a9779 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x410879 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3cf3ebe8; op2val:0x40ca9779; op3val:0x3e410879; valaddr_reg:x16; val_offset:1572; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1572, x17, x15, 1048, x18)

inst_132:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x73ebe8 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4a9779 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x410879 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3cf3ebe8; op2val:0x40ca9779; op3val:0x3e410879; valaddr_reg:x16; val_offset:1584; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1584, x17, x15, 1056, x18)

inst_133:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x73ebe8 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4a9779 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x410879 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3cf3ebe8; op2val:0x40ca9779; op3val:0x3e410879; valaddr_reg:x16; val_offset:1596; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1596, x17, x15, 1064, x18)

inst_134:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x73ebe8 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4a9779 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x410879 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3cf3ebe8; op2val:0x40ca9779; op3val:0x3e410879; valaddr_reg:x16; val_offset:1608; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1608, x17, x15, 1072, x18)

inst_135:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x73ebe8 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4a9779 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x410879 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3cf3ebe8; op2val:0x40ca9779; op3val:0x3e410879; valaddr_reg:x16; val_offset:1620; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1620, x17, x15, 1080, x18)

inst_136:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2e8ce6 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x13048c and fs3 == 0 and fe3 == 0x7d and fm3 == 0x487c04 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e2e8ce6; op2val:0x4013048c; op3val:0x3ec87c04; valaddr_reg:x16; val_offset:1632; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1632, x17, x15, 1088, x18)

inst_137:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2e8ce6 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x13048c and fs3 == 0 and fe3 == 0x7d and fm3 == 0x487c04 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e2e8ce6; op2val:0x4013048c; op3val:0x3ec87c04; valaddr_reg:x16; val_offset:1644; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1644, x17, x15, 1096, x18)

inst_138:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2e8ce6 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x13048c and fs3 == 0 and fe3 == 0x7d and fm3 == 0x487c04 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e2e8ce6; op2val:0x4013048c; op3val:0x3ec87c04; valaddr_reg:x16; val_offset:1656; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1656, x17, x15, 1104, x18)

inst_139:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2e8ce6 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x13048c and fs3 == 0 and fe3 == 0x7d and fm3 == 0x487c04 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e2e8ce6; op2val:0x4013048c; op3val:0x3ec87c04; valaddr_reg:x16; val_offset:1668; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1668, x17, x15, 1112, x18)

inst_140:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2e8ce6 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x13048c and fs3 == 0 and fe3 == 0x7d and fm3 == 0x487c04 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e2e8ce6; op2val:0x4013048c; op3val:0x3ec87c04; valaddr_reg:x16; val_offset:1680; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1680, x17, x15, 1120, x18)

inst_141:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x466370 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x191e22 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x6d5191 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ec66370; op2val:0x3f991e22; op3val:0x3eed5191; valaddr_reg:x16; val_offset:1692; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1692, x17, x15, 1128, x18)

inst_142:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x466370 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x191e22 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x6d5191 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ec66370; op2val:0x3f991e22; op3val:0x3eed5191; valaddr_reg:x16; val_offset:1704; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1704, x17, x15, 1136, x18)

inst_143:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x466370 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x191e22 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x6d5191 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ec66370; op2val:0x3f991e22; op3val:0x3eed5191; valaddr_reg:x16; val_offset:1716; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1716, x17, x15, 1144, x18)

inst_144:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x466370 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x191e22 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x6d5191 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ec66370; op2val:0x3f991e22; op3val:0x3eed5191; valaddr_reg:x16; val_offset:1728; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1728, x17, x15, 1152, x18)

inst_145:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x466370 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x191e22 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x6d5191 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ec66370; op2val:0x3f991e22; op3val:0x3eed5191; valaddr_reg:x16; val_offset:1740; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1740, x17, x15, 1160, x18)

inst_146:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x273b07 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x08d964 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x32cabc and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f273b07; op2val:0x3f08d964; op3val:0x3eb2cabc; valaddr_reg:x16; val_offset:1752; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1752, x17, x15, 1168, x18)

inst_147:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x273b07 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x08d964 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x32cabc and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f273b07; op2val:0x3f08d964; op3val:0x3eb2cabc; valaddr_reg:x16; val_offset:1764; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1764, x17, x15, 1176, x18)

inst_148:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x273b07 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x08d964 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x32cabc and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f273b07; op2val:0x3f08d964; op3val:0x3eb2cabc; valaddr_reg:x16; val_offset:1776; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1776, x17, x15, 1184, x18)

inst_149:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x273b07 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x08d964 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x32cabc and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f273b07; op2val:0x3f08d964; op3val:0x3eb2cabc; valaddr_reg:x16; val_offset:1788; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1788, x17, x15, 1192, x18)

inst_150:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x273b07 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x08d964 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x32cabc and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f273b07; op2val:0x3f08d964; op3val:0x3eb2cabc; valaddr_reg:x16; val_offset:1800; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1800, x17, x15, 1200, x18)

inst_151:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x53a1ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x090a7d and fs3 == 0 and fe3 == 0x7e and fm3 == 0x629462 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ed3a1ab; op2val:0x40090a7d; op3val:0x3f629462; valaddr_reg:x16; val_offset:1812; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1812, x17, x15, 1208, x18)

inst_152:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x53a1ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x090a7d and fs3 == 0 and fe3 == 0x7e and fm3 == 0x629462 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ed3a1ab; op2val:0x40090a7d; op3val:0x3f629462; valaddr_reg:x16; val_offset:1824; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1824, x17, x15, 1216, x18)

inst_153:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x53a1ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x090a7d and fs3 == 0 and fe3 == 0x7e and fm3 == 0x629462 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ed3a1ab; op2val:0x40090a7d; op3val:0x3f629462; valaddr_reg:x16; val_offset:1836; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1836, x17, x15, 1224, x18)

inst_154:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x53a1ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x090a7d and fs3 == 0 and fe3 == 0x7e and fm3 == 0x629462 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ed3a1ab; op2val:0x40090a7d; op3val:0x3f629462; valaddr_reg:x16; val_offset:1848; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1848, x17, x15, 1232, x18)

inst_155:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x53a1ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x090a7d and fs3 == 0 and fe3 == 0x7e and fm3 == 0x629462 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ed3a1ab; op2val:0x40090a7d; op3val:0x3f629462; valaddr_reg:x16; val_offset:1860; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1860, x17, x15, 1240, x18)

inst_156:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x051c60 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x64c9f9 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6dec95 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f051c60; op2val:0x3fe4c9f9; op3val:0x3f6dec95; valaddr_reg:x16; val_offset:1872; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1872, x17, x15, 1248, x18)

inst_157:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x051c60 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x64c9f9 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6dec95 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f051c60; op2val:0x3fe4c9f9; op3val:0x3f6dec95; valaddr_reg:x16; val_offset:1884; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1884, x17, x15, 1256, x18)

inst_158:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x051c60 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x64c9f9 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6dec95 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f051c60; op2val:0x3fe4c9f9; op3val:0x3f6dec95; valaddr_reg:x16; val_offset:1896; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1896, x17, x15, 1264, x18)

inst_159:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x051c60 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x64c9f9 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6dec95 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f051c60; op2val:0x3fe4c9f9; op3val:0x3f6dec95; valaddr_reg:x16; val_offset:1908; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1908, x17, x15, 1272, x18)

inst_160:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x051c60 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x64c9f9 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6dec95 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f051c60; op2val:0x3fe4c9f9; op3val:0x3f6dec95; valaddr_reg:x16; val_offset:1920; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1920, x17, x15, 1280, x18)

inst_161:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2336b3 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x0f9076 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x370f50 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f2336b3; op2val:0x3e0f9076; op3val:0x3db70f50; valaddr_reg:x16; val_offset:1932; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1932, x17, x15, 1288, x18)

inst_162:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2336b3 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x0f9076 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x370f50 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f2336b3; op2val:0x3e0f9076; op3val:0x3db70f50; valaddr_reg:x16; val_offset:1944; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1944, x17, x15, 1296, x18)

inst_163:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2336b3 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x0f9076 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x370f50 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f2336b3; op2val:0x3e0f9076; op3val:0x3db70f50; valaddr_reg:x16; val_offset:1956; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1956, x17, x15, 1304, x18)

inst_164:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2336b3 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x0f9076 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x370f50 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f2336b3; op2val:0x3e0f9076; op3val:0x3db70f50; valaddr_reg:x16; val_offset:1968; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1968, x17, x15, 1312, x18)

inst_165:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2336b3 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x0f9076 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x370f50 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f2336b3; op2val:0x3e0f9076; op3val:0x3db70f50; valaddr_reg:x16; val_offset:1980; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1980, x17, x15, 1320, x18)

inst_166:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x78412a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b3fe6 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x26117f and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ef8412a; op2val:0x3fab3fe6; op3val:0x3f26117f; valaddr_reg:x16; val_offset:1992; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1992, x17, x15, 1328, x18)

inst_167:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x78412a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b3fe6 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x26117f and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ef8412a; op2val:0x3fab3fe6; op3val:0x3f26117f; valaddr_reg:x16; val_offset:2004; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 2004, x17, x15, 1336, x18)

inst_168:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x78412a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b3fe6 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x26117f and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ef8412a; op2val:0x3fab3fe6; op3val:0x3f26117f; valaddr_reg:x16; val_offset:2016; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 2016, x17, x15, 1344, x18)

inst_169:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x78412a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b3fe6 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x26117f and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ef8412a; op2val:0x3fab3fe6; op3val:0x3f26117f; valaddr_reg:x16; val_offset:2028; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 2028, x17, x15, 1352, x18)
addi x16,x16,2040

inst_170:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x78412a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b3fe6 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x26117f and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ef8412a; op2val:0x3fab3fe6; op3val:0x3f26117f; valaddr_reg:x16; val_offset:0; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 0, x17, x15, 1360, x18)

inst_171:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2dc67a and fs2 == 0 and fe2 == 0x7c and fm2 == 0x0d9195 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x403248 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e2dc67a; op2val:0x3e0d9195; op3val:0x3cc03248; valaddr_reg:x16; val_offset:12; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 12, x17, x15, 1368, x18)

inst_172:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2dc67a and fs2 == 0 and fe2 == 0x7c and fm2 == 0x0d9195 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x403248 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e2dc67a; op2val:0x3e0d9195; op3val:0x3cc03248; valaddr_reg:x16; val_offset:24; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 24, x17, x15, 1376, x18)

inst_173:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2dc67a and fs2 == 0 and fe2 == 0x7c and fm2 == 0x0d9195 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x403248 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e2dc67a; op2val:0x3e0d9195; op3val:0x3cc03248; valaddr_reg:x16; val_offset:36; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 36, x17, x15, 1384, x18)

inst_174:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2dc67a and fs2 == 0 and fe2 == 0x7c and fm2 == 0x0d9195 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x403248 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e2dc67a; op2val:0x3e0d9195; op3val:0x3cc03248; valaddr_reg:x16; val_offset:48; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 48, x17, x15, 1392, x18)

inst_175:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2dc67a and fs2 == 0 and fe2 == 0x7c and fm2 == 0x0d9195 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x403248 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e2dc67a; op2val:0x3e0d9195; op3val:0x3cc03248; valaddr_reg:x16; val_offset:60; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 60, x17, x15, 1400, x18)

inst_176:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x396f8d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7ea600 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x3874ec and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eb96f8d; op2val:0x3f7ea600; op3val:0x3eb874ec; valaddr_reg:x16; val_offset:72; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 72, x17, x15, 1408, x18)

inst_177:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x396f8d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7ea600 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x3874ec and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eb96f8d; op2val:0x3f7ea600; op3val:0x3eb874ec; valaddr_reg:x16; val_offset:84; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 84, x17, x15, 1416, x18)

inst_178:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x396f8d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7ea600 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x3874ec and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eb96f8d; op2val:0x3f7ea600; op3val:0x3eb874ec; valaddr_reg:x16; val_offset:96; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 96, x17, x15, 1424, x18)

inst_179:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x396f8d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7ea600 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x3874ec and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eb96f8d; op2val:0x3f7ea600; op3val:0x3eb874ec; valaddr_reg:x16; val_offset:108; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 108, x17, x15, 1432, x18)

inst_180:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x396f8d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7ea600 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x3874ec and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eb96f8d; op2val:0x3f7ea600; op3val:0x3eb874ec; valaddr_reg:x16; val_offset:120; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 120, x17, x15, 1440, x18)

inst_181:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4916e7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x291f1e and fs3 == 0 and fe3 == 0x7e and fm3 == 0x04d891 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ec916e7; op2val:0x3fa91f1e; op3val:0x3f04d891; valaddr_reg:x16; val_offset:132; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 132, x17, x15, 1448, x18)

inst_182:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4916e7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x291f1e and fs3 == 0 and fe3 == 0x7e and fm3 == 0x04d891 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ec916e7; op2val:0x3fa91f1e; op3val:0x3f04d891; valaddr_reg:x16; val_offset:144; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 144, x17, x15, 1456, x18)

inst_183:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4916e7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x291f1e and fs3 == 0 and fe3 == 0x7e and fm3 == 0x04d891 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ec916e7; op2val:0x3fa91f1e; op3val:0x3f04d891; valaddr_reg:x16; val_offset:156; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 156, x17, x15, 1464, x18)

inst_184:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4916e7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x291f1e and fs3 == 0 and fe3 == 0x7e and fm3 == 0x04d891 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ec916e7; op2val:0x3fa91f1e; op3val:0x3f04d891; valaddr_reg:x16; val_offset:168; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 168, x17, x15, 1472, x18)

inst_185:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4916e7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x291f1e and fs3 == 0 and fe3 == 0x7e and fm3 == 0x04d891 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ec916e7; op2val:0x3fa91f1e; op3val:0x3f04d891; valaddr_reg:x16; val_offset:180; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 180, x17, x15, 1480, x18)

inst_186:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7cf45e and fs2 == 0 and fe2 == 0x7b and fm2 == 0x6e3f4c and fs3 == 0 and fe3 == 0x7b and fm3 == 0x6b69ba and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f7cf45e; op2val:0x3dee3f4c; op3val:0x3deb69ba; valaddr_reg:x16; val_offset:192; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 192, x17, x15, 1488, x18)

inst_187:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7cf45e and fs2 == 0 and fe2 == 0x7b and fm2 == 0x6e3f4c and fs3 == 0 and fe3 == 0x7b and fm3 == 0x6b69ba and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f7cf45e; op2val:0x3dee3f4c; op3val:0x3deb69ba; valaddr_reg:x16; val_offset:204; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 204, x17, x15, 1496, x18)

inst_188:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7cf45e and fs2 == 0 and fe2 == 0x7b and fm2 == 0x6e3f4c and fs3 == 0 and fe3 == 0x7b and fm3 == 0x6b69ba and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f7cf45e; op2val:0x3dee3f4c; op3val:0x3deb69ba; valaddr_reg:x16; val_offset:216; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 216, x17, x15, 1504, x18)

inst_189:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7cf45e and fs2 == 0 and fe2 == 0x7b and fm2 == 0x6e3f4c and fs3 == 0 and fe3 == 0x7b and fm3 == 0x6b69ba and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f7cf45e; op2val:0x3dee3f4c; op3val:0x3deb69ba; valaddr_reg:x16; val_offset:228; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 228, x17, x15, 1512, x18)

inst_190:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7cf45e and fs2 == 0 and fe2 == 0x7b and fm2 == 0x6e3f4c and fs3 == 0 and fe3 == 0x7b and fm3 == 0x6b69ba and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f7cf45e; op2val:0x3dee3f4c; op3val:0x3deb69ba; valaddr_reg:x16; val_offset:240; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 240, x17, x15, 1520, x18)

inst_191:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0bdd66 and fs2 == 0 and fe2 == 0x74 and fm2 == 0x5b111f and fs3 == 0 and fe3 == 0x73 and fm3 == 0x6f5f83 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0bdd66; op2val:0x3a5b111f; op3val:0x39ef5f83; valaddr_reg:x16; val_offset:252; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 252, x17, x15, 1528, x18)

inst_192:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0bdd66 and fs2 == 0 and fe2 == 0x74 and fm2 == 0x5b111f and fs3 == 0 and fe3 == 0x73 and fm3 == 0x6f5f83 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0bdd66; op2val:0x3a5b111f; op3val:0x39ef5f83; valaddr_reg:x16; val_offset:264; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 264, x17, x15, 1536, x18)

inst_193:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0bdd66 and fs2 == 0 and fe2 == 0x74 and fm2 == 0x5b111f and fs3 == 0 and fe3 == 0x73 and fm3 == 0x6f5f83 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0bdd66; op2val:0x3a5b111f; op3val:0x39ef5f83; valaddr_reg:x16; val_offset:276; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 276, x17, x15, 1544, x18)

inst_194:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0bdd66 and fs2 == 0 and fe2 == 0x74 and fm2 == 0x5b111f and fs3 == 0 and fe3 == 0x73 and fm3 == 0x6f5f83 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0bdd66; op2val:0x3a5b111f; op3val:0x39ef5f83; valaddr_reg:x16; val_offset:288; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 288, x17, x15, 1552, x18)

inst_195:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0bdd66 and fs2 == 0 and fe2 == 0x74 and fm2 == 0x5b111f and fs3 == 0 and fe3 == 0x73 and fm3 == 0x6f5f83 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0bdd66; op2val:0x3a5b111f; op3val:0x39ef5f83; valaddr_reg:x16; val_offset:300; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 300, x17, x15, 1560, x18)

inst_196:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x080570 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x21f923 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x2c1f97 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f080570; op2val:0x3fa1f923; op3val:0x3f2c1f97; valaddr_reg:x16; val_offset:312; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 312, x17, x15, 1568, x18)

inst_197:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x080570 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x21f923 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x2c1f97 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f080570; op2val:0x3fa1f923; op3val:0x3f2c1f97; valaddr_reg:x16; val_offset:324; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 324, x17, x15, 1576, x18)

inst_198:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x080570 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x21f923 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x2c1f97 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f080570; op2val:0x3fa1f923; op3val:0x3f2c1f97; valaddr_reg:x16; val_offset:336; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 336, x17, x15, 1584, x18)

inst_199:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x080570 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x21f923 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x2c1f97 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f080570; op2val:0x3fa1f923; op3val:0x3f2c1f97; valaddr_reg:x16; val_offset:348; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 348, x17, x15, 1592, x18)

inst_200:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x080570 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x21f923 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x2c1f97 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f080570; op2val:0x3fa1f923; op3val:0x3f2c1f97; valaddr_reg:x16; val_offset:360; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 360, x17, x15, 1600, x18)

inst_201:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5934da and fs2 == 0 and fe2 == 0x7e and fm2 == 0x42d0f1 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x254b55 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ed934da; op2val:0x3f42d0f1; op3val:0x3ea54b55; valaddr_reg:x16; val_offset:372; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 372, x17, x15, 1608, x18)

inst_202:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5934da and fs2 == 0 and fe2 == 0x7e and fm2 == 0x42d0f1 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x254b55 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ed934da; op2val:0x3f42d0f1; op3val:0x3ea54b55; valaddr_reg:x16; val_offset:384; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 384, x17, x15, 1616, x18)

inst_203:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5934da and fs2 == 0 and fe2 == 0x7e and fm2 == 0x42d0f1 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x254b55 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ed934da; op2val:0x3f42d0f1; op3val:0x3ea54b55; valaddr_reg:x16; val_offset:396; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 396, x17, x15, 1624, x18)

inst_204:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5934da and fs2 == 0 and fe2 == 0x7e and fm2 == 0x42d0f1 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x254b55 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ed934da; op2val:0x3f42d0f1; op3val:0x3ea54b55; valaddr_reg:x16; val_offset:408; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 408, x17, x15, 1632, x18)

inst_205:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5934da and fs2 == 0 and fe2 == 0x7e and fm2 == 0x42d0f1 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x254b55 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ed934da; op2val:0x3f42d0f1; op3val:0x3ea54b55; valaddr_reg:x16; val_offset:420; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 420, x17, x15, 1640, x18)

inst_206:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x636bf1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x71f15f and fs3 == 0 and fe3 == 0x7e and fm3 == 0x56ef0b and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3de36bf1; op2val:0x40f1f15f; op3val:0x3f56ef0b; valaddr_reg:x16; val_offset:432; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 432, x17, x15, 1648, x18)

inst_207:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x636bf1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x71f15f and fs3 == 0 and fe3 == 0x7e and fm3 == 0x56ef0b and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3de36bf1; op2val:0x40f1f15f; op3val:0x3f56ef0b; valaddr_reg:x16; val_offset:444; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 444, x17, x15, 1656, x18)

inst_208:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x636bf1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x71f15f and fs3 == 0 and fe3 == 0x7e and fm3 == 0x56ef0b and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3de36bf1; op2val:0x40f1f15f; op3val:0x3f56ef0b; valaddr_reg:x16; val_offset:456; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 456, x17, x15, 1664, x18)

inst_209:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x636bf1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x71f15f and fs3 == 0 and fe3 == 0x7e and fm3 == 0x56ef0b and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3de36bf1; op2val:0x40f1f15f; op3val:0x3f56ef0b; valaddr_reg:x16; val_offset:468; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 468, x17, x15, 1672, x18)

inst_210:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x636bf1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x71f15f and fs3 == 0 and fe3 == 0x7e and fm3 == 0x56ef0b and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3de36bf1; op2val:0x40f1f15f; op3val:0x3f56ef0b; valaddr_reg:x16; val_offset:480; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 480, x17, x15, 1680, x18)

inst_211:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x71c5bf and fs2 == 1 and fe2 == 0x7f and fm2 == 0x72dc41 and fs3 == 0 and fe3 == 0xa6 and fm3 == 0x55186f and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5471c5bf; op2val:0xbff2dc41; op3val:0x5355186f; valaddr_reg:x16; val_offset:492; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 492, x17, x15, 1688, x18)

inst_212:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x71c5bf and fs2 == 1 and fe2 == 0x7f and fm2 == 0x72dc41 and fs3 == 0 and fe3 == 0xa6 and fm3 == 0x55186f and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5471c5bf; op2val:0xbff2dc41; op3val:0x5355186f; valaddr_reg:x16; val_offset:504; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 504, x17, x15, 1696, x18)

inst_213:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x71c5bf and fs2 == 1 and fe2 == 0x7f and fm2 == 0x72dc41 and fs3 == 0 and fe3 == 0xa6 and fm3 == 0x55186f and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5471c5bf; op2val:0xbff2dc41; op3val:0x5355186f; valaddr_reg:x16; val_offset:516; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 516, x17, x15, 1704, x18)

inst_214:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x71c5bf and fs2 == 1 and fe2 == 0x7f and fm2 == 0x72dc41 and fs3 == 0 and fe3 == 0xa6 and fm3 == 0x55186f and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5471c5bf; op2val:0xbff2dc41; op3val:0x5355186f; valaddr_reg:x16; val_offset:528; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 528, x17, x15, 1712, x18)

inst_215:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x71c5bf and fs2 == 1 and fe2 == 0x7f and fm2 == 0x72dc41 and fs3 == 0 and fe3 == 0xa6 and fm3 == 0x55186f and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5471c5bf; op2val:0xbff2dc41; op3val:0x5355186f; valaddr_reg:x16; val_offset:540; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 540, x17, x15, 1720, x18)

inst_216:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x1c1d96 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x2c5d38 and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x16e346 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x541c1d96; op2val:0xbfac5d38; op3val:0x5496e346; valaddr_reg:x16; val_offset:552; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 552, x17, x15, 1728, x18)

inst_217:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x1c1d96 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x2c5d38 and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x16e346 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x541c1d96; op2val:0xbfac5d38; op3val:0x5496e346; valaddr_reg:x16; val_offset:564; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 564, x17, x15, 1736, x18)

inst_218:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x1c1d96 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x2c5d38 and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x16e346 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x541c1d96; op2val:0xbfac5d38; op3val:0x5496e346; valaddr_reg:x16; val_offset:576; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 576, x17, x15, 1744, x18)

inst_219:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x1c1d96 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x2c5d38 and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x16e346 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x541c1d96; op2val:0xbfac5d38; op3val:0x5496e346; valaddr_reg:x16; val_offset:588; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 588, x17, x15, 1752, x18)

inst_220:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x1c1d96 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x2c5d38 and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x16e346 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x541c1d96; op2val:0xbfac5d38; op3val:0x5496e346; valaddr_reg:x16; val_offset:600; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 600, x17, x15, 1760, x18)

inst_221:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x528eb6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fd496 and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x16ca7f and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54528eb6; op2val:0xbf7fd496; op3val:0x5496ca7f; valaddr_reg:x16; val_offset:612; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 612, x17, x15, 1768, x18)

inst_222:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x528eb6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fd496 and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x16ca7f and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54528eb6; op2val:0xbf7fd496; op3val:0x5496ca7f; valaddr_reg:x16; val_offset:624; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 624, x17, x15, 1776, x18)

inst_223:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x528eb6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fd496 and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x16ca7f and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54528eb6; op2val:0xbf7fd496; op3val:0x5496ca7f; valaddr_reg:x16; val_offset:636; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 636, x17, x15, 1784, x18)

inst_224:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x528eb6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fd496 and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x16ca7f and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54528eb6; op2val:0xbf7fd496; op3val:0x5496ca7f; valaddr_reg:x16; val_offset:648; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 648, x17, x15, 1792, x18)

inst_225:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x528eb6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fd496 and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x16ca7f and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54528eb6; op2val:0xbf7fd496; op3val:0x5496ca7f; valaddr_reg:x16; val_offset:660; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 660, x17, x15, 1800, x18)

inst_226:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x3eb488 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x029d33 and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x67acce and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x543eb488; op2val:0xbe829d33; op3val:0x54e7acce; valaddr_reg:x16; val_offset:672; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 672, x17, x15, 1808, x18)

inst_227:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x3eb488 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x029d33 and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x67acce and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x543eb488; op2val:0xbe829d33; op3val:0x54e7acce; valaddr_reg:x16; val_offset:684; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 684, x17, x15, 1816, x18)

inst_228:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x3eb488 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x029d33 and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x67acce and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x543eb488; op2val:0xbe829d33; op3val:0x54e7acce; valaddr_reg:x16; val_offset:696; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 696, x17, x15, 1824, x18)

inst_229:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x3eb488 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x029d33 and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x67acce and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x543eb488; op2val:0xbe829d33; op3val:0x54e7acce; valaddr_reg:x16; val_offset:708; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 708, x17, x15, 1832, x18)

inst_230:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x3eb488 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x029d33 and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x67acce and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x543eb488; op2val:0xbe829d33; op3val:0x54e7acce; valaddr_reg:x16; val_offset:720; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 720, x17, x15, 1840, x18)

inst_231:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x38a526 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4bf11d and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x367391 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5438a526; op2val:0xbf4bf11d; op3val:0x54b67391; valaddr_reg:x16; val_offset:732; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 732, x17, x15, 1848, x18)

inst_232:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x38a526 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4bf11d and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x367391 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5438a526; op2val:0xbf4bf11d; op3val:0x54b67391; valaddr_reg:x16; val_offset:744; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 744, x17, x15, 1856, x18)

inst_233:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x38a526 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4bf11d and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x367391 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5438a526; op2val:0xbf4bf11d; op3val:0x54b67391; valaddr_reg:x16; val_offset:756; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 756, x17, x15, 1864, x18)

inst_234:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x38a526 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4bf11d and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x367391 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5438a526; op2val:0xbf4bf11d; op3val:0x54b67391; valaddr_reg:x16; val_offset:768; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 768, x17, x15, 1872, x18)

inst_235:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x38a526 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4bf11d and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x367391 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5438a526; op2val:0xbf4bf11d; op3val:0x54b67391; valaddr_reg:x16; val_offset:780; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 780, x17, x15, 1880, x18)

inst_236:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x68da13 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2f6ead and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x40dc82 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54e8da13; op2val:0xbf2f6ead; op3val:0x5440dc82; valaddr_reg:x16; val_offset:792; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 792, x17, x15, 1888, x18)

inst_237:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x68da13 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2f6ead and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x40dc82 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54e8da13; op2val:0xbf2f6ead; op3val:0x5440dc82; valaddr_reg:x16; val_offset:804; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 804, x17, x15, 1896, x18)

inst_238:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x68da13 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2f6ead and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x40dc82 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54e8da13; op2val:0xbf2f6ead; op3val:0x5440dc82; valaddr_reg:x16; val_offset:816; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 816, x17, x15, 1904, x18)

inst_239:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x68da13 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2f6ead and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x40dc82 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54e8da13; op2val:0xbf2f6ead; op3val:0x5440dc82; valaddr_reg:x16; val_offset:828; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 828, x17, x15, 1912, x18)

inst_240:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x68da13 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2f6ead and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x40dc82 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54e8da13; op2val:0xbf2f6ead; op3val:0x5440dc82; valaddr_reg:x16; val_offset:840; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 840, x17, x15, 1920, x18)

inst_241:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x7f7b4d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3f97fc and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x0196a8 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x547f7b4d; op2val:0xbfbf97fc; op3val:0x540196a8; valaddr_reg:x16; val_offset:852; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 852, x17, x15, 1928, x18)

inst_242:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x7f7b4d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3f97fc and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x0196a8 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x547f7b4d; op2val:0xbfbf97fc; op3val:0x540196a8; valaddr_reg:x16; val_offset:864; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 864, x17, x15, 1936, x18)

inst_243:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x7f7b4d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3f97fc and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x0196a8 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x547f7b4d; op2val:0xbfbf97fc; op3val:0x540196a8; valaddr_reg:x16; val_offset:876; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 876, x17, x15, 1944, x18)

inst_244:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x7f7b4d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3f97fc and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x0196a8 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x547f7b4d; op2val:0xbfbf97fc; op3val:0x540196a8; valaddr_reg:x16; val_offset:888; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 888, x17, x15, 1952, x18)

inst_245:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x7f7b4d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3f97fc and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x0196a8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x547f7b4d; op2val:0xbfbf97fc; op3val:0x540196a8; valaddr_reg:x16; val_offset:900; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 900, x17, x15, 1960, x18)

inst_246:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x6724ec and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3456d6 and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x3a5744 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54e724ec; op2val:0xbf3456d6; op3val:0x543a5744; valaddr_reg:x16; val_offset:912; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 912, x17, x15, 1968, x18)

inst_247:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x6724ec and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3456d6 and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x3a5744 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54e724ec; op2val:0xbf3456d6; op3val:0x543a5744; valaddr_reg:x16; val_offset:924; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 924, x17, x15, 1976, x18)

inst_248:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x6724ec and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3456d6 and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x3a5744 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54e724ec; op2val:0xbf3456d6; op3val:0x543a5744; valaddr_reg:x16; val_offset:936; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 936, x17, x15, 1984, x18)

inst_249:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x6724ec and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3456d6 and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x3a5744 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54e724ec; op2val:0xbf3456d6; op3val:0x543a5744; valaddr_reg:x16; val_offset:948; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 948, x17, x15, 1992, x18)

inst_250:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x6724ec and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3456d6 and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x3a5744 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54e724ec; op2val:0xbf3456d6; op3val:0x543a5744; valaddr_reg:x16; val_offset:960; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 960, x17, x15, 2000, x18)

inst_251:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x74b52c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3e9722 and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x24e888 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5374b52c; op2val:0xc03e9722; op3val:0x54a4e888; valaddr_reg:x16; val_offset:972; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 972, x17, x15, 2008, x18)

inst_252:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x74b52c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3e9722 and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x24e888 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5374b52c; op2val:0xc03e9722; op3val:0x54a4e888; valaddr_reg:x16; val_offset:984; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 984, x17, x15, 2016, x18)

inst_253:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x74b52c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3e9722 and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x24e888 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5374b52c; op2val:0xc03e9722; op3val:0x54a4e888; valaddr_reg:x16; val_offset:996; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 996, x17, x15, 2024, x18)
RVTEST_SIGBASE(x15,signature_x15_2)

inst_254:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x74b52c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3e9722 and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x24e888 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5374b52c; op2val:0xc03e9722; op3val:0x54a4e888; valaddr_reg:x16; val_offset:1008; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1008, x17, x15, 0, x18)

inst_255:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x74b52c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3e9722 and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x24e888 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5374b52c; op2val:0xc03e9722; op3val:0x54a4e888; valaddr_reg:x16; val_offset:1020; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1020, x17, x15, 8, x18)

inst_256:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x4b091b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0887d5 and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x13b76e and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x544b091b; op2val:0xbf8887d5; op3val:0x5493b76e; valaddr_reg:x16; val_offset:1032; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1032, x17, x15, 16, x18)

inst_257:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x4b091b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0887d5 and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x13b76e and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x544b091b; op2val:0xbf8887d5; op3val:0x5493b76e; valaddr_reg:x16; val_offset:1044; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1044, x17, x15, 24, x18)

inst_258:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x4b091b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0887d5 and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x13b76e and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x544b091b; op2val:0xbf8887d5; op3val:0x5493b76e; valaddr_reg:x16; val_offset:1056; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1056, x17, x15, 32, x18)

inst_259:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x4b091b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0887d5 and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x13b76e and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x544b091b; op2val:0xbf8887d5; op3val:0x5493b76e; valaddr_reg:x16; val_offset:1068; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1068, x17, x15, 40, x18)

inst_260:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x4b091b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0887d5 and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x13b76e and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x544b091b; op2val:0xbf8887d5; op3val:0x5493b76e; valaddr_reg:x16; val_offset:1080; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1080, x17, x15, 48, x18)

inst_261:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x3cb281 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4dfed5 and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x50526f and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54bcb281; op2val:0xbf4dfed5; op3val:0x5450526f; valaddr_reg:x16; val_offset:1092; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1092, x17, x15, 56, x18)

inst_262:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x3cb281 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4dfed5 and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x50526f and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54bcb281; op2val:0xbf4dfed5; op3val:0x5450526f; valaddr_reg:x16; val_offset:1104; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1104, x17, x15, 64, x18)

inst_263:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x3cb281 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4dfed5 and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x50526f and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54bcb281; op2val:0xbf4dfed5; op3val:0x5450526f; valaddr_reg:x16; val_offset:1116; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1116, x17, x15, 72, x18)

inst_264:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x3cb281 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4dfed5 and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x50526f and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54bcb281; op2val:0xbf4dfed5; op3val:0x5450526f; valaddr_reg:x16; val_offset:1128; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1128, x17, x15, 80, x18)

inst_265:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x3cb281 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4dfed5 and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x50526f and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54bcb281; op2val:0xbf4dfed5; op3val:0x5450526f; valaddr_reg:x16; val_offset:1140; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1140, x17, x15, 88, x18)

inst_266:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x4541d5 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x682ba3 and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x69a357 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x53c541d5; op2val:0xbee82ba3; op3val:0x54e9a357; valaddr_reg:x16; val_offset:1152; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1152, x17, x15, 96, x18)

inst_267:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x4541d5 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x682ba3 and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x69a357 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x53c541d5; op2val:0xbee82ba3; op3val:0x54e9a357; valaddr_reg:x16; val_offset:1164; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1164, x17, x15, 104, x18)

inst_268:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x4541d5 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x682ba3 and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x69a357 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x53c541d5; op2val:0xbee82ba3; op3val:0x54e9a357; valaddr_reg:x16; val_offset:1176; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1176, x17, x15, 112, x18)

inst_269:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x4541d5 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x682ba3 and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x69a357 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x53c541d5; op2val:0xbee82ba3; op3val:0x54e9a357; valaddr_reg:x16; val_offset:1188; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1188, x17, x15, 120, x18)

inst_270:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x4541d5 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x682ba3 and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x69a357 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x53c541d5; op2val:0xbee82ba3; op3val:0x54e9a357; valaddr_reg:x16; val_offset:1200; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1200, x17, x15, 128, x18)

inst_271:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x17a2d7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2e8f1f and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x189a8b and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5497a2d7; op2val:0xbf2e8f1f; op3val:0x54989a8b; valaddr_reg:x16; val_offset:1212; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1212, x17, x15, 136, x18)

inst_272:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x17a2d7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2e8f1f and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x189a8b and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5497a2d7; op2val:0xbf2e8f1f; op3val:0x54989a8b; valaddr_reg:x16; val_offset:1224; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1224, x17, x15, 144, x18)

inst_273:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x17a2d7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2e8f1f and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x189a8b and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5497a2d7; op2val:0xbf2e8f1f; op3val:0x54989a8b; valaddr_reg:x16; val_offset:1236; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1236, x17, x15, 152, x18)

inst_274:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x17a2d7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2e8f1f and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x189a8b and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5497a2d7; op2val:0xbf2e8f1f; op3val:0x54989a8b; valaddr_reg:x16; val_offset:1248; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1248, x17, x15, 160, x18)

inst_275:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x17a2d7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2e8f1f and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x189a8b and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5497a2d7; op2val:0xbf2e8f1f; op3val:0x54989a8b; valaddr_reg:x16; val_offset:1260; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1260, x17, x15, 168, x18)

inst_276:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x105fbd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1ffe02 and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x25c549 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54905fbd; op2val:0xbf1ffe02; op3val:0x54a5c549; valaddr_reg:x16; val_offset:1272; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1272, x17, x15, 176, x18)

inst_277:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x105fbd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1ffe02 and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x25c549 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54905fbd; op2val:0xbf1ffe02; op3val:0x54a5c549; valaddr_reg:x16; val_offset:1284; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1284, x17, x15, 184, x18)

inst_278:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x105fbd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1ffe02 and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x25c549 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54905fbd; op2val:0xbf1ffe02; op3val:0x54a5c549; valaddr_reg:x16; val_offset:1296; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1296, x17, x15, 192, x18)

inst_279:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x105fbd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1ffe02 and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x25c549 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54905fbd; op2val:0xbf1ffe02; op3val:0x54a5c549; valaddr_reg:x16; val_offset:1308; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1308, x17, x15, 200, x18)

inst_280:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x105fbd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1ffe02 and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x25c549 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54905fbd; op2val:0xbf1ffe02; op3val:0x54a5c549; valaddr_reg:x16; val_offset:1320; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1320, x17, x15, 208, x18)

inst_281:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x643210 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3a3964 and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x3400ef and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x53e43210; op2val:0xc03a3964; op3val:0x543400ef; valaddr_reg:x16; val_offset:1332; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1332, x17, x15, 216, x18)

inst_282:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x643210 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3a3964 and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x3400ef and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x53e43210; op2val:0xc03a3964; op3val:0x543400ef; valaddr_reg:x16; val_offset:1344; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1344, x17, x15, 224, x18)

inst_283:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x643210 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3a3964 and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x3400ef and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x53e43210; op2val:0xc03a3964; op3val:0x543400ef; valaddr_reg:x16; val_offset:1356; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1356, x17, x15, 232, x18)

inst_284:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x643210 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3a3964 and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x3400ef and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x53e43210; op2val:0xc03a3964; op3val:0x543400ef; valaddr_reg:x16; val_offset:1368; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1368, x17, x15, 240, x18)

inst_285:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x643210 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3a3964 and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x3400ef and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x53e43210; op2val:0xc03a3964; op3val:0x543400ef; valaddr_reg:x16; val_offset:1380; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1380, x17, x15, 248, x18)

inst_286:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x2b5448 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x249e88 and fs3 == 0 and fe3 == 0xa7 and fm3 == 0x0e9f40 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54ab5448; op2val:0xbfa49e88; op3val:0x538e9f40; valaddr_reg:x16; val_offset:1392; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1392, x17, x15, 256, x18)

inst_287:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x2b5448 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x249e88 and fs3 == 0 and fe3 == 0xa7 and fm3 == 0x0e9f40 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54ab5448; op2val:0xbfa49e88; op3val:0x538e9f40; valaddr_reg:x16; val_offset:1404; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1404, x17, x15, 264, x18)

inst_288:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x2b5448 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x249e88 and fs3 == 0 and fe3 == 0xa7 and fm3 == 0x0e9f40 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54ab5448; op2val:0xbfa49e88; op3val:0x538e9f40; valaddr_reg:x16; val_offset:1416; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1416, x17, x15, 272, x18)

inst_289:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x2b5448 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x249e88 and fs3 == 0 and fe3 == 0xa7 and fm3 == 0x0e9f40 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54ab5448; op2val:0xbfa49e88; op3val:0x538e9f40; valaddr_reg:x16; val_offset:1428; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1428, x17, x15, 280, x18)

inst_290:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x2b5448 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x249e88 and fs3 == 0 and fe3 == 0xa7 and fm3 == 0x0e9f40 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54ab5448; op2val:0xbfa49e88; op3val:0x538e9f40; valaddr_reg:x16; val_offset:1440; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1440, x17, x15, 288, x18)

inst_291:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x359877 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x200f02 and fs3 == 0 and fe3 == 0xa6 and fm3 == 0x6760fd and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x53b59877; op2val:0xc0a00f02; op3val:0x536760fd; valaddr_reg:x16; val_offset:1452; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1452, x17, x15, 296, x18)

inst_292:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x359877 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x200f02 and fs3 == 0 and fe3 == 0xa6 and fm3 == 0x6760fd and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x53b59877; op2val:0xc0a00f02; op3val:0x536760fd; valaddr_reg:x16; val_offset:1464; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1464, x17, x15, 304, x18)

inst_293:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x359877 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x200f02 and fs3 == 0 and fe3 == 0xa6 and fm3 == 0x6760fd and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x53b59877; op2val:0xc0a00f02; op3val:0x536760fd; valaddr_reg:x16; val_offset:1476; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1476, x17, x15, 312, x18)

inst_294:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x359877 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x200f02 and fs3 == 0 and fe3 == 0xa6 and fm3 == 0x6760fd and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x53b59877; op2val:0xc0a00f02; op3val:0x536760fd; valaddr_reg:x16; val_offset:1488; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1488, x17, x15, 320, x18)

inst_295:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x359877 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x200f02 and fs3 == 0 and fe3 == 0xa6 and fm3 == 0x6760fd and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x53b59877; op2val:0xc0a00f02; op3val:0x536760fd; valaddr_reg:x16; val_offset:1500; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1500, x17, x15, 328, x18)

inst_296:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x1d5977 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x2814a1 and fs3 == 0 and fe3 == 0xa7 and fm3 == 0x4584db and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x549d5977; op2val:0xbfa814a1; op3val:0x53c584db; valaddr_reg:x16; val_offset:1512; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1512, x17, x15, 336, x18)

inst_297:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x1d5977 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x2814a1 and fs3 == 0 and fe3 == 0xa7 and fm3 == 0x4584db and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x549d5977; op2val:0xbfa814a1; op3val:0x53c584db; valaddr_reg:x16; val_offset:1524; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1524, x17, x15, 344, x18)

inst_298:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x1d5977 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x2814a1 and fs3 == 0 and fe3 == 0xa7 and fm3 == 0x4584db and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x549d5977; op2val:0xbfa814a1; op3val:0x53c584db; valaddr_reg:x16; val_offset:1536; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1536, x17, x15, 352, x18)

inst_299:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x1d5977 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x2814a1 and fs3 == 0 and fe3 == 0xa7 and fm3 == 0x4584db and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x549d5977; op2val:0xbfa814a1; op3val:0x53c584db; valaddr_reg:x16; val_offset:1548; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1548, x17, x15, 360, x18)

inst_300:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x1d5977 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x2814a1 and fs3 == 0 and fe3 == 0xa7 and fm3 == 0x4584db and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x549d5977; op2val:0xbfa814a1; op3val:0x53c584db; valaddr_reg:x16; val_offset:1560; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1560, x17, x15, 368, x18)

inst_301:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x79c157 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x31aca6 and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x2551c5 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5479c157; op2val:0xbfb1aca6; op3val:0x542551c5; valaddr_reg:x16; val_offset:1572; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1572, x17, x15, 376, x18)

inst_302:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x79c157 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x31aca6 and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x2551c5 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5479c157; op2val:0xbfb1aca6; op3val:0x542551c5; valaddr_reg:x16; val_offset:1584; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1584, x17, x15, 384, x18)

inst_303:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x79c157 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x31aca6 and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x2551c5 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5479c157; op2val:0xbfb1aca6; op3val:0x542551c5; valaddr_reg:x16; val_offset:1596; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1596, x17, x15, 392, x18)

inst_304:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x79c157 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x31aca6 and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x2551c5 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5479c157; op2val:0xbfb1aca6; op3val:0x542551c5; valaddr_reg:x16; val_offset:1608; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1608, x17, x15, 400, x18)

inst_305:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x79c157 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x31aca6 and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x2551c5 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5479c157; op2val:0xbfb1aca6; op3val:0x542551c5; valaddr_reg:x16; val_offset:1620; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1620, x17, x15, 408, x18)

inst_306:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x31c72a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0f09df and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x1caae4 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54b1c72a; op2val:0xbf0f09df; op3val:0x549caae4; valaddr_reg:x16; val_offset:1632; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1632, x17, x15, 416, x18)

inst_307:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x31c72a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0f09df and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x1caae4 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54b1c72a; op2val:0xbf0f09df; op3val:0x549caae4; valaddr_reg:x16; val_offset:1644; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1644, x17, x15, 424, x18)

inst_308:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x31c72a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0f09df and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x1caae4 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54b1c72a; op2val:0xbf0f09df; op3val:0x549caae4; valaddr_reg:x16; val_offset:1656; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1656, x17, x15, 432, x18)

inst_309:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x31c72a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0f09df and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x1caae4 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54b1c72a; op2val:0xbf0f09df; op3val:0x549caae4; valaddr_reg:x16; val_offset:1668; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1668, x17, x15, 440, x18)

inst_310:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x31c72a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0f09df and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x1caae4 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54b1c72a; op2val:0xbf0f09df; op3val:0x549caae4; valaddr_reg:x16; val_offset:1680; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1680, x17, x15, 448, x18)

inst_311:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x27915e and fs2 == 1 and fe2 == 0x7f and fm2 == 0x62e480 and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x56f832 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5427915e; op2val:0xbfe2e480; op3val:0x5456f832; valaddr_reg:x16; val_offset:1692; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1692, x17, x15, 456, x18)

inst_312:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x27915e and fs2 == 1 and fe2 == 0x7f and fm2 == 0x62e480 and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x56f832 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5427915e; op2val:0xbfe2e480; op3val:0x5456f832; valaddr_reg:x16; val_offset:1704; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1704, x17, x15, 464, x18)

inst_313:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x27915e and fs2 == 1 and fe2 == 0x7f and fm2 == 0x62e480 and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x56f832 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5427915e; op2val:0xbfe2e480; op3val:0x5456f832; valaddr_reg:x16; val_offset:1716; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1716, x17, x15, 472, x18)

inst_314:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x27915e and fs2 == 1 and fe2 == 0x7f and fm2 == 0x62e480 and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x56f832 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5427915e; op2val:0xbfe2e480; op3val:0x5456f832; valaddr_reg:x16; val_offset:1728; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1728, x17, x15, 480, x18)

inst_315:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x27915e and fs2 == 1 and fe2 == 0x7f and fm2 == 0x62e480 and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x56f832 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5427915e; op2val:0xbfe2e480; op3val:0x5456f832; valaddr_reg:x16; val_offset:1740; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1740, x17, x15, 488, x18)

inst_316:
// fs1 == 0 and fe1 == 0xa4 and fm1 == 0x42ac0b and fs2 == 1 and fe2 == 0x84 and fm2 == 0x03b48e and fs3 == 0 and fe3 == 0xa7 and fm3 == 0x5ec549 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5242ac0b; op2val:0xc203b48e; op3val:0x53dec549; valaddr_reg:x16; val_offset:1752; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1752, x17, x15, 496, x18)

inst_317:
// fs1 == 0 and fe1 == 0xa4 and fm1 == 0x42ac0b and fs2 == 1 and fe2 == 0x84 and fm2 == 0x03b48e and fs3 == 0 and fe3 == 0xa7 and fm3 == 0x5ec549 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5242ac0b; op2val:0xc203b48e; op3val:0x53dec549; valaddr_reg:x16; val_offset:1764; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1764, x17, x15, 504, x18)

inst_318:
// fs1 == 0 and fe1 == 0xa4 and fm1 == 0x42ac0b and fs2 == 1 and fe2 == 0x84 and fm2 == 0x03b48e and fs3 == 0 and fe3 == 0xa7 and fm3 == 0x5ec549 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5242ac0b; op2val:0xc203b48e; op3val:0x53dec549; valaddr_reg:x16; val_offset:1776; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1776, x17, x15, 512, x18)

inst_319:
// fs1 == 0 and fe1 == 0xa4 and fm1 == 0x42ac0b and fs2 == 1 and fe2 == 0x84 and fm2 == 0x03b48e and fs3 == 0 and fe3 == 0xa7 and fm3 == 0x5ec549 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5242ac0b; op2val:0xc203b48e; op3val:0x53dec549; valaddr_reg:x16; val_offset:1788; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1788, x17, x15, 520, x18)

inst_320:
// fs1 == 0 and fe1 == 0xa4 and fm1 == 0x42ac0b and fs2 == 1 and fe2 == 0x84 and fm2 == 0x03b48e and fs3 == 0 and fe3 == 0xa7 and fm3 == 0x5ec549 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5242ac0b; op2val:0xc203b48e; op3val:0x53dec549; valaddr_reg:x16; val_offset:1800; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1800, x17, x15, 528, x18)

inst_321:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x0a299c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x55bb2d and fs3 == 0 and fe3 == 0xa6 and fm3 == 0x4a65bc and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x538a299c; op2val:0xc0d5bb2d; op3val:0x534a65bc; valaddr_reg:x16; val_offset:1812; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1812, x17, x15, 536, x18)

inst_322:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x0a299c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x55bb2d and fs3 == 0 and fe3 == 0xa6 and fm3 == 0x4a65bc and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x538a299c; op2val:0xc0d5bb2d; op3val:0x534a65bc; valaddr_reg:x16; val_offset:1824; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1824, x17, x15, 544, x18)

inst_323:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x0a299c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x55bb2d and fs3 == 0 and fe3 == 0xa6 and fm3 == 0x4a65bc and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x538a299c; op2val:0xc0d5bb2d; op3val:0x534a65bc; valaddr_reg:x16; val_offset:1836; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1836, x17, x15, 552, x18)

inst_324:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x0a299c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x55bb2d and fs3 == 0 and fe3 == 0xa6 and fm3 == 0x4a65bc and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x538a299c; op2val:0xc0d5bb2d; op3val:0x534a65bc; valaddr_reg:x16; val_offset:1848; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1848, x17, x15, 560, x18)

inst_325:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x0a299c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x55bb2d and fs3 == 0 and fe3 == 0xa6 and fm3 == 0x4a65bc and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x538a299c; op2val:0xc0d5bb2d; op3val:0x534a65bc; valaddr_reg:x16; val_offset:1860; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1860, x17, x15, 568, x18)

inst_326:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x0d23b8 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3f6cba and fs3 == 0 and fe3 == 0xa7 and fm3 == 0x33b33c and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x540d23b8; op2val:0xc03f6cba; op3val:0x53b3b33c; valaddr_reg:x16; val_offset:1872; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1872, x17, x15, 576, x18)

inst_327:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x0d23b8 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3f6cba and fs3 == 0 and fe3 == 0xa7 and fm3 == 0x33b33c and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x540d23b8; op2val:0xc03f6cba; op3val:0x53b3b33c; valaddr_reg:x16; val_offset:1884; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1884, x17, x15, 584, x18)

inst_328:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x0d23b8 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3f6cba and fs3 == 0 and fe3 == 0xa7 and fm3 == 0x33b33c and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x540d23b8; op2val:0xc03f6cba; op3val:0x53b3b33c; valaddr_reg:x16; val_offset:1896; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1896, x17, x15, 592, x18)

inst_329:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x0d23b8 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3f6cba and fs3 == 0 and fe3 == 0xa7 and fm3 == 0x33b33c and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x540d23b8; op2val:0xc03f6cba; op3val:0x53b3b33c; valaddr_reg:x16; val_offset:1908; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1908, x17, x15, 600, x18)

inst_330:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x0d23b8 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3f6cba and fs3 == 0 and fe3 == 0xa7 and fm3 == 0x33b33c and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x540d23b8; op2val:0xc03f6cba; op3val:0x53b3b33c; valaddr_reg:x16; val_offset:1920; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1920, x17, x15, 608, x18)

inst_331:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x7a41f7 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x739bee and fs3 == 0 and fe3 == 0xa6 and fm3 == 0x0ed79d and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x547a41f7; op2val:0xbff39bee; op3val:0x530ed79d; valaddr_reg:x16; val_offset:1932; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1932, x17, x15, 616, x18)

inst_332:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x7a41f7 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x739bee and fs3 == 0 and fe3 == 0xa6 and fm3 == 0x0ed79d and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x547a41f7; op2val:0xbff39bee; op3val:0x530ed79d; valaddr_reg:x16; val_offset:1944; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1944, x17, x15, 624, x18)

inst_333:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x7a41f7 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x739bee and fs3 == 0 and fe3 == 0xa6 and fm3 == 0x0ed79d and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x547a41f7; op2val:0xbff39bee; op3val:0x530ed79d; valaddr_reg:x16; val_offset:1956; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1956, x17, x15, 632, x18)

inst_334:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x7a41f7 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x739bee and fs3 == 0 and fe3 == 0xa6 and fm3 == 0x0ed79d and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x547a41f7; op2val:0xbff39bee; op3val:0x530ed79d; valaddr_reg:x16; val_offset:1968; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1968, x17, x15, 640, x18)

inst_335:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x7a41f7 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x739bee and fs3 == 0 and fe3 == 0xa6 and fm3 == 0x0ed79d and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x547a41f7; op2val:0xbff39bee; op3val:0x530ed79d; valaddr_reg:x16; val_offset:1980; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1980, x17, x15, 648, x18)

inst_336:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x731fff and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2219c2 and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x4c1a93 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x53731fff; op2val:0xc0a219c2; op3val:0x544c1a93; valaddr_reg:x16; val_offset:1992; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1992, x17, x15, 656, x18)

inst_337:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x731fff and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2219c2 and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x4c1a93 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x53731fff; op2val:0xc0a219c2; op3val:0x544c1a93; valaddr_reg:x16; val_offset:2004; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 2004, x17, x15, 664, x18)

inst_338:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x731fff and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2219c2 and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x4c1a93 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x53731fff; op2val:0xc0a219c2; op3val:0x544c1a93; valaddr_reg:x16; val_offset:2016; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 2016, x17, x15, 672, x18)

inst_339:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x731fff and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2219c2 and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x4c1a93 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x53731fff; op2val:0xc0a219c2; op3val:0x544c1a93; valaddr_reg:x16; val_offset:2028; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 2028, x17, x15, 680, x18)
addi x16,x16,2040

inst_340:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x731fff and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2219c2 and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x4c1a93 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x53731fff; op2val:0xc0a219c2; op3val:0x544c1a93; valaddr_reg:x16; val_offset:0; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 0, x17, x15, 688, x18)

inst_341:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x4b306c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0b727a and fs3 == 0 and fe3 == 0xa7 and fm3 == 0x0a8ec4 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54cb306c; op2val:0xbf8b727a; op3val:0x538a8ec4; valaddr_reg:x16; val_offset:12; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 12, x17, x15, 696, x18)

inst_342:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x4b306c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0b727a and fs3 == 0 and fe3 == 0xa7 and fm3 == 0x0a8ec4 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54cb306c; op2val:0xbf8b727a; op3val:0x538a8ec4; valaddr_reg:x16; val_offset:24; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 24, x17, x15, 704, x18)

inst_343:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x4b306c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0b727a and fs3 == 0 and fe3 == 0xa7 and fm3 == 0x0a8ec4 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54cb306c; op2val:0xbf8b727a; op3val:0x538a8ec4; valaddr_reg:x16; val_offset:36; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 36, x17, x15, 712, x18)

inst_344:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x4b306c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0b727a and fs3 == 0 and fe3 == 0xa7 and fm3 == 0x0a8ec4 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54cb306c; op2val:0xbf8b727a; op3val:0x538a8ec4; valaddr_reg:x16; val_offset:48; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 48, x17, x15, 720, x18)

inst_345:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x4b306c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0b727a and fs3 == 0 and fe3 == 0xa7 and fm3 == 0x0a8ec4 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54cb306c; op2val:0xbf8b727a; op3val:0x538a8ec4; valaddr_reg:x16; val_offset:60; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 60, x17, x15, 728, x18)

inst_346:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x66ab4b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7d9eb8 and fs3 == 0 and fe3 == 0xa6 and fm3 == 0x5bcd8e and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54e6ab4b; op2val:0xbf7d9eb8; op3val:0x535bcd8e; valaddr_reg:x16; val_offset:72; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 72, x17, x15, 736, x18)

inst_347:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x66ab4b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7d9eb8 and fs3 == 0 and fe3 == 0xa6 and fm3 == 0x5bcd8e and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54e6ab4b; op2val:0xbf7d9eb8; op3val:0x535bcd8e; valaddr_reg:x16; val_offset:84; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 84, x17, x15, 744, x18)

inst_348:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x66ab4b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7d9eb8 and fs3 == 0 and fe3 == 0xa6 and fm3 == 0x5bcd8e and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54e6ab4b; op2val:0xbf7d9eb8; op3val:0x535bcd8e; valaddr_reg:x16; val_offset:96; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 96, x17, x15, 752, x18)

inst_349:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x66ab4b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7d9eb8 and fs3 == 0 and fe3 == 0xa6 and fm3 == 0x5bcd8e and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54e6ab4b; op2val:0xbf7d9eb8; op3val:0x535bcd8e; valaddr_reg:x16; val_offset:108; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 108, x17, x15, 760, x18)

inst_350:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x66ab4b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7d9eb8 and fs3 == 0 and fe3 == 0xa6 and fm3 == 0x5bcd8e and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54e6ab4b; op2val:0xbf7d9eb8; op3val:0x535bcd8e; valaddr_reg:x16; val_offset:120; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 120, x17, x15, 768, x18)

inst_351:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x241ef6 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x597f5c and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x5d2407 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54a41ef6; op2val:0xbe597f5c; op3val:0x54dd2407; valaddr_reg:x16; val_offset:132; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 132, x17, x15, 776, x18)

inst_352:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x241ef6 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x597f5c and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x5d2407 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54a41ef6; op2val:0xbe597f5c; op3val:0x54dd2407; valaddr_reg:x16; val_offset:144; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 144, x17, x15, 784, x18)

inst_353:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x241ef6 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x597f5c and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x5d2407 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54a41ef6; op2val:0xbe597f5c; op3val:0x54dd2407; valaddr_reg:x16; val_offset:156; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 156, x17, x15, 792, x18)

inst_354:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x241ef6 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x597f5c and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x5d2407 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54a41ef6; op2val:0xbe597f5c; op3val:0x54dd2407; valaddr_reg:x16; val_offset:168; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 168, x17, x15, 800, x18)

inst_355:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x241ef6 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x597f5c and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x5d2407 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54a41ef6; op2val:0xbe597f5c; op3val:0x54dd2407; valaddr_reg:x16; val_offset:180; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 180, x17, x15, 808, x18)

inst_356:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x1d0b62 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x347478 and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x48a646 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x539d0b62; op2val:0xbfb47478; op3val:0x54c8a646; valaddr_reg:x16; val_offset:192; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 192, x17, x15, 816, x18)

inst_357:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x1d0b62 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x347478 and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x48a646 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x539d0b62; op2val:0xbfb47478; op3val:0x54c8a646; valaddr_reg:x16; val_offset:204; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 204, x17, x15, 824, x18)

inst_358:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x1d0b62 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x347478 and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x48a646 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x539d0b62; op2val:0xbfb47478; op3val:0x54c8a646; valaddr_reg:x16; val_offset:216; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 216, x17, x15, 832, x18)

inst_359:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x1d0b62 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x347478 and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x48a646 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x539d0b62; op2val:0xbfb47478; op3val:0x54c8a646; valaddr_reg:x16; val_offset:228; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 228, x17, x15, 840, x18)

inst_360:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x1d0b62 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x347478 and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x48a646 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x539d0b62; op2val:0xbfb47478; op3val:0x54c8a646; valaddr_reg:x16; val_offset:240; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 240, x17, x15, 848, x18)

inst_361:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x03ef14 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7ddadf and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x5f4afb and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5483ef14; op2val:0xbe7ddadf; op3val:0x54df4afb; valaddr_reg:x16; val_offset:252; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 252, x17, x15, 856, x18)

inst_362:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x03ef14 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7ddadf and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x5f4afb and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5483ef14; op2val:0xbe7ddadf; op3val:0x54df4afb; valaddr_reg:x16; val_offset:264; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 264, x17, x15, 864, x18)

inst_363:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x03ef14 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7ddadf and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x5f4afb and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5483ef14; op2val:0xbe7ddadf; op3val:0x54df4afb; valaddr_reg:x16; val_offset:276; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 276, x17, x15, 872, x18)

inst_364:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x03ef14 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7ddadf and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x5f4afb and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5483ef14; op2val:0xbe7ddadf; op3val:0x54df4afb; valaddr_reg:x16; val_offset:288; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 288, x17, x15, 880, x18)

inst_365:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x03ef14 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7ddadf and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x5f4afb and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5483ef14; op2val:0xbe7ddadf; op3val:0x54df4afb; valaddr_reg:x16; val_offset:300; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 300, x17, x15, 888, x18)

inst_366:
// fs1 == 0 and fe1 == 0xa3 and fm1 == 0x76a178 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x7c3473 and fs3 == 0 and fe3 == 0xa5 and fm3 == 0x506864 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x51f6a178; op2val:0xc27c3473; op3val:0x52d06864; valaddr_reg:x16; val_offset:312; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 312, x17, x15, 896, x18)

inst_367:
// fs1 == 0 and fe1 == 0xa3 and fm1 == 0x76a178 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x7c3473 and fs3 == 0 and fe3 == 0xa5 and fm3 == 0x506864 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x51f6a178; op2val:0xc27c3473; op3val:0x52d06864; valaddr_reg:x16; val_offset:324; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 324, x17, x15, 904, x18)

inst_368:
// fs1 == 0 and fe1 == 0xa3 and fm1 == 0x76a178 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x7c3473 and fs3 == 0 and fe3 == 0xa5 and fm3 == 0x506864 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x51f6a178; op2val:0xc27c3473; op3val:0x52d06864; valaddr_reg:x16; val_offset:336; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 336, x17, x15, 912, x18)

inst_369:
// fs1 == 0 and fe1 == 0xa3 and fm1 == 0x76a178 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x7c3473 and fs3 == 0 and fe3 == 0xa5 and fm3 == 0x506864 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x51f6a178; op2val:0xc27c3473; op3val:0x52d06864; valaddr_reg:x16; val_offset:348; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 348, x17, x15, 920, x18)

inst_370:
// fs1 == 0 and fe1 == 0xa3 and fm1 == 0x76a178 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x7c3473 and fs3 == 0 and fe3 == 0xa5 and fm3 == 0x506864 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x51f6a178; op2val:0xc27c3473; op3val:0x52d06864; valaddr_reg:x16; val_offset:360; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 360, x17, x15, 928, x18)

inst_371:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x64cfea and fs2 == 1 and fe2 == 0x7e and fm2 == 0x598df6 and fs3 == 0 and fe3 == 0xa7 and fm3 == 0x76337f and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54e4cfea; op2val:0xbf598df6; op3val:0x53f6337f; valaddr_reg:x16; val_offset:372; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 372, x17, x15, 936, x18)

inst_372:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x64cfea and fs2 == 1 and fe2 == 0x7e and fm2 == 0x598df6 and fs3 == 0 and fe3 == 0xa7 and fm3 == 0x76337f and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54e4cfea; op2val:0xbf598df6; op3val:0x53f6337f; valaddr_reg:x16; val_offset:384; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 384, x17, x15, 944, x18)

inst_373:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x64cfea and fs2 == 1 and fe2 == 0x7e and fm2 == 0x598df6 and fs3 == 0 and fe3 == 0xa7 and fm3 == 0x76337f and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54e4cfea; op2val:0xbf598df6; op3val:0x53f6337f; valaddr_reg:x16; val_offset:396; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 396, x17, x15, 952, x18)

inst_374:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x64cfea and fs2 == 1 and fe2 == 0x7e and fm2 == 0x598df6 and fs3 == 0 and fe3 == 0xa7 and fm3 == 0x76337f and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54e4cfea; op2val:0xbf598df6; op3val:0x53f6337f; valaddr_reg:x16; val_offset:408; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 408, x17, x15, 960, x18)

inst_375:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x64cfea and fs2 == 1 and fe2 == 0x7e and fm2 == 0x598df6 and fs3 == 0 and fe3 == 0xa7 and fm3 == 0x76337f and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54e4cfea; op2val:0xbf598df6; op3val:0x53f6337f; valaddr_reg:x16; val_offset:420; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 420, x17, x15, 968, x18)

inst_376:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x7dbb07 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0d1e1b and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x3a1113 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x547dbb07; op2val:0xbf0d1e1b; op3val:0x54ba1113; valaddr_reg:x16; val_offset:432; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 432, x17, x15, 976, x18)

inst_377:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x7dbb07 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0d1e1b and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x3a1113 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x547dbb07; op2val:0xbf0d1e1b; op3val:0x54ba1113; valaddr_reg:x16; val_offset:444; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 444, x17, x15, 984, x18)

inst_378:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x7dbb07 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0d1e1b and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x3a1113 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x547dbb07; op2val:0xbf0d1e1b; op3val:0x54ba1113; valaddr_reg:x16; val_offset:456; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 456, x17, x15, 992, x18)

inst_379:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x7dbb07 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0d1e1b and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x3a1113 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x547dbb07; op2val:0xbf0d1e1b; op3val:0x54ba1113; valaddr_reg:x16; val_offset:468; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 468, x17, x15, 1000, x18)

inst_380:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x7dbb07 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0d1e1b and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x3a1113 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x547dbb07; op2val:0xbf0d1e1b; op3val:0x54ba1113; valaddr_reg:x16; val_offset:480; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 480, x17, x15, 1008, x18)

inst_381:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x3da29b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x77cfb6 and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x10dc7e and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54bda29b; op2val:0xbf77cfb6; op3val:0x5410dc7e; valaddr_reg:x16; val_offset:492; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 492, x17, x15, 1016, x18)

inst_382:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x3da29b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x77cfb6 and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x10dc7e and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54bda29b; op2val:0xbf77cfb6; op3val:0x5410dc7e; valaddr_reg:x16; val_offset:504; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 504, x17, x15, 1024, x18)

inst_383:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x3da29b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x77cfb6 and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x10dc7e and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54bda29b; op2val:0xbf77cfb6; op3val:0x5410dc7e; valaddr_reg:x16; val_offset:516; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 516, x17, x15, 1032, x18)

inst_384:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x3da29b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x77cfb6 and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x10dc7e and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54bda29b; op2val:0xbf77cfb6; op3val:0x5410dc7e; valaddr_reg:x16; val_offset:528; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 528, x17, x15, 1040, x18)

inst_385:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x3da29b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x77cfb6 and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x10dc7e and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54bda29b; op2val:0xbf77cfb6; op3val:0x5410dc7e; valaddr_reg:x16; val_offset:540; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 540, x17, x15, 1048, x18)

inst_386:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x5a4abb and fs2 == 1 and fe2 == 0x7d and fm2 == 0x29bb21 and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x37a28d and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54da4abb; op2val:0xbea9bb21; op3val:0x54b7a28d; valaddr_reg:x16; val_offset:552; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 552, x17, x15, 1056, x18)

inst_387:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x5a4abb and fs2 == 1 and fe2 == 0x7d and fm2 == 0x29bb21 and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x37a28d and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54da4abb; op2val:0xbea9bb21; op3val:0x54b7a28d; valaddr_reg:x16; val_offset:564; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 564, x17, x15, 1064, x18)

inst_388:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x5a4abb and fs2 == 1 and fe2 == 0x7d and fm2 == 0x29bb21 and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x37a28d and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54da4abb; op2val:0xbea9bb21; op3val:0x54b7a28d; valaddr_reg:x16; val_offset:576; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 576, x17, x15, 1072, x18)

inst_389:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x5a4abb and fs2 == 1 and fe2 == 0x7d and fm2 == 0x29bb21 and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x37a28d and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54da4abb; op2val:0xbea9bb21; op3val:0x54b7a28d; valaddr_reg:x16; val_offset:588; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 588, x17, x15, 1080, x18)

inst_390:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x5a4abb and fs2 == 1 and fe2 == 0x7d and fm2 == 0x29bb21 and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x37a28d and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54da4abb; op2val:0xbea9bb21; op3val:0x54b7a28d; valaddr_reg:x16; val_offset:600; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 600, x17, x15, 1088, x18)

inst_391:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x46d5f7 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0613e2 and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x17dc8f and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5446d5f7; op2val:0xbf8613e2; op3val:0x5497dc8f; valaddr_reg:x16; val_offset:612; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 612, x17, x15, 1096, x18)

inst_392:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x46d5f7 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0613e2 and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x17dc8f and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5446d5f7; op2val:0xbf8613e2; op3val:0x5497dc8f; valaddr_reg:x16; val_offset:624; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 624, x17, x15, 1104, x18)

inst_393:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x46d5f7 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0613e2 and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x17dc8f and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5446d5f7; op2val:0xbf8613e2; op3val:0x5497dc8f; valaddr_reg:x16; val_offset:636; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 636, x17, x15, 1112, x18)

inst_394:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x46d5f7 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0613e2 and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x17dc8f and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5446d5f7; op2val:0xbf8613e2; op3val:0x5497dc8f; valaddr_reg:x16; val_offset:648; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 648, x17, x15, 1120, x18)

inst_395:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x46d5f7 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0613e2 and fs3 == 0 and fe3 == 0xa9 and fm3 == 0x17dc8f and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5446d5f7; op2val:0xbf8613e2; op3val:0x5497dc8f; valaddr_reg:x16; val_offset:660; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 660, x17, x15, 1128, x18)

inst_396:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x0827e1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x263ebd and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x1e5314 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x540827e1; op2val:0xc0263ebd; op3val:0x541e5314; valaddr_reg:x16; val_offset:672; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 672, x17, x15, 1136, x18)

inst_397:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x0827e1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x263ebd and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x1e5314 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x540827e1; op2val:0xc0263ebd; op3val:0x541e5314; valaddr_reg:x16; val_offset:684; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 684, x17, x15, 1144, x18)

inst_398:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x0827e1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x263ebd and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x1e5314 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x540827e1; op2val:0xc0263ebd; op3val:0x541e5314; valaddr_reg:x16; val_offset:696; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 696, x17, x15, 1152, x18)

inst_399:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x0827e1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x263ebd and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x1e5314 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x540827e1; op2val:0xc0263ebd; op3val:0x541e5314; valaddr_reg:x16; val_offset:708; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 708, x17, x15, 1160, x18)

inst_400:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x0827e1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x263ebd and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x1e5314 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x540827e1; op2val:0xc0263ebd; op3val:0x541e5314; valaddr_reg:x16; val_offset:720; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 720, x17, x15, 1168, x18)

inst_401:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x06be82 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x72e53c and fs3 == 0 and fe3 == 0xa0 and fm3 == 0x1d0384 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5406be82; op2val:0xc072e53c; op3val:0x501d0384; valaddr_reg:x16; val_offset:732; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 732, x17, x15, 1176, x18)

inst_402:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x06be82 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x72e53c and fs3 == 0 and fe3 == 0xa0 and fm3 == 0x1d0384 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5406be82; op2val:0xc072e53c; op3val:0x501d0384; valaddr_reg:x16; val_offset:744; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 744, x17, x15, 1184, x18)

inst_403:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x06be82 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x72e53c and fs3 == 0 and fe3 == 0xa0 and fm3 == 0x1d0384 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5406be82; op2val:0xc072e53c; op3val:0x501d0384; valaddr_reg:x16; val_offset:756; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 756, x17, x15, 1192, x18)

inst_404:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x06be82 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x72e53c and fs3 == 0 and fe3 == 0xa0 and fm3 == 0x1d0384 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5406be82; op2val:0xc072e53c; op3val:0x501d0384; valaddr_reg:x16; val_offset:768; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 768, x17, x15, 1200, x18)

inst_405:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x06be82 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x72e53c and fs3 == 0 and fe3 == 0xa0 and fm3 == 0x1d0384 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5406be82; op2val:0xc072e53c; op3val:0x501d0384; valaddr_reg:x16; val_offset:780; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 780, x17, x15, 1208, x18)

inst_406:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x089af5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4584e3 and fs3 == 0 and fe3 == 0xa7 and fm3 == 0x34cec0 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54889af5; op2val:0xbfc584e3; op3val:0x53b4cec0; valaddr_reg:x16; val_offset:792; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 792, x17, x15, 1216, x18)

inst_407:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x089af5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4584e3 and fs3 == 0 and fe3 == 0xa7 and fm3 == 0x34cec0 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54889af5; op2val:0xbfc584e3; op3val:0x53b4cec0; valaddr_reg:x16; val_offset:804; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 804, x17, x15, 1224, x18)

inst_408:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x089af5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4584e3 and fs3 == 0 and fe3 == 0xa7 and fm3 == 0x34cec0 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54889af5; op2val:0xbfc584e3; op3val:0x53b4cec0; valaddr_reg:x16; val_offset:816; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 816, x17, x15, 1232, x18)

inst_409:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x089af5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4584e3 and fs3 == 0 and fe3 == 0xa7 and fm3 == 0x34cec0 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54889af5; op2val:0xbfc584e3; op3val:0x53b4cec0; valaddr_reg:x16; val_offset:828; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 828, x17, x15, 1240, x18)

inst_410:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x089af5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4584e3 and fs3 == 0 and fe3 == 0xa7 and fm3 == 0x34cec0 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54889af5; op2val:0xbfc584e3; op3val:0x53b4cec0; valaddr_reg:x16; val_offset:840; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 840, x17, x15, 1248, x18)

inst_411:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x64f57d and fs2 == 1 and fe2 == 0x81 and fm2 == 0x20b0c6 and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x6090ef and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5364f57d; op2val:0xc0a0b0c6; op3val:0x546090ef; valaddr_reg:x16; val_offset:852; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 852, x17, x15, 1256, x18)

inst_412:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x64f57d and fs2 == 1 and fe2 == 0x81 and fm2 == 0x20b0c6 and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x6090ef and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5364f57d; op2val:0xc0a0b0c6; op3val:0x546090ef; valaddr_reg:x16; val_offset:864; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 864, x17, x15, 1264, x18)

inst_413:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x64f57d and fs2 == 1 and fe2 == 0x81 and fm2 == 0x20b0c6 and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x6090ef and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5364f57d; op2val:0xc0a0b0c6; op3val:0x546090ef; valaddr_reg:x16; val_offset:876; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 876, x17, x15, 1272, x18)

inst_414:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x64f57d and fs2 == 1 and fe2 == 0x81 and fm2 == 0x20b0c6 and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x6090ef and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5364f57d; op2val:0xc0a0b0c6; op3val:0x546090ef; valaddr_reg:x16; val_offset:888; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 888, x17, x15, 1280, x18)

inst_415:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x64f57d and fs2 == 1 and fe2 == 0x81 and fm2 == 0x20b0c6 and fs3 == 0 and fe3 == 0xa8 and fm3 == 0x6090ef and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5364f57d; op2val:0xc0a0b0c6; op3val:0x546090ef; valaddr_reg:x16; val_offset:900; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 900, x17, x15, 1288, x18)

inst_416:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x01fa00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6868a9 and fs3 == 0 and fe3 == 0xa6 and fm3 == 0x2004c5 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5481fa00; op2val:0xbfe868a9; op3val:0x532004c5; valaddr_reg:x16; val_offset:912; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 912, x17, x15, 1296, x18)

inst_417:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x01fa00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6868a9 and fs3 == 0 and fe3 == 0xa6 and fm3 == 0x2004c5 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5481fa00; op2val:0xbfe868a9; op3val:0x532004c5; valaddr_reg:x16; val_offset:924; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 924, x17, x15, 1304, x18)

inst_418:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x01fa00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6868a9 and fs3 == 0 and fe3 == 0xa6 and fm3 == 0x2004c5 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5481fa00; op2val:0xbfe868a9; op3val:0x532004c5; valaddr_reg:x16; val_offset:936; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 936, x17, x15, 1312, x18)

inst_419:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x01fa00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6868a9 and fs3 == 0 and fe3 == 0xa6 and fm3 == 0x2004c5 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5481fa00; op2val:0xbfe868a9; op3val:0x532004c5; valaddr_reg:x16; val_offset:948; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 948, x17, x15, 1320, x18)

inst_420:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x01fa00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6868a9 and fs3 == 0 and fe3 == 0xa6 and fm3 == 0x2004c5 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5481fa00; op2val:0xbfe868a9; op3val:0x532004c5; valaddr_reg:x16; val_offset:960; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 960, x17, x15, 1328, x18)

inst_421:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2e864a and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7ce651 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x2c6936 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f2e864a; op2val:0x3efce651; op3val:0x3eac6936; valaddr_reg:x16; val_offset:972; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 972, x17, x15, 1336, x18)

inst_422:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2e864a and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7ce651 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x2c6936 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f2e864a; op2val:0x3efce651; op3val:0x3eac6936; valaddr_reg:x16; val_offset:984; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 984, x17, x15, 1344, x18)

inst_423:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2e864a and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7ce651 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x2c6936 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f2e864a; op2val:0x3efce651; op3val:0x3eac6936; valaddr_reg:x16; val_offset:996; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 996, x17, x15, 1352, x18)

inst_424:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2e864a and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7ce651 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x2c6936 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f2e864a; op2val:0x3efce651; op3val:0x3eac6936; valaddr_reg:x16; val_offset:1008; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1008, x17, x15, 1360, x18)

inst_425:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2e864a and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7ce651 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x2c6936 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f2e864a; op2val:0x3efce651; op3val:0x3eac6936; valaddr_reg:x16; val_offset:1020; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1020, x17, x15, 1368, x18)

inst_426:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x38ed67 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7841a8 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x33556a and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f38ed67; op2val:0x3ef841a8; op3val:0x3eb3556a; valaddr_reg:x16; val_offset:1032; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1032, x17, x15, 1376, x18)

inst_427:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x38ed67 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7841a8 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x33556a and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f38ed67; op2val:0x3ef841a8; op3val:0x3eb3556a; valaddr_reg:x16; val_offset:1044; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1044, x17, x15, 1384, x18)

inst_428:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x38ed67 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7841a8 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x33556a and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f38ed67; op2val:0x3ef841a8; op3val:0x3eb3556a; valaddr_reg:x16; val_offset:1056; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1056, x17, x15, 1392, x18)

inst_429:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x38ed67 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7841a8 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x33556a and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f38ed67; op2val:0x3ef841a8; op3val:0x3eb3556a; valaddr_reg:x16; val_offset:1068; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1068, x17, x15, 1400, x18)

inst_430:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x38ed67 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7841a8 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x33556a and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f38ed67; op2val:0x3ef841a8; op3val:0x3eb3556a; valaddr_reg:x16; val_offset:1080; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1080, x17, x15, 1408, x18)

inst_431:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x54b4e3 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0106e2 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x5669be and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3dd4b4e3; op2val:0x410106e2; op3val:0x3f5669be; valaddr_reg:x16; val_offset:1092; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1092, x17, x15, 1416, x18)

inst_432:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x54b4e3 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0106e2 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x5669be and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3dd4b4e3; op2val:0x410106e2; op3val:0x3f5669be; valaddr_reg:x16; val_offset:1104; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1104, x17, x15, 1424, x18)

inst_433:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x54b4e3 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0106e2 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x5669be and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3dd4b4e3; op2val:0x410106e2; op3val:0x3f5669be; valaddr_reg:x16; val_offset:1116; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1116, x17, x15, 1432, x18)

inst_434:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x54b4e3 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0106e2 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x5669be and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3dd4b4e3; op2val:0x410106e2; op3val:0x3f5669be; valaddr_reg:x16; val_offset:1128; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1128, x17, x15, 1440, x18)

inst_435:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x54b4e3 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0106e2 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x5669be and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3dd4b4e3; op2val:0x410106e2; op3val:0x3f5669be; valaddr_reg:x16; val_offset:1140; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1140, x17, x15, 1448, x18)

inst_436:
// fs1 == 0 and fe1 == 0x77 and fm1 == 0x6025b3 and fs2 == 0 and fe2 == 0x85 and fm2 == 0x0502b5 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x68ebeb and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3be025b3; op2val:0x428502b5; op3val:0x3ee8ebeb; valaddr_reg:x16; val_offset:1152; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1152, x17, x15, 1456, x18)

inst_437:
// fs1 == 0 and fe1 == 0x77 and fm1 == 0x6025b3 and fs2 == 0 and fe2 == 0x85 and fm2 == 0x0502b5 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x68ebeb and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3be025b3; op2val:0x428502b5; op3val:0x3ee8ebeb; valaddr_reg:x16; val_offset:1164; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1164, x17, x15, 1464, x18)

inst_438:
// fs1 == 0 and fe1 == 0x77 and fm1 == 0x6025b3 and fs2 == 0 and fe2 == 0x85 and fm2 == 0x0502b5 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x68ebeb and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3be025b3; op2val:0x428502b5; op3val:0x3ee8ebeb; valaddr_reg:x16; val_offset:1176; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1176, x17, x15, 1472, x18)

inst_439:
// fs1 == 0 and fe1 == 0x77 and fm1 == 0x6025b3 and fs2 == 0 and fe2 == 0x85 and fm2 == 0x0502b5 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x68ebeb and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3be025b3; op2val:0x428502b5; op3val:0x3ee8ebeb; valaddr_reg:x16; val_offset:1188; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1188, x17, x15, 1480, x18)

inst_440:
// fs1 == 0 and fe1 == 0x77 and fm1 == 0x6025b3 and fs2 == 0 and fe2 == 0x85 and fm2 == 0x0502b5 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x68ebeb and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3be025b3; op2val:0x428502b5; op3val:0x3ee8ebeb; valaddr_reg:x16; val_offset:1200; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1200, x17, x15, 1488, x18)

inst_441:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x12ebca and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0c4d1a and fs3 == 0 and fe3 == 0x7e and fm3 == 0x210a65 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f12ebca; op2val:0x3f8c4d1a; op3val:0x3f210a65; valaddr_reg:x16; val_offset:1212; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1212, x17, x15, 1496, x18)

inst_442:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x12ebca and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0c4d1a and fs3 == 0 and fe3 == 0x7e and fm3 == 0x210a65 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f12ebca; op2val:0x3f8c4d1a; op3val:0x3f210a65; valaddr_reg:x16; val_offset:1224; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1224, x17, x15, 1504, x18)

inst_443:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x12ebca and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0c4d1a and fs3 == 0 and fe3 == 0x7e and fm3 == 0x210a65 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f12ebca; op2val:0x3f8c4d1a; op3val:0x3f210a65; valaddr_reg:x16; val_offset:1236; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1236, x17, x15, 1512, x18)

inst_444:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x12ebca and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0c4d1a and fs3 == 0 and fe3 == 0x7e and fm3 == 0x210a65 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f12ebca; op2val:0x3f8c4d1a; op3val:0x3f210a65; valaddr_reg:x16; val_offset:1248; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1248, x17, x15, 1520, x18)

inst_445:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x12ebca and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0c4d1a and fs3 == 0 and fe3 == 0x7e and fm3 == 0x210a65 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f12ebca; op2val:0x3f8c4d1a; op3val:0x3f210a65; valaddr_reg:x16; val_offset:1260; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1260, x17, x15, 1528, x18)

inst_446:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x73e34a and fs2 == 0 and fe2 == 0x83 and fm2 == 0x3be8e4 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3304e6 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3cf3e34a; op2val:0x41bbe8e4; op3val:0x3f3304e6; valaddr_reg:x16; val_offset:1272; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1272, x17, x15, 1536, x18)

inst_447:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x73e34a and fs2 == 0 and fe2 == 0x83 and fm2 == 0x3be8e4 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3304e6 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3cf3e34a; op2val:0x41bbe8e4; op3val:0x3f3304e6; valaddr_reg:x16; val_offset:1284; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1284, x17, x15, 1544, x18)

inst_448:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x73e34a and fs2 == 0 and fe2 == 0x83 and fm2 == 0x3be8e4 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3304e6 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3cf3e34a; op2val:0x41bbe8e4; op3val:0x3f3304e6; valaddr_reg:x16; val_offset:1296; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1296, x17, x15, 1552, x18)

inst_449:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x73e34a and fs2 == 0 and fe2 == 0x83 and fm2 == 0x3be8e4 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3304e6 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3cf3e34a; op2val:0x41bbe8e4; op3val:0x3f3304e6; valaddr_reg:x16; val_offset:1308; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1308, x17, x15, 1560, x18)

inst_450:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x73e34a and fs2 == 0 and fe2 == 0x83 and fm2 == 0x3be8e4 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3304e6 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3cf3e34a; op2val:0x41bbe8e4; op3val:0x3f3304e6; valaddr_reg:x16; val_offset:1320; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1320, x17, x15, 1568, x18)

inst_451:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3f66a4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7b72ac and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3bff5f and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f3f66a4; op2val:0x3f7b72ac; op3val:0x3f3bff5f; valaddr_reg:x16; val_offset:1332; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1332, x17, x15, 1576, x18)

inst_452:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3f66a4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7b72ac and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3bff5f and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f3f66a4; op2val:0x3f7b72ac; op3val:0x3f3bff5f; valaddr_reg:x16; val_offset:1344; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1344, x17, x15, 1584, x18)

inst_453:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3f66a4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7b72ac and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3bff5f and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f3f66a4; op2val:0x3f7b72ac; op3val:0x3f3bff5f; valaddr_reg:x16; val_offset:1356; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1356, x17, x15, 1592, x18)

inst_454:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3f66a4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7b72ac and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3bff5f and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f3f66a4; op2val:0x3f7b72ac; op3val:0x3f3bff5f; valaddr_reg:x16; val_offset:1368; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1368, x17, x15, 1600, x18)

inst_455:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3f66a4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7b72ac and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3bff5f and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f3f66a4; op2val:0x3f7b72ac; op3val:0x3f3bff5f; valaddr_reg:x16; val_offset:1380; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1380, x17, x15, 1608, x18)

inst_456:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x36466a and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6a7852 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x26f209 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eb6466a; op2val:0x3eea7852; op3val:0x3e26f209; valaddr_reg:x16; val_offset:1392; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1392, x17, x15, 1616, x18)

inst_457:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x36466a and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6a7852 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x26f209 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eb6466a; op2val:0x3eea7852; op3val:0x3e26f209; valaddr_reg:x16; val_offset:1404; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1404, x17, x15, 1624, x18)

inst_458:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x36466a and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6a7852 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x26f209 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eb6466a; op2val:0x3eea7852; op3val:0x3e26f209; valaddr_reg:x16; val_offset:1416; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1416, x17, x15, 1632, x18)

inst_459:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x36466a and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6a7852 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x26f209 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eb6466a; op2val:0x3eea7852; op3val:0x3e26f209; valaddr_reg:x16; val_offset:1428; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1428, x17, x15, 1640, x18)

inst_460:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x36466a and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6a7852 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x26f209 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eb6466a; op2val:0x3eea7852; op3val:0x3e26f209; valaddr_reg:x16; val_offset:1440; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1440, x17, x15, 1648, x18)

inst_461:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x63b597 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x14f442 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x047e3f and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ce3b597; op2val:0x4194f442; op3val:0x3f047e3f; valaddr_reg:x16; val_offset:1452; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1452, x17, x15, 1656, x18)

inst_462:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x63b597 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x14f442 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x047e3f and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ce3b597; op2val:0x4194f442; op3val:0x3f047e3f; valaddr_reg:x16; val_offset:1464; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1464, x17, x15, 1664, x18)

inst_463:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x63b597 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x14f442 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x047e3f and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ce3b597; op2val:0x4194f442; op3val:0x3f047e3f; valaddr_reg:x16; val_offset:1476; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1476, x17, x15, 1672, x18)

inst_464:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x63b597 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x14f442 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x047e3f and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ce3b597; op2val:0x4194f442; op3val:0x3f047e3f; valaddr_reg:x16; val_offset:1488; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1488, x17, x15, 1680, x18)

inst_465:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x63b597 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x14f442 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x047e3f and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ce3b597; op2val:0x4194f442; op3val:0x3f047e3f; valaddr_reg:x16; val_offset:1500; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1500, x17, x15, 1688, x18)

inst_466:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3b1277 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7d85f6 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x394324 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f3b1277; op2val:0x3efd85f6; op3val:0x3eb94324; valaddr_reg:x16; val_offset:1512; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1512, x17, x15, 1696, x18)

inst_467:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3b1277 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7d85f6 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x394324 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f3b1277; op2val:0x3efd85f6; op3val:0x3eb94324; valaddr_reg:x16; val_offset:1524; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1524, x17, x15, 1704, x18)

inst_468:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3b1277 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7d85f6 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x394324 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f3b1277; op2val:0x3efd85f6; op3val:0x3eb94324; valaddr_reg:x16; val_offset:1536; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1536, x17, x15, 1712, x18)

inst_469:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3b1277 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7d85f6 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x394324 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f3b1277; op2val:0x3efd85f6; op3val:0x3eb94324; valaddr_reg:x16; val_offset:1548; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1548, x17, x15, 1720, x18)

inst_470:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3b1277 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7d85f6 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x394324 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f3b1277; op2val:0x3efd85f6; op3val:0x3eb94324; valaddr_reg:x16; val_offset:1560; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1560, x17, x15, 1728, x18)

inst_471:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4316db and fs2 == 0 and fe2 == 0x7f and fm2 == 0x035c97 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x483684 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ec316db; op2val:0x3f835c97; op3val:0x3ec83684; valaddr_reg:x16; val_offset:1572; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1572, x17, x15, 1736, x18)

inst_472:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4316db and fs2 == 0 and fe2 == 0x7f and fm2 == 0x035c97 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x483684 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ec316db; op2val:0x3f835c97; op3val:0x3ec83684; valaddr_reg:x16; val_offset:1584; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1584, x17, x15, 1744, x18)

inst_473:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4316db and fs2 == 0 and fe2 == 0x7f and fm2 == 0x035c97 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x483684 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ec316db; op2val:0x3f835c97; op3val:0x3ec83684; valaddr_reg:x16; val_offset:1596; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1596, x17, x15, 1752, x18)

inst_474:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4316db and fs2 == 0 and fe2 == 0x7f and fm2 == 0x035c97 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x483684 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ec316db; op2val:0x3f835c97; op3val:0x3ec83684; valaddr_reg:x16; val_offset:1608; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1608, x17, x15, 1760, x18)

inst_475:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4316db and fs2 == 0 and fe2 == 0x7f and fm2 == 0x035c97 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x483684 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ec316db; op2val:0x3f835c97; op3val:0x3ec83684; valaddr_reg:x16; val_offset:1620; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1620, x17, x15, 1768, x18)

inst_476:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x11efeb and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3a9164 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x54b667 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f11efeb; op2val:0x3f3a9164; op3val:0x3ed4b667; valaddr_reg:x16; val_offset:1632; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1632, x17, x15, 1776, x18)

inst_477:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x11efeb and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3a9164 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x54b667 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f11efeb; op2val:0x3f3a9164; op3val:0x3ed4b667; valaddr_reg:x16; val_offset:1644; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1644, x17, x15, 1784, x18)

inst_478:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x11efeb and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3a9164 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x54b667 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f11efeb; op2val:0x3f3a9164; op3val:0x3ed4b667; valaddr_reg:x16; val_offset:1656; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1656, x17, x15, 1792, x18)

inst_479:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x11efeb and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3a9164 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x54b667 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f11efeb; op2val:0x3f3a9164; op3val:0x3ed4b667; valaddr_reg:x16; val_offset:1668; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1668, x17, x15, 1800, x18)

inst_480:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x11efeb and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3a9164 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x54b667 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f11efeb; op2val:0x3f3a9164; op3val:0x3ed4b667; valaddr_reg:x16; val_offset:1680; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1680, x17, x15, 1808, x18)

inst_481:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x302424 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29b985 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x698f03 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eb02424; op2val:0x4029b985; op3val:0x3f698f03; valaddr_reg:x16; val_offset:1692; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1692, x17, x15, 1816, x18)

inst_482:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x302424 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29b985 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x698f03 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eb02424; op2val:0x4029b985; op3val:0x3f698f03; valaddr_reg:x16; val_offset:1704; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1704, x17, x15, 1824, x18)

inst_483:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x302424 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29b985 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x698f03 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eb02424; op2val:0x4029b985; op3val:0x3f698f03; valaddr_reg:x16; val_offset:1716; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1716, x17, x15, 1832, x18)

inst_484:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x302424 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29b985 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x698f03 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eb02424; op2val:0x4029b985; op3val:0x3f698f03; valaddr_reg:x16; val_offset:1728; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1728, x17, x15, 1840, x18)

inst_485:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x302424 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29b985 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x698f03 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eb02424; op2val:0x4029b985; op3val:0x3f698f03; valaddr_reg:x16; val_offset:1740; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1740, x17, x15, 1848, x18)

inst_486:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x67f100 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x351333 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x240ecb and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ee7f100; op2val:0x3fb51333; op3val:0x3f240ecb; valaddr_reg:x16; val_offset:1752; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1752, x17, x15, 1856, x18)

inst_487:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x67f100 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x351333 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x240ecb and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ee7f100; op2val:0x3fb51333; op3val:0x3f240ecb; valaddr_reg:x16; val_offset:1764; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1764, x17, x15, 1864, x18)

inst_488:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x67f100 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x351333 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x240ecb and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ee7f100; op2val:0x3fb51333; op3val:0x3f240ecb; valaddr_reg:x16; val_offset:1776; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1776, x17, x15, 1872, x18)

inst_489:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x67f100 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x351333 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x240ecb and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ee7f100; op2val:0x3fb51333; op3val:0x3f240ecb; valaddr_reg:x16; val_offset:1788; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1788, x17, x15, 1880, x18)

inst_490:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x67f100 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x351333 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x240ecb and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ee7f100; op2val:0x3fb51333; op3val:0x3f240ecb; valaddr_reg:x16; val_offset:1800; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1800, x17, x15, 1888, x18)

inst_491:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x477bb8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4a4503 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x1d9d66 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f477bb8; op2val:0x3f4a4503; op3val:0x3f1d9d66; valaddr_reg:x16; val_offset:1812; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1812, x17, x15, 1896, x18)

inst_492:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x477bb8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4a4503 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x1d9d66 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f477bb8; op2val:0x3f4a4503; op3val:0x3f1d9d66; valaddr_reg:x16; val_offset:1824; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1824, x17, x15, 1904, x18)

inst_493:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x477bb8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4a4503 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x1d9d66 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f477bb8; op2val:0x3f4a4503; op3val:0x3f1d9d66; valaddr_reg:x16; val_offset:1836; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1836, x17, x15, 1912, x18)

inst_494:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x477bb8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4a4503 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x1d9d66 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f477bb8; op2val:0x3f4a4503; op3val:0x3f1d9d66; valaddr_reg:x16; val_offset:1848; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1848, x17, x15, 1920, x18)

inst_495:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x477bb8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4a4503 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x1d9d66 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f477bb8; op2val:0x3f4a4503; op3val:0x3f1d9d66; valaddr_reg:x16; val_offset:1860; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1860, x17, x15, 1928, x18)

inst_496:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5114c2 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x3db5c2 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x1af0c6 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5114c2; op2val:0x3dbdb5c2; op3val:0x3d9af0c6; valaddr_reg:x16; val_offset:1872; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1872, x17, x15, 1936, x18)

inst_497:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5114c2 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x3db5c2 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x1af0c6 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5114c2; op2val:0x3dbdb5c2; op3val:0x3d9af0c6; valaddr_reg:x16; val_offset:1884; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1884, x17, x15, 1944, x18)

inst_498:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5114c2 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x3db5c2 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x1af0c6 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5114c2; op2val:0x3dbdb5c2; op3val:0x3d9af0c6; valaddr_reg:x16; val_offset:1896; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1896, x17, x15, 1952, x18)

inst_499:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5114c2 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x3db5c2 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x1af0c6 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5114c2; op2val:0x3dbdb5c2; op3val:0x3d9af0c6; valaddr_reg:x16; val_offset:1908; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1908, x17, x15, 1960, x18)

inst_500:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5114c2 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x3db5c2 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x1af0c6 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5114c2; op2val:0x3dbdb5c2; op3val:0x3d9af0c6; valaddr_reg:x16; val_offset:1920; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1920, x17, x15, 1968, x18)

inst_501:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2488c9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x225335 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x50a814 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f2488c9; op2val:0x3fa25335; op3val:0x3f50a814; valaddr_reg:x16; val_offset:1932; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1932, x17, x15, 1976, x18)

inst_502:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2488c9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x225335 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x50a814 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f2488c9; op2val:0x3fa25335; op3val:0x3f50a814; valaddr_reg:x16; val_offset:1944; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1944, x17, x15, 1984, x18)

inst_503:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2488c9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x225335 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x50a814 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f2488c9; op2val:0x3fa25335; op3val:0x3f50a814; valaddr_reg:x16; val_offset:1956; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1956, x17, x15, 1992, x18)

inst_504:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2488c9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x225335 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x50a814 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f2488c9; op2val:0x3fa25335; op3val:0x3f50a814; valaddr_reg:x16; val_offset:1968; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1968, x17, x15, 2000, x18)

inst_505:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2488c9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x225335 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x50a814 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f2488c9; op2val:0x3fa25335; op3val:0x3f50a814; valaddr_reg:x16; val_offset:1980; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1980, x17, x15, 2008, x18)

inst_506:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x68eeea and fs2 == 0 and fe2 == 0x7c and fm2 == 0x0cac9c and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7fff6e and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f68eeea; op2val:0x3e0cac9c; op3val:0x3dffff6e; valaddr_reg:x16; val_offset:1992; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1992, x17, x15, 2016, x18)

inst_507:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x68eeea and fs2 == 0 and fe2 == 0x7c and fm2 == 0x0cac9c and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7fff6e and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f68eeea; op2val:0x3e0cac9c; op3val:0x3dffff6e; valaddr_reg:x16; val_offset:2004; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 2004, x17, x15, 2024, x18)
RVTEST_SIGBASE(x15,signature_x15_3)

inst_508:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x68eeea and fs2 == 0 and fe2 == 0x7c and fm2 == 0x0cac9c and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7fff6e and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f68eeea; op2val:0x3e0cac9c; op3val:0x3dffff6e; valaddr_reg:x16; val_offset:2016; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 2016, x17, x15, 0, x18)

inst_509:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x68eeea and fs2 == 0 and fe2 == 0x7c and fm2 == 0x0cac9c and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7fff6e and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f68eeea; op2val:0x3e0cac9c; op3val:0x3dffff6e; valaddr_reg:x16; val_offset:2028; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 2028, x17, x15, 8, x18)
addi x16,x16,2040

inst_510:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x68eeea and fs2 == 0 and fe2 == 0x7c and fm2 == 0x0cac9c and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7fff6e and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f68eeea; op2val:0x3e0cac9c; op3val:0x3dffff6e; valaddr_reg:x16; val_offset:0; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 0, x17, x15, 16, x18)

inst_511:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0b0e60 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3f1e85 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x4fa09d and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e8b0e60; op2val:0x3fbf1e85; op3val:0x3ecfa09d; valaddr_reg:x16; val_offset:12; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 12, x17, x15, 24, x18)

inst_512:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0b0e60 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3f1e85 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x4fa09d and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e8b0e60; op2val:0x3fbf1e85; op3val:0x3ecfa09d; valaddr_reg:x16; val_offset:24; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 24, x17, x15, 32, x18)

inst_513:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0b0e60 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3f1e85 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x4fa09d and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e8b0e60; op2val:0x3fbf1e85; op3val:0x3ecfa09d; valaddr_reg:x16; val_offset:36; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 36, x17, x15, 40, x18)

inst_514:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0b0e60 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3f1e85 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x4fa09d and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e8b0e60; op2val:0x3fbf1e85; op3val:0x3ecfa09d; valaddr_reg:x16; val_offset:48; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 48, x17, x15, 48, x18)

inst_515:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0b0e60 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3f1e85 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x4fa09d and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e8b0e60; op2val:0x3fbf1e85; op3val:0x3ecfa09d; valaddr_reg:x16; val_offset:60; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 60, x17, x15, 56, x18)

inst_516:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x718fe8 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x54414b and fs3 == 0 and fe3 == 0x7e and fm3 == 0x4848c9 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3df18fe8; op2val:0x40d4414b; op3val:0x3f4848c9; valaddr_reg:x16; val_offset:72; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 72, x17, x15, 64, x18)

inst_517:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x718fe8 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x54414b and fs3 == 0 and fe3 == 0x7e and fm3 == 0x4848c9 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3df18fe8; op2val:0x40d4414b; op3val:0x3f4848c9; valaddr_reg:x16; val_offset:84; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 84, x17, x15, 72, x18)

inst_518:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x718fe8 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x54414b and fs3 == 0 and fe3 == 0x7e and fm3 == 0x4848c9 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3df18fe8; op2val:0x40d4414b; op3val:0x3f4848c9; valaddr_reg:x16; val_offset:96; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 96, x17, x15, 80, x18)

inst_519:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x718fe8 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x54414b and fs3 == 0 and fe3 == 0x7e and fm3 == 0x4848c9 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3df18fe8; op2val:0x40d4414b; op3val:0x3f4848c9; valaddr_reg:x16; val_offset:108; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 108, x17, x15, 88, x18)

inst_520:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x718fe8 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x54414b and fs3 == 0 and fe3 == 0x7e and fm3 == 0x4848c9 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3df18fe8; op2val:0x40d4414b; op3val:0x3f4848c9; valaddr_reg:x16; val_offset:120; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 120, x17, x15, 96, x18)

inst_521:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0b9175 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0bb369 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x185396 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e8b9175; op2val:0x3f8bb369; op3val:0x3e985396; valaddr_reg:x16; val_offset:132; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 132, x17, x15, 104, x18)

inst_522:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0b9175 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0bb369 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x185396 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e8b9175; op2val:0x3f8bb369; op3val:0x3e985396; valaddr_reg:x16; val_offset:144; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 144, x17, x15, 112, x18)

inst_523:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0b9175 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0bb369 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x185396 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e8b9175; op2val:0x3f8bb369; op3val:0x3e985396; valaddr_reg:x16; val_offset:156; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 156, x17, x15, 120, x18)

inst_524:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0b9175 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0bb369 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x185396 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e8b9175; op2val:0x3f8bb369; op3val:0x3e985396; valaddr_reg:x16; val_offset:168; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 168, x17, x15, 128, x18)

inst_525:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0b9175 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0bb369 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x185396 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e8b9175; op2val:0x3f8bb369; op3val:0x3e985396; valaddr_reg:x16; val_offset:180; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 180, x17, x15, 136, x18)

inst_526:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x589284 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0e7eba and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7118f6 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f589284; op2val:0x3f8e7eba; op3val:0x3f7118f6; valaddr_reg:x16; val_offset:192; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 192, x17, x15, 144, x18)

inst_527:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x589284 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0e7eba and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7118f6 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f589284; op2val:0x3f8e7eba; op3val:0x3f7118f6; valaddr_reg:x16; val_offset:204; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 204, x17, x15, 152, x18)

inst_528:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x589284 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0e7eba and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7118f6 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f589284; op2val:0x3f8e7eba; op3val:0x3f7118f6; valaddr_reg:x16; val_offset:216; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 216, x17, x15, 160, x18)

inst_529:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x589284 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0e7eba and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7118f6 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f589284; op2val:0x3f8e7eba; op3val:0x3f7118f6; valaddr_reg:x16; val_offset:228; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 228, x17, x15, 168, x18)

inst_530:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x589284 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0e7eba and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7118f6 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f589284; op2val:0x3f8e7eba; op3val:0x3f7118f6; valaddr_reg:x16; val_offset:240; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 240, x17, x15, 176, x18)

inst_531:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4a4717 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x61729b and fs3 == 0 and fe3 == 0x7e and fm3 == 0x322309 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f4a4717; op2val:0x3f61729b; op3val:0x3f322309; valaddr_reg:x16; val_offset:252; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 252, x17, x15, 184, x18)

inst_532:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4a4717 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x61729b and fs3 == 0 and fe3 == 0x7e and fm3 == 0x322309 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f4a4717; op2val:0x3f61729b; op3val:0x3f322309; valaddr_reg:x16; val_offset:264; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 264, x17, x15, 192, x18)

inst_533:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4a4717 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x61729b and fs3 == 0 and fe3 == 0x7e and fm3 == 0x322309 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f4a4717; op2val:0x3f61729b; op3val:0x3f322309; valaddr_reg:x16; val_offset:276; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 276, x17, x15, 200, x18)

inst_534:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4a4717 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x61729b and fs3 == 0 and fe3 == 0x7e and fm3 == 0x322309 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f4a4717; op2val:0x3f61729b; op3val:0x3f322309; valaddr_reg:x16; val_offset:288; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 288, x17, x15, 208, x18)

inst_535:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4a4717 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x61729b and fs3 == 0 and fe3 == 0x7e and fm3 == 0x322309 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f4a4717; op2val:0x3f61729b; op3val:0x3f322309; valaddr_reg:x16; val_offset:300; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 300, x17, x15, 216, x18)

inst_536:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x76edb4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x02da8d and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7c6f09 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f76edb4; op2val:0x3f82da8d; op3val:0x3f7c6f09; valaddr_reg:x16; val_offset:312; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 312, x17, x15, 224, x18)

inst_537:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x76edb4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x02da8d and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7c6f09 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f76edb4; op2val:0x3f82da8d; op3val:0x3f7c6f09; valaddr_reg:x16; val_offset:324; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 324, x17, x15, 232, x18)

inst_538:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x76edb4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x02da8d and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7c6f09 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f76edb4; op2val:0x3f82da8d; op3val:0x3f7c6f09; valaddr_reg:x16; val_offset:336; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 336, x17, x15, 240, x18)

inst_539:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x76edb4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x02da8d and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7c6f09 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f76edb4; op2val:0x3f82da8d; op3val:0x3f7c6f09; valaddr_reg:x16; val_offset:348; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 348, x17, x15, 248, x18)

inst_540:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x76edb4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x02da8d and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7c6f09 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f76edb4; op2val:0x3f82da8d; op3val:0x3f7c6f09; valaddr_reg:x16; val_offset:360; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 360, x17, x15, 256, x18)

inst_541:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6d2a9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x654760 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x546940 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eed2a9f; op2val:0x3fe54760; op3val:0x3f546940; valaddr_reg:x16; val_offset:372; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 372, x17, x15, 264, x18)

inst_542:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6d2a9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x654760 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x546940 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eed2a9f; op2val:0x3fe54760; op3val:0x3f546940; valaddr_reg:x16; val_offset:384; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 384, x17, x15, 272, x18)

inst_543:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6d2a9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x654760 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x546940 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eed2a9f; op2val:0x3fe54760; op3val:0x3f546940; valaddr_reg:x16; val_offset:396; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 396, x17, x15, 280, x18)

inst_544:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6d2a9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x654760 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x546940 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eed2a9f; op2val:0x3fe54760; op3val:0x3f546940; valaddr_reg:x16; val_offset:408; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 408, x17, x15, 288, x18)

inst_545:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6d2a9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x654760 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x546940 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eed2a9f; op2val:0x3fe54760; op3val:0x3f546940; valaddr_reg:x16; val_offset:420; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 420, x17, x15, 296, x18)

inst_546:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7806b0 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x055b5c and fs3 == 0 and fe3 == 0x7e and fm3 == 0x0133fd and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3df806b0; op2val:0x40855b5c; op3val:0x3f0133fd; valaddr_reg:x16; val_offset:432; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 432, x17, x15, 304, x18)

inst_547:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7806b0 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x055b5c and fs3 == 0 and fe3 == 0x7e and fm3 == 0x0133fd and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3df806b0; op2val:0x40855b5c; op3val:0x3f0133fd; valaddr_reg:x16; val_offset:444; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 444, x17, x15, 312, x18)

inst_548:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7806b0 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x055b5c and fs3 == 0 and fe3 == 0x7e and fm3 == 0x0133fd and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3df806b0; op2val:0x40855b5c; op3val:0x3f0133fd; valaddr_reg:x16; val_offset:456; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 456, x17, x15, 320, x18)

inst_549:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7806b0 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x055b5c and fs3 == 0 and fe3 == 0x7e and fm3 == 0x0133fd and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3df806b0; op2val:0x40855b5c; op3val:0x3f0133fd; valaddr_reg:x16; val_offset:468; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 468, x17, x15, 328, x18)

inst_550:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7806b0 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x055b5c and fs3 == 0 and fe3 == 0x7e and fm3 == 0x0133fd and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3df806b0; op2val:0x40855b5c; op3val:0x3f0133fd; valaddr_reg:x16; val_offset:480; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 480, x17, x15, 336, x18)

inst_551:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x418416 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28c5e0 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7f2886 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ec18416; op2val:0x4028c5e0; op3val:0x3f7f2886; valaddr_reg:x16; val_offset:492; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 492, x17, x15, 344, x18)

inst_552:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x418416 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28c5e0 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7f2886 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ec18416; op2val:0x4028c5e0; op3val:0x3f7f2886; valaddr_reg:x16; val_offset:504; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 504, x17, x15, 352, x18)

inst_553:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x418416 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28c5e0 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7f2886 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ec18416; op2val:0x4028c5e0; op3val:0x3f7f2886; valaddr_reg:x16; val_offset:516; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 516, x17, x15, 360, x18)

inst_554:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x418416 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28c5e0 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7f2886 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ec18416; op2val:0x4028c5e0; op3val:0x3f7f2886; valaddr_reg:x16; val_offset:528; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 528, x17, x15, 368, x18)

inst_555:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x418416 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28c5e0 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7f2886 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ec18416; op2val:0x4028c5e0; op3val:0x3f7f2886; valaddr_reg:x16; val_offset:540; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 540, x17, x15, 376, x18)

inst_556:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x019a7c and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b25b7 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x2d4a93 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e819a7c; op2val:0x3fab25b7; op3val:0x3ead4a93; valaddr_reg:x16; val_offset:552; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 552, x17, x15, 384, x18)

inst_557:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x019a7c and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b25b7 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x2d4a93 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e819a7c; op2val:0x3fab25b7; op3val:0x3ead4a93; valaddr_reg:x16; val_offset:564; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 564, x17, x15, 392, x18)

inst_558:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x019a7c and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b25b7 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x2d4a93 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e819a7c; op2val:0x3fab25b7; op3val:0x3ead4a93; valaddr_reg:x16; val_offset:576; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 576, x17, x15, 400, x18)

inst_559:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x019a7c and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b25b7 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x2d4a93 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e819a7c; op2val:0x3fab25b7; op3val:0x3ead4a93; valaddr_reg:x16; val_offset:588; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 588, x17, x15, 408, x18)

inst_560:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x019a7c and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b25b7 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x2d4a93 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e819a7c; op2val:0x3fab25b7; op3val:0x3ead4a93; valaddr_reg:x16; val_offset:600; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 600, x17, x15, 416, x18)

inst_561:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x103387 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x58d80e and fs3 == 0 and fe3 == 0x7e and fm3 == 0x744a5c and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e903387; op2val:0x4058d80e; op3val:0x3f744a5c; valaddr_reg:x16; val_offset:612; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 612, x17, x15, 424, x18)

inst_562:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x103387 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x58d80e and fs3 == 0 and fe3 == 0x7e and fm3 == 0x744a5c and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e903387; op2val:0x4058d80e; op3val:0x3f744a5c; valaddr_reg:x16; val_offset:624; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 624, x17, x15, 432, x18)

inst_563:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x103387 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x58d80e and fs3 == 0 and fe3 == 0x7e and fm3 == 0x744a5c and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e903387; op2val:0x4058d80e; op3val:0x3f744a5c; valaddr_reg:x16; val_offset:636; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 636, x17, x15, 440, x18)

inst_564:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x103387 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x58d80e and fs3 == 0 and fe3 == 0x7e and fm3 == 0x744a5c and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e903387; op2val:0x4058d80e; op3val:0x3f744a5c; valaddr_reg:x16; val_offset:648; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 648, x17, x15, 448, x18)

inst_565:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x103387 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x58d80e and fs3 == 0 and fe3 == 0x7e and fm3 == 0x744a5c and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e903387; op2val:0x4058d80e; op3val:0x3f744a5c; valaddr_reg:x16; val_offset:660; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 660, x17, x15, 456, x18)

inst_566:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0c0b65 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x0cadec and fs3 == 0 and fe3 == 0x79 and fm3 == 0x19eac0 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0c0b65; op2val:0x3d0cadec; op3val:0x3c99eac0; valaddr_reg:x16; val_offset:672; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 672, x17, x15, 464, x18)

inst_567:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0c0b65 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x0cadec and fs3 == 0 and fe3 == 0x79 and fm3 == 0x19eac0 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0c0b65; op2val:0x3d0cadec; op3val:0x3c99eac0; valaddr_reg:x16; val_offset:684; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 684, x17, x15, 472, x18)

inst_568:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0c0b65 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x0cadec and fs3 == 0 and fe3 == 0x79 and fm3 == 0x19eac0 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0c0b65; op2val:0x3d0cadec; op3val:0x3c99eac0; valaddr_reg:x16; val_offset:696; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 696, x17, x15, 480, x18)

inst_569:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0c0b65 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x0cadec and fs3 == 0 and fe3 == 0x79 and fm3 == 0x19eac0 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0c0b65; op2val:0x3d0cadec; op3val:0x3c99eac0; valaddr_reg:x16; val_offset:708; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 708, x17, x15, 488, x18)

inst_570:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0c0b65 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x0cadec and fs3 == 0 and fe3 == 0x79 and fm3 == 0x19eac0 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0c0b65; op2val:0x3d0cadec; op3val:0x3c99eac0; valaddr_reg:x16; val_offset:720; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 720, x17, x15, 496, x18)

inst_571:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x690ff7 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x02666a and fs3 == 0 and fe3 == 0x7b and fm3 == 0x6d6eb1 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ee90ff7; op2val:0x3e82666a; op3val:0x3ded6eb1; valaddr_reg:x16; val_offset:732; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 732, x17, x15, 504, x18)

inst_572:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x690ff7 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x02666a and fs3 == 0 and fe3 == 0x7b and fm3 == 0x6d6eb1 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ee90ff7; op2val:0x3e82666a; op3val:0x3ded6eb1; valaddr_reg:x16; val_offset:744; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 744, x17, x15, 512, x18)

inst_573:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x690ff7 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x02666a and fs3 == 0 and fe3 == 0x7b and fm3 == 0x6d6eb1 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ee90ff7; op2val:0x3e82666a; op3val:0x3ded6eb1; valaddr_reg:x16; val_offset:756; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 756, x17, x15, 520, x18)

inst_574:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x690ff7 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x02666a and fs3 == 0 and fe3 == 0x7b and fm3 == 0x6d6eb1 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ee90ff7; op2val:0x3e82666a; op3val:0x3ded6eb1; valaddr_reg:x16; val_offset:768; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 768, x17, x15, 528, x18)

inst_575:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x690ff7 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x02666a and fs3 == 0 and fe3 == 0x7b and fm3 == 0x6d6eb1 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ee90ff7; op2val:0x3e82666a; op3val:0x3ded6eb1; valaddr_reg:x16; val_offset:780; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 780, x17, x15, 536, x18)

inst_576:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6a93ee and fs2 == 0 and fe2 == 0x7f and fm2 == 0x36bd69 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x2772bb and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eea93ee; op2val:0x3fb6bd69; op3val:0x3f2772bb; valaddr_reg:x16; val_offset:792; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 792, x17, x15, 544, x18)

inst_577:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6a93ee and fs2 == 0 and fe2 == 0x7f and fm2 == 0x36bd69 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x2772bb and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eea93ee; op2val:0x3fb6bd69; op3val:0x3f2772bb; valaddr_reg:x16; val_offset:804; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 804, x17, x15, 552, x18)

inst_578:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6a93ee and fs2 == 0 and fe2 == 0x7f and fm2 == 0x36bd69 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x2772bb and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eea93ee; op2val:0x3fb6bd69; op3val:0x3f2772bb; valaddr_reg:x16; val_offset:816; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 816, x17, x15, 560, x18)

inst_579:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6a93ee and fs2 == 0 and fe2 == 0x7f and fm2 == 0x36bd69 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x2772bb and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eea93ee; op2val:0x3fb6bd69; op3val:0x3f2772bb; valaddr_reg:x16; val_offset:828; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 828, x17, x15, 568, x18)

inst_580:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6a93ee and fs2 == 0 and fe2 == 0x7f and fm2 == 0x36bd69 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x2772bb and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eea93ee; op2val:0x3fb6bd69; op3val:0x3f2772bb; valaddr_reg:x16; val_offset:840; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 840, x17, x15, 576, x18)

inst_581:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0fe4ca and fs2 == 0 and fe2 == 0x7f and fm2 == 0x299655 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3ea513 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0fe4ca; op2val:0x3fa99655; op3val:0x3f3ea513; valaddr_reg:x16; val_offset:852; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 852, x17, x15, 584, x18)

inst_582:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0fe4ca and fs2 == 0 and fe2 == 0x7f and fm2 == 0x299655 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3ea513 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0fe4ca; op2val:0x3fa99655; op3val:0x3f3ea513; valaddr_reg:x16; val_offset:864; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 864, x17, x15, 592, x18)

inst_583:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0fe4ca and fs2 == 0 and fe2 == 0x7f and fm2 == 0x299655 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3ea513 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0fe4ca; op2val:0x3fa99655; op3val:0x3f3ea513; valaddr_reg:x16; val_offset:876; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 876, x17, x15, 600, x18)

inst_584:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0fe4ca and fs2 == 0 and fe2 == 0x7f and fm2 == 0x299655 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3ea513 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0fe4ca; op2val:0x3fa99655; op3val:0x3f3ea513; valaddr_reg:x16; val_offset:888; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 888, x17, x15, 608, x18)

inst_585:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0fe4ca and fs2 == 0 and fe2 == 0x7f and fm2 == 0x299655 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3ea513 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0fe4ca; op2val:0x3fa99655; op3val:0x3f3ea513; valaddr_reg:x16; val_offset:900; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 900, x17, x15, 616, x18)

inst_586:
// fs1 == 0 and fe1 == 0x78 and fm1 == 0x32e388 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x4aa098 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x0d97c2 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3c32e388; op2val:0x414aa098; op3val:0x3e0d97c2; valaddr_reg:x16; val_offset:912; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 912, x17, x15, 624, x18)

inst_587:
// fs1 == 0 and fe1 == 0x78 and fm1 == 0x32e388 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x4aa098 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x0d97c2 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3c32e388; op2val:0x414aa098; op3val:0x3e0d97c2; valaddr_reg:x16; val_offset:924; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 924, x17, x15, 632, x18)

inst_588:
// fs1 == 0 and fe1 == 0x78 and fm1 == 0x32e388 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x4aa098 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x0d97c2 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3c32e388; op2val:0x414aa098; op3val:0x3e0d97c2; valaddr_reg:x16; val_offset:936; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 936, x17, x15, 640, x18)

inst_589:
// fs1 == 0 and fe1 == 0x78 and fm1 == 0x32e388 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x4aa098 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x0d97c2 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3c32e388; op2val:0x414aa098; op3val:0x3e0d97c2; valaddr_reg:x16; val_offset:948; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 948, x17, x15, 648, x18)

inst_590:
// fs1 == 0 and fe1 == 0x78 and fm1 == 0x32e388 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x4aa098 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x0d97c2 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3c32e388; op2val:0x414aa098; op3val:0x3e0d97c2; valaddr_reg:x16; val_offset:960; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 960, x17, x15, 656, x18)

inst_591:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1709c1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x325538 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x526e1f and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e9709c1; op2val:0x3f325538; op3val:0x3e526e1f; valaddr_reg:x16; val_offset:972; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 972, x17, x15, 664, x18)

inst_592:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1709c1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x325538 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x526e1f and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e9709c1; op2val:0x3f325538; op3val:0x3e526e1f; valaddr_reg:x16; val_offset:984; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 984, x17, x15, 672, x18)

inst_593:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1709c1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x325538 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x526e1f and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e9709c1; op2val:0x3f325538; op3val:0x3e526e1f; valaddr_reg:x16; val_offset:996; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 996, x17, x15, 680, x18)

inst_594:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1709c1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x325538 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x526e1f and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e9709c1; op2val:0x3f325538; op3val:0x3e526e1f; valaddr_reg:x16; val_offset:1008; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1008, x17, x15, 688, x18)

inst_595:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1709c1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x325538 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x526e1f and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e9709c1; op2val:0x3f325538; op3val:0x3e526e1f; valaddr_reg:x16; val_offset:1020; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1020, x17, x15, 696, x18)

inst_596:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6dfbb9 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x720a7b and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6101b4 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f6dfbb9; op2val:0x3f720a7b; op3val:0x3f6101b4; valaddr_reg:x16; val_offset:1032; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1032, x17, x15, 704, x18)

inst_597:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6dfbb9 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x720a7b and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6101b4 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f6dfbb9; op2val:0x3f720a7b; op3val:0x3f6101b4; valaddr_reg:x16; val_offset:1044; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1044, x17, x15, 712, x18)

inst_598:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6dfbb9 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x720a7b and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6101b4 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f6dfbb9; op2val:0x3f720a7b; op3val:0x3f6101b4; valaddr_reg:x16; val_offset:1056; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1056, x17, x15, 720, x18)

inst_599:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6dfbb9 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x720a7b and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6101b4 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f6dfbb9; op2val:0x3f720a7b; op3val:0x3f6101b4; valaddr_reg:x16; val_offset:1068; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1068, x17, x15, 728, x18)

inst_600:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6dfbb9 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x720a7b and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6101b4 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f6dfbb9; op2val:0x3f720a7b; op3val:0x3f6101b4; valaddr_reg:x16; val_offset:1080; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1080, x17, x15, 736, x18)

inst_601:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x24a6ea and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4eee5d and fs3 == 0 and fe3 == 0x7e and fm3 == 0x05179f and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ea4a6ea; op2val:0x3fceee5d; op3val:0x3f05179f; valaddr_reg:x16; val_offset:1092; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1092, x17, x15, 744, x18)

inst_602:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x24a6ea and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4eee5d and fs3 == 0 and fe3 == 0x7e and fm3 == 0x05179f and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ea4a6ea; op2val:0x3fceee5d; op3val:0x3f05179f; valaddr_reg:x16; val_offset:1104; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1104, x17, x15, 752, x18)

inst_603:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x24a6ea and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4eee5d and fs3 == 0 and fe3 == 0x7e and fm3 == 0x05179f and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ea4a6ea; op2val:0x3fceee5d; op3val:0x3f05179f; valaddr_reg:x16; val_offset:1116; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1116, x17, x15, 760, x18)

inst_604:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x24a6ea and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4eee5d and fs3 == 0 and fe3 == 0x7e and fm3 == 0x05179f and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ea4a6ea; op2val:0x3fceee5d; op3val:0x3f05179f; valaddr_reg:x16; val_offset:1128; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1128, x17, x15, 768, x18)

inst_605:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x24a6ea and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4eee5d and fs3 == 0 and fe3 == 0x7e and fm3 == 0x05179f and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ea4a6ea; op2val:0x3fceee5d; op3val:0x3f05179f; valaddr_reg:x16; val_offset:1140; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1140, x17, x15, 776, x18)

inst_606:
// fs1 == 0 and fe1 == 0x77 and fm1 == 0x40d6b0 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x25cbd6 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x79c7d7 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3bc0d6b0; op2val:0x40a5cbd6; op3val:0x3cf9c7d7; valaddr_reg:x16; val_offset:1152; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1152, x17, x15, 784, x18)

inst_607:
// fs1 == 0 and fe1 == 0x77 and fm1 == 0x40d6b0 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x25cbd6 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x79c7d7 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3bc0d6b0; op2val:0x40a5cbd6; op3val:0x3cf9c7d7; valaddr_reg:x16; val_offset:1164; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1164, x17, x15, 792, x18)

inst_608:
// fs1 == 0 and fe1 == 0x77 and fm1 == 0x40d6b0 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x25cbd6 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x79c7d7 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3bc0d6b0; op2val:0x40a5cbd6; op3val:0x3cf9c7d7; valaddr_reg:x16; val_offset:1176; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1176, x17, x15, 800, x18)

inst_609:
// fs1 == 0 and fe1 == 0x77 and fm1 == 0x40d6b0 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x25cbd6 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x79c7d7 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3bc0d6b0; op2val:0x40a5cbd6; op3val:0x3cf9c7d7; valaddr_reg:x16; val_offset:1188; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1188, x17, x15, 808, x18)

inst_610:
// fs1 == 0 and fe1 == 0x77 and fm1 == 0x40d6b0 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x25cbd6 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x79c7d7 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3bc0d6b0; op2val:0x40a5cbd6; op3val:0x3cf9c7d7; valaddr_reg:x16; val_offset:1200; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1200, x17, x15, 816, x18)

inst_611:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0de25f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x64127a and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7ccfb5 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0de25f; op2val:0x3fe4127a; op3val:0x3f7ccfb5; valaddr_reg:x16; val_offset:1212; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1212, x17, x15, 824, x18)

inst_612:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0de25f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x64127a and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7ccfb5 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0de25f; op2val:0x3fe4127a; op3val:0x3f7ccfb5; valaddr_reg:x16; val_offset:1224; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1224, x17, x15, 832, x18)

inst_613:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0de25f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x64127a and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7ccfb5 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0de25f; op2val:0x3fe4127a; op3val:0x3f7ccfb5; valaddr_reg:x16; val_offset:1236; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1236, x17, x15, 840, x18)

inst_614:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0de25f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x64127a and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7ccfb5 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0de25f; op2val:0x3fe4127a; op3val:0x3f7ccfb5; valaddr_reg:x16; val_offset:1248; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1248, x17, x15, 848, x18)

inst_615:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0de25f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x64127a and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7ccfb5 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0de25f; op2val:0x3fe4127a; op3val:0x3f7ccfb5; valaddr_reg:x16; val_offset:1260; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1260, x17, x15, 856, x18)

inst_616:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x25d6f7 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x311056 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x65686d and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e25d6f7; op2val:0x40b11056; op3val:0x3f65686d; valaddr_reg:x16; val_offset:1272; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1272, x17, x15, 864, x18)

inst_617:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x25d6f7 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x311056 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x65686d and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e25d6f7; op2val:0x40b11056; op3val:0x3f65686d; valaddr_reg:x16; val_offset:1284; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1284, x17, x15, 872, x18)

inst_618:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x25d6f7 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x311056 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x65686d and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e25d6f7; op2val:0x40b11056; op3val:0x3f65686d; valaddr_reg:x16; val_offset:1296; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1296, x17, x15, 880, x18)

inst_619:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x25d6f7 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x311056 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x65686d and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e25d6f7; op2val:0x40b11056; op3val:0x3f65686d; valaddr_reg:x16; val_offset:1308; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1308, x17, x15, 888, x18)

inst_620:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x25d6f7 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x311056 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x65686d and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e25d6f7; op2val:0x40b11056; op3val:0x3f65686d; valaddr_reg:x16; val_offset:1320; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1320, x17, x15, 896, x18)

inst_621:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7b0cf1 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x747d91 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x6fc37a and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f7b0cf1; op2val:0x3ef47d91; op3val:0x3eefc37a; valaddr_reg:x16; val_offset:1332; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1332, x17, x15, 904, x18)

inst_622:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7b0cf1 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x747d91 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x6fc37a and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f7b0cf1; op2val:0x3ef47d91; op3val:0x3eefc37a; valaddr_reg:x16; val_offset:1344; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1344, x17, x15, 912, x18)

inst_623:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7b0cf1 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x747d91 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x6fc37a and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f7b0cf1; op2val:0x3ef47d91; op3val:0x3eefc37a; valaddr_reg:x16; val_offset:1356; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1356, x17, x15, 920, x18)

inst_624:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7b0cf1 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x747d91 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x6fc37a and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f7b0cf1; op2val:0x3ef47d91; op3val:0x3eefc37a; valaddr_reg:x16; val_offset:1368; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1368, x17, x15, 928, x18)

inst_625:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7b0cf1 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x747d91 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x6fc37a and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f7b0cf1; op2val:0x3ef47d91; op3val:0x3eefc37a; valaddr_reg:x16; val_offset:1380; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1380, x17, x15, 936, x18)

inst_626:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x07eeae and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0f9234 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x1877eb and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f07eeae; op2val:0x3f8f9234; op3val:0x3f1877eb; valaddr_reg:x16; val_offset:1392; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1392, x17, x15, 944, x18)

inst_627:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x07eeae and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0f9234 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x1877eb and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f07eeae; op2val:0x3f8f9234; op3val:0x3f1877eb; valaddr_reg:x16; val_offset:1404; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1404, x17, x15, 952, x18)

inst_628:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x07eeae and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0f9234 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x1877eb and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f07eeae; op2val:0x3f8f9234; op3val:0x3f1877eb; valaddr_reg:x16; val_offset:1416; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1416, x17, x15, 960, x18)

inst_629:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x07eeae and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0f9234 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x1877eb and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f07eeae; op2val:0x3f8f9234; op3val:0x3f1877eb; valaddr_reg:x16; val_offset:1428; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1428, x17, x15, 968, x18)

inst_630:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x07eeae and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0f9234 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x1877eb and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f07eeae; op2val:0x3f8f9234; op3val:0x3f1877eb; valaddr_reg:x16; val_offset:1440; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1440, x17, x15, 976, x18)

inst_631:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5a4a19 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x47c53a and fs3 == 0 and fe3 == 0x7d and fm3 == 0x2a57c7 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5a4a19; op2val:0x3ec7c53a; op3val:0x3eaa57c7; valaddr_reg:x16; val_offset:1452; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1452, x17, x15, 984, x18)

inst_632:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5a4a19 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x47c53a and fs3 == 0 and fe3 == 0x7d and fm3 == 0x2a57c7 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5a4a19; op2val:0x3ec7c53a; op3val:0x3eaa57c7; valaddr_reg:x16; val_offset:1464; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1464, x17, x15, 992, x18)

inst_633:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5a4a19 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x47c53a and fs3 == 0 and fe3 == 0x7d and fm3 == 0x2a57c7 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5a4a19; op2val:0x3ec7c53a; op3val:0x3eaa57c7; valaddr_reg:x16; val_offset:1476; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1476, x17, x15, 1000, x18)

inst_634:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5a4a19 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x47c53a and fs3 == 0 and fe3 == 0x7d and fm3 == 0x2a57c7 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5a4a19; op2val:0x3ec7c53a; op3val:0x3eaa57c7; valaddr_reg:x16; val_offset:1488; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1488, x17, x15, 1008, x18)

inst_635:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5a4a19 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x47c53a and fs3 == 0 and fe3 == 0x7d and fm3 == 0x2a57c7 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5a4a19; op2val:0x3ec7c53a; op3val:0x3eaa57c7; valaddr_reg:x16; val_offset:1500; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1500, x17, x15, 1016, x18)

inst_636:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x20790e and fs2 == 0 and fe2 == 0x7d and fm2 == 0x089613 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x2b3cc6 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f20790e; op2val:0x3e889613; op3val:0x3e2b3cc6; valaddr_reg:x16; val_offset:1512; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1512, x17, x15, 1024, x18)

inst_637:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x20790e and fs2 == 0 and fe2 == 0x7d and fm2 == 0x089613 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x2b3cc6 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f20790e; op2val:0x3e889613; op3val:0x3e2b3cc6; valaddr_reg:x16; val_offset:1524; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1524, x17, x15, 1032, x18)

inst_638:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x20790e and fs2 == 0 and fe2 == 0x7d and fm2 == 0x089613 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x2b3cc6 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f20790e; op2val:0x3e889613; op3val:0x3e2b3cc6; valaddr_reg:x16; val_offset:1536; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1536, x17, x15, 1040, x18)

inst_639:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x20790e and fs2 == 0 and fe2 == 0x7d and fm2 == 0x089613 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x2b3cc6 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f20790e; op2val:0x3e889613; op3val:0x3e2b3cc6; valaddr_reg:x16; val_offset:1548; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1548, x17, x15, 1048, x18)

inst_640:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x20790e and fs2 == 0 and fe2 == 0x7d and fm2 == 0x089613 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x2b3cc6 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f20790e; op2val:0x3e889613; op3val:0x3e2b3cc6; valaddr_reg:x16; val_offset:1560; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1560, x17, x15, 1056, x18)

inst_641:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x65e7e5 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x3b672e and fs3 == 0 and fe3 == 0x7c and fm3 == 0x284d0e and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f65e7e5; op2val:0x3e3b672e; op3val:0x3e284d0e; valaddr_reg:x16; val_offset:1572; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1572, x17, x15, 1064, x18)

inst_642:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x65e7e5 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x3b672e and fs3 == 0 and fe3 == 0x7c and fm3 == 0x284d0e and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f65e7e5; op2val:0x3e3b672e; op3val:0x3e284d0e; valaddr_reg:x16; val_offset:1584; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1584, x17, x15, 1072, x18)

inst_643:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x65e7e5 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x3b672e and fs3 == 0 and fe3 == 0x7c and fm3 == 0x284d0e and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f65e7e5; op2val:0x3e3b672e; op3val:0x3e284d0e; valaddr_reg:x16; val_offset:1596; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1596, x17, x15, 1080, x18)

inst_644:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x65e7e5 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x3b672e and fs3 == 0 and fe3 == 0x7c and fm3 == 0x284d0e and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f65e7e5; op2val:0x3e3b672e; op3val:0x3e284d0e; valaddr_reg:x16; val_offset:1608; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1608, x17, x15, 1088, x18)

inst_645:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x65e7e5 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x3b672e and fs3 == 0 and fe3 == 0x7c and fm3 == 0x284d0e and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f65e7e5; op2val:0x3e3b672e; op3val:0x3e284d0e; valaddr_reg:x16; val_offset:1620; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1620, x17, x15, 1096, x18)

inst_646:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1dad82 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1c588a and fs3 == 0 and fe3 == 0x7d and fm3 == 0x409889 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f1dad82; op2val:0x3f1c588a; op3val:0x3ec09889; valaddr_reg:x16; val_offset:1632; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1632, x17, x15, 1104, x18)

inst_647:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1dad82 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1c588a and fs3 == 0 and fe3 == 0x7d and fm3 == 0x409889 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f1dad82; op2val:0x3f1c588a; op3val:0x3ec09889; valaddr_reg:x16; val_offset:1644; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1644, x17, x15, 1112, x18)

inst_648:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1dad82 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1c588a and fs3 == 0 and fe3 == 0x7d and fm3 == 0x409889 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f1dad82; op2val:0x3f1c588a; op3val:0x3ec09889; valaddr_reg:x16; val_offset:1656; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1656, x17, x15, 1120, x18)

inst_649:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1dad82 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1c588a and fs3 == 0 and fe3 == 0x7d and fm3 == 0x409889 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f1dad82; op2val:0x3f1c588a; op3val:0x3ec09889; valaddr_reg:x16; val_offset:1668; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1668, x17, x15, 1128, x18)

inst_650:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1dad82 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1c588a and fs3 == 0 and fe3 == 0x7d and fm3 == 0x409889 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f1dad82; op2val:0x3f1c588a; op3val:0x3ec09889; valaddr_reg:x16; val_offset:1680; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1680, x17, x15, 1136, x18)

inst_651:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x39b000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x44b8ac and fs3 == 0 and fe3 == 0x7d and fm3 == 0x0eb0b3 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f39b000; op2val:0x3ec4b8ac; op3val:0x3e8eb0b3; valaddr_reg:x16; val_offset:1692; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1692, x17, x15, 1144, x18)

inst_652:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x39b000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x44b8ac and fs3 == 0 and fe3 == 0x7d and fm3 == 0x0eb0b3 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f39b000; op2val:0x3ec4b8ac; op3val:0x3e8eb0b3; valaddr_reg:x16; val_offset:1704; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1704, x17, x15, 1152, x18)

inst_653:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x39b000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x44b8ac and fs3 == 0 and fe3 == 0x7d and fm3 == 0x0eb0b3 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f39b000; op2val:0x3ec4b8ac; op3val:0x3e8eb0b3; valaddr_reg:x16; val_offset:1716; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1716, x17, x15, 1160, x18)

inst_654:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x39b000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x44b8ac and fs3 == 0 and fe3 == 0x7d and fm3 == 0x0eb0b3 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f39b000; op2val:0x3ec4b8ac; op3val:0x3e8eb0b3; valaddr_reg:x16; val_offset:1728; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1728, x17, x15, 1168, x18)

inst_655:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x39b000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x44b8ac and fs3 == 0 and fe3 == 0x7d and fm3 == 0x0eb0b3 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f39b000; op2val:0x3ec4b8ac; op3val:0x3e8eb0b3; valaddr_reg:x16; val_offset:1740; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1740, x17, x15, 1176, x18)

inst_656:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0b544e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5cc560 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x704fbf and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0b544e; op2val:0x3fdcc560; op3val:0x3f704fbf; valaddr_reg:x16; val_offset:1752; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1752, x17, x15, 1184, x18)

inst_657:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0b544e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5cc560 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x704fbf and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0b544e; op2val:0x3fdcc560; op3val:0x3f704fbf; valaddr_reg:x16; val_offset:1764; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1764, x17, x15, 1192, x18)

inst_658:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0b544e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5cc560 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x704fbf and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0b544e; op2val:0x3fdcc560; op3val:0x3f704fbf; valaddr_reg:x16; val_offset:1776; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1776, x17, x15, 1200, x18)

inst_659:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0b544e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5cc560 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x704fbf and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0b544e; op2val:0x3fdcc560; op3val:0x3f704fbf; valaddr_reg:x16; val_offset:1788; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1788, x17, x15, 1208, x18)

inst_660:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0b544e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5cc560 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x704fbf and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0b544e; op2val:0x3fdcc560; op3val:0x3f704fbf; valaddr_reg:x16; val_offset:1800; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1800, x17, x15, 1216, x18)

inst_661:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x785a0e and fs2 == 0 and fe2 == 0x77 and fm2 == 0x56f751 and fs3 == 0 and fe3 == 0x77 and fm3 == 0x508b35 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f785a0e; op2val:0x3bd6f751; op3val:0x3bd08b35; valaddr_reg:x16; val_offset:1812; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1812, x17, x15, 1224, x18)

inst_662:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x785a0e and fs2 == 0 and fe2 == 0x77 and fm2 == 0x56f751 and fs3 == 0 and fe3 == 0x77 and fm3 == 0x508b35 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f785a0e; op2val:0x3bd6f751; op3val:0x3bd08b35; valaddr_reg:x16; val_offset:1824; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1824, x17, x15, 1232, x18)

inst_663:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x785a0e and fs2 == 0 and fe2 == 0x77 and fm2 == 0x56f751 and fs3 == 0 and fe3 == 0x77 and fm3 == 0x508b35 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f785a0e; op2val:0x3bd6f751; op3val:0x3bd08b35; valaddr_reg:x16; val_offset:1836; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1836, x17, x15, 1240, x18)

inst_664:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x785a0e and fs2 == 0 and fe2 == 0x77 and fm2 == 0x56f751 and fs3 == 0 and fe3 == 0x77 and fm3 == 0x508b35 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f785a0e; op2val:0x3bd6f751; op3val:0x3bd08b35; valaddr_reg:x16; val_offset:1848; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1848, x17, x15, 1248, x18)

inst_665:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x785a0e and fs2 == 0 and fe2 == 0x77 and fm2 == 0x56f751 and fs3 == 0 and fe3 == 0x77 and fm3 == 0x508b35 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f785a0e; op2val:0x3bd6f751; op3val:0x3bd08b35; valaddr_reg:x16; val_offset:1860; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1860, x17, x15, 1256, x18)

inst_666:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7f9b81 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x713520 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x70d670 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f7f9b81; op2val:0x3df13520; op3val:0x3df0d670; valaddr_reg:x16; val_offset:1872; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1872, x17, x15, 1264, x18)

inst_667:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7f9b81 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x713520 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x70d670 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f7f9b81; op2val:0x3df13520; op3val:0x3df0d670; valaddr_reg:x16; val_offset:1884; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1884, x17, x15, 1272, x18)

inst_668:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7f9b81 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x713520 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x70d670 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f7f9b81; op2val:0x3df13520; op3val:0x3df0d670; valaddr_reg:x16; val_offset:1896; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1896, x17, x15, 1280, x18)

inst_669:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7f9b81 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x713520 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x70d670 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f7f9b81; op2val:0x3df13520; op3val:0x3df0d670; valaddr_reg:x16; val_offset:1908; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1908, x17, x15, 1288, x18)

inst_670:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7f9b81 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x713520 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x70d670 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f7f9b81; op2val:0x3df13520; op3val:0x3df0d670; valaddr_reg:x16; val_offset:1920; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1920, x17, x15, 1296, x18)

inst_671:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x34e470 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0384ff and fs3 == 0 and fe3 == 0x7e and fm3 == 0x39ddbf and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3db4e470; op2val:0x410384ff; op3val:0x3f39ddbf; valaddr_reg:x16; val_offset:1932; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1932, x17, x15, 1304, x18)

inst_672:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x34e470 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0384ff and fs3 == 0 and fe3 == 0x7e and fm3 == 0x39ddbf and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3db4e470; op2val:0x410384ff; op3val:0x3f39ddbf; valaddr_reg:x16; val_offset:1944; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1944, x17, x15, 1312, x18)

inst_673:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x34e470 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0384ff and fs3 == 0 and fe3 == 0x7e and fm3 == 0x39ddbf and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3db4e470; op2val:0x410384ff; op3val:0x3f39ddbf; valaddr_reg:x16; val_offset:1956; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1956, x17, x15, 1320, x18)

inst_674:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x34e470 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0384ff and fs3 == 0 and fe3 == 0x7e and fm3 == 0x39ddbf and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3db4e470; op2val:0x410384ff; op3val:0x3f39ddbf; valaddr_reg:x16; val_offset:1968; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1968, x17, x15, 1328, x18)

inst_675:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x34e470 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0384ff and fs3 == 0 and fe3 == 0x7e and fm3 == 0x39ddbf and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3db4e470; op2val:0x410384ff; op3val:0x3f39ddbf; valaddr_reg:x16; val_offset:1980; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1980, x17, x15, 1336, x18)

inst_676:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x6cc3da and fs2 == 0 and fe2 == 0x82 and fm2 == 0x4f0d25 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x3f7e86 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3cecc3da; op2val:0x414f0d25; op3val:0x3ebf7e86; valaddr_reg:x16; val_offset:1992; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1992, x17, x15, 1344, x18)

inst_677:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x6cc3da and fs2 == 0 and fe2 == 0x82 and fm2 == 0x4f0d25 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x3f7e86 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3cecc3da; op2val:0x414f0d25; op3val:0x3ebf7e86; valaddr_reg:x16; val_offset:2004; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 2004, x17, x15, 1352, x18)

inst_678:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x6cc3da and fs2 == 0 and fe2 == 0x82 and fm2 == 0x4f0d25 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x3f7e86 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3cecc3da; op2val:0x414f0d25; op3val:0x3ebf7e86; valaddr_reg:x16; val_offset:2016; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 2016, x17, x15, 1360, x18)

inst_679:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x6cc3da and fs2 == 0 and fe2 == 0x82 and fm2 == 0x4f0d25 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x3f7e86 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3cecc3da; op2val:0x414f0d25; op3val:0x3ebf7e86; valaddr_reg:x16; val_offset:2028; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 2028, x17, x15, 1368, x18)
addi x16,x16,2040

inst_680:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x6cc3da and fs2 == 0 and fe2 == 0x82 and fm2 == 0x4f0d25 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x3f7e86 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3cecc3da; op2val:0x414f0d25; op3val:0x3ebf7e86; valaddr_reg:x16; val_offset:0; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 0, x17, x15, 1376, x18)

inst_681:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5b2f70 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1f1390 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x083336 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3edb2f70; op2val:0x3f1f1390; op3val:0x3e883336; valaddr_reg:x16; val_offset:12; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 12, x17, x15, 1384, x18)

inst_682:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5b2f70 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1f1390 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x083336 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3edb2f70; op2val:0x3f1f1390; op3val:0x3e883336; valaddr_reg:x16; val_offset:24; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 24, x17, x15, 1392, x18)

inst_683:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5b2f70 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1f1390 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x083336 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3edb2f70; op2val:0x3f1f1390; op3val:0x3e883336; valaddr_reg:x16; val_offset:36; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 36, x17, x15, 1400, x18)

inst_684:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5b2f70 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1f1390 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x083336 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3edb2f70; op2val:0x3f1f1390; op3val:0x3e883336; valaddr_reg:x16; val_offset:48; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 48, x17, x15, 1408, x18)

inst_685:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5b2f70 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1f1390 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x083336 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3edb2f70; op2val:0x3f1f1390; op3val:0x3e883336; valaddr_reg:x16; val_offset:60; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 60, x17, x15, 1416, x18)

inst_686:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0b6079 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x388821 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x48eee8 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0b6079; op2val:0x3eb88821; op3val:0x3e48eee8; valaddr_reg:x16; val_offset:72; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 72, x17, x15, 1424, x18)

inst_687:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0b6079 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x388821 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x48eee8 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0b6079; op2val:0x3eb88821; op3val:0x3e48eee8; valaddr_reg:x16; val_offset:84; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 84, x17, x15, 1432, x18)

inst_688:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0b6079 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x388821 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x48eee8 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0b6079; op2val:0x3eb88821; op3val:0x3e48eee8; valaddr_reg:x16; val_offset:96; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 96, x17, x15, 1440, x18)

inst_689:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0b6079 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x388821 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x48eee8 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0b6079; op2val:0x3eb88821; op3val:0x3e48eee8; valaddr_reg:x16; val_offset:108; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 108, x17, x15, 1448, x18)

inst_690:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0b6079 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x388821 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x48eee8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0b6079; op2val:0x3eb88821; op3val:0x3e48eee8; valaddr_reg:x16; val_offset:120; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 120, x17, x15, 1456, x18)

inst_691:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x63b57c and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5e1d85 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x4591a4 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f63b57c; op2val:0x3ede1d85; op3val:0x3ec591a4; valaddr_reg:x16; val_offset:132; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 132, x17, x15, 1464, x18)

inst_692:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x63b57c and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5e1d85 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x4591a4 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f63b57c; op2val:0x3ede1d85; op3val:0x3ec591a4; valaddr_reg:x16; val_offset:144; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 144, x17, x15, 1472, x18)

inst_693:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x63b57c and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5e1d85 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x4591a4 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f63b57c; op2val:0x3ede1d85; op3val:0x3ec591a4; valaddr_reg:x16; val_offset:156; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 156, x17, x15, 1480, x18)

inst_694:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x63b57c and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5e1d85 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x4591a4 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f63b57c; op2val:0x3ede1d85; op3val:0x3ec591a4; valaddr_reg:x16; val_offset:168; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 168, x17, x15, 1488, x18)

inst_695:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x63b57c and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5e1d85 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x4591a4 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f63b57c; op2val:0x3ede1d85; op3val:0x3ec591a4; valaddr_reg:x16; val_offset:180; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 180, x17, x15, 1496, x18)

inst_696:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x05a789 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x04f061 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x0acfc5 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e85a789; op2val:0x4004f061; op3val:0x3f0acfc5; valaddr_reg:x16; val_offset:192; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 192, x17, x15, 1504, x18)

inst_697:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x05a789 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x04f061 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x0acfc5 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e85a789; op2val:0x4004f061; op3val:0x3f0acfc5; valaddr_reg:x16; val_offset:204; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 204, x17, x15, 1512, x18)

inst_698:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x05a789 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x04f061 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x0acfc5 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e85a789; op2val:0x4004f061; op3val:0x3f0acfc5; valaddr_reg:x16; val_offset:216; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 216, x17, x15, 1520, x18)

inst_699:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x05a789 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x04f061 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x0acfc5 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e85a789; op2val:0x4004f061; op3val:0x3f0acfc5; valaddr_reg:x16; val_offset:228; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 228, x17, x15, 1528, x18)

inst_700:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x05a789 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x04f061 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x0acfc5 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e85a789; op2val:0x4004f061; op3val:0x3f0acfc5; valaddr_reg:x16; val_offset:240; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 240, x17, x15, 1536, x18)

inst_701:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3e032d and fs2 == 0 and fe2 == 0x7d and fm2 == 0x41d526 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x0fde9a and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ebe032d; op2val:0x3ec1d526; op3val:0x3e0fde9a; valaddr_reg:x16; val_offset:252; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 252, x17, x15, 1544, x18)

inst_702:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3e032d and fs2 == 0 and fe2 == 0x7d and fm2 == 0x41d526 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x0fde9a and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ebe032d; op2val:0x3ec1d526; op3val:0x3e0fde9a; valaddr_reg:x16; val_offset:264; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 264, x17, x15, 1552, x18)

inst_703:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3e032d and fs2 == 0 and fe2 == 0x7d and fm2 == 0x41d526 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x0fde9a and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ebe032d; op2val:0x3ec1d526; op3val:0x3e0fde9a; valaddr_reg:x16; val_offset:276; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 276, x17, x15, 1560, x18)

inst_704:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3e032d and fs2 == 0 and fe2 == 0x7d and fm2 == 0x41d526 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x0fde9a and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ebe032d; op2val:0x3ec1d526; op3val:0x3e0fde9a; valaddr_reg:x16; val_offset:288; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 288, x17, x15, 1568, x18)

inst_705:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3e032d and fs2 == 0 and fe2 == 0x7d and fm2 == 0x41d526 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x0fde9a and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ebe032d; op2val:0x3ec1d526; op3val:0x3e0fde9a; valaddr_reg:x16; val_offset:300; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 300, x17, x15, 1576, x18)

inst_706:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x532a7a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7d3cf1 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x50e33f and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f532a7a; op2val:0x3f7d3cf1; op3val:0x3f50e33f; valaddr_reg:x16; val_offset:312; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 312, x17, x15, 1584, x18)

inst_707:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x532a7a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7d3cf1 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x50e33f and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f532a7a; op2val:0x3f7d3cf1; op3val:0x3f50e33f; valaddr_reg:x16; val_offset:324; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 324, x17, x15, 1592, x18)

inst_708:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x532a7a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7d3cf1 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x50e33f and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f532a7a; op2val:0x3f7d3cf1; op3val:0x3f50e33f; valaddr_reg:x16; val_offset:336; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 336, x17, x15, 1600, x18)

inst_709:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x532a7a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7d3cf1 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x50e33f and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f532a7a; op2val:0x3f7d3cf1; op3val:0x3f50e33f; valaddr_reg:x16; val_offset:348; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 348, x17, x15, 1608, x18)

inst_710:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x532a7a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7d3cf1 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x50e33f and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f532a7a; op2val:0x3f7d3cf1; op3val:0x3f50e33f; valaddr_reg:x16; val_offset:360; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 360, x17, x15, 1616, x18)

inst_711:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0b4851 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1cb32b and fs3 == 0 and fe3 == 0x7b and fm3 == 0x2a8319 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e8b4851; op2val:0x3e9cb32b; op3val:0x3daa8319; valaddr_reg:x16; val_offset:372; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 372, x17, x15, 1624, x18)

inst_712:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0b4851 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1cb32b and fs3 == 0 and fe3 == 0x7b and fm3 == 0x2a8319 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e8b4851; op2val:0x3e9cb32b; op3val:0x3daa8319; valaddr_reg:x16; val_offset:384; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 384, x17, x15, 1632, x18)

inst_713:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0b4851 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1cb32b and fs3 == 0 and fe3 == 0x7b and fm3 == 0x2a8319 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e8b4851; op2val:0x3e9cb32b; op3val:0x3daa8319; valaddr_reg:x16; val_offset:396; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 396, x17, x15, 1640, x18)

inst_714:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0b4851 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1cb32b and fs3 == 0 and fe3 == 0x7b and fm3 == 0x2a8319 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e8b4851; op2val:0x3e9cb32b; op3val:0x3daa8319; valaddr_reg:x16; val_offset:408; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 408, x17, x15, 1648, x18)

inst_715:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0b4851 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1cb32b and fs3 == 0 and fe3 == 0x7b and fm3 == 0x2a8319 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e8b4851; op2val:0x3e9cb32b; op3val:0x3daa8319; valaddr_reg:x16; val_offset:420; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 420, x17, x15, 1656, x18)

inst_716:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x262242 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x260696 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x577cfb and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f262242; op2val:0x3fa60696; op3val:0x3f577cfb; valaddr_reg:x16; val_offset:432; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 432, x17, x15, 1664, x18)

inst_717:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x262242 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x260696 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x577cfb and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f262242; op2val:0x3fa60696; op3val:0x3f577cfb; valaddr_reg:x16; val_offset:444; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 444, x17, x15, 1672, x18)

inst_718:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x262242 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x260696 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x577cfb and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f262242; op2val:0x3fa60696; op3val:0x3f577cfb; valaddr_reg:x16; val_offset:456; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 456, x17, x15, 1680, x18)

inst_719:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x262242 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x260696 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x577cfb and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f262242; op2val:0x3fa60696; op3val:0x3f577cfb; valaddr_reg:x16; val_offset:468; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 468, x17, x15, 1688, x18)

inst_720:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x262242 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x260696 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x577cfb and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f262242; op2val:0x3fa60696; op3val:0x3f577cfb; valaddr_reg:x16; val_offset:480; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 480, x17, x15, 1696, x18)

inst_721:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2b92a7 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2722c7 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6007f4 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eab92a7; op2val:0x402722c7; op3val:0x3f6007f4; valaddr_reg:x16; val_offset:492; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 492, x17, x15, 1704, x18)

inst_722:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2b92a7 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2722c7 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6007f4 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eab92a7; op2val:0x402722c7; op3val:0x3f6007f4; valaddr_reg:x16; val_offset:504; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 504, x17, x15, 1712, x18)

inst_723:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2b92a7 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2722c7 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6007f4 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eab92a7; op2val:0x402722c7; op3val:0x3f6007f4; valaddr_reg:x16; val_offset:516; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 516, x17, x15, 1720, x18)

inst_724:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2b92a7 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2722c7 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6007f4 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eab92a7; op2val:0x402722c7; op3val:0x3f6007f4; valaddr_reg:x16; val_offset:528; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 528, x17, x15, 1728, x18)

inst_725:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2b92a7 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2722c7 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6007f4 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eab92a7; op2val:0x402722c7; op3val:0x3f6007f4; valaddr_reg:x16; val_offset:540; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 540, x17, x15, 1736, x18)

inst_726:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x69d00b and fs2 == 0 and fe2 == 0x79 and fm2 == 0x334d2c and fs3 == 0 and fe3 == 0x79 and fm3 == 0x23c2f4 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f69d00b; op2val:0x3cb34d2c; op3val:0x3ca3c2f4; valaddr_reg:x16; val_offset:552; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 552, x17, x15, 1744, x18)

inst_727:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x69d00b and fs2 == 0 and fe2 == 0x79 and fm2 == 0x334d2c and fs3 == 0 and fe3 == 0x79 and fm3 == 0x23c2f4 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f69d00b; op2val:0x3cb34d2c; op3val:0x3ca3c2f4; valaddr_reg:x16; val_offset:564; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 564, x17, x15, 1752, x18)

inst_728:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x69d00b and fs2 == 0 and fe2 == 0x79 and fm2 == 0x334d2c and fs3 == 0 and fe3 == 0x79 and fm3 == 0x23c2f4 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f69d00b; op2val:0x3cb34d2c; op3val:0x3ca3c2f4; valaddr_reg:x16; val_offset:576; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 576, x17, x15, 1760, x18)

inst_729:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x69d00b and fs2 == 0 and fe2 == 0x79 and fm2 == 0x334d2c and fs3 == 0 and fe3 == 0x79 and fm3 == 0x23c2f4 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f69d00b; op2val:0x3cb34d2c; op3val:0x3ca3c2f4; valaddr_reg:x16; val_offset:588; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 588, x17, x15, 1768, x18)

inst_730:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x69d00b and fs2 == 0 and fe2 == 0x79 and fm2 == 0x334d2c and fs3 == 0 and fe3 == 0x79 and fm3 == 0x23c2f4 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f69d00b; op2val:0x3cb34d2c; op3val:0x3ca3c2f4; valaddr_reg:x16; val_offset:600; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 600, x17, x15, 1776, x18)

inst_731:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1ff6c0 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x350fb7 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x624690 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e9ff6c0; op2val:0x3f350fb7; op3val:0x3e624690; valaddr_reg:x16; val_offset:612; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 612, x17, x15, 1784, x18)

inst_732:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1ff6c0 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x350fb7 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x624690 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e9ff6c0; op2val:0x3f350fb7; op3val:0x3e624690; valaddr_reg:x16; val_offset:624; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 624, x17, x15, 1792, x18)

inst_733:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1ff6c0 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x350fb7 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x624690 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e9ff6c0; op2val:0x3f350fb7; op3val:0x3e624690; valaddr_reg:x16; val_offset:636; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 636, x17, x15, 1800, x18)

inst_734:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1ff6c0 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x350fb7 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x624690 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e9ff6c0; op2val:0x3f350fb7; op3val:0x3e624690; valaddr_reg:x16; val_offset:648; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 648, x17, x15, 1808, x18)

inst_735:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1ff6c0 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x350fb7 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x624690 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e9ff6c0; op2val:0x3f350fb7; op3val:0x3e624690; valaddr_reg:x16; val_offset:660; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 660, x17, x15, 1816, x18)

inst_736:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7d5ea7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x654668 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x62eb5a and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3efd5ea7; op2val:0x3fe54668; op3val:0x3f62eb5a; valaddr_reg:x16; val_offset:672; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 672, x17, x15, 1824, x18)

inst_737:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7d5ea7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x654668 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x62eb5a and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3efd5ea7; op2val:0x3fe54668; op3val:0x3f62eb5a; valaddr_reg:x16; val_offset:684; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 684, x17, x15, 1832, x18)

inst_738:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7d5ea7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x654668 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x62eb5a and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3efd5ea7; op2val:0x3fe54668; op3val:0x3f62eb5a; valaddr_reg:x16; val_offset:696; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 696, x17, x15, 1840, x18)

inst_739:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7d5ea7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x654668 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x62eb5a and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3efd5ea7; op2val:0x3fe54668; op3val:0x3f62eb5a; valaddr_reg:x16; val_offset:708; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 708, x17, x15, 1848, x18)

inst_740:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7d5ea7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x654668 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x62eb5a and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3efd5ea7; op2val:0x3fe54668; op3val:0x3f62eb5a; valaddr_reg:x16; val_offset:720; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 720, x17, x15, 1856, x18)

inst_741:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0f88fa and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40e14e and fs3 == 0 and fe3 == 0x7e and fm3 == 0x584a1e and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e8f88fa; op2val:0x4040e14e; op3val:0x3f584a1e; valaddr_reg:x16; val_offset:732; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 732, x17, x15, 1864, x18)

inst_742:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0f88fa and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40e14e and fs3 == 0 and fe3 == 0x7e and fm3 == 0x584a1e and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e8f88fa; op2val:0x4040e14e; op3val:0x3f584a1e; valaddr_reg:x16; val_offset:744; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 744, x17, x15, 1872, x18)

inst_743:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0f88fa and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40e14e and fs3 == 0 and fe3 == 0x7e and fm3 == 0x584a1e and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e8f88fa; op2val:0x4040e14e; op3val:0x3f584a1e; valaddr_reg:x16; val_offset:756; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 756, x17, x15, 1880, x18)

inst_744:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0f88fa and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40e14e and fs3 == 0 and fe3 == 0x7e and fm3 == 0x584a1e and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e8f88fa; op2val:0x4040e14e; op3val:0x3f584a1e; valaddr_reg:x16; val_offset:768; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 768, x17, x15, 1888, x18)

inst_745:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0f88fa and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40e14e and fs3 == 0 and fe3 == 0x7e and fm3 == 0x584a1e and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e8f88fa; op2val:0x4040e14e; op3val:0x3f584a1e; valaddr_reg:x16; val_offset:780; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 780, x17, x15, 1896, x18)

inst_746:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x63fdcd and fs2 == 0 and fe2 == 0x7d and fm2 == 0x642b5c and fs3 == 0 and fe3 == 0x7d and fm3 == 0x4b34a9 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f63fdcd; op2val:0x3ee42b5c; op3val:0x3ecb34a9; valaddr_reg:x16; val_offset:792; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 792, x17, x15, 1904, x18)

inst_747:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x63fdcd and fs2 == 0 and fe2 == 0x7d and fm2 == 0x642b5c and fs3 == 0 and fe3 == 0x7d and fm3 == 0x4b34a9 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f63fdcd; op2val:0x3ee42b5c; op3val:0x3ecb34a9; valaddr_reg:x16; val_offset:804; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 804, x17, x15, 1912, x18)

inst_748:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x63fdcd and fs2 == 0 and fe2 == 0x7d and fm2 == 0x642b5c and fs3 == 0 and fe3 == 0x7d and fm3 == 0x4b34a9 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f63fdcd; op2val:0x3ee42b5c; op3val:0x3ecb34a9; valaddr_reg:x16; val_offset:816; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 816, x17, x15, 1920, x18)

inst_749:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x63fdcd and fs2 == 0 and fe2 == 0x7d and fm2 == 0x642b5c and fs3 == 0 and fe3 == 0x7d and fm3 == 0x4b34a9 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f63fdcd; op2val:0x3ee42b5c; op3val:0x3ecb34a9; valaddr_reg:x16; val_offset:828; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 828, x17, x15, 1928, x18)

inst_750:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x63fdcd and fs2 == 0 and fe2 == 0x7d and fm2 == 0x642b5c and fs3 == 0 and fe3 == 0x7d and fm3 == 0x4b34a9 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f63fdcd; op2val:0x3ee42b5c; op3val:0x3ecb34a9; valaddr_reg:x16; val_offset:840; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 840, x17, x15, 1936, x18)

inst_751:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6eeb38 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6e3b48 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x5e5602 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f6eeb38; op2val:0x3f6e3b48; op3val:0x3f5e5602; valaddr_reg:x16; val_offset:852; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 852, x17, x15, 1944, x18)

inst_752:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6eeb38 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6e3b48 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x5e5602 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f6eeb38; op2val:0x3f6e3b48; op3val:0x3f5e5602; valaddr_reg:x16; val_offset:864; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 864, x17, x15, 1952, x18)

inst_753:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6eeb38 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6e3b48 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x5e5602 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f6eeb38; op2val:0x3f6e3b48; op3val:0x3f5e5602; valaddr_reg:x16; val_offset:876; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 876, x17, x15, 1960, x18)

inst_754:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6eeb38 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6e3b48 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x5e5602 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f6eeb38; op2val:0x3f6e3b48; op3val:0x3f5e5602; valaddr_reg:x16; val_offset:888; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 888, x17, x15, 1968, x18)

inst_755:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6eeb38 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6e3b48 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x5e5602 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f6eeb38; op2val:0x3f6e3b48; op3val:0x3f5e5602; valaddr_reg:x16; val_offset:900; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 900, x17, x15, 1976, x18)

inst_756:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x337c3e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x13ad10 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x4f135c and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eb37c3e; op2val:0x3f13ad10; op3val:0x3e4f135c; valaddr_reg:x16; val_offset:912; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 912, x17, x15, 1984, x18)

inst_757:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x337c3e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x13ad10 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x4f135c and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eb37c3e; op2val:0x3f13ad10; op3val:0x3e4f135c; valaddr_reg:x16; val_offset:924; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 924, x17, x15, 1992, x18)

inst_758:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x337c3e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x13ad10 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x4f135c and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eb37c3e; op2val:0x3f13ad10; op3val:0x3e4f135c; valaddr_reg:x16; val_offset:936; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 936, x17, x15, 2000, x18)

inst_759:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x337c3e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x13ad10 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x4f135c and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eb37c3e; op2val:0x3f13ad10; op3val:0x3e4f135c; valaddr_reg:x16; val_offset:948; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 948, x17, x15, 2008, x18)

inst_760:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x337c3e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x13ad10 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x4f135c and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eb37c3e; op2val:0x3f13ad10; op3val:0x3e4f135c; valaddr_reg:x16; val_offset:960; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 960, x17, x15, 2016, x18)

inst_761:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x510f19 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x267cef and fs3 == 0 and fe3 == 0x7c and fm3 == 0x07f5d1 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ed10f19; op2val:0x3ea67cef; op3val:0x3e07f5d1; valaddr_reg:x16; val_offset:972; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 972, x17, x15, 2024, x18)
RVTEST_SIGBASE(x15,signature_x15_4)

inst_762:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x510f19 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x267cef and fs3 == 0 and fe3 == 0x7c and fm3 == 0x07f5d1 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ed10f19; op2val:0x3ea67cef; op3val:0x3e07f5d1; valaddr_reg:x16; val_offset:984; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 984, x17, x15, 0, x18)

inst_763:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x510f19 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x267cef and fs3 == 0 and fe3 == 0x7c and fm3 == 0x07f5d1 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ed10f19; op2val:0x3ea67cef; op3val:0x3e07f5d1; valaddr_reg:x16; val_offset:996; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 996, x17, x15, 8, x18)

inst_764:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x510f19 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x267cef and fs3 == 0 and fe3 == 0x7c and fm3 == 0x07f5d1 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ed10f19; op2val:0x3ea67cef; op3val:0x3e07f5d1; valaddr_reg:x16; val_offset:1008; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1008, x17, x15, 16, x18)

inst_765:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x510f19 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x267cef and fs3 == 0 and fe3 == 0x7c and fm3 == 0x07f5d1 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ed10f19; op2val:0x3ea67cef; op3val:0x3e07f5d1; valaddr_reg:x16; val_offset:1020; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1020, x17, x15, 24, x18)

inst_766:
// fs1 == 0 and fe1 == 0x77 and fm1 == 0x37155a and fs2 == 0 and fe2 == 0x83 and fm2 == 0x62a7db and fs3 == 0 and fe3 == 0x7c and fm3 == 0x2218e6 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3bb7155a; op2val:0x41e2a7db; op3val:0x3e2218e6; valaddr_reg:x16; val_offset:1032; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1032, x17, x15, 32, x18)

inst_767:
// fs1 == 0 and fe1 == 0x77 and fm1 == 0x37155a and fs2 == 0 and fe2 == 0x83 and fm2 == 0x62a7db and fs3 == 0 and fe3 == 0x7c and fm3 == 0x2218e6 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3bb7155a; op2val:0x41e2a7db; op3val:0x3e2218e6; valaddr_reg:x16; val_offset:1044; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1044, x17, x15, 40, x18)

inst_768:
// fs1 == 0 and fe1 == 0x77 and fm1 == 0x37155a and fs2 == 0 and fe2 == 0x83 and fm2 == 0x62a7db and fs3 == 0 and fe3 == 0x7c and fm3 == 0x2218e6 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3bb7155a; op2val:0x41e2a7db; op3val:0x3e2218e6; valaddr_reg:x16; val_offset:1056; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1056, x17, x15, 48, x18)

inst_769:
// fs1 == 0 and fe1 == 0x77 and fm1 == 0x37155a and fs2 == 0 and fe2 == 0x83 and fm2 == 0x62a7db and fs3 == 0 and fe3 == 0x7c and fm3 == 0x2218e6 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3bb7155a; op2val:0x41e2a7db; op3val:0x3e2218e6; valaddr_reg:x16; val_offset:1068; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1068, x17, x15, 56, x18)

inst_770:
// fs1 == 0 and fe1 == 0x77 and fm1 == 0x37155a and fs2 == 0 and fe2 == 0x83 and fm2 == 0x62a7db and fs3 == 0 and fe3 == 0x7c and fm3 == 0x2218e6 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3bb7155a; op2val:0x41e2a7db; op3val:0x3e2218e6; valaddr_reg:x16; val_offset:1080; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1080, x17, x15, 64, x18)

inst_771:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x030ed0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1ef39a and fs3 == 0 and fe3 == 0x7e and fm3 == 0x22bfb5 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f030ed0; op2val:0x3f9ef39a; op3val:0x3f22bfb5; valaddr_reg:x16; val_offset:1092; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1092, x17, x15, 72, x18)

inst_772:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x030ed0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1ef39a and fs3 == 0 and fe3 == 0x7e and fm3 == 0x22bfb5 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f030ed0; op2val:0x3f9ef39a; op3val:0x3f22bfb5; valaddr_reg:x16; val_offset:1104; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1104, x17, x15, 80, x18)

inst_773:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x030ed0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1ef39a and fs3 == 0 and fe3 == 0x7e and fm3 == 0x22bfb5 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f030ed0; op2val:0x3f9ef39a; op3val:0x3f22bfb5; valaddr_reg:x16; val_offset:1116; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1116, x17, x15, 88, x18)

inst_774:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x030ed0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1ef39a and fs3 == 0 and fe3 == 0x7e and fm3 == 0x22bfb5 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f030ed0; op2val:0x3f9ef39a; op3val:0x3f22bfb5; valaddr_reg:x16; val_offset:1128; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1128, x17, x15, 96, x18)

inst_775:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x030ed0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1ef39a and fs3 == 0 and fe3 == 0x7e and fm3 == 0x22bfb5 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f030ed0; op2val:0x3f9ef39a; op3val:0x3f22bfb5; valaddr_reg:x16; val_offset:1140; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1140, x17, x15, 104, x18)

inst_776:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x759dfe and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6e9f0f and fs3 == 0 and fe3 == 0x7c and fm3 == 0x64f17e and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ef59dfe; op2val:0x3eee9f0f; op3val:0x3e64f17e; valaddr_reg:x16; val_offset:1152; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1152, x17, x15, 112, x18)

inst_777:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x759dfe and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6e9f0f and fs3 == 0 and fe3 == 0x7c and fm3 == 0x64f17e and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ef59dfe; op2val:0x3eee9f0f; op3val:0x3e64f17e; valaddr_reg:x16; val_offset:1164; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1164, x17, x15, 120, x18)

inst_778:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x759dfe and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6e9f0f and fs3 == 0 and fe3 == 0x7c and fm3 == 0x64f17e and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ef59dfe; op2val:0x3eee9f0f; op3val:0x3e64f17e; valaddr_reg:x16; val_offset:1176; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1176, x17, x15, 128, x18)

inst_779:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x759dfe and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6e9f0f and fs3 == 0 and fe3 == 0x7c and fm3 == 0x64f17e and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ef59dfe; op2val:0x3eee9f0f; op3val:0x3e64f17e; valaddr_reg:x16; val_offset:1188; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1188, x17, x15, 136, x18)

inst_780:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x759dfe and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6e9f0f and fs3 == 0 and fe3 == 0x7c and fm3 == 0x64f17e and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ef59dfe; op2val:0x3eee9f0f; op3val:0x3e64f17e; valaddr_reg:x16; val_offset:1200; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1200, x17, x15, 144, x18)

inst_781:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x75dc1d and fs2 == 0 and fe2 == 0x7b and fm2 == 0x44029c and fs3 == 0 and fe3 == 0x7a and fm3 == 0x3c3f07 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ef5dc1d; op2val:0x3dc4029c; op3val:0x3d3c3f07; valaddr_reg:x16; val_offset:1212; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1212, x17, x15, 152, x18)

inst_782:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x75dc1d and fs2 == 0 and fe2 == 0x7b and fm2 == 0x44029c and fs3 == 0 and fe3 == 0x7a and fm3 == 0x3c3f07 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ef5dc1d; op2val:0x3dc4029c; op3val:0x3d3c3f07; valaddr_reg:x16; val_offset:1224; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1224, x17, x15, 160, x18)

inst_783:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x75dc1d and fs2 == 0 and fe2 == 0x7b and fm2 == 0x44029c and fs3 == 0 and fe3 == 0x7a and fm3 == 0x3c3f07 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ef5dc1d; op2val:0x3dc4029c; op3val:0x3d3c3f07; valaddr_reg:x16; val_offset:1236; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1236, x17, x15, 168, x18)

inst_784:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x75dc1d and fs2 == 0 and fe2 == 0x7b and fm2 == 0x44029c and fs3 == 0 and fe3 == 0x7a and fm3 == 0x3c3f07 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ef5dc1d; op2val:0x3dc4029c; op3val:0x3d3c3f07; valaddr_reg:x16; val_offset:1248; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1248, x17, x15, 176, x18)

inst_785:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x75dc1d and fs2 == 0 and fe2 == 0x7b and fm2 == 0x44029c and fs3 == 0 and fe3 == 0x7a and fm3 == 0x3c3f07 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ef5dc1d; op2val:0x3dc4029c; op3val:0x3d3c3f07; valaddr_reg:x16; val_offset:1260; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1260, x17, x15, 184, x18)

inst_786:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x377761 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x68f393 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x26f2bf and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3db77761; op2val:0x3fe8f393; op3val:0x3e26f2bf; valaddr_reg:x16; val_offset:1272; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1272, x17, x15, 192, x18)

inst_787:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x377761 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x68f393 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x26f2bf and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3db77761; op2val:0x3fe8f393; op3val:0x3e26f2bf; valaddr_reg:x16; val_offset:1284; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1284, x17, x15, 200, x18)

inst_788:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x377761 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x68f393 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x26f2bf and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3db77761; op2val:0x3fe8f393; op3val:0x3e26f2bf; valaddr_reg:x16; val_offset:1296; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1296, x17, x15, 208, x18)

inst_789:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x377761 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x68f393 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x26f2bf and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3db77761; op2val:0x3fe8f393; op3val:0x3e26f2bf; valaddr_reg:x16; val_offset:1308; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1308, x17, x15, 216, x18)

inst_790:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x377761 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x68f393 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x26f2bf and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3db77761; op2val:0x3fe8f393; op3val:0x3e26f2bf; valaddr_reg:x16; val_offset:1320; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1320, x17, x15, 224, x18)

inst_791:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1e9deb and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3495bc and fs3 == 0 and fe3 == 0x7e and fm3 == 0x5fc7a0 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f1e9deb; op2val:0x3fb495bc; op3val:0x3f5fc7a0; valaddr_reg:x16; val_offset:1332; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1332, x17, x15, 232, x18)

inst_792:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1e9deb and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3495bc and fs3 == 0 and fe3 == 0x7e and fm3 == 0x5fc7a0 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f1e9deb; op2val:0x3fb495bc; op3val:0x3f5fc7a0; valaddr_reg:x16; val_offset:1344; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1344, x17, x15, 240, x18)

inst_793:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1e9deb and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3495bc and fs3 == 0 and fe3 == 0x7e and fm3 == 0x5fc7a0 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f1e9deb; op2val:0x3fb495bc; op3val:0x3f5fc7a0; valaddr_reg:x16; val_offset:1356; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1356, x17, x15, 248, x18)

inst_794:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1e9deb and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3495bc and fs3 == 0 and fe3 == 0x7e and fm3 == 0x5fc7a0 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f1e9deb; op2val:0x3fb495bc; op3val:0x3f5fc7a0; valaddr_reg:x16; val_offset:1368; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1368, x17, x15, 256, x18)

inst_795:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1e9deb and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3495bc and fs3 == 0 and fe3 == 0x7e and fm3 == 0x5fc7a0 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f1e9deb; op2val:0x3fb495bc; op3val:0x3f5fc7a0; valaddr_reg:x16; val_offset:1380; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1380, x17, x15, 264, x18)

inst_796:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x1646ea and fs2 == 0 and fe2 == 0x82 and fm2 == 0x4698b1 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6928f6 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d9646ea; op2val:0x414698b1; op3val:0x3f6928f6; valaddr_reg:x16; val_offset:1392; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1392, x17, x15, 272, x18)

inst_797:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x1646ea and fs2 == 0 and fe2 == 0x82 and fm2 == 0x4698b1 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6928f6 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d9646ea; op2val:0x414698b1; op3val:0x3f6928f6; valaddr_reg:x16; val_offset:1404; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1404, x17, x15, 280, x18)

inst_798:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x1646ea and fs2 == 0 and fe2 == 0x82 and fm2 == 0x4698b1 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6928f6 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d9646ea; op2val:0x414698b1; op3val:0x3f6928f6; valaddr_reg:x16; val_offset:1416; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1416, x17, x15, 288, x18)

inst_799:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x1646ea and fs2 == 0 and fe2 == 0x82 and fm2 == 0x4698b1 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6928f6 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d9646ea; op2val:0x414698b1; op3val:0x3f6928f6; valaddr_reg:x16; val_offset:1428; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1428, x17, x15, 296, x18)

inst_800:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x1646ea and fs2 == 0 and fe2 == 0x82 and fm2 == 0x4698b1 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6928f6 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d9646ea; op2val:0x414698b1; op3val:0x3f6928f6; valaddr_reg:x16; val_offset:1440; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1440, x17, x15, 304, x18)

inst_801:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x41477c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1d2b95 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x6d537e and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ec1477c; op2val:0x3f1d2b95; op3val:0x3e6d537e; valaddr_reg:x16; val_offset:1452; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1452, x17, x15, 312, x18)

inst_802:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x41477c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1d2b95 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x6d537e and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ec1477c; op2val:0x3f1d2b95; op3val:0x3e6d537e; valaddr_reg:x16; val_offset:1464; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1464, x17, x15, 320, x18)

inst_803:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x41477c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1d2b95 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x6d537e and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ec1477c; op2val:0x3f1d2b95; op3val:0x3e6d537e; valaddr_reg:x16; val_offset:1476; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1476, x17, x15, 328, x18)

inst_804:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x41477c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1d2b95 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x6d537e and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ec1477c; op2val:0x3f1d2b95; op3val:0x3e6d537e; valaddr_reg:x16; val_offset:1488; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1488, x17, x15, 336, x18)

inst_805:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x41477c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1d2b95 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x6d537e and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ec1477c; op2val:0x3f1d2b95; op3val:0x3e6d537e; valaddr_reg:x16; val_offset:1500; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1500, x17, x15, 344, x18)

inst_806:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x31f08a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x28f445 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6adf48 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f31f08a; op2val:0x3fa8f445; op3val:0x3f6adf48; valaddr_reg:x16; val_offset:1512; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1512, x17, x15, 352, x18)

inst_807:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x31f08a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x28f445 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6adf48 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f31f08a; op2val:0x3fa8f445; op3val:0x3f6adf48; valaddr_reg:x16; val_offset:1524; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1524, x17, x15, 360, x18)

inst_808:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x31f08a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x28f445 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6adf48 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f31f08a; op2val:0x3fa8f445; op3val:0x3f6adf48; valaddr_reg:x16; val_offset:1536; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1536, x17, x15, 368, x18)

inst_809:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x31f08a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x28f445 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6adf48 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f31f08a; op2val:0x3fa8f445; op3val:0x3f6adf48; valaddr_reg:x16; val_offset:1548; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1548, x17, x15, 376, x18)

inst_810:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x31f08a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x28f445 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6adf48 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f31f08a; op2val:0x3fa8f445; op3val:0x3f6adf48; valaddr_reg:x16; val_offset:1560; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1560, x17, x15, 384, x18)

inst_811:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x231a0a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x47d448 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7ea0fb and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f231a0a; op2val:0x3fc7d448; op3val:0x3f7ea0fb; valaddr_reg:x16; val_offset:1572; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1572, x17, x15, 392, x18)

inst_812:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x231a0a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x47d448 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7ea0fb and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f231a0a; op2val:0x3fc7d448; op3val:0x3f7ea0fb; valaddr_reg:x16; val_offset:1584; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1584, x17, x15, 400, x18)

inst_813:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x231a0a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x47d448 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7ea0fb and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f231a0a; op2val:0x3fc7d448; op3val:0x3f7ea0fb; valaddr_reg:x16; val_offset:1596; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1596, x17, x15, 408, x18)

inst_814:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x231a0a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x47d448 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7ea0fb and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f231a0a; op2val:0x3fc7d448; op3val:0x3f7ea0fb; valaddr_reg:x16; val_offset:1608; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1608, x17, x15, 416, x18)

inst_815:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x231a0a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x47d448 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7ea0fb and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f231a0a; op2val:0x3fc7d448; op3val:0x3f7ea0fb; valaddr_reg:x16; val_offset:1620; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1620, x17, x15, 424, x18)

inst_816:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2106ee and fs2 == 0 and fe2 == 0x7c and fm2 == 0x6c018c and fs3 == 0 and fe3 == 0x7c and fm3 == 0x14735d and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f2106ee; op2val:0x3e6c018c; op3val:0x3e14735d; valaddr_reg:x16; val_offset:1632; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1632, x17, x15, 432, x18)

inst_817:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2106ee and fs2 == 0 and fe2 == 0x7c and fm2 == 0x6c018c and fs3 == 0 and fe3 == 0x7c and fm3 == 0x14735d and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f2106ee; op2val:0x3e6c018c; op3val:0x3e14735d; valaddr_reg:x16; val_offset:1644; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1644, x17, x15, 440, x18)

inst_818:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2106ee and fs2 == 0 and fe2 == 0x7c and fm2 == 0x6c018c and fs3 == 0 and fe3 == 0x7c and fm3 == 0x14735d and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f2106ee; op2val:0x3e6c018c; op3val:0x3e14735d; valaddr_reg:x16; val_offset:1656; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1656, x17, x15, 448, x18)

inst_819:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2106ee and fs2 == 0 and fe2 == 0x7c and fm2 == 0x6c018c and fs3 == 0 and fe3 == 0x7c and fm3 == 0x14735d and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f2106ee; op2val:0x3e6c018c; op3val:0x3e14735d; valaddr_reg:x16; val_offset:1668; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1668, x17, x15, 456, x18)

inst_820:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2106ee and fs2 == 0 and fe2 == 0x7c and fm2 == 0x6c018c and fs3 == 0 and fe3 == 0x7c and fm3 == 0x14735d and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f2106ee; op2val:0x3e6c018c; op3val:0x3e14735d; valaddr_reg:x16; val_offset:1680; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1680, x17, x15, 464, x18)

inst_821:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3f888d and fs2 == 0 and fe2 == 0x7f and fm2 == 0x145b7f and fs3 == 0 and fe3 == 0x7e and fm3 == 0x5dfecd and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f3f888d; op2val:0x3f945b7f; op3val:0x3f5dfecd; valaddr_reg:x16; val_offset:1692; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1692, x17, x15, 472, x18)

inst_822:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3f888d and fs2 == 0 and fe2 == 0x7f and fm2 == 0x145b7f and fs3 == 0 and fe3 == 0x7e and fm3 == 0x5dfecd and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f3f888d; op2val:0x3f945b7f; op3val:0x3f5dfecd; valaddr_reg:x16; val_offset:1704; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1704, x17, x15, 480, x18)

inst_823:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3f888d and fs2 == 0 and fe2 == 0x7f and fm2 == 0x145b7f and fs3 == 0 and fe3 == 0x7e and fm3 == 0x5dfecd and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f3f888d; op2val:0x3f945b7f; op3val:0x3f5dfecd; valaddr_reg:x16; val_offset:1716; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1716, x17, x15, 488, x18)

inst_824:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3f888d and fs2 == 0 and fe2 == 0x7f and fm2 == 0x145b7f and fs3 == 0 and fe3 == 0x7e and fm3 == 0x5dfecd and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f3f888d; op2val:0x3f945b7f; op3val:0x3f5dfecd; valaddr_reg:x16; val_offset:1728; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1728, x17, x15, 496, x18)

inst_825:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3f888d and fs2 == 0 and fe2 == 0x7f and fm2 == 0x145b7f and fs3 == 0 and fe3 == 0x7e and fm3 == 0x5dfecd and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f3f888d; op2val:0x3f945b7f; op3val:0x3f5dfecd; valaddr_reg:x16; val_offset:1740; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1740, x17, x15, 504, x18)

inst_826:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x147bc6 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x12252e and fs3 == 0 and fe3 == 0x7e and fm3 == 0x298850 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e147bc6; op2val:0x4092252e; op3val:0x3f298850; valaddr_reg:x16; val_offset:1752; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1752, x17, x15, 512, x18)

inst_827:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x147bc6 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x12252e and fs3 == 0 and fe3 == 0x7e and fm3 == 0x298850 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e147bc6; op2val:0x4092252e; op3val:0x3f298850; valaddr_reg:x16; val_offset:1764; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1764, x17, x15, 520, x18)

inst_828:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x147bc6 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x12252e and fs3 == 0 and fe3 == 0x7e and fm3 == 0x298850 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e147bc6; op2val:0x4092252e; op3val:0x3f298850; valaddr_reg:x16; val_offset:1776; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1776, x17, x15, 528, x18)

inst_829:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x147bc6 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x12252e and fs3 == 0 and fe3 == 0x7e and fm3 == 0x298850 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e147bc6; op2val:0x4092252e; op3val:0x3f298850; valaddr_reg:x16; val_offset:1788; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1788, x17, x15, 536, x18)

inst_830:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x147bc6 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x12252e and fs3 == 0 and fe3 == 0x7e and fm3 == 0x298850 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e147bc6; op2val:0x4092252e; op3val:0x3f298850; valaddr_reg:x16; val_offset:1800; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1800, x17, x15, 544, x18)

inst_831:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x2594e5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4e37b1 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x0561d6 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3da594e5; op2val:0x3fce37b1; op3val:0x3e0561d6; valaddr_reg:x16; val_offset:1812; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1812, x17, x15, 552, x18)

inst_832:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x2594e5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4e37b1 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x0561d6 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3da594e5; op2val:0x3fce37b1; op3val:0x3e0561d6; valaddr_reg:x16; val_offset:1824; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1824, x17, x15, 560, x18)

inst_833:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x2594e5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4e37b1 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x0561d6 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3da594e5; op2val:0x3fce37b1; op3val:0x3e0561d6; valaddr_reg:x16; val_offset:1836; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1836, x17, x15, 568, x18)

inst_834:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x2594e5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4e37b1 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x0561d6 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3da594e5; op2val:0x3fce37b1; op3val:0x3e0561d6; valaddr_reg:x16; val_offset:1848; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1848, x17, x15, 576, x18)

inst_835:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x2594e5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4e37b1 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x0561d6 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3da594e5; op2val:0x3fce37b1; op3val:0x3e0561d6; valaddr_reg:x16; val_offset:1860; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1860, x17, x15, 584, x18)

inst_836:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x4e21ec and fs2 == 0 and fe2 == 0x82 and fm2 == 0x066de8 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x587c82 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3dce21ec; op2val:0x41066de8; op3val:0x3f587c82; valaddr_reg:x16; val_offset:1872; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1872, x17, x15, 592, x18)

inst_837:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x4e21ec and fs2 == 0 and fe2 == 0x82 and fm2 == 0x066de8 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x587c82 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3dce21ec; op2val:0x41066de8; op3val:0x3f587c82; valaddr_reg:x16; val_offset:1884; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1884, x17, x15, 600, x18)

inst_838:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x4e21ec and fs2 == 0 and fe2 == 0x82 and fm2 == 0x066de8 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x587c82 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3dce21ec; op2val:0x41066de8; op3val:0x3f587c82; valaddr_reg:x16; val_offset:1896; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1896, x17, x15, 608, x18)

inst_839:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x4e21ec and fs2 == 0 and fe2 == 0x82 and fm2 == 0x066de8 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x587c82 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3dce21ec; op2val:0x41066de8; op3val:0x3f587c82; valaddr_reg:x16; val_offset:1908; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1908, x17, x15, 616, x18)

inst_840:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x4e21ec and fs2 == 0 and fe2 == 0x82 and fm2 == 0x066de8 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x587c82 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3dce21ec; op2val:0x41066de8; op3val:0x3f587c82; valaddr_reg:x16; val_offset:1920; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1920, x17, x15, 624, x18)

inst_841:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0790e0 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x18dd1f and fs3 == 0 and fe3 == 0x7c and fm3 == 0x21e63c and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0790e0; op2val:0x3e98dd1f; op3val:0x3e21e63c; valaddr_reg:x16; val_offset:1932; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1932, x17, x15, 632, x18)

inst_842:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0790e0 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x18dd1f and fs3 == 0 and fe3 == 0x7c and fm3 == 0x21e63c and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0790e0; op2val:0x3e98dd1f; op3val:0x3e21e63c; valaddr_reg:x16; val_offset:1944; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1944, x17, x15, 640, x18)

inst_843:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0790e0 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x18dd1f and fs3 == 0 and fe3 == 0x7c and fm3 == 0x21e63c and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0790e0; op2val:0x3e98dd1f; op3val:0x3e21e63c; valaddr_reg:x16; val_offset:1956; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1956, x17, x15, 648, x18)

inst_844:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0790e0 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x18dd1f and fs3 == 0 and fe3 == 0x7c and fm3 == 0x21e63c and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0790e0; op2val:0x3e98dd1f; op3val:0x3e21e63c; valaddr_reg:x16; val_offset:1968; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1968, x17, x15, 656, x18)

inst_845:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0790e0 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x18dd1f and fs3 == 0 and fe3 == 0x7c and fm3 == 0x21e63c and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0790e0; op2val:0x3e98dd1f; op3val:0x3e21e63c; valaddr_reg:x16; val_offset:1980; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1980, x17, x15, 664, x18)

inst_846:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1c89ed and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1dbc78 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x40e7ab and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e9c89ed; op2val:0x3f1dbc78; op3val:0x3e40e7ab; valaddr_reg:x16; val_offset:1992; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1992, x17, x15, 672, x18)

inst_847:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1c89ed and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1dbc78 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x40e7ab and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e9c89ed; op2val:0x3f1dbc78; op3val:0x3e40e7ab; valaddr_reg:x16; val_offset:2004; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 2004, x17, x15, 680, x18)

inst_848:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1c89ed and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1dbc78 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x40e7ab and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e9c89ed; op2val:0x3f1dbc78; op3val:0x3e40e7ab; valaddr_reg:x16; val_offset:2016; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 2016, x17, x15, 688, x18)

inst_849:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1c89ed and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1dbc78 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x40e7ab and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e9c89ed; op2val:0x3f1dbc78; op3val:0x3e40e7ab; valaddr_reg:x16; val_offset:2028; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 2028, x17, x15, 696, x18)
addi x16,x16,2040

inst_850:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1c89ed and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1dbc78 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x40e7ab and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e9c89ed; op2val:0x3f1dbc78; op3val:0x3e40e7ab; valaddr_reg:x16; val_offset:0; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 0, x17, x15, 704, x18)

inst_851:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x0d8fa5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x59380a and fs3 == 0 and fe3 == 0x7d and fm3 == 0x703b80 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e0d8fa5; op2val:0x4059380a; op3val:0x3ef03b80; valaddr_reg:x16; val_offset:12; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 12, x17, x15, 712, x18)

inst_852:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x0d8fa5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x59380a and fs3 == 0 and fe3 == 0x7d and fm3 == 0x703b80 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e0d8fa5; op2val:0x4059380a; op3val:0x3ef03b80; valaddr_reg:x16; val_offset:24; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 24, x17, x15, 720, x18)

inst_853:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x0d8fa5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x59380a and fs3 == 0 and fe3 == 0x7d and fm3 == 0x703b80 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e0d8fa5; op2val:0x4059380a; op3val:0x3ef03b80; valaddr_reg:x16; val_offset:36; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 36, x17, x15, 728, x18)

inst_854:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x0d8fa5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x59380a and fs3 == 0 and fe3 == 0x7d and fm3 == 0x703b80 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e0d8fa5; op2val:0x4059380a; op3val:0x3ef03b80; valaddr_reg:x16; val_offset:48; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 48, x17, x15, 736, x18)

inst_855:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x0d8fa5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x59380a and fs3 == 0 and fe3 == 0x7d and fm3 == 0x703b80 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e0d8fa5; op2val:0x4059380a; op3val:0x3ef03b80; valaddr_reg:x16; val_offset:60; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 60, x17, x15, 744, x18)

inst_856:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x508a14 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2565c3 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x06bbe5 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ed08a14; op2val:0x3fa565c3; op3val:0x3f06bbe5; valaddr_reg:x16; val_offset:72; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 72, x17, x15, 752, x18)

inst_857:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x508a14 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2565c3 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x06bbe5 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ed08a14; op2val:0x3fa565c3; op3val:0x3f06bbe5; valaddr_reg:x16; val_offset:84; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 84, x17, x15, 760, x18)

inst_858:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x508a14 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2565c3 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x06bbe5 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ed08a14; op2val:0x3fa565c3; op3val:0x3f06bbe5; valaddr_reg:x16; val_offset:96; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 96, x17, x15, 768, x18)

inst_859:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x508a14 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2565c3 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x06bbe5 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ed08a14; op2val:0x3fa565c3; op3val:0x3f06bbe5; valaddr_reg:x16; val_offset:108; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 108, x17, x15, 776, x18)

inst_860:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x508a14 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2565c3 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x06bbe5 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ed08a14; op2val:0x3fa565c3; op3val:0x3f06bbe5; valaddr_reg:x16; val_offset:120; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 120, x17, x15, 784, x18)

inst_861:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x790d95 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x679647 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x614d75 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ef90d95; op2val:0x3fe79647; op3val:0x3f614d75; valaddr_reg:x16; val_offset:132; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 132, x17, x15, 792, x18)

inst_862:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x790d95 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x679647 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x614d75 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ef90d95; op2val:0x3fe79647; op3val:0x3f614d75; valaddr_reg:x16; val_offset:144; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 144, x17, x15, 800, x18)

inst_863:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x790d95 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x679647 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x614d75 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ef90d95; op2val:0x3fe79647; op3val:0x3f614d75; valaddr_reg:x16; val_offset:156; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 156, x17, x15, 808, x18)

inst_864:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x790d95 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x679647 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x614d75 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ef90d95; op2val:0x3fe79647; op3val:0x3f614d75; valaddr_reg:x16; val_offset:168; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 168, x17, x15, 816, x18)

inst_865:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x790d95 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x679647 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x614d75 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ef90d95; op2val:0x3fe79647; op3val:0x3f614d75; valaddr_reg:x16; val_offset:180; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 180, x17, x15, 824, x18)

inst_866:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x54ae74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6ac39a and fs3 == 0 and fe3 == 0x7c and fm3 == 0x4309f7 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d54ae74; op2val:0x406ac39a; op3val:0x3e4309f7; valaddr_reg:x16; val_offset:192; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 192, x17, x15, 832, x18)

inst_867:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x54ae74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6ac39a and fs3 == 0 and fe3 == 0x7c and fm3 == 0x4309f7 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d54ae74; op2val:0x406ac39a; op3val:0x3e4309f7; valaddr_reg:x16; val_offset:204; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 204, x17, x15, 840, x18)

inst_868:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x54ae74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6ac39a and fs3 == 0 and fe3 == 0x7c and fm3 == 0x4309f7 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d54ae74; op2val:0x406ac39a; op3val:0x3e4309f7; valaddr_reg:x16; val_offset:216; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 216, x17, x15, 848, x18)

inst_869:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x54ae74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6ac39a and fs3 == 0 and fe3 == 0x7c and fm3 == 0x4309f7 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d54ae74; op2val:0x406ac39a; op3val:0x3e4309f7; valaddr_reg:x16; val_offset:228; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 228, x17, x15, 856, x18)

inst_870:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x54ae74 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6ac39a and fs3 == 0 and fe3 == 0x7c and fm3 == 0x4309f7 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d54ae74; op2val:0x406ac39a; op3val:0x3e4309f7; valaddr_reg:x16; val_offset:240; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 240, x17, x15, 864, x18)

inst_871:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x443a84 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0d9646 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x590ed6 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e443a84; op2val:0x400d9646; op3val:0x3ed90ed6; valaddr_reg:x16; val_offset:252; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 252, x17, x15, 872, x18)

inst_872:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x443a84 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0d9646 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x590ed6 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e443a84; op2val:0x400d9646; op3val:0x3ed90ed6; valaddr_reg:x16; val_offset:264; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 264, x17, x15, 880, x18)

inst_873:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x443a84 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0d9646 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x590ed6 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e443a84; op2val:0x400d9646; op3val:0x3ed90ed6; valaddr_reg:x16; val_offset:276; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 276, x17, x15, 888, x18)

inst_874:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x443a84 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0d9646 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x590ed6 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e443a84; op2val:0x400d9646; op3val:0x3ed90ed6; valaddr_reg:x16; val_offset:288; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 288, x17, x15, 896, x18)

inst_875:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x443a84 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0d9646 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x590ed6 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e443a84; op2val:0x400d9646; op3val:0x3ed90ed6; valaddr_reg:x16; val_offset:300; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 300, x17, x15, 904, x18)

inst_876:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4eb642 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2edf82 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x0d345b and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f4eb642; op2val:0x3f2edf82; op3val:0x3f0d345b; valaddr_reg:x16; val_offset:312; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 312, x17, x15, 912, x18)

inst_877:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4eb642 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2edf82 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x0d345b and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f4eb642; op2val:0x3f2edf82; op3val:0x3f0d345b; valaddr_reg:x16; val_offset:324; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 324, x17, x15, 920, x18)

inst_878:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4eb642 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2edf82 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x0d345b and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f4eb642; op2val:0x3f2edf82; op3val:0x3f0d345b; valaddr_reg:x16; val_offset:336; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 336, x17, x15, 928, x18)

inst_879:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4eb642 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2edf82 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x0d345b and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f4eb642; op2val:0x3f2edf82; op3val:0x3f0d345b; valaddr_reg:x16; val_offset:348; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 348, x17, x15, 936, x18)

inst_880:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4eb642 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2edf82 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x0d345b and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f4eb642; op2val:0x3f2edf82; op3val:0x3f0d345b; valaddr_reg:x16; val_offset:360; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 360, x17, x15, 944, x18)

inst_881:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5cfc6e and fs2 == 0 and fe2 == 0x7c and fm2 == 0x04cd66 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x6546ef and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5cfc6e; op2val:0x3e04cd66; op3val:0x3de546ef; valaddr_reg:x16; val_offset:372; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 372, x17, x15, 952, x18)

inst_882:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5cfc6e and fs2 == 0 and fe2 == 0x7c and fm2 == 0x04cd66 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x6546ef and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5cfc6e; op2val:0x3e04cd66; op3val:0x3de546ef; valaddr_reg:x16; val_offset:384; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 384, x17, x15, 960, x18)

inst_883:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5cfc6e and fs2 == 0 and fe2 == 0x7c and fm2 == 0x04cd66 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x6546ef and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5cfc6e; op2val:0x3e04cd66; op3val:0x3de546ef; valaddr_reg:x16; val_offset:396; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 396, x17, x15, 968, x18)

inst_884:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5cfc6e and fs2 == 0 and fe2 == 0x7c and fm2 == 0x04cd66 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x6546ef and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5cfc6e; op2val:0x3e04cd66; op3val:0x3de546ef; valaddr_reg:x16; val_offset:408; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 408, x17, x15, 976, x18)

inst_885:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5cfc6e and fs2 == 0 and fe2 == 0x7c and fm2 == 0x04cd66 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x6546ef and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5cfc6e; op2val:0x3e04cd66; op3val:0x3de546ef; valaddr_reg:x16; val_offset:420; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 420, x17, x15, 984, x18)

inst_886:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x05022f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x33ce2c and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3ad74c and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f05022f; op2val:0x3fb3ce2c; op3val:0x3f3ad74c; valaddr_reg:x16; val_offset:432; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 432, x17, x15, 992, x18)

inst_887:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x05022f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x33ce2c and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3ad74c and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f05022f; op2val:0x3fb3ce2c; op3val:0x3f3ad74c; valaddr_reg:x16; val_offset:444; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 444, x17, x15, 1000, x18)

inst_888:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x05022f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x33ce2c and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3ad74c and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f05022f; op2val:0x3fb3ce2c; op3val:0x3f3ad74c; valaddr_reg:x16; val_offset:456; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 456, x17, x15, 1008, x18)

inst_889:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x05022f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x33ce2c and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3ad74c and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f05022f; op2val:0x3fb3ce2c; op3val:0x3f3ad74c; valaddr_reg:x16; val_offset:468; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 468, x17, x15, 1016, x18)

inst_890:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x05022f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x33ce2c and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3ad74c and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f05022f; op2val:0x3fb3ce2c; op3val:0x3f3ad74c; valaddr_reg:x16; val_offset:480; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 480, x17, x15, 1024, x18)

inst_891:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5f772c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5adb58 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x3f0af3 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3edf772c; op2val:0x3f5adb58; op3val:0x3ebf0af3; valaddr_reg:x16; val_offset:492; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 492, x17, x15, 1032, x18)

inst_892:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5f772c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5adb58 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x3f0af3 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3edf772c; op2val:0x3f5adb58; op3val:0x3ebf0af3; valaddr_reg:x16; val_offset:504; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 504, x17, x15, 1040, x18)

inst_893:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5f772c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5adb58 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x3f0af3 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3edf772c; op2val:0x3f5adb58; op3val:0x3ebf0af3; valaddr_reg:x16; val_offset:516; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 516, x17, x15, 1048, x18)

inst_894:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5f772c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5adb58 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x3f0af3 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3edf772c; op2val:0x3f5adb58; op3val:0x3ebf0af3; valaddr_reg:x16; val_offset:528; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 528, x17, x15, 1056, x18)

inst_895:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5f772c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5adb58 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x3f0af3 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3edf772c; op2val:0x3f5adb58; op3val:0x3ebf0af3; valaddr_reg:x16; val_offset:540; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 540, x17, x15, 1064, x18)

inst_896:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1db874 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x28c6b2 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x4ff6ee and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f1db874; op2val:0x3f28c6b2; op3val:0x3ecff6ee; valaddr_reg:x16; val_offset:552; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 552, x17, x15, 1072, x18)

inst_897:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1db874 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x28c6b2 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x4ff6ee and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f1db874; op2val:0x3f28c6b2; op3val:0x3ecff6ee; valaddr_reg:x16; val_offset:564; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 564, x17, x15, 1080, x18)

inst_898:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1db874 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x28c6b2 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x4ff6ee and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f1db874; op2val:0x3f28c6b2; op3val:0x3ecff6ee; valaddr_reg:x16; val_offset:576; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 576, x17, x15, 1088, x18)

inst_899:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1db874 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x28c6b2 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x4ff6ee and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f1db874; op2val:0x3f28c6b2; op3val:0x3ecff6ee; valaddr_reg:x16; val_offset:588; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 588, x17, x15, 1096, x18)

inst_900:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1db874 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x28c6b2 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x4ff6ee and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f1db874; op2val:0x3f28c6b2; op3val:0x3ecff6ee; valaddr_reg:x16; val_offset:600; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 600, x17, x15, 1104, x18)

inst_901:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5172bf and fs2 == 0 and fe2 == 0x79 and fm2 == 0x6475a8 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x3aea75 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5172bf; op2val:0x3ce475a8; op3val:0x3cbaea75; valaddr_reg:x16; val_offset:612; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 612, x17, x15, 1112, x18)

inst_902:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5172bf and fs2 == 0 and fe2 == 0x79 and fm2 == 0x6475a8 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x3aea75 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5172bf; op2val:0x3ce475a8; op3val:0x3cbaea75; valaddr_reg:x16; val_offset:624; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 624, x17, x15, 1120, x18)

inst_903:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5172bf and fs2 == 0 and fe2 == 0x79 and fm2 == 0x6475a8 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x3aea75 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5172bf; op2val:0x3ce475a8; op3val:0x3cbaea75; valaddr_reg:x16; val_offset:636; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 636, x17, x15, 1128, x18)

inst_904:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5172bf and fs2 == 0 and fe2 == 0x79 and fm2 == 0x6475a8 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x3aea75 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5172bf; op2val:0x3ce475a8; op3val:0x3cbaea75; valaddr_reg:x16; val_offset:648; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 648, x17, x15, 1136, x18)

inst_905:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5172bf and fs2 == 0 and fe2 == 0x79 and fm2 == 0x6475a8 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x3aea75 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5172bf; op2val:0x3ce475a8; op3val:0x3cbaea75; valaddr_reg:x16; val_offset:660; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 660, x17, x15, 1144, x18)

inst_906:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5e1c59 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2b5db0 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x14ae39 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5e1c59; op2val:0x3f2b5db0; op3val:0x3f14ae39; valaddr_reg:x16; val_offset:672; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 672, x17, x15, 1152, x18)

inst_907:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5e1c59 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2b5db0 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x14ae39 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5e1c59; op2val:0x3f2b5db0; op3val:0x3f14ae39; valaddr_reg:x16; val_offset:684; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 684, x17, x15, 1160, x18)

inst_908:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5e1c59 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2b5db0 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x14ae39 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5e1c59; op2val:0x3f2b5db0; op3val:0x3f14ae39; valaddr_reg:x16; val_offset:696; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 696, x17, x15, 1168, x18)

inst_909:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5e1c59 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2b5db0 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x14ae39 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5e1c59; op2val:0x3f2b5db0; op3val:0x3f14ae39; valaddr_reg:x16; val_offset:708; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 708, x17, x15, 1176, x18)

inst_910:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5e1c59 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2b5db0 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x14ae39 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5e1c59; op2val:0x3f2b5db0; op3val:0x3f14ae39; valaddr_reg:x16; val_offset:720; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 720, x17, x15, 1184, x18)

inst_911:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x518b35 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x634d38 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3a0da6 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ed18b35; op2val:0x3fe34d38; op3val:0x3f3a0da6; valaddr_reg:x16; val_offset:732; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 732, x17, x15, 1192, x18)

inst_912:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x518b35 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x634d38 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3a0da6 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ed18b35; op2val:0x3fe34d38; op3val:0x3f3a0da6; valaddr_reg:x16; val_offset:744; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 744, x17, x15, 1200, x18)

inst_913:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x518b35 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x634d38 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3a0da6 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ed18b35; op2val:0x3fe34d38; op3val:0x3f3a0da6; valaddr_reg:x16; val_offset:756; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 756, x17, x15, 1208, x18)

inst_914:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x518b35 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x634d38 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3a0da6 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ed18b35; op2val:0x3fe34d38; op3val:0x3f3a0da6; valaddr_reg:x16; val_offset:768; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 768, x17, x15, 1216, x18)

inst_915:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x518b35 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x634d38 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3a0da6 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ed18b35; op2val:0x3fe34d38; op3val:0x3f3a0da6; valaddr_reg:x16; val_offset:780; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 780, x17, x15, 1224, x18)

inst_916:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2fc9ed and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2a1752 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x699836 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e2fc9ed; op2val:0x40aa1752; op3val:0x3f699836; valaddr_reg:x16; val_offset:792; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 792, x17, x15, 1232, x18)

inst_917:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2fc9ed and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2a1752 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x699836 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e2fc9ed; op2val:0x40aa1752; op3val:0x3f699836; valaddr_reg:x16; val_offset:804; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 804, x17, x15, 1240, x18)

inst_918:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2fc9ed and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2a1752 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x699836 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e2fc9ed; op2val:0x40aa1752; op3val:0x3f699836; valaddr_reg:x16; val_offset:816; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 816, x17, x15, 1248, x18)

inst_919:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2fc9ed and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2a1752 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x699836 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e2fc9ed; op2val:0x40aa1752; op3val:0x3f699836; valaddr_reg:x16; val_offset:828; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 828, x17, x15, 1256, x18)

inst_920:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2fc9ed and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2a1752 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x699836 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e2fc9ed; op2val:0x40aa1752; op3val:0x3f699836; valaddr_reg:x16; val_offset:840; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 840, x17, x15, 1264, x18)

inst_921:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6e91cd and fs2 == 0 and fe2 == 0x7f and fm2 == 0x08ff60 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7f56e5 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f6e91cd; op2val:0x3f88ff60; op3val:0x3f7f56e5; valaddr_reg:x16; val_offset:852; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 852, x17, x15, 1272, x18)

inst_922:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6e91cd and fs2 == 0 and fe2 == 0x7f and fm2 == 0x08ff60 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7f56e5 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f6e91cd; op2val:0x3f88ff60; op3val:0x3f7f56e5; valaddr_reg:x16; val_offset:864; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 864, x17, x15, 1280, x18)

inst_923:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6e91cd and fs2 == 0 and fe2 == 0x7f and fm2 == 0x08ff60 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7f56e5 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f6e91cd; op2val:0x3f88ff60; op3val:0x3f7f56e5; valaddr_reg:x16; val_offset:876; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 876, x17, x15, 1288, x18)

inst_924:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6e91cd and fs2 == 0 and fe2 == 0x7f and fm2 == 0x08ff60 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7f56e5 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f6e91cd; op2val:0x3f88ff60; op3val:0x3f7f56e5; valaddr_reg:x16; val_offset:888; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 888, x17, x15, 1296, x18)

inst_925:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6e91cd and fs2 == 0 and fe2 == 0x7f and fm2 == 0x08ff60 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7f56e5 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f6e91cd; op2val:0x3f88ff60; op3val:0x3f7f56e5; valaddr_reg:x16; val_offset:900; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 900, x17, x15, 1304, x18)

inst_926:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5c5053 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x134583 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7d7be5 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5c5053; op2val:0x3f934583; op3val:0x3f7d7be5; valaddr_reg:x16; val_offset:912; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 912, x17, x15, 1312, x18)

inst_927:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5c5053 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x134583 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7d7be5 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5c5053; op2val:0x3f934583; op3val:0x3f7d7be5; valaddr_reg:x16; val_offset:924; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 924, x17, x15, 1320, x18)

inst_928:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5c5053 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x134583 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7d7be5 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5c5053; op2val:0x3f934583; op3val:0x3f7d7be5; valaddr_reg:x16; val_offset:936; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 936, x17, x15, 1328, x18)

inst_929:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5c5053 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x134583 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7d7be5 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5c5053; op2val:0x3f934583; op3val:0x3f7d7be5; valaddr_reg:x16; val_offset:948; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 948, x17, x15, 1336, x18)

inst_930:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5c5053 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x134583 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7d7be5 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5c5053; op2val:0x3f934583; op3val:0x3f7d7be5; valaddr_reg:x16; val_offset:960; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 960, x17, x15, 1344, x18)

inst_931:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2b8e5e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x351eb8 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x72c07d and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e2b8e5e; op2val:0x40b51eb8; op3val:0x3f72c07d; valaddr_reg:x16; val_offset:972; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 972, x17, x15, 1352, x18)

inst_932:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2b8e5e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x351eb8 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x72c07d and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e2b8e5e; op2val:0x40b51eb8; op3val:0x3f72c07d; valaddr_reg:x16; val_offset:984; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 984, x17, x15, 1360, x18)

inst_933:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2b8e5e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x351eb8 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x72c07d and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e2b8e5e; op2val:0x40b51eb8; op3val:0x3f72c07d; valaddr_reg:x16; val_offset:996; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 996, x17, x15, 1368, x18)

inst_934:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2b8e5e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x351eb8 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x72c07d and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e2b8e5e; op2val:0x40b51eb8; op3val:0x3f72c07d; valaddr_reg:x16; val_offset:1008; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1008, x17, x15, 1376, x18)

inst_935:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2b8e5e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x351eb8 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x72c07d and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e2b8e5e; op2val:0x40b51eb8; op3val:0x3f72c07d; valaddr_reg:x16; val_offset:1020; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1020, x17, x15, 1384, x18)

inst_936:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x55785d and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2d4394 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x107ab1 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d55785d; op2val:0x412d4394; op3val:0x3f107ab1; valaddr_reg:x16; val_offset:1032; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1032, x17, x15, 1392, x18)

inst_937:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x55785d and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2d4394 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x107ab1 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d55785d; op2val:0x412d4394; op3val:0x3f107ab1; valaddr_reg:x16; val_offset:1044; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1044, x17, x15, 1400, x18)

inst_938:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x55785d and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2d4394 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x107ab1 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d55785d; op2val:0x412d4394; op3val:0x3f107ab1; valaddr_reg:x16; val_offset:1056; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1056, x17, x15, 1408, x18)

inst_939:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x55785d and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2d4394 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x107ab1 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d55785d; op2val:0x412d4394; op3val:0x3f107ab1; valaddr_reg:x16; val_offset:1068; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1068, x17, x15, 1416, x18)

inst_940:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x55785d and fs2 == 0 and fe2 == 0x82 and fm2 == 0x2d4394 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x107ab1 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d55785d; op2val:0x412d4394; op3val:0x3f107ab1; valaddr_reg:x16; val_offset:1080; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1080, x17, x15, 1424, x18)

inst_941:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x78d41d and fs2 == 0 and fe2 == 0x7b and fm2 == 0x25c9a1 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x2124b2 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f78d41d; op2val:0x3da5c9a1; op3val:0x3da124b2; valaddr_reg:x16; val_offset:1092; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1092, x17, x15, 1432, x18)

inst_942:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x78d41d and fs2 == 0 and fe2 == 0x7b and fm2 == 0x25c9a1 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x2124b2 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f78d41d; op2val:0x3da5c9a1; op3val:0x3da124b2; valaddr_reg:x16; val_offset:1104; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1104, x17, x15, 1440, x18)

inst_943:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x78d41d and fs2 == 0 and fe2 == 0x7b and fm2 == 0x25c9a1 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x2124b2 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f78d41d; op2val:0x3da5c9a1; op3val:0x3da124b2; valaddr_reg:x16; val_offset:1116; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1116, x17, x15, 1448, x18)

inst_944:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x78d41d and fs2 == 0 and fe2 == 0x7b and fm2 == 0x25c9a1 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x2124b2 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f78d41d; op2val:0x3da5c9a1; op3val:0x3da124b2; valaddr_reg:x16; val_offset:1128; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1128, x17, x15, 1456, x18)

inst_945:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x78d41d and fs2 == 0 and fe2 == 0x7b and fm2 == 0x25c9a1 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x2124b2 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f78d41d; op2val:0x3da5c9a1; op3val:0x3da124b2; valaddr_reg:x16; val_offset:1140; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1140, x17, x15, 1464, x18)

inst_946:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x620477 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x6f0e8f and fs3 == 0 and fe3 == 0x7a and fm3 == 0x530f06 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f620477; op2val:0x3d6f0e8f; op3val:0x3d530f06; valaddr_reg:x16; val_offset:1152; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1152, x17, x15, 1472, x18)

inst_947:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x620477 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x6f0e8f and fs3 == 0 and fe3 == 0x7a and fm3 == 0x530f06 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f620477; op2val:0x3d6f0e8f; op3val:0x3d530f06; valaddr_reg:x16; val_offset:1164; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1164, x17, x15, 1480, x18)

inst_948:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x620477 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x6f0e8f and fs3 == 0 and fe3 == 0x7a and fm3 == 0x530f06 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f620477; op2val:0x3d6f0e8f; op3val:0x3d530f06; valaddr_reg:x16; val_offset:1176; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1176, x17, x15, 1488, x18)

inst_949:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x620477 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x6f0e8f and fs3 == 0 and fe3 == 0x7a and fm3 == 0x530f06 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f620477; op2val:0x3d6f0e8f; op3val:0x3d530f06; valaddr_reg:x16; val_offset:1188; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1188, x17, x15, 1496, x18)

inst_950:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x620477 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x6f0e8f and fs3 == 0 and fe3 == 0x7a and fm3 == 0x530f06 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f620477; op2val:0x3d6f0e8f; op3val:0x3d530f06; valaddr_reg:x16; val_offset:1200; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1200, x17, x15, 1504, x18)

inst_951:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x779e46 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x277efd and fs3 == 0 and fe3 == 0x7e and fm3 == 0x220315 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f779e46; op2val:0x3f277efd; op3val:0x3f220315; valaddr_reg:x16; val_offset:1212; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1212, x17, x15, 1512, x18)

inst_952:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x779e46 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x277efd and fs3 == 0 and fe3 == 0x7e and fm3 == 0x220315 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f779e46; op2val:0x3f277efd; op3val:0x3f220315; valaddr_reg:x16; val_offset:1224; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1224, x17, x15, 1520, x18)

inst_953:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x779e46 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x277efd and fs3 == 0 and fe3 == 0x7e and fm3 == 0x220315 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f779e46; op2val:0x3f277efd; op3val:0x3f220315; valaddr_reg:x16; val_offset:1236; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1236, x17, x15, 1528, x18)

inst_954:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x779e46 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x277efd and fs3 == 0 and fe3 == 0x7e and fm3 == 0x220315 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f779e46; op2val:0x3f277efd; op3val:0x3f220315; valaddr_reg:x16; val_offset:1248; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1248, x17, x15, 1536, x18)

inst_955:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x779e46 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x277efd and fs3 == 0 and fe3 == 0x7e and fm3 == 0x220315 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f779e46; op2val:0x3f277efd; op3val:0x3f220315; valaddr_reg:x16; val_offset:1260; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1260, x17, x15, 1544, x18)

inst_956:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6804a9 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x649651 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x4f2c63 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f6804a9; op2val:0x3ee49651; op3val:0x3ecf2c63; valaddr_reg:x16; val_offset:1272; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1272, x17, x15, 1552, x18)

inst_957:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6804a9 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x649651 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x4f2c63 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f6804a9; op2val:0x3ee49651; op3val:0x3ecf2c63; valaddr_reg:x16; val_offset:1284; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1284, x17, x15, 1560, x18)

inst_958:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6804a9 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x649651 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x4f2c63 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f6804a9; op2val:0x3ee49651; op3val:0x3ecf2c63; valaddr_reg:x16; val_offset:1296; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1296, x17, x15, 1568, x18)

inst_959:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6804a9 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x649651 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x4f2c63 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f6804a9; op2val:0x3ee49651; op3val:0x3ecf2c63; valaddr_reg:x16; val_offset:1308; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1308, x17, x15, 1576, x18)

inst_960:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6804a9 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x649651 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x4f2c63 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f6804a9; op2val:0x3ee49651; op3val:0x3ecf2c63; valaddr_reg:x16; val_offset:1320; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1320, x17, x15, 1584, x18)

inst_961:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x21d95d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3494de and fs3 == 0 and fe3 == 0x7c and fm3 == 0x6455e8 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ea1d95d; op2val:0x3f3494de; op3val:0x3e6455e8; valaddr_reg:x16; val_offset:1332; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1332, x17, x15, 1592, x18)

inst_962:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x21d95d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3494de and fs3 == 0 and fe3 == 0x7c and fm3 == 0x6455e8 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ea1d95d; op2val:0x3f3494de; op3val:0x3e6455e8; valaddr_reg:x16; val_offset:1344; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1344, x17, x15, 1600, x18)

inst_963:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x21d95d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3494de and fs3 == 0 and fe3 == 0x7c and fm3 == 0x6455e8 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ea1d95d; op2val:0x3f3494de; op3val:0x3e6455e8; valaddr_reg:x16; val_offset:1356; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1356, x17, x15, 1608, x18)

inst_964:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x21d95d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3494de and fs3 == 0 and fe3 == 0x7c and fm3 == 0x6455e8 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ea1d95d; op2val:0x3f3494de; op3val:0x3e6455e8; valaddr_reg:x16; val_offset:1368; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1368, x17, x15, 1616, x18)

inst_965:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x21d95d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3494de and fs3 == 0 and fe3 == 0x7c and fm3 == 0x6455e8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ea1d95d; op2val:0x3f3494de; op3val:0x3e6455e8; valaddr_reg:x16; val_offset:1380; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1380, x17, x15, 1624, x18)

inst_966:
// fs1 == 0 and fe1 == 0x77 and fm1 == 0x2021b0 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x6ed9c5 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x15678a and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ba021b0; op2val:0x426ed9c5; op3val:0x3e95678a; valaddr_reg:x16; val_offset:1392; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1392, x17, x15, 1632, x18)

inst_967:
// fs1 == 0 and fe1 == 0x77 and fm1 == 0x2021b0 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x6ed9c5 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x15678a and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ba021b0; op2val:0x426ed9c5; op3val:0x3e95678a; valaddr_reg:x16; val_offset:1404; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1404, x17, x15, 1640, x18)

inst_968:
// fs1 == 0 and fe1 == 0x77 and fm1 == 0x2021b0 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x6ed9c5 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x15678a and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ba021b0; op2val:0x426ed9c5; op3val:0x3e95678a; valaddr_reg:x16; val_offset:1416; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1416, x17, x15, 1648, x18)

inst_969:
// fs1 == 0 and fe1 == 0x77 and fm1 == 0x2021b0 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x6ed9c5 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x15678a and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ba021b0; op2val:0x426ed9c5; op3val:0x3e95678a; valaddr_reg:x16; val_offset:1428; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1428, x17, x15, 1656, x18)

inst_970:
// fs1 == 0 and fe1 == 0x77 and fm1 == 0x2021b0 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x6ed9c5 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x15678a and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ba021b0; op2val:0x426ed9c5; op3val:0x3e95678a; valaddr_reg:x16; val_offset:1440; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1440, x17, x15, 1664, x18)

inst_971:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x567df5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1bf696 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x02acde and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e567df5; op2val:0x3f9bf696; op3val:0x3e82acde; valaddr_reg:x16; val_offset:1452; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1452, x17, x15, 1672, x18)

inst_972:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x567df5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1bf696 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x02acde and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e567df5; op2val:0x3f9bf696; op3val:0x3e82acde; valaddr_reg:x16; val_offset:1464; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1464, x17, x15, 1680, x18)

inst_973:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x567df5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1bf696 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x02acde and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e567df5; op2val:0x3f9bf696; op3val:0x3e82acde; valaddr_reg:x16; val_offset:1476; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1476, x17, x15, 1688, x18)

inst_974:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x567df5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1bf696 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x02acde and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e567df5; op2val:0x3f9bf696; op3val:0x3e82acde; valaddr_reg:x16; val_offset:1488; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1488, x17, x15, 1696, x18)

inst_975:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x567df5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1bf696 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x02acde and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e567df5; op2val:0x3f9bf696; op3val:0x3e82acde; valaddr_reg:x16; val_offset:1500; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1500, x17, x15, 1704, x18)

inst_976:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x50c9b2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x69dd45 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3ebc09 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ed0c9b2; op2val:0x3fe9dd45; op3val:0x3f3ebc09; valaddr_reg:x16; val_offset:1512; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1512, x17, x15, 1712, x18)

inst_977:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x50c9b2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x69dd45 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3ebc09 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ed0c9b2; op2val:0x3fe9dd45; op3val:0x3f3ebc09; valaddr_reg:x16; val_offset:1524; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1524, x17, x15, 1720, x18)

inst_978:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x50c9b2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x69dd45 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3ebc09 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ed0c9b2; op2val:0x3fe9dd45; op3val:0x3f3ebc09; valaddr_reg:x16; val_offset:1536; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1536, x17, x15, 1728, x18)

inst_979:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x50c9b2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x69dd45 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3ebc09 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ed0c9b2; op2val:0x3fe9dd45; op3val:0x3f3ebc09; valaddr_reg:x16; val_offset:1548; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1548, x17, x15, 1736, x18)

inst_980:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x50c9b2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x69dd45 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3ebc09 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ed0c9b2; op2val:0x3fe9dd45; op3val:0x3f3ebc09; valaddr_reg:x16; val_offset:1560; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1560, x17, x15, 1744, x18)

inst_981:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x598e4a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6cc90b and fs3 == 0 and fe3 == 0x7e and fm3 == 0x493a07 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e598e4a; op2val:0x406cc90b; op3val:0x3f493a07; valaddr_reg:x16; val_offset:1572; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1572, x17, x15, 1752, x18)

inst_982:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x598e4a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6cc90b and fs3 == 0 and fe3 == 0x7e and fm3 == 0x493a07 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e598e4a; op2val:0x406cc90b; op3val:0x3f493a07; valaddr_reg:x16; val_offset:1584; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1584, x17, x15, 1760, x18)

inst_983:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x598e4a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6cc90b and fs3 == 0 and fe3 == 0x7e and fm3 == 0x493a07 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e598e4a; op2val:0x406cc90b; op3val:0x3f493a07; valaddr_reg:x16; val_offset:1596; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1596, x17, x15, 1768, x18)

inst_984:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x598e4a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6cc90b and fs3 == 0 and fe3 == 0x7e and fm3 == 0x493a07 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e598e4a; op2val:0x406cc90b; op3val:0x3f493a07; valaddr_reg:x16; val_offset:1608; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1608, x17, x15, 1776, x18)

inst_985:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x598e4a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6cc90b and fs3 == 0 and fe3 == 0x7e and fm3 == 0x493a07 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e598e4a; op2val:0x406cc90b; op3val:0x3f493a07; valaddr_reg:x16; val_offset:1620; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1620, x17, x15, 1784, x18)

inst_986:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x101b8c and fs2 == 0 and fe2 == 0x7f and fm2 == 0x492e4a and fs3 == 0 and fe3 == 0x7c and fm3 == 0x627f5f and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e101b8c; op2val:0x3fc92e4a; op3val:0x3e627f5f; valaddr_reg:x16; val_offset:1632; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1632, x17, x15, 1792, x18)

inst_987:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x101b8c and fs2 == 0 and fe2 == 0x7f and fm2 == 0x492e4a and fs3 == 0 and fe3 == 0x7c and fm3 == 0x627f5f and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e101b8c; op2val:0x3fc92e4a; op3val:0x3e627f5f; valaddr_reg:x16; val_offset:1644; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1644, x17, x15, 1800, x18)

inst_988:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x101b8c and fs2 == 0 and fe2 == 0x7f and fm2 == 0x492e4a and fs3 == 0 and fe3 == 0x7c and fm3 == 0x627f5f and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e101b8c; op2val:0x3fc92e4a; op3val:0x3e627f5f; valaddr_reg:x16; val_offset:1656; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1656, x17, x15, 1808, x18)

inst_989:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x101b8c and fs2 == 0 and fe2 == 0x7f and fm2 == 0x492e4a and fs3 == 0 and fe3 == 0x7c and fm3 == 0x627f5f and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e101b8c; op2val:0x3fc92e4a; op3val:0x3e627f5f; valaddr_reg:x16; val_offset:1668; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1668, x17, x15, 1816, x18)

inst_990:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x101b8c and fs2 == 0 and fe2 == 0x7f and fm2 == 0x492e4a and fs3 == 0 and fe3 == 0x7c and fm3 == 0x627f5f and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e101b8c; op2val:0x3fc92e4a; op3val:0x3e627f5f; valaddr_reg:x16; val_offset:1680; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1680, x17, x15, 1824, x18)

inst_991:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0e7f24 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3778f7 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x4c4071 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0e7f24; op2val:0x3fb778f7; op3val:0x3f4c4071; valaddr_reg:x16; val_offset:1692; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1692, x17, x15, 1832, x18)

inst_992:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0e7f24 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3778f7 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x4c4071 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0e7f24; op2val:0x3fb778f7; op3val:0x3f4c4071; valaddr_reg:x16; val_offset:1704; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1704, x17, x15, 1840, x18)

inst_993:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0e7f24 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3778f7 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x4c4071 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0e7f24; op2val:0x3fb778f7; op3val:0x3f4c4071; valaddr_reg:x16; val_offset:1716; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1716, x17, x15, 1848, x18)

inst_994:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0e7f24 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3778f7 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x4c4071 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0e7f24; op2val:0x3fb778f7; op3val:0x3f4c4071; valaddr_reg:x16; val_offset:1728; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1728, x17, x15, 1856, x18)

inst_995:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0e7f24 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3778f7 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x4c4071 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0e7f24; op2val:0x3fb778f7; op3val:0x3f4c4071; valaddr_reg:x16; val_offset:1740; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1740, x17, x15, 1864, x18)

inst_996:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x32b4c2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x02bb8d and fs3 == 0 and fe3 == 0x7e and fm3 == 0x36856f and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eb2b4c2; op2val:0x4002bb8d; op3val:0x3f36856f; valaddr_reg:x16; val_offset:1752; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1752, x17, x15, 1872, x18)

inst_997:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x32b4c2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x02bb8d and fs3 == 0 and fe3 == 0x7e and fm3 == 0x36856f and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eb2b4c2; op2val:0x4002bb8d; op3val:0x3f36856f; valaddr_reg:x16; val_offset:1764; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1764, x17, x15, 1880, x18)

inst_998:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x32b4c2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x02bb8d and fs3 == 0 and fe3 == 0x7e and fm3 == 0x36856f and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eb2b4c2; op2val:0x4002bb8d; op3val:0x3f36856f; valaddr_reg:x16; val_offset:1776; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1776, x17, x15, 1888, x18)

inst_999:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x32b4c2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x02bb8d and fs3 == 0 and fe3 == 0x7e and fm3 == 0x36856f and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eb2b4c2; op2val:0x4002bb8d; op3val:0x3f36856f; valaddr_reg:x16; val_offset:1788; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1788, x17, x15, 1896, x18)

inst_1000:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x32b4c2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x02bb8d and fs3 == 0 and fe3 == 0x7e and fm3 == 0x36856f and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eb2b4c2; op2val:0x4002bb8d; op3val:0x3f36856f; valaddr_reg:x16; val_offset:1800; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1800, x17, x15, 1904, x18)

inst_1001:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x25eb9a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x55bbed and fs3 == 0 and fe3 == 0x7d and fm3 == 0x0a86d4 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ea5eb9a; op2val:0x3f55bbed; op3val:0x3e8a86d4; valaddr_reg:x16; val_offset:1812; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1812, x17, x15, 1912, x18)

inst_1002:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x25eb9a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x55bbed and fs3 == 0 and fe3 == 0x7d and fm3 == 0x0a86d4 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ea5eb9a; op2val:0x3f55bbed; op3val:0x3e8a86d4; valaddr_reg:x16; val_offset:1824; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1824, x17, x15, 1920, x18)

inst_1003:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x25eb9a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x55bbed and fs3 == 0 and fe3 == 0x7d and fm3 == 0x0a86d4 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ea5eb9a; op2val:0x3f55bbed; op3val:0x3e8a86d4; valaddr_reg:x16; val_offset:1836; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1836, x17, x15, 1928, x18)

inst_1004:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x25eb9a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x55bbed and fs3 == 0 and fe3 == 0x7d and fm3 == 0x0a86d4 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ea5eb9a; op2val:0x3f55bbed; op3val:0x3e8a86d4; valaddr_reg:x16; val_offset:1848; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1848, x17, x15, 1936, x18)

inst_1005:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x25eb9a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x55bbed and fs3 == 0 and fe3 == 0x7d and fm3 == 0x0a86d4 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ea5eb9a; op2val:0x3f55bbed; op3val:0x3e8a86d4; valaddr_reg:x16; val_offset:1860; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1860, x17, x15, 1944, x18)

inst_1006:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x243f76 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x4769b5 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x7fe24f and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3da43f76; op2val:0x404769b5; op3val:0x3e7fe24f; valaddr_reg:x16; val_offset:1872; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1872, x17, x15, 1952, x18)

inst_1007:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x243f76 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x4769b5 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x7fe24f and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3da43f76; op2val:0x404769b5; op3val:0x3e7fe24f; valaddr_reg:x16; val_offset:1884; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1884, x17, x15, 1960, x18)

inst_1008:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x243f76 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x4769b5 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x7fe24f and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3da43f76; op2val:0x404769b5; op3val:0x3e7fe24f; valaddr_reg:x16; val_offset:1896; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1896, x17, x15, 1968, x18)

inst_1009:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x243f76 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x4769b5 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x7fe24f and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3da43f76; op2val:0x404769b5; op3val:0x3e7fe24f; valaddr_reg:x16; val_offset:1908; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1908, x17, x15, 1976, x18)

inst_1010:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x243f76 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x4769b5 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x7fe24f and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3da43f76; op2val:0x404769b5; op3val:0x3e7fe24f; valaddr_reg:x16; val_offset:1920; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1920, x17, x15, 1984, x18)

inst_1011:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x0939f3 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x62d870 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x73325c and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3c8939f3; op2val:0x4262d870; op3val:0x3f73325c; valaddr_reg:x16; val_offset:1932; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1932, x17, x15, 1992, x18)

inst_1012:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x0939f3 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x62d870 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x73325c and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3c8939f3; op2val:0x4262d870; op3val:0x3f73325c; valaddr_reg:x16; val_offset:1944; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1944, x17, x15, 2000, x18)

inst_1013:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x0939f3 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x62d870 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x73325c and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3c8939f3; op2val:0x4262d870; op3val:0x3f73325c; valaddr_reg:x16; val_offset:1956; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1956, x17, x15, 2008, x18)

inst_1014:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x0939f3 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x62d870 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x73325c and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3c8939f3; op2val:0x4262d870; op3val:0x3f73325c; valaddr_reg:x16; val_offset:1968; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1968, x17, x15, 2016, x18)

inst_1015:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x0939f3 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x62d870 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x73325c and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3c8939f3; op2val:0x4262d870; op3val:0x3f73325c; valaddr_reg:x16; val_offset:1980; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1980, x17, x15, 2024, x18)
RVTEST_SIGBASE(x15,signature_x15_5)

inst_1016:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6143da and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0123c1 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x63454f and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f6143da; op2val:0x3f8123c1; op3val:0x3f63454f; valaddr_reg:x16; val_offset:1992; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1992, x17, x15, 0, x18)

inst_1017:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6143da and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0123c1 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x63454f and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f6143da; op2val:0x3f8123c1; op3val:0x3f63454f; valaddr_reg:x16; val_offset:2004; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 2004, x17, x15, 8, x18)

inst_1018:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6143da and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0123c1 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x63454f and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f6143da; op2val:0x3f8123c1; op3val:0x3f63454f; valaddr_reg:x16; val_offset:2016; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 2016, x17, x15, 16, x18)

inst_1019:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6143da and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0123c1 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x63454f and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f6143da; op2val:0x3f8123c1; op3val:0x3f63454f; valaddr_reg:x16; val_offset:2028; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 2028, x17, x15, 24, x18)
addi x16,x16,2040

inst_1020:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6143da and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0123c1 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x63454f and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f6143da; op2val:0x3f8123c1; op3val:0x3f63454f; valaddr_reg:x16; val_offset:0; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 0, x17, x15, 32, x18)

inst_1021:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x54d5d7 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x508c56 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x2d626b and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f54d5d7; op2val:0x3ed08c56; op3val:0x3ead626b; valaddr_reg:x16; val_offset:12; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 12, x17, x15, 40, x18)

inst_1022:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x54d5d7 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x508c56 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x2d626b and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f54d5d7; op2val:0x3ed08c56; op3val:0x3ead626b; valaddr_reg:x16; val_offset:24; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 24, x17, x15, 48, x18)

inst_1023:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x54d5d7 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x508c56 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x2d626b and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f54d5d7; op2val:0x3ed08c56; op3val:0x3ead626b; valaddr_reg:x16; val_offset:36; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 36, x17, x15, 56, x18)

inst_1024:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x54d5d7 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x508c56 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x2d626b and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f54d5d7; op2val:0x3ed08c56; op3val:0x3ead626b; valaddr_reg:x16; val_offset:48; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 48, x17, x15, 64, x18)

inst_1025:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x54d5d7 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x508c56 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x2d626b and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f54d5d7; op2val:0x3ed08c56; op3val:0x3ead626b; valaddr_reg:x16; val_offset:60; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 60, x17, x15, 72, x18)

inst_1026:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0d3c6e and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7c02fe and fs3 == 0 and fe3 == 0x7c and fm3 == 0x0b0923 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e8d3c6e; op2val:0x3efc02fe; op3val:0x3e0b0923; valaddr_reg:x16; val_offset:72; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 72, x17, x15, 80, x18)

inst_1027:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0d3c6e and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7c02fe and fs3 == 0 and fe3 == 0x7c and fm3 == 0x0b0923 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e8d3c6e; op2val:0x3efc02fe; op3val:0x3e0b0923; valaddr_reg:x16; val_offset:84; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 84, x17, x15, 88, x18)

inst_1028:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0d3c6e and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7c02fe and fs3 == 0 and fe3 == 0x7c and fm3 == 0x0b0923 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e8d3c6e; op2val:0x3efc02fe; op3val:0x3e0b0923; valaddr_reg:x16; val_offset:96; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 96, x17, x15, 96, x18)

inst_1029:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0d3c6e and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7c02fe and fs3 == 0 and fe3 == 0x7c and fm3 == 0x0b0923 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e8d3c6e; op2val:0x3efc02fe; op3val:0x3e0b0923; valaddr_reg:x16; val_offset:108; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 108, x17, x15, 104, x18)

inst_1030:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0d3c6e and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7c02fe and fs3 == 0 and fe3 == 0x7c and fm3 == 0x0b0923 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e8d3c6e; op2val:0x3efc02fe; op3val:0x3e0b0923; valaddr_reg:x16; val_offset:120; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 120, x17, x15, 112, x18)

inst_1031:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x34dd4e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3faa2b and fs3 == 0 and fe3 == 0x7e and fm3 == 0x076957 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f34dd4e; op2val:0x3f3faa2b; op3val:0x3f076957; valaddr_reg:x16; val_offset:132; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 132, x17, x15, 120, x18)

inst_1032:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x34dd4e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3faa2b and fs3 == 0 and fe3 == 0x7e and fm3 == 0x076957 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f34dd4e; op2val:0x3f3faa2b; op3val:0x3f076957; valaddr_reg:x16; val_offset:144; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 144, x17, x15, 128, x18)

inst_1033:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x34dd4e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3faa2b and fs3 == 0 and fe3 == 0x7e and fm3 == 0x076957 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f34dd4e; op2val:0x3f3faa2b; op3val:0x3f076957; valaddr_reg:x16; val_offset:156; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 156, x17, x15, 136, x18)

inst_1034:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x34dd4e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3faa2b and fs3 == 0 and fe3 == 0x7e and fm3 == 0x076957 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f34dd4e; op2val:0x3f3faa2b; op3val:0x3f076957; valaddr_reg:x16; val_offset:168; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 168, x17, x15, 144, x18)

inst_1035:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x34dd4e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3faa2b and fs3 == 0 and fe3 == 0x7e and fm3 == 0x076957 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f34dd4e; op2val:0x3f3faa2b; op3val:0x3f076957; valaddr_reg:x16; val_offset:180; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 180, x17, x15, 152, x18)

inst_1036:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5e9022 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x37161f and fs3 == 0 and fe3 == 0x7b and fm3 == 0x1f2c45 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ede9022; op2val:0x3e37161f; op3val:0x3d9f2c45; valaddr_reg:x16; val_offset:192; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 192, x17, x15, 160, x18)

inst_1037:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5e9022 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x37161f and fs3 == 0 and fe3 == 0x7b and fm3 == 0x1f2c45 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ede9022; op2val:0x3e37161f; op3val:0x3d9f2c45; valaddr_reg:x16; val_offset:204; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 204, x17, x15, 168, x18)

inst_1038:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5e9022 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x37161f and fs3 == 0 and fe3 == 0x7b and fm3 == 0x1f2c45 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ede9022; op2val:0x3e37161f; op3val:0x3d9f2c45; valaddr_reg:x16; val_offset:216; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 216, x17, x15, 176, x18)

inst_1039:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5e9022 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x37161f and fs3 == 0 and fe3 == 0x7b and fm3 == 0x1f2c45 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ede9022; op2val:0x3e37161f; op3val:0x3d9f2c45; valaddr_reg:x16; val_offset:228; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 228, x17, x15, 184, x18)

inst_1040:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5e9022 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x37161f and fs3 == 0 and fe3 == 0x7b and fm3 == 0x1f2c45 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ede9022; op2val:0x3e37161f; op3val:0x3d9f2c45; valaddr_reg:x16; val_offset:240; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 240, x17, x15, 192, x18)

inst_1041:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5ab7ea and fs2 == 0 and fe2 == 0x80 and fm2 == 0x680b80 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x464080 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e5ab7ea; op2val:0x40680b80; op3val:0x3f464080; valaddr_reg:x16; val_offset:252; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 252, x17, x15, 200, x18)

inst_1042:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5ab7ea and fs2 == 0 and fe2 == 0x80 and fm2 == 0x680b80 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x464080 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e5ab7ea; op2val:0x40680b80; op3val:0x3f464080; valaddr_reg:x16; val_offset:264; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 264, x17, x15, 208, x18)

inst_1043:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5ab7ea and fs2 == 0 and fe2 == 0x80 and fm2 == 0x680b80 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x464080 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e5ab7ea; op2val:0x40680b80; op3val:0x3f464080; valaddr_reg:x16; val_offset:276; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 276, x17, x15, 216, x18)

inst_1044:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5ab7ea and fs2 == 0 and fe2 == 0x80 and fm2 == 0x680b80 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x464080 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e5ab7ea; op2val:0x40680b80; op3val:0x3f464080; valaddr_reg:x16; val_offset:288; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 288, x17, x15, 224, x18)

inst_1045:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5ab7ea and fs2 == 0 and fe2 == 0x80 and fm2 == 0x680b80 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x464080 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e5ab7ea; op2val:0x40680b80; op3val:0x3f464080; valaddr_reg:x16; val_offset:300; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 300, x17, x15, 232, x18)

inst_1046:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x77c2fe and fs2 == 0 and fe2 == 0x7d and fm2 == 0x71e4b0 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x6a1be5 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f77c2fe; op2val:0x3ef1e4b0; op3val:0x3eea1be5; valaddr_reg:x16; val_offset:312; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 312, x17, x15, 240, x18)

inst_1047:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x77c2fe and fs2 == 0 and fe2 == 0x7d and fm2 == 0x71e4b0 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x6a1be5 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f77c2fe; op2val:0x3ef1e4b0; op3val:0x3eea1be5; valaddr_reg:x16; val_offset:324; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 324, x17, x15, 248, x18)

inst_1048:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x77c2fe and fs2 == 0 and fe2 == 0x7d and fm2 == 0x71e4b0 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x6a1be5 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f77c2fe; op2val:0x3ef1e4b0; op3val:0x3eea1be5; valaddr_reg:x16; val_offset:336; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 336, x17, x15, 256, x18)

inst_1049:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x77c2fe and fs2 == 0 and fe2 == 0x7d and fm2 == 0x71e4b0 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x6a1be5 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f77c2fe; op2val:0x3ef1e4b0; op3val:0x3eea1be5; valaddr_reg:x16; val_offset:348; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 348, x17, x15, 264, x18)

inst_1050:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x77c2fe and fs2 == 0 and fe2 == 0x7d and fm2 == 0x71e4b0 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x6a1be5 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f77c2fe; op2val:0x3ef1e4b0; op3val:0x3eea1be5; valaddr_reg:x16; val_offset:360; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 360, x17, x15, 272, x18)

inst_1051:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x665cd0 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x33e853 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x21e3f5 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f665cd0; op2val:0x3f33e853; op3val:0x3f21e3f5; valaddr_reg:x16; val_offset:372; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 372, x17, x15, 280, x18)

inst_1052:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x665cd0 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x33e853 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x21e3f5 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f665cd0; op2val:0x3f33e853; op3val:0x3f21e3f5; valaddr_reg:x16; val_offset:384; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 384, x17, x15, 288, x18)

inst_1053:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x665cd0 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x33e853 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x21e3f5 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f665cd0; op2val:0x3f33e853; op3val:0x3f21e3f5; valaddr_reg:x16; val_offset:396; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 396, x17, x15, 296, x18)

inst_1054:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x665cd0 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x33e853 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x21e3f5 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f665cd0; op2val:0x3f33e853; op3val:0x3f21e3f5; valaddr_reg:x16; val_offset:408; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 408, x17, x15, 304, x18)

inst_1055:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x665cd0 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x33e853 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x21e3f5 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f665cd0; op2val:0x3f33e853; op3val:0x3f21e3f5; valaddr_reg:x16; val_offset:420; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 420, x17, x15, 312, x18)

inst_1056:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x62aa14 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x2717b0 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x13f1ed and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f62aa14; op2val:0x3ea717b0; op3val:0x3e93f1ed; valaddr_reg:x16; val_offset:432; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 432, x17, x15, 320, x18)

inst_1057:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x62aa14 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x2717b0 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x13f1ed and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f62aa14; op2val:0x3ea717b0; op3val:0x3e93f1ed; valaddr_reg:x16; val_offset:444; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 444, x17, x15, 328, x18)

inst_1058:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x62aa14 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x2717b0 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x13f1ed and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f62aa14; op2val:0x3ea717b0; op3val:0x3e93f1ed; valaddr_reg:x16; val_offset:456; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 456, x17, x15, 336, x18)

inst_1059:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x62aa14 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x2717b0 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x13f1ed and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f62aa14; op2val:0x3ea717b0; op3val:0x3e93f1ed; valaddr_reg:x16; val_offset:468; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 468, x17, x15, 344, x18)

inst_1060:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x62aa14 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x2717b0 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x13f1ed and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f62aa14; op2val:0x3ea717b0; op3val:0x3e93f1ed; valaddr_reg:x16; val_offset:480; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 480, x17, x15, 352, x18)

inst_1061:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x75cafc and fs2 == 0 and fe2 == 0x7d and fm2 == 0x0088d2 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x76d1b8 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f75cafc; op2val:0x3e8088d2; op3val:0x3e76d1b8; valaddr_reg:x16; val_offset:492; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 492, x17, x15, 360, x18)

inst_1062:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x75cafc and fs2 == 0 and fe2 == 0x7d and fm2 == 0x0088d2 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x76d1b8 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f75cafc; op2val:0x3e8088d2; op3val:0x3e76d1b8; valaddr_reg:x16; val_offset:504; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 504, x17, x15, 368, x18)

inst_1063:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x75cafc and fs2 == 0 and fe2 == 0x7d and fm2 == 0x0088d2 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x76d1b8 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f75cafc; op2val:0x3e8088d2; op3val:0x3e76d1b8; valaddr_reg:x16; val_offset:516; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 516, x17, x15, 376, x18)

inst_1064:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x75cafc and fs2 == 0 and fe2 == 0x7d and fm2 == 0x0088d2 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x76d1b8 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f75cafc; op2val:0x3e8088d2; op3val:0x3e76d1b8; valaddr_reg:x16; val_offset:528; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 528, x17, x15, 384, x18)

inst_1065:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x75cafc and fs2 == 0 and fe2 == 0x7d and fm2 == 0x0088d2 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x76d1b8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f75cafc; op2val:0x3e8088d2; op3val:0x3e76d1b8; valaddr_reg:x16; val_offset:540; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 540, x17, x15, 392, x18)

inst_1066:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1d8461 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x435310 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x705de5 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f1d8461; op2val:0x3fc35310; op3val:0x3f705de5; valaddr_reg:x16; val_offset:552; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 552, x17, x15, 400, x18)

inst_1067:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1d8461 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x435310 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x705de5 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f1d8461; op2val:0x3fc35310; op3val:0x3f705de5; valaddr_reg:x16; val_offset:564; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 564, x17, x15, 408, x18)

inst_1068:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1d8461 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x435310 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x705de5 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f1d8461; op2val:0x3fc35310; op3val:0x3f705de5; valaddr_reg:x16; val_offset:576; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 576, x17, x15, 416, x18)

inst_1069:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1d8461 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x435310 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x705de5 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f1d8461; op2val:0x3fc35310; op3val:0x3f705de5; valaddr_reg:x16; val_offset:588; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 588, x17, x15, 424, x18)

inst_1070:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1d8461 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x435310 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x705de5 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f1d8461; op2val:0x3fc35310; op3val:0x3f705de5; valaddr_reg:x16; val_offset:600; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 600, x17, x15, 432, x18)

inst_1071:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x55fbab and fs2 == 0 and fe2 == 0x7d and fm2 == 0x656a77 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x3fc31e and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f55fbab; op2val:0x3ee56a77; op3val:0x3ebfc31e; valaddr_reg:x16; val_offset:612; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 612, x17, x15, 440, x18)

inst_1072:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x55fbab and fs2 == 0 and fe2 == 0x7d and fm2 == 0x656a77 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x3fc31e and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f55fbab; op2val:0x3ee56a77; op3val:0x3ebfc31e; valaddr_reg:x16; val_offset:624; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 624, x17, x15, 448, x18)

inst_1073:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x55fbab and fs2 == 0 and fe2 == 0x7d and fm2 == 0x656a77 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x3fc31e and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f55fbab; op2val:0x3ee56a77; op3val:0x3ebfc31e; valaddr_reg:x16; val_offset:636; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 636, x17, x15, 456, x18)

inst_1074:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x55fbab and fs2 == 0 and fe2 == 0x7d and fm2 == 0x656a77 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x3fc31e and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f55fbab; op2val:0x3ee56a77; op3val:0x3ebfc31e; valaddr_reg:x16; val_offset:648; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 648, x17, x15, 464, x18)

inst_1075:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x55fbab and fs2 == 0 and fe2 == 0x7d and fm2 == 0x656a77 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x3fc31e and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f55fbab; op2val:0x3ee56a77; op3val:0x3ebfc31e; valaddr_reg:x16; val_offset:660; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 660, x17, x15, 472, x18)

inst_1076:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2ab8bb and fs2 == 0 and fe2 == 0x7b and fm2 == 0x2865b3 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x609a1b and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eaab8bb; op2val:0x3da865b3; op3val:0x3ce09a1b; valaddr_reg:x16; val_offset:672; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 672, x17, x15, 480, x18)

inst_1077:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2ab8bb and fs2 == 0 and fe2 == 0x7b and fm2 == 0x2865b3 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x609a1b and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eaab8bb; op2val:0x3da865b3; op3val:0x3ce09a1b; valaddr_reg:x16; val_offset:684; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 684, x17, x15, 488, x18)

inst_1078:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2ab8bb and fs2 == 0 and fe2 == 0x7b and fm2 == 0x2865b3 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x609a1b and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eaab8bb; op2val:0x3da865b3; op3val:0x3ce09a1b; valaddr_reg:x16; val_offset:696; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 696, x17, x15, 496, x18)

inst_1079:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2ab8bb and fs2 == 0 and fe2 == 0x7b and fm2 == 0x2865b3 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x609a1b and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eaab8bb; op2val:0x3da865b3; op3val:0x3ce09a1b; valaddr_reg:x16; val_offset:708; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 708, x17, x15, 504, x18)

inst_1080:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2ab8bb and fs2 == 0 and fe2 == 0x7b and fm2 == 0x2865b3 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x609a1b and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eaab8bb; op2val:0x3da865b3; op3val:0x3ce09a1b; valaddr_reg:x16; val_offset:720; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 720, x17, x15, 512, x18)

inst_1081:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x476a7d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x4e4fe4 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x20b5ec and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e476a7d; op2val:0x404e4fe4; op3val:0x3f20b5ec; valaddr_reg:x16; val_offset:732; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 732, x17, x15, 520, x18)

inst_1082:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x476a7d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x4e4fe4 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x20b5ec and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e476a7d; op2val:0x404e4fe4; op3val:0x3f20b5ec; valaddr_reg:x16; val_offset:744; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 744, x17, x15, 528, x18)

inst_1083:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x476a7d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x4e4fe4 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x20b5ec and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e476a7d; op2val:0x404e4fe4; op3val:0x3f20b5ec; valaddr_reg:x16; val_offset:756; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 756, x17, x15, 536, x18)

inst_1084:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x476a7d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x4e4fe4 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x20b5ec and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e476a7d; op2val:0x404e4fe4; op3val:0x3f20b5ec; valaddr_reg:x16; val_offset:768; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 768, x17, x15, 544, x18)

inst_1085:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x476a7d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x4e4fe4 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x20b5ec and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e476a7d; op2val:0x404e4fe4; op3val:0x3f20b5ec; valaddr_reg:x16; val_offset:780; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 780, x17, x15, 552, x18)

inst_1086:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1137a2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x202537 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x35afc3 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e9137a2; op2val:0x3fa02537; op3val:0x3eb5afc3; valaddr_reg:x16; val_offset:792; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 792, x17, x15, 560, x18)

inst_1087:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1137a2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x202537 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x35afc3 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e9137a2; op2val:0x3fa02537; op3val:0x3eb5afc3; valaddr_reg:x16; val_offset:804; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 804, x17, x15, 568, x18)

inst_1088:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1137a2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x202537 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x35afc3 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e9137a2; op2val:0x3fa02537; op3val:0x3eb5afc3; valaddr_reg:x16; val_offset:816; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 816, x17, x15, 576, x18)

inst_1089:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1137a2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x202537 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x35afc3 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e9137a2; op2val:0x3fa02537; op3val:0x3eb5afc3; valaddr_reg:x16; val_offset:828; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 828, x17, x15, 584, x18)

inst_1090:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1137a2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x202537 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x35afc3 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e9137a2; op2val:0x3fa02537; op3val:0x3eb5afc3; valaddr_reg:x16; val_offset:840; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 840, x17, x15, 592, x18)

inst_1091:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x65db9d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x40b1f3 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x2d047d and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ee5db9d; op2val:0x3f40b1f3; op3val:0x3ead047d; valaddr_reg:x16; val_offset:852; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 852, x17, x15, 600, x18)

inst_1092:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x65db9d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x40b1f3 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x2d047d and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ee5db9d; op2val:0x3f40b1f3; op3val:0x3ead047d; valaddr_reg:x16; val_offset:864; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 864, x17, x15, 608, x18)

inst_1093:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x65db9d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x40b1f3 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x2d047d and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ee5db9d; op2val:0x3f40b1f3; op3val:0x3ead047d; valaddr_reg:x16; val_offset:876; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 876, x17, x15, 616, x18)

inst_1094:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x65db9d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x40b1f3 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x2d047d and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ee5db9d; op2val:0x3f40b1f3; op3val:0x3ead047d; valaddr_reg:x16; val_offset:888; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 888, x17, x15, 624, x18)

inst_1095:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x65db9d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x40b1f3 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x2d047d and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ee5db9d; op2val:0x3f40b1f3; op3val:0x3ead047d; valaddr_reg:x16; val_offset:900; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 900, x17, x15, 632, x18)

inst_1096:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1a3cb4 and fs2 == 0 and fe2 == 0x77 and fm2 == 0x06da44 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x227e8f and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f1a3cb4; op2val:0x3b86da44; op3val:0x3b227e8f; valaddr_reg:x16; val_offset:912; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 912, x17, x15, 640, x18)

inst_1097:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1a3cb4 and fs2 == 0 and fe2 == 0x77 and fm2 == 0x06da44 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x227e8f and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f1a3cb4; op2val:0x3b86da44; op3val:0x3b227e8f; valaddr_reg:x16; val_offset:924; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 924, x17, x15, 648, x18)

inst_1098:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1a3cb4 and fs2 == 0 and fe2 == 0x77 and fm2 == 0x06da44 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x227e8f and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f1a3cb4; op2val:0x3b86da44; op3val:0x3b227e8f; valaddr_reg:x16; val_offset:936; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 936, x17, x15, 656, x18)

inst_1099:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1a3cb4 and fs2 == 0 and fe2 == 0x77 and fm2 == 0x06da44 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x227e8f and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f1a3cb4; op2val:0x3b86da44; op3val:0x3b227e8f; valaddr_reg:x16; val_offset:948; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 948, x17, x15, 664, x18)

inst_1100:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1a3cb4 and fs2 == 0 and fe2 == 0x77 and fm2 == 0x06da44 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x227e8f and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f1a3cb4; op2val:0x3b86da44; op3val:0x3b227e8f; valaddr_reg:x16; val_offset:960; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 960, x17, x15, 672, x18)

inst_1101:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1e7179 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x673d4b and fs3 == 0 and fe3 == 0x7e and fm3 == 0x0f1e54 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f1e7179; op2val:0x3f673d4b; op3val:0x3f0f1e54; valaddr_reg:x16; val_offset:972; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 972, x17, x15, 680, x18)

inst_1102:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1e7179 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x673d4b and fs3 == 0 and fe3 == 0x7e and fm3 == 0x0f1e54 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f1e7179; op2val:0x3f673d4b; op3val:0x3f0f1e54; valaddr_reg:x16; val_offset:984; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 984, x17, x15, 688, x18)

inst_1103:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1e7179 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x673d4b and fs3 == 0 and fe3 == 0x7e and fm3 == 0x0f1e54 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f1e7179; op2val:0x3f673d4b; op3val:0x3f0f1e54; valaddr_reg:x16; val_offset:996; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 996, x17, x15, 696, x18)

inst_1104:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1e7179 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x673d4b and fs3 == 0 and fe3 == 0x7e and fm3 == 0x0f1e54 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f1e7179; op2val:0x3f673d4b; op3val:0x3f0f1e54; valaddr_reg:x16; val_offset:1008; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1008, x17, x15, 704, x18)

inst_1105:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1e7179 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x673d4b and fs3 == 0 and fe3 == 0x7e and fm3 == 0x0f1e54 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f1e7179; op2val:0x3f673d4b; op3val:0x3f0f1e54; valaddr_reg:x16; val_offset:1020; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1020, x17, x15, 712, x18)

inst_1106:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4fd5a6 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x54c363 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x2cbb8e and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f4fd5a6; op2val:0x3f54c363; op3val:0x3f2cbb8e; valaddr_reg:x16; val_offset:1032; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1032, x17, x15, 720, x18)

inst_1107:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4fd5a6 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x54c363 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x2cbb8e and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f4fd5a6; op2val:0x3f54c363; op3val:0x3f2cbb8e; valaddr_reg:x16; val_offset:1044; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1044, x17, x15, 728, x18)

inst_1108:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4fd5a6 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x54c363 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x2cbb8e and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f4fd5a6; op2val:0x3f54c363; op3val:0x3f2cbb8e; valaddr_reg:x16; val_offset:1056; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1056, x17, x15, 736, x18)

inst_1109:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4fd5a6 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x54c363 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x2cbb8e and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f4fd5a6; op2val:0x3f54c363; op3val:0x3f2cbb8e; valaddr_reg:x16; val_offset:1068; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1068, x17, x15, 744, x18)

inst_1110:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4fd5a6 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x54c363 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x2cbb8e and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f4fd5a6; op2val:0x3f54c363; op3val:0x3f2cbb8e; valaddr_reg:x16; val_offset:1080; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1080, x17, x15, 752, x18)

inst_1111:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5ab532 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x012cc7 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x5cb720 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e5ab532; op2val:0x40012cc7; op3val:0x3edcb720; valaddr_reg:x16; val_offset:1092; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1092, x17, x15, 760, x18)

inst_1112:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5ab532 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x012cc7 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x5cb720 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e5ab532; op2val:0x40012cc7; op3val:0x3edcb720; valaddr_reg:x16; val_offset:1104; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1104, x17, x15, 768, x18)

inst_1113:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5ab532 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x012cc7 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x5cb720 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e5ab532; op2val:0x40012cc7; op3val:0x3edcb720; valaddr_reg:x16; val_offset:1116; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1116, x17, x15, 776, x18)

inst_1114:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5ab532 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x012cc7 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x5cb720 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e5ab532; op2val:0x40012cc7; op3val:0x3edcb720; valaddr_reg:x16; val_offset:1128; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1128, x17, x15, 784, x18)

inst_1115:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5ab532 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x012cc7 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x5cb720 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e5ab532; op2val:0x40012cc7; op3val:0x3edcb720; valaddr_reg:x16; val_offset:1140; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1140, x17, x15, 792, x18)

inst_1116:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x42797f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x101bfb and fs3 == 0 and fe3 == 0x7d and fm3 == 0x5af333 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f42797f; op2val:0x3f101bfb; op3val:0x3edaf333; valaddr_reg:x16; val_offset:1152; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1152, x17, x15, 800, x18)

inst_1117:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x42797f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x101bfb and fs3 == 0 and fe3 == 0x7d and fm3 == 0x5af333 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f42797f; op2val:0x3f101bfb; op3val:0x3edaf333; valaddr_reg:x16; val_offset:1164; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1164, x17, x15, 808, x18)

inst_1118:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x42797f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x101bfb and fs3 == 0 and fe3 == 0x7d and fm3 == 0x5af333 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f42797f; op2val:0x3f101bfb; op3val:0x3edaf333; valaddr_reg:x16; val_offset:1176; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1176, x17, x15, 816, x18)

inst_1119:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x42797f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x101bfb and fs3 == 0 and fe3 == 0x7d and fm3 == 0x5af333 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f42797f; op2val:0x3f101bfb; op3val:0x3edaf333; valaddr_reg:x16; val_offset:1188; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1188, x17, x15, 824, x18)

inst_1120:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x42797f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x101bfb and fs3 == 0 and fe3 == 0x7d and fm3 == 0x5af333 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f42797f; op2val:0x3f101bfb; op3val:0x3edaf333; valaddr_reg:x16; val_offset:1200; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1200, x17, x15, 832, x18)

inst_1121:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x563994 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x511902 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x2ef9ef and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f563994; op2val:0x3f511902; op3val:0x3f2ef9ef; valaddr_reg:x16; val_offset:1212; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1212, x17, x15, 840, x18)

inst_1122:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x563994 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x511902 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x2ef9ef and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f563994; op2val:0x3f511902; op3val:0x3f2ef9ef; valaddr_reg:x16; val_offset:1224; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1224, x17, x15, 848, x18)

inst_1123:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x563994 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x511902 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x2ef9ef and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f563994; op2val:0x3f511902; op3val:0x3f2ef9ef; valaddr_reg:x16; val_offset:1236; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1236, x17, x15, 856, x18)

inst_1124:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x563994 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x511902 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x2ef9ef and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f563994; op2val:0x3f511902; op3val:0x3f2ef9ef; valaddr_reg:x16; val_offset:1248; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1248, x17, x15, 864, x18)

inst_1125:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x563994 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x511902 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x2ef9ef and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f563994; op2val:0x3f511902; op3val:0x3f2ef9ef; valaddr_reg:x16; val_offset:1260; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1260, x17, x15, 872, x18)

inst_1126:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x3721a1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4fdf25 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x14b3d3 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3db721a1; op2val:0x40cfdf25; op3val:0x3f14b3d3; valaddr_reg:x16; val_offset:1272; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1272, x17, x15, 880, x18)

inst_1127:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x3721a1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4fdf25 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x14b3d3 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3db721a1; op2val:0x40cfdf25; op3val:0x3f14b3d3; valaddr_reg:x16; val_offset:1284; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1284, x17, x15, 888, x18)

inst_1128:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x3721a1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4fdf25 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x14b3d3 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3db721a1; op2val:0x40cfdf25; op3val:0x3f14b3d3; valaddr_reg:x16; val_offset:1296; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1296, x17, x15, 896, x18)

inst_1129:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x3721a1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4fdf25 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x14b3d3 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3db721a1; op2val:0x40cfdf25; op3val:0x3f14b3d3; valaddr_reg:x16; val_offset:1308; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1308, x17, x15, 904, x18)

inst_1130:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x3721a1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4fdf25 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x14b3d3 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3db721a1; op2val:0x40cfdf25; op3val:0x3f14b3d3; valaddr_reg:x16; val_offset:1320; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1320, x17, x15, 912, x18)

inst_1131:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x47457f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0f5f3a and fs3 == 0 and fe3 == 0x7d and fm3 == 0x5f33e5 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f47457f; op2val:0x3f0f5f3a; op3val:0x3edf33e5; valaddr_reg:x16; val_offset:1332; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1332, x17, x15, 920, x18)

inst_1132:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x47457f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0f5f3a and fs3 == 0 and fe3 == 0x7d and fm3 == 0x5f33e5 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f47457f; op2val:0x3f0f5f3a; op3val:0x3edf33e5; valaddr_reg:x16; val_offset:1344; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1344, x17, x15, 928, x18)

inst_1133:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x47457f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0f5f3a and fs3 == 0 and fe3 == 0x7d and fm3 == 0x5f33e5 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f47457f; op2val:0x3f0f5f3a; op3val:0x3edf33e5; valaddr_reg:x16; val_offset:1356; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1356, x17, x15, 936, x18)

inst_1134:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x47457f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0f5f3a and fs3 == 0 and fe3 == 0x7d and fm3 == 0x5f33e5 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f47457f; op2val:0x3f0f5f3a; op3val:0x3edf33e5; valaddr_reg:x16; val_offset:1368; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1368, x17, x15, 944, x18)

inst_1135:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x47457f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0f5f3a and fs3 == 0 and fe3 == 0x7d and fm3 == 0x5f33e5 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f47457f; op2val:0x3f0f5f3a; op3val:0x3edf33e5; valaddr_reg:x16; val_offset:1380; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1380, x17, x15, 952, x18)

inst_1136:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1c97c4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x229322 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x46e415 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f1c97c4; op2val:0x3fa29322; op3val:0x3f46e415; valaddr_reg:x16; val_offset:1392; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1392, x17, x15, 960, x18)

inst_1137:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1c97c4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x229322 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x46e415 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f1c97c4; op2val:0x3fa29322; op3val:0x3f46e415; valaddr_reg:x16; val_offset:1404; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1404, x17, x15, 968, x18)

inst_1138:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1c97c4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x229322 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x46e415 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f1c97c4; op2val:0x3fa29322; op3val:0x3f46e415; valaddr_reg:x16; val_offset:1416; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1416, x17, x15, 976, x18)

inst_1139:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1c97c4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x229322 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x46e415 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f1c97c4; op2val:0x3fa29322; op3val:0x3f46e415; valaddr_reg:x16; val_offset:1428; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1428, x17, x15, 984, x18)

inst_1140:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1c97c4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x229322 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x46e415 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f1c97c4; op2val:0x3fa29322; op3val:0x3f46e415; valaddr_reg:x16; val_offset:1440; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1440, x17, x15, 992, x18)

inst_1141:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5957f3 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x022149 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x5cf5d9 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5957f3; op2val:0x3f022149; op3val:0x3edcf5d9; valaddr_reg:x16; val_offset:1452; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1452, x17, x15, 1000, x18)

inst_1142:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5957f3 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x022149 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x5cf5d9 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5957f3; op2val:0x3f022149; op3val:0x3edcf5d9; valaddr_reg:x16; val_offset:1464; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1464, x17, x15, 1008, x18)

inst_1143:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5957f3 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x022149 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x5cf5d9 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5957f3; op2val:0x3f022149; op3val:0x3edcf5d9; valaddr_reg:x16; val_offset:1476; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1476, x17, x15, 1016, x18)

inst_1144:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5957f3 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x022149 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x5cf5d9 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5957f3; op2val:0x3f022149; op3val:0x3edcf5d9; valaddr_reg:x16; val_offset:1488; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1488, x17, x15, 1024, x18)

inst_1145:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5957f3 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x022149 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x5cf5d9 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5957f3; op2val:0x3f022149; op3val:0x3edcf5d9; valaddr_reg:x16; val_offset:1500; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1500, x17, x15, 1032, x18)

inst_1146:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5985e9 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5868e3 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x37e21c and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5985e9; op2val:0x3f5868e3; op3val:0x3f37e21c; valaddr_reg:x16; val_offset:1512; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1512, x17, x15, 1040, x18)

inst_1147:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5985e9 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5868e3 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x37e21c and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5985e9; op2val:0x3f5868e3; op3val:0x3f37e21c; valaddr_reg:x16; val_offset:1524; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1524, x17, x15, 1048, x18)

inst_1148:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5985e9 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5868e3 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x37e21c and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5985e9; op2val:0x3f5868e3; op3val:0x3f37e21c; valaddr_reg:x16; val_offset:1536; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1536, x17, x15, 1056, x18)

inst_1149:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5985e9 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5868e3 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x37e21c and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5985e9; op2val:0x3f5868e3; op3val:0x3f37e21c; valaddr_reg:x16; val_offset:1548; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1548, x17, x15, 1064, x18)

inst_1150:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5985e9 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5868e3 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x37e21c and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5985e9; op2val:0x3f5868e3; op3val:0x3f37e21c; valaddr_reg:x16; val_offset:1560; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1560, x17, x15, 1072, x18)

inst_1151:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7832be and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7a9f0b and fs3 == 0 and fe3 == 0x7d and fm3 == 0x72fbc0 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f7832be; op2val:0x3efa9f0b; op3val:0x3ef2fbc0; valaddr_reg:x16; val_offset:1572; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1572, x17, x15, 1080, x18)

inst_1152:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7832be and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7a9f0b and fs3 == 0 and fe3 == 0x7d and fm3 == 0x72fbc0 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f7832be; op2val:0x3efa9f0b; op3val:0x3ef2fbc0; valaddr_reg:x16; val_offset:1584; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1584, x17, x15, 1088, x18)

inst_1153:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7832be and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7a9f0b and fs3 == 0 and fe3 == 0x7d and fm3 == 0x72fbc0 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f7832be; op2val:0x3efa9f0b; op3val:0x3ef2fbc0; valaddr_reg:x16; val_offset:1596; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1596, x17, x15, 1096, x18)

inst_1154:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7832be and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7a9f0b and fs3 == 0 and fe3 == 0x7d and fm3 == 0x72fbc0 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f7832be; op2val:0x3efa9f0b; op3val:0x3ef2fbc0; valaddr_reg:x16; val_offset:1608; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1608, x17, x15, 1104, x18)

inst_1155:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7832be and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7a9f0b and fs3 == 0 and fe3 == 0x7d and fm3 == 0x72fbc0 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f7832be; op2val:0x3efa9f0b; op3val:0x3ef2fbc0; valaddr_reg:x16; val_offset:1620; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1620, x17, x15, 1112, x18)

inst_1156:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6d103b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x049f33 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x759f96 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f6d103b; op2val:0x3f049f33; op3val:0x3ef59f96; valaddr_reg:x16; val_offset:1632; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1632, x17, x15, 1120, x18)

inst_1157:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6d103b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x049f33 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x759f96 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f6d103b; op2val:0x3f049f33; op3val:0x3ef59f96; valaddr_reg:x16; val_offset:1644; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1644, x17, x15, 1128, x18)

inst_1158:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6d103b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x049f33 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x759f96 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f6d103b; op2val:0x3f049f33; op3val:0x3ef59f96; valaddr_reg:x16; val_offset:1656; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1656, x17, x15, 1136, x18)

inst_1159:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6d103b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x049f33 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x759f96 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f6d103b; op2val:0x3f049f33; op3val:0x3ef59f96; valaddr_reg:x16; val_offset:1668; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1668, x17, x15, 1144, x18)

inst_1160:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6d103b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x049f33 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x759f96 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f6d103b; op2val:0x3f049f33; op3val:0x3ef59f96; valaddr_reg:x16; val_offset:1680; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1680, x17, x15, 1152, x18)

inst_1161:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x01666e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6a311b and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6cc0e7 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f01666e; op2val:0x3fea311b; op3val:0x3f6cc0e7; valaddr_reg:x16; val_offset:1692; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1692, x17, x15, 1160, x18)

inst_1162:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x01666e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6a311b and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6cc0e7 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f01666e; op2val:0x3fea311b; op3val:0x3f6cc0e7; valaddr_reg:x16; val_offset:1704; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1704, x17, x15, 1168, x18)

inst_1163:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x01666e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6a311b and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6cc0e7 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f01666e; op2val:0x3fea311b; op3val:0x3f6cc0e7; valaddr_reg:x16; val_offset:1716; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1716, x17, x15, 1176, x18)

inst_1164:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x01666e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6a311b and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6cc0e7 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f01666e; op2val:0x3fea311b; op3val:0x3f6cc0e7; valaddr_reg:x16; val_offset:1728; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1728, x17, x15, 1184, x18)

inst_1165:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x01666e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6a311b and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6cc0e7 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f01666e; op2val:0x3fea311b; op3val:0x3f6cc0e7; valaddr_reg:x16; val_offset:1740; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1740, x17, x15, 1192, x18)

inst_1166:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x67df29 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x177ae7 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x0933f3 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ee7df29; op2val:0x3f977ae7; op3val:0x3f0933f3; valaddr_reg:x16; val_offset:1752; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1752, x17, x15, 1200, x18)

inst_1167:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x67df29 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x177ae7 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x0933f3 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ee7df29; op2val:0x3f977ae7; op3val:0x3f0933f3; valaddr_reg:x16; val_offset:1764; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1764, x17, x15, 1208, x18)

inst_1168:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x67df29 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x177ae7 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x0933f3 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ee7df29; op2val:0x3f977ae7; op3val:0x3f0933f3; valaddr_reg:x16; val_offset:1776; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1776, x17, x15, 1216, x18)

inst_1169:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x67df29 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x177ae7 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x0933f3 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ee7df29; op2val:0x3f977ae7; op3val:0x3f0933f3; valaddr_reg:x16; val_offset:1788; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1788, x17, x15, 1224, x18)

inst_1170:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x67df29 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x177ae7 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x0933f3 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ee7df29; op2val:0x3f977ae7; op3val:0x3f0933f3; valaddr_reg:x16; val_offset:1800; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1800, x17, x15, 1232, x18)

inst_1171:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x09763a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x533203 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x62ce99 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e89763a; op2val:0x40533203; op3val:0x3f62ce99; valaddr_reg:x16; val_offset:1812; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1812, x17, x15, 1240, x18)

inst_1172:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x09763a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x533203 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x62ce99 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e89763a; op2val:0x40533203; op3val:0x3f62ce99; valaddr_reg:x16; val_offset:1824; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1824, x17, x15, 1248, x18)

inst_1173:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x09763a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x533203 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x62ce99 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e89763a; op2val:0x40533203; op3val:0x3f62ce99; valaddr_reg:x16; val_offset:1836; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1836, x17, x15, 1256, x18)

inst_1174:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x09763a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x533203 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x62ce99 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e89763a; op2val:0x40533203; op3val:0x3f62ce99; valaddr_reg:x16; val_offset:1848; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1848, x17, x15, 1264, x18)

inst_1175:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x09763a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x533203 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x62ce99 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e89763a; op2val:0x40533203; op3val:0x3f62ce99; valaddr_reg:x16; val_offset:1860; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1860, x17, x15, 1272, x18)

inst_1176:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2811d1 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x33d6a3 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6c22bf and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f2811d1; op2val:0x3fb3d6a3; op3val:0x3f6c22bf; valaddr_reg:x16; val_offset:1872; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1872, x17, x15, 1280, x18)

inst_1177:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2811d1 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x33d6a3 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6c22bf and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f2811d1; op2val:0x3fb3d6a3; op3val:0x3f6c22bf; valaddr_reg:x16; val_offset:1884; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1884, x17, x15, 1288, x18)

inst_1178:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2811d1 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x33d6a3 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6c22bf and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f2811d1; op2val:0x3fb3d6a3; op3val:0x3f6c22bf; valaddr_reg:x16; val_offset:1896; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1896, x17, x15, 1296, x18)

inst_1179:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2811d1 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x33d6a3 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6c22bf and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f2811d1; op2val:0x3fb3d6a3; op3val:0x3f6c22bf; valaddr_reg:x16; val_offset:1908; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1908, x17, x15, 1304, x18)

inst_1180:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2811d1 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x33d6a3 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6c22bf and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f2811d1; op2val:0x3fb3d6a3; op3val:0x3f6c22bf; valaddr_reg:x16; val_offset:1920; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1920, x17, x15, 1312, x18)

inst_1181:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x4da1b7 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3ec93d and fs3 == 0 and fe3 == 0x7d and fm3 == 0x193fab and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d4da1b7; op2val:0x40bec93d; op3val:0x3e993fab; valaddr_reg:x16; val_offset:1932; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1932, x17, x15, 1320, x18)

inst_1182:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x4da1b7 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3ec93d and fs3 == 0 and fe3 == 0x7d and fm3 == 0x193fab and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d4da1b7; op2val:0x40bec93d; op3val:0x3e993fab; valaddr_reg:x16; val_offset:1944; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1944, x17, x15, 1328, x18)

inst_1183:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x4da1b7 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3ec93d and fs3 == 0 and fe3 == 0x7d and fm3 == 0x193fab and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d4da1b7; op2val:0x40bec93d; op3val:0x3e993fab; valaddr_reg:x16; val_offset:1956; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1956, x17, x15, 1336, x18)

inst_1184:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x4da1b7 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3ec93d and fs3 == 0 and fe3 == 0x7d and fm3 == 0x193fab and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d4da1b7; op2val:0x40bec93d; op3val:0x3e993fab; valaddr_reg:x16; val_offset:1968; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1968, x17, x15, 1344, x18)

inst_1185:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x4da1b7 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3ec93d and fs3 == 0 and fe3 == 0x7d and fm3 == 0x193fab and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d4da1b7; op2val:0x40bec93d; op3val:0x3e993fab; valaddr_reg:x16; val_offset:1980; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1980, x17, x15, 1352, x18)

inst_1186:
// fs1 == 0 and fe1 == 0x77 and fm1 == 0x640fa4 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x06f240 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x707001 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3be40fa4; op2val:0x4206f240; op3val:0x3e707001; valaddr_reg:x16; val_offset:1992; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1992, x17, x15, 1360, x18)

inst_1187:
// fs1 == 0 and fe1 == 0x77 and fm1 == 0x640fa4 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x06f240 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x707001 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3be40fa4; op2val:0x4206f240; op3val:0x3e707001; valaddr_reg:x16; val_offset:2004; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 2004, x17, x15, 1368, x18)

inst_1188:
// fs1 == 0 and fe1 == 0x77 and fm1 == 0x640fa4 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x06f240 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x707001 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3be40fa4; op2val:0x4206f240; op3val:0x3e707001; valaddr_reg:x16; val_offset:2016; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 2016, x17, x15, 1376, x18)

inst_1189:
// fs1 == 0 and fe1 == 0x77 and fm1 == 0x640fa4 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x06f240 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x707001 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3be40fa4; op2val:0x4206f240; op3val:0x3e707001; valaddr_reg:x16; val_offset:2028; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 2028, x17, x15, 1384, x18)
addi x16,x16,2040

inst_1190:
// fs1 == 0 and fe1 == 0x77 and fm1 == 0x640fa4 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x06f240 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x707001 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3be40fa4; op2val:0x4206f240; op3val:0x3e707001; valaddr_reg:x16; val_offset:0; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 0, x17, x15, 1392, x18)

inst_1191:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2127a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x40bee2 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x72abcf and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f2127a7; op2val:0x3fc0bee2; op3val:0x3f72abcf; valaddr_reg:x16; val_offset:12; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 12, x17, x15, 1400, x18)

inst_1192:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2127a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x40bee2 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x72abcf and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f2127a7; op2val:0x3fc0bee2; op3val:0x3f72abcf; valaddr_reg:x16; val_offset:24; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 24, x17, x15, 1408, x18)

inst_1193:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2127a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x40bee2 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x72abcf and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f2127a7; op2val:0x3fc0bee2; op3val:0x3f72abcf; valaddr_reg:x16; val_offset:36; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 36, x17, x15, 1416, x18)

inst_1194:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2127a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x40bee2 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x72abcf and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f2127a7; op2val:0x3fc0bee2; op3val:0x3f72abcf; valaddr_reg:x16; val_offset:48; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 48, x17, x15, 1424, x18)

inst_1195:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2127a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x40bee2 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x72abcf and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f2127a7; op2val:0x3fc0bee2; op3val:0x3f72abcf; valaddr_reg:x16; val_offset:60; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 60, x17, x15, 1432, x18)

inst_1196:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x77a023 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5acb58 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x53a30f and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f77a023; op2val:0x3f5acb58; op3val:0x3f53a30f; valaddr_reg:x16; val_offset:72; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 72, x17, x15, 1440, x18)

inst_1197:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x77a023 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5acb58 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x53a30f and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f77a023; op2val:0x3f5acb58; op3val:0x3f53a30f; valaddr_reg:x16; val_offset:84; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 84, x17, x15, 1448, x18)

inst_1198:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x77a023 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5acb58 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x53a30f and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f77a023; op2val:0x3f5acb58; op3val:0x3f53a30f; valaddr_reg:x16; val_offset:96; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 96, x17, x15, 1456, x18)

inst_1199:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x77a023 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5acb58 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x53a30f and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f77a023; op2val:0x3f5acb58; op3val:0x3f53a30f; valaddr_reg:x16; val_offset:108; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 108, x17, x15, 1464, x18)

inst_1200:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x77a023 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5acb58 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x53a30f and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f77a023; op2val:0x3f5acb58; op3val:0x3f53a30f; valaddr_reg:x16; val_offset:120; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 120, x17, x15, 1472, x18)

inst_1201:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x390d01 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2480bf and fs3 == 0 and fe3 == 0x7d and fm3 == 0x6dd2cc and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eb90d01; op2val:0x3fa480bf; op3val:0x3eedd2cc; valaddr_reg:x16; val_offset:132; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 132, x17, x15, 1480, x18)

inst_1202:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x390d01 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2480bf and fs3 == 0 and fe3 == 0x7d and fm3 == 0x6dd2cc and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eb90d01; op2val:0x3fa480bf; op3val:0x3eedd2cc; valaddr_reg:x16; val_offset:144; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 144, x17, x15, 1488, x18)

inst_1203:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x390d01 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2480bf and fs3 == 0 and fe3 == 0x7d and fm3 == 0x6dd2cc and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eb90d01; op2val:0x3fa480bf; op3val:0x3eedd2cc; valaddr_reg:x16; val_offset:156; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 156, x17, x15, 1496, x18)

inst_1204:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x390d01 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2480bf and fs3 == 0 and fe3 == 0x7d and fm3 == 0x6dd2cc and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eb90d01; op2val:0x3fa480bf; op3val:0x3eedd2cc; valaddr_reg:x16; val_offset:168; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 168, x17, x15, 1504, x18)

inst_1205:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x390d01 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2480bf and fs3 == 0 and fe3 == 0x7d and fm3 == 0x6dd2cc and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eb90d01; op2val:0x3fa480bf; op3val:0x3eedd2cc; valaddr_reg:x16; val_offset:180; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 180, x17, x15, 1512, x18)

inst_1206:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6a1345 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4da5d9 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x3c0914 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f6a1345; op2val:0x3e4da5d9; op3val:0x3e3c0914; valaddr_reg:x16; val_offset:192; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 192, x17, x15, 1520, x18)

inst_1207:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6a1345 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4da5d9 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x3c0914 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f6a1345; op2val:0x3e4da5d9; op3val:0x3e3c0914; valaddr_reg:x16; val_offset:204; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 204, x17, x15, 1528, x18)

inst_1208:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6a1345 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4da5d9 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x3c0914 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f6a1345; op2val:0x3e4da5d9; op3val:0x3e3c0914; valaddr_reg:x16; val_offset:216; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 216, x17, x15, 1536, x18)

inst_1209:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6a1345 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4da5d9 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x3c0914 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f6a1345; op2val:0x3e4da5d9; op3val:0x3e3c0914; valaddr_reg:x16; val_offset:228; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 228, x17, x15, 1544, x18)

inst_1210:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6a1345 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4da5d9 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x3c0914 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f6a1345; op2val:0x3e4da5d9; op3val:0x3e3c0914; valaddr_reg:x16; val_offset:240; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 240, x17, x15, 1552, x18)

inst_1211:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x1f6900 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x46ff6f and fs3 == 0 and fe3 == 0x7e and fm3 == 0x77d48a and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d9f6900; op2val:0x4146ff6f; op3val:0x3f77d48a; valaddr_reg:x16; val_offset:252; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 252, x17, x15, 1560, x18)

inst_1212:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x1f6900 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x46ff6f and fs3 == 0 and fe3 == 0x7e and fm3 == 0x77d48a and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d9f6900; op2val:0x4146ff6f; op3val:0x3f77d48a; valaddr_reg:x16; val_offset:264; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 264, x17, x15, 1568, x18)

inst_1213:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x1f6900 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x46ff6f and fs3 == 0 and fe3 == 0x7e and fm3 == 0x77d48a and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d9f6900; op2val:0x4146ff6f; op3val:0x3f77d48a; valaddr_reg:x16; val_offset:276; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 276, x17, x15, 1576, x18)

inst_1214:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x1f6900 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x46ff6f and fs3 == 0 and fe3 == 0x7e and fm3 == 0x77d48a and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d9f6900; op2val:0x4146ff6f; op3val:0x3f77d48a; valaddr_reg:x16; val_offset:288; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 288, x17, x15, 1584, x18)

inst_1215:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x1f6900 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x46ff6f and fs3 == 0 and fe3 == 0x7e and fm3 == 0x77d48a and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d9f6900; op2val:0x4146ff6f; op3val:0x3f77d48a; valaddr_reg:x16; val_offset:300; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 300, x17, x15, 1592, x18)

inst_1216:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x0a5c4f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x06d40f and fs3 == 0 and fe3 == 0x7e and fm3 == 0x11bddc and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d0a5c4f; op2val:0x4186d40f; op3val:0x3f11bddc; valaddr_reg:x16; val_offset:312; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 312, x17, x15, 1600, x18)

inst_1217:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x0a5c4f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x06d40f and fs3 == 0 and fe3 == 0x7e and fm3 == 0x11bddc and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d0a5c4f; op2val:0x4186d40f; op3val:0x3f11bddc; valaddr_reg:x16; val_offset:324; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 324, x17, x15, 1608, x18)

inst_1218:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x0a5c4f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x06d40f and fs3 == 0 and fe3 == 0x7e and fm3 == 0x11bddc and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d0a5c4f; op2val:0x4186d40f; op3val:0x3f11bddc; valaddr_reg:x16; val_offset:336; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 336, x17, x15, 1616, x18)

inst_1219:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x0a5c4f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x06d40f and fs3 == 0 and fe3 == 0x7e and fm3 == 0x11bddc and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d0a5c4f; op2val:0x4186d40f; op3val:0x3f11bddc; valaddr_reg:x16; val_offset:348; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 348, x17, x15, 1624, x18)

inst_1220:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x0a5c4f and fs2 == 0 and fe2 == 0x83 and fm2 == 0x06d40f and fs3 == 0 and fe3 == 0x7e and fm3 == 0x11bddc and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d0a5c4f; op2val:0x4186d40f; op3val:0x3f11bddc; valaddr_reg:x16; val_offset:360; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 360, x17, x15, 1632, x18)

inst_1221:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x1153cb and fs2 == 0 and fe2 == 0x81 and fm2 == 0x22630c and fs3 == 0 and fe3 == 0x7e and fm3 == 0x385e82 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e1153cb; op2val:0x40a2630c; op3val:0x3f385e82; valaddr_reg:x16; val_offset:372; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 372, x17, x15, 1640, x18)

inst_1222:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x1153cb and fs2 == 0 and fe2 == 0x81 and fm2 == 0x22630c and fs3 == 0 and fe3 == 0x7e and fm3 == 0x385e82 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e1153cb; op2val:0x40a2630c; op3val:0x3f385e82; valaddr_reg:x16; val_offset:384; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 384, x17, x15, 1648, x18)

inst_1223:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x1153cb and fs2 == 0 and fe2 == 0x81 and fm2 == 0x22630c and fs3 == 0 and fe3 == 0x7e and fm3 == 0x385e82 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e1153cb; op2val:0x40a2630c; op3val:0x3f385e82; valaddr_reg:x16; val_offset:396; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 396, x17, x15, 1656, x18)

inst_1224:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x1153cb and fs2 == 0 and fe2 == 0x81 and fm2 == 0x22630c and fs3 == 0 and fe3 == 0x7e and fm3 == 0x385e82 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e1153cb; op2val:0x40a2630c; op3val:0x3f385e82; valaddr_reg:x16; val_offset:408; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 408, x17, x15, 1664, x18)

inst_1225:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x1153cb and fs2 == 0 and fe2 == 0x81 and fm2 == 0x22630c and fs3 == 0 and fe3 == 0x7e and fm3 == 0x385e82 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e1153cb; op2val:0x40a2630c; op3val:0x3f385e82; valaddr_reg:x16; val_offset:420; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 420, x17, x15, 1672, x18)

inst_1226:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x771b27 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x73053c and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6a93d5 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d771b27; op2val:0x4173053c; op3val:0x3f6a93d5; valaddr_reg:x16; val_offset:432; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 432, x17, x15, 1680, x18)

inst_1227:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x771b27 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x73053c and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6a93d5 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d771b27; op2val:0x4173053c; op3val:0x3f6a93d5; valaddr_reg:x16; val_offset:444; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 444, x17, x15, 1688, x18)

inst_1228:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x771b27 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x73053c and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6a93d5 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d771b27; op2val:0x4173053c; op3val:0x3f6a93d5; valaddr_reg:x16; val_offset:456; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 456, x17, x15, 1696, x18)

inst_1229:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x771b27 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x73053c and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6a93d5 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d771b27; op2val:0x4173053c; op3val:0x3f6a93d5; valaddr_reg:x16; val_offset:468; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 468, x17, x15, 1704, x18)

inst_1230:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x771b27 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x73053c and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6a93d5 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d771b27; op2val:0x4173053c; op3val:0x3f6a93d5; valaddr_reg:x16; val_offset:480; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 480, x17, x15, 1712, x18)

inst_1231:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x339806 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x0242c2 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x36c412 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3cb39806; op2val:0x420242c2; op3val:0x3f36c412; valaddr_reg:x16; val_offset:492; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 492, x17, x15, 1720, x18)

inst_1232:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x339806 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x0242c2 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x36c412 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3cb39806; op2val:0x420242c2; op3val:0x3f36c412; valaddr_reg:x16; val_offset:504; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 504, x17, x15, 1728, x18)

inst_1233:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x339806 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x0242c2 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x36c412 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3cb39806; op2val:0x420242c2; op3val:0x3f36c412; valaddr_reg:x16; val_offset:516; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 516, x17, x15, 1736, x18)

inst_1234:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x339806 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x0242c2 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x36c412 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3cb39806; op2val:0x420242c2; op3val:0x3f36c412; valaddr_reg:x16; val_offset:528; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 528, x17, x15, 1744, x18)

inst_1235:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x339806 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x0242c2 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x36c412 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3cb39806; op2val:0x420242c2; op3val:0x3f36c412; valaddr_reg:x16; val_offset:540; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 540, x17, x15, 1752, x18)

inst_1236:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6fb350 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x5a824b and fs3 == 0 and fe3 == 0x7c and fm3 == 0x4c98b2 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f6fb350; op2val:0x3e5a824b; op3val:0x3e4c98b2; valaddr_reg:x16; val_offset:552; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 552, x17, x15, 1760, x18)

inst_1237:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6fb350 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x5a824b and fs3 == 0 and fe3 == 0x7c and fm3 == 0x4c98b2 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f6fb350; op2val:0x3e5a824b; op3val:0x3e4c98b2; valaddr_reg:x16; val_offset:564; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 564, x17, x15, 1768, x18)

inst_1238:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6fb350 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x5a824b and fs3 == 0 and fe3 == 0x7c and fm3 == 0x4c98b2 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f6fb350; op2val:0x3e5a824b; op3val:0x3e4c98b2; valaddr_reg:x16; val_offset:576; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 576, x17, x15, 1776, x18)

inst_1239:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6fb350 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x5a824b and fs3 == 0 and fe3 == 0x7c and fm3 == 0x4c98b2 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f6fb350; op2val:0x3e5a824b; op3val:0x3e4c98b2; valaddr_reg:x16; val_offset:588; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 588, x17, x15, 1784, x18)

inst_1240:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6fb350 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x5a824b and fs3 == 0 and fe3 == 0x7c and fm3 == 0x4c98b2 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f6fb350; op2val:0x3e5a824b; op3val:0x3e4c98b2; valaddr_reg:x16; val_offset:600; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 600, x17, x15, 1792, x18)

inst_1241:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x393d62 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x4b71bc and fs3 == 0 and fe3 == 0x7d and fm3 == 0x1335f9 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f393d62; op2val:0x3ecb71bc; op3val:0x3e9335f9; valaddr_reg:x16; val_offset:612; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 612, x17, x15, 1800, x18)

inst_1242:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x393d62 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x4b71bc and fs3 == 0 and fe3 == 0x7d and fm3 == 0x1335f9 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f393d62; op2val:0x3ecb71bc; op3val:0x3e9335f9; valaddr_reg:x16; val_offset:624; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 624, x17, x15, 1808, x18)

inst_1243:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x393d62 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x4b71bc and fs3 == 0 and fe3 == 0x7d and fm3 == 0x1335f9 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f393d62; op2val:0x3ecb71bc; op3val:0x3e9335f9; valaddr_reg:x16; val_offset:636; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 636, x17, x15, 1816, x18)

inst_1244:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x393d62 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x4b71bc and fs3 == 0 and fe3 == 0x7d and fm3 == 0x1335f9 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f393d62; op2val:0x3ecb71bc; op3val:0x3e9335f9; valaddr_reg:x16; val_offset:648; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 648, x17, x15, 1824, x18)

inst_1245:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x393d62 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x4b71bc and fs3 == 0 and fe3 == 0x7d and fm3 == 0x1335f9 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f393d62; op2val:0x3ecb71bc; op3val:0x3e9335f9; valaddr_reg:x16; val_offset:660; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 660, x17, x15, 1832, x18)

inst_1246:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x62d16a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1fc256 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x0d8c40 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e62d16a; op2val:0x401fc256; op3val:0x3f0d8c40; valaddr_reg:x16; val_offset:672; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 672, x17, x15, 1840, x18)

inst_1247:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x62d16a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1fc256 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x0d8c40 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e62d16a; op2val:0x401fc256; op3val:0x3f0d8c40; valaddr_reg:x16; val_offset:684; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 684, x17, x15, 1848, x18)

inst_1248:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x62d16a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1fc256 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x0d8c40 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e62d16a; op2val:0x401fc256; op3val:0x3f0d8c40; valaddr_reg:x16; val_offset:696; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 696, x17, x15, 1856, x18)

inst_1249:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x62d16a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1fc256 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x0d8c40 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e62d16a; op2val:0x401fc256; op3val:0x3f0d8c40; valaddr_reg:x16; val_offset:708; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 708, x17, x15, 1864, x18)

inst_1250:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x62d16a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1fc256 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x0d8c40 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e62d16a; op2val:0x401fc256; op3val:0x3f0d8c40; valaddr_reg:x16; val_offset:720; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 720, x17, x15, 1872, x18)

inst_1251:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x3ad486 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x441ffb and fs3 == 0 and fe3 == 0x7e and fm3 == 0x0f220d and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3dbad486; op2val:0x40c41ffb; op3val:0x3f0f220d; valaddr_reg:x16; val_offset:732; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 732, x17, x15, 1880, x18)

inst_1252:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x3ad486 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x441ffb and fs3 == 0 and fe3 == 0x7e and fm3 == 0x0f220d and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3dbad486; op2val:0x40c41ffb; op3val:0x3f0f220d; valaddr_reg:x16; val_offset:744; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 744, x17, x15, 1888, x18)

inst_1253:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x3ad486 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x441ffb and fs3 == 0 and fe3 == 0x7e and fm3 == 0x0f220d and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3dbad486; op2val:0x40c41ffb; op3val:0x3f0f220d; valaddr_reg:x16; val_offset:756; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 756, x17, x15, 1896, x18)

inst_1254:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x3ad486 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x441ffb and fs3 == 0 and fe3 == 0x7e and fm3 == 0x0f220d and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3dbad486; op2val:0x40c41ffb; op3val:0x3f0f220d; valaddr_reg:x16; val_offset:768; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 768, x17, x15, 1904, x18)

inst_1255:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x3ad486 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x441ffb and fs3 == 0 and fe3 == 0x7e and fm3 == 0x0f220d and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3dbad486; op2val:0x40c41ffb; op3val:0x3f0f220d; valaddr_reg:x16; val_offset:780; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 780, x17, x15, 1912, x18)

inst_1256:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5ce8d9 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x065347 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x67d37d and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5ce8d9; op2val:0x3d865347; op3val:0x3d67d37d; valaddr_reg:x16; val_offset:792; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 792, x17, x15, 1920, x18)

inst_1257:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5ce8d9 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x065347 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x67d37d and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5ce8d9; op2val:0x3d865347; op3val:0x3d67d37d; valaddr_reg:x16; val_offset:804; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 804, x17, x15, 1928, x18)

inst_1258:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5ce8d9 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x065347 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x67d37d and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5ce8d9; op2val:0x3d865347; op3val:0x3d67d37d; valaddr_reg:x16; val_offset:816; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 816, x17, x15, 1936, x18)

inst_1259:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5ce8d9 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x065347 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x67d37d and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5ce8d9; op2val:0x3d865347; op3val:0x3d67d37d; valaddr_reg:x16; val_offset:828; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 828, x17, x15, 1944, x18)

inst_1260:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5ce8d9 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x065347 and fs3 == 0 and fe3 == 0x7a and fm3 == 0x67d37d and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5ce8d9; op2val:0x3d865347; op3val:0x3d67d37d; valaddr_reg:x16; val_offset:840; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 840, x17, x15, 1952, x18)

inst_1261:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1cc631 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2e752c and fs3 == 0 and fe3 == 0x7c and fm3 == 0x55acf0 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e9cc631; op2val:0x3f2e752c; op3val:0x3e55acf0; valaddr_reg:x16; val_offset:852; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 852, x17, x15, 1960, x18)

inst_1262:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1cc631 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2e752c and fs3 == 0 and fe3 == 0x7c and fm3 == 0x55acf0 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e9cc631; op2val:0x3f2e752c; op3val:0x3e55acf0; valaddr_reg:x16; val_offset:864; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 864, x17, x15, 1968, x18)

inst_1263:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1cc631 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2e752c and fs3 == 0 and fe3 == 0x7c and fm3 == 0x55acf0 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e9cc631; op2val:0x3f2e752c; op3val:0x3e55acf0; valaddr_reg:x16; val_offset:876; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 876, x17, x15, 1976, x18)

inst_1264:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1cc631 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2e752c and fs3 == 0 and fe3 == 0x7c and fm3 == 0x55acf0 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e9cc631; op2val:0x3f2e752c; op3val:0x3e55acf0; valaddr_reg:x16; val_offset:888; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 888, x17, x15, 1984, x18)

inst_1265:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1cc631 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2e752c and fs3 == 0 and fe3 == 0x7c and fm3 == 0x55acf0 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e9cc631; op2val:0x3f2e752c; op3val:0x3e55acf0; valaddr_reg:x16; val_offset:900; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 900, x17, x15, 1992, x18)

inst_1266:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x5a8857 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x245860 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x0c4ac9 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3dda8857; op2val:0x40a45860; op3val:0x3f0c4ac9; valaddr_reg:x16; val_offset:912; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 912, x17, x15, 2000, x18)

inst_1267:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x5a8857 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x245860 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x0c4ac9 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3dda8857; op2val:0x40a45860; op3val:0x3f0c4ac9; valaddr_reg:x16; val_offset:924; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 924, x17, x15, 2008, x18)

inst_1268:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x5a8857 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x245860 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x0c4ac9 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3dda8857; op2val:0x40a45860; op3val:0x3f0c4ac9; valaddr_reg:x16; val_offset:936; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 936, x17, x15, 2016, x18)

inst_1269:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x5a8857 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x245860 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x0c4ac9 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3dda8857; op2val:0x40a45860; op3val:0x3f0c4ac9; valaddr_reg:x16; val_offset:948; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 948, x17, x15, 2024, x18)
RVTEST_SIGBASE(x15,signature_x15_6)

inst_1270:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x5a8857 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x245860 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x0c4ac9 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3dda8857; op2val:0x40a45860; op3val:0x3f0c4ac9; valaddr_reg:x16; val_offset:960; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 960, x17, x15, 0, x18)

inst_1271:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x3574c8 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x054ce6 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x3cf85d and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3db574c8; op2val:0x3f854ce6; op3val:0x3dbcf85d; valaddr_reg:x16; val_offset:972; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 972, x17, x15, 8, x18)

inst_1272:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x3574c8 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x054ce6 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x3cf85d and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3db574c8; op2val:0x3f854ce6; op3val:0x3dbcf85d; valaddr_reg:x16; val_offset:984; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 984, x17, x15, 16, x18)

inst_1273:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x3574c8 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x054ce6 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x3cf85d and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3db574c8; op2val:0x3f854ce6; op3val:0x3dbcf85d; valaddr_reg:x16; val_offset:996; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 996, x17, x15, 24, x18)

inst_1274:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x3574c8 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x054ce6 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x3cf85d and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3db574c8; op2val:0x3f854ce6; op3val:0x3dbcf85d; valaddr_reg:x16; val_offset:1008; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1008, x17, x15, 32, x18)

inst_1275:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x3574c8 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x054ce6 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x3cf85d and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3db574c8; op2val:0x3f854ce6; op3val:0x3dbcf85d; valaddr_reg:x16; val_offset:1020; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1020, x17, x15, 40, x18)

inst_1276:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6a9ce3 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x555866 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x43858c and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f6a9ce3; op2val:0x3ed55866; op3val:0x3ec3858c; valaddr_reg:x16; val_offset:1032; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1032, x17, x15, 48, x18)

inst_1277:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6a9ce3 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x555866 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x43858c and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f6a9ce3; op2val:0x3ed55866; op3val:0x3ec3858c; valaddr_reg:x16; val_offset:1044; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1044, x17, x15, 56, x18)

inst_1278:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6a9ce3 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x555866 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x43858c and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f6a9ce3; op2val:0x3ed55866; op3val:0x3ec3858c; valaddr_reg:x16; val_offset:1056; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1056, x17, x15, 64, x18)

inst_1279:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6a9ce3 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x555866 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x43858c and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f6a9ce3; op2val:0x3ed55866; op3val:0x3ec3858c; valaddr_reg:x16; val_offset:1068; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1068, x17, x15, 72, x18)

inst_1280:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6a9ce3 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x555866 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x43858c and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f6a9ce3; op2val:0x3ed55866; op3val:0x3ec3858c; valaddr_reg:x16; val_offset:1080; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1080, x17, x15, 80, x18)

inst_1281:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5f7c7e and fs2 == 0 and fe2 == 0x7c and fm2 == 0x444826 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x2b5a4d and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5f7c7e; op2val:0x3e444826; op3val:0x3e2b5a4d; valaddr_reg:x16; val_offset:1092; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1092, x17, x15, 88, x18)

inst_1282:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5f7c7e and fs2 == 0 and fe2 == 0x7c and fm2 == 0x444826 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x2b5a4d and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5f7c7e; op2val:0x3e444826; op3val:0x3e2b5a4d; valaddr_reg:x16; val_offset:1104; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1104, x17, x15, 96, x18)

inst_1283:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5f7c7e and fs2 == 0 and fe2 == 0x7c and fm2 == 0x444826 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x2b5a4d and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5f7c7e; op2val:0x3e444826; op3val:0x3e2b5a4d; valaddr_reg:x16; val_offset:1116; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1116, x17, x15, 104, x18)

inst_1284:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5f7c7e and fs2 == 0 and fe2 == 0x7c and fm2 == 0x444826 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x2b5a4d and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5f7c7e; op2val:0x3e444826; op3val:0x3e2b5a4d; valaddr_reg:x16; val_offset:1128; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1128, x17, x15, 112, x18)

inst_1285:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5f7c7e and fs2 == 0 and fe2 == 0x7c and fm2 == 0x444826 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x2b5a4d and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5f7c7e; op2val:0x3e444826; op3val:0x3e2b5a4d; valaddr_reg:x16; val_offset:1140; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1140, x17, x15, 120, x18)

inst_1286:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3dd9d7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4e2c0f and fs3 == 0 and fe3 == 0x7d and fm3 == 0x18e5f8 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ebdd9d7; op2val:0x3f4e2c0f; op3val:0x3e98e5f8; valaddr_reg:x16; val_offset:1152; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1152, x17, x15, 128, x18)

inst_1287:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3dd9d7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4e2c0f and fs3 == 0 and fe3 == 0x7d and fm3 == 0x18e5f8 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ebdd9d7; op2val:0x3f4e2c0f; op3val:0x3e98e5f8; valaddr_reg:x16; val_offset:1164; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1164, x17, x15, 136, x18)

inst_1288:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3dd9d7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4e2c0f and fs3 == 0 and fe3 == 0x7d and fm3 == 0x18e5f8 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ebdd9d7; op2val:0x3f4e2c0f; op3val:0x3e98e5f8; valaddr_reg:x16; val_offset:1176; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1176, x17, x15, 144, x18)

inst_1289:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3dd9d7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4e2c0f and fs3 == 0 and fe3 == 0x7d and fm3 == 0x18e5f8 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ebdd9d7; op2val:0x3f4e2c0f; op3val:0x3e98e5f8; valaddr_reg:x16; val_offset:1188; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1188, x17, x15, 152, x18)

inst_1290:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3dd9d7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4e2c0f and fs3 == 0 and fe3 == 0x7d and fm3 == 0x18e5f8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ebdd9d7; op2val:0x3f4e2c0f; op3val:0x3e98e5f8; valaddr_reg:x16; val_offset:1200; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1200, x17, x15, 160, x18)

inst_1291:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x098b9f and fs2 == 0 and fe2 == 0x7c and fm2 == 0x3f609f and fs3 == 0 and fe3 == 0x7b and fm3 == 0x4da62a and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f098b9f; op2val:0x3e3f609f; op3val:0x3dcda62a; valaddr_reg:x16; val_offset:1212; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1212, x17, x15, 168, x18)

inst_1292:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x098b9f and fs2 == 0 and fe2 == 0x7c and fm2 == 0x3f609f and fs3 == 0 and fe3 == 0x7b and fm3 == 0x4da62a and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f098b9f; op2val:0x3e3f609f; op3val:0x3dcda62a; valaddr_reg:x16; val_offset:1224; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1224, x17, x15, 176, x18)

inst_1293:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x098b9f and fs2 == 0 and fe2 == 0x7c and fm2 == 0x3f609f and fs3 == 0 and fe3 == 0x7b and fm3 == 0x4da62a and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f098b9f; op2val:0x3e3f609f; op3val:0x3dcda62a; valaddr_reg:x16; val_offset:1236; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1236, x17, x15, 184, x18)

inst_1294:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x098b9f and fs2 == 0 and fe2 == 0x7c and fm2 == 0x3f609f and fs3 == 0 and fe3 == 0x7b and fm3 == 0x4da62a and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f098b9f; op2val:0x3e3f609f; op3val:0x3dcda62a; valaddr_reg:x16; val_offset:1248; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1248, x17, x15, 192, x18)

inst_1295:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x098b9f and fs2 == 0 and fe2 == 0x7c and fm2 == 0x3f609f and fs3 == 0 and fe3 == 0x7b and fm3 == 0x4da62a and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f098b9f; op2val:0x3e3f609f; op3val:0x3dcda62a; valaddr_reg:x16; val_offset:1260; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1260, x17, x15, 200, x18)

inst_1296:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x650271 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x4adafc and fs3 == 0 and fe3 == 0x7d and fm3 == 0x3577d3 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f650271; op2val:0x3ecadafc; op3val:0x3eb577d3; valaddr_reg:x16; val_offset:1272; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1272, x17, x15, 208, x18)

inst_1297:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x650271 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x4adafc and fs3 == 0 and fe3 == 0x7d and fm3 == 0x3577d3 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f650271; op2val:0x3ecadafc; op3val:0x3eb577d3; valaddr_reg:x16; val_offset:1284; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1284, x17, x15, 216, x18)

inst_1298:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x650271 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x4adafc and fs3 == 0 and fe3 == 0x7d and fm3 == 0x3577d3 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f650271; op2val:0x3ecadafc; op3val:0x3eb577d3; valaddr_reg:x16; val_offset:1296; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1296, x17, x15, 224, x18)

inst_1299:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x650271 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x4adafc and fs3 == 0 and fe3 == 0x7d and fm3 == 0x3577d3 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f650271; op2val:0x3ecadafc; op3val:0x3eb577d3; valaddr_reg:x16; val_offset:1308; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1308, x17, x15, 232, x18)

inst_1300:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x650271 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x4adafc and fs3 == 0 and fe3 == 0x7d and fm3 == 0x3577d3 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f650271; op2val:0x3ecadafc; op3val:0x3eb577d3; valaddr_reg:x16; val_offset:1320; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1320, x17, x15, 240, x18)

inst_1301:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3e75d0 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1b4d70 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6715e4 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ebe75d0; op2val:0x401b4d70; op3val:0x3f6715e4; valaddr_reg:x16; val_offset:1332; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1332, x17, x15, 248, x18)

inst_1302:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3e75d0 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1b4d70 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6715e4 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ebe75d0; op2val:0x401b4d70; op3val:0x3f6715e4; valaddr_reg:x16; val_offset:1344; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1344, x17, x15, 256, x18)

inst_1303:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3e75d0 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1b4d70 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6715e4 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ebe75d0; op2val:0x401b4d70; op3val:0x3f6715e4; valaddr_reg:x16; val_offset:1356; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1356, x17, x15, 264, x18)

inst_1304:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3e75d0 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1b4d70 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6715e4 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ebe75d0; op2val:0x401b4d70; op3val:0x3f6715e4; valaddr_reg:x16; val_offset:1368; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1368, x17, x15, 272, x18)

inst_1305:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3e75d0 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1b4d70 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6715e4 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ebe75d0; op2val:0x401b4d70; op3val:0x3f6715e4; valaddr_reg:x16; val_offset:1380; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1380, x17, x15, 280, x18)

inst_1306:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x496e53 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0b34ae and fs3 == 0 and fe3 == 0x7e and fm3 == 0x5b10b5 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ec96e53; op2val:0x400b34ae; op3val:0x3f5b10b5; valaddr_reg:x16; val_offset:1392; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1392, x17, x15, 288, x18)

inst_1307:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x496e53 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0b34ae and fs3 == 0 and fe3 == 0x7e and fm3 == 0x5b10b5 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ec96e53; op2val:0x400b34ae; op3val:0x3f5b10b5; valaddr_reg:x16; val_offset:1404; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1404, x17, x15, 296, x18)

inst_1308:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x496e53 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0b34ae and fs3 == 0 and fe3 == 0x7e and fm3 == 0x5b10b5 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ec96e53; op2val:0x400b34ae; op3val:0x3f5b10b5; valaddr_reg:x16; val_offset:1416; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1416, x17, x15, 304, x18)

inst_1309:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x496e53 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0b34ae and fs3 == 0 and fe3 == 0x7e and fm3 == 0x5b10b5 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ec96e53; op2val:0x400b34ae; op3val:0x3f5b10b5; valaddr_reg:x16; val_offset:1428; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1428, x17, x15, 312, x18)

inst_1310:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x496e53 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0b34ae and fs3 == 0 and fe3 == 0x7e and fm3 == 0x5b10b5 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ec96e53; op2val:0x400b34ae; op3val:0x3f5b10b5; valaddr_reg:x16; val_offset:1440; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1440, x17, x15, 320, x18)

inst_1311:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5ae3fd and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6031f2 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x3fb233 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5ae3fd; op2val:0x3ee031f2; op3val:0x3ebfb233; valaddr_reg:x16; val_offset:1452; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1452, x17, x15, 328, x18)

inst_1312:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5ae3fd and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6031f2 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x3fb233 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5ae3fd; op2val:0x3ee031f2; op3val:0x3ebfb233; valaddr_reg:x16; val_offset:1464; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1464, x17, x15, 336, x18)

inst_1313:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5ae3fd and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6031f2 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x3fb233 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5ae3fd; op2val:0x3ee031f2; op3val:0x3ebfb233; valaddr_reg:x16; val_offset:1476; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1476, x17, x15, 344, x18)

inst_1314:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5ae3fd and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6031f2 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x3fb233 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5ae3fd; op2val:0x3ee031f2; op3val:0x3ebfb233; valaddr_reg:x16; val_offset:1488; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1488, x17, x15, 352, x18)

inst_1315:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5ae3fd and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6031f2 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x3fb233 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5ae3fd; op2val:0x3ee031f2; op3val:0x3ebfb233; valaddr_reg:x16; val_offset:1500; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1500, x17, x15, 360, x18)

inst_1316:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x665c3d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3583c8 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x2355cd and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f665c3d; op2val:0x3f3583c8; op3val:0x3f2355cd; valaddr_reg:x16; val_offset:1512; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1512, x17, x15, 368, x18)

inst_1317:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x665c3d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3583c8 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x2355cd and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f665c3d; op2val:0x3f3583c8; op3val:0x3f2355cd; valaddr_reg:x16; val_offset:1524; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1524, x17, x15, 376, x18)

inst_1318:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x665c3d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3583c8 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x2355cd and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f665c3d; op2val:0x3f3583c8; op3val:0x3f2355cd; valaddr_reg:x16; val_offset:1536; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1536, x17, x15, 384, x18)

inst_1319:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x665c3d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3583c8 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x2355cd and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f665c3d; op2val:0x3f3583c8; op3val:0x3f2355cd; valaddr_reg:x16; val_offset:1548; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1548, x17, x15, 392, x18)

inst_1320:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x665c3d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3583c8 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x2355cd and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f665c3d; op2val:0x3f3583c8; op3val:0x3f2355cd; valaddr_reg:x16; val_offset:1560; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1560, x17, x15, 400, x18)

inst_1321:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x022057 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x05bd79 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x07f63a and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f022057; op2val:0x3f85bd79; op3val:0x3f07f63a; valaddr_reg:x16; val_offset:1572; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1572, x17, x15, 408, x18)

inst_1322:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x022057 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x05bd79 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x07f63a and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f022057; op2val:0x3f85bd79; op3val:0x3f07f63a; valaddr_reg:x16; val_offset:1584; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1584, x17, x15, 416, x18)

inst_1323:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x022057 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x05bd79 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x07f63a and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f022057; op2val:0x3f85bd79; op3val:0x3f07f63a; valaddr_reg:x16; val_offset:1596; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1596, x17, x15, 424, x18)

inst_1324:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x022057 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x05bd79 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x07f63a and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f022057; op2val:0x3f85bd79; op3val:0x3f07f63a; valaddr_reg:x16; val_offset:1608; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1608, x17, x15, 432, x18)

inst_1325:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x022057 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x05bd79 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x07f63a and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f022057; op2val:0x3f85bd79; op3val:0x3f07f63a; valaddr_reg:x16; val_offset:1620; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1620, x17, x15, 440, x18)

inst_1326:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5eef03 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5b4938 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x3ef63b and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e5eef03; op2val:0x3f5b4938; op3val:0x3e3ef63b; valaddr_reg:x16; val_offset:1632; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1632, x17, x15, 448, x18)

inst_1327:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5eef03 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5b4938 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x3ef63b and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e5eef03; op2val:0x3f5b4938; op3val:0x3e3ef63b; valaddr_reg:x16; val_offset:1644; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1644, x17, x15, 456, x18)

inst_1328:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5eef03 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5b4938 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x3ef63b and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e5eef03; op2val:0x3f5b4938; op3val:0x3e3ef63b; valaddr_reg:x16; val_offset:1656; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1656, x17, x15, 464, x18)

inst_1329:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5eef03 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5b4938 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x3ef63b and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e5eef03; op2val:0x3f5b4938; op3val:0x3e3ef63b; valaddr_reg:x16; val_offset:1668; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1668, x17, x15, 472, x18)

inst_1330:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5eef03 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5b4938 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x3ef63b and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e5eef03; op2val:0x3f5b4938; op3val:0x3e3ef63b; valaddr_reg:x16; val_offset:1680; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1680, x17, x15, 480, x18)

inst_1331:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x45ec2e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3f599b and fs3 == 0 and fe3 == 0x7e and fm3 == 0x13f07e and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ec5ec2e; op2val:0x3fbf599b; op3val:0x3f13f07e; valaddr_reg:x16; val_offset:1692; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1692, x17, x15, 488, x18)

inst_1332:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x45ec2e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3f599b and fs3 == 0 and fe3 == 0x7e and fm3 == 0x13f07e and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ec5ec2e; op2val:0x3fbf599b; op3val:0x3f13f07e; valaddr_reg:x16; val_offset:1704; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1704, x17, x15, 496, x18)

inst_1333:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x45ec2e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3f599b and fs3 == 0 and fe3 == 0x7e and fm3 == 0x13f07e and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ec5ec2e; op2val:0x3fbf599b; op3val:0x3f13f07e; valaddr_reg:x16; val_offset:1716; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1716, x17, x15, 504, x18)

inst_1334:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x45ec2e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3f599b and fs3 == 0 and fe3 == 0x7e and fm3 == 0x13f07e and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ec5ec2e; op2val:0x3fbf599b; op3val:0x3f13f07e; valaddr_reg:x16; val_offset:1728; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1728, x17, x15, 512, x18)

inst_1335:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x45ec2e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3f599b and fs3 == 0 and fe3 == 0x7e and fm3 == 0x13f07e and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ec5ec2e; op2val:0x3fbf599b; op3val:0x3f13f07e; valaddr_reg:x16; val_offset:1740; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1740, x17, x15, 520, x18)

inst_1336:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4eafb1 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x0572eb and fs3 == 0 and fe3 == 0x7a and fm3 == 0x577c1f and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f4eafb1; op2val:0x3d8572eb; op3val:0x3d577c1f; valaddr_reg:x16; val_offset:1752; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1752, x17, x15, 528, x18)

inst_1337:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4eafb1 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x0572eb and fs3 == 0 and fe3 == 0x7a and fm3 == 0x577c1f and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f4eafb1; op2val:0x3d8572eb; op3val:0x3d577c1f; valaddr_reg:x16; val_offset:1764; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1764, x17, x15, 536, x18)

inst_1338:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4eafb1 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x0572eb and fs3 == 0 and fe3 == 0x7a and fm3 == 0x577c1f and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f4eafb1; op2val:0x3d8572eb; op3val:0x3d577c1f; valaddr_reg:x16; val_offset:1776; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1776, x17, x15, 544, x18)

inst_1339:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4eafb1 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x0572eb and fs3 == 0 and fe3 == 0x7a and fm3 == 0x577c1f and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f4eafb1; op2val:0x3d8572eb; op3val:0x3d577c1f; valaddr_reg:x16; val_offset:1788; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1788, x17, x15, 552, x18)

inst_1340:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4eafb1 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x0572eb and fs3 == 0 and fe3 == 0x7a and fm3 == 0x577c1f and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f4eafb1; op2val:0x3d8572eb; op3val:0x3d577c1f; valaddr_reg:x16; val_offset:1800; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1800, x17, x15, 560, x18)

inst_1341:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x16064a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4cd0cd and fs3 == 0 and fe3 == 0x7e and fm3 == 0x700ec1 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e16064a; op2val:0x40ccd0cd; op3val:0x3f700ec1; valaddr_reg:x16; val_offset:1812; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1812, x17, x15, 568, x18)

inst_1342:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x16064a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4cd0cd and fs3 == 0 and fe3 == 0x7e and fm3 == 0x700ec1 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e16064a; op2val:0x40ccd0cd; op3val:0x3f700ec1; valaddr_reg:x16; val_offset:1824; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1824, x17, x15, 576, x18)

inst_1343:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x16064a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4cd0cd and fs3 == 0 and fe3 == 0x7e and fm3 == 0x700ec1 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e16064a; op2val:0x40ccd0cd; op3val:0x3f700ec1; valaddr_reg:x16; val_offset:1836; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1836, x17, x15, 584, x18)

inst_1344:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x16064a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4cd0cd and fs3 == 0 and fe3 == 0x7e and fm3 == 0x700ec1 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e16064a; op2val:0x40ccd0cd; op3val:0x3f700ec1; valaddr_reg:x16; val_offset:1848; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1848, x17, x15, 592, x18)

inst_1345:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x16064a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4cd0cd and fs3 == 0 and fe3 == 0x7e and fm3 == 0x700ec1 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e16064a; op2val:0x40ccd0cd; op3val:0x3f700ec1; valaddr_reg:x16; val_offset:1860; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1860, x17, x15, 600, x18)

inst_1346:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x235339 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x459c8f and fs3 == 0 and fe3 == 0x7a and fm3 == 0x7c25db and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f235339; op2val:0x3dc59c8f; op3val:0x3d7c25db; valaddr_reg:x16; val_offset:1872; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1872, x17, x15, 608, x18)

inst_1347:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x235339 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x459c8f and fs3 == 0 and fe3 == 0x7a and fm3 == 0x7c25db and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f235339; op2val:0x3dc59c8f; op3val:0x3d7c25db; valaddr_reg:x16; val_offset:1884; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1884, x17, x15, 616, x18)

inst_1348:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x235339 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x459c8f and fs3 == 0 and fe3 == 0x7a and fm3 == 0x7c25db and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f235339; op2val:0x3dc59c8f; op3val:0x3d7c25db; valaddr_reg:x16; val_offset:1896; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1896, x17, x15, 624, x18)

inst_1349:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x235339 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x459c8f and fs3 == 0 and fe3 == 0x7a and fm3 == 0x7c25db and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f235339; op2val:0x3dc59c8f; op3val:0x3d7c25db; valaddr_reg:x16; val_offset:1908; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1908, x17, x15, 632, x18)

inst_1350:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x235339 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x459c8f and fs3 == 0 and fe3 == 0x7a and fm3 == 0x7c25db and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f235339; op2val:0x3dc59c8f; op3val:0x3d7c25db; valaddr_reg:x16; val_offset:1920; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1920, x17, x15, 640, x18)

inst_1351:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x634aaf and fs2 == 0 and fe2 == 0x7d and fm2 == 0x2253fb and fs3 == 0 and fe3 == 0x7d and fm3 == 0x101fd3 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f634aaf; op2val:0x3ea253fb; op3val:0x3e901fd3; valaddr_reg:x16; val_offset:1932; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1932, x17, x15, 648, x18)

inst_1352:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x634aaf and fs2 == 0 and fe2 == 0x7d and fm2 == 0x2253fb and fs3 == 0 and fe3 == 0x7d and fm3 == 0x101fd3 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f634aaf; op2val:0x3ea253fb; op3val:0x3e901fd3; valaddr_reg:x16; val_offset:1944; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1944, x17, x15, 656, x18)

inst_1353:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x634aaf and fs2 == 0 and fe2 == 0x7d and fm2 == 0x2253fb and fs3 == 0 and fe3 == 0x7d and fm3 == 0x101fd3 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f634aaf; op2val:0x3ea253fb; op3val:0x3e901fd3; valaddr_reg:x16; val_offset:1956; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1956, x17, x15, 664, x18)

inst_1354:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x634aaf and fs2 == 0 and fe2 == 0x7d and fm2 == 0x2253fb and fs3 == 0 and fe3 == 0x7d and fm3 == 0x101fd3 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f634aaf; op2val:0x3ea253fb; op3val:0x3e901fd3; valaddr_reg:x16; val_offset:1968; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1968, x17, x15, 672, x18)

inst_1355:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x634aaf and fs2 == 0 and fe2 == 0x7d and fm2 == 0x2253fb and fs3 == 0 and fe3 == 0x7d and fm3 == 0x101fd3 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f634aaf; op2val:0x3ea253fb; op3val:0x3e901fd3; valaddr_reg:x16; val_offset:1980; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1980, x17, x15, 680, x18)

inst_1356:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x784a89 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x6f0f62 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x67dc82 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f784a89; op2val:0x3e6f0f62; op3val:0x3e67dc82; valaddr_reg:x16; val_offset:1992; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1992, x17, x15, 688, x18)

inst_1357:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x784a89 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x6f0f62 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x67dc82 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f784a89; op2val:0x3e6f0f62; op3val:0x3e67dc82; valaddr_reg:x16; val_offset:2004; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 2004, x17, x15, 696, x18)

inst_1358:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x784a89 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x6f0f62 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x67dc82 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f784a89; op2val:0x3e6f0f62; op3val:0x3e67dc82; valaddr_reg:x16; val_offset:2016; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 2016, x17, x15, 704, x18)

inst_1359:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x784a89 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x6f0f62 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x67dc82 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f784a89; op2val:0x3e6f0f62; op3val:0x3e67dc82; valaddr_reg:x16; val_offset:2028; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 2028, x17, x15, 712, x18)
addi x16,x16,2040

inst_1360:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x784a89 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x6f0f62 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x67dc82 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f784a89; op2val:0x3e6f0f62; op3val:0x3e67dc82; valaddr_reg:x16; val_offset:0; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 0, x17, x15, 720, x18)

inst_1361:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0cf6eb and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b2e65 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x716190 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0cf6eb; op2val:0x3fdb2e65; op3val:0x3f716190; valaddr_reg:x16; val_offset:12; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 12, x17, x15, 728, x18)

inst_1362:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0cf6eb and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b2e65 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x716190 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0cf6eb; op2val:0x3fdb2e65; op3val:0x3f716190; valaddr_reg:x16; val_offset:24; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 24, x17, x15, 736, x18)

inst_1363:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0cf6eb and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b2e65 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x716190 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0cf6eb; op2val:0x3fdb2e65; op3val:0x3f716190; valaddr_reg:x16; val_offset:36; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 36, x17, x15, 744, x18)

inst_1364:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0cf6eb and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b2e65 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x716190 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0cf6eb; op2val:0x3fdb2e65; op3val:0x3f716190; valaddr_reg:x16; val_offset:48; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 48, x17, x15, 752, x18)

inst_1365:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0cf6eb and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b2e65 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x716190 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0cf6eb; op2val:0x3fdb2e65; op3val:0x3f716190; valaddr_reg:x16; val_offset:60; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 60, x17, x15, 760, x18)

inst_1366:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x358ecd and fs2 == 0 and fe2 == 0x7f and fm2 == 0x335d66 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7e6a2e and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f358ecd; op2val:0x3fb35d66; op3val:0x3f7e6a2e; valaddr_reg:x16; val_offset:72; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 72, x17, x15, 768, x18)

inst_1367:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x358ecd and fs2 == 0 and fe2 == 0x7f and fm2 == 0x335d66 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7e6a2e and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f358ecd; op2val:0x3fb35d66; op3val:0x3f7e6a2e; valaddr_reg:x16; val_offset:84; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 84, x17, x15, 776, x18)

inst_1368:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x358ecd and fs2 == 0 and fe2 == 0x7f and fm2 == 0x335d66 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7e6a2e and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f358ecd; op2val:0x3fb35d66; op3val:0x3f7e6a2e; valaddr_reg:x16; val_offset:96; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 96, x17, x15, 784, x18)

inst_1369:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x358ecd and fs2 == 0 and fe2 == 0x7f and fm2 == 0x335d66 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7e6a2e and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f358ecd; op2val:0x3fb35d66; op3val:0x3f7e6a2e; valaddr_reg:x16; val_offset:108; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 108, x17, x15, 792, x18)

inst_1370:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x358ecd and fs2 == 0 and fe2 == 0x7f and fm2 == 0x335d66 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7e6a2e and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f358ecd; op2val:0x3fb35d66; op3val:0x3f7e6a2e; valaddr_reg:x16; val_offset:120; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 120, x17, x15, 800, x18)

inst_1371:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5384b9 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1d1e3b and fs3 == 0 and fe3 == 0x7b and fm3 == 0x01d160 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e5384b9; op2val:0x3e9d1e3b; op3val:0x3d81d160; valaddr_reg:x16; val_offset:132; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 132, x17, x15, 808, x18)

inst_1372:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5384b9 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1d1e3b and fs3 == 0 and fe3 == 0x7b and fm3 == 0x01d160 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e5384b9; op2val:0x3e9d1e3b; op3val:0x3d81d160; valaddr_reg:x16; val_offset:144; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 144, x17, x15, 816, x18)

inst_1373:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5384b9 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1d1e3b and fs3 == 0 and fe3 == 0x7b and fm3 == 0x01d160 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e5384b9; op2val:0x3e9d1e3b; op3val:0x3d81d160; valaddr_reg:x16; val_offset:156; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 156, x17, x15, 824, x18)

inst_1374:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5384b9 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1d1e3b and fs3 == 0 and fe3 == 0x7b and fm3 == 0x01d160 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e5384b9; op2val:0x3e9d1e3b; op3val:0x3d81d160; valaddr_reg:x16; val_offset:168; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 168, x17, x15, 832, x18)

inst_1375:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5384b9 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1d1e3b and fs3 == 0 and fe3 == 0x7b and fm3 == 0x01d160 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e5384b9; op2val:0x3e9d1e3b; op3val:0x3d81d160; valaddr_reg:x16; val_offset:180; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 180, x17, x15, 840, x18)

inst_1376:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1a0a38 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x59d47a and fs3 == 0 and fe3 == 0x7e and fm3 == 0x031283 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f1a0a38; op2val:0x3f59d47a; op3val:0x3f031283; valaddr_reg:x16; val_offset:192; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 192, x17, x15, 848, x18)

inst_1377:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1a0a38 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x59d47a and fs3 == 0 and fe3 == 0x7e and fm3 == 0x031283 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f1a0a38; op2val:0x3f59d47a; op3val:0x3f031283; valaddr_reg:x16; val_offset:204; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 204, x17, x15, 856, x18)

inst_1378:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1a0a38 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x59d47a and fs3 == 0 and fe3 == 0x7e and fm3 == 0x031283 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f1a0a38; op2val:0x3f59d47a; op3val:0x3f031283; valaddr_reg:x16; val_offset:216; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 216, x17, x15, 864, x18)

inst_1379:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1a0a38 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x59d47a and fs3 == 0 and fe3 == 0x7e and fm3 == 0x031283 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f1a0a38; op2val:0x3f59d47a; op3val:0x3f031283; valaddr_reg:x16; val_offset:228; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 228, x17, x15, 872, x18)

inst_1380:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1a0a38 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x59d47a and fs3 == 0 and fe3 == 0x7e and fm3 == 0x031283 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f1a0a38; op2val:0x3f59d47a; op3val:0x3f031283; valaddr_reg:x16; val_offset:240; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 240, x17, x15, 880, x18)

inst_1381:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4b3f77 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b39a9 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x2e0d12 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ecb3f77; op2val:0x3fdb39a9; op3val:0x3f2e0d12; valaddr_reg:x16; val_offset:252; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 252, x17, x15, 888, x18)

inst_1382:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4b3f77 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b39a9 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x2e0d12 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ecb3f77; op2val:0x3fdb39a9; op3val:0x3f2e0d12; valaddr_reg:x16; val_offset:264; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 264, x17, x15, 896, x18)

inst_1383:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4b3f77 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b39a9 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x2e0d12 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ecb3f77; op2val:0x3fdb39a9; op3val:0x3f2e0d12; valaddr_reg:x16; val_offset:276; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 276, x17, x15, 904, x18)

inst_1384:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4b3f77 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b39a9 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x2e0d12 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ecb3f77; op2val:0x3fdb39a9; op3val:0x3f2e0d12; valaddr_reg:x16; val_offset:288; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 288, x17, x15, 912, x18)

inst_1385:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4b3f77 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5b39a9 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x2e0d12 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ecb3f77; op2val:0x3fdb39a9; op3val:0x3f2e0d12; valaddr_reg:x16; val_offset:300; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 300, x17, x15, 920, x18)

inst_1386:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x1d8915 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x01c919 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x1fbba8 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d9d8915; op2val:0x4101c919; op3val:0x3f1fbba8; valaddr_reg:x16; val_offset:312; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 312, x17, x15, 928, x18)

inst_1387:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x1d8915 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x01c919 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x1fbba8 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d9d8915; op2val:0x4101c919; op3val:0x3f1fbba8; valaddr_reg:x16; val_offset:324; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 324, x17, x15, 936, x18)

inst_1388:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x1d8915 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x01c919 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x1fbba8 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d9d8915; op2val:0x4101c919; op3val:0x3f1fbba8; valaddr_reg:x16; val_offset:336; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 336, x17, x15, 944, x18)

inst_1389:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x1d8915 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x01c919 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x1fbba8 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d9d8915; op2val:0x4101c919; op3val:0x3f1fbba8; valaddr_reg:x16; val_offset:348; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 348, x17, x15, 952, x18)

inst_1390:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x1d8915 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x01c919 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x1fbba8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d9d8915; op2val:0x4101c919; op3val:0x3f1fbba8; valaddr_reg:x16; val_offset:360; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 360, x17, x15, 960, x18)

inst_1391:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2e77ae and fs2 == 0 and fe2 == 0x7b and fm2 == 0x2fb343 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x6f7bf8 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eae77ae; op2val:0x3dafb343; op3val:0x3cef7bf8; valaddr_reg:x16; val_offset:372; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 372, x17, x15, 968, x18)

inst_1392:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2e77ae and fs2 == 0 and fe2 == 0x7b and fm2 == 0x2fb343 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x6f7bf8 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eae77ae; op2val:0x3dafb343; op3val:0x3cef7bf8; valaddr_reg:x16; val_offset:384; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 384, x17, x15, 976, x18)

inst_1393:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2e77ae and fs2 == 0 and fe2 == 0x7b and fm2 == 0x2fb343 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x6f7bf8 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eae77ae; op2val:0x3dafb343; op3val:0x3cef7bf8; valaddr_reg:x16; val_offset:396; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 396, x17, x15, 984, x18)

inst_1394:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2e77ae and fs2 == 0 and fe2 == 0x7b and fm2 == 0x2fb343 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x6f7bf8 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eae77ae; op2val:0x3dafb343; op3val:0x3cef7bf8; valaddr_reg:x16; val_offset:408; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 408, x17, x15, 992, x18)

inst_1395:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2e77ae and fs2 == 0 and fe2 == 0x7b and fm2 == 0x2fb343 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x6f7bf8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eae77ae; op2val:0x3dafb343; op3val:0x3cef7bf8; valaddr_reg:x16; val_offset:420; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 420, x17, x15, 1000, x18)

inst_1396:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x47f1fa and fs2 == 0 and fe2 == 0x80 and fm2 == 0x5dc5af and fs3 == 0 and fe3 == 0x7e and fm3 == 0x2d364b and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e47f1fa; op2val:0x405dc5af; op3val:0x3f2d364b; valaddr_reg:x16; val_offset:432; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 432, x17, x15, 1008, x18)

inst_1397:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x47f1fa and fs2 == 0 and fe2 == 0x80 and fm2 == 0x5dc5af and fs3 == 0 and fe3 == 0x7e and fm3 == 0x2d364b and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e47f1fa; op2val:0x405dc5af; op3val:0x3f2d364b; valaddr_reg:x16; val_offset:444; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 444, x17, x15, 1016, x18)

inst_1398:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x47f1fa and fs2 == 0 and fe2 == 0x80 and fm2 == 0x5dc5af and fs3 == 0 and fe3 == 0x7e and fm3 == 0x2d364b and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e47f1fa; op2val:0x405dc5af; op3val:0x3f2d364b; valaddr_reg:x16; val_offset:456; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 456, x17, x15, 1024, x18)

inst_1399:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x47f1fa and fs2 == 0 and fe2 == 0x80 and fm2 == 0x5dc5af and fs3 == 0 and fe3 == 0x7e and fm3 == 0x2d364b and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e47f1fa; op2val:0x405dc5af; op3val:0x3f2d364b; valaddr_reg:x16; val_offset:468; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 468, x17, x15, 1032, x18)

inst_1400:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x47f1fa and fs2 == 0 and fe2 == 0x80 and fm2 == 0x5dc5af and fs3 == 0 and fe3 == 0x7e and fm3 == 0x2d364b and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e47f1fa; op2val:0x405dc5af; op3val:0x3f2d364b; valaddr_reg:x16; val_offset:480; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 480, x17, x15, 1040, x18)

inst_1401:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1f5d98 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0ec39d and fs3 == 0 and fe3 == 0x7e and fm3 == 0x31bf61 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f1f5d98; op2val:0x3f8ec39d; op3val:0x3f31bf61; valaddr_reg:x16; val_offset:492; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 492, x17, x15, 1048, x18)

inst_1402:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1f5d98 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0ec39d and fs3 == 0 and fe3 == 0x7e and fm3 == 0x31bf61 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f1f5d98; op2val:0x3f8ec39d; op3val:0x3f31bf61; valaddr_reg:x16; val_offset:504; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 504, x17, x15, 1056, x18)

inst_1403:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1f5d98 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0ec39d and fs3 == 0 and fe3 == 0x7e and fm3 == 0x31bf61 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f1f5d98; op2val:0x3f8ec39d; op3val:0x3f31bf61; valaddr_reg:x16; val_offset:516; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 516, x17, x15, 1064, x18)

inst_1404:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1f5d98 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0ec39d and fs3 == 0 and fe3 == 0x7e and fm3 == 0x31bf61 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f1f5d98; op2val:0x3f8ec39d; op3val:0x3f31bf61; valaddr_reg:x16; val_offset:528; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 528, x17, x15, 1072, x18)

inst_1405:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1f5d98 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0ec39d and fs3 == 0 and fe3 == 0x7e and fm3 == 0x31bf61 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f1f5d98; op2val:0x3f8ec39d; op3val:0x3f31bf61; valaddr_reg:x16; val_offset:540; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 540, x17, x15, 1080, x18)

inst_1406:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x057e78 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x529017 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x5b99c3 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f057e78; op2val:0x3fd29017; op3val:0x3f5b99c3; valaddr_reg:x16; val_offset:552; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 552, x17, x15, 1088, x18)

inst_1407:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x057e78 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x529017 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x5b99c3 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f057e78; op2val:0x3fd29017; op3val:0x3f5b99c3; valaddr_reg:x16; val_offset:564; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 564, x17, x15, 1096, x18)

inst_1408:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x057e78 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x529017 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x5b99c3 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f057e78; op2val:0x3fd29017; op3val:0x3f5b99c3; valaddr_reg:x16; val_offset:576; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 576, x17, x15, 1104, x18)

inst_1409:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x057e78 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x529017 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x5b99c3 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f057e78; op2val:0x3fd29017; op3val:0x3f5b99c3; valaddr_reg:x16; val_offset:588; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 588, x17, x15, 1112, x18)

inst_1410:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x057e78 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x529017 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x5b99c3 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f057e78; op2val:0x3fd29017; op3val:0x3f5b99c3; valaddr_reg:x16; val_offset:600; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 600, x17, x15, 1120, x18)

inst_1411:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3b6872 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x37b152 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x067979 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f3b6872; op2val:0x3f37b152; op3val:0x3f067979; valaddr_reg:x16; val_offset:612; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 612, x17, x15, 1128, x18)

inst_1412:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3b6872 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x37b152 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x067979 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f3b6872; op2val:0x3f37b152; op3val:0x3f067979; valaddr_reg:x16; val_offset:624; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 624, x17, x15, 1136, x18)

inst_1413:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3b6872 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x37b152 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x067979 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f3b6872; op2val:0x3f37b152; op3val:0x3f067979; valaddr_reg:x16; val_offset:636; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 636, x17, x15, 1144, x18)

inst_1414:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3b6872 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x37b152 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x067979 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f3b6872; op2val:0x3f37b152; op3val:0x3f067979; valaddr_reg:x16; val_offset:648; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 648, x17, x15, 1152, x18)

inst_1415:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3b6872 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x37b152 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x067979 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f3b6872; op2val:0x3f37b152; op3val:0x3f067979; valaddr_reg:x16; val_offset:660; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 660, x17, x15, 1160, x18)

inst_1416:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7734c7 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x4da0fa and fs3 == 0 and fe3 == 0x7d and fm3 == 0x4690b7 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3df734c7; op2val:0x404da0fa; op3val:0x3ec690b7; valaddr_reg:x16; val_offset:672; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 672, x17, x15, 1168, x18)

inst_1417:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7734c7 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x4da0fa and fs3 == 0 and fe3 == 0x7d and fm3 == 0x4690b7 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3df734c7; op2val:0x404da0fa; op3val:0x3ec690b7; valaddr_reg:x16; val_offset:684; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 684, x17, x15, 1176, x18)

inst_1418:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7734c7 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x4da0fa and fs3 == 0 and fe3 == 0x7d and fm3 == 0x4690b7 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3df734c7; op2val:0x404da0fa; op3val:0x3ec690b7; valaddr_reg:x16; val_offset:696; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 696, x17, x15, 1184, x18)

inst_1419:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7734c7 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x4da0fa and fs3 == 0 and fe3 == 0x7d and fm3 == 0x4690b7 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3df734c7; op2val:0x404da0fa; op3val:0x3ec690b7; valaddr_reg:x16; val_offset:708; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 708, x17, x15, 1192, x18)

inst_1420:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7734c7 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x4da0fa and fs3 == 0 and fe3 == 0x7d and fm3 == 0x4690b7 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3df734c7; op2val:0x404da0fa; op3val:0x3ec690b7; valaddr_reg:x16; val_offset:720; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 720, x17, x15, 1200, x18)

inst_1421:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3ec7d3 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4a7a3f and fs3 == 0 and fe3 == 0x7e and fm3 == 0x16e4c7 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f3ec7d3; op2val:0x3f4a7a3f; op3val:0x3f16e4c7; valaddr_reg:x16; val_offset:732; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 732, x17, x15, 1208, x18)

inst_1422:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3ec7d3 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4a7a3f and fs3 == 0 and fe3 == 0x7e and fm3 == 0x16e4c7 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f3ec7d3; op2val:0x3f4a7a3f; op3val:0x3f16e4c7; valaddr_reg:x16; val_offset:744; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 744, x17, x15, 1216, x18)

inst_1423:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3ec7d3 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4a7a3f and fs3 == 0 and fe3 == 0x7e and fm3 == 0x16e4c7 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f3ec7d3; op2val:0x3f4a7a3f; op3val:0x3f16e4c7; valaddr_reg:x16; val_offset:756; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 756, x17, x15, 1224, x18)

inst_1424:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3ec7d3 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4a7a3f and fs3 == 0 and fe3 == 0x7e and fm3 == 0x16e4c7 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f3ec7d3; op2val:0x3f4a7a3f; op3val:0x3f16e4c7; valaddr_reg:x16; val_offset:768; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 768, x17, x15, 1232, x18)

inst_1425:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3ec7d3 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4a7a3f and fs3 == 0 and fe3 == 0x7e and fm3 == 0x16e4c7 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f3ec7d3; op2val:0x3f4a7a3f; op3val:0x3f16e4c7; valaddr_reg:x16; val_offset:780; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 780, x17, x15, 1240, x18)

inst_1426:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0c6851 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x072d87 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x1447f7 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0c6851; op2val:0x3e072d87; op3val:0x3d9447f7; valaddr_reg:x16; val_offset:792; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 792, x17, x15, 1248, x18)

inst_1427:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0c6851 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x072d87 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x1447f7 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0c6851; op2val:0x3e072d87; op3val:0x3d9447f7; valaddr_reg:x16; val_offset:804; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 804, x17, x15, 1256, x18)

inst_1428:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0c6851 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x072d87 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x1447f7 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0c6851; op2val:0x3e072d87; op3val:0x3d9447f7; valaddr_reg:x16; val_offset:816; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 816, x17, x15, 1264, x18)

inst_1429:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0c6851 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x072d87 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x1447f7 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0c6851; op2val:0x3e072d87; op3val:0x3d9447f7; valaddr_reg:x16; val_offset:828; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 828, x17, x15, 1272, x18)

inst_1430:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0c6851 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x072d87 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x1447f7 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0c6851; op2val:0x3e072d87; op3val:0x3d9447f7; valaddr_reg:x16; val_offset:840; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 840, x17, x15, 1280, x18)

inst_1431:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x239248 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x14fb55 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3e6252 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f239248; op2val:0x3f94fb55; op3val:0x3f3e6252; valaddr_reg:x16; val_offset:852; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 852, x17, x15, 1288, x18)

inst_1432:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x239248 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x14fb55 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3e6252 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f239248; op2val:0x3f94fb55; op3val:0x3f3e6252; valaddr_reg:x16; val_offset:864; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 864, x17, x15, 1296, x18)

inst_1433:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x239248 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x14fb55 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3e6252 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f239248; op2val:0x3f94fb55; op3val:0x3f3e6252; valaddr_reg:x16; val_offset:876; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 876, x17, x15, 1304, x18)

inst_1434:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x239248 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x14fb55 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3e6252 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f239248; op2val:0x3f94fb55; op3val:0x3f3e6252; valaddr_reg:x16; val_offset:888; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 888, x17, x15, 1312, x18)

inst_1435:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x239248 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x14fb55 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3e6252 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f239248; op2val:0x3f94fb55; op3val:0x3f3e6252; valaddr_reg:x16; val_offset:900; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 900, x17, x15, 1320, x18)

inst_1436:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x60629c and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6fd68e and fs3 == 0 and fe3 == 0x7d and fm3 == 0x52381f and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f60629c; op2val:0x3eefd68e; op3val:0x3ed2381f; valaddr_reg:x16; val_offset:912; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 912, x17, x15, 1328, x18)

inst_1437:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x60629c and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6fd68e and fs3 == 0 and fe3 == 0x7d and fm3 == 0x52381f and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f60629c; op2val:0x3eefd68e; op3val:0x3ed2381f; valaddr_reg:x16; val_offset:924; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 924, x17, x15, 1336, x18)

inst_1438:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x60629c and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6fd68e and fs3 == 0 and fe3 == 0x7d and fm3 == 0x52381f and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f60629c; op2val:0x3eefd68e; op3val:0x3ed2381f; valaddr_reg:x16; val_offset:936; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 936, x17, x15, 1344, x18)

inst_1439:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x60629c and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6fd68e and fs3 == 0 and fe3 == 0x7d and fm3 == 0x52381f and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f60629c; op2val:0x3eefd68e; op3val:0x3ed2381f; valaddr_reg:x16; val_offset:948; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 948, x17, x15, 1352, x18)

inst_1440:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x60629c and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6fd68e and fs3 == 0 and fe3 == 0x7d and fm3 == 0x52381f and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f60629c; op2val:0x3eefd68e; op3val:0x3ed2381f; valaddr_reg:x16; val_offset:960; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 960, x17, x15, 1360, x18)

inst_1441:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x53ef69 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x173b3b and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7a6681 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f53ef69; op2val:0x3f973b3b; op3val:0x3f7a6681; valaddr_reg:x16; val_offset:972; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 972, x17, x15, 1368, x18)

inst_1442:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x53ef69 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x173b3b and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7a6681 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f53ef69; op2val:0x3f973b3b; op3val:0x3f7a6681; valaddr_reg:x16; val_offset:984; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 984, x17, x15, 1376, x18)

inst_1443:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x53ef69 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x173b3b and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7a6681 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f53ef69; op2val:0x3f973b3b; op3val:0x3f7a6681; valaddr_reg:x16; val_offset:996; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 996, x17, x15, 1384, x18)

inst_1444:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x53ef69 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x173b3b and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7a6681 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f53ef69; op2val:0x3f973b3b; op3val:0x3f7a6681; valaddr_reg:x16; val_offset:1008; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1008, x17, x15, 1392, x18)

inst_1445:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x53ef69 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x173b3b and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7a6681 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f53ef69; op2val:0x3f973b3b; op3val:0x3f7a6681; valaddr_reg:x16; val_offset:1020; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1020, x17, x15, 1400, x18)

inst_1446:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x032873 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x57d43e and fs3 == 0 and fe3 == 0x7c and fm3 == 0x5d276e and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f032873; op2val:0x3ed7d43e; op3val:0x3e5d276e; valaddr_reg:x16; val_offset:1032; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1032, x17, x15, 1408, x18)

inst_1447:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x032873 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x57d43e and fs3 == 0 and fe3 == 0x7c and fm3 == 0x5d276e and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f032873; op2val:0x3ed7d43e; op3val:0x3e5d276e; valaddr_reg:x16; val_offset:1044; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1044, x17, x15, 1416, x18)

inst_1448:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x032873 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x57d43e and fs3 == 0 and fe3 == 0x7c and fm3 == 0x5d276e and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f032873; op2val:0x3ed7d43e; op3val:0x3e5d276e; valaddr_reg:x16; val_offset:1056; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1056, x17, x15, 1424, x18)

inst_1449:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x032873 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x57d43e and fs3 == 0 and fe3 == 0x7c and fm3 == 0x5d276e and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f032873; op2val:0x3ed7d43e; op3val:0x3e5d276e; valaddr_reg:x16; val_offset:1068; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1068, x17, x15, 1432, x18)

inst_1450:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x032873 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x57d43e and fs3 == 0 and fe3 == 0x7c and fm3 == 0x5d276e and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f032873; op2val:0x3ed7d43e; op3val:0x3e5d276e; valaddr_reg:x16; val_offset:1080; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1080, x17, x15, 1440, x18)

inst_1451:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x01c8ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x395de6 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3bf33d and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e81c8ab; op2val:0x40395de6; op3val:0x3f3bf33d; valaddr_reg:x16; val_offset:1092; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1092, x17, x15, 1448, x18)

inst_1452:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x01c8ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x395de6 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3bf33d and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e81c8ab; op2val:0x40395de6; op3val:0x3f3bf33d; valaddr_reg:x16; val_offset:1104; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1104, x17, x15, 1456, x18)

inst_1453:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x01c8ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x395de6 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3bf33d and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e81c8ab; op2val:0x40395de6; op3val:0x3f3bf33d; valaddr_reg:x16; val_offset:1116; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1116, x17, x15, 1464, x18)

inst_1454:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x01c8ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x395de6 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3bf33d and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e81c8ab; op2val:0x40395de6; op3val:0x3f3bf33d; valaddr_reg:x16; val_offset:1128; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1128, x17, x15, 1472, x18)

inst_1455:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x01c8ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x395de6 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3bf33d and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e81c8ab; op2val:0x40395de6; op3val:0x3f3bf33d; valaddr_reg:x16; val_offset:1140; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1140, x17, x15, 1480, x18)

inst_1456:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x174798 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x45fe09 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6a006f and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f174798; op2val:0x3fc5fe09; op3val:0x3f6a006f; valaddr_reg:x16; val_offset:1152; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1152, x17, x15, 1488, x18)

inst_1457:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x174798 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x45fe09 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6a006f and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f174798; op2val:0x3fc5fe09; op3val:0x3f6a006f; valaddr_reg:x16; val_offset:1164; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1164, x17, x15, 1496, x18)

inst_1458:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x174798 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x45fe09 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6a006f and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f174798; op2val:0x3fc5fe09; op3val:0x3f6a006f; valaddr_reg:x16; val_offset:1176; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1176, x17, x15, 1504, x18)

inst_1459:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x174798 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x45fe09 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6a006f and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f174798; op2val:0x3fc5fe09; op3val:0x3f6a006f; valaddr_reg:x16; val_offset:1188; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1188, x17, x15, 1512, x18)

inst_1460:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x174798 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x45fe09 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x6a006f and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f174798; op2val:0x3fc5fe09; op3val:0x3f6a006f; valaddr_reg:x16; val_offset:1200; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1200, x17, x15, 1520, x18)

inst_1461:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x077124 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0e6a54 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x16b208 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f077124; op2val:0x3f0e6a54; op3val:0x3e96b208; valaddr_reg:x16; val_offset:1212; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1212, x17, x15, 1528, x18)

inst_1462:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x077124 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0e6a54 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x16b208 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f077124; op2val:0x3f0e6a54; op3val:0x3e96b208; valaddr_reg:x16; val_offset:1224; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1224, x17, x15, 1536, x18)

inst_1463:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x077124 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0e6a54 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x16b208 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f077124; op2val:0x3f0e6a54; op3val:0x3e96b208; valaddr_reg:x16; val_offset:1236; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1236, x17, x15, 1544, x18)

inst_1464:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x077124 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0e6a54 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x16b208 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f077124; op2val:0x3f0e6a54; op3val:0x3e96b208; valaddr_reg:x16; val_offset:1248; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1248, x17, x15, 1552, x18)

inst_1465:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x077124 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0e6a54 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x16b208 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f077124; op2val:0x3f0e6a54; op3val:0x3e96b208; valaddr_reg:x16; val_offset:1260; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1260, x17, x15, 1560, x18)

inst_1466:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x50cb77 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x17b382 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x7774d8 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e50cb77; op2val:0x4017b382; op3val:0x3ef774d8; valaddr_reg:x16; val_offset:1272; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1272, x17, x15, 1568, x18)

inst_1467:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x50cb77 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x17b382 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x7774d8 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e50cb77; op2val:0x4017b382; op3val:0x3ef774d8; valaddr_reg:x16; val_offset:1284; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1284, x17, x15, 1576, x18)

inst_1468:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x50cb77 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x17b382 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x7774d8 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e50cb77; op2val:0x4017b382; op3val:0x3ef774d8; valaddr_reg:x16; val_offset:1296; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1296, x17, x15, 1584, x18)

inst_1469:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x50cb77 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x17b382 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x7774d8 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e50cb77; op2val:0x4017b382; op3val:0x3ef774d8; valaddr_reg:x16; val_offset:1308; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1308, x17, x15, 1592, x18)

inst_1470:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x50cb77 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x17b382 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x7774d8 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e50cb77; op2val:0x4017b382; op3val:0x3ef774d8; valaddr_reg:x16; val_offset:1320; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1320, x17, x15, 1600, x18)

inst_1471:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0d84ae and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1c48e6 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x2cca4e and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0d84ae; op2val:0x3e9c48e6; op3val:0x3e2cca4e; valaddr_reg:x16; val_offset:1332; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1332, x17, x15, 1608, x18)

inst_1472:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0d84ae and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1c48e6 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x2cca4e and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0d84ae; op2val:0x3e9c48e6; op3val:0x3e2cca4e; valaddr_reg:x16; val_offset:1344; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1344, x17, x15, 1616, x18)

inst_1473:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0d84ae and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1c48e6 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x2cca4e and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0d84ae; op2val:0x3e9c48e6; op3val:0x3e2cca4e; valaddr_reg:x16; val_offset:1356; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1356, x17, x15, 1624, x18)

inst_1474:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0d84ae and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1c48e6 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x2cca4e and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0d84ae; op2val:0x3e9c48e6; op3val:0x3e2cca4e; valaddr_reg:x16; val_offset:1368; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1368, x17, x15, 1632, x18)

inst_1475:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0d84ae and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1c48e6 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x2cca4e and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f0d84ae; op2val:0x3e9c48e6; op3val:0x3e2cca4e; valaddr_reg:x16; val_offset:1380; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1380, x17, x15, 1640, x18)

inst_1476:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x28d94d and fs2 == 0 and fe2 == 0x7d and fm2 == 0x2b892a and fs3 == 0 and fe3 == 0x7b and fm3 == 0x62473e and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ea8d94d; op2val:0x3eab892a; op3val:0x3de2473e; valaddr_reg:x16; val_offset:1392; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1392, x17, x15, 1648, x18)

inst_1477:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x28d94d and fs2 == 0 and fe2 == 0x7d and fm2 == 0x2b892a and fs3 == 0 and fe3 == 0x7b and fm3 == 0x62473e and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ea8d94d; op2val:0x3eab892a; op3val:0x3de2473e; valaddr_reg:x16; val_offset:1404; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1404, x17, x15, 1656, x18)

inst_1478:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x28d94d and fs2 == 0 and fe2 == 0x7d and fm2 == 0x2b892a and fs3 == 0 and fe3 == 0x7b and fm3 == 0x62473e and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ea8d94d; op2val:0x3eab892a; op3val:0x3de2473e; valaddr_reg:x16; val_offset:1416; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1416, x17, x15, 1664, x18)

inst_1479:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x28d94d and fs2 == 0 and fe2 == 0x7d and fm2 == 0x2b892a and fs3 == 0 and fe3 == 0x7b and fm3 == 0x62473e and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ea8d94d; op2val:0x3eab892a; op3val:0x3de2473e; valaddr_reg:x16; val_offset:1428; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1428, x17, x15, 1672, x18)

inst_1480:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x28d94d and fs2 == 0 and fe2 == 0x7d and fm2 == 0x2b892a and fs3 == 0 and fe3 == 0x7b and fm3 == 0x62473e and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ea8d94d; op2val:0x3eab892a; op3val:0x3de2473e; valaddr_reg:x16; val_offset:1440; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1440, x17, x15, 1680, x18)

inst_1481:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x29ef3f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2634cb and fs3 == 0 and fe3 == 0x7b and fm3 == 0x5ca85d and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ca9ef3f; op2val:0x40a634cb; op3val:0x3ddca85d; valaddr_reg:x16; val_offset:1452; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1452, x17, x15, 1688, x18)

inst_1482:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x29ef3f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2634cb and fs3 == 0 and fe3 == 0x7b and fm3 == 0x5ca85d and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ca9ef3f; op2val:0x40a634cb; op3val:0x3ddca85d; valaddr_reg:x16; val_offset:1464; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1464, x17, x15, 1696, x18)

inst_1483:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x29ef3f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2634cb and fs3 == 0 and fe3 == 0x7b and fm3 == 0x5ca85d and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ca9ef3f; op2val:0x40a634cb; op3val:0x3ddca85d; valaddr_reg:x16; val_offset:1476; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1476, x17, x15, 1704, x18)

inst_1484:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x29ef3f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2634cb and fs3 == 0 and fe3 == 0x7b and fm3 == 0x5ca85d and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ca9ef3f; op2val:0x40a634cb; op3val:0x3ddca85d; valaddr_reg:x16; val_offset:1488; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1488, x17, x15, 1712, x18)

inst_1485:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x29ef3f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2634cb and fs3 == 0 and fe3 == 0x7b and fm3 == 0x5ca85d and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ca9ef3f; op2val:0x40a634cb; op3val:0x3ddca85d; valaddr_reg:x16; val_offset:1500; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1500, x17, x15, 1720, x18)

inst_1486:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x1bdd66 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x1ea92d and fs3 == 0 and fe3 == 0x7e and fm3 == 0x41334b and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3c9bdd66; op2val:0x421ea92d; op3val:0x3f41334b; valaddr_reg:x16; val_offset:1512; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1512, x17, x15, 1728, x18)

inst_1487:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x1bdd66 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x1ea92d and fs3 == 0 and fe3 == 0x7e and fm3 == 0x41334b and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3c9bdd66; op2val:0x421ea92d; op3val:0x3f41334b; valaddr_reg:x16; val_offset:1524; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1524, x17, x15, 1736, x18)

inst_1488:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x1bdd66 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x1ea92d and fs3 == 0 and fe3 == 0x7e and fm3 == 0x41334b and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3c9bdd66; op2val:0x421ea92d; op3val:0x3f41334b; valaddr_reg:x16; val_offset:1536; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1536, x17, x15, 1744, x18)

inst_1489:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x1bdd66 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x1ea92d and fs3 == 0 and fe3 == 0x7e and fm3 == 0x41334b and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3c9bdd66; op2val:0x421ea92d; op3val:0x3f41334b; valaddr_reg:x16; val_offset:1548; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1548, x17, x15, 1752, x18)

inst_1490:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x1bdd66 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x1ea92d and fs3 == 0 and fe3 == 0x7e and fm3 == 0x41334b and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3c9bdd66; op2val:0x421ea92d; op3val:0x3f41334b; valaddr_reg:x16; val_offset:1560; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1560, x17, x15, 1760, x18)

inst_1491:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x01e342 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x17ee82 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x1a2c1e and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e81e342; op2val:0x4017ee82; op3val:0x3f1a2c1e; valaddr_reg:x16; val_offset:1572; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1572, x17, x15, 1768, x18)

inst_1492:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x01e342 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x17ee82 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x1a2c1e and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e81e342; op2val:0x4017ee82; op3val:0x3f1a2c1e; valaddr_reg:x16; val_offset:1584; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1584, x17, x15, 1776, x18)

inst_1493:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x01e342 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x17ee82 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x1a2c1e and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e81e342; op2val:0x4017ee82; op3val:0x3f1a2c1e; valaddr_reg:x16; val_offset:1596; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1596, x17, x15, 1784, x18)

inst_1494:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x01e342 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x17ee82 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x1a2c1e and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e81e342; op2val:0x4017ee82; op3val:0x3f1a2c1e; valaddr_reg:x16; val_offset:1608; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1608, x17, x15, 1792, x18)

inst_1495:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x01e342 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x17ee82 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x1a2c1e and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e81e342; op2val:0x4017ee82; op3val:0x3f1a2c1e; valaddr_reg:x16; val_offset:1620; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1620, x17, x15, 1800, x18)

inst_1496:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7238b6 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1c2500 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x13bd91 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f7238b6; op2val:0x3f1c2500; op3val:0x3f13bd91; valaddr_reg:x16; val_offset:1632; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1632, x17, x15, 1808, x18)

inst_1497:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7238b6 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1c2500 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x13bd91 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f7238b6; op2val:0x3f1c2500; op3val:0x3f13bd91; valaddr_reg:x16; val_offset:1644; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1644, x17, x15, 1816, x18)

inst_1498:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7238b6 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1c2500 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x13bd91 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f7238b6; op2val:0x3f1c2500; op3val:0x3f13bd91; valaddr_reg:x16; val_offset:1656; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1656, x17, x15, 1824, x18)

inst_1499:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7238b6 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1c2500 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x13bd91 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f7238b6; op2val:0x3f1c2500; op3val:0x3f13bd91; valaddr_reg:x16; val_offset:1668; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1668, x17, x15, 1832, x18)

inst_1500:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7238b6 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1c2500 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x13bd91 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f7238b6; op2val:0x3f1c2500; op3val:0x3f13bd91; valaddr_reg:x16; val_offset:1680; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1680, x17, x15, 1840, x18)

inst_1501:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5f87c2 and fs2 == 0 and fe2 == 0x72 and fm2 == 0x11cadb and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7e9a0b and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5f87c2; op2val:0x3911cadb; op3val:0x38fe9a0b; valaddr_reg:x16; val_offset:1692; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1692, x17, x15, 1848, x18)

inst_1502:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5f87c2 and fs2 == 0 and fe2 == 0x72 and fm2 == 0x11cadb and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7e9a0b and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5f87c2; op2val:0x3911cadb; op3val:0x38fe9a0b; valaddr_reg:x16; val_offset:1704; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1704, x17, x15, 1856, x18)

inst_1503:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5f87c2 and fs2 == 0 and fe2 == 0x72 and fm2 == 0x11cadb and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7e9a0b and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5f87c2; op2val:0x3911cadb; op3val:0x38fe9a0b; valaddr_reg:x16; val_offset:1716; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1716, x17, x15, 1864, x18)

inst_1504:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5f87c2 and fs2 == 0 and fe2 == 0x72 and fm2 == 0x11cadb and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7e9a0b and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5f87c2; op2val:0x3911cadb; op3val:0x38fe9a0b; valaddr_reg:x16; val_offset:1728; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1728, x17, x15, 1872, x18)

inst_1505:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5f87c2 and fs2 == 0 and fe2 == 0x72 and fm2 == 0x11cadb and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7e9a0b and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f5f87c2; op2val:0x3911cadb; op3val:0x38fe9a0b; valaddr_reg:x16; val_offset:1740; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1740, x17, x15, 1880, x18)

inst_1506:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1f6266 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7b2a07 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x1c5fa4 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f1f6266; op2val:0x3f7b2a07; op3val:0x3f1c5fa4; valaddr_reg:x16; val_offset:1752; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1752, x17, x15, 1888, x18)

inst_1507:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1f6266 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7b2a07 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x1c5fa4 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f1f6266; op2val:0x3f7b2a07; op3val:0x3f1c5fa4; valaddr_reg:x16; val_offset:1764; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1764, x17, x15, 1896, x18)

inst_1508:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1f6266 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7b2a07 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x1c5fa4 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f1f6266; op2val:0x3f7b2a07; op3val:0x3f1c5fa4; valaddr_reg:x16; val_offset:1776; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1776, x17, x15, 1904, x18)

inst_1509:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1f6266 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7b2a07 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x1c5fa4 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f1f6266; op2val:0x3f7b2a07; op3val:0x3f1c5fa4; valaddr_reg:x16; val_offset:1788; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1788, x17, x15, 1912, x18)

inst_1510:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1f6266 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7b2a07 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x1c5fa4 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f1f6266; op2val:0x3f7b2a07; op3val:0x3f1c5fa4; valaddr_reg:x16; val_offset:1800; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1800, x17, x15, 1920, x18)

inst_1511:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x426c97 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x69e3c6 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x31a1d2 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ec26c97; op2val:0x3fe9e3c6; op3val:0x3f31a1d2; valaddr_reg:x16; val_offset:1812; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1812, x17, x15, 1928, x18)

inst_1512:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x426c97 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x69e3c6 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x31a1d2 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ec26c97; op2val:0x3fe9e3c6; op3val:0x3f31a1d2; valaddr_reg:x16; val_offset:1824; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1824, x17, x15, 1936, x18)

inst_1513:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x426c97 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x69e3c6 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x31a1d2 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ec26c97; op2val:0x3fe9e3c6; op3val:0x3f31a1d2; valaddr_reg:x16; val_offset:1836; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1836, x17, x15, 1944, x18)

inst_1514:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x426c97 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x69e3c6 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x31a1d2 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ec26c97; op2val:0x3fe9e3c6; op3val:0x3f31a1d2; valaddr_reg:x16; val_offset:1848; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1848, x17, x15, 1952, x18)

inst_1515:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x426c97 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x69e3c6 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x31a1d2 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ec26c97; op2val:0x3fe9e3c6; op3val:0x3f31a1d2; valaddr_reg:x16; val_offset:1860; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1860, x17, x15, 1960, x18)

inst_1516:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2ac646 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x12b0d5 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x43b616 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f2ac646; op2val:0x3e12b0d5; op3val:0x3dc3b616; valaddr_reg:x16; val_offset:1872; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1872, x17, x15, 1968, x18)

inst_1517:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2ac646 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x12b0d5 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x43b616 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f2ac646; op2val:0x3e12b0d5; op3val:0x3dc3b616; valaddr_reg:x16; val_offset:1884; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1884, x17, x15, 1976, x18)

inst_1518:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2ac646 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x12b0d5 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x43b616 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f2ac646; op2val:0x3e12b0d5; op3val:0x3dc3b616; valaddr_reg:x16; val_offset:1896; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1896, x17, x15, 1984, x18)

inst_1519:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2ac646 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x12b0d5 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x43b616 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f2ac646; op2val:0x3e12b0d5; op3val:0x3dc3b616; valaddr_reg:x16; val_offset:1908; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1908, x17, x15, 1992, x18)

inst_1520:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2ac646 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x12b0d5 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x43b616 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f2ac646; op2val:0x3e12b0d5; op3val:0x3dc3b616; valaddr_reg:x16; val_offset:1920; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1920, x17, x15, 2000, x18)

inst_1521:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x6344e4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0db8d0 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7ba209 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e6344e4; op2val:0x408db8d0; op3val:0x3f7ba209; valaddr_reg:x16; val_offset:1932; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1932, x17, x15, 2008, x18)

inst_1522:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x6344e4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0db8d0 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7ba209 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e6344e4; op2val:0x408db8d0; op3val:0x3f7ba209; valaddr_reg:x16; val_offset:1944; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1944, x17, x15, 2016, x18)

inst_1523:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x6344e4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0db8d0 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7ba209 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e6344e4; op2val:0x408db8d0; op3val:0x3f7ba209; valaddr_reg:x16; val_offset:1956; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1956, x17, x15, 2024, x18)
RVTEST_SIGBASE(x15,signature_x15_7)

inst_1524:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x6344e4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0db8d0 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7ba209 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e6344e4; op2val:0x408db8d0; op3val:0x3f7ba209; valaddr_reg:x16; val_offset:1968; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1968, x17, x15, 0, x18)

inst_1525:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x6344e4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0db8d0 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7ba209 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e6344e4; op2val:0x408db8d0; op3val:0x3f7ba209; valaddr_reg:x16; val_offset:1980; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1980, x17, x15, 8, x18)

inst_1526:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1a826a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x516bff and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7ccb4f and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e9a826a; op2val:0x40516bff; op3val:0x3f7ccb4f; valaddr_reg:x16; val_offset:1992; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1992, x17, x15, 16, x18)

inst_1527:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1a826a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x516bff and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7ccb4f and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e9a826a; op2val:0x40516bff; op3val:0x3f7ccb4f; valaddr_reg:x16; val_offset:2004; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 2004, x17, x15, 24, x18)

inst_1528:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1a826a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x516bff and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7ccb4f and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e9a826a; op2val:0x40516bff; op3val:0x3f7ccb4f; valaddr_reg:x16; val_offset:2016; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 2016, x17, x15, 32, x18)

inst_1529:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1a826a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x516bff and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7ccb4f and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e9a826a; op2val:0x40516bff; op3val:0x3f7ccb4f; valaddr_reg:x16; val_offset:2028; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 2028, x17, x15, 40, x18)
addi x16,x16,2040

inst_1530:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1a826a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x516bff and fs3 == 0 and fe3 == 0x7e and fm3 == 0x7ccb4f and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e9a826a; op2val:0x40516bff; op3val:0x3f7ccb4f; valaddr_reg:x16; val_offset:0; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 0, x17, x15, 48, x18)

inst_1531:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4a44f5 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x2e435c and fs3 == 0 and fe3 == 0x7c and fm3 == 0x09b017 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f4a44f5; op2val:0x3e2e435c; op3val:0x3e09b017; valaddr_reg:x16; val_offset:12; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 12, x17, x15, 56, x18)

inst_1532:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4a44f5 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x2e435c and fs3 == 0 and fe3 == 0x7c and fm3 == 0x09b017 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f4a44f5; op2val:0x3e2e435c; op3val:0x3e09b017; valaddr_reg:x16; val_offset:24; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 24, x17, x15, 64, x18)

inst_1533:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4a44f5 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x2e435c and fs3 == 0 and fe3 == 0x7c and fm3 == 0x09b017 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f4a44f5; op2val:0x3e2e435c; op3val:0x3e09b017; valaddr_reg:x16; val_offset:36; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 36, x17, x15, 72, x18)

inst_1534:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4a44f5 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x2e435c and fs3 == 0 and fe3 == 0x7c and fm3 == 0x09b017 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f4a44f5; op2val:0x3e2e435c; op3val:0x3e09b017; valaddr_reg:x16; val_offset:48; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 48, x17, x15, 80, x18)

inst_1535:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4a44f5 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x2e435c and fs3 == 0 and fe3 == 0x7c and fm3 == 0x09b017 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f4a44f5; op2val:0x3e2e435c; op3val:0x3e09b017; valaddr_reg:x16; val_offset:60; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 60, x17, x15, 88, x18)

inst_1536:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x042955 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55b286 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x5ca51d and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f042955; op2val:0x3fd5b286; op3val:0x3f5ca51d; valaddr_reg:x16; val_offset:72; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 72, x17, x15, 96, x18)

inst_1537:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x042955 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55b286 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x5ca51d and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f042955; op2val:0x3fd5b286; op3val:0x3f5ca51d; valaddr_reg:x16; val_offset:84; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 84, x17, x15, 104, x18)

inst_1538:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x042955 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55b286 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x5ca51d and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f042955; op2val:0x3fd5b286; op3val:0x3f5ca51d; valaddr_reg:x16; val_offset:96; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 96, x17, x15, 112, x18)

inst_1539:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x042955 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55b286 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x5ca51d and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f042955; op2val:0x3fd5b286; op3val:0x3f5ca51d; valaddr_reg:x16; val_offset:108; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 108, x17, x15, 120, x18)

inst_1540:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x042955 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55b286 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x5ca51d and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f042955; op2val:0x3fd5b286; op3val:0x3f5ca51d; valaddr_reg:x16; val_offset:120; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 120, x17, x15, 128, x18)

inst_1541:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x300e5f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1599c9 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x4dc441 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f300e5f; op2val:0x3f9599c9; op3val:0x3f4dc441; valaddr_reg:x16; val_offset:132; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 132, x17, x15, 136, x18)

inst_1542:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x300e5f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1599c9 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x4dc441 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f300e5f; op2val:0x3f9599c9; op3val:0x3f4dc441; valaddr_reg:x16; val_offset:144; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 144, x17, x15, 144, x18)

inst_1543:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x300e5f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1599c9 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x4dc441 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f300e5f; op2val:0x3f9599c9; op3val:0x3f4dc441; valaddr_reg:x16; val_offset:156; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 156, x17, x15, 152, x18)

inst_1544:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x300e5f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1599c9 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x4dc441 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f300e5f; op2val:0x3f9599c9; op3val:0x3f4dc441; valaddr_reg:x16; val_offset:168; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 168, x17, x15, 160, x18)

inst_1545:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x300e5f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1599c9 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x4dc441 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f300e5f; op2val:0x3f9599c9; op3val:0x3f4dc441; valaddr_reg:x16; val_offset:180; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 180, x17, x15, 168, x18)

inst_1546:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6217cb and fs2 == 0 and fe2 == 0x7d and fm2 == 0x43848c and fs3 == 0 and fe3 == 0x7d and fm3 == 0x2cad30 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f6217cb; op2val:0x3ec3848c; op3val:0x3eacad30; valaddr_reg:x16; val_offset:192; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 192, x17, x15, 176, x18)

inst_1547:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6217cb and fs2 == 0 and fe2 == 0x7d and fm2 == 0x43848c and fs3 == 0 and fe3 == 0x7d and fm3 == 0x2cad30 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f6217cb; op2val:0x3ec3848c; op3val:0x3eacad30; valaddr_reg:x16; val_offset:204; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 204, x17, x15, 184, x18)

inst_1548:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6217cb and fs2 == 0 and fe2 == 0x7d and fm2 == 0x43848c and fs3 == 0 and fe3 == 0x7d and fm3 == 0x2cad30 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f6217cb; op2val:0x3ec3848c; op3val:0x3eacad30; valaddr_reg:x16; val_offset:216; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 216, x17, x15, 192, x18)

inst_1549:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6217cb and fs2 == 0 and fe2 == 0x7d and fm2 == 0x43848c and fs3 == 0 and fe3 == 0x7d and fm3 == 0x2cad30 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f6217cb; op2val:0x3ec3848c; op3val:0x3eacad30; valaddr_reg:x16; val_offset:228; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 228, x17, x15, 200, x18)

inst_1550:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6217cb and fs2 == 0 and fe2 == 0x7d and fm2 == 0x43848c and fs3 == 0 and fe3 == 0x7d and fm3 == 0x2cad30 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f6217cb; op2val:0x3ec3848c; op3val:0x3eacad30; valaddr_reg:x16; val_offset:240; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 240, x17, x15, 208, x18)

inst_1551:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x759939 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7d5c03 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x7310b4 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3df59939; op2val:0x407d5c03; op3val:0x3ef310b4; valaddr_reg:x16; val_offset:252; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 252, x17, x15, 216, x18)

inst_1552:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x759939 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7d5c03 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x7310b4 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3df59939; op2val:0x407d5c03; op3val:0x3ef310b4; valaddr_reg:x16; val_offset:264; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 264, x17, x15, 224, x18)

inst_1553:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x759939 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7d5c03 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x7310b4 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3df59939; op2val:0x407d5c03; op3val:0x3ef310b4; valaddr_reg:x16; val_offset:276; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 276, x17, x15, 232, x18)

inst_1554:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x759939 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7d5c03 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x7310b4 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3df59939; op2val:0x407d5c03; op3val:0x3ef310b4; valaddr_reg:x16; val_offset:288; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 288, x17, x15, 240, x18)

inst_1555:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x759939 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7d5c03 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x7310b4 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3df59939; op2val:0x407d5c03; op3val:0x3ef310b4; valaddr_reg:x16; val_offset:300; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 300, x17, x15, 248, x18)

inst_1556:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x525a0c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0dce50 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x690a3e and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ed25a0c; op2val:0x400dce50; op3val:0x3f690a3e; valaddr_reg:x16; val_offset:312; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 312, x17, x15, 256, x18)

inst_1557:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x525a0c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0dce50 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x690a3e and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ed25a0c; op2val:0x400dce50; op3val:0x3f690a3e; valaddr_reg:x16; val_offset:324; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 324, x17, x15, 264, x18)

inst_1558:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x525a0c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0dce50 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x690a3e and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ed25a0c; op2val:0x400dce50; op3val:0x3f690a3e; valaddr_reg:x16; val_offset:336; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 336, x17, x15, 272, x18)

inst_1559:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x525a0c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0dce50 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x690a3e and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ed25a0c; op2val:0x400dce50; op3val:0x3f690a3e; valaddr_reg:x16; val_offset:348; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 348, x17, x15, 280, x18)

inst_1560:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x525a0c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0dce50 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x690a3e and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ed25a0c; op2val:0x400dce50; op3val:0x3f690a3e; valaddr_reg:x16; val_offset:360; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 360, x17, x15, 288, x18)

inst_1561:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4be7c9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5f97c6 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3217cb and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ecbe7c9; op2val:0x3fdf97c6; op3val:0x3f3217cb; valaddr_reg:x16; val_offset:372; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 372, x17, x15, 296, x18)

inst_1562:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4be7c9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5f97c6 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3217cb and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ecbe7c9; op2val:0x3fdf97c6; op3val:0x3f3217cb; valaddr_reg:x16; val_offset:384; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 384, x17, x15, 304, x18)

inst_1563:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4be7c9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5f97c6 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3217cb and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ecbe7c9; op2val:0x3fdf97c6; op3val:0x3f3217cb; valaddr_reg:x16; val_offset:396; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 396, x17, x15, 312, x18)

inst_1564:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4be7c9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5f97c6 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3217cb and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ecbe7c9; op2val:0x3fdf97c6; op3val:0x3f3217cb; valaddr_reg:x16; val_offset:408; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 408, x17, x15, 320, x18)

inst_1565:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4be7c9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5f97c6 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3217cb and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ecbe7c9; op2val:0x3fdf97c6; op3val:0x3f3217cb; valaddr_reg:x16; val_offset:420; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 420, x17, x15, 328, x18)

inst_1566:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x78b956 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x28452c and fs3 == 0 and fe3 == 0x7e and fm3 == 0x237cd5 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f78b956; op2val:0x3f28452c; op3val:0x3f237cd5; valaddr_reg:x16; val_offset:432; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 432, x17, x15, 336, x18)

inst_1567:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x78b956 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x28452c and fs3 == 0 and fe3 == 0x7e and fm3 == 0x237cd5 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f78b956; op2val:0x3f28452c; op3val:0x3f237cd5; valaddr_reg:x16; val_offset:444; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 444, x17, x15, 344, x18)

inst_1568:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x78b956 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x28452c and fs3 == 0 and fe3 == 0x7e and fm3 == 0x237cd5 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f78b956; op2val:0x3f28452c; op3val:0x3f237cd5; valaddr_reg:x16; val_offset:456; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 456, x17, x15, 352, x18)

inst_1569:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x78b956 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x28452c and fs3 == 0 and fe3 == 0x7e and fm3 == 0x237cd5 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f78b956; op2val:0x3f28452c; op3val:0x3f237cd5; valaddr_reg:x16; val_offset:468; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 468, x17, x15, 360, x18)

inst_1570:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x78b956 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x28452c and fs3 == 0 and fe3 == 0x7e and fm3 == 0x237cd5 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f78b956; op2val:0x3f28452c; op3val:0x3f237cd5; valaddr_reg:x16; val_offset:480; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 480, x17, x15, 368, x18)

inst_1571:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4729b7 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x78c464 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x418934 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e4729b7; op2val:0x3df8c464; op3val:0x3cc18934; valaddr_reg:x16; val_offset:492; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 492, x17, x15, 376, x18)

inst_1572:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4729b7 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x78c464 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x418934 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e4729b7; op2val:0x3df8c464; op3val:0x3cc18934; valaddr_reg:x16; val_offset:504; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 504, x17, x15, 384, x18)

inst_1573:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4729b7 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x78c464 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x418934 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e4729b7; op2val:0x3df8c464; op3val:0x3cc18934; valaddr_reg:x16; val_offset:516; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 516, x17, x15, 392, x18)

inst_1574:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4729b7 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x78c464 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x418934 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e4729b7; op2val:0x3df8c464; op3val:0x3cc18934; valaddr_reg:x16; val_offset:528; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 528, x17, x15, 400, x18)

inst_1575:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4729b7 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x78c464 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x418934 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e4729b7; op2val:0x3df8c464; op3val:0x3cc18934; valaddr_reg:x16; val_offset:540; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 540, x17, x15, 408, x18)

inst_1576:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x35faaf and fs2 == 0 and fe2 == 0x7e and fm2 == 0x59951d and fs3 == 0 and fe3 == 0x7d and fm3 == 0x1aab7e and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eb5faaf; op2val:0x3f59951d; op3val:0x3e9aab7e; valaddr_reg:x16; val_offset:552; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 552, x17, x15, 416, x18)

inst_1577:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x35faaf and fs2 == 0 and fe2 == 0x7e and fm2 == 0x59951d and fs3 == 0 and fe3 == 0x7d and fm3 == 0x1aab7e and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eb5faaf; op2val:0x3f59951d; op3val:0x3e9aab7e; valaddr_reg:x16; val_offset:564; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 564, x17, x15, 424, x18)

inst_1578:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x35faaf and fs2 == 0 and fe2 == 0x7e and fm2 == 0x59951d and fs3 == 0 and fe3 == 0x7d and fm3 == 0x1aab7e and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eb5faaf; op2val:0x3f59951d; op3val:0x3e9aab7e; valaddr_reg:x16; val_offset:576; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 576, x17, x15, 432, x18)

inst_1579:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x35faaf and fs2 == 0 and fe2 == 0x7e and fm2 == 0x59951d and fs3 == 0 and fe3 == 0x7d and fm3 == 0x1aab7e and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eb5faaf; op2val:0x3f59951d; op3val:0x3e9aab7e; valaddr_reg:x16; val_offset:588; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 588, x17, x15, 440, x18)

inst_1580:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x35faaf and fs2 == 0 and fe2 == 0x7e and fm2 == 0x59951d and fs3 == 0 and fe3 == 0x7d and fm3 == 0x1aab7e and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eb5faaf; op2val:0x3f59951d; op3val:0x3e9aab7e; valaddr_reg:x16; val_offset:600; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 600, x17, x15, 448, x18)

inst_1581:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x395230 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2ba2e4 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x787fa4 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3db95230; op2val:0x40aba2e4; op3val:0x3ef87fa4; valaddr_reg:x16; val_offset:612; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 612, x17, x15, 456, x18)

inst_1582:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x395230 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2ba2e4 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x787fa4 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3db95230; op2val:0x40aba2e4; op3val:0x3ef87fa4; valaddr_reg:x16; val_offset:624; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 624, x17, x15, 464, x18)

inst_1583:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x395230 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2ba2e4 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x787fa4 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3db95230; op2val:0x40aba2e4; op3val:0x3ef87fa4; valaddr_reg:x16; val_offset:636; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 636, x17, x15, 472, x18)

inst_1584:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x395230 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2ba2e4 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x787fa4 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3db95230; op2val:0x40aba2e4; op3val:0x3ef87fa4; valaddr_reg:x16; val_offset:648; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 648, x17, x15, 480, x18)

inst_1585:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x395230 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2ba2e4 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x787fa4 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3db95230; op2val:0x40aba2e4; op3val:0x3ef87fa4; valaddr_reg:x16; val_offset:660; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 660, x17, x15, 488, x18)

inst_1586:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x23be2a and fs2 == 0 and fe2 == 0x7b and fm2 == 0x575e5f and fs3 == 0 and fe3 == 0x7b and fm3 == 0x09c112 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f23be2a; op2val:0x3dd75e5f; op3val:0x3d89c112; valaddr_reg:x16; val_offset:672; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 672, x17, x15, 496, x18)

inst_1587:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x23be2a and fs2 == 0 and fe2 == 0x7b and fm2 == 0x575e5f and fs3 == 0 and fe3 == 0x7b and fm3 == 0x09c112 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f23be2a; op2val:0x3dd75e5f; op3val:0x3d89c112; valaddr_reg:x16; val_offset:684; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 684, x17, x15, 504, x18)

inst_1588:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x23be2a and fs2 == 0 and fe2 == 0x7b and fm2 == 0x575e5f and fs3 == 0 and fe3 == 0x7b and fm3 == 0x09c112 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f23be2a; op2val:0x3dd75e5f; op3val:0x3d89c112; valaddr_reg:x16; val_offset:696; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 696, x17, x15, 512, x18)

inst_1589:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x23be2a and fs2 == 0 and fe2 == 0x7b and fm2 == 0x575e5f and fs3 == 0 and fe3 == 0x7b and fm3 == 0x09c112 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f23be2a; op2val:0x3dd75e5f; op3val:0x3d89c112; valaddr_reg:x16; val_offset:708; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 708, x17, x15, 520, x18)

inst_1590:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x23be2a and fs2 == 0 and fe2 == 0x7b and fm2 == 0x575e5f and fs3 == 0 and fe3 == 0x7b and fm3 == 0x09c112 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f23be2a; op2val:0x3dd75e5f; op3val:0x3d89c112; valaddr_reg:x16; val_offset:720; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 720, x17, x15, 528, x18)

inst_1591:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4c9380 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5cc861 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x306ee3 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f4c9380; op2val:0x3edcc861; op3val:0x3eb06ee3; valaddr_reg:x16; val_offset:732; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 732, x17, x15, 536, x18)

inst_1592:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4c9380 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5cc861 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x306ee3 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f4c9380; op2val:0x3edcc861; op3val:0x3eb06ee3; valaddr_reg:x16; val_offset:744; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 744, x17, x15, 544, x18)

inst_1593:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4c9380 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5cc861 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x306ee3 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f4c9380; op2val:0x3edcc861; op3val:0x3eb06ee3; valaddr_reg:x16; val_offset:756; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 756, x17, x15, 552, x18)

inst_1594:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4c9380 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5cc861 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x306ee3 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f4c9380; op2val:0x3edcc861; op3val:0x3eb06ee3; valaddr_reg:x16; val_offset:768; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 768, x17, x15, 560, x18)

inst_1595:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4c9380 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5cc861 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x306ee3 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f4c9380; op2val:0x3edcc861; op3val:0x3eb06ee3; valaddr_reg:x16; val_offset:780; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 780, x17, x15, 568, x18)

inst_1596:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x472d19 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x076004 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x52a6fa and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d472d19; op2val:0x41076004; op3val:0x3ed2a6fa; valaddr_reg:x16; val_offset:792; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 792, x17, x15, 576, x18)

inst_1597:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x472d19 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x076004 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x52a6fa and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d472d19; op2val:0x41076004; op3val:0x3ed2a6fa; valaddr_reg:x16; val_offset:804; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 804, x17, x15, 584, x18)

inst_1598:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x472d19 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x076004 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x52a6fa and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d472d19; op2val:0x41076004; op3val:0x3ed2a6fa; valaddr_reg:x16; val_offset:816; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 816, x17, x15, 592, x18)

inst_1599:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x472d19 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x076004 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x52a6fa and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d472d19; op2val:0x41076004; op3val:0x3ed2a6fa; valaddr_reg:x16; val_offset:828; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 828, x17, x15, 600, x18)

inst_1600:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x472d19 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x076004 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x52a6fa and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d472d19; op2val:0x41076004; op3val:0x3ed2a6fa; valaddr_reg:x16; val_offset:840; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 840, x17, x15, 608, x18)

inst_1601:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3aebea and fs2 == 0 and fe2 == 0x7f and fm2 == 0x788418 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3574fe and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ebaebea; op2val:0x3ff88418; op3val:0x3f3574fe; valaddr_reg:x16; val_offset:852; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 852, x17, x15, 616, x18)

inst_1602:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3aebea and fs2 == 0 and fe2 == 0x7f and fm2 == 0x788418 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3574fe and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ebaebea; op2val:0x3ff88418; op3val:0x3f3574fe; valaddr_reg:x16; val_offset:864; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 864, x17, x15, 624, x18)

inst_1603:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3aebea and fs2 == 0 and fe2 == 0x7f and fm2 == 0x788418 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3574fe and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ebaebea; op2val:0x3ff88418; op3val:0x3f3574fe; valaddr_reg:x16; val_offset:876; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 876, x17, x15, 632, x18)

inst_1604:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3aebea and fs2 == 0 and fe2 == 0x7f and fm2 == 0x788418 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3574fe and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ebaebea; op2val:0x3ff88418; op3val:0x3f3574fe; valaddr_reg:x16; val_offset:888; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 888, x17, x15, 640, x18)

inst_1605:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3aebea and fs2 == 0 and fe2 == 0x7f and fm2 == 0x788418 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3574fe and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ebaebea; op2val:0x3ff88418; op3val:0x3f3574fe; valaddr_reg:x16; val_offset:900; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 900, x17, x15, 648, x18)

inst_1606:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x67fe02 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x62cba4 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x4d86c9 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f67fe02; op2val:0x3f62cba4; op3val:0x3f4d86c9; valaddr_reg:x16; val_offset:912; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 912, x17, x15, 656, x18)

inst_1607:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x67fe02 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x62cba4 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x4d86c9 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f67fe02; op2val:0x3f62cba4; op3val:0x3f4d86c9; valaddr_reg:x16; val_offset:924; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 924, x17, x15, 664, x18)

inst_1608:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x67fe02 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x62cba4 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x4d86c9 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f67fe02; op2val:0x3f62cba4; op3val:0x3f4d86c9; valaddr_reg:x16; val_offset:936; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 936, x17, x15, 672, x18)

inst_1609:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x67fe02 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x62cba4 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x4d86c9 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f67fe02; op2val:0x3f62cba4; op3val:0x3f4d86c9; valaddr_reg:x16; val_offset:948; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 948, x17, x15, 680, x18)

inst_1610:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x67fe02 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x62cba4 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x4d86c9 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f67fe02; op2val:0x3f62cba4; op3val:0x3f4d86c9; valaddr_reg:x16; val_offset:960; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 960, x17, x15, 688, x18)

inst_1611:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x47e75a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x35e15e and fs3 == 0 and fe3 == 0x7e and fm3 == 0x0e068f and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e47e75a; op2val:0x4035e15e; op3val:0x3f0e068f; valaddr_reg:x16; val_offset:972; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 972, x17, x15, 696, x18)

inst_1612:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x47e75a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x35e15e and fs3 == 0 and fe3 == 0x7e and fm3 == 0x0e068f and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e47e75a; op2val:0x4035e15e; op3val:0x3f0e068f; valaddr_reg:x16; val_offset:984; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 984, x17, x15, 704, x18)

inst_1613:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x47e75a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x35e15e and fs3 == 0 and fe3 == 0x7e and fm3 == 0x0e068f and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e47e75a; op2val:0x4035e15e; op3val:0x3f0e068f; valaddr_reg:x16; val_offset:996; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 996, x17, x15, 712, x18)

inst_1614:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x47e75a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x35e15e and fs3 == 0 and fe3 == 0x7e and fm3 == 0x0e068f and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e47e75a; op2val:0x4035e15e; op3val:0x3f0e068f; valaddr_reg:x16; val_offset:1008; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1008, x17, x15, 720, x18)

inst_1615:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x47e75a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x35e15e and fs3 == 0 and fe3 == 0x7e and fm3 == 0x0e068f and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e47e75a; op2val:0x4035e15e; op3val:0x3f0e068f; valaddr_reg:x16; val_offset:1020; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1020, x17, x15, 728, x18)

inst_1616:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x682854 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x61837c and fs3 == 0 and fe3 == 0x7c and fm3 == 0x4c82af and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f682854; op2val:0x3e61837c; op3val:0x3e4c82af; valaddr_reg:x16; val_offset:1032; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1032, x17, x15, 736, x18)

inst_1617:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x682854 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x61837c and fs3 == 0 and fe3 == 0x7c and fm3 == 0x4c82af and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f682854; op2val:0x3e61837c; op3val:0x3e4c82af; valaddr_reg:x16; val_offset:1044; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1044, x17, x15, 744, x18)

inst_1618:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x682854 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x61837c and fs3 == 0 and fe3 == 0x7c and fm3 == 0x4c82af and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f682854; op2val:0x3e61837c; op3val:0x3e4c82af; valaddr_reg:x16; val_offset:1056; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1056, x17, x15, 752, x18)

inst_1619:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x682854 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x61837c and fs3 == 0 and fe3 == 0x7c and fm3 == 0x4c82af and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f682854; op2val:0x3e61837c; op3val:0x3e4c82af; valaddr_reg:x16; val_offset:1068; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1068, x17, x15, 760, x18)

inst_1620:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x682854 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x61837c and fs3 == 0 and fe3 == 0x7c and fm3 == 0x4c82af and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f682854; op2val:0x3e61837c; op3val:0x3e4c82af; valaddr_reg:x16; val_offset:1080; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1080, x17, x15, 768, x18)

inst_1621:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x1f7474 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0889b8 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x2a174c and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e1f7474; op2val:0x408889b8; op3val:0x3f2a174c; valaddr_reg:x16; val_offset:1092; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1092, x17, x15, 776, x18)

inst_1622:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x1f7474 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0889b8 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x2a174c and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e1f7474; op2val:0x408889b8; op3val:0x3f2a174c; valaddr_reg:x16; val_offset:1104; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1104, x17, x15, 784, x18)

inst_1623:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x1f7474 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0889b8 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x2a174c and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e1f7474; op2val:0x408889b8; op3val:0x3f2a174c; valaddr_reg:x16; val_offset:1116; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1116, x17, x15, 792, x18)

inst_1624:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x1f7474 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0889b8 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x2a174c and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e1f7474; op2val:0x408889b8; op3val:0x3f2a174c; valaddr_reg:x16; val_offset:1128; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1128, x17, x15, 800, x18)

inst_1625:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x1f7474 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0889b8 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x2a174c and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e1f7474; op2val:0x408889b8; op3val:0x3f2a174c; valaddr_reg:x16; val_offset:1140; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1140, x17, x15, 808, x18)

inst_1626:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x495a9a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c99e8 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x20ed41 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e495a9a; op2val:0x3fcc99e8; op3val:0x3ea0ed41; valaddr_reg:x16; val_offset:1152; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1152, x17, x15, 816, x18)

inst_1627:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x495a9a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c99e8 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x20ed41 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e495a9a; op2val:0x3fcc99e8; op3val:0x3ea0ed41; valaddr_reg:x16; val_offset:1164; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1164, x17, x15, 824, x18)

inst_1628:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x495a9a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c99e8 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x20ed41 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e495a9a; op2val:0x3fcc99e8; op3val:0x3ea0ed41; valaddr_reg:x16; val_offset:1176; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1176, x17, x15, 832, x18)

inst_1629:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x495a9a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c99e8 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x20ed41 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e495a9a; op2val:0x3fcc99e8; op3val:0x3ea0ed41; valaddr_reg:x16; val_offset:1188; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1188, x17, x15, 840, x18)

inst_1630:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x495a9a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c99e8 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x20ed41 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e495a9a; op2val:0x3fcc99e8; op3val:0x3ea0ed41; valaddr_reg:x16; val_offset:1200; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1200, x17, x15, 848, x18)

inst_1631:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x478d8f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x713694 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3c06cf and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e478d8f; op2val:0x40713694; op3val:0x3f3c06cf; valaddr_reg:x16; val_offset:1212; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1212, x17, x15, 856, x18)

inst_1632:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x478d8f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x713694 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3c06cf and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e478d8f; op2val:0x40713694; op3val:0x3f3c06cf; valaddr_reg:x16; val_offset:1224; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1224, x17, x15, 864, x18)

inst_1633:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x478d8f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x713694 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3c06cf and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e478d8f; op2val:0x40713694; op3val:0x3f3c06cf; valaddr_reg:x16; val_offset:1236; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1236, x17, x15, 872, x18)

inst_1634:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x478d8f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x713694 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3c06cf and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e478d8f; op2val:0x40713694; op3val:0x3f3c06cf; valaddr_reg:x16; val_offset:1248; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1248, x17, x15, 880, x18)

inst_1635:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x478d8f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x713694 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3c06cf and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e478d8f; op2val:0x40713694; op3val:0x3f3c06cf; valaddr_reg:x16; val_offset:1260; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1260, x17, x15, 888, x18)

inst_1636:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4e988b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0d99f9 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x648c8d and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f4e988b; op2val:0x3f0d99f9; op3val:0x3ee48c8d; valaddr_reg:x16; val_offset:1272; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1272, x17, x15, 896, x18)

inst_1637:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4e988b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0d99f9 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x648c8d and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f4e988b; op2val:0x3f0d99f9; op3val:0x3ee48c8d; valaddr_reg:x16; val_offset:1284; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1284, x17, x15, 904, x18)

inst_1638:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4e988b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0d99f9 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x648c8d and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f4e988b; op2val:0x3f0d99f9; op3val:0x3ee48c8d; valaddr_reg:x16; val_offset:1296; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1296, x17, x15, 912, x18)

inst_1639:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4e988b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0d99f9 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x648c8d and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f4e988b; op2val:0x3f0d99f9; op3val:0x3ee48c8d; valaddr_reg:x16; val_offset:1308; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1308, x17, x15, 920, x18)

inst_1640:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4e988b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0d99f9 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x648c8d and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f4e988b; op2val:0x3f0d99f9; op3val:0x3ee48c8d; valaddr_reg:x16; val_offset:1320; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1320, x17, x15, 928, x18)

inst_1641:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6c6342 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x304bab and fs3 == 0 and fe3 == 0x7d and fm3 == 0x22ca1d and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eec6342; op2val:0x3f304bab; op3val:0x3ea2ca1d; valaddr_reg:x16; val_offset:1332; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1332, x17, x15, 936, x18)

inst_1642:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6c6342 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x304bab and fs3 == 0 and fe3 == 0x7d and fm3 == 0x22ca1d and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eec6342; op2val:0x3f304bab; op3val:0x3ea2ca1d; valaddr_reg:x16; val_offset:1344; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1344, x17, x15, 944, x18)

inst_1643:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6c6342 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x304bab and fs3 == 0 and fe3 == 0x7d and fm3 == 0x22ca1d and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eec6342; op2val:0x3f304bab; op3val:0x3ea2ca1d; valaddr_reg:x16; val_offset:1356; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1356, x17, x15, 952, x18)

inst_1644:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6c6342 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x304bab and fs3 == 0 and fe3 == 0x7d and fm3 == 0x22ca1d and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eec6342; op2val:0x3f304bab; op3val:0x3ea2ca1d; valaddr_reg:x16; val_offset:1368; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1368, x17, x15, 960, x18)

inst_1645:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6c6342 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x304bab and fs3 == 0 and fe3 == 0x7d and fm3 == 0x22ca1d and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eec6342; op2val:0x3f304bab; op3val:0x3ea2ca1d; valaddr_reg:x16; val_offset:1380; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1380, x17, x15, 968, x18)

inst_1646:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0a5466 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0acfe7 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x1603ac and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e8a5466; op2val:0x400acfe7; op3val:0x3f1603ac; valaddr_reg:x16; val_offset:1392; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1392, x17, x15, 976, x18)

inst_1647:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0a5466 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0acfe7 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x1603ac and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e8a5466; op2val:0x400acfe7; op3val:0x3f1603ac; valaddr_reg:x16; val_offset:1404; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1404, x17, x15, 984, x18)

inst_1648:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0a5466 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0acfe7 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x1603ac and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e8a5466; op2val:0x400acfe7; op3val:0x3f1603ac; valaddr_reg:x16; val_offset:1416; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1416, x17, x15, 992, x18)

inst_1649:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0a5466 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0acfe7 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x1603ac and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e8a5466; op2val:0x400acfe7; op3val:0x3f1603ac; valaddr_reg:x16; val_offset:1428; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1428, x17, x15, 1000, x18)

inst_1650:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0a5466 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0acfe7 and fs3 == 0 and fe3 == 0x7e and fm3 == 0x1603ac and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e8a5466; op2val:0x400acfe7; op3val:0x3f1603ac; valaddr_reg:x16; val_offset:1440; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1440, x17, x15, 1008, x18)

inst_1651:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3a3075 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x0b7226 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x4ad6aa and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f3a3075; op2val:0x3e8b7226; op3val:0x3e4ad6aa; valaddr_reg:x16; val_offset:1452; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1452, x17, x15, 1016, x18)

inst_1652:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3a3075 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x0b7226 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x4ad6aa and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f3a3075; op2val:0x3e8b7226; op3val:0x3e4ad6aa; valaddr_reg:x16; val_offset:1464; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1464, x17, x15, 1024, x18)

inst_1653:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3a3075 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x0b7226 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x4ad6aa and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f3a3075; op2val:0x3e8b7226; op3val:0x3e4ad6aa; valaddr_reg:x16; val_offset:1476; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1476, x17, x15, 1032, x18)

inst_1654:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3a3075 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x0b7226 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x4ad6aa and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f3a3075; op2val:0x3e8b7226; op3val:0x3e4ad6aa; valaddr_reg:x16; val_offset:1488; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1488, x17, x15, 1040, x18)

inst_1655:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3a3075 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x0b7226 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x4ad6aa and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f3a3075; op2val:0x3e8b7226; op3val:0x3e4ad6aa; valaddr_reg:x16; val_offset:1500; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1500, x17, x15, 1048, x18)

inst_1656:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x20788f and fs2 == 0 and fe2 == 0x7d and fm2 == 0x3bbfb3 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x6b6076 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f20788f; op2val:0x3ebbbfb3; op3val:0x3e6b6076; valaddr_reg:x16; val_offset:1512; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1512, x17, x15, 1056, x18)

inst_1657:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x20788f and fs2 == 0 and fe2 == 0x7d and fm2 == 0x3bbfb3 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x6b6076 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f20788f; op2val:0x3ebbbfb3; op3val:0x3e6b6076; valaddr_reg:x16; val_offset:1524; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1524, x17, x15, 1064, x18)

inst_1658:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x20788f and fs2 == 0 and fe2 == 0x7d and fm2 == 0x3bbfb3 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x6b6076 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f20788f; op2val:0x3ebbbfb3; op3val:0x3e6b6076; valaddr_reg:x16; val_offset:1536; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1536, x17, x15, 1072, x18)

inst_1659:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x20788f and fs2 == 0 and fe2 == 0x7d and fm2 == 0x3bbfb3 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x6b6076 and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f20788f; op2val:0x3ebbbfb3; op3val:0x3e6b6076; valaddr_reg:x16; val_offset:1548; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1548, x17, x15, 1080, x18)

inst_1660:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x20788f and fs2 == 0 and fe2 == 0x7d and fm2 == 0x3bbfb3 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x6b6076 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f20788f; op2val:0x3ebbbfb3; op3val:0x3e6b6076; valaddr_reg:x16; val_offset:1560; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1560, x17, x15, 1088, x18)

inst_1661:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x079d6a and fs2 == 0 and fe2 == 0x7d and fm2 == 0x68387e and fs3 == 0 and fe3 == 0x7c and fm3 == 0x76092c and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f079d6a; op2val:0x3ee8387e; op3val:0x3e76092c; valaddr_reg:x16; val_offset:1572; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1572, x17, x15, 1096, x18)

inst_1662:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x079d6a and fs2 == 0 and fe2 == 0x7d and fm2 == 0x68387e and fs3 == 0 and fe3 == 0x7c and fm3 == 0x76092c and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f079d6a; op2val:0x3ee8387e; op3val:0x3e76092c; valaddr_reg:x16; val_offset:1584; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1584, x17, x15, 1104, x18)

inst_1663:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x079d6a and fs2 == 0 and fe2 == 0x7d and fm2 == 0x68387e and fs3 == 0 and fe3 == 0x7c and fm3 == 0x76092c and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f079d6a; op2val:0x3ee8387e; op3val:0x3e76092c; valaddr_reg:x16; val_offset:1596; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1596, x17, x15, 1112, x18)

inst_1664:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x079d6a and fs2 == 0 and fe2 == 0x7d and fm2 == 0x68387e and fs3 == 0 and fe3 == 0x7c and fm3 == 0x76092c and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f079d6a; op2val:0x3ee8387e; op3val:0x3e76092c; valaddr_reg:x16; val_offset:1608; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1608, x17, x15, 1120, x18)

inst_1665:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x079d6a and fs2 == 0 and fe2 == 0x7d and fm2 == 0x68387e and fs3 == 0 and fe3 == 0x7c and fm3 == 0x76092c and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f079d6a; op2val:0x3ee8387e; op3val:0x3e76092c; valaddr_reg:x16; val_offset:1620; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1620, x17, x15, 1128, x18)

inst_1666:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7fe265 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x2cb704 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x2ca30b and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f7fe265; op2val:0x3eacb704; op3val:0x3eaca30b; valaddr_reg:x16; val_offset:1632; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1632, x17, x15, 1136, x18)

inst_1667:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7fe265 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x2cb704 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x2ca30b and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f7fe265; op2val:0x3eacb704; op3val:0x3eaca30b; valaddr_reg:x16; val_offset:1644; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1644, x17, x15, 1144, x18)

inst_1668:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7fe265 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x2cb704 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x2ca30b and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f7fe265; op2val:0x3eacb704; op3val:0x3eaca30b; valaddr_reg:x16; val_offset:1656; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1656, x17, x15, 1152, x18)

inst_1669:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7fe265 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x2cb704 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x2ca30b and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f7fe265; op2val:0x3eacb704; op3val:0x3eaca30b; valaddr_reg:x16; val_offset:1668; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1668, x17, x15, 1160, x18)

inst_1670:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7fe265 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x2cb704 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x2ca30b and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f7fe265; op2val:0x3eacb704; op3val:0x3eaca30b; valaddr_reg:x16; val_offset:1680; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1680, x17, x15, 1168, x18)

inst_1671:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x03d4c5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x37881a and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3d065f and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f03d4c5; op2val:0x3fb7881a; op3val:0x3f3d065f; valaddr_reg:x16; val_offset:1692; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1692, x17, x15, 1176, x18)

inst_1672:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x03d4c5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x37881a and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3d065f and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f03d4c5; op2val:0x3fb7881a; op3val:0x3f3d065f; valaddr_reg:x16; val_offset:1704; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1704, x17, x15, 1184, x18)

inst_1673:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x03d4c5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x37881a and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3d065f and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f03d4c5; op2val:0x3fb7881a; op3val:0x3f3d065f; valaddr_reg:x16; val_offset:1716; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1716, x17, x15, 1192, x18)

inst_1674:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x03d4c5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x37881a and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3d065f and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f03d4c5; op2val:0x3fb7881a; op3val:0x3f3d065f; valaddr_reg:x16; val_offset:1728; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1728, x17, x15, 1200, x18)

inst_1675:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x03d4c5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x37881a and fs3 == 0 and fe3 == 0x7e and fm3 == 0x3d065f and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f03d4c5; op2val:0x3fb7881a; op3val:0x3f3d065f; valaddr_reg:x16; val_offset:1740; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1740, x17, x15, 1208, x18)

inst_1676:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x539ea8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5c8df0 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x3651ad and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e539ea8; op2val:0x3f5c8df0; op3val:0x3e3651ad; valaddr_reg:x16; val_offset:1752; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1752, x17, x15, 1216, x18)

inst_1677:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x539ea8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5c8df0 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x3651ad and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e539ea8; op2val:0x3f5c8df0; op3val:0x3e3651ad; valaddr_reg:x16; val_offset:1764; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1764, x17, x15, 1224, x18)

inst_1678:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x539ea8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5c8df0 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x3651ad and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e539ea8; op2val:0x3f5c8df0; op3val:0x3e3651ad; valaddr_reg:x16; val_offset:1776; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1776, x17, x15, 1232, x18)

inst_1679:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x539ea8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5c8df0 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x3651ad and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e539ea8; op2val:0x3f5c8df0; op3val:0x3e3651ad; valaddr_reg:x16; val_offset:1788; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1788, x17, x15, 1240, x18)

inst_1680:
// fs1 == 0 and fe1 == 0x78 and fm1 == 0x143039 and fs2 == 0 and fe2 == 0x85 and fm2 == 0x47444b and fs3 == 0 and fe3 == 0x7e and fm3 == 0x66b20a and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3c143039; op2val:0x42c7444b; op3val:0x3f66b20a; valaddr_reg:x16; val_offset:1800; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1800, x17, x15, 1248, x18)

inst_1681:
// fs1 == 0 and fe1 == 0x78 and fm1 == 0x143039 and fs2 == 0 and fe2 == 0x85 and fm2 == 0x47444b and fs3 == 0 and fe3 == 0x7e and fm3 == 0x66b20a and rm_val == 1  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3c143039; op2val:0x42c7444b; op3val:0x3f66b20a; valaddr_reg:x16; val_offset:1812; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x1, 0, x16, 1812, x17, x15, 1256, x18)

inst_1682:
// fs1 == 0 and fe1 == 0x78 and fm1 == 0x143039 and fs2 == 0 and fe2 == 0x85 and fm2 == 0x47444b and fs3 == 0 and fe3 == 0x7e and fm3 == 0x66b20a and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3c143039; op2val:0x42c7444b; op3val:0x3f66b20a; valaddr_reg:x16; val_offset:1824; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1824, x17, x15, 1264, x18)

inst_1683:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2a2294 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1b6b4f and fs3 == 0 and fe3 == 0x7e and fm3 == 0x4e9482 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eaa2294; op2val:0x401b6b4f; op3val:0x3f4e9482; valaddr_reg:x16; val_offset:1836; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1836, x17, x15, 1272, x18)

inst_1684:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2a2294 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1b6b4f and fs3 == 0 and fe3 == 0x7e and fm3 == 0x4e9482 and rm_val == 3  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eaa2294; op2val:0x401b6b4f; op3val:0x3f4e9482; valaddr_reg:x16; val_offset:1848; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x3, 0, x16, 1848, x17, x15, 1280, x18)

inst_1685:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2a2294 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1b6b4f and fs3 == 0 and fe3 == 0x7e and fm3 == 0x4e9482 and rm_val == 2  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eaa2294; op2val:0x401b6b4f; op3val:0x3f4e9482; valaddr_reg:x16; val_offset:1860; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x2, 0, x16, 1860, x17, x15, 1288, x18)

inst_1686:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2a2294 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1b6b4f and fs3 == 0 and fe3 == 0x7e and fm3 == 0x4e9482 and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3eaa2294; op2val:0x401b6b4f; op3val:0x3f4e9482; valaddr_reg:x16; val_offset:1872; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1872, x17, x15, 1296, x18)

inst_1687:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6b19be and fs2 == 0 and fe2 == 0x7d and fm2 == 0x3514b1 and fs3 == 0 and fe3 == 0x7d and fm3 == 0x264c34 and rm_val == 4  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f6b19be; op2val:0x3eb514b1; op3val:0x3ea64c34; valaddr_reg:x16; val_offset:1884; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x4, 0, x16, 1884, x17, x15, 1304, x18)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
test_fp:
.word 0x3e539ea8
.word 0x3f5c8df0
.word 0x3e3651ad
.word 0x3c143039
.word 0x42c7444b
.word 0x3f66b20a
.word 0x3c143039
.word 0x3c143039
.word 0x3f66b20a
.word 0x3c143039
.word 0x42c7444b
.word 0x3f66b20a
.word 0x3c143039
.word 0x42c7444b
.word 0x42c7444b
.word 0x3c143039
.word 0x3c143039
.word 0x3c143039
.word 0x3eaa2294
.word 0x3eaa2294
.word 0x3eaa2294
.word 0x3eaa2294
.word 0x401b6b4f
.word 0x3eaa2294
.word 0x3eaa2294
.word 0x401b6b4f
.word 0x401b6b4f
.word 0x3eaa2294
.word 0x401b6b4f
.word 0x3f4e9482
.word 0x3eaa2294
.word 0x3eaa2294
.word 0x3f4e9482
.word 0x3f6b19be
.word 0x3eb514b1
.word 0x3f6b19be
.word 0x3f6b19be
.word 0x3eb514b1
.word 0x3ea64c34
.word 0x3f6b19be
.word 0x3eb514b1
.word 0x3ea64c34
.word 0x3f6b19be
.word 0x3eb514b1
.word 0x3ea64c34
.word 0x3f6b19be
.word 0x3eb514b1
.word 0x3ea64c34
.word 0x3e14e79a
.word 0x40cb3dff
.word 0x3f6c6f6e
.word 0x3e14e79a
.word 0x40cb3dff
.word 0x3f6c6f6e
.word 0x3e14e79a
.word 0x40cb3dff
.word 0x3f6c6f6e
.word 0x3e14e79a
.word 0x40cb3dff
.word 0x3f6c6f6e
.word 0x3e14e79a
.word 0x40cb3dff
.word 0x3f6c6f6e
.word 0x3f79c1b4
.word 0x3db4457d
.word 0x3dafdfff
.word 0x3f79c1b4
.word 0x3db4457d
.word 0x3dafdfff
.word 0x3f79c1b4
.word 0x3db4457d
.word 0x3dafdfff
.word 0x3f79c1b4
.word 0x3db4457d
.word 0x3dafdfff
.word 0x3f79c1b4
.word 0x3db4457d
.word 0x3dafdfff
.word 0x3ea6f6f6
.word 0x3f8dc26a
.word 0x3eb8e9a5
.word 0x3ea6f6f6
.word 0x3f8dc26a
.word 0x3eb8e9a5
.word 0x3ea6f6f6
.word 0x3f8dc26a
.word 0x3eb8e9a5
.word 0x3ea6f6f6
.word 0x3f8dc26a
.word 0x3eb8e9a5
.word 0x3ea6f6f6
.word 0x3f8dc26a
.word 0x3eb8e9a5
.word 0x3ef166a1
.word 0x3e3189bb
.word 0x3da769d5
.word 0x3ef166a1
.word 0x3e3189bb
.word 0x3da769d5
.word 0x3ef166a1
.word 0x3e3189bb
.word 0x3da769d5
.word 0x3ef166a1
.word 0x3e3189bb
.word 0x3da769d5
.word 0x3ef166a1
.word 0x3e3189bb
.word 0x3da769d5
.word 0x3f4c9870
.word 0x3cf0c52e
.word 0x3cc06c80
.word 0x3f4c9870
.word 0x3cf0c52e
.word 0x3cc06c80
.word 0x3f4c9870
.word 0x3cf0c52e
.word 0x3cc06c80
.word 0x3f4c9870
.word 0x3cf0c52e
.word 0x3cc06c80
.word 0x3f4c9870
.word 0x3cf0c52e
.word 0x3cc06c80
.word 0x3ee07f8d
.word 0x3f9175e5
.word 0x3eff1f46
.word 0x3ee07f8d
.word 0x3f9175e5
.word 0x3eff1f46
.word 0x3ee07f8d
.word 0x3f9175e5
.word 0x3eff1f46
.word 0x3ee07f8d
.word 0x3f9175e5
.word 0x3eff1f46
.word 0x3ee07f8d
.word 0x3f9175e5
.word 0x3eff1f46
.word 0x3f4f4268
.word 0x3e68911f
.word 0x3e3c49ad
.word 0x3f4f4268
.word 0x3e68911f
.word 0x3e3c49ad
.word 0x3f4f4268
.word 0x3e68911f
.word 0x3e3c49ad
.word 0x3f4f4268
.word 0x3e68911f
.word 0x3e3c49ad
.word 0x3f4f4268
.word 0x3e68911f
.word 0x3e3c49ad
.word 0x3eb95ddd
.word 0x3ffec5eb
.word 0x3f387a71
.word 0x3eb95ddd
.word 0x3ffec5eb
.word 0x3f387a71
.word 0x3eb95ddd
.word 0x3ffec5eb
.word 0x3f387a71
.word 0x3eb95ddd
.word 0x3ffec5eb
.word 0x3f387a71
.word 0x3eb95ddd
.word 0x3ffec5eb
.word 0x3f387a71
.word 0x3f212e25
.word 0x3ec6af6d
.word 0x3e7a3049
.word 0x3f212e25
.word 0x3ec6af6d
.word 0x3e7a3049
.word 0x3f212e25
.word 0x3ec6af6d
.word 0x3e7a3049
.word 0x3f212e25
.word 0x3ec6af6d
.word 0x3e7a3049
.word 0x3f212e25
.word 0x3ec6af6d
.word 0x3e7a3049
.word 0x3f24a42e
.word 0x3f7aebea
.word 0x3f21600e
.word 0x3f24a42e
.word 0x3f7aebea
.word 0x3f21600e
.word 0x3f24a42e
.word 0x3f7aebea
.word 0x3f21600e
.word 0x3f24a42e
.word 0x3f7aebea
.word 0x3f21600e
.word 0x3f24a42e
.word 0x3f7aebea
.word 0x3f21600e
.word 0x3cc0363e
.word 0x41c68e38
.word 0x3f1514bd
.word 0x3cc0363e
.word 0x41c68e38
.word 0x3f1514bd
.word 0x3cc0363e
.word 0x41c68e38
.word 0x3f1514bd
.word 0x3cc0363e
.word 0x41c68e38
.word 0x3f1514bd
.word 0x3cc0363e
.word 0x41c68e38
.word 0x3f1514bd
.word 0x3f734aea
.word 0x3f515c38
.word 0x3f46f7ce
.word 0x3f734aea
.word 0x3f515c38
.word 0x3f46f7ce
.word 0x3f734aea
.word 0x3f515c38
.word 0x3f46f7ce
.word 0x3f734aea
.word 0x3f515c38
.word 0x3f46f7ce
.word 0x3f734aea
.word 0x3f515c38
.word 0x3f46f7ce
.word 0x3b66e09b
.word 0x437c9187
.word 0x3f63c858
.word 0x3b66e09b
.word 0x437c9187
.word 0x3f63c858
.word 0x3b66e09b
.word 0x437c9187
.word 0x3f63c858
.word 0x3b66e09b
.word 0x437c9187
.word 0x3f63c858
.word 0x3b66e09b
.word 0x437c9187
.word 0x3f63c858
.word 0x3f078fc4
.word 0x3fbffec7
.word 0x3f4b565c
.word 0x3f078fc4
.word 0x3fbffec7
.word 0x3f4b565c
.word 0x3f078fc4
.word 0x3fbffec7
.word 0x3f4b565c
.word 0x3f078fc4
.word 0x3fbffec7
.word 0x3f4b565c
.word 0x3f078fc4
.word 0x3fbffec7
.word 0x3f4b565c
.word 0x3f0439e9
.word 0x3e00e07f
.word 0x3d8521d2
.word 0x3f0439e9
.word 0x3e00e07f
.word 0x3d8521d2
.word 0x3f0439e9
.word 0x3e00e07f
.word 0x3d8521d2
.word 0x3f0439e9
.word 0x3e00e07f
.word 0x3d8521d2
.word 0x3f0439e9
.word 0x3e00e07f
.word 0x3d8521d2
.word 0x3eb5f632
.word 0x3f9db770
.word 0x3ee034bf
.word 0x3eb5f632
.word 0x3f9db770
.word 0x3ee034bf
.word 0x3eb5f632
.word 0x3f9db770
.word 0x3ee034bf
.word 0x3eb5f632
.word 0x3f9db770
.word 0x3ee034bf
.word 0x3eb5f632
.word 0x3f9db770
.word 0x3ee034bf
.word 0x3f748e97
.word 0x3f81eada
.word 0x3f78386a
.word 0x3f748e97
.word 0x3f81eada
.word 0x3f78386a
.word 0x3f748e97
.word 0x3f81eada
.word 0x3f78386a
.word 0x3f748e97
.word 0x3f81eada
.word 0x3f78386a
.word 0x3f748e97
.word 0x3f81eada
.word 0x3f78386a
.word 0x3e498bf9
.word 0x40a1858a
.word 0x3f7e5455
.word 0x3e498bf9
.word 0x40a1858a
.word 0x3f7e5455
.word 0x3e498bf9
.word 0x40a1858a
.word 0x3f7e5455
.word 0x3e498bf9
.word 0x40a1858a
.word 0x3f7e5455
.word 0x3e498bf9
.word 0x40a1858a
.word 0x3f7e5455
.word 0x3f25b6b0
.word 0x3fc2a2af
.word 0x3f7bfb81
.word 0x3f25b6b0
.word 0x3fc2a2af
.word 0x3f7bfb81
.word 0x3f25b6b0
.word 0x3fc2a2af
.word 0x3f7bfb81
.word 0x3f25b6b0
.word 0x3fc2a2af
.word 0x3f7bfb81
.word 0x3f25b6b0
.word 0x3fc2a2af
.word 0x3f7bfb81
.word 0x3f533288
.word 0x3e3cc90d
.word 0x3e1bbefa
.word 0x3f533288
.word 0x3e3cc90d
.word 0x3e1bbefa
.word 0x3f533288
.word 0x3e3cc90d
.word 0x3e1bbefa
.word 0x3f533288
.word 0x3e3cc90d
.word 0x3e1bbefa
.word 0x3f533288
.word 0x3e3cc90d
.word 0x3e1bbefa
.word 0x3ec2f990
.word 0x3fc3953d
.word 0x3f14f5c2
.word 0x3ec2f990
.word 0x3fc3953d
.word 0x3f14f5c2
.word 0x3ec2f990
.word 0x3fc3953d
.word 0x3f14f5c2
.word 0x3ec2f990
.word 0x3fc3953d
.word 0x3f14f5c2
.word 0x3ec2f990
.word 0x3fc3953d
.word 0x3f14f5c2
.word 0x3f2396b4
.word 0x3daf9c96
.word 0x3d607029
.word 0x3f2396b4
.word 0x3daf9c96
.word 0x3d607029
.word 0x3f2396b4
.word 0x3daf9c96
.word 0x3d607029
.word 0x3f2396b4
.word 0x3daf9c96
.word 0x3d607029
.word 0x3f2396b4
.word 0x3daf9c96
.word 0x3d607029
.word 0x3f3c5d09
.word 0x3e980803
.word 0x3e5fba45
.word 0x3f3c5d09
.word 0x3e980803
.word 0x3e5fba45
.word 0x3f3c5d09
.word 0x3e980803
.word 0x3e5fba45
.word 0x3f3c5d09
.word 0x3e980803
.word 0x3e5fba45
.word 0x3f3c5d09
.word 0x3e980803
.word 0x3e5fba45
.word 0x3cf3ebe8
.word 0x40ca9779
.word 0x3e410879
.word 0x3cf3ebe8
.word 0x40ca9779
.word 0x3e410879
.word 0x3cf3ebe8
.word 0x40ca9779
.word 0x3e410879
.word 0x3cf3ebe8
.word 0x40ca9779
.word 0x3e410879
.word 0x3cf3ebe8
.word 0x40ca9779
.word 0x3e410879
.word 0x3e2e8ce6
.word 0x4013048c
.word 0x3ec87c04
.word 0x3e2e8ce6
.word 0x4013048c
.word 0x3ec87c04
.word 0x3e2e8ce6
.word 0x4013048c
.word 0x3ec87c04
.word 0x3e2e8ce6
.word 0x4013048c
.word 0x3ec87c04
.word 0x3e2e8ce6
.word 0x4013048c
.word 0x3ec87c04
.word 0x3ec66370
.word 0x3f991e22
.word 0x3eed5191
.word 0x3ec66370
.word 0x3f991e22
.word 0x3eed5191
.word 0x3ec66370
.word 0x3f991e22
.word 0x3eed5191
.word 0x3ec66370
.word 0x3f991e22
.word 0x3eed5191
.word 0x3ec66370
.word 0x3f991e22
.word 0x3eed5191
.word 0x3f273b07
.word 0x3f08d964
.word 0x3eb2cabc
.word 0x3f273b07
.word 0x3f08d964
.word 0x3eb2cabc
.word 0x3f273b07
.word 0x3f08d964
.word 0x3eb2cabc
.word 0x3f273b07
.word 0x3f08d964
.word 0x3eb2cabc
.word 0x3f273b07
.word 0x3f08d964
.word 0x3eb2cabc
.word 0x3ed3a1ab
.word 0x40090a7d
.word 0x3f629462
.word 0x3ed3a1ab
.word 0x40090a7d
.word 0x3f629462
.word 0x3ed3a1ab
.word 0x40090a7d
.word 0x3f629462
.word 0x3ed3a1ab
.word 0x40090a7d
.word 0x3f629462
.word 0x3ed3a1ab
.word 0x40090a7d
.word 0x3f629462
.word 0x3f051c60
.word 0x3fe4c9f9
.word 0x3f6dec95
.word 0x3f051c60
.word 0x3fe4c9f9
.word 0x3f6dec95
.word 0x3f051c60
.word 0x3fe4c9f9
.word 0x3f6dec95
.word 0x3f051c60
.word 0x3fe4c9f9
.word 0x3f6dec95
.word 0x3f051c60
.word 0x3fe4c9f9
.word 0x3f6dec95
.word 0x3f2336b3
.word 0x3e0f9076
.word 0x3db70f50
.word 0x3f2336b3
.word 0x3e0f9076
.word 0x3db70f50
.word 0x3f2336b3
.word 0x3e0f9076
.word 0x3db70f50
.word 0x3f2336b3
.word 0x3e0f9076
.word 0x3db70f50
.word 0x3f2336b3
.word 0x3e0f9076
.word 0x3db70f50
.word 0x3ef8412a
.word 0x3fab3fe6
.word 0x3f26117f
.word 0x3ef8412a
.word 0x3fab3fe6
.word 0x3f26117f
.word 0x3ef8412a
.word 0x3fab3fe6
.word 0x3f26117f
.word 0x3ef8412a
.word 0x3fab3fe6
.word 0x3f26117f
.word 0x3ef8412a
.word 0x3fab3fe6
.word 0x3f26117f
.word 0x3e2dc67a
.word 0x3e0d9195
.word 0x3cc03248
.word 0x3e2dc67a
.word 0x3e0d9195
.word 0x3cc03248
.word 0x3e2dc67a
.word 0x3e0d9195
.word 0x3cc03248
.word 0x3e2dc67a
.word 0x3e0d9195
.word 0x3cc03248
.word 0x3e2dc67a
.word 0x3e0d9195
.word 0x3cc03248
.word 0x3eb96f8d
.word 0x3f7ea600
.word 0x3eb874ec
.word 0x3eb96f8d
.word 0x3f7ea600
.word 0x3eb874ec
.word 0x3eb96f8d
.word 0x3f7ea600
.word 0x3eb874ec
.word 0x3eb96f8d
.word 0x3f7ea600
.word 0x3eb874ec
.word 0x3eb96f8d
.word 0x3f7ea600
.word 0x3eb874ec
.word 0x3ec916e7
.word 0x3fa91f1e
.word 0x3f04d891
.word 0x3ec916e7
.word 0x3fa91f1e
.word 0x3f04d891
.word 0x3ec916e7
.word 0x3fa91f1e
.word 0x3f04d891
.word 0x3ec916e7
.word 0x3fa91f1e
.word 0x3f04d891
.word 0x3ec916e7
.word 0x3fa91f1e
.word 0x3f04d891
.word 0x3f7cf45e
.word 0x3dee3f4c
.word 0x3deb69ba
.word 0x3f7cf45e
.word 0x3dee3f4c
.word 0x3deb69ba
.word 0x3f7cf45e
.word 0x3dee3f4c
.word 0x3deb69ba
.word 0x3f7cf45e
.word 0x3dee3f4c
.word 0x3deb69ba
.word 0x3f7cf45e
.word 0x3dee3f4c
.word 0x3deb69ba
.word 0x3f0bdd66
.word 0x3a5b111f
.word 0x39ef5f83
.word 0x3f0bdd66
.word 0x3a5b111f
.word 0x39ef5f83
.word 0x3f0bdd66
.word 0x3a5b111f
.word 0x39ef5f83
.word 0x3f0bdd66
.word 0x3a5b111f
.word 0x39ef5f83
.word 0x3f0bdd66
.word 0x3a5b111f
.word 0x39ef5f83
.word 0x3f080570
.word 0x3fa1f923
.word 0x3f2c1f97
.word 0x3f080570
.word 0x3fa1f923
.word 0x3f2c1f97
.word 0x3f080570
.word 0x3fa1f923
.word 0x3f2c1f97
.word 0x3f080570
.word 0x3fa1f923
.word 0x3f2c1f97
.word 0x3f080570
.word 0x3fa1f923
.word 0x3f2c1f97
.word 0x3ed934da
.word 0x3f42d0f1
.word 0x3ea54b55
.word 0x3ed934da
.word 0x3f42d0f1
.word 0x3ea54b55
.word 0x3ed934da
.word 0x3f42d0f1
.word 0x3ea54b55
.word 0x3ed934da
.word 0x3f42d0f1
.word 0x3ea54b55
.word 0x3ed934da
.word 0x3f42d0f1
.word 0x3ea54b55
.word 0x3de36bf1
.word 0x40f1f15f
.word 0x3f56ef0b
.word 0x3de36bf1
.word 0x40f1f15f
.word 0x3f56ef0b
.word 0x3de36bf1
.word 0x40f1f15f
.word 0x3f56ef0b
.word 0x3de36bf1
.word 0x40f1f15f
.word 0x3f56ef0b
.word 0x3de36bf1
.word 0x40f1f15f
.word 0x3f56ef0b
.word 0x5471c5bf
.word 0xbff2dc41
.word 0x5355186f
.word 0x5471c5bf
.word 0xbff2dc41
.word 0x5355186f
.word 0x5471c5bf
.word 0xbff2dc41
.word 0x5355186f
.word 0x5471c5bf
.word 0xbff2dc41
.word 0x5355186f
.word 0x5471c5bf
.word 0xbff2dc41
.word 0x5355186f
.word 0x541c1d96
.word 0xbfac5d38
.word 0x5496e346
.word 0x541c1d96
.word 0xbfac5d38
.word 0x5496e346
.word 0x541c1d96
.word 0xbfac5d38
.word 0x5496e346
.word 0x541c1d96
.word 0xbfac5d38
.word 0x5496e346
.word 0x541c1d96
.word 0xbfac5d38
.word 0x5496e346
.word 0x54528eb6
.word 0xbf7fd496
.word 0x5496ca7f
.word 0x54528eb6
.word 0xbf7fd496
.word 0x5496ca7f
.word 0x54528eb6
.word 0xbf7fd496
.word 0x5496ca7f
.word 0x54528eb6
.word 0xbf7fd496
.word 0x5496ca7f
.word 0x54528eb6
.word 0xbf7fd496
.word 0x5496ca7f
.word 0x543eb488
.word 0xbe829d33
.word 0x54e7acce
.word 0x543eb488
.word 0xbe829d33
.word 0x54e7acce
.word 0x543eb488
.word 0xbe829d33
.word 0x54e7acce
.word 0x543eb488
.word 0xbe829d33
.word 0x54e7acce
.word 0x543eb488
.word 0xbe829d33
.word 0x54e7acce
.word 0x5438a526
.word 0xbf4bf11d
.word 0x54b67391
.word 0x5438a526
.word 0xbf4bf11d
.word 0x54b67391
.word 0x5438a526
.word 0xbf4bf11d
.word 0x54b67391
.word 0x5438a526
.word 0xbf4bf11d
.word 0x54b67391
.word 0x5438a526
.word 0xbf4bf11d
.word 0x54b67391
.word 0x54e8da13
.word 0xbf2f6ead
.word 0x5440dc82
.word 0x54e8da13
.word 0xbf2f6ead
.word 0x5440dc82
.word 0x54e8da13
.word 0xbf2f6ead
.word 0x5440dc82
.word 0x54e8da13
.word 0xbf2f6ead
.word 0x5440dc82
.word 0x54e8da13
.word 0xbf2f6ead
.word 0x5440dc82
.word 0x547f7b4d
.word 0xbfbf97fc
.word 0x540196a8
.word 0x547f7b4d
.word 0xbfbf97fc
.word 0x540196a8
.word 0x547f7b4d
.word 0xbfbf97fc
.word 0x540196a8
.word 0x547f7b4d
.word 0xbfbf97fc
.word 0x540196a8
.word 0x547f7b4d
.word 0xbfbf97fc
.word 0x540196a8
.word 0x54e724ec
.word 0xbf3456d6
.word 0x543a5744
.word 0x54e724ec
.word 0xbf3456d6
.word 0x543a5744
.word 0x54e724ec
.word 0xbf3456d6
.word 0x543a5744
.word 0x54e724ec
.word 0xbf3456d6
.word 0x543a5744
.word 0x54e724ec
.word 0xbf3456d6
.word 0x543a5744
.word 0x5374b52c
.word 0xc03e9722
.word 0x54a4e888
.word 0x5374b52c
.word 0xc03e9722
.word 0x54a4e888
.word 0x5374b52c
.word 0xc03e9722
.word 0x54a4e888
.word 0x5374b52c
.word 0xc03e9722
.word 0x54a4e888
.word 0x5374b52c
.word 0xc03e9722
.word 0x54a4e888
.word 0x544b091b
.word 0xbf8887d5
.word 0x5493b76e
.word 0x544b091b
.word 0xbf8887d5
.word 0x5493b76e
.word 0x544b091b
.word 0xbf8887d5
.word 0x5493b76e
.word 0x544b091b
.word 0xbf8887d5
.word 0x5493b76e
.word 0x544b091b
.word 0xbf8887d5
.word 0x5493b76e
.word 0x54bcb281
.word 0xbf4dfed5
.word 0x5450526f
.word 0x54bcb281
.word 0xbf4dfed5
.word 0x5450526f
.word 0x54bcb281
.word 0xbf4dfed5
.word 0x5450526f
.word 0x54bcb281
.word 0xbf4dfed5
.word 0x5450526f
.word 0x54bcb281
.word 0xbf4dfed5
.word 0x5450526f
.word 0x53c541d5
.word 0xbee82ba3
.word 0x54e9a357
.word 0x53c541d5
.word 0xbee82ba3
.word 0x54e9a357
.word 0x53c541d5
.word 0xbee82ba3
.word 0x54e9a357
.word 0x53c541d5
.word 0xbee82ba3
.word 0x54e9a357
.word 0x53c541d5
.word 0xbee82ba3
.word 0x54e9a357
.word 0x5497a2d7
.word 0xbf2e8f1f
.word 0x54989a8b
.word 0x5497a2d7
.word 0xbf2e8f1f
.word 0x54989a8b
.word 0x5497a2d7
.word 0xbf2e8f1f
.word 0x54989a8b
.word 0x5497a2d7
.word 0xbf2e8f1f
.word 0x54989a8b
.word 0x5497a2d7
.word 0xbf2e8f1f
.word 0x54989a8b
.word 0x54905fbd
.word 0xbf1ffe02
.word 0x54a5c549
.word 0x54905fbd
.word 0xbf1ffe02
.word 0x54a5c549
.word 0x54905fbd
.word 0xbf1ffe02
.word 0x54a5c549
.word 0x54905fbd
.word 0xbf1ffe02
.word 0x54a5c549
.word 0x54905fbd
.word 0xbf1ffe02
.word 0x54a5c549
.word 0x53e43210
.word 0xc03a3964
.word 0x543400ef
.word 0x53e43210
.word 0xc03a3964
.word 0x543400ef
.word 0x53e43210
.word 0xc03a3964
.word 0x543400ef
.word 0x53e43210
.word 0xc03a3964
.word 0x543400ef
.word 0x53e43210
.word 0xc03a3964
.word 0x543400ef
.word 0x54ab5448
.word 0xbfa49e88
.word 0x538e9f40
.word 0x54ab5448
.word 0xbfa49e88
.word 0x538e9f40
.word 0x54ab5448
.word 0xbfa49e88
.word 0x538e9f40
.word 0x54ab5448
.word 0xbfa49e88
.word 0x538e9f40
.word 0x54ab5448
.word 0xbfa49e88
.word 0x538e9f40
.word 0x53b59877
.word 0xc0a00f02
.word 0x536760fd
.word 0x53b59877
.word 0xc0a00f02
.word 0x536760fd
.word 0x53b59877
.word 0xc0a00f02
.word 0x536760fd
.word 0x53b59877
.word 0xc0a00f02
.word 0x536760fd
.word 0x53b59877
.word 0xc0a00f02
.word 0x536760fd
.word 0x549d5977
.word 0xbfa814a1
.word 0x53c584db
.word 0x549d5977
.word 0xbfa814a1
.word 0x53c584db
.word 0x549d5977
.word 0xbfa814a1
.word 0x53c584db
.word 0x549d5977
.word 0xbfa814a1
.word 0x53c584db
.word 0x549d5977
.word 0xbfa814a1
.word 0x53c584db
.word 0x5479c157
.word 0xbfb1aca6
.word 0x542551c5
.word 0x5479c157
.word 0xbfb1aca6
.word 0x542551c5
.word 0x5479c157
.word 0xbfb1aca6
.word 0x542551c5
.word 0x5479c157
.word 0xbfb1aca6
.word 0x542551c5
.word 0x5479c157
.word 0xbfb1aca6
.word 0x542551c5
.word 0x54b1c72a
.word 0xbf0f09df
.word 0x549caae4
.word 0x54b1c72a
.word 0xbf0f09df
.word 0x549caae4
.word 0x54b1c72a
.word 0xbf0f09df
.word 0x549caae4
.word 0x54b1c72a
.word 0xbf0f09df
.word 0x549caae4
.word 0x54b1c72a
.word 0xbf0f09df
.word 0x549caae4
.word 0x5427915e
.word 0xbfe2e480
.word 0x5456f832
.word 0x5427915e
.word 0xbfe2e480
.word 0x5456f832
.word 0x5427915e
.word 0xbfe2e480
.word 0x5456f832
.word 0x5427915e
.word 0xbfe2e480
.word 0x5456f832
.word 0x5427915e
.word 0xbfe2e480
.word 0x5456f832
.word 0x5242ac0b
.word 0xc203b48e
.word 0x53dec549
.word 0x5242ac0b
.word 0xc203b48e
.word 0x53dec549
.word 0x5242ac0b
.word 0xc203b48e
.word 0x53dec549
.word 0x5242ac0b
.word 0xc203b48e
.word 0x53dec549
.word 0x5242ac0b
.word 0xc203b48e
.word 0x53dec549
.word 0x538a299c
.word 0xc0d5bb2d
.word 0x534a65bc
.word 0x538a299c
.word 0xc0d5bb2d
.word 0x534a65bc
.word 0x538a299c
.word 0xc0d5bb2d
.word 0x534a65bc
.word 0x538a299c
.word 0xc0d5bb2d
.word 0x534a65bc
.word 0x538a299c
.word 0xc0d5bb2d
.word 0x534a65bc
.word 0x540d23b8
.word 0xc03f6cba
.word 0x53b3b33c
.word 0x540d23b8
.word 0xc03f6cba
.word 0x53b3b33c
.word 0x540d23b8
.word 0xc03f6cba
.word 0x53b3b33c
.word 0x540d23b8
.word 0xc03f6cba
.word 0x53b3b33c
.word 0x540d23b8
.word 0xc03f6cba
.word 0x53b3b33c
.word 0x547a41f7
.word 0xbff39bee
.word 0x530ed79d
.word 0x547a41f7
.word 0xbff39bee
.word 0x530ed79d
.word 0x547a41f7
.word 0xbff39bee
.word 0x530ed79d
.word 0x547a41f7
.word 0xbff39bee
.word 0x530ed79d
.word 0x547a41f7
.word 0xbff39bee
.word 0x530ed79d
.word 0x53731fff
.word 0xc0a219c2
.word 0x544c1a93
.word 0x53731fff
.word 0xc0a219c2
.word 0x544c1a93
.word 0x53731fff
.word 0xc0a219c2
.word 0x544c1a93
.word 0x53731fff
.word 0xc0a219c2
.word 0x544c1a93
.word 0x53731fff
.word 0xc0a219c2
.word 0x544c1a93
.word 0x54cb306c
.word 0xbf8b727a
.word 0x538a8ec4
.word 0x54cb306c
.word 0xbf8b727a
.word 0x538a8ec4
.word 0x54cb306c
.word 0xbf8b727a
.word 0x538a8ec4
.word 0x54cb306c
.word 0xbf8b727a
.word 0x538a8ec4
.word 0x54cb306c
.word 0xbf8b727a
.word 0x538a8ec4
.word 0x54e6ab4b
.word 0xbf7d9eb8
.word 0x535bcd8e
.word 0x54e6ab4b
.word 0xbf7d9eb8
.word 0x535bcd8e
.word 0x54e6ab4b
.word 0xbf7d9eb8
.word 0x535bcd8e
.word 0x54e6ab4b
.word 0xbf7d9eb8
.word 0x535bcd8e
.word 0x54e6ab4b
.word 0xbf7d9eb8
.word 0x535bcd8e
.word 0x54a41ef6
.word 0xbe597f5c
.word 0x54dd2407
.word 0x54a41ef6
.word 0xbe597f5c
.word 0x54dd2407
.word 0x54a41ef6
.word 0xbe597f5c
.word 0x54dd2407
.word 0x54a41ef6
.word 0xbe597f5c
.word 0x54dd2407
.word 0x54a41ef6
.word 0xbe597f5c
.word 0x54dd2407
.word 0x539d0b62
.word 0xbfb47478
.word 0x54c8a646
.word 0x539d0b62
.word 0xbfb47478
.word 0x54c8a646
.word 0x539d0b62
.word 0xbfb47478
.word 0x54c8a646
.word 0x539d0b62
.word 0xbfb47478
.word 0x54c8a646
.word 0x539d0b62
.word 0xbfb47478
.word 0x54c8a646
.word 0x5483ef14
.word 0xbe7ddadf
.word 0x54df4afb
.word 0x5483ef14
.word 0xbe7ddadf
.word 0x54df4afb
.word 0x5483ef14
.word 0xbe7ddadf
.word 0x54df4afb
.word 0x5483ef14
.word 0xbe7ddadf
.word 0x54df4afb
.word 0x5483ef14
.word 0xbe7ddadf
.word 0x54df4afb
.word 0x51f6a178
.word 0xc27c3473
.word 0x52d06864
.word 0x51f6a178
.word 0xc27c3473
.word 0x52d06864
.word 0x51f6a178
.word 0xc27c3473
.word 0x52d06864
.word 0x51f6a178
.word 0xc27c3473
.word 0x52d06864
.word 0x51f6a178
.word 0xc27c3473
.word 0x52d06864
.word 0x54e4cfea
.word 0xbf598df6
.word 0x53f6337f
.word 0x54e4cfea
.word 0xbf598df6
.word 0x53f6337f
.word 0x54e4cfea
.word 0xbf598df6
.word 0x53f6337f
.word 0x54e4cfea
.word 0xbf598df6
.word 0x53f6337f
.word 0x54e4cfea
.word 0xbf598df6
.word 0x53f6337f
.word 0x547dbb07
.word 0xbf0d1e1b
.word 0x54ba1113
.word 0x547dbb07
.word 0xbf0d1e1b
.word 0x54ba1113
.word 0x547dbb07
.word 0xbf0d1e1b
.word 0x54ba1113
.word 0x547dbb07
.word 0xbf0d1e1b
.word 0x54ba1113
.word 0x547dbb07
.word 0xbf0d1e1b
.word 0x54ba1113
.word 0x54bda29b
.word 0xbf77cfb6
.word 0x5410dc7e
.word 0x54bda29b
.word 0xbf77cfb6
.word 0x5410dc7e
.word 0x54bda29b
.word 0xbf77cfb6
.word 0x5410dc7e
.word 0x54bda29b
.word 0xbf77cfb6
.word 0x5410dc7e
.word 0x54bda29b
.word 0xbf77cfb6
.word 0x5410dc7e
.word 0x54da4abb
.word 0xbea9bb21
.word 0x54b7a28d
.word 0x54da4abb
.word 0xbea9bb21
.word 0x54b7a28d
.word 0x54da4abb
.word 0xbea9bb21
.word 0x54b7a28d
.word 0x54da4abb
.word 0xbea9bb21
.word 0x54b7a28d
.word 0x54da4abb
.word 0xbea9bb21
.word 0x54b7a28d
.word 0x5446d5f7
.word 0xbf8613e2
.word 0x5497dc8f
.word 0x5446d5f7
.word 0xbf8613e2
.word 0x5497dc8f
.word 0x5446d5f7
.word 0xbf8613e2
.word 0x5497dc8f
.word 0x5446d5f7
.word 0xbf8613e2
.word 0x5497dc8f
.word 0x5446d5f7
.word 0xbf8613e2
.word 0x5497dc8f
.word 0x540827e1
.word 0xc0263ebd
.word 0x541e5314
.word 0x540827e1
.word 0xc0263ebd
.word 0x541e5314
.word 0x540827e1
.word 0xc0263ebd
.word 0x541e5314
.word 0x540827e1
.word 0xc0263ebd
.word 0x541e5314
.word 0x540827e1
.word 0xc0263ebd
.word 0x541e5314
.word 0x5406be82
.word 0xc072e53c
.word 0x501d0384
.word 0x5406be82
.word 0xc072e53c
.word 0x501d0384
.word 0x5406be82
.word 0xc072e53c
.word 0x501d0384
.word 0x5406be82
.word 0xc072e53c
.word 0x501d0384
.word 0x5406be82
.word 0xc072e53c
.word 0x501d0384
.word 0x54889af5
.word 0xbfc584e3
.word 0x53b4cec0
.word 0x54889af5
.word 0xbfc584e3
.word 0x53b4cec0
.word 0x54889af5
.word 0xbfc584e3
.word 0x53b4cec0
.word 0x54889af5
.word 0xbfc584e3
.word 0x53b4cec0
.word 0x54889af5
.word 0xbfc584e3
.word 0x53b4cec0
.word 0x5364f57d
.word 0xc0a0b0c6
.word 0x546090ef
.word 0x5364f57d
.word 0xc0a0b0c6
.word 0x546090ef
.word 0x5364f57d
.word 0xc0a0b0c6
.word 0x546090ef
.word 0x5364f57d
.word 0xc0a0b0c6
.word 0x546090ef
.word 0x5364f57d
.word 0xc0a0b0c6
.word 0x546090ef
.word 0x5481fa00
.word 0xbfe868a9
.word 0x532004c5
.word 0x5481fa00
.word 0xbfe868a9
.word 0x532004c5
.word 0x5481fa00
.word 0xbfe868a9
.word 0x532004c5
.word 0x5481fa00
.word 0xbfe868a9
.word 0x532004c5
.word 0x5481fa00
.word 0xbfe868a9
.word 0x532004c5
.word 0x3f2e864a
.word 0x3efce651
.word 0x3eac6936
.word 0x3f2e864a
.word 0x3efce651
.word 0x3eac6936
.word 0x3f2e864a
.word 0x3efce651
.word 0x3eac6936
.word 0x3f2e864a
.word 0x3efce651
.word 0x3eac6936
.word 0x3f2e864a
.word 0x3efce651
.word 0x3eac6936
.word 0x3f38ed67
.word 0x3ef841a8
.word 0x3eb3556a
.word 0x3f38ed67
.word 0x3ef841a8
.word 0x3eb3556a
.word 0x3f38ed67
.word 0x3ef841a8
.word 0x3eb3556a
.word 0x3f38ed67
.word 0x3ef841a8
.word 0x3eb3556a
.word 0x3f38ed67
.word 0x3ef841a8
.word 0x3eb3556a
.word 0x3dd4b4e3
.word 0x410106e2
.word 0x3f5669be
.word 0x3dd4b4e3
.word 0x410106e2
.word 0x3f5669be
.word 0x3dd4b4e3
.word 0x410106e2
.word 0x3f5669be
.word 0x3dd4b4e3
.word 0x410106e2
.word 0x3f5669be
.word 0x3dd4b4e3
.word 0x410106e2
.word 0x3f5669be
.word 0x3be025b3
.word 0x428502b5
.word 0x3ee8ebeb
.word 0x3be025b3
.word 0x428502b5
.word 0x3ee8ebeb
.word 0x3be025b3
.word 0x428502b5
.word 0x3ee8ebeb
.word 0x3be025b3
.word 0x428502b5
.word 0x3ee8ebeb
.word 0x3be025b3
.word 0x428502b5
.word 0x3ee8ebeb
.word 0x3f12ebca
.word 0x3f8c4d1a
.word 0x3f210a65
.word 0x3f12ebca
.word 0x3f8c4d1a
.word 0x3f210a65
.word 0x3f12ebca
.word 0x3f8c4d1a
.word 0x3f210a65
.word 0x3f12ebca
.word 0x3f8c4d1a
.word 0x3f210a65
.word 0x3f12ebca
.word 0x3f8c4d1a
.word 0x3f210a65
.word 0x3cf3e34a
.word 0x41bbe8e4
.word 0x3f3304e6
.word 0x3cf3e34a
.word 0x41bbe8e4
.word 0x3f3304e6
.word 0x3cf3e34a
.word 0x41bbe8e4
.word 0x3f3304e6
.word 0x3cf3e34a
.word 0x41bbe8e4
.word 0x3f3304e6
.word 0x3cf3e34a
.word 0x41bbe8e4
.word 0x3f3304e6
.word 0x3f3f66a4
.word 0x3f7b72ac
.word 0x3f3bff5f
.word 0x3f3f66a4
.word 0x3f7b72ac
.word 0x3f3bff5f
.word 0x3f3f66a4
.word 0x3f7b72ac
.word 0x3f3bff5f
.word 0x3f3f66a4
.word 0x3f7b72ac
.word 0x3f3bff5f
.word 0x3f3f66a4
.word 0x3f7b72ac
.word 0x3f3bff5f
.word 0x3eb6466a
.word 0x3eea7852
.word 0x3e26f209
.word 0x3eb6466a
.word 0x3eea7852
.word 0x3e26f209
.word 0x3eb6466a
.word 0x3eea7852
.word 0x3e26f209
.word 0x3eb6466a
.word 0x3eea7852
.word 0x3e26f209
.word 0x3eb6466a
.word 0x3eea7852
.word 0x3e26f209
.word 0x3ce3b597
.word 0x4194f442
.word 0x3f047e3f
.word 0x3ce3b597
.word 0x4194f442
.word 0x3f047e3f
.word 0x3ce3b597
.word 0x4194f442
.word 0x3f047e3f
.word 0x3ce3b597
.word 0x4194f442
.word 0x3f047e3f
.word 0x3ce3b597
.word 0x4194f442
.word 0x3f047e3f
.word 0x3f3b1277
.word 0x3efd85f6
.word 0x3eb94324
.word 0x3f3b1277
.word 0x3efd85f6
.word 0x3eb94324
.word 0x3f3b1277
.word 0x3efd85f6
.word 0x3eb94324
.word 0x3f3b1277
.word 0x3efd85f6
.word 0x3eb94324
.word 0x3f3b1277
.word 0x3efd85f6
.word 0x3eb94324
.word 0x3ec316db
.word 0x3f835c97
.word 0x3ec83684
.word 0x3ec316db
.word 0x3f835c97
.word 0x3ec83684
.word 0x3ec316db
.word 0x3f835c97
.word 0x3ec83684
.word 0x3ec316db
.word 0x3f835c97
.word 0x3ec83684
.word 0x3ec316db
.word 0x3f835c97
.word 0x3ec83684
.word 0x3f11efeb
.word 0x3f3a9164
.word 0x3ed4b667
.word 0x3f11efeb
.word 0x3f3a9164
.word 0x3ed4b667
.word 0x3f11efeb
.word 0x3f3a9164
.word 0x3ed4b667
.word 0x3f11efeb
.word 0x3f3a9164
.word 0x3ed4b667
.word 0x3f11efeb
.word 0x3f3a9164
.word 0x3ed4b667
.word 0x3eb02424
.word 0x4029b985
.word 0x3f698f03
.word 0x3eb02424
.word 0x4029b985
.word 0x3f698f03
.word 0x3eb02424
.word 0x4029b985
.word 0x3f698f03
.word 0x3eb02424
.word 0x4029b985
.word 0x3f698f03
.word 0x3eb02424
.word 0x4029b985
.word 0x3f698f03
.word 0x3ee7f100
.word 0x3fb51333
.word 0x3f240ecb
.word 0x3ee7f100
.word 0x3fb51333
.word 0x3f240ecb
.word 0x3ee7f100
.word 0x3fb51333
.word 0x3f240ecb
.word 0x3ee7f100
.word 0x3fb51333
.word 0x3f240ecb
.word 0x3ee7f100
.word 0x3fb51333
.word 0x3f240ecb
.word 0x3f477bb8
.word 0x3f4a4503
.word 0x3f1d9d66
.word 0x3f477bb8
.word 0x3f4a4503
.word 0x3f1d9d66
.word 0x3f477bb8
.word 0x3f4a4503
.word 0x3f1d9d66
.word 0x3f477bb8
.word 0x3f4a4503
.word 0x3f1d9d66
.word 0x3f477bb8
.word 0x3f4a4503
.word 0x3f1d9d66
.word 0x3f5114c2
.word 0x3dbdb5c2
.word 0x3d9af0c6
.word 0x3f5114c2
.word 0x3dbdb5c2
.word 0x3d9af0c6
.word 0x3f5114c2
.word 0x3dbdb5c2
.word 0x3d9af0c6
.word 0x3f5114c2
.word 0x3dbdb5c2
.word 0x3d9af0c6
.word 0x3f5114c2
.word 0x3dbdb5c2
.word 0x3d9af0c6
.word 0x3f2488c9
.word 0x3fa25335
.word 0x3f50a814
.word 0x3f2488c9
.word 0x3fa25335
.word 0x3f50a814
.word 0x3f2488c9
.word 0x3fa25335
.word 0x3f50a814
.word 0x3f2488c9
.word 0x3fa25335
.word 0x3f50a814
.word 0x3f2488c9
.word 0x3fa25335
.word 0x3f50a814
.word 0x3f68eeea
.word 0x3e0cac9c
.word 0x3dffff6e
.word 0x3f68eeea
.word 0x3e0cac9c
.word 0x3dffff6e
.word 0x3f68eeea
.word 0x3e0cac9c
.word 0x3dffff6e
.word 0x3f68eeea
.word 0x3e0cac9c
.word 0x3dffff6e
.word 0x3f68eeea
.word 0x3e0cac9c
.word 0x3dffff6e
.word 0x3e8b0e60
.word 0x3fbf1e85
.word 0x3ecfa09d
.word 0x3e8b0e60
.word 0x3fbf1e85
.word 0x3ecfa09d
.word 0x3e8b0e60
.word 0x3fbf1e85
.word 0x3ecfa09d
.word 0x3e8b0e60
.word 0x3fbf1e85
.word 0x3ecfa09d
.word 0x3e8b0e60
.word 0x3fbf1e85
.word 0x3ecfa09d
.word 0x3df18fe8
.word 0x40d4414b
.word 0x3f4848c9
.word 0x3df18fe8
.word 0x40d4414b
.word 0x3f4848c9
.word 0x3df18fe8
.word 0x40d4414b
.word 0x3f4848c9
.word 0x3df18fe8
.word 0x40d4414b
.word 0x3f4848c9
.word 0x3df18fe8
.word 0x40d4414b
.word 0x3f4848c9
.word 0x3e8b9175
.word 0x3f8bb369
.word 0x3e985396
.word 0x3e8b9175
.word 0x3f8bb369
.word 0x3e985396
.word 0x3e8b9175
.word 0x3f8bb369
.word 0x3e985396
.word 0x3e8b9175
.word 0x3f8bb369
.word 0x3e985396
.word 0x3e8b9175
.word 0x3f8bb369
.word 0x3e985396
.word 0x3f589284
.word 0x3f8e7eba
.word 0x3f7118f6
.word 0x3f589284
.word 0x3f8e7eba
.word 0x3f7118f6
.word 0x3f589284
.word 0x3f8e7eba
.word 0x3f7118f6
.word 0x3f589284
.word 0x3f8e7eba
.word 0x3f7118f6
.word 0x3f589284
.word 0x3f8e7eba
.word 0x3f7118f6
.word 0x3f4a4717
.word 0x3f61729b
.word 0x3f322309
.word 0x3f4a4717
.word 0x3f61729b
.word 0x3f322309
.word 0x3f4a4717
.word 0x3f61729b
.word 0x3f322309
.word 0x3f4a4717
.word 0x3f61729b
.word 0x3f322309
.word 0x3f4a4717
.word 0x3f61729b
.word 0x3f322309
.word 0x3f76edb4
.word 0x3f82da8d
.word 0x3f7c6f09
.word 0x3f76edb4
.word 0x3f82da8d
.word 0x3f7c6f09
.word 0x3f76edb4
.word 0x3f82da8d
.word 0x3f7c6f09
.word 0x3f76edb4
.word 0x3f82da8d
.word 0x3f7c6f09
.word 0x3f76edb4
.word 0x3f82da8d
.word 0x3f7c6f09
.word 0x3eed2a9f
.word 0x3fe54760
.word 0x3f546940
.word 0x3eed2a9f
.word 0x3fe54760
.word 0x3f546940
.word 0x3eed2a9f
.word 0x3fe54760
.word 0x3f546940
.word 0x3eed2a9f
.word 0x3fe54760
.word 0x3f546940
.word 0x3eed2a9f
.word 0x3fe54760
.word 0x3f546940
.word 0x3df806b0
.word 0x40855b5c
.word 0x3f0133fd
.word 0x3df806b0
.word 0x40855b5c
.word 0x3f0133fd
.word 0x3df806b0
.word 0x40855b5c
.word 0x3f0133fd
.word 0x3df806b0
.word 0x40855b5c
.word 0x3f0133fd
.word 0x3df806b0
.word 0x40855b5c
.word 0x3f0133fd
.word 0x3ec18416
.word 0x4028c5e0
.word 0x3f7f2886
.word 0x3ec18416
.word 0x4028c5e0
.word 0x3f7f2886
.word 0x3ec18416
.word 0x4028c5e0
.word 0x3f7f2886
.word 0x3ec18416
.word 0x4028c5e0
.word 0x3f7f2886
.word 0x3ec18416
.word 0x4028c5e0
.word 0x3f7f2886
.word 0x3e819a7c
.word 0x3fab25b7
.word 0x3ead4a93
.word 0x3e819a7c
.word 0x3fab25b7
.word 0x3ead4a93
.word 0x3e819a7c
.word 0x3fab25b7
.word 0x3ead4a93
.word 0x3e819a7c
.word 0x3fab25b7
.word 0x3ead4a93
.word 0x3e819a7c
.word 0x3fab25b7
.word 0x3ead4a93
.word 0x3e903387
.word 0x4058d80e
.word 0x3f744a5c
.word 0x3e903387
.word 0x4058d80e
.word 0x3f744a5c
.word 0x3e903387
.word 0x4058d80e
.word 0x3f744a5c
.word 0x3e903387
.word 0x4058d80e
.word 0x3f744a5c
.word 0x3e903387
.word 0x4058d80e
.word 0x3f744a5c
.word 0x3f0c0b65
.word 0x3d0cadec
.word 0x3c99eac0
.word 0x3f0c0b65
.word 0x3d0cadec
.word 0x3c99eac0
.word 0x3f0c0b65
.word 0x3d0cadec
.word 0x3c99eac0
.word 0x3f0c0b65
.word 0x3d0cadec
.word 0x3c99eac0
.word 0x3f0c0b65
.word 0x3d0cadec
.word 0x3c99eac0
.word 0x3ee90ff7
.word 0x3e82666a
.word 0x3ded6eb1
.word 0x3ee90ff7
.word 0x3e82666a
.word 0x3ded6eb1
.word 0x3ee90ff7
.word 0x3e82666a
.word 0x3ded6eb1
.word 0x3ee90ff7
.word 0x3e82666a
.word 0x3ded6eb1
.word 0x3ee90ff7
.word 0x3e82666a
.word 0x3ded6eb1
.word 0x3eea93ee
.word 0x3fb6bd69
.word 0x3f2772bb
.word 0x3eea93ee
.word 0x3fb6bd69
.word 0x3f2772bb
.word 0x3eea93ee
.word 0x3fb6bd69
.word 0x3f2772bb
.word 0x3eea93ee
.word 0x3fb6bd69
.word 0x3f2772bb
.word 0x3eea93ee
.word 0x3fb6bd69
.word 0x3f2772bb
.word 0x3f0fe4ca
.word 0x3fa99655
.word 0x3f3ea513
.word 0x3f0fe4ca
.word 0x3fa99655
.word 0x3f3ea513
.word 0x3f0fe4ca
.word 0x3fa99655
.word 0x3f3ea513
.word 0x3f0fe4ca
.word 0x3fa99655
.word 0x3f3ea513
.word 0x3f0fe4ca
.word 0x3fa99655
.word 0x3f3ea513
.word 0x3c32e388
.word 0x414aa098
.word 0x3e0d97c2
.word 0x3c32e388
.word 0x414aa098
.word 0x3e0d97c2
.word 0x3c32e388
.word 0x414aa098
.word 0x3e0d97c2
.word 0x3c32e388
.word 0x414aa098
.word 0x3e0d97c2
.word 0x3c32e388
.word 0x414aa098
.word 0x3e0d97c2
.word 0x3e9709c1
.word 0x3f325538
.word 0x3e526e1f
.word 0x3e9709c1
.word 0x3f325538
.word 0x3e526e1f
.word 0x3e9709c1
.word 0x3f325538
.word 0x3e526e1f
.word 0x3e9709c1
.word 0x3f325538
.word 0x3e526e1f
.word 0x3e9709c1
.word 0x3f325538
.word 0x3e526e1f
.word 0x3f6dfbb9
.word 0x3f720a7b
.word 0x3f6101b4
.word 0x3f6dfbb9
.word 0x3f720a7b
.word 0x3f6101b4
.word 0x3f6dfbb9
.word 0x3f720a7b
.word 0x3f6101b4
.word 0x3f6dfbb9
.word 0x3f720a7b
.word 0x3f6101b4
.word 0x3f6dfbb9
.word 0x3f720a7b
.word 0x3f6101b4
.word 0x3ea4a6ea
.word 0x3fceee5d
.word 0x3f05179f
.word 0x3ea4a6ea
.word 0x3fceee5d
.word 0x3f05179f
.word 0x3ea4a6ea
.word 0x3fceee5d
.word 0x3f05179f
.word 0x3ea4a6ea
.word 0x3fceee5d
.word 0x3f05179f
.word 0x3ea4a6ea
.word 0x3fceee5d
.word 0x3f05179f
.word 0x3bc0d6b0
.word 0x40a5cbd6
.word 0x3cf9c7d7
.word 0x3bc0d6b0
.word 0x40a5cbd6
.word 0x3cf9c7d7
.word 0x3bc0d6b0
.word 0x40a5cbd6
.word 0x3cf9c7d7
.word 0x3bc0d6b0
.word 0x40a5cbd6
.word 0x3cf9c7d7
.word 0x3bc0d6b0
.word 0x40a5cbd6
.word 0x3cf9c7d7
.word 0x3f0de25f
.word 0x3fe4127a
.word 0x3f7ccfb5
.word 0x3f0de25f
.word 0x3fe4127a
.word 0x3f7ccfb5
.word 0x3f0de25f
.word 0x3fe4127a
.word 0x3f7ccfb5
.word 0x3f0de25f
.word 0x3fe4127a
.word 0x3f7ccfb5
.word 0x3f0de25f
.word 0x3fe4127a
.word 0x3f7ccfb5
.word 0x3e25d6f7
.word 0x40b11056
.word 0x3f65686d
.word 0x3e25d6f7
.word 0x40b11056
.word 0x3f65686d
.word 0x3e25d6f7
.word 0x40b11056
.word 0x3f65686d
.word 0x3e25d6f7
.word 0x40b11056
.word 0x3f65686d
.word 0x3e25d6f7
.word 0x40b11056
.word 0x3f65686d
.word 0x3f7b0cf1
.word 0x3ef47d91
.word 0x3eefc37a
.word 0x3f7b0cf1
.word 0x3ef47d91
.word 0x3eefc37a
.word 0x3f7b0cf1
.word 0x3ef47d91
.word 0x3eefc37a
.word 0x3f7b0cf1
.word 0x3ef47d91
.word 0x3eefc37a
.word 0x3f7b0cf1
.word 0x3ef47d91
.word 0x3eefc37a
.word 0x3f07eeae
.word 0x3f8f9234
.word 0x3f1877eb
.word 0x3f07eeae
.word 0x3f8f9234
.word 0x3f1877eb
.word 0x3f07eeae
.word 0x3f8f9234
.word 0x3f1877eb
.word 0x3f07eeae
.word 0x3f8f9234
.word 0x3f1877eb
.word 0x3f07eeae
.word 0x3f8f9234
.word 0x3f1877eb
.word 0x3f5a4a19
.word 0x3ec7c53a
.word 0x3eaa57c7
.word 0x3f5a4a19
.word 0x3ec7c53a
.word 0x3eaa57c7
.word 0x3f5a4a19
.word 0x3ec7c53a
.word 0x3eaa57c7
.word 0x3f5a4a19
.word 0x3ec7c53a
.word 0x3eaa57c7
.word 0x3f5a4a19
.word 0x3ec7c53a
.word 0x3eaa57c7
.word 0x3f20790e
.word 0x3e889613
.word 0x3e2b3cc6
.word 0x3f20790e
.word 0x3e889613
.word 0x3e2b3cc6
.word 0x3f20790e
.word 0x3e889613
.word 0x3e2b3cc6
.word 0x3f20790e
.word 0x3e889613
.word 0x3e2b3cc6
.word 0x3f20790e
.word 0x3e889613
.word 0x3e2b3cc6
.word 0x3f65e7e5
.word 0x3e3b672e
.word 0x3e284d0e
.word 0x3f65e7e5
.word 0x3e3b672e
.word 0x3e284d0e
.word 0x3f65e7e5
.word 0x3e3b672e
.word 0x3e284d0e
.word 0x3f65e7e5
.word 0x3e3b672e
.word 0x3e284d0e
.word 0x3f65e7e5
.word 0x3e3b672e
.word 0x3e284d0e
.word 0x3f1dad82
.word 0x3f1c588a
.word 0x3ec09889
.word 0x3f1dad82
.word 0x3f1c588a
.word 0x3ec09889
.word 0x3f1dad82
.word 0x3f1c588a
.word 0x3ec09889
.word 0x3f1dad82
.word 0x3f1c588a
.word 0x3ec09889
.word 0x3f1dad82
.word 0x3f1c588a
.word 0x3ec09889
.word 0x3f39b000
.word 0x3ec4b8ac
.word 0x3e8eb0b3
.word 0x3f39b000
.word 0x3ec4b8ac
.word 0x3e8eb0b3
.word 0x3f39b000
.word 0x3ec4b8ac
.word 0x3e8eb0b3
.word 0x3f39b000
.word 0x3ec4b8ac
.word 0x3e8eb0b3
.word 0x3f39b000
.word 0x3ec4b8ac
.word 0x3e8eb0b3
.word 0x3f0b544e
.word 0x3fdcc560
.word 0x3f704fbf
.word 0x3f0b544e
.word 0x3fdcc560
.word 0x3f704fbf
.word 0x3f0b544e
.word 0x3fdcc560
.word 0x3f704fbf
.word 0x3f0b544e
.word 0x3fdcc560
.word 0x3f704fbf
.word 0x3f0b544e
.word 0x3fdcc560
.word 0x3f704fbf
.word 0x3f785a0e
.word 0x3bd6f751
.word 0x3bd08b35
.word 0x3f785a0e
.word 0x3bd6f751
.word 0x3bd08b35
.word 0x3f785a0e
.word 0x3bd6f751
.word 0x3bd08b35
.word 0x3f785a0e
.word 0x3bd6f751
.word 0x3bd08b35
.word 0x3f785a0e
.word 0x3bd6f751
.word 0x3bd08b35
.word 0x3f7f9b81
.word 0x3df13520
.word 0x3df0d670
.word 0x3f7f9b81
.word 0x3df13520
.word 0x3df0d670
.word 0x3f7f9b81
.word 0x3df13520
.word 0x3df0d670
.word 0x3f7f9b81
.word 0x3df13520
.word 0x3df0d670
.word 0x3f7f9b81
.word 0x3df13520
.word 0x3df0d670
.word 0x3db4e470
.word 0x410384ff
.word 0x3f39ddbf
.word 0x3db4e470
.word 0x410384ff
.word 0x3f39ddbf
.word 0x3db4e470
.word 0x410384ff
.word 0x3f39ddbf
.word 0x3db4e470
.word 0x410384ff
.word 0x3f39ddbf
.word 0x3db4e470
.word 0x410384ff
.word 0x3f39ddbf
.word 0x3cecc3da
.word 0x414f0d25
.word 0x3ebf7e86
.word 0x3cecc3da
.word 0x414f0d25
.word 0x3ebf7e86
.word 0x3cecc3da
.word 0x414f0d25
.word 0x3ebf7e86
.word 0x3cecc3da
.word 0x414f0d25
.word 0x3ebf7e86
.word 0x3cecc3da
.word 0x414f0d25
.word 0x3ebf7e86
.word 0x3edb2f70
.word 0x3f1f1390
.word 0x3e883336
.word 0x3edb2f70
.word 0x3f1f1390
.word 0x3e883336
.word 0x3edb2f70
.word 0x3f1f1390
.word 0x3e883336
.word 0x3edb2f70
.word 0x3f1f1390
.word 0x3e883336
.word 0x3edb2f70
.word 0x3f1f1390
.word 0x3e883336
.word 0x3f0b6079
.word 0x3eb88821
.word 0x3e48eee8
.word 0x3f0b6079
.word 0x3eb88821
.word 0x3e48eee8
.word 0x3f0b6079
.word 0x3eb88821
.word 0x3e48eee8
.word 0x3f0b6079
.word 0x3eb88821
.word 0x3e48eee8
.word 0x3f0b6079
.word 0x3eb88821
.word 0x3e48eee8
.word 0x3f63b57c
.word 0x3ede1d85
.word 0x3ec591a4
.word 0x3f63b57c
.word 0x3ede1d85
.word 0x3ec591a4
.word 0x3f63b57c
.word 0x3ede1d85
.word 0x3ec591a4
.word 0x3f63b57c
.word 0x3ede1d85
.word 0x3ec591a4
.word 0x3f63b57c
.word 0x3ede1d85
.word 0x3ec591a4
.word 0x3e85a789
.word 0x4004f061
.word 0x3f0acfc5
.word 0x3e85a789
.word 0x4004f061
.word 0x3f0acfc5
.word 0x3e85a789
.word 0x4004f061
.word 0x3f0acfc5
.word 0x3e85a789
.word 0x4004f061
.word 0x3f0acfc5
.word 0x3e85a789
.word 0x4004f061
.word 0x3f0acfc5
.word 0x3ebe032d
.word 0x3ec1d526
.word 0x3e0fde9a
.word 0x3ebe032d
.word 0x3ec1d526
.word 0x3e0fde9a
.word 0x3ebe032d
.word 0x3ec1d526
.word 0x3e0fde9a
.word 0x3ebe032d
.word 0x3ec1d526
.word 0x3e0fde9a
.word 0x3ebe032d
.word 0x3ec1d526
.word 0x3e0fde9a
.word 0x3f532a7a
.word 0x3f7d3cf1
.word 0x3f50e33f
.word 0x3f532a7a
.word 0x3f7d3cf1
.word 0x3f50e33f
.word 0x3f532a7a
.word 0x3f7d3cf1
.word 0x3f50e33f
.word 0x3f532a7a
.word 0x3f7d3cf1
.word 0x3f50e33f
.word 0x3f532a7a
.word 0x3f7d3cf1
.word 0x3f50e33f
.word 0x3e8b4851
.word 0x3e9cb32b
.word 0x3daa8319
.word 0x3e8b4851
.word 0x3e9cb32b
.word 0x3daa8319
.word 0x3e8b4851
.word 0x3e9cb32b
.word 0x3daa8319
.word 0x3e8b4851
.word 0x3e9cb32b
.word 0x3daa8319
.word 0x3e8b4851
.word 0x3e9cb32b
.word 0x3daa8319
.word 0x3f262242
.word 0x3fa60696
.word 0x3f577cfb
.word 0x3f262242
.word 0x3fa60696
.word 0x3f577cfb
.word 0x3f262242
.word 0x3fa60696
.word 0x3f577cfb
.word 0x3f262242
.word 0x3fa60696
.word 0x3f577cfb
.word 0x3f262242
.word 0x3fa60696
.word 0x3f577cfb
.word 0x3eab92a7
.word 0x402722c7
.word 0x3f6007f4
.word 0x3eab92a7
.word 0x402722c7
.word 0x3f6007f4
.word 0x3eab92a7
.word 0x402722c7
.word 0x3f6007f4
.word 0x3eab92a7
.word 0x402722c7
.word 0x3f6007f4
.word 0x3eab92a7
.word 0x402722c7
.word 0x3f6007f4
.word 0x3f69d00b
.word 0x3cb34d2c
.word 0x3ca3c2f4
.word 0x3f69d00b
.word 0x3cb34d2c
.word 0x3ca3c2f4
.word 0x3f69d00b
.word 0x3cb34d2c
.word 0x3ca3c2f4
.word 0x3f69d00b
.word 0x3cb34d2c
.word 0x3ca3c2f4
.word 0x3f69d00b
.word 0x3cb34d2c
.word 0x3ca3c2f4
.word 0x3e9ff6c0
.word 0x3f350fb7
.word 0x3e624690
.word 0x3e9ff6c0
.word 0x3f350fb7
.word 0x3e624690
.word 0x3e9ff6c0
.word 0x3f350fb7
.word 0x3e624690
.word 0x3e9ff6c0
.word 0x3f350fb7
.word 0x3e624690
.word 0x3e9ff6c0
.word 0x3f350fb7
.word 0x3e624690
.word 0x3efd5ea7
.word 0x3fe54668
.word 0x3f62eb5a
.word 0x3efd5ea7
.word 0x3fe54668
.word 0x3f62eb5a
.word 0x3efd5ea7
.word 0x3fe54668
.word 0x3f62eb5a
.word 0x3efd5ea7
.word 0x3fe54668
.word 0x3f62eb5a
.word 0x3efd5ea7
.word 0x3fe54668
.word 0x3f62eb5a
.word 0x3e8f88fa
.word 0x4040e14e
.word 0x3f584a1e
.word 0x3e8f88fa
.word 0x4040e14e
.word 0x3f584a1e
.word 0x3e8f88fa
.word 0x4040e14e
.word 0x3f584a1e
.word 0x3e8f88fa
.word 0x4040e14e
.word 0x3f584a1e
.word 0x3e8f88fa
.word 0x4040e14e
.word 0x3f584a1e
.word 0x3f63fdcd
.word 0x3ee42b5c
.word 0x3ecb34a9
.word 0x3f63fdcd
.word 0x3ee42b5c
.word 0x3ecb34a9
.word 0x3f63fdcd
.word 0x3ee42b5c
.word 0x3ecb34a9
.word 0x3f63fdcd
.word 0x3ee42b5c
.word 0x3ecb34a9
.word 0x3f63fdcd
.word 0x3ee42b5c
.word 0x3ecb34a9
.word 0x3f6eeb38
.word 0x3f6e3b48
.word 0x3f5e5602
.word 0x3f6eeb38
.word 0x3f6e3b48
.word 0x3f5e5602
.word 0x3f6eeb38
.word 0x3f6e3b48
.word 0x3f5e5602
.word 0x3f6eeb38
.word 0x3f6e3b48
.word 0x3f5e5602
.word 0x3f6eeb38
.word 0x3f6e3b48
.word 0x3f5e5602
.word 0x3eb37c3e
.word 0x3f13ad10
.word 0x3e4f135c
.word 0x3eb37c3e
.word 0x3f13ad10
.word 0x3e4f135c
.word 0x3eb37c3e
.word 0x3f13ad10
.word 0x3e4f135c
.word 0x3eb37c3e
.word 0x3f13ad10
.word 0x3e4f135c
.word 0x3eb37c3e
.word 0x3f13ad10
.word 0x3e4f135c
.word 0x3ed10f19
.word 0x3ea67cef
.word 0x3e07f5d1
.word 0x3ed10f19
.word 0x3ea67cef
.word 0x3e07f5d1
.word 0x3ed10f19
.word 0x3ea67cef
.word 0x3e07f5d1
.word 0x3ed10f19
.word 0x3ea67cef
.word 0x3e07f5d1
.word 0x3ed10f19
.word 0x3ea67cef
.word 0x3e07f5d1
.word 0x3bb7155a
.word 0x41e2a7db
.word 0x3e2218e6
.word 0x3bb7155a
.word 0x41e2a7db
.word 0x3e2218e6
.word 0x3bb7155a
.word 0x41e2a7db
.word 0x3e2218e6
.word 0x3bb7155a
.word 0x41e2a7db
.word 0x3e2218e6
.word 0x3bb7155a
.word 0x41e2a7db
.word 0x3e2218e6
.word 0x3f030ed0
.word 0x3f9ef39a
.word 0x3f22bfb5
.word 0x3f030ed0
.word 0x3f9ef39a
.word 0x3f22bfb5
.word 0x3f030ed0
.word 0x3f9ef39a
.word 0x3f22bfb5
.word 0x3f030ed0
.word 0x3f9ef39a
.word 0x3f22bfb5
.word 0x3f030ed0
.word 0x3f9ef39a
.word 0x3f22bfb5
.word 0x3ef59dfe
.word 0x3eee9f0f
.word 0x3e64f17e
.word 0x3ef59dfe
.word 0x3eee9f0f
.word 0x3e64f17e
.word 0x3ef59dfe
.word 0x3eee9f0f
.word 0x3e64f17e
.word 0x3ef59dfe
.word 0x3eee9f0f
.word 0x3e64f17e
.word 0x3ef59dfe
.word 0x3eee9f0f
.word 0x3e64f17e
.word 0x3ef5dc1d
.word 0x3dc4029c
.word 0x3d3c3f07
.word 0x3ef5dc1d
.word 0x3dc4029c
.word 0x3d3c3f07
.word 0x3ef5dc1d
.word 0x3dc4029c
.word 0x3d3c3f07
.word 0x3ef5dc1d
.word 0x3dc4029c
.word 0x3d3c3f07
.word 0x3ef5dc1d
.word 0x3dc4029c
.word 0x3d3c3f07
.word 0x3db77761
.word 0x3fe8f393
.word 0x3e26f2bf
.word 0x3db77761
.word 0x3fe8f393
.word 0x3e26f2bf
.word 0x3db77761
.word 0x3fe8f393
.word 0x3e26f2bf
.word 0x3db77761
.word 0x3fe8f393
.word 0x3e26f2bf
.word 0x3db77761
.word 0x3fe8f393
.word 0x3e26f2bf
.word 0x3f1e9deb
.word 0x3fb495bc
.word 0x3f5fc7a0
.word 0x3f1e9deb
.word 0x3fb495bc
.word 0x3f5fc7a0
.word 0x3f1e9deb
.word 0x3fb495bc
.word 0x3f5fc7a0
.word 0x3f1e9deb
.word 0x3fb495bc
.word 0x3f5fc7a0
.word 0x3f1e9deb
.word 0x3fb495bc
.word 0x3f5fc7a0
.word 0x3d9646ea
.word 0x414698b1
.word 0x3f6928f6
.word 0x3d9646ea
.word 0x414698b1
.word 0x3f6928f6
.word 0x3d9646ea
.word 0x414698b1
.word 0x3f6928f6
.word 0x3d9646ea
.word 0x414698b1
.word 0x3f6928f6
.word 0x3d9646ea
.word 0x414698b1
.word 0x3f6928f6
.word 0x3ec1477c
.word 0x3f1d2b95
.word 0x3e6d537e
.word 0x3ec1477c
.word 0x3f1d2b95
.word 0x3e6d537e
.word 0x3ec1477c
.word 0x3f1d2b95
.word 0x3e6d537e
.word 0x3ec1477c
.word 0x3f1d2b95
.word 0x3e6d537e
.word 0x3ec1477c
.word 0x3f1d2b95
.word 0x3e6d537e
.word 0x3f31f08a
.word 0x3fa8f445
.word 0x3f6adf48
.word 0x3f31f08a
.word 0x3fa8f445
.word 0x3f6adf48
.word 0x3f31f08a
.word 0x3fa8f445
.word 0x3f6adf48
.word 0x3f31f08a
.word 0x3fa8f445
.word 0x3f6adf48
.word 0x3f31f08a
.word 0x3fa8f445
.word 0x3f6adf48
.word 0x3f231a0a
.word 0x3fc7d448
.word 0x3f7ea0fb
.word 0x3f231a0a
.word 0x3fc7d448
.word 0x3f7ea0fb
.word 0x3f231a0a
.word 0x3fc7d448
.word 0x3f7ea0fb
.word 0x3f231a0a
.word 0x3fc7d448
.word 0x3f7ea0fb
.word 0x3f231a0a
.word 0x3fc7d448
.word 0x3f7ea0fb
.word 0x3f2106ee
.word 0x3e6c018c
.word 0x3e14735d
.word 0x3f2106ee
.word 0x3e6c018c
.word 0x3e14735d
.word 0x3f2106ee
.word 0x3e6c018c
.word 0x3e14735d
.word 0x3f2106ee
.word 0x3e6c018c
.word 0x3e14735d
.word 0x3f2106ee
.word 0x3e6c018c
.word 0x3e14735d
.word 0x3f3f888d
.word 0x3f945b7f
.word 0x3f5dfecd
.word 0x3f3f888d
.word 0x3f945b7f
.word 0x3f5dfecd
.word 0x3f3f888d
.word 0x3f945b7f
.word 0x3f5dfecd
.word 0x3f3f888d
.word 0x3f945b7f
.word 0x3f5dfecd
.word 0x3f3f888d
.word 0x3f945b7f
.word 0x3f5dfecd
.word 0x3e147bc6
.word 0x4092252e
.word 0x3f298850
.word 0x3e147bc6
.word 0x4092252e
.word 0x3f298850
.word 0x3e147bc6
.word 0x4092252e
.word 0x3f298850
.word 0x3e147bc6
.word 0x4092252e
.word 0x3f298850
.word 0x3e147bc6
.word 0x4092252e
.word 0x3f298850
.word 0x3da594e5
.word 0x3fce37b1
.word 0x3e0561d6
.word 0x3da594e5
.word 0x3fce37b1
.word 0x3e0561d6
.word 0x3da594e5
.word 0x3fce37b1
.word 0x3e0561d6
.word 0x3da594e5
.word 0x3fce37b1
.word 0x3e0561d6
.word 0x3da594e5
.word 0x3fce37b1
.word 0x3e0561d6
.word 0x3dce21ec
.word 0x41066de8
.word 0x3f587c82
.word 0x3dce21ec
.word 0x41066de8
.word 0x3f587c82
.word 0x3dce21ec
.word 0x41066de8
.word 0x3f587c82
.word 0x3dce21ec
.word 0x41066de8
.word 0x3f587c82
.word 0x3dce21ec
.word 0x41066de8
.word 0x3f587c82
.word 0x3f0790e0
.word 0x3e98dd1f
.word 0x3e21e63c
.word 0x3f0790e0
.word 0x3e98dd1f
.word 0x3e21e63c
.word 0x3f0790e0
.word 0x3e98dd1f
.word 0x3e21e63c
.word 0x3f0790e0
.word 0x3e98dd1f
.word 0x3e21e63c
.word 0x3f0790e0
.word 0x3e98dd1f
.word 0x3e21e63c
.word 0x3e9c89ed
.word 0x3f1dbc78
.word 0x3e40e7ab
.word 0x3e9c89ed
.word 0x3f1dbc78
.word 0x3e40e7ab
.word 0x3e9c89ed
.word 0x3f1dbc78
.word 0x3e40e7ab
.word 0x3e9c89ed
.word 0x3f1dbc78
.word 0x3e40e7ab
.word 0x3e9c89ed
.word 0x3f1dbc78
.word 0x3e40e7ab
.word 0x3e0d8fa5
.word 0x4059380a
.word 0x3ef03b80
.word 0x3e0d8fa5
.word 0x4059380a
.word 0x3ef03b80
.word 0x3e0d8fa5
.word 0x4059380a
.word 0x3ef03b80
.word 0x3e0d8fa5
.word 0x4059380a
.word 0x3ef03b80
.word 0x3e0d8fa5
.word 0x4059380a
.word 0x3ef03b80
.word 0x3ed08a14
.word 0x3fa565c3
.word 0x3f06bbe5
.word 0x3ed08a14
.word 0x3fa565c3
.word 0x3f06bbe5
.word 0x3ed08a14
.word 0x3fa565c3
.word 0x3f06bbe5
.word 0x3ed08a14
.word 0x3fa565c3
.word 0x3f06bbe5
.word 0x3ed08a14
.word 0x3fa565c3
.word 0x3f06bbe5
.word 0x3ef90d95
.word 0x3fe79647
.word 0x3f614d75
.word 0x3ef90d95
.word 0x3fe79647
.word 0x3f614d75
.word 0x3ef90d95
.word 0x3fe79647
.word 0x3f614d75
.word 0x3ef90d95
.word 0x3fe79647
.word 0x3f614d75
.word 0x3ef90d95
.word 0x3fe79647
.word 0x3f614d75
.word 0x3d54ae74
.word 0x406ac39a
.word 0x3e4309f7
.word 0x3d54ae74
.word 0x406ac39a
.word 0x3e4309f7
.word 0x3d54ae74
.word 0x406ac39a
.word 0x3e4309f7
.word 0x3d54ae74
.word 0x406ac39a
.word 0x3e4309f7
.word 0x3d54ae74
.word 0x406ac39a
.word 0x3e4309f7
.word 0x3e443a84
.word 0x400d9646
.word 0x3ed90ed6
.word 0x3e443a84
.word 0x400d9646
.word 0x3ed90ed6
.word 0x3e443a84
.word 0x400d9646
.word 0x3ed90ed6
.word 0x3e443a84
.word 0x400d9646
.word 0x3ed90ed6
.word 0x3e443a84
.word 0x400d9646
.word 0x3ed90ed6
.word 0x3f4eb642
.word 0x3f2edf82
.word 0x3f0d345b
.word 0x3f4eb642
.word 0x3f2edf82
.word 0x3f0d345b
.word 0x3f4eb642
.word 0x3f2edf82
.word 0x3f0d345b
.word 0x3f4eb642
.word 0x3f2edf82
.word 0x3f0d345b
.word 0x3f4eb642
.word 0x3f2edf82
.word 0x3f0d345b
.word 0x3f5cfc6e
.word 0x3e04cd66
.word 0x3de546ef
.word 0x3f5cfc6e
.word 0x3e04cd66
.word 0x3de546ef
.word 0x3f5cfc6e
.word 0x3e04cd66
.word 0x3de546ef
.word 0x3f5cfc6e
.word 0x3e04cd66
.word 0x3de546ef
.word 0x3f5cfc6e
.word 0x3e04cd66
.word 0x3de546ef
.word 0x3f05022f
.word 0x3fb3ce2c
.word 0x3f3ad74c
.word 0x3f05022f
.word 0x3fb3ce2c
.word 0x3f3ad74c
.word 0x3f05022f
.word 0x3fb3ce2c
.word 0x3f3ad74c
.word 0x3f05022f
.word 0x3fb3ce2c
.word 0x3f3ad74c
.word 0x3f05022f
.word 0x3fb3ce2c
.word 0x3f3ad74c
.word 0x3edf772c
.word 0x3f5adb58
.word 0x3ebf0af3
.word 0x3edf772c
.word 0x3f5adb58
.word 0x3ebf0af3
.word 0x3edf772c
.word 0x3f5adb58
.word 0x3ebf0af3
.word 0x3edf772c
.word 0x3f5adb58
.word 0x3ebf0af3
.word 0x3edf772c
.word 0x3f5adb58
.word 0x3ebf0af3
.word 0x3f1db874
.word 0x3f28c6b2
.word 0x3ecff6ee
.word 0x3f1db874
.word 0x3f28c6b2
.word 0x3ecff6ee
.word 0x3f1db874
.word 0x3f28c6b2
.word 0x3ecff6ee
.word 0x3f1db874
.word 0x3f28c6b2
.word 0x3ecff6ee
.word 0x3f1db874
.word 0x3f28c6b2
.word 0x3ecff6ee
.word 0x3f5172bf
.word 0x3ce475a8
.word 0x3cbaea75
.word 0x3f5172bf
.word 0x3ce475a8
.word 0x3cbaea75
.word 0x3f5172bf
.word 0x3ce475a8
.word 0x3cbaea75
.word 0x3f5172bf
.word 0x3ce475a8
.word 0x3cbaea75
.word 0x3f5172bf
.word 0x3ce475a8
.word 0x3cbaea75
.word 0x3f5e1c59
.word 0x3f2b5db0
.word 0x3f14ae39
.word 0x3f5e1c59
.word 0x3f2b5db0
.word 0x3f14ae39
.word 0x3f5e1c59
.word 0x3f2b5db0
.word 0x3f14ae39
.word 0x3f5e1c59
.word 0x3f2b5db0
.word 0x3f14ae39
.word 0x3f5e1c59
.word 0x3f2b5db0
.word 0x3f14ae39
.word 0x3ed18b35
.word 0x3fe34d38
.word 0x3f3a0da6
.word 0x3ed18b35
.word 0x3fe34d38
.word 0x3f3a0da6
.word 0x3ed18b35
.word 0x3fe34d38
.word 0x3f3a0da6
.word 0x3ed18b35
.word 0x3fe34d38
.word 0x3f3a0da6
.word 0x3ed18b35
.word 0x3fe34d38
.word 0x3f3a0da6
.word 0x3e2fc9ed
.word 0x40aa1752
.word 0x3f699836
.word 0x3e2fc9ed
.word 0x40aa1752
.word 0x3f699836
.word 0x3e2fc9ed
.word 0x40aa1752
.word 0x3f699836
.word 0x3e2fc9ed
.word 0x40aa1752
.word 0x3f699836
.word 0x3e2fc9ed
.word 0x40aa1752
.word 0x3f699836
.word 0x3f6e91cd
.word 0x3f88ff60
.word 0x3f7f56e5
.word 0x3f6e91cd
.word 0x3f88ff60
.word 0x3f7f56e5
.word 0x3f6e91cd
.word 0x3f88ff60
.word 0x3f7f56e5
.word 0x3f6e91cd
.word 0x3f88ff60
.word 0x3f7f56e5
.word 0x3f6e91cd
.word 0x3f88ff60
.word 0x3f7f56e5
.word 0x3f5c5053
.word 0x3f934583
.word 0x3f7d7be5
.word 0x3f5c5053
.word 0x3f934583
.word 0x3f7d7be5
.word 0x3f5c5053
.word 0x3f934583
.word 0x3f7d7be5
.word 0x3f5c5053
.word 0x3f934583
.word 0x3f7d7be5
.word 0x3f5c5053
.word 0x3f934583
.word 0x3f7d7be5
.word 0x3e2b8e5e
.word 0x40b51eb8
.word 0x3f72c07d
.word 0x3e2b8e5e
.word 0x40b51eb8
.word 0x3f72c07d
.word 0x3e2b8e5e
.word 0x40b51eb8
.word 0x3f72c07d
.word 0x3e2b8e5e
.word 0x40b51eb8
.word 0x3f72c07d
.word 0x3e2b8e5e
.word 0x40b51eb8
.word 0x3f72c07d
.word 0x3d55785d
.word 0x412d4394
.word 0x3f107ab1
.word 0x3d55785d
.word 0x412d4394
.word 0x3f107ab1
.word 0x3d55785d
.word 0x412d4394
.word 0x3f107ab1
.word 0x3d55785d
.word 0x412d4394
.word 0x3f107ab1
.word 0x3d55785d
.word 0x412d4394
.word 0x3f107ab1
.word 0x3f78d41d
.word 0x3da5c9a1
.word 0x3da124b2
.word 0x3f78d41d
.word 0x3da5c9a1
.word 0x3da124b2
.word 0x3f78d41d
.word 0x3da5c9a1
.word 0x3da124b2
.word 0x3f78d41d
.word 0x3da5c9a1
.word 0x3da124b2
.word 0x3f78d41d
.word 0x3da5c9a1
.word 0x3da124b2
.word 0x3f620477
.word 0x3d6f0e8f
.word 0x3d530f06
.word 0x3f620477
.word 0x3d6f0e8f
.word 0x3d530f06
.word 0x3f620477
.word 0x3d6f0e8f
.word 0x3d530f06
.word 0x3f620477
.word 0x3d6f0e8f
.word 0x3d530f06
.word 0x3f620477
.word 0x3d6f0e8f
.word 0x3d530f06
.word 0x3f779e46
.word 0x3f277efd
.word 0x3f220315
.word 0x3f779e46
.word 0x3f277efd
.word 0x3f220315
.word 0x3f779e46
.word 0x3f277efd
.word 0x3f220315
.word 0x3f779e46
.word 0x3f277efd
.word 0x3f220315
.word 0x3f779e46
.word 0x3f277efd
.word 0x3f220315
.word 0x3f6804a9
.word 0x3ee49651
.word 0x3ecf2c63
.word 0x3f6804a9
.word 0x3ee49651
.word 0x3ecf2c63
.word 0x3f6804a9
.word 0x3ee49651
.word 0x3ecf2c63
.word 0x3f6804a9
.word 0x3ee49651
.word 0x3ecf2c63
.word 0x3f6804a9
.word 0x3ee49651
.word 0x3ecf2c63
.word 0x3ea1d95d
.word 0x3f3494de
.word 0x3e6455e8
.word 0x3ea1d95d
.word 0x3f3494de
.word 0x3e6455e8
.word 0x3ea1d95d
.word 0x3f3494de
.word 0x3e6455e8
.word 0x3ea1d95d
.word 0x3f3494de
.word 0x3e6455e8
.word 0x3ea1d95d
.word 0x3f3494de
.word 0x3e6455e8
.word 0x3ba021b0
.word 0x426ed9c5
.word 0x3e95678a
.word 0x3ba021b0
.word 0x426ed9c5
.word 0x3e95678a
.word 0x3ba021b0
.word 0x426ed9c5
.word 0x3e95678a
.word 0x3ba021b0
.word 0x426ed9c5
.word 0x3e95678a
.word 0x3ba021b0
.word 0x426ed9c5
.word 0x3e95678a
.word 0x3e567df5
.word 0x3f9bf696
.word 0x3e82acde
.word 0x3e567df5
.word 0x3f9bf696
.word 0x3e82acde
.word 0x3e567df5
.word 0x3f9bf696
.word 0x3e82acde
.word 0x3e567df5
.word 0x3f9bf696
.word 0x3e82acde
.word 0x3e567df5
.word 0x3f9bf696
.word 0x3e82acde
.word 0x3ed0c9b2
.word 0x3fe9dd45
.word 0x3f3ebc09
.word 0x3ed0c9b2
.word 0x3fe9dd45
.word 0x3f3ebc09
.word 0x3ed0c9b2
.word 0x3fe9dd45
.word 0x3f3ebc09
.word 0x3ed0c9b2
.word 0x3fe9dd45
.word 0x3f3ebc09
.word 0x3ed0c9b2
.word 0x3fe9dd45
.word 0x3f3ebc09
.word 0x3e598e4a
.word 0x406cc90b
.word 0x3f493a07
.word 0x3e598e4a
.word 0x406cc90b
.word 0x3f493a07
.word 0x3e598e4a
.word 0x406cc90b
.word 0x3f493a07
.word 0x3e598e4a
.word 0x406cc90b
.word 0x3f493a07
.word 0x3e598e4a
.word 0x406cc90b
.word 0x3f493a07
.word 0x3e101b8c
.word 0x3fc92e4a
.word 0x3e627f5f
.word 0x3e101b8c
.word 0x3fc92e4a
.word 0x3e627f5f
.word 0x3e101b8c
.word 0x3fc92e4a
.word 0x3e627f5f
.word 0x3e101b8c
.word 0x3fc92e4a
.word 0x3e627f5f
.word 0x3e101b8c
.word 0x3fc92e4a
.word 0x3e627f5f
.word 0x3f0e7f24
.word 0x3fb778f7
.word 0x3f4c4071
.word 0x3f0e7f24
.word 0x3fb778f7
.word 0x3f4c4071
.word 0x3f0e7f24
.word 0x3fb778f7
.word 0x3f4c4071
.word 0x3f0e7f24
.word 0x3fb778f7
.word 0x3f4c4071
.word 0x3f0e7f24
.word 0x3fb778f7
.word 0x3f4c4071
.word 0x3eb2b4c2
.word 0x4002bb8d
.word 0x3f36856f
.word 0x3eb2b4c2
.word 0x4002bb8d
.word 0x3f36856f
.word 0x3eb2b4c2
.word 0x4002bb8d
.word 0x3f36856f
.word 0x3eb2b4c2
.word 0x4002bb8d
.word 0x3f36856f
.word 0x3eb2b4c2
.word 0x4002bb8d
.word 0x3f36856f
.word 0x3ea5eb9a
.word 0x3f55bbed
.word 0x3e8a86d4
.word 0x3ea5eb9a
.word 0x3f55bbed
.word 0x3e8a86d4
.word 0x3ea5eb9a
.word 0x3f55bbed
.word 0x3e8a86d4
.word 0x3ea5eb9a
.word 0x3f55bbed
.word 0x3e8a86d4
.word 0x3ea5eb9a
.word 0x3f55bbed
.word 0x3e8a86d4
.word 0x3da43f76
.word 0x404769b5
.word 0x3e7fe24f
.word 0x3da43f76
.word 0x404769b5
.word 0x3e7fe24f
.word 0x3da43f76
.word 0x404769b5
.word 0x3e7fe24f
.word 0x3da43f76
.word 0x404769b5
.word 0x3e7fe24f
.word 0x3da43f76
.word 0x404769b5
.word 0x3e7fe24f
.word 0x3c8939f3
.word 0x4262d870
.word 0x3f73325c
.word 0x3c8939f3
.word 0x4262d870
.word 0x3f73325c
.word 0x3c8939f3
.word 0x4262d870
.word 0x3f73325c
.word 0x3c8939f3
.word 0x4262d870
.word 0x3f73325c
.word 0x3c8939f3
.word 0x4262d870
.word 0x3f73325c
.word 0x3f6143da
.word 0x3f8123c1
.word 0x3f63454f
.word 0x3f6143da
.word 0x3f8123c1
.word 0x3f63454f
.word 0x3f6143da
.word 0x3f8123c1
.word 0x3f63454f
.word 0x3f6143da
.word 0x3f8123c1
.word 0x3f63454f
.word 0x3f6143da
.word 0x3f8123c1
.word 0x3f63454f
.word 0x3f54d5d7
.word 0x3ed08c56
.word 0x3ead626b
.word 0x3f54d5d7
.word 0x3ed08c56
.word 0x3ead626b
.word 0x3f54d5d7
.word 0x3ed08c56
.word 0x3ead626b
.word 0x3f54d5d7
.word 0x3ed08c56
.word 0x3ead626b
.word 0x3f54d5d7
.word 0x3ed08c56
.word 0x3ead626b
.word 0x3e8d3c6e
.word 0x3efc02fe
.word 0x3e0b0923
.word 0x3e8d3c6e
.word 0x3efc02fe
.word 0x3e0b0923
.word 0x3e8d3c6e
.word 0x3efc02fe
.word 0x3e0b0923
.word 0x3e8d3c6e
.word 0x3efc02fe
.word 0x3e0b0923
.word 0x3e8d3c6e
.word 0x3efc02fe
.word 0x3e0b0923
.word 0x3f34dd4e
.word 0x3f3faa2b
.word 0x3f076957
.word 0x3f34dd4e
.word 0x3f3faa2b
.word 0x3f076957
.word 0x3f34dd4e
.word 0x3f3faa2b
.word 0x3f076957
.word 0x3f34dd4e
.word 0x3f3faa2b
.word 0x3f076957
.word 0x3f34dd4e
.word 0x3f3faa2b
.word 0x3f076957
.word 0x3ede9022
.word 0x3e37161f
.word 0x3d9f2c45
.word 0x3ede9022
.word 0x3e37161f
.word 0x3d9f2c45
.word 0x3ede9022
.word 0x3e37161f
.word 0x3d9f2c45
.word 0x3ede9022
.word 0x3e37161f
.word 0x3d9f2c45
.word 0x3ede9022
.word 0x3e37161f
.word 0x3d9f2c45
.word 0x3e5ab7ea
.word 0x40680b80
.word 0x3f464080
.word 0x3e5ab7ea
.word 0x40680b80
.word 0x3f464080
.word 0x3e5ab7ea
.word 0x40680b80
.word 0x3f464080
.word 0x3e5ab7ea
.word 0x40680b80
.word 0x3f464080
.word 0x3e5ab7ea
.word 0x40680b80
.word 0x3f464080
.word 0x3f77c2fe
.word 0x3ef1e4b0
.word 0x3eea1be5
.word 0x3f77c2fe
.word 0x3ef1e4b0
.word 0x3eea1be5
.word 0x3f77c2fe
.word 0x3ef1e4b0
.word 0x3eea1be5
.word 0x3f77c2fe
.word 0x3ef1e4b0
.word 0x3eea1be5
.word 0x3f77c2fe
.word 0x3ef1e4b0
.word 0x3eea1be5
.word 0x3f665cd0
.word 0x3f33e853
.word 0x3f21e3f5
.word 0x3f665cd0
.word 0x3f33e853
.word 0x3f21e3f5
.word 0x3f665cd0
.word 0x3f33e853
.word 0x3f21e3f5
.word 0x3f665cd0
.word 0x3f33e853
.word 0x3f21e3f5
.word 0x3f665cd0
.word 0x3f33e853
.word 0x3f21e3f5
.word 0x3f62aa14
.word 0x3ea717b0
.word 0x3e93f1ed
.word 0x3f62aa14
.word 0x3ea717b0
.word 0x3e93f1ed
.word 0x3f62aa14
.word 0x3ea717b0
.word 0x3e93f1ed
.word 0x3f62aa14
.word 0x3ea717b0
.word 0x3e93f1ed
.word 0x3f62aa14
.word 0x3ea717b0
.word 0x3e93f1ed
.word 0x3f75cafc
.word 0x3e8088d2
.word 0x3e76d1b8
.word 0x3f75cafc
.word 0x3e8088d2
.word 0x3e76d1b8
.word 0x3f75cafc
.word 0x3e8088d2
.word 0x3e76d1b8
.word 0x3f75cafc
.word 0x3e8088d2
.word 0x3e76d1b8
.word 0x3f75cafc
.word 0x3e8088d2
.word 0x3e76d1b8
.word 0x3f1d8461
.word 0x3fc35310
.word 0x3f705de5
.word 0x3f1d8461
.word 0x3fc35310
.word 0x3f705de5
.word 0x3f1d8461
.word 0x3fc35310
.word 0x3f705de5
.word 0x3f1d8461
.word 0x3fc35310
.word 0x3f705de5
.word 0x3f1d8461
.word 0x3fc35310
.word 0x3f705de5
.word 0x3f55fbab
.word 0x3ee56a77
.word 0x3ebfc31e
.word 0x3f55fbab
.word 0x3ee56a77
.word 0x3ebfc31e
.word 0x3f55fbab
.word 0x3ee56a77
.word 0x3ebfc31e
.word 0x3f55fbab
.word 0x3ee56a77
.word 0x3ebfc31e
.word 0x3f55fbab
.word 0x3ee56a77
.word 0x3ebfc31e
.word 0x3eaab8bb
.word 0x3da865b3
.word 0x3ce09a1b
.word 0x3eaab8bb
.word 0x3da865b3
.word 0x3ce09a1b
.word 0x3eaab8bb
.word 0x3da865b3
.word 0x3ce09a1b
.word 0x3eaab8bb
.word 0x3da865b3
.word 0x3ce09a1b
.word 0x3eaab8bb
.word 0x3da865b3
.word 0x3ce09a1b
.word 0x3e476a7d
.word 0x404e4fe4
.word 0x3f20b5ec
.word 0x3e476a7d
.word 0x404e4fe4
.word 0x3f20b5ec
.word 0x3e476a7d
.word 0x404e4fe4
.word 0x3f20b5ec
.word 0x3e476a7d
.word 0x404e4fe4
.word 0x3f20b5ec
.word 0x3e476a7d
.word 0x404e4fe4
.word 0x3f20b5ec
.word 0x3e9137a2
.word 0x3fa02537
.word 0x3eb5afc3
.word 0x3e9137a2
.word 0x3fa02537
.word 0x3eb5afc3
.word 0x3e9137a2
.word 0x3fa02537
.word 0x3eb5afc3
.word 0x3e9137a2
.word 0x3fa02537
.word 0x3eb5afc3
.word 0x3e9137a2
.word 0x3fa02537
.word 0x3eb5afc3
.word 0x3ee5db9d
.word 0x3f40b1f3
.word 0x3ead047d
.word 0x3ee5db9d
.word 0x3f40b1f3
.word 0x3ead047d
.word 0x3ee5db9d
.word 0x3f40b1f3
.word 0x3ead047d
.word 0x3ee5db9d
.word 0x3f40b1f3
.word 0x3ead047d
.word 0x3ee5db9d
.word 0x3f40b1f3
.word 0x3ead047d
.word 0x3f1a3cb4
.word 0x3b86da44
.word 0x3b227e8f
.word 0x3f1a3cb4
.word 0x3b86da44
.word 0x3b227e8f
.word 0x3f1a3cb4
.word 0x3b86da44
.word 0x3b227e8f
.word 0x3f1a3cb4
.word 0x3b86da44
.word 0x3b227e8f
.word 0x3f1a3cb4
.word 0x3b86da44
.word 0x3b227e8f
.word 0x3f1e7179
.word 0x3f673d4b
.word 0x3f0f1e54
.word 0x3f1e7179
.word 0x3f673d4b
.word 0x3f0f1e54
.word 0x3f1e7179
.word 0x3f673d4b
.word 0x3f0f1e54
.word 0x3f1e7179
.word 0x3f673d4b
.word 0x3f0f1e54
.word 0x3f1e7179
.word 0x3f673d4b
.word 0x3f0f1e54
.word 0x3f4fd5a6
.word 0x3f54c363
.word 0x3f2cbb8e
.word 0x3f4fd5a6
.word 0x3f54c363
.word 0x3f2cbb8e
.word 0x3f4fd5a6
.word 0x3f54c363
.word 0x3f2cbb8e
.word 0x3f4fd5a6
.word 0x3f54c363
.word 0x3f2cbb8e
.word 0x3f4fd5a6
.word 0x3f54c363
.word 0x3f2cbb8e
.word 0x3e5ab532
.word 0x40012cc7
.word 0x3edcb720
.word 0x3e5ab532
.word 0x40012cc7
.word 0x3edcb720
.word 0x3e5ab532
.word 0x40012cc7
.word 0x3edcb720
.word 0x3e5ab532
.word 0x40012cc7
.word 0x3edcb720
.word 0x3e5ab532
.word 0x40012cc7
.word 0x3edcb720
.word 0x3f42797f
.word 0x3f101bfb
.word 0x3edaf333
.word 0x3f42797f
.word 0x3f101bfb
.word 0x3edaf333
.word 0x3f42797f
.word 0x3f101bfb
.word 0x3edaf333
.word 0x3f42797f
.word 0x3f101bfb
.word 0x3edaf333
.word 0x3f42797f
.word 0x3f101bfb
.word 0x3edaf333
.word 0x3f563994
.word 0x3f511902
.word 0x3f2ef9ef
.word 0x3f563994
.word 0x3f511902
.word 0x3f2ef9ef
.word 0x3f563994
.word 0x3f511902
.word 0x3f2ef9ef
.word 0x3f563994
.word 0x3f511902
.word 0x3f2ef9ef
.word 0x3f563994
.word 0x3f511902
.word 0x3f2ef9ef
.word 0x3db721a1
.word 0x40cfdf25
.word 0x3f14b3d3
.word 0x3db721a1
.word 0x40cfdf25
.word 0x3f14b3d3
.word 0x3db721a1
.word 0x40cfdf25
.word 0x3f14b3d3
.word 0x3db721a1
.word 0x40cfdf25
.word 0x3f14b3d3
.word 0x3db721a1
.word 0x40cfdf25
.word 0x3f14b3d3
.word 0x3f47457f
.word 0x3f0f5f3a
.word 0x3edf33e5
.word 0x3f47457f
.word 0x3f0f5f3a
.word 0x3edf33e5
.word 0x3f47457f
.word 0x3f0f5f3a
.word 0x3edf33e5
.word 0x3f47457f
.word 0x3f0f5f3a
.word 0x3edf33e5
.word 0x3f47457f
.word 0x3f0f5f3a
.word 0x3edf33e5
.word 0x3f1c97c4
.word 0x3fa29322
.word 0x3f46e415
.word 0x3f1c97c4
.word 0x3fa29322
.word 0x3f46e415
.word 0x3f1c97c4
.word 0x3fa29322
.word 0x3f46e415
.word 0x3f1c97c4
.word 0x3fa29322
.word 0x3f46e415
.word 0x3f1c97c4
.word 0x3fa29322
.word 0x3f46e415
.word 0x3f5957f3
.word 0x3f022149
.word 0x3edcf5d9
.word 0x3f5957f3
.word 0x3f022149
.word 0x3edcf5d9
.word 0x3f5957f3
.word 0x3f022149
.word 0x3edcf5d9
.word 0x3f5957f3
.word 0x3f022149
.word 0x3edcf5d9
.word 0x3f5957f3
.word 0x3f022149
.word 0x3edcf5d9
.word 0x3f5985e9
.word 0x3f5868e3
.word 0x3f37e21c
.word 0x3f5985e9
.word 0x3f5868e3
.word 0x3f37e21c
.word 0x3f5985e9
.word 0x3f5868e3
.word 0x3f37e21c
.word 0x3f5985e9
.word 0x3f5868e3
.word 0x3f37e21c
.word 0x3f5985e9
.word 0x3f5868e3
.word 0x3f37e21c
.word 0x3f7832be
.word 0x3efa9f0b
.word 0x3ef2fbc0
.word 0x3f7832be
.word 0x3efa9f0b
.word 0x3ef2fbc0
.word 0x3f7832be
.word 0x3efa9f0b
.word 0x3ef2fbc0
.word 0x3f7832be
.word 0x3efa9f0b
.word 0x3ef2fbc0
.word 0x3f7832be
.word 0x3efa9f0b
.word 0x3ef2fbc0
.word 0x3f6d103b
.word 0x3f049f33
.word 0x3ef59f96
.word 0x3f6d103b
.word 0x3f049f33
.word 0x3ef59f96
.word 0x3f6d103b
.word 0x3f049f33
.word 0x3ef59f96
.word 0x3f6d103b
.word 0x3f049f33
.word 0x3ef59f96
.word 0x3f6d103b
.word 0x3f049f33
.word 0x3ef59f96
.word 0x3f01666e
.word 0x3fea311b
.word 0x3f6cc0e7
.word 0x3f01666e
.word 0x3fea311b
.word 0x3f6cc0e7
.word 0x3f01666e
.word 0x3fea311b
.word 0x3f6cc0e7
.word 0x3f01666e
.word 0x3fea311b
.word 0x3f6cc0e7
.word 0x3f01666e
.word 0x3fea311b
.word 0x3f6cc0e7
.word 0x3ee7df29
.word 0x3f977ae7
.word 0x3f0933f3
.word 0x3ee7df29
.word 0x3f977ae7
.word 0x3f0933f3
.word 0x3ee7df29
.word 0x3f977ae7
.word 0x3f0933f3
.word 0x3ee7df29
.word 0x3f977ae7
.word 0x3f0933f3
.word 0x3ee7df29
.word 0x3f977ae7
.word 0x3f0933f3
.word 0x3e89763a
.word 0x40533203
.word 0x3f62ce99
.word 0x3e89763a
.word 0x40533203
.word 0x3f62ce99
.word 0x3e89763a
.word 0x40533203
.word 0x3f62ce99
.word 0x3e89763a
.word 0x40533203
.word 0x3f62ce99
.word 0x3e89763a
.word 0x40533203
.word 0x3f62ce99
.word 0x3f2811d1
.word 0x3fb3d6a3
.word 0x3f6c22bf
.word 0x3f2811d1
.word 0x3fb3d6a3
.word 0x3f6c22bf
.word 0x3f2811d1
.word 0x3fb3d6a3
.word 0x3f6c22bf
.word 0x3f2811d1
.word 0x3fb3d6a3
.word 0x3f6c22bf
.word 0x3f2811d1
.word 0x3fb3d6a3
.word 0x3f6c22bf
.word 0x3d4da1b7
.word 0x40bec93d
.word 0x3e993fab
.word 0x3d4da1b7
.word 0x40bec93d
.word 0x3e993fab
.word 0x3d4da1b7
.word 0x40bec93d
.word 0x3e993fab
.word 0x3d4da1b7
.word 0x40bec93d
.word 0x3e993fab
.word 0x3d4da1b7
.word 0x40bec93d
.word 0x3e993fab
.word 0x3be40fa4
.word 0x4206f240
.word 0x3e707001
.word 0x3be40fa4
.word 0x4206f240
.word 0x3e707001
.word 0x3be40fa4
.word 0x4206f240
.word 0x3e707001
.word 0x3be40fa4
.word 0x4206f240
.word 0x3e707001
.word 0x3be40fa4
.word 0x4206f240
.word 0x3e707001
.word 0x3f2127a7
.word 0x3fc0bee2
.word 0x3f72abcf
.word 0x3f2127a7
.word 0x3fc0bee2
.word 0x3f72abcf
.word 0x3f2127a7
.word 0x3fc0bee2
.word 0x3f72abcf
.word 0x3f2127a7
.word 0x3fc0bee2
.word 0x3f72abcf
.word 0x3f2127a7
.word 0x3fc0bee2
.word 0x3f72abcf
.word 0x3f77a023
.word 0x3f5acb58
.word 0x3f53a30f
.word 0x3f77a023
.word 0x3f5acb58
.word 0x3f53a30f
.word 0x3f77a023
.word 0x3f5acb58
.word 0x3f53a30f
.word 0x3f77a023
.word 0x3f5acb58
.word 0x3f53a30f
.word 0x3f77a023
.word 0x3f5acb58
.word 0x3f53a30f
.word 0x3eb90d01
.word 0x3fa480bf
.word 0x3eedd2cc
.word 0x3eb90d01
.word 0x3fa480bf
.word 0x3eedd2cc
.word 0x3eb90d01
.word 0x3fa480bf
.word 0x3eedd2cc
.word 0x3eb90d01
.word 0x3fa480bf
.word 0x3eedd2cc
.word 0x3eb90d01
.word 0x3fa480bf
.word 0x3eedd2cc
.word 0x3f6a1345
.word 0x3e4da5d9
.word 0x3e3c0914
.word 0x3f6a1345
.word 0x3e4da5d9
.word 0x3e3c0914
.word 0x3f6a1345
.word 0x3e4da5d9
.word 0x3e3c0914
.word 0x3f6a1345
.word 0x3e4da5d9
.word 0x3e3c0914
.word 0x3f6a1345
.word 0x3e4da5d9
.word 0x3e3c0914
.word 0x3d9f6900
.word 0x4146ff6f
.word 0x3f77d48a
.word 0x3d9f6900
.word 0x4146ff6f
.word 0x3f77d48a
.word 0x3d9f6900
.word 0x4146ff6f
.word 0x3f77d48a
.word 0x3d9f6900
.word 0x4146ff6f
.word 0x3f77d48a
.word 0x3d9f6900
.word 0x4146ff6f
.word 0x3f77d48a
.word 0x3d0a5c4f
.word 0x4186d40f
.word 0x3f11bddc
.word 0x3d0a5c4f
.word 0x4186d40f
.word 0x3f11bddc
.word 0x3d0a5c4f
.word 0x4186d40f
.word 0x3f11bddc
.word 0x3d0a5c4f
.word 0x4186d40f
.word 0x3f11bddc
.word 0x3d0a5c4f
.word 0x4186d40f
.word 0x3f11bddc
.word 0x3e1153cb
.word 0x40a2630c
.word 0x3f385e82
.word 0x3e1153cb
.word 0x40a2630c
.word 0x3f385e82
.word 0x3e1153cb
.word 0x40a2630c
.word 0x3f385e82
.word 0x3e1153cb
.word 0x40a2630c
.word 0x3f385e82
.word 0x3e1153cb
.word 0x40a2630c
.word 0x3f385e82
.word 0x3d771b27
.word 0x4173053c
.word 0x3f6a93d5
.word 0x3d771b27
.word 0x4173053c
.word 0x3f6a93d5
.word 0x3d771b27
.word 0x4173053c
.word 0x3f6a93d5
.word 0x3d771b27
.word 0x4173053c
.word 0x3f6a93d5
.word 0x3d771b27
.word 0x4173053c
.word 0x3f6a93d5
.word 0x3cb39806
.word 0x420242c2
.word 0x3f36c412
.word 0x3cb39806
.word 0x420242c2
.word 0x3f36c412
.word 0x3cb39806
.word 0x420242c2
.word 0x3f36c412
.word 0x3cb39806
.word 0x420242c2
.word 0x3f36c412
.word 0x3cb39806
.word 0x420242c2
.word 0x3f36c412
.word 0x3f6fb350
.word 0x3e5a824b
.word 0x3e4c98b2
.word 0x3f6fb350
.word 0x3e5a824b
.word 0x3e4c98b2
.word 0x3f6fb350
.word 0x3e5a824b
.word 0x3e4c98b2
.word 0x3f6fb350
.word 0x3e5a824b
.word 0x3e4c98b2
.word 0x3f6fb350
.word 0x3e5a824b
.word 0x3e4c98b2
.word 0x3f393d62
.word 0x3ecb71bc
.word 0x3e9335f9
.word 0x3f393d62
.word 0x3ecb71bc
.word 0x3e9335f9
.word 0x3f393d62
.word 0x3ecb71bc
.word 0x3e9335f9
.word 0x3f393d62
.word 0x3ecb71bc
.word 0x3e9335f9
.word 0x3f393d62
.word 0x3ecb71bc
.word 0x3e9335f9
.word 0x3e62d16a
.word 0x401fc256
.word 0x3f0d8c40
.word 0x3e62d16a
.word 0x401fc256
.word 0x3f0d8c40
.word 0x3e62d16a
.word 0x401fc256
.word 0x3f0d8c40
.word 0x3e62d16a
.word 0x401fc256
.word 0x3f0d8c40
.word 0x3e62d16a
.word 0x401fc256
.word 0x3f0d8c40
.word 0x3dbad486
.word 0x40c41ffb
.word 0x3f0f220d
.word 0x3dbad486
.word 0x40c41ffb
.word 0x3f0f220d
.word 0x3dbad486
.word 0x40c41ffb
.word 0x3f0f220d
.word 0x3dbad486
.word 0x40c41ffb
.word 0x3f0f220d
.word 0x3dbad486
.word 0x40c41ffb
.word 0x3f0f220d
.word 0x3f5ce8d9
.word 0x3d865347
.word 0x3d67d37d
.word 0x3f5ce8d9
.word 0x3d865347
.word 0x3d67d37d
.word 0x3f5ce8d9
.word 0x3d865347
.word 0x3d67d37d
.word 0x3f5ce8d9
.word 0x3d865347
.word 0x3d67d37d
.word 0x3f5ce8d9
.word 0x3d865347
.word 0x3d67d37d
.word 0x3e9cc631
.word 0x3f2e752c
.word 0x3e55acf0
.word 0x3e9cc631
.word 0x3f2e752c
.word 0x3e55acf0
.word 0x3e9cc631
.word 0x3f2e752c
.word 0x3e55acf0
.word 0x3e9cc631
.word 0x3f2e752c
.word 0x3e55acf0
.word 0x3e9cc631
.word 0x3f2e752c
.word 0x3e55acf0
.word 0x3dda8857
.word 0x40a45860
.word 0x3f0c4ac9
.word 0x3dda8857
.word 0x40a45860
.word 0x3f0c4ac9
.word 0x3dda8857
.word 0x40a45860
.word 0x3f0c4ac9
.word 0x3dda8857
.word 0x40a45860
.word 0x3f0c4ac9
.word 0x3dda8857
.word 0x40a45860
.word 0x3f0c4ac9
.word 0x3db574c8
.word 0x3f854ce6
.word 0x3dbcf85d
.word 0x3db574c8
.word 0x3f854ce6
.word 0x3dbcf85d
.word 0x3db574c8
.word 0x3f854ce6
.word 0x3dbcf85d
.word 0x3db574c8
.word 0x3f854ce6
.word 0x3dbcf85d
.word 0x3db574c8
.word 0x3f854ce6
.word 0x3dbcf85d
.word 0x3f6a9ce3
.word 0x3ed55866
.word 0x3ec3858c
.word 0x3f6a9ce3
.word 0x3ed55866
.word 0x3ec3858c
.word 0x3f6a9ce3
.word 0x3ed55866
.word 0x3ec3858c
.word 0x3f6a9ce3
.word 0x3ed55866
.word 0x3ec3858c
.word 0x3f6a9ce3
.word 0x3ed55866
.word 0x3ec3858c
.word 0x3f5f7c7e
.word 0x3e444826
.word 0x3e2b5a4d
.word 0x3f5f7c7e
.word 0x3e444826
.word 0x3e2b5a4d
.word 0x3f5f7c7e
.word 0x3e444826
.word 0x3e2b5a4d
.word 0x3f5f7c7e
.word 0x3e444826
.word 0x3e2b5a4d
.word 0x3f5f7c7e
.word 0x3e444826
.word 0x3e2b5a4d
.word 0x3ebdd9d7
.word 0x3f4e2c0f
.word 0x3e98e5f8
.word 0x3ebdd9d7
.word 0x3f4e2c0f
.word 0x3e98e5f8
.word 0x3ebdd9d7
.word 0x3f4e2c0f
.word 0x3e98e5f8
.word 0x3ebdd9d7
.word 0x3f4e2c0f
.word 0x3e98e5f8
.word 0x3ebdd9d7
.word 0x3f4e2c0f
.word 0x3e98e5f8
.word 0x3f098b9f
.word 0x3e3f609f
.word 0x3dcda62a
.word 0x3f098b9f
.word 0x3e3f609f
.word 0x3dcda62a
.word 0x3f098b9f
.word 0x3e3f609f
.word 0x3dcda62a
.word 0x3f098b9f
.word 0x3e3f609f
.word 0x3dcda62a
.word 0x3f098b9f
.word 0x3e3f609f
.word 0x3dcda62a
.word 0x3f650271
.word 0x3ecadafc
.word 0x3eb577d3
.word 0x3f650271
.word 0x3ecadafc
.word 0x3eb577d3
.word 0x3f650271
.word 0x3ecadafc
.word 0x3eb577d3
.word 0x3f650271
.word 0x3ecadafc
.word 0x3eb577d3
.word 0x3f650271
.word 0x3ecadafc
.word 0x3eb577d3
.word 0x3ebe75d0
.word 0x401b4d70
.word 0x3f6715e4
.word 0x3ebe75d0
.word 0x401b4d70
.word 0x3f6715e4
.word 0x3ebe75d0
.word 0x401b4d70
.word 0x3f6715e4
.word 0x3ebe75d0
.word 0x401b4d70
.word 0x3f6715e4
.word 0x3ebe75d0
.word 0x401b4d70
.word 0x3f6715e4
.word 0x3ec96e53
.word 0x400b34ae
.word 0x3f5b10b5
.word 0x3ec96e53
.word 0x400b34ae
.word 0x3f5b10b5
.word 0x3ec96e53
.word 0x400b34ae
.word 0x3f5b10b5
.word 0x3ec96e53
.word 0x400b34ae
.word 0x3f5b10b5
.word 0x3ec96e53
.word 0x400b34ae
.word 0x3f5b10b5
.word 0x3f5ae3fd
.word 0x3ee031f2
.word 0x3ebfb233
.word 0x3f5ae3fd
.word 0x3ee031f2
.word 0x3ebfb233
.word 0x3f5ae3fd
.word 0x3ee031f2
.word 0x3ebfb233
.word 0x3f5ae3fd
.word 0x3ee031f2
.word 0x3ebfb233
.word 0x3f5ae3fd
.word 0x3ee031f2
.word 0x3ebfb233
.word 0x3f665c3d
.word 0x3f3583c8
.word 0x3f2355cd
.word 0x3f665c3d
.word 0x3f3583c8
.word 0x3f2355cd
.word 0x3f665c3d
.word 0x3f3583c8
.word 0x3f2355cd
.word 0x3f665c3d
.word 0x3f3583c8
.word 0x3f2355cd
.word 0x3f665c3d
.word 0x3f3583c8
.word 0x3f2355cd
.word 0x3f022057
.word 0x3f85bd79
.word 0x3f07f63a
.word 0x3f022057
.word 0x3f85bd79
.word 0x3f07f63a
.word 0x3f022057
.word 0x3f85bd79
.word 0x3f07f63a
.word 0x3f022057
.word 0x3f85bd79
.word 0x3f07f63a
.word 0x3f022057
.word 0x3f85bd79
.word 0x3f07f63a
.word 0x3e5eef03
.word 0x3f5b4938
.word 0x3e3ef63b
.word 0x3e5eef03
.word 0x3f5b4938
.word 0x3e3ef63b
.word 0x3e5eef03
.word 0x3f5b4938
.word 0x3e3ef63b
.word 0x3e5eef03
.word 0x3f5b4938
.word 0x3e3ef63b
.word 0x3e5eef03
.word 0x3f5b4938
.word 0x3e3ef63b
.word 0x3ec5ec2e
.word 0x3fbf599b
.word 0x3f13f07e
.word 0x3ec5ec2e
.word 0x3fbf599b
.word 0x3f13f07e
.word 0x3ec5ec2e
.word 0x3fbf599b
.word 0x3f13f07e
.word 0x3ec5ec2e
.word 0x3fbf599b
.word 0x3f13f07e
.word 0x3ec5ec2e
.word 0x3fbf599b
.word 0x3f13f07e
.word 0x3f4eafb1
.word 0x3d8572eb
.word 0x3d577c1f
.word 0x3f4eafb1
.word 0x3d8572eb
.word 0x3d577c1f
.word 0x3f4eafb1
.word 0x3d8572eb
.word 0x3d577c1f
.word 0x3f4eafb1
.word 0x3d8572eb
.word 0x3d577c1f
.word 0x3f4eafb1
.word 0x3d8572eb
.word 0x3d577c1f
.word 0x3e16064a
.word 0x40ccd0cd
.word 0x3f700ec1
.word 0x3e16064a
.word 0x40ccd0cd
.word 0x3f700ec1
.word 0x3e16064a
.word 0x40ccd0cd
.word 0x3f700ec1
.word 0x3e16064a
.word 0x40ccd0cd
.word 0x3f700ec1
.word 0x3e16064a
.word 0x40ccd0cd
.word 0x3f700ec1
.word 0x3f235339
.word 0x3dc59c8f
.word 0x3d7c25db
.word 0x3f235339
.word 0x3dc59c8f
.word 0x3d7c25db
.word 0x3f235339
.word 0x3dc59c8f
.word 0x3d7c25db
.word 0x3f235339
.word 0x3dc59c8f
.word 0x3d7c25db
.word 0x3f235339
.word 0x3dc59c8f
.word 0x3d7c25db
.word 0x3f634aaf
.word 0x3ea253fb
.word 0x3e901fd3
.word 0x3f634aaf
.word 0x3ea253fb
.word 0x3e901fd3
.word 0x3f634aaf
.word 0x3ea253fb
.word 0x3e901fd3
.word 0x3f634aaf
.word 0x3ea253fb
.word 0x3e901fd3
.word 0x3f634aaf
.word 0x3ea253fb
.word 0x3e901fd3
.word 0x3f784a89
.word 0x3e6f0f62
.word 0x3e67dc82
.word 0x3f784a89
.word 0x3e6f0f62
.word 0x3e67dc82
.word 0x3f784a89
.word 0x3e6f0f62
.word 0x3e67dc82
.word 0x3f784a89
.word 0x3e6f0f62
.word 0x3e67dc82
.word 0x3f784a89
.word 0x3e6f0f62
.word 0x3e67dc82
.word 0x3f0cf6eb
.word 0x3fdb2e65
.word 0x3f716190
.word 0x3f0cf6eb
.word 0x3fdb2e65
.word 0x3f716190
.word 0x3f0cf6eb
.word 0x3fdb2e65
.word 0x3f716190
.word 0x3f0cf6eb
.word 0x3fdb2e65
.word 0x3f716190
.word 0x3f0cf6eb
.word 0x3fdb2e65
.word 0x3f716190
.word 0x3f358ecd
.word 0x3fb35d66
.word 0x3f7e6a2e
.word 0x3f358ecd
.word 0x3fb35d66
.word 0x3f7e6a2e
.word 0x3f358ecd
.word 0x3fb35d66
.word 0x3f7e6a2e
.word 0x3f358ecd
.word 0x3fb35d66
.word 0x3f7e6a2e
.word 0x3f358ecd
.word 0x3fb35d66
.word 0x3f7e6a2e
.word 0x3e5384b9
.word 0x3e9d1e3b
.word 0x3d81d160
.word 0x3e5384b9
.word 0x3e9d1e3b
.word 0x3d81d160
.word 0x3e5384b9
.word 0x3e9d1e3b
.word 0x3d81d160
.word 0x3e5384b9
.word 0x3e9d1e3b
.word 0x3d81d160
.word 0x3e5384b9
.word 0x3e9d1e3b
.word 0x3d81d160
.word 0x3f1a0a38
.word 0x3f59d47a
.word 0x3f031283
.word 0x3f1a0a38
.word 0x3f59d47a
.word 0x3f031283
.word 0x3f1a0a38
.word 0x3f59d47a
.word 0x3f031283
.word 0x3f1a0a38
.word 0x3f59d47a
.word 0x3f031283
.word 0x3f1a0a38
.word 0x3f59d47a
.word 0x3f031283
.word 0x3ecb3f77
.word 0x3fdb39a9
.word 0x3f2e0d12
.word 0x3ecb3f77
.word 0x3fdb39a9
.word 0x3f2e0d12
.word 0x3ecb3f77
.word 0x3fdb39a9
.word 0x3f2e0d12
.word 0x3ecb3f77
.word 0x3fdb39a9
.word 0x3f2e0d12
.word 0x3ecb3f77
.word 0x3fdb39a9
.word 0x3f2e0d12
.word 0x3d9d8915
.word 0x4101c919
.word 0x3f1fbba8
.word 0x3d9d8915
.word 0x4101c919
.word 0x3f1fbba8
.word 0x3d9d8915
.word 0x4101c919
.word 0x3f1fbba8
.word 0x3d9d8915
.word 0x4101c919
.word 0x3f1fbba8
.word 0x3d9d8915
.word 0x4101c919
.word 0x3f1fbba8
.word 0x3eae77ae
.word 0x3dafb343
.word 0x3cef7bf8
.word 0x3eae77ae
.word 0x3dafb343
.word 0x3cef7bf8
.word 0x3eae77ae
.word 0x3dafb343
.word 0x3cef7bf8
.word 0x3eae77ae
.word 0x3dafb343
.word 0x3cef7bf8
.word 0x3eae77ae
.word 0x3dafb343
.word 0x3cef7bf8
.word 0x3e47f1fa
.word 0x405dc5af
.word 0x3f2d364b
.word 0x3e47f1fa
.word 0x405dc5af
.word 0x3f2d364b
.word 0x3e47f1fa
.word 0x405dc5af
.word 0x3f2d364b
.word 0x3e47f1fa
.word 0x405dc5af
.word 0x3f2d364b
.word 0x3e47f1fa
.word 0x405dc5af
.word 0x3f2d364b
.word 0x3f1f5d98
.word 0x3f8ec39d
.word 0x3f31bf61
.word 0x3f1f5d98
.word 0x3f8ec39d
.word 0x3f31bf61
.word 0x3f1f5d98
.word 0x3f8ec39d
.word 0x3f31bf61
.word 0x3f1f5d98
.word 0x3f8ec39d
.word 0x3f31bf61
.word 0x3f1f5d98
.word 0x3f8ec39d
.word 0x3f31bf61
.word 0x3f057e78
.word 0x3fd29017
.word 0x3f5b99c3
.word 0x3f057e78
.word 0x3fd29017
.word 0x3f5b99c3
.word 0x3f057e78
.word 0x3fd29017
.word 0x3f5b99c3
.word 0x3f057e78
.word 0x3fd29017
.word 0x3f5b99c3
.word 0x3f057e78
.word 0x3fd29017
.word 0x3f5b99c3
.word 0x3f3b6872
.word 0x3f37b152
.word 0x3f067979
.word 0x3f3b6872
.word 0x3f37b152
.word 0x3f067979
.word 0x3f3b6872
.word 0x3f37b152
.word 0x3f067979
.word 0x3f3b6872
.word 0x3f37b152
.word 0x3f067979
.word 0x3f3b6872
.word 0x3f37b152
.word 0x3f067979
.word 0x3df734c7
.word 0x404da0fa
.word 0x3ec690b7
.word 0x3df734c7
.word 0x404da0fa
.word 0x3ec690b7
.word 0x3df734c7
.word 0x404da0fa
.word 0x3ec690b7
.word 0x3df734c7
.word 0x404da0fa
.word 0x3ec690b7
.word 0x3df734c7
.word 0x404da0fa
.word 0x3ec690b7
.word 0x3f3ec7d3
.word 0x3f4a7a3f
.word 0x3f16e4c7
.word 0x3f3ec7d3
.word 0x3f4a7a3f
.word 0x3f16e4c7
.word 0x3f3ec7d3
.word 0x3f4a7a3f
.word 0x3f16e4c7
.word 0x3f3ec7d3
.word 0x3f4a7a3f
.word 0x3f16e4c7
.word 0x3f3ec7d3
.word 0x3f4a7a3f
.word 0x3f16e4c7
.word 0x3f0c6851
.word 0x3e072d87
.word 0x3d9447f7
.word 0x3f0c6851
.word 0x3e072d87
.word 0x3d9447f7
.word 0x3f0c6851
.word 0x3e072d87
.word 0x3d9447f7
.word 0x3f0c6851
.word 0x3e072d87
.word 0x3d9447f7
.word 0x3f0c6851
.word 0x3e072d87
.word 0x3d9447f7
.word 0x3f239248
.word 0x3f94fb55
.word 0x3f3e6252
.word 0x3f239248
.word 0x3f94fb55
.word 0x3f3e6252
.word 0x3f239248
.word 0x3f94fb55
.word 0x3f3e6252
.word 0x3f239248
.word 0x3f94fb55
.word 0x3f3e6252
.word 0x3f239248
.word 0x3f94fb55
.word 0x3f3e6252
.word 0x3f60629c
.word 0x3eefd68e
.word 0x3ed2381f
.word 0x3f60629c
.word 0x3eefd68e
.word 0x3ed2381f
.word 0x3f60629c
.word 0x3eefd68e
.word 0x3ed2381f
.word 0x3f60629c
.word 0x3eefd68e
.word 0x3ed2381f
.word 0x3f60629c
.word 0x3eefd68e
.word 0x3ed2381f
.word 0x3f53ef69
.word 0x3f973b3b
.word 0x3f7a6681
.word 0x3f53ef69
.word 0x3f973b3b
.word 0x3f7a6681
.word 0x3f53ef69
.word 0x3f973b3b
.word 0x3f7a6681
.word 0x3f53ef69
.word 0x3f973b3b
.word 0x3f7a6681
.word 0x3f53ef69
.word 0x3f973b3b
.word 0x3f7a6681
.word 0x3f032873
.word 0x3ed7d43e
.word 0x3e5d276e
.word 0x3f032873
.word 0x3ed7d43e
.word 0x3e5d276e
.word 0x3f032873
.word 0x3ed7d43e
.word 0x3e5d276e
.word 0x3f032873
.word 0x3ed7d43e
.word 0x3e5d276e
.word 0x3f032873
.word 0x3ed7d43e
.word 0x3e5d276e
.word 0x3e81c8ab
.word 0x40395de6
.word 0x3f3bf33d
.word 0x3e81c8ab
.word 0x40395de6
.word 0x3f3bf33d
.word 0x3e81c8ab
.word 0x40395de6
.word 0x3f3bf33d
.word 0x3e81c8ab
.word 0x40395de6
.word 0x3f3bf33d
.word 0x3e81c8ab
.word 0x40395de6
.word 0x3f3bf33d
.word 0x3f174798
.word 0x3fc5fe09
.word 0x3f6a006f
.word 0x3f174798
.word 0x3fc5fe09
.word 0x3f6a006f
.word 0x3f174798
.word 0x3fc5fe09
.word 0x3f6a006f
.word 0x3f174798
.word 0x3fc5fe09
.word 0x3f6a006f
.word 0x3f174798
.word 0x3fc5fe09
.word 0x3f6a006f
.word 0x3f077124
.word 0x3f0e6a54
.word 0x3e96b208
.word 0x3f077124
.word 0x3f0e6a54
.word 0x3e96b208
.word 0x3f077124
.word 0x3f0e6a54
.word 0x3e96b208
.word 0x3f077124
.word 0x3f0e6a54
.word 0x3e96b208
.word 0x3f077124
.word 0x3f0e6a54
.word 0x3e96b208
.word 0x3e50cb77
.word 0x4017b382
.word 0x3ef774d8
.word 0x3e50cb77
.word 0x4017b382
.word 0x3ef774d8
.word 0x3e50cb77
.word 0x4017b382
.word 0x3ef774d8
.word 0x3e50cb77
.word 0x4017b382
.word 0x3ef774d8
.word 0x3e50cb77
.word 0x4017b382
.word 0x3ef774d8
.word 0x3f0d84ae
.word 0x3e9c48e6
.word 0x3e2cca4e
.word 0x3f0d84ae
.word 0x3e9c48e6
.word 0x3e2cca4e
.word 0x3f0d84ae
.word 0x3e9c48e6
.word 0x3e2cca4e
.word 0x3f0d84ae
.word 0x3e9c48e6
.word 0x3e2cca4e
.word 0x3f0d84ae
.word 0x3e9c48e6
.word 0x3e2cca4e
.word 0x3ea8d94d
.word 0x3eab892a
.word 0x3de2473e
.word 0x3ea8d94d
.word 0x3eab892a
.word 0x3de2473e
.word 0x3ea8d94d
.word 0x3eab892a
.word 0x3de2473e
.word 0x3ea8d94d
.word 0x3eab892a
.word 0x3de2473e
.word 0x3ea8d94d
.word 0x3eab892a
.word 0x3de2473e
.word 0x3ca9ef3f
.word 0x40a634cb
.word 0x3ddca85d
.word 0x3ca9ef3f
.word 0x40a634cb
.word 0x3ddca85d
.word 0x3ca9ef3f
.word 0x40a634cb
.word 0x3ddca85d
.word 0x3ca9ef3f
.word 0x40a634cb
.word 0x3ddca85d
.word 0x3ca9ef3f
.word 0x40a634cb
.word 0x3ddca85d
.word 0x3c9bdd66
.word 0x421ea92d
.word 0x3f41334b
.word 0x3c9bdd66
.word 0x421ea92d
.word 0x3f41334b
.word 0x3c9bdd66
.word 0x421ea92d
.word 0x3f41334b
.word 0x3c9bdd66
.word 0x421ea92d
.word 0x3f41334b
.word 0x3c9bdd66
.word 0x421ea92d
.word 0x3f41334b
.word 0x3e81e342
.word 0x4017ee82
.word 0x3f1a2c1e
.word 0x3e81e342
.word 0x4017ee82
.word 0x3f1a2c1e
.word 0x3e81e342
.word 0x4017ee82
.word 0x3f1a2c1e
.word 0x3e81e342
.word 0x4017ee82
.word 0x3f1a2c1e
.word 0x3e81e342
.word 0x4017ee82
.word 0x3f1a2c1e
.word 0x3f7238b6
.word 0x3f1c2500
.word 0x3f13bd91
.word 0x3f7238b6
.word 0x3f1c2500
.word 0x3f13bd91
.word 0x3f7238b6
.word 0x3f1c2500
.word 0x3f13bd91
.word 0x3f7238b6
.word 0x3f1c2500
.word 0x3f13bd91
.word 0x3f7238b6
.word 0x3f1c2500
.word 0x3f13bd91
.word 0x3f5f87c2
.word 0x3911cadb
.word 0x38fe9a0b
.word 0x3f5f87c2
.word 0x3911cadb
.word 0x38fe9a0b
.word 0x3f5f87c2
.word 0x3911cadb
.word 0x38fe9a0b
.word 0x3f5f87c2
.word 0x3911cadb
.word 0x38fe9a0b
.word 0x3f5f87c2
.word 0x3911cadb
.word 0x38fe9a0b
.word 0x3f1f6266
.word 0x3f7b2a07
.word 0x3f1c5fa4
.word 0x3f1f6266
.word 0x3f7b2a07
.word 0x3f1c5fa4
.word 0x3f1f6266
.word 0x3f7b2a07
.word 0x3f1c5fa4
.word 0x3f1f6266
.word 0x3f7b2a07
.word 0x3f1c5fa4
.word 0x3f1f6266
.word 0x3f7b2a07
.word 0x3f1c5fa4
.word 0x3ec26c97
.word 0x3fe9e3c6
.word 0x3f31a1d2
.word 0x3ec26c97
.word 0x3fe9e3c6
.word 0x3f31a1d2
.word 0x3ec26c97
.word 0x3fe9e3c6
.word 0x3f31a1d2
.word 0x3ec26c97
.word 0x3fe9e3c6
.word 0x3f31a1d2
.word 0x3ec26c97
.word 0x3fe9e3c6
.word 0x3f31a1d2
.word 0x3f2ac646
.word 0x3e12b0d5
.word 0x3dc3b616
.word 0x3f2ac646
.word 0x3e12b0d5
.word 0x3dc3b616
.word 0x3f2ac646
.word 0x3e12b0d5
.word 0x3dc3b616
.word 0x3f2ac646
.word 0x3e12b0d5
.word 0x3dc3b616
.word 0x3f2ac646
.word 0x3e12b0d5
.word 0x3dc3b616
.word 0x3e6344e4
.word 0x408db8d0
.word 0x3f7ba209
.word 0x3e6344e4
.word 0x408db8d0
.word 0x3f7ba209
.word 0x3e6344e4
.word 0x408db8d0
.word 0x3f7ba209
.word 0x3e6344e4
.word 0x408db8d0
.word 0x3f7ba209
.word 0x3e6344e4
.word 0x408db8d0
.word 0x3f7ba209
.word 0x3e9a826a
.word 0x40516bff
.word 0x3f7ccb4f
.word 0x3e9a826a
.word 0x40516bff
.word 0x3f7ccb4f
.word 0x3e9a826a
.word 0x40516bff
.word 0x3f7ccb4f
.word 0x3e9a826a
.word 0x40516bff
.word 0x3f7ccb4f
.word 0x3e9a826a
.word 0x40516bff
.word 0x3f7ccb4f
.word 0x3f4a44f5
.word 0x3e2e435c
.word 0x3e09b017
.word 0x3f4a44f5
.word 0x3e2e435c
.word 0x3e09b017
.word 0x3f4a44f5
.word 0x3e2e435c
.word 0x3e09b017
.word 0x3f4a44f5
.word 0x3e2e435c
.word 0x3e09b017
.word 0x3f4a44f5
.word 0x3e2e435c
.word 0x3e09b017
.word 0x3f042955
.word 0x3fd5b286
.word 0x3f5ca51d
.word 0x3f042955
.word 0x3fd5b286
.word 0x3f5ca51d
.word 0x3f042955
.word 0x3fd5b286
.word 0x3f5ca51d
.word 0x3f042955
.word 0x3fd5b286
.word 0x3f5ca51d
.word 0x3f042955
.word 0x3fd5b286
.word 0x3f5ca51d
.word 0x3f300e5f
.word 0x3f9599c9
.word 0x3f4dc441
.word 0x3f300e5f
.word 0x3f9599c9
.word 0x3f4dc441
.word 0x3f300e5f
.word 0x3f9599c9
.word 0x3f4dc441
.word 0x3f300e5f
.word 0x3f9599c9
.word 0x3f4dc441
.word 0x3f300e5f
.word 0x3f9599c9
.word 0x3f4dc441
.word 0x3f6217cb
.word 0x3ec3848c
.word 0x3eacad30
.word 0x3f6217cb
.word 0x3ec3848c
.word 0x3eacad30
.word 0x3f6217cb
.word 0x3ec3848c
.word 0x3eacad30
.word 0x3f6217cb
.word 0x3ec3848c
.word 0x3eacad30
.word 0x3f6217cb
.word 0x3ec3848c
.word 0x3eacad30
.word 0x3df59939
.word 0x407d5c03
.word 0x3ef310b4
.word 0x3df59939
.word 0x407d5c03
.word 0x3ef310b4
.word 0x3df59939
.word 0x407d5c03
.word 0x3ef310b4
.word 0x3df59939
.word 0x407d5c03
.word 0x3ef310b4
.word 0x3df59939
.word 0x407d5c03
.word 0x3ef310b4
.word 0x3ed25a0c
.word 0x400dce50
.word 0x3f690a3e
.word 0x3ed25a0c
.word 0x400dce50
.word 0x3f690a3e
.word 0x3ed25a0c
.word 0x400dce50
.word 0x3f690a3e
.word 0x3ed25a0c
.word 0x400dce50
.word 0x3f690a3e
.word 0x3ed25a0c
.word 0x400dce50
.word 0x3f690a3e
.word 0x3ecbe7c9
.word 0x3fdf97c6
.word 0x3f3217cb
.word 0x3ecbe7c9
.word 0x3fdf97c6
.word 0x3f3217cb
.word 0x3ecbe7c9
.word 0x3fdf97c6
.word 0x3f3217cb
.word 0x3ecbe7c9
.word 0x3fdf97c6
.word 0x3f3217cb
.word 0x3ecbe7c9
.word 0x3fdf97c6
.word 0x3f3217cb
.word 0x3f78b956
.word 0x3f28452c
.word 0x3f237cd5
.word 0x3f78b956
.word 0x3f28452c
.word 0x3f237cd5
.word 0x3f78b956
.word 0x3f28452c
.word 0x3f237cd5
.word 0x3f78b956
.word 0x3f28452c
.word 0x3f237cd5
.word 0x3f78b956
.word 0x3f28452c
.word 0x3f237cd5
.word 0x3e4729b7
.word 0x3df8c464
.word 0x3cc18934
.word 0x3e4729b7
.word 0x3df8c464
.word 0x3cc18934
.word 0x3e4729b7
.word 0x3df8c464
.word 0x3cc18934
.word 0x3e4729b7
.word 0x3df8c464
.word 0x3cc18934
.word 0x3e4729b7
.word 0x3df8c464
.word 0x3cc18934
.word 0x3eb5faaf
.word 0x3f59951d
.word 0x3e9aab7e
.word 0x3eb5faaf
.word 0x3f59951d
.word 0x3e9aab7e
.word 0x3eb5faaf
.word 0x3f59951d
.word 0x3e9aab7e
.word 0x3eb5faaf
.word 0x3f59951d
.word 0x3e9aab7e
.word 0x3eb5faaf
.word 0x3f59951d
.word 0x3e9aab7e
.word 0x3db95230
.word 0x40aba2e4
.word 0x3ef87fa4
.word 0x3db95230
.word 0x40aba2e4
.word 0x3ef87fa4
.word 0x3db95230
.word 0x40aba2e4
.word 0x3ef87fa4
.word 0x3db95230
.word 0x40aba2e4
.word 0x3ef87fa4
.word 0x3db95230
.word 0x40aba2e4
.word 0x3ef87fa4
.word 0x3f23be2a
.word 0x3dd75e5f
.word 0x3d89c112
.word 0x3f23be2a
.word 0x3dd75e5f
.word 0x3d89c112
.word 0x3f23be2a
.word 0x3dd75e5f
.word 0x3d89c112
.word 0x3f23be2a
.word 0x3dd75e5f
.word 0x3d89c112
.word 0x3f23be2a
.word 0x3dd75e5f
.word 0x3d89c112
.word 0x3f4c9380
.word 0x3edcc861
.word 0x3eb06ee3
.word 0x3f4c9380
.word 0x3edcc861
.word 0x3eb06ee3
.word 0x3f4c9380
.word 0x3edcc861
.word 0x3eb06ee3
.word 0x3f4c9380
.word 0x3edcc861
.word 0x3eb06ee3
.word 0x3f4c9380
.word 0x3edcc861
.word 0x3eb06ee3
.word 0x3d472d19
.word 0x41076004
.word 0x3ed2a6fa
.word 0x3d472d19
.word 0x41076004
.word 0x3ed2a6fa
.word 0x3d472d19
.word 0x41076004
.word 0x3ed2a6fa
.word 0x3d472d19
.word 0x41076004
.word 0x3ed2a6fa
.word 0x3d472d19
.word 0x41076004
.word 0x3ed2a6fa
.word 0x3ebaebea
.word 0x3ff88418
.word 0x3f3574fe
.word 0x3ebaebea
.word 0x3ff88418
.word 0x3f3574fe
.word 0x3ebaebea
.word 0x3ff88418
.word 0x3f3574fe
.word 0x3ebaebea
.word 0x3ff88418
.word 0x3f3574fe
.word 0x3ebaebea
.word 0x3ff88418
.word 0x3f3574fe
.word 0x3f67fe02
.word 0x3f62cba4
.word 0x3f4d86c9
.word 0x3f67fe02
.word 0x3f62cba4
.word 0x3f4d86c9
.word 0x3f67fe02
.word 0x3f62cba4
.word 0x3f4d86c9
.word 0x3f67fe02
.word 0x3f62cba4
.word 0x3f4d86c9
.word 0x3f67fe02
.word 0x3f62cba4
.word 0x3f4d86c9
.word 0x3e47e75a
.word 0x4035e15e
.word 0x3f0e068f
.word 0x3e47e75a
.word 0x4035e15e
.word 0x3f0e068f
.word 0x3e47e75a
.word 0x4035e15e
.word 0x3f0e068f
.word 0x3e47e75a
.word 0x4035e15e
.word 0x3f0e068f
.word 0x3e47e75a
.word 0x4035e15e
.word 0x3f0e068f
.word 0x3f682854
.word 0x3e61837c
.word 0x3e4c82af
.word 0x3f682854
.word 0x3e61837c
.word 0x3e4c82af
.word 0x3f682854
.word 0x3e61837c
.word 0x3e4c82af
.word 0x3f682854
.word 0x3e61837c
.word 0x3e4c82af
.word 0x3f682854
.word 0x3e61837c
.word 0x3e4c82af
.word 0x3e1f7474
.word 0x408889b8
.word 0x3f2a174c
.word 0x3e1f7474
.word 0x408889b8
.word 0x3f2a174c
.word 0x3e1f7474
.word 0x408889b8
.word 0x3f2a174c
.word 0x3e1f7474
.word 0x408889b8
.word 0x3f2a174c
.word 0x3e1f7474
.word 0x408889b8
.word 0x3f2a174c
.word 0x3e495a9a
.word 0x3fcc99e8
.word 0x3ea0ed41
.word 0x3e495a9a
.word 0x3fcc99e8
.word 0x3ea0ed41
.word 0x3e495a9a
.word 0x3fcc99e8
.word 0x3ea0ed41
.word 0x3e495a9a
.word 0x3fcc99e8
.word 0x3ea0ed41
.word 0x3e495a9a
.word 0x3fcc99e8
.word 0x3ea0ed41
.word 0x3e478d8f
.word 0x40713694
.word 0x3f3c06cf
.word 0x3e478d8f
.word 0x40713694
.word 0x3f3c06cf
.word 0x3e478d8f
.word 0x40713694
.word 0x3f3c06cf
.word 0x3e478d8f
.word 0x40713694
.word 0x3f3c06cf
.word 0x3e478d8f
.word 0x40713694
.word 0x3f3c06cf
.word 0x3f4e988b
.word 0x3f0d99f9
.word 0x3ee48c8d
.word 0x3f4e988b
.word 0x3f0d99f9
.word 0x3ee48c8d
.word 0x3f4e988b
.word 0x3f0d99f9
.word 0x3ee48c8d
.word 0x3f4e988b
.word 0x3f0d99f9
.word 0x3ee48c8d
.word 0x3f4e988b
.word 0x3f0d99f9
.word 0x3ee48c8d
.word 0x3eec6342
.word 0x3f304bab
.word 0x3ea2ca1d
.word 0x3eec6342
.word 0x3f304bab
.word 0x3ea2ca1d
.word 0x3eec6342
.word 0x3f304bab
.word 0x3ea2ca1d
.word 0x3eec6342
.word 0x3f304bab
.word 0x3ea2ca1d
.word 0x3eec6342
.word 0x3f304bab
.word 0x3ea2ca1d
.word 0x3e8a5466
.word 0x400acfe7
.word 0x3f1603ac
.word 0x3e8a5466
.word 0x400acfe7
.word 0x3f1603ac
.word 0x3e8a5466
.word 0x400acfe7
.word 0x3f1603ac
.word 0x3e8a5466
.word 0x400acfe7
.word 0x3f1603ac
.word 0x3e8a5466
.word 0x400acfe7
.word 0x3f1603ac
.word 0x3f3a3075
.word 0x3e8b7226
.word 0x3e4ad6aa
.word 0x3f3a3075
.word 0x3e8b7226
.word 0x3e4ad6aa
.word 0x3f3a3075
.word 0x3e8b7226
.word 0x3e4ad6aa
.word 0x3f3a3075
.word 0x3e8b7226
.word 0x3e4ad6aa
.word 0x3f3a3075
.word 0x3e8b7226
.word 0x3e4ad6aa
.word 0x3f20788f
.word 0x3ebbbfb3
.word 0x3e6b6076
.word 0x3f20788f
.word 0x3ebbbfb3
.word 0x3e6b6076
.word 0x3f20788f
.word 0x3ebbbfb3
.word 0x3e6b6076
.word 0x3f20788f
.word 0x3ebbbfb3
.word 0x3e6b6076
.word 0x3f20788f
.word 0x3ebbbfb3
.word 0x3e6b6076
.word 0x3f079d6a
.word 0x3ee8387e
.word 0x3e76092c
.word 0x3f079d6a
.word 0x3ee8387e
.word 0x3e76092c
.word 0x3f079d6a
.word 0x3ee8387e
.word 0x3e76092c
.word 0x3f079d6a
.word 0x3ee8387e
.word 0x3e76092c
.word 0x3f079d6a
.word 0x3ee8387e
.word 0x3e76092c
.word 0x3f7fe265
.word 0x3eacb704
.word 0x3eaca30b
.word 0x3f7fe265
.word 0x3eacb704
.word 0x3eaca30b
.word 0x3f7fe265
.word 0x3eacb704
.word 0x3eaca30b
.word 0x3f7fe265
.word 0x3eacb704
.word 0x3eaca30b
.word 0x3f7fe265
.word 0x3eacb704
.word 0x3eaca30b
.word 0x3f03d4c5
.word 0x3fb7881a
.word 0x3f3d065f
.word 0x3f03d4c5
.word 0x3fb7881a
.word 0x3f3d065f
.word 0x3f03d4c5
.word 0x3fb7881a
.word 0x3f3d065f
.word 0x3f03d4c5
.word 0x3fb7881a
.word 0x3f3d065f
.word 0x3f03d4c5
.word 0x3fb7881a
.word 0x3f3d065f
.word 0x3e539ea8
.word 0x3f5c8df0
.word 0x3e3651ad
.word 0x3e539ea8
.word 0x3f5c8df0
.word 0x3e3651ad
.word 0x3e539ea8
.word 0x3f5c8df0
.word 0x3e3651ad
.word 0x3e539ea8
.word 0x3f5c8df0
.word 0x3e3651ad
.word 0x3c143039
.word 0x42c7444b
.word 0x3f66b20a
.word 0x3c143039
.word 0x42c7444b
.word 0x3f66b20a
.word 0x3c143039
.word 0x42c7444b
.word 0x3f66b20a
.word 0x3eaa2294
.word 0x401b6b4f
.word 0x3f4e9482
.word 0x3eaa2294
.word 0x401b6b4f
.word 0x3f4e9482
.word 0x3eaa2294
.word 0x401b6b4f
.word 0x3f4e9482
.word 0x3eaa2294
.word 0x401b6b4f
.word 0x3f4e9482
.word 0x3f6b19be
.word 0x3eb514b1
.word 0x3ea64c34
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_2:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_3:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_4:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_5:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_6:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_7:
    .fill 328*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
