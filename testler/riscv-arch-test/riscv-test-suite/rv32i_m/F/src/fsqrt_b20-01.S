
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.5.2
// timestamp : Tue Sep  7 16:50:29 2021 GMT
// usage     : riscv_ctg \
//                  -- cgf $cgf \
//                  -- xlen $xlen \
// -----------
//
// -----------
// Copyright (c) 2021. IIT Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fsqrt.s instruction of the RISC-V F extension for the fsqrt_b20 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fsqrt_b20)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs1 == rd, rs1==f29, rd==f29, fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and rm_val == 0  
// opcode: fsqrt.s ; op1:f29; dest:f29; op1val:0x7f7fffff; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f29, f29, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1:
// rs1 != rd, rs1==f15, rd==f17, fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f15; dest:f17; op1val:0x0; valaddr_reg:x16; val_offset:4; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f17, f15, 0x0, 0, x16, 4, x17, x15, 8, x18)

inst_2:
// rs1==f2, rd==f28, fs1 == 0 and fe1 == 0x9e and fm1 == 0x38d874 and rm_val == 0  
// opcode: fsqrt.s ; op1:f2; dest:f28; op1val:0x4f38d874; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f28, f2, 0x0, 0, x16, 8, x17, x15, 16, x18)

inst_3:
// rs1==f9, rd==f2, fs1 == 0 and fe1 == 0xd0 and fm1 == 0x010151 and rm_val == 0  
// opcode: fsqrt.s ; op1:f9; dest:f2; op1val:0x68010151; valaddr_reg:x16; val_offset:12; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f2, f9, 0x0, 0, x16, 12, x17, x15, 24, x18)

inst_4:
// rs1==f17, rd==f30, fs1 == 0 and fe1 == 0xb7 and fm1 == 0x4bce51 and rm_val == 0  
// opcode: fsqrt.s ; op1:f17; dest:f30; op1val:0x5bcbce51; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f30, f17, 0x0, 0, x16, 16, x17, x15, 32, x18)

inst_5:
// rs1==f24, rd==f25, fs1 == 0 and fe1 == 0x30 and fm1 == 0x75cb89 and rm_val == 0  
// opcode: fsqrt.s ; op1:f24; dest:f25; op1val:0x1875cb89; valaddr_reg:x16; val_offset:20; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f25, f24, 0x0, 0, x16, 20, x17, x15, 40, x18)

inst_6:
// rs1==f11, rd==f4, fs1 == 0 and fe1 == 0x79 and fm1 == 0x785c55 and rm_val == 0  
// opcode: fsqrt.s ; op1:f11; dest:f4; op1val:0x3cf85c55; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f4, f11, 0x0, 0, x16, 24, x17, x15, 48, x18)

inst_7:
// rs1==f6, rd==f1, fs1 == 0 and fe1 == 0xac and fm1 == 0x13884e and rm_val == 0  
// opcode: fsqrt.s ; op1:f6; dest:f1; op1val:0x5613884e; valaddr_reg:x16; val_offset:28; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f1, f6, 0x0, 0, x16, 28, x17, x15, 56, x18)

inst_8:
// rs1==f27, rd==f3, fs1 == 0 and fe1 == 0x65 and fm1 == 0x064562 and rm_val == 0  
// opcode: fsqrt.s ; op1:f27; dest:f3; op1val:0x32864562; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f3, f27, 0x0, 0, x16, 32, x17, x15, 64, x18)

inst_9:
// rs1==f13, rd==f8, fs1 == 0 and fe1 == 0xd3 and fm1 == 0x190acf and rm_val == 0  
// opcode: fsqrt.s ; op1:f13; dest:f8; op1val:0x69990acf; valaddr_reg:x16; val_offset:36; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f8, f13, 0x0, 0, x16, 36, x17, x15, 72, x18)

inst_10:
// rs1==f16, rd==f26, fs1 == 0 and fe1 == 0xea and fm1 == 0x284ae6 and rm_val == 0  
// opcode: fsqrt.s ; op1:f16; dest:f26; op1val:0x75284ae6; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f26, f16, 0x0, 0, x16, 40, x17, x15, 80, x18)

inst_11:
// rs1==f18, rd==f22, fs1 == 0 and fe1 == 0x4e and fm1 == 0x454542 and rm_val == 0  
// opcode: fsqrt.s ; op1:f18; dest:f22; op1val:0x27454542; valaddr_reg:x16; val_offset:44; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f22, f18, 0x0, 0, x16, 44, x17, x15, 88, x18)

inst_12:
// rs1==f14, rd==f18, fs1 == 0 and fe1 == 0xb6 and fm1 == 0x479816 and rm_val == 0  
// opcode: fsqrt.s ; op1:f14; dest:f18; op1val:0x5b479816; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f18, f14, 0x0, 0, x16, 48, x17, x15, 96, x18)

inst_13:
// rs1==f5, rd==f6, fs1 == 0 and fe1 == 0x65 and fm1 == 0x5b1e82 and rm_val == 0  
// opcode: fsqrt.s ; op1:f5; dest:f6; op1val:0x32db1e82; valaddr_reg:x16; val_offset:52; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f6, f5, 0x0, 0, x16, 52, x17, x15, 104, x18)

inst_14:
// rs1==f0, rd==f15, fs1 == 0 and fe1 == 0x7b and fm1 == 0x64e1f0 and rm_val == 0  
// opcode: fsqrt.s ; op1:f0; dest:f15; op1val:0x3de4e1f0; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f15, f0, 0x0, 0, x16, 56, x17, x15, 112, x18)

inst_15:
// rs1==f28, rd==f19, fs1 == 0 and fe1 == 0xc2 and fm1 == 0x26f9c3 and rm_val == 0  
// opcode: fsqrt.s ; op1:f28; dest:f19; op1val:0x6126f9c3; valaddr_reg:x16; val_offset:60; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f19, f28, 0x0, 0, x16, 60, x17, x15, 120, x18)

inst_16:
// rs1==f12, rd==f9, fs1 == 0 and fe1 == 0x31 and fm1 == 0x011313 and rm_val == 0  
// opcode: fsqrt.s ; op1:f12; dest:f9; op1val:0x18811313; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f9, f12, 0x0, 0, x16, 64, x17, x15, 128, x18)

inst_17:
// rs1==f31, rd==f16, fs1 == 0 and fe1 == 0xad and fm1 == 0x75bbd8 and rm_val == 0  
// opcode: fsqrt.s ; op1:f31; dest:f16; op1val:0x56f5bbd8; valaddr_reg:x16; val_offset:68; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f16, f31, 0x0, 0, x16, 68, x17, x15, 136, x18)

inst_18:
// rs1==f10, rd==f12, fs1 == 0 and fe1 == 0xe4 and fm1 == 0x1477dc and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f12; op1val:0x721477dc; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f12, f10, 0x0, 0, x16, 72, x17, x15, 144, x18)

inst_19:
// rs1==f4, rd==f7, fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2b61ee and rm_val == 0  
// opcode: fsqrt.s ; op1:f4; dest:f7; op1val:0x7cab61ee; valaddr_reg:x16; val_offset:76; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f7, f4, 0x0, 0, x16, 76, x17, x15, 152, x18)

inst_20:
// rs1==f25, rd==f0, fs1 == 0 and fe1 == 0x3f and fm1 == 0x0577a2 and rm_val == 0  
// opcode: fsqrt.s ; op1:f25; dest:f0; op1val:0x1f8577a2; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f0, f25, 0x0, 0, x16, 80, x17, x15, 160, x18)

inst_21:
// rs1==f7, rd==f14, fs1 == 0 and fe1 == 0xf5 and fm1 == 0x0aadc1 and rm_val == 0  
// opcode: fsqrt.s ; op1:f7; dest:f14; op1val:0x7a8aadc1; valaddr_reg:x16; val_offset:84; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f14, f7, 0x0, 0, x16, 84, x17, x15, 168, x18)

inst_22:
// rs1==f26, rd==f20, fs1 == 0 and fe1 == 0x00 and fm1 == 0x2bf296 and rm_val == 0  
// opcode: fsqrt.s ; op1:f26; dest:f20; op1val:0x2bf296; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f20, f26, 0x0, 0, x16, 88, x17, x15, 176, x18)

inst_23:
// rs1==f20, rd==f5, fs1 == 0 and fe1 == 0x39 and fm1 == 0x0ef3b1 and rm_val == 0  
// opcode: fsqrt.s ; op1:f20; dest:f5; op1val:0x1c8ef3b1; valaddr_reg:x16; val_offset:92; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f5, f20, 0x0, 0, x16, 92, x17, x15, 184, x18)

inst_24:
// rs1==f3, rd==f13, fs1 == 0 and fe1 == 0x59 and fm1 == 0x0fed85 and rm_val == 0  
// opcode: fsqrt.s ; op1:f3; dest:f13; op1val:0x2c8fed85; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f13, f3, 0x0, 0, x16, 96, x17, x15, 192, x18)

inst_25:
// rs1==f23, rd==f27, fs1 == 0 and fe1 == 0x00 and fm1 == 0x0cd173 and rm_val == 0  
// opcode: fsqrt.s ; op1:f23; dest:f27; op1val:0xcd173; valaddr_reg:x16; val_offset:100; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f27, f23, 0x0, 0, x16, 100, x17, x15, 200, x18)

inst_26:
// rs1==f30, rd==f21, fs1 == 0 and fe1 == 0xdd and fm1 == 0x4096e8 and rm_val == 0  
// opcode: fsqrt.s ; op1:f30; dest:f21; op1val:0x6ec096e8; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f21, f30, 0x0, 0, x16, 104, x17, x15, 208, x18)

inst_27:
// rs1==f8, rd==f31, fs1 == 0 and fe1 == 0x0b and fm1 == 0x0cd684 and rm_val == 0  
// opcode: fsqrt.s ; op1:f8; dest:f31; op1val:0x58cd684; valaddr_reg:x16; val_offset:108; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f31, f8, 0x0, 0, x16, 108, x17, x15, 216, x18)

inst_28:
// rs1==f21, rd==f11, fs1 == 0 and fe1 == 0xa7 and fm1 == 0x0f78f8 and rm_val == 0  
// opcode: fsqrt.s ; op1:f21; dest:f11; op1val:0x538f78f8; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f21, 0x0, 0, x16, 112, x17, x15, 224, x18)

inst_29:
// rs1==f1, rd==f23, fs1 == 0 and fe1 == 0xfe and fm1 == 0x7f3827 and rm_val == 0  
// opcode: fsqrt.s ; op1:f1; dest:f23; op1val:0x7f7f3827; valaddr_reg:x16; val_offset:116; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f23, f1, 0x0, 0, x16, 116, x17, x15, 232, x18)

inst_30:
// rs1==f22, rd==f10, fs1 == 0 and fe1 == 0xf3 and fm1 == 0x6653ed and rm_val == 0  
// opcode: fsqrt.s ; op1:f22; dest:f10; op1val:0x79e653ed; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f10, f22, 0x0, 0, x16, 120, x17, x15, 240, x18)

inst_31:
// rs1==f19, rd==f24, fs1 == 0 and fe1 == 0xc0 and fm1 == 0x3590aa and rm_val == 0  
// opcode: fsqrt.s ; op1:f19; dest:f24; op1val:0x603590aa; valaddr_reg:x16; val_offset:124; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f24, f19, 0x0, 0, x16, 124, x17, x15, 248, x18)

inst_32:
// fs1 == 0 and fe1 == 0x3c and fm1 == 0x124e58 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x1e124e58; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 128, x17, x15, 256, x18)

inst_33:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000005 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x5; valaddr_reg:x16; val_offset:132; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 132, x17, x15, 264, x18)

inst_34:
// fs1 == 0 and fe1 == 0x52 and fm1 == 0x216b44 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x29216b44; valaddr_reg:x16; val_offset:136; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 136, x17, x15, 272, x18)

inst_35:
// fs1 == 0 and fe1 == 0xce and fm1 == 0x1168e1 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x671168e1; valaddr_reg:x16; val_offset:140; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 140, x17, x15, 280, x18)

inst_36:
// fs1 == 0 and fe1 == 0xa0 and fm1 == 0x10d851 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x5010d851; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 144, x17, x15, 288, x18)

inst_37:
// fs1 == 0 and fe1 == 0xea and fm1 == 0x4f33d9 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x754f33d9; valaddr_reg:x16; val_offset:148; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 148, x17, x15, 296, x18)

inst_38:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x5b5a62 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0xddb5a62; valaddr_reg:x16; val_offset:152; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 152, x17, x15, 304, x18)

inst_39:
// fs1 == 0 and fe1 == 0xbc and fm1 == 0x68cd04 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x5e68cd04; valaddr_reg:x16; val_offset:156; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 156, x17, x15, 312, x18)

inst_40:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000160 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x160; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 160, x17, x15, 320, x18)

inst_41:
// fs1 == 0 and fe1 == 0x6a and fm1 == 0x3e2364 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x353e2364; valaddr_reg:x16; val_offset:164; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 164, x17, x15, 328, x18)

inst_42:
// fs1 == 0 and fe1 == 0x34 and fm1 == 0x08f690 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x1a08f690; valaddr_reg:x16; val_offset:168; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 168, x17, x15, 336, x18)

inst_43:
// fs1 == 0 and fe1 == 0xd3 and fm1 == 0x6a7f20 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x69ea7f20; valaddr_reg:x16; val_offset:172; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 172, x17, x15, 344, x18)

inst_44:
// fs1 == 0 and fe1 == 0x80 and fm1 == 0x6d5a40 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x406d5a40; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 176, x17, x15, 352, x18)

inst_45:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x46c080 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x3dc6c080; valaddr_reg:x16; val_offset:180; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 180, x17, x15, 360, x18)

inst_46:
// fs1 == 0 and fe1 == 0xd0 and fm1 == 0x095440 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x68095440; valaddr_reg:x16; val_offset:184; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 184, x17, x15, 368, x18)

inst_47:
// fs1 == 0 and fe1 == 0xef and fm1 == 0x7bb880 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x77fbb880; valaddr_reg:x16; val_offset:188; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 188, x17, x15, 376, x18)

inst_48:
// fs1 == 0 and fe1 == 0x39 and fm1 == 0x69d200 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x1ce9d200; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 192, x17, x15, 384, x18)

inst_49:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7ff200 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x7cfff200; valaddr_reg:x16; val_offset:196; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 196, x17, x15, 392, x18)

inst_50:
// fs1 == 0 and fe1 == 0x66 and fm1 == 0x64c400 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x3364c400; valaddr_reg:x16; val_offset:200; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 200, x17, x15, 400, x18)

inst_51:
// fs1 == 0 and fe1 == 0x88 and fm1 == 0x7c0400 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x447c0400; valaddr_reg:x16; val_offset:204; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 204, x17, x15, 408, x18)

inst_52:
// fs1 == 0 and fe1 == 0x86 and fm1 == 0x130400 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x43130400; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 208, x17, x15, 416, x18)

inst_53:
// fs1 == 0 and fe1 == 0x8e and fm1 == 0x689000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x47689000; valaddr_reg:x16; val_offset:212; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 212, x17, x15, 424, x18)

inst_54:
// fs1 == 0 and fe1 == 0x59 and fm1 == 0x7d2000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x2cfd2000; valaddr_reg:x16; val_offset:216; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 216, x17, x15, 432, x18)

inst_55:
// fs1 == 0 and fe1 == 0x24 and fm1 == 0x689000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x12689000; valaddr_reg:x16; val_offset:220; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 220, x17, x15, 440, x18)

inst_56:
// fs1 == 0 and fe1 == 0x3b and fm1 == 0x108000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x1d908000; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 224, x17, x15, 448, x18)

inst_57:
// fs1 == 0 and fe1 == 0x82 and fm1 == 0x044000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x41044000; valaddr_reg:x16; val_offset:228; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 228, x17, x15, 456, x18)

inst_58:
// fs1 == 0 and fe1 == 0x97 and fm1 == 0x5c8000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x4bdc8000; valaddr_reg:x16; val_offset:232; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 232, x17, x15, 464, x18)

inst_59:
// fs1 == 0 and fe1 == 0x86 and fm1 == 0x704000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x43704000; valaddr_reg:x16; val_offset:236; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 236, x17, x15, 472, x18)

inst_60:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x610000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x7a610000; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 240, x17, x15, 480, x18)

inst_61:
// fs1 == 0 and fe1 == 0xc7 and fm1 == 0x720000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x63f20000; valaddr_reg:x16; val_offset:244; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 244, x17, x15, 488, x18)

inst_62:
// fs1 == 0 and fe1 == 0xb7 and fm1 == 0x720000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x5bf20000; valaddr_reg:x16; val_offset:248; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 248, x17, x15, 496, x18)

inst_63:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x480000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x7cc80000; valaddr_reg:x16; val_offset:252; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 252, x17, x15, 504, x18)

inst_64:
// fs1 == 0 and fe1 == 0x39 and fm1 == 0x480000 and rm_val == 0  
// opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x1cc80000; valaddr_reg:x16; val_offset:256; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.s, f11, f10, 0x0, 0, x16, 256, x17, x15, 512, x18)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
test_fp:
.word 0x7f7fffff
.word 0x0
.word 0x4f38d874
.word 0x68010151
.word 0x5bcbce51
.word 0x1875cb89
.word 0x3cf85c55
.word 0x5613884e
.word 0x32864562
.word 0x69990acf
.word 0x75284ae6
.word 0x27454542
.word 0x5b479816
.word 0x32db1e82
.word 0x3de4e1f0
.word 0x6126f9c3
.word 0x18811313
.word 0x56f5bbd8
.word 0x721477dc
.word 0x7cab61ee
.word 0x1f8577a2
.word 0x7a8aadc1
.word 0x2bf296
.word 0x1c8ef3b1
.word 0x2c8fed85
.word 0xcd173
.word 0x6ec096e8
.word 0x58cd684
.word 0x538f78f8
.word 0x7f7f3827
.word 0x79e653ed
.word 0x603590aa
.word 0x1e124e58
.word 0x5
.word 0x29216b44
.word 0x671168e1
.word 0x5010d851
.word 0x754f33d9
.word 0xddb5a62
.word 0x5e68cd04
.word 0x160
.word 0x353e2364
.word 0x1a08f690
.word 0x69ea7f20
.word 0x406d5a40
.word 0x3dc6c080
.word 0x68095440
.word 0x77fbb880
.word 0x1ce9d200
.word 0x7cfff200
.word 0x3364c400
.word 0x447c0400
.word 0x43130400
.word 0x47689000
.word 0x2cfd2000
.word 0x12689000
.word 0x1d908000
.word 0x41044000
.word 0x4bdc8000
.word 0x43704000
.word 0x7a610000
.word 0x63f20000
.word 0x5bf20000
.word 0x7cc80000
.word 0x1cc80000
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 130*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
