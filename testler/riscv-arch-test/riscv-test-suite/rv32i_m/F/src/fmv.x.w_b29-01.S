
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.5.2
// timestamp : Tue Sep  7 17:29:12 2021 GMT
// usage     : riscv_ctg \
//                  -- cgf $cgf \
//                  -- xlen $xlen \
// -----------
//
// -----------
// Copyright (c) 2021. IIT Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmv.x.w instruction of the RISC-V F extension for the fmv.x.w_b29 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmv.x.w_b29)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:// rs1==f29, rd==x24, fs1 == 0 and fe1 == 0x7c and fm1 == 0x4923b8 and rm_val == 0  
// opcode: fmv.x.w ; op1:f29; dest:x24; op1val:0x3e4923b8; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x24, f29, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1:// rs1==f14, rd==x5, fs1 == 1 and fe1 == 0x7c and fm1 == 0x4923bf and rm_val == 0  
// opcode: fmv.x.w ; op1:f14; dest:x5; op1val:0xbe4923bf; valaddr_reg:x16; val_offset:4; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x5, f14, 0x0, 0, x16, 4, x17, x15, 8, x18)

inst_2:// rs1==f19, rd==x4, fs1 == 1 and fe1 == 0x7c and fm1 == 0x4923be and rm_val == 0  
// opcode: fmv.x.w ; op1:f19; dest:x4; op1val:0xbe4923be; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x4, f19, 0x0, 0, x16, 8, x17, x15, 16, x18)

inst_3:// rs1==f17, rd==x26, fs1 == 1 and fe1 == 0x7c and fm1 == 0x4923bd and rm_val == 0  
// opcode: fmv.x.w ; op1:f17; dest:x26; op1val:0xbe4923bd; valaddr_reg:x16; val_offset:12; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x26, f17, 0x0, 0, x16, 12, x17, x15, 24, x18)
RVTEST_VALBASEMOV(x20, x16)
RVTEST_SIGBASE(x19,signature_x19_0)

inst_4:// rs1==f27, rd==x17, fs1 == 1 and fe1 == 0x7c and fm1 == 0x4923bc and rm_val == 0  
// opcode: fmv.x.w ; op1:f27; dest:x17; op1val:0xbe4923bc; valaddr_reg:x20; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x17, f27, 0x0, 0, x20, 16, x21, x19, 0, x18)
RVTEST_VALBASEMOV(x16, x20)
RVTEST_SIGBASE(x15,signature_x15_2)

inst_5:// rs1==f26, rd==x19, fs1 == 1 and fe1 == 0x7c and fm1 == 0x4923bb and rm_val == 0  
// opcode: fmv.x.w ; op1:f26; dest:x19; op1val:0xbe4923bb; valaddr_reg:x16; val_offset:20; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x19, f26, 0x0, 0, x16, 20, x17, x15, 0, x18)

inst_6:// rs1==f16, rd==x13, fs1 == 1 and fe1 == 0x7c and fm1 == 0x4923ba and rm_val == 0  
// opcode: fmv.x.w ; op1:f16; dest:x13; op1val:0xbe4923ba; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x13, f16, 0x0, 0, x16, 24, x17, x15, 8, x18)

inst_7:// rs1==f15, rd==x11, fs1 == 1 and fe1 == 0x7c and fm1 == 0x4923b9 and rm_val == 0  
// opcode: fmv.x.w ; op1:f15; dest:x11; op1val:0xbe4923b9; valaddr_reg:x16; val_offset:28; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x11, f15, 0x0, 0, x16, 28, x17, x15, 16, x18)
RVTEST_VALBASEMOV(x20, x16)
RVTEST_SIGBASE(x19,signature_x19_1)

inst_8:// rs1==f8, rd==x15, fs1 == 1 and fe1 == 0x7c and fm1 == 0x4923b8 and rm_val == 0  
// opcode: fmv.x.w ; op1:f8; dest:x15; op1val:0xbe4923b8; valaddr_reg:x20; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x15, f8, 0x0, 0, x20, 32, x21, x19, 0, x18)
RVTEST_VALBASEMOV(x16, x20)
RVTEST_SIGBASE(x15,signature_x15_3)

inst_9:// rs1==f5, rd==x25, fs1 == 0 and fe1 == 0x7c and fm1 == 0x4923bf and rm_val == 0  
// opcode: fmv.x.w ; op1:f5; dest:x25; op1val:0x3e4923bf; valaddr_reg:x16; val_offset:36; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x25, f5, 0x0, 0, x16, 36, x17, x15, 0, x18)

inst_10:// rs1==f24, rd==x7, fs1 == 0 and fe1 == 0x7c and fm1 == 0x4923be and rm_val == 0  
// opcode: fmv.x.w ; op1:f24; dest:x7; op1val:0x3e4923be; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x7, f24, 0x0, 0, x16, 40, x17, x15, 8, x18)

inst_11:// rs1==f2, rd==x20, fs1 == 0 and fe1 == 0x7c and fm1 == 0x4923bd and rm_val == 0  
// opcode: fmv.x.w ; op1:f2; dest:x20; op1val:0x3e4923bd; valaddr_reg:x16; val_offset:44; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x20, f2, 0x0, 0, x16, 44, x17, x15, 16, x18)

inst_12:// rs1==f0, rd==x10, fs1 == 0 and fe1 == 0x7c and fm1 == 0x4923bc and rm_val == 0  
// opcode: fmv.x.w ; op1:f0; dest:x10; op1val:0x3e4923bc; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x10, f0, 0x0, 0, x16, 48, x17, x15, 24, x18)

inst_13:// rs1==f20, rd==x2, fs1 == 0 and fe1 == 0x7c and fm1 == 0x4923bb and rm_val == 0  
// opcode: fmv.x.w ; op1:f20; dest:x2; op1val:0x3e4923bb; valaddr_reg:x16; val_offset:52; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x2, f20, 0x0, 0, x16, 52, x17, x15, 32, x18)

inst_14:// rs1==f31, rd==x21, fs1 == 0 and fe1 == 0x7c and fm1 == 0x4923ba and rm_val == 0  
// opcode: fmv.x.w ; op1:f31; dest:x21; op1val:0x3e4923ba; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x21, f31, 0x0, 0, x16, 56, x17, x15, 40, x18)
RVTEST_VALBASEMOV(x20, x16)
RVTEST_SIGBASE(x19,signature_x19_2)

inst_15:// rs1==f4, rd==x16, fs1 == 0 and fe1 == 0x7c and fm1 == 0x4923b9 and rm_val == 0  
// opcode: fmv.x.w ; op1:f4; dest:x16; op1val:0x3e4923b9; valaddr_reg:x20; val_offset:60; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x16, f4, 0x0, 0, x20, 60, x21, x19, 0, x18)
RVTEST_VALBASEMOV(x16, x20)
RVTEST_SIGBASE(x15,signature_x15_4)

inst_16:// rs1==f3, rd==x23, 
// opcode: fmv.x.w ; op1:f3; dest:x23; op1val:0x0; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x23, f3, 0x0, 0, x16, 64, x17, x15, 0, x18)

inst_17:// rs1==f21, rd==x30, 
// opcode: fmv.x.w ; op1:f21; dest:x30; op1val:0x0; valaddr_reg:x16; val_offset:68; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x30, f21, 0x0, 0, x16, 68, x17, x15, 8, x18)

inst_18:// rs1==f6, rd==x1, 
// opcode: fmv.x.w ; op1:f6; dest:x1; op1val:0x0; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x1, f6, 0x0, 0, x16, 72, x17, x15, 16, x18)

inst_19:// rs1==f9, rd==x18, 
// opcode: fmv.x.w ; op1:f9; dest:x18; op1val:0x0; valaddr_reg:x16; val_offset:76; rmval:0x0; correctval:0; testreg:x22
TEST_FPID_OP(fmv.x.w, x18, f9, 0x0, 0, x16, 76, x17, x15, 24, x22)

inst_20:// rs1==f13, rd==x3, 
// opcode: fmv.x.w ; op1:f13; dest:x3; op1val:0x0; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x3, f13, 0x0, 0, x16, 80, x17, x15, 32, x18)

inst_21:// rs1==f11, rd==x29, 
// opcode: fmv.x.w ; op1:f11; dest:x29; op1val:0x0; valaddr_reg:x16; val_offset:84; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x29, f11, 0x0, 0, x16, 84, x17, x15, 40, x18)

inst_22:// rs1==f7, rd==x8, 
// opcode: fmv.x.w ; op1:f7; dest:x8; op1val:0x0; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x8, f7, 0x0, 0, x16, 88, x17, x15, 48, x18)

inst_23:// rs1==f12, rd==x14, 
// opcode: fmv.x.w ; op1:f12; dest:x14; op1val:0x0; valaddr_reg:x16; val_offset:92; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x14, f12, 0x0, 0, x16, 92, x17, x15, 56, x18)

inst_24:// rs1==f22, rd==x6, 
// opcode: fmv.x.w ; op1:f22; dest:x6; op1val:0x0; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x6, f22, 0x0, 0, x16, 96, x17, x15, 64, x18)

inst_25:// rs1==f18, rd==x12, 
// opcode: fmv.x.w ; op1:f18; dest:x12; op1val:0x0; valaddr_reg:x16; val_offset:100; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x12, f18, 0x0, 0, x16, 100, x17, x15, 72, x18)

inst_26:// rs1==f10, rd==x28, 
// opcode: fmv.x.w ; op1:f10; dest:x28; op1val:0x0; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x28, f10, 0x0, 0, x16, 104, x17, x15, 80, x18)

inst_27:// rs1==f25, rd==x27, 
// opcode: fmv.x.w ; op1:f25; dest:x27; op1val:0x0; valaddr_reg:x16; val_offset:108; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x27, f25, 0x0, 0, x16, 108, x17, x15, 88, x18)

inst_28:// rs1==f1, rd==x9, 
// opcode: fmv.x.w ; op1:f1; dest:x9; op1val:0x0; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x9, f1, 0x0, 0, x16, 112, x17, x15, 96, x18)

inst_29:// rs1==f30, rd==x0, 
// opcode: fmv.x.w ; op1:f30; dest:x0; op1val:0x0; valaddr_reg:x16; val_offset:116; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x0, f30, 0x0, 0, x16, 116, x17, x15, 104, x18)

inst_30:// rs1==f28, rd==x31, 
// opcode: fmv.x.w ; op1:f28; dest:x31; op1val:0x0; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x31, f28, 0x0, 0, x16, 120, x17, x15, 112, x18)

inst_31:// rs1==f23, rd==x22, 
// opcode: fmv.x.w ; op1:f23; dest:x22; op1val:0x0; valaddr_reg:x16; val_offset:124; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x22, f23, 0x0, 0, x16, 124, x17, x15, 120, x18)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
test_fp:
.word 0x3e4923b8
.word 0xbe4923bf
.word 0xbe4923be
.word 0xbe4923bd
.word 0xbe4923bc
.word 0xbe4923bb
.word 0xbe4923ba
.word 0xbe4923b9
.word 0xbe4923b8
.word 0x3e4923bf
.word 0x3e4923be
.word 0x3e4923bd
.word 0x3e4923bc
.word 0x3e4923bb
.word 0x3e4923ba
.word 0x3e4923b9
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 8*(XLEN/32),4,0xdeadbeef


signature_x19_0:
    .fill 2*(XLEN/32),4,0xdeadbeef


signature_x15_2:
    .fill 6*(XLEN/32),4,0xdeadbeef


signature_x19_1:
    .fill 2*(XLEN/32),4,0xdeadbeef


signature_x15_3:
    .fill 12*(XLEN/32),4,0xdeadbeef


signature_x19_2:
    .fill 2*(XLEN/32),4,0xdeadbeef


signature_x15_4:
    .fill 32*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
