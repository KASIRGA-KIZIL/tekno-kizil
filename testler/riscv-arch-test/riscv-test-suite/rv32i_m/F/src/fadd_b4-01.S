
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.5.2
// timestamp : Tue Sep  7 16:07:52 2021 GMT
// usage     : riscv_ctg \
//                  -- cgf $cgf \
//                  -- xlen $xlen \
// -----------
//
// -----------
// Copyright (c) 2021. IIT Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fadd.s instruction of the RISC-V F extension for the fadd_b4 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fadd_b4)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs1 == rs2 == rd, rs1==f3, rs2==f3, rd==f3, fs1 == 0 and fe1 == 0xfe and fm1 == 0x222105 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x6ef7d1 and rm_val == 0  
// opcode: fadd.s ; op1:f3; op2:f3; dest:f3; op1val:0x7f222105; op2val:0x7f222105; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f3, f3, f3, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1:
// rs2 == rd != rs1, rs1==f12, rs2==f20, rd==f20, fs1 == 0 and fe1 == 0xfd and fm1 == 0x430c98 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 4  
// opcode: fadd.s ; op1:f12; op2:f20; dest:f20; op1val:0x7ec30c98; op2val:0xff7fffff; valaddr_reg:x16; val_offset:8; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f20, f12, f20, 0x4, 0, x16, 8, x17, x15, 8, x18)

inst_2:
// rs1 == rd != rs2, rs1==f19, rs2==f17, rd==f19, fs1 == 0 and fe1 == 0xfd and fm1 == 0x430c98 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 3  
// opcode: fadd.s ; op1:f19; op2:f17; dest:f19; op1val:0x7ec30c98; op2val:0xff7fffff; valaddr_reg:x16; val_offset:16; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f19, f19, f17, 0x3, 0, x16, 16, x17, x15, 16, x18)

inst_3:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==f25, rs2==f31, rd==f28, fs1 == 0 and fe1 == 0xfd and fm1 == 0x430c98 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 2  
// opcode: fadd.s ; op1:f25; op2:f31; dest:f28; op1val:0x7ec30c98; op2val:0xff7fffff; valaddr_reg:x16; val_offset:24; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f28, f25, f31, 0x2, 0, x16, 24, x17, x15, 24, x18)

inst_4:
// rs1 == rs2 != rd, rs1==f22, rs2==f22, rd==f27, fs1 == 0 and fe1 == 0xfd and fm1 == 0x430c98 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 1  
// opcode: fadd.s ; op1:f22; op2:f22; dest:f27; op1val:0x7ec30c98; op2val:0x7ec30c98; valaddr_reg:x16; val_offset:32; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f27, f22, f22, 0x1, 0, x16, 32, x17, x15, 32, x18)

inst_5:
// rs1==f11, rs2==f5, rd==f8, fs1 == 0 and fe1 == 0xfd and fm1 == 0x430c98 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f11; op2:f5; dest:f8; op1val:0x7ec30c98; op2val:0xff7fffff; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f8, f11, f5, 0x0, 0, x16, 40, x17, x15, 40, x18)

inst_6:
// rs1==f2, rs2==f8, rd==f1, fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 4  
// opcode: fadd.s ; op1:f2; op2:f8; dest:f1; op1val:0x7d772129; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:48; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f1, f2, f8, 0x4, 0, x16, 48, x17, x15, 48, x18)

inst_7:
// rs1==f28, rs2==f15, rd==f7, fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 3  
// opcode: fadd.s ; op1:f28; op2:f15; dest:f7; op1val:0x7d772129; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:56; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f7, f28, f15, 0x3, 0, x16, 56, x17, x15, 56, x18)

inst_8:
// rs1==f9, rs2==f16, rd==f23, fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 2  
// opcode: fadd.s ; op1:f9; op2:f16; dest:f23; op1val:0x7d772129; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:64; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f23, f9, f16, 0x2, 0, x16, 64, x17, x15, 64, x18)

inst_9:
// rs1==f14, rs2==f13, rd==f11, fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 1  
// opcode: fadd.s ; op1:f14; op2:f13; dest:f11; op1val:0x7d772129; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:72; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f11, f14, f13, 0x1, 0, x16, 72, x17, x15, 72, x18)

inst_10:
// rs1==f26, rs2==f9, rd==f0, fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f26; op2:f9; dest:f0; op1val:0x7d772129; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f0, f26, f9, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_11:
// rs1==f27, rs2==f2, rd==f17, fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a35e0 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 4  
// opcode: fadd.s ; op1:f27; op2:f2; dest:f17; op1val:0x7f1a35e0; op2val:0xff7fffff; valaddr_reg:x16; val_offset:88; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f17, f27, f2, 0x4, 0, x16, 88, x17, x15, 88, x18)

inst_12:
// rs1==f8, rs2==f1, rd==f18, fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a35e0 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 3  
// opcode: fadd.s ; op1:f8; op2:f1; dest:f18; op1val:0x7f1a35e0; op2val:0xff7fffff; valaddr_reg:x16; val_offset:96; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f18, f8, f1, 0x3, 0, x16, 96, x17, x15, 96, x18)

inst_13:
// rs1==f29, rs2==f27, rd==f4, fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a35e0 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 2  
// opcode: fadd.s ; op1:f29; op2:f27; dest:f4; op1val:0x7f1a35e0; op2val:0xff7fffff; valaddr_reg:x16; val_offset:104; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f4, f29, f27, 0x2, 0, x16, 104, x17, x15, 104, x18)

inst_14:
// rs1==f30, rs2==f4, rd==f16, fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a35e0 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 1  
// opcode: fadd.s ; op1:f30; op2:f4; dest:f16; op1val:0x7f1a35e0; op2val:0xff7fffff; valaddr_reg:x16; val_offset:112; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f16, f30, f4, 0x1, 0, x16, 112, x17, x15, 112, x18)

inst_15:
// rs1==f1, rs2==f10, rd==f2, fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a35e0 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f1; op2:f10; dest:f2; op1val:0x7f1a35e0; op2val:0xff7fffff; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f2, f1, f10, 0x0, 0, x16, 120, x17, x15, 120, x18)

inst_16:
// rs1==f10, rs2==f25, rd==f21, fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f25; dest:f21; op1val:0x7e3741cc; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:128; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f21, f10, f25, 0x4, 0, x16, 128, x17, x15, 128, x18)

inst_17:
// rs1==f7, rs2==f28, rd==f22, fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 3  
// opcode: fadd.s ; op1:f7; op2:f28; dest:f22; op1val:0x7e3741cc; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:136; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f22, f7, f28, 0x3, 0, x16, 136, x17, x15, 136, x18)

inst_18:
// rs1==f4, rs2==f26, rd==f24, fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 2  
// opcode: fadd.s ; op1:f4; op2:f26; dest:f24; op1val:0x7e3741cc; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:144; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f24, f4, f26, 0x2, 0, x16, 144, x17, x15, 144, x18)

inst_19:
// rs1==f20, rs2==f18, rd==f25, fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 1  
// opcode: fadd.s ; op1:f20; op2:f18; dest:f25; op1val:0x7e3741cc; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:152; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f25, f20, f18, 0x1, 0, x16, 152, x17, x15, 152, x18)

inst_20:
// rs1==f31, rs2==f23, rd==f26, fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f31; op2:f23; dest:f26; op1val:0x7e3741cc; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f26, f31, f23, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_21:
// rs1==f13, rs2==f14, rd==f9, fs1 == 0 and fe1 == 0xfc and fm1 == 0x12bd51 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 4  
// opcode: fadd.s ; op1:f13; op2:f14; dest:f9; op1val:0x7e12bd51; op2val:0xff7fffff; valaddr_reg:x16; val_offset:168; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f9, f13, f14, 0x4, 0, x16, 168, x17, x15, 168, x18)

inst_22:
// rs1==f16, rs2==f19, rd==f12, fs1 == 0 and fe1 == 0xfc and fm1 == 0x12bd51 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 3  
// opcode: fadd.s ; op1:f16; op2:f19; dest:f12; op1val:0x7e12bd51; op2val:0xff7fffff; valaddr_reg:x16; val_offset:176; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f16, f19, 0x3, 0, x16, 176, x17, x15, 176, x18)

inst_23:
// rs1==f15, rs2==f21, rd==f10, fs1 == 0 and fe1 == 0xfc and fm1 == 0x12bd51 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 2  
// opcode: fadd.s ; op1:f15; op2:f21; dest:f10; op1val:0x7e12bd51; op2val:0xff7fffff; valaddr_reg:x16; val_offset:184; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f10, f15, f21, 0x2, 0, x16, 184, x17, x15, 184, x18)

inst_24:
// rs1==f5, rs2==f24, rd==f13, fs1 == 0 and fe1 == 0xfc and fm1 == 0x12bd51 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 1  
// opcode: fadd.s ; op1:f5; op2:f24; dest:f13; op1val:0x7e12bd51; op2val:0xff7fffff; valaddr_reg:x16; val_offset:192; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f13, f5, f24, 0x1, 0, x16, 192, x17, x15, 192, x18)

inst_25:
// rs1==f21, rs2==f11, rd==f15, fs1 == 0 and fe1 == 0xfc and fm1 == 0x12bd51 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f21; op2:f11; dest:f15; op1val:0x7e12bd51; op2val:0xff7fffff; valaddr_reg:x16; val_offset:200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f15, f21, f11, 0x0, 0, x16, 200, x17, x15, 200, x18)

inst_26:
// rs1==f18, rs2==f7, rd==f30, fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 4  
// opcode: fadd.s ; op1:f18; op2:f7; dest:f30; op1val:0x7e79c1c6; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:208; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f30, f18, f7, 0x4, 0, x16, 208, x17, x15, 208, x18)

inst_27:
// rs1==f23, rs2==f12, rd==f31, fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 3  
// opcode: fadd.s ; op1:f23; op2:f12; dest:f31; op1val:0x7e79c1c6; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:216; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f31, f23, f12, 0x3, 0, x16, 216, x17, x15, 216, x18)

inst_28:
// rs1==f24, rs2==f6, rd==f5, fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 2  
// opcode: fadd.s ; op1:f24; op2:f6; dest:f5; op1val:0x7e79c1c6; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:224; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f5, f24, f6, 0x2, 0, x16, 224, x17, x15, 224, x18)

inst_29:
// rs1==f6, rs2==f0, rd==f29, fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 1  
// opcode: fadd.s ; op1:f6; op2:f0; dest:f29; op1val:0x7e79c1c6; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:232; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f29, f6, f0, 0x1, 0, x16, 232, x17, x15, 232, x18)

inst_30:
// rs1==f0, rs2==f29, rd==f14, fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f0; op2:f29; dest:f14; op1val:0x7e79c1c6; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f14, f0, f29, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_31:
// rs1==f17, rs2==f30, rd==f6, fs1 == 0 and fe1 == 0xfe and fm1 == 0x269468 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 4  
// opcode: fadd.s ; op1:f17; op2:f30; dest:f6; op1val:0x7f269468; op2val:0xff7fffff; valaddr_reg:x16; val_offset:248; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f6, f17, f30, 0x4, 0, x16, 248, x17, x15, 248, x18)

inst_32:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x269468 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f269468; op2val:0xff7fffff; valaddr_reg:x16; val_offset:256; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 256, x17, x15, 256, x18)

inst_33:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x269468 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f269468; op2val:0xff7fffff; valaddr_reg:x16; val_offset:264; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 264, x17, x15, 264, x18)

inst_34:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x269468 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f269468; op2val:0xff7fffff; valaddr_reg:x16; val_offset:272; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 272, x17, x15, 272, x18)

inst_35:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x269468 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f269468; op2val:0xff7fffff; valaddr_reg:x16; val_offset:280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 280, x17, x15, 280, x18)

inst_36:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3fc7d3 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a60affa; op2val:0x7f3fc7d3; valaddr_reg:x16; val_offset:288; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 288, x17, x15, 288, x18)

inst_37:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3fc7d3 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a60affa; op2val:0x7f3fc7d3; valaddr_reg:x16; val_offset:296; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 296, x17, x15, 296, x18)

inst_38:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3fc7d3 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a60affa; op2val:0x7f3fc7d3; valaddr_reg:x16; val_offset:304; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 304, x17, x15, 304, x18)

inst_39:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3fc7d3 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a60affa; op2val:0x7f3fc7d3; valaddr_reg:x16; val_offset:312; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 312, x17, x15, 312, x18)

inst_40:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3fc7d3 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7a60affa; op2val:0x7f3fc7d3; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_41:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e5ec7 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7e5ec6 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1e5ec7; op2val:0xff7e5ec6; valaddr_reg:x16; val_offset:328; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 328, x17, x15, 328, x18)

inst_42:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e5ec7 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7e5ec6 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1e5ec7; op2val:0xff7e5ec6; valaddr_reg:x16; val_offset:336; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 336, x17, x15, 336, x18)

inst_43:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e5ec7 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7e5ec6 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1e5ec7; op2val:0xff7e5ec6; valaddr_reg:x16; val_offset:344; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 344, x17, x15, 344, x18)

inst_44:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e5ec7 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7e5ec6 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1e5ec7; op2val:0xff7e5ec6; valaddr_reg:x16; val_offset:352; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 352, x17, x15, 352, x18)

inst_45:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e5ec7 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7e5ec6 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1e5ec7; op2val:0xff7e5ec6; valaddr_reg:x16; val_offset:360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 360, x17, x15, 360, x18)

inst_46:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2eec and fs2 == 1 and fe2 == 0xfc and fm2 == 0x28bbb2 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0a2eec; op2val:0xfe28bbb2; valaddr_reg:x16; val_offset:368; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 368, x17, x15, 368, x18)

inst_47:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2eec and fs2 == 1 and fe2 == 0xfc and fm2 == 0x28bbb2 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0a2eec; op2val:0xfe28bbb2; valaddr_reg:x16; val_offset:376; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 376, x17, x15, 376, x18)

inst_48:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2eec and fs2 == 1 and fe2 == 0xfc and fm2 == 0x28bbb2 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0a2eec; op2val:0xfe28bbb2; valaddr_reg:x16; val_offset:384; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 384, x17, x15, 384, x18)

inst_49:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2eec and fs2 == 1 and fe2 == 0xfc and fm2 == 0x28bbb2 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0a2eec; op2val:0xfe28bbb2; valaddr_reg:x16; val_offset:392; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 392, x17, x15, 392, x18)

inst_50:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2eec and fs2 == 1 and fe2 == 0xfc and fm2 == 0x28bbb2 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0a2eec; op2val:0xfe28bbb2; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_51:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52b355 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1959aa and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ed2b355; op2val:0xff1959aa; valaddr_reg:x16; val_offset:408; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 408, x17, x15, 408, x18)

inst_52:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52b355 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1959aa and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ed2b355; op2val:0xff1959aa; valaddr_reg:x16; val_offset:416; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 416, x17, x15, 416, x18)

inst_53:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52b355 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1959aa and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ed2b355; op2val:0xff1959aa; valaddr_reg:x16; val_offset:424; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 424, x17, x15, 424, x18)

inst_54:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52b355 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1959aa and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ed2b355; op2val:0xff1959aa; valaddr_reg:x16; val_offset:432; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 432, x17, x15, 432, x18)

inst_55:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52b355 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1959aa and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ed2b355; op2val:0xff1959aa; valaddr_reg:x16; val_offset:440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 440, x17, x15, 440, x18)

inst_56:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x480ede and fs2 == 1 and fe2 == 0xf8 and fm2 == 0x00edf4 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e480ede; op2val:0xfc00edf4; valaddr_reg:x16; val_offset:448; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 448, x17, x15, 448, x18)

inst_57:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x480ede and fs2 == 1 and fe2 == 0xf8 and fm2 == 0x00edf4 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e480ede; op2val:0xfc00edf4; valaddr_reg:x16; val_offset:456; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 456, x17, x15, 456, x18)

inst_58:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x480ede and fs2 == 1 and fe2 == 0xf8 and fm2 == 0x00edf4 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e480ede; op2val:0xfc00edf4; valaddr_reg:x16; val_offset:464; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 464, x17, x15, 464, x18)

inst_59:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x480ede and fs2 == 1 and fe2 == 0xf8 and fm2 == 0x00edf4 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e480ede; op2val:0xfc00edf4; valaddr_reg:x16; val_offset:472; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 472, x17, x15, 472, x18)

inst_60:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x480ede and fs2 == 1 and fe2 == 0xf8 and fm2 == 0x00edf4 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e480ede; op2val:0xfc00edf4; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_61:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x372bf7 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x672bf7 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eb72bf7; op2val:0xfee72bf7; valaddr_reg:x16; val_offset:488; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 488, x17, x15, 488, x18)

inst_62:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x372bf7 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x672bf7 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eb72bf7; op2val:0xfee72bf7; valaddr_reg:x16; val_offset:496; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 496, x17, x15, 496, x18)

inst_63:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x372bf7 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x672bf7 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eb72bf7; op2val:0xfee72bf7; valaddr_reg:x16; val_offset:504; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 504, x17, x15, 504, x18)

inst_64:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x372bf7 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x672bf7 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eb72bf7; op2val:0xfee72bf7; valaddr_reg:x16; val_offset:512; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 512, x17, x15, 512, x18)

inst_65:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x372bf7 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x672bf7 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eb72bf7; op2val:0xfee72bf7; valaddr_reg:x16; val_offset:520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 520, x17, x15, 520, x18)

inst_66:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f4c51 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x174c51 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2f4c51; op2val:0xff174c51; valaddr_reg:x16; val_offset:528; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 528, x17, x15, 528, x18)

inst_67:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f4c51 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x174c51 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2f4c51; op2val:0xff174c51; valaddr_reg:x16; val_offset:536; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 536, x17, x15, 536, x18)

inst_68:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f4c51 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x174c51 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2f4c51; op2val:0xff174c51; valaddr_reg:x16; val_offset:544; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 544, x17, x15, 544, x18)

inst_69:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f4c51 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x174c51 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2f4c51; op2val:0xff174c51; valaddr_reg:x16; val_offset:552; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 552, x17, x15, 552, x18)

inst_70:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f4c51 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x174c51 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2f4c51; op2val:0xff174c51; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_71:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26b8d3 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x59472a and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ea6b8d3; op2val:0x7ed9472a; valaddr_reg:x16; val_offset:568; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 568, x17, x15, 568, x18)

inst_72:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26b8d3 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x59472a and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ea6b8d3; op2val:0x7ed9472a; valaddr_reg:x16; val_offset:576; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 576, x17, x15, 576, x18)

inst_73:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26b8d3 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x59472a and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ea6b8d3; op2val:0x7ed9472a; valaddr_reg:x16; val_offset:584; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 584, x17, x15, 584, x18)

inst_74:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26b8d3 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x59472a and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ea6b8d3; op2val:0x7ed9472a; valaddr_reg:x16; val_offset:592; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 592, x17, x15, 592, x18)

inst_75:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26b8d3 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x59472a and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ea6b8d3; op2val:0x7ed9472a; valaddr_reg:x16; val_offset:600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 600, x17, x15, 600, x18)

inst_76:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x354d84 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4ab27b and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eb54d84; op2val:0x7ecab27b; valaddr_reg:x16; val_offset:608; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 608, x17, x15, 608, x18)

inst_77:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x354d84 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4ab27b and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eb54d84; op2val:0x7ecab27b; valaddr_reg:x16; val_offset:616; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 616, x17, x15, 616, x18)

inst_78:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x354d84 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4ab27b and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eb54d84; op2val:0x7ecab27b; valaddr_reg:x16; val_offset:624; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 624, x17, x15, 624, x18)

inst_79:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x354d84 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4ab27b and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eb54d84; op2val:0x7ecab27b; valaddr_reg:x16; val_offset:632; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 632, x17, x15, 632, x18)

inst_80:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x354d84 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4ab27b and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eb54d84; op2val:0x7ecab27b; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_81:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c93b2 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x1b6263 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2c93b2; op2val:0x7d9b6263; valaddr_reg:x16; val_offset:648; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 648, x17, x15, 648, x18)

inst_82:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c93b2 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x1b6263 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2c93b2; op2val:0x7d9b6263; valaddr_reg:x16; val_offset:656; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 656, x17, x15, 656, x18)

inst_83:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c93b2 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x1b6263 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2c93b2; op2val:0x7d9b6263; valaddr_reg:x16; val_offset:664; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 664, x17, x15, 664, x18)

inst_84:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c93b2 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x1b6263 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2c93b2; op2val:0x7d9b6263; valaddr_reg:x16; val_offset:672; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 672, x17, x15, 672, x18)

inst_85:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c93b2 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x1b6263 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2c93b2; op2val:0x7d9b6263; valaddr_reg:x16; val_offset:680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 680, x17, x15, 680, x18)

inst_86:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e317d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0473a0 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e6e317d; op2val:0x7f0473a0; valaddr_reg:x16; val_offset:688; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 688, x17, x15, 688, x18)

inst_87:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e317d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0473a0 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e6e317d; op2val:0x7f0473a0; valaddr_reg:x16; val_offset:696; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 696, x17, x15, 696, x18)

inst_88:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e317d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0473a0 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e6e317d; op2val:0x7f0473a0; valaddr_reg:x16; val_offset:704; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 704, x17, x15, 704, x18)

inst_89:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e317d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0473a0 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e6e317d; op2val:0x7f0473a0; valaddr_reg:x16; val_offset:712; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 712, x17, x15, 712, x18)

inst_90:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e317d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0473a0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e6e317d; op2val:0x7f0473a0; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_91:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8fcb and fs2 == 0 and fe2 == 0xfc and fm2 == 0x11c0cd and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1b8fcb; op2val:0x7e11c0cd; valaddr_reg:x16; val_offset:728; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 728, x17, x15, 728, x18)

inst_92:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8fcb and fs2 == 0 and fe2 == 0xfc and fm2 == 0x11c0cd and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1b8fcb; op2val:0x7e11c0cd; valaddr_reg:x16; val_offset:736; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 736, x17, x15, 736, x18)

inst_93:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8fcb and fs2 == 0 and fe2 == 0xfc and fm2 == 0x11c0cd and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1b8fcb; op2val:0x7e11c0cd; valaddr_reg:x16; val_offset:744; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 744, x17, x15, 744, x18)

inst_94:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8fcb and fs2 == 0 and fe2 == 0xfc and fm2 == 0x11c0cd and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1b8fcb; op2val:0x7e11c0cd; valaddr_reg:x16; val_offset:752; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 752, x17, x15, 752, x18)

inst_95:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8fcb and fs2 == 0 and fe2 == 0xfc and fm2 == 0x11c0cd and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1b8fcb; op2val:0x7e11c0cd; valaddr_reg:x16; val_offset:760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 760, x17, x15, 760, x18)

inst_96:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eabd8 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x0aa137 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2eabd8; op2val:0x7d8aa137; valaddr_reg:x16; val_offset:768; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 768, x17, x15, 768, x18)

inst_97:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eabd8 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x0aa137 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2eabd8; op2val:0x7d8aa137; valaddr_reg:x16; val_offset:776; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 776, x17, x15, 776, x18)

inst_98:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eabd8 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x0aa137 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2eabd8; op2val:0x7d8aa137; valaddr_reg:x16; val_offset:784; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 784, x17, x15, 784, x18)

inst_99:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eabd8 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x0aa137 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2eabd8; op2val:0x7d8aa137; valaddr_reg:x16; val_offset:792; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 792, x17, x15, 792, x18)

inst_100:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eabd8 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x0aa137 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2eabd8; op2val:0x7d8aa137; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_101:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d7424 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x128bd9 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eed7424; op2val:0x7e928bd9; valaddr_reg:x16; val_offset:808; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 808, x17, x15, 808, x18)

inst_102:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d7424 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x128bd9 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eed7424; op2val:0x7e928bd9; valaddr_reg:x16; val_offset:816; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 816, x17, x15, 816, x18)

inst_103:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d7424 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x128bd9 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eed7424; op2val:0x7e928bd9; valaddr_reg:x16; val_offset:824; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 824, x17, x15, 824, x18)

inst_104:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d7424 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x128bd9 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eed7424; op2val:0x7e928bd9; valaddr_reg:x16; val_offset:832; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 832, x17, x15, 832, x18)

inst_105:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d7424 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x128bd9 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eed7424; op2val:0x7e928bd9; valaddr_reg:x16; val_offset:840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 840, x17, x15, 840, x18)

inst_106:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x587392 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x09e31b and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e587392; op2val:0x7f09e31b; valaddr_reg:x16; val_offset:848; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 848, x17, x15, 848, x18)

inst_107:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x587392 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x09e31b and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e587392; op2val:0x7f09e31b; valaddr_reg:x16; val_offset:856; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 856, x17, x15, 856, x18)

inst_108:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x587392 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x09e31b and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e587392; op2val:0x7f09e31b; valaddr_reg:x16; val_offset:864; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 864, x17, x15, 864, x18)

inst_109:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x587392 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x09e31b and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e587392; op2val:0x7f09e31b; valaddr_reg:x16; val_offset:872; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 872, x17, x15, 872, x18)

inst_110:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x587392 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x09e31b and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e587392; op2val:0x7f09e31b; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 880, x17, x15, 880, x18)

inst_111:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e5b90 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x0d2378 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2e5b90; op2val:0x7d8d2378; valaddr_reg:x16; val_offset:888; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 888, x17, x15, 888, x18)

inst_112:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e5b90 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x0d2378 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2e5b90; op2val:0x7d8d2378; valaddr_reg:x16; val_offset:896; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 896, x17, x15, 896, x18)

inst_113:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e5b90 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x0d2378 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2e5b90; op2val:0x7d8d2378; valaddr_reg:x16; val_offset:904; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 904, x17, x15, 904, x18)

inst_114:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e5b90 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x0d2378 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2e5b90; op2val:0x7d8d2378; valaddr_reg:x16; val_offset:912; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 912, x17, x15, 912, x18)

inst_115:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e5b90 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x0d2378 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2e5b90; op2val:0x7d8d2378; valaddr_reg:x16; val_offset:920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 920, x17, x15, 920, x18)

inst_116:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x370362 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x48fc9c and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eb70362; op2val:0x7ec8fc9c; valaddr_reg:x16; val_offset:928; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 928, x17, x15, 928, x18)

inst_117:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x370362 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x48fc9c and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eb70362; op2val:0x7ec8fc9c; valaddr_reg:x16; val_offset:936; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 936, x17, x15, 936, x18)

inst_118:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x370362 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x48fc9c and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eb70362; op2val:0x7ec8fc9c; valaddr_reg:x16; val_offset:944; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 944, x17, x15, 944, x18)

inst_119:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x370362 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x48fc9c and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eb70362; op2val:0x7ec8fc9c; valaddr_reg:x16; val_offset:952; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 952, x17, x15, 952, x18)

inst_120:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x370362 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x48fc9c and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eb70362; op2val:0x7ec8fc9c; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 960, x17, x15, 960, x18)

inst_121:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x167d44 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x260aeb and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f167d44; op2val:0x7e260aeb; valaddr_reg:x16; val_offset:968; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 968, x17, x15, 968, x18)

inst_122:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x167d44 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x260aeb and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f167d44; op2val:0x7e260aeb; valaddr_reg:x16; val_offset:976; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 976, x17, x15, 976, x18)

inst_123:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x167d44 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x260aeb and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f167d44; op2val:0x7e260aeb; valaddr_reg:x16; val_offset:984; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 984, x17, x15, 984, x18)

inst_124:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x167d44 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x260aeb and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f167d44; op2val:0x7e260aeb; valaddr_reg:x16; val_offset:992; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 992, x17, x15, 992, x18)

inst_125:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x167d44 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x260aeb and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f167d44; op2val:0x7e260aeb; valaddr_reg:x16; val_offset:1000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1000, x17, x15, 1000, x18)

inst_126:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x445459 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3baba6 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec45459; op2val:0x7ebbaba6; valaddr_reg:x16; val_offset:1008; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1008, x17, x15, 1008, x18)

inst_127:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x445459 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3baba6 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec45459; op2val:0x7ebbaba6; valaddr_reg:x16; val_offset:1016; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1016, x17, x15, 1016, x18)

inst_128:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x445459 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3baba6 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec45459; op2val:0x7ebbaba6; valaddr_reg:x16; val_offset:1024; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1024, x17, x15, 1024, x18)

inst_129:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x445459 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3baba6 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec45459; op2val:0x7ebbaba6; valaddr_reg:x16; val_offset:1032; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1032, x17, x15, 1032, x18)

inst_130:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x445459 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3baba6 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec45459; op2val:0x7ebbaba6; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1040, x17, x15, 1040, x18)

inst_131:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x217fdd and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5e8020 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ea17fdd; op2val:0x7ede8020; valaddr_reg:x16; val_offset:1048; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1048, x17, x15, 1048, x18)

inst_132:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x217fdd and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5e8020 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ea17fdd; op2val:0x7ede8020; valaddr_reg:x16; val_offset:1056; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1056, x17, x15, 1056, x18)

inst_133:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x217fdd and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5e8020 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ea17fdd; op2val:0x7ede8020; valaddr_reg:x16; val_offset:1064; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1064, x17, x15, 1064, x18)

inst_134:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x217fdd and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5e8020 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ea17fdd; op2val:0x7ede8020; valaddr_reg:x16; val_offset:1072; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1072, x17, x15, 1072, x18)

inst_135:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x217fdd and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5e8020 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ea17fdd; op2val:0x7ede8020; valaddr_reg:x16; val_offset:1080; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1080, x17, x15, 1080, x18)

inst_136:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x222105 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x6ef7d1 and rm_val == 4  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f222105; op2val:0x7deef7d1; valaddr_reg:x16; val_offset:1088; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x4, 0, x16, 1088, x17, x15, 1088, x18)

inst_137:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x222105 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x6ef7d1 and rm_val == 3  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f222105; op2val:0x7deef7d1; valaddr_reg:x16; val_offset:1096; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x3, 0, x16, 1096, x17, x15, 1096, x18)

inst_138:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x222105 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x6ef7d1 and rm_val == 2  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f222105; op2val:0x7deef7d1; valaddr_reg:x16; val_offset:1104; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x2, 0, x16, 1104, x17, x15, 1104, x18)

inst_139:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x222105 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x6ef7d1 and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f222105; op2val:0x7deef7d1; valaddr_reg:x16; val_offset:1112; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1112, x17, x15, 1112, x18)

inst_140:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x222105 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x6ef7d1 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f222105; op2val:0x7deef7d1; valaddr_reg:x16; val_offset:1120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 1120, x17, x15, 1120, x18)

inst_141:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x430c98 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 1  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec30c98; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1128; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x1, 0, x16, 1128, x17, x15, 1128, x18)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
test_fp:
.word 0x7f222105
.word 0x7f222105
.word 0x7ec30c98
.word 0xff7fffff
.word 0x7ec30c98
.word 0xff7fffff
.word 0x7ec30c98
.word 0xff7fffff
.word 0x7ec30c98
.word 0x7ec30c98
.word 0x7ec30c98
.word 0xff7fffff
.word 0x7d772129
.word 0x7f7fffff
.word 0x7d772129
.word 0x7f7fffff
.word 0x7d772129
.word 0x7f7fffff
.word 0x7d772129
.word 0x7f7fffff
.word 0x7d772129
.word 0x7f7fffff
.word 0x7f1a35e0
.word 0xff7fffff
.word 0x7f1a35e0
.word 0xff7fffff
.word 0x7f1a35e0
.word 0xff7fffff
.word 0x7f1a35e0
.word 0xff7fffff
.word 0x7f1a35e0
.word 0xff7fffff
.word 0x7e3741cc
.word 0x7f7fffff
.word 0x7e3741cc
.word 0x7f7fffff
.word 0x7e3741cc
.word 0x7f7fffff
.word 0x7e3741cc
.word 0x7f7fffff
.word 0x7e3741cc
.word 0x7f7fffff
.word 0x7e12bd51
.word 0xff7fffff
.word 0x7e12bd51
.word 0xff7fffff
.word 0x7e12bd51
.word 0xff7fffff
.word 0x7e12bd51
.word 0xff7fffff
.word 0x7e12bd51
.word 0xff7fffff
.word 0x7e79c1c6
.word 0x7f7fffff
.word 0x7e79c1c6
.word 0x7f7fffff
.word 0x7e79c1c6
.word 0x7f7fffff
.word 0x7e79c1c6
.word 0x7f7fffff
.word 0x7e79c1c6
.word 0x7f7fffff
.word 0x7f269468
.word 0xff7fffff
.word 0x7f269468
.word 0xff7fffff
.word 0x7f269468
.word 0xff7fffff
.word 0x7f269468
.word 0xff7fffff
.word 0x7f269468
.word 0xff7fffff
.word 0x7a60affa
.word 0x7f3fc7d3
.word 0x7a60affa
.word 0x7f3fc7d3
.word 0x7a60affa
.word 0x7f3fc7d3
.word 0x7a60affa
.word 0x7f3fc7d3
.word 0x7a60affa
.word 0x7f3fc7d3
.word 0x7f1e5ec7
.word 0xff7e5ec6
.word 0x7f1e5ec7
.word 0xff7e5ec6
.word 0x7f1e5ec7
.word 0xff7e5ec6
.word 0x7f1e5ec7
.word 0xff7e5ec6
.word 0x7f1e5ec7
.word 0xff7e5ec6
.word 0x7f0a2eec
.word 0xfe28bbb2
.word 0x7f0a2eec
.word 0xfe28bbb2
.word 0x7f0a2eec
.word 0xfe28bbb2
.word 0x7f0a2eec
.word 0xfe28bbb2
.word 0x7f0a2eec
.word 0xfe28bbb2
.word 0x7ed2b355
.word 0xff1959aa
.word 0x7ed2b355
.word 0xff1959aa
.word 0x7ed2b355
.word 0xff1959aa
.word 0x7ed2b355
.word 0xff1959aa
.word 0x7ed2b355
.word 0xff1959aa
.word 0x7e480ede
.word 0xfc00edf4
.word 0x7e480ede
.word 0xfc00edf4
.word 0x7e480ede
.word 0xfc00edf4
.word 0x7e480ede
.word 0xfc00edf4
.word 0x7e480ede
.word 0xfc00edf4
.word 0x7eb72bf7
.word 0xfee72bf7
.word 0x7eb72bf7
.word 0xfee72bf7
.word 0x7eb72bf7
.word 0xfee72bf7
.word 0x7eb72bf7
.word 0xfee72bf7
.word 0x7eb72bf7
.word 0xfee72bf7
.word 0x7f2f4c51
.word 0xff174c51
.word 0x7f2f4c51
.word 0xff174c51
.word 0x7f2f4c51
.word 0xff174c51
.word 0x7f2f4c51
.word 0xff174c51
.word 0x7f2f4c51
.word 0xff174c51
.word 0x7ea6b8d3
.word 0x7ed9472a
.word 0x7ea6b8d3
.word 0x7ed9472a
.word 0x7ea6b8d3
.word 0x7ed9472a
.word 0x7ea6b8d3
.word 0x7ed9472a
.word 0x7ea6b8d3
.word 0x7ed9472a
.word 0x7eb54d84
.word 0x7ecab27b
.word 0x7eb54d84
.word 0x7ecab27b
.word 0x7eb54d84
.word 0x7ecab27b
.word 0x7eb54d84
.word 0x7ecab27b
.word 0x7eb54d84
.word 0x7ecab27b
.word 0x7f2c93b2
.word 0x7d9b6263
.word 0x7f2c93b2
.word 0x7d9b6263
.word 0x7f2c93b2
.word 0x7d9b6263
.word 0x7f2c93b2
.word 0x7d9b6263
.word 0x7f2c93b2
.word 0x7d9b6263
.word 0x7e6e317d
.word 0x7f0473a0
.word 0x7e6e317d
.word 0x7f0473a0
.word 0x7e6e317d
.word 0x7f0473a0
.word 0x7e6e317d
.word 0x7f0473a0
.word 0x7e6e317d
.word 0x7f0473a0
.word 0x7f1b8fcb
.word 0x7e11c0cd
.word 0x7f1b8fcb
.word 0x7e11c0cd
.word 0x7f1b8fcb
.word 0x7e11c0cd
.word 0x7f1b8fcb
.word 0x7e11c0cd
.word 0x7f1b8fcb
.word 0x7e11c0cd
.word 0x7f2eabd8
.word 0x7d8aa137
.word 0x7f2eabd8
.word 0x7d8aa137
.word 0x7f2eabd8
.word 0x7d8aa137
.word 0x7f2eabd8
.word 0x7d8aa137
.word 0x7f2eabd8
.word 0x7d8aa137
.word 0x7eed7424
.word 0x7e928bd9
.word 0x7eed7424
.word 0x7e928bd9
.word 0x7eed7424
.word 0x7e928bd9
.word 0x7eed7424
.word 0x7e928bd9
.word 0x7eed7424
.word 0x7e928bd9
.word 0x7e587392
.word 0x7f09e31b
.word 0x7e587392
.word 0x7f09e31b
.word 0x7e587392
.word 0x7f09e31b
.word 0x7e587392
.word 0x7f09e31b
.word 0x7e587392
.word 0x7f09e31b
.word 0x7f2e5b90
.word 0x7d8d2378
.word 0x7f2e5b90
.word 0x7d8d2378
.word 0x7f2e5b90
.word 0x7d8d2378
.word 0x7f2e5b90
.word 0x7d8d2378
.word 0x7f2e5b90
.word 0x7d8d2378
.word 0x7eb70362
.word 0x7ec8fc9c
.word 0x7eb70362
.word 0x7ec8fc9c
.word 0x7eb70362
.word 0x7ec8fc9c
.word 0x7eb70362
.word 0x7ec8fc9c
.word 0x7eb70362
.word 0x7ec8fc9c
.word 0x7f167d44
.word 0x7e260aeb
.word 0x7f167d44
.word 0x7e260aeb
.word 0x7f167d44
.word 0x7e260aeb
.word 0x7f167d44
.word 0x7e260aeb
.word 0x7f167d44
.word 0x7e260aeb
.word 0x7ec45459
.word 0x7ebbaba6
.word 0x7ec45459
.word 0x7ebbaba6
.word 0x7ec45459
.word 0x7ebbaba6
.word 0x7ec45459
.word 0x7ebbaba6
.word 0x7ec45459
.word 0x7ebbaba6
.word 0x7ea17fdd
.word 0x7ede8020
.word 0x7ea17fdd
.word 0x7ede8020
.word 0x7ea17fdd
.word 0x7ede8020
.word 0x7ea17fdd
.word 0x7ede8020
.word 0x7ea17fdd
.word 0x7ede8020
.word 0x7f222105
.word 0x7deef7d1
.word 0x7f222105
.word 0x7deef7d1
.word 0x7f222105
.word 0x7deef7d1
.word 0x7f222105
.word 0x7deef7d1
.word 0x7f222105
.word 0x7deef7d1
.word 0x7ec30c98
.word 0xff7fffff
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 284*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
