
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.5.2
// timestamp : Tue Sep  7 17:27:01 2021 GMT
// usage     : riscv_ctg \
//                  -- cgf $cgf \
//                  -- xlen $xlen \
// -----------
//
// -----------
// Copyright (c) 2021. IIT Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmul.s instruction of the RISC-V F extension for the fmul_b7 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmul_b7)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs1 == rs2 == rd, rs1==f18, rs2==f18, rd==f18, fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f18; op2:f18; dest:f18; op1val:0x7f378efe; op2val:0x7f378efe; valaddr_reg:x16; val_offset:0; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f18, f18, f18, 0x3, 0, x16, 0, x17, x15, 0, x18)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==f23, rs2==f20, rd==f22, fs1 == 0 and fe1 == 0xfe and fm1 == 0x089f67 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f23; op2:f20; dest:f22; op1val:0x7f089f67; op2val:0x0; valaddr_reg:x16; val_offset:8; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f22, f23, f20, 0x3, 0, x16, 8, x17, x15, 8, x18)

inst_2:
// rs1 == rs2 != rd, rs1==f15, rs2==f15, rd==f10, fs1 == 0 and fe1 == 0xf8 and fm1 == 0x0e9cab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f15; op2:f15; dest:f10; op1val:0x7c0e9cab; op2val:0x7c0e9cab; valaddr_reg:x16; val_offset:16; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f10, f15, f15, 0x3, 0, x16, 16, x17, x15, 16, x18)

inst_3:
// rs1 == rd != rs2, rs1==f4, rs2==f13, rd==f4, fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ba101 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f4; op2:f13; dest:f4; op1val:0x7f3ba101; op2val:0x0; valaddr_reg:x16; val_offset:24; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f4, f4, f13, 0x3, 0, x16, 24, x17, x15, 24, x18)

inst_4:
// rs2 == rd != rs1, rs1==f28, rs2==f17, rd==f17, fs1 == 0 and fe1 == 0xfd and fm1 == 0x1aa55e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f28; op2:f17; dest:f17; op1val:0x7e9aa55e; op2val:0x0; valaddr_reg:x16; val_offset:32; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f17, f28, f17, 0x3, 0, x16, 32, x17, x15, 32, x18)

inst_5:
// rs1==f7, rs2==f21, rd==f1, fs1 == 0 and fe1 == 0xfc and fm1 == 0x2ccc93 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f7; op2:f21; dest:f1; op1val:0x7e2ccc93; op2val:0x0; valaddr_reg:x16; val_offset:40; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f1, f7, f21, 0x3, 0, x16, 40, x17, x15, 40, x18)

inst_6:
// rs1==f31, rs2==f28, rd==f3, fs1 == 0 and fe1 == 0xfe and fm1 == 0x123a99 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f31; op2:f28; dest:f3; op1val:0x7f123a99; op2val:0x0; valaddr_reg:x16; val_offset:48; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f3, f31, f28, 0x3, 0, x16, 48, x17, x15, 48, x18)

inst_7:
// rs1==f14, rs2==f1, rd==f13, fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f285b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f14; op2:f1; dest:f13; op1val:0x7f0f285b; op2val:0x0; valaddr_reg:x16; val_offset:56; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f13, f14, f1, 0x3, 0, x16, 56, x17, x15, 56, x18)

inst_8:
// rs1==f22, rs2==f19, rd==f7, fs1 == 0 and fe1 == 0xfe and fm1 == 0x38b31c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f22; op2:f19; dest:f7; op1val:0x7f38b31c; op2val:0x0; valaddr_reg:x16; val_offset:64; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f7, f22, f19, 0x3, 0, x16, 64, x17, x15, 64, x18)

inst_9:
// rs1==f5, rs2==f11, rd==f19, fs1 == 0 and fe1 == 0xfe and fm1 == 0x076f73 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f5; op2:f11; dest:f19; op1val:0x7f076f73; op2val:0x0; valaddr_reg:x16; val_offset:72; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f19, f5, f11, 0x3, 0, x16, 72, x17, x15, 72, x18)

inst_10:
// rs1==f8, rs2==f30, rd==f5, fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f8; op2:f30; dest:f5; op1val:0x7f086888; op2val:0x0; valaddr_reg:x16; val_offset:80; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f5, f8, f30, 0x3, 0, x16, 80, x17, x15, 80, x18)

inst_11:
// rs1==f19, rs2==f6, rd==f30, fs1 == 0 and fe1 == 0xfd and fm1 == 0x394394 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f19; op2:f6; dest:f30; op1val:0x7eb94394; op2val:0x0; valaddr_reg:x16; val_offset:88; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f30, f19, f6, 0x3, 0, x16, 88, x17, x15, 88, x18)

inst_12:
// rs1==f6, rs2==f23, rd==f29, fs1 == 0 and fe1 == 0xfc and fm1 == 0x0a90e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f6; op2:f23; dest:f29; op1val:0x7e0a90e5; op2val:0x0; valaddr_reg:x16; val_offset:96; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f29, f6, f23, 0x3, 0, x16, 96, x17, x15, 96, x18)

inst_13:
// rs1==f17, rs2==f24, rd==f23, fs1 == 0 and fe1 == 0xfd and fm1 == 0x648b04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f17; op2:f24; dest:f23; op1val:0x7ee48b04; op2val:0x0; valaddr_reg:x16; val_offset:104; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f23, f17, f24, 0x3, 0, x16, 104, x17, x15, 104, x18)

inst_14:
// rs1==f1, rs2==f14, rd==f27, fs1 == 0 and fe1 == 0xfd and fm1 == 0x296a13 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f1; op2:f14; dest:f27; op1val:0x7ea96a13; op2val:0x0; valaddr_reg:x16; val_offset:112; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f27, f1, f14, 0x3, 0, x16, 112, x17, x15, 112, x18)

inst_15:
// rs1==f21, rs2==f31, rd==f16, fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c337b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f21; op2:f31; dest:f16; op1val:0x7edc337b; op2val:0x0; valaddr_reg:x16; val_offset:120; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f16, f21, f31, 0x3, 0, x16, 120, x17, x15, 120, x18)

inst_16:
// rs1==f10, rs2==f25, rd==f26, fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f10c6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f25; dest:f26; op1val:0x7f3f10c6; op2val:0x0; valaddr_reg:x16; val_offset:128; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f26, f10, f25, 0x3, 0, x16, 128, x17, x15, 128, x18)

inst_17:
// rs1==f16, rs2==f0, rd==f28, fs1 == 0 and fe1 == 0xfe and fm1 == 0x070538 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f16; op2:f0; dest:f28; op1val:0x7f070538; op2val:0x0; valaddr_reg:x16; val_offset:136; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f28, f16, f0, 0x3, 0, x16, 136, x17, x15, 136, x18)

inst_18:
// rs1==f3, rs2==f10, rd==f6, fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd1f5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f3; op2:f10; dest:f6; op1val:0x7f2bd1f5; op2val:0x0; valaddr_reg:x16; val_offset:144; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f6, f3, f10, 0x3, 0, x16, 144, x17, x15, 144, x18)

inst_19:
// rs1==f12, rs2==f3, rd==f8, fs1 == 0 and fe1 == 0xfe and fm1 == 0x09599c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f12; op2:f3; dest:f8; op1val:0x7f09599c; op2val:0x0; valaddr_reg:x16; val_offset:152; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f8, f12, f3, 0x3, 0, x16, 152, x17, x15, 152, x18)

inst_20:
// rs1==f27, rs2==f9, rd==f11, fs1 == 0 and fe1 == 0xfb and fm1 == 0x13b178 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f27; op2:f9; dest:f11; op1val:0x7d93b178; op2val:0x0; valaddr_reg:x16; val_offset:160; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f11, f27, f9, 0x3, 0, x16, 160, x17, x15, 160, x18)

inst_21:
// rs1==f13, rs2==f5, rd==f0, fs1 == 0 and fe1 == 0xfe and fm1 == 0x366362 and fs2 == 0 and fe2 == 0x2a and fm2 == 0x33a925 and rm_val == 3  
// opcode: fmul.s ; op1:f13; op2:f5; dest:f0; op1val:0x7f366362; op2val:0x1533a925; valaddr_reg:x16; val_offset:168; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f0, f13, f5, 0x3, 0, x16, 168, x17, x15, 168, x18)

inst_22:
// rs1==f29, rs2==f16, rd==f2, fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c23d1 and fs2 == 0 and fe2 == 0x2d and fm2 == 0x3e5b55 and rm_val == 3  
// opcode: fmul.s ; op1:f29; op2:f16; dest:f2; op1val:0x7dac23d1; op2val:0x16be5b55; valaddr_reg:x16; val_offset:176; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f2, f29, f16, 0x3, 0, x16, 176, x17, x15, 176, x18)

inst_23:
// rs1==f20, rs2==f27, rd==f9, fs1 == 0 and fe1 == 0xfd and fm1 == 0x28844c and fs2 == 0 and fe2 == 0x2b and fm2 == 0x427310 and rm_val == 3  
// opcode: fmul.s ; op1:f20; op2:f27; dest:f9; op1val:0x7ea8844c; op2val:0x15c27310; valaddr_reg:x16; val_offset:184; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f9, f20, f27, 0x3, 0, x16, 184, x17, x15, 184, x18)

inst_24:
// rs1==f2, rs2==f8, rd==f25, fs1 == 0 and fe1 == 0xfe and fm1 == 0x00c7d5 and fs2 == 0 and fe2 == 0x2a and fm2 == 0x7e72c1 and rm_val == 3  
// opcode: fmul.s ; op1:f2; op2:f8; dest:f25; op1val:0x7f00c7d5; op2val:0x157e72c1; valaddr_reg:x16; val_offset:192; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f25, f2, f8, 0x3, 0, x16, 192, x17, x15, 192, x18)

inst_25:
// rs1==f0, rs2==f26, rd==f12, fs1 == 0 and fe1 == 0xfc and fm1 == 0x639f2c and fs2 == 0 and fe2 == 0x2c and fm2 == 0x0ff547 and rm_val == 3  
// opcode: fmul.s ; op1:f0; op2:f26; dest:f12; op1val:0x7e639f2c; op2val:0x160ff547; valaddr_reg:x16; val_offset:200; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f0, f26, 0x3, 0, x16, 200, x17, x15, 200, x18)

inst_26:
// rs1==f24, rs2==f22, rd==f15, fs1 == 0 and fe1 == 0xfd and fm1 == 0x78dd0e and fs2 == 0 and fe2 == 0x2b and fm2 == 0x03abaa and rm_val == 3  
// opcode: fmul.s ; op1:f24; op2:f22; dest:f15; op1val:0x7ef8dd0e; op2val:0x1583abaa; valaddr_reg:x16; val_offset:208; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f15, f24, f22, 0x3, 0, x16, 208, x17, x15, 208, x18)

inst_27:
// rs1==f25, rs2==f29, rd==f21, fs1 == 0 and fe1 == 0xfe and fm1 == 0x2befa1 and fs2 == 0 and fe2 == 0x2a and fm2 == 0x3e951d and rm_val == 3  
// opcode: fmul.s ; op1:f25; op2:f29; dest:f21; op1val:0x7f2befa1; op2val:0x153e951d; valaddr_reg:x16; val_offset:216; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f21, f25, f29, 0x3, 0, x16, 216, x17, x15, 216, x18)

inst_28:
// rs1==f11, rs2==f7, rd==f14, fs1 == 0 and fe1 == 0xfa and fm1 == 0x4d54a3 and fs2 == 0 and fe2 == 0x2e and fm2 == 0x1f9626 and rm_val == 3  
// opcode: fmul.s ; op1:f11; op2:f7; dest:f14; op1val:0x7d4d54a3; op2val:0x171f9626; valaddr_reg:x16; val_offset:224; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f14, f11, f7, 0x3, 0, x16, 224, x17, x15, 224, x18)

inst_29:
// rs1==f26, rs2==f2, rd==f31, fs1 == 0 and fe1 == 0xfb and fm1 == 0x61068d and fs2 == 0 and fe2 == 0x2d and fm2 == 0x119e76 and rm_val == 3  
// opcode: fmul.s ; op1:f26; op2:f2; dest:f31; op1val:0x7de1068d; op2val:0x16919e76; valaddr_reg:x16; val_offset:232; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f31, f26, f2, 0x3, 0, x16, 232, x17, x15, 232, x18)

inst_30:
// rs1==f30, rs2==f12, rd==f20, fs1 == 0 and fe1 == 0xfd and fm1 == 0x08b9d9 and fs2 == 0 and fe2 == 0x2b and fm2 == 0x6fa96f and rm_val == 3  
// opcode: fmul.s ; op1:f30; op2:f12; dest:f20; op1val:0x7e88b9d9; op2val:0x15efa96f; valaddr_reg:x16; val_offset:240; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f20, f30, f12, 0x3, 0, x16, 240, x17, x15, 240, x18)

inst_31:
// rs1==f9, rs2==f4, rd==f24, fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d071f and fs2 == 0 and fe2 == 0x2a and fm2 == 0x50ad28 and rm_val == 3  
// opcode: fmul.s ; op1:f9; op2:f4; dest:f24; op1val:0x7f1d071f; op2val:0x1550ad28; valaddr_reg:x16; val_offset:248; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f24, f9, f4, 0x3, 0, x16, 248, x17, x15, 248, x18)

inst_32:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x305e0d and fs2 == 0 and fe2 == 0x2a and fm2 == 0x39cb42 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f305e0d; op2val:0x1539cb42; valaddr_reg:x16; val_offset:256; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 256, x17, x15, 256, x18)

inst_33:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x243814 and fs2 == 0 and fe2 == 0x2b and fm2 == 0x4789d0 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ea43814; op2val:0x15c789d0; valaddr_reg:x16; val_offset:264; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 264, x17, x15, 264, x18)

inst_34:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3bb1f5 and fs2 == 0 and fe2 == 0x2b and fm2 == 0x2e94ba and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ebbb1f5; op2val:0x15ae94ba; valaddr_reg:x16; val_offset:272; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 272, x17, x15, 272, x18)

inst_35:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x63ea1b and fs2 == 0 and fe2 == 0x2c and fm2 == 0x0fc5f1 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e63ea1b; op2val:0x160fc5f1; valaddr_reg:x16; val_offset:280; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 280, x17, x15, 280, x18)

inst_36:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32f44f and fs2 == 0 and fe2 == 0x2a and fm2 == 0x371bb0 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f32f44f; op2val:0x15371bb0; valaddr_reg:x16; val_offset:288; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 288, x17, x15, 288, x18)

inst_37:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374d41 and fs2 == 0 and fe2 == 0x2a and fm2 == 0x32c3eb and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f374d41; op2val:0x1532c3eb; valaddr_reg:x16; val_offset:296; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 296, x17, x15, 296, x18)

inst_38:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4a19c2 and fs2 == 0 and fe2 == 0x2b and fm2 == 0x222315 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eca19c2; op2val:0x15a22315; valaddr_reg:x16; val_offset:304; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 304, x17, x15, 304, x18)

inst_39:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x195ac9 and fs2 == 0 and fe2 == 0x2a and fm2 == 0x55acb7 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f195ac9; op2val:0x1555acb7; valaddr_reg:x16; val_offset:312; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 312, x17, x15, 312, x18)

inst_40:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x094fff and fs2 == 0 and fe2 == 0x2b and fm2 == 0x6ea35e and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e894fff; op2val:0x15eea35e; valaddr_reg:x16; val_offset:320; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 320, x17, x15, 320, x18)

inst_41:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0aea5e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0aea5e; op2val:0x0; valaddr_reg:x16; val_offset:328; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 328, x17, x15, 328, x18)

inst_42:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d1e07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7efd1e07; op2val:0x0; valaddr_reg:x16; val_offset:336; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 336, x17, x15, 336, x18)

inst_43:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04fd41 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f04fd41; op2val:0x0; valaddr_reg:x16; val_offset:344; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 344, x17, x15, 344, x18)

inst_44:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762408 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ef62408; op2val:0x0; valaddr_reg:x16; val_offset:352; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 352, x17, x15, 352, x18)

inst_45:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x775433 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d775433; op2val:0x0; valaddr_reg:x16; val_offset:360; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 360, x17, x15, 360, x18)

inst_46:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3af9fa and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dbaf9fa; op2val:0x0; valaddr_reg:x16; val_offset:368; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 368, x17, x15, 368, x18)

inst_47:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10affc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f10affc; op2val:0x0; valaddr_reg:x16; val_offset:376; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 376, x17, x15, 376, x18)

inst_48:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1671a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e9671a2; op2val:0x0; valaddr_reg:x16; val_offset:384; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 384, x17, x15, 384, x18)

inst_49:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13bb57 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e13bb57; op2val:0x0; valaddr_reg:x16; val_offset:392; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 392, x17, x15, 392, x18)

inst_50:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6b27f7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d6b27f7; op2val:0x0; valaddr_reg:x16; val_offset:400; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 400, x17, x15, 400, x18)

inst_51:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f31c4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e8f31c4; op2val:0x0; valaddr_reg:x16; val_offset:408; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 408, x17, x15, 408, x18)

inst_52:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x62ae46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d62ae46; op2val:0x0; valaddr_reg:x16; val_offset:416; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 416, x17, x15, 416, x18)

inst_53:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1fef00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e1fef00; op2val:0x0; valaddr_reg:x16; val_offset:424; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 424, x17, x15, 424, x18)

inst_54:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1db2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e9db2ee; op2val:0x0; valaddr_reg:x16; val_offset:432; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 432, x17, x15, 432, x18)

inst_55:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x41315c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7c41315c; op2val:0x0; valaddr_reg:x16; val_offset:440; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 440, x17, x15, 440, x18)

inst_56:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2165be and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2165be; op2val:0x0; valaddr_reg:x16; val_offset:448; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 448, x17, x15, 448, x18)

inst_57:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1b6277 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d9b6277; op2val:0x0; valaddr_reg:x16; val_offset:456; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 456, x17, x15, 456, x18)

inst_58:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x6a262c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7c6a262c; op2val:0x0; valaddr_reg:x16; val_offset:464; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 464, x17, x15, 464, x18)

inst_59:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3cd606 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3cd606; op2val:0x0; valaddr_reg:x16; val_offset:472; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 472, x17, x15, 472, x18)

inst_60:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a6f9b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eea6f9b; op2val:0x0; valaddr_reg:x16; val_offset:480; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 480, x17, x15, 480, x18)

inst_61:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x476063 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec76063; op2val:0x0; valaddr_reg:x16; val_offset:488; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 488, x17, x15, 488, x18)

inst_62:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a1c1b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1a1c1b; op2val:0x0; valaddr_reg:x16; val_offset:496; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 496, x17, x15, 496, x18)

inst_63:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0b2e4b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e0b2e4b; op2val:0x0; valaddr_reg:x16; val_offset:504; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 504, x17, x15, 504, x18)

inst_64:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2084ae and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ea084ae; op2val:0x0; valaddr_reg:x16; val_offset:512; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 512, x17, x15, 512, x18)

inst_65:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5f221f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7edf221f; op2val:0x0; valaddr_reg:x16; val_offset:520; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 520, x17, x15, 520, x18)

inst_66:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x268dc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ea68dc5; op2val:0x0; valaddr_reg:x16; val_offset:528; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 528, x17, x15, 528, x18)

inst_67:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38eb1b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f38eb1b; op2val:0x0; valaddr_reg:x16; val_offset:536; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 536, x17, x15, 536, x18)

inst_68:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x232951 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e232951; op2val:0x0; valaddr_reg:x16; val_offset:544; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 544, x17, x15, 544, x18)

inst_69:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dde9e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e6dde9e; op2val:0x0; valaddr_reg:x16; val_offset:552; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 552, x17, x15, 552, x18)

inst_70:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x47f677 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec7f677; op2val:0x0; valaddr_reg:x16; val_offset:560; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 560, x17, x15, 560, x18)

inst_71:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x31cfbf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e31cfbf; op2val:0x0; valaddr_reg:x16; val_offset:568; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 568, x17, x15, 568, x18)

inst_72:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19405f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d99405f; op2val:0x0; valaddr_reg:x16; val_offset:576; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 576, x17, x15, 576, x18)

inst_73:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0af6b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0af6b9; op2val:0x0; valaddr_reg:x16; val_offset:584; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 584, x17, x15, 584, x18)

inst_74:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1cf370 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e9cf370; op2val:0x0; valaddr_reg:x16; val_offset:592; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 592, x17, x15, 592, x18)

inst_75:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6d25cb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7b6d25cb; op2val:0x0; valaddr_reg:x16; val_offset:600; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 600, x17, x15, 600, x18)

inst_76:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x227041 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ea27041; op2val:0x0; valaddr_reg:x16; val_offset:608; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 608, x17, x15, 608, x18)

inst_77:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x083942 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f083942; op2val:0x0; valaddr_reg:x16; val_offset:616; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 616, x17, x15, 616, x18)

inst_78:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6fadd2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eefadd2; op2val:0x0; valaddr_reg:x16; val_offset:624; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 624, x17, x15, 624, x18)

inst_79:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x409980 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e409980; op2val:0x0; valaddr_reg:x16; val_offset:632; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 632, x17, x15, 632, x18)

inst_80:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x328a37 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e328a37; op2val:0x0; valaddr_reg:x16; val_offset:640; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 640, x17, x15, 640, x18)

inst_81:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x335a5f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f335a5f; op2val:0x0; valaddr_reg:x16; val_offset:648; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 648, x17, x15, 648, x18)

inst_82:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x432be8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec32be8; op2val:0x0; valaddr_reg:x16; val_offset:656; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 656, x17, x15, 656, x18)

inst_83:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x134261 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d934261; op2val:0x0; valaddr_reg:x16; val_offset:664; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 664, x17, x15, 664, x18)

inst_84:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4e2b68 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7cce2b68; op2val:0x0; valaddr_reg:x16; val_offset:672; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 672, x17, x15, 672, x18)

inst_85:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x57ea20 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dd7ea20; op2val:0x0; valaddr_reg:x16; val_offset:680; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 680, x17, x15, 680, x18)

inst_86:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x5d9799 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7c5d9799; op2val:0x0; valaddr_reg:x16; val_offset:688; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 688, x17, x15, 688, x18)

inst_87:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68bbe2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ee8bbe2; op2val:0x0; valaddr_reg:x16; val_offset:696; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 696, x17, x15, 696, x18)

inst_88:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3844b4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3844b4; op2val:0x0; valaddr_reg:x16; val_offset:704; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 704, x17, x15, 704, x18)

inst_89:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45af29 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec5af29; op2val:0x0; valaddr_reg:x16; val_offset:712; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 712, x17, x15, 712, x18)

inst_90:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x609f7b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ee09f7b; op2val:0x0; valaddr_reg:x16; val_offset:720; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 720, x17, x15, 720, x18)

inst_91:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27f459 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f27f459; op2val:0x0; valaddr_reg:x16; val_offset:728; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 728, x17, x15, 728, x18)

inst_92:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1cbf56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d9cbf56; op2val:0x0; valaddr_reg:x16; val_offset:736; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 736, x17, x15, 736, x18)

inst_93:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7dc215 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7efdc215; op2val:0x0; valaddr_reg:x16; val_offset:744; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 744, x17, x15, 744, x18)

inst_94:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x358c1d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eb58c1d; op2val:0x0; valaddr_reg:x16; val_offset:752; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 752, x17, x15, 752, x18)

inst_95:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2596ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2596ee; op2val:0x0; valaddr_reg:x16; val_offset:760; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 760, x17, x15, 760, x18)

inst_96:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d3017 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2d3017; op2val:0x0; valaddr_reg:x16; val_offset:768; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 768, x17, x15, 768, x18)

inst_97:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1310f3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1310f3; op2val:0x0; valaddr_reg:x16; val_offset:776; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 776, x17, x15, 776, x18)

inst_98:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x3d4d49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7cbd4d49; op2val:0x0; valaddr_reg:x16; val_offset:784; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 784, x17, x15, 784, x18)

inst_99:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2dbe96 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dadbe96; op2val:0x0; valaddr_reg:x16; val_offset:792; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 792, x17, x15, 792, x18)

inst_100:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c407f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eec407f; op2val:0x0; valaddr_reg:x16; val_offset:800; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 800, x17, x15, 800, x18)

inst_101:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x5ed631 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7cded631; op2val:0x0; valaddr_reg:x16; val_offset:808; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 808, x17, x15, 808, x18)

inst_102:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e148d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3e148d; op2val:0x0; valaddr_reg:x16; val_offset:816; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 816, x17, x15, 816, x18)

inst_103:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x140eaa and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e940eaa; op2val:0x0; valaddr_reg:x16; val_offset:824; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 824, x17, x15, 824, x18)

inst_104:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0d1c84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e0d1c84; op2val:0x0; valaddr_reg:x16; val_offset:832; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 832, x17, x15, 832, x18)

inst_105:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29fe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1c29fe; op2val:0x0; valaddr_reg:x16; val_offset:840; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 840, x17, x15, 840, x18)

inst_106:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x01ea00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7c81ea00; op2val:0x0; valaddr_reg:x16; val_offset:848; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 848, x17, x15, 848, x18)

inst_107:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1bb7c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7c9bb7c9; op2val:0x0; valaddr_reg:x16; val_offset:856; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 856, x17, x15, 856, x18)

inst_108:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7eadb5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d7eadb5; op2val:0x0; valaddr_reg:x16; val_offset:864; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 864, x17, x15, 864, x18)

inst_109:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04012d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e04012d; op2val:0x0; valaddr_reg:x16; val_offset:872; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 872, x17, x15, 872, x18)

inst_110:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x43d400 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7cc3d400; op2val:0x0; valaddr_reg:x16; val_offset:880; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 880, x17, x15, 880, x18)

inst_111:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x22667e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ea2667e; op2val:0x0; valaddr_reg:x16; val_offset:888; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 888, x17, x15, 888, x18)

inst_112:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x21a5d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e21a5d7; op2val:0x0; valaddr_reg:x16; val_offset:896; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 896, x17, x15, 896, x18)

inst_113:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23f501 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f23f501; op2val:0x0; valaddr_reg:x16; val_offset:904; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 904, x17, x15, 904, x18)

inst_114:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23397b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7da3397b; op2val:0x0; valaddr_reg:x16; val_offset:912; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 912, x17, x15, 912, x18)

inst_115:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2e0a9e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e2e0a9e; op2val:0x0; valaddr_reg:x16; val_offset:920; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 920, x17, x15, 920, x18)

inst_116:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ab7a7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7efab7a7; op2val:0x0; valaddr_reg:x16; val_offset:928; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 928, x17, x15, 928, x18)

inst_117:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0eff8f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0eff8f; op2val:0x0; valaddr_reg:x16; val_offset:936; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 936, x17, x15, 936, x18)

inst_118:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e44fd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2e44fd; op2val:0x0; valaddr_reg:x16; val_offset:944; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 944, x17, x15, 944, x18)

inst_119:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d844c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1d844c; op2val:0x0; valaddr_reg:x16; val_offset:952; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 952, x17, x15, 952, x18)

inst_120:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6f5572 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eef5572; op2val:0x0; valaddr_reg:x16; val_offset:960; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 960, x17, x15, 960, x18)

inst_121:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4490fe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec490fe; op2val:0x0; valaddr_reg:x16; val_offset:968; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 968, x17, x15, 968, x18)

inst_122:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f7f16 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e6f7f16; op2val:0x0; valaddr_reg:x16; val_offset:976; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 976, x17, x15, 976, x18)

inst_123:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a24a3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7efa24a3; op2val:0x0; valaddr_reg:x16; val_offset:984; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 984, x17, x15, 984, x18)

inst_124:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x41a1ac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec1a1ac; op2val:0x0; valaddr_reg:x16; val_offset:992; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 992, x17, x15, 992, x18)

inst_125:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d03d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f37d03d; op2val:0x0; valaddr_reg:x16; val_offset:1000; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1000, x17, x15, 1000, x18)

inst_126:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efc0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2efc0a; op2val:0x0; valaddr_reg:x16; val_offset:1008; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1008, x17, x15, 1008, x18)

inst_127:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e5316 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2e5316; op2val:0x0; valaddr_reg:x16; val_offset:1016; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1016, x17, x15, 1016, x18)

inst_128:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x065158 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f065158; op2val:0x0; valaddr_reg:x16; val_offset:1024; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1024, x17, x15, 1024, x18)

inst_129:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2a59d1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e2a59d1; op2val:0x0; valaddr_reg:x16; val_offset:1032; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1032, x17, x15, 1032, x18)

inst_130:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0af6e3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0af6e3; op2val:0x0; valaddr_reg:x16; val_offset:1040; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1040, x17, x15, 1040, x18)

inst_131:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59ffad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ed9ffad; op2val:0x0; valaddr_reg:x16; val_offset:1048; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1048, x17, x15, 1048, x18)

inst_132:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbe14 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2cbe14; op2val:0x0; valaddr_reg:x16; val_offset:1056; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1056, x17, x15, 1056, x18)

inst_133:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07e829 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e87e829; op2val:0x0; valaddr_reg:x16; val_offset:1064; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1064, x17, x15, 1064, x18)

inst_134:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4052ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec052ad; op2val:0x0; valaddr_reg:x16; val_offset:1072; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1072, x17, x15, 1072, x18)

inst_135:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2a53 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ebc2a53; op2val:0x0; valaddr_reg:x16; val_offset:1080; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1080, x17, x15, 1080, x18)

inst_136:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x312e1f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eb12e1f; op2val:0x0; valaddr_reg:x16; val_offset:1088; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1088, x17, x15, 1088, x18)

inst_137:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10c4ce and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f10c4ce; op2val:0x0; valaddr_reg:x16; val_offset:1096; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1096, x17, x15, 1096, x18)

inst_138:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38af5a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f38af5a; op2val:0x0; valaddr_reg:x16; val_offset:1104; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1104, x17, x15, 1104, x18)

inst_139:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07daac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e87daac; op2val:0x0; valaddr_reg:x16; val_offset:1112; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1112, x17, x15, 1112, x18)

inst_140:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x127958 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f127958; op2val:0x0; valaddr_reg:x16; val_offset:1120; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1120, x17, x15, 1120, x18)

inst_141:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d014f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0d014f; op2val:0x0; valaddr_reg:x16; val_offset:1128; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1128, x17, x15, 1128, x18)

inst_142:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b90d3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2b90d3; op2val:0x0; valaddr_reg:x16; val_offset:1136; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1136, x17, x15, 1136, x18)

inst_143:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f018006; op2val:0x0; valaddr_reg:x16; val_offset:1144; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1144, x17, x15, 1144, x18)

inst_144:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43ed0a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec3ed0a; op2val:0x0; valaddr_reg:x16; val_offset:1152; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1152, x17, x15, 1152, x18)

inst_145:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e79b5b2; op2val:0x0; valaddr_reg:x16; val_offset:1160; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1160, x17, x15, 1160, x18)

inst_146:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3557bf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e3557bf; op2val:0x0; valaddr_reg:x16; val_offset:1168; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1168, x17, x15, 1168, x18)

inst_147:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x49e399 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec9e399; op2val:0x0; valaddr_reg:x16; val_offset:1176; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1176, x17, x15, 1176, x18)

inst_148:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11ecfc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e91ecfc; op2val:0x0; valaddr_reg:x16; val_offset:1184; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1184, x17, x15, 1184, x18)

inst_149:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3284ec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eb284ec; op2val:0x0; valaddr_reg:x16; val_offset:1192; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1192, x17, x15, 1192, x18)

inst_150:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x5cb815 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7cdcb815; op2val:0x0; valaddr_reg:x16; val_offset:1200; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1200, x17, x15, 1200, x18)

inst_151:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad2f1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eaad2f1; op2val:0x0; valaddr_reg:x16; val_offset:1208; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1208, x17, x15, 1208, x18)

inst_152:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3648af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3648af; op2val:0x0; valaddr_reg:x16; val_offset:1216; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1216, x17, x15, 1216, x18)

inst_153:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ad17d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0ad17d; op2val:0x0; valaddr_reg:x16; val_offset:1224; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1224, x17, x15, 1224, x18)

inst_154:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25608b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ea5608b; op2val:0x0; valaddr_reg:x16; val_offset:1232; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1232, x17, x15, 1232, x18)

inst_155:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5f2ead and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7edf2ead; op2val:0x0; valaddr_reg:x16; val_offset:1240; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1240, x17, x15, 1240, x18)

inst_156:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68aebb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ee8aebb; op2val:0x0; valaddr_reg:x16; val_offset:1248; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1248, x17, x15, 1248, x18)

inst_157:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x009696 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f009696; op2val:0x0; valaddr_reg:x16; val_offset:1256; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1256, x17, x15, 1256, x18)

inst_158:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x206a70 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f206a70; op2val:0x0; valaddr_reg:x16; val_offset:1264; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1264, x17, x15, 1264, x18)

inst_159:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2db9cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d2db9cd; op2val:0x0; valaddr_reg:x16; val_offset:1272; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1272, x17, x15, 1272, x18)

inst_160:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f378efe; op2val:0x0; valaddr_reg:x16; val_offset:1280; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1280, x17, x15, 1280, x18)

inst_161:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x0e9cab and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x7c0e9cab; op2val:0x0; valaddr_reg:x16; val_offset:1288; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1288, x17, x15, 1288, x18)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
test_fp:
.word 0x7f378efe
.word 0x7f378efe
.word 0x7f089f67
.word 0x0
.word 0x7c0e9cab
.word 0x7c0e9cab
.word 0x7f3ba101
.word 0x0
.word 0x7e9aa55e
.word 0x0
.word 0x7e2ccc93
.word 0x0
.word 0x7f123a99
.word 0x0
.word 0x7f0f285b
.word 0x0
.word 0x7f38b31c
.word 0x0
.word 0x7f076f73
.word 0x0
.word 0x7f086888
.word 0x0
.word 0x7eb94394
.word 0x0
.word 0x7e0a90e5
.word 0x0
.word 0x7ee48b04
.word 0x0
.word 0x7ea96a13
.word 0x0
.word 0x7edc337b
.word 0x0
.word 0x7f3f10c6
.word 0x0
.word 0x7f070538
.word 0x0
.word 0x7f2bd1f5
.word 0x0
.word 0x7f09599c
.word 0x0
.word 0x7d93b178
.word 0x0
.word 0x7f366362
.word 0x1533a925
.word 0x7dac23d1
.word 0x16be5b55
.word 0x7ea8844c
.word 0x15c27310
.word 0x7f00c7d5
.word 0x157e72c1
.word 0x7e639f2c
.word 0x160ff547
.word 0x7ef8dd0e
.word 0x1583abaa
.word 0x7f2befa1
.word 0x153e951d
.word 0x7d4d54a3
.word 0x171f9626
.word 0x7de1068d
.word 0x16919e76
.word 0x7e88b9d9
.word 0x15efa96f
.word 0x7f1d071f
.word 0x1550ad28
.word 0x7f305e0d
.word 0x1539cb42
.word 0x7ea43814
.word 0x15c789d0
.word 0x7ebbb1f5
.word 0x15ae94ba
.word 0x7e63ea1b
.word 0x160fc5f1
.word 0x7f32f44f
.word 0x15371bb0
.word 0x7f374d41
.word 0x1532c3eb
.word 0x7eca19c2
.word 0x15a22315
.word 0x7f195ac9
.word 0x1555acb7
.word 0x7e894fff
.word 0x15eea35e
.word 0x7f0aea5e
.word 0x0
.word 0x7efd1e07
.word 0x0
.word 0x7f04fd41
.word 0x0
.word 0x7ef62408
.word 0x0
.word 0x7d775433
.word 0x0
.word 0x7dbaf9fa
.word 0x0
.word 0x7f10affc
.word 0x0
.word 0x7e9671a2
.word 0x0
.word 0x7e13bb57
.word 0x0
.word 0x7d6b27f7
.word 0x0
.word 0x7e8f31c4
.word 0x0
.word 0x7d62ae46
.word 0x0
.word 0x7e1fef00
.word 0x0
.word 0x7e9db2ee
.word 0x0
.word 0x7c41315c
.word 0x0
.word 0x7f2165be
.word 0x0
.word 0x7d9b6277
.word 0x0
.word 0x7c6a262c
.word 0x0
.word 0x7f3cd606
.word 0x0
.word 0x7eea6f9b
.word 0x0
.word 0x7ec76063
.word 0x0
.word 0x7f1a1c1b
.word 0x0
.word 0x7e0b2e4b
.word 0x0
.word 0x7ea084ae
.word 0x0
.word 0x7edf221f
.word 0x0
.word 0x7ea68dc5
.word 0x0
.word 0x7f38eb1b
.word 0x0
.word 0x7e232951
.word 0x0
.word 0x7e6dde9e
.word 0x0
.word 0x7ec7f677
.word 0x0
.word 0x7e31cfbf
.word 0x0
.word 0x7d99405f
.word 0x0
.word 0x7f0af6b9
.word 0x0
.word 0x7e9cf370
.word 0x0
.word 0x7b6d25cb
.word 0x0
.word 0x7ea27041
.word 0x0
.word 0x7f083942
.word 0x0
.word 0x7eefadd2
.word 0x0
.word 0x7e409980
.word 0x0
.word 0x7e328a37
.word 0x0
.word 0x7f335a5f
.word 0x0
.word 0x7ec32be8
.word 0x0
.word 0x7d934261
.word 0x0
.word 0x7cce2b68
.word 0x0
.word 0x7dd7ea20
.word 0x0
.word 0x7c5d9799
.word 0x0
.word 0x7ee8bbe2
.word 0x0
.word 0x7f3844b4
.word 0x0
.word 0x7ec5af29
.word 0x0
.word 0x7ee09f7b
.word 0x0
.word 0x7f27f459
.word 0x0
.word 0x7d9cbf56
.word 0x0
.word 0x7efdc215
.word 0x0
.word 0x7eb58c1d
.word 0x0
.word 0x7f2596ee
.word 0x0
.word 0x7f2d3017
.word 0x0
.word 0x7f1310f3
.word 0x0
.word 0x7cbd4d49
.word 0x0
.word 0x7dadbe96
.word 0x0
.word 0x7eec407f
.word 0x0
.word 0x7cded631
.word 0x0
.word 0x7f3e148d
.word 0x0
.word 0x7e940eaa
.word 0x0
.word 0x7e0d1c84
.word 0x0
.word 0x7f1c29fe
.word 0x0
.word 0x7c81ea00
.word 0x0
.word 0x7c9bb7c9
.word 0x0
.word 0x7d7eadb5
.word 0x0
.word 0x7e04012d
.word 0x0
.word 0x7cc3d400
.word 0x0
.word 0x7ea2667e
.word 0x0
.word 0x7e21a5d7
.word 0x0
.word 0x7f23f501
.word 0x0
.word 0x7da3397b
.word 0x0
.word 0x7e2e0a9e
.word 0x0
.word 0x7efab7a7
.word 0x0
.word 0x7f0eff8f
.word 0x0
.word 0x7f2e44fd
.word 0x0
.word 0x7f1d844c
.word 0x0
.word 0x7eef5572
.word 0x0
.word 0x7ec490fe
.word 0x0
.word 0x7e6f7f16
.word 0x0
.word 0x7efa24a3
.word 0x0
.word 0x7ec1a1ac
.word 0x0
.word 0x7f37d03d
.word 0x0
.word 0x7f2efc0a
.word 0x0
.word 0x7f2e5316
.word 0x0
.word 0x7f065158
.word 0x0
.word 0x7e2a59d1
.word 0x0
.word 0x7f0af6e3
.word 0x0
.word 0x7ed9ffad
.word 0x0
.word 0x7f2cbe14
.word 0x0
.word 0x7e87e829
.word 0x0
.word 0x7ec052ad
.word 0x0
.word 0x7ebc2a53
.word 0x0
.word 0x7eb12e1f
.word 0x0
.word 0x7f10c4ce
.word 0x0
.word 0x7f38af5a
.word 0x0
.word 0x7e87daac
.word 0x0
.word 0x7f127958
.word 0x0
.word 0x7f0d014f
.word 0x0
.word 0x7f2b90d3
.word 0x0
.word 0x7f018006
.word 0x0
.word 0x7ec3ed0a
.word 0x0
.word 0x7e79b5b2
.word 0x0
.word 0x7e3557bf
.word 0x0
.word 0x7ec9e399
.word 0x0
.word 0x7e91ecfc
.word 0x0
.word 0x7eb284ec
.word 0x0
.word 0x7cdcb815
.word 0x0
.word 0x7eaad2f1
.word 0x0
.word 0x7f3648af
.word 0x0
.word 0x7f0ad17d
.word 0x0
.word 0x7ea5608b
.word 0x0
.word 0x7edf2ead
.word 0x0
.word 0x7ee8aebb
.word 0x0
.word 0x7f009696
.word 0x0
.word 0x7f206a70
.word 0x0
.word 0x7d2db9cd
.word 0x0
.word 0x7f378efe
.word 0x0
.word 0x7c0e9cab
.word 0x0
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 324*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
