
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.5.2
// timestamp : Tue Sep  7 16:08:13 2021 GMT
// usage     : riscv_ctg \
//                  -- cgf $cgf \
//                  -- xlen $xlen \
// -----------
//
// -----------
// Copyright (c) 2021. IIT Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V F extension for the fnmsub_b17 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b17)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2, rs1==f10, rs2==f11, rs3==f15, rd==f10, fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f15; dest:f10; op1val:0x7e36c1bf; op2val:0x7ed0fbe8; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:0; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f10, f10, f11, f15, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1:
// rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1, rs1==f12, rs2==f1, rs3==f18, rd==f18, fs1 == 0 and fe1 == 0xfc and fm1 == 0x15fd73 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x20bb94 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f12; op2:f1; op3:f18; dest:f18; op1val:0x7e15fd73; op2val:0x7e20bb94; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:12; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f18, f12, f1, f18, 0x0, 0, x16, 12, x17, x15, 8, x18)

inst_2:
// rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd, rs1==f20, rs2==f30, rs3==f13, rd==f4, fs1 == 0 and fe1 == 0xfe and fm1 == 0x165edf and fs2 == 0 and fe2 == 0xfb and fm2 == 0x5c6184 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f20; op2:f30; op3:f13; dest:f4; op1val:0x7f165edf; op2val:0x7ddc6184; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:24; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f4, f20, f30, f13, 0x0, 0, x16, 24, x17, x15, 16, x18)

inst_3:
// rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3, rs1==f23, rs2==f23, rs3==f1, rd==f22, fs1 == 0 and fe1 == 0xfc and fm1 == 0x2bea1b and fs2 == 0 and fe2 == 0xf6 and fm2 == 0x04bcca and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f23; op2:f23; op3:f1; dest:f22; op1val:0x7e2bea1b; op2val:0x7e2bea1b; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:36; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f22, f23, f23, f1, 0x0, 0, x16, 36, x17, x15, 24, x18)

inst_4:
// rs1 == rs2 == rs3 == rd, rs1==f7, rs2==f7, rs3==f7, rd==f7, fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4b435e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f7; op2:f7; op3:f7; dest:f7; op1val:0x7e8e7425; op2val:0x7e8e7425; op3val:0x7e8e7425; valaddr_reg:x16; val_offset:48; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f7, f7, f7, f7, 0x0, 0, x16, 48, x17, x15, 32, x18)

inst_5:
// rd == rs2 == rs3 != rs1, rs1==f21, rs2==f17, rs3==f17, rd==f17, fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0a2e4c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f21; op2:f17; op3:f17; dest:f17; op1val:0x7f2cafdc; op2val:0x7f0a2e4c; op3val:0x7f0a2e4c; valaddr_reg:x16; val_offset:60; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f17, f21, f17, f17, 0x0, 0, x16, 60, x17, x15, 40, x18)

inst_6:
// rs1 == rs2 == rd != rs3, rs1==f25, rs2==f25, rs3==f9, rd==f25, fs1 == 0 and fe1 == 0xfe and fm1 == 0x115cea and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1a28e8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f25; op2:f25; op3:f9; dest:f25; op1val:0x7f115cea; op2val:0x7f115cea; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:72; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f25, f25, f25, f9, 0x0, 0, x16, 72, x17, x15, 48, x18)

inst_7:
// rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2, rs1==f24, rs2==f6, rs3==f24, rd==f23, fs1 == 0 and fe1 == 0xfd and fm1 == 0x794f1c and fs2 == 0 and fe2 == 0xfc and fm2 == 0x69f89b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f24; op2:f6; op3:f24; dest:f23; op1val:0x7ef94f1c; op2val:0x7e69f89b; op3val:0x7ef94f1c; valaddr_reg:x16; val_offset:84; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f23, f24, f6, f24, 0x0, 0, x16, 84, x17, x15, 56, x18)

inst_8:
// rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1, rs1==f1, rs2==f22, rs3==f22, rd==f12, fs1 == 0 and fe1 == 0xfe and fm1 == 0x0642e8 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4e6013 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f1; op2:f22; op3:f22; dest:f12; op1val:0x7f0642e8; op2val:0x7ece6013; op3val:0x7ece6013; valaddr_reg:x16; val_offset:96; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f12, f1, f22, f22, 0x0, 0, x16, 96, x17, x15, 64, x18)

inst_9:
// rs1 == rs2 == rs3 != rd, rs1==f29, rs2==f29, rs3==f29, rd==f9, fs1 == 0 and fe1 == 0xfc and fm1 == 0x19d51f and fs2 == 0 and fe2 == 0xfb and fm2 == 0x7705e2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f29; op2:f29; op3:f29; dest:f9; op1val:0x7e19d51f; op2val:0x7e19d51f; op3val:0x7e19d51f; valaddr_reg:x16; val_offset:108; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f9, f29, f29, f29, 0x0, 0, x16, 108, x17, x15, 72, x18)

inst_10:
// rs1 == rd == rs3 != rs2, rs1==f27, rs2==f8, rs3==f27, rd==f27, fs1 == 0 and fe1 == 0xfb and fm1 == 0x279c91 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x032ddf and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f27; op2:f8; op3:f27; dest:f27; op1val:0x7da79c91; op2val:0x7d032ddf; op3val:0x7da79c91; valaddr_reg:x16; val_offset:120; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f27, f27, f8, f27, 0x0, 0, x16, 120, x17, x15, 80, x18)

inst_11:
// rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1, rs1==f18, rs2==f26, rs3==f16, rd==f26, fs1 == 0 and fe1 == 0xfd and fm1 == 0x27d146 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1150a9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f18; op2:f26; op3:f16; dest:f26; op1val:0x7ea7d146; op2val:0x7f1150a9; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:132; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f26, f18, f26, f16, 0x0, 0, x16, 132, x17, x15, 88, x18)

inst_12:
// rs1==f30, rs2==f20, rs3==f28, rd==f3, fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x32e4e1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f30; op2:f20; op3:f28; dest:f3; op1val:0x7f1ae1f2; op2val:0x7f32e4e1; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:144; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f3, f30, f20, f28, 0x0, 0, x16, 144, x17, x15, 96, x18)

inst_13:
// rs1==f2, rs2==f19, rs3==f25, rd==f20, fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0e06b2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f2; op2:f19; op3:f25; dest:f20; op1val:0x7f09767a; op2val:0x7f0e06b2; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:156; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f20, f2, f19, f25, 0x0, 0, x16, 156, x17, x15, 104, x18)

inst_14:
// rs1==f28, rs2==f18, rs3==f8, rd==f2, fs1 == 0 and fe1 == 0xfe and fm1 == 0x24caba and fs2 == 0 and fe2 == 0xfd and fm2 == 0x66d514 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f28; op2:f18; op3:f8; dest:f2; op1val:0x7f24caba; op2val:0x7ee6d514; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:168; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f2, f28, f18, f8, 0x0, 0, x16, 168, x17, x15, 112, x18)

inst_15:
// rs1==f8, rs2==f3, rs3==f23, rd==f28, fs1 == 0 and fe1 == 0xfe and fm1 == 0x272357 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x055fe9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f8; op2:f3; op3:f23; dest:f28; op1val:0x7f272357; op2val:0x7f055fe9; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:180; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f28, f8, f3, f23, 0x0, 0, x16, 180, x17, x15, 120, x18)

inst_16:
// rs1==f15, rs2==f14, rs3==f10, rd==f11, fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eee0f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3286a3 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f15; op2:f14; op3:f10; dest:f11; op1val:0x7eceee0f; op2val:0x7f3286a3; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:192; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f11, f15, f14, f10, 0x0, 0, x16, 192, x17, x15, 128, x18)

inst_17:
// rs1==f9, rs2==f31, rs3==f12, rd==f21, fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a33b5 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x334304 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f9; op2:f31; op3:f12; dest:f21; op1val:0x7e8a33b5; op2val:0x7e334304; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:204; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f21, f9, f31, f12, 0x0, 0, x16, 204, x17, x15, 136, x18)

inst_18:
// rs1==f22, rs2==f27, rs3==f20, rd==f8, fs1 == 0 and fe1 == 0xfe and fm1 == 0x1822d8 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x6f56b5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f22; op2:f27; op3:f20; dest:f8; op1val:0x7f1822d8; op2val:0x7eef56b5; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:216; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f8, f22, f27, f20, 0x0, 0, x16, 216, x17, x15, 144, x18)

inst_19:
// rs1==f11, rs2==f0, rs3==f26, rd==f19, fs1 == 0 and fe1 == 0xfe and fm1 == 0x3821d7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2b460e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f11; op2:f0; op3:f26; dest:f19; op1val:0x7f3821d7; op2val:0x7f2b460e; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:228; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f19, f11, f0, f26, 0x0, 0, x16, 228, x17, x15, 152, x18)

inst_20:
// rs1==f26, rs2==f13, rs3==f11, rd==f16, fs1 == 0 and fe1 == 0xfd and fm1 == 0x780c49 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2a94d2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f26; op2:f13; op3:f11; dest:f16; op1val:0x7ef80c49; op2val:0x7eaa94d2; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:240; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f16, f26, f13, f11, 0x0, 0, x16, 240, x17, x15, 160, x18)

inst_21:
// rs1==f13, rs2==f5, rs3==f3, rd==f15, fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b58ad and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x63b5e5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f13; op2:f5; op3:f3; dest:f15; op1val:0x7ecb58ad; op2val:0x7ce3b5e5; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:252; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f15, f13, f5, f3, 0x0, 0, x16, 252, x17, x15, 168, x18)

inst_22:
// rs1==f6, rs2==f16, rs3==f14, rd==f5, fs1 == 0 and fe1 == 0xfd and fm1 == 0x4913df and fs2 == 0 and fe2 == 0xfd and fm2 == 0x30d847 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f6; op2:f16; op3:f14; dest:f5; op1val:0x7ec913df; op2val:0x7eb0d847; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:264; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f5, f6, f16, f14, 0x0, 0, x16, 264, x17, x15, 176, x18)

inst_23:
// rs1==f3, rs2==f4, rs3==f5, rd==f14, fs1 == 0 and fe1 == 0xfe and fm1 == 0x13ed79 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7e2f1b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f3; op2:f4; op3:f5; dest:f14; op1val:0x7f13ed79; op2val:0x7efe2f1b; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:276; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f14, f3, f4, f5, 0x0, 0, x16, 276, x17, x15, 184, x18)

inst_24:
// rs1==f17, rs2==f15, rs3==f0, rd==f31, fs1 == 0 and fe1 == 0xfd and fm1 == 0x66ec7b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0b8d5c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f17; op2:f15; op3:f0; dest:f31; op1val:0x7ee6ec7b; op2val:0x7f0b8d5c; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:288; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f31, f17, f15, f0, 0x0, 0, x16, 288, x17, x15, 192, x18)

inst_25:
// rs1==f16, rs2==f10, rs3==f21, rd==f29, fs1 == 0 and fe1 == 0xfc and fm1 == 0x65f120 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x251f3f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f16; op2:f10; op3:f21; dest:f29; op1val:0x7e65f120; op2val:0x7f251f3f; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:300; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f29, f16, f10, f21, 0x0, 0, x16, 300, x17, x15, 200, x18)

inst_26:
// rs1==f0, rs2==f2, rs3==f4, rd==f1, fs1 == 0 and fe1 == 0xfd and fm1 == 0x735187 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3b945b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f0; op2:f2; op3:f4; dest:f1; op1val:0x7ef35187; op2val:0x7f3b945b; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:312; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f1, f0, f2, f4, 0x0, 0, x16, 312, x17, x15, 208, x18)

inst_27:
// rs1==f14, rs2==f24, rs3==f30, rd==f13, fs1 == 0 and fe1 == 0xfd and fm1 == 0x1320d0 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x54336a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f14; op2:f24; op3:f30; dest:f13; op1val:0x7e9320d0; op2val:0x7ed4336a; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:324; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f14, f24, f30, 0x0, 0, x16, 324, x17, x15, 216, x18)

inst_28:
// rs1==f4, rs2==f12, rs3==f31, rd==f24, fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a34be and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2b1c44 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f4; op2:f12; op3:f31; dest:f24; op1val:0x7f1a34be; op2val:0x7f2b1c44; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:336; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f24, f4, f12, f31, 0x0, 0, x16, 336, x17, x15, 224, x18)

inst_29:
// rs1==f19, rs2==f9, rs3==f2, rd==f0, fs1 == 0 and fe1 == 0xfc and fm1 == 0x401d9b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x16144b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f19; op2:f9; op3:f2; dest:f0; op1val:0x7e401d9b; op2val:0x7f16144b; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:348; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f0, f19, f9, f2, 0x0, 0, x16, 348, x17, x15, 232, x18)

inst_30:
// rs1==f31, rs2==f28, rs3==f6, rd==f30, fs1 == 0 and fe1 == 0xfd and fm1 == 0x4a994e and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5a40dd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f31; op2:f28; op3:f6; dest:f30; op1val:0x7eca994e; op2val:0x7eda40dd; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:360; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f30, f31, f28, f6, 0x0, 0, x16, 360, x17, x15, 240, x18)

inst_31:
// rs1==f5, rs2==f21, rs3==f19, rd==f6, fs1 == 0 and fe1 == 0xfb and fm1 == 0x60facc and fs2 == 0 and fe2 == 0xfd and fm2 == 0x18fe38 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f5; op2:f21; op3:f19; dest:f6; op1val:0x7de0facc; op2val:0x7e98fe38; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:372; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f6, f5, f21, f19, 0x0, 0, x16, 372, x17, x15, 248, x18)

inst_32:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c9fa7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0fc01f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f1c9fa7; op2val:0x7f0fc01f; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:384; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 384, x17, x15, 256, x18)

inst_33:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11483d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1ffee2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e11483d; op2val:0x7e9ffee2; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:396; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 396, x17, x15, 264, x18)

inst_34:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x159092 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0ba3b9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f159092; op2val:0x7f0ba3b9; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:408; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 408, x17, x15, 272, x18)

inst_35:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4fbc01 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x190f76 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e4fbc01; op2val:0x7d990f76; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:420; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 420, x17, x15, 280, x18)

inst_36:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0781f6 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x229a06 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e8781f6; op2val:0x7f229a06; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:432; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 432, x17, x15, 288, x18)

inst_37:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ae1d2 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4fef6d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e9ae1d2; op2val:0x7ecfef6d; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:444; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 444, x17, x15, 296, x18)

inst_38:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x13a10a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x07fa5d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f13a10a; op2val:0x7e87fa5d; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:456; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 456, x17, x15, 304, x18)

inst_39:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x015d4c and fs2 == 0 and fe2 == 0xfd and fm2 == 0x41cf2f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d015d4c; op2val:0x7ec1cf2f; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:468; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 468, x17, x15, 312, x18)

inst_40:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4c2b76 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1337c1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e4c2b76; op2val:0x7e9337c1; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:480; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 480, x17, x15, 320, x18)

inst_41:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50905a and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0e02b8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ed0905a; op2val:0x7f0e02b8; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:492; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 492, x17, x15, 328, x18)

inst_42:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0970bd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d52ba4d; op2val:0x7f0970bd; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:504; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 504, x17, x15, 336, x18)

inst_43:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2fc21e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x6ff4bc and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eafc21e; op2val:0x7e6ff4bc; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:516; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 516, x17, x15, 344, x18)

inst_44:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x656a07 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x55173a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ee56a07; op2val:0x7ed5173a; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:528; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 528, x17, x15, 352, x18)

inst_45:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x592a8c and fs2 == 0 and fe2 == 0xfc and fm2 == 0x7e9d6e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7dd92a8c; op2val:0x7e7e9d6e; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:540; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 540, x17, x15, 360, x18)

inst_46:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 0 and fe2 == 0xfb and fm2 == 0x3d2101 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7efba99e; op2val:0x7dbd2101; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:552; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 552, x17, x15, 368, x18)

inst_47:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x724276 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x098d5c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ef24276; op2val:0x7e098d5c; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:564; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 564, x17, x15, 376, x18)

inst_48:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x597e8a and fs2 == 0 and fe2 == 0xfc and fm2 == 0x0bc2ae and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ed97e8a; op2val:0x7e0bc2ae; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:576; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 576, x17, x15, 384, x18)

inst_49:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x073a84 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x09dfb8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e873a84; op2val:0x7f09dfb8; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:588; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 588, x17, x15, 392, x18)

inst_50:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4de363 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x2e05d1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ecde363; op2val:0x7dae05d1; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:600; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 600, x17, x15, 400, x18)

inst_51:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10cdee and fs2 == 0 and fe2 == 0xfe and fm2 == 0x38931c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f10cdee; op2val:0x7f38931c; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:612; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 612, x17, x15, 408, x18)

inst_52:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b2a84 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1ac336 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7efb2a84; op2val:0x7f1ac336; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:624; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 624, x17, x15, 416, x18)

inst_53:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1167f4 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x62f85a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f1167f4; op2val:0x7e62f85a; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:636; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 636, x17, x15, 424, x18)

inst_54:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34ba29 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x0fb3a8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f34ba29; op2val:0x7e8fb3a8; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:648; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 648, x17, x15, 432, x18)

inst_55:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2a571c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2e7b77 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f2a571c; op2val:0x7f2e7b77; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:660; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 660, x17, x15, 440, x18)

inst_56:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x530441 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7f86ba and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e530441; op2val:0x7eff86ba; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:672; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 672, x17, x15, 448, x18)

inst_57:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x161cff and fs2 == 0 and fe2 == 0xfd and fm2 == 0x51086c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e961cff; op2val:0x7ed1086c; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:684; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 684, x17, x15, 456, x18)

inst_58:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x215a9a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x60ae32 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e215a9a; op2val:0x7ee0ae32; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:696; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 696, x17, x15, 464, x18)

inst_59:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00905e and fs2 == 0 and fe2 == 0xfd and fm2 == 0x27824d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e80905e; op2val:0x7ea7824d; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:708; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 708, x17, x15, 472, x18)

inst_60:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ed5d0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x01b289 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eded5d0; op2val:0x7f01b289; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:720; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 720, x17, x15, 480, x18)

inst_61:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x201d48 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x601303 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f201d48; op2val:0x7e601303; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:732; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 732, x17, x15, 488, x18)

inst_62:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bf641 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x03fb3f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f0bf641; op2val:0x7d83fb3f; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:744; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 744, x17, x15, 496, x18)

inst_63:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x261957 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x70b43d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f261957; op2val:0x7e70b43d; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:756; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 756, x17, x15, 504, x18)

inst_64:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24d9b0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2cc100 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f24d9b0; op2val:0x7f2cc100; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:768; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 768, x17, x15, 512, x18)

inst_65:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x469f5a and fs2 == 0 and fe2 == 0xfc and fm2 == 0x0fc236 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e469f5a; op2val:0x7e0fc236; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:780; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 780, x17, x15, 520, x18)

inst_66:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23f1fb and fs2 == 0 and fe2 == 0xfc and fm2 == 0x39ed2e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f23f1fb; op2val:0x7e39ed2e; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:792; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 792, x17, x15, 528, x18)

inst_67:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x01aad7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f09cbd1; op2val:0x7f01aad7; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:804; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 804, x17, x15, 536, x18)

inst_68:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x337ad1 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x30557d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eb37ad1; op2val:0x7e30557d; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:816; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 816, x17, x15, 544, x18)

inst_69:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19b362 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0cd956 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e99b362; op2val:0x7f0cd956; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:828; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 828, x17, x15, 552, x18)

inst_70:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38d1a5 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0a6049 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eb8d1a5; op2val:0x7f0a6049; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:840; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 840, x17, x15, 560, x18)

inst_71:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1dc006 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f203ed5; op2val:0x7f1dc006; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:852; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 852, x17, x15, 568, x18)

inst_72:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x660428 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eb82999; op2val:0x7ee60428; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:864; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 864, x17, x15, 576, x18)

inst_73:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14a5b3 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x5c95cc and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f14a5b3; op2val:0x7ddc95cc; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:876; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 876, x17, x15, 584, x18)

inst_74:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x044948 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x0a6bad and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e044948; op2val:0x7e8a6bad; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:888; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 888, x17, x15, 592, x18)

inst_75:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0e1418 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x381fbe and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7c8e1418; op2val:0x7eb81fbe; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:900; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 900, x17, x15, 600, x18)

inst_76:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x608143 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x4d3073 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ee08143; op2val:0x7e4d3073; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:912; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 912, x17, x15, 608, x18)

inst_77:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c8a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1eab47 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f076c8a; op2val:0x7e9eab47; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:924; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 924, x17, x15, 616, x18)

inst_78:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04b289 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x370ec5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f04b289; op2val:0x7f370ec5; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:936; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 936, x17, x15, 624, x18)

inst_79:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x60e085 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x71cd8a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ee0e085; op2val:0x7e71cd8a; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:948; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 948, x17, x15, 632, x18)

inst_80:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0eeeea and fs2 == 0 and fe2 == 0xfc and fm2 == 0x4d5498 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e0eeeea; op2val:0x7e4d5498; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:960; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 960, x17, x15, 640, x18)

inst_81:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46a01f and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2a21ee and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ec6a01f; op2val:0x7eaa21ee; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:972; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 972, x17, x15, 648, x18)

inst_82:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x133df8 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0fa54d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d933df8; op2val:0x7f0fa54d; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:984; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 984, x17, x15, 656, x18)

inst_83:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x76e4d9 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2c4d11 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ef6e4d9; op2val:0x7f2c4d11; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:996; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 996, x17, x15, 664, x18)

inst_84:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01615c and fs2 == 0 and fe2 == 0xfd and fm2 == 0x469037 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f01615c; op2val:0x7ec69037; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1008; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1008, x17, x15, 672, x18)

inst_85:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x76b68b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x04a412 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7df6b68b; op2val:0x7f04a412; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1020; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1020, x17, x15, 680, x18)

inst_86:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ad3ab and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1e86f9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f3ad3ab; op2val:0x7e9e86f9; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1032; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1032, x17, x15, 688, x18)

inst_87:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209877 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x7fc6b5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ea09877; op2val:0x7d7fc6b5; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1044; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1044, x17, x15, 696, x18)

inst_88:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0d1be6 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x184f43 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e8d1be6; op2val:0x7e984f43; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1056; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1056, x17, x15, 704, x18)

inst_89:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c8964 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x10ae28 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eec8964; op2val:0x7f10ae28; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1068; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1068, x17, x15, 712, x18)

inst_90:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x39f3eb and fs2 == 0 and fe2 == 0xfc and fm2 == 0x0a10b2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e39f3eb; op2val:0x7e0a10b2; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1080; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1080, x17, x15, 720, x18)

inst_91:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x58913a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e790586; op2val:0x7ed8913a; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1092; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1092, x17, x15, 728, x18)

inst_92:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fcd1f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x336f9b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f0fcd1f; op2val:0x7f336f9b; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1104; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1104, x17, x15, 736, x18)

inst_93:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x094f70 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ec4595d; op2val:0x7f094f70; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1116; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1116, x17, x15, 744, x18)

inst_94:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x195c05 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x5ed6a0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f195c05; op2val:0x7cded6a0; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1128; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1128, x17, x15, 752, x18)

inst_95:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x208c03 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x36dceb and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f208c03; op2val:0x7f36dceb; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1140; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1140, x17, x15, 760, x18)

inst_96:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a4a99 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x22097f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7dba4a99; op2val:0x7f22097f; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1152; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1152, x17, x15, 768, x18)

inst_97:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x099707 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x104e6f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e099707; op2val:0x7c904e6f; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1164; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1164, x17, x15, 776, x18)

inst_98:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d00c9 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x18862f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d8d00c9; op2val:0x7d98862f; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1176; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1176, x17, x15, 784, x18)

inst_99:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c71b6 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x14aa96 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ddc71b6; op2val:0x7f14aa96; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1188; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1188, x17, x15, 792, x18)

inst_100:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1e69a3 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x61b309 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d9e69a3; op2val:0x7ee1b309; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1200; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1200, x17, x15, 800, x18)

inst_101:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x002bfc and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0ce08c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f002bfc; op2val:0x7f0ce08c; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1212; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1212, x17, x15, 808, x18)

inst_102:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e51b6 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2a5eb4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7efe51b6; op2val:0x7f2a5eb4; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1224; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1224, x17, x15, 816, x18)

inst_103:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x323b21 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x3d26fe and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eb23b21; op2val:0x7dbd26fe; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1236; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1236, x17, x15, 824, x18)

inst_104:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6353 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x17db25 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f2c6353; op2val:0x7f17db25; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1248; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1248, x17, x15, 832, x18)

inst_105:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28e580 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x33ce10 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f28e580; op2val:0x7f33ce10; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1260; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1260, x17, x15, 840, x18)

inst_106:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5be595 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x23283d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d5be595; op2val:0x7ea3283d; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1272; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1272, x17, x15, 848, x18)

inst_107:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3c3955 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4dc2f4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e3c3955; op2val:0x7ecdc2f4; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1284; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1284, x17, x15, 856, x18)

inst_108:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x217a32 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x05458a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ea17a32; op2val:0x7f05458a; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1296; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1296, x17, x15, 864, x18)

inst_109:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3e85af and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e8f0263; op2val:0x7ebe85af; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1308; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1308, x17, x15, 872, x18)

inst_110:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19d2a8 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x6f342a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f19d2a8; op2val:0x7eef342a; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1320; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1320, x17, x15, 880, x18)

inst_111:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x681a5c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x16436d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ee81a5c; op2val:0x7f16436d; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1332; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1332, x17, x15, 888, x18)

inst_112:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7574e1 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x092190 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d7574e1; op2val:0x7e092190; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1344; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1344, x17, x15, 896, x18)

inst_113:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55526b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x097aef and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ed5526b; op2val:0x7f097aef; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1356; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1356, x17, x15, 904, x18)

inst_114:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 0 and fe2 == 0xfc and fm2 == 0x7c800c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e12c03f; op2val:0x7e7c800c; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1368; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1368, x17, x15, 912, x18)

inst_115:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x614269 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ef86a31; op2val:0x7ee14269; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1380; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1380, x17, x15, 920, x18)

inst_116:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x7198e7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e729bb9; op2val:0x7e7198e7; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1392; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1392, x17, x15, 928, x18)

inst_117:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x240ddf and fs2 == 0 and fe2 == 0xfb and fm2 == 0x044ae8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f240ddf; op2val:0x7d844ae8; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1404; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1404, x17, x15, 936, x18)

inst_118:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x522d12 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7dbf6d07; op2val:0x7d522d12; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1416; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1416, x17, x15, 944, x18)

inst_119:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x31cc28 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x2872e3 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ab1cc28; op2val:0x7d2872e3; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1428; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1428, x17, x15, 952, x18)

inst_120:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x226d04 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3597f6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ea26d04; op2val:0x7eb597f6; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1440; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1440, x17, x15, 960, x18)

inst_121:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x4e462d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e506ed3; op2val:0x7e4e462d; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1452; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1452, x17, x15, 968, x18)

inst_122:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x259c47 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ef16299; op2val:0x7f259c47; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1464; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1464, x17, x15, 976, x18)

inst_123:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1e1c9c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f1ac304; op2val:0x7f1e1c9c; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1476; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1476, x17, x15, 984, x18)

inst_124:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x038f64 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x180041 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e038f64; op2val:0x7f180041; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1488; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1488, x17, x15, 992, x18)

inst_125:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x178d60 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4d4cf5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e178d60; op2val:0x7ecd4cf5; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1500; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1500, x17, x15, 1000, x18)

inst_126:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1634d7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eb73e6b; op2val:0x7f1634d7; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1512; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1512, x17, x15, 1008, x18)

inst_127:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x41e692 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e831454; op2val:0x7e41e692; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1524; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1524, x17, x15, 1016, x18)

inst_128:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ee152 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x344bd0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e9ee152; op2val:0x7f344bd0; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1536; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1536, x17, x15, 1024, x18)

inst_129:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x665064 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7e8d56 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e665064; op2val:0x7efe8d56; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1548; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1548, x17, x15, 1032, x18)

inst_130:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x218502 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0f18e6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7c218502; op2val:0x7f0f18e6; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1560; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1560, x17, x15, 1040, x18)

inst_131:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2411 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2cbcd0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f2c2411; op2val:0x7f2cbcd0; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1572; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1572, x17, x15, 1048, x18)

inst_132:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x053104 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f2d7e33; op2val:0x7f053104; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1584; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1584, x17, x15, 1056, x18)

inst_133:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1b8e8c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e5c6cb0; op2val:0x7f1b8e8c; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1596; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1596, x17, x15, 1064, x18)

inst_134:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2eb1b3 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x511a8e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e2eb1b3; op2val:0x7d511a8e; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1608; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1608, x17, x15, 1072, x18)

inst_135:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474d3f and fs2 == 0 and fe2 == 0xfc and fm2 == 0x5dfbef and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ec74d3f; op2val:0x7e5dfbef; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1620; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1620, x17, x15, 1080, x18)

inst_136:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x20a569 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f0f23f2; op2val:0x7f20a569; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1632; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1632, x17, x15, 1088, x18)

inst_137:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x320e71 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f366e51; op2val:0x7f320e71; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1644; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1644, x17, x15, 1096, x18)

inst_138:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28f4b0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3d7cc7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f28f4b0; op2val:0x7f3d7cc7; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1656; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1656, x17, x15, 1104, x18)

inst_139:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6f9cda and fs2 == 0 and fe2 == 0xf6 and fm2 == 0x6522f2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7def9cda; op2val:0x7b6522f2; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1668; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1668, x17, x15, 1112, x18)

inst_140:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1d41a9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ea1312f; op2val:0x7e9d41a9; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1680; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1680, x17, x15, 1120, x18)

inst_141:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x050002 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e504312; op2val:0x7e850002; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1692; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1692, x17, x15, 1128, x18)

inst_142:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x60364e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7dc733d7; op2val:0x7e60364e; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1704; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1704, x17, x15, 1136, x18)

inst_143:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1acd2f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ef680ff; op2val:0x7f1acd2f; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1716; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1716, x17, x15, 1144, x18)

inst_144:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0cfe89 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x55f571 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e0cfe89; op2val:0x7e55f571; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1728; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1728, x17, x15, 1152, x18)

inst_145:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1ae6b6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e12898d; op2val:0x7f1ae6b6; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1740; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1740, x17, x15, 1160, x18)

inst_146:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cd245 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x39bb69 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e2cd245; op2val:0x7db9bb69; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1752; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1752, x17, x15, 1168, x18)

inst_147:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x79b070 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x29e684 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ef9b070; op2val:0x7f29e684; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1764; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1764, x17, x15, 1176, x18)

inst_148:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x244343 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x0202a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f244343; op2val:0x7e0202a2; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1776; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1776, x17, x15, 1184, x18)

inst_149:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x002951 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x200a1a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e802951; op2val:0x7f200a1a; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1788; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1788, x17, x15, 1192, x18)

inst_150:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0xfb and fm2 == 0x1c6dc8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f06075b; op2val:0x7d9c6dc8; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1800; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1800, x17, x15, 1200, x18)

inst_151:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x375161 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x0feb39 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e375161; op2val:0x7e0feb39; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1812; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1812, x17, x15, 1208, x18)

inst_152:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2ae8b7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e6e17c2; op2val:0x7e2ae8b7; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1824; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1824, x17, x15, 1216, x18)

inst_153:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x256764 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5a9856 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ca56764; op2val:0x7eda9856; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1836; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1836, x17, x15, 1224, x18)

inst_154:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66b5d2 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x10d45e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e66b5d2; op2val:0x7e90d45e; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1848; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1848, x17, x15, 1232, x18)

inst_155:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x0dc14f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e70218d; op2val:0x7e8dc14f; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1860; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1860, x17, x15, 1240, x18)

inst_156:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x639603 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x75c78c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ee39603; op2val:0x7e75c78c; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1872; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1872, x17, x15, 1248, x18)

inst_157:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x40dca5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f38f464; op2val:0x7e40dca5; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1884; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1884, x17, x15, 1256, x18)

inst_158:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x3a1788 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7c884a01; op2val:0x7d3a1788; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1896; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1896, x17, x15, 1264, x18)

inst_159:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x07bc04 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e8763b9; op2val:0x7f07bc04; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1908; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1908, x17, x15, 1272, x18)

inst_160:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70e623 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x330a47 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ef0e623; op2val:0x7eb30a47; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1920; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1920, x17, x15, 1280, x18)

inst_161:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c7765 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x72c1df and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eec7765; op2val:0x7ef2c1df; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1932; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1932, x17, x15, 1288, x18)

inst_162:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f70d6 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5eb4e5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e9f70d6; op2val:0x7edeb4e5; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1944; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1944, x17, x15, 1296, x18)

inst_163:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5298e8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ec81ce5; op2val:0x7ed298e8; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1956; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1956, x17, x15, 1304, x18)

inst_164:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36810f and fs2 == 0 and fe2 == 0xfc and fm2 == 0x673c15 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e36810f; op2val:0x7e673c15; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1968; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1968, x17, x15, 1312, x18)

inst_165:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2593da and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ec2b2c3; op2val:0x7ea593da; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1980; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1980, x17, x15, 1320, x18)

inst_166:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56c198 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x6e20e0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ed6c198; op2val:0x7eee20e0; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:1992; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 1992, x17, x15, 1328, x18)

inst_167:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x47b540 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7740d5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ec7b540; op2val:0x7ef740d5; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:2004; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 2004, x17, x15, 1336, x18)

inst_168:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0xfd and fm2 == 0x111231 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f2c289c; op2val:0x7e911231; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:2016; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 2016, x17, x15, 1344, x18)

inst_169:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x269d12 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x710596 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f269d12; op2val:0x7e710596; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:2028; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 2028, x17, x15, 1352, x18)
addi x16,x16,2040

inst_170:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a6b5b and fs2 == 0 and fe2 == 0xfb and fm2 == 0x6febf0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eea6b5b; op2val:0x7defebf0; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:0; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 0, x17, x15, 1360, x18)

inst_171:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x40c8f3 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x179770 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7cc0c8f3; op2val:0x7e179770; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:12; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 12, x17, x15, 1368, x18)

inst_172:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0xfa and fm2 == 0x6c7439 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e6dd39b; op2val:0x7d6c7439; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:24; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 24, x17, x15, 1376, x18)

inst_173:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c4834 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4214d7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f3c4834; op2val:0x7ec214d7; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:36; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 36, x17, x15, 1384, x18)

inst_174:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x7e2c3a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f09f0c8; op2val:0x7e7e2c3a; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:48; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 48, x17, x15, 1392, x18)

inst_175:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x07c07a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x6bfb00 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d07c07a; op2val:0x7eebfb00; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:60; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 60, x17, x15, 1400, x18)

inst_176:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61b55e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x139ba8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e61b55e; op2val:0x7f139ba8; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:72; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 72, x17, x15, 1408, x18)

inst_177:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19b6dc and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1d9e09 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f19b6dc; op2val:0x7e9d9e09; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:84; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 84, x17, x15, 1416, x18)

inst_178:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23f4fa and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3e0af1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f23f4fa; op2val:0x7f3e0af1; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:96; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 96, x17, x15, 1424, x18)

inst_179:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c3c85 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x5ad8ea and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7edc3c85; op2val:0x7e5ad8ea; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:108; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 108, x17, x15, 1432, x18)

inst_180:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090d88 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2224db and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f090d88; op2val:0x7e2224db; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:120; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 120, x17, x15, 1440, x18)

inst_181:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3935a3 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2db39d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f3935a3; op2val:0x7f2db39d; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:132; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 132, x17, x15, 1448, x18)

inst_182:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00e26f and fs2 == 0 and fe2 == 0xfb and fm2 == 0x7a8560 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f00e26f; op2val:0x7dfa8560; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:144; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 144, x17, x15, 1456, x18)

inst_183:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325b88 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x246dcc and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f325b88; op2val:0x7f246dcc; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:156; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 156, x17, x15, 1464, x18)

inst_184:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x605a49 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2d9b52 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ee05a49; op2val:0x7f2d9b52; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:168; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 168, x17, x15, 1472, x18)

inst_185:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x142c31 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x06bfe7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e942c31; op2val:0x7e86bfe7; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:180; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 180, x17, x15, 1480, x18)

inst_186:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70a207 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x673028 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ef0a207; op2val:0x7e673028; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:192; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 192, x17, x15, 1488, x18)

inst_187:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x26a55d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x395f47 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e26a55d; op2val:0x7f395f47; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:204; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 204, x17, x15, 1496, x18)

inst_188:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28be0d and fs2 == 0 and fe2 == 0xfb and fm2 == 0x15b097 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f28be0d; op2val:0x7d95b097; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:216; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 216, x17, x15, 1504, x18)

inst_189:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19c644 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2abc06 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f19c644; op2val:0x7eaabc06; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:228; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 228, x17, x15, 1512, x18)

inst_190:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x091ce4 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x30d9d7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f091ce4; op2val:0x7f30d9d7; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:240; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 240, x17, x15, 1520, x18)

inst_191:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x35891f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0a03a1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eb5891f; op2val:0x7f0a03a1; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:252; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 252, x17, x15, 1528, x18)

inst_192:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x675fa1 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x3e8943 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e675fa1; op2val:0x7cbe8943; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:264; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 264, x17, x15, 1536, x18)

inst_193:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x44b45e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x119488 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d44b45e; op2val:0x7f119488; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:276; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 276, x17, x15, 1544, x18)

inst_194:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48e6cd and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0e5202 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ec8e6cd; op2val:0x7f0e5202; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:288; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 288, x17, x15, 1552, x18)

inst_195:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6758c9 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x73c956 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7de758c9; op2val:0x7ef3c956; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:300; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 300, x17, x15, 1560, x18)

inst_196:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2099c0 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x36eb6c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f2099c0; op2val:0x7eb6eb6c; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:312; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 312, x17, x15, 1568, x18)

inst_197:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x33f756 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3f29ee and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e33f756; op2val:0x7f3f29ee; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:324; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 324, x17, x15, 1576, x18)

inst_198:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x21ceeb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x20cb47 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7c21ceeb; op2val:0x7f20cb47; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:336; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 336, x17, x15, 1584, x18)

inst_199:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x67e7c0 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7046ce and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ee7e7c0; op2val:0x7ef046ce; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:348; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 348, x17, x15, 1592, x18)

inst_200:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2bea1b and fs2 == 0 and fe2 == 0xf6 and fm2 == 0x04bcca and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e2bea1b; op2val:0x7b04bcca; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:360; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 360, x17, x15, 1600, x18)

inst_201:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4b435e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e8e7425; op2val:0x7ecb435e; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:372; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 372, x17, x15, 1608, x18)

inst_202:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0a2e4c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f2cafdc; op2val:0x7f0a2e4c; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:384; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 384, x17, x15, 1616, x18)

inst_203:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x115cea and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1a28e8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f115cea; op2val:0x7e9a28e8; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:396; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 396, x17, x15, 1624, x18)

inst_204:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x794f1c and fs2 == 0 and fe2 == 0xfc and fm2 == 0x69f89b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ef94f1c; op2val:0x7e69f89b; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:408; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 408, x17, x15, 1632, x18)

inst_205:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0642e8 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4e6013 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f0642e8; op2val:0x7ece6013; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:420; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 420, x17, x15, 1640, x18)

inst_206:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19d51f and fs2 == 0 and fe2 == 0xfb and fm2 == 0x7705e2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e19d51f; op2val:0x7df705e2; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:432; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 432, x17, x15, 1648, x18)

inst_207:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x279c91 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x032ddf and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmsub.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7da79c91; op2val:0x7d032ddf; op3val:0x7f7fffff; valaddr_reg:x16; val_offset:444; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmsub.s, f13, f10, f11, f12, 0x0, 0, x16, 444, x17, x15, 1656, x18)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
test_fp:
.word 0x7e36c1bf
.word 0x7ed0fbe8
.word 0x7f7fffff
.word 0x7e15fd73
.word 0x7e20bb94
.word 0x7f7fffff
.word 0x7f165edf
.word 0x7ddc6184
.word 0x7f7fffff
.word 0x7e2bea1b
.word 0x7e2bea1b
.word 0x7f7fffff
.word 0x7e8e7425
.word 0x7e8e7425
.word 0x7e8e7425
.word 0x7f2cafdc
.word 0x7f0a2e4c
.word 0x7f0a2e4c
.word 0x7f115cea
.word 0x7f115cea
.word 0x7f7fffff
.word 0x7ef94f1c
.word 0x7e69f89b
.word 0x7ef94f1c
.word 0x7f0642e8
.word 0x7ece6013
.word 0x7ece6013
.word 0x7e19d51f
.word 0x7e19d51f
.word 0x7e19d51f
.word 0x7da79c91
.word 0x7d032ddf
.word 0x7da79c91
.word 0x7ea7d146
.word 0x7f1150a9
.word 0x7f7fffff
.word 0x7f1ae1f2
.word 0x7f32e4e1
.word 0x7f7fffff
.word 0x7f09767a
.word 0x7f0e06b2
.word 0x7f7fffff
.word 0x7f24caba
.word 0x7ee6d514
.word 0x7f7fffff
.word 0x7f272357
.word 0x7f055fe9
.word 0x7f7fffff
.word 0x7eceee0f
.word 0x7f3286a3
.word 0x7f7fffff
.word 0x7e8a33b5
.word 0x7e334304
.word 0x7f7fffff
.word 0x7f1822d8
.word 0x7eef56b5
.word 0x7f7fffff
.word 0x7f3821d7
.word 0x7f2b460e
.word 0x7f7fffff
.word 0x7ef80c49
.word 0x7eaa94d2
.word 0x7f7fffff
.word 0x7ecb58ad
.word 0x7ce3b5e5
.word 0x7f7fffff
.word 0x7ec913df
.word 0x7eb0d847
.word 0x7f7fffff
.word 0x7f13ed79
.word 0x7efe2f1b
.word 0x7f7fffff
.word 0x7ee6ec7b
.word 0x7f0b8d5c
.word 0x7f7fffff
.word 0x7e65f120
.word 0x7f251f3f
.word 0x7f7fffff
.word 0x7ef35187
.word 0x7f3b945b
.word 0x7f7fffff
.word 0x7e9320d0
.word 0x7ed4336a
.word 0x7f7fffff
.word 0x7f1a34be
.word 0x7f2b1c44
.word 0x7f7fffff
.word 0x7e401d9b
.word 0x7f16144b
.word 0x7f7fffff
.word 0x7eca994e
.word 0x7eda40dd
.word 0x7f7fffff
.word 0x7de0facc
.word 0x7e98fe38
.word 0x7f7fffff
.word 0x7f1c9fa7
.word 0x7f0fc01f
.word 0x7f7fffff
.word 0x7e11483d
.word 0x7e9ffee2
.word 0x7f7fffff
.word 0x7f159092
.word 0x7f0ba3b9
.word 0x7f7fffff
.word 0x7e4fbc01
.word 0x7d990f76
.word 0x7f7fffff
.word 0x7e8781f6
.word 0x7f229a06
.word 0x7f7fffff
.word 0x7e9ae1d2
.word 0x7ecfef6d
.word 0x7f7fffff
.word 0x7f13a10a
.word 0x7e87fa5d
.word 0x7f7fffff
.word 0x7d015d4c
.word 0x7ec1cf2f
.word 0x7f7fffff
.word 0x7e4c2b76
.word 0x7e9337c1
.word 0x7f7fffff
.word 0x7ed0905a
.word 0x7f0e02b8
.word 0x7f7fffff
.word 0x7d52ba4d
.word 0x7f0970bd
.word 0x7f7fffff
.word 0x7eafc21e
.word 0x7e6ff4bc
.word 0x7f7fffff
.word 0x7ee56a07
.word 0x7ed5173a
.word 0x7f7fffff
.word 0x7dd92a8c
.word 0x7e7e9d6e
.word 0x7f7fffff
.word 0x7efba99e
.word 0x7dbd2101
.word 0x7f7fffff
.word 0x7ef24276
.word 0x7e098d5c
.word 0x7f7fffff
.word 0x7ed97e8a
.word 0x7e0bc2ae
.word 0x7f7fffff
.word 0x7e873a84
.word 0x7f09dfb8
.word 0x7f7fffff
.word 0x7ecde363
.word 0x7dae05d1
.word 0x7f7fffff
.word 0x7f10cdee
.word 0x7f38931c
.word 0x7f7fffff
.word 0x7efb2a84
.word 0x7f1ac336
.word 0x7f7fffff
.word 0x7f1167f4
.word 0x7e62f85a
.word 0x7f7fffff
.word 0x7f34ba29
.word 0x7e8fb3a8
.word 0x7f7fffff
.word 0x7f2a571c
.word 0x7f2e7b77
.word 0x7f7fffff
.word 0x7e530441
.word 0x7eff86ba
.word 0x7f7fffff
.word 0x7e961cff
.word 0x7ed1086c
.word 0x7f7fffff
.word 0x7e215a9a
.word 0x7ee0ae32
.word 0x7f7fffff
.word 0x7e80905e
.word 0x7ea7824d
.word 0x7f7fffff
.word 0x7eded5d0
.word 0x7f01b289
.word 0x7f7fffff
.word 0x7f201d48
.word 0x7e601303
.word 0x7f7fffff
.word 0x7f0bf641
.word 0x7d83fb3f
.word 0x7f7fffff
.word 0x7f261957
.word 0x7e70b43d
.word 0x7f7fffff
.word 0x7f24d9b0
.word 0x7f2cc100
.word 0x7f7fffff
.word 0x7e469f5a
.word 0x7e0fc236
.word 0x7f7fffff
.word 0x7f23f1fb
.word 0x7e39ed2e
.word 0x7f7fffff
.word 0x7f09cbd1
.word 0x7f01aad7
.word 0x7f7fffff
.word 0x7eb37ad1
.word 0x7e30557d
.word 0x7f7fffff
.word 0x7e99b362
.word 0x7f0cd956
.word 0x7f7fffff
.word 0x7eb8d1a5
.word 0x7f0a6049
.word 0x7f7fffff
.word 0x7f203ed5
.word 0x7f1dc006
.word 0x7f7fffff
.word 0x7eb82999
.word 0x7ee60428
.word 0x7f7fffff
.word 0x7f14a5b3
.word 0x7ddc95cc
.word 0x7f7fffff
.word 0x7e044948
.word 0x7e8a6bad
.word 0x7f7fffff
.word 0x7c8e1418
.word 0x7eb81fbe
.word 0x7f7fffff
.word 0x7ee08143
.word 0x7e4d3073
.word 0x7f7fffff
.word 0x7f076c8a
.word 0x7e9eab47
.word 0x7f7fffff
.word 0x7f04b289
.word 0x7f370ec5
.word 0x7f7fffff
.word 0x7ee0e085
.word 0x7e71cd8a
.word 0x7f7fffff
.word 0x7e0eeeea
.word 0x7e4d5498
.word 0x7f7fffff
.word 0x7ec6a01f
.word 0x7eaa21ee
.word 0x7f7fffff
.word 0x7d933df8
.word 0x7f0fa54d
.word 0x7f7fffff
.word 0x7ef6e4d9
.word 0x7f2c4d11
.word 0x7f7fffff
.word 0x7f01615c
.word 0x7ec69037
.word 0x7f7fffff
.word 0x7df6b68b
.word 0x7f04a412
.word 0x7f7fffff
.word 0x7f3ad3ab
.word 0x7e9e86f9
.word 0x7f7fffff
.word 0x7ea09877
.word 0x7d7fc6b5
.word 0x7f7fffff
.word 0x7e8d1be6
.word 0x7e984f43
.word 0x7f7fffff
.word 0x7eec8964
.word 0x7f10ae28
.word 0x7f7fffff
.word 0x7e39f3eb
.word 0x7e0a10b2
.word 0x7f7fffff
.word 0x7e790586
.word 0x7ed8913a
.word 0x7f7fffff
.word 0x7f0fcd1f
.word 0x7f336f9b
.word 0x7f7fffff
.word 0x7ec4595d
.word 0x7f094f70
.word 0x7f7fffff
.word 0x7f195c05
.word 0x7cded6a0
.word 0x7f7fffff
.word 0x7f208c03
.word 0x7f36dceb
.word 0x7f7fffff
.word 0x7dba4a99
.word 0x7f22097f
.word 0x7f7fffff
.word 0x7e099707
.word 0x7c904e6f
.word 0x7f7fffff
.word 0x7d8d00c9
.word 0x7d98862f
.word 0x7f7fffff
.word 0x7ddc71b6
.word 0x7f14aa96
.word 0x7f7fffff
.word 0x7d9e69a3
.word 0x7ee1b309
.word 0x7f7fffff
.word 0x7f002bfc
.word 0x7f0ce08c
.word 0x7f7fffff
.word 0x7efe51b6
.word 0x7f2a5eb4
.word 0x7f7fffff
.word 0x7eb23b21
.word 0x7dbd26fe
.word 0x7f7fffff
.word 0x7f2c6353
.word 0x7f17db25
.word 0x7f7fffff
.word 0x7f28e580
.word 0x7f33ce10
.word 0x7f7fffff
.word 0x7d5be595
.word 0x7ea3283d
.word 0x7f7fffff
.word 0x7e3c3955
.word 0x7ecdc2f4
.word 0x7f7fffff
.word 0x7ea17a32
.word 0x7f05458a
.word 0x7f7fffff
.word 0x7e8f0263
.word 0x7ebe85af
.word 0x7f7fffff
.word 0x7f19d2a8
.word 0x7eef342a
.word 0x7f7fffff
.word 0x7ee81a5c
.word 0x7f16436d
.word 0x7f7fffff
.word 0x7d7574e1
.word 0x7e092190
.word 0x7f7fffff
.word 0x7ed5526b
.word 0x7f097aef
.word 0x7f7fffff
.word 0x7e12c03f
.word 0x7e7c800c
.word 0x7f7fffff
.word 0x7ef86a31
.word 0x7ee14269
.word 0x7f7fffff
.word 0x7e729bb9
.word 0x7e7198e7
.word 0x7f7fffff
.word 0x7f240ddf
.word 0x7d844ae8
.word 0x7f7fffff
.word 0x7dbf6d07
.word 0x7d522d12
.word 0x7f7fffff
.word 0x7ab1cc28
.word 0x7d2872e3
.word 0x7f7fffff
.word 0x7ea26d04
.word 0x7eb597f6
.word 0x7f7fffff
.word 0x7e506ed3
.word 0x7e4e462d
.word 0x7f7fffff
.word 0x7ef16299
.word 0x7f259c47
.word 0x7f7fffff
.word 0x7f1ac304
.word 0x7f1e1c9c
.word 0x7f7fffff
.word 0x7e038f64
.word 0x7f180041
.word 0x7f7fffff
.word 0x7e178d60
.word 0x7ecd4cf5
.word 0x7f7fffff
.word 0x7eb73e6b
.word 0x7f1634d7
.word 0x7f7fffff
.word 0x7e831454
.word 0x7e41e692
.word 0x7f7fffff
.word 0x7e9ee152
.word 0x7f344bd0
.word 0x7f7fffff
.word 0x7e665064
.word 0x7efe8d56
.word 0x7f7fffff
.word 0x7c218502
.word 0x7f0f18e6
.word 0x7f7fffff
.word 0x7f2c2411
.word 0x7f2cbcd0
.word 0x7f7fffff
.word 0x7f2d7e33
.word 0x7f053104
.word 0x7f7fffff
.word 0x7e5c6cb0
.word 0x7f1b8e8c
.word 0x7f7fffff
.word 0x7e2eb1b3
.word 0x7d511a8e
.word 0x7f7fffff
.word 0x7ec74d3f
.word 0x7e5dfbef
.word 0x7f7fffff
.word 0x7f0f23f2
.word 0x7f20a569
.word 0x7f7fffff
.word 0x7f366e51
.word 0x7f320e71
.word 0x7f7fffff
.word 0x7f28f4b0
.word 0x7f3d7cc7
.word 0x7f7fffff
.word 0x7def9cda
.word 0x7b6522f2
.word 0x7f7fffff
.word 0x7ea1312f
.word 0x7e9d41a9
.word 0x7f7fffff
.word 0x7e504312
.word 0x7e850002
.word 0x7f7fffff
.word 0x7dc733d7
.word 0x7e60364e
.word 0x7f7fffff
.word 0x7ef680ff
.word 0x7f1acd2f
.word 0x7f7fffff
.word 0x7e0cfe89
.word 0x7e55f571
.word 0x7f7fffff
.word 0x7e12898d
.word 0x7f1ae6b6
.word 0x7f7fffff
.word 0x7e2cd245
.word 0x7db9bb69
.word 0x7f7fffff
.word 0x7ef9b070
.word 0x7f29e684
.word 0x7f7fffff
.word 0x7f244343
.word 0x7e0202a2
.word 0x7f7fffff
.word 0x7e802951
.word 0x7f200a1a
.word 0x7f7fffff
.word 0x7f06075b
.word 0x7d9c6dc8
.word 0x7f7fffff
.word 0x7e375161
.word 0x7e0feb39
.word 0x7f7fffff
.word 0x7e6e17c2
.word 0x7e2ae8b7
.word 0x7f7fffff
.word 0x7ca56764
.word 0x7eda9856
.word 0x7f7fffff
.word 0x7e66b5d2
.word 0x7e90d45e
.word 0x7f7fffff
.word 0x7e70218d
.word 0x7e8dc14f
.word 0x7f7fffff
.word 0x7ee39603
.word 0x7e75c78c
.word 0x7f7fffff
.word 0x7f38f464
.word 0x7e40dca5
.word 0x7f7fffff
.word 0x7c884a01
.word 0x7d3a1788
.word 0x7f7fffff
.word 0x7e8763b9
.word 0x7f07bc04
.word 0x7f7fffff
.word 0x7ef0e623
.word 0x7eb30a47
.word 0x7f7fffff
.word 0x7eec7765
.word 0x7ef2c1df
.word 0x7f7fffff
.word 0x7e9f70d6
.word 0x7edeb4e5
.word 0x7f7fffff
.word 0x7ec81ce5
.word 0x7ed298e8
.word 0x7f7fffff
.word 0x7e36810f
.word 0x7e673c15
.word 0x7f7fffff
.word 0x7ec2b2c3
.word 0x7ea593da
.word 0x7f7fffff
.word 0x7ed6c198
.word 0x7eee20e0
.word 0x7f7fffff
.word 0x7ec7b540
.word 0x7ef740d5
.word 0x7f7fffff
.word 0x7f2c289c
.word 0x7e911231
.word 0x7f7fffff
.word 0x7f269d12
.word 0x7e710596
.word 0x7f7fffff
.word 0x7eea6b5b
.word 0x7defebf0
.word 0x7f7fffff
.word 0x7cc0c8f3
.word 0x7e179770
.word 0x7f7fffff
.word 0x7e6dd39b
.word 0x7d6c7439
.word 0x7f7fffff
.word 0x7f3c4834
.word 0x7ec214d7
.word 0x7f7fffff
.word 0x7f09f0c8
.word 0x7e7e2c3a
.word 0x7f7fffff
.word 0x7d07c07a
.word 0x7eebfb00
.word 0x7f7fffff
.word 0x7e61b55e
.word 0x7f139ba8
.word 0x7f7fffff
.word 0x7f19b6dc
.word 0x7e9d9e09
.word 0x7f7fffff
.word 0x7f23f4fa
.word 0x7f3e0af1
.word 0x7f7fffff
.word 0x7edc3c85
.word 0x7e5ad8ea
.word 0x7f7fffff
.word 0x7f090d88
.word 0x7e2224db
.word 0x7f7fffff
.word 0x7f3935a3
.word 0x7f2db39d
.word 0x7f7fffff
.word 0x7f00e26f
.word 0x7dfa8560
.word 0x7f7fffff
.word 0x7f325b88
.word 0x7f246dcc
.word 0x7f7fffff
.word 0x7ee05a49
.word 0x7f2d9b52
.word 0x7f7fffff
.word 0x7e942c31
.word 0x7e86bfe7
.word 0x7f7fffff
.word 0x7ef0a207
.word 0x7e673028
.word 0x7f7fffff
.word 0x7e26a55d
.word 0x7f395f47
.word 0x7f7fffff
.word 0x7f28be0d
.word 0x7d95b097
.word 0x7f7fffff
.word 0x7f19c644
.word 0x7eaabc06
.word 0x7f7fffff
.word 0x7f091ce4
.word 0x7f30d9d7
.word 0x7f7fffff
.word 0x7eb5891f
.word 0x7f0a03a1
.word 0x7f7fffff
.word 0x7e675fa1
.word 0x7cbe8943
.word 0x7f7fffff
.word 0x7d44b45e
.word 0x7f119488
.word 0x7f7fffff
.word 0x7ec8e6cd
.word 0x7f0e5202
.word 0x7f7fffff
.word 0x7de758c9
.word 0x7ef3c956
.word 0x7f7fffff
.word 0x7f2099c0
.word 0x7eb6eb6c
.word 0x7f7fffff
.word 0x7e33f756
.word 0x7f3f29ee
.word 0x7f7fffff
.word 0x7c21ceeb
.word 0x7f20cb47
.word 0x7f7fffff
.word 0x7ee7e7c0
.word 0x7ef046ce
.word 0x7f7fffff
.word 0x7e2bea1b
.word 0x7b04bcca
.word 0x7f7fffff
.word 0x7e8e7425
.word 0x7ecb435e
.word 0x7f7fffff
.word 0x7f2cafdc
.word 0x7f0a2e4c
.word 0x7f7fffff
.word 0x7f115cea
.word 0x7e9a28e8
.word 0x7f7fffff
.word 0x7ef94f1c
.word 0x7e69f89b
.word 0x7f7fffff
.word 0x7f0642e8
.word 0x7ece6013
.word 0x7f7fffff
.word 0x7e19d51f
.word 0x7df705e2
.word 0x7f7fffff
.word 0x7da79c91
.word 0x7d032ddf
.word 0x7f7fffff
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 416*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
