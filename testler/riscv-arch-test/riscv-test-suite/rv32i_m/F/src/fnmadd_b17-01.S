
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.5.2
// timestamp : Tue Sep  7 16:08:04 2021 GMT
// usage     : riscv_ctg \
//                  -- cgf $cgf \
//                  -- xlen $xlen \
// -----------
//
// -----------
// Copyright (c) 2021. IIT Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V F extension for the fnmadd_b17 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b17)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1, rs1==f7, rs2==f6, rs3==f13, rd==f6, fs1 == 0 and fe1 == 0xfe and fm1 == 0x378efe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x35fb9d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f7; op2:f6; op3:f13; dest:f6; op1val:0x7f378efe; op2val:0x7f35fb9d; op3val:0xff7fffff; valaddr_reg:x16; val_offset:0; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f6, f7, f6, f13, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1:
// rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2, rs1==f14, rs2==f15, rs3==f2, rd==f14, fs1 == 0 and fe1 == 0xf9 and fm1 == 0x6a8329 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x16707e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f14; op2:f15; op3:f2; dest:f14; op1val:0x7cea8329; op2val:0x7e16707e; op3val:0xff7fffff; valaddr_reg:x16; val_offset:12; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f14, f14, f15, f2, 0x0, 0, x16, 12, x17, x15, 8, x18)

inst_2:
// rs1 == rs2 == rd != rs3, rs1==f12, rs2==f12, rs3==f27, rd==f12, fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e081d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x20694d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f12; op2:f12; op3:f27; dest:f12; op1val:0x7f1e081d; op2val:0x7f1e081d; op3val:0xff7fffff; valaddr_reg:x16; val_offset:24; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f12, f12, f12, f27, 0x0, 0, x16, 24, x17, x15, 16, x18)

inst_3:
// rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd, rs1==f28, rs2==f24, rs3==f16, rd==f17, fs1 == 0 and fe1 == 0xfd and fm1 == 0x367531 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x12d0cc and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f28; op2:f24; op3:f16; dest:f17; op1val:0x7eb67531; op2val:0x7d12d0cc; op3val:0xff7fffff; valaddr_reg:x16; val_offset:36; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f17, f28, f24, f16, 0x0, 0, x16, 36, x17, x15, 24, x18)

inst_4:
// rd == rs2 == rs3 != rs1, rs1==f0, rs2==f20, rs3==f20, rd==f20, fs1 == 0 and fe1 == 0xfd and fm1 == 0x702a82 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0e808c and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f0; op2:f20; op3:f20; dest:f20; op1val:0x7ef02a82; op2val:0x7f0e808c; op3val:0x7f0e808c; valaddr_reg:x16; val_offset:48; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f20, f0, f20, f20, 0x0, 0, x16, 48, x17, x15, 32, x18)

inst_5:
// rs1 == rs2 == rs3 != rd, rs1==f3, rs2==f3, rs3==f3, rd==f15, fs1 == 0 and fe1 == 0xfc and fm1 == 0x15418a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5ea2f9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f3; op2:f3; op3:f3; dest:f15; op1val:0x7e15418a; op2val:0x7e15418a; op3val:0x7e15418a; valaddr_reg:x16; val_offset:60; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f15, f3, f3, f3, 0x0, 0, x16, 60, x17, x15, 40, x18)

inst_6:
// rs1 == rs2 == rs3 == rd, rs1==f10, rs2==f10, rs3==f10, rd==f10, fs1 == 0 and fe1 == 0xf9 and fm1 == 0x3c1961 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x53dcbf and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f10; op3:f10; dest:f10; op1val:0x7cbc1961; op2val:0x7cbc1961; op3val:0x7cbc1961; valaddr_reg:x16; val_offset:72; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f10, f10, f10, f10, 0x0, 0, x16, 72, x17, x15, 48, x18)

inst_7:
// rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2, rs1==f17, rs2==f5, rs3==f17, rd==f16, fs1 == 0 and fe1 == 0xfe and fm1 == 0x06fe3b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0637ff and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f17; op2:f5; op3:f17; dest:f16; op1val:0x7f06fe3b; op2val:0x7f0637ff; op3val:0x7f06fe3b; valaddr_reg:x16; val_offset:84; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f16, f17, f5, f17, 0x0, 0, x16, 84, x17, x15, 56, x18)

inst_8:
// rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1, rs1==f20, rs2==f7, rs3==f7, rd==f19, fs1 == 0 and fe1 == 0xfe and fm1 == 0x12f2b3 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3d7b70 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f20; op2:f7; op3:f7; dest:f19; op1val:0x7f12f2b3; op2val:0x7f3d7b70; op3val:0x7f3d7b70; valaddr_reg:x16; val_offset:96; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f19, f20, f7, f7, 0x0, 0, x16, 96, x17, x15, 64, x18)

inst_9:
// rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1, rs1==f27, rs2==f21, rs3==f11, rd==f11, fs1 == 0 and fe1 == 0xfd and fm1 == 0x57fc56 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x358c26 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f27; op2:f21; op3:f11; dest:f11; op1val:0x7ed7fc56; op2val:0x7eb58c26; op3val:0xff7fffff; valaddr_reg:x16; val_offset:108; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f11, f27, f21, f11, 0x0, 0, x16, 108, x17, x15, 72, x18)

inst_10:
// rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3, rs1==f31, rs2==f31, rs3==f1, rd==f21, fs1 == 0 and fe1 == 0xfd and fm1 == 0x18e44f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x192a82 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f31; op2:f31; op3:f1; dest:f21; op1val:0x7e98e44f; op2val:0x7e98e44f; op3val:0xff7fffff; valaddr_reg:x16; val_offset:120; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f21, f31, f31, f1, 0x0, 0, x16, 120, x17, x15, 80, x18)

inst_11:
// rs1 == rd == rs3 != rs2, rs1==f4, rs2==f18, rs3==f4, rd==f4, fs1 == 0 and fe1 == 0xfc and fm1 == 0x6465ff and fs2 == 0 and fe2 == 0xfd and fm2 == 0x257396 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f4; op2:f18; op3:f4; dest:f4; op1val:0x7e6465ff; op2val:0x7ea57396; op3val:0x7e6465ff; valaddr_reg:x16; val_offset:132; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f4, f4, f18, f4, 0x0, 0, x16, 132, x17, x15, 88, x18)

inst_12:
// rs1==f15, rs2==f23, rs3==f18, rd==f5, fs1 == 0 and fe1 == 0xfd and fm1 == 0x70d18f and fs2 == 0 and fe2 == 0xfc and fm2 == 0x218584 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f15; op2:f23; op3:f18; dest:f5; op1val:0x7ef0d18f; op2val:0x7e218584; op3val:0xff7fffff; valaddr_reg:x16; val_offset:144; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f5, f15, f23, f18, 0x0, 0, x16, 144, x17, x15, 96, x18)

inst_13:
// rs1==f18, rs2==f9, rs3==f24, rd==f27, fs1 == 0 and fe1 == 0xfb and fm1 == 0x7a5ced and fs2 == 0 and fe2 == 0xfb and fm2 == 0x21f6d5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f18; op2:f9; op3:f24; dest:f27; op1val:0x7dfa5ced; op2val:0x7da1f6d5; op3val:0xff7fffff; valaddr_reg:x16; val_offset:156; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f27, f18, f9, f24, 0x0, 0, x16, 156, x17, x15, 104, x18)

inst_14:
// rs1==f11, rs2==f16, rs3==f31, rd==f23, fs1 == 0 and fe1 == 0xfe and fm1 == 0x09c6b9 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x42b8bf and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f11; op2:f16; op3:f31; dest:f23; op1val:0x7f09c6b9; op2val:0x7ec2b8bf; op3val:0xff7fffff; valaddr_reg:x16; val_offset:168; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f23, f11, f16, f31, 0x0, 0, x16, 168, x17, x15, 112, x18)

inst_15:
// rs1==f9, rs2==f29, rs3==f22, rd==f13, fs1 == 0 and fe1 == 0xfd and fm1 == 0x6f1cb5 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x24da2f and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f9; op2:f29; op3:f22; dest:f13; op1val:0x7eef1cb5; op2val:0x7f24da2f; op3val:0xff7fffff; valaddr_reg:x16; val_offset:180; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f9, f29, f22, 0x0, 0, x16, 180, x17, x15, 120, x18)

inst_16:
// rs1==f29, rs2==f25, rs3==f5, rd==f30, fs1 == 0 and fe1 == 0xfa and fm1 == 0x234c07 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x254961 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f29; op2:f25; op3:f5; dest:f30; op1val:0x7d234c07; op2val:0x7e254961; op3val:0xff7fffff; valaddr_reg:x16; val_offset:192; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f30, f29, f25, f5, 0x0, 0, x16, 192, x17, x15, 128, x18)

inst_17:
// rs1==f30, rs2==f0, rs3==f14, rd==f8, fs1 == 0 and fe1 == 0xfb and fm1 == 0x32f9b7 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x263fe8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f30; op2:f0; op3:f14; dest:f8; op1val:0x7db2f9b7; op2val:0x7da63fe8; op3val:0xff7fffff; valaddr_reg:x16; val_offset:204; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f8, f30, f0, f14, 0x0, 0, x16, 204, x17, x15, 136, x18)

inst_18:
// rs1==f21, rs2==f11, rs3==f15, rd==f0, fs1 == 0 and fe1 == 0xfb and fm1 == 0x56fcf2 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3cf7ae and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f21; op2:f11; op3:f15; dest:f0; op1val:0x7dd6fcf2; op2val:0x7ebcf7ae; op3val:0xff7fffff; valaddr_reg:x16; val_offset:216; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f0, f21, f11, f15, 0x0, 0, x16, 216, x17, x15, 144, x18)

inst_19:
// rs1==f6, rs2==f13, rs3==f25, rd==f28, fs1 == 0 and fe1 == 0xfd and fm1 == 0x48c9ad and fs2 == 0 and fe2 == 0xfe and fm2 == 0x02ea14 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f6; op2:f13; op3:f25; dest:f28; op1val:0x7ec8c9ad; op2val:0x7f02ea14; op3val:0xff7fffff; valaddr_reg:x16; val_offset:228; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f28, f6, f13, f25, 0x0, 0, x16, 228, x17, x15, 152, x18)

inst_20:
// rs1==f13, rs2==f1, rs3==f26, rd==f25, fs1 == 0 and fe1 == 0xfc and fm1 == 0x194c56 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x305db9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f13; op2:f1; op3:f26; dest:f25; op1val:0x7e194c56; op2val:0x7f305db9; op3val:0xff7fffff; valaddr_reg:x16; val_offset:240; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f25, f13, f1, f26, 0x0, 0, x16, 240, x17, x15, 160, x18)

inst_21:
// rs1==f24, rs2==f8, rs3==f30, rd==f7, fs1 == 0 and fe1 == 0xfb and fm1 == 0x54f0ed and fs2 == 0 and fe2 == 0xfd and fm2 == 0x40d43a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f24; op2:f8; op3:f30; dest:f7; op1val:0x7dd4f0ed; op2val:0x7ec0d43a; op3val:0xff7fffff; valaddr_reg:x16; val_offset:252; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f7, f24, f8, f30, 0x0, 0, x16, 252, x17, x15, 168, x18)

inst_22:
// rs1==f5, rs2==f22, rs3==f12, rd==f26, fs1 == 0 and fe1 == 0xfc and fm1 == 0x397e0b and fs2 == 0 and fe2 == 0xfd and fm2 == 0x38e1d6 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f5; op2:f22; op3:f12; dest:f26; op1val:0x7e397e0b; op2val:0x7eb8e1d6; op3val:0xff7fffff; valaddr_reg:x16; val_offset:264; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f26, f5, f22, f12, 0x0, 0, x16, 264, x17, x15, 176, x18)

inst_23:
// rs1==f16, rs2==f14, rs3==f21, rd==f24, fs1 == 0 and fe1 == 0xfd and fm1 == 0x795ad3 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x18e211 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f16; op2:f14; op3:f21; dest:f24; op1val:0x7ef95ad3; op2val:0x7d18e211; op3val:0xff7fffff; valaddr_reg:x16; val_offset:276; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f24, f16, f14, f21, 0x0, 0, x16, 276, x17, x15, 184, x18)

inst_24:
// rs1==f23, rs2==f27, rs3==f6, rd==f22, fs1 == 0 and fe1 == 0xfe and fm1 == 0x009841 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x0d3190 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f23; op2:f27; op3:f6; dest:f22; op1val:0x7f009841; op2val:0x7d8d3190; op3val:0xff7fffff; valaddr_reg:x16; val_offset:288; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f22, f23, f27, f6, 0x0, 0, x16, 288, x17, x15, 192, x18)

inst_25:
// rs1==f19, rs2==f2, rs3==f8, rd==f3, fs1 == 0 and fe1 == 0xfd and fm1 == 0x06a56e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x04f85c and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f19; op2:f2; op3:f8; dest:f3; op1val:0x7e86a56e; op2val:0x7e04f85c; op3val:0xff7fffff; valaddr_reg:x16; val_offset:300; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f3, f19, f2, f8, 0x0, 0, x16, 300, x17, x15, 200, x18)

inst_26:
// rs1==f25, rs2==f28, rs3==f19, rd==f31, fs1 == 0 and fe1 == 0xfe and fm1 == 0x1933be and fs2 == 0 and fe2 == 0xf7 and fm2 == 0x5962c2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f25; op2:f28; op3:f19; dest:f31; op1val:0x7f1933be; op2val:0x7bd962c2; op3val:0xff7fffff; valaddr_reg:x16; val_offset:312; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f31, f25, f28, f19, 0x0, 0, x16, 312, x17, x15, 208, x18)

inst_27:
// rs1==f2, rs2==f26, rs3==f28, rd==f9, fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fb283 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x6d93e5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f2; op2:f26; op3:f28; dest:f9; op1val:0x7f2fb283; op2val:0x7d6d93e5; op3val:0xff7fffff; valaddr_reg:x16; val_offset:324; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f9, f2, f26, f28, 0x0, 0, x16, 324, x17, x15, 216, x18)

inst_28:
// rs1==f8, rs2==f19, rs3==f29, rd==f2, fs1 == 0 and fe1 == 0xfb and fm1 == 0x44ee6c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x33fa51 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f8; op2:f19; op3:f29; dest:f2; op1val:0x7dc4ee6c; op2val:0x7f33fa51; op3val:0xff7fffff; valaddr_reg:x16; val_offset:336; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f2, f8, f19, f29, 0x0, 0, x16, 336, x17, x15, 224, x18)

inst_29:
// rs1==f22, rs2==f17, rs3==f23, rd==f18, fs1 == 0 and fe1 == 0xfa and fm1 == 0x0dcb9f and fs2 == 0 and fe2 == 0xfb and fm2 == 0x264755 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f22; op2:f17; op3:f23; dest:f18; op1val:0x7d0dcb9f; op2val:0x7da64755; op3val:0xff7fffff; valaddr_reg:x16; val_offset:348; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f18, f22, f17, f23, 0x0, 0, x16, 348, x17, x15, 232, x18)

inst_30:
// rs1==f26, rs2==f4, rs3==f0, rd==f29, fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e8ea8 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1e2094 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f26; op2:f4; op3:f0; dest:f29; op1val:0x7eae8ea8; op2val:0x7e9e2094; op3val:0xff7fffff; valaddr_reg:x16; val_offset:360; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f29, f26, f4, f0, 0x0, 0, x16, 360, x17, x15, 240, x18)

inst_31:
// rs1==f1, fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d1b74 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3ddfe3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f1; op2:f10; op3:f22; dest:f2; op1val:0x7f3d1b74; op2val:0x7f3ddfe3; op3val:0xff7fffff; valaddr_reg:x16; val_offset:372; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f2, f1, f10, f22, 0x0, 0, x16, 372, x17, x15, 248, x18)

inst_32:
// rs2==f30, fs1 == 0 and fe1 == 0xfd and fm1 == 0x65742e and fs2 == 0 and fe2 == 0xfd and fm2 == 0x61cace and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f18; op2:f30; op3:f13; dest:f19; op1val:0x7ee5742e; op2val:0x7ee1cace; op3val:0xff7fffff; valaddr_reg:x16; val_offset:384; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f19, f18, f30, f13, 0x0, 0, x16, 384, x17, x15, 256, x18)

inst_33:
// rs3==f9, fs1 == 0 and fe1 == 0xfd and fm1 == 0x6de1eb and fs2 == 0 and fe2 == 0xfc and fm2 == 0x73550a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f5; op2:f17; op3:f9; dest:f20; op1val:0x7eede1eb; op2val:0x7e73550a; op3val:0xff7fffff; valaddr_reg:x16; val_offset:396; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f20, f5, f17, f9, 0x0, 0, x16, 396, x17, x15, 264, x18)

inst_34:
// rd==f1, fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f7dce and fs2 == 0 and fe2 == 0xfd and fm2 == 0x16a4ee and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f14; op2:f5; op3:f0; dest:f1; op1val:0x7f3f7dce; op2val:0x7e96a4ee; op3val:0xff7fffff; valaddr_reg:x16; val_offset:408; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f1, f14, f5, f0, 0x0, 0, x16, 408, x17, x15, 272, x18)

inst_35:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x137d83 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x6a6268 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f137d83; op2val:0x7eea6268; op3val:0xff7fffff; valaddr_reg:x16; val_offset:420; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 420, x17, x15, 280, x18)

inst_36:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d404 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x224fd2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ec8d404; op2val:0x7f224fd2; op3val:0xff7fffff; valaddr_reg:x16; val_offset:432; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 432, x17, x15, 288, x18)

inst_37:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2508d5 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1587bf and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ea508d5; op2val:0x7f1587bf; op3val:0xff7fffff; valaddr_reg:x16; val_offset:444; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 444, x17, x15, 296, x18)

inst_38:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3d81ae and fs2 == 0 and fe2 == 0xfb and fm2 == 0x5d3fc5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d3d81ae; op2val:0x7ddd3fc5; op3val:0xff7fffff; valaddr_reg:x16; val_offset:456; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 456, x17, x15, 304, x18)

inst_39:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01332c and fs2 == 0 and fe2 == 0xfd and fm2 == 0x0f26a6 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e81332c; op2val:0x7e8f26a6; op3val:0xff7fffff; valaddr_reg:x16; val_offset:468; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 468, x17, x15, 312, x18)

inst_40:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d4c36 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x38634d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e3d4c36; op2val:0x7e38634d; op3val:0xff7fffff; valaddr_reg:x16; val_offset:480; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 480, x17, x15, 320, x18)

inst_41:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x216ec2 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x4022a5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ea16ec2; op2val:0x7e4022a5; op3val:0xff7fffff; valaddr_reg:x16; val_offset:492; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 492, x17, x15, 328, x18)

inst_42:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5a6b4b and fs2 == 0 and fe2 == 0xfc and fm2 == 0x1ceffb and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7dda6b4b; op2val:0x7e1ceffb; op3val:0xff7fffff; valaddr_reg:x16; val_offset:504; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 504, x17, x15, 336, x18)

inst_43:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72f50a and fs2 == 0 and fe2 == 0xfe and fm2 == 0x31d379 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e72f50a; op2val:0x7f31d379; op3val:0xff7fffff; valaddr_reg:x16; val_offset:516; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 516, x17, x15, 344, x18)

inst_44:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5a9d1e and fs2 == 0 and fe2 == 0xfd and fm2 == 0x74eae1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e5a9d1e; op2val:0x7ef4eae1; op3val:0xff7fffff; valaddr_reg:x16; val_offset:528; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 528, x17, x15, 352, x18)

inst_45:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35d6d3 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2009a6 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e35d6d3; op2val:0x7f2009a6; op3val:0xff7fffff; valaddr_reg:x16; val_offset:540; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 540, x17, x15, 360, x18)

inst_46:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12383d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x27969b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f12383d; op2val:0x7ea7969b; op3val:0xff7fffff; valaddr_reg:x16; val_offset:552; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 552, x17, x15, 368, x18)

inst_47:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09ec51 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x30300d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e89ec51; op2val:0x7f30300d; op3val:0xff7fffff; valaddr_reg:x16; val_offset:564; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 564, x17, x15, 376, x18)

inst_48:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x432858 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x2c36a0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7dc32858; op2val:0x7cac36a0; op3val:0xff7fffff; valaddr_reg:x16; val_offset:576; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 576, x17, x15, 384, x18)

inst_49:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9082 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x0f3193 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f2b9082; op2val:0x7e0f3193; op3val:0xff7fffff; valaddr_reg:x16; val_offset:588; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 588, x17, x15, 392, x18)

inst_50:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37e179 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x07eff5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f37e179; op2val:0x7e87eff5; op3val:0xff7fffff; valaddr_reg:x16; val_offset:600; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 600, x17, x15, 400, x18)

inst_51:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0d1841 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x17bf8e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e8d1841; op2val:0x7e97bf8e; op3val:0xff7fffff; valaddr_reg:x16; val_offset:612; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 612, x17, x15, 408, x18)

inst_52:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ff410 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x6f08e1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e5ff410; op2val:0x7eef08e1; op3val:0xff7fffff; valaddr_reg:x16; val_offset:624; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 624, x17, x15, 416, x18)

inst_53:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33a12d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x10adb7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f33a12d; op2val:0x7f10adb7; op3val:0xff7fffff; valaddr_reg:x16; val_offset:636; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 636, x17, x15, 424, x18)

inst_54:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e924d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x10317f and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f0e924d; op2val:0x7f10317f; op3val:0xff7fffff; valaddr_reg:x16; val_offset:648; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 648, x17, x15, 432, x18)

inst_55:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x410035 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x047a0e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ec10035; op2val:0x7f047a0e; op3val:0xff7fffff; valaddr_reg:x16; val_offset:660; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 660, x17, x15, 440, x18)

inst_56:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x036cdc and fs2 == 0 and fe2 == 0xfe and fm2 == 0x28b006 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e836cdc; op2val:0x7f28b006; op3val:0xff7fffff; valaddr_reg:x16; val_offset:672; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 672, x17, x15, 448, x18)

inst_57:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x730941 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x19b32b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ef30941; op2val:0x7e99b32b; op3val:0xff7fffff; valaddr_reg:x16; val_offset:684; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 684, x17, x15, 456, x18)

inst_58:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18a8a3 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x33137e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f18a8a3; op2val:0x7e33137e; op3val:0xff7fffff; valaddr_reg:x16; val_offset:696; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 696, x17, x15, 464, x18)

inst_59:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x024430 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x0f88e2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f024430; op2val:0x7e8f88e2; op3val:0xff7fffff; valaddr_reg:x16; val_offset:708; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 708, x17, x15, 472, x18)

inst_60:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x18ea60 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x36a99d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d98ea60; op2val:0x7e36a99d; op3val:0xff7fffff; valaddr_reg:x16; val_offset:720; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 720, x17, x15, 480, x18)

inst_61:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x759d39 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x327dc5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ef59d39; op2val:0x7f327dc5; op3val:0xff7fffff; valaddr_reg:x16; val_offset:732; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 732, x17, x15, 488, x18)

inst_62:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bc20f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x30f97b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f2bc20f; op2val:0x7f30f97b; op3val:0xff7fffff; valaddr_reg:x16; val_offset:744; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 744, x17, x15, 496, x18)

inst_63:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7fbd5a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x29bb3f and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7dffbd5a; op2val:0x7ea9bb3f; op3val:0xff7fffff; valaddr_reg:x16; val_offset:756; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 756, x17, x15, 504, x18)

inst_64:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x748650 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x6dba7a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e748650; op2val:0x7d6dba7a; op3val:0xff7fffff; valaddr_reg:x16; val_offset:768; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 768, x17, x15, 512, x18)

inst_65:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d2ca1 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x119e42 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f1d2ca1; op2val:0x7e919e42; op3val:0xff7fffff; valaddr_reg:x16; val_offset:780; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 780, x17, x15, 520, x18)

inst_66:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x551c11 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x37e38d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e551c11; op2val:0x7f37e38d; op3val:0xff7fffff; valaddr_reg:x16; val_offset:792; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 792, x17, x15, 528, x18)

inst_67:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32e0b8 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2fb1d5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e32e0b8; op2val:0x7eafb1d5; op3val:0xff7fffff; valaddr_reg:x16; val_offset:804; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 804, x17, x15, 536, x18)

inst_68:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1930a7 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x717980 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f1930a7; op2val:0x7ef17980; op3val:0xff7fffff; valaddr_reg:x16; val_offset:816; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 816, x17, x15, 544, x18)

inst_69:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16313a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4bb2ed and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e96313a; op2val:0x7ecbb2ed; op3val:0xff7fffff; valaddr_reg:x16; val_offset:828; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 828, x17, x15, 552, x18)

inst_70:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216a51 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x0ec4f4 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f216a51; op2val:0x7d8ec4f4; op3val:0xff7fffff; valaddr_reg:x16; val_offset:840; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 840, x17, x15, 560, x18)

inst_71:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18cd2c and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7ae8c2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f18cd2c; op2val:0x7efae8c2; op3val:0xff7fffff; valaddr_reg:x16; val_offset:852; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 852, x17, x15, 568, x18)

inst_72:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e4774 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x699a1d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f1e4774; op2val:0x7e699a1d; op3val:0xff7fffff; valaddr_reg:x16; val_offset:864; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 864, x17, x15, 576, x18)

inst_73:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4ecf80 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2f9f7c and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ececf80; op2val:0x7f2f9f7c; op3val:0xff7fffff; valaddr_reg:x16; val_offset:876; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 876, x17, x15, 584, x18)

inst_74:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6cdfe3 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x793db5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e6cdfe3; op2val:0x7ef93db5; op3val:0xff7fffff; valaddr_reg:x16; val_offset:888; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 888, x17, x15, 592, x18)

inst_75:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x12d07b and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2a090e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e92d07b; op2val:0x7eaa090e; op3val:0xff7fffff; valaddr_reg:x16; val_offset:900; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 900, x17, x15, 600, x18)

inst_76:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39a5be and fs2 == 0 and fe2 == 0xfd and fm2 == 0x0cb873 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f39a5be; op2val:0x7e8cb873; op3val:0xff7fffff; valaddr_reg:x16; val_offset:912; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 912, x17, x15, 608, x18)

inst_77:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x626bbf and fs2 == 0 and fe2 == 0xf7 and fm2 == 0x7f98a2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e626bbf; op2val:0x7bff98a2; op3val:0xff7fffff; valaddr_reg:x16; val_offset:924; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 924, x17, x15, 616, x18)

inst_78:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x79b52d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x128f0a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7df9b52d; op2val:0x7e928f0a; op3val:0xff7fffff; valaddr_reg:x16; val_offset:936; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 936, x17, x15, 624, x18)

inst_79:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x172f60 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x25e482 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f172f60; op2val:0x7f25e482; op3val:0xff7fffff; valaddr_reg:x16; val_offset:948; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 948, x17, x15, 632, x18)

inst_80:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1699a5 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1b5313 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f1699a5; op2val:0x7e9b5313; op3val:0xff7fffff; valaddr_reg:x16; val_offset:960; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 960, x17, x15, 640, x18)

inst_81:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10c2a0 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x0566bc and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f10c2a0; op2val:0x7e0566bc; op3val:0xff7fffff; valaddr_reg:x16; val_offset:972; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 972, x17, x15, 648, x18)

inst_82:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x411d26 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x292182 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ec11d26; op2val:0x7ca92182; op3val:0xff7fffff; valaddr_reg:x16; val_offset:984; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 984, x17, x15, 656, x18)

inst_83:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x018fe2 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x009916 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f018fe2; op2val:0x7e809916; op3val:0xff7fffff; valaddr_reg:x16; val_offset:996; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 996, x17, x15, 664, x18)

inst_84:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7cd38d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x10e584 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7efcd38d; op2val:0x7f10e584; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1008; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1008, x17, x15, 672, x18)

inst_85:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x1549ed and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3a6708 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7b1549ed; op2val:0x7eba6708; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1020; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1020, x17, x15, 680, x18)

inst_86:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1d7025 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x399f35 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e1d7025; op2val:0x7f399f35; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1032; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1032, x17, x15, 688, x18)

inst_87:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42d5b3 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x59615d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e42d5b3; op2val:0x7ed9615d; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1044; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1044, x17, x15, 696, x18)

inst_88:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x53c5ea and fs2 == 0 and fe2 == 0xfd and fm2 == 0x6b21de and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7dd3c5ea; op2val:0x7eeb21de; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1056; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1056, x17, x15, 704, x18)

inst_89:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x611c80 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x131155 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ee11c80; op2val:0x7e131155; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1068; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1068, x17, x15, 712, x18)

inst_90:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x13439e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x193ec6 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f13439e; op2val:0x7e193ec6; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1080; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1080, x17, x15, 720, x18)

inst_91:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29dbc6 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x1a4d72 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f29dbc6; op2val:0x7d9a4d72; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1092; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1092, x17, x15, 728, x18)

inst_92:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0e98 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x68dfdd and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f0c0e98; op2val:0x7ee8dfdd; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1104; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1104, x17, x15, 736, x18)

inst_93:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1caf77 and fs2 == 0 and fe2 == 0xf8 and fm2 == 0x529595 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f1caf77; op2val:0x7c529595; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1116; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1116, x17, x15, 744, x18)

inst_94:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x089f67 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x299412 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f089f67; op2val:0x7f299412; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1128; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1128, x17, x15, 752, x18)

inst_95:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x73c668 and fs2 == 0 and fe2 == 0xf8 and fm2 == 0x0e9cab and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ef3c668; op2val:0x7c0e9cab; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1140; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1140, x17, x15, 760, x18)

inst_96:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1aa55e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x000f00 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e9aa55e; op2val:0x7f000f00; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1152; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1152, x17, x15, 768, x18)

inst_97:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23991a and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2ccc93 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f23991a; op2val:0x7e2ccc93; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1164; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1164, x17, x15, 776, x18)

inst_98:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f285b and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7cdbb5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f0f285b; op2val:0x7efcdbb5; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1176; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1176, x17, x15, 784, x18)

inst_99:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x35708e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x38b31c and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eb5708e; op2val:0x7f38b31c; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1188; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1188, x17, x15, 792, x18)

inst_100:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x086888 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x33d732 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f086888; op2val:0x7f33d732; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1200; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1200, x17, x15, 800, x18)

inst_101:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43e7e5 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x394394 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ec3e7e5; op2val:0x7eb94394; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1212; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1212, x17, x15, 808, x18)

inst_102:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x648b04 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x294f17 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ee48b04; op2val:0x7f294f17; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1224; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1224, x17, x15, 816, x18)

inst_103:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5e5beb and fs2 == 0 and fe2 == 0xfd and fm2 == 0x296a13 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7dde5beb; op2val:0x7ea96a13; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1236; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1236, x17, x15, 824, x18)

inst_104:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f10c6 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x164cf5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f3f10c6; op2val:0x7f164cf5; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1248; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1248, x17, x15, 832, x18)

inst_105:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310056 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x070538 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eb10056; op2val:0x7f070538; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1260; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1260, x17, x15, 840, x18)

inst_106:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09599c and fs2 == 0 and fe2 == 0xfc and fm2 == 0x459379 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f09599c; op2val:0x7e459379; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1272; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1272, x17, x15, 848, x18)

inst_107:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x111bf6 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x13b178 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f111bf6; op2val:0x7d93b178; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1284; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1284, x17, x15, 856, x18)

inst_108:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c23d1 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4fb3f7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7dac23d1; op2val:0x7ecfb3f7; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1296; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1296, x17, x15, 864, x18)

inst_109:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c560 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x28844c and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f02c560; op2val:0x7ea8844c; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1308; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1308, x17, x15, 872, x18)

inst_110:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x639f2c and fs2 == 0 and fe2 == 0xfc and fm2 == 0x31f200 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e639f2c; op2val:0x7e31f200; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1320; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1320, x17, x15, 880, x18)

inst_111:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3dd17c and fs2 == 0 and fe2 == 0xfd and fm2 == 0x78dd0e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f3dd17c; op2val:0x7ef8dd0e; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1332; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1332, x17, x15, 888, x18)

inst_112:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4d54a3 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x04534d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d4d54a3; op2val:0x7d84534d; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1344; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1344, x17, x15, 896, x18)

inst_113:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f914f and fs2 == 0 and fe2 == 0xfb and fm2 == 0x61068d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f3f914f; op2val:0x7de1068d; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1356; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1356, x17, x15, 904, x18)

inst_114:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d071f and fs2 == 0 and fe2 == 0xfb and fm2 == 0x136004 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f1d071f; op2val:0x7d936004; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1368; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1368, x17, x15, 912, x18)

inst_115:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026519 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x305e0d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f026519; op2val:0x7f305e0d; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1380; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1380, x17, x15, 920, x18)

inst_116:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3bb1f5 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x473929 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ebbb1f5; op2val:0x7e473929; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1392; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1392, x17, x15, 928, x18)

inst_117:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x208358 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x63ea1b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f208358; op2val:0x7e63ea1b; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1404; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1404, x17, x15, 936, x18)

inst_118:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374d41 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1a6f68 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f374d41; op2val:0x7f1a6f68; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1416; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1416, x17, x15, 944, x18)

inst_119:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e8c3e and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4a19c2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e4e8c3e; op2val:0x7eca19c2; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1428; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1428, x17, x15, 952, x18)

inst_120:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x094fff and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2f806f and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e894fff; op2val:0x7eaf806f; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1440; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1440, x17, x15, 960, x18)

inst_121:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x153984 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0aea5e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f153984; op2val:0x7f0aea5e; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1452; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1452, x17, x15, 968, x18)

inst_122:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04fd41 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x17909f and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f04fd41; op2val:0x7c97909f; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1464; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1464, x17, x15, 976, x18)

inst_123:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2336ae and fs2 == 0 and fe2 == 0xfd and fm2 == 0x762408 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f2336ae; op2val:0x7ef62408; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1476; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1476, x17, x15, 984, x18)

inst_124:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3af9fa and fs2 == 0 and fe2 == 0xfb and fm2 == 0x3b09f3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7dbaf9fa; op2val:0x7dbb09f3; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1488; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1488, x17, x15, 992, x18)

inst_125:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31e0ce and fs2 == 0 and fe2 == 0xfe and fm2 == 0x10affc and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eb1e0ce; op2val:0x7f10affc; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1500; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1500, x17, x15, 1000, x18)

inst_126:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13bb57 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5b79eb and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e13bb57; op2val:0x7edb79eb; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1512; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1512, x17, x15, 1008, x18)

inst_127:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x339269 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x6b27f7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f339269; op2val:0x7d6b27f7; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1524; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1524, x17, x15, 1016, x18)

inst_128:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x62ae46 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x5a6352 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d62ae46; op2val:0x7e5a6352; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1536; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1536, x17, x15, 1024, x18)

inst_129:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a9244 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x1fef00 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eba9244; op2val:0x7e1fef00; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1548; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1548, x17, x15, 1032, x18)

inst_130:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x41315c and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2d58ba and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7c41315c; op2val:0x7ead58ba; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1560; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1560, x17, x15, 1040, x18)

inst_131:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6af2c7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2165be and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e6af2c7; op2val:0x7f2165be; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1572; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1572, x17, x15, 1048, x18)

inst_132:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x6a262c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x039463 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7c6a262c; op2val:0x7f039463; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1584; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1584, x17, x15, 1056, x18)

inst_133:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5e65e4 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3cd606 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e5e65e4; op2val:0x7f3cd606; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1596; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1596, x17, x15, 1064, x18)

inst_134:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x476063 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x30eb20 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ec76063; op2val:0x7f30eb20; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1608; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1608, x17, x15, 1072, x18)

inst_135:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x100e76 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1a1c1b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d900e76; op2val:0x7f1a1c1b; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1620; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1620, x17, x15, 1080, x18)

inst_136:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2084ae and fs2 == 0 and fe2 == 0xfd and fm2 == 0x499ff1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ea084ae; op2val:0x7ec99ff1; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1632; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1632, x17, x15, 1088, x18)

inst_137:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x446aa0 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5f221f and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ec46aa0; op2val:0x7edf221f; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1644; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1644, x17, x15, 1096, x18)

inst_138:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38eb1b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0bf46a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f38eb1b; op2val:0x7f0bf46a; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1656; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1656, x17, x15, 1104, x18)

inst_139:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x766f73 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x232951 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ef66f73; op2val:0x7e232951; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1668; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1668, x17, x15, 1112, x18)

inst_140:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x47f677 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3254ae and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ec7f677; op2val:0x7eb254ae; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1680; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1680, x17, x15, 1120, x18)

inst_141:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0b977b and fs2 == 0 and fe2 == 0xfc and fm2 == 0x31cfbf and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e0b977b; op2val:0x7e31cfbf; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1692; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1692, x17, x15, 1128, x18)

inst_142:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0af6b9 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x38fc15 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f0af6b9; op2val:0x7e38fc15; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1704; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1704, x17, x15, 1136, x18)

inst_143:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x5a1bbe and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1cf370 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7cda1bbe; op2val:0x7e9cf370; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1716; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1716, x17, x15, 1144, x18)

inst_144:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x227041 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4a0e92 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ea27041; op2val:0x7eca0e92; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1728; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1728, x17, x15, 1152, x18)

inst_145:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19a3cb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x083942 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f19a3cb; op2val:0x7f083942; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1740; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1740, x17, x15, 1160, x18)

inst_146:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x409980 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x6308fe and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e409980; op2val:0x7ee308fe; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1752; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1752, x17, x15, 1168, x18)

inst_147:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ef2e6 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x328a37 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f3ef2e6; op2val:0x7e328a37; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1764; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1764, x17, x15, 1176, x18)

inst_148:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x432be8 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3cd352 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ec32be8; op2val:0x7f3cd352; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1776; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1776, x17, x15, 1184, x18)

inst_149:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x778ca8 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x134261 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7df78ca8; op2val:0x7d934261; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1788; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1788, x17, x15, 1192, x18)

inst_150:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x57ea20 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x2e6e63 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7dd7ea20; op2val:0x7d2e6e63; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1800; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1800, x17, x15, 1200, x18)

inst_151:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x212fa5 and fs2 == 0 and fe2 == 0xf8 and fm2 == 0x5d9799 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ea12fa5; op2val:0x7c5d9799; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1812; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1812, x17, x15, 1208, x18)

inst_152:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3844b4 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x46fc6d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f3844b4; op2val:0x7e46fc6d; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1824; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1824, x17, x15, 1216, x18)

inst_153:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x16e4ce and fs2 == 0 and fe2 == 0xfd and fm2 == 0x45af29 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e96e4ce; op2val:0x7ec5af29; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1836; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1836, x17, x15, 1224, x18)

inst_154:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27f459 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x43e560 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f27f459; op2val:0x7dc3e560; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1848; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1848, x17, x15, 1232, x18)

inst_155:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72ec45 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x1cbf56 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e72ec45; op2val:0x7d9cbf56; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1860; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1860, x17, x15, 1240, x18)

inst_156:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x358c1d and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2d3485 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eb58c1d; op2val:0x7e2d3485; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1872; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1872, x17, x15, 1248, x18)

inst_157:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11164e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2596ee and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f11164e; op2val:0x7f2596ee; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1884; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1884, x17, x15, 1256, x18)

inst_158:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1310f3 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0e11db and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f1310f3; op2val:0x7f0e11db; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1896; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1896, x17, x15, 1264, x18)

inst_159:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x017d76 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x3d4d49 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e817d76; op2val:0x7cbd4d49; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1908; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1908, x17, x15, 1272, x18)

inst_160:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c407f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0e8d5f and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eec407f; op2val:0x7f0e8d5f; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1920; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1920, x17, x15, 1280, x18)

inst_161:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6894ce and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x5ed631 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7de894ce; op2val:0x7cded631; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1932; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1932, x17, x15, 1288, x18)

inst_162:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x140eaa and fs2 == 0 and fe2 == 0xfa and fm2 == 0x04972f and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e940eaa; op2val:0x7d04972f; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1944; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1944, x17, x15, 1296, x18)

inst_163:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x71556c and fs2 == 0 and fe2 == 0xfc and fm2 == 0x0d1c84 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7df1556c; op2val:0x7e0d1c84; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1956; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1956, x17, x15, 1304, x18)

inst_164:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x01ea00 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x445eb5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7c81ea00; op2val:0x7e445eb5; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1968; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1968, x17, x15, 1312, x18)

inst_165:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3746a3 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x1bb7c9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f3746a3; op2val:0x7c9bb7c9; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1980; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1980, x17, x15, 1320, x18)

inst_166:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04012d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x012bc4 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e04012d; op2val:0x7f012bc4; op3val:0xff7fffff; valaddr_reg:x16; val_offset:1992; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 1992, x17, x15, 1328, x18)

inst_167:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09a812 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x43d400 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f09a812; op2val:0x7cc3d400; op3val:0xff7fffff; valaddr_reg:x16; val_offset:2004; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 2004, x17, x15, 1336, x18)

inst_168:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x21a5d7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x29125a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e21a5d7; op2val:0x7f29125a; op3val:0xff7fffff; valaddr_reg:x16; val_offset:2016; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 2016, x17, x15, 1344, x18)

inst_169:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x489656 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x23f501 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ec89656; op2val:0x7f23f501; op3val:0xff7fffff; valaddr_reg:x16; val_offset:2028; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 2028, x17, x15, 1352, x18)
addi x16,x16,2040

inst_170:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2e0a9e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x281823 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e2e0a9e; op2val:0x7f281823; op3val:0xff7fffff; valaddr_reg:x16; val_offset:0; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 0, x17, x15, 1360, x18)

inst_171:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3481df and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7ab7a7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d3481df; op2val:0x7efab7a7; op3val:0xff7fffff; valaddr_reg:x16; val_offset:12; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 12, x17, x15, 1368, x18)

inst_172:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e44fd and fs2 == 0 and fe2 == 0xfc and fm2 == 0x12ff4e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f2e44fd; op2val:0x7e12ff4e; op3val:0xff7fffff; valaddr_reg:x16; val_offset:24; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 24, x17, x15, 1376, x18)

inst_173:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x678d99 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1d844c and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d678d99; op2val:0x7f1d844c; op3val:0xff7fffff; valaddr_reg:x16; val_offset:36; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 36, x17, x15, 1384, x18)

inst_174:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4490fe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x335b8d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ec490fe; op2val:0x7f335b8d; op3val:0xff7fffff; valaddr_reg:x16; val_offset:48; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 48, x17, x15, 1392, x18)

inst_175:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61c550 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x6f7f16 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ee1c550; op2val:0x7e6f7f16; op3val:0xff7fffff; valaddr_reg:x16; val_offset:60; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 60, x17, x15, 1400, x18)

inst_176:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x41a1ac and fs2 == 0 and fe2 == 0xfd and fm2 == 0x46d0ac and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ec1a1ac; op2val:0x7ec6d0ac; op3val:0xff7fffff; valaddr_reg:x16; val_offset:72; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 72, x17, x15, 1408, x18)

inst_177:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dbe95 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x37d03d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e6dbe95; op2val:0x7f37d03d; op3val:0xff7fffff; valaddr_reg:x16; val_offset:84; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 84, x17, x15, 1416, x18)

inst_178:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e5316 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x4dedfa and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f2e5316; op2val:0x7e4dedfa; op3val:0xff7fffff; valaddr_reg:x16; val_offset:96; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 96, x17, x15, 1424, x18)

inst_179:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79582c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x065158 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e79582c; op2val:0x7f065158; op3val:0xff7fffff; valaddr_reg:x16; val_offset:108; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 108, x17, x15, 1432, x18)

inst_180:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0af6e3 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3adb90 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f0af6e3; op2val:0x7ebadb90; op3val:0xff7fffff; valaddr_reg:x16; val_offset:120; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 120, x17, x15, 1440, x18)

inst_181:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x310756 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x59ffad and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eb10756; op2val:0x7ed9ffad; op3val:0xff7fffff; valaddr_reg:x16; val_offset:132; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 132, x17, x15, 1448, x18)

inst_182:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07e829 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2981e2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e87e829; op2val:0x7f2981e2; op3val:0xff7fffff; valaddr_reg:x16; val_offset:144; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 144, x17, x15, 1456, x18)

inst_183:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319158 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4052ad and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f319158; op2val:0x7ec052ad; op3val:0xff7fffff; valaddr_reg:x16; val_offset:156; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 156, x17, x15, 1464, x18)

inst_184:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x312e1f and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4ba816 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eb12e1f; op2val:0x7ecba816; op3val:0xff7fffff; valaddr_reg:x16; val_offset:168; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 168, x17, x15, 1472, x18)

inst_185:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x779461 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x10c4ce and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7df79461; op2val:0x7f10c4ce; op3val:0xff7fffff; valaddr_reg:x16; val_offset:180; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 180, x17, x15, 1480, x18)

inst_186:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07daac and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3c58f5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e87daac; op2val:0x7f3c58f5; op3val:0xff7fffff; valaddr_reg:x16; val_offset:192; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 192, x17, x15, 1488, x18)

inst_187:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e10e3 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x127958 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f2e10e3; op2val:0x7f127958; op3val:0xff7fffff; valaddr_reg:x16; val_offset:204; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 204, x17, x15, 1496, x18)

inst_188:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b90d3 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x18fa57 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f2b90d3; op2val:0x7f18fa57; op3val:0xff7fffff; valaddr_reg:x16; val_offset:216; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 216, x17, x15, 1504, x18)

inst_189:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fbf4a and fs2 == 0 and fe2 == 0xfe and fm2 == 0x018006 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f3fbf4a; op2val:0x7f018006; op3val:0xff7fffff; valaddr_reg:x16; val_offset:228; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 228, x17, x15, 1512, x18)

inst_190:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79b5b2 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x51f799 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e79b5b2; op2val:0x7dd1f799; op3val:0xff7fffff; valaddr_reg:x16; val_offset:240; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 240, x17, x15, 1520, x18)

inst_191:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x573c68 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x3557bf and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ed73c68; op2val:0x7e3557bf; op3val:0xff7fffff; valaddr_reg:x16; val_offset:252; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 252, x17, x15, 1528, x18)

inst_192:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11ecfc and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2b393b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e91ecfc; op2val:0x7f2b393b; op3val:0xff7fffff; valaddr_reg:x16; val_offset:264; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 264, x17, x15, 1536, x18)

inst_193:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x289f06 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3284ec and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ca89f06; op2val:0x7eb284ec; op3val:0xff7fffff; valaddr_reg:x16; val_offset:276; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 276, x17, x15, 1544, x18)

inst_194:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad2f1 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x4e0246 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7eaad2f1; op2val:0x7e4e0246; op3val:0xff7fffff; valaddr_reg:x16; val_offset:288; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 288, x17, x15, 1552, x18)

inst_195:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f015e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3648af and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f3f015e; op2val:0x7f3648af; op3val:0xff7fffff; valaddr_reg:x16; val_offset:300; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 300, x17, x15, 1560, x18)

inst_196:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25608b and fs2 == 0 and fe2 == 0xfd and fm2 == 0x171dc0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ea5608b; op2val:0x7e971dc0; op3val:0xff7fffff; valaddr_reg:x16; val_offset:312; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 312, x17, x15, 1568, x18)

inst_197:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x690309 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5f2ead and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ee90309; op2val:0x7edf2ead; op3val:0xff7fffff; valaddr_reg:x16; val_offset:324; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 324, x17, x15, 1576, x18)

inst_198:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x009696 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x6ca617 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f009696; op2val:0x7e6ca617; op3val:0xff7fffff; valaddr_reg:x16; val_offset:336; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 336, x17, x15, 1584, x18)

inst_199:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x025d06 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x206a70 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7d825d06; op2val:0x7f206a70; op3val:0xff7fffff; valaddr_reg:x16; val_offset:348; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 348, x17, x15, 1592, x18)

inst_200:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e081d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x20694d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f1e081d; op2val:0x7f20694d; op3val:0xff7fffff; valaddr_reg:x16; val_offset:360; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 360, x17, x15, 1600, x18)

inst_201:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x702a82 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0e808c and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7ef02a82; op2val:0x7f0e808c; op3val:0xff7fffff; valaddr_reg:x16; val_offset:372; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 372, x17, x15, 1608, x18)

inst_202:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x15418a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5ea2f9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e15418a; op2val:0x7edea2f9; op3val:0xff7fffff; valaddr_reg:x16; val_offset:384; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 384, x17, x15, 1616, x18)

inst_203:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x3c1961 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x53dcbf and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7cbc1961; op2val:0x7ed3dcbf; op3val:0xff7fffff; valaddr_reg:x16; val_offset:396; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 396, x17, x15, 1624, x18)

inst_204:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06fe3b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0637ff and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f06fe3b; op2val:0x7f0637ff; op3val:0xff7fffff; valaddr_reg:x16; val_offset:408; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 408, x17, x15, 1632, x18)

inst_205:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12f2b3 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3d7b70 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f12f2b3; op2val:0x7f3d7b70; op3val:0xff7fffff; valaddr_reg:x16; val_offset:420; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 420, x17, x15, 1640, x18)

inst_206:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x18e44f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x192a82 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e98e44f; op2val:0x7f192a82; op3val:0xff7fffff; valaddr_reg:x16; val_offset:432; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 432, x17, x15, 1648, x18)

inst_207:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6465ff and fs2 == 0 and fe2 == 0xfd and fm2 == 0x257396 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and rm_val == 0  
// opcode: fnmadd.s ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7e6465ff; op2val:0x7ea57396; op3val:0xff7fffff; valaddr_reg:x16; val_offset:444; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.s, f13, f10, f11, f12, 0x0, 0, x16, 444, x17, x15, 1656, x18)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
test_fp:
.word 0x7f378efe
.word 0x7f35fb9d
.word 0xff7fffff
.word 0x7cea8329
.word 0x7e16707e
.word 0xff7fffff
.word 0x7f1e081d
.word 0x7f1e081d
.word 0xff7fffff
.word 0x7eb67531
.word 0x7d12d0cc
.word 0xff7fffff
.word 0x7ef02a82
.word 0x7f0e808c
.word 0x7f0e808c
.word 0x7e15418a
.word 0x7e15418a
.word 0x7e15418a
.word 0x7cbc1961
.word 0x7cbc1961
.word 0x7cbc1961
.word 0x7f06fe3b
.word 0x7f0637ff
.word 0x7f06fe3b
.word 0x7f12f2b3
.word 0x7f3d7b70
.word 0x7f3d7b70
.word 0x7ed7fc56
.word 0x7eb58c26
.word 0xff7fffff
.word 0x7e98e44f
.word 0x7e98e44f
.word 0xff7fffff
.word 0x7e6465ff
.word 0x7ea57396
.word 0x7e6465ff
.word 0x7ef0d18f
.word 0x7e218584
.word 0xff7fffff
.word 0x7dfa5ced
.word 0x7da1f6d5
.word 0xff7fffff
.word 0x7f09c6b9
.word 0x7ec2b8bf
.word 0xff7fffff
.word 0x7eef1cb5
.word 0x7f24da2f
.word 0xff7fffff
.word 0x7d234c07
.word 0x7e254961
.word 0xff7fffff
.word 0x7db2f9b7
.word 0x7da63fe8
.word 0xff7fffff
.word 0x7dd6fcf2
.word 0x7ebcf7ae
.word 0xff7fffff
.word 0x7ec8c9ad
.word 0x7f02ea14
.word 0xff7fffff
.word 0x7e194c56
.word 0x7f305db9
.word 0xff7fffff
.word 0x7dd4f0ed
.word 0x7ec0d43a
.word 0xff7fffff
.word 0x7e397e0b
.word 0x7eb8e1d6
.word 0xff7fffff
.word 0x7ef95ad3
.word 0x7d18e211
.word 0xff7fffff
.word 0x7f009841
.word 0x7d8d3190
.word 0xff7fffff
.word 0x7e86a56e
.word 0x7e04f85c
.word 0xff7fffff
.word 0x7f1933be
.word 0x7bd962c2
.word 0xff7fffff
.word 0x7f2fb283
.word 0x7d6d93e5
.word 0xff7fffff
.word 0x7dc4ee6c
.word 0x7f33fa51
.word 0xff7fffff
.word 0x7d0dcb9f
.word 0x7da64755
.word 0xff7fffff
.word 0x7eae8ea8
.word 0x7e9e2094
.word 0xff7fffff
.word 0x7f3d1b74
.word 0x7f3ddfe3
.word 0xff7fffff
.word 0x7ee5742e
.word 0x7ee1cace
.word 0xff7fffff
.word 0x7eede1eb
.word 0x7e73550a
.word 0xff7fffff
.word 0x7f3f7dce
.word 0x7e96a4ee
.word 0xff7fffff
.word 0x7f137d83
.word 0x7eea6268
.word 0xff7fffff
.word 0x7ec8d404
.word 0x7f224fd2
.word 0xff7fffff
.word 0x7ea508d5
.word 0x7f1587bf
.word 0xff7fffff
.word 0x7d3d81ae
.word 0x7ddd3fc5
.word 0xff7fffff
.word 0x7e81332c
.word 0x7e8f26a6
.word 0xff7fffff
.word 0x7e3d4c36
.word 0x7e38634d
.word 0xff7fffff
.word 0x7ea16ec2
.word 0x7e4022a5
.word 0xff7fffff
.word 0x7dda6b4b
.word 0x7e1ceffb
.word 0xff7fffff
.word 0x7e72f50a
.word 0x7f31d379
.word 0xff7fffff
.word 0x7e5a9d1e
.word 0x7ef4eae1
.word 0xff7fffff
.word 0x7e35d6d3
.word 0x7f2009a6
.word 0xff7fffff
.word 0x7f12383d
.word 0x7ea7969b
.word 0xff7fffff
.word 0x7e89ec51
.word 0x7f30300d
.word 0xff7fffff
.word 0x7dc32858
.word 0x7cac36a0
.word 0xff7fffff
.word 0x7f2b9082
.word 0x7e0f3193
.word 0xff7fffff
.word 0x7f37e179
.word 0x7e87eff5
.word 0xff7fffff
.word 0x7e8d1841
.word 0x7e97bf8e
.word 0xff7fffff
.word 0x7e5ff410
.word 0x7eef08e1
.word 0xff7fffff
.word 0x7f33a12d
.word 0x7f10adb7
.word 0xff7fffff
.word 0x7f0e924d
.word 0x7f10317f
.word 0xff7fffff
.word 0x7ec10035
.word 0x7f047a0e
.word 0xff7fffff
.word 0x7e836cdc
.word 0x7f28b006
.word 0xff7fffff
.word 0x7ef30941
.word 0x7e99b32b
.word 0xff7fffff
.word 0x7f18a8a3
.word 0x7e33137e
.word 0xff7fffff
.word 0x7f024430
.word 0x7e8f88e2
.word 0xff7fffff
.word 0x7d98ea60
.word 0x7e36a99d
.word 0xff7fffff
.word 0x7ef59d39
.word 0x7f327dc5
.word 0xff7fffff
.word 0x7f2bc20f
.word 0x7f30f97b
.word 0xff7fffff
.word 0x7dffbd5a
.word 0x7ea9bb3f
.word 0xff7fffff
.word 0x7e748650
.word 0x7d6dba7a
.word 0xff7fffff
.word 0x7f1d2ca1
.word 0x7e919e42
.word 0xff7fffff
.word 0x7e551c11
.word 0x7f37e38d
.word 0xff7fffff
.word 0x7e32e0b8
.word 0x7eafb1d5
.word 0xff7fffff
.word 0x7f1930a7
.word 0x7ef17980
.word 0xff7fffff
.word 0x7e96313a
.word 0x7ecbb2ed
.word 0xff7fffff
.word 0x7f216a51
.word 0x7d8ec4f4
.word 0xff7fffff
.word 0x7f18cd2c
.word 0x7efae8c2
.word 0xff7fffff
.word 0x7f1e4774
.word 0x7e699a1d
.word 0xff7fffff
.word 0x7ececf80
.word 0x7f2f9f7c
.word 0xff7fffff
.word 0x7e6cdfe3
.word 0x7ef93db5
.word 0xff7fffff
.word 0x7e92d07b
.word 0x7eaa090e
.word 0xff7fffff
.word 0x7f39a5be
.word 0x7e8cb873
.word 0xff7fffff
.word 0x7e626bbf
.word 0x7bff98a2
.word 0xff7fffff
.word 0x7df9b52d
.word 0x7e928f0a
.word 0xff7fffff
.word 0x7f172f60
.word 0x7f25e482
.word 0xff7fffff
.word 0x7f1699a5
.word 0x7e9b5313
.word 0xff7fffff
.word 0x7f10c2a0
.word 0x7e0566bc
.word 0xff7fffff
.word 0x7ec11d26
.word 0x7ca92182
.word 0xff7fffff
.word 0x7f018fe2
.word 0x7e809916
.word 0xff7fffff
.word 0x7efcd38d
.word 0x7f10e584
.word 0xff7fffff
.word 0x7b1549ed
.word 0x7eba6708
.word 0xff7fffff
.word 0x7e1d7025
.word 0x7f399f35
.word 0xff7fffff
.word 0x7e42d5b3
.word 0x7ed9615d
.word 0xff7fffff
.word 0x7dd3c5ea
.word 0x7eeb21de
.word 0xff7fffff
.word 0x7ee11c80
.word 0x7e131155
.word 0xff7fffff
.word 0x7f13439e
.word 0x7e193ec6
.word 0xff7fffff
.word 0x7f29dbc6
.word 0x7d9a4d72
.word 0xff7fffff
.word 0x7f0c0e98
.word 0x7ee8dfdd
.word 0xff7fffff
.word 0x7f1caf77
.word 0x7c529595
.word 0xff7fffff
.word 0x7f089f67
.word 0x7f299412
.word 0xff7fffff
.word 0x7ef3c668
.word 0x7c0e9cab
.word 0xff7fffff
.word 0x7e9aa55e
.word 0x7f000f00
.word 0xff7fffff
.word 0x7f23991a
.word 0x7e2ccc93
.word 0xff7fffff
.word 0x7f0f285b
.word 0x7efcdbb5
.word 0xff7fffff
.word 0x7eb5708e
.word 0x7f38b31c
.word 0xff7fffff
.word 0x7f086888
.word 0x7f33d732
.word 0xff7fffff
.word 0x7ec3e7e5
.word 0x7eb94394
.word 0xff7fffff
.word 0x7ee48b04
.word 0x7f294f17
.word 0xff7fffff
.word 0x7dde5beb
.word 0x7ea96a13
.word 0xff7fffff
.word 0x7f3f10c6
.word 0x7f164cf5
.word 0xff7fffff
.word 0x7eb10056
.word 0x7f070538
.word 0xff7fffff
.word 0x7f09599c
.word 0x7e459379
.word 0xff7fffff
.word 0x7f111bf6
.word 0x7d93b178
.word 0xff7fffff
.word 0x7dac23d1
.word 0x7ecfb3f7
.word 0xff7fffff
.word 0x7f02c560
.word 0x7ea8844c
.word 0xff7fffff
.word 0x7e639f2c
.word 0x7e31f200
.word 0xff7fffff
.word 0x7f3dd17c
.word 0x7ef8dd0e
.word 0xff7fffff
.word 0x7d4d54a3
.word 0x7d84534d
.word 0xff7fffff
.word 0x7f3f914f
.word 0x7de1068d
.word 0xff7fffff
.word 0x7f1d071f
.word 0x7d936004
.word 0xff7fffff
.word 0x7f026519
.word 0x7f305e0d
.word 0xff7fffff
.word 0x7ebbb1f5
.word 0x7e473929
.word 0xff7fffff
.word 0x7f208358
.word 0x7e63ea1b
.word 0xff7fffff
.word 0x7f374d41
.word 0x7f1a6f68
.word 0xff7fffff
.word 0x7e4e8c3e
.word 0x7eca19c2
.word 0xff7fffff
.word 0x7e894fff
.word 0x7eaf806f
.word 0xff7fffff
.word 0x7f153984
.word 0x7f0aea5e
.word 0xff7fffff
.word 0x7f04fd41
.word 0x7c97909f
.word 0xff7fffff
.word 0x7f2336ae
.word 0x7ef62408
.word 0xff7fffff
.word 0x7dbaf9fa
.word 0x7dbb09f3
.word 0xff7fffff
.word 0x7eb1e0ce
.word 0x7f10affc
.word 0xff7fffff
.word 0x7e13bb57
.word 0x7edb79eb
.word 0xff7fffff
.word 0x7f339269
.word 0x7d6b27f7
.word 0xff7fffff
.word 0x7d62ae46
.word 0x7e5a6352
.word 0xff7fffff
.word 0x7eba9244
.word 0x7e1fef00
.word 0xff7fffff
.word 0x7c41315c
.word 0x7ead58ba
.word 0xff7fffff
.word 0x7e6af2c7
.word 0x7f2165be
.word 0xff7fffff
.word 0x7c6a262c
.word 0x7f039463
.word 0xff7fffff
.word 0x7e5e65e4
.word 0x7f3cd606
.word 0xff7fffff
.word 0x7ec76063
.word 0x7f30eb20
.word 0xff7fffff
.word 0x7d900e76
.word 0x7f1a1c1b
.word 0xff7fffff
.word 0x7ea084ae
.word 0x7ec99ff1
.word 0xff7fffff
.word 0x7ec46aa0
.word 0x7edf221f
.word 0xff7fffff
.word 0x7f38eb1b
.word 0x7f0bf46a
.word 0xff7fffff
.word 0x7ef66f73
.word 0x7e232951
.word 0xff7fffff
.word 0x7ec7f677
.word 0x7eb254ae
.word 0xff7fffff
.word 0x7e0b977b
.word 0x7e31cfbf
.word 0xff7fffff
.word 0x7f0af6b9
.word 0x7e38fc15
.word 0xff7fffff
.word 0x7cda1bbe
.word 0x7e9cf370
.word 0xff7fffff
.word 0x7ea27041
.word 0x7eca0e92
.word 0xff7fffff
.word 0x7f19a3cb
.word 0x7f083942
.word 0xff7fffff
.word 0x7e409980
.word 0x7ee308fe
.word 0xff7fffff
.word 0x7f3ef2e6
.word 0x7e328a37
.word 0xff7fffff
.word 0x7ec32be8
.word 0x7f3cd352
.word 0xff7fffff
.word 0x7df78ca8
.word 0x7d934261
.word 0xff7fffff
.word 0x7dd7ea20
.word 0x7d2e6e63
.word 0xff7fffff
.word 0x7ea12fa5
.word 0x7c5d9799
.word 0xff7fffff
.word 0x7f3844b4
.word 0x7e46fc6d
.word 0xff7fffff
.word 0x7e96e4ce
.word 0x7ec5af29
.word 0xff7fffff
.word 0x7f27f459
.word 0x7dc3e560
.word 0xff7fffff
.word 0x7e72ec45
.word 0x7d9cbf56
.word 0xff7fffff
.word 0x7eb58c1d
.word 0x7e2d3485
.word 0xff7fffff
.word 0x7f11164e
.word 0x7f2596ee
.word 0xff7fffff
.word 0x7f1310f3
.word 0x7f0e11db
.word 0xff7fffff
.word 0x7e817d76
.word 0x7cbd4d49
.word 0xff7fffff
.word 0x7eec407f
.word 0x7f0e8d5f
.word 0xff7fffff
.word 0x7de894ce
.word 0x7cded631
.word 0xff7fffff
.word 0x7e940eaa
.word 0x7d04972f
.word 0xff7fffff
.word 0x7df1556c
.word 0x7e0d1c84
.word 0xff7fffff
.word 0x7c81ea00
.word 0x7e445eb5
.word 0xff7fffff
.word 0x7f3746a3
.word 0x7c9bb7c9
.word 0xff7fffff
.word 0x7e04012d
.word 0x7f012bc4
.word 0xff7fffff
.word 0x7f09a812
.word 0x7cc3d400
.word 0xff7fffff
.word 0x7e21a5d7
.word 0x7f29125a
.word 0xff7fffff
.word 0x7ec89656
.word 0x7f23f501
.word 0xff7fffff
.word 0x7e2e0a9e
.word 0x7f281823
.word 0xff7fffff
.word 0x7d3481df
.word 0x7efab7a7
.word 0xff7fffff
.word 0x7f2e44fd
.word 0x7e12ff4e
.word 0xff7fffff
.word 0x7d678d99
.word 0x7f1d844c
.word 0xff7fffff
.word 0x7ec490fe
.word 0x7f335b8d
.word 0xff7fffff
.word 0x7ee1c550
.word 0x7e6f7f16
.word 0xff7fffff
.word 0x7ec1a1ac
.word 0x7ec6d0ac
.word 0xff7fffff
.word 0x7e6dbe95
.word 0x7f37d03d
.word 0xff7fffff
.word 0x7f2e5316
.word 0x7e4dedfa
.word 0xff7fffff
.word 0x7e79582c
.word 0x7f065158
.word 0xff7fffff
.word 0x7f0af6e3
.word 0x7ebadb90
.word 0xff7fffff
.word 0x7eb10756
.word 0x7ed9ffad
.word 0xff7fffff
.word 0x7e87e829
.word 0x7f2981e2
.word 0xff7fffff
.word 0x7f319158
.word 0x7ec052ad
.word 0xff7fffff
.word 0x7eb12e1f
.word 0x7ecba816
.word 0xff7fffff
.word 0x7df79461
.word 0x7f10c4ce
.word 0xff7fffff
.word 0x7e87daac
.word 0x7f3c58f5
.word 0xff7fffff
.word 0x7f2e10e3
.word 0x7f127958
.word 0xff7fffff
.word 0x7f2b90d3
.word 0x7f18fa57
.word 0xff7fffff
.word 0x7f3fbf4a
.word 0x7f018006
.word 0xff7fffff
.word 0x7e79b5b2
.word 0x7dd1f799
.word 0xff7fffff
.word 0x7ed73c68
.word 0x7e3557bf
.word 0xff7fffff
.word 0x7e91ecfc
.word 0x7f2b393b
.word 0xff7fffff
.word 0x7ca89f06
.word 0x7eb284ec
.word 0xff7fffff
.word 0x7eaad2f1
.word 0x7e4e0246
.word 0xff7fffff
.word 0x7f3f015e
.word 0x7f3648af
.word 0xff7fffff
.word 0x7ea5608b
.word 0x7e971dc0
.word 0xff7fffff
.word 0x7ee90309
.word 0x7edf2ead
.word 0xff7fffff
.word 0x7f009696
.word 0x7e6ca617
.word 0xff7fffff
.word 0x7d825d06
.word 0x7f206a70
.word 0xff7fffff
.word 0x7f1e081d
.word 0x7f20694d
.word 0xff7fffff
.word 0x7ef02a82
.word 0x7f0e808c
.word 0xff7fffff
.word 0x7e15418a
.word 0x7edea2f9
.word 0xff7fffff
.word 0x7cbc1961
.word 0x7ed3dcbf
.word 0xff7fffff
.word 0x7f06fe3b
.word 0x7f0637ff
.word 0xff7fffff
.word 0x7f12f2b3
.word 0x7f3d7b70
.word 0xff7fffff
.word 0x7e98e44f
.word 0x7f192a82
.word 0xff7fffff
.word 0x7e6465ff
.word 0x7ea57396
.word 0xff7fffff
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 416*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
