
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.5.2
// timestamp : Tue Sep  7 17:29:12 2021 GMT
// usage     : riscv_ctg \
//                  -- cgf $cgf \
//                  -- xlen $xlen \
// -----------
//
// -----------
// Copyright (c) 2021. IIT Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmv.w.x instruction of the RISC-V F extension for the fmv.w.x_b26 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmv.w.x_b26)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:// rs1==x0, rd==f18, rs1_val == 0 and rm_val == 0  
// opcode: fmv.w.x ; op1:x0; dest:f18; op1val:0x0; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.w.x, f18, x0, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1:// rs1==x30, rd==f0, rs1_val == 1587807073 and rm_val == 0  
// opcode: fmv.w.x ; op1:x30; dest:f0; op1val:0x5ea40361; valaddr_reg:x16; val_offset:4; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.w.x, f0, x30, 0x0, 0, x16, 4, x17, x15, 8, x18)

inst_2:// rs1==x7, rd==f1, rs1_val == 1027494066 and rm_val == 0  
// opcode: fmv.w.x ; op1:x7; dest:f1; op1val:0x3d3e50b2; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.w.x, f1, x7, 0x0, 0, x16, 8, x17, x15, 16, x18)

inst_3:// rs1==x13, rd==f15, rs1_val == 339827553 and rm_val == 0  
// opcode: fmv.w.x ; op1:x13; dest:f15; op1val:0x14415b61; valaddr_reg:x16; val_offset:12; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.w.x, f15, x13, 0x0, 0, x16, 12, x17, x15, 24, x18)

inst_4:// rs1==x29, rd==f5, rs1_val == 231549045 and rm_val == 0  
// opcode: fmv.w.x ; op1:x29; dest:f5; op1val:0xdcd2875; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.w.x, f5, x29, 0x0, 0, x16, 16, x17, x15, 32, x18)

inst_5:// rs1==x4, rd==f20, rs1_val == 107790943 and rm_val == 0  
// opcode: fmv.w.x ; op1:x4; dest:f20; op1val:0x66cc25f; valaddr_reg:x16; val_offset:20; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.w.x, f20, x4, 0x0, 0, x16, 20, x17, x15, 40, x18)
RVTEST_VALBASEMOV(x20, x16)
RVTEST_SIGBASE(x19,signature_x19_0)

inst_6:// rs1==x16, rd==f28, rs1_val == 45276376 and rm_val == 0  
// opcode: fmv.w.x ; op1:x16; dest:f28; op1val:0x2b2dcd8; valaddr_reg:x20; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.w.x, f28, x16, 0x0, 0, x20, 24, x21, x19, 0, x18)
RVTEST_VALBASEMOV(x16, x20)
RVTEST_SIGBASE(x15,signature_x15_2)

inst_7:// rs1==x20, rd==f16, rs1_val == 32105925 and rm_val == 0  
// opcode: fmv.w.x ; op1:x20; dest:f16; op1val:0x1e9e5c5; valaddr_reg:x16; val_offset:28; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.w.x, f16, x20, 0x0, 0, x16, 28, x17, x15, 0, x18)

inst_8:// rs1==x25, rd==f11, rs1_val == 12789625 and rm_val == 0  
// opcode: fmv.w.x ; op1:x25; dest:f11; op1val:0xc32779; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.w.x, f11, x25, 0x0, 0, x16, 32, x17, x15, 8, x18)

inst_9:// rs1==x12, rd==f9, rs1_val == 6573466 and rm_val == 0  
// opcode: fmv.w.x ; op1:x12; dest:f9; op1val:0x644d9a; valaddr_reg:x16; val_offset:36; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.w.x, f9, x12, 0x0, 0, x16, 36, x17, x15, 16, x18)

inst_10:// rs1==x23, rd==f12, rs1_val == 3864061 and rm_val == 0  
// opcode: fmv.w.x ; op1:x23; dest:f12; op1val:0x3af5fd; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.w.x, f12, x23, 0x0, 0, x16, 40, x17, x15, 24, x18)

inst_11:// rs1==x11, rd==f17, rs1_val == 1848861 and rm_val == 0  
// opcode: fmv.w.x ; op1:x11; dest:f17; op1val:0x1c361d; valaddr_reg:x16; val_offset:44; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.w.x, f17, x11, 0x0, 0, x16, 44, x17, x15, 32, x18)

inst_12:// rs1==x14, rd==f30, rs1_val == 896618 and rm_val == 0  
// opcode: fmv.w.x ; op1:x14; dest:f30; op1val:0xdae6a; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.w.x, f30, x14, 0x0, 0, x16, 48, x17, x15, 40, x18)

inst_13:// rs1==x27, rd==f21, rs1_val == 334857 and rm_val == 0  
// opcode: fmv.w.x ; op1:x27; dest:f21; op1val:0x51c09; valaddr_reg:x16; val_offset:52; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.w.x, f21, x27, 0x0, 0, x16, 52, x17, x15, 48, x18)

inst_14:// rs1==x19, rd==f31, rs1_val == 241276 and rm_val == 0  
// opcode: fmv.w.x ; op1:x19; dest:f31; op1val:0x3ae7c; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.w.x, f31, x19, 0x0, 0, x16, 56, x17, x15, 56, x18)

inst_15:// rs1==x2, rd==f7, rs1_val == 71376 and rm_val == 0  
// opcode: fmv.w.x ; op1:x2; dest:f7; op1val:0x116d0; valaddr_reg:x16; val_offset:60; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.w.x, f7, x2, 0x0, 0, x16, 60, x17, x15, 64, x18)

inst_16:// rs1==x26, rd==f22, rs1_val == 56436 and rm_val == 0  
// opcode: fmv.w.x ; op1:x26; dest:f22; op1val:0xdc74; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.w.x, f22, x26, 0x0, 0, x16, 64, x17, x15, 72, x18)

inst_17:// rs1==x28, rd==f2, rs1_val == 24575 and rm_val == 0  
// opcode: fmv.w.x ; op1:x28; dest:f2; op1val:0x5fff; valaddr_reg:x16; val_offset:68; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.w.x, f2, x28, 0x0, 0, x16, 68, x17, x15, 80, x18)

inst_18:// rs1==x21, rd==f8, rs1_val == 9438 and rm_val == 0  
// opcode: fmv.w.x ; op1:x21; dest:f8; op1val:0x24de; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.w.x, f8, x21, 0x0, 0, x16, 72, x17, x15, 88, x18)

inst_19:// rs1==x9, rd==f26, rs1_val == 6781 and rm_val == 0  
// opcode: fmv.w.x ; op1:x9; dest:f26; op1val:0x1a7d; valaddr_reg:x16; val_offset:76; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.w.x, f26, x9, 0x0, 0, x16, 76, x17, x15, 96, x18)

inst_20:// rs1==x18, rd==f27, rs1_val == 4055 and rm_val == 0  
// opcode: fmv.w.x ; op1:x18; dest:f27; op1val:0xfd7; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x22
TEST_FPIO_OP(fmv.w.x, f27, x18, 0x0, 0, x16, 80, x17, x15, 104, x22)

inst_21:// rs1==x3, rd==f4, rs1_val == 1094 and rm_val == 0  
// opcode: fmv.w.x ; op1:x3; dest:f4; op1val:0x446; valaddr_reg:x16; val_offset:84; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.w.x, f4, x3, 0x0, 0, x16, 84, x17, x15, 112, x18)

inst_22:// rs1==x6, rd==f3, rs1_val == 676 and rm_val == 0  
// opcode: fmv.w.x ; op1:x6; dest:f3; op1val:0x2a4; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.w.x, f3, x6, 0x0, 0, x16, 88, x17, x15, 120, x18)

inst_23:// rs1==x8, rd==f23, rs1_val == 398 and rm_val == 0  
// opcode: fmv.w.x ; op1:x8; dest:f23; op1val:0x18e; valaddr_reg:x16; val_offset:92; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.w.x, f23, x8, 0x0, 0, x16, 92, x17, x15, 128, x18)
RVTEST_VALBASEMOV(x20, x16)
RVTEST_SIGBASE(x19,signature_x19_1)

inst_24:// rs1==x15, rd==f29, rs1_val == 253 and rm_val == 0  
// opcode: fmv.w.x ; op1:x15; dest:f29; op1val:0xfd; valaddr_reg:x20; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.w.x, f29, x15, 0x0, 0, x20, 96, x21, x19, 0, x18)

inst_25:// rs1==x17, rd==f6, rs1_val == 123 and rm_val == 0  
// opcode: fmv.w.x ; op1:x17; dest:f6; op1val:0x7b; valaddr_reg:x20; val_offset:100; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.w.x, f6, x17, 0x0, 0, x20, 100, x21, x19, 8, x18)
RVTEST_VALBASEMOV(x16, x20)
RVTEST_SIGBASE(x15,signature_x15_3)

inst_26:// rs1==x10, rd==f10, rs1_val == 45 and rm_val == 0  
// opcode: fmv.w.x ; op1:x10; dest:f10; op1val:0x2d; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.w.x, f10, x10, 0x0, 0, x16, 104, x17, x15, 0, x18)

inst_27:// rs1==x22, rd==f13, rs1_val == 16 and rm_val == 0  
// opcode: fmv.w.x ; op1:x22; dest:f13; op1val:0x10; valaddr_reg:x16; val_offset:108; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.w.x, f13, x22, 0x0, 0, x16, 108, x17, x15, 8, x18)

inst_28:// rs1==x5, rd==f19, rs1_val == 15 and rm_val == 0  
// opcode: fmv.w.x ; op1:x5; dest:f19; op1val:0xf; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.w.x, f19, x5, 0x0, 0, x16, 112, x17, x15, 16, x18)

inst_29:// rs1==x31, rd==f14, rs1_val == 7 and rm_val == 0  
// opcode: fmv.w.x ; op1:x31; dest:f14; op1val:0x7; valaddr_reg:x16; val_offset:116; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.w.x, f14, x31, 0x0, 0, x16, 116, x17, x15, 24, x18)

inst_30:// rs1==x1, rd==f24, rs1_val == 2 and rm_val == 0  
// opcode: fmv.w.x ; op1:x1; dest:f24; op1val:0x2; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.w.x, f24, x1, 0x0, 0, x16, 120, x17, x15, 32, x18)

inst_31:// rs1==x24, rd==f25, rs1_val == 1 and rm_val == 0  
// opcode: fmv.w.x ; op1:x24; dest:f25; op1val:0x1; valaddr_reg:x16; val_offset:124; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.w.x, f25, x24, 0x0, 0, x16, 124, x17, x15, 40, x18)

inst_32:// rs1_val == 0 and rm_val == 0  
// opcode: fmv.w.x ; op1:x10; dest:f11; op1val:0x0; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPIO_OP(fmv.w.x, f11, x10, 0x0, 0, x16, 128, x17, x15, 48, x18)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
test_fp:
.word 0x0
.word 0x5ea40361
.word 0x3d3e50b2
.word 0x14415b61
.word 0xdcd2875
.word 0x66cc25f
.word 0x2b2dcd8
.word 0x1e9e5c5
.word 0xc32779
.word 0x644d9a
.word 0x3af5fd
.word 0x1c361d
.word 0xdae6a
.word 0x51c09
.word 0x3ae7c
.word 0x116d0
.word 0xdc74
.word 0x5fff
.word 0x24de
.word 0x1a7d
.word 0xfd7
.word 0x446
.word 0x2a4
.word 0x18e
.word 0xfd
.word 0x7b
.word 0x2d
.word 0x10
.word 0xf
.word 0x7
.word 0x2
.word 0x1
.word 0x0
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 12*(XLEN/32),4,0xdeadbeef


signature_x19_0:
    .fill 2*(XLEN/32),4,0xdeadbeef


signature_x15_2:
    .fill 34*(XLEN/32),4,0xdeadbeef


signature_x19_1:
    .fill 4*(XLEN/32),4,0xdeadbeef


signature_x15_3:
    .fill 14*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
