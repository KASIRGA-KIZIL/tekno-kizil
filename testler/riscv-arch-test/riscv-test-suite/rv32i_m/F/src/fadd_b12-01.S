
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.5.2
// timestamp : Tue Sep  7 16:07:52 2021 GMT
// usage     : riscv_ctg \
//                  -- cgf $cgf \
//                  -- xlen $xlen \
// -----------
//
// -----------
// Copyright (c) 2021. IIT Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fadd.s instruction of the RISC-V F extension for the fadd_b12 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fadd_b12)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs1 == rs2 == rd, rs1==f7, rs2==f7, rd==f7, fs1 == 1 and fe1 == 0xfe and fm1 == 0x222105 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f7; op2:f7; dest:f7; op1val:0xff222105; op2val:0xff222105; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f7, f7, f7, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1:
// rs2 == rd != rs1, rs1==f4, rs2==f3, rd==f3, fs1 == 1 and fe1 == 0xfd and fm1 == 0x6b4f07 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x530d37 and rm_val == 0  
// opcode: fadd.s ; op1:f4; op2:f3; dest:f3; op1val:0xfeeb4f07; op2val:0x7f530d37; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f3, f4, f3, 0x0, 0, x16, 8, x17, x15, 8, x18)

inst_2:
// rs1 == rd != rs2, rs1==f27, rs2==f30, rd==f27, fs1 == 1 and fe1 == 0xfe and fm1 == 0x185183 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x28224f and rm_val == 0  
// opcode: fadd.s ; op1:f27; op2:f30; dest:f27; op1val:0xff185183; op2val:0x7f28224f; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f27, f27, f30, 0x0, 0, x16, 16, x17, x15, 16, x18)

inst_3:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==f30, rs2==f12, rd==f6, fs1 == 1 and fe1 == 0xfe and fm1 == 0x3f4810 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f30; op2:f12; dest:f6; op1val:0xff3f4810; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f6, f30, f12, 0x0, 0, x16, 24, x17, x15, 24, x18)

inst_4:
// rs1 == rs2 != rd, rs1==f9, rs2==f9, rd==f16, fs1 == 1 and fe1 == 0xfd and fm1 == 0x2d0427 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x554674 and rm_val == 0  
// opcode: fadd.s ; op1:f9; op2:f9; dest:f16; op1val:0xfead0427; op2val:0xfead0427; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f16, f9, f9, 0x0, 0, x16, 32, x17, x15, 32, x18)

inst_5:
// rs1==f26, rs2==f4, rd==f8, fs1 == 1 and fe1 == 0xfe and fm1 == 0x365ad7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f26; op2:f4; dest:f8; op1val:0xff365ad7; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f8, f26, f4, 0x0, 0, x16, 40, x17, x15, 40, x18)

inst_6:
// rs1==f1, rs2==f8, rd==f19, fs1 == 1 and fe1 == 0xfe and fm1 == 0x2bd8f4 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f1; op2:f8; dest:f19; op1val:0xff2bd8f4; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f19, f1, f8, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_7:
// rs1==f24, rs2==f6, rd==f25, fs1 == 1 and fe1 == 0xfe and fm1 == 0x1bd52c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f24; op2:f6; dest:f25; op1val:0xff1bd52c; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f25, f24, f6, 0x0, 0, x16, 56, x17, x15, 56, x18)

inst_8:
// rs1==f22, rs2==f28, rd==f29, fs1 == 1 and fe1 == 0xfe and fm1 == 0x076a16 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3c560e and rm_val == 0  
// opcode: fadd.s ; op1:f22; op2:f28; dest:f29; op1val:0xff076a16; op2val:0x7f3c560e; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f29, f22, f28, 0x0, 0, x16, 64, x17, x15, 64, x18)

inst_9:
// rs1==f14, rs2==f10, rd==f11, fs1 == 1 and fe1 == 0xfd and fm1 == 0x4f9722 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x32ec8c and rm_val == 0  
// opcode: fadd.s ; op1:f14; op2:f10; dest:f11; op1val:0xfecf9722; op2val:0x7f32ec8c; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f11, f14, f10, 0x0, 0, x16, 72, x17, x15, 72, x18)

inst_10:
// rs1==f12, rs2==f26, rd==f1, fs1 == 1 and fe1 == 0xfe and fm1 == 0x2c7300 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f12; op2:f26; dest:f1; op1val:0xff2c7300; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f1, f12, f26, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_11:
// rs1==f8, rs2==f0, rd==f23, fs1 == 1 and fe1 == 0xfe and fm1 == 0x314a05 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f8; op2:f0; dest:f23; op1val:0xff314a05; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f23, f8, f0, 0x0, 0, x16, 88, x17, x15, 88, x18)

inst_12:
// rs1==f11, rs2==f15, rd==f13, fs1 == 1 and fe1 == 0xfe and fm1 == 0x1175bf and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f11; op2:f15; dest:f13; op1val:0xff1175bf; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f13, f11, f15, 0x0, 0, x16, 96, x17, x15, 96, x18)

inst_13:
// rs1==f23, rs2==f22, rd==f26, fs1 == 1 and fe1 == 0xfd and fm1 == 0x36fce6 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x597afe and rm_val == 0  
// opcode: fadd.s ; op1:f23; op2:f22; dest:f26; op1val:0xfeb6fce6; op2val:0x7ed97afe; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f26, f23, f22, 0x0, 0, x16, 104, x17, x15, 104, x18)

inst_14:
// rs1==f10, rs2==f29, rd==f31, fs1 == 1 and fe1 == 0xfd and fm1 == 0x6b4e0d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x73bb25 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f29; dest:f31; op1val:0xfeeb4e0d; op2val:0x7f73bb25; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f31, f10, f29, 0x0, 0, x16, 112, x17, x15, 112, x18)

inst_15:
// rs1==f3, rs2==f5, rd==f24, fs1 == 1 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x106e2e and rm_val == 0  
// opcode: fadd.s ; op1:f3; op2:f5; dest:f24; op1val:0xfe1173d9; op2val:0x7e906e2e; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f24, f3, f5, 0x0, 0, x16, 120, x17, x15, 120, x18)

inst_16:
// rs1==f0, rs2==f19, rd==f22, fs1 == 1 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2644ac and rm_val == 0  
// opcode: fadd.s ; op1:f0; op2:f19; dest:f22; op1val:0xfedd0ccb; op2val:0x7f2644ac; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f22, f0, f19, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_17:
// rs1==f2, rs2==f24, rd==f12, fs1 == 1 and fe1 == 0xfd and fm1 == 0x64f961 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3c6359 and rm_val == 0  
// opcode: fadd.s ; op1:f2; op2:f24; dest:f12; op1val:0xfee4f961; op2val:0x7f3c6359; valaddr_reg:x16; val_offset:136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f2, f24, 0x0, 0, x16, 136, x17, x15, 136, x18)

inst_18:
// rs1==f29, rs2==f25, rd==f30, fs1 == 1 and fe1 == 0xfd and fm1 == 0x61a51b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x4642a7 and rm_val == 0  
// opcode: fadd.s ; op1:f29; op2:f25; dest:f30; op1val:0xfee1a51b; op2val:0x7f4642a7; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f30, f29, f25, 0x0, 0, x16, 144, x17, x15, 144, x18)

inst_19:
// rs1==f28, rs2==f20, rd==f21, fs1 == 1 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f28; op2:f20; dest:f21; op1val:0xff390e97; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f21, f28, f20, 0x0, 0, x16, 152, x17, x15, 152, x18)

inst_20:
// rs1==f25, rs2==f21, rd==f14, fs1 == 1 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f25; op2:f21; dest:f14; op1val:0xff1c60ac; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f14, f25, f21, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_21:
// rs1==f21, rs2==f31, rd==f5, fs1 == 1 and fe1 == 0xfe and fm1 == 0x07a8e7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x70c4b8 and rm_val == 0  
// opcode: fadd.s ; op1:f21; op2:f31; dest:f5; op1val:0xff07a8e7; op2val:0x7f70c4b8; valaddr_reg:x16; val_offset:168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f5, f21, f31, 0x0, 0, x16, 168, x17, x15, 168, x18)

inst_22:
// rs1==f19, rs2==f18, rd==f2, fs1 == 1 and fe1 == 0xfb and fm1 == 0x278349 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7d9098 and rm_val == 0  
// opcode: fadd.s ; op1:f19; op2:f18; dest:f2; op1val:0xfda78349; op2val:0x7efd9098; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f2, f19, f18, 0x0, 0, x16, 176, x17, x15, 176, x18)

inst_23:
// rs1==f15, rs2==f11, rd==f20, fs1 == 1 and fe1 == 0xfd and fm1 == 0x430c98 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f15; op2:f11; dest:f20; op1val:0xfec30c98; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f20, f15, f11, 0x0, 0, x16, 184, x17, x15, 184, x18)

inst_24:
// rs1==f20, rs2==f14, rd==f9, fs1 == 1 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x19caca and rm_val == 0  
// opcode: fadd.s ; op1:f20; op2:f14; dest:f9; op1val:0xfd772129; op2val:0x7e99caca; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f9, f20, f14, 0x0, 0, x16, 192, x17, x15, 192, x18)

inst_25:
// rs1==f18, rs2==f17, rd==f28, fs1 == 1 and fe1 == 0xfe and fm1 == 0x1a35e0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x703879 and rm_val == 0  
// opcode: fadd.s ; op1:f18; op2:f17; dest:f28; op1val:0xff1a35e0; op2val:0x7f703879; valaddr_reg:x16; val_offset:200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f28, f18, f17, 0x0, 0, x16, 200, x17, x15, 200, x18)

inst_26:
// rs1==f16, rs2==f1, rd==f0, fs1 == 1 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 0 and fe2 == 0xfe and fm2 == 0x6794fc and rm_val == 0  
// opcode: fadd.s ; op1:f16; op2:f1; dest:f0; op1val:0xfe3741cc; op2val:0x7f6794fc; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f0, f16, f1, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_27:
// rs1==f17, rs2==f13, rd==f18, fs1 == 1 and fe1 == 0xfc and fm1 == 0x12bd51 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x11a59d and rm_val == 0  
// opcode: fadd.s ; op1:f17; op2:f13; dest:f18; op1val:0xfe12bd51; op2val:0x7f11a59d; valaddr_reg:x16; val_offset:216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f18, f17, f13, 0x0, 0, x16, 216, x17, x15, 216, x18)

inst_28:
// rs1==f13, rs2==f16, rd==f4, fs1 == 1 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x6591d8 and rm_val == 0  
// opcode: fadd.s ; op1:f13; op2:f16; dest:f4; op1val:0xfe79c1c6; op2val:0x7f6591d8; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f4, f13, f16, 0x0, 0, x16, 224, x17, x15, 224, x18)

inst_29:
// rs1==f5, rs2==f27, rd==f17, fs1 == 1 and fe1 == 0xfe and fm1 == 0x269468 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x55691d and rm_val == 0  
// opcode: fadd.s ; op1:f5; op2:f27; dest:f17; op1val:0xff269468; op2val:0x7f55691d; valaddr_reg:x16; val_offset:232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f17, f5, f27, 0x0, 0, x16, 232, x17, x15, 232, x18)

inst_30:
// rs1==f31, rs2==f23, rd==f15, fs1 == 1 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3df905 and rm_val == 0  
// opcode: fadd.s ; op1:f31; op2:f23; dest:f15; op1val:0xfa60affa; op2val:0x7ebdf905; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f15, f31, f23, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_31:
// rs1==f6, rs2==f2, rd==f10, fs1 == 1 and fe1 == 0xfe and fm1 == 0x1e5ec7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f6; op2:f2; dest:f10; op1val:0xff1e5ec7; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f10, f6, f2, 0x0, 0, x16, 248, x17, x15, 248, x18)

inst_32:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x0a2eec and fs2 == 0 and fe2 == 0xfe and fm2 == 0x56c1e5 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff0a2eec; op2val:0x7f56c1e5; valaddr_reg:x16; val_offset:256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 256, x17, x15, 256, x18)

inst_33:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x52b355 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5817b0 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfed2b355; op2val:0x7ed817b0; valaddr_reg:x16; val_offset:264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 264, x17, x15, 264, x18)

inst_34:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x480ede and fs2 == 0 and fe2 == 0xfe and fm2 == 0x4c9471 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe480ede; op2val:0x7f4c9471; valaddr_reg:x16; val_offset:272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 272, x17, x15, 272, x18)

inst_35:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x372bf7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfeb72bf7; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 280, x17, x15, 280, x18)

inst_36:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x2f4c51 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff2f4c51; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_37:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x26b8d3 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x48a6ba and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfea6b8d3; op2val:0x7f48a6ba; valaddr_reg:x16; val_offset:296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 296, x17, x15, 296, x18)

inst_38:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x354d84 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5bf8d8 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfeb54d84; op2val:0x7edbf8d8; valaddr_reg:x16; val_offset:304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 304, x17, x15, 304, x18)

inst_39:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x2c93b2 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff2c93b2; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 312, x17, x15, 312, x18)

inst_40:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x6e317d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x47ad0f and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe6e317d; op2val:0x7f47ad0f; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_41:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x1b8fcb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff1b8fcb; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 328, x17, x15, 328, x18)

inst_42:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x2eabd8 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff2eabd8; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 336, x17, x15, 336, x18)

inst_43:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x6d7424 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x26d2f5 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfeed7424; op2val:0x7f26d2f5; valaddr_reg:x16; val_offset:344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 344, x17, x15, 344, x18)

inst_44:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x587392 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x473a2e and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe587392; op2val:0x7f473a2e; valaddr_reg:x16; val_offset:352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 352, x17, x15, 352, x18)

inst_45:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x2e5b90 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff2e5b90; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 360, x17, x15, 360, x18)

inst_46:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x370362 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x4b8415 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfeb70362; op2val:0x7f4b8415; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_47:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x167d44 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x50b9b1 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff167d44; op2val:0x7f50b9b1; valaddr_reg:x16; val_offset:376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 376, x17, x15, 376, x18)

inst_48:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x445459 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2fe97e and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfec45459; op2val:0x7f2fe97e; valaddr_reg:x16; val_offset:384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 384, x17, x15, 384, x18)

inst_49:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x217fdd and fs2 == 0 and fe2 == 0xfe and fm2 == 0x027635 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfea17fdd; op2val:0x7f027635; valaddr_reg:x16; val_offset:392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 392, x17, x15, 392, x18)

inst_50:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x222105 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xff222105; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_51:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x2d0427 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x554674 and rm_val == 0  
// opcode: fadd.s ; op1:f10; op2:f11; dest:f12; op1val:0xfead0427; op2val:0x7f554674; valaddr_reg:x16; val_offset:408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.s, f12, f10, f11, 0x0, 0, x16, 408, x17, x15, 408, x18)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
test_fp:
.word 0xff222105
.word 0xff222105
.word 0xfeeb4f07
.word 0x7f530d37
.word 0xff185183
.word 0x7f28224f
.word 0xff3f4810
.word 0x7f7fffff
.word 0xfead0427
.word 0xfead0427
.word 0xff365ad7
.word 0x7f7fffff
.word 0xff2bd8f4
.word 0x7f7fffff
.word 0xff1bd52c
.word 0x7f7fffff
.word 0xff076a16
.word 0x7f3c560e
.word 0xfecf9722
.word 0x7f32ec8c
.word 0xff2c7300
.word 0x7f7fffff
.word 0xff314a05
.word 0x7f7fffff
.word 0xff1175bf
.word 0x7f7fffff
.word 0xfeb6fce6
.word 0x7ed97afe
.word 0xfeeb4e0d
.word 0x7f73bb25
.word 0xfe1173d9
.word 0x7e906e2e
.word 0xfedd0ccb
.word 0x7f2644ac
.word 0xfee4f961
.word 0x7f3c6359
.word 0xfee1a51b
.word 0x7f4642a7
.word 0xff390e97
.word 0x7f7fffff
.word 0xff1c60ac
.word 0x7f7fffff
.word 0xff07a8e7
.word 0x7f70c4b8
.word 0xfda78349
.word 0x7efd9098
.word 0xfec30c98
.word 0x7f7fffff
.word 0xfd772129
.word 0x7e99caca
.word 0xff1a35e0
.word 0x7f703879
.word 0xfe3741cc
.word 0x7f6794fc
.word 0xfe12bd51
.word 0x7f11a59d
.word 0xfe79c1c6
.word 0x7f6591d8
.word 0xff269468
.word 0x7f55691d
.word 0xfa60affa
.word 0x7ebdf905
.word 0xff1e5ec7
.word 0x7f7fffff
.word 0xff0a2eec
.word 0x7f56c1e5
.word 0xfed2b355
.word 0x7ed817b0
.word 0xfe480ede
.word 0x7f4c9471
.word 0xfeb72bf7
.word 0x7f7fffff
.word 0xff2f4c51
.word 0x7f7fffff
.word 0xfea6b8d3
.word 0x7f48a6ba
.word 0xfeb54d84
.word 0x7edbf8d8
.word 0xff2c93b2
.word 0x7f7fffff
.word 0xfe6e317d
.word 0x7f47ad0f
.word 0xff1b8fcb
.word 0x7f7fffff
.word 0xff2eabd8
.word 0x7f7fffff
.word 0xfeed7424
.word 0x7f26d2f5
.word 0xfe587392
.word 0x7f473a2e
.word 0xff2e5b90
.word 0x7f7fffff
.word 0xfeb70362
.word 0x7f4b8415
.word 0xff167d44
.word 0x7f50b9b1
.word 0xfec45459
.word 0x7f2fe97e
.word 0xfea17fdd
.word 0x7f027635
.word 0xff222105
.word 0x7f7fffff
.word 0xfead0427
.word 0x7f554674
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 104*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
