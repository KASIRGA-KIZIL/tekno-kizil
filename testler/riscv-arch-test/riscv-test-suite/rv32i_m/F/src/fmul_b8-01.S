
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.5.2
// timestamp : Tue Sep  7 17:27:01 2021 GMT
// usage     : riscv_ctg \
//                  -- cgf $cgf \
//                  -- xlen $xlen \
// -----------
//
// -----------
// Copyright (c) 2021. IIT Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmul.s instruction of the RISC-V F extension for the fmul_b8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmul_b8)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs1 == rs2 == rd, rs1==f27, rs2==f27, rd==f27, fs1 == 0 and fe1 == 0x7a and fm1 == 0x341568 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00002d and rm_val == 0  
// opcode: fmul.s ; op1:f27; op2:f27; dest:f27; op1val:0x3d341568; op2val:0x3d341568; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f27, f27, f27, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==f9, rs2==f22, rd==f4, fs1 == 0 and fe1 == 0x7e and fm1 == 0x5976c2 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x16aeb7 and rm_val == 4  
// opcode: fmul.s ; op1:f9; op2:f22; dest:f4; op1val:0x3f5976c2; op2val:0x2a16aeb7; valaddr_reg:x16; val_offset:8; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f4, f9, f22, 0x4, 0, x16, 8, x17, x15, 8, x18)

inst_2:
// rs1 == rs2 != rd, rs1==f21, rs2==f21, rd==f8, fs1 == 0 and fe1 == 0x7e and fm1 == 0x5976c2 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x16aeb7 and rm_val == 3  
// opcode: fmul.s ; op1:f21; op2:f21; dest:f8; op1val:0x3f5976c2; op2val:0x3f5976c2; valaddr_reg:x16; val_offset:16; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f8, f21, f21, 0x3, 0, x16, 16, x17, x15, 16, x18)

inst_3:
// rs1 == rd != rs2, rs1==f26, rs2==f8, rd==f26, fs1 == 0 and fe1 == 0x7e and fm1 == 0x5976c2 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x16aeb7 and rm_val == 2  
// opcode: fmul.s ; op1:f26; op2:f8; dest:f26; op1val:0x3f5976c2; op2val:0x2a16aeb7; valaddr_reg:x16; val_offset:24; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f26, f26, f8, 0x2, 0, x16, 24, x17, x15, 24, x18)

inst_4:
// rs2 == rd != rs1, rs1==f28, rs2==f31, rd==f31, fs1 == 0 and fe1 == 0x7e and fm1 == 0x5976c2 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x16aeb7 and rm_val == 1  
// opcode: fmul.s ; op1:f28; op2:f31; dest:f31; op1val:0x3f5976c2; op2val:0x2a16aeb7; valaddr_reg:x16; val_offset:32; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f31, f28, f31, 0x1, 0, x16, 32, x17, x15, 32, x18)

inst_5:
// rs1==f16, rs2==f20, rd==f23, fs1 == 0 and fe1 == 0x7e and fm1 == 0x5976c2 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x16aeb7 and rm_val == 0  
// opcode: fmul.s ; op1:f16; op2:f20; dest:f23; op1val:0x3f5976c2; op2val:0x2a16aeb7; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f23, f16, f20, 0x0, 0, x16, 40, x17, x15, 40, x18)

inst_6:
// rs1==f25, rs2==f2, rd==f15, fs1 == 0 and fe1 == 0x7d and fm1 == 0x5724e5 and fs2 == 0 and fe2 == 0x55 and fm2 == 0x184ea5 and rm_val == 4  
// opcode: fmul.s ; op1:f25; op2:f2; dest:f15; op1val:0x3ed724e5; op2val:0x2a984ea5; valaddr_reg:x16; val_offset:48; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f15, f25, f2, 0x4, 0, x16, 48, x17, x15, 48, x18)

inst_7:
// rs1==f10, rs2==f7, rd==f24, fs1 == 0 and fe1 == 0x7d and fm1 == 0x5724e5 and fs2 == 0 and fe2 == 0x55 and fm2 == 0x184ea5 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f7; dest:f24; op1val:0x3ed724e5; op2val:0x2a984ea5; valaddr_reg:x16; val_offset:56; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f24, f10, f7, 0x3, 0, x16, 56, x17, x15, 56, x18)

inst_8:
// rs1==f12, rs2==f18, rd==f5, fs1 == 0 and fe1 == 0x7d and fm1 == 0x5724e5 and fs2 == 0 and fe2 == 0x55 and fm2 == 0x184ea5 and rm_val == 2  
// opcode: fmul.s ; op1:f12; op2:f18; dest:f5; op1val:0x3ed724e5; op2val:0x2a984ea5; valaddr_reg:x16; val_offset:64; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f5, f12, f18, 0x2, 0, x16, 64, x17, x15, 64, x18)

inst_9:
// rs1==f22, rs2==f3, rd==f30, fs1 == 0 and fe1 == 0x7d and fm1 == 0x5724e5 and fs2 == 0 and fe2 == 0x55 and fm2 == 0x184ea5 and rm_val == 1  
// opcode: fmul.s ; op1:f22; op2:f3; dest:f30; op1val:0x3ed724e5; op2val:0x2a984ea5; valaddr_reg:x16; val_offset:72; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f30, f22, f3, 0x1, 0, x16, 72, x17, x15, 72, x18)

inst_10:
// rs1==f5, rs2==f16, rd==f11, fs1 == 0 and fe1 == 0x7d and fm1 == 0x5724e5 and fs2 == 0 and fe2 == 0x55 and fm2 == 0x184ea5 and rm_val == 0  
// opcode: fmul.s ; op1:f5; op2:f16; dest:f11; op1val:0x3ed724e5; op2val:0x2a984ea5; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f11, f5, f16, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_11:
// rs1==f18, rs2==f30, rd==f13, fs1 == 0 and fe1 == 0x7c and fm1 == 0x2a8133 and fs2 == 0 and fe2 == 0x56 and fm2 == 0x402eb1 and rm_val == 4  
// opcode: fmul.s ; op1:f18; op2:f30; dest:f13; op1val:0x3e2a8133; op2val:0x2b402eb1; valaddr_reg:x16; val_offset:88; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f13, f18, f30, 0x4, 0, x16, 88, x17, x15, 88, x18)

inst_12:
// rs1==f13, rs2==f1, rd==f2, fs1 == 0 and fe1 == 0x7c and fm1 == 0x2a8133 and fs2 == 0 and fe2 == 0x56 and fm2 == 0x402eb1 and rm_val == 3  
// opcode: fmul.s ; op1:f13; op2:f1; dest:f2; op1val:0x3e2a8133; op2val:0x2b402eb1; valaddr_reg:x16; val_offset:96; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f2, f13, f1, 0x3, 0, x16, 96, x17, x15, 96, x18)

inst_13:
// rs1==f8, rs2==f6, rd==f29, fs1 == 0 and fe1 == 0x7c and fm1 == 0x2a8133 and fs2 == 0 and fe2 == 0x56 and fm2 == 0x402eb1 and rm_val == 2  
// opcode: fmul.s ; op1:f8; op2:f6; dest:f29; op1val:0x3e2a8133; op2val:0x2b402eb1; valaddr_reg:x16; val_offset:104; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f29, f8, f6, 0x2, 0, x16, 104, x17, x15, 104, x18)

inst_14:
// rs1==f17, rs2==f24, rd==f20, fs1 == 0 and fe1 == 0x7c and fm1 == 0x2a8133 and fs2 == 0 and fe2 == 0x56 and fm2 == 0x402eb1 and rm_val == 1  
// opcode: fmul.s ; op1:f17; op2:f24; dest:f20; op1val:0x3e2a8133; op2val:0x2b402eb1; valaddr_reg:x16; val_offset:112; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f20, f17, f24, 0x1, 0, x16, 112, x17, x15, 112, x18)

inst_15:
// rs1==f7, rs2==f5, rd==f6, fs1 == 0 and fe1 == 0x7c and fm1 == 0x2a8133 and fs2 == 0 and fe2 == 0x56 and fm2 == 0x402eb1 and rm_val == 0  
// opcode: fmul.s ; op1:f7; op2:f5; dest:f6; op1val:0x3e2a8133; op2val:0x2b402eb1; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f6, f7, f5, 0x0, 0, x16, 120, x17, x15, 120, x18)

inst_16:
// rs1==f14, rs2==f28, rd==f22, fs1 == 0 and fe1 == 0x7e and fm1 == 0x0f36d0 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x64cde3 and rm_val == 4  
// opcode: fmul.s ; op1:f14; op2:f28; dest:f22; op1val:0x3f0f36d0; op2val:0x2a64cde3; valaddr_reg:x16; val_offset:128; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f22, f14, f28, 0x4, 0, x16, 128, x17, x15, 128, x18)

inst_17:
// rs1==f11, rs2==f25, rd==f12, fs1 == 0 and fe1 == 0x7e and fm1 == 0x0f36d0 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x64cde3 and rm_val == 3  
// opcode: fmul.s ; op1:f11; op2:f25; dest:f12; op1val:0x3f0f36d0; op2val:0x2a64cde3; valaddr_reg:x16; val_offset:136; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f11, f25, 0x3, 0, x16, 136, x17, x15, 136, x18)

inst_18:
// rs1==f20, rs2==f10, rd==f18, fs1 == 0 and fe1 == 0x7e and fm1 == 0x0f36d0 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x64cde3 and rm_val == 2  
// opcode: fmul.s ; op1:f20; op2:f10; dest:f18; op1val:0x3f0f36d0; op2val:0x2a64cde3; valaddr_reg:x16; val_offset:144; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f18, f20, f10, 0x2, 0, x16, 144, x17, x15, 144, x18)

inst_19:
// rs1==f24, rs2==f12, rd==f21, fs1 == 0 and fe1 == 0x7e and fm1 == 0x0f36d0 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x64cde3 and rm_val == 1  
// opcode: fmul.s ; op1:f24; op2:f12; dest:f21; op1val:0x3f0f36d0; op2val:0x2a64cde3; valaddr_reg:x16; val_offset:152; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f21, f24, f12, 0x1, 0, x16, 152, x17, x15, 152, x18)

inst_20:
// rs1==f29, rs2==f26, rd==f14, fs1 == 0 and fe1 == 0x7e and fm1 == 0x0f36d0 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x64cde3 and rm_val == 0  
// opcode: fmul.s ; op1:f29; op2:f26; dest:f14; op1val:0x3f0f36d0; op2val:0x2a64cde3; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f14, f29, f26, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_21:
// rs1==f2, rs2==f17, rd==f7, fs1 == 0 and fe1 == 0x7d and fm1 == 0x0d3d14 and fs2 == 0 and fe2 == 0x55 and fm2 == 0x68012b and rm_val == 4  
// opcode: fmul.s ; op1:f2; op2:f17; dest:f7; op1val:0x3e8d3d14; op2val:0x2ae8012b; valaddr_reg:x16; val_offset:168; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f7, f2, f17, 0x4, 0, x16, 168, x17, x15, 168, x18)

inst_22:
// rs1==f19, rs2==f15, rd==f16, fs1 == 0 and fe1 == 0x7d and fm1 == 0x0d3d14 and fs2 == 0 and fe2 == 0x55 and fm2 == 0x68012b and rm_val == 3  
// opcode: fmul.s ; op1:f19; op2:f15; dest:f16; op1val:0x3e8d3d14; op2val:0x2ae8012b; valaddr_reg:x16; val_offset:176; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f16, f19, f15, 0x3, 0, x16, 176, x17, x15, 176, x18)

inst_23:
// rs1==f6, rs2==f9, rd==f25, fs1 == 0 and fe1 == 0x7d and fm1 == 0x0d3d14 and fs2 == 0 and fe2 == 0x55 and fm2 == 0x68012b and rm_val == 2  
// opcode: fmul.s ; op1:f6; op2:f9; dest:f25; op1val:0x3e8d3d14; op2val:0x2ae8012b; valaddr_reg:x16; val_offset:184; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f25, f6, f9, 0x2, 0, x16, 184, x17, x15, 184, x18)

inst_24:
// rs1==f23, rs2==f0, rd==f9, fs1 == 0 and fe1 == 0x7d and fm1 == 0x0d3d14 and fs2 == 0 and fe2 == 0x55 and fm2 == 0x68012b and rm_val == 1  
// opcode: fmul.s ; op1:f23; op2:f0; dest:f9; op1val:0x3e8d3d14; op2val:0x2ae8012b; valaddr_reg:x16; val_offset:192; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f9, f23, f0, 0x1, 0, x16, 192, x17, x15, 192, x18)

inst_25:
// rs1==f0, rs2==f14, rd==f19, fs1 == 0 and fe1 == 0x7d and fm1 == 0x0d3d14 and fs2 == 0 and fe2 == 0x55 and fm2 == 0x68012b and rm_val == 0  
// opcode: fmul.s ; op1:f0; op2:f14; dest:f19; op1val:0x3e8d3d14; op2val:0x2ae8012b; valaddr_reg:x16; val_offset:200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f19, f0, f14, 0x0, 0, x16, 200, x17, x15, 200, x18)

inst_26:
// rs1==f15, rs2==f29, rd==f28, fs1 == 0 and fe1 == 0x7e and fm1 == 0x2e5a35 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x3bf0f5 and rm_val == 4  
// opcode: fmul.s ; op1:f15; op2:f29; dest:f28; op1val:0x3f2e5a35; op2val:0x2a3bf0f5; valaddr_reg:x16; val_offset:208; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f28, f15, f29, 0x4, 0, x16, 208, x17, x15, 208, x18)

inst_27:
// rs1==f3, rs2==f19, rd==f17, fs1 == 0 and fe1 == 0x7e and fm1 == 0x2e5a35 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x3bf0f5 and rm_val == 3  
// opcode: fmul.s ; op1:f3; op2:f19; dest:f17; op1val:0x3f2e5a35; op2val:0x2a3bf0f5; valaddr_reg:x16; val_offset:216; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f17, f3, f19, 0x3, 0, x16, 216, x17, x15, 216, x18)

inst_28:
// rs1==f30, rs2==f13, rd==f1, fs1 == 0 and fe1 == 0x7e and fm1 == 0x2e5a35 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x3bf0f5 and rm_val == 2  
// opcode: fmul.s ; op1:f30; op2:f13; dest:f1; op1val:0x3f2e5a35; op2val:0x2a3bf0f5; valaddr_reg:x16; val_offset:224; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f1, f30, f13, 0x2, 0, x16, 224, x17, x15, 224, x18)

inst_29:
// rs1==f31, rs2==f4, rd==f3, fs1 == 0 and fe1 == 0x7e and fm1 == 0x2e5a35 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x3bf0f5 and rm_val == 1  
// opcode: fmul.s ; op1:f31; op2:f4; dest:f3; op1val:0x3f2e5a35; op2val:0x2a3bf0f5; valaddr_reg:x16; val_offset:232; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f3, f31, f4, 0x1, 0, x16, 232, x17, x15, 232, x18)

inst_30:
// rs1==f4, rs2==f23, rd==f10, fs1 == 0 and fe1 == 0x7e and fm1 == 0x2e5a35 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x3bf0f5 and rm_val == 0  
// opcode: fmul.s ; op1:f4; op2:f23; dest:f10; op1val:0x3f2e5a35; op2val:0x2a3bf0f5; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f10, f4, f23, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_31:
// rs1==f1, rs2==f11, rd==f0, fs1 == 0 and fe1 == 0x7e and fm1 == 0x4d55ff and fs2 == 0 and fe2 == 0x54 and fm2 == 0x1f9518 and rm_val == 4  
// opcode: fmul.s ; op1:f1; op2:f11; dest:f0; op1val:0x3f4d55ff; op2val:0x2a1f9518; valaddr_reg:x16; val_offset:248; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f0, f1, f11, 0x4, 0, x16, 248, x17, x15, 248, x18)

inst_32:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4d55ff and fs2 == 0 and fe2 == 0x54 and fm2 == 0x1f9518 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4d55ff; op2val:0x2a1f9518; valaddr_reg:x16; val_offset:256; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 256, x17, x15, 256, x18)

inst_33:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4d55ff and fs2 == 0 and fe2 == 0x54 and fm2 == 0x1f9518 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4d55ff; op2val:0x2a1f9518; valaddr_reg:x16; val_offset:264; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 264, x17, x15, 264, x18)

inst_34:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4d55ff and fs2 == 0 and fe2 == 0x54 and fm2 == 0x1f9518 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4d55ff; op2val:0x2a1f9518; valaddr_reg:x16; val_offset:272; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 272, x17, x15, 272, x18)

inst_35:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4d55ff and fs2 == 0 and fe2 == 0x54 and fm2 == 0x1f9518 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4d55ff; op2val:0x2a1f9518; valaddr_reg:x16; val_offset:280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 280, x17, x15, 280, x18)

inst_36:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7cc491 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x01a301 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7cc491; op2val:0x2a01a301; valaddr_reg:x16; val_offset:288; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 288, x17, x15, 288, x18)

inst_37:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7cc491 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x01a301 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7cc491; op2val:0x2a01a301; valaddr_reg:x16; val_offset:296; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 296, x17, x15, 296, x18)

inst_38:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7cc491 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x01a301 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7cc491; op2val:0x2a01a301; valaddr_reg:x16; val_offset:304; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 304, x17, x15, 304, x18)

inst_39:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7cc491 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x01a301 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7cc491; op2val:0x2a01a301; valaddr_reg:x16; val_offset:312; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 312, x17, x15, 312, x18)

inst_40:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7cc491 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x01a301 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7cc491; op2val:0x2a01a301; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_41:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x270d73 and fs2 == 0 and fe2 == 0x56 and fm2 == 0x442763 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e270d73; op2val:0x2b442763; valaddr_reg:x16; val_offset:328; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 328, x17, x15, 328, x18)

inst_42:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x270d73 and fs2 == 0 and fe2 == 0x56 and fm2 == 0x442763 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e270d73; op2val:0x2b442763; valaddr_reg:x16; val_offset:336; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 336, x17, x15, 336, x18)

inst_43:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x270d73 and fs2 == 0 and fe2 == 0x56 and fm2 == 0x442763 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e270d73; op2val:0x2b442763; valaddr_reg:x16; val_offset:344; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 344, x17, x15, 344, x18)

inst_44:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x270d73 and fs2 == 0 and fe2 == 0x56 and fm2 == 0x442763 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e270d73; op2val:0x2b442763; valaddr_reg:x16; val_offset:352; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 352, x17, x15, 352, x18)

inst_45:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x270d73 and fs2 == 0 and fe2 == 0x56 and fm2 == 0x442763 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e270d73; op2val:0x2b442763; valaddr_reg:x16; val_offset:360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 360, x17, x15, 360, x18)

inst_46:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3132a8 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x38ec56 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3132a8; op2val:0x2a38ec56; valaddr_reg:x16; val_offset:368; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 368, x17, x15, 368, x18)

inst_47:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3132a8 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x38ec56 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3132a8; op2val:0x2a38ec56; valaddr_reg:x16; val_offset:376; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 376, x17, x15, 376, x18)

inst_48:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3132a8 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x38ec56 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3132a8; op2val:0x2a38ec56; valaddr_reg:x16; val_offset:384; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 384, x17, x15, 384, x18)

inst_49:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3132a8 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x38ec56 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3132a8; op2val:0x2a38ec56; valaddr_reg:x16; val_offset:392; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 392, x17, x15, 392, x18)

inst_50:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3132a8 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x38ec56 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3132a8; op2val:0x2a38ec56; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_51:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x6bd6be and fs2 == 0 and fe2 == 0x57 and fm2 == 0x0af13c and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3debd6be; op2val:0x2b8af13c; valaddr_reg:x16; val_offset:408; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 408, x17, x15, 408, x18)

inst_52:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x6bd6be and fs2 == 0 and fe2 == 0x57 and fm2 == 0x0af13c and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3debd6be; op2val:0x2b8af13c; valaddr_reg:x16; val_offset:416; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 416, x17, x15, 416, x18)

inst_53:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x6bd6be and fs2 == 0 and fe2 == 0x57 and fm2 == 0x0af13c and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3debd6be; op2val:0x2b8af13c; valaddr_reg:x16; val_offset:424; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 424, x17, x15, 424, x18)

inst_54:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x6bd6be and fs2 == 0 and fe2 == 0x57 and fm2 == 0x0af13c and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3debd6be; op2val:0x2b8af13c; valaddr_reg:x16; val_offset:432; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 432, x17, x15, 432, x18)

inst_55:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x6bd6be and fs2 == 0 and fe2 == 0x57 and fm2 == 0x0af13c and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3debd6be; op2val:0x2b8af13c; valaddr_reg:x16; val_offset:440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 440, x17, x15, 440, x18)

inst_56:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x44c472 and fs2 == 0 and fe2 == 0x55 and fm2 == 0x26881b and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec4c472; op2val:0x2aa6881b; valaddr_reg:x16; val_offset:448; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 448, x17, x15, 448, x18)

inst_57:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x44c472 and fs2 == 0 and fe2 == 0x55 and fm2 == 0x26881b and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec4c472; op2val:0x2aa6881b; valaddr_reg:x16; val_offset:456; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 456, x17, x15, 456, x18)

inst_58:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x44c472 and fs2 == 0 and fe2 == 0x55 and fm2 == 0x26881b and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec4c472; op2val:0x2aa6881b; valaddr_reg:x16; val_offset:464; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 464, x17, x15, 464, x18)

inst_59:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x44c472 and fs2 == 0 and fe2 == 0x55 and fm2 == 0x26881b and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec4c472; op2val:0x2aa6881b; valaddr_reg:x16; val_offset:472; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 472, x17, x15, 472, x18)

inst_60:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x44c472 and fs2 == 0 and fe2 == 0x55 and fm2 == 0x26881b and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec4c472; op2val:0x2aa6881b; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_61:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x0f2d8c and fs2 == 0 and fe2 == 0x56 and fm2 == 0x64dcb2 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e0f2d8c; op2val:0x2b64dcb2; valaddr_reg:x16; val_offset:488; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 488, x17, x15, 488, x18)

inst_62:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x0f2d8c and fs2 == 0 and fe2 == 0x56 and fm2 == 0x64dcb2 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e0f2d8c; op2val:0x2b64dcb2; valaddr_reg:x16; val_offset:496; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 496, x17, x15, 496, x18)

inst_63:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x0f2d8c and fs2 == 0 and fe2 == 0x56 and fm2 == 0x64dcb2 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e0f2d8c; op2val:0x2b64dcb2; valaddr_reg:x16; val_offset:504; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 504, x17, x15, 504, x18)

inst_64:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x0f2d8c and fs2 == 0 and fe2 == 0x56 and fm2 == 0x64dcb2 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e0f2d8c; op2val:0x2b64dcb2; valaddr_reg:x16; val_offset:512; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 512, x17, x15, 512, x18)

inst_65:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x0f2d8c and fs2 == 0 and fe2 == 0x56 and fm2 == 0x64dcb2 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e0f2d8c; op2val:0x2b64dcb2; valaddr_reg:x16; val_offset:520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 520, x17, x15, 520, x18)

inst_66:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x545f09 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x1a4bbc and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f545f09; op2val:0x2a1a4bbc; valaddr_reg:x16; val_offset:528; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 528, x17, x15, 528, x18)

inst_67:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x545f09 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x1a4bbc and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f545f09; op2val:0x2a1a4bbc; valaddr_reg:x16; val_offset:536; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 536, x17, x15, 536, x18)

inst_68:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x545f09 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x1a4bbc and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f545f09; op2val:0x2a1a4bbc; valaddr_reg:x16; val_offset:544; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 544, x17, x15, 544, x18)

inst_69:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x545f09 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x1a4bbc and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f545f09; op2val:0x2a1a4bbc; valaddr_reg:x16; val_offset:552; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 552, x17, x15, 552, x18)

inst_70:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x545f09 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x1a4bbc and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f545f09; op2val:0x2a1a4bbc; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_71:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5a775d and fs2 == 0 and fe2 == 0x55 and fm2 == 0x15fdba and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eda775d; op2val:0x2a95fdba; valaddr_reg:x16; val_offset:568; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 568, x17, x15, 568, x18)

inst_72:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5a775d and fs2 == 0 and fe2 == 0x55 and fm2 == 0x15fdba and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eda775d; op2val:0x2a95fdba; valaddr_reg:x16; val_offset:576; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 576, x17, x15, 576, x18)

inst_73:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5a775d and fs2 == 0 and fe2 == 0x55 and fm2 == 0x15fdba and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eda775d; op2val:0x2a95fdba; valaddr_reg:x16; val_offset:584; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 584, x17, x15, 584, x18)

inst_74:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5a775d and fs2 == 0 and fe2 == 0x55 and fm2 == 0x15fdba and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eda775d; op2val:0x2a95fdba; valaddr_reg:x16; val_offset:592; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 592, x17, x15, 592, x18)

inst_75:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5a775d and fs2 == 0 and fe2 == 0x55 and fm2 == 0x15fdba and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eda775d; op2val:0x2a95fdba; valaddr_reg:x16; val_offset:600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 600, x17, x15, 600, x18)

inst_76:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4ed08b and fs2 == 0 and fe2 == 0x54 and fm2 == 0x1e7100 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4ed08b; op2val:0x2a1e7100; valaddr_reg:x16; val_offset:608; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 608, x17, x15, 608, x18)

inst_77:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4ed08b and fs2 == 0 and fe2 == 0x54 and fm2 == 0x1e7100 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4ed08b; op2val:0x2a1e7100; valaddr_reg:x16; val_offset:616; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 616, x17, x15, 616, x18)

inst_78:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4ed08b and fs2 == 0 and fe2 == 0x54 and fm2 == 0x1e7100 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4ed08b; op2val:0x2a1e7100; valaddr_reg:x16; val_offset:624; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 624, x17, x15, 624, x18)

inst_79:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4ed08b and fs2 == 0 and fe2 == 0x54 and fm2 == 0x1e7100 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4ed08b; op2val:0x2a1e7100; valaddr_reg:x16; val_offset:632; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 632, x17, x15, 632, x18)

inst_80:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4ed08b and fs2 == 0 and fe2 == 0x54 and fm2 == 0x1e7100 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4ed08b; op2val:0x2a1e7100; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_81:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4f24a5 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x1e30ac and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4f24a5; op2val:0x2a1e30ac; valaddr_reg:x16; val_offset:648; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 648, x17, x15, 648, x18)

inst_82:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4f24a5 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x1e30ac and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4f24a5; op2val:0x2a1e30ac; valaddr_reg:x16; val_offset:656; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 656, x17, x15, 656, x18)

inst_83:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4f24a5 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x1e30ac and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4f24a5; op2val:0x2a1e30ac; valaddr_reg:x16; val_offset:664; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 664, x17, x15, 664, x18)

inst_84:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4f24a5 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x1e30ac and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4f24a5; op2val:0x2a1e30ac; valaddr_reg:x16; val_offset:672; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 672, x17, x15, 672, x18)

inst_85:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4f24a5 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x1e30ac and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4f24a5; op2val:0x2a1e30ac; valaddr_reg:x16; val_offset:680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 680, x17, x15, 680, x18)

inst_86:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x06d993 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x72ff00 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f06d993; op2val:0x2a72ff00; valaddr_reg:x16; val_offset:688; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 688, x17, x15, 688, x18)

inst_87:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x06d993 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x72ff00 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f06d993; op2val:0x2a72ff00; valaddr_reg:x16; val_offset:696; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 696, x17, x15, 696, x18)

inst_88:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x06d993 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x72ff00 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f06d993; op2val:0x2a72ff00; valaddr_reg:x16; val_offset:704; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 704, x17, x15, 704, x18)

inst_89:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x06d993 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x72ff00 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f06d993; op2val:0x2a72ff00; valaddr_reg:x16; val_offset:712; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 712, x17, x15, 712, x18)

inst_90:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x06d993 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x72ff00 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f06d993; op2val:0x2a72ff00; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_91:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0ba4ec and fs2 == 0 and fe2 == 0x54 and fm2 == 0x6aa747 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0ba4ec; op2val:0x2a6aa747; valaddr_reg:x16; val_offset:728; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 728, x17, x15, 728, x18)

inst_92:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0ba4ec and fs2 == 0 and fe2 == 0x54 and fm2 == 0x6aa747 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0ba4ec; op2val:0x2a6aa747; valaddr_reg:x16; val_offset:736; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 736, x17, x15, 736, x18)

inst_93:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0ba4ec and fs2 == 0 and fe2 == 0x54 and fm2 == 0x6aa747 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0ba4ec; op2val:0x2a6aa747; valaddr_reg:x16; val_offset:744; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 744, x17, x15, 744, x18)

inst_94:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0ba4ec and fs2 == 0 and fe2 == 0x54 and fm2 == 0x6aa747 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0ba4ec; op2val:0x2a6aa747; valaddr_reg:x16; val_offset:752; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 752, x17, x15, 752, x18)

inst_95:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0ba4ec and fs2 == 0 and fe2 == 0x54 and fm2 == 0x6aa747 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0ba4ec; op2val:0x2a6aa747; valaddr_reg:x16; val_offset:760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 760, x17, x15, 760, x18)

inst_96:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5ae4c4 and fs2 == 0 and fe2 == 0x56 and fm2 == 0x15b2c3 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e5ae4c4; op2val:0x2b15b2c3; valaddr_reg:x16; val_offset:768; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 768, x17, x15, 768, x18)

inst_97:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5ae4c4 and fs2 == 0 and fe2 == 0x56 and fm2 == 0x15b2c3 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e5ae4c4; op2val:0x2b15b2c3; valaddr_reg:x16; val_offset:776; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 776, x17, x15, 776, x18)

inst_98:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5ae4c4 and fs2 == 0 and fe2 == 0x56 and fm2 == 0x15b2c3 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e5ae4c4; op2val:0x2b15b2c3; valaddr_reg:x16; val_offset:784; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 784, x17, x15, 784, x18)

inst_99:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5ae4c4 and fs2 == 0 and fe2 == 0x56 and fm2 == 0x15b2c3 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e5ae4c4; op2val:0x2b15b2c3; valaddr_reg:x16; val_offset:792; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 792, x17, x15, 792, x18)

inst_100:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5ae4c4 and fs2 == 0 and fe2 == 0x56 and fm2 == 0x15b2c3 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e5ae4c4; op2val:0x2b15b2c3; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_101:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x694947 and fs2 == 0 and fe2 == 0x56 and fm2 == 0x0c766f and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e694947; op2val:0x2b0c766f; valaddr_reg:x16; val_offset:808; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 808, x17, x15, 808, x18)

inst_102:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x694947 and fs2 == 0 and fe2 == 0x56 and fm2 == 0x0c766f and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e694947; op2val:0x2b0c766f; valaddr_reg:x16; val_offset:816; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 816, x17, x15, 816, x18)

inst_103:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x694947 and fs2 == 0 and fe2 == 0x56 and fm2 == 0x0c766f and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e694947; op2val:0x2b0c766f; valaddr_reg:x16; val_offset:824; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 824, x17, x15, 824, x18)

inst_104:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x694947 and fs2 == 0 and fe2 == 0x56 and fm2 == 0x0c766f and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e694947; op2val:0x2b0c766f; valaddr_reg:x16; val_offset:832; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 832, x17, x15, 832, x18)

inst_105:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x694947 and fs2 == 0 and fe2 == 0x56 and fm2 == 0x0c766f and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e694947; op2val:0x2b0c766f; valaddr_reg:x16; val_offset:840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 840, x17, x15, 840, x18)

inst_106:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x1c0b42 and fs2 == 0 and fe2 == 0x57 and fm2 == 0x51fdf9 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d9c0b42; op2val:0x2bd1fdf9; valaddr_reg:x16; val_offset:848; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 848, x17, x15, 848, x18)

inst_107:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x1c0b42 and fs2 == 0 and fe2 == 0x57 and fm2 == 0x51fdf9 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d9c0b42; op2val:0x2bd1fdf9; valaddr_reg:x16; val_offset:856; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 856, x17, x15, 856, x18)

inst_108:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x1c0b42 and fs2 == 0 and fe2 == 0x57 and fm2 == 0x51fdf9 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d9c0b42; op2val:0x2bd1fdf9; valaddr_reg:x16; val_offset:864; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 864, x17, x15, 864, x18)

inst_109:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x1c0b42 and fs2 == 0 and fe2 == 0x57 and fm2 == 0x51fdf9 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d9c0b42; op2val:0x2bd1fdf9; valaddr_reg:x16; val_offset:872; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 872, x17, x15, 872, x18)

inst_110:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x1c0b42 and fs2 == 0 and fe2 == 0x57 and fm2 == 0x51fdf9 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d9c0b42; op2val:0x2bd1fdf9; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 880, x17, x15, 880, x18)

inst_111:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1b8b86 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x52aa6c and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1b8b86; op2val:0x2a52aa6c; valaddr_reg:x16; val_offset:888; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 888, x17, x15, 888, x18)

inst_112:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1b8b86 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x52aa6c and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1b8b86; op2val:0x2a52aa6c; valaddr_reg:x16; val_offset:896; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 896, x17, x15, 896, x18)

inst_113:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1b8b86 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x52aa6c and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1b8b86; op2val:0x2a52aa6c; valaddr_reg:x16; val_offset:904; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 904, x17, x15, 904, x18)

inst_114:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1b8b86 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x52aa6c and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1b8b86; op2val:0x2a52aa6c; valaddr_reg:x16; val_offset:912; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 912, x17, x15, 912, x18)

inst_115:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1b8b86 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x52aa6c and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1b8b86; op2val:0x2a52aa6c; valaddr_reg:x16; val_offset:920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 920, x17, x15, 920, x18)

inst_116:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2ab210 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x3ff7ae and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2ab210; op2val:0x2a3ff7ae; valaddr_reg:x16; val_offset:928; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 928, x17, x15, 928, x18)

inst_117:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2ab210 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x3ff7ae and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2ab210; op2val:0x2a3ff7ae; valaddr_reg:x16; val_offset:936; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 936, x17, x15, 936, x18)

inst_118:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2ab210 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x3ff7ae and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2ab210; op2val:0x2a3ff7ae; valaddr_reg:x16; val_offset:944; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 944, x17, x15, 944, x18)

inst_119:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2ab210 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x3ff7ae and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2ab210; op2val:0x2a3ff7ae; valaddr_reg:x16; val_offset:952; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 952, x17, x15, 952, x18)

inst_120:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2ab210 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x3ff7ae and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2ab210; op2val:0x2a3ff7ae; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 960, x17, x15, 960, x18)

inst_121:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x375440 and fs2 == 0 and fe2 == 0x57 and fm2 == 0x32bd18 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db75440; op2val:0x2bb2bd18; valaddr_reg:x16; val_offset:968; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 968, x17, x15, 968, x18)

inst_122:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x375440 and fs2 == 0 and fe2 == 0x57 and fm2 == 0x32bd18 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db75440; op2val:0x2bb2bd18; valaddr_reg:x16; val_offset:976; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 976, x17, x15, 976, x18)

inst_123:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x375440 and fs2 == 0 and fe2 == 0x57 and fm2 == 0x32bd18 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db75440; op2val:0x2bb2bd18; valaddr_reg:x16; val_offset:984; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 984, x17, x15, 984, x18)

inst_124:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x375440 and fs2 == 0 and fe2 == 0x57 and fm2 == 0x32bd18 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db75440; op2val:0x2bb2bd18; valaddr_reg:x16; val_offset:992; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 992, x17, x15, 992, x18)

inst_125:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x375440 and fs2 == 0 and fe2 == 0x57 and fm2 == 0x32bd18 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db75440; op2val:0x2bb2bd18; valaddr_reg:x16; val_offset:1000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1000, x17, x15, 1000, x18)

inst_126:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x186a27 and fs2 == 0 and fe2 == 0x55 and fm2 == 0x56fe0f and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e986a27; op2val:0x2ad6fe0f; valaddr_reg:x16; val_offset:1008; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1008, x17, x15, 1008, x18)

inst_127:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x186a27 and fs2 == 0 and fe2 == 0x55 and fm2 == 0x56fe0f and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e986a27; op2val:0x2ad6fe0f; valaddr_reg:x16; val_offset:1016; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1016, x17, x15, 1016, x18)

inst_128:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x186a27 and fs2 == 0 and fe2 == 0x55 and fm2 == 0x56fe0f and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e986a27; op2val:0x2ad6fe0f; valaddr_reg:x16; val_offset:1024; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1024, x17, x15, 1024, x18)

inst_129:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x186a27 and fs2 == 0 and fe2 == 0x55 and fm2 == 0x56fe0f and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e986a27; op2val:0x2ad6fe0f; valaddr_reg:x16; val_offset:1032; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1032, x17, x15, 1032, x18)

inst_130:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x186a27 and fs2 == 0 and fe2 == 0x55 and fm2 == 0x56fe0f and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e986a27; op2val:0x2ad6fe0f; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1040, x17, x15, 1040, x18)

inst_131:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2e7621 and fs2 == 0 and fe2 == 0x55 and fm2 == 0x3bd2e0 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eae7621; op2val:0x2abbd2e0; valaddr_reg:x16; val_offset:1048; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1048, x17, x15, 1048, x18)

inst_132:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2e7621 and fs2 == 0 and fe2 == 0x55 and fm2 == 0x3bd2e0 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eae7621; op2val:0x2abbd2e0; valaddr_reg:x16; val_offset:1056; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1056, x17, x15, 1056, x18)

inst_133:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2e7621 and fs2 == 0 and fe2 == 0x55 and fm2 == 0x3bd2e0 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eae7621; op2val:0x2abbd2e0; valaddr_reg:x16; val_offset:1064; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1064, x17, x15, 1064, x18)

inst_134:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2e7621 and fs2 == 0 and fe2 == 0x55 and fm2 == 0x3bd2e0 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eae7621; op2val:0x2abbd2e0; valaddr_reg:x16; val_offset:1072; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1072, x17, x15, 1072, x18)

inst_135:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2e7621 and fs2 == 0 and fe2 == 0x55 and fm2 == 0x3bd2e0 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eae7621; op2val:0x2abbd2e0; valaddr_reg:x16; val_offset:1080; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1080, x17, x15, 1080, x18)

inst_136:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0f1fd0 and fs2 == 0 and fe2 == 0x55 and fm2 == 0x64f2a7 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8f1fd0; op2val:0x2ae4f2a7; valaddr_reg:x16; val_offset:1088; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1088, x17, x15, 1088, x18)

inst_137:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0f1fd0 and fs2 == 0 and fe2 == 0x55 and fm2 == 0x64f2a7 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8f1fd0; op2val:0x2ae4f2a7; valaddr_reg:x16; val_offset:1096; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1096, x17, x15, 1096, x18)

inst_138:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0f1fd0 and fs2 == 0 and fe2 == 0x55 and fm2 == 0x64f2a7 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8f1fd0; op2val:0x2ae4f2a7; valaddr_reg:x16; val_offset:1104; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1104, x17, x15, 1104, x18)

inst_139:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0f1fd0 and fs2 == 0 and fe2 == 0x55 and fm2 == 0x64f2a7 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8f1fd0; op2val:0x2ae4f2a7; valaddr_reg:x16; val_offset:1112; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1112, x17, x15, 1112, x18)

inst_140:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0f1fd0 and fs2 == 0 and fe2 == 0x55 and fm2 == 0x64f2a7 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8f1fd0; op2val:0x2ae4f2a7; valaddr_reg:x16; val_offset:1120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1120, x17, x15, 1120, x18)

inst_141:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x165a29 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x59f10e and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f165a29; op2val:0x2a59f10e; valaddr_reg:x16; val_offset:1128; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1128, x17, x15, 1128, x18)

inst_142:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x165a29 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x59f10e and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f165a29; op2val:0x2a59f10e; valaddr_reg:x16; val_offset:1136; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1136, x17, x15, 1136, x18)

inst_143:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x165a29 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x59f10e and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f165a29; op2val:0x2a59f10e; valaddr_reg:x16; val_offset:1144; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1144, x17, x15, 1144, x18)

inst_144:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x165a29 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x59f10e and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f165a29; op2val:0x2a59f10e; valaddr_reg:x16; val_offset:1152; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1152, x17, x15, 1152, x18)

inst_145:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x165a29 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x59f10e and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f165a29; op2val:0x2a59f10e; valaddr_reg:x16; val_offset:1160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1160, x17, x15, 1160, x18)

inst_146:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x47c417 and fs2 == 0 and fe2 == 0x57 and fm2 == 0x24082d and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dc7c417; op2val:0x2ba4082d; valaddr_reg:x16; val_offset:1168; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1168, x17, x15, 1168, x18)

inst_147:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x47c417 and fs2 == 0 and fe2 == 0x57 and fm2 == 0x24082d and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dc7c417; op2val:0x2ba4082d; valaddr_reg:x16; val_offset:1176; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1176, x17, x15, 1176, x18)

inst_148:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x47c417 and fs2 == 0 and fe2 == 0x57 and fm2 == 0x24082d and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dc7c417; op2val:0x2ba4082d; valaddr_reg:x16; val_offset:1184; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1184, x17, x15, 1184, x18)

inst_149:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x47c417 and fs2 == 0 and fe2 == 0x57 and fm2 == 0x24082d and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dc7c417; op2val:0x2ba4082d; valaddr_reg:x16; val_offset:1192; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1192, x17, x15, 1192, x18)

inst_150:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x47c417 and fs2 == 0 and fe2 == 0x57 and fm2 == 0x24082d and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dc7c417; op2val:0x2ba4082d; valaddr_reg:x16; val_offset:1200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1200, x17, x15, 1200, x18)

inst_151:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x191efd and fs2 == 0 and fe2 == 0x55 and fm2 == 0x560029 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e991efd; op2val:0x2ad60029; valaddr_reg:x16; val_offset:1208; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1208, x17, x15, 1208, x18)

inst_152:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x191efd and fs2 == 0 and fe2 == 0x55 and fm2 == 0x560029 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e991efd; op2val:0x2ad60029; valaddr_reg:x16; val_offset:1216; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1216, x17, x15, 1216, x18)

inst_153:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x191efd and fs2 == 0 and fe2 == 0x55 and fm2 == 0x560029 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e991efd; op2val:0x2ad60029; valaddr_reg:x16; val_offset:1224; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1224, x17, x15, 1224, x18)

inst_154:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x191efd and fs2 == 0 and fe2 == 0x55 and fm2 == 0x560029 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e991efd; op2val:0x2ad60029; valaddr_reg:x16; val_offset:1232; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1232, x17, x15, 1232, x18)

inst_155:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x191efd and fs2 == 0 and fe2 == 0x55 and fm2 == 0x560029 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e991efd; op2val:0x2ad60029; valaddr_reg:x16; val_offset:1240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1240, x17, x15, 1240, x18)

inst_156:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4a87c3 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x21cb05 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4a87c3; op2val:0x2a21cb05; valaddr_reg:x16; val_offset:1248; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1248, x17, x15, 1248, x18)

inst_157:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4a87c3 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x21cb05 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4a87c3; op2val:0x2a21cb05; valaddr_reg:x16; val_offset:1256; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1256, x17, x15, 1256, x18)

inst_158:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4a87c3 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x21cb05 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4a87c3; op2val:0x2a21cb05; valaddr_reg:x16; val_offset:1264; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1264, x17, x15, 1264, x18)

inst_159:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4a87c3 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x21cb05 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4a87c3; op2val:0x2a21cb05; valaddr_reg:x16; val_offset:1272; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1272, x17, x15, 1272, x18)

inst_160:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4a87c3 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x21cb05 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4a87c3; op2val:0x2a21cb05; valaddr_reg:x16; val_offset:1280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1280, x17, x15, 1280, x18)

inst_161:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x093f10 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x6ec0d0 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f093f10; op2val:0x2a6ec0d0; valaddr_reg:x16; val_offset:1288; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1288, x17, x15, 1288, x18)

inst_162:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x093f10 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x6ec0d0 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f093f10; op2val:0x2a6ec0d0; valaddr_reg:x16; val_offset:1296; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1296, x17, x15, 1296, x18)

inst_163:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x093f10 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x6ec0d0 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f093f10; op2val:0x2a6ec0d0; valaddr_reg:x16; val_offset:1304; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1304, x17, x15, 1304, x18)

inst_164:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x093f10 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x6ec0d0 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f093f10; op2val:0x2a6ec0d0; valaddr_reg:x16; val_offset:1312; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1312, x17, x15, 1312, x18)

inst_165:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x093f10 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x6ec0d0 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f093f10; op2val:0x2a6ec0d0; valaddr_reg:x16; val_offset:1320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1320, x17, x15, 1320, x18)

inst_166:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x346b39 and fs2 == 0 and fe2 == 0x59 and fm2 == 0x359f30 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3cb46b39; op2val:0x2cb59f30; valaddr_reg:x16; val_offset:1328; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1328, x17, x15, 1328, x18)

inst_167:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x346b39 and fs2 == 0 and fe2 == 0x59 and fm2 == 0x359f30 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3cb46b39; op2val:0x2cb59f30; valaddr_reg:x16; val_offset:1336; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1336, x17, x15, 1336, x18)

inst_168:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x346b39 and fs2 == 0 and fe2 == 0x59 and fm2 == 0x359f30 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3cb46b39; op2val:0x2cb59f30; valaddr_reg:x16; val_offset:1344; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1344, x17, x15, 1344, x18)

inst_169:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x346b39 and fs2 == 0 and fe2 == 0x59 and fm2 == 0x359f30 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3cb46b39; op2val:0x2cb59f30; valaddr_reg:x16; val_offset:1352; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1352, x17, x15, 1352, x18)

inst_170:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x346b39 and fs2 == 0 and fe2 == 0x59 and fm2 == 0x359f30 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3cb46b39; op2val:0x2cb59f30; valaddr_reg:x16; val_offset:1360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1360, x17, x15, 1360, x18)

inst_171:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x504313 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x1d571b and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f504313; op2val:0x2a1d571b; valaddr_reg:x16; val_offset:1368; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1368, x17, x15, 1368, x18)

inst_172:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x504313 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x1d571b and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f504313; op2val:0x2a1d571b; valaddr_reg:x16; val_offset:1376; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1376, x17, x15, 1376, x18)

inst_173:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x504313 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x1d571b and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f504313; op2val:0x2a1d571b; valaddr_reg:x16; val_offset:1384; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1384, x17, x15, 1384, x18)

inst_174:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x504313 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x1d571b and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f504313; op2val:0x2a1d571b; valaddr_reg:x16; val_offset:1392; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1392, x17, x15, 1392, x18)

inst_175:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x504313 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x1d571b and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f504313; op2val:0x2a1d571b; valaddr_reg:x16; val_offset:1400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1400, x17, x15, 1400, x18)

inst_176:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3a7361 and fs2 == 0 and fe2 == 0x55 and fm2 == 0x2fbf06 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eba7361; op2val:0x2aafbf06; valaddr_reg:x16; val_offset:1408; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1408, x17, x15, 1408, x18)

inst_177:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3a7361 and fs2 == 0 and fe2 == 0x55 and fm2 == 0x2fbf06 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eba7361; op2val:0x2aafbf06; valaddr_reg:x16; val_offset:1416; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1416, x17, x15, 1416, x18)

inst_178:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3a7361 and fs2 == 0 and fe2 == 0x55 and fm2 == 0x2fbf06 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eba7361; op2val:0x2aafbf06; valaddr_reg:x16; val_offset:1424; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1424, x17, x15, 1424, x18)

inst_179:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3a7361 and fs2 == 0 and fe2 == 0x55 and fm2 == 0x2fbf06 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eba7361; op2val:0x2aafbf06; valaddr_reg:x16; val_offset:1432; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1432, x17, x15, 1432, x18)

inst_180:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3a7361 and fs2 == 0 and fe2 == 0x55 and fm2 == 0x2fbf06 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eba7361; op2val:0x2aafbf06; valaddr_reg:x16; val_offset:1440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1440, x17, x15, 1440, x18)

inst_181:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4dda80 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x1f2e60 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4dda80; op2val:0x2a1f2e60; valaddr_reg:x16; val_offset:1448; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1448, x17, x15, 1448, x18)

inst_182:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4dda80 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x1f2e60 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4dda80; op2val:0x2a1f2e60; valaddr_reg:x16; val_offset:1456; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1456, x17, x15, 1456, x18)

inst_183:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4dda80 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x1f2e60 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4dda80; op2val:0x2a1f2e60; valaddr_reg:x16; val_offset:1464; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1464, x17, x15, 1464, x18)

inst_184:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4dda80 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x1f2e60 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4dda80; op2val:0x2a1f2e60; valaddr_reg:x16; val_offset:1472; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1472, x17, x15, 1472, x18)

inst_185:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4dda80 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x1f2e60 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4dda80; op2val:0x2a1f2e60; valaddr_reg:x16; val_offset:1480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1480, x17, x15, 1480, x18)

inst_186:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4dc621 and fs2 == 0 and fe2 == 0x55 and fm2 == 0x1f3e21 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ecdc621; op2val:0x2a9f3e21; valaddr_reg:x16; val_offset:1488; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1488, x17, x15, 1488, x18)

inst_187:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4dc621 and fs2 == 0 and fe2 == 0x55 and fm2 == 0x1f3e21 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ecdc621; op2val:0x2a9f3e21; valaddr_reg:x16; val_offset:1496; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1496, x17, x15, 1496, x18)

inst_188:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4dc621 and fs2 == 0 and fe2 == 0x55 and fm2 == 0x1f3e21 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ecdc621; op2val:0x2a9f3e21; valaddr_reg:x16; val_offset:1504; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1504, x17, x15, 1504, x18)

inst_189:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4dc621 and fs2 == 0 and fe2 == 0x55 and fm2 == 0x1f3e21 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ecdc621; op2val:0x2a9f3e21; valaddr_reg:x16; val_offset:1512; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1512, x17, x15, 1512, x18)

inst_190:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4dc621 and fs2 == 0 and fe2 == 0x55 and fm2 == 0x1f3e21 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ecdc621; op2val:0x2a9f3e21; valaddr_reg:x16; val_offset:1520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1520, x17, x15, 1520, x18)

inst_191:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x352a0a and fs2 == 0 and fe2 == 0x56 and fm2 == 0x34dfe3 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e352a0a; op2val:0x2b34dfe3; valaddr_reg:x16; val_offset:1528; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1528, x17, x15, 1528, x18)

inst_192:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x352a0a and fs2 == 0 and fe2 == 0x56 and fm2 == 0x34dfe3 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e352a0a; op2val:0x2b34dfe3; valaddr_reg:x16; val_offset:1536; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1536, x17, x15, 1536, x18)

inst_193:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x352a0a and fs2 == 0 and fe2 == 0x56 and fm2 == 0x34dfe3 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e352a0a; op2val:0x2b34dfe3; valaddr_reg:x16; val_offset:1544; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1544, x17, x15, 1544, x18)

inst_194:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x352a0a and fs2 == 0 and fe2 == 0x56 and fm2 == 0x34dfe3 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e352a0a; op2val:0x2b34dfe3; valaddr_reg:x16; val_offset:1552; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1552, x17, x15, 1552, x18)

inst_195:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x352a0a and fs2 == 0 and fe2 == 0x56 and fm2 == 0x34dfe3 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e352a0a; op2val:0x2b34dfe3; valaddr_reg:x16; val_offset:1560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1560, x17, x15, 1560, x18)

inst_196:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x73c3ee and fs2 == 0 and fe2 == 0x54 and fm2 == 0x066ca2 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f73c3ee; op2val:0x2a066ca2; valaddr_reg:x16; val_offset:1568; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1568, x17, x15, 1568, x18)

inst_197:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x73c3ee and fs2 == 0 and fe2 == 0x54 and fm2 == 0x066ca2 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f73c3ee; op2val:0x2a066ca2; valaddr_reg:x16; val_offset:1576; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1576, x17, x15, 1576, x18)

inst_198:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x73c3ee and fs2 == 0 and fe2 == 0x54 and fm2 == 0x066ca2 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f73c3ee; op2val:0x2a066ca2; valaddr_reg:x16; val_offset:1584; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1584, x17, x15, 1584, x18)

inst_199:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x73c3ee and fs2 == 0 and fe2 == 0x54 and fm2 == 0x066ca2 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f73c3ee; op2val:0x2a066ca2; valaddr_reg:x16; val_offset:1592; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1592, x17, x15, 1592, x18)

inst_200:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x73c3ee and fs2 == 0 and fe2 == 0x54 and fm2 == 0x066ca2 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f73c3ee; op2val:0x2a066ca2; valaddr_reg:x16; val_offset:1600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1600, x17, x15, 1600, x18)

inst_201:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x183f18 and fs2 == 0 and fe2 == 0x55 and fm2 == 0x573ade and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e983f18; op2val:0x2ad73ade; valaddr_reg:x16; val_offset:1608; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1608, x17, x15, 1608, x18)

inst_202:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x183f18 and fs2 == 0 and fe2 == 0x55 and fm2 == 0x573ade and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e983f18; op2val:0x2ad73ade; valaddr_reg:x16; val_offset:1616; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1616, x17, x15, 1616, x18)

inst_203:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x183f18 and fs2 == 0 and fe2 == 0x55 and fm2 == 0x573ade and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e983f18; op2val:0x2ad73ade; valaddr_reg:x16; val_offset:1624; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1624, x17, x15, 1624, x18)

inst_204:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x183f18 and fs2 == 0 and fe2 == 0x55 and fm2 == 0x573ade and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e983f18; op2val:0x2ad73ade; valaddr_reg:x16; val_offset:1632; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1632, x17, x15, 1632, x18)

inst_205:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x183f18 and fs2 == 0 and fe2 == 0x55 and fm2 == 0x573ade and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e983f18; op2val:0x2ad73ade; valaddr_reg:x16; val_offset:1640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1640, x17, x15, 1640, x18)

inst_206:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3fc751 and fs2 == 0 and fe2 == 0x55 and fm2 == 0x2add1c and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebfc751; op2val:0x2aaadd1c; valaddr_reg:x16; val_offset:1648; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1648, x17, x15, 1648, x18)

inst_207:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3fc751 and fs2 == 0 and fe2 == 0x55 and fm2 == 0x2add1c and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebfc751; op2val:0x2aaadd1c; valaddr_reg:x16; val_offset:1656; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1656, x17, x15, 1656, x18)

inst_208:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3fc751 and fs2 == 0 and fe2 == 0x55 and fm2 == 0x2add1c and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebfc751; op2val:0x2aaadd1c; valaddr_reg:x16; val_offset:1664; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1664, x17, x15, 1664, x18)

inst_209:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3fc751 and fs2 == 0 and fe2 == 0x55 and fm2 == 0x2add1c and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebfc751; op2val:0x2aaadd1c; valaddr_reg:x16; val_offset:1672; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1672, x17, x15, 1672, x18)

inst_210:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3fc751 and fs2 == 0 and fe2 == 0x55 and fm2 == 0x2add1c and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebfc751; op2val:0x2aaadd1c; valaddr_reg:x16; val_offset:1680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1680, x17, x15, 1680, x18)

inst_211:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x146ca7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5cc5b4 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54946ca7; op2val:0x3fdcc5b4; valaddr_reg:x16; val_offset:1688; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1688, x17, x15, 1688, x18)

inst_212:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x146ca7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5cc5b4 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54946ca7; op2val:0x3fdcc5b4; valaddr_reg:x16; val_offset:1696; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1696, x17, x15, 1696, x18)

inst_213:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x146ca7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5cc5b4 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54946ca7; op2val:0x3fdcc5b4; valaddr_reg:x16; val_offset:1704; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1704, x17, x15, 1704, x18)

inst_214:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x146ca7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5cc5b4 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54946ca7; op2val:0x3fdcc5b4; valaddr_reg:x16; val_offset:1712; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1712, x17, x15, 1712, x18)

inst_215:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x146ca7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5cc5b4 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54946ca7; op2val:0x3fdcc5b4; valaddr_reg:x16; val_offset:1720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1720, x17, x15, 1720, x18)

inst_216:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x4edc9f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x1e67c0 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x53cedc9f; op2val:0x409e67c0; valaddr_reg:x16; val_offset:1728; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1728, x17, x15, 1728, x18)

inst_217:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x4edc9f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x1e67c0 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x53cedc9f; op2val:0x409e67c0; valaddr_reg:x16; val_offset:1736; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1736, x17, x15, 1736, x18)

inst_218:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x4edc9f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x1e67c0 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x53cedc9f; op2val:0x409e67c0; valaddr_reg:x16; val_offset:1744; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1744, x17, x15, 1744, x18)

inst_219:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x4edc9f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x1e67c0 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x53cedc9f; op2val:0x409e67c0; valaddr_reg:x16; val_offset:1752; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1752, x17, x15, 1752, x18)

inst_220:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x4edc9f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x1e67c0 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x53cedc9f; op2val:0x409e67c0; valaddr_reg:x16; val_offset:1760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1760, x17, x15, 1760, x18)

inst_221:
// fs1 == 0 and fe1 == 0xa4 and fm1 == 0x7acc83 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x02a78d and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x527acc83; op2val:0x4202a78d; valaddr_reg:x16; val_offset:1768; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1768, x17, x15, 1768, x18)

inst_222:
// fs1 == 0 and fe1 == 0xa4 and fm1 == 0x7acc83 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x02a78d and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x527acc83; op2val:0x4202a78d; valaddr_reg:x16; val_offset:1776; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1776, x17, x15, 1776, x18)

inst_223:
// fs1 == 0 and fe1 == 0xa4 and fm1 == 0x7acc83 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x02a78d and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x527acc83; op2val:0x4202a78d; valaddr_reg:x16; val_offset:1784; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1784, x17, x15, 1784, x18)

inst_224:
// fs1 == 0 and fe1 == 0xa4 and fm1 == 0x7acc83 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x02a78d and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x527acc83; op2val:0x4202a78d; valaddr_reg:x16; val_offset:1792; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1792, x17, x15, 1792, x18)

inst_225:
// fs1 == 0 and fe1 == 0xa4 and fm1 == 0x7acc83 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x02a78d and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x527acc83; op2val:0x4202a78d; valaddr_reg:x16; val_offset:1800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1800, x17, x15, 1800, x18)

inst_226:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x32f555 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x371aa5 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54b2f555; op2val:0x3fb71aa5; valaddr_reg:x16; val_offset:1808; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1808, x17, x15, 1808, x18)

inst_227:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x32f555 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x371aa5 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54b2f555; op2val:0x3fb71aa5; valaddr_reg:x16; val_offset:1816; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1816, x17, x15, 1816, x18)

inst_228:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x32f555 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x371aa5 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54b2f555; op2val:0x3fb71aa5; valaddr_reg:x16; val_offset:1824; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1824, x17, x15, 1824, x18)

inst_229:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x32f555 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x371aa5 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54b2f555; op2val:0x3fb71aa5; valaddr_reg:x16; val_offset:1832; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1832, x17, x15, 1832, x18)

inst_230:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x32f555 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x371aa5 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54b2f555; op2val:0x3fb71aa5; valaddr_reg:x16; val_offset:1840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1840, x17, x15, 1840, x18)

inst_231:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x6a99f9 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bacd8 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x53ea99f9; op2val:0x408bacd8; valaddr_reg:x16; val_offset:1848; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1848, x17, x15, 1848, x18)

inst_232:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x6a99f9 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bacd8 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x53ea99f9; op2val:0x408bacd8; valaddr_reg:x16; val_offset:1856; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1856, x17, x15, 1856, x18)

inst_233:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x6a99f9 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bacd8 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x53ea99f9; op2val:0x408bacd8; valaddr_reg:x16; val_offset:1864; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1864, x17, x15, 1864, x18)

inst_234:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x6a99f9 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bacd8 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x53ea99f9; op2val:0x408bacd8; valaddr_reg:x16; val_offset:1872; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1872, x17, x15, 1872, x18)

inst_235:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x6a99f9 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bacd8 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x53ea99f9; op2val:0x408bacd8; valaddr_reg:x16; val_offset:1880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1880, x17, x15, 1880, x18)

inst_236:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x43ee46 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x273e25 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54c3ee46; op2val:0x3fa73e25; valaddr_reg:x16; val_offset:1888; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1888, x17, x15, 1888, x18)

inst_237:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x43ee46 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x273e25 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54c3ee46; op2val:0x3fa73e25; valaddr_reg:x16; val_offset:1896; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1896, x17, x15, 1896, x18)

inst_238:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x43ee46 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x273e25 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54c3ee46; op2val:0x3fa73e25; valaddr_reg:x16; val_offset:1904; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1904, x17, x15, 1904, x18)

inst_239:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x43ee46 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x273e25 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54c3ee46; op2val:0x3fa73e25; valaddr_reg:x16; val_offset:1912; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1912, x17, x15, 1912, x18)

inst_240:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x43ee46 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x273e25 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54c3ee46; op2val:0x3fa73e25; valaddr_reg:x16; val_offset:1920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1920, x17, x15, 1920, x18)

inst_241:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x721035 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x075e9a and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54721035; op2val:0x40075e9a; valaddr_reg:x16; val_offset:1928; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1928, x17, x15, 1928, x18)

inst_242:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x721035 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x075e9a and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54721035; op2val:0x40075e9a; valaddr_reg:x16; val_offset:1936; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1936, x17, x15, 1936, x18)

inst_243:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x721035 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x075e9a and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54721035; op2val:0x40075e9a; valaddr_reg:x16; val_offset:1944; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1944, x17, x15, 1944, x18)

inst_244:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x721035 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x075e9a and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54721035; op2val:0x40075e9a; valaddr_reg:x16; val_offset:1952; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1952, x17, x15, 1952, x18)

inst_245:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x721035 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x075e9a and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54721035; op2val:0x40075e9a; valaddr_reg:x16; val_offset:1960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1960, x17, x15, 1960, x18)

inst_246:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x4fbec8 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1dbb4d and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54cfbec8; op2val:0x3f9dbb4d; valaddr_reg:x16; val_offset:1968; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1968, x17, x15, 1968, x18)

inst_247:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x4fbec8 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1dbb4d and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54cfbec8; op2val:0x3f9dbb4d; valaddr_reg:x16; val_offset:1976; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1976, x17, x15, 1976, x18)

inst_248:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x4fbec8 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1dbb4d and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54cfbec8; op2val:0x3f9dbb4d; valaddr_reg:x16; val_offset:1984; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1984, x17, x15, 1984, x18)

inst_249:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x4fbec8 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1dbb4d and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54cfbec8; op2val:0x3f9dbb4d; valaddr_reg:x16; val_offset:1992; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1992, x17, x15, 1992, x18)

inst_250:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x4fbec8 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1dbb4d and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54cfbec8; op2val:0x3f9dbb4d; valaddr_reg:x16; val_offset:2000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 2000, x17, x15, 2000, x18)

inst_251:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x4bdb15 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20bdb7 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x544bdb15; op2val:0x4020bdb7; valaddr_reg:x16; val_offset:2008; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 2008, x17, x15, 2008, x18)

inst_252:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x4bdb15 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20bdb7 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x544bdb15; op2val:0x4020bdb7; valaddr_reg:x16; val_offset:2016; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 2016, x17, x15, 2016, x18)

inst_253:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x4bdb15 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20bdb7 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x544bdb15; op2val:0x4020bdb7; valaddr_reg:x16; val_offset:2024; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_2)

inst_254:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x4bdb15 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20bdb7 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x544bdb15; op2val:0x4020bdb7; valaddr_reg:x16; val_offset:0; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 0, x17, x15, 0, x18)

inst_255:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x4bdb15 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20bdb7 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x544bdb15; op2val:0x4020bdb7; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 8, x17, x15, 8, x18)

inst_256:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x5c9a1e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1489fa and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x545c9a1e; op2val:0x401489fa; valaddr_reg:x16; val_offset:16; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 16, x17, x15, 16, x18)

inst_257:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x5c9a1e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1489fa and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x545c9a1e; op2val:0x401489fa; valaddr_reg:x16; val_offset:24; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 24, x17, x15, 24, x18)

inst_258:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x5c9a1e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1489fa and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x545c9a1e; op2val:0x401489fa; valaddr_reg:x16; val_offset:32; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 32, x17, x15, 32, x18)

inst_259:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x5c9a1e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1489fa and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x545c9a1e; op2val:0x401489fa; valaddr_reg:x16; val_offset:40; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 40, x17, x15, 40, x18)

inst_260:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x5c9a1e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1489fa and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x545c9a1e; op2val:0x401489fa; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_261:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x412d7d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a04f and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54412d7d; op2val:0x4029a04f; valaddr_reg:x16; val_offset:56; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 56, x17, x15, 56, x18)

inst_262:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x412d7d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a04f and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54412d7d; op2val:0x4029a04f; valaddr_reg:x16; val_offset:64; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 64, x17, x15, 64, x18)

inst_263:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x412d7d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a04f and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54412d7d; op2val:0x4029a04f; valaddr_reg:x16; val_offset:72; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 72, x17, x15, 72, x18)

inst_264:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x412d7d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a04f and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54412d7d; op2val:0x4029a04f; valaddr_reg:x16; val_offset:80; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 80, x17, x15, 80, x18)

inst_265:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x412d7d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x29a04f and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54412d7d; op2val:0x4029a04f; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 88, x17, x15, 88, x18)

inst_266:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x208bb5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c1a94 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54a08bb5; op2val:0x3fcc1a94; valaddr_reg:x16; val_offset:96; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 96, x17, x15, 96, x18)

inst_267:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x208bb5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c1a94 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54a08bb5; op2val:0x3fcc1a94; valaddr_reg:x16; val_offset:104; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 104, x17, x15, 104, x18)

inst_268:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x208bb5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c1a94 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54a08bb5; op2val:0x3fcc1a94; valaddr_reg:x16; val_offset:112; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 112, x17, x15, 112, x18)

inst_269:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x208bb5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c1a94 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54a08bb5; op2val:0x3fcc1a94; valaddr_reg:x16; val_offset:120; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 120, x17, x15, 120, x18)

inst_270:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x208bb5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c1a94 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54a08bb5; op2val:0x3fcc1a94; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_271:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x57f3c8 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x17bcbb and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x5357f3c8; op2val:0x4117bcbb; valaddr_reg:x16; val_offset:136; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 136, x17, x15, 136, x18)

inst_272:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x57f3c8 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x17bcbb and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x5357f3c8; op2val:0x4117bcbb; valaddr_reg:x16; val_offset:144; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 144, x17, x15, 144, x18)

inst_273:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x57f3c8 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x17bcbb and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x5357f3c8; op2val:0x4117bcbb; valaddr_reg:x16; val_offset:152; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 152, x17, x15, 152, x18)

inst_274:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x57f3c8 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x17bcbb and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x5357f3c8; op2val:0x4117bcbb; valaddr_reg:x16; val_offset:160; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 160, x17, x15, 160, x18)

inst_275:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x57f3c8 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x17bcbb and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x5357f3c8; op2val:0x4117bcbb; valaddr_reg:x16; val_offset:168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 168, x17, x15, 168, x18)

inst_276:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x6abfaf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0b9668 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54eabfaf; op2val:0x3f8b9668; valaddr_reg:x16; val_offset:176; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 176, x17, x15, 176, x18)

inst_277:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x6abfaf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0b9668 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54eabfaf; op2val:0x3f8b9668; valaddr_reg:x16; val_offset:184; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 184, x17, x15, 184, x18)

inst_278:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x6abfaf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0b9668 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54eabfaf; op2val:0x3f8b9668; valaddr_reg:x16; val_offset:192; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 192, x17, x15, 192, x18)

inst_279:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x6abfaf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0b9668 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54eabfaf; op2val:0x3f8b9668; valaddr_reg:x16; val_offset:200; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 200, x17, x15, 200, x18)

inst_280:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x6abfaf and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0b9668 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54eabfaf; op2val:0x3f8b9668; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_281:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x37b3a3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x32604a and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54b7b3a3; op2val:0x3fb2604a; valaddr_reg:x16; val_offset:216; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 216, x17, x15, 216, x18)

inst_282:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x37b3a3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x32604a and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54b7b3a3; op2val:0x3fb2604a; valaddr_reg:x16; val_offset:224; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 224, x17, x15, 224, x18)

inst_283:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x37b3a3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x32604a and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54b7b3a3; op2val:0x3fb2604a; valaddr_reg:x16; val_offset:232; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 232, x17, x15, 232, x18)

inst_284:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x37b3a3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x32604a and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54b7b3a3; op2val:0x3fb2604a; valaddr_reg:x16; val_offset:240; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 240, x17, x15, 240, x18)

inst_285:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x37b3a3 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x32604a and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54b7b3a3; op2val:0x3fb2604a; valaddr_reg:x16; val_offset:248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 248, x17, x15, 248, x18)

inst_286:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x5bcd96 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x151433 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54dbcd96; op2val:0x3f951433; valaddr_reg:x16; val_offset:256; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 256, x17, x15, 256, x18)

inst_287:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x5bcd96 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x151433 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54dbcd96; op2val:0x3f951433; valaddr_reg:x16; val_offset:264; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 264, x17, x15, 264, x18)

inst_288:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x5bcd96 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x151433 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54dbcd96; op2val:0x3f951433; valaddr_reg:x16; val_offset:272; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 272, x17, x15, 272, x18)

inst_289:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x5bcd96 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x151433 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54dbcd96; op2val:0x3f951433; valaddr_reg:x16; val_offset:280; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 280, x17, x15, 280, x18)

inst_290:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x5bcd96 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x151433 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54dbcd96; op2val:0x3f951433; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_291:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x421d8c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28ce89 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54421d8c; op2val:0x4028ce89; valaddr_reg:x16; val_offset:296; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 296, x17, x15, 296, x18)

inst_292:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x421d8c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28ce89 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54421d8c; op2val:0x4028ce89; valaddr_reg:x16; val_offset:304; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 304, x17, x15, 304, x18)

inst_293:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x421d8c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28ce89 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54421d8c; op2val:0x4028ce89; valaddr_reg:x16; val_offset:312; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 312, x17, x15, 312, x18)

inst_294:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x421d8c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28ce89 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54421d8c; op2val:0x4028ce89; valaddr_reg:x16; val_offset:320; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 320, x17, x15, 320, x18)

inst_295:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x421d8c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28ce89 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54421d8c; op2val:0x4028ce89; valaddr_reg:x16; val_offset:328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 328, x17, x15, 328, x18)

inst_296:
// fs1 == 0 and fe1 == 0xa5 and fm1 == 0x59bab5 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x167fb0 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x52d9bab5; op2val:0x41967fb0; valaddr_reg:x16; val_offset:336; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 336, x17, x15, 336, x18)

inst_297:
// fs1 == 0 and fe1 == 0xa5 and fm1 == 0x59bab5 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x167fb0 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x52d9bab5; op2val:0x41967fb0; valaddr_reg:x16; val_offset:344; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 344, x17, x15, 344, x18)

inst_298:
// fs1 == 0 and fe1 == 0xa5 and fm1 == 0x59bab5 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x167fb0 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x52d9bab5; op2val:0x41967fb0; valaddr_reg:x16; val_offset:352; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 352, x17, x15, 352, x18)

inst_299:
// fs1 == 0 and fe1 == 0xa5 and fm1 == 0x59bab5 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x167fb0 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x52d9bab5; op2val:0x41967fb0; valaddr_reg:x16; val_offset:360; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 360, x17, x15, 360, x18)

inst_300:
// fs1 == 0 and fe1 == 0xa5 and fm1 == 0x59bab5 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x167fb0 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x52d9bab5; op2val:0x41967fb0; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_301:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x5daa8d and fs2 == 0 and fe2 == 0x82 and fm2 == 0x13d36c and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x535daa8d; op2val:0x4113d36c; valaddr_reg:x16; val_offset:376; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 376, x17, x15, 376, x18)

inst_302:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x5daa8d and fs2 == 0 and fe2 == 0x82 and fm2 == 0x13d36c and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x535daa8d; op2val:0x4113d36c; valaddr_reg:x16; val_offset:384; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 384, x17, x15, 384, x18)

inst_303:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x5daa8d and fs2 == 0 and fe2 == 0x82 and fm2 == 0x13d36c and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x535daa8d; op2val:0x4113d36c; valaddr_reg:x16; val_offset:392; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 392, x17, x15, 392, x18)

inst_304:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x5daa8d and fs2 == 0 and fe2 == 0x82 and fm2 == 0x13d36c and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x535daa8d; op2val:0x4113d36c; valaddr_reg:x16; val_offset:400; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 400, x17, x15, 400, x18)

inst_305:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x5daa8d and fs2 == 0 and fe2 == 0x82 and fm2 == 0x13d36c and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x535daa8d; op2val:0x4113d36c; valaddr_reg:x16; val_offset:408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 408, x17, x15, 408, x18)

inst_306:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x06ed04 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x72dbfc and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x5386ed04; op2val:0x40f2dbfc; valaddr_reg:x16; val_offset:416; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 416, x17, x15, 416, x18)

inst_307:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x06ed04 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x72dbfc and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x5386ed04; op2val:0x40f2dbfc; valaddr_reg:x16; val_offset:424; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 424, x17, x15, 424, x18)

inst_308:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x06ed04 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x72dbfc and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x5386ed04; op2val:0x40f2dbfc; valaddr_reg:x16; val_offset:432; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 432, x17, x15, 432, x18)

inst_309:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x06ed04 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x72dbfc and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x5386ed04; op2val:0x40f2dbfc; valaddr_reg:x16; val_offset:440; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 440, x17, x15, 440, x18)

inst_310:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x06ed04 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x72dbfc and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x5386ed04; op2val:0x40f2dbfc; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_311:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x0f534d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x64a06a and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x538f534d; op2val:0x40e4a06a; valaddr_reg:x16; val_offset:456; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 456, x17, x15, 456, x18)

inst_312:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x0f534d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x64a06a and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x538f534d; op2val:0x40e4a06a; valaddr_reg:x16; val_offset:464; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 464, x17, x15, 464, x18)

inst_313:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x0f534d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x64a06a and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x538f534d; op2val:0x40e4a06a; valaddr_reg:x16; val_offset:472; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 472, x17, x15, 472, x18)

inst_314:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x0f534d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x64a06a and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x538f534d; op2val:0x40e4a06a; valaddr_reg:x16; val_offset:480; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 480, x17, x15, 480, x18)

inst_315:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x0f534d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x64a06a and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x538f534d; op2val:0x40e4a06a; valaddr_reg:x16; val_offset:488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 488, x17, x15, 488, x18)

inst_316:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x2e8d71 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3bb9ca and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54ae8d71; op2val:0x3fbbb9ca; valaddr_reg:x16; val_offset:496; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 496, x17, x15, 496, x18)

inst_317:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x2e8d71 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3bb9ca and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54ae8d71; op2val:0x3fbbb9ca; valaddr_reg:x16; val_offset:504; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 504, x17, x15, 504, x18)

inst_318:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x2e8d71 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3bb9ca and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54ae8d71; op2val:0x3fbbb9ca; valaddr_reg:x16; val_offset:512; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 512, x17, x15, 512, x18)

inst_319:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x2e8d71 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3bb9ca and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54ae8d71; op2val:0x3fbbb9ca; valaddr_reg:x16; val_offset:520; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 520, x17, x15, 520, x18)

inst_320:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x2e8d71 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3bb9ca and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54ae8d71; op2val:0x3fbbb9ca; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_321:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x5271c7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1bb564 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54d271c7; op2val:0x3f9bb564; valaddr_reg:x16; val_offset:536; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 536, x17, x15, 536, x18)

inst_322:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x5271c7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1bb564 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54d271c7; op2val:0x3f9bb564; valaddr_reg:x16; val_offset:544; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 544, x17, x15, 544, x18)

inst_323:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x5271c7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1bb564 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54d271c7; op2val:0x3f9bb564; valaddr_reg:x16; val_offset:552; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 552, x17, x15, 552, x18)

inst_324:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x5271c7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1bb564 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54d271c7; op2val:0x3f9bb564; valaddr_reg:x16; val_offset:560; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 560, x17, x15, 560, x18)

inst_325:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x5271c7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1bb564 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54d271c7; op2val:0x3f9bb564; valaddr_reg:x16; val_offset:568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 568, x17, x15, 568, x18)

inst_326:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x4c65ca and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2050a2 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x53cc65ca; op2val:0x40a050a2; valaddr_reg:x16; val_offset:576; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 576, x17, x15, 576, x18)

inst_327:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x4c65ca and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2050a2 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x53cc65ca; op2val:0x40a050a2; valaddr_reg:x16; val_offset:584; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 584, x17, x15, 584, x18)

inst_328:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x4c65ca and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2050a2 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x53cc65ca; op2val:0x40a050a2; valaddr_reg:x16; val_offset:592; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 592, x17, x15, 592, x18)

inst_329:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x4c65ca and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2050a2 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x53cc65ca; op2val:0x40a050a2; valaddr_reg:x16; val_offset:600; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 600, x17, x15, 600, x18)

inst_330:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x4c65ca and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2050a2 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x53cc65ca; op2val:0x40a050a2; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 608, x17, x15, 608, x18)

inst_331:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x008d7c and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ee63e and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54808d7c; op2val:0x3ffee63e; valaddr_reg:x16; val_offset:616; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 616, x17, x15, 616, x18)

inst_332:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x008d7c and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ee63e and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54808d7c; op2val:0x3ffee63e; valaddr_reg:x16; val_offset:624; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 624, x17, x15, 624, x18)

inst_333:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x008d7c and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ee63e and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54808d7c; op2val:0x3ffee63e; valaddr_reg:x16; val_offset:632; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 632, x17, x15, 632, x18)

inst_334:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x008d7c and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ee63e and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54808d7c; op2val:0x3ffee63e; valaddr_reg:x16; val_offset:640; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 640, x17, x15, 640, x18)

inst_335:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x008d7c and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ee63e and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54808d7c; op2val:0x3ffee63e; valaddr_reg:x16; val_offset:648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 648, x17, x15, 648, x18)

inst_336:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x0f0b53 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x651373 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x548f0b53; op2val:0x3fe51373; valaddr_reg:x16; val_offset:656; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 656, x17, x15, 656, x18)

inst_337:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x0f0b53 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x651373 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x548f0b53; op2val:0x3fe51373; valaddr_reg:x16; val_offset:664; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 664, x17, x15, 664, x18)

inst_338:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x0f0b53 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x651373 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x548f0b53; op2val:0x3fe51373; valaddr_reg:x16; val_offset:672; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 672, x17, x15, 672, x18)

inst_339:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x0f0b53 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x651373 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x548f0b53; op2val:0x3fe51373; valaddr_reg:x16; val_offset:680; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 680, x17, x15, 680, x18)

inst_340:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x0f0b53 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x651373 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x548f0b53; op2val:0x3fe51373; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 688, x17, x15, 688, x18)

inst_341:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x7752bb and fs2 == 0 and fe2 == 0x81 and fm2 == 0x047d99 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x53f752bb; op2val:0x40847d99; valaddr_reg:x16; val_offset:696; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 696, x17, x15, 696, x18)

inst_342:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x7752bb and fs2 == 0 and fe2 == 0x81 and fm2 == 0x047d99 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x53f752bb; op2val:0x40847d99; valaddr_reg:x16; val_offset:704; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 704, x17, x15, 704, x18)

inst_343:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x7752bb and fs2 == 0 and fe2 == 0x81 and fm2 == 0x047d99 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x53f752bb; op2val:0x40847d99; valaddr_reg:x16; val_offset:712; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 712, x17, x15, 712, x18)

inst_344:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x7752bb and fs2 == 0 and fe2 == 0x81 and fm2 == 0x047d99 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x53f752bb; op2val:0x40847d99; valaddr_reg:x16; val_offset:720; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 720, x17, x15, 720, x18)

inst_345:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x7752bb and fs2 == 0 and fe2 == 0x81 and fm2 == 0x047d99 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x53f752bb; op2val:0x40847d99; valaddr_reg:x16; val_offset:728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 728, x17, x15, 728, x18)

inst_346:
// fs1 == 0 and fe1 == 0xa5 and fm1 == 0x4bd817 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x20c012 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x52cbd817; op2val:0x41a0c012; valaddr_reg:x16; val_offset:736; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 736, x17, x15, 736, x18)

inst_347:
// fs1 == 0 and fe1 == 0xa5 and fm1 == 0x4bd817 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x20c012 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x52cbd817; op2val:0x41a0c012; valaddr_reg:x16; val_offset:744; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 744, x17, x15, 744, x18)

inst_348:
// fs1 == 0 and fe1 == 0xa5 and fm1 == 0x4bd817 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x20c012 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x52cbd817; op2val:0x41a0c012; valaddr_reg:x16; val_offset:752; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 752, x17, x15, 752, x18)

inst_349:
// fs1 == 0 and fe1 == 0xa5 and fm1 == 0x4bd817 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x20c012 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x52cbd817; op2val:0x41a0c012; valaddr_reg:x16; val_offset:760; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 760, x17, x15, 760, x18)

inst_350:
// fs1 == 0 and fe1 == 0xa5 and fm1 == 0x4bd817 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x20c012 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x52cbd817; op2val:0x41a0c012; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 768, x17, x15, 768, x18)

inst_351:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x78b483 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x03c122 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54f8b483; op2val:0x3f83c122; valaddr_reg:x16; val_offset:776; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 776, x17, x15, 776, x18)

inst_352:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x78b483 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x03c122 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54f8b483; op2val:0x3f83c122; valaddr_reg:x16; val_offset:784; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 784, x17, x15, 784, x18)

inst_353:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x78b483 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x03c122 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54f8b483; op2val:0x3f83c122; valaddr_reg:x16; val_offset:792; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 792, x17, x15, 792, x18)

inst_354:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x78b483 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x03c122 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54f8b483; op2val:0x3f83c122; valaddr_reg:x16; val_offset:800; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 800, x17, x15, 800, x18)

inst_355:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x78b483 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x03c122 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54f8b483; op2val:0x3f83c122; valaddr_reg:x16; val_offset:808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 808, x17, x15, 808, x18)

inst_356:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x2b75ad and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3f1cab and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54ab75ad; op2val:0x3fbf1cab; valaddr_reg:x16; val_offset:816; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 816, x17, x15, 816, x18)

inst_357:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x2b75ad and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3f1cab and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54ab75ad; op2val:0x3fbf1cab; valaddr_reg:x16; val_offset:824; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 824, x17, x15, 824, x18)

inst_358:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x2b75ad and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3f1cab and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54ab75ad; op2val:0x3fbf1cab; valaddr_reg:x16; val_offset:832; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 832, x17, x15, 832, x18)

inst_359:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x2b75ad and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3f1cab and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54ab75ad; op2val:0x3fbf1cab; valaddr_reg:x16; val_offset:840; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 840, x17, x15, 840, x18)

inst_360:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x2b75ad and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3f1cab and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54ab75ad; op2val:0x3fbf1cab; valaddr_reg:x16; val_offset:848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 848, x17, x15, 848, x18)

inst_361:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x314b26 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x38d2cb and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x53b14b26; op2val:0x40b8d2cb; valaddr_reg:x16; val_offset:856; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 856, x17, x15, 856, x18)

inst_362:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x314b26 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x38d2cb and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x53b14b26; op2val:0x40b8d2cb; valaddr_reg:x16; val_offset:864; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 864, x17, x15, 864, x18)

inst_363:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x314b26 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x38d2cb and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x53b14b26; op2val:0x40b8d2cb; valaddr_reg:x16; val_offset:872; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 872, x17, x15, 872, x18)

inst_364:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x314b26 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x38d2cb and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x53b14b26; op2val:0x40b8d2cb; valaddr_reg:x16; val_offset:880; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 880, x17, x15, 880, x18)

inst_365:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x314b26 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x38d2cb and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x53b14b26; op2val:0x40b8d2cb; valaddr_reg:x16; val_offset:888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 888, x17, x15, 888, x18)

inst_366:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x59018c and fs2 == 0 and fe2 == 0x82 and fm2 == 0x17001a and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x5359018c; op2val:0x4117001a; valaddr_reg:x16; val_offset:896; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 896, x17, x15, 896, x18)

inst_367:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x59018c and fs2 == 0 and fe2 == 0x82 and fm2 == 0x17001a and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x5359018c; op2val:0x4117001a; valaddr_reg:x16; val_offset:904; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 904, x17, x15, 904, x18)

inst_368:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x59018c and fs2 == 0 and fe2 == 0x82 and fm2 == 0x17001a and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x5359018c; op2val:0x4117001a; valaddr_reg:x16; val_offset:912; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 912, x17, x15, 912, x18)

inst_369:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x59018c and fs2 == 0 and fe2 == 0x82 and fm2 == 0x17001a and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x5359018c; op2val:0x4117001a; valaddr_reg:x16; val_offset:920; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 920, x17, x15, 920, x18)

inst_370:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x59018c and fs2 == 0 and fe2 == 0x82 and fm2 == 0x17001a and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x5359018c; op2val:0x4117001a; valaddr_reg:x16; val_offset:928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 928, x17, x15, 928, x18)

inst_371:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x4c44fe and fs2 == 0 and fe2 == 0x7f and fm2 == 0x206a60 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54cc44fe; op2val:0x3fa06a60; valaddr_reg:x16; val_offset:936; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 936, x17, x15, 936, x18)

inst_372:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x4c44fe and fs2 == 0 and fe2 == 0x7f and fm2 == 0x206a60 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54cc44fe; op2val:0x3fa06a60; valaddr_reg:x16; val_offset:944; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 944, x17, x15, 944, x18)

inst_373:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x4c44fe and fs2 == 0 and fe2 == 0x7f and fm2 == 0x206a60 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54cc44fe; op2val:0x3fa06a60; valaddr_reg:x16; val_offset:952; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 952, x17, x15, 952, x18)

inst_374:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x4c44fe and fs2 == 0 and fe2 == 0x7f and fm2 == 0x206a60 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54cc44fe; op2val:0x3fa06a60; valaddr_reg:x16; val_offset:960; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 960, x17, x15, 960, x18)

inst_375:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x4c44fe and fs2 == 0 and fe2 == 0x7f and fm2 == 0x206a60 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54cc44fe; op2val:0x3fa06a60; valaddr_reg:x16; val_offset:968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 968, x17, x15, 968, x18)

inst_376:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x1e6299 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x4ee359 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x531e6299; op2val:0x414ee359; valaddr_reg:x16; val_offset:976; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 976, x17, x15, 976, x18)

inst_377:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x1e6299 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x4ee359 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x531e6299; op2val:0x414ee359; valaddr_reg:x16; val_offset:984; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 984, x17, x15, 984, x18)

inst_378:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x1e6299 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x4ee359 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x531e6299; op2val:0x414ee359; valaddr_reg:x16; val_offset:992; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 992, x17, x15, 992, x18)

inst_379:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x1e6299 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x4ee359 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x531e6299; op2val:0x414ee359; valaddr_reg:x16; val_offset:1000; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1000, x17, x15, 1000, x18)

inst_380:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x1e6299 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x4ee359 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x531e6299; op2val:0x414ee359; valaddr_reg:x16; val_offset:1008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1008, x17, x15, 1008, x18)

inst_381:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x2e02bb and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3c4f6f and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54ae02bb; op2val:0x3fbc4f6f; valaddr_reg:x16; val_offset:1016; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1016, x17, x15, 1016, x18)

inst_382:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x2e02bb and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3c4f6f and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54ae02bb; op2val:0x3fbc4f6f; valaddr_reg:x16; val_offset:1024; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1024, x17, x15, 1024, x18)

inst_383:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x2e02bb and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3c4f6f and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54ae02bb; op2val:0x3fbc4f6f; valaddr_reg:x16; val_offset:1032; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1032, x17, x15, 1032, x18)

inst_384:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x2e02bb and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3c4f6f and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54ae02bb; op2val:0x3fbc4f6f; valaddr_reg:x16; val_offset:1040; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1040, x17, x15, 1040, x18)

inst_385:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x2e02bb and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3c4f6f and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54ae02bb; op2val:0x3fbc4f6f; valaddr_reg:x16; val_offset:1048; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1048, x17, x15, 1048, x18)

inst_386:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x03499e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7996ea and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x5383499e; op2val:0x40f996ea; valaddr_reg:x16; val_offset:1056; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1056, x17, x15, 1056, x18)

inst_387:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x03499e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7996ea and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x5383499e; op2val:0x40f996ea; valaddr_reg:x16; val_offset:1064; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1064, x17, x15, 1064, x18)

inst_388:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x03499e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7996ea and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x5383499e; op2val:0x40f996ea; valaddr_reg:x16; val_offset:1072; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1072, x17, x15, 1072, x18)

inst_389:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x03499e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7996ea and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x5383499e; op2val:0x40f996ea; valaddr_reg:x16; val_offset:1080; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1080, x17, x15, 1080, x18)

inst_390:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x03499e and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7996ea and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x5383499e; op2val:0x40f996ea; valaddr_reg:x16; val_offset:1088; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1088, x17, x15, 1088, x18)

inst_391:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x5db472 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x13ccd2 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x535db472; op2val:0x4113ccd2; valaddr_reg:x16; val_offset:1096; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1096, x17, x15, 1096, x18)

inst_392:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x5db472 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x13ccd2 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x535db472; op2val:0x4113ccd2; valaddr_reg:x16; val_offset:1104; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1104, x17, x15, 1104, x18)

inst_393:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x5db472 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x13ccd2 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x535db472; op2val:0x4113ccd2; valaddr_reg:x16; val_offset:1112; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1112, x17, x15, 1112, x18)

inst_394:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x5db472 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x13ccd2 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x535db472; op2val:0x4113ccd2; valaddr_reg:x16; val_offset:1120; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1120, x17, x15, 1120, x18)

inst_395:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x5db472 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x13ccd2 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x535db472; op2val:0x4113ccd2; valaddr_reg:x16; val_offset:1128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1128, x17, x15, 1128, x18)

inst_396:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x06571e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x73eaf9 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x5486571e; op2val:0x3ff3eaf9; valaddr_reg:x16; val_offset:1136; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1136, x17, x15, 1136, x18)

inst_397:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x06571e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x73eaf9 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x5486571e; op2val:0x3ff3eaf9; valaddr_reg:x16; val_offset:1144; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1144, x17, x15, 1144, x18)

inst_398:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x06571e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x73eaf9 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x5486571e; op2val:0x3ff3eaf9; valaddr_reg:x16; val_offset:1152; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1152, x17, x15, 1152, x18)

inst_399:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x06571e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x73eaf9 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x5486571e; op2val:0x3ff3eaf9; valaddr_reg:x16; val_offset:1160; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1160, x17, x15, 1160, x18)

inst_400:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x06571e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x73eaf9 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x5486571e; op2val:0x3ff3eaf9; valaddr_reg:x16; val_offset:1168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1168, x17, x15, 1168, x18)

inst_401:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x68be36 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cca5c and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x5468be36; op2val:0x400cca5c; valaddr_reg:x16; val_offset:1176; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1176, x17, x15, 1176, x18)

inst_402:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x68be36 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cca5c and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x5468be36; op2val:0x400cca5c; valaddr_reg:x16; val_offset:1184; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1184, x17, x15, 1184, x18)

inst_403:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x68be36 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cca5c and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x5468be36; op2val:0x400cca5c; valaddr_reg:x16; val_offset:1192; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1192, x17, x15, 1192, x18)

inst_404:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x68be36 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cca5c and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x5468be36; op2val:0x400cca5c; valaddr_reg:x16; val_offset:1200; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1200, x17, x15, 1200, x18)

inst_405:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x68be36 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0cca5c and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x5468be36; op2val:0x400cca5c; valaddr_reg:x16; val_offset:1208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1208, x17, x15, 1208, x18)

inst_406:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x7d2a86 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x016ecc and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54fd2a86; op2val:0x3f816ecc; valaddr_reg:x16; val_offset:1216; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1216, x17, x15, 1216, x18)

inst_407:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x7d2a86 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x016ecc and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54fd2a86; op2val:0x3f816ecc; valaddr_reg:x16; val_offset:1224; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1224, x17, x15, 1224, x18)

inst_408:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x7d2a86 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x016ecc and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54fd2a86; op2val:0x3f816ecc; valaddr_reg:x16; val_offset:1232; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1232, x17, x15, 1232, x18)

inst_409:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x7d2a86 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x016ecc and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54fd2a86; op2val:0x3f816ecc; valaddr_reg:x16; val_offset:1240; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1240, x17, x15, 1240, x18)

inst_410:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x7d2a86 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x016ecc and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x54fd2a86; op2val:0x3f816ecc; valaddr_reg:x16; val_offset:1248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1248, x17, x15, 1248, x18)

inst_411:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x09e0cc and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6da8bf and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x5489e0cc; op2val:0x3feda8bf; valaddr_reg:x16; val_offset:1256; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1256, x17, x15, 1256, x18)

inst_412:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x09e0cc and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6da8bf and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x5489e0cc; op2val:0x3feda8bf; valaddr_reg:x16; val_offset:1264; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1264, x17, x15, 1264, x18)

inst_413:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x09e0cc and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6da8bf and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x5489e0cc; op2val:0x3feda8bf; valaddr_reg:x16; val_offset:1272; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1272, x17, x15, 1272, x18)

inst_414:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x09e0cc and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6da8bf and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x5489e0cc; op2val:0x3feda8bf; valaddr_reg:x16; val_offset:1280; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1280, x17, x15, 1280, x18)

inst_415:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x09e0cc and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6da8bf and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x5489e0cc; op2val:0x3feda8bf; valaddr_reg:x16; val_offset:1288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1288, x17, x15, 1288, x18)

inst_416:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x18f81f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x563688 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x5498f81f; op2val:0x3fd63688; valaddr_reg:x16; val_offset:1296; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1296, x17, x15, 1296, x18)

inst_417:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x18f81f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x563688 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x5498f81f; op2val:0x3fd63688; valaddr_reg:x16; val_offset:1304; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1304, x17, x15, 1304, x18)

inst_418:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x18f81f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x563688 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x5498f81f; op2val:0x3fd63688; valaddr_reg:x16; val_offset:1312; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1312, x17, x15, 1312, x18)

inst_419:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x18f81f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x563688 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x5498f81f; op2val:0x3fd63688; valaddr_reg:x16; val_offset:1320; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1320, x17, x15, 1320, x18)

inst_420:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x18f81f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x563688 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x5498f81f; op2val:0x3fd63688; valaddr_reg:x16; val_offset:1328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1328, x17, x15, 1328, x18)

inst_421:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2ee3a7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x4afa5b and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2ee3a7; op2val:0xcafa5b; valaddr_reg:x16; val_offset:1336; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1336, x17, x15, 1336, x18)

inst_422:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2ee3a7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x4afa5b and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2ee3a7; op2val:0xcafa5b; valaddr_reg:x16; val_offset:1344; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1344, x17, x15, 1344, x18)

inst_423:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2ee3a7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x4afa5b and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2ee3a7; op2val:0xcafa5b; valaddr_reg:x16; val_offset:1352; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1352, x17, x15, 1352, x18)

inst_424:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2ee3a7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x4afa5b and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2ee3a7; op2val:0xcafa5b; valaddr_reg:x16; val_offset:1360; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1360, x17, x15, 1360, x18)

inst_425:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2ee3a7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x4afa5b and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2ee3a7; op2val:0xcafa5b; valaddr_reg:x16; val_offset:1368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1368, x17, x15, 1368, x18)

inst_426:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x06b57a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03c2ba and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f06b57a; op2val:0x103c2ba; valaddr_reg:x16; val_offset:1376; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1376, x17, x15, 1376, x18)

inst_427:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x06b57a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03c2ba and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f06b57a; op2val:0x103c2ba; valaddr_reg:x16; val_offset:1384; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1384, x17, x15, 1384, x18)

inst_428:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x06b57a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03c2ba and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f06b57a; op2val:0x103c2ba; valaddr_reg:x16; val_offset:1392; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1392, x17, x15, 1392, x18)

inst_429:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x06b57a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03c2ba and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f06b57a; op2val:0x103c2ba; valaddr_reg:x16; val_offset:1400; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1400, x17, x15, 1400, x18)

inst_430:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x06b57a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03c2ba and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f06b57a; op2val:0x103c2ba; valaddr_reg:x16; val_offset:1408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1408, x17, x15, 1408, x18)

inst_431:
// fs1 == 0 and fe1 == 0x76 and fm1 == 0x2d96fe and fs2 == 0 and fe2 == 0x09 and fm2 == 0x4c7f55 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3b2d96fe; op2val:0x4cc7f55; valaddr_reg:x16; val_offset:1416; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1416, x17, x15, 1416, x18)

inst_432:
// fs1 == 0 and fe1 == 0x76 and fm1 == 0x2d96fe and fs2 == 0 and fe2 == 0x09 and fm2 == 0x4c7f55 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3b2d96fe; op2val:0x4cc7f55; valaddr_reg:x16; val_offset:1424; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1424, x17, x15, 1424, x18)

inst_433:
// fs1 == 0 and fe1 == 0x76 and fm1 == 0x2d96fe and fs2 == 0 and fe2 == 0x09 and fm2 == 0x4c7f55 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3b2d96fe; op2val:0x4cc7f55; valaddr_reg:x16; val_offset:1432; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1432, x17, x15, 1432, x18)

inst_434:
// fs1 == 0 and fe1 == 0x76 and fm1 == 0x2d96fe and fs2 == 0 and fe2 == 0x09 and fm2 == 0x4c7f55 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3b2d96fe; op2val:0x4cc7f55; valaddr_reg:x16; val_offset:1440; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1440, x17, x15, 1440, x18)

inst_435:
// fs1 == 0 and fe1 == 0x76 and fm1 == 0x2d96fe and fs2 == 0 and fe2 == 0x09 and fm2 == 0x4c7f55 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3b2d96fe; op2val:0x4cc7f55; valaddr_reg:x16; val_offset:1448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1448, x17, x15, 1448, x18)

inst_436:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x477cc9 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x31f309 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec77cc9; op2val:0x131f309; valaddr_reg:x16; val_offset:1456; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1456, x17, x15, 1456, x18)

inst_437:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x477cc9 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x31f309 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec77cc9; op2val:0x131f309; valaddr_reg:x16; val_offset:1464; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1464, x17, x15, 1464, x18)

inst_438:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x477cc9 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x31f309 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec77cc9; op2val:0x131f309; valaddr_reg:x16; val_offset:1472; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1472, x17, x15, 1472, x18)

inst_439:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x477cc9 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x31f309 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec77cc9; op2val:0x131f309; valaddr_reg:x16; val_offset:1480; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1480, x17, x15, 1480, x18)

inst_440:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x477cc9 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x31f309 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec77cc9; op2val:0x131f309; valaddr_reg:x16; val_offset:1488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1488, x17, x15, 1488, x18)

inst_441:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x297618 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x517abe and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f297618; op2val:0xd17abe; valaddr_reg:x16; val_offset:1496; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1496, x17, x15, 1496, x18)

inst_442:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x297618 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x517abe and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f297618; op2val:0xd17abe; valaddr_reg:x16; val_offset:1504; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1504, x17, x15, 1504, x18)

inst_443:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x297618 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x517abe and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f297618; op2val:0xd17abe; valaddr_reg:x16; val_offset:1512; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1512, x17, x15, 1512, x18)

inst_444:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x297618 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x517abe and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f297618; op2val:0xd17abe; valaddr_reg:x16; val_offset:1520; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1520, x17, x15, 1520, x18)

inst_445:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x297618 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x517abe and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f297618; op2val:0xd17abe; valaddr_reg:x16; val_offset:1528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1528, x17, x15, 1528, x18)

inst_446:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x743aa4 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x115991 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef43aa4; op2val:0x1115991; valaddr_reg:x16; val_offset:1536; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1536, x17, x15, 1536, x18)

inst_447:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x743aa4 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x115991 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef43aa4; op2val:0x1115991; valaddr_reg:x16; val_offset:1544; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1544, x17, x15, 1544, x18)

inst_448:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x743aa4 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x115991 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef43aa4; op2val:0x1115991; valaddr_reg:x16; val_offset:1552; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1552, x17, x15, 1552, x18)

inst_449:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x743aa4 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x115991 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef43aa4; op2val:0x1115991; valaddr_reg:x16; val_offset:1560; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1560, x17, x15, 1560, x18)

inst_450:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x743aa4 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x115991 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef43aa4; op2val:0x1115991; valaddr_reg:x16; val_offset:1568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1568, x17, x15, 1568, x18)

inst_451:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x628155 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1cb930 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e628155; op2val:0x19cb930; valaddr_reg:x16; val_offset:1576; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1576, x17, x15, 1576, x18)

inst_452:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x628155 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1cb930 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e628155; op2val:0x19cb930; valaddr_reg:x16; val_offset:1584; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1584, x17, x15, 1584, x18)

inst_453:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x628155 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1cb930 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e628155; op2val:0x19cb930; valaddr_reg:x16; val_offset:1592; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1592, x17, x15, 1592, x18)

inst_454:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x628155 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1cb930 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e628155; op2val:0x19cb930; valaddr_reg:x16; val_offset:1600; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1600, x17, x15, 1600, x18)

inst_455:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x628155 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1cb930 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e628155; op2val:0x19cb930; valaddr_reg:x16; val_offset:1608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1608, x17, x15, 1608, x18)

inst_456:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x18c1b2 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x686316 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e18c1b2; op2val:0x1e86316; valaddr_reg:x16; val_offset:1616; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1616, x17, x15, 1616, x18)

inst_457:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x18c1b2 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x686316 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e18c1b2; op2val:0x1e86316; valaddr_reg:x16; val_offset:1624; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1624, x17, x15, 1624, x18)

inst_458:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x18c1b2 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x686316 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e18c1b2; op2val:0x1e86316; valaddr_reg:x16; val_offset:1632; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1632, x17, x15, 1632, x18)

inst_459:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x18c1b2 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x686316 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e18c1b2; op2val:0x1e86316; valaddr_reg:x16; val_offset:1640; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1640, x17, x15, 1640, x18)

inst_460:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x18c1b2 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x686316 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e18c1b2; op2val:0x1e86316; valaddr_reg:x16; val_offset:1648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1648, x17, x15, 1648, x18)

inst_461:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x703531 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x13c87d and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f703531; op2val:0x93c87d; valaddr_reg:x16; val_offset:1656; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1656, x17, x15, 1656, x18)

inst_462:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x703531 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x13c87d and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f703531; op2val:0x93c87d; valaddr_reg:x16; val_offset:1664; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1664, x17, x15, 1664, x18)

inst_463:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x703531 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x13c87d and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f703531; op2val:0x93c87d; valaddr_reg:x16; val_offset:1672; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1672, x17, x15, 1672, x18)

inst_464:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x703531 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x13c87d and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f703531; op2val:0x93c87d; valaddr_reg:x16; val_offset:1680; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1680, x17, x15, 1680, x18)

inst_465:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x703531 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x13c87d and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f703531; op2val:0x93c87d; valaddr_reg:x16; val_offset:1688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1688, x17, x15, 1688, x18)

inst_466:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2090e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5d15a5 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2090e5; op2val:0xdd15a5; valaddr_reg:x16; val_offset:1696; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1696, x17, x15, 1696, x18)

inst_467:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2090e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5d15a5 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2090e5; op2val:0xdd15a5; valaddr_reg:x16; val_offset:1704; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1704, x17, x15, 1704, x18)

inst_468:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2090e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5d15a5 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2090e5; op2val:0xdd15a5; valaddr_reg:x16; val_offset:1712; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1712, x17, x15, 1712, x18)

inst_469:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2090e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5d15a5 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2090e5; op2val:0xdd15a5; valaddr_reg:x16; val_offset:1720; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1720, x17, x15, 1720, x18)

inst_470:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2090e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5d15a5 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2090e5; op2val:0xdd15a5; valaddr_reg:x16; val_offset:1728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1728, x17, x15, 1728, x18)

inst_471:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x475ed0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x320dca and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec75ed0; op2val:0x1320dca; valaddr_reg:x16; val_offset:1736; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1736, x17, x15, 1736, x18)

inst_472:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x475ed0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x320dca and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec75ed0; op2val:0x1320dca; valaddr_reg:x16; val_offset:1744; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1744, x17, x15, 1744, x18)

inst_473:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x475ed0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x320dca and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec75ed0; op2val:0x1320dca; valaddr_reg:x16; val_offset:1752; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1752, x17, x15, 1752, x18)

inst_474:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x475ed0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x320dca and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec75ed0; op2val:0x1320dca; valaddr_reg:x16; val_offset:1760; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1760, x17, x15, 1760, x18)

inst_475:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x475ed0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x320dca and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec75ed0; op2val:0x1320dca; valaddr_reg:x16; val_offset:1768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1768, x17, x15, 1768, x18)

inst_476:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x40e698 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x380688 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f40e698; op2val:0xb80688; valaddr_reg:x16; val_offset:1776; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1776, x17, x15, 1776, x18)

inst_477:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x40e698 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x380688 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f40e698; op2val:0xb80688; valaddr_reg:x16; val_offset:1784; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1784, x17, x15, 1784, x18)

inst_478:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x40e698 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x380688 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f40e698; op2val:0xb80688; valaddr_reg:x16; val_offset:1792; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1792, x17, x15, 1792, x18)

inst_479:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x40e698 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x380688 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f40e698; op2val:0xb80688; valaddr_reg:x16; val_offset:1800; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1800, x17, x15, 1800, x18)

inst_480:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x40e698 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x380688 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f40e698; op2val:0xb80688; valaddr_reg:x16; val_offset:1808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1808, x17, x15, 1808, x18)

inst_481:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3ff473 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x38eead and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3ff473; op2val:0xb8eead; valaddr_reg:x16; val_offset:1816; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1816, x17, x15, 1816, x18)

inst_482:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3ff473 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x38eead and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3ff473; op2val:0xb8eead; valaddr_reg:x16; val_offset:1824; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1824, x17, x15, 1824, x18)

inst_483:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3ff473 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x38eead and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3ff473; op2val:0xb8eead; valaddr_reg:x16; val_offset:1832; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1832, x17, x15, 1832, x18)

inst_484:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3ff473 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x38eead and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3ff473; op2val:0xb8eead; valaddr_reg:x16; val_offset:1840; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1840, x17, x15, 1840, x18)

inst_485:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3ff473 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x38eead and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3ff473; op2val:0xb8eead; valaddr_reg:x16; val_offset:1848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1848, x17, x15, 1848, x18)

inst_486:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3fbfc5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x39217b and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3fbfc5; op2val:0xb9217b; valaddr_reg:x16; val_offset:1856; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1856, x17, x15, 1856, x18)

inst_487:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3fbfc5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x39217b and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3fbfc5; op2val:0xb9217b; valaddr_reg:x16; val_offset:1864; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1864, x17, x15, 1864, x18)

inst_488:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3fbfc5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x39217b and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3fbfc5; op2val:0xb9217b; valaddr_reg:x16; val_offset:1872; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1872, x17, x15, 1872, x18)

inst_489:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3fbfc5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x39217b and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3fbfc5; op2val:0xb9217b; valaddr_reg:x16; val_offset:1880; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1880, x17, x15, 1880, x18)

inst_490:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3fbfc5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x39217b and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3fbfc5; op2val:0xb9217b; valaddr_reg:x16; val_offset:1888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1888, x17, x15, 1888, x18)

inst_491:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5b98c8 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x21a761 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5b98c8; op2val:0xa1a761; valaddr_reg:x16; val_offset:1896; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1896, x17, x15, 1896, x18)

inst_492:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5b98c8 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x21a761 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5b98c8; op2val:0xa1a761; valaddr_reg:x16; val_offset:1904; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1904, x17, x15, 1904, x18)

inst_493:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5b98c8 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x21a761 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5b98c8; op2val:0xa1a761; valaddr_reg:x16; val_offset:1912; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1912, x17, x15, 1912, x18)

inst_494:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5b98c8 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x21a761 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5b98c8; op2val:0xa1a761; valaddr_reg:x16; val_offset:1920; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1920, x17, x15, 1920, x18)

inst_495:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5b98c8 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x21a761 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5b98c8; op2val:0xa1a761; valaddr_reg:x16; val_offset:1928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1928, x17, x15, 1928, x18)

inst_496:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x17303b and fs2 == 0 and fe2 == 0x04 and fm2 == 0x6acc2b and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d97303b; op2val:0x26acc2b; valaddr_reg:x16; val_offset:1936; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1936, x17, x15, 1936, x18)

inst_497:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x17303b and fs2 == 0 and fe2 == 0x04 and fm2 == 0x6acc2b and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d97303b; op2val:0x26acc2b; valaddr_reg:x16; val_offset:1944; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1944, x17, x15, 1944, x18)

inst_498:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x17303b and fs2 == 0 and fe2 == 0x04 and fm2 == 0x6acc2b and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d97303b; op2val:0x26acc2b; valaddr_reg:x16; val_offset:1952; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1952, x17, x15, 1952, x18)

inst_499:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x17303b and fs2 == 0 and fe2 == 0x04 and fm2 == 0x6acc2b and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d97303b; op2val:0x26acc2b; valaddr_reg:x16; val_offset:1960; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1960, x17, x15, 1960, x18)

inst_500:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x17303b and fs2 == 0 and fe2 == 0x04 and fm2 == 0x6acc2b and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d97303b; op2val:0x26acc2b; valaddr_reg:x16; val_offset:1968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1968, x17, x15, 1968, x18)

inst_501:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5973ae and fs2 == 0 and fe2 == 0x01 and fm2 == 0x233f95 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5973ae; op2val:0xa33f95; valaddr_reg:x16; val_offset:1976; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1976, x17, x15, 1976, x18)

inst_502:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5973ae and fs2 == 0 and fe2 == 0x01 and fm2 == 0x233f95 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5973ae; op2val:0xa33f95; valaddr_reg:x16; val_offset:1984; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1984, x17, x15, 1984, x18)

inst_503:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5973ae and fs2 == 0 and fe2 == 0x01 and fm2 == 0x233f95 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5973ae; op2val:0xa33f95; valaddr_reg:x16; val_offset:1992; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1992, x17, x15, 1992, x18)

inst_504:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5973ae and fs2 == 0 and fe2 == 0x01 and fm2 == 0x233f95 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5973ae; op2val:0xa33f95; valaddr_reg:x16; val_offset:2000; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 2000, x17, x15, 2000, x18)

inst_505:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5973ae and fs2 == 0 and fe2 == 0x01 and fm2 == 0x233f95 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5973ae; op2val:0xa33f95; valaddr_reg:x16; val_offset:2008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 2008, x17, x15, 2008, x18)

inst_506:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3720f5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x41d86c and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3720f5; op2val:0xc1d86c; valaddr_reg:x16; val_offset:2016; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 2016, x17, x15, 2016, x18)

inst_507:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3720f5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x41d86c and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3720f5; op2val:0xc1d86c; valaddr_reg:x16; val_offset:2024; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_3)

inst_508:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3720f5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x41d86c and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3720f5; op2val:0xc1d86c; valaddr_reg:x16; val_offset:0; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 0, x17, x15, 0, x18)

inst_509:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3720f5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x41d86c and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3720f5; op2val:0xc1d86c; valaddr_reg:x16; val_offset:8; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 8, x17, x15, 8, x18)

inst_510:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3720f5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x41d86c and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3720f5; op2val:0xc1d86c; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 16, x17, x15, 16, x18)

inst_511:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2a7731 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x503ece and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e2a7731; op2val:0x1d03ece; valaddr_reg:x16; val_offset:24; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 24, x17, x15, 24, x18)

inst_512:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2a7731 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x503ece and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e2a7731; op2val:0x1d03ece; valaddr_reg:x16; val_offset:32; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 32, x17, x15, 32, x18)

inst_513:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2a7731 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x503ece and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e2a7731; op2val:0x1d03ece; valaddr_reg:x16; val_offset:40; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 40, x17, x15, 40, x18)

inst_514:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2a7731 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x503ece and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e2a7731; op2val:0x1d03ece; valaddr_reg:x16; val_offset:48; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 48, x17, x15, 48, x18)

inst_515:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2a7731 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x503ece and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e2a7731; op2val:0x1d03ece; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 56, x17, x15, 56, x18)

inst_516:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6a2501 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x179c2b and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eea2501; op2val:0x1179c2b; valaddr_reg:x16; val_offset:64; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 64, x17, x15, 64, x18)

inst_517:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6a2501 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x179c2b and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eea2501; op2val:0x1179c2b; valaddr_reg:x16; val_offset:72; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 72, x17, x15, 72, x18)

inst_518:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6a2501 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x179c2b and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eea2501; op2val:0x1179c2b; valaddr_reg:x16; val_offset:80; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 80, x17, x15, 80, x18)

inst_519:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6a2501 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x179c2b and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eea2501; op2val:0x1179c2b; valaddr_reg:x16; val_offset:88; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 88, x17, x15, 88, x18)

inst_520:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6a2501 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x179c2b and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eea2501; op2val:0x1179c2b; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 96, x17, x15, 96, x18)

inst_521:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x74295e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1163d9 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e74295e; op2val:0x19163d9; valaddr_reg:x16; val_offset:104; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 104, x17, x15, 104, x18)

inst_522:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x74295e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1163d9 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e74295e; op2val:0x19163d9; valaddr_reg:x16; val_offset:112; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 112, x17, x15, 112, x18)

inst_523:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x74295e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1163d9 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e74295e; op2val:0x19163d9; valaddr_reg:x16; val_offset:120; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 120, x17, x15, 120, x18)

inst_524:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x74295e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1163d9 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e74295e; op2val:0x19163d9; valaddr_reg:x16; val_offset:128; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 128, x17, x15, 128, x18)

inst_525:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x74295e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1163d9 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e74295e; op2val:0x19163d9; valaddr_reg:x16; val_offset:136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 136, x17, x15, 136, x18)

inst_526:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x28aa18 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x52781c and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3da8aa18; op2val:0x252781c; valaddr_reg:x16; val_offset:144; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 144, x17, x15, 144, x18)

inst_527:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x28aa18 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x52781c and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3da8aa18; op2val:0x252781c; valaddr_reg:x16; val_offset:152; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 152, x17, x15, 152, x18)

inst_528:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x28aa18 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x52781c and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3da8aa18; op2val:0x252781c; valaddr_reg:x16; val_offset:160; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 160, x17, x15, 160, x18)

inst_529:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x28aa18 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x52781c and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3da8aa18; op2val:0x252781c; valaddr_reg:x16; val_offset:168; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 168, x17, x15, 168, x18)

inst_530:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x28aa18 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x52781c and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3da8aa18; op2val:0x252781c; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 176, x17, x15, 176, x18)

inst_531:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x263348 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5596f2 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f263348; op2val:0xd596f2; valaddr_reg:x16; val_offset:184; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 184, x17, x15, 184, x18)

inst_532:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x263348 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5596f2 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f263348; op2val:0xd596f2; valaddr_reg:x16; val_offset:192; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 192, x17, x15, 192, x18)

inst_533:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x263348 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5596f2 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f263348; op2val:0xd596f2; valaddr_reg:x16; val_offset:200; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 200, x17, x15, 200, x18)

inst_534:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x263348 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5596f2 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f263348; op2val:0xd596f2; valaddr_reg:x16; val_offset:208; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 208, x17, x15, 208, x18)

inst_535:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x263348 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5596f2 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f263348; op2val:0xd596f2; valaddr_reg:x16; val_offset:216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 216, x17, x15, 216, x18)

inst_536:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5f7946 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed971 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5f7946; op2val:0x9ed971; valaddr_reg:x16; val_offset:224; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 224, x17, x15, 224, x18)

inst_537:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5f7946 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed971 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5f7946; op2val:0x9ed971; valaddr_reg:x16; val_offset:232; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 232, x17, x15, 232, x18)

inst_538:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5f7946 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed971 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5f7946; op2val:0x9ed971; valaddr_reg:x16; val_offset:240; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 240, x17, x15, 240, x18)

inst_539:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5f7946 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed971 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5f7946; op2val:0x9ed971; valaddr_reg:x16; val_offset:248; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 248, x17, x15, 248, x18)

inst_540:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5f7946 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed971 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5f7946; op2val:0x9ed971; valaddr_reg:x16; val_offset:256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 256, x17, x15, 256, x18)

inst_541:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5044ce and fs2 == 0 and fe2 == 0x01 and fm2 == 0x2a7247 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5044ce; op2val:0xaa7247; valaddr_reg:x16; val_offset:264; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 264, x17, x15, 264, x18)

inst_542:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5044ce and fs2 == 0 and fe2 == 0x01 and fm2 == 0x2a7247 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5044ce; op2val:0xaa7247; valaddr_reg:x16; val_offset:272; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 272, x17, x15, 272, x18)

inst_543:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5044ce and fs2 == 0 and fe2 == 0x01 and fm2 == 0x2a7247 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5044ce; op2val:0xaa7247; valaddr_reg:x16; val_offset:280; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 280, x17, x15, 280, x18)

inst_544:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5044ce and fs2 == 0 and fe2 == 0x01 and fm2 == 0x2a7247 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5044ce; op2val:0xaa7247; valaddr_reg:x16; val_offset:288; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 288, x17, x15, 288, x18)

inst_545:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5044ce and fs2 == 0 and fe2 == 0x01 and fm2 == 0x2a7247 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5044ce; op2val:0xaa7247; valaddr_reg:x16; val_offset:296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 296, x17, x15, 296, x18)

inst_546:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x05fb50 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0479ce and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f05fb50; op2val:0x10479ce; valaddr_reg:x16; val_offset:304; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 304, x17, x15, 304, x18)

inst_547:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x05fb50 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0479ce and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f05fb50; op2val:0x10479ce; valaddr_reg:x16; val_offset:312; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 312, x17, x15, 312, x18)

inst_548:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x05fb50 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0479ce and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f05fb50; op2val:0x10479ce; valaddr_reg:x16; val_offset:320; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 320, x17, x15, 320, x18)

inst_549:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x05fb50 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0479ce and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f05fb50; op2val:0x10479ce; valaddr_reg:x16; val_offset:328; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 328, x17, x15, 328, x18)

inst_550:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x05fb50 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0479ce and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f05fb50; op2val:0x10479ce; valaddr_reg:x16; val_offset:336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 336, x17, x15, 336, x18)

inst_551:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x2d35de and fs2 == 0 and fe2 == 0x05 and fm2 == 0x4cf200 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d2d35de; op2val:0x2ccf200; valaddr_reg:x16; val_offset:344; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 344, x17, x15, 344, x18)

inst_552:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x2d35de and fs2 == 0 and fe2 == 0x05 and fm2 == 0x4cf200 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d2d35de; op2val:0x2ccf200; valaddr_reg:x16; val_offset:352; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 352, x17, x15, 352, x18)

inst_553:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x2d35de and fs2 == 0 and fe2 == 0x05 and fm2 == 0x4cf200 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d2d35de; op2val:0x2ccf200; valaddr_reg:x16; val_offset:360; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 360, x17, x15, 360, x18)

inst_554:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x2d35de and fs2 == 0 and fe2 == 0x05 and fm2 == 0x4cf200 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d2d35de; op2val:0x2ccf200; valaddr_reg:x16; val_offset:368; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 368, x17, x15, 368, x18)

inst_555:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x2d35de and fs2 == 0 and fe2 == 0x05 and fm2 == 0x4cf200 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d2d35de; op2val:0x2ccf200; valaddr_reg:x16; val_offset:376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 376, x17, x15, 376, x18)

inst_556:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1ad5a0 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6544b9 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1ad5a0; op2val:0xe544b9; valaddr_reg:x16; val_offset:384; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 384, x17, x15, 384, x18)

inst_557:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1ad5a0 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6544b9 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1ad5a0; op2val:0xe544b9; valaddr_reg:x16; val_offset:392; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 392, x17, x15, 392, x18)

inst_558:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1ad5a0 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6544b9 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1ad5a0; op2val:0xe544b9; valaddr_reg:x16; val_offset:400; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 400, x17, x15, 400, x18)

inst_559:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1ad5a0 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6544b9 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1ad5a0; op2val:0xe544b9; valaddr_reg:x16; val_offset:408; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 408, x17, x15, 408, x18)

inst_560:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1ad5a0 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6544b9 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1ad5a0; op2val:0xe544b9; valaddr_reg:x16; val_offset:416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 416, x17, x15, 416, x18)

inst_561:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x289f85 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x52854e and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea89f85; op2val:0x152854e; valaddr_reg:x16; val_offset:424; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 424, x17, x15, 424, x18)

inst_562:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x289f85 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x52854e and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea89f85; op2val:0x152854e; valaddr_reg:x16; val_offset:432; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 432, x17, x15, 432, x18)

inst_563:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x289f85 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x52854e and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea89f85; op2val:0x152854e; valaddr_reg:x16; val_offset:440; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 440, x17, x15, 440, x18)

inst_564:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x289f85 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x52854e and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea89f85; op2val:0x152854e; valaddr_reg:x16; val_offset:448; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 448, x17, x15, 448, x18)

inst_565:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x289f85 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x52854e and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea89f85; op2val:0x152854e; valaddr_reg:x16; val_offset:456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 456, x17, x15, 456, x18)

inst_566:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x35594f and fs2 == 0 and fe2 == 0x01 and fm2 == 0x43bf78 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f35594f; op2val:0xc3bf78; valaddr_reg:x16; val_offset:464; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 464, x17, x15, 464, x18)

inst_567:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x35594f and fs2 == 0 and fe2 == 0x01 and fm2 == 0x43bf78 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f35594f; op2val:0xc3bf78; valaddr_reg:x16; val_offset:472; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 472, x17, x15, 472, x18)

inst_568:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x35594f and fs2 == 0 and fe2 == 0x01 and fm2 == 0x43bf78 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f35594f; op2val:0xc3bf78; valaddr_reg:x16; val_offset:480; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 480, x17, x15, 480, x18)

inst_569:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x35594f and fs2 == 0 and fe2 == 0x01 and fm2 == 0x43bf78 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f35594f; op2val:0xc3bf78; valaddr_reg:x16; val_offset:488; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 488, x17, x15, 488, x18)

inst_570:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x35594f and fs2 == 0 and fe2 == 0x01 and fm2 == 0x43bf78 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f35594f; op2val:0xc3bf78; valaddr_reg:x16; val_offset:496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 496, x17, x15, 496, x18)

inst_571:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7c6180 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x0ca7b7 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e7c6180; op2val:0x18ca7b7; valaddr_reg:x16; val_offset:504; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 504, x17, x15, 504, x18)

inst_572:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7c6180 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x0ca7b7 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e7c6180; op2val:0x18ca7b7; valaddr_reg:x16; val_offset:512; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 512, x17, x15, 512, x18)

inst_573:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7c6180 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x0ca7b7 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e7c6180; op2val:0x18ca7b7; valaddr_reg:x16; val_offset:520; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 520, x17, x15, 520, x18)

inst_574:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7c6180 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x0ca7b7 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e7c6180; op2val:0x18ca7b7; valaddr_reg:x16; val_offset:528; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 528, x17, x15, 528, x18)

inst_575:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7c6180 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x0ca7b7 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e7c6180; op2val:0x18ca7b7; valaddr_reg:x16; val_offset:536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 536, x17, x15, 536, x18)

inst_576:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x05d38f and fs2 == 0 and fe2 == 0x04 and fm2 == 0x04a128 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e05d38f; op2val:0x204a128; valaddr_reg:x16; val_offset:544; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 544, x17, x15, 544, x18)

inst_577:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x05d38f and fs2 == 0 and fe2 == 0x04 and fm2 == 0x04a128 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e05d38f; op2val:0x204a128; valaddr_reg:x16; val_offset:552; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 552, x17, x15, 552, x18)

inst_578:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x05d38f and fs2 == 0 and fe2 == 0x04 and fm2 == 0x04a128 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e05d38f; op2val:0x204a128; valaddr_reg:x16; val_offset:560; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 560, x17, x15, 560, x18)

inst_579:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x05d38f and fs2 == 0 and fe2 == 0x04 and fm2 == 0x04a128 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e05d38f; op2val:0x204a128; valaddr_reg:x16; val_offset:568; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 568, x17, x15, 568, x18)

inst_580:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x05d38f and fs2 == 0 and fe2 == 0x04 and fm2 == 0x04a128 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e05d38f; op2val:0x204a128; valaddr_reg:x16; val_offset:576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 576, x17, x15, 576, x18)

inst_581:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x03cf30 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x06a8be and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e83cf30; op2val:0x186a8be; valaddr_reg:x16; val_offset:584; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 584, x17, x15, 584, x18)

inst_582:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x03cf30 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x06a8be and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e83cf30; op2val:0x186a8be; valaddr_reg:x16; val_offset:592; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 592, x17, x15, 592, x18)

inst_583:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x03cf30 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x06a8be and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e83cf30; op2val:0x186a8be; valaddr_reg:x16; val_offset:600; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 600, x17, x15, 600, x18)

inst_584:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x03cf30 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x06a8be and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e83cf30; op2val:0x186a8be; valaddr_reg:x16; val_offset:608; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 608, x17, x15, 608, x18)

inst_585:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x03cf30 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x06a8be and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e83cf30; op2val:0x186a8be; valaddr_reg:x16; val_offset:616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 616, x17, x15, 616, x18)

inst_586:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1eba82 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5fa4d4 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9eba82; op2val:0x15fa4d4; valaddr_reg:x16; val_offset:624; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 624, x17, x15, 624, x18)

inst_587:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1eba82 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5fa4d4 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9eba82; op2val:0x15fa4d4; valaddr_reg:x16; val_offset:632; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 632, x17, x15, 632, x18)

inst_588:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1eba82 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5fa4d4 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9eba82; op2val:0x15fa4d4; valaddr_reg:x16; val_offset:640; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 640, x17, x15, 640, x18)

inst_589:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1eba82 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5fa4d4 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9eba82; op2val:0x15fa4d4; valaddr_reg:x16; val_offset:648; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 648, x17, x15, 648, x18)

inst_590:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1eba82 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5fa4d4 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9eba82; op2val:0x15fa4d4; valaddr_reg:x16; val_offset:656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 656, x17, x15, 656, x18)

inst_591:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x17b426 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x69fffe and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d97b426; op2val:0x269fffe; valaddr_reg:x16; val_offset:664; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 664, x17, x15, 664, x18)

inst_592:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x17b426 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x69fffe and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d97b426; op2val:0x269fffe; valaddr_reg:x16; val_offset:672; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 672, x17, x15, 672, x18)

inst_593:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x17b426 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x69fffe and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d97b426; op2val:0x269fffe; valaddr_reg:x16; val_offset:680; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 680, x17, x15, 680, x18)

inst_594:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x17b426 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x69fffe and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d97b426; op2val:0x269fffe; valaddr_reg:x16; val_offset:688; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 688, x17, x15, 688, x18)

inst_595:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x17b426 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x69fffe and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d97b426; op2val:0x269fffe; valaddr_reg:x16; val_offset:696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 696, x17, x15, 696, x18)

inst_596:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x286217 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x52d21c and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f286217; op2val:0xd2d21c; valaddr_reg:x16; val_offset:704; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 704, x17, x15, 704, x18)

inst_597:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x286217 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x52d21c and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f286217; op2val:0xd2d21c; valaddr_reg:x16; val_offset:712; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 712, x17, x15, 712, x18)

inst_598:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x286217 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x52d21c and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f286217; op2val:0xd2d21c; valaddr_reg:x16; val_offset:720; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 720, x17, x15, 720, x18)

inst_599:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x286217 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x52d21c and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f286217; op2val:0xd2d21c; valaddr_reg:x16; val_offset:728; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 728, x17, x15, 728, x18)

inst_600:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x286217 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x52d21c and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f286217; op2val:0xd2d21c; valaddr_reg:x16; val_offset:736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 736, x17, x15, 736, x18)

inst_601:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x19888d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x67361a and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f19888d; op2val:0xe7361a; valaddr_reg:x16; val_offset:744; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 744, x17, x15, 744, x18)

inst_602:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x19888d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x67361a and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f19888d; op2val:0xe7361a; valaddr_reg:x16; val_offset:752; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 752, x17, x15, 752, x18)

inst_603:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x19888d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x67361a and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f19888d; op2val:0xe7361a; valaddr_reg:x16; val_offset:760; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 760, x17, x15, 760, x18)

inst_604:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x19888d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x67361a and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f19888d; op2val:0xe7361a; valaddr_reg:x16; val_offset:768; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 768, x17, x15, 768, x18)

inst_605:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x19888d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x67361a and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f19888d; op2val:0xe7361a; valaddr_reg:x16; val_offset:776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 776, x17, x15, 776, x18)

inst_606:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x440f0a and fs2 == 0 and fe2 == 0x03 and fm2 == 0x350fb5 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e440f0a; op2val:0x1b50fb5; valaddr_reg:x16; val_offset:784; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 784, x17, x15, 784, x18)

inst_607:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x440f0a and fs2 == 0 and fe2 == 0x03 and fm2 == 0x350fb5 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e440f0a; op2val:0x1b50fb5; valaddr_reg:x16; val_offset:792; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 792, x17, x15, 792, x18)

inst_608:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x440f0a and fs2 == 0 and fe2 == 0x03 and fm2 == 0x350fb5 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e440f0a; op2val:0x1b50fb5; valaddr_reg:x16; val_offset:800; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 800, x17, x15, 800, x18)

inst_609:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x440f0a and fs2 == 0 and fe2 == 0x03 and fm2 == 0x350fb5 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e440f0a; op2val:0x1b50fb5; valaddr_reg:x16; val_offset:808; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 808, x17, x15, 808, x18)

inst_610:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x440f0a and fs2 == 0 and fe2 == 0x03 and fm2 == 0x350fb5 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e440f0a; op2val:0x1b50fb5; valaddr_reg:x16; val_offset:816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 816, x17, x15, 816, x18)

inst_611:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x51d1ec and fs2 == 0 and fe2 == 0x03 and fm2 == 0x292fae and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e51d1ec; op2val:0x1a92fae; valaddr_reg:x16; val_offset:824; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 824, x17, x15, 824, x18)

inst_612:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x51d1ec and fs2 == 0 and fe2 == 0x03 and fm2 == 0x292fae and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e51d1ec; op2val:0x1a92fae; valaddr_reg:x16; val_offset:832; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 832, x17, x15, 832, x18)

inst_613:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x51d1ec and fs2 == 0 and fe2 == 0x03 and fm2 == 0x292fae and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e51d1ec; op2val:0x1a92fae; valaddr_reg:x16; val_offset:840; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 840, x17, x15, 840, x18)

inst_614:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x51d1ec and fs2 == 0 and fe2 == 0x03 and fm2 == 0x292fae and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e51d1ec; op2val:0x1a92fae; valaddr_reg:x16; val_offset:848; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 848, x17, x15, 848, x18)

inst_615:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x51d1ec and fs2 == 0 and fe2 == 0x03 and fm2 == 0x292fae and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e51d1ec; op2val:0x1a92fae; valaddr_reg:x16; val_offset:856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 856, x17, x15, 856, x18)

inst_616:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x204f68 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5d6ff6 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f204f68; op2val:0xdd6ff6; valaddr_reg:x16; val_offset:864; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 864, x17, x15, 864, x18)

inst_617:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x204f68 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5d6ff6 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f204f68; op2val:0xdd6ff6; valaddr_reg:x16; val_offset:872; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 872, x17, x15, 872, x18)

inst_618:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x204f68 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5d6ff6 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f204f68; op2val:0xdd6ff6; valaddr_reg:x16; val_offset:880; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 880, x17, x15, 880, x18)

inst_619:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x204f68 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5d6ff6 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f204f68; op2val:0xdd6ff6; valaddr_reg:x16; val_offset:888; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 888, x17, x15, 888, x18)

inst_620:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x204f68 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5d6ff6 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f204f68; op2val:0xdd6ff6; valaddr_reg:x16; val_offset:896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 896, x17, x15, 896, x18)

inst_621:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4f79e6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x2b18f8 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4f79e6; op2val:0xab18f8; valaddr_reg:x16; val_offset:904; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 904, x17, x15, 904, x18)

inst_622:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4f79e6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x2b18f8 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4f79e6; op2val:0xab18f8; valaddr_reg:x16; val_offset:912; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 912, x17, x15, 912, x18)

inst_623:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4f79e6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x2b18f8 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4f79e6; op2val:0xab18f8; valaddr_reg:x16; val_offset:920; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 920, x17, x15, 920, x18)

inst_624:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4f79e6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x2b18f8 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4f79e6; op2val:0xab18f8; valaddr_reg:x16; val_offset:928; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 928, x17, x15, 928, x18)

inst_625:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4f79e6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x2b18f8 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4f79e6; op2val:0xab18f8; valaddr_reg:x16; val_offset:936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 936, x17, x15, 936, x18)

inst_626:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x66839a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x19ff70 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f66839a; op2val:0x99ff70; valaddr_reg:x16; val_offset:944; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 944, x17, x15, 944, x18)

inst_627:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x66839a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x19ff70 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f66839a; op2val:0x99ff70; valaddr_reg:x16; val_offset:952; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 952, x17, x15, 952, x18)

inst_628:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x66839a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x19ff70 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f66839a; op2val:0x99ff70; valaddr_reg:x16; val_offset:960; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 960, x17, x15, 960, x18)

inst_629:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x66839a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x19ff70 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f66839a; op2val:0x99ff70; valaddr_reg:x16; val_offset:968; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 968, x17, x15, 968, x18)

inst_630:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x66839a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x19ff70 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f66839a; op2val:0x99ff70; valaddr_reg:x16; val_offset:976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 976, x17, x15, 976, x18)

inst_631:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x1017be and fs2 == 0 and fe2 == 0x04 and fm2 == 0x6ce26b and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d9017be; op2val:0x26ce26b; valaddr_reg:x16; val_offset:984; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 984, x17, x15, 984, x18)

inst_632:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x1017be and fs2 == 0 and fe2 == 0x04 and fm2 == 0x6ce26b and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d9017be; op2val:0x26ce26b; valaddr_reg:x16; val_offset:992; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 992, x17, x15, 992, x18)

inst_633:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x1017be and fs2 == 0 and fe2 == 0x04 and fm2 == 0x6ce26b and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d9017be; op2val:0x26ce26b; valaddr_reg:x16; val_offset:1000; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1000, x17, x15, 1000, x18)

inst_634:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x1017be and fs2 == 0 and fe2 == 0x04 and fm2 == 0x6ce26b and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d9017be; op2val:0x26ce26b; valaddr_reg:x16; val_offset:1008; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1008, x17, x15, 1008, x18)

inst_635:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x1017be and fs2 == 0 and fe2 == 0x04 and fm2 == 0x6ce26b and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d9017be; op2val:0x26ce26b; valaddr_reg:x16; val_offset:1016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1016, x17, x15, 1016, x18)

inst_636:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0ed951 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6ef276 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0ed951; op2val:0xeef276; valaddr_reg:x16; val_offset:1024; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1024, x17, x15, 1024, x18)

inst_637:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0ed951 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6ef276 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0ed951; op2val:0xeef276; valaddr_reg:x16; val_offset:1032; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1032, x17, x15, 1032, x18)

inst_638:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0ed951 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6ef276 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0ed951; op2val:0xeef276; valaddr_reg:x16; val_offset:1040; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1040, x17, x15, 1040, x18)

inst_639:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0ed951 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6ef276 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0ed951; op2val:0xeef276; valaddr_reg:x16; val_offset:1048; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1048, x17, x15, 1048, x18)

inst_640:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0ed951 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6ef276 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0ed951; op2val:0xeef276; valaddr_reg:x16; val_offset:1056; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1056, x17, x15, 1056, x18)

inst_641:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x57ea00 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x1e166b and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dd7ea00; op2val:0x21e166b; valaddr_reg:x16; val_offset:1064; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1064, x17, x15, 1064, x18)

inst_642:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x57ea00 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x1e166b and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dd7ea00; op2val:0x21e166b; valaddr_reg:x16; val_offset:1072; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1072, x17, x15, 1072, x18)

inst_643:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x57ea00 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x1e166b and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dd7ea00; op2val:0x21e166b; valaddr_reg:x16; val_offset:1080; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1080, x17, x15, 1080, x18)

inst_644:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x57ea00 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x1e166b and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dd7ea00; op2val:0x21e166b; valaddr_reg:x16; val_offset:1088; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1088, x17, x15, 1088, x18)

inst_645:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x57ea00 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x1e166b and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dd7ea00; op2val:0x21e166b; valaddr_reg:x16; val_offset:1096; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1096, x17, x15, 1096, x18)

inst_646:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0ed880 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6ef3d5 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0ed880; op2val:0xeef3d5; valaddr_reg:x16; val_offset:1104; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1104, x17, x15, 1104, x18)

inst_647:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0ed880 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6ef3d5 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0ed880; op2val:0xeef3d5; valaddr_reg:x16; val_offset:1112; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1112, x17, x15, 1112, x18)

inst_648:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0ed880 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6ef3d5 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0ed880; op2val:0xeef3d5; valaddr_reg:x16; val_offset:1120; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1120, x17, x15, 1120, x18)

inst_649:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0ed880 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6ef3d5 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0ed880; op2val:0xeef3d5; valaddr_reg:x16; val_offset:1128; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1128, x17, x15, 1128, x18)

inst_650:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0ed880 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6ef3d5 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0ed880; op2val:0xeef3d5; valaddr_reg:x16; val_offset:1136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1136, x17, x15, 1136, x18)

inst_651:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0ae921 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x75b8b2 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0ae921; op2val:0xf5b8b2; valaddr_reg:x16; val_offset:1144; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1144, x17, x15, 1144, x18)

inst_652:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0ae921 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x75b8b2 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0ae921; op2val:0xf5b8b2; valaddr_reg:x16; val_offset:1152; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1152, x17, x15, 1152, x18)

inst_653:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0ae921 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x75b8b2 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0ae921; op2val:0xf5b8b2; valaddr_reg:x16; val_offset:1160; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1160, x17, x15, 1160, x18)

inst_654:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0ae921 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x75b8b2 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0ae921; op2val:0xf5b8b2; valaddr_reg:x16; val_offset:1168; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1168, x17, x15, 1168, x18)

inst_655:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0ae921 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x75b8b2 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0ae921; op2val:0xf5b8b2; valaddr_reg:x16; val_offset:1176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1176, x17, x15, 1176, x18)

inst_656:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2e7de4 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x439d9f and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2e7de4; op2val:0xc39d9f; valaddr_reg:x16; val_offset:1184; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1184, x17, x15, 1184, x18)

inst_657:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2e7de4 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x439d9f and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2e7de4; op2val:0xc39d9f; valaddr_reg:x16; val_offset:1192; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1192, x17, x15, 1192, x18)

inst_658:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2e7de4 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x439d9f and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2e7de4; op2val:0xc39d9f; valaddr_reg:x16; val_offset:1200; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1200, x17, x15, 1200, x18)

inst_659:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2e7de4 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x439d9f and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2e7de4; op2val:0xc39d9f; valaddr_reg:x16; val_offset:1208; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1208, x17, x15, 1208, x18)

inst_660:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2e7de4 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x439d9f and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2e7de4; op2val:0xc39d9f; valaddr_reg:x16; val_offset:1216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1216, x17, x15, 1216, x18)

inst_661:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1eebd3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x56c811 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1eebd3; op2val:0xd6c811; valaddr_reg:x16; val_offset:1224; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1224, x17, x15, 1224, x18)

inst_662:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1eebd3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x56c811 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1eebd3; op2val:0xd6c811; valaddr_reg:x16; val_offset:1232; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1232, x17, x15, 1232, x18)

inst_663:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1eebd3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x56c811 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1eebd3; op2val:0xd6c811; valaddr_reg:x16; val_offset:1240; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1240, x17, x15, 1240, x18)

inst_664:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1eebd3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x56c811 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1eebd3; op2val:0xd6c811; valaddr_reg:x16; val_offset:1248; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1248, x17, x15, 1248, x18)

inst_665:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1eebd3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x56c811 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1eebd3; op2val:0xd6c811; valaddr_reg:x16; val_offset:1256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1256, x17, x15, 1256, x18)

inst_666:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x635631 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1624f8 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f635631; op2val:0x9624f8; valaddr_reg:x16; val_offset:1264; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1264, x17, x15, 1264, x18)

inst_667:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x635631 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1624f8 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f635631; op2val:0x9624f8; valaddr_reg:x16; val_offset:1272; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1272, x17, x15, 1272, x18)

inst_668:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x635631 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1624f8 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f635631; op2val:0x9624f8; valaddr_reg:x16; val_offset:1280; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1280, x17, x15, 1280, x18)

inst_669:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x635631 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1624f8 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f635631; op2val:0x9624f8; valaddr_reg:x16; val_offset:1288; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1288, x17, x15, 1288, x18)

inst_670:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x635631 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1624f8 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f635631; op2val:0x9624f8; valaddr_reg:x16; val_offset:1296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1296, x17, x15, 1296, x18)

inst_671:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x38f6a4 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x388a7c and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f38f6a4; op2val:0xb88a7c; valaddr_reg:x16; val_offset:1304; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1304, x17, x15, 1304, x18)

inst_672:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x38f6a4 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x388a7c and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f38f6a4; op2val:0xb88a7c; valaddr_reg:x16; val_offset:1312; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1312, x17, x15, 1312, x18)

inst_673:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x38f6a4 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x388a7c and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f38f6a4; op2val:0xb88a7c; valaddr_reg:x16; val_offset:1320; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1320, x17, x15, 1320, x18)

inst_674:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x38f6a4 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x388a7c and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f38f6a4; op2val:0xb88a7c; valaddr_reg:x16; val_offset:1328; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1328, x17, x15, 1328, x18)

inst_675:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x38f6a4 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x388a7c and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f38f6a4; op2val:0xb88a7c; valaddr_reg:x16; val_offset:1336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1336, x17, x15, 1336, x18)

inst_676:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0adec6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x75cb04 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0adec6; op2val:0xf5cb04; valaddr_reg:x16; val_offset:1344; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1344, x17, x15, 1344, x18)

inst_677:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0adec6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x75cb04 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0adec6; op2val:0xf5cb04; valaddr_reg:x16; val_offset:1352; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1352, x17, x15, 1352, x18)

inst_678:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0adec6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x75cb04 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0adec6; op2val:0xf5cb04; valaddr_reg:x16; val_offset:1360; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1360, x17, x15, 1360, x18)

inst_679:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0adec6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x75cb04 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0adec6; op2val:0xf5cb04; valaddr_reg:x16; val_offset:1368; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1368, x17, x15, 1368, x18)

inst_680:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0adec6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x75cb04 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0adec6; op2val:0xf5cb04; valaddr_reg:x16; val_offset:1376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1376, x17, x15, 1376, x18)

inst_681:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3121b7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x40b346 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3121b7; op2val:0xc0b346; valaddr_reg:x16; val_offset:1384; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1384, x17, x15, 1384, x18)

inst_682:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3121b7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x40b346 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3121b7; op2val:0xc0b346; valaddr_reg:x16; val_offset:1392; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1392, x17, x15, 1392, x18)

inst_683:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3121b7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x40b346 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3121b7; op2val:0xc0b346; valaddr_reg:x16; val_offset:1400; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1400, x17, x15, 1400, x18)

inst_684:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3121b7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x40b346 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3121b7; op2val:0xc0b346; valaddr_reg:x16; val_offset:1408; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1408, x17, x15, 1408, x18)

inst_685:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3121b7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x40b346 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3121b7; op2val:0xc0b346; valaddr_reg:x16; val_offset:1416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1416, x17, x15, 1416, x18)

inst_686:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4efc82 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x24e7fc and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4efc82; op2val:0x1a4e7fc; valaddr_reg:x16; val_offset:1424; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1424, x17, x15, 1424, x18)

inst_687:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4efc82 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x24e7fc and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4efc82; op2val:0x1a4e7fc; valaddr_reg:x16; val_offset:1432; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1432, x17, x15, 1432, x18)

inst_688:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4efc82 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x24e7fc and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4efc82; op2val:0x1a4e7fc; valaddr_reg:x16; val_offset:1440; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1440, x17, x15, 1440, x18)

inst_689:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4efc82 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x24e7fc and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4efc82; op2val:0x1a4e7fc; valaddr_reg:x16; val_offset:1448; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1448, x17, x15, 1448, x18)

inst_690:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4efc82 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x24e7fc and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4efc82; op2val:0x1a4e7fc; valaddr_reg:x16; val_offset:1456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1456, x17, x15, 1456, x18)

inst_691:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7066c3 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0dfc18 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef066c3; op2val:0x10dfc18; valaddr_reg:x16; val_offset:1464; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1464, x17, x15, 1464, x18)

inst_692:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7066c3 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0dfc18 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef066c3; op2val:0x10dfc18; valaddr_reg:x16; val_offset:1472; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1472, x17, x15, 1472, x18)

inst_693:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7066c3 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0dfc18 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef066c3; op2val:0x10dfc18; valaddr_reg:x16; val_offset:1480; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1480, x17, x15, 1480, x18)

inst_694:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7066c3 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0dfc18 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef066c3; op2val:0x10dfc18; valaddr_reg:x16; val_offset:1488; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1488, x17, x15, 1488, x18)

inst_695:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7066c3 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0dfc18 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef066c3; op2val:0x10dfc18; valaddr_reg:x16; val_offset:1496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1496, x17, x15, 1496, x18)

inst_696:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3bbe36 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x35cf0c and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebbbe36; op2val:0x135cf0c; valaddr_reg:x16; val_offset:1504; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1504, x17, x15, 1504, x18)

inst_697:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3bbe36 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x35cf0c and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebbbe36; op2val:0x135cf0c; valaddr_reg:x16; val_offset:1512; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1512, x17, x15, 1512, x18)

inst_698:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3bbe36 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x35cf0c and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebbbe36; op2val:0x135cf0c; valaddr_reg:x16; val_offset:1520; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1520, x17, x15, 1520, x18)

inst_699:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3bbe36 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x35cf0c and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebbbe36; op2val:0x135cf0c; valaddr_reg:x16; val_offset:1528; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1528, x17, x15, 1528, x18)

inst_700:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3bbe36 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x35cf0c and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ebbbe36; op2val:0x135cf0c; valaddr_reg:x16; val_offset:1536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1536, x17, x15, 1536, x18)

inst_701:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x231e4a and fs2 == 0 and fe2 == 0x03 and fm2 == 0x51414b and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e231e4a; op2val:0x1d1414b; valaddr_reg:x16; val_offset:1544; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1544, x17, x15, 1544, x18)

inst_702:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x231e4a and fs2 == 0 and fe2 == 0x03 and fm2 == 0x51414b and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e231e4a; op2val:0x1d1414b; valaddr_reg:x16; val_offset:1552; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1552, x17, x15, 1552, x18)

inst_703:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x231e4a and fs2 == 0 and fe2 == 0x03 and fm2 == 0x51414b and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e231e4a; op2val:0x1d1414b; valaddr_reg:x16; val_offset:1560; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1560, x17, x15, 1560, x18)

inst_704:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x231e4a and fs2 == 0 and fe2 == 0x03 and fm2 == 0x51414b and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e231e4a; op2val:0x1d1414b; valaddr_reg:x16; val_offset:1568; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1568, x17, x15, 1568, x18)

inst_705:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x231e4a and fs2 == 0 and fe2 == 0x03 and fm2 == 0x51414b and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e231e4a; op2val:0x1d1414b; valaddr_reg:x16; val_offset:1576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1576, x17, x15, 1576, x18)

inst_706:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x317451 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x405994 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb17451; op2val:0x1405994; valaddr_reg:x16; val_offset:1584; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1584, x17, x15, 1584, x18)

inst_707:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x317451 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x405994 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb17451; op2val:0x1405994; valaddr_reg:x16; val_offset:1592; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1592, x17, x15, 1592, x18)

inst_708:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x317451 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x405994 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb17451; op2val:0x1405994; valaddr_reg:x16; val_offset:1600; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1600, x17, x15, 1600, x18)

inst_709:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x317451 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x405994 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb17451; op2val:0x1405994; valaddr_reg:x16; val_offset:1608; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1608, x17, x15, 1608, x18)

inst_710:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x317451 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x405994 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb17451; op2val:0x1405994; valaddr_reg:x16; val_offset:1616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1616, x17, x15, 1616, x18)

inst_711:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x351715 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x3c7cf1 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb51715; op2val:0x13c7cf1; valaddr_reg:x16; val_offset:1624; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1624, x17, x15, 1624, x18)

inst_712:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x351715 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x3c7cf1 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb51715; op2val:0x13c7cf1; valaddr_reg:x16; val_offset:1632; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1632, x17, x15, 1632, x18)

inst_713:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x351715 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x3c7cf1 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb51715; op2val:0x13c7cf1; valaddr_reg:x16; val_offset:1640; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1640, x17, x15, 1640, x18)

inst_714:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x351715 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x3c7cf1 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb51715; op2val:0x13c7cf1; valaddr_reg:x16; val_offset:1648; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1648, x17, x15, 1648, x18)

inst_715:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x351715 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x3c7cf1 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb51715; op2val:0x13c7cf1; valaddr_reg:x16; val_offset:1656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1656, x17, x15, 1656, x18)

inst_716:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x33d83c and fs2 == 0 and fe2 == 0x03 and fm2 == 0x3dcb1c and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e33d83c; op2val:0x1bdcb1c; valaddr_reg:x16; val_offset:1664; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1664, x17, x15, 1664, x18)

inst_717:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x33d83c and fs2 == 0 and fe2 == 0x03 and fm2 == 0x3dcb1c and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e33d83c; op2val:0x1bdcb1c; valaddr_reg:x16; val_offset:1672; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1672, x17, x15, 1672, x18)

inst_718:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x33d83c and fs2 == 0 and fe2 == 0x03 and fm2 == 0x3dcb1c and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e33d83c; op2val:0x1bdcb1c; valaddr_reg:x16; val_offset:1680; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1680, x17, x15, 1680, x18)

inst_719:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x33d83c and fs2 == 0 and fe2 == 0x03 and fm2 == 0x3dcb1c and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e33d83c; op2val:0x1bdcb1c; valaddr_reg:x16; val_offset:1688; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1688, x17, x15, 1688, x18)

inst_720:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x33d83c and fs2 == 0 and fe2 == 0x03 and fm2 == 0x3dcb1c and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e33d83c; op2val:0x1bdcb1c; valaddr_reg:x16; val_offset:1696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1696, x17, x15, 1696, x18)

inst_721:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x2eb020 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x43655f and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3daeb020; op2val:0x243655f; valaddr_reg:x16; val_offset:1704; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1704, x17, x15, 1704, x18)

inst_722:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x2eb020 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x43655f and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3daeb020; op2val:0x243655f; valaddr_reg:x16; val_offset:1712; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1712, x17, x15, 1712, x18)

inst_723:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x2eb020 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x43655f and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3daeb020; op2val:0x243655f; valaddr_reg:x16; val_offset:1720; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1720, x17, x15, 1720, x18)

inst_724:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x2eb020 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x43655f and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3daeb020; op2val:0x243655f; valaddr_reg:x16; val_offset:1728; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1728, x17, x15, 1728, x18)

inst_725:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x2eb020 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x43655f and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3daeb020; op2val:0x243655f; valaddr_reg:x16; val_offset:1736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1736, x17, x15, 1736, x18)

inst_726:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x042690 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x012542 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f042690; op2val:0x1012542; valaddr_reg:x16; val_offset:1744; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1744, x17, x15, 1744, x18)

inst_727:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x042690 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x012542 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f042690; op2val:0x1012542; valaddr_reg:x16; val_offset:1752; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1752, x17, x15, 1752, x18)

inst_728:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x042690 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x012542 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f042690; op2val:0x1012542; valaddr_reg:x16; val_offset:1760; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1760, x17, x15, 1760, x18)

inst_729:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x042690 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x012542 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f042690; op2val:0x1012542; valaddr_reg:x16; val_offset:1768; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1768, x17, x15, 1768, x18)

inst_730:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x042690 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x012542 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f042690; op2val:0x1012542; valaddr_reg:x16; val_offset:1776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1776, x17, x15, 1776, x18)

inst_731:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x310ab3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x40cc53 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f310ab3; op2val:0xc0cc53; valaddr_reg:x16; val_offset:1784; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1784, x17, x15, 1784, x18)

inst_732:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x310ab3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x40cc53 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f310ab3; op2val:0xc0cc53; valaddr_reg:x16; val_offset:1792; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1792, x17, x15, 1792, x18)

inst_733:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x310ab3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x40cc53 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f310ab3; op2val:0xc0cc53; valaddr_reg:x16; val_offset:1800; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1800, x17, x15, 1800, x18)

inst_734:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x310ab3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x40cc53 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f310ab3; op2val:0xc0cc53; valaddr_reg:x16; val_offset:1808; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1808, x17, x15, 1808, x18)

inst_735:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x310ab3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x40cc53 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f310ab3; op2val:0xc0cc53; valaddr_reg:x16; val_offset:1816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1816, x17, x15, 1816, x18)

inst_736:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0ea4a0 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6f4ab9 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0ea4a0; op2val:0xef4ab9; valaddr_reg:x16; val_offset:1824; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1824, x17, x15, 1824, x18)

inst_737:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0ea4a0 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6f4ab9 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0ea4a0; op2val:0xef4ab9; valaddr_reg:x16; val_offset:1832; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1832, x17, x15, 1832, x18)

inst_738:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0ea4a0 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6f4ab9 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0ea4a0; op2val:0xef4ab9; valaddr_reg:x16; val_offset:1840; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1840, x17, x15, 1840, x18)

inst_739:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0ea4a0 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6f4ab9 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0ea4a0; op2val:0xef4ab9; valaddr_reg:x16; val_offset:1848; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1848, x17, x15, 1848, x18)

inst_740:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0ea4a0 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6f4ab9 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0ea4a0; op2val:0xef4ab9; valaddr_reg:x16; val_offset:1856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1856, x17, x15, 1856, x18)

inst_741:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6c8b57 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x104cca and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eec8b57; op2val:0x1104cca; valaddr_reg:x16; val_offset:1864; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1864, x17, x15, 1864, x18)

inst_742:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6c8b57 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x104cca and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eec8b57; op2val:0x1104cca; valaddr_reg:x16; val_offset:1872; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1872, x17, x15, 1872, x18)

inst_743:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6c8b57 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x104cca and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eec8b57; op2val:0x1104cca; valaddr_reg:x16; val_offset:1880; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1880, x17, x15, 1880, x18)

inst_744:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6c8b57 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x104cca and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eec8b57; op2val:0x1104cca; valaddr_reg:x16; val_offset:1888; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1888, x17, x15, 1888, x18)

inst_745:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6c8b57 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x104cca and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eec8b57; op2val:0x1104cca; valaddr_reg:x16; val_offset:1896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1896, x17, x15, 1896, x18)

inst_746:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x07856f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x7bddf5 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d07856f; op2val:0x2fbddf5; valaddr_reg:x16; val_offset:1904; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1904, x17, x15, 1904, x18)

inst_747:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x07856f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x7bddf5 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d07856f; op2val:0x2fbddf5; valaddr_reg:x16; val_offset:1912; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1912, x17, x15, 1912, x18)

inst_748:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x07856f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x7bddf5 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d07856f; op2val:0x2fbddf5; valaddr_reg:x16; val_offset:1920; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1920, x17, x15, 1920, x18)

inst_749:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x07856f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x7bddf5 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d07856f; op2val:0x2fbddf5; valaddr_reg:x16; val_offset:1928; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1928, x17, x15, 1928, x18)

inst_750:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x07856f and fs2 == 0 and fe2 == 0x05 and fm2 == 0x7bddf5 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d07856f; op2val:0x2fbddf5; valaddr_reg:x16; val_offset:1936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1936, x17, x15, 1936, x18)

inst_751:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7d5668 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x06bc0e and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7d5668; op2val:0x86bc0e; valaddr_reg:x16; val_offset:1944; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1944, x17, x15, 1944, x18)

inst_752:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7d5668 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x06bc0e and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7d5668; op2val:0x86bc0e; valaddr_reg:x16; val_offset:1952; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1952, x17, x15, 1952, x18)

inst_753:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7d5668 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x06bc0e and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7d5668; op2val:0x86bc0e; valaddr_reg:x16; val_offset:1960; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1960, x17, x15, 1960, x18)

inst_754:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7d5668 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x06bc0e and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7d5668; op2val:0x86bc0e; valaddr_reg:x16; val_offset:1968; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1968, x17, x15, 1968, x18)

inst_755:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7d5668 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x06bc0e and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7d5668; op2val:0x86bc0e; valaddr_reg:x16; val_offset:1976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1976, x17, x15, 1976, x18)

inst_756:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x090c42 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x790fb5 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f090c42; op2val:0xf90fb5; valaddr_reg:x16; val_offset:1984; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1984, x17, x15, 1984, x18)

inst_757:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x090c42 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x790fb5 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f090c42; op2val:0xf90fb5; valaddr_reg:x16; val_offset:1992; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1992, x17, x15, 1992, x18)

inst_758:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x090c42 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x790fb5 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f090c42; op2val:0xf90fb5; valaddr_reg:x16; val_offset:2000; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 2000, x17, x15, 2000, x18)

inst_759:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x090c42 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x790fb5 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f090c42; op2val:0xf90fb5; valaddr_reg:x16; val_offset:2008; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 2008, x17, x15, 2008, x18)

inst_760:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x090c42 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x790fb5 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f090c42; op2val:0xf90fb5; valaddr_reg:x16; val_offset:2016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 2016, x17, x15, 2016, x18)

inst_761:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5661cd and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1f37a1 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5661cd; op2val:0x9f37a1; valaddr_reg:x16; val_offset:2024; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_4)

inst_762:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5661cd and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1f37a1 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5661cd; op2val:0x9f37a1; valaddr_reg:x16; val_offset:0; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 0, x17, x15, 0, x18)

inst_763:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5661cd and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1f37a1 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5661cd; op2val:0x9f37a1; valaddr_reg:x16; val_offset:8; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 8, x17, x15, 8, x18)

inst_764:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5661cd and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1f37a1 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5661cd; op2val:0x9f37a1; valaddr_reg:x16; val_offset:16; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 16, x17, x15, 16, x18)

inst_765:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5661cd and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1f37a1 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5661cd; op2val:0x9f37a1; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 24, x17, x15, 24, x18)

inst_766:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x0b3d44 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x752437 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e0b3d44; op2val:0x1f52437; valaddr_reg:x16; val_offset:32; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 32, x17, x15, 32, x18)

inst_767:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x0b3d44 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x752437 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e0b3d44; op2val:0x1f52437; valaddr_reg:x16; val_offset:40; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 40, x17, x15, 40, x18)

inst_768:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x0b3d44 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x752437 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e0b3d44; op2val:0x1f52437; valaddr_reg:x16; val_offset:48; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 48, x17, x15, 48, x18)

inst_769:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x0b3d44 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x752437 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e0b3d44; op2val:0x1f52437; valaddr_reg:x16; val_offset:56; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 56, x17, x15, 56, x18)

inst_770:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x0b3d44 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x752437 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e0b3d44; op2val:0x1f52437; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 64, x17, x15, 64, x18)

inst_771:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x26674b and fs2 == 0 and fe2 == 0x02 and fm2 == 0x4d1fb8 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea6674b; op2val:0x14d1fb8; valaddr_reg:x16; val_offset:72; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 72, x17, x15, 72, x18)

inst_772:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x26674b and fs2 == 0 and fe2 == 0x02 and fm2 == 0x4d1fb8 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea6674b; op2val:0x14d1fb8; valaddr_reg:x16; val_offset:80; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 80, x17, x15, 80, x18)

inst_773:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x26674b and fs2 == 0 and fe2 == 0x02 and fm2 == 0x4d1fb8 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea6674b; op2val:0x14d1fb8; valaddr_reg:x16; val_offset:88; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 88, x17, x15, 88, x18)

inst_774:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x26674b and fs2 == 0 and fe2 == 0x02 and fm2 == 0x4d1fb8 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea6674b; op2val:0x14d1fb8; valaddr_reg:x16; val_offset:96; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 96, x17, x15, 96, x18)

inst_775:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x26674b and fs2 == 0 and fe2 == 0x02 and fm2 == 0x4d1fb8 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea6674b; op2val:0x14d1fb8; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 104, x17, x15, 104, x18)

inst_776:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5ccc8b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a970f and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e5ccc8b; op2val:0x19a970f; valaddr_reg:x16; val_offset:112; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 112, x17, x15, 112, x18)

inst_777:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5ccc8b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a970f and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e5ccc8b; op2val:0x19a970f; valaddr_reg:x16; val_offset:120; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 120, x17, x15, 120, x18)

inst_778:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5ccc8b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a970f and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e5ccc8b; op2val:0x19a970f; valaddr_reg:x16; val_offset:128; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 128, x17, x15, 128, x18)

inst_779:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5ccc8b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a970f and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e5ccc8b; op2val:0x19a970f; valaddr_reg:x16; val_offset:136; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 136, x17, x15, 136, x18)

inst_780:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5ccc8b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x1a970f and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e5ccc8b; op2val:0x19a970f; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 144, x17, x15, 144, x18)

inst_781:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x53886b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x215ca0 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f53886b; op2val:0xa15ca0; valaddr_reg:x16; val_offset:152; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 152, x17, x15, 152, x18)

inst_782:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x53886b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x215ca0 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f53886b; op2val:0xa15ca0; valaddr_reg:x16; val_offset:160; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 160, x17, x15, 160, x18)

inst_783:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x53886b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x215ca0 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f53886b; op2val:0xa15ca0; valaddr_reg:x16; val_offset:168; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 168, x17, x15, 168, x18)

inst_784:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x53886b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x215ca0 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f53886b; op2val:0xa15ca0; valaddr_reg:x16; val_offset:176; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 176, x17, x15, 176, x18)

inst_785:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x53886b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x215ca0 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f53886b; op2val:0xa15ca0; valaddr_reg:x16; val_offset:184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 184, x17, x15, 184, x18)

inst_786:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6b91aa and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e5bb and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6b91aa; op2val:0x90e5bb; valaddr_reg:x16; val_offset:192; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 192, x17, x15, 192, x18)

inst_787:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6b91aa and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e5bb and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6b91aa; op2val:0x90e5bb; valaddr_reg:x16; val_offset:200; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 200, x17, x15, 200, x18)

inst_788:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6b91aa and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e5bb and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6b91aa; op2val:0x90e5bb; valaddr_reg:x16; val_offset:208; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 208, x17, x15, 208, x18)

inst_789:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6b91aa and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e5bb and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6b91aa; op2val:0x90e5bb; valaddr_reg:x16; val_offset:216; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 216, x17, x15, 216, x18)

inst_790:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6b91aa and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e5bb and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6b91aa; op2val:0x90e5bb; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 224, x17, x15, 224, x18)

inst_791:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7e83cc and fs2 == 0 and fe2 == 0x02 and fm2 == 0x061c82 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efe83cc; op2val:0x1061c82; valaddr_reg:x16; val_offset:232; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 232, x17, x15, 232, x18)

inst_792:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7e83cc and fs2 == 0 and fe2 == 0x02 and fm2 == 0x061c82 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efe83cc; op2val:0x1061c82; valaddr_reg:x16; val_offset:240; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 240, x17, x15, 240, x18)

inst_793:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7e83cc and fs2 == 0 and fe2 == 0x02 and fm2 == 0x061c82 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efe83cc; op2val:0x1061c82; valaddr_reg:x16; val_offset:248; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 248, x17, x15, 248, x18)

inst_794:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7e83cc and fs2 == 0 and fe2 == 0x02 and fm2 == 0x061c82 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efe83cc; op2val:0x1061c82; valaddr_reg:x16; val_offset:256; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 256, x17, x15, 256, x18)

inst_795:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7e83cc and fs2 == 0 and fe2 == 0x02 and fm2 == 0x061c82 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efe83cc; op2val:0x1061c82; valaddr_reg:x16; val_offset:264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 264, x17, x15, 264, x18)

inst_796:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2a449b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x4877e1 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2a449b; op2val:0xc877e1; valaddr_reg:x16; val_offset:272; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 272, x17, x15, 272, x18)

inst_797:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2a449b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x4877e1 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2a449b; op2val:0xc877e1; valaddr_reg:x16; val_offset:280; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 280, x17, x15, 280, x18)

inst_798:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2a449b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x4877e1 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2a449b; op2val:0xc877e1; valaddr_reg:x16; val_offset:288; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 288, x17, x15, 288, x18)

inst_799:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2a449b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x4877e1 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2a449b; op2val:0xc877e1; valaddr_reg:x16; val_offset:296; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 296, x17, x15, 296, x18)

inst_800:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2a449b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x4877e1 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2a449b; op2val:0xc877e1; valaddr_reg:x16; val_offset:304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 304, x17, x15, 304, x18)

inst_801:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x03d702 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x017330 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f03d702; op2val:0x1017330; valaddr_reg:x16; val_offset:312; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 312, x17, x15, 312, x18)

inst_802:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x03d702 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x017330 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f03d702; op2val:0x1017330; valaddr_reg:x16; val_offset:320; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 320, x17, x15, 320, x18)

inst_803:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x03d702 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x017330 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f03d702; op2val:0x1017330; valaddr_reg:x16; val_offset:328; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 328, x17, x15, 328, x18)

inst_804:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x03d702 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x017330 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f03d702; op2val:0x1017330; valaddr_reg:x16; val_offset:336; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 336, x17, x15, 336, x18)

inst_805:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x03d702 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x017330 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f03d702; op2val:0x1017330; valaddr_reg:x16; val_offset:344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 344, x17, x15, 344, x18)

inst_806:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2ee5ec and fs2 == 0 and fe2 == 0x02 and fm2 == 0x432944 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eaee5ec; op2val:0x1432944; valaddr_reg:x16; val_offset:352; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 352, x17, x15, 352, x18)

inst_807:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2ee5ec and fs2 == 0 and fe2 == 0x02 and fm2 == 0x432944 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eaee5ec; op2val:0x1432944; valaddr_reg:x16; val_offset:360; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 360, x17, x15, 360, x18)

inst_808:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2ee5ec and fs2 == 0 and fe2 == 0x02 and fm2 == 0x432944 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eaee5ec; op2val:0x1432944; valaddr_reg:x16; val_offset:368; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 368, x17, x15, 368, x18)

inst_809:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2ee5ec and fs2 == 0 and fe2 == 0x02 and fm2 == 0x432944 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eaee5ec; op2val:0x1432944; valaddr_reg:x16; val_offset:376; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 376, x17, x15, 376, x18)

inst_810:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2ee5ec and fs2 == 0 and fe2 == 0x02 and fm2 == 0x432944 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eaee5ec; op2val:0x1432944; valaddr_reg:x16; val_offset:384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 384, x17, x15, 384, x18)

inst_811:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x03bb4f and fs2 == 0 and fe2 == 0x02 and fm2 == 0x018e68 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f03bb4f; op2val:0x1018e68; valaddr_reg:x16; val_offset:392; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 392, x17, x15, 392, x18)

inst_812:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x03bb4f and fs2 == 0 and fe2 == 0x02 and fm2 == 0x018e68 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f03bb4f; op2val:0x1018e68; valaddr_reg:x16; val_offset:400; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 400, x17, x15, 400, x18)

inst_813:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x03bb4f and fs2 == 0 and fe2 == 0x02 and fm2 == 0x018e68 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f03bb4f; op2val:0x1018e68; valaddr_reg:x16; val_offset:408; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 408, x17, x15, 408, x18)

inst_814:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x03bb4f and fs2 == 0 and fe2 == 0x02 and fm2 == 0x018e68 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f03bb4f; op2val:0x1018e68; valaddr_reg:x16; val_offset:416; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 416, x17, x15, 416, x18)

inst_815:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x03bb4f and fs2 == 0 and fe2 == 0x02 and fm2 == 0x018e68 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f03bb4f; op2val:0x1018e68; valaddr_reg:x16; val_offset:424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 424, x17, x15, 424, x18)

inst_816:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6d5b51 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0fce59 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6d5b51; op2val:0x8fce59; valaddr_reg:x16; val_offset:432; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 432, x17, x15, 432, x18)

inst_817:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6d5b51 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0fce59 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6d5b51; op2val:0x8fce59; valaddr_reg:x16; val_offset:440; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 440, x17, x15, 440, x18)

inst_818:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6d5b51 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0fce59 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6d5b51; op2val:0x8fce59; valaddr_reg:x16; val_offset:448; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 448, x17, x15, 448, x18)

inst_819:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6d5b51 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0fce59 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6d5b51; op2val:0x8fce59; valaddr_reg:x16; val_offset:456; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 456, x17, x15, 456, x18)

inst_820:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6d5b51 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0fce59 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6d5b51; op2val:0x8fce59; valaddr_reg:x16; val_offset:464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 464, x17, x15, 464, x18)

inst_821:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4b8548 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x27b6df and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4b8548; op2val:0xa7b6df; valaddr_reg:x16; val_offset:472; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 472, x17, x15, 472, x18)

inst_822:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4b8548 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x27b6df and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4b8548; op2val:0xa7b6df; valaddr_reg:x16; val_offset:480; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 480, x17, x15, 480, x18)

inst_823:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4b8548 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x27b6df and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4b8548; op2val:0xa7b6df; valaddr_reg:x16; val_offset:488; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 488, x17, x15, 488, x18)

inst_824:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4b8548 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x27b6df and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4b8548; op2val:0xa7b6df; valaddr_reg:x16; val_offset:496; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 496, x17, x15, 496, x18)

inst_825:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4b8548 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x27b6df and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4b8548; op2val:0xa7b6df; valaddr_reg:x16; val_offset:504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 504, x17, x15, 504, x18)

inst_826:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5e28d8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x19a4b0 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ede28d8; op2val:0x119a4b0; valaddr_reg:x16; val_offset:512; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 512, x17, x15, 512, x18)

inst_827:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5e28d8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x19a4b0 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ede28d8; op2val:0x119a4b0; valaddr_reg:x16; val_offset:520; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 520, x17, x15, 520, x18)

inst_828:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5e28d8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x19a4b0 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ede28d8; op2val:0x119a4b0; valaddr_reg:x16; val_offset:528; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 528, x17, x15, 528, x18)

inst_829:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5e28d8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x19a4b0 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ede28d8; op2val:0x119a4b0; valaddr_reg:x16; val_offset:536; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 536, x17, x15, 536, x18)

inst_830:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5e28d8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x19a4b0 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ede28d8; op2val:0x119a4b0; valaddr_reg:x16; val_offset:544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 544, x17, x15, 544, x18)

inst_831:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x10cb4b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6bbcac and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f10cb4b; op2val:0xebbcac; valaddr_reg:x16; val_offset:552; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 552, x17, x15, 552, x18)

inst_832:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x10cb4b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6bbcac and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f10cb4b; op2val:0xebbcac; valaddr_reg:x16; val_offset:560; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 560, x17, x15, 560, x18)

inst_833:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x10cb4b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6bbcac and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f10cb4b; op2val:0xebbcac; valaddr_reg:x16; val_offset:568; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 568, x17, x15, 568, x18)

inst_834:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x10cb4b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6bbcac and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f10cb4b; op2val:0xebbcac; valaddr_reg:x16; val_offset:576; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 576, x17, x15, 576, x18)

inst_835:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x10cb4b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6bbcac and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f10cb4b; op2val:0xebbcac; valaddr_reg:x16; val_offset:584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 584, x17, x15, 584, x18)

inst_836:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5cb458 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1aa801 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5cb458; op2val:0x9aa801; valaddr_reg:x16; val_offset:592; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 592, x17, x15, 592, x18)

inst_837:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5cb458 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1aa801 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5cb458; op2val:0x9aa801; valaddr_reg:x16; val_offset:600; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 600, x17, x15, 600, x18)

inst_838:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5cb458 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1aa801 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5cb458; op2val:0x9aa801; valaddr_reg:x16; val_offset:608; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 608, x17, x15, 608, x18)

inst_839:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5cb458 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1aa801 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5cb458; op2val:0x9aa801; valaddr_reg:x16; val_offset:616; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 616, x17, x15, 616, x18)

inst_840:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5cb458 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1aa801 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5cb458; op2val:0x9aa801; valaddr_reg:x16; val_offset:624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 624, x17, x15, 624, x18)

inst_841:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4efa38 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1e511a and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4efa38; op2val:0x9e511a; valaddr_reg:x16; val_offset:632; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 632, x17, x15, 632, x18)

inst_842:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4efa38 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1e511a and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4efa38; op2val:0x9e511a; valaddr_reg:x16; val_offset:640; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 640, x17, x15, 640, x18)

inst_843:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4efa38 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1e511a and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4efa38; op2val:0x9e511a; valaddr_reg:x16; val_offset:648; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 648, x17, x15, 648, x18)

inst_844:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4efa38 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1e511a and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4efa38; op2val:0x9e511a; valaddr_reg:x16; val_offset:656; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 656, x17, x15, 656, x18)

inst_845:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4efa38 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1e511a and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4efa38; op2val:0x9e511a; valaddr_reg:x16; val_offset:664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 664, x17, x15, 664, x18)

inst_846:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x02f23a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7a3d7e and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e82f23a; op2val:0x17a3d7e; valaddr_reg:x16; val_offset:672; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 672, x17, x15, 672, x18)

inst_847:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x02f23a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7a3d7e and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e82f23a; op2val:0x17a3d7e; valaddr_reg:x16; val_offset:680; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 680, x17, x15, 680, x18)

inst_848:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x02f23a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7a3d7e and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e82f23a; op2val:0x17a3d7e; valaddr_reg:x16; val_offset:688; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 688, x17, x15, 688, x18)

inst_849:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x02f23a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7a3d7e and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e82f23a; op2val:0x17a3d7e; valaddr_reg:x16; val_offset:696; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 696, x17, x15, 696, x18)

inst_850:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x02f23a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7a3d7e and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e82f23a; op2val:0x17a3d7e; valaddr_reg:x16; val_offset:704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 704, x17, x15, 704, x18)

inst_851:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x6e975b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x0956ea and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e6e975b; op2val:0x18956ea; valaddr_reg:x16; val_offset:712; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 712, x17, x15, 712, x18)

inst_852:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x6e975b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x0956ea and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e6e975b; op2val:0x18956ea; valaddr_reg:x16; val_offset:720; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 720, x17, x15, 720, x18)

inst_853:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x6e975b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x0956ea and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e6e975b; op2val:0x18956ea; valaddr_reg:x16; val_offset:728; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 728, x17, x15, 728, x18)

inst_854:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x6e975b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x0956ea and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e6e975b; op2val:0x18956ea; valaddr_reg:x16; val_offset:736; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 736, x17, x15, 736, x18)

inst_855:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x6e975b and fs2 == 0 and fe2 == 0x03 and fm2 == 0x0956ea and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e6e975b; op2val:0x18956ea; valaddr_reg:x16; val_offset:744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 744, x17, x15, 744, x18)

inst_856:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x66486c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0e4b68 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f66486c; op2val:0x8e4b68; valaddr_reg:x16; val_offset:752; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 752, x17, x15, 752, x18)

inst_857:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x66486c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0e4b68 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f66486c; op2val:0x8e4b68; valaddr_reg:x16; val_offset:760; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 760, x17, x15, 760, x18)

inst_858:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x66486c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0e4b68 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f66486c; op2val:0x8e4b68; valaddr_reg:x16; val_offset:768; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 768, x17, x15, 768, x18)

inst_859:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x66486c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0e4b68 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f66486c; op2val:0x8e4b68; valaddr_reg:x16; val_offset:776; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 776, x17, x15, 776, x18)

inst_860:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x66486c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0e4b68 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f66486c; op2val:0x8e4b68; valaddr_reg:x16; val_offset:784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 784, x17, x15, 784, x18)

inst_861:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x41e5ff and fs2 == 0 and fe2 == 0x04 and fm2 == 0x28fee7 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dc1e5ff; op2val:0x228fee7; valaddr_reg:x16; val_offset:792; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 792, x17, x15, 792, x18)

inst_862:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x41e5ff and fs2 == 0 and fe2 == 0x04 and fm2 == 0x28fee7 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dc1e5ff; op2val:0x228fee7; valaddr_reg:x16; val_offset:800; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 800, x17, x15, 800, x18)

inst_863:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x41e5ff and fs2 == 0 and fe2 == 0x04 and fm2 == 0x28fee7 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dc1e5ff; op2val:0x228fee7; valaddr_reg:x16; val_offset:808; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 808, x17, x15, 808, x18)

inst_864:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x41e5ff and fs2 == 0 and fe2 == 0x04 and fm2 == 0x28fee7 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dc1e5ff; op2val:0x228fee7; valaddr_reg:x16; val_offset:816; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 816, x17, x15, 816, x18)

inst_865:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x41e5ff and fs2 == 0 and fe2 == 0x04 and fm2 == 0x28fee7 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dc1e5ff; op2val:0x228fee7; valaddr_reg:x16; val_offset:824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 824, x17, x15, 824, x18)

inst_866:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0a83be and fs2 == 0 and fe2 == 0x02 and fm2 == 0x6c912f and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8a83be; op2val:0x16c912f; valaddr_reg:x16; val_offset:832; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 832, x17, x15, 832, x18)

inst_867:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0a83be and fs2 == 0 and fe2 == 0x02 and fm2 == 0x6c912f and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8a83be; op2val:0x16c912f; valaddr_reg:x16; val_offset:840; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 840, x17, x15, 840, x18)

inst_868:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0a83be and fs2 == 0 and fe2 == 0x02 and fm2 == 0x6c912f and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8a83be; op2val:0x16c912f; valaddr_reg:x16; val_offset:848; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 848, x17, x15, 848, x18)

inst_869:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0a83be and fs2 == 0 and fe2 == 0x02 and fm2 == 0x6c912f and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8a83be; op2val:0x16c912f; valaddr_reg:x16; val_offset:856; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 856, x17, x15, 856, x18)

inst_870:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0a83be and fs2 == 0 and fe2 == 0x02 and fm2 == 0x6c912f and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8a83be; op2val:0x16c912f; valaddr_reg:x16; val_offset:864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 864, x17, x15, 864, x18)

inst_871:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7b9ce2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x023b5a and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7b9ce2; op2val:0x823b5a; valaddr_reg:x16; val_offset:872; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 872, x17, x15, 872, x18)

inst_872:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7b9ce2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x023b5a and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7b9ce2; op2val:0x823b5a; valaddr_reg:x16; val_offset:880; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 880, x17, x15, 880, x18)

inst_873:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7b9ce2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x023b5a and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7b9ce2; op2val:0x823b5a; valaddr_reg:x16; val_offset:888; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 888, x17, x15, 888, x18)

inst_874:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7b9ce2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x023b5a and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7b9ce2; op2val:0x823b5a; valaddr_reg:x16; val_offset:896; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 896, x17, x15, 896, x18)

inst_875:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7b9ce2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x023b5a and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7b9ce2; op2val:0x823b5a; valaddr_reg:x16; val_offset:904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 904, x17, x15, 904, x18)

inst_876:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x33280d and fs2 == 0 and fe2 == 0x02 and fm2 == 0x36e6cf and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb3280d; op2val:0x136e6cf; valaddr_reg:x16; val_offset:912; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 912, x17, x15, 912, x18)

inst_877:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x33280d and fs2 == 0 and fe2 == 0x02 and fm2 == 0x36e6cf and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb3280d; op2val:0x136e6cf; valaddr_reg:x16; val_offset:920; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 920, x17, x15, 920, x18)

inst_878:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x33280d and fs2 == 0 and fe2 == 0x02 and fm2 == 0x36e6cf and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb3280d; op2val:0x136e6cf; valaddr_reg:x16; val_offset:928; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 928, x17, x15, 928, x18)

inst_879:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x33280d and fs2 == 0 and fe2 == 0x02 and fm2 == 0x36e6cf and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb3280d; op2val:0x136e6cf; valaddr_reg:x16; val_offset:936; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 936, x17, x15, 936, x18)

inst_880:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x33280d and fs2 == 0 and fe2 == 0x02 and fm2 == 0x36e6cf and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb3280d; op2val:0x136e6cf; valaddr_reg:x16; val_offset:944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 944, x17, x15, 944, x18)

inst_881:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x13ac3f and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5de55c and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e93ac3f; op2val:0x15de55c; valaddr_reg:x16; val_offset:952; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 952, x17, x15, 952, x18)

inst_882:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x13ac3f and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5de55c and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e93ac3f; op2val:0x15de55c; valaddr_reg:x16; val_offset:960; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 960, x17, x15, 960, x18)

inst_883:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x13ac3f and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5de55c and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e93ac3f; op2val:0x15de55c; valaddr_reg:x16; val_offset:968; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 968, x17, x15, 968, x18)

inst_884:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x13ac3f and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5de55c and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e93ac3f; op2val:0x15de55c; valaddr_reg:x16; val_offset:976; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 976, x17, x15, 976, x18)

inst_885:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x13ac3f and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5de55c and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e93ac3f; op2val:0x15de55c; valaddr_reg:x16; val_offset:984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 984, x17, x15, 984, x18)

inst_886:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7d0767 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0180c4 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7d0767; op2val:0x8180c4; valaddr_reg:x16; val_offset:992; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 992, x17, x15, 992, x18)

inst_887:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7d0767 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0180c4 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7d0767; op2val:0x8180c4; valaddr_reg:x16; val_offset:1000; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1000, x17, x15, 1000, x18)

inst_888:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7d0767 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0180c4 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7d0767; op2val:0x8180c4; valaddr_reg:x16; val_offset:1008; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1008, x17, x15, 1008, x18)

inst_889:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7d0767 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0180c4 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7d0767; op2val:0x8180c4; valaddr_reg:x16; val_offset:1016; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1016, x17, x15, 1016, x18)

inst_890:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7d0767 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0180c4 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7d0767; op2val:0x8180c4; valaddr_reg:x16; val_offset:1024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1024, x17, x15, 1024, x18)

inst_891:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x3a7fa0 and fs2 == 0 and fe2 == 0x06 and fm2 == 0x2fb37d and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3cba7fa0; op2val:0x32fb37d; valaddr_reg:x16; val_offset:1032; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1032, x17, x15, 1032, x18)

inst_892:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x3a7fa0 and fs2 == 0 and fe2 == 0x06 and fm2 == 0x2fb37d and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3cba7fa0; op2val:0x32fb37d; valaddr_reg:x16; val_offset:1040; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1040, x17, x15, 1040, x18)

inst_893:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x3a7fa0 and fs2 == 0 and fe2 == 0x06 and fm2 == 0x2fb37d and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3cba7fa0; op2val:0x32fb37d; valaddr_reg:x16; val_offset:1048; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1048, x17, x15, 1048, x18)

inst_894:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x3a7fa0 and fs2 == 0 and fe2 == 0x06 and fm2 == 0x2fb37d and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3cba7fa0; op2val:0x32fb37d; valaddr_reg:x16; val_offset:1056; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1056, x17, x15, 1056, x18)

inst_895:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x3a7fa0 and fs2 == 0 and fe2 == 0x06 and fm2 == 0x2fb37d and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3cba7fa0; op2val:0x32fb37d; valaddr_reg:x16; val_offset:1064; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1064, x17, x15, 1064, x18)

inst_896:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x18e716 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x564e67 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f18e716; op2val:0xd64e67; valaddr_reg:x16; val_offset:1072; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1072, x17, x15, 1072, x18)

inst_897:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x18e716 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x564e67 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f18e716; op2val:0xd64e67; valaddr_reg:x16; val_offset:1080; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1080, x17, x15, 1080, x18)

inst_898:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x18e716 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x564e67 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f18e716; op2val:0xd64e67; valaddr_reg:x16; val_offset:1088; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1088, x17, x15, 1088, x18)

inst_899:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x18e716 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x564e67 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f18e716; op2val:0xd64e67; valaddr_reg:x16; val_offset:1096; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1096, x17, x15, 1096, x18)

inst_900:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x18e716 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x564e67 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f18e716; op2val:0xd64e67; valaddr_reg:x16; val_offset:1104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1104, x17, x15, 1104, x18)

inst_901:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x466679 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x25293c and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f466679; op2val:0xa5293c; valaddr_reg:x16; val_offset:1112; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1112, x17, x15, 1112, x18)

inst_902:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x466679 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x25293c and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f466679; op2val:0xa5293c; valaddr_reg:x16; val_offset:1120; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1120, x17, x15, 1120, x18)

inst_903:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x466679 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x25293c and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f466679; op2val:0xa5293c; valaddr_reg:x16; val_offset:1128; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1128, x17, x15, 1128, x18)

inst_904:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x466679 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x25293c and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f466679; op2val:0xa5293c; valaddr_reg:x16; val_offset:1136; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1136, x17, x15, 1136, x18)

inst_905:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x466679 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x25293c and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f466679; op2val:0xa5293c; valaddr_reg:x16; val_offset:1144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1144, x17, x15, 1144, x18)

inst_906:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x741ccd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x063bb3 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e741ccd; op2val:0x1863bb3; valaddr_reg:x16; val_offset:1152; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1152, x17, x15, 1152, x18)

inst_907:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x741ccd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x063bb3 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e741ccd; op2val:0x1863bb3; valaddr_reg:x16; val_offset:1160; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1160, x17, x15, 1160, x18)

inst_908:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x741ccd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x063bb3 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e741ccd; op2val:0x1863bb3; valaddr_reg:x16; val_offset:1168; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1168, x17, x15, 1168, x18)

inst_909:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x741ccd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x063bb3 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e741ccd; op2val:0x1863bb3; valaddr_reg:x16; val_offset:1176; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1176, x17, x15, 1176, x18)

inst_910:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x741ccd and fs2 == 0 and fe2 == 0x03 and fm2 == 0x063bb3 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e741ccd; op2val:0x1863bb3; valaddr_reg:x16; val_offset:1184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1184, x17, x15, 1184, x18)

inst_911:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x023f0b and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7b95c1 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e823f0b; op2val:0x17b95c1; valaddr_reg:x16; val_offset:1192; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1192, x17, x15, 1192, x18)

inst_912:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x023f0b and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7b95c1 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e823f0b; op2val:0x17b95c1; valaddr_reg:x16; val_offset:1200; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1200, x17, x15, 1200, x18)

inst_913:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x023f0b and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7b95c1 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e823f0b; op2val:0x17b95c1; valaddr_reg:x16; val_offset:1208; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1208, x17, x15, 1208, x18)

inst_914:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x023f0b and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7b95c1 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e823f0b; op2val:0x17b95c1; valaddr_reg:x16; val_offset:1216; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1216, x17, x15, 1216, x18)

inst_915:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x023f0b and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7b95c1 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e823f0b; op2val:0x17b95c1; valaddr_reg:x16; val_offset:1224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1224, x17, x15, 1224, x18)

inst_916:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x1bbd92 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x5266ba and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d1bbd92; op2val:0x2d266ba; valaddr_reg:x16; val_offset:1232; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1232, x17, x15, 1232, x18)

inst_917:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x1bbd92 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x5266ba and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d1bbd92; op2val:0x2d266ba; valaddr_reg:x16; val_offset:1240; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1240, x17, x15, 1240, x18)

inst_918:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x1bbd92 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x5266ba and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d1bbd92; op2val:0x2d266ba; valaddr_reg:x16; val_offset:1248; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1248, x17, x15, 1248, x18)

inst_919:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x1bbd92 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x5266ba and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d1bbd92; op2val:0x2d266ba; valaddr_reg:x16; val_offset:1256; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1256, x17, x15, 1256, x18)

inst_920:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x1bbd92 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x5266ba and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d1bbd92; op2val:0x2d266ba; valaddr_reg:x16; val_offset:1264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1264, x17, x15, 1264, x18)

inst_921:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x16d6ca and fs2 == 0 and fe2 == 0x02 and fm2 == 0x593cfe and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e96d6ca; op2val:0x1593cfe; valaddr_reg:x16; val_offset:1272; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1272, x17, x15, 1272, x18)

inst_922:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x16d6ca and fs2 == 0 and fe2 == 0x02 and fm2 == 0x593cfe and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e96d6ca; op2val:0x1593cfe; valaddr_reg:x16; val_offset:1280; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1280, x17, x15, 1280, x18)

inst_923:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x16d6ca and fs2 == 0 and fe2 == 0x02 and fm2 == 0x593cfe and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e96d6ca; op2val:0x1593cfe; valaddr_reg:x16; val_offset:1288; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1288, x17, x15, 1288, x18)

inst_924:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x16d6ca and fs2 == 0 and fe2 == 0x02 and fm2 == 0x593cfe and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e96d6ca; op2val:0x1593cfe; valaddr_reg:x16; val_offset:1296; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1296, x17, x15, 1296, x18)

inst_925:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x16d6ca and fs2 == 0 and fe2 == 0x02 and fm2 == 0x593cfe and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e96d6ca; op2val:0x1593cfe; valaddr_reg:x16; val_offset:1304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1304, x17, x15, 1304, x18)

inst_926:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x143e93 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5d0a55 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e943e93; op2val:0x15d0a55; valaddr_reg:x16; val_offset:1312; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1312, x17, x15, 1312, x18)

inst_927:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x143e93 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5d0a55 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e943e93; op2val:0x15d0a55; valaddr_reg:x16; val_offset:1320; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1320, x17, x15, 1320, x18)

inst_928:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x143e93 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5d0a55 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e943e93; op2val:0x15d0a55; valaddr_reg:x16; val_offset:1328; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1328, x17, x15, 1328, x18)

inst_929:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x143e93 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5d0a55 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e943e93; op2val:0x15d0a55; valaddr_reg:x16; val_offset:1336; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1336, x17, x15, 1336, x18)

inst_930:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x143e93 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5d0a55 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e943e93; op2val:0x15d0a55; valaddr_reg:x16; val_offset:1344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1344, x17, x15, 1344, x18)

inst_931:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x047d9c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7752b7 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f047d9c; op2val:0xf752b7; valaddr_reg:x16; val_offset:1352; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1352, x17, x15, 1352, x18)

inst_932:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x047d9c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7752b7 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f047d9c; op2val:0xf752b7; valaddr_reg:x16; val_offset:1360; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1360, x17, x15, 1360, x18)

inst_933:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x047d9c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7752b7 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f047d9c; op2val:0xf752b7; valaddr_reg:x16; val_offset:1368; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1368, x17, x15, 1368, x18)

inst_934:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x047d9c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7752b7 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f047d9c; op2val:0xf752b7; valaddr_reg:x16; val_offset:1376; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1376, x17, x15, 1376, x18)

inst_935:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x047d9c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7752b7 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f047d9c; op2val:0xf752b7; valaddr_reg:x16; val_offset:1384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1384, x17, x15, 1384, x18)

inst_936:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x51cfb3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1c2dad and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f51cfb3; op2val:0x9c2dad; valaddr_reg:x16; val_offset:1392; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1392, x17, x15, 1392, x18)

inst_937:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x51cfb3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1c2dad and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f51cfb3; op2val:0x9c2dad; valaddr_reg:x16; val_offset:1400; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1400, x17, x15, 1400, x18)

inst_938:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x51cfb3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1c2dad and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f51cfb3; op2val:0x9c2dad; valaddr_reg:x16; val_offset:1408; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1408, x17, x15, 1408, x18)

inst_939:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x51cfb3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1c2dad and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f51cfb3; op2val:0x9c2dad; valaddr_reg:x16; val_offset:1416; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1416, x17, x15, 1416, x18)

inst_940:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x51cfb3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1c2dad and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f51cfb3; op2val:0x9c2dad; valaddr_reg:x16; val_offset:1424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1424, x17, x15, 1424, x18)

inst_941:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4f46a4 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x1e16bb and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ecf46a4; op2val:0x11e16bb; valaddr_reg:x16; val_offset:1432; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1432, x17, x15, 1432, x18)

inst_942:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4f46a4 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x1e16bb and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ecf46a4; op2val:0x11e16bb; valaddr_reg:x16; val_offset:1440; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1440, x17, x15, 1440, x18)

inst_943:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4f46a4 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x1e16bb and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ecf46a4; op2val:0x11e16bb; valaddr_reg:x16; val_offset:1448; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1448, x17, x15, 1448, x18)

inst_944:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4f46a4 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x1e16bb and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ecf46a4; op2val:0x11e16bb; valaddr_reg:x16; val_offset:1456; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1456, x17, x15, 1456, x18)

inst_945:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4f46a4 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x1e16bb and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ecf46a4; op2val:0x11e16bb; valaddr_reg:x16; val_offset:1464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1464, x17, x15, 1464, x18)

inst_946:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0f0e9d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x650e31 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0f0e9d; op2val:0xe50e31; valaddr_reg:x16; val_offset:1472; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1472, x17, x15, 1472, x18)

inst_947:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0f0e9d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x650e31 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0f0e9d; op2val:0xe50e31; valaddr_reg:x16; val_offset:1480; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1480, x17, x15, 1480, x18)

inst_948:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0f0e9d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x650e31 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0f0e9d; op2val:0xe50e31; valaddr_reg:x16; val_offset:1488; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1488, x17, x15, 1488, x18)

inst_949:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0f0e9d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x650e31 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0f0e9d; op2val:0xe50e31; valaddr_reg:x16; val_offset:1496; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1496, x17, x15, 1496, x18)

inst_950:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0f0e9d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x650e31 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0f0e9d; op2val:0xe50e31; valaddr_reg:x16; val_offset:1504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1504, x17, x15, 1504, x18)

inst_951:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5a6605 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x1609a4 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eda6605; op2val:0x11609a4; valaddr_reg:x16; val_offset:1512; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1512, x17, x15, 1512, x18)

inst_952:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5a6605 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x1609a4 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eda6605; op2val:0x11609a4; valaddr_reg:x16; val_offset:1520; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1520, x17, x15, 1520, x18)

inst_953:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5a6605 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x1609a4 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eda6605; op2val:0x11609a4; valaddr_reg:x16; val_offset:1528; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1528, x17, x15, 1528, x18)

inst_954:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5a6605 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x1609a4 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eda6605; op2val:0x11609a4; valaddr_reg:x16; val_offset:1536; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1536, x17, x15, 1536, x18)

inst_955:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5a6605 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x1609a4 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eda6605; op2val:0x11609a4; valaddr_reg:x16; val_offset:1544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1544, x17, x15, 1544, x18)

inst_956:
// fs1 == 0 and fe1 == 0x77 and fm1 == 0x1f7b0a and fs2 == 0 and fe2 == 0x08 and fm2 == 0x4d778c and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3b9f7b0a; op2val:0x44d778c; valaddr_reg:x16; val_offset:1552; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1552, x17, x15, 1552, x18)

inst_957:
// fs1 == 0 and fe1 == 0x77 and fm1 == 0x1f7b0a and fs2 == 0 and fe2 == 0x08 and fm2 == 0x4d778c and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3b9f7b0a; op2val:0x44d778c; valaddr_reg:x16; val_offset:1560; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1560, x17, x15, 1560, x18)

inst_958:
// fs1 == 0 and fe1 == 0x77 and fm1 == 0x1f7b0a and fs2 == 0 and fe2 == 0x08 and fm2 == 0x4d778c and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3b9f7b0a; op2val:0x44d778c; valaddr_reg:x16; val_offset:1568; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1568, x17, x15, 1568, x18)

inst_959:
// fs1 == 0 and fe1 == 0x77 and fm1 == 0x1f7b0a and fs2 == 0 and fe2 == 0x08 and fm2 == 0x4d778c and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3b9f7b0a; op2val:0x44d778c; valaddr_reg:x16; val_offset:1576; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1576, x17, x15, 1576, x18)

inst_960:
// fs1 == 0 and fe1 == 0x77 and fm1 == 0x1f7b0a and fs2 == 0 and fe2 == 0x08 and fm2 == 0x4d778c and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3b9f7b0a; op2val:0x44d778c; valaddr_reg:x16; val_offset:1584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1584, x17, x15, 1584, x18)

inst_961:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x17f214 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x57a7f8 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e97f214; op2val:0x157a7f8; valaddr_reg:x16; val_offset:1592; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1592, x17, x15, 1592, x18)

inst_962:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x17f214 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x57a7f8 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e97f214; op2val:0x157a7f8; valaddr_reg:x16; val_offset:1600; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1600, x17, x15, 1600, x18)

inst_963:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x17f214 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x57a7f8 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e97f214; op2val:0x157a7f8; valaddr_reg:x16; val_offset:1608; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1608, x17, x15, 1608, x18)

inst_964:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x17f214 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x57a7f8 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e97f214; op2val:0x157a7f8; valaddr_reg:x16; val_offset:1616; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1616, x17, x15, 1616, x18)

inst_965:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x17f214 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x57a7f8 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e97f214; op2val:0x157a7f8; valaddr_reg:x16; val_offset:1624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1624, x17, x15, 1624, x18)

inst_966:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x57406c and fs2 == 0 and fe2 == 0x04 and fm2 == 0x183b2b and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dd7406c; op2val:0x2183b2b; valaddr_reg:x16; val_offset:1632; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1632, x17, x15, 1632, x18)

inst_967:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x57406c and fs2 == 0 and fe2 == 0x04 and fm2 == 0x183b2b and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dd7406c; op2val:0x2183b2b; valaddr_reg:x16; val_offset:1640; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1640, x17, x15, 1640, x18)

inst_968:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x57406c and fs2 == 0 and fe2 == 0x04 and fm2 == 0x183b2b and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dd7406c; op2val:0x2183b2b; valaddr_reg:x16; val_offset:1648; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1648, x17, x15, 1648, x18)

inst_969:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x57406c and fs2 == 0 and fe2 == 0x04 and fm2 == 0x183b2b and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dd7406c; op2val:0x2183b2b; valaddr_reg:x16; val_offset:1656; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1656, x17, x15, 1656, x18)

inst_970:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x57406c and fs2 == 0 and fe2 == 0x04 and fm2 == 0x183b2b and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dd7406c; op2val:0x2183b2b; valaddr_reg:x16; val_offset:1664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1664, x17, x15, 1664, x18)

inst_971:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x11bbb3 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x60d968 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e91bbb3; op2val:0x160d968; valaddr_reg:x16; val_offset:1672; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1672, x17, x15, 1672, x18)

inst_972:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x11bbb3 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x60d968 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e91bbb3; op2val:0x160d968; valaddr_reg:x16; val_offset:1680; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1680, x17, x15, 1680, x18)

inst_973:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x11bbb3 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x60d968 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e91bbb3; op2val:0x160d968; valaddr_reg:x16; val_offset:1688; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1688, x17, x15, 1688, x18)

inst_974:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x11bbb3 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x60d968 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e91bbb3; op2val:0x160d968; valaddr_reg:x16; val_offset:1696; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1696, x17, x15, 1696, x18)

inst_975:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x11bbb3 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x60d968 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e91bbb3; op2val:0x160d968; valaddr_reg:x16; val_offset:1704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1704, x17, x15, 1704, x18)

inst_976:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x67626b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0d9dfc and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f67626b; op2val:0x8d9dfc; valaddr_reg:x16; val_offset:1712; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1712, x17, x15, 1712, x18)

inst_977:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x67626b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0d9dfc and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f67626b; op2val:0x8d9dfc; valaddr_reg:x16; val_offset:1720; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1720, x17, x15, 1720, x18)

inst_978:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x67626b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0d9dfc and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f67626b; op2val:0x8d9dfc; valaddr_reg:x16; val_offset:1728; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1728, x17, x15, 1728, x18)

inst_979:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x67626b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0d9dfc and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f67626b; op2val:0x8d9dfc; valaddr_reg:x16; val_offset:1736; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1736, x17, x15, 1736, x18)

inst_980:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x67626b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0d9dfc and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f67626b; op2val:0x8d9dfc; valaddr_reg:x16; val_offset:1744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1744, x17, x15, 1744, x18)

inst_981:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x4d0d0e and fs2 == 0 and fe2 == 0x05 and fm2 == 0x1fcdde and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d4d0d0e; op2val:0x29fcdde; valaddr_reg:x16; val_offset:1752; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1752, x17, x15, 1752, x18)

inst_982:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x4d0d0e and fs2 == 0 and fe2 == 0x05 and fm2 == 0x1fcdde and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d4d0d0e; op2val:0x29fcdde; valaddr_reg:x16; val_offset:1760; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1760, x17, x15, 1760, x18)

inst_983:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x4d0d0e and fs2 == 0 and fe2 == 0x05 and fm2 == 0x1fcdde and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d4d0d0e; op2val:0x29fcdde; valaddr_reg:x16; val_offset:1768; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1768, x17, x15, 1768, x18)

inst_984:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x4d0d0e and fs2 == 0 and fe2 == 0x05 and fm2 == 0x1fcdde and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d4d0d0e; op2val:0x29fcdde; valaddr_reg:x16; val_offset:1776; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1776, x17, x15, 1776, x18)

inst_985:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x4d0d0e and fs2 == 0 and fe2 == 0x05 and fm2 == 0x1fcdde and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d4d0d0e; op2val:0x29fcdde; valaddr_reg:x16; val_offset:1784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1784, x17, x15, 1784, x18)

inst_986:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x634f5c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1027d3 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f634f5c; op2val:0x9027d3; valaddr_reg:x16; val_offset:1792; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1792, x17, x15, 1792, x18)

inst_987:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x634f5c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1027d3 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f634f5c; op2val:0x9027d3; valaddr_reg:x16; val_offset:1800; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1800, x17, x15, 1800, x18)

inst_988:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x634f5c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1027d3 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f634f5c; op2val:0x9027d3; valaddr_reg:x16; val_offset:1808; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1808, x17, x15, 1808, x18)

inst_989:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x634f5c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1027d3 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f634f5c; op2val:0x9027d3; valaddr_reg:x16; val_offset:1816; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1816, x17, x15, 1816, x18)

inst_990:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x634f5c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1027d3 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f634f5c; op2val:0x9027d3; valaddr_reg:x16; val_offset:1824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1824, x17, x15, 1824, x18)

inst_991:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0fa7cc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6419f2 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0fa7cc; op2val:0xe419f2; valaddr_reg:x16; val_offset:1832; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1832, x17, x15, 1832, x18)

inst_992:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0fa7cc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6419f2 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0fa7cc; op2val:0xe419f2; valaddr_reg:x16; val_offset:1840; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1840, x17, x15, 1840, x18)

inst_993:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0fa7cc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6419f2 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0fa7cc; op2val:0xe419f2; valaddr_reg:x16; val_offset:1848; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1848, x17, x15, 1848, x18)

inst_994:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0fa7cc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6419f2 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0fa7cc; op2val:0xe419f2; valaddr_reg:x16; val_offset:1856; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1856, x17, x15, 1856, x18)

inst_995:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0fa7cc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6419f2 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0fa7cc; op2val:0xe419f2; valaddr_reg:x16; val_offset:1864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1864, x17, x15, 1864, x18)

inst_996:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2895c5 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x425eea and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea895c5; op2val:0x1425eea; valaddr_reg:x16; val_offset:1872; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1872, x17, x15, 1872, x18)

inst_997:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2895c5 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x425eea and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea895c5; op2val:0x1425eea; valaddr_reg:x16; val_offset:1880; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1880, x17, x15, 1880, x18)

inst_998:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2895c5 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x425eea and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea895c5; op2val:0x1425eea; valaddr_reg:x16; val_offset:1888; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1888, x17, x15, 1888, x18)

inst_999:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2895c5 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x425eea and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea895c5; op2val:0x1425eea; valaddr_reg:x16; val_offset:1896; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1896, x17, x15, 1896, x18)

inst_1000:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2895c5 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x425eea and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea895c5; op2val:0x1425eea; valaddr_reg:x16; val_offset:1904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1904, x17, x15, 1904, x18)

inst_1001:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x342046 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x35eac4 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f342046; op2val:0xb5eac4; valaddr_reg:x16; val_offset:1912; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1912, x17, x15, 1912, x18)

inst_1002:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x342046 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x35eac4 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f342046; op2val:0xb5eac4; valaddr_reg:x16; val_offset:1920; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1920, x17, x15, 1920, x18)

inst_1003:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x342046 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x35eac4 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f342046; op2val:0xb5eac4; valaddr_reg:x16; val_offset:1928; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1928, x17, x15, 1928, x18)

inst_1004:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x342046 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x35eac4 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f342046; op2val:0xb5eac4; valaddr_reg:x16; val_offset:1936; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1936, x17, x15, 1936, x18)

inst_1005:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x342046 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x35eac4 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f342046; op2val:0xb5eac4; valaddr_reg:x16; val_offset:1944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1944, x17, x15, 1944, x18)

inst_1006:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x342e95 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x35dc51 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb42e95; op2val:0x135dc51; valaddr_reg:x16; val_offset:1952; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1952, x17, x15, 1952, x18)

inst_1007:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x342e95 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x35dc51 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb42e95; op2val:0x135dc51; valaddr_reg:x16; val_offset:1960; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1960, x17, x15, 1960, x18)

inst_1008:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x342e95 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x35dc51 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb42e95; op2val:0x135dc51; valaddr_reg:x16; val_offset:1968; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1968, x17, x15, 1968, x18)

inst_1009:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x342e95 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x35dc51 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb42e95; op2val:0x135dc51; valaddr_reg:x16; val_offset:1976; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1976, x17, x15, 1976, x18)

inst_1010:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x342e95 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x35dc51 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb42e95; op2val:0x135dc51; valaddr_reg:x16; val_offset:1984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1984, x17, x15, 1984, x18)

inst_1011:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x5603e9 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x191c4f and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dd603e9; op2val:0x2191c4f; valaddr_reg:x16; val_offset:1992; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1992, x17, x15, 1992, x18)

inst_1012:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x5603e9 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x191c4f and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dd603e9; op2val:0x2191c4f; valaddr_reg:x16; val_offset:2000; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 2000, x17, x15, 2000, x18)

inst_1013:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x5603e9 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x191c4f and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dd603e9; op2val:0x2191c4f; valaddr_reg:x16; val_offset:2008; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 2008, x17, x15, 2008, x18)

inst_1014:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x5603e9 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x191c4f and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dd603e9; op2val:0x2191c4f; valaddr_reg:x16; val_offset:2016; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 2016, x17, x15, 2016, x18)

inst_1015:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x5603e9 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x191c4f and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dd603e9; op2val:0x2191c4f; valaddr_reg:x16; val_offset:2024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_5)

inst_1016:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6ee39d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x092b13 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6ee39d; op2val:0x892b13; valaddr_reg:x16; val_offset:0; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 0, x17, x15, 0, x18)

inst_1017:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6ee39d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x092b13 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6ee39d; op2val:0x892b13; valaddr_reg:x16; val_offset:8; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 8, x17, x15, 8, x18)

inst_1018:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6ee39d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x092b13 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6ee39d; op2val:0x892b13; valaddr_reg:x16; val_offset:16; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 16, x17, x15, 16, x18)

inst_1019:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6ee39d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x092b13 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6ee39d; op2val:0x892b13; valaddr_reg:x16; val_offset:24; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 24, x17, x15, 24, x18)

inst_1020:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6ee39d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x092b13 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6ee39d; op2val:0x892b13; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 32, x17, x15, 32, x18)

inst_1021:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5a7ee8 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x15f88d and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5a7ee8; op2val:0x95f88d; valaddr_reg:x16; val_offset:40; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 40, x17, x15, 40, x18)

inst_1022:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5a7ee8 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x15f88d and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5a7ee8; op2val:0x95f88d; valaddr_reg:x16; val_offset:48; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 48, x17, x15, 48, x18)

inst_1023:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5a7ee8 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x15f88d and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5a7ee8; op2val:0x95f88d; valaddr_reg:x16; val_offset:56; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 56, x17, x15, 56, x18)

inst_1024:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5a7ee8 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x15f88d and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5a7ee8; op2val:0x95f88d; valaddr_reg:x16; val_offset:64; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 64, x17, x15, 64, x18)

inst_1025:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5a7ee8 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x15f88d and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5a7ee8; op2val:0x95f88d; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 72, x17, x15, 72, x18)

inst_1026:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x24d96e and fs2 == 0 and fe2 == 0x01 and fm2 == 0x46c684 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f24d96e; op2val:0xc6c684; valaddr_reg:x16; val_offset:80; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 80, x17, x15, 80, x18)

inst_1027:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x24d96e and fs2 == 0 and fe2 == 0x01 and fm2 == 0x46c684 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f24d96e; op2val:0xc6c684; valaddr_reg:x16; val_offset:88; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 88, x17, x15, 88, x18)

inst_1028:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x24d96e and fs2 == 0 and fe2 == 0x01 and fm2 == 0x46c684 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f24d96e; op2val:0xc6c684; valaddr_reg:x16; val_offset:96; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 96, x17, x15, 96, x18)

inst_1029:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x24d96e and fs2 == 0 and fe2 == 0x01 and fm2 == 0x46c684 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f24d96e; op2val:0xc6c684; valaddr_reg:x16; val_offset:104; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 104, x17, x15, 104, x18)

inst_1030:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x24d96e and fs2 == 0 and fe2 == 0x01 and fm2 == 0x46c684 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f24d96e; op2val:0xc6c684; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 112, x17, x15, 112, x18)

inst_1031:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x3a84ad and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2faebb and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e3a84ad; op2val:0x1afaebb; valaddr_reg:x16; val_offset:120; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 120, x17, x15, 120, x18)

inst_1032:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x3a84ad and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2faebb and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e3a84ad; op2val:0x1afaebb; valaddr_reg:x16; val_offset:128; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 128, x17, x15, 128, x18)

inst_1033:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x3a84ad and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2faebb and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e3a84ad; op2val:0x1afaebb; valaddr_reg:x16; val_offset:136; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 136, x17, x15, 136, x18)

inst_1034:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x3a84ad and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2faebb and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e3a84ad; op2val:0x1afaebb; valaddr_reg:x16; val_offset:144; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 144, x17, x15, 144, x18)

inst_1035:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x3a84ad and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2faebb and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e3a84ad; op2val:0x1afaebb; valaddr_reg:x16; val_offset:152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 152, x17, x15, 152, x18)

inst_1036:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x26bf68 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x448332 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3da6bf68; op2val:0x2448332; valaddr_reg:x16; val_offset:160; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 160, x17, x15, 160, x18)

inst_1037:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x26bf68 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x448332 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3da6bf68; op2val:0x2448332; valaddr_reg:x16; val_offset:168; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 168, x17, x15, 168, x18)

inst_1038:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x26bf68 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x448332 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3da6bf68; op2val:0x2448332; valaddr_reg:x16; val_offset:176; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 176, x17, x15, 176, x18)

inst_1039:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x26bf68 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x448332 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3da6bf68; op2val:0x2448332; valaddr_reg:x16; val_offset:184; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 184, x17, x15, 184, x18)

inst_1040:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x26bf68 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x448332 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3da6bf68; op2val:0x2448332; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 192, x17, x15, 192, x18)

inst_1041:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x128547 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5fa412 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f128547; op2val:0xdfa412; valaddr_reg:x16; val_offset:200; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 200, x17, x15, 200, x18)

inst_1042:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x128547 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5fa412 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f128547; op2val:0xdfa412; valaddr_reg:x16; val_offset:208; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 208, x17, x15, 208, x18)

inst_1043:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x128547 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5fa412 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f128547; op2val:0xdfa412; valaddr_reg:x16; val_offset:216; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 216, x17, x15, 216, x18)

inst_1044:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x128547 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5fa412 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f128547; op2val:0xdfa412; valaddr_reg:x16; val_offset:224; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 224, x17, x15, 224, x18)

inst_1045:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x128547 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5fa412 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f128547; op2val:0xdfa412; valaddr_reg:x16; val_offset:232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 232, x17, x15, 232, x18)

inst_1046:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x02deb1 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7a62d8 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f02deb1; op2val:0xfa62d8; valaddr_reg:x16; val_offset:240; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 240, x17, x15, 240, x18)

inst_1047:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x02deb1 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7a62d8 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f02deb1; op2val:0xfa62d8; valaddr_reg:x16; val_offset:248; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 248, x17, x15, 248, x18)

inst_1048:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x02deb1 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7a62d8 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f02deb1; op2val:0xfa62d8; valaddr_reg:x16; val_offset:256; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 256, x17, x15, 256, x18)

inst_1049:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x02deb1 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7a62d8 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f02deb1; op2val:0xfa62d8; valaddr_reg:x16; val_offset:264; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 264, x17, x15, 264, x18)

inst_1050:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x02deb1 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7a62d8 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f02deb1; op2val:0xfa62d8; valaddr_reg:x16; val_offset:272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 272, x17, x15, 272, x18)

inst_1051:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x34074b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7957ff and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f34074b; op2val:0x7957ff; valaddr_reg:x16; val_offset:280; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 280, x17, x15, 280, x18)

inst_1052:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x34074b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7957ff and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f34074b; op2val:0x7957ff; valaddr_reg:x16; val_offset:288; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 288, x17, x15, 288, x18)

inst_1053:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x34074b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7957ff and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f34074b; op2val:0x7957ff; valaddr_reg:x16; val_offset:296; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 296, x17, x15, 296, x18)

inst_1054:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x34074b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7957ff and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f34074b; op2val:0x7957ff; valaddr_reg:x16; val_offset:304; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 304, x17, x15, 304, x18)

inst_1055:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x34074b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7957ff and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f34074b; op2val:0x7957ff; valaddr_reg:x16; val_offset:312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 312, x17, x15, 312, x18)

inst_1056:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x0b2758 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x1cfcb1 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d8b2758; op2val:0x21cfcb1; valaddr_reg:x16; val_offset:320; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 320, x17, x15, 320, x18)

inst_1057:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x0b2758 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x1cfcb1 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d8b2758; op2val:0x21cfcb1; valaddr_reg:x16; val_offset:328; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 328, x17, x15, 328, x18)

inst_1058:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x0b2758 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x1cfcb1 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d8b2758; op2val:0x21cfcb1; valaddr_reg:x16; val_offset:336; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 336, x17, x15, 336, x18)

inst_1059:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x0b2758 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x1cfcb1 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d8b2758; op2val:0x21cfcb1; valaddr_reg:x16; val_offset:344; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 344, x17, x15, 344, x18)

inst_1060:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x0b2758 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x1cfcb1 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d8b2758; op2val:0x21cfcb1; valaddr_reg:x16; val_offset:352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 352, x17, x15, 352, x18)

inst_1061:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x398fcc and fs2 == 0 and fe2 == 0x04 and fm2 == 0x6b736b and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d398fcc; op2val:0x26b736b; valaddr_reg:x16; val_offset:360; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 360, x17, x15, 360, x18)

inst_1062:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x398fcc and fs2 == 0 and fe2 == 0x04 and fm2 == 0x6b736b and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d398fcc; op2val:0x26b736b; valaddr_reg:x16; val_offset:368; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 368, x17, x15, 368, x18)

inst_1063:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x398fcc and fs2 == 0 and fe2 == 0x04 and fm2 == 0x6b736b and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d398fcc; op2val:0x26b736b; valaddr_reg:x16; val_offset:376; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 376, x17, x15, 376, x18)

inst_1064:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x398fcc and fs2 == 0 and fe2 == 0x04 and fm2 == 0x6b736b and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d398fcc; op2val:0x26b736b; valaddr_reg:x16; val_offset:384; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 384, x17, x15, 384, x18)

inst_1065:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x398fcc and fs2 == 0 and fe2 == 0x04 and fm2 == 0x6b736b and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d398fcc; op2val:0x26b736b; valaddr_reg:x16; val_offset:392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 392, x17, x15, 392, x18)

inst_1066:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x728850 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3424c0 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef28850; op2val:0xb424c0; valaddr_reg:x16; val_offset:400; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 400, x17, x15, 400, x18)

inst_1067:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x728850 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3424c0 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef28850; op2val:0xb424c0; valaddr_reg:x16; val_offset:408; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 408, x17, x15, 408, x18)

inst_1068:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x728850 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3424c0 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef28850; op2val:0xb424c0; valaddr_reg:x16; val_offset:416; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 416, x17, x15, 416, x18)

inst_1069:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x728850 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3424c0 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef28850; op2val:0xb424c0; valaddr_reg:x16; val_offset:424; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 424, x17, x15, 424, x18)

inst_1070:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x728850 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3424c0 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef28850; op2val:0xb424c0; valaddr_reg:x16; val_offset:432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 432, x17, x15, 432, x18)

inst_1071:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4e1bcc and fs2 == 0 and fe2 == 0x02 and fm2 == 0x53fa97 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4e1bcc; op2val:0x153fa97; valaddr_reg:x16; val_offset:440; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 440, x17, x15, 440, x18)

inst_1072:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4e1bcc and fs2 == 0 and fe2 == 0x02 and fm2 == 0x53fa97 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4e1bcc; op2val:0x153fa97; valaddr_reg:x16; val_offset:448; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 448, x17, x15, 448, x18)

inst_1073:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4e1bcc and fs2 == 0 and fe2 == 0x02 and fm2 == 0x53fa97 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4e1bcc; op2val:0x153fa97; valaddr_reg:x16; val_offset:456; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 456, x17, x15, 456, x18)

inst_1074:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4e1bcc and fs2 == 0 and fe2 == 0x02 and fm2 == 0x53fa97 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4e1bcc; op2val:0x153fa97; valaddr_reg:x16; val_offset:464; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 464, x17, x15, 464, x18)

inst_1075:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4e1bcc and fs2 == 0 and fe2 == 0x02 and fm2 == 0x53fa97 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4e1bcc; op2val:0x153fa97; valaddr_reg:x16; val_offset:472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 472, x17, x15, 472, x18)

inst_1076:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x247555 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x04d4ff and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f247555; op2val:0x84d4ff; valaddr_reg:x16; val_offset:480; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 480, x17, x15, 480, x18)

inst_1077:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x247555 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x04d4ff and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f247555; op2val:0x84d4ff; valaddr_reg:x16; val_offset:488; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 488, x17, x15, 488, x18)

inst_1078:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x247555 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x04d4ff and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f247555; op2val:0x84d4ff; valaddr_reg:x16; val_offset:496; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 496, x17, x15, 496, x18)

inst_1079:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x247555 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x04d4ff and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f247555; op2val:0x84d4ff; valaddr_reg:x16; val_offset:504; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 504, x17, x15, 504, x18)

inst_1080:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x247555 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x04d4ff and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f247555; op2val:0x84d4ff; valaddr_reg:x16; val_offset:512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 512, x17, x15, 512, x18)

inst_1081:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0d8f03 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x1a51ed and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8d8f03; op2val:0x11a51ed; valaddr_reg:x16; val_offset:520; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 520, x17, x15, 520, x18)

inst_1082:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0d8f03 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x1a51ed and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8d8f03; op2val:0x11a51ed; valaddr_reg:x16; val_offset:528; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 528, x17, x15, 528, x18)

inst_1083:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0d8f03 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x1a51ed and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8d8f03; op2val:0x11a51ed; valaddr_reg:x16; val_offset:536; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 536, x17, x15, 536, x18)

inst_1084:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0d8f03 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x1a51ed and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8d8f03; op2val:0x11a51ed; valaddr_reg:x16; val_offset:544; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 544, x17, x15, 544, x18)

inst_1085:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0d8f03 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x1a51ed and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8d8f03; op2val:0x11a51ed; valaddr_reg:x16; val_offset:552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 552, x17, x15, 552, x18)

inst_1086:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2e829f and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7a5c91 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eae829f; op2val:0xfa5c91; valaddr_reg:x16; val_offset:560; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 560, x17, x15, 560, x18)

inst_1087:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2e829f and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7a5c91 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eae829f; op2val:0xfa5c91; valaddr_reg:x16; val_offset:568; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 568, x17, x15, 568, x18)

inst_1088:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2e829f and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7a5c91 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eae829f; op2val:0xfa5c91; valaddr_reg:x16; val_offset:576; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 576, x17, x15, 576, x18)

inst_1089:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2e829f and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7a5c91 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eae829f; op2val:0xfa5c91; valaddr_reg:x16; val_offset:584; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 584, x17, x15, 584, x18)

inst_1090:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2e829f and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7a5c91 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eae829f; op2val:0xfa5c91; valaddr_reg:x16; val_offset:592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 592, x17, x15, 592, x18)

inst_1091:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1d5ca5 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ad27e and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9d5ca5; op2val:0x10ad27e; valaddr_reg:x16; val_offset:600; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 600, x17, x15, 600, x18)

inst_1092:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1d5ca5 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ad27e and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9d5ca5; op2val:0x10ad27e; valaddr_reg:x16; val_offset:608; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 608, x17, x15, 608, x18)

inst_1093:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1d5ca5 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ad27e and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9d5ca5; op2val:0x10ad27e; valaddr_reg:x16; val_offset:616; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 616, x17, x15, 616, x18)

inst_1094:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1d5ca5 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ad27e and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9d5ca5; op2val:0x10ad27e; valaddr_reg:x16; val_offset:624; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 624, x17, x15, 624, x18)

inst_1095:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1d5ca5 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0ad27e and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e9d5ca5; op2val:0x10ad27e; valaddr_reg:x16; val_offset:632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 632, x17, x15, 632, x18)

inst_1096:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x37cff3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6db115 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb7cff3; op2val:0xedb115; valaddr_reg:x16; val_offset:640; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 640, x17, x15, 640, x18)

inst_1097:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x37cff3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6db115 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb7cff3; op2val:0xedb115; valaddr_reg:x16; val_offset:648; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 648, x17, x15, 648, x18)

inst_1098:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x37cff3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6db115 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb7cff3; op2val:0xedb115; valaddr_reg:x16; val_offset:656; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 656, x17, x15, 656, x18)

inst_1099:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x37cff3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6db115 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb7cff3; op2val:0xedb115; valaddr_reg:x16; val_offset:664; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 664, x17, x15, 664, x18)

inst_1100:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x37cff3 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6db115 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb7cff3; op2val:0xedb115; valaddr_reg:x16; val_offset:672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 672, x17, x15, 672, x18)

inst_1101:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6b63a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5cce1d and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6b63a6; op2val:0x5cce1d; valaddr_reg:x16; val_offset:680; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 680, x17, x15, 680, x18)

inst_1102:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6b63a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5cce1d and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6b63a6; op2val:0x5cce1d; valaddr_reg:x16; val_offset:688; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 688, x17, x15, 688, x18)

inst_1103:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6b63a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5cce1d and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6b63a6; op2val:0x5cce1d; valaddr_reg:x16; val_offset:696; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 696, x17, x15, 696, x18)

inst_1104:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6b63a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5cce1d and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6b63a6; op2val:0x5cce1d; valaddr_reg:x16; val_offset:704; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 704, x17, x15, 704, x18)

inst_1105:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6b63a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5cce1d and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6b63a6; op2val:0x5cce1d; valaddr_reg:x16; val_offset:712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 712, x17, x15, 712, x18)

inst_1106:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x60d656 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x61291f and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f60d656; op2val:0x61291f; valaddr_reg:x16; val_offset:720; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 720, x17, x15, 720, x18)

inst_1107:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x60d656 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x61291f and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f60d656; op2val:0x61291f; valaddr_reg:x16; val_offset:728; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 728, x17, x15, 728, x18)

inst_1108:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x60d656 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x61291f and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f60d656; op2val:0x61291f; valaddr_reg:x16; val_offset:736; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 736, x17, x15, 736, x18)

inst_1109:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x60d656 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x61291f and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f60d656; op2val:0x61291f; valaddr_reg:x16; val_offset:744; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 744, x17, x15, 744, x18)

inst_1110:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x60d656 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x61291f and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f60d656; op2val:0x61291f; valaddr_reg:x16; val_offset:752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 752, x17, x15, 752, x18)

inst_1111:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7c5564 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x2d257e and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e7c5564; op2val:0x12d257e; valaddr_reg:x16; val_offset:760; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 760, x17, x15, 760, x18)

inst_1112:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7c5564 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x2d257e and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e7c5564; op2val:0x12d257e; valaddr_reg:x16; val_offset:768; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 768, x17, x15, 768, x18)

inst_1113:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7c5564 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x2d257e and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e7c5564; op2val:0x12d257e; valaddr_reg:x16; val_offset:776; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 776, x17, x15, 776, x18)

inst_1114:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7c5564 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x2d257e and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e7c5564; op2val:0x12d257e; valaddr_reg:x16; val_offset:784; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 784, x17, x15, 784, x18)

inst_1115:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7c5564 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x2d257e and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e7c5564; op2val:0x12d257e; valaddr_reg:x16; val_offset:792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 792, x17, x15, 792, x18)

inst_1116:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1bb43e and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0c4ce2 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1bb43e; op2val:0x8c4ce2; valaddr_reg:x16; val_offset:800; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 800, x17, x15, 800, x18)

inst_1117:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1bb43e and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0c4ce2 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1bb43e; op2val:0x8c4ce2; valaddr_reg:x16; val_offset:808; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 808, x17, x15, 808, x18)

inst_1118:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1bb43e and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0c4ce2 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1bb43e; op2val:0x8c4ce2; valaddr_reg:x16; val_offset:816; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 816, x17, x15, 816, x18)

inst_1119:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1bb43e and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0c4ce2 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1bb43e; op2val:0x8c4ce2; valaddr_reg:x16; val_offset:824; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 824, x17, x15, 824, x18)

inst_1120:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1bb43e and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0c4ce2 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1bb43e; op2val:0x8c4ce2; valaddr_reg:x16; val_offset:832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 832, x17, x15, 832, x18)

inst_1121:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4ec18d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x69a853 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4ec18d; op2val:0x69a853; valaddr_reg:x16; val_offset:840; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 840, x17, x15, 840, x18)

inst_1122:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4ec18d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x69a853 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4ec18d; op2val:0x69a853; valaddr_reg:x16; val_offset:848; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 848, x17, x15, 848, x18)

inst_1123:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4ec18d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x69a853 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4ec18d; op2val:0x69a853; valaddr_reg:x16; val_offset:856; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 856, x17, x15, 856, x18)

inst_1124:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4ec18d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x69a853 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4ec18d; op2val:0x69a853; valaddr_reg:x16; val_offset:864; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 864, x17, x15, 864, x18)

inst_1125:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4ec18d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x69a853 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4ec18d; op2val:0x69a853; valaddr_reg:x16; val_offset:872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 872, x17, x15, 872, x18)

inst_1126:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6c6755 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5c682b and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6c6755; op2val:0x5c682b; valaddr_reg:x16; val_offset:880; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 880, x17, x15, 880, x18)

inst_1127:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6c6755 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5c682b and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6c6755; op2val:0x5c682b; valaddr_reg:x16; val_offset:888; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 888, x17, x15, 888, x18)

inst_1128:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6c6755 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5c682b and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6c6755; op2val:0x5c682b; valaddr_reg:x16; val_offset:896; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 896, x17, x15, 896, x18)

inst_1129:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6c6755 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5c682b and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6c6755; op2val:0x5c682b; valaddr_reg:x16; val_offset:904; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 904, x17, x15, 904, x18)

inst_1130:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6c6755 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5c682b and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6c6755; op2val:0x5c682b; valaddr_reg:x16; val_offset:912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 912, x17, x15, 912, x18)

inst_1131:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x20897c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08139a and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f20897c; op2val:0x88139a; valaddr_reg:x16; val_offset:920; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 920, x17, x15, 920, x18)

inst_1132:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x20897c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08139a and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f20897c; op2val:0x88139a; valaddr_reg:x16; val_offset:928; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 928, x17, x15, 928, x18)

inst_1133:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x20897c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08139a and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f20897c; op2val:0x88139a; valaddr_reg:x16; val_offset:936; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 936, x17, x15, 936, x18)

inst_1134:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x20897c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08139a and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f20897c; op2val:0x88139a; valaddr_reg:x16; val_offset:944; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 944, x17, x15, 944, x18)

inst_1135:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x20897c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08139a and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f20897c; op2val:0x88139a; valaddr_reg:x16; val_offset:952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 952, x17, x15, 952, x18)

inst_1136:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6d1c24 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5c21b4 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6d1c24; op2val:0x5c21b4; valaddr_reg:x16; val_offset:960; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 960, x17, x15, 960, x18)

inst_1137:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6d1c24 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5c21b4 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6d1c24; op2val:0x5c21b4; valaddr_reg:x16; val_offset:968; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 968, x17, x15, 968, x18)

inst_1138:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6d1c24 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5c21b4 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6d1c24; op2val:0x5c21b4; valaddr_reg:x16; val_offset:976; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 976, x17, x15, 976, x18)

inst_1139:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6d1c24 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5c21b4 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6d1c24; op2val:0x5c21b4; valaddr_reg:x16; val_offset:984; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 984, x17, x15, 984, x18)

inst_1140:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6d1c24 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5c21b4 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6d1c24; op2val:0x5c21b4; valaddr_reg:x16; val_offset:992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 992, x17, x15, 992, x18)

inst_1141:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4ab054 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6bc717 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4ab054; op2val:0x6bc717; valaddr_reg:x16; val_offset:1000; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1000, x17, x15, 1000, x18)

inst_1142:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4ab054 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6bc717 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4ab054; op2val:0x6bc717; valaddr_reg:x16; val_offset:1008; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1008, x17, x15, 1008, x18)

inst_1143:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4ab054 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6bc717 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4ab054; op2val:0x6bc717; valaddr_reg:x16; val_offset:1016; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1016, x17, x15, 1016, x18)

inst_1144:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4ab054 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6bc717 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4ab054; op2val:0x6bc717; valaddr_reg:x16; val_offset:1024; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1024, x17, x15, 1024, x18)

inst_1145:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4ab054 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6bc717 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4ab054; op2val:0x6bc717; valaddr_reg:x16; val_offset:1032; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1032, x17, x15, 1032, x18)

inst_1146:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x16de0b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10cc5b and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f16de0b; op2val:0x90cc5b; valaddr_reg:x16; val_offset:1040; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1040, x17, x15, 1040, x18)

inst_1147:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x16de0b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10cc5b and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f16de0b; op2val:0x90cc5b; valaddr_reg:x16; val_offset:1048; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1048, x17, x15, 1048, x18)

inst_1148:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x16de0b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10cc5b and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f16de0b; op2val:0x90cc5b; valaddr_reg:x16; val_offset:1056; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1056, x17, x15, 1056, x18)

inst_1149:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x16de0b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10cc5b and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f16de0b; op2val:0x90cc5b; valaddr_reg:x16; val_offset:1064; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1064, x17, x15, 1064, x18)

inst_1150:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x16de0b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10cc5b and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f16de0b; op2val:0x90cc5b; valaddr_reg:x16; val_offset:1072; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1072, x17, x15, 1072, x18)

inst_1151:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7bf9a3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x56b245 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7bf9a3; op2val:0x56b245; valaddr_reg:x16; val_offset:1080; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1080, x17, x15, 1080, x18)

inst_1152:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7bf9a3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x56b245 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7bf9a3; op2val:0x56b245; valaddr_reg:x16; val_offset:1088; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1088, x17, x15, 1088, x18)

inst_1153:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7bf9a3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x56b245 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7bf9a3; op2val:0x56b245; valaddr_reg:x16; val_offset:1096; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1096, x17, x15, 1096, x18)

inst_1154:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7bf9a3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x56b245 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7bf9a3; op2val:0x56b245; valaddr_reg:x16; val_offset:1104; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1104, x17, x15, 1104, x18)

inst_1155:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7bf9a3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x56b245 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7bf9a3; op2val:0x56b245; valaddr_reg:x16; val_offset:1112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1112, x17, x15, 1112, x18)

inst_1156:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2336b0 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x05d853 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e2336b0; op2val:0x185d853; valaddr_reg:x16; val_offset:1120; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1120, x17, x15, 1120, x18)

inst_1157:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2336b0 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x05d853 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e2336b0; op2val:0x185d853; valaddr_reg:x16; val_offset:1128; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1128, x17, x15, 1128, x18)

inst_1158:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2336b0 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x05d853 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e2336b0; op2val:0x185d853; valaddr_reg:x16; val_offset:1136; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1136, x17, x15, 1136, x18)

inst_1159:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2336b0 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x05d853 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e2336b0; op2val:0x185d853; valaddr_reg:x16; val_offset:1144; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1144, x17, x15, 1144, x18)

inst_1160:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2336b0 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x05d853 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e2336b0; op2val:0x185d853; valaddr_reg:x16; val_offset:1152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1152, x17, x15, 1152, x18)

inst_1161:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x661a41 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5eeff7 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f661a41; op2val:0x5eeff7; valaddr_reg:x16; val_offset:1160; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1160, x17, x15, 1160, x18)

inst_1162:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x661a41 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5eeff7 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f661a41; op2val:0x5eeff7; valaddr_reg:x16; val_offset:1168; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1168, x17, x15, 1168, x18)

inst_1163:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x661a41 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5eeff7 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f661a41; op2val:0x5eeff7; valaddr_reg:x16; val_offset:1176; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1176, x17, x15, 1176, x18)

inst_1164:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x661a41 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5eeff7 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f661a41; op2val:0x5eeff7; valaddr_reg:x16; val_offset:1184; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1184, x17, x15, 1184, x18)

inst_1165:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x661a41 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5eeff7 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f661a41; op2val:0x5eeff7; valaddr_reg:x16; val_offset:1192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1192, x17, x15, 1192, x18)

inst_1166:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7b1f34 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x56fdae and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7b1f34; op2val:0x56fdae; valaddr_reg:x16; val_offset:1200; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1200, x17, x15, 1200, x18)

inst_1167:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7b1f34 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x56fdae and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7b1f34; op2val:0x56fdae; valaddr_reg:x16; val_offset:1208; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1208, x17, x15, 1208, x18)

inst_1168:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7b1f34 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x56fdae and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7b1f34; op2val:0x56fdae; valaddr_reg:x16; val_offset:1216; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1216, x17, x15, 1216, x18)

inst_1169:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7b1f34 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x56fdae and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7b1f34; op2val:0x56fdae; valaddr_reg:x16; val_offset:1224; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1224, x17, x15, 1224, x18)

inst_1170:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7b1f34 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x56fdae and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7b1f34; op2val:0x56fdae; valaddr_reg:x16; val_offset:1232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1232, x17, x15, 1232, x18)

inst_1171:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x06fed0 and fs2 == 0 and fe2 == 0x06 and fm2 == 0x21d2a5 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3c86fed0; op2val:0x321d2a5; valaddr_reg:x16; val_offset:1240; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1240, x17, x15, 1240, x18)

inst_1172:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x06fed0 and fs2 == 0 and fe2 == 0x06 and fm2 == 0x21d2a5 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3c86fed0; op2val:0x321d2a5; valaddr_reg:x16; val_offset:1248; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1248, x17, x15, 1248, x18)

inst_1173:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x06fed0 and fs2 == 0 and fe2 == 0x06 and fm2 == 0x21d2a5 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3c86fed0; op2val:0x321d2a5; valaddr_reg:x16; val_offset:1256; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1256, x17, x15, 1256, x18)

inst_1174:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x06fed0 and fs2 == 0 and fe2 == 0x06 and fm2 == 0x21d2a5 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3c86fed0; op2val:0x321d2a5; valaddr_reg:x16; val_offset:1264; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1264, x17, x15, 1264, x18)

inst_1175:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x06fed0 and fs2 == 0 and fe2 == 0x06 and fm2 == 0x21d2a5 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3c86fed0; op2val:0x321d2a5; valaddr_reg:x16; val_offset:1272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1272, x17, x15, 1272, x18)

inst_1176:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x476b30 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5b1710 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec76b30; op2val:0xdb1710; valaddr_reg:x16; val_offset:1280; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1280, x17, x15, 1280, x18)

inst_1177:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x476b30 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5b1710 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec76b30; op2val:0xdb1710; valaddr_reg:x16; val_offset:1288; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1288, x17, x15, 1288, x18)

inst_1178:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x476b30 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5b1710 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec76b30; op2val:0xdb1710; valaddr_reg:x16; val_offset:1296; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1296, x17, x15, 1296, x18)

inst_1179:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x476b30 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5b1710 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec76b30; op2val:0xdb1710; valaddr_reg:x16; val_offset:1304; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1304, x17, x15, 1304, x18)

inst_1180:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x476b30 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5b1710 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec76b30; op2val:0xdb1710; valaddr_reg:x16; val_offset:1312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1312, x17, x15, 1312, x18)

inst_1181:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x762a25 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x317c4c and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef62a25; op2val:0xb17c4c; valaddr_reg:x16; val_offset:1320; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1320, x17, x15, 1320, x18)

inst_1182:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x762a25 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x317c4c and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef62a25; op2val:0xb17c4c; valaddr_reg:x16; val_offset:1328; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1328, x17, x15, 1328, x18)

inst_1183:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x762a25 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x317c4c and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef62a25; op2val:0xb17c4c; valaddr_reg:x16; val_offset:1336; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1336, x17, x15, 1336, x18)

inst_1184:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x762a25 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x317c4c and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef62a25; op2val:0xb17c4c; valaddr_reg:x16; val_offset:1344; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1344, x17, x15, 1344, x18)

inst_1185:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x762a25 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x317c4c and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef62a25; op2val:0xb17c4c; valaddr_reg:x16; val_offset:1352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1352, x17, x15, 1352, x18)

inst_1186:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4a14c0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x583422 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4a14c0; op2val:0x1583422; valaddr_reg:x16; val_offset:1360; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1360, x17, x15, 1360, x18)

inst_1187:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4a14c0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x583422 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4a14c0; op2val:0x1583422; valaddr_reg:x16; val_offset:1368; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1368, x17, x15, 1368, x18)

inst_1188:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4a14c0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x583422 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4a14c0; op2val:0x1583422; valaddr_reg:x16; val_offset:1376; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1376, x17, x15, 1376, x18)

inst_1189:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4a14c0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x583422 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4a14c0; op2val:0x1583422; valaddr_reg:x16; val_offset:1384; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1384, x17, x15, 1384, x18)

inst_1190:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4a14c0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x583422 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e4a14c0; op2val:0x1583422; valaddr_reg:x16; val_offset:1392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1392, x17, x15, 1392, x18)

inst_1191:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x519b3c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x683882 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f519b3c; op2val:0x683882; valaddr_reg:x16; val_offset:1400; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1400, x17, x15, 1400, x18)

inst_1192:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x519b3c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x683882 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f519b3c; op2val:0x683882; valaddr_reg:x16; val_offset:1408; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1408, x17, x15, 1408, x18)

inst_1193:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x519b3c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x683882 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f519b3c; op2val:0x683882; valaddr_reg:x16; val_offset:1416; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1416, x17, x15, 1416, x18)

inst_1194:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x519b3c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x683882 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f519b3c; op2val:0x683882; valaddr_reg:x16; val_offset:1424; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1424, x17, x15, 1424, x18)

inst_1195:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x519b3c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x683882 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f519b3c; op2val:0x683882; valaddr_reg:x16; val_offset:1432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1432, x17, x15, 1432, x18)

inst_1196:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x14fce0 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x129ffe and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f14fce0; op2val:0x929ffe; valaddr_reg:x16; val_offset:1440; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1440, x17, x15, 1440, x18)

inst_1197:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x14fce0 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x129ffe and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f14fce0; op2val:0x929ffe; valaddr_reg:x16; val_offset:1448; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1448, x17, x15, 1448, x18)

inst_1198:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x14fce0 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x129ffe and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f14fce0; op2val:0x929ffe; valaddr_reg:x16; val_offset:1456; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1456, x17, x15, 1456, x18)

inst_1199:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x14fce0 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x129ffe and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f14fce0; op2val:0x929ffe; valaddr_reg:x16; val_offset:1464; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1464, x17, x15, 1464, x18)

inst_1200:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x14fce0 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x129ffe and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f14fce0; op2val:0x929ffe; valaddr_reg:x16; val_offset:1472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1472, x17, x15, 1472, x18)

inst_1201:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x567d2a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x4bb254 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed67d2a; op2val:0xcbb254; valaddr_reg:x16; val_offset:1480; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1480, x17, x15, 1480, x18)

inst_1202:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x567d2a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x4bb254 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed67d2a; op2val:0xcbb254; valaddr_reg:x16; val_offset:1488; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1488, x17, x15, 1488, x18)

inst_1203:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x567d2a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x4bb254 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed67d2a; op2val:0xcbb254; valaddr_reg:x16; val_offset:1496; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1496, x17, x15, 1496, x18)

inst_1204:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x567d2a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x4bb254 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed67d2a; op2val:0xcbb254; valaddr_reg:x16; val_offset:1504; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1504, x17, x15, 1504, x18)

inst_1205:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x567d2a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x4bb254 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed67d2a; op2val:0xcbb254; valaddr_reg:x16; val_offset:1512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1512, x17, x15, 1512, x18)

inst_1206:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x10f6d1 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x16b1da and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f10f6d1; op2val:0x96b1da; valaddr_reg:x16; val_offset:1520; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1520, x17, x15, 1520, x18)

inst_1207:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x10f6d1 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x16b1da and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f10f6d1; op2val:0x96b1da; valaddr_reg:x16; val_offset:1528; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1528, x17, x15, 1528, x18)

inst_1208:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x10f6d1 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x16b1da and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f10f6d1; op2val:0x96b1da; valaddr_reg:x16; val_offset:1536; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1536, x17, x15, 1536, x18)

inst_1209:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x10f6d1 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x16b1da and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f10f6d1; op2val:0x96b1da; valaddr_reg:x16; val_offset:1544; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1544, x17, x15, 1544, x18)

inst_1210:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x10f6d1 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x16b1da and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f10f6d1; op2val:0x96b1da; valaddr_reg:x16; val_offset:1552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1552, x17, x15, 1552, x18)

inst_1211:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x1712fd and fs2 == 0 and fe2 == 0x05 and fm2 == 0x10999c and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d1712fd; op2val:0x290999c; valaddr_reg:x16; val_offset:1560; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1560, x17, x15, 1560, x18)

inst_1212:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x1712fd and fs2 == 0 and fe2 == 0x05 and fm2 == 0x10999c and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d1712fd; op2val:0x290999c; valaddr_reg:x16; val_offset:1568; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1568, x17, x15, 1568, x18)

inst_1213:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x1712fd and fs2 == 0 and fe2 == 0x05 and fm2 == 0x10999c and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d1712fd; op2val:0x290999c; valaddr_reg:x16; val_offset:1576; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1576, x17, x15, 1576, x18)

inst_1214:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x1712fd and fs2 == 0 and fe2 == 0x05 and fm2 == 0x10999c and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d1712fd; op2val:0x290999c; valaddr_reg:x16; val_offset:1584; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1584, x17, x15, 1584, x18)

inst_1215:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x1712fd and fs2 == 0 and fe2 == 0x05 and fm2 == 0x10999c and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d1712fd; op2val:0x290999c; valaddr_reg:x16; val_offset:1592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1592, x17, x15, 1592, x18)

inst_1216:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x499ce4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6c5a55 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f499ce4; op2val:0x6c5a55; valaddr_reg:x16; val_offset:1600; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1600, x17, x15, 1600, x18)

inst_1217:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x499ce4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6c5a55 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f499ce4; op2val:0x6c5a55; valaddr_reg:x16; val_offset:1608; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1608, x17, x15, 1608, x18)

inst_1218:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x499ce4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6c5a55 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f499ce4; op2val:0x6c5a55; valaddr_reg:x16; val_offset:1616; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1616, x17, x15, 1616, x18)

inst_1219:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x499ce4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6c5a55 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f499ce4; op2val:0x6c5a55; valaddr_reg:x16; val_offset:1624; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1624, x17, x15, 1624, x18)

inst_1220:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x499ce4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6c5a55 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f499ce4; op2val:0x6c5a55; valaddr_reg:x16; val_offset:1632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1632, x17, x15, 1632, x18)

inst_1221:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x30b5ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7b9f56 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f30b5ca; op2val:0x7b9f56; valaddr_reg:x16; val_offset:1640; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1640, x17, x15, 1640, x18)

inst_1222:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x30b5ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7b9f56 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f30b5ca; op2val:0x7b9f56; valaddr_reg:x16; val_offset:1648; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1648, x17, x15, 1648, x18)

inst_1223:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x30b5ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7b9f56 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f30b5ca; op2val:0x7b9f56; valaddr_reg:x16; val_offset:1656; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1656, x17, x15, 1656, x18)

inst_1224:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x30b5ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7b9f56 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f30b5ca; op2val:0x7b9f56; valaddr_reg:x16; val_offset:1664; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1664, x17, x15, 1664, x18)

inst_1225:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x30b5ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7b9f56 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f30b5ca; op2val:0x7b9f56; valaddr_reg:x16; val_offset:1672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1672, x17, x15, 1672, x18)

inst_1226:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x75620b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x320d08 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef5620b; op2val:0xb20d08; valaddr_reg:x16; val_offset:1680; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1680, x17, x15, 1680, x18)

inst_1227:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x75620b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x320d08 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef5620b; op2val:0xb20d08; valaddr_reg:x16; val_offset:1688; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1688, x17, x15, 1688, x18)

inst_1228:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x75620b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x320d08 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef5620b; op2val:0xb20d08; valaddr_reg:x16; val_offset:1696; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1696, x17, x15, 1696, x18)

inst_1229:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x75620b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x320d08 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef5620b; op2val:0xb20d08; valaddr_reg:x16; val_offset:1704; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1704, x17, x15, 1704, x18)

inst_1230:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x75620b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x320d08 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef5620b; op2val:0xb20d08; valaddr_reg:x16; val_offset:1712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1712, x17, x15, 1712, x18)

inst_1231:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x44babf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6f0ae0 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f44babf; op2val:0x6f0ae0; valaddr_reg:x16; val_offset:1720; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1720, x17, x15, 1720, x18)

inst_1232:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x44babf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6f0ae0 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f44babf; op2val:0x6f0ae0; valaddr_reg:x16; val_offset:1728; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1728, x17, x15, 1728, x18)

inst_1233:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x44babf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6f0ae0 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f44babf; op2val:0x6f0ae0; valaddr_reg:x16; val_offset:1736; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1736, x17, x15, 1736, x18)

inst_1234:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x44babf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6f0ae0 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f44babf; op2val:0x6f0ae0; valaddr_reg:x16; val_offset:1744; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1744, x17, x15, 1744, x18)

inst_1235:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x44babf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6f0ae0 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f44babf; op2val:0x6f0ae0; valaddr_reg:x16; val_offset:1752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1752, x17, x15, 1752, x18)

inst_1236:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x667545 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5eca79 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f667545; op2val:0x5eca79; valaddr_reg:x16; val_offset:1760; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1760, x17, x15, 1760, x18)

inst_1237:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x667545 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5eca79 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f667545; op2val:0x5eca79; valaddr_reg:x16; val_offset:1768; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1768, x17, x15, 1768, x18)

inst_1238:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x667545 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5eca79 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f667545; op2val:0x5eca79; valaddr_reg:x16; val_offset:1776; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1776, x17, x15, 1776, x18)

inst_1239:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x667545 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5eca79 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f667545; op2val:0x5eca79; valaddr_reg:x16; val_offset:1784; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1784, x17, x15, 1784, x18)

inst_1240:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x667545 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5eca79 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f667545; op2val:0x5eca79; valaddr_reg:x16; val_offset:1792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1792, x17, x15, 1792, x18)

inst_1241:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0d6e0f and fs2 == 0 and fe2 == 0x02 and fm2 == 0x1a75e1 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8d6e0f; op2val:0x11a75e1; valaddr_reg:x16; val_offset:1800; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1800, x17, x15, 1800, x18)

inst_1242:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0d6e0f and fs2 == 0 and fe2 == 0x02 and fm2 == 0x1a75e1 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8d6e0f; op2val:0x11a75e1; valaddr_reg:x16; val_offset:1808; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1808, x17, x15, 1808, x18)

inst_1243:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0d6e0f and fs2 == 0 and fe2 == 0x02 and fm2 == 0x1a75e1 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8d6e0f; op2val:0x11a75e1; valaddr_reg:x16; val_offset:1816; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1816, x17, x15, 1816, x18)

inst_1244:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0d6e0f and fs2 == 0 and fe2 == 0x02 and fm2 == 0x1a75e1 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8d6e0f; op2val:0x11a75e1; valaddr_reg:x16; val_offset:1824; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1824, x17, x15, 1824, x18)

inst_1245:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0d6e0f and fs2 == 0 and fe2 == 0x02 and fm2 == 0x1a75e1 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8d6e0f; op2val:0x11a75e1; valaddr_reg:x16; val_offset:1832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1832, x17, x15, 1832, x18)

inst_1246:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x175db4 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10523b and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f175db4; op2val:0x90523b; valaddr_reg:x16; val_offset:1840; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1840, x17, x15, 1840, x18)

inst_1247:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x175db4 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10523b and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f175db4; op2val:0x90523b; valaddr_reg:x16; val_offset:1848; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1848, x17, x15, 1848, x18)

inst_1248:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x175db4 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10523b and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f175db4; op2val:0x90523b; valaddr_reg:x16; val_offset:1856; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1856, x17, x15, 1856, x18)

inst_1249:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x175db4 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10523b and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f175db4; op2val:0x90523b; valaddr_reg:x16; val_offset:1864; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1864, x17, x15, 1864, x18)

inst_1250:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x175db4 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10523b and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f175db4; op2val:0x90523b; valaddr_reg:x16; val_offset:1872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1872, x17, x15, 1872, x18)

inst_1251:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7ec3cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x55bf3e and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7ec3cd; op2val:0x55bf3e; valaddr_reg:x16; val_offset:1880; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1880, x17, x15, 1880, x18)

inst_1252:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7ec3cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x55bf3e and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7ec3cd; op2val:0x55bf3e; valaddr_reg:x16; val_offset:1888; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1888, x17, x15, 1888, x18)

inst_1253:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7ec3cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x55bf3e and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7ec3cd; op2val:0x55bf3e; valaddr_reg:x16; val_offset:1896; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1896, x17, x15, 1896, x18)

inst_1254:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7ec3cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x55bf3e and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7ec3cd; op2val:0x55bf3e; valaddr_reg:x16; val_offset:1904; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1904, x17, x15, 1904, x18)

inst_1255:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7ec3cd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x55bf3e and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7ec3cd; op2val:0x55bf3e; valaddr_reg:x16; val_offset:1912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1912, x17, x15, 1912, x18)

inst_1256:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x13b529 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x13e54e and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f13b529; op2val:0x93e54e; valaddr_reg:x16; val_offset:1920; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1920, x17, x15, 1920, x18)

inst_1257:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x13b529 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x13e54e and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f13b529; op2val:0x93e54e; valaddr_reg:x16; val_offset:1928; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1928, x17, x15, 1928, x18)

inst_1258:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x13b529 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x13e54e and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f13b529; op2val:0x93e54e; valaddr_reg:x16; val_offset:1936; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1936, x17, x15, 1936, x18)

inst_1259:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x13b529 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x13e54e and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f13b529; op2val:0x93e54e; valaddr_reg:x16; val_offset:1944; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1944, x17, x15, 1944, x18)

inst_1260:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x13b529 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x13e54e and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f13b529; op2val:0x93e54e; valaddr_reg:x16; val_offset:1952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1952, x17, x15, 1952, x18)

inst_1261:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x14bca3 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5c4ef8 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e94bca3; op2val:0x15c4ef8; valaddr_reg:x16; val_offset:1960; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1960, x17, x15, 1960, x18)

inst_1262:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x14bca3 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5c4ef8 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e94bca3; op2val:0x15c4ef8; valaddr_reg:x16; val_offset:1968; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1968, x17, x15, 1968, x18)

inst_1263:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x14bca3 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5c4ef8 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e94bca3; op2val:0x15c4ef8; valaddr_reg:x16; val_offset:1976; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1976, x17, x15, 1976, x18)

inst_1264:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x14bca3 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5c4ef8 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e94bca3; op2val:0x15c4ef8; valaddr_reg:x16; val_offset:1984; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1984, x17, x15, 1984, x18)

inst_1265:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x14bca3 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5c4ef8 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e94bca3; op2val:0x15c4ef8; valaddr_reg:x16; val_offset:1992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1992, x17, x15, 1992, x18)

inst_1266:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x406d91 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x2a497a and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec06d91; op2val:0x12a497a; valaddr_reg:x16; val_offset:2000; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 2000, x17, x15, 2000, x18)

inst_1267:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x406d91 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x2a497a and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec06d91; op2val:0x12a497a; valaddr_reg:x16; val_offset:2008; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 2008, x17, x15, 2008, x18)

inst_1268:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x406d91 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x2a497a and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec06d91; op2val:0x12a497a; valaddr_reg:x16; val_offset:2016; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 2016, x17, x15, 2016, x18)

inst_1269:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x406d91 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x2a497a and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec06d91; op2val:0x12a497a; valaddr_reg:x16; val_offset:2024; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_6)

inst_1270:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x406d91 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x2a497a and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec06d91; op2val:0x12a497a; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1271:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3fccd4 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x2ad82f and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3fccd4; op2val:0xaad82f; valaddr_reg:x16; val_offset:8; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 8, x17, x15, 8, x18)

inst_1272:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3fccd4 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x2ad82f and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3fccd4; op2val:0xaad82f; valaddr_reg:x16; val_offset:16; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 16, x17, x15, 16, x18)

inst_1273:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3fccd4 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x2ad82f and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3fccd4; op2val:0xaad82f; valaddr_reg:x16; val_offset:24; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 24, x17, x15, 24, x18)

inst_1274:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3fccd4 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x2ad82f and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3fccd4; op2val:0xaad82f; valaddr_reg:x16; val_offset:32; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 32, x17, x15, 32, x18)

inst_1275:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3fccd4 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x2ad82f and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f3fccd4; op2val:0xaad82f; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 40, x17, x15, 40, x18)

inst_1276:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x447c98 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x26c4ff and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f447c98; op2val:0xa6c4ff; valaddr_reg:x16; val_offset:48; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 48, x17, x15, 48, x18)

inst_1277:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x447c98 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x26c4ff and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f447c98; op2val:0xa6c4ff; valaddr_reg:x16; val_offset:56; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 56, x17, x15, 56, x18)

inst_1278:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x447c98 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x26c4ff and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f447c98; op2val:0xa6c4ff; valaddr_reg:x16; val_offset:64; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 64, x17, x15, 64, x18)

inst_1279:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x447c98 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x26c4ff and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f447c98; op2val:0xa6c4ff; valaddr_reg:x16; val_offset:72; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 72, x17, x15, 72, x18)

inst_1280:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x447c98 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x26c4ff and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f447c98; op2val:0xa6c4ff; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_1281:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x06e6ae and fs2 == 0 and fe2 == 0x04 and fm2 == 0x72e760 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d86e6ae; op2val:0x272e760; valaddr_reg:x16; val_offset:88; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 88, x17, x15, 88, x18)

inst_1282:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x06e6ae and fs2 == 0 and fe2 == 0x04 and fm2 == 0x72e760 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d86e6ae; op2val:0x272e760; valaddr_reg:x16; val_offset:96; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 96, x17, x15, 96, x18)

inst_1283:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x06e6ae and fs2 == 0 and fe2 == 0x04 and fm2 == 0x72e760 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d86e6ae; op2val:0x272e760; valaddr_reg:x16; val_offset:104; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 104, x17, x15, 104, x18)

inst_1284:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x06e6ae and fs2 == 0 and fe2 == 0x04 and fm2 == 0x72e760 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d86e6ae; op2val:0x272e760; valaddr_reg:x16; val_offset:112; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 112, x17, x15, 112, x18)

inst_1285:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x06e6ae and fs2 == 0 and fe2 == 0x04 and fm2 == 0x72e760 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d86e6ae; op2val:0x272e760; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 120, x17, x15, 120, x18)

inst_1286:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7bc573 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x02265b and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efbc573; op2val:0x102265b; valaddr_reg:x16; val_offset:128; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 128, x17, x15, 128, x18)

inst_1287:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7bc573 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x02265b and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efbc573; op2val:0x102265b; valaddr_reg:x16; val_offset:136; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 136, x17, x15, 136, x18)

inst_1288:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7bc573 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x02265b and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efbc573; op2val:0x102265b; valaddr_reg:x16; val_offset:144; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 144, x17, x15, 144, x18)

inst_1289:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7bc573 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x02265b and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efbc573; op2val:0x102265b; valaddr_reg:x16; val_offset:152; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 152, x17, x15, 152, x18)

inst_1290:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7bc573 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x02265b and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efbc573; op2val:0x102265b; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_1291:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6774ef and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0d92a5 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6774ef; op2val:0x8d92a5; valaddr_reg:x16; val_offset:168; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 168, x17, x15, 168, x18)

inst_1292:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6774ef and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0d92a5 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6774ef; op2val:0x8d92a5; valaddr_reg:x16; val_offset:176; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 176, x17, x15, 176, x18)

inst_1293:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6774ef and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0d92a5 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6774ef; op2val:0x8d92a5; valaddr_reg:x16; val_offset:184; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 184, x17, x15, 184, x18)

inst_1294:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6774ef and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0d92a5 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6774ef; op2val:0x8d92a5; valaddr_reg:x16; val_offset:192; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 192, x17, x15, 192, x18)

inst_1295:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6774ef and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0d92a5 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6774ef; op2val:0x8d92a5; valaddr_reg:x16; val_offset:200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 200, x17, x15, 200, x18)

inst_1296:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7768db and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0471bd and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7768db; op2val:0x8471bd; valaddr_reg:x16; val_offset:208; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 208, x17, x15, 208, x18)

inst_1297:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7768db and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0471bd and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7768db; op2val:0x8471bd; valaddr_reg:x16; val_offset:216; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 216, x17, x15, 216, x18)

inst_1298:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7768db and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0471bd and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7768db; op2val:0x8471bd; valaddr_reg:x16; val_offset:224; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 224, x17, x15, 224, x18)

inst_1299:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7768db and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0471bd and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7768db; op2val:0x8471bd; valaddr_reg:x16; val_offset:232; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 232, x17, x15, 232, x18)

inst_1300:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7768db and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0471bd and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7768db; op2val:0x8471bd; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_1301:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5c03a5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x14ef8f and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5c03a5; op2val:0x94ef8f; valaddr_reg:x16; val_offset:248; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 248, x17, x15, 248, x18)

inst_1302:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5c03a5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x14ef8f and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5c03a5; op2val:0x94ef8f; valaddr_reg:x16; val_offset:256; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 256, x17, x15, 256, x18)

inst_1303:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5c03a5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x14ef8f and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5c03a5; op2val:0x94ef8f; valaddr_reg:x16; val_offset:264; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 264, x17, x15, 264, x18)

inst_1304:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5c03a5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x14ef8f and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5c03a5; op2val:0x94ef8f; valaddr_reg:x16; val_offset:272; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 272, x17, x15, 272, x18)

inst_1305:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5c03a5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x14ef8f and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5c03a5; op2val:0x94ef8f; valaddr_reg:x16; val_offset:280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 280, x17, x15, 280, x18)

inst_1306:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7b622c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0259c1 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7b622c; op2val:0x8259c1; valaddr_reg:x16; val_offset:288; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 288, x17, x15, 288, x18)

inst_1307:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7b622c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0259c1 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7b622c; op2val:0x8259c1; valaddr_reg:x16; val_offset:296; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 296, x17, x15, 296, x18)

inst_1308:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7b622c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0259c1 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7b622c; op2val:0x8259c1; valaddr_reg:x16; val_offset:304; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 304, x17, x15, 304, x18)

inst_1309:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7b622c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0259c1 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7b622c; op2val:0x8259c1; valaddr_reg:x16; val_offset:312; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 312, x17, x15, 312, x18)

inst_1310:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7b622c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0259c1 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7b622c; op2val:0x8259c1; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_1311:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x49b027 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x2277f9 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec9b027; op2val:0x12277f9; valaddr_reg:x16; val_offset:328; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 328, x17, x15, 328, x18)

inst_1312:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x49b027 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x2277f9 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec9b027; op2val:0x12277f9; valaddr_reg:x16; val_offset:336; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 336, x17, x15, 336, x18)

inst_1313:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x49b027 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x2277f9 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec9b027; op2val:0x12277f9; valaddr_reg:x16; val_offset:344; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 344, x17, x15, 344, x18)

inst_1314:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x49b027 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x2277f9 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec9b027; op2val:0x12277f9; valaddr_reg:x16; val_offset:352; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 352, x17, x15, 352, x18)

inst_1315:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x49b027 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x2277f9 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec9b027; op2val:0x12277f9; valaddr_reg:x16; val_offset:360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 360, x17, x15, 360, x18)

inst_1316:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x24f0e9 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x46aa34 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d24f0e9; op2val:0x2c6aa34; valaddr_reg:x16; val_offset:368; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 368, x17, x15, 368, x18)

inst_1317:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x24f0e9 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x46aa34 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d24f0e9; op2val:0x2c6aa34; valaddr_reg:x16; val_offset:376; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 376, x17, x15, 376, x18)

inst_1318:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x24f0e9 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x46aa34 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d24f0e9; op2val:0x2c6aa34; valaddr_reg:x16; val_offset:384; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 384, x17, x15, 384, x18)

inst_1319:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x24f0e9 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x46aa34 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d24f0e9; op2val:0x2c6aa34; valaddr_reg:x16; val_offset:392; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 392, x17, x15, 392, x18)

inst_1320:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x24f0e9 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x46aa34 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d24f0e9; op2val:0x2c6aa34; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_1321:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x786bc7 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03e7b2 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef86bc7; op2val:0x103e7b2; valaddr_reg:x16; val_offset:408; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 408, x17, x15, 408, x18)

inst_1322:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x786bc7 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03e7b2 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef86bc7; op2val:0x103e7b2; valaddr_reg:x16; val_offset:416; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 416, x17, x15, 416, x18)

inst_1323:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x786bc7 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03e7b2 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef86bc7; op2val:0x103e7b2; valaddr_reg:x16; val_offset:424; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 424, x17, x15, 424, x18)

inst_1324:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x786bc7 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03e7b2 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef86bc7; op2val:0x103e7b2; valaddr_reg:x16; val_offset:432; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 432, x17, x15, 432, x18)

inst_1325:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x786bc7 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x03e7b2 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef86bc7; op2val:0x103e7b2; valaddr_reg:x16; val_offset:440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 440, x17, x15, 440, x18)

inst_1326:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5480af and fs2 == 0 and fe2 == 0x02 and fm2 == 0x1a334b and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed480af; op2val:0x11a334b; valaddr_reg:x16; val_offset:448; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 448, x17, x15, 448, x18)

inst_1327:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5480af and fs2 == 0 and fe2 == 0x02 and fm2 == 0x1a334b and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed480af; op2val:0x11a334b; valaddr_reg:x16; val_offset:456; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 456, x17, x15, 456, x18)

inst_1328:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5480af and fs2 == 0 and fe2 == 0x02 and fm2 == 0x1a334b and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed480af; op2val:0x11a334b; valaddr_reg:x16; val_offset:464; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 464, x17, x15, 464, x18)

inst_1329:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5480af and fs2 == 0 and fe2 == 0x02 and fm2 == 0x1a334b and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed480af; op2val:0x11a334b; valaddr_reg:x16; val_offset:472; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 472, x17, x15, 472, x18)

inst_1330:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5480af and fs2 == 0 and fe2 == 0x02 and fm2 == 0x1a334b and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed480af; op2val:0x11a334b; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_1331:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x003e1e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7f83fc and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e003e1e; op2val:0x1ff83fc; valaddr_reg:x16; val_offset:488; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 488, x17, x15, 488, x18)

inst_1332:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x003e1e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7f83fc and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e003e1e; op2val:0x1ff83fc; valaddr_reg:x16; val_offset:496; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 496, x17, x15, 496, x18)

inst_1333:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x003e1e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7f83fc and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e003e1e; op2val:0x1ff83fc; valaddr_reg:x16; val_offset:504; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 504, x17, x15, 504, x18)

inst_1334:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x003e1e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7f83fc and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e003e1e; op2val:0x1ff83fc; valaddr_reg:x16; val_offset:512; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 512, x17, x15, 512, x18)

inst_1335:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x003e1e and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7f83fc and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e003e1e; op2val:0x1ff83fc; valaddr_reg:x16; val_offset:520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 520, x17, x15, 520, x18)

inst_1336:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x65e01c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0e8bf7 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f65e01c; op2val:0x8e8bf7; valaddr_reg:x16; val_offset:528; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 528, x17, x15, 528, x18)

inst_1337:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x65e01c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0e8bf7 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f65e01c; op2val:0x8e8bf7; valaddr_reg:x16; val_offset:536; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 536, x17, x15, 536, x18)

inst_1338:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x65e01c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0e8bf7 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f65e01c; op2val:0x8e8bf7; valaddr_reg:x16; val_offset:544; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 544, x17, x15, 544, x18)

inst_1339:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x65e01c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0e8bf7 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f65e01c; op2val:0x8e8bf7; valaddr_reg:x16; val_offset:552; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 552, x17, x15, 552, x18)

inst_1340:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x65e01c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0e8bf7 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f65e01c; op2val:0x8e8bf7; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_1341:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2da7e3 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x3cb1ef and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eada7e3; op2val:0x13cb1ef; valaddr_reg:x16; val_offset:568; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 568, x17, x15, 568, x18)

inst_1342:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2da7e3 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x3cb1ef and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eada7e3; op2val:0x13cb1ef; valaddr_reg:x16; val_offset:576; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 576, x17, x15, 576, x18)

inst_1343:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2da7e3 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x3cb1ef and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eada7e3; op2val:0x13cb1ef; valaddr_reg:x16; val_offset:584; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 584, x17, x15, 584, x18)

inst_1344:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2da7e3 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x3cb1ef and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eada7e3; op2val:0x13cb1ef; valaddr_reg:x16; val_offset:592; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 592, x17, x15, 592, x18)

inst_1345:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2da7e3 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x3cb1ef and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eada7e3; op2val:0x13cb1ef; valaddr_reg:x16; val_offset:600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 600, x17, x15, 600, x18)

inst_1346:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x06f7ec and fs2 == 0 and fe2 == 0x01 and fm2 == 0x72c859 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f06f7ec; op2val:0xf2c859; valaddr_reg:x16; val_offset:608; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 608, x17, x15, 608, x18)

inst_1347:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x06f7ec and fs2 == 0 and fe2 == 0x01 and fm2 == 0x72c859 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f06f7ec; op2val:0xf2c859; valaddr_reg:x16; val_offset:616; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 616, x17, x15, 616, x18)

inst_1348:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x06f7ec and fs2 == 0 and fe2 == 0x01 and fm2 == 0x72c859 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f06f7ec; op2val:0xf2c859; valaddr_reg:x16; val_offset:624; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 624, x17, x15, 624, x18)

inst_1349:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x06f7ec and fs2 == 0 and fe2 == 0x01 and fm2 == 0x72c859 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f06f7ec; op2val:0xf2c859; valaddr_reg:x16; val_offset:632; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 632, x17, x15, 632, x18)

inst_1350:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x06f7ec and fs2 == 0 and fe2 == 0x01 and fm2 == 0x72c859 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f06f7ec; op2val:0xf2c859; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_1351:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x0cdb03 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x68a2ae and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e0cdb03; op2val:0x1e8a2ae; valaddr_reg:x16; val_offset:648; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 648, x17, x15, 648, x18)

inst_1352:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x0cdb03 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x68a2ae and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e0cdb03; op2val:0x1e8a2ae; valaddr_reg:x16; val_offset:656; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 656, x17, x15, 656, x18)

inst_1353:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x0cdb03 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x68a2ae and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e0cdb03; op2val:0x1e8a2ae; valaddr_reg:x16; val_offset:664; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 664, x17, x15, 664, x18)

inst_1354:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x0cdb03 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x68a2ae and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e0cdb03; op2val:0x1e8a2ae; valaddr_reg:x16; val_offset:672; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 672, x17, x15, 672, x18)

inst_1355:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x0cdb03 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x68a2ae and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e0cdb03; op2val:0x1e8a2ae; valaddr_reg:x16; val_offset:680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 680, x17, x15, 680, x18)

inst_1356:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x48a9a7 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x234c82 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dc8a9a7; op2val:0x2234c82; valaddr_reg:x16; val_offset:688; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 688, x17, x15, 688, x18)

inst_1357:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x48a9a7 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x234c82 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dc8a9a7; op2val:0x2234c82; valaddr_reg:x16; val_offset:696; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 696, x17, x15, 696, x18)

inst_1358:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x48a9a7 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x234c82 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dc8a9a7; op2val:0x2234c82; valaddr_reg:x16; val_offset:704; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 704, x17, x15, 704, x18)

inst_1359:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x48a9a7 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x234c82 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dc8a9a7; op2val:0x2234c82; valaddr_reg:x16; val_offset:712; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 712, x17, x15, 712, x18)

inst_1360:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x48a9a7 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x234c82 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dc8a9a7; op2val:0x2234c82; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_1361:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x6fa593 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x08bc0a and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e6fa593; op2val:0x188bc0a; valaddr_reg:x16; val_offset:728; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 728, x17, x15, 728, x18)

inst_1362:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x6fa593 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x08bc0a and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e6fa593; op2val:0x188bc0a; valaddr_reg:x16; val_offset:736; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 736, x17, x15, 736, x18)

inst_1363:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x6fa593 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x08bc0a and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e6fa593; op2val:0x188bc0a; valaddr_reg:x16; val_offset:744; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 744, x17, x15, 744, x18)

inst_1364:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x6fa593 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x08bc0a and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e6fa593; op2val:0x188bc0a; valaddr_reg:x16; val_offset:752; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 752, x17, x15, 752, x18)

inst_1365:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x6fa593 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x08bc0a and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e6fa593; op2val:0x188bc0a; valaddr_reg:x16; val_offset:760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 760, x17, x15, 760, x18)

inst_1366:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x781cc7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0411b2 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f781cc7; op2val:0x8411b2; valaddr_reg:x16; val_offset:768; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 768, x17, x15, 768, x18)

inst_1367:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x781cc7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0411b2 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f781cc7; op2val:0x8411b2; valaddr_reg:x16; val_offset:776; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 776, x17, x15, 776, x18)

inst_1368:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x781cc7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0411b2 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f781cc7; op2val:0x8411b2; valaddr_reg:x16; val_offset:784; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 784, x17, x15, 784, x18)

inst_1369:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x781cc7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0411b2 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f781cc7; op2val:0x8411b2; valaddr_reg:x16; val_offset:792; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 792, x17, x15, 792, x18)

inst_1370:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x781cc7 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0411b2 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f781cc7; op2val:0x8411b2; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_1371:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x630ae6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x105347 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f630ae6; op2val:0x905347; valaddr_reg:x16; val_offset:808; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 808, x17, x15, 808, x18)

inst_1372:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x630ae6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x105347 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f630ae6; op2val:0x905347; valaddr_reg:x16; val_offset:816; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 816, x17, x15, 816, x18)

inst_1373:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x630ae6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x105347 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f630ae6; op2val:0x905347; valaddr_reg:x16; val_offset:824; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 824, x17, x15, 824, x18)

inst_1374:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x630ae6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x105347 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f630ae6; op2val:0x905347; valaddr_reg:x16; val_offset:832; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 832, x17, x15, 832, x18)

inst_1375:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x630ae6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x105347 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f630ae6; op2val:0x905347; valaddr_reg:x16; val_offset:840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 840, x17, x15, 840, x18)

inst_1376:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x44ff54 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x265652 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec4ff54; op2val:0x1265652; valaddr_reg:x16; val_offset:848; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 848, x17, x15, 848, x18)

inst_1377:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x44ff54 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x265652 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec4ff54; op2val:0x1265652; valaddr_reg:x16; val_offset:856; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 856, x17, x15, 856, x18)

inst_1378:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x44ff54 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x265652 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec4ff54; op2val:0x1265652; valaddr_reg:x16; val_offset:864; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 864, x17, x15, 864, x18)

inst_1379:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x44ff54 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x265652 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec4ff54; op2val:0x1265652; valaddr_reg:x16; val_offset:872; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 872, x17, x15, 872, x18)

inst_1380:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x44ff54 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x265652 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec4ff54; op2val:0x1265652; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 880, x17, x15, 880, x18)

inst_1381:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x76b713 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x04d12e and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f76b713; op2val:0x84d12e; valaddr_reg:x16; val_offset:888; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 888, x17, x15, 888, x18)

inst_1382:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x76b713 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x04d12e and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f76b713; op2val:0x84d12e; valaddr_reg:x16; val_offset:896; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 896, x17, x15, 896, x18)

inst_1383:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x76b713 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x04d12e and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f76b713; op2val:0x84d12e; valaddr_reg:x16; val_offset:904; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 904, x17, x15, 904, x18)

inst_1384:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x76b713 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x04d12e and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f76b713; op2val:0x84d12e; valaddr_reg:x16; val_offset:912; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 912, x17, x15, 912, x18)

inst_1385:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x76b713 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x04d12e and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f76b713; op2val:0x84d12e; valaddr_reg:x16; val_offset:920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 920, x17, x15, 920, x18)

inst_1386:
// fs1 == 0 and fe1 == 0x78 and fm1 == 0x23d08e and fs2 == 0 and fe2 == 0x07 and fm2 == 0x4807e7 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3c23d08e; op2val:0x3c807e7; valaddr_reg:x16; val_offset:928; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 928, x17, x15, 928, x18)

inst_1387:
// fs1 == 0 and fe1 == 0x78 and fm1 == 0x23d08e and fs2 == 0 and fe2 == 0x07 and fm2 == 0x4807e7 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3c23d08e; op2val:0x3c807e7; valaddr_reg:x16; val_offset:936; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 936, x17, x15, 936, x18)

inst_1388:
// fs1 == 0 and fe1 == 0x78 and fm1 == 0x23d08e and fs2 == 0 and fe2 == 0x07 and fm2 == 0x4807e7 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3c23d08e; op2val:0x3c807e7; valaddr_reg:x16; val_offset:944; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 944, x17, x15, 944, x18)

inst_1389:
// fs1 == 0 and fe1 == 0x78 and fm1 == 0x23d08e and fs2 == 0 and fe2 == 0x07 and fm2 == 0x4807e7 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3c23d08e; op2val:0x3c807e7; valaddr_reg:x16; val_offset:952; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 952, x17, x15, 952, x18)

inst_1390:
// fs1 == 0 and fe1 == 0x78 and fm1 == 0x23d08e and fs2 == 0 and fe2 == 0x07 and fm2 == 0x4807e7 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3c23d08e; op2val:0x3c807e7; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 960, x17, x15, 960, x18)

inst_1391:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1d4b8d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x50525c and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1d4b8d; op2val:0xd0525c; valaddr_reg:x16; val_offset:968; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 968, x17, x15, 968, x18)

inst_1392:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1d4b8d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x50525c and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1d4b8d; op2val:0xd0525c; valaddr_reg:x16; val_offset:976; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 976, x17, x15, 976, x18)

inst_1393:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1d4b8d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x50525c and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1d4b8d; op2val:0xd0525c; valaddr_reg:x16; val_offset:984; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 984, x17, x15, 984, x18)

inst_1394:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1d4b8d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x50525c and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1d4b8d; op2val:0xd0525c; valaddr_reg:x16; val_offset:992; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 992, x17, x15, 992, x18)

inst_1395:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1d4b8d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x50525c and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1d4b8d; op2val:0xd0525c; valaddr_reg:x16; val_offset:1000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1000, x17, x15, 1000, x18)

inst_1396:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x50f67e and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1cd000 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f50f67e; op2val:0x9cd000; valaddr_reg:x16; val_offset:1008; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1008, x17, x15, 1008, x18)

inst_1397:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x50f67e and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1cd000 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f50f67e; op2val:0x9cd000; valaddr_reg:x16; val_offset:1016; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1016, x17, x15, 1016, x18)

inst_1398:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x50f67e and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1cd000 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f50f67e; op2val:0x9cd000; valaddr_reg:x16; val_offset:1024; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1024, x17, x15, 1024, x18)

inst_1399:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x50f67e and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1cd000 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f50f67e; op2val:0x9cd000; valaddr_reg:x16; val_offset:1032; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1032, x17, x15, 1032, x18)

inst_1400:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x50f67e and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1cd000 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f50f67e; op2val:0x9cd000; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1040, x17, x15, 1040, x18)

inst_1401:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x3f2007 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2b72a7 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e3f2007; op2val:0x1ab72a7; valaddr_reg:x16; val_offset:1048; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1048, x17, x15, 1048, x18)

inst_1402:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x3f2007 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2b72a7 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e3f2007; op2val:0x1ab72a7; valaddr_reg:x16; val_offset:1056; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1056, x17, x15, 1056, x18)

inst_1403:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x3f2007 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2b72a7 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e3f2007; op2val:0x1ab72a7; valaddr_reg:x16; val_offset:1064; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1064, x17, x15, 1064, x18)

inst_1404:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x3f2007 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2b72a7 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e3f2007; op2val:0x1ab72a7; valaddr_reg:x16; val_offset:1072; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1072, x17, x15, 1072, x18)

inst_1405:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x3f2007 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x2b72a7 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e3f2007; op2val:0x1ab72a7; valaddr_reg:x16; val_offset:1080; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1080, x17, x15, 1080, x18)

inst_1406:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7a963f and fs2 == 0 and fe2 == 0x01 and fm2 == 0x02c3d5 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7a963f; op2val:0x82c3d5; valaddr_reg:x16; val_offset:1088; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1088, x17, x15, 1088, x18)

inst_1407:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7a963f and fs2 == 0 and fe2 == 0x01 and fm2 == 0x02c3d5 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7a963f; op2val:0x82c3d5; valaddr_reg:x16; val_offset:1096; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1096, x17, x15, 1096, x18)

inst_1408:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7a963f and fs2 == 0 and fe2 == 0x01 and fm2 == 0x02c3d5 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7a963f; op2val:0x82c3d5; valaddr_reg:x16; val_offset:1104; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1104, x17, x15, 1104, x18)

inst_1409:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7a963f and fs2 == 0 and fe2 == 0x01 and fm2 == 0x02c3d5 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7a963f; op2val:0x82c3d5; valaddr_reg:x16; val_offset:1112; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1112, x17, x15, 1112, x18)

inst_1410:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7a963f and fs2 == 0 and fe2 == 0x01 and fm2 == 0x02c3d5 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7a963f; op2val:0x82c3d5; valaddr_reg:x16; val_offset:1120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1120, x17, x15, 1120, x18)

inst_1411:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x798302 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x035415 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f798302; op2val:0x835415; valaddr_reg:x16; val_offset:1128; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1128, x17, x15, 1128, x18)

inst_1412:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x798302 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x035415 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f798302; op2val:0x835415; valaddr_reg:x16; val_offset:1136; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1136, x17, x15, 1136, x18)

inst_1413:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x798302 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x035415 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f798302; op2val:0x835415; valaddr_reg:x16; val_offset:1144; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1144, x17, x15, 1144, x18)

inst_1414:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x798302 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x035415 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f798302; op2val:0x835415; valaddr_reg:x16; val_offset:1152; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1152, x17, x15, 1152, x18)

inst_1415:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x798302 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x035415 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f798302; op2val:0x835415; valaddr_reg:x16; val_offset:1160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1160, x17, x15, 1160, x18)

inst_1416:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6ac6db and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0b9222 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6ac6db; op2val:0x8b9222; valaddr_reg:x16; val_offset:1168; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1168, x17, x15, 1168, x18)

inst_1417:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6ac6db and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0b9222 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6ac6db; op2val:0x8b9222; valaddr_reg:x16; val_offset:1176; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1176, x17, x15, 1176, x18)

inst_1418:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6ac6db and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0b9222 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6ac6db; op2val:0x8b9222; valaddr_reg:x16; val_offset:1184; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1184, x17, x15, 1184, x18)

inst_1419:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6ac6db and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0b9222 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6ac6db; op2val:0x8b9222; valaddr_reg:x16; val_offset:1192; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1192, x17, x15, 1192, x18)

inst_1420:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6ac6db and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0b9222 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f6ac6db; op2val:0x8b9222; valaddr_reg:x16; val_offset:1200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1200, x17, x15, 1200, x18)

inst_1421:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x53ff9b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1a912e and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f53ff9b; op2val:0x9a912e; valaddr_reg:x16; val_offset:1208; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1208, x17, x15, 1208, x18)

inst_1422:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x53ff9b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1a912e and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f53ff9b; op2val:0x9a912e; valaddr_reg:x16; val_offset:1216; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1216, x17, x15, 1216, x18)

inst_1423:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x53ff9b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1a912e and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f53ff9b; op2val:0x9a912e; valaddr_reg:x16; val_offset:1224; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1224, x17, x15, 1224, x18)

inst_1424:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x53ff9b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1a912e and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f53ff9b; op2val:0x9a912e; valaddr_reg:x16; val_offset:1232; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1232, x17, x15, 1232, x18)

inst_1425:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x53ff9b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1a912e and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f53ff9b; op2val:0x9a912e; valaddr_reg:x16; val_offset:1240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1240, x17, x15, 1240, x18)

inst_1426:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x77d72a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0436cb and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f77d72a; op2val:0x8436cb; valaddr_reg:x16; val_offset:1248; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1248, x17, x15, 1248, x18)

inst_1427:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x77d72a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0436cb and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f77d72a; op2val:0x8436cb; valaddr_reg:x16; val_offset:1256; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1256, x17, x15, 1256, x18)

inst_1428:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x77d72a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0436cb and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f77d72a; op2val:0x8436cb; valaddr_reg:x16; val_offset:1264; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1264, x17, x15, 1264, x18)

inst_1429:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x77d72a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0436cb and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f77d72a; op2val:0x8436cb; valaddr_reg:x16; val_offset:1272; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1272, x17, x15, 1272, x18)

inst_1430:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x77d72a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0436cb and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f77d72a; op2val:0x8436cb; valaddr_reg:x16; val_offset:1280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1280, x17, x15, 1280, x18)

inst_1431:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x13bbab and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5dce2d and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f13bbab; op2val:0xddce2d; valaddr_reg:x16; val_offset:1288; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1288, x17, x15, 1288, x18)

inst_1432:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x13bbab and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5dce2d and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f13bbab; op2val:0xddce2d; valaddr_reg:x16; val_offset:1296; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1296, x17, x15, 1296, x18)

inst_1433:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x13bbab and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5dce2d and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f13bbab; op2val:0xddce2d; valaddr_reg:x16; val_offset:1304; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1304, x17, x15, 1304, x18)

inst_1434:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x13bbab and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5dce2d and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f13bbab; op2val:0xddce2d; valaddr_reg:x16; val_offset:1312; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1312, x17, x15, 1312, x18)

inst_1435:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x13bbab and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5dce2d and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f13bbab; op2val:0xddce2d; valaddr_reg:x16; val_offset:1320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1320, x17, x15, 1320, x18)

inst_1436:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4a1e0d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x221fa2 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4a1e0d; op2val:0xa21fa2; valaddr_reg:x16; val_offset:1328; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1328, x17, x15, 1328, x18)

inst_1437:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4a1e0d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x221fa2 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4a1e0d; op2val:0xa21fa2; valaddr_reg:x16; val_offset:1336; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1336, x17, x15, 1336, x18)

inst_1438:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4a1e0d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x221fa2 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4a1e0d; op2val:0xa21fa2; valaddr_reg:x16; val_offset:1344; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1344, x17, x15, 1344, x18)

inst_1439:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4a1e0d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x221fa2 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4a1e0d; op2val:0xa21fa2; valaddr_reg:x16; val_offset:1352; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1352, x17, x15, 1352, x18)

inst_1440:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4a1e0d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x221fa2 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f4a1e0d; op2val:0xa21fa2; valaddr_reg:x16; val_offset:1360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1360, x17, x15, 1360, x18)

inst_1441:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x158ff6 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x5b17ae and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e158ff6; op2val:0x1db17ae; valaddr_reg:x16; val_offset:1368; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1368, x17, x15, 1368, x18)

inst_1442:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x158ff6 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x5b17ae and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e158ff6; op2val:0x1db17ae; valaddr_reg:x16; val_offset:1376; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1376, x17, x15, 1376, x18)

inst_1443:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x158ff6 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x5b17ae and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e158ff6; op2val:0x1db17ae; valaddr_reg:x16; val_offset:1384; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1384, x17, x15, 1384, x18)

inst_1444:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x158ff6 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x5b17ae and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e158ff6; op2val:0x1db17ae; valaddr_reg:x16; val_offset:1392; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1392, x17, x15, 1392, x18)

inst_1445:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x158ff6 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x5b17ae and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e158ff6; op2val:0x1db17ae; valaddr_reg:x16; val_offset:1400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1400, x17, x15, 1400, x18)

inst_1446:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x64cbc0 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0f3824 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f64cbc0; op2val:0x8f3824; valaddr_reg:x16; val_offset:1408; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1408, x17, x15, 1408, x18)

inst_1447:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x64cbc0 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0f3824 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f64cbc0; op2val:0x8f3824; valaddr_reg:x16; val_offset:1416; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1416, x17, x15, 1416, x18)

inst_1448:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x64cbc0 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0f3824 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f64cbc0; op2val:0x8f3824; valaddr_reg:x16; val_offset:1424; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1424, x17, x15, 1424, x18)

inst_1449:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x64cbc0 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0f3824 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f64cbc0; op2val:0x8f3824; valaddr_reg:x16; val_offset:1432; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1432, x17, x15, 1432, x18)

inst_1450:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x64cbc0 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0f3824 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f64cbc0; op2val:0x8f3824; valaddr_reg:x16; val_offset:1440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1440, x17, x15, 1440, x18)

inst_1451:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x45fc75 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x2581a8 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f45fc75; op2val:0xa581a8; valaddr_reg:x16; val_offset:1448; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1448, x17, x15, 1448, x18)

inst_1452:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x45fc75 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x2581a8 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f45fc75; op2val:0xa581a8; valaddr_reg:x16; val_offset:1456; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1456, x17, x15, 1456, x18)

inst_1453:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x45fc75 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x2581a8 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f45fc75; op2val:0xa581a8; valaddr_reg:x16; val_offset:1464; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1464, x17, x15, 1464, x18)

inst_1454:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x45fc75 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x2581a8 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f45fc75; op2val:0xa581a8; valaddr_reg:x16; val_offset:1472; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1472, x17, x15, 1472, x18)

inst_1455:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x45fc75 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x2581a8 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f45fc75; op2val:0xa581a8; valaddr_reg:x16; val_offset:1480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1480, x17, x15, 1480, x18)

inst_1456:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x31b5ca and fs2 == 0 and fe2 == 0x02 and fm2 == 0x3863df and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb1b5ca; op2val:0x13863df; valaddr_reg:x16; val_offset:1488; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1488, x17, x15, 1488, x18)

inst_1457:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x31b5ca and fs2 == 0 and fe2 == 0x02 and fm2 == 0x3863df and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb1b5ca; op2val:0x13863df; valaddr_reg:x16; val_offset:1496; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1496, x17, x15, 1496, x18)

inst_1458:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x31b5ca and fs2 == 0 and fe2 == 0x02 and fm2 == 0x3863df and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb1b5ca; op2val:0x13863df; valaddr_reg:x16; val_offset:1504; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1504, x17, x15, 1504, x18)

inst_1459:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x31b5ca and fs2 == 0 and fe2 == 0x02 and fm2 == 0x3863df and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb1b5ca; op2val:0x13863df; valaddr_reg:x16; val_offset:1512; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1512, x17, x15, 1512, x18)

inst_1460:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x31b5ca and fs2 == 0 and fe2 == 0x02 and fm2 == 0x3863df and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb1b5ca; op2val:0x13863df; valaddr_reg:x16; val_offset:1520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1520, x17, x15, 1520, x18)

inst_1461:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x02abd6 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7ac444 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e82abd6; op2val:0x17ac444; valaddr_reg:x16; val_offset:1528; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1528, x17, x15, 1528, x18)

inst_1462:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x02abd6 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7ac444 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e82abd6; op2val:0x17ac444; valaddr_reg:x16; val_offset:1536; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1536, x17, x15, 1536, x18)

inst_1463:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x02abd6 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7ac444 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e82abd6; op2val:0x17ac444; valaddr_reg:x16; val_offset:1544; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1544, x17, x15, 1544, x18)

inst_1464:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x02abd6 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7ac444 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e82abd6; op2val:0x17ac444; valaddr_reg:x16; val_offset:1552; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1552, x17, x15, 1552, x18)

inst_1465:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x02abd6 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x7ac444 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e82abd6; op2val:0x17ac444; valaddr_reg:x16; val_offset:1560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1560, x17, x15, 1560, x18)

inst_1466:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x3d2019 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x2d42bb and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dbd2019; op2val:0x22d42bb; valaddr_reg:x16; val_offset:1568; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1568, x17, x15, 1568, x18)

inst_1467:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x3d2019 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x2d42bb and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dbd2019; op2val:0x22d42bb; valaddr_reg:x16; val_offset:1576; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1576, x17, x15, 1576, x18)

inst_1468:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x3d2019 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x2d42bb and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dbd2019; op2val:0x22d42bb; valaddr_reg:x16; val_offset:1584; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1584, x17, x15, 1584, x18)

inst_1469:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x3d2019 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x2d42bb and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dbd2019; op2val:0x22d42bb; valaddr_reg:x16; val_offset:1592; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1592, x17, x15, 1592, x18)

inst_1470:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x3d2019 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x2d42bb and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dbd2019; op2val:0x22d42bb; valaddr_reg:x16; val_offset:1600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1600, x17, x15, 1600, x18)

inst_1471:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x37e910 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00000b and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e37e910; op2val:0xb; valaddr_reg:x16; val_offset:1608; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1608, x17, x15, 1608, x18)

inst_1472:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x37e910 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00000b and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e37e910; op2val:0xb; valaddr_reg:x16; val_offset:1616; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1616, x17, x15, 1616, x18)

inst_1473:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x37e910 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00000b and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e37e910; op2val:0xb; valaddr_reg:x16; val_offset:1624; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1624, x17, x15, 1624, x18)

inst_1474:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x37e910 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00000b and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e37e910; op2val:0xb; valaddr_reg:x16; val_offset:1632; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1632, x17, x15, 1632, x18)

inst_1475:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x37e910 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00000b and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e37e910; op2val:0xb; valaddr_reg:x16; val_offset:1640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1640, x17, x15, 1640, x18)

inst_1476:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x40e366 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000005 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec0e366; op2val:0x5; valaddr_reg:x16; val_offset:1648; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1648, x17, x15, 1648, x18)

inst_1477:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x40e366 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000005 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec0e366; op2val:0x5; valaddr_reg:x16; val_offset:1656; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1656, x17, x15, 1656, x18)

inst_1478:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x40e366 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000005 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec0e366; op2val:0x5; valaddr_reg:x16; val_offset:1664; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1664, x17, x15, 1664, x18)

inst_1479:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x40e366 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000005 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec0e366; op2val:0x5; valaddr_reg:x16; val_offset:1672; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1672, x17, x15, 1672, x18)

inst_1480:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x40e366 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000005 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec0e366; op2val:0x5; valaddr_reg:x16; val_offset:1680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1680, x17, x15, 1680, x18)

inst_1481:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x79e956 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000004 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef9e956; op2val:0x4; valaddr_reg:x16; val_offset:1688; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1688, x17, x15, 1688, x18)

inst_1482:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x79e956 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000004 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef9e956; op2val:0x4; valaddr_reg:x16; val_offset:1696; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1696, x17, x15, 1696, x18)

inst_1483:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x79e956 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000004 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef9e956; op2val:0x4; valaddr_reg:x16; val_offset:1704; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1704, x17, x15, 1704, x18)

inst_1484:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x79e956 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000004 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef9e956; op2val:0x4; valaddr_reg:x16; val_offset:1712; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1712, x17, x15, 1712, x18)

inst_1485:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x79e956 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000004 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef9e956; op2val:0x4; valaddr_reg:x16; val_offset:1720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1720, x17, x15, 1720, x18)

inst_1486:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x302af8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f302af8; op2val:0x2; valaddr_reg:x16; val_offset:1728; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1728, x17, x15, 1728, x18)

inst_1487:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x302af8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f302af8; op2val:0x2; valaddr_reg:x16; val_offset:1736; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1736, x17, x15, 1736, x18)

inst_1488:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x302af8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f302af8; op2val:0x2; valaddr_reg:x16; val_offset:1744; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1744, x17, x15, 1744, x18)

inst_1489:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x302af8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f302af8; op2val:0x2; valaddr_reg:x16; val_offset:1752; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1752, x17, x15, 1752, x18)

inst_1490:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x302af8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f302af8; op2val:0x2; valaddr_reg:x16; val_offset:1760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1760, x17, x15, 1760, x18)

inst_1491:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3279cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000005 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb279cf; op2val:0x5; valaddr_reg:x16; val_offset:1768; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1768, x17, x15, 1768, x18)

inst_1492:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3279cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000005 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb279cf; op2val:0x5; valaddr_reg:x16; val_offset:1776; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1776, x17, x15, 1776, x18)

inst_1493:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3279cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000005 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb279cf; op2val:0x5; valaddr_reg:x16; val_offset:1784; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1784, x17, x15, 1784, x18)

inst_1494:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3279cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000005 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb279cf; op2val:0x5; valaddr_reg:x16; val_offset:1792; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1792, x17, x15, 1792, x18)

inst_1495:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3279cf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000005 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eb279cf; op2val:0x5; valaddr_reg:x16; val_offset:1800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1800, x17, x15, 1800, x18)

inst_1496:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7dd319 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000004 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efdd319; op2val:0x4; valaddr_reg:x16; val_offset:1808; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1808, x17, x15, 1808, x18)

inst_1497:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7dd319 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000004 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efdd319; op2val:0x4; valaddr_reg:x16; val_offset:1816; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1816, x17, x15, 1816, x18)

inst_1498:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7dd319 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000004 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efdd319; op2val:0x4; valaddr_reg:x16; val_offset:1824; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1824, x17, x15, 1824, x18)

inst_1499:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7dd319 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000004 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efdd319; op2val:0x4; valaddr_reg:x16; val_offset:1832; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1832, x17, x15, 1832, x18)

inst_1500:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7dd319 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000004 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efdd319; op2val:0x4; valaddr_reg:x16; val_offset:1840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1840, x17, x15, 1840, x18)

inst_1501:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x2ea57c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00002e and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d2ea57c; op2val:0x2e; valaddr_reg:x16; val_offset:1848; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1848, x17, x15, 1848, x18)

inst_1502:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x2ea57c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00002e and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d2ea57c; op2val:0x2e; valaddr_reg:x16; val_offset:1856; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1856, x17, x15, 1856, x18)

inst_1503:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x2ea57c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00002e and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d2ea57c; op2val:0x2e; valaddr_reg:x16; val_offset:1864; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1864, x17, x15, 1864, x18)

inst_1504:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x2ea57c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00002e and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d2ea57c; op2val:0x2e; valaddr_reg:x16; val_offset:1872; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1872, x17, x15, 1872, x18)

inst_1505:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x2ea57c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00002e and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d2ea57c; op2val:0x2e; valaddr_reg:x16; val_offset:1880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1880, x17, x15, 1880, x18)

inst_1506:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x357f89 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000016 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db57f89; op2val:0x16; valaddr_reg:x16; val_offset:1888; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1888, x17, x15, 1888, x18)

inst_1507:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x357f89 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000016 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db57f89; op2val:0x16; valaddr_reg:x16; val_offset:1896; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1896, x17, x15, 1896, x18)

inst_1508:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x357f89 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000016 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db57f89; op2val:0x16; valaddr_reg:x16; val_offset:1904; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1904, x17, x15, 1904, x18)

inst_1509:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x357f89 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000016 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db57f89; op2val:0x16; valaddr_reg:x16; val_offset:1912; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1912, x17, x15, 1912, x18)

inst_1510:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x357f89 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000016 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3db57f89; op2val:0x16; valaddr_reg:x16; val_offset:1920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1920, x17, x15, 1920, x18)

inst_1511:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x3c89b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000015 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dbc89b1; op2val:0x15; valaddr_reg:x16; val_offset:1928; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1928, x17, x15, 1928, x18)

inst_1512:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x3c89b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000015 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dbc89b1; op2val:0x15; valaddr_reg:x16; val_offset:1936; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1936, x17, x15, 1936, x18)

inst_1513:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x3c89b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000015 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dbc89b1; op2val:0x15; valaddr_reg:x16; val_offset:1944; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1944, x17, x15, 1944, x18)

inst_1514:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x3c89b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000015 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dbc89b1; op2val:0x15; valaddr_reg:x16; val_offset:1952; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1952, x17, x15, 1952, x18)

inst_1515:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x3c89b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000015 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dbc89b1; op2val:0x15; valaddr_reg:x16; val_offset:1960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1960, x17, x15, 1960, x18)

inst_1516:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x19d1bf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000006 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e99d1bf; op2val:0x6; valaddr_reg:x16; val_offset:1968; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1968, x17, x15, 1968, x18)

inst_1517:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x19d1bf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000006 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e99d1bf; op2val:0x6; valaddr_reg:x16; val_offset:1976; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1976, x17, x15, 1976, x18)

inst_1518:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x19d1bf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000006 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e99d1bf; op2val:0x6; valaddr_reg:x16; val_offset:1984; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1984, x17, x15, 1984, x18)

inst_1519:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x19d1bf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000006 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e99d1bf; op2val:0x6; valaddr_reg:x16; val_offset:1992; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1992, x17, x15, 1992, x18)

inst_1520:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x19d1bf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000006 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e99d1bf; op2val:0x6; valaddr_reg:x16; val_offset:2000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 2000, x17, x15, 2000, x18)

inst_1521:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x473764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f473764; op2val:0x2; valaddr_reg:x16; val_offset:2008; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 2008, x17, x15, 2008, x18)

inst_1522:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x473764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f473764; op2val:0x2; valaddr_reg:x16; val_offset:2016; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 2016, x17, x15, 2016, x18)

inst_1523:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x473764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f473764; op2val:0x2; valaddr_reg:x16; val_offset:2024; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_7)

inst_1524:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x473764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f473764; op2val:0x2; valaddr_reg:x16; val_offset:0; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 0, x17, x15, 0, x18)

inst_1525:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x473764 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f473764; op2val:0x2; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 8, x17, x15, 8, x18)

inst_1526:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0d6da1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000007 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8d6da1; op2val:0x7; valaddr_reg:x16; val_offset:16; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 16, x17, x15, 16, x18)

inst_1527:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0d6da1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000007 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8d6da1; op2val:0x7; valaddr_reg:x16; val_offset:24; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 24, x17, x15, 24, x18)

inst_1528:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0d6da1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000007 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8d6da1; op2val:0x7; valaddr_reg:x16; val_offset:32; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 32, x17, x15, 32, x18)

inst_1529:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0d6da1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000007 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8d6da1; op2val:0x7; valaddr_reg:x16; val_offset:40; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 40, x17, x15, 40, x18)

inst_1530:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0d6da1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000007 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8d6da1; op2val:0x7; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_1531:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5d55c2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000004 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3edd55c2; op2val:0x4; valaddr_reg:x16; val_offset:56; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 56, x17, x15, 56, x18)

inst_1532:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5d55c2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000004 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3edd55c2; op2val:0x4; valaddr_reg:x16; val_offset:64; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 64, x17, x15, 64, x18)

inst_1533:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5d55c2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000004 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3edd55c2; op2val:0x4; valaddr_reg:x16; val_offset:72; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 72, x17, x15, 72, x18)

inst_1534:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5d55c2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000004 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3edd55c2; op2val:0x4; valaddr_reg:x16; val_offset:80; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 80, x17, x15, 80, x18)

inst_1535:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5d55c2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000004 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3edd55c2; op2val:0x4; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 88, x17, x15, 88, x18)

inst_1536:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x4d69c7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000013 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dcd69c7; op2val:0x13; valaddr_reg:x16; val_offset:96; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 96, x17, x15, 96, x18)

inst_1537:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x4d69c7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000013 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dcd69c7; op2val:0x13; valaddr_reg:x16; val_offset:104; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 104, x17, x15, 104, x18)

inst_1538:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x4d69c7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000013 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dcd69c7; op2val:0x13; valaddr_reg:x16; val_offset:112; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 112, x17, x15, 112, x18)

inst_1539:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x4d69c7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000013 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dcd69c7; op2val:0x13; valaddr_reg:x16; val_offset:120; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 120, x17, x15, 120, x18)

inst_1540:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x4d69c7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000013 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dcd69c7; op2val:0x13; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_1541:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x256539 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000003 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f256539; op2val:0x3; valaddr_reg:x16; val_offset:136; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 136, x17, x15, 136, x18)

inst_1542:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x256539 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000003 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f256539; op2val:0x3; valaddr_reg:x16; val_offset:144; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 144, x17, x15, 144, x18)

inst_1543:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x256539 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000003 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f256539; op2val:0x3; valaddr_reg:x16; val_offset:152; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 152, x17, x15, 152, x18)

inst_1544:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x256539 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000003 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f256539; op2val:0x3; valaddr_reg:x16; val_offset:160; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 160, x17, x15, 160, x18)

inst_1545:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x256539 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000003 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f256539; op2val:0x3; valaddr_reg:x16; val_offset:168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 168, x17, x15, 168, x18)

inst_1546:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7f91c2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000004 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eff91c2; op2val:0x4; valaddr_reg:x16; val_offset:176; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 176, x17, x15, 176, x18)

inst_1547:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7f91c2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000004 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eff91c2; op2val:0x4; valaddr_reg:x16; val_offset:184; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 184, x17, x15, 184, x18)

inst_1548:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7f91c2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000004 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eff91c2; op2val:0x4; valaddr_reg:x16; val_offset:192; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 192, x17, x15, 192, x18)

inst_1549:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7f91c2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000004 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eff91c2; op2val:0x4; valaddr_reg:x16; val_offset:200; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 200, x17, x15, 200, x18)

inst_1550:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7f91c2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000004 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3eff91c2; op2val:0x4; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_1551:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x028e72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000003 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f028e72; op2val:0x3; valaddr_reg:x16; val_offset:216; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 216, x17, x15, 216, x18)

inst_1552:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x028e72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000003 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f028e72; op2val:0x3; valaddr_reg:x16; val_offset:224; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 224, x17, x15, 224, x18)

inst_1553:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x028e72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000003 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f028e72; op2val:0x3; valaddr_reg:x16; val_offset:232; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 232, x17, x15, 232, x18)

inst_1554:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x028e72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000003 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f028e72; op2val:0x3; valaddr_reg:x16; val_offset:240; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 240, x17, x15, 240, x18)

inst_1555:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x028e72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000003 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f028e72; op2val:0x3; valaddr_reg:x16; val_offset:248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 248, x17, x15, 248, x18)

inst_1556:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x09e140 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000003 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f09e140; op2val:0x3; valaddr_reg:x16; val_offset:256; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 256, x17, x15, 256, x18)

inst_1557:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x09e140 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000003 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f09e140; op2val:0x3; valaddr_reg:x16; val_offset:264; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 264, x17, x15, 264, x18)

inst_1558:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x09e140 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000003 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f09e140; op2val:0x3; valaddr_reg:x16; val_offset:272; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 272, x17, x15, 272, x18)

inst_1559:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x09e140 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000003 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f09e140; op2val:0x3; valaddr_reg:x16; val_offset:280; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 280, x17, x15, 280, x18)

inst_1560:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x09e140 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000003 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f09e140; op2val:0x3; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_1561:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7be65b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000008 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e7be65b; op2val:0x8; valaddr_reg:x16; val_offset:296; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 296, x17, x15, 296, x18)

inst_1562:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7be65b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000008 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e7be65b; op2val:0x8; valaddr_reg:x16; val_offset:304; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 304, x17, x15, 304, x18)

inst_1563:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7be65b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000008 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e7be65b; op2val:0x8; valaddr_reg:x16; val_offset:312; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 312, x17, x15, 312, x18)

inst_1564:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7be65b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000008 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e7be65b; op2val:0x8; valaddr_reg:x16; val_offset:320; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 320, x17, x15, 320, x18)

inst_1565:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7be65b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000008 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e7be65b; op2val:0x8; valaddr_reg:x16; val_offset:328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 328, x17, x15, 328, x18)

inst_1566:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x1c0dc3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000034 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d1c0dc3; op2val:0x34; valaddr_reg:x16; val_offset:336; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 336, x17, x15, 336, x18)

inst_1567:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x1c0dc3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000034 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d1c0dc3; op2val:0x34; valaddr_reg:x16; val_offset:344; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 344, x17, x15, 344, x18)

inst_1568:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x1c0dc3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000034 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d1c0dc3; op2val:0x34; valaddr_reg:x16; val_offset:352; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 352, x17, x15, 352, x18)

inst_1569:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x1c0dc3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000034 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d1c0dc3; op2val:0x34; valaddr_reg:x16; val_offset:360; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 360, x17, x15, 360, x18)

inst_1570:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x1c0dc3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000034 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d1c0dc3; op2val:0x34; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_1571:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x256e37 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000003 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f256e37; op2val:0x3; valaddr_reg:x16; val_offset:376; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 376, x17, x15, 376, x18)

inst_1572:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x256e37 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000003 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f256e37; op2val:0x3; valaddr_reg:x16; val_offset:384; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 384, x17, x15, 384, x18)

inst_1573:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x256e37 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000003 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f256e37; op2val:0x3; valaddr_reg:x16; val_offset:392; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 392, x17, x15, 392, x18)

inst_1574:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x256e37 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000003 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f256e37; op2val:0x3; valaddr_reg:x16; val_offset:400; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 400, x17, x15, 400, x18)

inst_1575:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x256e37 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000003 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f256e37; op2val:0x3; valaddr_reg:x16; val_offset:408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 408, x17, x15, 408, x18)

inst_1576:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x72ce25 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000008 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e72ce25; op2val:0x8; valaddr_reg:x16; val_offset:416; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 416, x17, x15, 416, x18)

inst_1577:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x72ce25 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000008 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e72ce25; op2val:0x8; valaddr_reg:x16; val_offset:424; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 424, x17, x15, 424, x18)

inst_1578:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x72ce25 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000008 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e72ce25; op2val:0x8; valaddr_reg:x16; val_offset:432; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 432, x17, x15, 432, x18)

inst_1579:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x72ce25 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000008 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e72ce25; op2val:0x8; valaddr_reg:x16; val_offset:440; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 440, x17, x15, 440, x18)

inst_1580:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x72ce25 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000008 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e72ce25; op2val:0x8; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_1581:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x07fc80 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000007 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e87fc80; op2val:0x7; valaddr_reg:x16; val_offset:456; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 456, x17, x15, 456, x18)

inst_1582:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x07fc80 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000007 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e87fc80; op2val:0x7; valaddr_reg:x16; val_offset:464; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 464, x17, x15, 464, x18)

inst_1583:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x07fc80 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000007 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e87fc80; op2val:0x7; valaddr_reg:x16; val_offset:472; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 472, x17, x15, 472, x18)

inst_1584:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x07fc80 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000007 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e87fc80; op2val:0x7; valaddr_reg:x16; val_offset:480; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 480, x17, x15, 480, x18)

inst_1585:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x07fc80 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000007 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e87fc80; op2val:0x7; valaddr_reg:x16; val_offset:488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 488, x17, x15, 488, x18)

inst_1586:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x59f72a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000012 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dd9f72a; op2val:0x12; valaddr_reg:x16; val_offset:496; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 496, x17, x15, 496, x18)

inst_1587:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x59f72a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000012 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dd9f72a; op2val:0x12; valaddr_reg:x16; val_offset:504; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 504, x17, x15, 504, x18)

inst_1588:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x59f72a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000012 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dd9f72a; op2val:0x12; valaddr_reg:x16; val_offset:512; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 512, x17, x15, 512, x18)

inst_1589:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x59f72a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000012 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dd9f72a; op2val:0x12; valaddr_reg:x16; val_offset:520; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 520, x17, x15, 520, x18)

inst_1590:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x59f72a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000012 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3dd9f72a; op2val:0x12; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_1591:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x26aa98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000006 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea6aa98; op2val:0x6; valaddr_reg:x16; val_offset:536; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 536, x17, x15, 536, x18)

inst_1592:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x26aa98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000006 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea6aa98; op2val:0x6; valaddr_reg:x16; val_offset:544; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 544, x17, x15, 544, x18)

inst_1593:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x26aa98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000006 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea6aa98; op2val:0x6; valaddr_reg:x16; val_offset:552; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 552, x17, x15, 552, x18)

inst_1594:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x26aa98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000006 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea6aa98; op2val:0x6; valaddr_reg:x16; val_offset:560; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 560, x17, x15, 560, x18)

inst_1595:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x26aa98 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000006 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea6aa98; op2val:0x6; valaddr_reg:x16; val_offset:568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 568, x17, x15, 568, x18)

inst_1596:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7ac3f0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000004 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efac3f0; op2val:0x4; valaddr_reg:x16; val_offset:576; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 576, x17, x15, 576, x18)

inst_1597:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7ac3f0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000004 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efac3f0; op2val:0x4; valaddr_reg:x16; val_offset:584; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 584, x17, x15, 584, x18)

inst_1598:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7ac3f0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000004 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efac3f0; op2val:0x4; valaddr_reg:x16; val_offset:592; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 592, x17, x15, 592, x18)

inst_1599:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7ac3f0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000004 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efac3f0; op2val:0x4; valaddr_reg:x16; val_offset:600; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 600, x17, x15, 600, x18)

inst_1600:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7ac3f0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000004 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3efac3f0; op2val:0x4; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 608, x17, x15, 608, x18)

inst_1601:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2cc36e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2cc36e; op2val:0x2; valaddr_reg:x16; val_offset:616; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 616, x17, x15, 616, x18)

inst_1602:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2cc36e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2cc36e; op2val:0x2; valaddr_reg:x16; val_offset:624; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 624, x17, x15, 624, x18)

inst_1603:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2cc36e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2cc36e; op2val:0x2; valaddr_reg:x16; val_offset:632; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 632, x17, x15, 632, x18)

inst_1604:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2cc36e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2cc36e; op2val:0x2; valaddr_reg:x16; val_offset:640; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 640, x17, x15, 640, x18)

inst_1605:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2cc36e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f2cc36e; op2val:0x2; valaddr_reg:x16; val_offset:648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 648, x17, x15, 648, x18)

inst_1606:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x438d6a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f438d6a; op2val:0x2; valaddr_reg:x16; val_offset:656; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 656, x17, x15, 656, x18)

inst_1607:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x438d6a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f438d6a; op2val:0x2; valaddr_reg:x16; val_offset:664; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 664, x17, x15, 664, x18)

inst_1608:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x438d6a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f438d6a; op2val:0x2; valaddr_reg:x16; val_offset:672; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 672, x17, x15, 672, x18)

inst_1609:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x438d6a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f438d6a; op2val:0x2; valaddr_reg:x16; val_offset:680; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 680, x17, x15, 680, x18)

inst_1610:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x438d6a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f438d6a; op2val:0x2; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 688, x17, x15, 688, x18)

inst_1611:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x72d088 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000004 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef2d088; op2val:0x4; valaddr_reg:x16; val_offset:696; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 696, x17, x15, 696, x18)

inst_1612:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x72d088 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000004 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef2d088; op2val:0x4; valaddr_reg:x16; val_offset:704; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 704, x17, x15, 704, x18)

inst_1613:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x72d088 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000004 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef2d088; op2val:0x4; valaddr_reg:x16; val_offset:712; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 712, x17, x15, 712, x18)

inst_1614:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x72d088 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000004 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef2d088; op2val:0x4; valaddr_reg:x16; val_offset:720; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 720, x17, x15, 720, x18)

inst_1615:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x72d088 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000004 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ef2d088; op2val:0x4; valaddr_reg:x16; val_offset:728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 728, x17, x15, 728, x18)

inst_1616:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1eb757 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000003 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1eb757; op2val:0x3; valaddr_reg:x16; val_offset:736; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 736, x17, x15, 736, x18)

inst_1617:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1eb757 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000003 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1eb757; op2val:0x3; valaddr_reg:x16; val_offset:744; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 744, x17, x15, 744, x18)

inst_1618:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1eb757 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000003 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1eb757; op2val:0x3; valaddr_reg:x16; val_offset:752; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 752, x17, x15, 752, x18)

inst_1619:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1eb757 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000003 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1eb757; op2val:0x3; valaddr_reg:x16; val_offset:760; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 760, x17, x15, 760, x18)

inst_1620:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1eb757 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000003 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f1eb757; op2val:0x3; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 768, x17, x15, 768, x18)

inst_1621:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x08fcb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000003 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f08fcb7; op2val:0x3; valaddr_reg:x16; val_offset:776; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 776, x17, x15, 776, x18)

inst_1622:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x08fcb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000003 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f08fcb7; op2val:0x3; valaddr_reg:x16; val_offset:784; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 784, x17, x15, 784, x18)

inst_1623:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x08fcb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000003 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f08fcb7; op2val:0x3; valaddr_reg:x16; val_offset:792; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 792, x17, x15, 792, x18)

inst_1624:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x08fcb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000003 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f08fcb7; op2val:0x3; valaddr_reg:x16; val_offset:800; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 800, x17, x15, 800, x18)

inst_1625:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x08fcb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000003 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f08fcb7; op2val:0x3; valaddr_reg:x16; val_offset:808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 808, x17, x15, 808, x18)

inst_1626:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x76cda9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f76cda9; op2val:0x2; valaddr_reg:x16; val_offset:816; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 816, x17, x15, 816, x18)

inst_1627:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x76cda9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f76cda9; op2val:0x2; valaddr_reg:x16; val_offset:824; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 824, x17, x15, 824, x18)

inst_1628:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x76cda9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f76cda9; op2val:0x2; valaddr_reg:x16; val_offset:832; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 832, x17, x15, 832, x18)

inst_1629:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x76cda9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f76cda9; op2val:0x2; valaddr_reg:x16; val_offset:840; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 840, x17, x15, 840, x18)

inst_1630:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x76cda9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f76cda9; op2val:0x2; valaddr_reg:x16; val_offset:848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 848, x17, x15, 848, x18)

inst_1631:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0e1e09 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000003 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0e1e09; op2val:0x3; valaddr_reg:x16; val_offset:856; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 856, x17, x15, 856, x18)

inst_1632:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0e1e09 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000003 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0e1e09; op2val:0x3; valaddr_reg:x16; val_offset:864; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 864, x17, x15, 864, x18)

inst_1633:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0e1e09 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000003 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0e1e09; op2val:0x3; valaddr_reg:x16; val_offset:872; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 872, x17, x15, 872, x18)

inst_1634:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0e1e09 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000003 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0e1e09; op2val:0x3; valaddr_reg:x16; val_offset:880; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 880, x17, x15, 880, x18)

inst_1635:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0e1e09 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000003 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f0e1e09; op2val:0x3; valaddr_reg:x16; val_offset:888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 888, x17, x15, 888, x18)

inst_1636:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x4f46b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000027 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d4f46b1; op2val:0x27; valaddr_reg:x16; val_offset:896; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 896, x17, x15, 896, x18)

inst_1637:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x4f46b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000027 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d4f46b1; op2val:0x27; valaddr_reg:x16; val_offset:904; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 904, x17, x15, 904, x18)

inst_1638:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x4f46b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000027 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d4f46b1; op2val:0x27; valaddr_reg:x16; val_offset:912; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 912, x17, x15, 912, x18)

inst_1639:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x4f46b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000027 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d4f46b1; op2val:0x27; valaddr_reg:x16; val_offset:920; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 920, x17, x15, 920, x18)

inst_1640:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x4f46b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000027 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d4f46b1; op2val:0x27; valaddr_reg:x16; val_offset:928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 928, x17, x15, 928, x18)

inst_1641:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0dd15c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000007 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8dd15c; op2val:0x7; valaddr_reg:x16; val_offset:936; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 936, x17, x15, 936, x18)

inst_1642:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0dd15c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000007 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8dd15c; op2val:0x7; valaddr_reg:x16; val_offset:944; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 944, x17, x15, 944, x18)

inst_1643:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0dd15c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000007 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8dd15c; op2val:0x7; valaddr_reg:x16; val_offset:952; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 952, x17, x15, 952, x18)

inst_1644:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0dd15c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000007 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8dd15c; op2val:0x7; valaddr_reg:x16; val_offset:960; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 960, x17, x15, 960, x18)

inst_1645:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0dd15c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000007 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e8dd15c; op2val:0x7; valaddr_reg:x16; val_offset:968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 968, x17, x15, 968, x18)

inst_1646:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x11bfa2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000003 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f11bfa2; op2val:0x3; valaddr_reg:x16; val_offset:976; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 976, x17, x15, 976, x18)

inst_1647:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x11bfa2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000003 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f11bfa2; op2val:0x3; valaddr_reg:x16; val_offset:984; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 984, x17, x15, 984, x18)

inst_1648:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x11bfa2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000003 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f11bfa2; op2val:0x3; valaddr_reg:x16; val_offset:992; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 992, x17, x15, 992, x18)

inst_1649:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x11bfa2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000003 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f11bfa2; op2val:0x3; valaddr_reg:x16; val_offset:1000; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1000, x17, x15, 1000, x18)

inst_1650:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x11bfa2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000003 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f11bfa2; op2val:0x3; valaddr_reg:x16; val_offset:1008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1008, x17, x15, 1008, x18)

inst_1651:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x566c6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000004 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed66c6d; op2val:0x4; valaddr_reg:x16; val_offset:1016; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1016, x17, x15, 1016, x18)

inst_1652:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x566c6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000004 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed66c6d; op2val:0x4; valaddr_reg:x16; val_offset:1024; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1024, x17, x15, 1024, x18)

inst_1653:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x566c6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000004 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed66c6d; op2val:0x4; valaddr_reg:x16; val_offset:1032; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1032, x17, x15, 1032, x18)

inst_1654:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x566c6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000004 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed66c6d; op2val:0x4; valaddr_reg:x16; val_offset:1040; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1040, x17, x15, 1040, x18)

inst_1655:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x566c6d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000004 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ed66c6d; op2val:0x4; valaddr_reg:x16; val_offset:1048; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1048, x17, x15, 1048, x18)

inst_1656:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x49c1af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000005 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec9c1af; op2val:0x5; valaddr_reg:x16; val_offset:1056; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1056, x17, x15, 1056, x18)

inst_1657:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x49c1af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000005 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec9c1af; op2val:0x5; valaddr_reg:x16; val_offset:1064; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1064, x17, x15, 1064, x18)

inst_1658:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x49c1af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000005 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec9c1af; op2val:0x5; valaddr_reg:x16; val_offset:1072; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1072, x17, x15, 1072, x18)

inst_1659:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x49c1af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000005 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec9c1af; op2val:0x5; valaddr_reg:x16; val_offset:1080; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1080, x17, x15, 1080, x18)

inst_1660:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x49c1af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000005 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ec9c1af; op2val:0x5; valaddr_reg:x16; val_offset:1088; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1088, x17, x15, 1088, x18)

inst_1661:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x291918 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000006 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea91918; op2val:0x6; valaddr_reg:x16; val_offset:1096; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1096, x17, x15, 1096, x18)

inst_1662:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x291918 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000006 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea91918; op2val:0x6; valaddr_reg:x16; val_offset:1104; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1104, x17, x15, 1104, x18)

inst_1663:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x291918 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000006 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea91918; op2val:0x6; valaddr_reg:x16; val_offset:1112; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1112, x17, x15, 1112, x18)

inst_1664:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x291918 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000006 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea91918; op2val:0x6; valaddr_reg:x16; val_offset:1120; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1120, x17, x15, 1120, x18)

inst_1665:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x291918 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000006 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ea91918; op2val:0x6; valaddr_reg:x16; val_offset:1128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1128, x17, x15, 1128, x18)

inst_1666:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2872fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00000c and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e2872fb; op2val:0xc; valaddr_reg:x16; val_offset:1136; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1136, x17, x15, 1136, x18)

inst_1667:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2872fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00000c and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e2872fb; op2val:0xc; valaddr_reg:x16; val_offset:1144; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1144, x17, x15, 1144, x18)

inst_1668:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2872fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00000c and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e2872fb; op2val:0xc; valaddr_reg:x16; val_offset:1152; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1152, x17, x15, 1152, x18)

inst_1669:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2872fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00000c and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e2872fb; op2val:0xc; valaddr_reg:x16; val_offset:1160; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1160, x17, x15, 1160, x18)

inst_1670:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2872fb and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00000c and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3e2872fb; op2val:0xc; valaddr_reg:x16; val_offset:1168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1168, x17, x15, 1168, x18)

inst_1671:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7185d9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7185d9; op2val:0x2; valaddr_reg:x16; val_offset:1176; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1176, x17, x15, 1176, x18)

inst_1672:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7185d9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7185d9; op2val:0x2; valaddr_reg:x16; val_offset:1184; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1184, x17, x15, 1184, x18)

inst_1673:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7185d9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7185d9; op2val:0x2; valaddr_reg:x16; val_offset:1192; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1192, x17, x15, 1192, x18)

inst_1674:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7185d9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7185d9; op2val:0x2; valaddr_reg:x16; val_offset:1200; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1200, x17, x15, 1200, x18)

inst_1675:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7185d9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f7185d9; op2val:0x2; valaddr_reg:x16; val_offset:1208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1208, x17, x15, 1208, x18)

inst_1676:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x341568 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00002d and rm_val == 4  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d341568; op2val:0x2d; valaddr_reg:x16; val_offset:1216; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x4, 0, x16, 1216, x17, x15, 1216, x18)

inst_1677:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x341568 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00002d and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d341568; op2val:0x2d; valaddr_reg:x16; val_offset:1224; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1224, x17, x15, 1224, x18)

inst_1678:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x341568 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00002d and rm_val == 2  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d341568; op2val:0x2d; valaddr_reg:x16; val_offset:1232; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x2, 0, x16, 1232, x17, x15, 1232, x18)

inst_1679:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x341568 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00002d and rm_val == 1  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d341568; op2val:0x2d; valaddr_reg:x16; val_offset:1240; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x1, 0, x16, 1240, x17, x15, 1240, x18)

inst_1680:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x341568 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00002d and rm_val == 0  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3d341568; op2val:0x2d; valaddr_reg:x16; val_offset:1248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x0, 0, x16, 1248, x17, x15, 1248, x18)

inst_1681:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5976c2 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x16aeb7 and rm_val == 3  
// opcode: fmul.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f5976c2; op2val:0x2a16aeb7; valaddr_reg:x16; val_offset:1256; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.s, f12, f10, f11, 0x3, 0, x16, 1256, x17, x15, 1256, x18)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
test_fp:
.word 0x3d341568
.word 0x3d341568
.word 0x3f5976c2
.word 0x2a16aeb7
.word 0x3f5976c2
.word 0x3f5976c2
.word 0x3f5976c2
.word 0x2a16aeb7
.word 0x3f5976c2
.word 0x2a16aeb7
.word 0x3f5976c2
.word 0x2a16aeb7
.word 0x3ed724e5
.word 0x2a984ea5
.word 0x3ed724e5
.word 0x2a984ea5
.word 0x3ed724e5
.word 0x2a984ea5
.word 0x3ed724e5
.word 0x2a984ea5
.word 0x3ed724e5
.word 0x2a984ea5
.word 0x3e2a8133
.word 0x2b402eb1
.word 0x3e2a8133
.word 0x2b402eb1
.word 0x3e2a8133
.word 0x2b402eb1
.word 0x3e2a8133
.word 0x2b402eb1
.word 0x3e2a8133
.word 0x2b402eb1
.word 0x3f0f36d0
.word 0x2a64cde3
.word 0x3f0f36d0
.word 0x2a64cde3
.word 0x3f0f36d0
.word 0x2a64cde3
.word 0x3f0f36d0
.word 0x2a64cde3
.word 0x3f0f36d0
.word 0x2a64cde3
.word 0x3e8d3d14
.word 0x2ae8012b
.word 0x3e8d3d14
.word 0x2ae8012b
.word 0x3e8d3d14
.word 0x2ae8012b
.word 0x3e8d3d14
.word 0x2ae8012b
.word 0x3e8d3d14
.word 0x2ae8012b
.word 0x3f2e5a35
.word 0x2a3bf0f5
.word 0x3f2e5a35
.word 0x2a3bf0f5
.word 0x3f2e5a35
.word 0x2a3bf0f5
.word 0x3f2e5a35
.word 0x2a3bf0f5
.word 0x3f2e5a35
.word 0x2a3bf0f5
.word 0x3f4d55ff
.word 0x2a1f9518
.word 0x3f4d55ff
.word 0x2a1f9518
.word 0x3f4d55ff
.word 0x2a1f9518
.word 0x3f4d55ff
.word 0x2a1f9518
.word 0x3f4d55ff
.word 0x2a1f9518
.word 0x3f7cc491
.word 0x2a01a301
.word 0x3f7cc491
.word 0x2a01a301
.word 0x3f7cc491
.word 0x2a01a301
.word 0x3f7cc491
.word 0x2a01a301
.word 0x3f7cc491
.word 0x2a01a301
.word 0x3e270d73
.word 0x2b442763
.word 0x3e270d73
.word 0x2b442763
.word 0x3e270d73
.word 0x2b442763
.word 0x3e270d73
.word 0x2b442763
.word 0x3e270d73
.word 0x2b442763
.word 0x3f3132a8
.word 0x2a38ec56
.word 0x3f3132a8
.word 0x2a38ec56
.word 0x3f3132a8
.word 0x2a38ec56
.word 0x3f3132a8
.word 0x2a38ec56
.word 0x3f3132a8
.word 0x2a38ec56
.word 0x3debd6be
.word 0x2b8af13c
.word 0x3debd6be
.word 0x2b8af13c
.word 0x3debd6be
.word 0x2b8af13c
.word 0x3debd6be
.word 0x2b8af13c
.word 0x3debd6be
.word 0x2b8af13c
.word 0x3ec4c472
.word 0x2aa6881b
.word 0x3ec4c472
.word 0x2aa6881b
.word 0x3ec4c472
.word 0x2aa6881b
.word 0x3ec4c472
.word 0x2aa6881b
.word 0x3ec4c472
.word 0x2aa6881b
.word 0x3e0f2d8c
.word 0x2b64dcb2
.word 0x3e0f2d8c
.word 0x2b64dcb2
.word 0x3e0f2d8c
.word 0x2b64dcb2
.word 0x3e0f2d8c
.word 0x2b64dcb2
.word 0x3e0f2d8c
.word 0x2b64dcb2
.word 0x3f545f09
.word 0x2a1a4bbc
.word 0x3f545f09
.word 0x2a1a4bbc
.word 0x3f545f09
.word 0x2a1a4bbc
.word 0x3f545f09
.word 0x2a1a4bbc
.word 0x3f545f09
.word 0x2a1a4bbc
.word 0x3eda775d
.word 0x2a95fdba
.word 0x3eda775d
.word 0x2a95fdba
.word 0x3eda775d
.word 0x2a95fdba
.word 0x3eda775d
.word 0x2a95fdba
.word 0x3eda775d
.word 0x2a95fdba
.word 0x3f4ed08b
.word 0x2a1e7100
.word 0x3f4ed08b
.word 0x2a1e7100
.word 0x3f4ed08b
.word 0x2a1e7100
.word 0x3f4ed08b
.word 0x2a1e7100
.word 0x3f4ed08b
.word 0x2a1e7100
.word 0x3f4f24a5
.word 0x2a1e30ac
.word 0x3f4f24a5
.word 0x2a1e30ac
.word 0x3f4f24a5
.word 0x2a1e30ac
.word 0x3f4f24a5
.word 0x2a1e30ac
.word 0x3f4f24a5
.word 0x2a1e30ac
.word 0x3f06d993
.word 0x2a72ff00
.word 0x3f06d993
.word 0x2a72ff00
.word 0x3f06d993
.word 0x2a72ff00
.word 0x3f06d993
.word 0x2a72ff00
.word 0x3f06d993
.word 0x2a72ff00
.word 0x3f0ba4ec
.word 0x2a6aa747
.word 0x3f0ba4ec
.word 0x2a6aa747
.word 0x3f0ba4ec
.word 0x2a6aa747
.word 0x3f0ba4ec
.word 0x2a6aa747
.word 0x3f0ba4ec
.word 0x2a6aa747
.word 0x3e5ae4c4
.word 0x2b15b2c3
.word 0x3e5ae4c4
.word 0x2b15b2c3
.word 0x3e5ae4c4
.word 0x2b15b2c3
.word 0x3e5ae4c4
.word 0x2b15b2c3
.word 0x3e5ae4c4
.word 0x2b15b2c3
.word 0x3e694947
.word 0x2b0c766f
.word 0x3e694947
.word 0x2b0c766f
.word 0x3e694947
.word 0x2b0c766f
.word 0x3e694947
.word 0x2b0c766f
.word 0x3e694947
.word 0x2b0c766f
.word 0x3d9c0b42
.word 0x2bd1fdf9
.word 0x3d9c0b42
.word 0x2bd1fdf9
.word 0x3d9c0b42
.word 0x2bd1fdf9
.word 0x3d9c0b42
.word 0x2bd1fdf9
.word 0x3d9c0b42
.word 0x2bd1fdf9
.word 0x3f1b8b86
.word 0x2a52aa6c
.word 0x3f1b8b86
.word 0x2a52aa6c
.word 0x3f1b8b86
.word 0x2a52aa6c
.word 0x3f1b8b86
.word 0x2a52aa6c
.word 0x3f1b8b86
.word 0x2a52aa6c
.word 0x3f2ab210
.word 0x2a3ff7ae
.word 0x3f2ab210
.word 0x2a3ff7ae
.word 0x3f2ab210
.word 0x2a3ff7ae
.word 0x3f2ab210
.word 0x2a3ff7ae
.word 0x3f2ab210
.word 0x2a3ff7ae
.word 0x3db75440
.word 0x2bb2bd18
.word 0x3db75440
.word 0x2bb2bd18
.word 0x3db75440
.word 0x2bb2bd18
.word 0x3db75440
.word 0x2bb2bd18
.word 0x3db75440
.word 0x2bb2bd18
.word 0x3e986a27
.word 0x2ad6fe0f
.word 0x3e986a27
.word 0x2ad6fe0f
.word 0x3e986a27
.word 0x2ad6fe0f
.word 0x3e986a27
.word 0x2ad6fe0f
.word 0x3e986a27
.word 0x2ad6fe0f
.word 0x3eae7621
.word 0x2abbd2e0
.word 0x3eae7621
.word 0x2abbd2e0
.word 0x3eae7621
.word 0x2abbd2e0
.word 0x3eae7621
.word 0x2abbd2e0
.word 0x3eae7621
.word 0x2abbd2e0
.word 0x3e8f1fd0
.word 0x2ae4f2a7
.word 0x3e8f1fd0
.word 0x2ae4f2a7
.word 0x3e8f1fd0
.word 0x2ae4f2a7
.word 0x3e8f1fd0
.word 0x2ae4f2a7
.word 0x3e8f1fd0
.word 0x2ae4f2a7
.word 0x3f165a29
.word 0x2a59f10e
.word 0x3f165a29
.word 0x2a59f10e
.word 0x3f165a29
.word 0x2a59f10e
.word 0x3f165a29
.word 0x2a59f10e
.word 0x3f165a29
.word 0x2a59f10e
.word 0x3dc7c417
.word 0x2ba4082d
.word 0x3dc7c417
.word 0x2ba4082d
.word 0x3dc7c417
.word 0x2ba4082d
.word 0x3dc7c417
.word 0x2ba4082d
.word 0x3dc7c417
.word 0x2ba4082d
.word 0x3e991efd
.word 0x2ad60029
.word 0x3e991efd
.word 0x2ad60029
.word 0x3e991efd
.word 0x2ad60029
.word 0x3e991efd
.word 0x2ad60029
.word 0x3e991efd
.word 0x2ad60029
.word 0x3f4a87c3
.word 0x2a21cb05
.word 0x3f4a87c3
.word 0x2a21cb05
.word 0x3f4a87c3
.word 0x2a21cb05
.word 0x3f4a87c3
.word 0x2a21cb05
.word 0x3f4a87c3
.word 0x2a21cb05
.word 0x3f093f10
.word 0x2a6ec0d0
.word 0x3f093f10
.word 0x2a6ec0d0
.word 0x3f093f10
.word 0x2a6ec0d0
.word 0x3f093f10
.word 0x2a6ec0d0
.word 0x3f093f10
.word 0x2a6ec0d0
.word 0x3cb46b39
.word 0x2cb59f30
.word 0x3cb46b39
.word 0x2cb59f30
.word 0x3cb46b39
.word 0x2cb59f30
.word 0x3cb46b39
.word 0x2cb59f30
.word 0x3cb46b39
.word 0x2cb59f30
.word 0x3f504313
.word 0x2a1d571b
.word 0x3f504313
.word 0x2a1d571b
.word 0x3f504313
.word 0x2a1d571b
.word 0x3f504313
.word 0x2a1d571b
.word 0x3f504313
.word 0x2a1d571b
.word 0x3eba7361
.word 0x2aafbf06
.word 0x3eba7361
.word 0x2aafbf06
.word 0x3eba7361
.word 0x2aafbf06
.word 0x3eba7361
.word 0x2aafbf06
.word 0x3eba7361
.word 0x2aafbf06
.word 0x3f4dda80
.word 0x2a1f2e60
.word 0x3f4dda80
.word 0x2a1f2e60
.word 0x3f4dda80
.word 0x2a1f2e60
.word 0x3f4dda80
.word 0x2a1f2e60
.word 0x3f4dda80
.word 0x2a1f2e60
.word 0x3ecdc621
.word 0x2a9f3e21
.word 0x3ecdc621
.word 0x2a9f3e21
.word 0x3ecdc621
.word 0x2a9f3e21
.word 0x3ecdc621
.word 0x2a9f3e21
.word 0x3ecdc621
.word 0x2a9f3e21
.word 0x3e352a0a
.word 0x2b34dfe3
.word 0x3e352a0a
.word 0x2b34dfe3
.word 0x3e352a0a
.word 0x2b34dfe3
.word 0x3e352a0a
.word 0x2b34dfe3
.word 0x3e352a0a
.word 0x2b34dfe3
.word 0x3f73c3ee
.word 0x2a066ca2
.word 0x3f73c3ee
.word 0x2a066ca2
.word 0x3f73c3ee
.word 0x2a066ca2
.word 0x3f73c3ee
.word 0x2a066ca2
.word 0x3f73c3ee
.word 0x2a066ca2
.word 0x3e983f18
.word 0x2ad73ade
.word 0x3e983f18
.word 0x2ad73ade
.word 0x3e983f18
.word 0x2ad73ade
.word 0x3e983f18
.word 0x2ad73ade
.word 0x3e983f18
.word 0x2ad73ade
.word 0x3ebfc751
.word 0x2aaadd1c
.word 0x3ebfc751
.word 0x2aaadd1c
.word 0x3ebfc751
.word 0x2aaadd1c
.word 0x3ebfc751
.word 0x2aaadd1c
.word 0x3ebfc751
.word 0x2aaadd1c
.word 0x54946ca7
.word 0x3fdcc5b4
.word 0x54946ca7
.word 0x3fdcc5b4
.word 0x54946ca7
.word 0x3fdcc5b4
.word 0x54946ca7
.word 0x3fdcc5b4
.word 0x54946ca7
.word 0x3fdcc5b4
.word 0x53cedc9f
.word 0x409e67c0
.word 0x53cedc9f
.word 0x409e67c0
.word 0x53cedc9f
.word 0x409e67c0
.word 0x53cedc9f
.word 0x409e67c0
.word 0x53cedc9f
.word 0x409e67c0
.word 0x527acc83
.word 0x4202a78d
.word 0x527acc83
.word 0x4202a78d
.word 0x527acc83
.word 0x4202a78d
.word 0x527acc83
.word 0x4202a78d
.word 0x527acc83
.word 0x4202a78d
.word 0x54b2f555
.word 0x3fb71aa5
.word 0x54b2f555
.word 0x3fb71aa5
.word 0x54b2f555
.word 0x3fb71aa5
.word 0x54b2f555
.word 0x3fb71aa5
.word 0x54b2f555
.word 0x3fb71aa5
.word 0x53ea99f9
.word 0x408bacd8
.word 0x53ea99f9
.word 0x408bacd8
.word 0x53ea99f9
.word 0x408bacd8
.word 0x53ea99f9
.word 0x408bacd8
.word 0x53ea99f9
.word 0x408bacd8
.word 0x54c3ee46
.word 0x3fa73e25
.word 0x54c3ee46
.word 0x3fa73e25
.word 0x54c3ee46
.word 0x3fa73e25
.word 0x54c3ee46
.word 0x3fa73e25
.word 0x54c3ee46
.word 0x3fa73e25
.word 0x54721035
.word 0x40075e9a
.word 0x54721035
.word 0x40075e9a
.word 0x54721035
.word 0x40075e9a
.word 0x54721035
.word 0x40075e9a
.word 0x54721035
.word 0x40075e9a
.word 0x54cfbec8
.word 0x3f9dbb4d
.word 0x54cfbec8
.word 0x3f9dbb4d
.word 0x54cfbec8
.word 0x3f9dbb4d
.word 0x54cfbec8
.word 0x3f9dbb4d
.word 0x54cfbec8
.word 0x3f9dbb4d
.word 0x544bdb15
.word 0x4020bdb7
.word 0x544bdb15
.word 0x4020bdb7
.word 0x544bdb15
.word 0x4020bdb7
.word 0x544bdb15
.word 0x4020bdb7
.word 0x544bdb15
.word 0x4020bdb7
.word 0x545c9a1e
.word 0x401489fa
.word 0x545c9a1e
.word 0x401489fa
.word 0x545c9a1e
.word 0x401489fa
.word 0x545c9a1e
.word 0x401489fa
.word 0x545c9a1e
.word 0x401489fa
.word 0x54412d7d
.word 0x4029a04f
.word 0x54412d7d
.word 0x4029a04f
.word 0x54412d7d
.word 0x4029a04f
.word 0x54412d7d
.word 0x4029a04f
.word 0x54412d7d
.word 0x4029a04f
.word 0x54a08bb5
.word 0x3fcc1a94
.word 0x54a08bb5
.word 0x3fcc1a94
.word 0x54a08bb5
.word 0x3fcc1a94
.word 0x54a08bb5
.word 0x3fcc1a94
.word 0x54a08bb5
.word 0x3fcc1a94
.word 0x5357f3c8
.word 0x4117bcbb
.word 0x5357f3c8
.word 0x4117bcbb
.word 0x5357f3c8
.word 0x4117bcbb
.word 0x5357f3c8
.word 0x4117bcbb
.word 0x5357f3c8
.word 0x4117bcbb
.word 0x54eabfaf
.word 0x3f8b9668
.word 0x54eabfaf
.word 0x3f8b9668
.word 0x54eabfaf
.word 0x3f8b9668
.word 0x54eabfaf
.word 0x3f8b9668
.word 0x54eabfaf
.word 0x3f8b9668
.word 0x54b7b3a3
.word 0x3fb2604a
.word 0x54b7b3a3
.word 0x3fb2604a
.word 0x54b7b3a3
.word 0x3fb2604a
.word 0x54b7b3a3
.word 0x3fb2604a
.word 0x54b7b3a3
.word 0x3fb2604a
.word 0x54dbcd96
.word 0x3f951433
.word 0x54dbcd96
.word 0x3f951433
.word 0x54dbcd96
.word 0x3f951433
.word 0x54dbcd96
.word 0x3f951433
.word 0x54dbcd96
.word 0x3f951433
.word 0x54421d8c
.word 0x4028ce89
.word 0x54421d8c
.word 0x4028ce89
.word 0x54421d8c
.word 0x4028ce89
.word 0x54421d8c
.word 0x4028ce89
.word 0x54421d8c
.word 0x4028ce89
.word 0x52d9bab5
.word 0x41967fb0
.word 0x52d9bab5
.word 0x41967fb0
.word 0x52d9bab5
.word 0x41967fb0
.word 0x52d9bab5
.word 0x41967fb0
.word 0x52d9bab5
.word 0x41967fb0
.word 0x535daa8d
.word 0x4113d36c
.word 0x535daa8d
.word 0x4113d36c
.word 0x535daa8d
.word 0x4113d36c
.word 0x535daa8d
.word 0x4113d36c
.word 0x535daa8d
.word 0x4113d36c
.word 0x5386ed04
.word 0x40f2dbfc
.word 0x5386ed04
.word 0x40f2dbfc
.word 0x5386ed04
.word 0x40f2dbfc
.word 0x5386ed04
.word 0x40f2dbfc
.word 0x5386ed04
.word 0x40f2dbfc
.word 0x538f534d
.word 0x40e4a06a
.word 0x538f534d
.word 0x40e4a06a
.word 0x538f534d
.word 0x40e4a06a
.word 0x538f534d
.word 0x40e4a06a
.word 0x538f534d
.word 0x40e4a06a
.word 0x54ae8d71
.word 0x3fbbb9ca
.word 0x54ae8d71
.word 0x3fbbb9ca
.word 0x54ae8d71
.word 0x3fbbb9ca
.word 0x54ae8d71
.word 0x3fbbb9ca
.word 0x54ae8d71
.word 0x3fbbb9ca
.word 0x54d271c7
.word 0x3f9bb564
.word 0x54d271c7
.word 0x3f9bb564
.word 0x54d271c7
.word 0x3f9bb564
.word 0x54d271c7
.word 0x3f9bb564
.word 0x54d271c7
.word 0x3f9bb564
.word 0x53cc65ca
.word 0x40a050a2
.word 0x53cc65ca
.word 0x40a050a2
.word 0x53cc65ca
.word 0x40a050a2
.word 0x53cc65ca
.word 0x40a050a2
.word 0x53cc65ca
.word 0x40a050a2
.word 0x54808d7c
.word 0x3ffee63e
.word 0x54808d7c
.word 0x3ffee63e
.word 0x54808d7c
.word 0x3ffee63e
.word 0x54808d7c
.word 0x3ffee63e
.word 0x54808d7c
.word 0x3ffee63e
.word 0x548f0b53
.word 0x3fe51373
.word 0x548f0b53
.word 0x3fe51373
.word 0x548f0b53
.word 0x3fe51373
.word 0x548f0b53
.word 0x3fe51373
.word 0x548f0b53
.word 0x3fe51373
.word 0x53f752bb
.word 0x40847d99
.word 0x53f752bb
.word 0x40847d99
.word 0x53f752bb
.word 0x40847d99
.word 0x53f752bb
.word 0x40847d99
.word 0x53f752bb
.word 0x40847d99
.word 0x52cbd817
.word 0x41a0c012
.word 0x52cbd817
.word 0x41a0c012
.word 0x52cbd817
.word 0x41a0c012
.word 0x52cbd817
.word 0x41a0c012
.word 0x52cbd817
.word 0x41a0c012
.word 0x54f8b483
.word 0x3f83c122
.word 0x54f8b483
.word 0x3f83c122
.word 0x54f8b483
.word 0x3f83c122
.word 0x54f8b483
.word 0x3f83c122
.word 0x54f8b483
.word 0x3f83c122
.word 0x54ab75ad
.word 0x3fbf1cab
.word 0x54ab75ad
.word 0x3fbf1cab
.word 0x54ab75ad
.word 0x3fbf1cab
.word 0x54ab75ad
.word 0x3fbf1cab
.word 0x54ab75ad
.word 0x3fbf1cab
.word 0x53b14b26
.word 0x40b8d2cb
.word 0x53b14b26
.word 0x40b8d2cb
.word 0x53b14b26
.word 0x40b8d2cb
.word 0x53b14b26
.word 0x40b8d2cb
.word 0x53b14b26
.word 0x40b8d2cb
.word 0x5359018c
.word 0x4117001a
.word 0x5359018c
.word 0x4117001a
.word 0x5359018c
.word 0x4117001a
.word 0x5359018c
.word 0x4117001a
.word 0x5359018c
.word 0x4117001a
.word 0x54cc44fe
.word 0x3fa06a60
.word 0x54cc44fe
.word 0x3fa06a60
.word 0x54cc44fe
.word 0x3fa06a60
.word 0x54cc44fe
.word 0x3fa06a60
.word 0x54cc44fe
.word 0x3fa06a60
.word 0x531e6299
.word 0x414ee359
.word 0x531e6299
.word 0x414ee359
.word 0x531e6299
.word 0x414ee359
.word 0x531e6299
.word 0x414ee359
.word 0x531e6299
.word 0x414ee359
.word 0x54ae02bb
.word 0x3fbc4f6f
.word 0x54ae02bb
.word 0x3fbc4f6f
.word 0x54ae02bb
.word 0x3fbc4f6f
.word 0x54ae02bb
.word 0x3fbc4f6f
.word 0x54ae02bb
.word 0x3fbc4f6f
.word 0x5383499e
.word 0x40f996ea
.word 0x5383499e
.word 0x40f996ea
.word 0x5383499e
.word 0x40f996ea
.word 0x5383499e
.word 0x40f996ea
.word 0x5383499e
.word 0x40f996ea
.word 0x535db472
.word 0x4113ccd2
.word 0x535db472
.word 0x4113ccd2
.word 0x535db472
.word 0x4113ccd2
.word 0x535db472
.word 0x4113ccd2
.word 0x535db472
.word 0x4113ccd2
.word 0x5486571e
.word 0x3ff3eaf9
.word 0x5486571e
.word 0x3ff3eaf9
.word 0x5486571e
.word 0x3ff3eaf9
.word 0x5486571e
.word 0x3ff3eaf9
.word 0x5486571e
.word 0x3ff3eaf9
.word 0x5468be36
.word 0x400cca5c
.word 0x5468be36
.word 0x400cca5c
.word 0x5468be36
.word 0x400cca5c
.word 0x5468be36
.word 0x400cca5c
.word 0x5468be36
.word 0x400cca5c
.word 0x54fd2a86
.word 0x3f816ecc
.word 0x54fd2a86
.word 0x3f816ecc
.word 0x54fd2a86
.word 0x3f816ecc
.word 0x54fd2a86
.word 0x3f816ecc
.word 0x54fd2a86
.word 0x3f816ecc
.word 0x5489e0cc
.word 0x3feda8bf
.word 0x5489e0cc
.word 0x3feda8bf
.word 0x5489e0cc
.word 0x3feda8bf
.word 0x5489e0cc
.word 0x3feda8bf
.word 0x5489e0cc
.word 0x3feda8bf
.word 0x5498f81f
.word 0x3fd63688
.word 0x5498f81f
.word 0x3fd63688
.word 0x5498f81f
.word 0x3fd63688
.word 0x5498f81f
.word 0x3fd63688
.word 0x5498f81f
.word 0x3fd63688
.word 0x3f2ee3a7
.word 0xcafa5b
.word 0x3f2ee3a7
.word 0xcafa5b
.word 0x3f2ee3a7
.word 0xcafa5b
.word 0x3f2ee3a7
.word 0xcafa5b
.word 0x3f2ee3a7
.word 0xcafa5b
.word 0x3f06b57a
.word 0x103c2ba
.word 0x3f06b57a
.word 0x103c2ba
.word 0x3f06b57a
.word 0x103c2ba
.word 0x3f06b57a
.word 0x103c2ba
.word 0x3f06b57a
.word 0x103c2ba
.word 0x3b2d96fe
.word 0x4cc7f55
.word 0x3b2d96fe
.word 0x4cc7f55
.word 0x3b2d96fe
.word 0x4cc7f55
.word 0x3b2d96fe
.word 0x4cc7f55
.word 0x3b2d96fe
.word 0x4cc7f55
.word 0x3ec77cc9
.word 0x131f309
.word 0x3ec77cc9
.word 0x131f309
.word 0x3ec77cc9
.word 0x131f309
.word 0x3ec77cc9
.word 0x131f309
.word 0x3ec77cc9
.word 0x131f309
.word 0x3f297618
.word 0xd17abe
.word 0x3f297618
.word 0xd17abe
.word 0x3f297618
.word 0xd17abe
.word 0x3f297618
.word 0xd17abe
.word 0x3f297618
.word 0xd17abe
.word 0x3ef43aa4
.word 0x1115991
.word 0x3ef43aa4
.word 0x1115991
.word 0x3ef43aa4
.word 0x1115991
.word 0x3ef43aa4
.word 0x1115991
.word 0x3ef43aa4
.word 0x1115991
.word 0x3e628155
.word 0x19cb930
.word 0x3e628155
.word 0x19cb930
.word 0x3e628155
.word 0x19cb930
.word 0x3e628155
.word 0x19cb930
.word 0x3e628155
.word 0x19cb930
.word 0x3e18c1b2
.word 0x1e86316
.word 0x3e18c1b2
.word 0x1e86316
.word 0x3e18c1b2
.word 0x1e86316
.word 0x3e18c1b2
.word 0x1e86316
.word 0x3e18c1b2
.word 0x1e86316
.word 0x3f703531
.word 0x93c87d
.word 0x3f703531
.word 0x93c87d
.word 0x3f703531
.word 0x93c87d
.word 0x3f703531
.word 0x93c87d
.word 0x3f703531
.word 0x93c87d
.word 0x3f2090e5
.word 0xdd15a5
.word 0x3f2090e5
.word 0xdd15a5
.word 0x3f2090e5
.word 0xdd15a5
.word 0x3f2090e5
.word 0xdd15a5
.word 0x3f2090e5
.word 0xdd15a5
.word 0x3ec75ed0
.word 0x1320dca
.word 0x3ec75ed0
.word 0x1320dca
.word 0x3ec75ed0
.word 0x1320dca
.word 0x3ec75ed0
.word 0x1320dca
.word 0x3ec75ed0
.word 0x1320dca
.word 0x3f40e698
.word 0xb80688
.word 0x3f40e698
.word 0xb80688
.word 0x3f40e698
.word 0xb80688
.word 0x3f40e698
.word 0xb80688
.word 0x3f40e698
.word 0xb80688
.word 0x3f3ff473
.word 0xb8eead
.word 0x3f3ff473
.word 0xb8eead
.word 0x3f3ff473
.word 0xb8eead
.word 0x3f3ff473
.word 0xb8eead
.word 0x3f3ff473
.word 0xb8eead
.word 0x3f3fbfc5
.word 0xb9217b
.word 0x3f3fbfc5
.word 0xb9217b
.word 0x3f3fbfc5
.word 0xb9217b
.word 0x3f3fbfc5
.word 0xb9217b
.word 0x3f3fbfc5
.word 0xb9217b
.word 0x3f5b98c8
.word 0xa1a761
.word 0x3f5b98c8
.word 0xa1a761
.word 0x3f5b98c8
.word 0xa1a761
.word 0x3f5b98c8
.word 0xa1a761
.word 0x3f5b98c8
.word 0xa1a761
.word 0x3d97303b
.word 0x26acc2b
.word 0x3d97303b
.word 0x26acc2b
.word 0x3d97303b
.word 0x26acc2b
.word 0x3d97303b
.word 0x26acc2b
.word 0x3d97303b
.word 0x26acc2b
.word 0x3f5973ae
.word 0xa33f95
.word 0x3f5973ae
.word 0xa33f95
.word 0x3f5973ae
.word 0xa33f95
.word 0x3f5973ae
.word 0xa33f95
.word 0x3f5973ae
.word 0xa33f95
.word 0x3f3720f5
.word 0xc1d86c
.word 0x3f3720f5
.word 0xc1d86c
.word 0x3f3720f5
.word 0xc1d86c
.word 0x3f3720f5
.word 0xc1d86c
.word 0x3f3720f5
.word 0xc1d86c
.word 0x3e2a7731
.word 0x1d03ece
.word 0x3e2a7731
.word 0x1d03ece
.word 0x3e2a7731
.word 0x1d03ece
.word 0x3e2a7731
.word 0x1d03ece
.word 0x3e2a7731
.word 0x1d03ece
.word 0x3eea2501
.word 0x1179c2b
.word 0x3eea2501
.word 0x1179c2b
.word 0x3eea2501
.word 0x1179c2b
.word 0x3eea2501
.word 0x1179c2b
.word 0x3eea2501
.word 0x1179c2b
.word 0x3e74295e
.word 0x19163d9
.word 0x3e74295e
.word 0x19163d9
.word 0x3e74295e
.word 0x19163d9
.word 0x3e74295e
.word 0x19163d9
.word 0x3e74295e
.word 0x19163d9
.word 0x3da8aa18
.word 0x252781c
.word 0x3da8aa18
.word 0x252781c
.word 0x3da8aa18
.word 0x252781c
.word 0x3da8aa18
.word 0x252781c
.word 0x3da8aa18
.word 0x252781c
.word 0x3f263348
.word 0xd596f2
.word 0x3f263348
.word 0xd596f2
.word 0x3f263348
.word 0xd596f2
.word 0x3f263348
.word 0xd596f2
.word 0x3f263348
.word 0xd596f2
.word 0x3f5f7946
.word 0x9ed971
.word 0x3f5f7946
.word 0x9ed971
.word 0x3f5f7946
.word 0x9ed971
.word 0x3f5f7946
.word 0x9ed971
.word 0x3f5f7946
.word 0x9ed971
.word 0x3f5044ce
.word 0xaa7247
.word 0x3f5044ce
.word 0xaa7247
.word 0x3f5044ce
.word 0xaa7247
.word 0x3f5044ce
.word 0xaa7247
.word 0x3f5044ce
.word 0xaa7247
.word 0x3f05fb50
.word 0x10479ce
.word 0x3f05fb50
.word 0x10479ce
.word 0x3f05fb50
.word 0x10479ce
.word 0x3f05fb50
.word 0x10479ce
.word 0x3f05fb50
.word 0x10479ce
.word 0x3d2d35de
.word 0x2ccf200
.word 0x3d2d35de
.word 0x2ccf200
.word 0x3d2d35de
.word 0x2ccf200
.word 0x3d2d35de
.word 0x2ccf200
.word 0x3d2d35de
.word 0x2ccf200
.word 0x3f1ad5a0
.word 0xe544b9
.word 0x3f1ad5a0
.word 0xe544b9
.word 0x3f1ad5a0
.word 0xe544b9
.word 0x3f1ad5a0
.word 0xe544b9
.word 0x3f1ad5a0
.word 0xe544b9
.word 0x3ea89f85
.word 0x152854e
.word 0x3ea89f85
.word 0x152854e
.word 0x3ea89f85
.word 0x152854e
.word 0x3ea89f85
.word 0x152854e
.word 0x3ea89f85
.word 0x152854e
.word 0x3f35594f
.word 0xc3bf78
.word 0x3f35594f
.word 0xc3bf78
.word 0x3f35594f
.word 0xc3bf78
.word 0x3f35594f
.word 0xc3bf78
.word 0x3f35594f
.word 0xc3bf78
.word 0x3e7c6180
.word 0x18ca7b7
.word 0x3e7c6180
.word 0x18ca7b7
.word 0x3e7c6180
.word 0x18ca7b7
.word 0x3e7c6180
.word 0x18ca7b7
.word 0x3e7c6180
.word 0x18ca7b7
.word 0x3e05d38f
.word 0x204a128
.word 0x3e05d38f
.word 0x204a128
.word 0x3e05d38f
.word 0x204a128
.word 0x3e05d38f
.word 0x204a128
.word 0x3e05d38f
.word 0x204a128
.word 0x3e83cf30
.word 0x186a8be
.word 0x3e83cf30
.word 0x186a8be
.word 0x3e83cf30
.word 0x186a8be
.word 0x3e83cf30
.word 0x186a8be
.word 0x3e83cf30
.word 0x186a8be
.word 0x3e9eba82
.word 0x15fa4d4
.word 0x3e9eba82
.word 0x15fa4d4
.word 0x3e9eba82
.word 0x15fa4d4
.word 0x3e9eba82
.word 0x15fa4d4
.word 0x3e9eba82
.word 0x15fa4d4
.word 0x3d97b426
.word 0x269fffe
.word 0x3d97b426
.word 0x269fffe
.word 0x3d97b426
.word 0x269fffe
.word 0x3d97b426
.word 0x269fffe
.word 0x3d97b426
.word 0x269fffe
.word 0x3f286217
.word 0xd2d21c
.word 0x3f286217
.word 0xd2d21c
.word 0x3f286217
.word 0xd2d21c
.word 0x3f286217
.word 0xd2d21c
.word 0x3f286217
.word 0xd2d21c
.word 0x3f19888d
.word 0xe7361a
.word 0x3f19888d
.word 0xe7361a
.word 0x3f19888d
.word 0xe7361a
.word 0x3f19888d
.word 0xe7361a
.word 0x3f19888d
.word 0xe7361a
.word 0x3e440f0a
.word 0x1b50fb5
.word 0x3e440f0a
.word 0x1b50fb5
.word 0x3e440f0a
.word 0x1b50fb5
.word 0x3e440f0a
.word 0x1b50fb5
.word 0x3e440f0a
.word 0x1b50fb5
.word 0x3e51d1ec
.word 0x1a92fae
.word 0x3e51d1ec
.word 0x1a92fae
.word 0x3e51d1ec
.word 0x1a92fae
.word 0x3e51d1ec
.word 0x1a92fae
.word 0x3e51d1ec
.word 0x1a92fae
.word 0x3f204f68
.word 0xdd6ff6
.word 0x3f204f68
.word 0xdd6ff6
.word 0x3f204f68
.word 0xdd6ff6
.word 0x3f204f68
.word 0xdd6ff6
.word 0x3f204f68
.word 0xdd6ff6
.word 0x3f4f79e6
.word 0xab18f8
.word 0x3f4f79e6
.word 0xab18f8
.word 0x3f4f79e6
.word 0xab18f8
.word 0x3f4f79e6
.word 0xab18f8
.word 0x3f4f79e6
.word 0xab18f8
.word 0x3f66839a
.word 0x99ff70
.word 0x3f66839a
.word 0x99ff70
.word 0x3f66839a
.word 0x99ff70
.word 0x3f66839a
.word 0x99ff70
.word 0x3f66839a
.word 0x99ff70
.word 0x3d9017be
.word 0x26ce26b
.word 0x3d9017be
.word 0x26ce26b
.word 0x3d9017be
.word 0x26ce26b
.word 0x3d9017be
.word 0x26ce26b
.word 0x3d9017be
.word 0x26ce26b
.word 0x3f0ed951
.word 0xeef276
.word 0x3f0ed951
.word 0xeef276
.word 0x3f0ed951
.word 0xeef276
.word 0x3f0ed951
.word 0xeef276
.word 0x3f0ed951
.word 0xeef276
.word 0x3dd7ea00
.word 0x21e166b
.word 0x3dd7ea00
.word 0x21e166b
.word 0x3dd7ea00
.word 0x21e166b
.word 0x3dd7ea00
.word 0x21e166b
.word 0x3dd7ea00
.word 0x21e166b
.word 0x3f0ed880
.word 0xeef3d5
.word 0x3f0ed880
.word 0xeef3d5
.word 0x3f0ed880
.word 0xeef3d5
.word 0x3f0ed880
.word 0xeef3d5
.word 0x3f0ed880
.word 0xeef3d5
.word 0x3f0ae921
.word 0xf5b8b2
.word 0x3f0ae921
.word 0xf5b8b2
.word 0x3f0ae921
.word 0xf5b8b2
.word 0x3f0ae921
.word 0xf5b8b2
.word 0x3f0ae921
.word 0xf5b8b2
.word 0x3f2e7de4
.word 0xc39d9f
.word 0x3f2e7de4
.word 0xc39d9f
.word 0x3f2e7de4
.word 0xc39d9f
.word 0x3f2e7de4
.word 0xc39d9f
.word 0x3f2e7de4
.word 0xc39d9f
.word 0x3f1eebd3
.word 0xd6c811
.word 0x3f1eebd3
.word 0xd6c811
.word 0x3f1eebd3
.word 0xd6c811
.word 0x3f1eebd3
.word 0xd6c811
.word 0x3f1eebd3
.word 0xd6c811
.word 0x3f635631
.word 0x9624f8
.word 0x3f635631
.word 0x9624f8
.word 0x3f635631
.word 0x9624f8
.word 0x3f635631
.word 0x9624f8
.word 0x3f635631
.word 0x9624f8
.word 0x3f38f6a4
.word 0xb88a7c
.word 0x3f38f6a4
.word 0xb88a7c
.word 0x3f38f6a4
.word 0xb88a7c
.word 0x3f38f6a4
.word 0xb88a7c
.word 0x3f38f6a4
.word 0xb88a7c
.word 0x3f0adec6
.word 0xf5cb04
.word 0x3f0adec6
.word 0xf5cb04
.word 0x3f0adec6
.word 0xf5cb04
.word 0x3f0adec6
.word 0xf5cb04
.word 0x3f0adec6
.word 0xf5cb04
.word 0x3f3121b7
.word 0xc0b346
.word 0x3f3121b7
.word 0xc0b346
.word 0x3f3121b7
.word 0xc0b346
.word 0x3f3121b7
.word 0xc0b346
.word 0x3f3121b7
.word 0xc0b346
.word 0x3e4efc82
.word 0x1a4e7fc
.word 0x3e4efc82
.word 0x1a4e7fc
.word 0x3e4efc82
.word 0x1a4e7fc
.word 0x3e4efc82
.word 0x1a4e7fc
.word 0x3e4efc82
.word 0x1a4e7fc
.word 0x3ef066c3
.word 0x10dfc18
.word 0x3ef066c3
.word 0x10dfc18
.word 0x3ef066c3
.word 0x10dfc18
.word 0x3ef066c3
.word 0x10dfc18
.word 0x3ef066c3
.word 0x10dfc18
.word 0x3ebbbe36
.word 0x135cf0c
.word 0x3ebbbe36
.word 0x135cf0c
.word 0x3ebbbe36
.word 0x135cf0c
.word 0x3ebbbe36
.word 0x135cf0c
.word 0x3ebbbe36
.word 0x135cf0c
.word 0x3e231e4a
.word 0x1d1414b
.word 0x3e231e4a
.word 0x1d1414b
.word 0x3e231e4a
.word 0x1d1414b
.word 0x3e231e4a
.word 0x1d1414b
.word 0x3e231e4a
.word 0x1d1414b
.word 0x3eb17451
.word 0x1405994
.word 0x3eb17451
.word 0x1405994
.word 0x3eb17451
.word 0x1405994
.word 0x3eb17451
.word 0x1405994
.word 0x3eb17451
.word 0x1405994
.word 0x3eb51715
.word 0x13c7cf1
.word 0x3eb51715
.word 0x13c7cf1
.word 0x3eb51715
.word 0x13c7cf1
.word 0x3eb51715
.word 0x13c7cf1
.word 0x3eb51715
.word 0x13c7cf1
.word 0x3e33d83c
.word 0x1bdcb1c
.word 0x3e33d83c
.word 0x1bdcb1c
.word 0x3e33d83c
.word 0x1bdcb1c
.word 0x3e33d83c
.word 0x1bdcb1c
.word 0x3e33d83c
.word 0x1bdcb1c
.word 0x3daeb020
.word 0x243655f
.word 0x3daeb020
.word 0x243655f
.word 0x3daeb020
.word 0x243655f
.word 0x3daeb020
.word 0x243655f
.word 0x3daeb020
.word 0x243655f
.word 0x3f042690
.word 0x1012542
.word 0x3f042690
.word 0x1012542
.word 0x3f042690
.word 0x1012542
.word 0x3f042690
.word 0x1012542
.word 0x3f042690
.word 0x1012542
.word 0x3f310ab3
.word 0xc0cc53
.word 0x3f310ab3
.word 0xc0cc53
.word 0x3f310ab3
.word 0xc0cc53
.word 0x3f310ab3
.word 0xc0cc53
.word 0x3f310ab3
.word 0xc0cc53
.word 0x3f0ea4a0
.word 0xef4ab9
.word 0x3f0ea4a0
.word 0xef4ab9
.word 0x3f0ea4a0
.word 0xef4ab9
.word 0x3f0ea4a0
.word 0xef4ab9
.word 0x3f0ea4a0
.word 0xef4ab9
.word 0x3eec8b57
.word 0x1104cca
.word 0x3eec8b57
.word 0x1104cca
.word 0x3eec8b57
.word 0x1104cca
.word 0x3eec8b57
.word 0x1104cca
.word 0x3eec8b57
.word 0x1104cca
.word 0x3d07856f
.word 0x2fbddf5
.word 0x3d07856f
.word 0x2fbddf5
.word 0x3d07856f
.word 0x2fbddf5
.word 0x3d07856f
.word 0x2fbddf5
.word 0x3d07856f
.word 0x2fbddf5
.word 0x3f7d5668
.word 0x86bc0e
.word 0x3f7d5668
.word 0x86bc0e
.word 0x3f7d5668
.word 0x86bc0e
.word 0x3f7d5668
.word 0x86bc0e
.word 0x3f7d5668
.word 0x86bc0e
.word 0x3f090c42
.word 0xf90fb5
.word 0x3f090c42
.word 0xf90fb5
.word 0x3f090c42
.word 0xf90fb5
.word 0x3f090c42
.word 0xf90fb5
.word 0x3f090c42
.word 0xf90fb5
.word 0x3f5661cd
.word 0x9f37a1
.word 0x3f5661cd
.word 0x9f37a1
.word 0x3f5661cd
.word 0x9f37a1
.word 0x3f5661cd
.word 0x9f37a1
.word 0x3f5661cd
.word 0x9f37a1
.word 0x3e0b3d44
.word 0x1f52437
.word 0x3e0b3d44
.word 0x1f52437
.word 0x3e0b3d44
.word 0x1f52437
.word 0x3e0b3d44
.word 0x1f52437
.word 0x3e0b3d44
.word 0x1f52437
.word 0x3ea6674b
.word 0x14d1fb8
.word 0x3ea6674b
.word 0x14d1fb8
.word 0x3ea6674b
.word 0x14d1fb8
.word 0x3ea6674b
.word 0x14d1fb8
.word 0x3ea6674b
.word 0x14d1fb8
.word 0x3e5ccc8b
.word 0x19a970f
.word 0x3e5ccc8b
.word 0x19a970f
.word 0x3e5ccc8b
.word 0x19a970f
.word 0x3e5ccc8b
.word 0x19a970f
.word 0x3e5ccc8b
.word 0x19a970f
.word 0x3f53886b
.word 0xa15ca0
.word 0x3f53886b
.word 0xa15ca0
.word 0x3f53886b
.word 0xa15ca0
.word 0x3f53886b
.word 0xa15ca0
.word 0x3f53886b
.word 0xa15ca0
.word 0x3f6b91aa
.word 0x90e5bb
.word 0x3f6b91aa
.word 0x90e5bb
.word 0x3f6b91aa
.word 0x90e5bb
.word 0x3f6b91aa
.word 0x90e5bb
.word 0x3f6b91aa
.word 0x90e5bb
.word 0x3efe83cc
.word 0x1061c82
.word 0x3efe83cc
.word 0x1061c82
.word 0x3efe83cc
.word 0x1061c82
.word 0x3efe83cc
.word 0x1061c82
.word 0x3efe83cc
.word 0x1061c82
.word 0x3f2a449b
.word 0xc877e1
.word 0x3f2a449b
.word 0xc877e1
.word 0x3f2a449b
.word 0xc877e1
.word 0x3f2a449b
.word 0xc877e1
.word 0x3f2a449b
.word 0xc877e1
.word 0x3f03d702
.word 0x1017330
.word 0x3f03d702
.word 0x1017330
.word 0x3f03d702
.word 0x1017330
.word 0x3f03d702
.word 0x1017330
.word 0x3f03d702
.word 0x1017330
.word 0x3eaee5ec
.word 0x1432944
.word 0x3eaee5ec
.word 0x1432944
.word 0x3eaee5ec
.word 0x1432944
.word 0x3eaee5ec
.word 0x1432944
.word 0x3eaee5ec
.word 0x1432944
.word 0x3f03bb4f
.word 0x1018e68
.word 0x3f03bb4f
.word 0x1018e68
.word 0x3f03bb4f
.word 0x1018e68
.word 0x3f03bb4f
.word 0x1018e68
.word 0x3f03bb4f
.word 0x1018e68
.word 0x3f6d5b51
.word 0x8fce59
.word 0x3f6d5b51
.word 0x8fce59
.word 0x3f6d5b51
.word 0x8fce59
.word 0x3f6d5b51
.word 0x8fce59
.word 0x3f6d5b51
.word 0x8fce59
.word 0x3f4b8548
.word 0xa7b6df
.word 0x3f4b8548
.word 0xa7b6df
.word 0x3f4b8548
.word 0xa7b6df
.word 0x3f4b8548
.word 0xa7b6df
.word 0x3f4b8548
.word 0xa7b6df
.word 0x3ede28d8
.word 0x119a4b0
.word 0x3ede28d8
.word 0x119a4b0
.word 0x3ede28d8
.word 0x119a4b0
.word 0x3ede28d8
.word 0x119a4b0
.word 0x3ede28d8
.word 0x119a4b0
.word 0x3f10cb4b
.word 0xebbcac
.word 0x3f10cb4b
.word 0xebbcac
.word 0x3f10cb4b
.word 0xebbcac
.word 0x3f10cb4b
.word 0xebbcac
.word 0x3f10cb4b
.word 0xebbcac
.word 0x3f5cb458
.word 0x9aa801
.word 0x3f5cb458
.word 0x9aa801
.word 0x3f5cb458
.word 0x9aa801
.word 0x3f5cb458
.word 0x9aa801
.word 0x3f5cb458
.word 0x9aa801
.word 0x3f4efa38
.word 0x9e511a
.word 0x3f4efa38
.word 0x9e511a
.word 0x3f4efa38
.word 0x9e511a
.word 0x3f4efa38
.word 0x9e511a
.word 0x3f4efa38
.word 0x9e511a
.word 0x3e82f23a
.word 0x17a3d7e
.word 0x3e82f23a
.word 0x17a3d7e
.word 0x3e82f23a
.word 0x17a3d7e
.word 0x3e82f23a
.word 0x17a3d7e
.word 0x3e82f23a
.word 0x17a3d7e
.word 0x3e6e975b
.word 0x18956ea
.word 0x3e6e975b
.word 0x18956ea
.word 0x3e6e975b
.word 0x18956ea
.word 0x3e6e975b
.word 0x18956ea
.word 0x3e6e975b
.word 0x18956ea
.word 0x3f66486c
.word 0x8e4b68
.word 0x3f66486c
.word 0x8e4b68
.word 0x3f66486c
.word 0x8e4b68
.word 0x3f66486c
.word 0x8e4b68
.word 0x3f66486c
.word 0x8e4b68
.word 0x3dc1e5ff
.word 0x228fee7
.word 0x3dc1e5ff
.word 0x228fee7
.word 0x3dc1e5ff
.word 0x228fee7
.word 0x3dc1e5ff
.word 0x228fee7
.word 0x3dc1e5ff
.word 0x228fee7
.word 0x3e8a83be
.word 0x16c912f
.word 0x3e8a83be
.word 0x16c912f
.word 0x3e8a83be
.word 0x16c912f
.word 0x3e8a83be
.word 0x16c912f
.word 0x3e8a83be
.word 0x16c912f
.word 0x3f7b9ce2
.word 0x823b5a
.word 0x3f7b9ce2
.word 0x823b5a
.word 0x3f7b9ce2
.word 0x823b5a
.word 0x3f7b9ce2
.word 0x823b5a
.word 0x3f7b9ce2
.word 0x823b5a
.word 0x3eb3280d
.word 0x136e6cf
.word 0x3eb3280d
.word 0x136e6cf
.word 0x3eb3280d
.word 0x136e6cf
.word 0x3eb3280d
.word 0x136e6cf
.word 0x3eb3280d
.word 0x136e6cf
.word 0x3e93ac3f
.word 0x15de55c
.word 0x3e93ac3f
.word 0x15de55c
.word 0x3e93ac3f
.word 0x15de55c
.word 0x3e93ac3f
.word 0x15de55c
.word 0x3e93ac3f
.word 0x15de55c
.word 0x3f7d0767
.word 0x8180c4
.word 0x3f7d0767
.word 0x8180c4
.word 0x3f7d0767
.word 0x8180c4
.word 0x3f7d0767
.word 0x8180c4
.word 0x3f7d0767
.word 0x8180c4
.word 0x3cba7fa0
.word 0x32fb37d
.word 0x3cba7fa0
.word 0x32fb37d
.word 0x3cba7fa0
.word 0x32fb37d
.word 0x3cba7fa0
.word 0x32fb37d
.word 0x3cba7fa0
.word 0x32fb37d
.word 0x3f18e716
.word 0xd64e67
.word 0x3f18e716
.word 0xd64e67
.word 0x3f18e716
.word 0xd64e67
.word 0x3f18e716
.word 0xd64e67
.word 0x3f18e716
.word 0xd64e67
.word 0x3f466679
.word 0xa5293c
.word 0x3f466679
.word 0xa5293c
.word 0x3f466679
.word 0xa5293c
.word 0x3f466679
.word 0xa5293c
.word 0x3f466679
.word 0xa5293c
.word 0x3e741ccd
.word 0x1863bb3
.word 0x3e741ccd
.word 0x1863bb3
.word 0x3e741ccd
.word 0x1863bb3
.word 0x3e741ccd
.word 0x1863bb3
.word 0x3e741ccd
.word 0x1863bb3
.word 0x3e823f0b
.word 0x17b95c1
.word 0x3e823f0b
.word 0x17b95c1
.word 0x3e823f0b
.word 0x17b95c1
.word 0x3e823f0b
.word 0x17b95c1
.word 0x3e823f0b
.word 0x17b95c1
.word 0x3d1bbd92
.word 0x2d266ba
.word 0x3d1bbd92
.word 0x2d266ba
.word 0x3d1bbd92
.word 0x2d266ba
.word 0x3d1bbd92
.word 0x2d266ba
.word 0x3d1bbd92
.word 0x2d266ba
.word 0x3e96d6ca
.word 0x1593cfe
.word 0x3e96d6ca
.word 0x1593cfe
.word 0x3e96d6ca
.word 0x1593cfe
.word 0x3e96d6ca
.word 0x1593cfe
.word 0x3e96d6ca
.word 0x1593cfe
.word 0x3e943e93
.word 0x15d0a55
.word 0x3e943e93
.word 0x15d0a55
.word 0x3e943e93
.word 0x15d0a55
.word 0x3e943e93
.word 0x15d0a55
.word 0x3e943e93
.word 0x15d0a55
.word 0x3f047d9c
.word 0xf752b7
.word 0x3f047d9c
.word 0xf752b7
.word 0x3f047d9c
.word 0xf752b7
.word 0x3f047d9c
.word 0xf752b7
.word 0x3f047d9c
.word 0xf752b7
.word 0x3f51cfb3
.word 0x9c2dad
.word 0x3f51cfb3
.word 0x9c2dad
.word 0x3f51cfb3
.word 0x9c2dad
.word 0x3f51cfb3
.word 0x9c2dad
.word 0x3f51cfb3
.word 0x9c2dad
.word 0x3ecf46a4
.word 0x11e16bb
.word 0x3ecf46a4
.word 0x11e16bb
.word 0x3ecf46a4
.word 0x11e16bb
.word 0x3ecf46a4
.word 0x11e16bb
.word 0x3ecf46a4
.word 0x11e16bb
.word 0x3f0f0e9d
.word 0xe50e31
.word 0x3f0f0e9d
.word 0xe50e31
.word 0x3f0f0e9d
.word 0xe50e31
.word 0x3f0f0e9d
.word 0xe50e31
.word 0x3f0f0e9d
.word 0xe50e31
.word 0x3eda6605
.word 0x11609a4
.word 0x3eda6605
.word 0x11609a4
.word 0x3eda6605
.word 0x11609a4
.word 0x3eda6605
.word 0x11609a4
.word 0x3eda6605
.word 0x11609a4
.word 0x3b9f7b0a
.word 0x44d778c
.word 0x3b9f7b0a
.word 0x44d778c
.word 0x3b9f7b0a
.word 0x44d778c
.word 0x3b9f7b0a
.word 0x44d778c
.word 0x3b9f7b0a
.word 0x44d778c
.word 0x3e97f214
.word 0x157a7f8
.word 0x3e97f214
.word 0x157a7f8
.word 0x3e97f214
.word 0x157a7f8
.word 0x3e97f214
.word 0x157a7f8
.word 0x3e97f214
.word 0x157a7f8
.word 0x3dd7406c
.word 0x2183b2b
.word 0x3dd7406c
.word 0x2183b2b
.word 0x3dd7406c
.word 0x2183b2b
.word 0x3dd7406c
.word 0x2183b2b
.word 0x3dd7406c
.word 0x2183b2b
.word 0x3e91bbb3
.word 0x160d968
.word 0x3e91bbb3
.word 0x160d968
.word 0x3e91bbb3
.word 0x160d968
.word 0x3e91bbb3
.word 0x160d968
.word 0x3e91bbb3
.word 0x160d968
.word 0x3f67626b
.word 0x8d9dfc
.word 0x3f67626b
.word 0x8d9dfc
.word 0x3f67626b
.word 0x8d9dfc
.word 0x3f67626b
.word 0x8d9dfc
.word 0x3f67626b
.word 0x8d9dfc
.word 0x3d4d0d0e
.word 0x29fcdde
.word 0x3d4d0d0e
.word 0x29fcdde
.word 0x3d4d0d0e
.word 0x29fcdde
.word 0x3d4d0d0e
.word 0x29fcdde
.word 0x3d4d0d0e
.word 0x29fcdde
.word 0x3f634f5c
.word 0x9027d3
.word 0x3f634f5c
.word 0x9027d3
.word 0x3f634f5c
.word 0x9027d3
.word 0x3f634f5c
.word 0x9027d3
.word 0x3f634f5c
.word 0x9027d3
.word 0x3f0fa7cc
.word 0xe419f2
.word 0x3f0fa7cc
.word 0xe419f2
.word 0x3f0fa7cc
.word 0xe419f2
.word 0x3f0fa7cc
.word 0xe419f2
.word 0x3f0fa7cc
.word 0xe419f2
.word 0x3ea895c5
.word 0x1425eea
.word 0x3ea895c5
.word 0x1425eea
.word 0x3ea895c5
.word 0x1425eea
.word 0x3ea895c5
.word 0x1425eea
.word 0x3ea895c5
.word 0x1425eea
.word 0x3f342046
.word 0xb5eac4
.word 0x3f342046
.word 0xb5eac4
.word 0x3f342046
.word 0xb5eac4
.word 0x3f342046
.word 0xb5eac4
.word 0x3f342046
.word 0xb5eac4
.word 0x3eb42e95
.word 0x135dc51
.word 0x3eb42e95
.word 0x135dc51
.word 0x3eb42e95
.word 0x135dc51
.word 0x3eb42e95
.word 0x135dc51
.word 0x3eb42e95
.word 0x135dc51
.word 0x3dd603e9
.word 0x2191c4f
.word 0x3dd603e9
.word 0x2191c4f
.word 0x3dd603e9
.word 0x2191c4f
.word 0x3dd603e9
.word 0x2191c4f
.word 0x3dd603e9
.word 0x2191c4f
.word 0x3f6ee39d
.word 0x892b13
.word 0x3f6ee39d
.word 0x892b13
.word 0x3f6ee39d
.word 0x892b13
.word 0x3f6ee39d
.word 0x892b13
.word 0x3f6ee39d
.word 0x892b13
.word 0x3f5a7ee8
.word 0x95f88d
.word 0x3f5a7ee8
.word 0x95f88d
.word 0x3f5a7ee8
.word 0x95f88d
.word 0x3f5a7ee8
.word 0x95f88d
.word 0x3f5a7ee8
.word 0x95f88d
.word 0x3f24d96e
.word 0xc6c684
.word 0x3f24d96e
.word 0xc6c684
.word 0x3f24d96e
.word 0xc6c684
.word 0x3f24d96e
.word 0xc6c684
.word 0x3f24d96e
.word 0xc6c684
.word 0x3e3a84ad
.word 0x1afaebb
.word 0x3e3a84ad
.word 0x1afaebb
.word 0x3e3a84ad
.word 0x1afaebb
.word 0x3e3a84ad
.word 0x1afaebb
.word 0x3e3a84ad
.word 0x1afaebb
.word 0x3da6bf68
.word 0x2448332
.word 0x3da6bf68
.word 0x2448332
.word 0x3da6bf68
.word 0x2448332
.word 0x3da6bf68
.word 0x2448332
.word 0x3da6bf68
.word 0x2448332
.word 0x3f128547
.word 0xdfa412
.word 0x3f128547
.word 0xdfa412
.word 0x3f128547
.word 0xdfa412
.word 0x3f128547
.word 0xdfa412
.word 0x3f128547
.word 0xdfa412
.word 0x3f02deb1
.word 0xfa62d8
.word 0x3f02deb1
.word 0xfa62d8
.word 0x3f02deb1
.word 0xfa62d8
.word 0x3f02deb1
.word 0xfa62d8
.word 0x3f02deb1
.word 0xfa62d8
.word 0x3f34074b
.word 0x7957ff
.word 0x3f34074b
.word 0x7957ff
.word 0x3f34074b
.word 0x7957ff
.word 0x3f34074b
.word 0x7957ff
.word 0x3f34074b
.word 0x7957ff
.word 0x3d8b2758
.word 0x21cfcb1
.word 0x3d8b2758
.word 0x21cfcb1
.word 0x3d8b2758
.word 0x21cfcb1
.word 0x3d8b2758
.word 0x21cfcb1
.word 0x3d8b2758
.word 0x21cfcb1
.word 0x3d398fcc
.word 0x26b736b
.word 0x3d398fcc
.word 0x26b736b
.word 0x3d398fcc
.word 0x26b736b
.word 0x3d398fcc
.word 0x26b736b
.word 0x3d398fcc
.word 0x26b736b
.word 0x3ef28850
.word 0xb424c0
.word 0x3ef28850
.word 0xb424c0
.word 0x3ef28850
.word 0xb424c0
.word 0x3ef28850
.word 0xb424c0
.word 0x3ef28850
.word 0xb424c0
.word 0x3e4e1bcc
.word 0x153fa97
.word 0x3e4e1bcc
.word 0x153fa97
.word 0x3e4e1bcc
.word 0x153fa97
.word 0x3e4e1bcc
.word 0x153fa97
.word 0x3e4e1bcc
.word 0x153fa97
.word 0x3f247555
.word 0x84d4ff
.word 0x3f247555
.word 0x84d4ff
.word 0x3f247555
.word 0x84d4ff
.word 0x3f247555
.word 0x84d4ff
.word 0x3f247555
.word 0x84d4ff
.word 0x3e8d8f03
.word 0x11a51ed
.word 0x3e8d8f03
.word 0x11a51ed
.word 0x3e8d8f03
.word 0x11a51ed
.word 0x3e8d8f03
.word 0x11a51ed
.word 0x3e8d8f03
.word 0x11a51ed
.word 0x3eae829f
.word 0xfa5c91
.word 0x3eae829f
.word 0xfa5c91
.word 0x3eae829f
.word 0xfa5c91
.word 0x3eae829f
.word 0xfa5c91
.word 0x3eae829f
.word 0xfa5c91
.word 0x3e9d5ca5
.word 0x10ad27e
.word 0x3e9d5ca5
.word 0x10ad27e
.word 0x3e9d5ca5
.word 0x10ad27e
.word 0x3e9d5ca5
.word 0x10ad27e
.word 0x3e9d5ca5
.word 0x10ad27e
.word 0x3eb7cff3
.word 0xedb115
.word 0x3eb7cff3
.word 0xedb115
.word 0x3eb7cff3
.word 0xedb115
.word 0x3eb7cff3
.word 0xedb115
.word 0x3eb7cff3
.word 0xedb115
.word 0x3f6b63a6
.word 0x5cce1d
.word 0x3f6b63a6
.word 0x5cce1d
.word 0x3f6b63a6
.word 0x5cce1d
.word 0x3f6b63a6
.word 0x5cce1d
.word 0x3f6b63a6
.word 0x5cce1d
.word 0x3f60d656
.word 0x61291f
.word 0x3f60d656
.word 0x61291f
.word 0x3f60d656
.word 0x61291f
.word 0x3f60d656
.word 0x61291f
.word 0x3f60d656
.word 0x61291f
.word 0x3e7c5564
.word 0x12d257e
.word 0x3e7c5564
.word 0x12d257e
.word 0x3e7c5564
.word 0x12d257e
.word 0x3e7c5564
.word 0x12d257e
.word 0x3e7c5564
.word 0x12d257e
.word 0x3f1bb43e
.word 0x8c4ce2
.word 0x3f1bb43e
.word 0x8c4ce2
.word 0x3f1bb43e
.word 0x8c4ce2
.word 0x3f1bb43e
.word 0x8c4ce2
.word 0x3f1bb43e
.word 0x8c4ce2
.word 0x3f4ec18d
.word 0x69a853
.word 0x3f4ec18d
.word 0x69a853
.word 0x3f4ec18d
.word 0x69a853
.word 0x3f4ec18d
.word 0x69a853
.word 0x3f4ec18d
.word 0x69a853
.word 0x3f6c6755
.word 0x5c682b
.word 0x3f6c6755
.word 0x5c682b
.word 0x3f6c6755
.word 0x5c682b
.word 0x3f6c6755
.word 0x5c682b
.word 0x3f6c6755
.word 0x5c682b
.word 0x3f20897c
.word 0x88139a
.word 0x3f20897c
.word 0x88139a
.word 0x3f20897c
.word 0x88139a
.word 0x3f20897c
.word 0x88139a
.word 0x3f20897c
.word 0x88139a
.word 0x3f6d1c24
.word 0x5c21b4
.word 0x3f6d1c24
.word 0x5c21b4
.word 0x3f6d1c24
.word 0x5c21b4
.word 0x3f6d1c24
.word 0x5c21b4
.word 0x3f6d1c24
.word 0x5c21b4
.word 0x3f4ab054
.word 0x6bc717
.word 0x3f4ab054
.word 0x6bc717
.word 0x3f4ab054
.word 0x6bc717
.word 0x3f4ab054
.word 0x6bc717
.word 0x3f4ab054
.word 0x6bc717
.word 0x3f16de0b
.word 0x90cc5b
.word 0x3f16de0b
.word 0x90cc5b
.word 0x3f16de0b
.word 0x90cc5b
.word 0x3f16de0b
.word 0x90cc5b
.word 0x3f16de0b
.word 0x90cc5b
.word 0x3f7bf9a3
.word 0x56b245
.word 0x3f7bf9a3
.word 0x56b245
.word 0x3f7bf9a3
.word 0x56b245
.word 0x3f7bf9a3
.word 0x56b245
.word 0x3f7bf9a3
.word 0x56b245
.word 0x3e2336b0
.word 0x185d853
.word 0x3e2336b0
.word 0x185d853
.word 0x3e2336b0
.word 0x185d853
.word 0x3e2336b0
.word 0x185d853
.word 0x3e2336b0
.word 0x185d853
.word 0x3f661a41
.word 0x5eeff7
.word 0x3f661a41
.word 0x5eeff7
.word 0x3f661a41
.word 0x5eeff7
.word 0x3f661a41
.word 0x5eeff7
.word 0x3f661a41
.word 0x5eeff7
.word 0x3f7b1f34
.word 0x56fdae
.word 0x3f7b1f34
.word 0x56fdae
.word 0x3f7b1f34
.word 0x56fdae
.word 0x3f7b1f34
.word 0x56fdae
.word 0x3f7b1f34
.word 0x56fdae
.word 0x3c86fed0
.word 0x321d2a5
.word 0x3c86fed0
.word 0x321d2a5
.word 0x3c86fed0
.word 0x321d2a5
.word 0x3c86fed0
.word 0x321d2a5
.word 0x3c86fed0
.word 0x321d2a5
.word 0x3ec76b30
.word 0xdb1710
.word 0x3ec76b30
.word 0xdb1710
.word 0x3ec76b30
.word 0xdb1710
.word 0x3ec76b30
.word 0xdb1710
.word 0x3ec76b30
.word 0xdb1710
.word 0x3ef62a25
.word 0xb17c4c
.word 0x3ef62a25
.word 0xb17c4c
.word 0x3ef62a25
.word 0xb17c4c
.word 0x3ef62a25
.word 0xb17c4c
.word 0x3ef62a25
.word 0xb17c4c
.word 0x3e4a14c0
.word 0x1583422
.word 0x3e4a14c0
.word 0x1583422
.word 0x3e4a14c0
.word 0x1583422
.word 0x3e4a14c0
.word 0x1583422
.word 0x3e4a14c0
.word 0x1583422
.word 0x3f519b3c
.word 0x683882
.word 0x3f519b3c
.word 0x683882
.word 0x3f519b3c
.word 0x683882
.word 0x3f519b3c
.word 0x683882
.word 0x3f519b3c
.word 0x683882
.word 0x3f14fce0
.word 0x929ffe
.word 0x3f14fce0
.word 0x929ffe
.word 0x3f14fce0
.word 0x929ffe
.word 0x3f14fce0
.word 0x929ffe
.word 0x3f14fce0
.word 0x929ffe
.word 0x3ed67d2a
.word 0xcbb254
.word 0x3ed67d2a
.word 0xcbb254
.word 0x3ed67d2a
.word 0xcbb254
.word 0x3ed67d2a
.word 0xcbb254
.word 0x3ed67d2a
.word 0xcbb254
.word 0x3f10f6d1
.word 0x96b1da
.word 0x3f10f6d1
.word 0x96b1da
.word 0x3f10f6d1
.word 0x96b1da
.word 0x3f10f6d1
.word 0x96b1da
.word 0x3f10f6d1
.word 0x96b1da
.word 0x3d1712fd
.word 0x290999c
.word 0x3d1712fd
.word 0x290999c
.word 0x3d1712fd
.word 0x290999c
.word 0x3d1712fd
.word 0x290999c
.word 0x3d1712fd
.word 0x290999c
.word 0x3f499ce4
.word 0x6c5a55
.word 0x3f499ce4
.word 0x6c5a55
.word 0x3f499ce4
.word 0x6c5a55
.word 0x3f499ce4
.word 0x6c5a55
.word 0x3f499ce4
.word 0x6c5a55
.word 0x3f30b5ca
.word 0x7b9f56
.word 0x3f30b5ca
.word 0x7b9f56
.word 0x3f30b5ca
.word 0x7b9f56
.word 0x3f30b5ca
.word 0x7b9f56
.word 0x3f30b5ca
.word 0x7b9f56
.word 0x3ef5620b
.word 0xb20d08
.word 0x3ef5620b
.word 0xb20d08
.word 0x3ef5620b
.word 0xb20d08
.word 0x3ef5620b
.word 0xb20d08
.word 0x3ef5620b
.word 0xb20d08
.word 0x3f44babf
.word 0x6f0ae0
.word 0x3f44babf
.word 0x6f0ae0
.word 0x3f44babf
.word 0x6f0ae0
.word 0x3f44babf
.word 0x6f0ae0
.word 0x3f44babf
.word 0x6f0ae0
.word 0x3f667545
.word 0x5eca79
.word 0x3f667545
.word 0x5eca79
.word 0x3f667545
.word 0x5eca79
.word 0x3f667545
.word 0x5eca79
.word 0x3f667545
.word 0x5eca79
.word 0x3e8d6e0f
.word 0x11a75e1
.word 0x3e8d6e0f
.word 0x11a75e1
.word 0x3e8d6e0f
.word 0x11a75e1
.word 0x3e8d6e0f
.word 0x11a75e1
.word 0x3e8d6e0f
.word 0x11a75e1
.word 0x3f175db4
.word 0x90523b
.word 0x3f175db4
.word 0x90523b
.word 0x3f175db4
.word 0x90523b
.word 0x3f175db4
.word 0x90523b
.word 0x3f175db4
.word 0x90523b
.word 0x3f7ec3cd
.word 0x55bf3e
.word 0x3f7ec3cd
.word 0x55bf3e
.word 0x3f7ec3cd
.word 0x55bf3e
.word 0x3f7ec3cd
.word 0x55bf3e
.word 0x3f7ec3cd
.word 0x55bf3e
.word 0x3f13b529
.word 0x93e54e
.word 0x3f13b529
.word 0x93e54e
.word 0x3f13b529
.word 0x93e54e
.word 0x3f13b529
.word 0x93e54e
.word 0x3f13b529
.word 0x93e54e
.word 0x3e94bca3
.word 0x15c4ef8
.word 0x3e94bca3
.word 0x15c4ef8
.word 0x3e94bca3
.word 0x15c4ef8
.word 0x3e94bca3
.word 0x15c4ef8
.word 0x3e94bca3
.word 0x15c4ef8
.word 0x3ec06d91
.word 0x12a497a
.word 0x3ec06d91
.word 0x12a497a
.word 0x3ec06d91
.word 0x12a497a
.word 0x3ec06d91
.word 0x12a497a
.word 0x3ec06d91
.word 0x12a497a
.word 0x3f3fccd4
.word 0xaad82f
.word 0x3f3fccd4
.word 0xaad82f
.word 0x3f3fccd4
.word 0xaad82f
.word 0x3f3fccd4
.word 0xaad82f
.word 0x3f3fccd4
.word 0xaad82f
.word 0x3f447c98
.word 0xa6c4ff
.word 0x3f447c98
.word 0xa6c4ff
.word 0x3f447c98
.word 0xa6c4ff
.word 0x3f447c98
.word 0xa6c4ff
.word 0x3f447c98
.word 0xa6c4ff
.word 0x3d86e6ae
.word 0x272e760
.word 0x3d86e6ae
.word 0x272e760
.word 0x3d86e6ae
.word 0x272e760
.word 0x3d86e6ae
.word 0x272e760
.word 0x3d86e6ae
.word 0x272e760
.word 0x3efbc573
.word 0x102265b
.word 0x3efbc573
.word 0x102265b
.word 0x3efbc573
.word 0x102265b
.word 0x3efbc573
.word 0x102265b
.word 0x3efbc573
.word 0x102265b
.word 0x3f6774ef
.word 0x8d92a5
.word 0x3f6774ef
.word 0x8d92a5
.word 0x3f6774ef
.word 0x8d92a5
.word 0x3f6774ef
.word 0x8d92a5
.word 0x3f6774ef
.word 0x8d92a5
.word 0x3f7768db
.word 0x8471bd
.word 0x3f7768db
.word 0x8471bd
.word 0x3f7768db
.word 0x8471bd
.word 0x3f7768db
.word 0x8471bd
.word 0x3f7768db
.word 0x8471bd
.word 0x3f5c03a5
.word 0x94ef8f
.word 0x3f5c03a5
.word 0x94ef8f
.word 0x3f5c03a5
.word 0x94ef8f
.word 0x3f5c03a5
.word 0x94ef8f
.word 0x3f5c03a5
.word 0x94ef8f
.word 0x3f7b622c
.word 0x8259c1
.word 0x3f7b622c
.word 0x8259c1
.word 0x3f7b622c
.word 0x8259c1
.word 0x3f7b622c
.word 0x8259c1
.word 0x3f7b622c
.word 0x8259c1
.word 0x3ec9b027
.word 0x12277f9
.word 0x3ec9b027
.word 0x12277f9
.word 0x3ec9b027
.word 0x12277f9
.word 0x3ec9b027
.word 0x12277f9
.word 0x3ec9b027
.word 0x12277f9
.word 0x3d24f0e9
.word 0x2c6aa34
.word 0x3d24f0e9
.word 0x2c6aa34
.word 0x3d24f0e9
.word 0x2c6aa34
.word 0x3d24f0e9
.word 0x2c6aa34
.word 0x3d24f0e9
.word 0x2c6aa34
.word 0x3ef86bc7
.word 0x103e7b2
.word 0x3ef86bc7
.word 0x103e7b2
.word 0x3ef86bc7
.word 0x103e7b2
.word 0x3ef86bc7
.word 0x103e7b2
.word 0x3ef86bc7
.word 0x103e7b2
.word 0x3ed480af
.word 0x11a334b
.word 0x3ed480af
.word 0x11a334b
.word 0x3ed480af
.word 0x11a334b
.word 0x3ed480af
.word 0x11a334b
.word 0x3ed480af
.word 0x11a334b
.word 0x3e003e1e
.word 0x1ff83fc
.word 0x3e003e1e
.word 0x1ff83fc
.word 0x3e003e1e
.word 0x1ff83fc
.word 0x3e003e1e
.word 0x1ff83fc
.word 0x3e003e1e
.word 0x1ff83fc
.word 0x3f65e01c
.word 0x8e8bf7
.word 0x3f65e01c
.word 0x8e8bf7
.word 0x3f65e01c
.word 0x8e8bf7
.word 0x3f65e01c
.word 0x8e8bf7
.word 0x3f65e01c
.word 0x8e8bf7
.word 0x3eada7e3
.word 0x13cb1ef
.word 0x3eada7e3
.word 0x13cb1ef
.word 0x3eada7e3
.word 0x13cb1ef
.word 0x3eada7e3
.word 0x13cb1ef
.word 0x3eada7e3
.word 0x13cb1ef
.word 0x3f06f7ec
.word 0xf2c859
.word 0x3f06f7ec
.word 0xf2c859
.word 0x3f06f7ec
.word 0xf2c859
.word 0x3f06f7ec
.word 0xf2c859
.word 0x3f06f7ec
.word 0xf2c859
.word 0x3e0cdb03
.word 0x1e8a2ae
.word 0x3e0cdb03
.word 0x1e8a2ae
.word 0x3e0cdb03
.word 0x1e8a2ae
.word 0x3e0cdb03
.word 0x1e8a2ae
.word 0x3e0cdb03
.word 0x1e8a2ae
.word 0x3dc8a9a7
.word 0x2234c82
.word 0x3dc8a9a7
.word 0x2234c82
.word 0x3dc8a9a7
.word 0x2234c82
.word 0x3dc8a9a7
.word 0x2234c82
.word 0x3dc8a9a7
.word 0x2234c82
.word 0x3e6fa593
.word 0x188bc0a
.word 0x3e6fa593
.word 0x188bc0a
.word 0x3e6fa593
.word 0x188bc0a
.word 0x3e6fa593
.word 0x188bc0a
.word 0x3e6fa593
.word 0x188bc0a
.word 0x3f781cc7
.word 0x8411b2
.word 0x3f781cc7
.word 0x8411b2
.word 0x3f781cc7
.word 0x8411b2
.word 0x3f781cc7
.word 0x8411b2
.word 0x3f781cc7
.word 0x8411b2
.word 0x3f630ae6
.word 0x905347
.word 0x3f630ae6
.word 0x905347
.word 0x3f630ae6
.word 0x905347
.word 0x3f630ae6
.word 0x905347
.word 0x3f630ae6
.word 0x905347
.word 0x3ec4ff54
.word 0x1265652
.word 0x3ec4ff54
.word 0x1265652
.word 0x3ec4ff54
.word 0x1265652
.word 0x3ec4ff54
.word 0x1265652
.word 0x3ec4ff54
.word 0x1265652
.word 0x3f76b713
.word 0x84d12e
.word 0x3f76b713
.word 0x84d12e
.word 0x3f76b713
.word 0x84d12e
.word 0x3f76b713
.word 0x84d12e
.word 0x3f76b713
.word 0x84d12e
.word 0x3c23d08e
.word 0x3c807e7
.word 0x3c23d08e
.word 0x3c807e7
.word 0x3c23d08e
.word 0x3c807e7
.word 0x3c23d08e
.word 0x3c807e7
.word 0x3c23d08e
.word 0x3c807e7
.word 0x3f1d4b8d
.word 0xd0525c
.word 0x3f1d4b8d
.word 0xd0525c
.word 0x3f1d4b8d
.word 0xd0525c
.word 0x3f1d4b8d
.word 0xd0525c
.word 0x3f1d4b8d
.word 0xd0525c
.word 0x3f50f67e
.word 0x9cd000
.word 0x3f50f67e
.word 0x9cd000
.word 0x3f50f67e
.word 0x9cd000
.word 0x3f50f67e
.word 0x9cd000
.word 0x3f50f67e
.word 0x9cd000
.word 0x3e3f2007
.word 0x1ab72a7
.word 0x3e3f2007
.word 0x1ab72a7
.word 0x3e3f2007
.word 0x1ab72a7
.word 0x3e3f2007
.word 0x1ab72a7
.word 0x3e3f2007
.word 0x1ab72a7
.word 0x3f7a963f
.word 0x82c3d5
.word 0x3f7a963f
.word 0x82c3d5
.word 0x3f7a963f
.word 0x82c3d5
.word 0x3f7a963f
.word 0x82c3d5
.word 0x3f7a963f
.word 0x82c3d5
.word 0x3f798302
.word 0x835415
.word 0x3f798302
.word 0x835415
.word 0x3f798302
.word 0x835415
.word 0x3f798302
.word 0x835415
.word 0x3f798302
.word 0x835415
.word 0x3f6ac6db
.word 0x8b9222
.word 0x3f6ac6db
.word 0x8b9222
.word 0x3f6ac6db
.word 0x8b9222
.word 0x3f6ac6db
.word 0x8b9222
.word 0x3f6ac6db
.word 0x8b9222
.word 0x3f53ff9b
.word 0x9a912e
.word 0x3f53ff9b
.word 0x9a912e
.word 0x3f53ff9b
.word 0x9a912e
.word 0x3f53ff9b
.word 0x9a912e
.word 0x3f53ff9b
.word 0x9a912e
.word 0x3f77d72a
.word 0x8436cb
.word 0x3f77d72a
.word 0x8436cb
.word 0x3f77d72a
.word 0x8436cb
.word 0x3f77d72a
.word 0x8436cb
.word 0x3f77d72a
.word 0x8436cb
.word 0x3f13bbab
.word 0xddce2d
.word 0x3f13bbab
.word 0xddce2d
.word 0x3f13bbab
.word 0xddce2d
.word 0x3f13bbab
.word 0xddce2d
.word 0x3f13bbab
.word 0xddce2d
.word 0x3f4a1e0d
.word 0xa21fa2
.word 0x3f4a1e0d
.word 0xa21fa2
.word 0x3f4a1e0d
.word 0xa21fa2
.word 0x3f4a1e0d
.word 0xa21fa2
.word 0x3f4a1e0d
.word 0xa21fa2
.word 0x3e158ff6
.word 0x1db17ae
.word 0x3e158ff6
.word 0x1db17ae
.word 0x3e158ff6
.word 0x1db17ae
.word 0x3e158ff6
.word 0x1db17ae
.word 0x3e158ff6
.word 0x1db17ae
.word 0x3f64cbc0
.word 0x8f3824
.word 0x3f64cbc0
.word 0x8f3824
.word 0x3f64cbc0
.word 0x8f3824
.word 0x3f64cbc0
.word 0x8f3824
.word 0x3f64cbc0
.word 0x8f3824
.word 0x3f45fc75
.word 0xa581a8
.word 0x3f45fc75
.word 0xa581a8
.word 0x3f45fc75
.word 0xa581a8
.word 0x3f45fc75
.word 0xa581a8
.word 0x3f45fc75
.word 0xa581a8
.word 0x3eb1b5ca
.word 0x13863df
.word 0x3eb1b5ca
.word 0x13863df
.word 0x3eb1b5ca
.word 0x13863df
.word 0x3eb1b5ca
.word 0x13863df
.word 0x3eb1b5ca
.word 0x13863df
.word 0x3e82abd6
.word 0x17ac444
.word 0x3e82abd6
.word 0x17ac444
.word 0x3e82abd6
.word 0x17ac444
.word 0x3e82abd6
.word 0x17ac444
.word 0x3e82abd6
.word 0x17ac444
.word 0x3dbd2019
.word 0x22d42bb
.word 0x3dbd2019
.word 0x22d42bb
.word 0x3dbd2019
.word 0x22d42bb
.word 0x3dbd2019
.word 0x22d42bb
.word 0x3dbd2019
.word 0x22d42bb
.word 0x3e37e910
.word 0xb
.word 0x3e37e910
.word 0xb
.word 0x3e37e910
.word 0xb
.word 0x3e37e910
.word 0xb
.word 0x3e37e910
.word 0xb
.word 0x3ec0e366
.word 0x5
.word 0x3ec0e366
.word 0x5
.word 0x3ec0e366
.word 0x5
.word 0x3ec0e366
.word 0x5
.word 0x3ec0e366
.word 0x5
.word 0x3ef9e956
.word 0x4
.word 0x3ef9e956
.word 0x4
.word 0x3ef9e956
.word 0x4
.word 0x3ef9e956
.word 0x4
.word 0x3ef9e956
.word 0x4
.word 0x3f302af8
.word 0x2
.word 0x3f302af8
.word 0x2
.word 0x3f302af8
.word 0x2
.word 0x3f302af8
.word 0x2
.word 0x3f302af8
.word 0x2
.word 0x3eb279cf
.word 0x5
.word 0x3eb279cf
.word 0x5
.word 0x3eb279cf
.word 0x5
.word 0x3eb279cf
.word 0x5
.word 0x3eb279cf
.word 0x5
.word 0x3efdd319
.word 0x4
.word 0x3efdd319
.word 0x4
.word 0x3efdd319
.word 0x4
.word 0x3efdd319
.word 0x4
.word 0x3efdd319
.word 0x4
.word 0x3d2ea57c
.word 0x2e
.word 0x3d2ea57c
.word 0x2e
.word 0x3d2ea57c
.word 0x2e
.word 0x3d2ea57c
.word 0x2e
.word 0x3d2ea57c
.word 0x2e
.word 0x3db57f89
.word 0x16
.word 0x3db57f89
.word 0x16
.word 0x3db57f89
.word 0x16
.word 0x3db57f89
.word 0x16
.word 0x3db57f89
.word 0x16
.word 0x3dbc89b1
.word 0x15
.word 0x3dbc89b1
.word 0x15
.word 0x3dbc89b1
.word 0x15
.word 0x3dbc89b1
.word 0x15
.word 0x3dbc89b1
.word 0x15
.word 0x3e99d1bf
.word 0x6
.word 0x3e99d1bf
.word 0x6
.word 0x3e99d1bf
.word 0x6
.word 0x3e99d1bf
.word 0x6
.word 0x3e99d1bf
.word 0x6
.word 0x3f473764
.word 0x2
.word 0x3f473764
.word 0x2
.word 0x3f473764
.word 0x2
.word 0x3f473764
.word 0x2
.word 0x3f473764
.word 0x2
.word 0x3e8d6da1
.word 0x7
.word 0x3e8d6da1
.word 0x7
.word 0x3e8d6da1
.word 0x7
.word 0x3e8d6da1
.word 0x7
.word 0x3e8d6da1
.word 0x7
.word 0x3edd55c2
.word 0x4
.word 0x3edd55c2
.word 0x4
.word 0x3edd55c2
.word 0x4
.word 0x3edd55c2
.word 0x4
.word 0x3edd55c2
.word 0x4
.word 0x3dcd69c7
.word 0x13
.word 0x3dcd69c7
.word 0x13
.word 0x3dcd69c7
.word 0x13
.word 0x3dcd69c7
.word 0x13
.word 0x3dcd69c7
.word 0x13
.word 0x3f256539
.word 0x3
.word 0x3f256539
.word 0x3
.word 0x3f256539
.word 0x3
.word 0x3f256539
.word 0x3
.word 0x3f256539
.word 0x3
.word 0x3eff91c2
.word 0x4
.word 0x3eff91c2
.word 0x4
.word 0x3eff91c2
.word 0x4
.word 0x3eff91c2
.word 0x4
.word 0x3eff91c2
.word 0x4
.word 0x3f028e72
.word 0x3
.word 0x3f028e72
.word 0x3
.word 0x3f028e72
.word 0x3
.word 0x3f028e72
.word 0x3
.word 0x3f028e72
.word 0x3
.word 0x3f09e140
.word 0x3
.word 0x3f09e140
.word 0x3
.word 0x3f09e140
.word 0x3
.word 0x3f09e140
.word 0x3
.word 0x3f09e140
.word 0x3
.word 0x3e7be65b
.word 0x8
.word 0x3e7be65b
.word 0x8
.word 0x3e7be65b
.word 0x8
.word 0x3e7be65b
.word 0x8
.word 0x3e7be65b
.word 0x8
.word 0x3d1c0dc3
.word 0x34
.word 0x3d1c0dc3
.word 0x34
.word 0x3d1c0dc3
.word 0x34
.word 0x3d1c0dc3
.word 0x34
.word 0x3d1c0dc3
.word 0x34
.word 0x3f256e37
.word 0x3
.word 0x3f256e37
.word 0x3
.word 0x3f256e37
.word 0x3
.word 0x3f256e37
.word 0x3
.word 0x3f256e37
.word 0x3
.word 0x3e72ce25
.word 0x8
.word 0x3e72ce25
.word 0x8
.word 0x3e72ce25
.word 0x8
.word 0x3e72ce25
.word 0x8
.word 0x3e72ce25
.word 0x8
.word 0x3e87fc80
.word 0x7
.word 0x3e87fc80
.word 0x7
.word 0x3e87fc80
.word 0x7
.word 0x3e87fc80
.word 0x7
.word 0x3e87fc80
.word 0x7
.word 0x3dd9f72a
.word 0x12
.word 0x3dd9f72a
.word 0x12
.word 0x3dd9f72a
.word 0x12
.word 0x3dd9f72a
.word 0x12
.word 0x3dd9f72a
.word 0x12
.word 0x3ea6aa98
.word 0x6
.word 0x3ea6aa98
.word 0x6
.word 0x3ea6aa98
.word 0x6
.word 0x3ea6aa98
.word 0x6
.word 0x3ea6aa98
.word 0x6
.word 0x3efac3f0
.word 0x4
.word 0x3efac3f0
.word 0x4
.word 0x3efac3f0
.word 0x4
.word 0x3efac3f0
.word 0x4
.word 0x3efac3f0
.word 0x4
.word 0x3f2cc36e
.word 0x2
.word 0x3f2cc36e
.word 0x2
.word 0x3f2cc36e
.word 0x2
.word 0x3f2cc36e
.word 0x2
.word 0x3f2cc36e
.word 0x2
.word 0x3f438d6a
.word 0x2
.word 0x3f438d6a
.word 0x2
.word 0x3f438d6a
.word 0x2
.word 0x3f438d6a
.word 0x2
.word 0x3f438d6a
.word 0x2
.word 0x3ef2d088
.word 0x4
.word 0x3ef2d088
.word 0x4
.word 0x3ef2d088
.word 0x4
.word 0x3ef2d088
.word 0x4
.word 0x3ef2d088
.word 0x4
.word 0x3f1eb757
.word 0x3
.word 0x3f1eb757
.word 0x3
.word 0x3f1eb757
.word 0x3
.word 0x3f1eb757
.word 0x3
.word 0x3f1eb757
.word 0x3
.word 0x3f08fcb7
.word 0x3
.word 0x3f08fcb7
.word 0x3
.word 0x3f08fcb7
.word 0x3
.word 0x3f08fcb7
.word 0x3
.word 0x3f08fcb7
.word 0x3
.word 0x3f76cda9
.word 0x2
.word 0x3f76cda9
.word 0x2
.word 0x3f76cda9
.word 0x2
.word 0x3f76cda9
.word 0x2
.word 0x3f76cda9
.word 0x2
.word 0x3f0e1e09
.word 0x3
.word 0x3f0e1e09
.word 0x3
.word 0x3f0e1e09
.word 0x3
.word 0x3f0e1e09
.word 0x3
.word 0x3f0e1e09
.word 0x3
.word 0x3d4f46b1
.word 0x27
.word 0x3d4f46b1
.word 0x27
.word 0x3d4f46b1
.word 0x27
.word 0x3d4f46b1
.word 0x27
.word 0x3d4f46b1
.word 0x27
.word 0x3e8dd15c
.word 0x7
.word 0x3e8dd15c
.word 0x7
.word 0x3e8dd15c
.word 0x7
.word 0x3e8dd15c
.word 0x7
.word 0x3e8dd15c
.word 0x7
.word 0x3f11bfa2
.word 0x3
.word 0x3f11bfa2
.word 0x3
.word 0x3f11bfa2
.word 0x3
.word 0x3f11bfa2
.word 0x3
.word 0x3f11bfa2
.word 0x3
.word 0x3ed66c6d
.word 0x4
.word 0x3ed66c6d
.word 0x4
.word 0x3ed66c6d
.word 0x4
.word 0x3ed66c6d
.word 0x4
.word 0x3ed66c6d
.word 0x4
.word 0x3ec9c1af
.word 0x5
.word 0x3ec9c1af
.word 0x5
.word 0x3ec9c1af
.word 0x5
.word 0x3ec9c1af
.word 0x5
.word 0x3ec9c1af
.word 0x5
.word 0x3ea91918
.word 0x6
.word 0x3ea91918
.word 0x6
.word 0x3ea91918
.word 0x6
.word 0x3ea91918
.word 0x6
.word 0x3ea91918
.word 0x6
.word 0x3e2872fb
.word 0xc
.word 0x3e2872fb
.word 0xc
.word 0x3e2872fb
.word 0xc
.word 0x3e2872fb
.word 0xc
.word 0x3e2872fb
.word 0xc
.word 0x3f7185d9
.word 0x2
.word 0x3f7185d9
.word 0x2
.word 0x3f7185d9
.word 0x2
.word 0x3f7185d9
.word 0x2
.word 0x3f7185d9
.word 0x2
.word 0x3d341568
.word 0x2d
.word 0x3d341568
.word 0x2d
.word 0x3d341568
.word 0x2d
.word 0x3d341568
.word 0x2d
.word 0x3d341568
.word 0x2d
.word 0x3f5976c2
.word 0x2a16aeb7
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_2:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_3:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_4:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_5:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_6:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_7:
    .fill 316*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
