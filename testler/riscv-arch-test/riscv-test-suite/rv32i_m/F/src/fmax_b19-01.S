
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.5.2
// timestamp : Tue Sep  7 16:48:58 2021 GMT
// usage     : riscv_ctg \
//                  -- cgf $cgf \
//                  -- xlen $xlen \
// -----------
//
// -----------
// Copyright (c) 2021. IIT Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmax.s instruction of the RISC-V F extension for the fmax_b19 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmax_b19)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs2 == rd != rs1, rs1==f10, rs2==f16, rd==f16, fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4e622b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f16; dest:f16; op1val:0x7dce622b; op2val:0x7dce622b; valaddr_reg:x16; val_offset:0; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f16, f10, f16, 0x1, 0, x16, 0, x17, x15, 0, x18)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==f22, rs2==f27, rd==f29, fs1 == 0 and fe1 == 0x00 and fm1 == 0x0007f0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0007f0 and rm_val == 1  
// opcode: fmax.s ; op1:f22; op2:f27; dest:f29; op1val:0x7f0; op2val:0x7f0; valaddr_reg:x16; val_offset:8; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f29, f22, f27, 0x1, 0, x16, 8, x17, x15, 8, x18)

inst_2:
// rs1 == rs2 == rd, rs1==f1, rs2==f1, rd==f1, fs1 == 0 and fe1 == 0x00 and fm1 == 0x0007f0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3e0acf and rm_val == 1  
// opcode: fmax.s ; op1:f1; op2:f1; dest:f1; op1val:0x7f0; op2val:0x7f0; valaddr_reg:x16; val_offset:16; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f1, f1, f1, 0x1, 0, x16, 16, x17, x15, 16, x18)

inst_3:
// rs1 == rd != rs2, rs1==f19, rs2==f28, rd==f19, fs1 == 1 and fe1 == 0x81 and fm1 == 0x365363 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0007f0 and rm_val == 1  
// opcode: fmax.s ; op1:f19; op2:f28; dest:f19; op1val:0xc0b65363; op2val:0x7f0; valaddr_reg:x16; val_offset:24; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f19, f19, f28, 0x1, 0, x16, 24, x17, x15, 24, x18)

inst_4:
// rs1 == rs2 != rd, rs1==f18, rs2==f18, rd==f10, fs1 == 0 and fe1 == 0x00 and fm1 == 0x0007f0 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x365363 and rm_val == 1  
// opcode: fmax.s ; op1:f18; op2:f18; dest:f10; op1val:0x7f0; op2val:0x7f0; valaddr_reg:x16; val_offset:32; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f10, f18, f18, 0x1, 0, x16, 32, x17, x15, 32, x18)

inst_5:
// rs1==f21, rs2==f13, rd==f7, fs1 == 0 and fe1 == 0x00 and fm1 == 0x0007f0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x11d249 and rm_val == 1  
// opcode: fmax.s ; op1:f21; op2:f13; dest:f7; op1val:0x7f0; op2val:0x8011d249; valaddr_reg:x16; val_offset:40; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f7, f21, f13, 0x1, 0, x16, 40, x17, x15, 40, x18)

inst_6:
// rs1==f5, rs2==f0, rd==f11, fs1 == 1 and fe1 == 0x7f and fm1 == 0x517d72 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0007f0 and rm_val == 1  
// opcode: fmax.s ; op1:f5; op2:f0; dest:f11; op1val:0xbfd17d72; op2val:0x7f0; valaddr_reg:x16; val_offset:48; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f11, f5, f0, 0x1, 0, x16, 48, x17, x15, 48, x18)

inst_7:
// rs1==f12, rs2==f15, rd==f23, fs1 == 0 and fe1 == 0x00 and fm1 == 0x0007f0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x517d72 and rm_val == 1  
// opcode: fmax.s ; op1:f12; op2:f15; dest:f23; op1val:0x7f0; op2val:0xbfd17d72; valaddr_reg:x16; val_offset:56; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f23, f12, f15, 0x1, 0, x16, 56, x17, x15, 56, x18)

inst_8:
// rs1==f8, rs2==f26, rd==f24, fs1 == 0 and fe1 == 0x00 and fm1 == 0x0007f0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x244d8b and rm_val == 1  
// opcode: fmax.s ; op1:f8; op2:f26; dest:f24; op1val:0x7f0; op2val:0x80244d8b; valaddr_reg:x16; val_offset:64; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f24, f8, f26, 0x1, 0, x16, 64, x17, x15, 64, x18)

inst_9:
// rs1==f20, rs2==f9, rd==f30, fs1 == 1 and fe1 == 0x80 and fm1 == 0x555e8a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0007f0 and rm_val == 1  
// opcode: fmax.s ; op1:f20; op2:f9; dest:f30; op1val:0xc0555e8a; op2val:0x7f0; valaddr_reg:x16; val_offset:72; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f30, f20, f9, 0x1, 0, x16, 72, x17, x15, 72, x18)

inst_10:
// rs1==f13, rs2==f17, rd==f21, fs1 == 0 and fe1 == 0x00 and fm1 == 0x0007f0 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x555e8a and rm_val == 1  
// opcode: fmax.s ; op1:f13; op2:f17; dest:f21; op1val:0x7f0; op2val:0xc0555e8a; valaddr_reg:x16; val_offset:80; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f21, f13, f17, 0x1, 0, x16, 80, x17, x15, 80, x18)

inst_11:
// rs1==f23, rs2==f22, rd==f5, fs1 == 0 and fe1 == 0x00 and fm1 == 0x0007f0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0d858e and rm_val == 1  
// opcode: fmax.s ; op1:f23; op2:f22; dest:f5; op1val:0x7f0; op2val:0x800d858e; valaddr_reg:x16; val_offset:88; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f5, f23, f22, 0x1, 0, x16, 88, x17, x15, 88, x18)

inst_12:
// rs1==f30, rs2==f10, rd==f25, fs1 == 1 and fe1 == 0x7f and fm1 == 0x1ef26a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0007f0 and rm_val == 1  
// opcode: fmax.s ; op1:f30; op2:f10; dest:f25; op1val:0xbf9ef26a; op2val:0x7f0; valaddr_reg:x16; val_offset:96; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f25, f30, f10, 0x1, 0, x16, 96, x17, x15, 96, x18)

inst_13:
// rs1==f17, rs2==f23, rd==f12, fs1 == 0 and fe1 == 0x00 and fm1 == 0x0007f0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x1ef26a and rm_val == 1  
// opcode: fmax.s ; op1:f17; op2:f23; dest:f12; op1val:0x7f0; op2val:0xbf9ef26a; valaddr_reg:x16; val_offset:104; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f17, f23, 0x1, 0, x16, 104, x17, x15, 104, x18)

inst_14:
// rs1==f16, rs2==f11, rd==f31, fs1 == 0 and fe1 == 0x00 and fm1 == 0x0007f0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2facf2 and rm_val == 1  
// opcode: fmax.s ; op1:f16; op2:f11; dest:f31; op1val:0x7f0; op2val:0x802facf2; valaddr_reg:x16; val_offset:112; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f31, f16, f11, 0x1, 0, x16, 112, x17, x15, 112, x18)

inst_15:
// rs1==f4, rs2==f30, rd==f13, fs1 == 1 and fe1 == 0x81 and fm1 == 0x0c1b1e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0007f0 and rm_val == 1  
// opcode: fmax.s ; op1:f4; op2:f30; dest:f13; op1val:0xc08c1b1e; op2val:0x7f0; valaddr_reg:x16; val_offset:120; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f13, f4, f30, 0x1, 0, x16, 120, x17, x15, 120, x18)

inst_16:
// rs1==f27, rs2==f4, rd==f15, fs1 == 0 and fe1 == 0x00 and fm1 == 0x0007f0 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c1b1e and rm_val == 1  
// opcode: fmax.s ; op1:f27; op2:f4; dest:f15; op1val:0x7f0; op2val:0xc08c1b1e; valaddr_reg:x16; val_offset:128; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f15, f27, f4, 0x1, 0, x16, 128, x17, x15, 128, x18)

inst_17:
// rs1==f3, rs2==f8, rd==f18, fs1 == 0 and fe1 == 0x00 and fm1 == 0x0007f0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39b0fc and rm_val == 1  
// opcode: fmax.s ; op1:f3; op2:f8; dest:f18; op1val:0x7f0; op2val:0x39b0fc; valaddr_reg:x16; val_offset:136; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f18, f3, f8, 0x1, 0, x16, 136, x17, x15, 136, x18)

inst_18:
// rs1==f11, rs2==f7, rd==f17, fs1 == 0 and fe1 == 0x81 and fm1 == 0x298a26 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0007f0 and rm_val == 1  
// opcode: fmax.s ; op1:f11; op2:f7; dest:f17; op1val:0x40a98a26; op2val:0x7f0; valaddr_reg:x16; val_offset:144; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f17, f11, f7, 0x1, 0, x16, 144, x17, x15, 144, x18)

inst_19:
// rs1==f31, rs2==f21, rd==f14, fs1 == 0 and fe1 == 0x00 and fm1 == 0x0007f0 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x298a26 and rm_val == 1  
// opcode: fmax.s ; op1:f31; op2:f21; dest:f14; op1val:0x7f0; op2val:0x40a98a26; valaddr_reg:x16; val_offset:152; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f14, f31, f21, 0x1, 0, x16, 152, x17, x15, 152, x18)

inst_20:
// rs1==f15, rs2==f14, rd==f9, fs1 == 0 and fe1 == 0x00 and fm1 == 0x0007f0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x1c8139 and rm_val == 1  
// opcode: fmax.s ; op1:f15; op2:f14; dest:f9; op1val:0x7f0; op2val:0x1c8139; valaddr_reg:x16; val_offset:160; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f9, f15, f14, 0x1, 0, x16, 160, x17, x15, 160, x18)

inst_21:
// rs1==f29, rs2==f24, rd==f8, fs1 == 0 and fe1 == 0x80 and fm1 == 0x27893a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0007f0 and rm_val == 1  
// opcode: fmax.s ; op1:f29; op2:f24; dest:f8; op1val:0x4027893a; op2val:0x7f0; valaddr_reg:x16; val_offset:168; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f8, f29, f24, 0x1, 0, x16, 168, x17, x15, 168, x18)

inst_22:
// rs1==f28, rs2==f12, rd==f6, fs1 == 0 and fe1 == 0x00 and fm1 == 0x0007f0 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27893a and rm_val == 1  
// opcode: fmax.s ; op1:f28; op2:f12; dest:f6; op1val:0x7f0; op2val:0x4027893a; valaddr_reg:x16; val_offset:176; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f6, f28, f12, 0x1, 0, x16, 176, x17, x15, 176, x18)

inst_23:
// rs1==f9, rs2==f2, rd==f27, fs1 == 0 and fe1 == 0x00 and fm1 == 0x0007f0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x357d2c and rm_val == 1  
// opcode: fmax.s ; op1:f9; op2:f2; dest:f27; op1val:0x7f0; op2val:0x357d2c; valaddr_reg:x16; val_offset:184; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f27, f9, f2, 0x1, 0, x16, 184, x17, x15, 184, x18)

inst_24:
// rs1==f0, rs2==f19, rd==f22, fs1 == 0 and fe1 == 0x81 and fm1 == 0x1d309f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0007f0 and rm_val == 1  
// opcode: fmax.s ; op1:f0; op2:f19; dest:f22; op1val:0x409d309f; op2val:0x7f0; valaddr_reg:x16; val_offset:192; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f22, f0, f19, 0x1, 0, x16, 192, x17, x15, 192, x18)

inst_25:
// rs1==f7, rs2==f5, rd==f4, fs1 == 0 and fe1 == 0x00 and fm1 == 0x0007f0 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x1d309f and rm_val == 1  
// opcode: fmax.s ; op1:f7; op2:f5; dest:f4; op1val:0x7f0; op2val:0x409d309f; valaddr_reg:x16; val_offset:200; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f4, f7, f5, 0x1, 0, x16, 200, x17, x15, 200, x18)

inst_26:
// rs1==f25, rs2==f6, rd==f0, fs1 == 0 and fe1 == 0x00 and fm1 == 0x0007f0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x29b3b2 and rm_val == 1  
// opcode: fmax.s ; op1:f25; op2:f6; dest:f0; op1val:0x7f0; op2val:0x29b3b2; valaddr_reg:x16; val_offset:208; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f0, f25, f6, 0x1, 0, x16, 208, x17, x15, 208, x18)

inst_27:
// rs1==f2, rs2==f3, rd==f26, fs1 == 0 and fe1 == 0x80 and fm1 == 0x751a1e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0007f0 and rm_val == 1  
// opcode: fmax.s ; op1:f2; op2:f3; dest:f26; op1val:0x40751a1e; op2val:0x7f0; valaddr_reg:x16; val_offset:216; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f26, f2, f3, 0x1, 0, x16, 216, x17, x15, 216, x18)

inst_28:
// rs1==f24, rs2==f31, rd==f28, fs1 == 0 and fe1 == 0x00 and fm1 == 0x0007f0 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x751a1e and rm_val == 1  
// opcode: fmax.s ; op1:f24; op2:f31; dest:f28; op1val:0x7f0; op2val:0x40751a1e; valaddr_reg:x16; val_offset:224; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f28, f24, f31, 0x1, 0, x16, 224, x17, x15, 224, x18)

inst_29:
// rs1==f26, rs2==f25, rd==f3, fs1 == 0 and fe1 == 0x00 and fm1 == 0x0007f0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30e1ae and rm_val == 1  
// opcode: fmax.s ; op1:f26; op2:f25; dest:f3; op1val:0x7f0; op2val:0x30e1ae; valaddr_reg:x16; val_offset:232; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f3, f26, f25, 0x1, 0, x16, 232, x17, x15, 232, x18)

inst_30:
// rs1==f6, rs2==f29, rd==f2, fs1 == 0 and fe1 == 0x81 and fm1 == 0x0fa668 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0007f0 and rm_val == 1  
// opcode: fmax.s ; op1:f6; op2:f29; dest:f2; op1val:0x408fa668; op2val:0x7f0; valaddr_reg:x16; val_offset:240; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f2, f6, f29, 0x1, 0, x16, 240, x17, x15, 240, x18)

inst_31:
// rs1==f14, fs1 == 0 and fe1 == 0x00 and fm1 == 0x0007f0 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0fa668 and rm_val == 1  
// opcode: fmax.s ; op1:f14; op2:f5; dest:f6; op1val:0x7f0; op2val:0x408fa668; valaddr_reg:x16; val_offset:248; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f6, f14, f5, 0x1, 0, x16, 248, x17, x15, 248, x18)

inst_32:
// rs2==f20, fs1 == 0 and fe1 == 0x00 and fm1 == 0x0007f0 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x2820df and rm_val == 1  
// opcode: fmax.s ; op1:f12; op2:f20; dest:f16; op1val:0x7f0; op2val:0xfd2820df; valaddr_reg:x16; val_offset:256; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f16, f12, f20, 0x1, 0, x16, 256, x17, x15, 256, x18)

inst_33:
// rd==f20, fs1 == 1 and fe1 == 0x7f and fm1 == 0x32c8e8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0007f0 and rm_val == 1  
// opcode: fmax.s ; op1:f8; op2:f26; dest:f20; op1val:0xbfb2c8e8; op2val:0x7f0; valaddr_reg:x16; val_offset:264; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f20, f8, f26, 0x1, 0, x16, 264, x17, x15, 264, x18)

inst_34:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0007f0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x32c8e8 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0; op2val:0xbfb2c8e8; valaddr_reg:x16; val_offset:272; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 272, x17, x15, 272, x18)

inst_35:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0007f0 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3f987b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0; op2val:0xff3f987b; valaddr_reg:x16; val_offset:280; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 280, x17, x15, 280, x18)

inst_36:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x22fdd5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0007f0 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xc022fdd5; op2val:0x7f0; valaddr_reg:x16; val_offset:288; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 288, x17, x15, 288, x18)

inst_37:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0007f0 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x22fdd5 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0; op2val:0xc022fdd5; valaddr_reg:x16; val_offset:296; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 296, x17, x15, 296, x18)

inst_38:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0007f0 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3a8ea9 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0; op2val:0xff3a8ea9; valaddr_reg:x16; val_offset:304; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 304, x17, x15, 304, x18)

inst_39:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x1eb493 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0007f0 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xc01eb493; op2val:0x7f0; valaddr_reg:x16; val_offset:312; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 312, x17, x15, 312, x18)

inst_40:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0007f0 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1eb493 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0; op2val:0xc01eb493; valaddr_reg:x16; val_offset:320; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 320, x17, x15, 320, x18)

inst_41:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0007f0 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x53653a and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0; op2val:0xfed3653a; valaddr_reg:x16; val_offset:328; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 328, x17, x15, 328, x18)

inst_42:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x33d5d8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0007f0 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xbfb3d5d8; op2val:0x7f0; valaddr_reg:x16; val_offset:336; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 336, x17, x15, 336, x18)

inst_43:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0007f0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x33d5d8 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0; op2val:0xbfb3d5d8; valaddr_reg:x16; val_offset:344; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 344, x17, x15, 344, x18)

inst_44:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0007f0 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x6a577e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0; op2val:0xfdea577e; valaddr_reg:x16; val_offset:352; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 352, x17, x15, 352, x18)

inst_45:
// fs1 == 1 and fe1 == 0x80 and fm1 == 0x7931e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0007f0 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xc07931e5; op2val:0x7f0; valaddr_reg:x16; val_offset:360; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 360, x17, x15, 360, x18)

inst_46:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0007f0 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7931e5 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0; op2val:0xc07931e5; valaddr_reg:x16; val_offset:368; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 368, x17, x15, 368, x18)

inst_47:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0007f0 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2fb07b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0; op2val:0x7e2fb07b; valaddr_reg:x16; val_offset:376; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 376, x17, x15, 376, x18)

inst_48:
// fs1 == 0 and fe1 == 0x81 and fm1 == 0x3ad332 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0007f0 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x40bad332; op2val:0x7f0; valaddr_reg:x16; val_offset:384; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 384, x17, x15, 384, x18)

inst_49:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0007f0 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3ad332 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0; op2val:0x40bad332; valaddr_reg:x16; val_offset:392; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 392, x17, x15, 392, x18)

inst_50:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0007f0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x125b96 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0; op2val:0x7f125b96; valaddr_reg:x16; val_offset:400; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 400, x17, x15, 400, x18)

inst_51:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7903cc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0007f0 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x3ff903cc; op2val:0x7f0; valaddr_reg:x16; val_offset:408; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 408, x17, x15, 408, x18)

inst_52:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0007f0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7903cc and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0; op2val:0x3ff903cc; valaddr_reg:x16; val_offset:416; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 416, x17, x15, 416, x18)

inst_53:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0007f0 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x102b16 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0; op2val:0x7d902b16; valaddr_reg:x16; val_offset:424; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 424, x17, x15, 424, x18)

inst_54:
// fs1 == 0 and fe1 == 0x80 and fm1 == 0x194e59 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0007f0 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x40194e59; op2val:0x7f0; valaddr_reg:x16; val_offset:432; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 432, x17, x15, 432, x18)

inst_55:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0007f0 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x194e59 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0; op2val:0x40194e59; valaddr_reg:x16; val_offset:440; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 440, x17, x15, 440, x18)

inst_56:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0007f0 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3e3f3f and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0; op2val:0x7ebe3f3f; valaddr_reg:x16; val_offset:448; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 448, x17, x15, 448, x18)

inst_57:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x21d824 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0007f0 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x3fa1d824; op2val:0x7f0; valaddr_reg:x16; val_offset:456; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 456, x17, x15, 456, x18)

inst_58:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0007f0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x21d824 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0; op2val:0x3fa1d824; valaddr_reg:x16; val_offset:464; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 464, x17, x15, 464, x18)

inst_59:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0007f0 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4e622b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0; op2val:0x7dce622b; valaddr_reg:x16; val_offset:472; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 472, x17, x15, 472, x18)

inst_60:
// fs1 == 0 and fe1 == 0x80 and fm1 == 0x5b76ec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0007f0 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x405b76ec; op2val:0x7f0; valaddr_reg:x16; val_offset:480; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 480, x17, x15, 480, x18)

inst_61:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0007f0 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x5b76ec and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0; op2val:0x405b76ec; valaddr_reg:x16; val_offset:488; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 488, x17, x15, 488, x18)

inst_62:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x3e0acf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3e0acf and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x803e0acf; op2val:0x803e0acf; valaddr_reg:x16; val_offset:496; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 496, x17, x15, 496, x18)

inst_63:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x3e0acf and fs2 == 1 and fe2 == 0x81 and fm2 == 0x365363 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x803e0acf; op2val:0xc0b65363; valaddr_reg:x16; val_offset:504; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 504, x17, x15, 504, x18)

inst_64:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x3e0acf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0007f0 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x803e0acf; op2val:0x7f0; valaddr_reg:x16; val_offset:512; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 512, x17, x15, 512, x18)

inst_65:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x3e0acf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x11d249 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x803e0acf; op2val:0x8011d249; valaddr_reg:x16; val_offset:520; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 520, x17, x15, 520, x18)

inst_66:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x11d249 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3e0acf and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x8011d249; op2val:0x803e0acf; valaddr_reg:x16; val_offset:528; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 528, x17, x15, 528, x18)

inst_67:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x3e0acf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x244d8b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x803e0acf; op2val:0x80244d8b; valaddr_reg:x16; val_offset:536; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 536, x17, x15, 536, x18)

inst_68:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x244d8b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3e0acf and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x80244d8b; op2val:0x803e0acf; valaddr_reg:x16; val_offset:544; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 544, x17, x15, 544, x18)

inst_69:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x3e0acf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0d858e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x803e0acf; op2val:0x800d858e; valaddr_reg:x16; val_offset:552; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 552, x17, x15, 552, x18)

inst_70:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0d858e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3e0acf and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800d858e; op2val:0x803e0acf; valaddr_reg:x16; val_offset:560; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 560, x17, x15, 560, x18)

inst_71:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x3e0acf and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2facf2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x803e0acf; op2val:0x802facf2; valaddr_reg:x16; val_offset:568; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 568, x17, x15, 568, x18)

inst_72:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x2facf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3e0acf and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x802facf2; op2val:0x803e0acf; valaddr_reg:x16; val_offset:576; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 576, x17, x15, 576, x18)

inst_73:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x3e0acf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39b0fc and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x803e0acf; op2val:0x39b0fc; valaddr_reg:x16; val_offset:584; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 584, x17, x15, 584, x18)

inst_74:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x39b0fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3e0acf and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x39b0fc; op2val:0x803e0acf; valaddr_reg:x16; val_offset:592; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 592, x17, x15, 592, x18)

inst_75:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x3e0acf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x1c8139 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x803e0acf; op2val:0x1c8139; valaddr_reg:x16; val_offset:600; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 600, x17, x15, 600, x18)

inst_76:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x1c8139 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3e0acf and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x1c8139; op2val:0x803e0acf; valaddr_reg:x16; val_offset:608; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 608, x17, x15, 608, x18)

inst_77:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x3e0acf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x357d2c and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x803e0acf; op2val:0x357d2c; valaddr_reg:x16; val_offset:616; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 616, x17, x15, 616, x18)

inst_78:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x357d2c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3e0acf and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x357d2c; op2val:0x803e0acf; valaddr_reg:x16; val_offset:624; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 624, x17, x15, 624, x18)

inst_79:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x3e0acf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x29b3b2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x803e0acf; op2val:0x29b3b2; valaddr_reg:x16; val_offset:632; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 632, x17, x15, 632, x18)

inst_80:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x29b3b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3e0acf and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x29b3b2; op2val:0x803e0acf; valaddr_reg:x16; val_offset:640; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 640, x17, x15, 640, x18)

inst_81:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x3e0acf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30e1ae and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x803e0acf; op2val:0x30e1ae; valaddr_reg:x16; val_offset:648; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 648, x17, x15, 648, x18)

inst_82:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x30e1ae and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3e0acf and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x30e1ae; op2val:0x803e0acf; valaddr_reg:x16; val_offset:656; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 656, x17, x15, 656, x18)

inst_83:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x3e0acf and fs2 == 1 and fe2 == 0xfc and fm2 == 0x2b7553 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x803e0acf; op2val:0xfe2b7553; valaddr_reg:x16; val_offset:664; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 664, x17, x15, 664, x18)

inst_84:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x2b7553 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x2820df and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe2b7553; op2val:0xfd2820df; valaddr_reg:x16; val_offset:672; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 672, x17, x15, 672, x18)

inst_85:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0f3596 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x2b7553 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800f3596; op2val:0xfe2b7553; valaddr_reg:x16; val_offset:680; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 680, x17, x15, 680, x18)

inst_86:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x2b7553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0f3596 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe2b7553; op2val:0x800f3596; valaddr_reg:x16; val_offset:688; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 688, x17, x15, 688, x18)

inst_87:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x3e0acf and fs2 == 1 and fe2 == 0xfa and fm2 == 0x2820df and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x803e0acf; op2val:0xfd2820df; valaddr_reg:x16; val_offset:696; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 696, x17, x15, 696, x18)

inst_88:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x3e0acf and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x803e0acf; op2val:0xff7fffff; valaddr_reg:x16; val_offset:704; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 704, x17, x15, 704, x18)

inst_89:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3f987b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xff3f987b; valaddr_reg:x16; val_offset:712; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 712, x17, x15, 712, x18)

inst_90:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x1bbb48 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x801bbb48; op2val:0xff7fffff; valaddr_reg:x16; val_offset:720; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 720, x17, x15, 720, x18)

inst_91:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x1bbb48 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0x801bbb48; valaddr_reg:x16; val_offset:728; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 728, x17, x15, 728, x18)

inst_92:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x3e0acf and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3f987b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x803e0acf; op2val:0xff3f987b; valaddr_reg:x16; val_offset:736; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 736, x17, x15, 736, x18)

inst_93:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3a8ea9 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xff3a8ea9; valaddr_reg:x16; val_offset:744; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 744, x17, x15, 744, x18)

inst_94:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x1b0098 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x801b0098; op2val:0xff7fffff; valaddr_reg:x16; val_offset:752; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 752, x17, x15, 752, x18)

inst_95:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x1b0098 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0x801b0098; valaddr_reg:x16; val_offset:760; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 760, x17, x15, 760, x18)

inst_96:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x3e0acf and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3a8ea9 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x803e0acf; op2val:0xff3a8ea9; valaddr_reg:x16; val_offset:768; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 768, x17, x15, 768, x18)

inst_97:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfd and fm2 == 0x53653a and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfed3653a; valaddr_reg:x16; val_offset:776; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 776, x17, x15, 776, x18)

inst_98:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0f4c77 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800f4c77; op2val:0xff7fffff; valaddr_reg:x16; val_offset:784; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 784, x17, x15, 784, x18)

inst_99:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0f4c77 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0x800f4c77; valaddr_reg:x16; val_offset:792; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 792, x17, x15, 792, x18)

inst_100:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x3e0acf and fs2 == 1 and fe2 == 0xfd and fm2 == 0x53653a and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x803e0acf; op2val:0xfed3653a; valaddr_reg:x16; val_offset:800; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 800, x17, x15, 800, x18)

inst_101:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x2b7553 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x6a577e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe2b7553; op2val:0xfdea577e; valaddr_reg:x16; val_offset:808; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 808, x17, x15, 808, x18)

inst_102:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x2a65f8 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x2b7553 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x802a65f8; op2val:0xfe2b7553; valaddr_reg:x16; val_offset:816; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 816, x17, x15, 816, x18)

inst_103:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x2b7553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2a65f8 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe2b7553; op2val:0x802a65f8; valaddr_reg:x16; val_offset:824; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 824, x17, x15, 824, x18)

inst_104:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x3e0acf and fs2 == 1 and fe2 == 0xfb and fm2 == 0x6a577e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x803e0acf; op2val:0xfdea577e; valaddr_reg:x16; val_offset:832; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 832, x17, x15, 832, x18)

inst_105:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x2b7553 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2fb07b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe2b7553; op2val:0x7e2fb07b; valaddr_reg:x16; val_offset:840; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 840, x17, x15, 840, x18)

inst_106:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x3f92c0 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x2b7553 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f92c0; op2val:0xfe2b7553; valaddr_reg:x16; val_offset:848; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 848, x17, x15, 848, x18)

inst_107:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x2b7553 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f92c0 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe2b7553; op2val:0x3f92c0; valaddr_reg:x16; val_offset:856; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 856, x17, x15, 856, x18)

inst_108:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x3e0acf and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2fb07b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x803e0acf; op2val:0x7e2fb07b; valaddr_reg:x16; val_offset:864; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 864, x17, x15, 864, x18)

inst_109:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x125b96 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0x7f125b96; valaddr_reg:x16; val_offset:872; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 872, x17, x15, 872, x18)

inst_110:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x152f10 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x152f10; op2val:0xff7fffff; valaddr_reg:x16; val_offset:880; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 880, x17, x15, 880, x18)

inst_111:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x152f10 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0x152f10; valaddr_reg:x16; val_offset:888; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 888, x17, x15, 888, x18)

inst_112:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x3e0acf and fs2 == 0 and fe2 == 0xfe and fm2 == 0x125b96 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x803e0acf; op2val:0x7f125b96; valaddr_reg:x16; val_offset:896; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 896, x17, x15, 896, x18)

inst_113:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x2b7553 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x102b16 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe2b7553; op2val:0x7d902b16; valaddr_reg:x16; val_offset:904; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 904, x17, x15, 904, x18)

inst_114:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x1a156b and fs2 == 1 and fe2 == 0xfc and fm2 == 0x2b7553 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x1a156b; op2val:0xfe2b7553; valaddr_reg:x16; val_offset:912; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 912, x17, x15, 912, x18)

inst_115:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x2b7553 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x1a156b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe2b7553; op2val:0x1a156b; valaddr_reg:x16; val_offset:920; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 920, x17, x15, 920, x18)

inst_116:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x3e0acf and fs2 == 0 and fe2 == 0xfb and fm2 == 0x102b16 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x803e0acf; op2val:0x7d902b16; valaddr_reg:x16; val_offset:928; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 928, x17, x15, 928, x18)

inst_117:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3e3f3f and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0x7ebe3f3f; valaddr_reg:x16; val_offset:936; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 936, x17, x15, 936, x18)

inst_118:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0dc4a8 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xdc4a8; op2val:0xff7fffff; valaddr_reg:x16; val_offset:944; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 944, x17, x15, 944, x18)

inst_119:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0dc4a8 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xdc4a8; valaddr_reg:x16; val_offset:952; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 952, x17, x15, 952, x18)

inst_120:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x3e0acf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3e3f3f and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x803e0acf; op2val:0x7ebe3f3f; valaddr_reg:x16; val_offset:960; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 960, x17, x15, 960, x18)

inst_121:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x2b7553 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4e622b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe2b7553; op2val:0x7dce622b; valaddr_reg:x16; val_offset:968; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 968, x17, x15, 968, x18)

inst_122:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x255707 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x2b7553 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x255707; op2val:0xfe2b7553; valaddr_reg:x16; val_offset:976; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 976, x17, x15, 976, x18)

inst_123:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x2b7553 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x255707 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe2b7553; op2val:0x255707; valaddr_reg:x16; val_offset:984; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 984, x17, x15, 984, x18)

inst_124:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x3e0acf and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4e622b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x803e0acf; op2val:0x7dce622b; valaddr_reg:x16; val_offset:992; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 992, x17, x15, 992, x18)

inst_125:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x11d249 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x11d249 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x8011d249; op2val:0x8011d249; valaddr_reg:x16; val_offset:1000; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1000, x17, x15, 1000, x18)

inst_126:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x11d249 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x517d72 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x8011d249; op2val:0xbfd17d72; valaddr_reg:x16; val_offset:1008; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1008, x17, x15, 1008, x18)

inst_127:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x11d249 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0007f0 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x8011d249; op2val:0x7f0; valaddr_reg:x16; val_offset:1016; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1016, x17, x15, 1016, x18)

inst_128:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x11d249 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x244d8b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x8011d249; op2val:0x80244d8b; valaddr_reg:x16; val_offset:1024; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1024, x17, x15, 1024, x18)

inst_129:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x244d8b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x11d249 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x80244d8b; op2val:0x8011d249; valaddr_reg:x16; val_offset:1032; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1032, x17, x15, 1032, x18)

inst_130:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x11d249 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0d858e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x8011d249; op2val:0x800d858e; valaddr_reg:x16; val_offset:1040; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1040, x17, x15, 1040, x18)

inst_131:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0d858e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x11d249 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800d858e; op2val:0x8011d249; valaddr_reg:x16; val_offset:1048; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1048, x17, x15, 1048, x18)

inst_132:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x11d249 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2facf2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x8011d249; op2val:0x802facf2; valaddr_reg:x16; val_offset:1056; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1056, x17, x15, 1056, x18)

inst_133:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x2facf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x11d249 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x802facf2; op2val:0x8011d249; valaddr_reg:x16; val_offset:1064; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1064, x17, x15, 1064, x18)

inst_134:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x11d249 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39b0fc and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x8011d249; op2val:0x39b0fc; valaddr_reg:x16; val_offset:1072; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1072, x17, x15, 1072, x18)

inst_135:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x39b0fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x11d249 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x39b0fc; op2val:0x8011d249; valaddr_reg:x16; val_offset:1080; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1080, x17, x15, 1080, x18)

inst_136:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x11d249 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x1c8139 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x8011d249; op2val:0x1c8139; valaddr_reg:x16; val_offset:1088; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1088, x17, x15, 1088, x18)

inst_137:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x1c8139 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x11d249 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x1c8139; op2val:0x8011d249; valaddr_reg:x16; val_offset:1096; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1096, x17, x15, 1096, x18)

inst_138:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x11d249 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x357d2c and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x8011d249; op2val:0x357d2c; valaddr_reg:x16; val_offset:1104; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1104, x17, x15, 1104, x18)

inst_139:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x357d2c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x11d249 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x357d2c; op2val:0x8011d249; valaddr_reg:x16; val_offset:1112; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1112, x17, x15, 1112, x18)

inst_140:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x11d249 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x29b3b2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x8011d249; op2val:0x29b3b2; valaddr_reg:x16; val_offset:1120; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1120, x17, x15, 1120, x18)

inst_141:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x29b3b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x11d249 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x29b3b2; op2val:0x8011d249; valaddr_reg:x16; val_offset:1128; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1128, x17, x15, 1128, x18)

inst_142:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x11d249 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30e1ae and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x8011d249; op2val:0x30e1ae; valaddr_reg:x16; val_offset:1136; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1136, x17, x15, 1136, x18)

inst_143:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x30e1ae and fs2 == 1 and fe2 == 0x00 and fm2 == 0x11d249 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x30e1ae; op2val:0x8011d249; valaddr_reg:x16; val_offset:1144; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1144, x17, x15, 1144, x18)

inst_144:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x11d249 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x4500e4 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x8011d249; op2val:0xfd4500e4; valaddr_reg:x16; val_offset:1152; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1152, x17, x15, 1152, x18)

inst_145:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x4500e4 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x2820df and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd4500e4; op2val:0xfd2820df; valaddr_reg:x16; val_offset:1160; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1160, x17, x15, 1160, x18)

inst_146:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0f3596 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x4500e4 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800f3596; op2val:0xfd4500e4; valaddr_reg:x16; val_offset:1168; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1168, x17, x15, 1168, x18)

inst_147:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x4500e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0f3596 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd4500e4; op2val:0x800f3596; valaddr_reg:x16; val_offset:1176; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1176, x17, x15, 1176, x18)

inst_148:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x11d249 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x2820df and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x8011d249; op2val:0xfd2820df; valaddr_reg:x16; val_offset:1184; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1184, x17, x15, 1184, x18)

inst_149:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x11d249 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x76411d and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x8011d249; op2val:0xfef6411d; valaddr_reg:x16; val_offset:1192; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1192, x17, x15, 1192, x18)

inst_150:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x76411d and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3f987b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfef6411d; op2val:0xff3f987b; valaddr_reg:x16; val_offset:1200; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1200, x17, x15, 1200, x18)

inst_151:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x1bbb48 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x76411d and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x801bbb48; op2val:0xfef6411d; valaddr_reg:x16; val_offset:1208; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1208, x17, x15, 1208, x18)

inst_152:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x76411d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x1bbb48 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfef6411d; op2val:0x801bbb48; valaddr_reg:x16; val_offset:1216; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1216, x17, x15, 1216, x18)

inst_153:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x11d249 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3f987b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x8011d249; op2val:0xff3f987b; valaddr_reg:x16; val_offset:1224; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1224, x17, x15, 1224, x18)

inst_154:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x76411d and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3a8ea9 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfef6411d; op2val:0xff3a8ea9; valaddr_reg:x16; val_offset:1232; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1232, x17, x15, 1232, x18)

inst_155:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x1b0098 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x76411d and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x801b0098; op2val:0xfef6411d; valaddr_reg:x16; val_offset:1240; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1240, x17, x15, 1240, x18)

inst_156:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x76411d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x1b0098 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfef6411d; op2val:0x801b0098; valaddr_reg:x16; val_offset:1248; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1248, x17, x15, 1248, x18)

inst_157:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x11d249 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3a8ea9 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x8011d249; op2val:0xff3a8ea9; valaddr_reg:x16; val_offset:1256; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1256, x17, x15, 1256, x18)

inst_158:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x76411d and fs2 == 1 and fe2 == 0xfd and fm2 == 0x53653a and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfef6411d; op2val:0xfed3653a; valaddr_reg:x16; val_offset:1264; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1264, x17, x15, 1264, x18)

inst_159:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0f4c77 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x76411d and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800f4c77; op2val:0xfef6411d; valaddr_reg:x16; val_offset:1272; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1272, x17, x15, 1272, x18)

inst_160:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x76411d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0f4c77 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfef6411d; op2val:0x800f4c77; valaddr_reg:x16; val_offset:1280; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1280, x17, x15, 1280, x18)

inst_161:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x11d249 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x53653a and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x8011d249; op2val:0xfed3653a; valaddr_reg:x16; val_offset:1288; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1288, x17, x15, 1288, x18)

inst_162:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x4500e4 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x6a577e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd4500e4; op2val:0xfdea577e; valaddr_reg:x16; val_offset:1296; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1296, x17, x15, 1296, x18)

inst_163:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x2a65f8 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x4500e4 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x802a65f8; op2val:0xfd4500e4; valaddr_reg:x16; val_offset:1304; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1304, x17, x15, 1304, x18)

inst_164:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x4500e4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2a65f8 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd4500e4; op2val:0x802a65f8; valaddr_reg:x16; val_offset:1312; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1312, x17, x15, 1312, x18)

inst_165:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x11d249 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x6a577e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x8011d249; op2val:0xfdea577e; valaddr_reg:x16; val_offset:1320; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1320, x17, x15, 1320, x18)

inst_166:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x4500e4 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2fb07b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd4500e4; op2val:0x7e2fb07b; valaddr_reg:x16; val_offset:1328; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1328, x17, x15, 1328, x18)

inst_167:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x3f92c0 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x4500e4 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f92c0; op2val:0xfd4500e4; valaddr_reg:x16; val_offset:1336; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1336, x17, x15, 1336, x18)

inst_168:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x4500e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f92c0 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd4500e4; op2val:0x3f92c0; valaddr_reg:x16; val_offset:1344; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1344, x17, x15, 1344, x18)

inst_169:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x11d249 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2fb07b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x8011d249; op2val:0x7e2fb07b; valaddr_reg:x16; val_offset:1352; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1352, x17, x15, 1352, x18)

inst_170:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x76411d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x125b96 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfef6411d; op2val:0x7f125b96; valaddr_reg:x16; val_offset:1360; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1360, x17, x15, 1360, x18)

inst_171:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x152f10 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x76411d and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x152f10; op2val:0xfef6411d; valaddr_reg:x16; val_offset:1368; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1368, x17, x15, 1368, x18)

inst_172:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x76411d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x152f10 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfef6411d; op2val:0x152f10; valaddr_reg:x16; val_offset:1376; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1376, x17, x15, 1376, x18)

inst_173:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x11d249 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x125b96 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x8011d249; op2val:0x7f125b96; valaddr_reg:x16; val_offset:1384; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1384, x17, x15, 1384, x18)

inst_174:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x4500e4 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x102b16 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd4500e4; op2val:0x7d902b16; valaddr_reg:x16; val_offset:1392; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1392, x17, x15, 1392, x18)

inst_175:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x1a156b and fs2 == 1 and fe2 == 0xfa and fm2 == 0x4500e4 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x1a156b; op2val:0xfd4500e4; valaddr_reg:x16; val_offset:1400; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1400, x17, x15, 1400, x18)

inst_176:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x4500e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x1a156b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd4500e4; op2val:0x1a156b; valaddr_reg:x16; val_offset:1408; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1408, x17, x15, 1408, x18)

inst_177:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x11d249 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x102b16 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x8011d249; op2val:0x7d902b16; valaddr_reg:x16; val_offset:1416; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1416, x17, x15, 1416, x18)

inst_178:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x76411d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3e3f3f and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfef6411d; op2val:0x7ebe3f3f; valaddr_reg:x16; val_offset:1424; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1424, x17, x15, 1424, x18)

inst_179:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0dc4a8 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x76411d and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xdc4a8; op2val:0xfef6411d; valaddr_reg:x16; val_offset:1432; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1432, x17, x15, 1432, x18)

inst_180:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x76411d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0dc4a8 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfef6411d; op2val:0xdc4a8; valaddr_reg:x16; val_offset:1440; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1440, x17, x15, 1440, x18)

inst_181:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x11d249 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3e3f3f and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x8011d249; op2val:0x7ebe3f3f; valaddr_reg:x16; val_offset:1448; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1448, x17, x15, 1448, x18)

inst_182:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x4500e4 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4e622b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd4500e4; op2val:0x7dce622b; valaddr_reg:x16; val_offset:1456; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1456, x17, x15, 1456, x18)

inst_183:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x255707 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x4500e4 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x255707; op2val:0xfd4500e4; valaddr_reg:x16; val_offset:1464; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1464, x17, x15, 1464, x18)

inst_184:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x4500e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x255707 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd4500e4; op2val:0x255707; valaddr_reg:x16; val_offset:1472; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1472, x17, x15, 1472, x18)

inst_185:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x11d249 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4e622b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x8011d249; op2val:0x7dce622b; valaddr_reg:x16; val_offset:1480; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1480, x17, x15, 1480, x18)

inst_186:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x244d8b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x244d8b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x80244d8b; op2val:0x80244d8b; valaddr_reg:x16; val_offset:1488; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1488, x17, x15, 1488, x18)

inst_187:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x244d8b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x555e8a and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x80244d8b; op2val:0xc0555e8a; valaddr_reg:x16; val_offset:1496; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1496, x17, x15, 1496, x18)

inst_188:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x244d8b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0007f0 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x80244d8b; op2val:0x7f0; valaddr_reg:x16; val_offset:1504; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1504, x17, x15, 1504, x18)

inst_189:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x244d8b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0d858e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x80244d8b; op2val:0x800d858e; valaddr_reg:x16; val_offset:1512; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1512, x17, x15, 1512, x18)

inst_190:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0d858e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x244d8b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800d858e; op2val:0x80244d8b; valaddr_reg:x16; val_offset:1520; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1520, x17, x15, 1520, x18)

inst_191:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x244d8b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2facf2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x80244d8b; op2val:0x802facf2; valaddr_reg:x16; val_offset:1528; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1528, x17, x15, 1528, x18)

inst_192:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x2facf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x244d8b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x802facf2; op2val:0x80244d8b; valaddr_reg:x16; val_offset:1536; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1536, x17, x15, 1536, x18)

inst_193:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x244d8b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39b0fc and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x80244d8b; op2val:0x39b0fc; valaddr_reg:x16; val_offset:1544; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1544, x17, x15, 1544, x18)

inst_194:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x39b0fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x244d8b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x39b0fc; op2val:0x80244d8b; valaddr_reg:x16; val_offset:1552; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1552, x17, x15, 1552, x18)

inst_195:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x244d8b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x1c8139 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x80244d8b; op2val:0x1c8139; valaddr_reg:x16; val_offset:1560; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1560, x17, x15, 1560, x18)

inst_196:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x1c8139 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x244d8b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x1c8139; op2val:0x80244d8b; valaddr_reg:x16; val_offset:1568; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1568, x17, x15, 1568, x18)

inst_197:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x244d8b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x357d2c and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x80244d8b; op2val:0x357d2c; valaddr_reg:x16; val_offset:1576; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1576, x17, x15, 1576, x18)

inst_198:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x357d2c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x244d8b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x357d2c; op2val:0x80244d8b; valaddr_reg:x16; val_offset:1584; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1584, x17, x15, 1584, x18)

inst_199:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x244d8b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x29b3b2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x80244d8b; op2val:0x29b3b2; valaddr_reg:x16; val_offset:1592; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1592, x17, x15, 1592, x18)

inst_200:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x29b3b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x244d8b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x29b3b2; op2val:0x80244d8b; valaddr_reg:x16; val_offset:1600; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1600, x17, x15, 1600, x18)

inst_201:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x244d8b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30e1ae and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x80244d8b; op2val:0x30e1ae; valaddr_reg:x16; val_offset:1608; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1608, x17, x15, 1608, x18)

inst_202:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x30e1ae and fs2 == 1 and fe2 == 0x00 and fm2 == 0x244d8b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x30e1ae; op2val:0x80244d8b; valaddr_reg:x16; val_offset:1616; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1616, x17, x15, 1616, x18)

inst_203:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x244d8b and fs2 == 1 and fe2 == 0xfb and fm2 == 0x48a6ca and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x80244d8b; op2val:0xfdc8a6ca; valaddr_reg:x16; val_offset:1624; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1624, x17, x15, 1624, x18)

inst_204:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x48a6ca and fs2 == 1 and fe2 == 0xfa and fm2 == 0x2820df and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdc8a6ca; op2val:0xfd2820df; valaddr_reg:x16; val_offset:1632; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1632, x17, x15, 1632, x18)

inst_205:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0f3596 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x48a6ca and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800f3596; op2val:0xfdc8a6ca; valaddr_reg:x16; val_offset:1640; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1640, x17, x15, 1640, x18)

inst_206:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x48a6ca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0f3596 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdc8a6ca; op2val:0x800f3596; valaddr_reg:x16; val_offset:1648; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1648, x17, x15, 1648, x18)

inst_207:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x244d8b and fs2 == 1 and fe2 == 0xfa and fm2 == 0x2820df and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x80244d8b; op2val:0xfd2820df; valaddr_reg:x16; val_offset:1656; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1656, x17, x15, 1656, x18)

inst_208:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x244d8b and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7ad07d and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x80244d8b; op2val:0xff7ad07d; valaddr_reg:x16; val_offset:1664; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1664, x17, x15, 1664, x18)

inst_209:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7ad07d and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3f987b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7ad07d; op2val:0xff3f987b; valaddr_reg:x16; val_offset:1672; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1672, x17, x15, 1672, x18)

inst_210:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x1bbb48 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7ad07d and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x801bbb48; op2val:0xff7ad07d; valaddr_reg:x16; val_offset:1680; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1680, x17, x15, 1680, x18)

inst_211:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7ad07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x1bbb48 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7ad07d; op2val:0x801bbb48; valaddr_reg:x16; val_offset:1688; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1688, x17, x15, 1688, x18)

inst_212:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x244d8b and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3f987b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x80244d8b; op2val:0xff3f987b; valaddr_reg:x16; val_offset:1696; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1696, x17, x15, 1696, x18)

inst_213:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7ad07d and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3a8ea9 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7ad07d; op2val:0xff3a8ea9; valaddr_reg:x16; val_offset:1704; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1704, x17, x15, 1704, x18)

inst_214:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x1b0098 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7ad07d and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x801b0098; op2val:0xff7ad07d; valaddr_reg:x16; val_offset:1712; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1712, x17, x15, 1712, x18)

inst_215:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7ad07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x1b0098 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7ad07d; op2val:0x801b0098; valaddr_reg:x16; val_offset:1720; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1720, x17, x15, 1720, x18)

inst_216:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x244d8b and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3a8ea9 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x80244d8b; op2val:0xff3a8ea9; valaddr_reg:x16; val_offset:1728; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1728, x17, x15, 1728, x18)

inst_217:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7ad07d and fs2 == 1 and fe2 == 0xfd and fm2 == 0x53653a and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7ad07d; op2val:0xfed3653a; valaddr_reg:x16; val_offset:1736; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1736, x17, x15, 1736, x18)

inst_218:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0f4c77 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7ad07d and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800f4c77; op2val:0xff7ad07d; valaddr_reg:x16; val_offset:1744; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1744, x17, x15, 1744, x18)

inst_219:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7ad07d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0f4c77 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7ad07d; op2val:0x800f4c77; valaddr_reg:x16; val_offset:1752; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1752, x17, x15, 1752, x18)

inst_220:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x244d8b and fs2 == 1 and fe2 == 0xfd and fm2 == 0x53653a and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x80244d8b; op2val:0xfed3653a; valaddr_reg:x16; val_offset:1760; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1760, x17, x15, 1760, x18)

inst_221:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x48a6ca and fs2 == 1 and fe2 == 0xfb and fm2 == 0x6a577e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdc8a6ca; op2val:0xfdea577e; valaddr_reg:x16; val_offset:1768; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1768, x17, x15, 1768, x18)

inst_222:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x2a65f8 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x48a6ca and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x802a65f8; op2val:0xfdc8a6ca; valaddr_reg:x16; val_offset:1776; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1776, x17, x15, 1776, x18)

inst_223:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x48a6ca and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2a65f8 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdc8a6ca; op2val:0x802a65f8; valaddr_reg:x16; val_offset:1784; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1784, x17, x15, 1784, x18)

inst_224:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x244d8b and fs2 == 1 and fe2 == 0xfb and fm2 == 0x6a577e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x80244d8b; op2val:0xfdea577e; valaddr_reg:x16; val_offset:1792; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1792, x17, x15, 1792, x18)

inst_225:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x48a6ca and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2fb07b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdc8a6ca; op2val:0x7e2fb07b; valaddr_reg:x16; val_offset:1800; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1800, x17, x15, 1800, x18)

inst_226:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x3f92c0 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x48a6ca and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f92c0; op2val:0xfdc8a6ca; valaddr_reg:x16; val_offset:1808; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1808, x17, x15, 1808, x18)

inst_227:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x48a6ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f92c0 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdc8a6ca; op2val:0x3f92c0; valaddr_reg:x16; val_offset:1816; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1816, x17, x15, 1816, x18)

inst_228:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x244d8b and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2fb07b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x80244d8b; op2val:0x7e2fb07b; valaddr_reg:x16; val_offset:1824; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1824, x17, x15, 1824, x18)

inst_229:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7ad07d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x125b96 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7ad07d; op2val:0x7f125b96; valaddr_reg:x16; val_offset:1832; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1832, x17, x15, 1832, x18)

inst_230:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x152f10 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7ad07d and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x152f10; op2val:0xff7ad07d; valaddr_reg:x16; val_offset:1840; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1840, x17, x15, 1840, x18)

inst_231:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7ad07d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x152f10 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7ad07d; op2val:0x152f10; valaddr_reg:x16; val_offset:1848; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1848, x17, x15, 1848, x18)

inst_232:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x244d8b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x125b96 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x80244d8b; op2val:0x7f125b96; valaddr_reg:x16; val_offset:1856; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1856, x17, x15, 1856, x18)

inst_233:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x48a6ca and fs2 == 0 and fe2 == 0xfb and fm2 == 0x102b16 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdc8a6ca; op2val:0x7d902b16; valaddr_reg:x16; val_offset:1864; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1864, x17, x15, 1864, x18)

inst_234:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x1a156b and fs2 == 1 and fe2 == 0xfb and fm2 == 0x48a6ca and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x1a156b; op2val:0xfdc8a6ca; valaddr_reg:x16; val_offset:1872; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1872, x17, x15, 1872, x18)

inst_235:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x48a6ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x1a156b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdc8a6ca; op2val:0x1a156b; valaddr_reg:x16; val_offset:1880; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1880, x17, x15, 1880, x18)

inst_236:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x244d8b and fs2 == 0 and fe2 == 0xfb and fm2 == 0x102b16 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x80244d8b; op2val:0x7d902b16; valaddr_reg:x16; val_offset:1888; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1888, x17, x15, 1888, x18)

inst_237:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7ad07d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3e3f3f and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7ad07d; op2val:0x7ebe3f3f; valaddr_reg:x16; val_offset:1896; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1896, x17, x15, 1896, x18)

inst_238:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0dc4a8 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7ad07d and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xdc4a8; op2val:0xff7ad07d; valaddr_reg:x16; val_offset:1904; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1904, x17, x15, 1904, x18)

inst_239:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7ad07d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0dc4a8 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7ad07d; op2val:0xdc4a8; valaddr_reg:x16; val_offset:1912; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1912, x17, x15, 1912, x18)

inst_240:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x244d8b and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3e3f3f and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x80244d8b; op2val:0x7ebe3f3f; valaddr_reg:x16; val_offset:1920; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1920, x17, x15, 1920, x18)

inst_241:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x48a6ca and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4e622b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdc8a6ca; op2val:0x7dce622b; valaddr_reg:x16; val_offset:1928; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1928, x17, x15, 1928, x18)

inst_242:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x255707 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x48a6ca and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x255707; op2val:0xfdc8a6ca; valaddr_reg:x16; val_offset:1936; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1936, x17, x15, 1936, x18)

inst_243:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x48a6ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x255707 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdc8a6ca; op2val:0x255707; valaddr_reg:x16; val_offset:1944; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1944, x17, x15, 1944, x18)

inst_244:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x244d8b and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4e622b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x80244d8b; op2val:0x7dce622b; valaddr_reg:x16; val_offset:1952; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1952, x17, x15, 1952, x18)

inst_245:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0d858e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0d858e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800d858e; op2val:0x800d858e; valaddr_reg:x16; val_offset:1960; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1960, x17, x15, 1960, x18)

inst_246:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0d858e and fs2 == 1 and fe2 == 0x7f and fm2 == 0x1ef26a and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800d858e; op2val:0xbf9ef26a; valaddr_reg:x16; val_offset:1968; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1968, x17, x15, 1968, x18)

inst_247:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0d858e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0007f0 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800d858e; op2val:0x7f0; valaddr_reg:x16; val_offset:1976; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1976, x17, x15, 1976, x18)

inst_248:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0d858e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2facf2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800d858e; op2val:0x802facf2; valaddr_reg:x16; val_offset:1984; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1984, x17, x15, 1984, x18)

inst_249:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x2facf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0d858e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x802facf2; op2val:0x800d858e; valaddr_reg:x16; val_offset:1992; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1992, x17, x15, 1992, x18)

inst_250:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0d858e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39b0fc and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800d858e; op2val:0x39b0fc; valaddr_reg:x16; val_offset:2000; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 2000, x17, x15, 2000, x18)

inst_251:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x39b0fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0d858e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x39b0fc; op2val:0x800d858e; valaddr_reg:x16; val_offset:2008; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 2008, x17, x15, 2008, x18)

inst_252:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0d858e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x1c8139 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800d858e; op2val:0x1c8139; valaddr_reg:x16; val_offset:2016; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 2016, x17, x15, 2016, x18)

inst_253:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x1c8139 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0d858e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x1c8139; op2val:0x800d858e; valaddr_reg:x16; val_offset:2024; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_2)

inst_254:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0d858e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x357d2c and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800d858e; op2val:0x357d2c; valaddr_reg:x16; val_offset:0; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 0, x17, x15, 0, x18)

inst_255:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x357d2c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0d858e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x357d2c; op2val:0x800d858e; valaddr_reg:x16; val_offset:8; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 8, x17, x15, 8, x18)

inst_256:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0d858e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x29b3b2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800d858e; op2val:0x29b3b2; valaddr_reg:x16; val_offset:16; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 16, x17, x15, 16, x18)

inst_257:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x29b3b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0d858e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x29b3b2; op2val:0x800d858e; valaddr_reg:x16; val_offset:24; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 24, x17, x15, 24, x18)

inst_258:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0d858e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30e1ae and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800d858e; op2val:0x30e1ae; valaddr_reg:x16; val_offset:32; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 32, x17, x15, 32, x18)

inst_259:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x30e1ae and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0d858e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x30e1ae; op2val:0x800d858e; valaddr_reg:x16; val_offset:40; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 40, x17, x15, 40, x18)

inst_260:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0d858e and fs2 == 1 and fe2 == 0xfa and fm2 == 0x157915 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800d858e; op2val:0xfd157915; valaddr_reg:x16; val_offset:48; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 48, x17, x15, 48, x18)

inst_261:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x157915 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x2820df and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd157915; op2val:0xfd2820df; valaddr_reg:x16; val_offset:56; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 56, x17, x15, 56, x18)

inst_262:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0f3596 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x157915 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800f3596; op2val:0xfd157915; valaddr_reg:x16; val_offset:64; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 64, x17, x15, 64, x18)

inst_263:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x157915 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0f3596 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd157915; op2val:0x800f3596; valaddr_reg:x16; val_offset:72; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 72, x17, x15, 72, x18)

inst_264:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0d858e and fs2 == 1 and fe2 == 0xfa and fm2 == 0x2820df and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800d858e; op2val:0xfd2820df; valaddr_reg:x16; val_offset:80; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 80, x17, x15, 80, x18)

inst_265:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0d858e and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3ad75a and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800d858e; op2val:0xfebad75a; valaddr_reg:x16; val_offset:88; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 88, x17, x15, 88, x18)

inst_266:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x3ad75a and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3f987b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfebad75a; op2val:0xff3f987b; valaddr_reg:x16; val_offset:96; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 96, x17, x15, 96, x18)

inst_267:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x1bbb48 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3ad75a and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x801bbb48; op2val:0xfebad75a; valaddr_reg:x16; val_offset:104; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 104, x17, x15, 104, x18)

inst_268:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x3ad75a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x1bbb48 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfebad75a; op2val:0x801bbb48; valaddr_reg:x16; val_offset:112; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 112, x17, x15, 112, x18)

inst_269:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0d858e and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3f987b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800d858e; op2val:0xff3f987b; valaddr_reg:x16; val_offset:120; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 120, x17, x15, 120, x18)

inst_270:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x3ad75a and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3a8ea9 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfebad75a; op2val:0xff3a8ea9; valaddr_reg:x16; val_offset:128; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 128, x17, x15, 128, x18)

inst_271:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x1b0098 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3ad75a and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x801b0098; op2val:0xfebad75a; valaddr_reg:x16; val_offset:136; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 136, x17, x15, 136, x18)

inst_272:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x3ad75a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x1b0098 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfebad75a; op2val:0x801b0098; valaddr_reg:x16; val_offset:144; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 144, x17, x15, 144, x18)

inst_273:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0d858e and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3a8ea9 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800d858e; op2val:0xff3a8ea9; valaddr_reg:x16; val_offset:152; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 152, x17, x15, 152, x18)

inst_274:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x3ad75a and fs2 == 1 and fe2 == 0xfd and fm2 == 0x53653a and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfebad75a; op2val:0xfed3653a; valaddr_reg:x16; val_offset:160; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 160, x17, x15, 160, x18)

inst_275:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0f4c77 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3ad75a and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800f4c77; op2val:0xfebad75a; valaddr_reg:x16; val_offset:168; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 168, x17, x15, 168, x18)

inst_276:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x3ad75a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0f4c77 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfebad75a; op2val:0x800f4c77; valaddr_reg:x16; val_offset:176; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 176, x17, x15, 176, x18)

inst_277:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0d858e and fs2 == 1 and fe2 == 0xfd and fm2 == 0x53653a and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800d858e; op2val:0xfed3653a; valaddr_reg:x16; val_offset:184; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 184, x17, x15, 184, x18)

inst_278:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x157915 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x6a577e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd157915; op2val:0xfdea577e; valaddr_reg:x16; val_offset:192; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 192, x17, x15, 192, x18)

inst_279:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x2a65f8 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x157915 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x802a65f8; op2val:0xfd157915; valaddr_reg:x16; val_offset:200; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 200, x17, x15, 200, x18)

inst_280:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x157915 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2a65f8 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd157915; op2val:0x802a65f8; valaddr_reg:x16; val_offset:208; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 208, x17, x15, 208, x18)

inst_281:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0d858e and fs2 == 1 and fe2 == 0xfb and fm2 == 0x6a577e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800d858e; op2val:0xfdea577e; valaddr_reg:x16; val_offset:216; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 216, x17, x15, 216, x18)

inst_282:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x157915 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2fb07b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd157915; op2val:0x7e2fb07b; valaddr_reg:x16; val_offset:224; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 224, x17, x15, 224, x18)

inst_283:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x3f92c0 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x157915 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f92c0; op2val:0xfd157915; valaddr_reg:x16; val_offset:232; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 232, x17, x15, 232, x18)

inst_284:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x157915 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f92c0 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd157915; op2val:0x3f92c0; valaddr_reg:x16; val_offset:240; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 240, x17, x15, 240, x18)

inst_285:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0d858e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2fb07b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800d858e; op2val:0x7e2fb07b; valaddr_reg:x16; val_offset:248; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 248, x17, x15, 248, x18)

inst_286:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x3ad75a and fs2 == 0 and fe2 == 0xfe and fm2 == 0x125b96 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfebad75a; op2val:0x7f125b96; valaddr_reg:x16; val_offset:256; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 256, x17, x15, 256, x18)

inst_287:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x152f10 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3ad75a and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x152f10; op2val:0xfebad75a; valaddr_reg:x16; val_offset:264; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 264, x17, x15, 264, x18)

inst_288:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x3ad75a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x152f10 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfebad75a; op2val:0x152f10; valaddr_reg:x16; val_offset:272; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 272, x17, x15, 272, x18)

inst_289:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0d858e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x125b96 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800d858e; op2val:0x7f125b96; valaddr_reg:x16; val_offset:280; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 280, x17, x15, 280, x18)

inst_290:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x157915 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x102b16 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd157915; op2val:0x7d902b16; valaddr_reg:x16; val_offset:288; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 288, x17, x15, 288, x18)

inst_291:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x1a156b and fs2 == 1 and fe2 == 0xfa and fm2 == 0x157915 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x1a156b; op2val:0xfd157915; valaddr_reg:x16; val_offset:296; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 296, x17, x15, 296, x18)

inst_292:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x157915 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x1a156b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd157915; op2val:0x1a156b; valaddr_reg:x16; val_offset:304; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 304, x17, x15, 304, x18)

inst_293:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0d858e and fs2 == 0 and fe2 == 0xfb and fm2 == 0x102b16 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800d858e; op2val:0x7d902b16; valaddr_reg:x16; val_offset:312; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 312, x17, x15, 312, x18)

inst_294:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x3ad75a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3e3f3f and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfebad75a; op2val:0x7ebe3f3f; valaddr_reg:x16; val_offset:320; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 320, x17, x15, 320, x18)

inst_295:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0dc4a8 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3ad75a and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xdc4a8; op2val:0xfebad75a; valaddr_reg:x16; val_offset:328; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 328, x17, x15, 328, x18)

inst_296:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x3ad75a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0dc4a8 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfebad75a; op2val:0xdc4a8; valaddr_reg:x16; val_offset:336; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 336, x17, x15, 336, x18)

inst_297:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0d858e and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3e3f3f and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800d858e; op2val:0x7ebe3f3f; valaddr_reg:x16; val_offset:344; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 344, x17, x15, 344, x18)

inst_298:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x157915 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4e622b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd157915; op2val:0x7dce622b; valaddr_reg:x16; val_offset:352; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 352, x17, x15, 352, x18)

inst_299:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x255707 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x157915 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x255707; op2val:0xfd157915; valaddr_reg:x16; val_offset:360; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 360, x17, x15, 360, x18)

inst_300:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x157915 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x255707 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd157915; op2val:0x255707; valaddr_reg:x16; val_offset:368; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 368, x17, x15, 368, x18)

inst_301:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0d858e and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4e622b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800d858e; op2val:0x7dce622b; valaddr_reg:x16; val_offset:376; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 376, x17, x15, 376, x18)

inst_302:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x2facf2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2facf2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x802facf2; op2val:0x802facf2; valaddr_reg:x16; val_offset:384; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 384, x17, x15, 384, x18)

inst_303:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x2facf2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c1b1e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x802facf2; op2val:0xc08c1b1e; valaddr_reg:x16; val_offset:392; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 392, x17, x15, 392, x18)

inst_304:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x2facf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0007f0 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x802facf2; op2val:0x7f0; valaddr_reg:x16; val_offset:400; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 400, x17, x15, 400, x18)

inst_305:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x2facf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39b0fc and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x802facf2; op2val:0x39b0fc; valaddr_reg:x16; val_offset:408; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 408, x17, x15, 408, x18)

inst_306:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x39b0fc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2facf2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x39b0fc; op2val:0x802facf2; valaddr_reg:x16; val_offset:416; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 416, x17, x15, 416, x18)

inst_307:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x2facf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x1c8139 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x802facf2; op2val:0x1c8139; valaddr_reg:x16; val_offset:424; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 424, x17, x15, 424, x18)

inst_308:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x1c8139 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2facf2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x1c8139; op2val:0x802facf2; valaddr_reg:x16; val_offset:432; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 432, x17, x15, 432, x18)

inst_309:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x2facf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x357d2c and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x802facf2; op2val:0x357d2c; valaddr_reg:x16; val_offset:440; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 440, x17, x15, 440, x18)

inst_310:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x357d2c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2facf2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x357d2c; op2val:0x802facf2; valaddr_reg:x16; val_offset:448; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 448, x17, x15, 448, x18)

inst_311:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x2facf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x29b3b2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x802facf2; op2val:0x29b3b2; valaddr_reg:x16; val_offset:456; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 456, x17, x15, 456, x18)

inst_312:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x29b3b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2facf2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x29b3b2; op2val:0x802facf2; valaddr_reg:x16; val_offset:464; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 464, x17, x15, 464, x18)

inst_313:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x2facf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30e1ae and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x802facf2; op2val:0x30e1ae; valaddr_reg:x16; val_offset:472; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 472, x17, x15, 472, x18)

inst_314:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x30e1ae and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2facf2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x30e1ae; op2val:0x802facf2; valaddr_reg:x16; val_offset:480; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 480, x17, x15, 480, x18)

inst_315:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x2facf2 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x03c146 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x802facf2; op2val:0xfe03c146; valaddr_reg:x16; val_offset:488; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 488, x17, x15, 488, x18)

inst_316:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x03c146 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x2820df and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe03c146; op2val:0xfd2820df; valaddr_reg:x16; val_offset:496; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 496, x17, x15, 496, x18)

inst_317:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0f3596 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x03c146 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800f3596; op2val:0xfe03c146; valaddr_reg:x16; val_offset:504; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 504, x17, x15, 504, x18)

inst_318:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x03c146 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0f3596 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe03c146; op2val:0x800f3596; valaddr_reg:x16; val_offset:512; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 512, x17, x15, 512, x18)

inst_319:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x2facf2 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x2820df and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x802facf2; op2val:0xfd2820df; valaddr_reg:x16; val_offset:520; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 520, x17, x15, 520, x18)

inst_320:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x2facf2 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x802facf2; op2val:0xff7fffff; valaddr_reg:x16; val_offset:528; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 528, x17, x15, 528, x18)

inst_321:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x2facf2 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3f987b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x802facf2; op2val:0xff3f987b; valaddr_reg:x16; val_offset:536; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 536, x17, x15, 536, x18)

inst_322:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x2facf2 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3a8ea9 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x802facf2; op2val:0xff3a8ea9; valaddr_reg:x16; val_offset:544; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 544, x17, x15, 544, x18)

inst_323:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x2facf2 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x53653a and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x802facf2; op2val:0xfed3653a; valaddr_reg:x16; val_offset:552; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 552, x17, x15, 552, x18)

inst_324:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x03c146 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x6a577e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe03c146; op2val:0xfdea577e; valaddr_reg:x16; val_offset:560; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 560, x17, x15, 560, x18)

inst_325:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x2a65f8 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x03c146 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x802a65f8; op2val:0xfe03c146; valaddr_reg:x16; val_offset:568; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 568, x17, x15, 568, x18)

inst_326:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x03c146 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2a65f8 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe03c146; op2val:0x802a65f8; valaddr_reg:x16; val_offset:576; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 576, x17, x15, 576, x18)

inst_327:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x2facf2 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x6a577e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x802facf2; op2val:0xfdea577e; valaddr_reg:x16; val_offset:584; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 584, x17, x15, 584, x18)

inst_328:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x03c146 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2fb07b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe03c146; op2val:0x7e2fb07b; valaddr_reg:x16; val_offset:592; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 592, x17, x15, 592, x18)

inst_329:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x3f92c0 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x03c146 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f92c0; op2val:0xfe03c146; valaddr_reg:x16; val_offset:600; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 600, x17, x15, 600, x18)

inst_330:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x03c146 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f92c0 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe03c146; op2val:0x3f92c0; valaddr_reg:x16; val_offset:608; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 608, x17, x15, 608, x18)

inst_331:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x2facf2 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2fb07b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x802facf2; op2val:0x7e2fb07b; valaddr_reg:x16; val_offset:616; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 616, x17, x15, 616, x18)

inst_332:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x2facf2 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x125b96 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x802facf2; op2val:0x7f125b96; valaddr_reg:x16; val_offset:624; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 624, x17, x15, 624, x18)

inst_333:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x03c146 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x102b16 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe03c146; op2val:0x7d902b16; valaddr_reg:x16; val_offset:632; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 632, x17, x15, 632, x18)

inst_334:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x1a156b and fs2 == 1 and fe2 == 0xfc and fm2 == 0x03c146 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x1a156b; op2val:0xfe03c146; valaddr_reg:x16; val_offset:640; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 640, x17, x15, 640, x18)

inst_335:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x03c146 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x1a156b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe03c146; op2val:0x1a156b; valaddr_reg:x16; val_offset:648; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 648, x17, x15, 648, x18)

inst_336:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x2facf2 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x102b16 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x802facf2; op2val:0x7d902b16; valaddr_reg:x16; val_offset:656; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 656, x17, x15, 656, x18)

inst_337:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x2facf2 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3e3f3f and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x802facf2; op2val:0x7ebe3f3f; valaddr_reg:x16; val_offset:664; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 664, x17, x15, 664, x18)

inst_338:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x03c146 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4e622b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe03c146; op2val:0x7dce622b; valaddr_reg:x16; val_offset:672; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 672, x17, x15, 672, x18)

inst_339:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x255707 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x03c146 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x255707; op2val:0xfe03c146; valaddr_reg:x16; val_offset:680; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 680, x17, x15, 680, x18)

inst_340:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x03c146 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x255707 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfe03c146; op2val:0x255707; valaddr_reg:x16; val_offset:688; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 688, x17, x15, 688, x18)

inst_341:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x2facf2 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4e622b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x802facf2; op2val:0x7dce622b; valaddr_reg:x16; val_offset:696; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 696, x17, x15, 696, x18)

inst_342:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x39b0fc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39b0fc and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x39b0fc; op2val:0x39b0fc; valaddr_reg:x16; val_offset:704; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 704, x17, x15, 704, x18)

inst_343:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x39b0fc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x298a26 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x39b0fc; op2val:0x40a98a26; valaddr_reg:x16; val_offset:712; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 712, x17, x15, 712, x18)

inst_344:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x39b0fc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0007f0 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x39b0fc; op2val:0x7f0; valaddr_reg:x16; val_offset:720; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 720, x17, x15, 720, x18)

inst_345:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x39b0fc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x1c8139 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x39b0fc; op2val:0x1c8139; valaddr_reg:x16; val_offset:728; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 728, x17, x15, 728, x18)

inst_346:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x1c8139 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39b0fc and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x1c8139; op2val:0x39b0fc; valaddr_reg:x16; val_offset:736; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 736, x17, x15, 736, x18)

inst_347:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x39b0fc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x357d2c and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x39b0fc; op2val:0x357d2c; valaddr_reg:x16; val_offset:744; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 744, x17, x15, 744, x18)

inst_348:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x357d2c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39b0fc and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x357d2c; op2val:0x39b0fc; valaddr_reg:x16; val_offset:752; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 752, x17, x15, 752, x18)

inst_349:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x39b0fc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x29b3b2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x39b0fc; op2val:0x29b3b2; valaddr_reg:x16; val_offset:760; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 760, x17, x15, 760, x18)

inst_350:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x29b3b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39b0fc and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x29b3b2; op2val:0x39b0fc; valaddr_reg:x16; val_offset:768; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 768, x17, x15, 768, x18)

inst_351:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x39b0fc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30e1ae and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x39b0fc; op2val:0x30e1ae; valaddr_reg:x16; val_offset:776; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 776, x17, x15, 776, x18)

inst_352:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x30e1ae and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39b0fc and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x30e1ae; op2val:0x39b0fc; valaddr_reg:x16; val_offset:784; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 784, x17, x15, 784, x18)

inst_353:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x39b0fc and fs2 == 0 and fe2 == 0xfc and fm2 == 0x1f6f2f and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x39b0fc; op2val:0x7e1f6f2f; valaddr_reg:x16; val_offset:792; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 792, x17, x15, 792, x18)

inst_354:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1f6f2f and fs2 == 1 and fe2 == 0xfa and fm2 == 0x2820df and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e1f6f2f; op2val:0xfd2820df; valaddr_reg:x16; val_offset:800; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 800, x17, x15, 800, x18)

inst_355:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0f3596 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x1f6f2f and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800f3596; op2val:0x7e1f6f2f; valaddr_reg:x16; val_offset:808; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 808, x17, x15, 808, x18)

inst_356:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1f6f2f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0f3596 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e1f6f2f; op2val:0x800f3596; valaddr_reg:x16; val_offset:816; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 816, x17, x15, 816, x18)

inst_357:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x39b0fc and fs2 == 1 and fe2 == 0xfa and fm2 == 0x2820df and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x39b0fc; op2val:0xfd2820df; valaddr_reg:x16; val_offset:824; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 824, x17, x15, 824, x18)

inst_358:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x39b0fc and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x39b0fc; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:832; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 832, x17, x15, 832, x18)

inst_359:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3f987b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0xff3f987b; valaddr_reg:x16; val_offset:840; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 840, x17, x15, 840, x18)

inst_360:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x1bbb48 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x801bbb48; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:848; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 848, x17, x15, 848, x18)

inst_361:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x1bbb48 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x801bbb48; valaddr_reg:x16; val_offset:856; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 856, x17, x15, 856, x18)

inst_362:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x39b0fc and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3f987b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x39b0fc; op2val:0xff3f987b; valaddr_reg:x16; val_offset:864; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 864, x17, x15, 864, x18)

inst_363:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3a8ea9 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0xff3a8ea9; valaddr_reg:x16; val_offset:872; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 872, x17, x15, 872, x18)

inst_364:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x1b0098 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x801b0098; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:880; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 880, x17, x15, 880, x18)

inst_365:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x1b0098 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x801b0098; valaddr_reg:x16; val_offset:888; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 888, x17, x15, 888, x18)

inst_366:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x39b0fc and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3a8ea9 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x39b0fc; op2val:0xff3a8ea9; valaddr_reg:x16; val_offset:896; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 896, x17, x15, 896, x18)

inst_367:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfd and fm2 == 0x53653a and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0xfed3653a; valaddr_reg:x16; val_offset:904; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 904, x17, x15, 904, x18)

inst_368:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0f4c77 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800f4c77; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:912; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 912, x17, x15, 912, x18)

inst_369:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0f4c77 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x800f4c77; valaddr_reg:x16; val_offset:920; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 920, x17, x15, 920, x18)

inst_370:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x39b0fc and fs2 == 1 and fe2 == 0xfd and fm2 == 0x53653a and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x39b0fc; op2val:0xfed3653a; valaddr_reg:x16; val_offset:928; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 928, x17, x15, 928, x18)

inst_371:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1f6f2f and fs2 == 1 and fe2 == 0xfb and fm2 == 0x6a577e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e1f6f2f; op2val:0xfdea577e; valaddr_reg:x16; val_offset:936; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 936, x17, x15, 936, x18)

inst_372:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x2a65f8 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x1f6f2f and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x802a65f8; op2val:0x7e1f6f2f; valaddr_reg:x16; val_offset:944; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 944, x17, x15, 944, x18)

inst_373:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1f6f2f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2a65f8 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e1f6f2f; op2val:0x802a65f8; valaddr_reg:x16; val_offset:952; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 952, x17, x15, 952, x18)

inst_374:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x39b0fc and fs2 == 1 and fe2 == 0xfb and fm2 == 0x6a577e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x39b0fc; op2val:0xfdea577e; valaddr_reg:x16; val_offset:960; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 960, x17, x15, 960, x18)

inst_375:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1f6f2f and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2fb07b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e1f6f2f; op2val:0x7e2fb07b; valaddr_reg:x16; val_offset:968; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 968, x17, x15, 968, x18)

inst_376:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x3f92c0 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x1f6f2f and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f92c0; op2val:0x7e1f6f2f; valaddr_reg:x16; val_offset:976; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 976, x17, x15, 976, x18)

inst_377:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1f6f2f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f92c0 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e1f6f2f; op2val:0x3f92c0; valaddr_reg:x16; val_offset:984; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 984, x17, x15, 984, x18)

inst_378:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x39b0fc and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2fb07b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x39b0fc; op2val:0x7e2fb07b; valaddr_reg:x16; val_offset:992; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 992, x17, x15, 992, x18)

inst_379:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x125b96 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7f125b96; valaddr_reg:x16; val_offset:1000; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1000, x17, x15, 1000, x18)

inst_380:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x152f10 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x152f10; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1008; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1008, x17, x15, 1008, x18)

inst_381:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x152f10 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x152f10; valaddr_reg:x16; val_offset:1016; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1016, x17, x15, 1016, x18)

inst_382:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x39b0fc and fs2 == 0 and fe2 == 0xfe and fm2 == 0x125b96 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x39b0fc; op2val:0x7f125b96; valaddr_reg:x16; val_offset:1024; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1024, x17, x15, 1024, x18)

inst_383:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1f6f2f and fs2 == 0 and fe2 == 0xfb and fm2 == 0x102b16 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e1f6f2f; op2val:0x7d902b16; valaddr_reg:x16; val_offset:1032; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1032, x17, x15, 1032, x18)

inst_384:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x1a156b and fs2 == 0 and fe2 == 0xfc and fm2 == 0x1f6f2f and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x1a156b; op2val:0x7e1f6f2f; valaddr_reg:x16; val_offset:1040; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1040, x17, x15, 1040, x18)

inst_385:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1f6f2f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x1a156b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e1f6f2f; op2val:0x1a156b; valaddr_reg:x16; val_offset:1048; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1048, x17, x15, 1048, x18)

inst_386:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x39b0fc and fs2 == 0 and fe2 == 0xfb and fm2 == 0x102b16 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x39b0fc; op2val:0x7d902b16; valaddr_reg:x16; val_offset:1056; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1056, x17, x15, 1056, x18)

inst_387:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3e3f3f and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7ebe3f3f; valaddr_reg:x16; val_offset:1064; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1064, x17, x15, 1064, x18)

inst_388:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0dc4a8 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xdc4a8; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1072; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1072, x17, x15, 1072, x18)

inst_389:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0dc4a8 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0xdc4a8; valaddr_reg:x16; val_offset:1080; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1080, x17, x15, 1080, x18)

inst_390:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x39b0fc and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3e3f3f and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x39b0fc; op2val:0x7ebe3f3f; valaddr_reg:x16; val_offset:1088; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1088, x17, x15, 1088, x18)

inst_391:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1f6f2f and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4e622b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e1f6f2f; op2val:0x7dce622b; valaddr_reg:x16; val_offset:1096; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1096, x17, x15, 1096, x18)

inst_392:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x255707 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x1f6f2f and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x255707; op2val:0x7e1f6f2f; valaddr_reg:x16; val_offset:1104; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1104, x17, x15, 1104, x18)

inst_393:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1f6f2f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x255707 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e1f6f2f; op2val:0x255707; valaddr_reg:x16; val_offset:1112; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1112, x17, x15, 1112, x18)

inst_394:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x39b0fc and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4e622b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x39b0fc; op2val:0x7dce622b; valaddr_reg:x16; val_offset:1120; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1120, x17, x15, 1120, x18)

inst_395:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x1c8139 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x1c8139 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x1c8139; op2val:0x1c8139; valaddr_reg:x16; val_offset:1128; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1128, x17, x15, 1128, x18)

inst_396:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x1c8139 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x27893a and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x1c8139; op2val:0x4027893a; valaddr_reg:x16; val_offset:1136; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1136, x17, x15, 1136, x18)

inst_397:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x1c8139 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0007f0 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x1c8139; op2val:0x7f0; valaddr_reg:x16; val_offset:1144; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1144, x17, x15, 1144, x18)

inst_398:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x1c8139 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x357d2c and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x1c8139; op2val:0x357d2c; valaddr_reg:x16; val_offset:1152; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1152, x17, x15, 1152, x18)

inst_399:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x357d2c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x1c8139 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x357d2c; op2val:0x1c8139; valaddr_reg:x16; val_offset:1160; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1160, x17, x15, 1160, x18)

inst_400:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x1c8139 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x29b3b2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x1c8139; op2val:0x29b3b2; valaddr_reg:x16; val_offset:1168; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1168, x17, x15, 1168, x18)

inst_401:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x29b3b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x1c8139 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x29b3b2; op2val:0x1c8139; valaddr_reg:x16; val_offset:1176; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1176, x17, x15, 1176, x18)

inst_402:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x1c8139 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30e1ae and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x1c8139; op2val:0x30e1ae; valaddr_reg:x16; val_offset:1184; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1184, x17, x15, 1184, x18)

inst_403:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x30e1ae and fs2 == 0 and fe2 == 0x00 and fm2 == 0x1c8139 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x30e1ae; op2val:0x1c8139; valaddr_reg:x16; val_offset:1192; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1192, x17, x15, 1192, x18)

inst_404:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x1c8139 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x1d8cd6 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x1c8139; op2val:0x7d9d8cd6; valaddr_reg:x16; val_offset:1200; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1200, x17, x15, 1200, x18)

inst_405:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1d8cd6 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x2820df and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d9d8cd6; op2val:0xfd2820df; valaddr_reg:x16; val_offset:1208; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1208, x17, x15, 1208, x18)

inst_406:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0f3596 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x1d8cd6 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800f3596; op2val:0x7d9d8cd6; valaddr_reg:x16; val_offset:1216; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1216, x17, x15, 1216, x18)

inst_407:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1d8cd6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0f3596 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d9d8cd6; op2val:0x800f3596; valaddr_reg:x16; val_offset:1224; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1224, x17, x15, 1224, x18)

inst_408:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x1c8139 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x2820df and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x1c8139; op2val:0xfd2820df; valaddr_reg:x16; val_offset:1232; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1232, x17, x15, 1232, x18)

inst_409:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x1c8139 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x44f00b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x1c8139; op2val:0x7f44f00b; valaddr_reg:x16; val_offset:1240; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1240, x17, x15, 1240, x18)

inst_410:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x44f00b and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3f987b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f44f00b; op2val:0xff3f987b; valaddr_reg:x16; val_offset:1248; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1248, x17, x15, 1248, x18)

inst_411:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x1bbb48 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x44f00b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x801bbb48; op2val:0x7f44f00b; valaddr_reg:x16; val_offset:1256; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1256, x17, x15, 1256, x18)

inst_412:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x44f00b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x1bbb48 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f44f00b; op2val:0x801bbb48; valaddr_reg:x16; val_offset:1264; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1264, x17, x15, 1264, x18)

inst_413:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x1c8139 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3f987b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x1c8139; op2val:0xff3f987b; valaddr_reg:x16; val_offset:1272; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1272, x17, x15, 1272, x18)

inst_414:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x44f00b and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3a8ea9 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f44f00b; op2val:0xff3a8ea9; valaddr_reg:x16; val_offset:1280; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1280, x17, x15, 1280, x18)

inst_415:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x1b0098 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x44f00b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x801b0098; op2val:0x7f44f00b; valaddr_reg:x16; val_offset:1288; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1288, x17, x15, 1288, x18)

inst_416:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x44f00b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x1b0098 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f44f00b; op2val:0x801b0098; valaddr_reg:x16; val_offset:1296; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1296, x17, x15, 1296, x18)

inst_417:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x1c8139 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3a8ea9 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x1c8139; op2val:0xff3a8ea9; valaddr_reg:x16; val_offset:1304; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1304, x17, x15, 1304, x18)

inst_418:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x44f00b and fs2 == 1 and fe2 == 0xfd and fm2 == 0x53653a and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f44f00b; op2val:0xfed3653a; valaddr_reg:x16; val_offset:1312; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1312, x17, x15, 1312, x18)

inst_419:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0f4c77 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x44f00b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800f4c77; op2val:0x7f44f00b; valaddr_reg:x16; val_offset:1320; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1320, x17, x15, 1320, x18)

inst_420:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x44f00b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0f4c77 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f44f00b; op2val:0x800f4c77; valaddr_reg:x16; val_offset:1328; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1328, x17, x15, 1328, x18)

inst_421:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x1c8139 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x53653a and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x1c8139; op2val:0xfed3653a; valaddr_reg:x16; val_offset:1336; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1336, x17, x15, 1336, x18)

inst_422:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1d8cd6 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x6a577e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d9d8cd6; op2val:0xfdea577e; valaddr_reg:x16; val_offset:1344; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1344, x17, x15, 1344, x18)

inst_423:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x2a65f8 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x1d8cd6 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x802a65f8; op2val:0x7d9d8cd6; valaddr_reg:x16; val_offset:1352; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1352, x17, x15, 1352, x18)

inst_424:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1d8cd6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2a65f8 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d9d8cd6; op2val:0x802a65f8; valaddr_reg:x16; val_offset:1360; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1360, x17, x15, 1360, x18)

inst_425:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x1c8139 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x6a577e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x1c8139; op2val:0xfdea577e; valaddr_reg:x16; val_offset:1368; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1368, x17, x15, 1368, x18)

inst_426:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1d8cd6 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2fb07b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d9d8cd6; op2val:0x7e2fb07b; valaddr_reg:x16; val_offset:1376; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1376, x17, x15, 1376, x18)

inst_427:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x3f92c0 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x1d8cd6 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f92c0; op2val:0x7d9d8cd6; valaddr_reg:x16; val_offset:1384; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1384, x17, x15, 1384, x18)

inst_428:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1d8cd6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f92c0 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d9d8cd6; op2val:0x3f92c0; valaddr_reg:x16; val_offset:1392; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1392, x17, x15, 1392, x18)

inst_429:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x1c8139 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2fb07b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x1c8139; op2val:0x7e2fb07b; valaddr_reg:x16; val_offset:1400; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1400, x17, x15, 1400, x18)

inst_430:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x44f00b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x125b96 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f44f00b; op2val:0x7f125b96; valaddr_reg:x16; val_offset:1408; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1408, x17, x15, 1408, x18)

inst_431:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x152f10 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x44f00b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x152f10; op2val:0x7f44f00b; valaddr_reg:x16; val_offset:1416; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1416, x17, x15, 1416, x18)

inst_432:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x44f00b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x152f10 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f44f00b; op2val:0x152f10; valaddr_reg:x16; val_offset:1424; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1424, x17, x15, 1424, x18)

inst_433:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x1c8139 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x125b96 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x1c8139; op2val:0x7f125b96; valaddr_reg:x16; val_offset:1432; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1432, x17, x15, 1432, x18)

inst_434:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1d8cd6 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x102b16 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d9d8cd6; op2val:0x7d902b16; valaddr_reg:x16; val_offset:1440; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1440, x17, x15, 1440, x18)

inst_435:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x1a156b and fs2 == 0 and fe2 == 0xfb and fm2 == 0x1d8cd6 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x1a156b; op2val:0x7d9d8cd6; valaddr_reg:x16; val_offset:1448; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1448, x17, x15, 1448, x18)

inst_436:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1d8cd6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x1a156b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d9d8cd6; op2val:0x1a156b; valaddr_reg:x16; val_offset:1456; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1456, x17, x15, 1456, x18)

inst_437:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x1c8139 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x102b16 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x1c8139; op2val:0x7d902b16; valaddr_reg:x16; val_offset:1464; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1464, x17, x15, 1464, x18)

inst_438:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x44f00b and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3e3f3f and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f44f00b; op2val:0x7ebe3f3f; valaddr_reg:x16; val_offset:1472; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1472, x17, x15, 1472, x18)

inst_439:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0dc4a8 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x44f00b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xdc4a8; op2val:0x7f44f00b; valaddr_reg:x16; val_offset:1480; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1480, x17, x15, 1480, x18)

inst_440:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x44f00b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0dc4a8 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f44f00b; op2val:0xdc4a8; valaddr_reg:x16; val_offset:1488; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1488, x17, x15, 1488, x18)

inst_441:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x1c8139 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3e3f3f and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x1c8139; op2val:0x7ebe3f3f; valaddr_reg:x16; val_offset:1496; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1496, x17, x15, 1496, x18)

inst_442:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1d8cd6 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4e622b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d9d8cd6; op2val:0x7dce622b; valaddr_reg:x16; val_offset:1504; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1504, x17, x15, 1504, x18)

inst_443:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x255707 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x1d8cd6 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x255707; op2val:0x7d9d8cd6; valaddr_reg:x16; val_offset:1512; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1512, x17, x15, 1512, x18)

inst_444:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1d8cd6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x255707 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d9d8cd6; op2val:0x255707; valaddr_reg:x16; val_offset:1520; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1520, x17, x15, 1520, x18)

inst_445:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x1c8139 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4e622b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x1c8139; op2val:0x7dce622b; valaddr_reg:x16; val_offset:1528; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1528, x17, x15, 1528, x18)

inst_446:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x357d2c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x357d2c and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x357d2c; op2val:0x357d2c; valaddr_reg:x16; val_offset:1536; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1536, x17, x15, 1536, x18)

inst_447:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x357d2c and fs2 == 0 and fe2 == 0x81 and fm2 == 0x1d309f and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x357d2c; op2val:0x409d309f; valaddr_reg:x16; val_offset:1544; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1544, x17, x15, 1544, x18)

inst_448:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x357d2c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0007f0 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x357d2c; op2val:0x7f0; valaddr_reg:x16; val_offset:1552; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1552, x17, x15, 1552, x18)

inst_449:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x357d2c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x29b3b2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x357d2c; op2val:0x29b3b2; valaddr_reg:x16; val_offset:1560; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1560, x17, x15, 1560, x18)

inst_450:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x29b3b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x357d2c and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x29b3b2; op2val:0x357d2c; valaddr_reg:x16; val_offset:1568; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1568, x17, x15, 1568, x18)

inst_451:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x357d2c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30e1ae and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x357d2c; op2val:0x30e1ae; valaddr_reg:x16; val_offset:1576; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1576, x17, x15, 1576, x18)

inst_452:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x30e1ae and fs2 == 0 and fe2 == 0x00 and fm2 == 0x357d2c and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x30e1ae; op2val:0x357d2c; valaddr_reg:x16; val_offset:1584; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1584, x17, x15, 1584, x18)

inst_453:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x357d2c and fs2 == 0 and fe2 == 0xfc and fm2 == 0x13d219 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x357d2c; op2val:0x7e13d219; valaddr_reg:x16; val_offset:1592; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1592, x17, x15, 1592, x18)

inst_454:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13d219 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x2820df and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e13d219; op2val:0xfd2820df; valaddr_reg:x16; val_offset:1600; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1600, x17, x15, 1600, x18)

inst_455:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0f3596 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x13d219 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800f3596; op2val:0x7e13d219; valaddr_reg:x16; val_offset:1608; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1608, x17, x15, 1608, x18)

inst_456:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13d219 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0f3596 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e13d219; op2val:0x800f3596; valaddr_reg:x16; val_offset:1616; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1616, x17, x15, 1616, x18)

inst_457:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x357d2c and fs2 == 1 and fe2 == 0xfa and fm2 == 0x2820df and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x357d2c; op2val:0xfd2820df; valaddr_reg:x16; val_offset:1624; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1624, x17, x15, 1624, x18)

inst_458:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x357d2c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x357d2c; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1632; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1632, x17, x15, 1632, x18)

inst_459:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x357d2c and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3f987b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x357d2c; op2val:0xff3f987b; valaddr_reg:x16; val_offset:1640; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1640, x17, x15, 1640, x18)

inst_460:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x357d2c and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3a8ea9 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x357d2c; op2val:0xff3a8ea9; valaddr_reg:x16; val_offset:1648; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1648, x17, x15, 1648, x18)

inst_461:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x357d2c and fs2 == 1 and fe2 == 0xfd and fm2 == 0x53653a and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x357d2c; op2val:0xfed3653a; valaddr_reg:x16; val_offset:1656; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1656, x17, x15, 1656, x18)

inst_462:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13d219 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x6a577e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e13d219; op2val:0xfdea577e; valaddr_reg:x16; val_offset:1664; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1664, x17, x15, 1664, x18)

inst_463:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x2a65f8 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x13d219 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x802a65f8; op2val:0x7e13d219; valaddr_reg:x16; val_offset:1672; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1672, x17, x15, 1672, x18)

inst_464:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13d219 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2a65f8 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e13d219; op2val:0x802a65f8; valaddr_reg:x16; val_offset:1680; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1680, x17, x15, 1680, x18)

inst_465:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x357d2c and fs2 == 1 and fe2 == 0xfb and fm2 == 0x6a577e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x357d2c; op2val:0xfdea577e; valaddr_reg:x16; val_offset:1688; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1688, x17, x15, 1688, x18)

inst_466:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13d219 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2fb07b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e13d219; op2val:0x7e2fb07b; valaddr_reg:x16; val_offset:1696; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1696, x17, x15, 1696, x18)

inst_467:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x3f92c0 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x13d219 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f92c0; op2val:0x7e13d219; valaddr_reg:x16; val_offset:1704; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1704, x17, x15, 1704, x18)

inst_468:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13d219 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f92c0 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e13d219; op2val:0x3f92c0; valaddr_reg:x16; val_offset:1712; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1712, x17, x15, 1712, x18)

inst_469:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x357d2c and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2fb07b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x357d2c; op2val:0x7e2fb07b; valaddr_reg:x16; val_offset:1720; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1720, x17, x15, 1720, x18)

inst_470:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x357d2c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x125b96 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x357d2c; op2val:0x7f125b96; valaddr_reg:x16; val_offset:1728; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1728, x17, x15, 1728, x18)

inst_471:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13d219 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x102b16 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e13d219; op2val:0x7d902b16; valaddr_reg:x16; val_offset:1736; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1736, x17, x15, 1736, x18)

inst_472:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x1a156b and fs2 == 0 and fe2 == 0xfc and fm2 == 0x13d219 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x1a156b; op2val:0x7e13d219; valaddr_reg:x16; val_offset:1744; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1744, x17, x15, 1744, x18)

inst_473:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13d219 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x1a156b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e13d219; op2val:0x1a156b; valaddr_reg:x16; val_offset:1752; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1752, x17, x15, 1752, x18)

inst_474:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x357d2c and fs2 == 0 and fe2 == 0xfb and fm2 == 0x102b16 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x357d2c; op2val:0x7d902b16; valaddr_reg:x16; val_offset:1760; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1760, x17, x15, 1760, x18)

inst_475:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x357d2c and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3e3f3f and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x357d2c; op2val:0x7ebe3f3f; valaddr_reg:x16; val_offset:1768; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1768, x17, x15, 1768, x18)

inst_476:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13d219 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4e622b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e13d219; op2val:0x7dce622b; valaddr_reg:x16; val_offset:1776; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1776, x17, x15, 1776, x18)

inst_477:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x255707 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x13d219 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x255707; op2val:0x7e13d219; valaddr_reg:x16; val_offset:1784; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1784, x17, x15, 1784, x18)

inst_478:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13d219 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x255707 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e13d219; op2val:0x255707; valaddr_reg:x16; val_offset:1792; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1792, x17, x15, 1792, x18)

inst_479:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x357d2c and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4e622b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x357d2c; op2val:0x7dce622b; valaddr_reg:x16; val_offset:1800; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1800, x17, x15, 1800, x18)

inst_480:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x29b3b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x29b3b2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x29b3b2; op2val:0x29b3b2; valaddr_reg:x16; val_offset:1808; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1808, x17, x15, 1808, x18)

inst_481:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x29b3b2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x751a1e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x29b3b2; op2val:0x40751a1e; valaddr_reg:x16; val_offset:1816; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1816, x17, x15, 1816, x18)

inst_482:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x29b3b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0007f0 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x29b3b2; op2val:0x7f0; valaddr_reg:x16; val_offset:1824; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1824, x17, x15, 1824, x18)

inst_483:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x29b3b2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30e1ae and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x29b3b2; op2val:0x30e1ae; valaddr_reg:x16; val_offset:1832; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1832, x17, x15, 1832, x18)

inst_484:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x30e1ae and fs2 == 0 and fe2 == 0x00 and fm2 == 0x29b3b2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x30e1ae; op2val:0x29b3b2; valaddr_reg:x16; val_offset:1840; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1840, x17, x15, 1840, x18)

inst_485:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x29b3b2 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x667e2a and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x29b3b2; op2val:0x7de67e2a; valaddr_reg:x16; val_offset:1848; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1848, x17, x15, 1848, x18)

inst_486:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x667e2a and fs2 == 1 and fe2 == 0xfa and fm2 == 0x2820df and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7de67e2a; op2val:0xfd2820df; valaddr_reg:x16; val_offset:1856; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1856, x17, x15, 1856, x18)

inst_487:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0f3596 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x667e2a and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800f3596; op2val:0x7de67e2a; valaddr_reg:x16; val_offset:1864; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1864, x17, x15, 1864, x18)

inst_488:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x667e2a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0f3596 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7de67e2a; op2val:0x800f3596; valaddr_reg:x16; val_offset:1872; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1872, x17, x15, 1872, x18)

inst_489:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x29b3b2 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x2820df and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x29b3b2; op2val:0xfd2820df; valaddr_reg:x16; val_offset:1880; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1880, x17, x15, 1880, x18)

inst_490:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x29b3b2 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x29b3b2; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1888; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1888, x17, x15, 1888, x18)

inst_491:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x29b3b2 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3f987b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x29b3b2; op2val:0xff3f987b; valaddr_reg:x16; val_offset:1896; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1896, x17, x15, 1896, x18)

inst_492:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x29b3b2 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3a8ea9 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x29b3b2; op2val:0xff3a8ea9; valaddr_reg:x16; val_offset:1904; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1904, x17, x15, 1904, x18)

inst_493:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x29b3b2 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x53653a and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x29b3b2; op2val:0xfed3653a; valaddr_reg:x16; val_offset:1912; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1912, x17, x15, 1912, x18)

inst_494:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x667e2a and fs2 == 1 and fe2 == 0xfb and fm2 == 0x6a577e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7de67e2a; op2val:0xfdea577e; valaddr_reg:x16; val_offset:1920; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1920, x17, x15, 1920, x18)

inst_495:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x2a65f8 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x667e2a and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x802a65f8; op2val:0x7de67e2a; valaddr_reg:x16; val_offset:1928; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1928, x17, x15, 1928, x18)

inst_496:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x667e2a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2a65f8 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7de67e2a; op2val:0x802a65f8; valaddr_reg:x16; val_offset:1936; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1936, x17, x15, 1936, x18)

inst_497:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x29b3b2 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x6a577e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x29b3b2; op2val:0xfdea577e; valaddr_reg:x16; val_offset:1944; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1944, x17, x15, 1944, x18)

inst_498:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x667e2a and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2fb07b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7de67e2a; op2val:0x7e2fb07b; valaddr_reg:x16; val_offset:1952; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1952, x17, x15, 1952, x18)

inst_499:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x3f92c0 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x667e2a and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f92c0; op2val:0x7de67e2a; valaddr_reg:x16; val_offset:1960; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1960, x17, x15, 1960, x18)

inst_500:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x667e2a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f92c0 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7de67e2a; op2val:0x3f92c0; valaddr_reg:x16; val_offset:1968; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1968, x17, x15, 1968, x18)

inst_501:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x29b3b2 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2fb07b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x29b3b2; op2val:0x7e2fb07b; valaddr_reg:x16; val_offset:1976; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1976, x17, x15, 1976, x18)

inst_502:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x29b3b2 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x125b96 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x29b3b2; op2val:0x7f125b96; valaddr_reg:x16; val_offset:1984; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1984, x17, x15, 1984, x18)

inst_503:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x667e2a and fs2 == 0 and fe2 == 0xfb and fm2 == 0x102b16 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7de67e2a; op2val:0x7d902b16; valaddr_reg:x16; val_offset:1992; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1992, x17, x15, 1992, x18)

inst_504:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x1a156b and fs2 == 0 and fe2 == 0xfb and fm2 == 0x667e2a and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x1a156b; op2val:0x7de67e2a; valaddr_reg:x16; val_offset:2000; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 2000, x17, x15, 2000, x18)

inst_505:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x667e2a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x1a156b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7de67e2a; op2val:0x1a156b; valaddr_reg:x16; val_offset:2008; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 2008, x17, x15, 2008, x18)

inst_506:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x29b3b2 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x102b16 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x29b3b2; op2val:0x7d902b16; valaddr_reg:x16; val_offset:2016; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 2016, x17, x15, 2016, x18)

inst_507:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x29b3b2 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3e3f3f and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x29b3b2; op2val:0x7ebe3f3f; valaddr_reg:x16; val_offset:2024; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_3)

inst_508:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x667e2a and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4e622b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7de67e2a; op2val:0x7dce622b; valaddr_reg:x16; val_offset:0; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 0, x17, x15, 0, x18)

inst_509:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x255707 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x667e2a and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x255707; op2val:0x7de67e2a; valaddr_reg:x16; val_offset:8; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 8, x17, x15, 8, x18)

inst_510:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x667e2a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x255707 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7de67e2a; op2val:0x255707; valaddr_reg:x16; val_offset:16; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 16, x17, x15, 16, x18)

inst_511:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x29b3b2 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4e622b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x29b3b2; op2val:0x7dce622b; valaddr_reg:x16; val_offset:24; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 24, x17, x15, 24, x18)

inst_512:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x30e1ae and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30e1ae and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x30e1ae; op2val:0x30e1ae; valaddr_reg:x16; val_offset:32; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 32, x17, x15, 32, x18)

inst_513:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x30e1ae and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0fa668 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x30e1ae; op2val:0x408fa668; valaddr_reg:x16; val_offset:40; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 40, x17, x15, 40, x18)

inst_514:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x30e1ae and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0007f0 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x30e1ae; op2val:0x7f0; valaddr_reg:x16; val_offset:48; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 48, x17, x15, 48, x18)

inst_515:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x30e1ae and fs2 == 0 and fe2 == 0xfc and fm2 == 0x07167c and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x30e1ae; op2val:0x7e07167c; valaddr_reg:x16; val_offset:56; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 56, x17, x15, 56, x18)

inst_516:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x07167c and fs2 == 1 and fe2 == 0xfa and fm2 == 0x2820df and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e07167c; op2val:0xfd2820df; valaddr_reg:x16; val_offset:64; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 64, x17, x15, 64, x18)

inst_517:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0f3596 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x07167c and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800f3596; op2val:0x7e07167c; valaddr_reg:x16; val_offset:72; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 72, x17, x15, 72, x18)

inst_518:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x07167c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0f3596 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e07167c; op2val:0x800f3596; valaddr_reg:x16; val_offset:80; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 80, x17, x15, 80, x18)

inst_519:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x30e1ae and fs2 == 1 and fe2 == 0xfa and fm2 == 0x2820df and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x30e1ae; op2val:0xfd2820df; valaddr_reg:x16; val_offset:88; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 88, x17, x15, 88, x18)

inst_520:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x30e1ae and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x30e1ae; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:96; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 96, x17, x15, 96, x18)

inst_521:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x30e1ae and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3f987b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x30e1ae; op2val:0xff3f987b; valaddr_reg:x16; val_offset:104; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 104, x17, x15, 104, x18)

inst_522:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x30e1ae and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3a8ea9 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x30e1ae; op2val:0xff3a8ea9; valaddr_reg:x16; val_offset:112; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 112, x17, x15, 112, x18)

inst_523:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x30e1ae and fs2 == 1 and fe2 == 0xfd and fm2 == 0x53653a and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x30e1ae; op2val:0xfed3653a; valaddr_reg:x16; val_offset:120; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 120, x17, x15, 120, x18)

inst_524:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x07167c and fs2 == 1 and fe2 == 0xfb and fm2 == 0x6a577e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e07167c; op2val:0xfdea577e; valaddr_reg:x16; val_offset:128; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 128, x17, x15, 128, x18)

inst_525:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x2a65f8 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x07167c and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x802a65f8; op2val:0x7e07167c; valaddr_reg:x16; val_offset:136; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 136, x17, x15, 136, x18)

inst_526:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x07167c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2a65f8 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e07167c; op2val:0x802a65f8; valaddr_reg:x16; val_offset:144; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 144, x17, x15, 144, x18)

inst_527:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x30e1ae and fs2 == 1 and fe2 == 0xfb and fm2 == 0x6a577e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x30e1ae; op2val:0xfdea577e; valaddr_reg:x16; val_offset:152; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 152, x17, x15, 152, x18)

inst_528:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x07167c and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2fb07b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e07167c; op2val:0x7e2fb07b; valaddr_reg:x16; val_offset:160; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 160, x17, x15, 160, x18)

inst_529:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x3f92c0 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x07167c and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f92c0; op2val:0x7e07167c; valaddr_reg:x16; val_offset:168; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 168, x17, x15, 168, x18)

inst_530:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x07167c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f92c0 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e07167c; op2val:0x3f92c0; valaddr_reg:x16; val_offset:176; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 176, x17, x15, 176, x18)

inst_531:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x30e1ae and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2fb07b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x30e1ae; op2val:0x7e2fb07b; valaddr_reg:x16; val_offset:184; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 184, x17, x15, 184, x18)

inst_532:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x30e1ae and fs2 == 0 and fe2 == 0xfe and fm2 == 0x125b96 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x30e1ae; op2val:0x7f125b96; valaddr_reg:x16; val_offset:192; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 192, x17, x15, 192, x18)

inst_533:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x07167c and fs2 == 0 and fe2 == 0xfb and fm2 == 0x102b16 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e07167c; op2val:0x7d902b16; valaddr_reg:x16; val_offset:200; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 200, x17, x15, 200, x18)

inst_534:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x1a156b and fs2 == 0 and fe2 == 0xfc and fm2 == 0x07167c and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x1a156b; op2val:0x7e07167c; valaddr_reg:x16; val_offset:208; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 208, x17, x15, 208, x18)

inst_535:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x07167c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x1a156b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e07167c; op2val:0x1a156b; valaddr_reg:x16; val_offset:216; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 216, x17, x15, 216, x18)

inst_536:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x30e1ae and fs2 == 0 and fe2 == 0xfb and fm2 == 0x102b16 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x30e1ae; op2val:0x7d902b16; valaddr_reg:x16; val_offset:224; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 224, x17, x15, 224, x18)

inst_537:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x30e1ae and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3e3f3f and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x30e1ae; op2val:0x7ebe3f3f; valaddr_reg:x16; val_offset:232; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 232, x17, x15, 232, x18)

inst_538:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x07167c and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4e622b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e07167c; op2val:0x7dce622b; valaddr_reg:x16; val_offset:240; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 240, x17, x15, 240, x18)

inst_539:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x255707 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x07167c and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x255707; op2val:0x7e07167c; valaddr_reg:x16; val_offset:248; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 248, x17, x15, 248, x18)

inst_540:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x07167c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x255707 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e07167c; op2val:0x255707; valaddr_reg:x16; val_offset:256; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 256, x17, x15, 256, x18)

inst_541:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x30e1ae and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4e622b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x30e1ae; op2val:0x7dce622b; valaddr_reg:x16; val_offset:264; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 264, x17, x15, 264, x18)

inst_542:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x2820df and fs2 == 1 and fe2 == 0xfa and fm2 == 0x2820df and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd2820df; op2val:0xfd2820df; valaddr_reg:x16; val_offset:272; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 272, x17, x15, 272, x18)

inst_543:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x2820df and fs2 == 1 and fe2 == 0x7f and fm2 == 0x32c8e8 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd2820df; op2val:0xbfb2c8e8; valaddr_reg:x16; val_offset:280; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 280, x17, x15, 280, x18)

inst_544:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x2820df and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0007f0 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd2820df; op2val:0x7f0; valaddr_reg:x16; val_offset:288; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 288, x17, x15, 288, x18)

inst_545:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x2820df and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0f3596 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd2820df; op2val:0x800f3596; valaddr_reg:x16; val_offset:296; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 296, x17, x15, 296, x18)

inst_546:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0f3596 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3e0acf and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800f3596; op2val:0x803e0acf; valaddr_reg:x16; val_offset:304; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 304, x17, x15, 304, x18)

inst_547:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x2820df and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3e0acf and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd2820df; op2val:0x803e0acf; valaddr_reg:x16; val_offset:312; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 312, x17, x15, 312, x18)

inst_548:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0f3596 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x11d249 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800f3596; op2val:0x8011d249; valaddr_reg:x16; val_offset:320; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 320, x17, x15, 320, x18)

inst_549:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x2820df and fs2 == 1 and fe2 == 0x00 and fm2 == 0x11d249 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd2820df; op2val:0x8011d249; valaddr_reg:x16; val_offset:328; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 328, x17, x15, 328, x18)

inst_550:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0f3596 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x244d8b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800f3596; op2val:0x80244d8b; valaddr_reg:x16; val_offset:336; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 336, x17, x15, 336, x18)

inst_551:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x2820df and fs2 == 1 and fe2 == 0x00 and fm2 == 0x244d8b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd2820df; op2val:0x80244d8b; valaddr_reg:x16; val_offset:344; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 344, x17, x15, 344, x18)

inst_552:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0f3596 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0d858e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800f3596; op2val:0x800d858e; valaddr_reg:x16; val_offset:352; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 352, x17, x15, 352, x18)

inst_553:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x2820df and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0d858e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd2820df; op2val:0x800d858e; valaddr_reg:x16; val_offset:360; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 360, x17, x15, 360, x18)

inst_554:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0f3596 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2facf2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800f3596; op2val:0x802facf2; valaddr_reg:x16; val_offset:368; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 368, x17, x15, 368, x18)

inst_555:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x2820df and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2facf2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd2820df; op2val:0x802facf2; valaddr_reg:x16; val_offset:376; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 376, x17, x15, 376, x18)

inst_556:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0f3596 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39b0fc and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800f3596; op2val:0x39b0fc; valaddr_reg:x16; val_offset:384; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 384, x17, x15, 384, x18)

inst_557:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x2820df and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39b0fc and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd2820df; op2val:0x39b0fc; valaddr_reg:x16; val_offset:392; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 392, x17, x15, 392, x18)

inst_558:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0f3596 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x1c8139 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800f3596; op2val:0x1c8139; valaddr_reg:x16; val_offset:400; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 400, x17, x15, 400, x18)

inst_559:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x2820df and fs2 == 0 and fe2 == 0x00 and fm2 == 0x1c8139 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd2820df; op2val:0x1c8139; valaddr_reg:x16; val_offset:408; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 408, x17, x15, 408, x18)

inst_560:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0f3596 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x357d2c and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800f3596; op2val:0x357d2c; valaddr_reg:x16; val_offset:416; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 416, x17, x15, 416, x18)

inst_561:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x2820df and fs2 == 0 and fe2 == 0x00 and fm2 == 0x357d2c and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd2820df; op2val:0x357d2c; valaddr_reg:x16; val_offset:424; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 424, x17, x15, 424, x18)

inst_562:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0f3596 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x29b3b2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800f3596; op2val:0x29b3b2; valaddr_reg:x16; val_offset:432; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 432, x17, x15, 432, x18)

inst_563:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x2820df and fs2 == 0 and fe2 == 0x00 and fm2 == 0x29b3b2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd2820df; op2val:0x29b3b2; valaddr_reg:x16; val_offset:440; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 440, x17, x15, 440, x18)

inst_564:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0f3596 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30e1ae and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800f3596; op2val:0x30e1ae; valaddr_reg:x16; val_offset:448; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 448, x17, x15, 448, x18)

inst_565:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x2820df and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30e1ae and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd2820df; op2val:0x30e1ae; valaddr_reg:x16; val_offset:456; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 456, x17, x15, 456, x18)

inst_566:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x2820df and fs2 == 1 and fe2 == 0xfd and fm2 == 0x522917 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd2820df; op2val:0xfed22917; valaddr_reg:x16; val_offset:464; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 464, x17, x15, 464, x18)

inst_567:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x522917 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3f987b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfed22917; op2val:0xff3f987b; valaddr_reg:x16; val_offset:472; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 472, x17, x15, 472, x18)

inst_568:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x1946c8 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x522917 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd9946c8; op2val:0xfed22917; valaddr_reg:x16; val_offset:480; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 480, x17, x15, 480, x18)

inst_569:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x522917 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x1946c8 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfed22917; op2val:0xfd9946c8; valaddr_reg:x16; val_offset:488; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 488, x17, x15, 488, x18)

inst_570:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x2820df and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3f987b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd2820df; op2val:0xff3f987b; valaddr_reg:x16; val_offset:496; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 496, x17, x15, 496, x18)

inst_571:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x522917 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3a8ea9 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfed22917; op2val:0xff3a8ea9; valaddr_reg:x16; val_offset:504; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 504, x17, x15, 504, x18)

inst_572:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x153eee and fs2 == 1 and fe2 == 0xfd and fm2 == 0x522917 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd953eee; op2val:0xfed22917; valaddr_reg:x16; val_offset:512; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 512, x17, x15, 512, x18)

inst_573:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x522917 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x153eee and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfed22917; op2val:0xfd953eee; valaddr_reg:x16; val_offset:520; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 520, x17, x15, 520, x18)

inst_574:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x2820df and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3a8ea9 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd2820df; op2val:0xff3a8ea9; valaddr_reg:x16; val_offset:528; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 528, x17, x15, 528, x18)

inst_575:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x522917 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x53653a and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfed22917; op2val:0xfed3653a; valaddr_reg:x16; val_offset:536; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 536, x17, x15, 536, x18)

inst_576:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x291dc8 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x522917 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd291dc8; op2val:0xfed22917; valaddr_reg:x16; val_offset:544; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 544, x17, x15, 544, x18)

inst_577:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x522917 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x291dc8 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfed22917; op2val:0xfd291dc8; valaddr_reg:x16; val_offset:552; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 552, x17, x15, 552, x18)

inst_578:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x2820df and fs2 == 1 and fe2 == 0xfd and fm2 == 0x53653a and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd2820df; op2val:0xfed3653a; valaddr_reg:x16; val_offset:560; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 560, x17, x15, 560, x18)

inst_579:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x2820df and fs2 == 1 and fe2 == 0xfb and fm2 == 0x6a577e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd2820df; op2val:0xfdea577e; valaddr_reg:x16; val_offset:568; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 568, x17, x15, 568, x18)

inst_580:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x6a577e and fs2 == 1 and fe2 == 0xfa and fm2 == 0x2820df and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdea577e; op2val:0xfd2820df; valaddr_reg:x16; val_offset:576; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 576, x17, x15, 576, x18)

inst_581:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x2820df and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2fb07b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd2820df; op2val:0x7e2fb07b; valaddr_reg:x16; val_offset:584; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 584, x17, x15, 584, x18)

inst_582:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2fb07b and fs2 == 1 and fe2 == 0xfa and fm2 == 0x2820df and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e2fb07b; op2val:0xfd2820df; valaddr_reg:x16; val_offset:592; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 592, x17, x15, 592, x18)

inst_583:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x522917 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x125b96 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfed22917; op2val:0x7f125b96; valaddr_reg:x16; val_offset:600; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 600, x17, x15, 600, x18)

inst_584:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6a2c24 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x522917 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d6a2c24; op2val:0xfed22917; valaddr_reg:x16; val_offset:608; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 608, x17, x15, 608, x18)

inst_585:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x522917 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x6a2c24 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfed22917; op2val:0x7d6a2c24; valaddr_reg:x16; val_offset:616; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 616, x17, x15, 616, x18)

inst_586:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x2820df and fs2 == 0 and fe2 == 0xfe and fm2 == 0x125b96 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd2820df; op2val:0x7f125b96; valaddr_reg:x16; val_offset:624; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 624, x17, x15, 624, x18)

inst_587:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x2820df and fs2 == 0 and fe2 == 0xfb and fm2 == 0x102b16 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd2820df; op2val:0x7d902b16; valaddr_reg:x16; val_offset:632; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 632, x17, x15, 632, x18)

inst_588:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x102b16 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x2820df and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d902b16; op2val:0xfd2820df; valaddr_reg:x16; val_offset:640; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 640, x17, x15, 640, x18)

inst_589:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x522917 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3e3f3f and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfed22917; op2val:0x7ebe3f3f; valaddr_reg:x16; val_offset:648; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 648, x17, x15, 648, x18)

inst_590:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x183299 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x522917 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d183299; op2val:0xfed22917; valaddr_reg:x16; val_offset:656; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 656, x17, x15, 656, x18)

inst_591:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x522917 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x183299 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfed22917; op2val:0x7d183299; valaddr_reg:x16; val_offset:664; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 664, x17, x15, 664, x18)

inst_592:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x2820df and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3e3f3f and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd2820df; op2val:0x7ebe3f3f; valaddr_reg:x16; val_offset:672; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 672, x17, x15, 672, x18)

inst_593:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x2820df and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4e622b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd2820df; op2val:0x7dce622b; valaddr_reg:x16; val_offset:680; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 680, x17, x15, 680, x18)

inst_594:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 1 and fe2 == 0xfa and fm2 == 0x2820df and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dce622b; op2val:0xfd2820df; valaddr_reg:x16; val_offset:688; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 688, x17, x15, 688, x18)

inst_595:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x3f987b and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3f987b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff3f987b; op2val:0xff3f987b; valaddr_reg:x16; val_offset:696; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 696, x17, x15, 696, x18)

inst_596:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x3f987b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x22fdd5 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff3f987b; op2val:0xc022fdd5; valaddr_reg:x16; val_offset:704; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 704, x17, x15, 704, x18)

inst_597:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x3f987b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0007f0 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff3f987b; op2val:0x7f0; valaddr_reg:x16; val_offset:712; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 712, x17, x15, 712, x18)

inst_598:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x3f987b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x1bbb48 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff3f987b; op2val:0x801bbb48; valaddr_reg:x16; val_offset:720; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 720, x17, x15, 720, x18)

inst_599:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x1bbb48 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3e0acf and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x801bbb48; op2val:0x803e0acf; valaddr_reg:x16; val_offset:728; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 728, x17, x15, 728, x18)

inst_600:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x3f987b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3e0acf and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff3f987b; op2val:0x803e0acf; valaddr_reg:x16; val_offset:736; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 736, x17, x15, 736, x18)

inst_601:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x1bbb48 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x11d249 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x801bbb48; op2val:0x8011d249; valaddr_reg:x16; val_offset:744; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 744, x17, x15, 744, x18)

inst_602:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x3f987b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x11d249 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff3f987b; op2val:0x8011d249; valaddr_reg:x16; val_offset:752; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 752, x17, x15, 752, x18)

inst_603:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x1bbb48 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x244d8b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x801bbb48; op2val:0x80244d8b; valaddr_reg:x16; val_offset:760; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 760, x17, x15, 760, x18)

inst_604:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x3f987b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x244d8b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff3f987b; op2val:0x80244d8b; valaddr_reg:x16; val_offset:768; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 768, x17, x15, 768, x18)

inst_605:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x1bbb48 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0d858e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x801bbb48; op2val:0x800d858e; valaddr_reg:x16; val_offset:776; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 776, x17, x15, 776, x18)

inst_606:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x3f987b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0d858e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff3f987b; op2val:0x800d858e; valaddr_reg:x16; val_offset:784; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 784, x17, x15, 784, x18)

inst_607:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x1bbb48 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2facf2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x801bbb48; op2val:0x802facf2; valaddr_reg:x16; val_offset:792; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 792, x17, x15, 792, x18)

inst_608:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x3f987b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2facf2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff3f987b; op2val:0x802facf2; valaddr_reg:x16; val_offset:800; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 800, x17, x15, 800, x18)

inst_609:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x1bbb48 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39b0fc and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x801bbb48; op2val:0x39b0fc; valaddr_reg:x16; val_offset:808; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 808, x17, x15, 808, x18)

inst_610:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x3f987b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39b0fc and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff3f987b; op2val:0x39b0fc; valaddr_reg:x16; val_offset:816; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 816, x17, x15, 816, x18)

inst_611:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x1bbb48 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x1c8139 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x801bbb48; op2val:0x1c8139; valaddr_reg:x16; val_offset:824; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 824, x17, x15, 824, x18)

inst_612:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x3f987b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x1c8139 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff3f987b; op2val:0x1c8139; valaddr_reg:x16; val_offset:832; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 832, x17, x15, 832, x18)

inst_613:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x1bbb48 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x357d2c and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x801bbb48; op2val:0x357d2c; valaddr_reg:x16; val_offset:840; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 840, x17, x15, 840, x18)

inst_614:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x3f987b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x357d2c and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff3f987b; op2val:0x357d2c; valaddr_reg:x16; val_offset:848; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 848, x17, x15, 848, x18)

inst_615:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x1bbb48 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x29b3b2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x801bbb48; op2val:0x29b3b2; valaddr_reg:x16; val_offset:856; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 856, x17, x15, 856, x18)

inst_616:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x3f987b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x29b3b2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff3f987b; op2val:0x29b3b2; valaddr_reg:x16; val_offset:864; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 864, x17, x15, 864, x18)

inst_617:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x1bbb48 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30e1ae and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x801bbb48; op2val:0x30e1ae; valaddr_reg:x16; val_offset:872; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 872, x17, x15, 872, x18)

inst_618:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x3f987b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30e1ae and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff3f987b; op2val:0x30e1ae; valaddr_reg:x16; val_offset:880; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 880, x17, x15, 880, x18)

inst_619:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x3f987b and fs2 == 1 and fe2 == 0xfb and fm2 == 0x1946c8 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff3f987b; op2val:0xfd9946c8; valaddr_reg:x16; val_offset:888; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 888, x17, x15, 888, x18)

inst_620:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x1946c8 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x2820df and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd9946c8; op2val:0xfd2820df; valaddr_reg:x16; val_offset:896; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 896, x17, x15, 896, x18)

inst_621:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x3f987b and fs2 == 1 and fe2 == 0xfa and fm2 == 0x2820df and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff3f987b; op2val:0xfd2820df; valaddr_reg:x16; val_offset:904; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 904, x17, x15, 904, x18)

inst_622:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x3f987b and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3a8ea9 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff3f987b; op2val:0xff3a8ea9; valaddr_reg:x16; val_offset:912; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 912, x17, x15, 912, x18)

inst_623:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x3a8ea9 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3f987b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff3a8ea9; op2val:0xff3f987b; valaddr_reg:x16; val_offset:920; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 920, x17, x15, 920, x18)

inst_624:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x3f987b and fs2 == 1 and fe2 == 0xfd and fm2 == 0x53653a and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff3f987b; op2val:0xfed3653a; valaddr_reg:x16; val_offset:928; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 928, x17, x15, 928, x18)

inst_625:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x53653a and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3f987b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfed3653a; op2val:0xff3f987b; valaddr_reg:x16; val_offset:936; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 936, x17, x15, 936, x18)

inst_626:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x1946c8 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x6a577e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd9946c8; op2val:0xfdea577e; valaddr_reg:x16; val_offset:944; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 944, x17, x15, 944, x18)

inst_627:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfb and fm2 == 0x1946c8 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd9946c8; valaddr_reg:x16; val_offset:952; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 952, x17, x15, 952, x18)

inst_628:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x1946c8 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd9946c8; op2val:0xff7fffff; valaddr_reg:x16; val_offset:960; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 960, x17, x15, 960, x18)

inst_629:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x3f987b and fs2 == 1 and fe2 == 0xfb and fm2 == 0x6a577e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff3f987b; op2val:0xfdea577e; valaddr_reg:x16; val_offset:968; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 968, x17, x15, 968, x18)

inst_630:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x1946c8 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2fb07b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd9946c8; op2val:0x7e2fb07b; valaddr_reg:x16; val_offset:976; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 976, x17, x15, 976, x18)

inst_631:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfb and fm2 == 0x1946c8 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0xfd9946c8; valaddr_reg:x16; val_offset:984; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 984, x17, x15, 984, x18)

inst_632:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x1946c8 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd9946c8; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:992; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 992, x17, x15, 992, x18)

inst_633:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x3f987b and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2fb07b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff3f987b; op2val:0x7e2fb07b; valaddr_reg:x16; val_offset:1000; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1000, x17, x15, 1000, x18)

inst_634:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x3f987b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x125b96 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff3f987b; op2val:0x7f125b96; valaddr_reg:x16; val_offset:1008; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1008, x17, x15, 1008, x18)

inst_635:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x125b96 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3f987b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f125b96; op2val:0xff3f987b; valaddr_reg:x16; val_offset:1016; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1016, x17, x15, 1016, x18)

inst_636:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x1946c8 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x102b16 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd9946c8; op2val:0x7d902b16; valaddr_reg:x16; val_offset:1024; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1024, x17, x15, 1024, x18)

inst_637:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3435dc and fs2 == 1 and fe2 == 0xfb and fm2 == 0x1946c8 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3435dc; op2val:0xfd9946c8; valaddr_reg:x16; val_offset:1032; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1032, x17, x15, 1032, x18)

inst_638:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x1946c8 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3435dc and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd9946c8; op2val:0x7f3435dc; valaddr_reg:x16; val_offset:1040; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1040, x17, x15, 1040, x18)

inst_639:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x3f987b and fs2 == 0 and fe2 == 0xfb and fm2 == 0x102b16 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff3f987b; op2val:0x7d902b16; valaddr_reg:x16; val_offset:1048; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1048, x17, x15, 1048, x18)

inst_640:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x3f987b and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3e3f3f and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff3f987b; op2val:0x7ebe3f3f; valaddr_reg:x16; val_offset:1056; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1056, x17, x15, 1056, x18)

inst_641:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3e3f3f and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3f987b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ebe3f3f; op2val:0xff3f987b; valaddr_reg:x16; val_offset:1064; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1064, x17, x15, 1064, x18)

inst_642:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x1946c8 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4e622b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd9946c8; op2val:0x7dce622b; valaddr_reg:x16; val_offset:1072; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1072, x17, x15, 1072, x18)

inst_643:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x3f987b and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4e622b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff3f987b; op2val:0x7dce622b; valaddr_reg:x16; val_offset:1080; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1080, x17, x15, 1080, x18)

inst_644:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x3a8ea9 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3a8ea9 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff3a8ea9; op2val:0xff3a8ea9; valaddr_reg:x16; val_offset:1088; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1088, x17, x15, 1088, x18)

inst_645:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x3a8ea9 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1eb493 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff3a8ea9; op2val:0xc01eb493; valaddr_reg:x16; val_offset:1096; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1096, x17, x15, 1096, x18)

inst_646:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x3a8ea9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0007f0 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff3a8ea9; op2val:0x7f0; valaddr_reg:x16; val_offset:1104; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1104, x17, x15, 1104, x18)

inst_647:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x3a8ea9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x1b0098 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff3a8ea9; op2val:0x801b0098; valaddr_reg:x16; val_offset:1112; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1112, x17, x15, 1112, x18)

inst_648:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x1b0098 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3e0acf and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x801b0098; op2val:0x803e0acf; valaddr_reg:x16; val_offset:1120; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1120, x17, x15, 1120, x18)

inst_649:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x3a8ea9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3e0acf and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff3a8ea9; op2val:0x803e0acf; valaddr_reg:x16; val_offset:1128; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1128, x17, x15, 1128, x18)

inst_650:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x1b0098 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x11d249 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x801b0098; op2val:0x8011d249; valaddr_reg:x16; val_offset:1136; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1136, x17, x15, 1136, x18)

inst_651:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x3a8ea9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x11d249 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff3a8ea9; op2val:0x8011d249; valaddr_reg:x16; val_offset:1144; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1144, x17, x15, 1144, x18)

inst_652:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x1b0098 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x244d8b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x801b0098; op2val:0x80244d8b; valaddr_reg:x16; val_offset:1152; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1152, x17, x15, 1152, x18)

inst_653:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x3a8ea9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x244d8b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff3a8ea9; op2val:0x80244d8b; valaddr_reg:x16; val_offset:1160; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1160, x17, x15, 1160, x18)

inst_654:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x1b0098 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0d858e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x801b0098; op2val:0x800d858e; valaddr_reg:x16; val_offset:1168; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1168, x17, x15, 1168, x18)

inst_655:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x3a8ea9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0d858e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff3a8ea9; op2val:0x800d858e; valaddr_reg:x16; val_offset:1176; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1176, x17, x15, 1176, x18)

inst_656:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x1b0098 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2facf2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x801b0098; op2val:0x802facf2; valaddr_reg:x16; val_offset:1184; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1184, x17, x15, 1184, x18)

inst_657:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x3a8ea9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2facf2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff3a8ea9; op2val:0x802facf2; valaddr_reg:x16; val_offset:1192; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1192, x17, x15, 1192, x18)

inst_658:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x1b0098 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39b0fc and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x801b0098; op2val:0x39b0fc; valaddr_reg:x16; val_offset:1200; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1200, x17, x15, 1200, x18)

inst_659:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x3a8ea9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39b0fc and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff3a8ea9; op2val:0x39b0fc; valaddr_reg:x16; val_offset:1208; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1208, x17, x15, 1208, x18)

inst_660:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x1b0098 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x1c8139 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x801b0098; op2val:0x1c8139; valaddr_reg:x16; val_offset:1216; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1216, x17, x15, 1216, x18)

inst_661:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x3a8ea9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x1c8139 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff3a8ea9; op2val:0x1c8139; valaddr_reg:x16; val_offset:1224; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1224, x17, x15, 1224, x18)

inst_662:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x1b0098 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x357d2c and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x801b0098; op2val:0x357d2c; valaddr_reg:x16; val_offset:1232; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1232, x17, x15, 1232, x18)

inst_663:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x3a8ea9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x357d2c and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff3a8ea9; op2val:0x357d2c; valaddr_reg:x16; val_offset:1240; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1240, x17, x15, 1240, x18)

inst_664:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x1b0098 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x29b3b2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x801b0098; op2val:0x29b3b2; valaddr_reg:x16; val_offset:1248; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1248, x17, x15, 1248, x18)

inst_665:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x3a8ea9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x29b3b2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff3a8ea9; op2val:0x29b3b2; valaddr_reg:x16; val_offset:1256; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1256, x17, x15, 1256, x18)

inst_666:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x1b0098 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30e1ae and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x801b0098; op2val:0x30e1ae; valaddr_reg:x16; val_offset:1264; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1264, x17, x15, 1264, x18)

inst_667:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x3a8ea9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30e1ae and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff3a8ea9; op2val:0x30e1ae; valaddr_reg:x16; val_offset:1272; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1272, x17, x15, 1272, x18)

inst_668:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x3a8ea9 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x153eee and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff3a8ea9; op2val:0xfd953eee; valaddr_reg:x16; val_offset:1280; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1280, x17, x15, 1280, x18)

inst_669:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x153eee and fs2 == 1 and fe2 == 0xfa and fm2 == 0x2820df and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd953eee; op2val:0xfd2820df; valaddr_reg:x16; val_offset:1288; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1288, x17, x15, 1288, x18)

inst_670:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x3a8ea9 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x2820df and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff3a8ea9; op2val:0xfd2820df; valaddr_reg:x16; val_offset:1296; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1296, x17, x15, 1296, x18)

inst_671:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x3a8ea9 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x53653a and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff3a8ea9; op2val:0xfed3653a; valaddr_reg:x16; val_offset:1304; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1304, x17, x15, 1304, x18)

inst_672:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x53653a and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3a8ea9 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfed3653a; op2val:0xff3a8ea9; valaddr_reg:x16; val_offset:1312; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1312, x17, x15, 1312, x18)

inst_673:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x153eee and fs2 == 1 and fe2 == 0xfb and fm2 == 0x6a577e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd953eee; op2val:0xfdea577e; valaddr_reg:x16; val_offset:1320; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1320, x17, x15, 1320, x18)

inst_674:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfb and fm2 == 0x153eee and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd953eee; valaddr_reg:x16; val_offset:1328; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1328, x17, x15, 1328, x18)

inst_675:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x153eee and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd953eee; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1336; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1336, x17, x15, 1336, x18)

inst_676:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x3a8ea9 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x6a577e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff3a8ea9; op2val:0xfdea577e; valaddr_reg:x16; val_offset:1344; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1344, x17, x15, 1344, x18)

inst_677:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x153eee and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2fb07b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd953eee; op2val:0x7e2fb07b; valaddr_reg:x16; val_offset:1352; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1352, x17, x15, 1352, x18)

inst_678:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfb and fm2 == 0x153eee and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0xfd953eee; valaddr_reg:x16; val_offset:1360; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1360, x17, x15, 1360, x18)

inst_679:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x153eee and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd953eee; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1368; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1368, x17, x15, 1368, x18)

inst_680:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x3a8ea9 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2fb07b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff3a8ea9; op2val:0x7e2fb07b; valaddr_reg:x16; val_offset:1376; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1376, x17, x15, 1376, x18)

inst_681:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x3a8ea9 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x125b96 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff3a8ea9; op2val:0x7f125b96; valaddr_reg:x16; val_offset:1384; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1384, x17, x15, 1384, x18)

inst_682:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x125b96 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3a8ea9 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f125b96; op2val:0xff3a8ea9; valaddr_reg:x16; val_offset:1392; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1392, x17, x15, 1392, x18)

inst_683:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x153eee and fs2 == 0 and fe2 == 0xfb and fm2 == 0x102b16 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd953eee; op2val:0x7d902b16; valaddr_reg:x16; val_offset:1400; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1400, x17, x15, 1400, x18)

inst_684:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3435dc and fs2 == 1 and fe2 == 0xfb and fm2 == 0x153eee and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3435dc; op2val:0xfd953eee; valaddr_reg:x16; val_offset:1408; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1408, x17, x15, 1408, x18)

inst_685:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x153eee and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3435dc and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd953eee; op2val:0x7f3435dc; valaddr_reg:x16; val_offset:1416; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1416, x17, x15, 1416, x18)

inst_686:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x3a8ea9 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x102b16 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff3a8ea9; op2val:0x7d902b16; valaddr_reg:x16; val_offset:1424; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1424, x17, x15, 1424, x18)

inst_687:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x3a8ea9 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3e3f3f and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff3a8ea9; op2val:0x7ebe3f3f; valaddr_reg:x16; val_offset:1432; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1432, x17, x15, 1432, x18)

inst_688:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3e3f3f and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3a8ea9 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ebe3f3f; op2val:0xff3a8ea9; valaddr_reg:x16; val_offset:1440; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1440, x17, x15, 1440, x18)

inst_689:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x153eee and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4e622b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd953eee; op2val:0x7dce622b; valaddr_reg:x16; val_offset:1448; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1448, x17, x15, 1448, x18)

inst_690:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x3a8ea9 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4e622b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff3a8ea9; op2val:0x7dce622b; valaddr_reg:x16; val_offset:1456; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1456, x17, x15, 1456, x18)

inst_691:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x53653a and fs2 == 1 and fe2 == 0xfd and fm2 == 0x53653a and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfed3653a; op2val:0xfed3653a; valaddr_reg:x16; val_offset:1464; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1464, x17, x15, 1464, x18)

inst_692:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x53653a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x33d5d8 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfed3653a; op2val:0xbfb3d5d8; valaddr_reg:x16; val_offset:1472; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1472, x17, x15, 1472, x18)

inst_693:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x53653a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0007f0 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfed3653a; op2val:0x7f0; valaddr_reg:x16; val_offset:1480; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1480, x17, x15, 1480, x18)

inst_694:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x53653a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0f4c77 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfed3653a; op2val:0x800f4c77; valaddr_reg:x16; val_offset:1488; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1488, x17, x15, 1488, x18)

inst_695:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0f4c77 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3e0acf and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800f4c77; op2val:0x803e0acf; valaddr_reg:x16; val_offset:1496; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1496, x17, x15, 1496, x18)

inst_696:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x53653a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3e0acf and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfed3653a; op2val:0x803e0acf; valaddr_reg:x16; val_offset:1504; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1504, x17, x15, 1504, x18)

inst_697:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0f4c77 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x11d249 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800f4c77; op2val:0x8011d249; valaddr_reg:x16; val_offset:1512; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1512, x17, x15, 1512, x18)

inst_698:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x53653a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x11d249 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfed3653a; op2val:0x8011d249; valaddr_reg:x16; val_offset:1520; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1520, x17, x15, 1520, x18)

inst_699:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0f4c77 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x244d8b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800f4c77; op2val:0x80244d8b; valaddr_reg:x16; val_offset:1528; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1528, x17, x15, 1528, x18)

inst_700:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x53653a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x244d8b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfed3653a; op2val:0x80244d8b; valaddr_reg:x16; val_offset:1536; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1536, x17, x15, 1536, x18)

inst_701:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0f4c77 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0d858e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800f4c77; op2val:0x800d858e; valaddr_reg:x16; val_offset:1544; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1544, x17, x15, 1544, x18)

inst_702:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x53653a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0d858e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfed3653a; op2val:0x800d858e; valaddr_reg:x16; val_offset:1552; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1552, x17, x15, 1552, x18)

inst_703:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0f4c77 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2facf2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800f4c77; op2val:0x802facf2; valaddr_reg:x16; val_offset:1560; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1560, x17, x15, 1560, x18)

inst_704:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x53653a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2facf2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfed3653a; op2val:0x802facf2; valaddr_reg:x16; val_offset:1568; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1568, x17, x15, 1568, x18)

inst_705:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0f4c77 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39b0fc and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800f4c77; op2val:0x39b0fc; valaddr_reg:x16; val_offset:1576; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1576, x17, x15, 1576, x18)

inst_706:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x53653a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39b0fc and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfed3653a; op2val:0x39b0fc; valaddr_reg:x16; val_offset:1584; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1584, x17, x15, 1584, x18)

inst_707:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0f4c77 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x1c8139 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800f4c77; op2val:0x1c8139; valaddr_reg:x16; val_offset:1592; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1592, x17, x15, 1592, x18)

inst_708:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x53653a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x1c8139 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfed3653a; op2val:0x1c8139; valaddr_reg:x16; val_offset:1600; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1600, x17, x15, 1600, x18)

inst_709:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0f4c77 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x357d2c and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800f4c77; op2val:0x357d2c; valaddr_reg:x16; val_offset:1608; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1608, x17, x15, 1608, x18)

inst_710:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x53653a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x357d2c and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfed3653a; op2val:0x357d2c; valaddr_reg:x16; val_offset:1616; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1616, x17, x15, 1616, x18)

inst_711:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0f4c77 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x29b3b2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800f4c77; op2val:0x29b3b2; valaddr_reg:x16; val_offset:1624; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1624, x17, x15, 1624, x18)

inst_712:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x53653a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x29b3b2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfed3653a; op2val:0x29b3b2; valaddr_reg:x16; val_offset:1632; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1632, x17, x15, 1632, x18)

inst_713:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x0f4c77 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30e1ae and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x800f4c77; op2val:0x30e1ae; valaddr_reg:x16; val_offset:1640; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1640, x17, x15, 1640, x18)

inst_714:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x53653a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30e1ae and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfed3653a; op2val:0x30e1ae; valaddr_reg:x16; val_offset:1648; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1648, x17, x15, 1648, x18)

inst_715:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x53653a and fs2 == 1 and fe2 == 0xfa and fm2 == 0x291dc8 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfed3653a; op2val:0xfd291dc8; valaddr_reg:x16; val_offset:1656; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1656, x17, x15, 1656, x18)

inst_716:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x291dc8 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x2820df and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd291dc8; op2val:0xfd2820df; valaddr_reg:x16; val_offset:1664; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1664, x17, x15, 1664, x18)

inst_717:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x53653a and fs2 == 1 and fe2 == 0xfa and fm2 == 0x2820df and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfed3653a; op2val:0xfd2820df; valaddr_reg:x16; val_offset:1672; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1672, x17, x15, 1672, x18)

inst_718:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x291dc8 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x6a577e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd291dc8; op2val:0xfdea577e; valaddr_reg:x16; val_offset:1680; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1680, x17, x15, 1680, x18)

inst_719:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfa and fm2 == 0x291dc8 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0xfd291dc8; valaddr_reg:x16; val_offset:1688; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1688, x17, x15, 1688, x18)

inst_720:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x291dc8 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd291dc8; op2val:0xff7fffff; valaddr_reg:x16; val_offset:1696; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1696, x17, x15, 1696, x18)

inst_721:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x53653a and fs2 == 1 and fe2 == 0xfb and fm2 == 0x6a577e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfed3653a; op2val:0xfdea577e; valaddr_reg:x16; val_offset:1704; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1704, x17, x15, 1704, x18)

inst_722:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x291dc8 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2fb07b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd291dc8; op2val:0x7e2fb07b; valaddr_reg:x16; val_offset:1712; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1712, x17, x15, 1712, x18)

inst_723:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfa and fm2 == 0x291dc8 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0xfd291dc8; valaddr_reg:x16; val_offset:1720; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1720, x17, x15, 1720, x18)

inst_724:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x291dc8 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd291dc8; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1728; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1728, x17, x15, 1728, x18)

inst_725:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x53653a and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2fb07b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfed3653a; op2val:0x7e2fb07b; valaddr_reg:x16; val_offset:1736; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1736, x17, x15, 1736, x18)

inst_726:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x53653a and fs2 == 0 and fe2 == 0xfe and fm2 == 0x125b96 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfed3653a; op2val:0x7f125b96; valaddr_reg:x16; val_offset:1744; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1744, x17, x15, 1744, x18)

inst_727:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x125b96 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x53653a and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f125b96; op2val:0xfed3653a; valaddr_reg:x16; val_offset:1752; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1752, x17, x15, 1752, x18)

inst_728:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x291dc8 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x102b16 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd291dc8; op2val:0x7d902b16; valaddr_reg:x16; val_offset:1760; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1760, x17, x15, 1760, x18)

inst_729:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3435dc and fs2 == 1 and fe2 == 0xfa and fm2 == 0x291dc8 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3435dc; op2val:0xfd291dc8; valaddr_reg:x16; val_offset:1768; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1768, x17, x15, 1768, x18)

inst_730:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x291dc8 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3435dc and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd291dc8; op2val:0x7f3435dc; valaddr_reg:x16; val_offset:1776; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1776, x17, x15, 1776, x18)

inst_731:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x53653a and fs2 == 0 and fe2 == 0xfb and fm2 == 0x102b16 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfed3653a; op2val:0x7d902b16; valaddr_reg:x16; val_offset:1784; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1784, x17, x15, 1784, x18)

inst_732:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x53653a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3e3f3f and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfed3653a; op2val:0x7ebe3f3f; valaddr_reg:x16; val_offset:1792; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1792, x17, x15, 1792, x18)

inst_733:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3e3f3f and fs2 == 1 and fe2 == 0xfd and fm2 == 0x53653a and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ebe3f3f; op2val:0xfed3653a; valaddr_reg:x16; val_offset:1800; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1800, x17, x15, 1800, x18)

inst_734:
// fs1 == 1 and fe1 == 0xfa and fm1 == 0x291dc8 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4e622b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfd291dc8; op2val:0x7dce622b; valaddr_reg:x16; val_offset:1808; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1808, x17, x15, 1808, x18)

inst_735:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x53653a and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4e622b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfed3653a; op2val:0x7dce622b; valaddr_reg:x16; val_offset:1816; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1816, x17, x15, 1816, x18)

inst_736:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x6a577e and fs2 == 1 and fe2 == 0xfb and fm2 == 0x6a577e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdea577e; op2val:0xfdea577e; valaddr_reg:x16; val_offset:1824; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1824, x17, x15, 1824, x18)

inst_737:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x6a577e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7931e5 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdea577e; op2val:0xc07931e5; valaddr_reg:x16; val_offset:1832; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1832, x17, x15, 1832, x18)

inst_738:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x6a577e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0007f0 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdea577e; op2val:0x7f0; valaddr_reg:x16; val_offset:1840; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1840, x17, x15, 1840, x18)

inst_739:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x6a577e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2a65f8 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdea577e; op2val:0x802a65f8; valaddr_reg:x16; val_offset:1848; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1848, x17, x15, 1848, x18)

inst_740:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x2a65f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3e0acf and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x802a65f8; op2val:0x803e0acf; valaddr_reg:x16; val_offset:1856; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1856, x17, x15, 1856, x18)

inst_741:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x6a577e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3e0acf and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdea577e; op2val:0x803e0acf; valaddr_reg:x16; val_offset:1864; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1864, x17, x15, 1864, x18)

inst_742:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x2a65f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x11d249 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x802a65f8; op2val:0x8011d249; valaddr_reg:x16; val_offset:1872; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1872, x17, x15, 1872, x18)

inst_743:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x6a577e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x11d249 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdea577e; op2val:0x8011d249; valaddr_reg:x16; val_offset:1880; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1880, x17, x15, 1880, x18)

inst_744:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x2a65f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x244d8b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x802a65f8; op2val:0x80244d8b; valaddr_reg:x16; val_offset:1888; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1888, x17, x15, 1888, x18)

inst_745:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x6a577e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x244d8b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdea577e; op2val:0x80244d8b; valaddr_reg:x16; val_offset:1896; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1896, x17, x15, 1896, x18)

inst_746:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x2a65f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0d858e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x802a65f8; op2val:0x800d858e; valaddr_reg:x16; val_offset:1904; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1904, x17, x15, 1904, x18)

inst_747:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x6a577e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0d858e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdea577e; op2val:0x800d858e; valaddr_reg:x16; val_offset:1912; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1912, x17, x15, 1912, x18)

inst_748:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x2a65f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2facf2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x802a65f8; op2val:0x802facf2; valaddr_reg:x16; val_offset:1920; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1920, x17, x15, 1920, x18)

inst_749:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x6a577e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2facf2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdea577e; op2val:0x802facf2; valaddr_reg:x16; val_offset:1928; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1928, x17, x15, 1928, x18)

inst_750:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x2a65f8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39b0fc and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x802a65f8; op2val:0x39b0fc; valaddr_reg:x16; val_offset:1936; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1936, x17, x15, 1936, x18)

inst_751:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x6a577e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39b0fc and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdea577e; op2val:0x39b0fc; valaddr_reg:x16; val_offset:1944; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1944, x17, x15, 1944, x18)

inst_752:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x2a65f8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x1c8139 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x802a65f8; op2val:0x1c8139; valaddr_reg:x16; val_offset:1952; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1952, x17, x15, 1952, x18)

inst_753:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x6a577e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x1c8139 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdea577e; op2val:0x1c8139; valaddr_reg:x16; val_offset:1960; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1960, x17, x15, 1960, x18)

inst_754:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x2a65f8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x357d2c and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x802a65f8; op2val:0x357d2c; valaddr_reg:x16; val_offset:1968; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1968, x17, x15, 1968, x18)

inst_755:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x6a577e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x357d2c and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdea577e; op2val:0x357d2c; valaddr_reg:x16; val_offset:1976; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1976, x17, x15, 1976, x18)

inst_756:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x2a65f8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x29b3b2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x802a65f8; op2val:0x29b3b2; valaddr_reg:x16; val_offset:1984; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1984, x17, x15, 1984, x18)

inst_757:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x6a577e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x29b3b2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdea577e; op2val:0x29b3b2; valaddr_reg:x16; val_offset:1992; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1992, x17, x15, 1992, x18)

inst_758:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x2a65f8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30e1ae and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x802a65f8; op2val:0x30e1ae; valaddr_reg:x16; val_offset:2000; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 2000, x17, x15, 2000, x18)

inst_759:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x6a577e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30e1ae and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdea577e; op2val:0x30e1ae; valaddr_reg:x16; val_offset:2008; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 2008, x17, x15, 2008, x18)

inst_760:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x6a577e and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdea577e; op2val:0xff7fffff; valaddr_reg:x16; val_offset:2016; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 2016, x17, x15, 2016, x18)

inst_761:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x6a577e and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3f987b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdea577e; op2val:0xff3f987b; valaddr_reg:x16; val_offset:2024; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_4)

inst_762:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x6a577e and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3a8ea9 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdea577e; op2val:0xff3a8ea9; valaddr_reg:x16; val_offset:0; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 0, x17, x15, 0, x18)

inst_763:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x6a577e and fs2 == 1 and fe2 == 0xfd and fm2 == 0x53653a and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdea577e; op2val:0xfed3653a; valaddr_reg:x16; val_offset:8; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 8, x17, x15, 8, x18)

inst_764:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x6a577e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2fb07b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdea577e; op2val:0x7e2fb07b; valaddr_reg:x16; val_offset:16; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 16, x17, x15, 16, x18)

inst_765:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2fb07b and fs2 == 1 and fe2 == 0xfb and fm2 == 0x6a577e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e2fb07b; op2val:0xfdea577e; valaddr_reg:x16; val_offset:24; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 24, x17, x15, 24, x18)

inst_766:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6a2c24 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d6a2c24; op2val:0xff7fffff; valaddr_reg:x16; val_offset:32; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 32, x17, x15, 32, x18)

inst_767:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x6a2c24 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0x7d6a2c24; valaddr_reg:x16; val_offset:40; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 40, x17, x15, 40, x18)

inst_768:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x6a577e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x125b96 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdea577e; op2val:0x7f125b96; valaddr_reg:x16; val_offset:48; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 48, x17, x15, 48, x18)

inst_769:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x6a577e and fs2 == 0 and fe2 == 0xfb and fm2 == 0x102b16 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdea577e; op2val:0x7d902b16; valaddr_reg:x16; val_offset:56; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 56, x17, x15, 56, x18)

inst_770:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x102b16 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x6a577e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d902b16; op2val:0xfdea577e; valaddr_reg:x16; val_offset:64; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 64, x17, x15, 64, x18)

inst_771:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x183299 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d183299; op2val:0xff7fffff; valaddr_reg:x16; val_offset:72; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 72, x17, x15, 72, x18)

inst_772:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x183299 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xff7fffff; op2val:0x7d183299; valaddr_reg:x16; val_offset:80; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 80, x17, x15, 80, x18)

inst_773:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x6a577e and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3e3f3f and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdea577e; op2val:0x7ebe3f3f; valaddr_reg:x16; val_offset:88; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 88, x17, x15, 88, x18)

inst_774:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x6a577e and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4e622b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xfdea577e; op2val:0x7dce622b; valaddr_reg:x16; val_offset:96; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 96, x17, x15, 96, x18)

inst_775:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 1 and fe2 == 0xfb and fm2 == 0x6a577e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dce622b; op2val:0xfdea577e; valaddr_reg:x16; val_offset:104; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 104, x17, x15, 104, x18)

inst_776:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2fb07b and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2fb07b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e2fb07b; op2val:0x7e2fb07b; valaddr_reg:x16; val_offset:112; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 112, x17, x15, 112, x18)

inst_777:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2fb07b and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3ad332 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e2fb07b; op2val:0x40bad332; valaddr_reg:x16; val_offset:120; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 120, x17, x15, 120, x18)

inst_778:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2fb07b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0007f0 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e2fb07b; op2val:0x7f0; valaddr_reg:x16; val_offset:128; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 128, x17, x15, 128, x18)

inst_779:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2fb07b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f92c0 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e2fb07b; op2val:0x3f92c0; valaddr_reg:x16; val_offset:136; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 136, x17, x15, 136, x18)

inst_780:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x3f92c0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3e0acf and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f92c0; op2val:0x803e0acf; valaddr_reg:x16; val_offset:144; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 144, x17, x15, 144, x18)

inst_781:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2fb07b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3e0acf and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e2fb07b; op2val:0x803e0acf; valaddr_reg:x16; val_offset:152; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 152, x17, x15, 152, x18)

inst_782:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x3f92c0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x11d249 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f92c0; op2val:0x8011d249; valaddr_reg:x16; val_offset:160; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 160, x17, x15, 160, x18)

inst_783:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2fb07b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x11d249 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e2fb07b; op2val:0x8011d249; valaddr_reg:x16; val_offset:168; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 168, x17, x15, 168, x18)

inst_784:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x3f92c0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x244d8b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f92c0; op2val:0x80244d8b; valaddr_reg:x16; val_offset:176; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 176, x17, x15, 176, x18)

inst_785:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2fb07b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x244d8b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e2fb07b; op2val:0x80244d8b; valaddr_reg:x16; val_offset:184; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 184, x17, x15, 184, x18)

inst_786:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x3f92c0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0d858e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f92c0; op2val:0x800d858e; valaddr_reg:x16; val_offset:192; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 192, x17, x15, 192, x18)

inst_787:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2fb07b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0d858e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e2fb07b; op2val:0x800d858e; valaddr_reg:x16; val_offset:200; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 200, x17, x15, 200, x18)

inst_788:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x3f92c0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2facf2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f92c0; op2val:0x802facf2; valaddr_reg:x16; val_offset:208; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 208, x17, x15, 208, x18)

inst_789:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2fb07b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2facf2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e2fb07b; op2val:0x802facf2; valaddr_reg:x16; val_offset:216; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 216, x17, x15, 216, x18)

inst_790:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x3f92c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39b0fc and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f92c0; op2val:0x39b0fc; valaddr_reg:x16; val_offset:224; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 224, x17, x15, 224, x18)

inst_791:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2fb07b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39b0fc and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e2fb07b; op2val:0x39b0fc; valaddr_reg:x16; val_offset:232; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 232, x17, x15, 232, x18)

inst_792:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x3f92c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x1c8139 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f92c0; op2val:0x1c8139; valaddr_reg:x16; val_offset:240; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 240, x17, x15, 240, x18)

inst_793:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2fb07b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x1c8139 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e2fb07b; op2val:0x1c8139; valaddr_reg:x16; val_offset:248; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 248, x17, x15, 248, x18)

inst_794:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x3f92c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x357d2c and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f92c0; op2val:0x357d2c; valaddr_reg:x16; val_offset:256; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 256, x17, x15, 256, x18)

inst_795:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2fb07b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x357d2c and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e2fb07b; op2val:0x357d2c; valaddr_reg:x16; val_offset:264; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 264, x17, x15, 264, x18)

inst_796:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x3f92c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x29b3b2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f92c0; op2val:0x29b3b2; valaddr_reg:x16; val_offset:272; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 272, x17, x15, 272, x18)

inst_797:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2fb07b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x29b3b2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e2fb07b; op2val:0x29b3b2; valaddr_reg:x16; val_offset:280; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 280, x17, x15, 280, x18)

inst_798:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x3f92c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30e1ae and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x3f92c0; op2val:0x30e1ae; valaddr_reg:x16; val_offset:288; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 288, x17, x15, 288, x18)

inst_799:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2fb07b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30e1ae and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e2fb07b; op2val:0x30e1ae; valaddr_reg:x16; val_offset:296; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 296, x17, x15, 296, x18)

inst_800:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2fb07b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e2fb07b; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:304; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 304, x17, x15, 304, x18)

inst_801:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2fb07b and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3f987b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e2fb07b; op2val:0xff3f987b; valaddr_reg:x16; val_offset:312; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 312, x17, x15, 312, x18)

inst_802:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2fb07b and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3a8ea9 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e2fb07b; op2val:0xff3a8ea9; valaddr_reg:x16; val_offset:320; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 320, x17, x15, 320, x18)

inst_803:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2fb07b and fs2 == 1 and fe2 == 0xfd and fm2 == 0x53653a and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e2fb07b; op2val:0xfed3653a; valaddr_reg:x16; val_offset:328; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 328, x17, x15, 328, x18)

inst_804:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6a2c24 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d6a2c24; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:336; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 336, x17, x15, 336, x18)

inst_805:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x6a2c24 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d6a2c24; valaddr_reg:x16; val_offset:344; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 344, x17, x15, 344, x18)

inst_806:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2fb07b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x125b96 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e2fb07b; op2val:0x7f125b96; valaddr_reg:x16; val_offset:352; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 352, x17, x15, 352, x18)

inst_807:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2fb07b and fs2 == 0 and fe2 == 0xfb and fm2 == 0x102b16 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e2fb07b; op2val:0x7d902b16; valaddr_reg:x16; val_offset:360; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 360, x17, x15, 360, x18)

inst_808:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x102b16 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2fb07b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d902b16; op2val:0x7e2fb07b; valaddr_reg:x16; val_offset:368; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 368, x17, x15, 368, x18)

inst_809:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x183299 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d183299; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:376; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 376, x17, x15, 376, x18)

inst_810:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x183299 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f7fffff; op2val:0x7d183299; valaddr_reg:x16; val_offset:384; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 384, x17, x15, 384, x18)

inst_811:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2fb07b and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3e3f3f and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e2fb07b; op2val:0x7ebe3f3f; valaddr_reg:x16; val_offset:392; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 392, x17, x15, 392, x18)

inst_812:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2fb07b and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4e622b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e2fb07b; op2val:0x7dce622b; valaddr_reg:x16; val_offset:400; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 400, x17, x15, 400, x18)

inst_813:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2fb07b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dce622b; op2val:0x7e2fb07b; valaddr_reg:x16; val_offset:408; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 408, x17, x15, 408, x18)

inst_814:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x125b96 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x125b96 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f125b96; op2val:0x7f125b96; valaddr_reg:x16; val_offset:416; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 416, x17, x15, 416, x18)

inst_815:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x125b96 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7903cc and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f125b96; op2val:0x3ff903cc; valaddr_reg:x16; val_offset:424; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 424, x17, x15, 424, x18)

inst_816:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x125b96 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0007f0 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f125b96; op2val:0x7f0; valaddr_reg:x16; val_offset:432; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 432, x17, x15, 432, x18)

inst_817:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x125b96 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x152f10 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f125b96; op2val:0x152f10; valaddr_reg:x16; val_offset:440; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 440, x17, x15, 440, x18)

inst_818:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x152f10 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3e0acf and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x152f10; op2val:0x803e0acf; valaddr_reg:x16; val_offset:448; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 448, x17, x15, 448, x18)

inst_819:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x125b96 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3e0acf and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f125b96; op2val:0x803e0acf; valaddr_reg:x16; val_offset:456; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 456, x17, x15, 456, x18)

inst_820:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x152f10 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x11d249 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x152f10; op2val:0x8011d249; valaddr_reg:x16; val_offset:464; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 464, x17, x15, 464, x18)

inst_821:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x125b96 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x11d249 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f125b96; op2val:0x8011d249; valaddr_reg:x16; val_offset:472; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 472, x17, x15, 472, x18)

inst_822:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x152f10 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x244d8b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x152f10; op2val:0x80244d8b; valaddr_reg:x16; val_offset:480; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 480, x17, x15, 480, x18)

inst_823:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x125b96 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x244d8b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f125b96; op2val:0x80244d8b; valaddr_reg:x16; val_offset:488; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 488, x17, x15, 488, x18)

inst_824:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x152f10 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0d858e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x152f10; op2val:0x800d858e; valaddr_reg:x16; val_offset:496; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 496, x17, x15, 496, x18)

inst_825:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x125b96 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0d858e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f125b96; op2val:0x800d858e; valaddr_reg:x16; val_offset:504; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 504, x17, x15, 504, x18)

inst_826:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x152f10 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2facf2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x152f10; op2val:0x802facf2; valaddr_reg:x16; val_offset:512; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 512, x17, x15, 512, x18)

inst_827:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x125b96 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2facf2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f125b96; op2val:0x802facf2; valaddr_reg:x16; val_offset:520; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 520, x17, x15, 520, x18)

inst_828:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x152f10 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39b0fc and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x152f10; op2val:0x39b0fc; valaddr_reg:x16; val_offset:528; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 528, x17, x15, 528, x18)

inst_829:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x125b96 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39b0fc and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f125b96; op2val:0x39b0fc; valaddr_reg:x16; val_offset:536; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 536, x17, x15, 536, x18)

inst_830:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x152f10 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x1c8139 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x152f10; op2val:0x1c8139; valaddr_reg:x16; val_offset:544; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 544, x17, x15, 544, x18)

inst_831:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x125b96 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x1c8139 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f125b96; op2val:0x1c8139; valaddr_reg:x16; val_offset:552; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 552, x17, x15, 552, x18)

inst_832:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x152f10 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x357d2c and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x152f10; op2val:0x357d2c; valaddr_reg:x16; val_offset:560; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 560, x17, x15, 560, x18)

inst_833:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x125b96 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x357d2c and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f125b96; op2val:0x357d2c; valaddr_reg:x16; val_offset:568; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 568, x17, x15, 568, x18)

inst_834:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x152f10 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x29b3b2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x152f10; op2val:0x29b3b2; valaddr_reg:x16; val_offset:576; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 576, x17, x15, 576, x18)

inst_835:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x125b96 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x29b3b2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f125b96; op2val:0x29b3b2; valaddr_reg:x16; val_offset:584; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 584, x17, x15, 584, x18)

inst_836:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x152f10 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30e1ae and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x152f10; op2val:0x30e1ae; valaddr_reg:x16; val_offset:592; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 592, x17, x15, 592, x18)

inst_837:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x125b96 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30e1ae and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f125b96; op2val:0x30e1ae; valaddr_reg:x16; val_offset:600; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 600, x17, x15, 600, x18)

inst_838:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x125b96 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x6a2c24 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f125b96; op2val:0x7d6a2c24; valaddr_reg:x16; val_offset:608; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 608, x17, x15, 608, x18)

inst_839:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6a2c24 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x2820df and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d6a2c24; op2val:0xfd2820df; valaddr_reg:x16; val_offset:616; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 616, x17, x15, 616, x18)

inst_840:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x125b96 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x2820df and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f125b96; op2val:0xfd2820df; valaddr_reg:x16; val_offset:624; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 624, x17, x15, 624, x18)

inst_841:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6a2c24 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x6a577e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d6a2c24; op2val:0xfdea577e; valaddr_reg:x16; val_offset:632; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 632, x17, x15, 632, x18)

inst_842:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x125b96 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x6a577e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f125b96; op2val:0xfdea577e; valaddr_reg:x16; val_offset:640; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 640, x17, x15, 640, x18)

inst_843:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6a2c24 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2fb07b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d6a2c24; op2val:0x7e2fb07b; valaddr_reg:x16; val_offset:648; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 648, x17, x15, 648, x18)

inst_844:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x125b96 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2fb07b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f125b96; op2val:0x7e2fb07b; valaddr_reg:x16; val_offset:656; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 656, x17, x15, 656, x18)

inst_845:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6a2c24 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x102b16 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d6a2c24; op2val:0x7d902b16; valaddr_reg:x16; val_offset:664; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 664, x17, x15, 664, x18)

inst_846:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3435dc and fs2 == 0 and fe2 == 0xfa and fm2 == 0x6a2c24 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3435dc; op2val:0x7d6a2c24; valaddr_reg:x16; val_offset:672; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 672, x17, x15, 672, x18)

inst_847:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6a2c24 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3435dc and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d6a2c24; op2val:0x7f3435dc; valaddr_reg:x16; val_offset:680; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 680, x17, x15, 680, x18)

inst_848:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x125b96 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x102b16 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f125b96; op2val:0x7d902b16; valaddr_reg:x16; val_offset:688; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 688, x17, x15, 688, x18)

inst_849:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x125b96 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3e3f3f and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f125b96; op2val:0x7ebe3f3f; valaddr_reg:x16; val_offset:696; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 696, x17, x15, 696, x18)

inst_850:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3e3f3f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x125b96 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ebe3f3f; op2val:0x7f125b96; valaddr_reg:x16; val_offset:704; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 704, x17, x15, 704, x18)

inst_851:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x6a2c24 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4e622b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d6a2c24; op2val:0x7dce622b; valaddr_reg:x16; val_offset:712; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 712, x17, x15, 712, x18)

inst_852:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x125b96 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4e622b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f125b96; op2val:0x7dce622b; valaddr_reg:x16; val_offset:720; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 720, x17, x15, 720, x18)

inst_853:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x102b16 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x102b16 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d902b16; op2val:0x7d902b16; valaddr_reg:x16; val_offset:728; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 728, x17, x15, 728, x18)

inst_854:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x102b16 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x194e59 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d902b16; op2val:0x40194e59; valaddr_reg:x16; val_offset:736; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 736, x17, x15, 736, x18)

inst_855:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x102b16 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0007f0 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d902b16; op2val:0x7f0; valaddr_reg:x16; val_offset:744; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 744, x17, x15, 744, x18)

inst_856:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x102b16 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x1a156b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d902b16; op2val:0x1a156b; valaddr_reg:x16; val_offset:752; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 752, x17, x15, 752, x18)

inst_857:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x1a156b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3e0acf and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x1a156b; op2val:0x803e0acf; valaddr_reg:x16; val_offset:760; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 760, x17, x15, 760, x18)

inst_858:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x102b16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3e0acf and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d902b16; op2val:0x803e0acf; valaddr_reg:x16; val_offset:768; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 768, x17, x15, 768, x18)

inst_859:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x1a156b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x11d249 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x1a156b; op2val:0x8011d249; valaddr_reg:x16; val_offset:776; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 776, x17, x15, 776, x18)

inst_860:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x102b16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x11d249 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d902b16; op2val:0x8011d249; valaddr_reg:x16; val_offset:784; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 784, x17, x15, 784, x18)

inst_861:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x1a156b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x244d8b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x1a156b; op2val:0x80244d8b; valaddr_reg:x16; val_offset:792; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 792, x17, x15, 792, x18)

inst_862:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x102b16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x244d8b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d902b16; op2val:0x80244d8b; valaddr_reg:x16; val_offset:800; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 800, x17, x15, 800, x18)

inst_863:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x1a156b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0d858e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x1a156b; op2val:0x800d858e; valaddr_reg:x16; val_offset:808; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 808, x17, x15, 808, x18)

inst_864:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x102b16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0d858e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d902b16; op2val:0x800d858e; valaddr_reg:x16; val_offset:816; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 816, x17, x15, 816, x18)

inst_865:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x1a156b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2facf2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x1a156b; op2val:0x802facf2; valaddr_reg:x16; val_offset:824; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 824, x17, x15, 824, x18)

inst_866:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x102b16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2facf2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d902b16; op2val:0x802facf2; valaddr_reg:x16; val_offset:832; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 832, x17, x15, 832, x18)

inst_867:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x1a156b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39b0fc and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x1a156b; op2val:0x39b0fc; valaddr_reg:x16; val_offset:840; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 840, x17, x15, 840, x18)

inst_868:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x102b16 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39b0fc and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d902b16; op2val:0x39b0fc; valaddr_reg:x16; val_offset:848; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 848, x17, x15, 848, x18)

inst_869:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x1a156b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x1c8139 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x1a156b; op2val:0x1c8139; valaddr_reg:x16; val_offset:856; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 856, x17, x15, 856, x18)

inst_870:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x102b16 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x1c8139 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d902b16; op2val:0x1c8139; valaddr_reg:x16; val_offset:864; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 864, x17, x15, 864, x18)

inst_871:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x1a156b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x357d2c and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x1a156b; op2val:0x357d2c; valaddr_reg:x16; val_offset:872; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 872, x17, x15, 872, x18)

inst_872:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x102b16 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x357d2c and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d902b16; op2val:0x357d2c; valaddr_reg:x16; val_offset:880; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 880, x17, x15, 880, x18)

inst_873:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x1a156b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x29b3b2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x1a156b; op2val:0x29b3b2; valaddr_reg:x16; val_offset:888; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 888, x17, x15, 888, x18)

inst_874:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x102b16 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x29b3b2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d902b16; op2val:0x29b3b2; valaddr_reg:x16; val_offset:896; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 896, x17, x15, 896, x18)

inst_875:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x1a156b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30e1ae and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x1a156b; op2val:0x30e1ae; valaddr_reg:x16; val_offset:904; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 904, x17, x15, 904, x18)

inst_876:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x102b16 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30e1ae and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d902b16; op2val:0x30e1ae; valaddr_reg:x16; val_offset:912; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 912, x17, x15, 912, x18)

inst_877:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x102b16 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3435dc and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d902b16; op2val:0x7f3435dc; valaddr_reg:x16; val_offset:920; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 920, x17, x15, 920, x18)

inst_878:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3435dc and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3f987b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3435dc; op2val:0xff3f987b; valaddr_reg:x16; val_offset:928; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 928, x17, x15, 928, x18)

inst_879:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x102b16 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3f987b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d902b16; op2val:0xff3f987b; valaddr_reg:x16; val_offset:936; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 936, x17, x15, 936, x18)

inst_880:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3435dc and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3a8ea9 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3435dc; op2val:0xff3a8ea9; valaddr_reg:x16; val_offset:944; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 944, x17, x15, 944, x18)

inst_881:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x102b16 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3a8ea9 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d902b16; op2val:0xff3a8ea9; valaddr_reg:x16; val_offset:952; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 952, x17, x15, 952, x18)

inst_882:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3435dc and fs2 == 1 and fe2 == 0xfd and fm2 == 0x53653a and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3435dc; op2val:0xfed3653a; valaddr_reg:x16; val_offset:960; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 960, x17, x15, 960, x18)

inst_883:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x102b16 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x53653a and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d902b16; op2val:0xfed3653a; valaddr_reg:x16; val_offset:968; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 968, x17, x15, 968, x18)

inst_884:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3435dc and fs2 == 0 and fe2 == 0xfe and fm2 == 0x125b96 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3435dc; op2val:0x7f125b96; valaddr_reg:x16; val_offset:976; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 976, x17, x15, 976, x18)

inst_885:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x102b16 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x125b96 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d902b16; op2val:0x7f125b96; valaddr_reg:x16; val_offset:984; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 984, x17, x15, 984, x18)

inst_886:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3435dc and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3e3f3f and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3435dc; op2val:0x7ebe3f3f; valaddr_reg:x16; val_offset:992; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 992, x17, x15, 992, x18)

inst_887:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x183299 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3435dc and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d183299; op2val:0x7f3435dc; valaddr_reg:x16; val_offset:1000; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1000, x17, x15, 1000, x18)

inst_888:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3435dc and fs2 == 0 and fe2 == 0xfa and fm2 == 0x183299 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3435dc; op2val:0x7d183299; valaddr_reg:x16; val_offset:1008; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1008, x17, x15, 1008, x18)

inst_889:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x102b16 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3e3f3f and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d902b16; op2val:0x7ebe3f3f; valaddr_reg:x16; val_offset:1016; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1016, x17, x15, 1016, x18)

inst_890:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x102b16 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4e622b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d902b16; op2val:0x7dce622b; valaddr_reg:x16; val_offset:1024; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1024, x17, x15, 1024, x18)

inst_891:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0xfb and fm2 == 0x102b16 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dce622b; op2val:0x7d902b16; valaddr_reg:x16; val_offset:1032; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1032, x17, x15, 1032, x18)

inst_892:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3e3f3f and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3e3f3f and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ebe3f3f; op2val:0x7ebe3f3f; valaddr_reg:x16; val_offset:1040; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1040, x17, x15, 1040, x18)

inst_893:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3e3f3f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x21d824 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ebe3f3f; op2val:0x3fa1d824; valaddr_reg:x16; val_offset:1048; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1048, x17, x15, 1048, x18)

inst_894:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3e3f3f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0007f0 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ebe3f3f; op2val:0x7f0; valaddr_reg:x16; val_offset:1056; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1056, x17, x15, 1056, x18)

inst_895:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3e3f3f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0dc4a8 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ebe3f3f; op2val:0xdc4a8; valaddr_reg:x16; val_offset:1064; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1064, x17, x15, 1064, x18)

inst_896:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0dc4a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3e0acf and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xdc4a8; op2val:0x803e0acf; valaddr_reg:x16; val_offset:1072; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1072, x17, x15, 1072, x18)

inst_897:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3e3f3f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3e0acf and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ebe3f3f; op2val:0x803e0acf; valaddr_reg:x16; val_offset:1080; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1080, x17, x15, 1080, x18)

inst_898:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0dc4a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x11d249 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xdc4a8; op2val:0x8011d249; valaddr_reg:x16; val_offset:1088; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1088, x17, x15, 1088, x18)

inst_899:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3e3f3f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x11d249 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ebe3f3f; op2val:0x8011d249; valaddr_reg:x16; val_offset:1096; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1096, x17, x15, 1096, x18)

inst_900:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0dc4a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x244d8b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xdc4a8; op2val:0x80244d8b; valaddr_reg:x16; val_offset:1104; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1104, x17, x15, 1104, x18)

inst_901:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3e3f3f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x244d8b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ebe3f3f; op2val:0x80244d8b; valaddr_reg:x16; val_offset:1112; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1112, x17, x15, 1112, x18)

inst_902:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0dc4a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0d858e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xdc4a8; op2val:0x800d858e; valaddr_reg:x16; val_offset:1120; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1120, x17, x15, 1120, x18)

inst_903:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3e3f3f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0d858e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ebe3f3f; op2val:0x800d858e; valaddr_reg:x16; val_offset:1128; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1128, x17, x15, 1128, x18)

inst_904:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0dc4a8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2facf2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xdc4a8; op2val:0x802facf2; valaddr_reg:x16; val_offset:1136; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1136, x17, x15, 1136, x18)

inst_905:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3e3f3f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2facf2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ebe3f3f; op2val:0x802facf2; valaddr_reg:x16; val_offset:1144; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1144, x17, x15, 1144, x18)

inst_906:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0dc4a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39b0fc and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xdc4a8; op2val:0x39b0fc; valaddr_reg:x16; val_offset:1152; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1152, x17, x15, 1152, x18)

inst_907:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3e3f3f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39b0fc and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ebe3f3f; op2val:0x39b0fc; valaddr_reg:x16; val_offset:1160; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1160, x17, x15, 1160, x18)

inst_908:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0dc4a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x1c8139 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xdc4a8; op2val:0x1c8139; valaddr_reg:x16; val_offset:1168; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1168, x17, x15, 1168, x18)

inst_909:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3e3f3f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x1c8139 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ebe3f3f; op2val:0x1c8139; valaddr_reg:x16; val_offset:1176; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1176, x17, x15, 1176, x18)

inst_910:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0dc4a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x357d2c and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xdc4a8; op2val:0x357d2c; valaddr_reg:x16; val_offset:1184; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1184, x17, x15, 1184, x18)

inst_911:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3e3f3f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x357d2c and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ebe3f3f; op2val:0x357d2c; valaddr_reg:x16; val_offset:1192; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1192, x17, x15, 1192, x18)

inst_912:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0dc4a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x29b3b2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xdc4a8; op2val:0x29b3b2; valaddr_reg:x16; val_offset:1200; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1200, x17, x15, 1200, x18)

inst_913:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3e3f3f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x29b3b2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ebe3f3f; op2val:0x29b3b2; valaddr_reg:x16; val_offset:1208; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1208, x17, x15, 1208, x18)

inst_914:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0dc4a8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30e1ae and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0xdc4a8; op2val:0x30e1ae; valaddr_reg:x16; val_offset:1216; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1216, x17, x15, 1216, x18)

inst_915:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3e3f3f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30e1ae and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ebe3f3f; op2val:0x30e1ae; valaddr_reg:x16; val_offset:1224; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1224, x17, x15, 1224, x18)

inst_916:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3e3f3f and fs2 == 0 and fe2 == 0xfa and fm2 == 0x183299 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ebe3f3f; op2val:0x7d183299; valaddr_reg:x16; val_offset:1232; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1232, x17, x15, 1232, x18)

inst_917:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x183299 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x2820df and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d183299; op2val:0xfd2820df; valaddr_reg:x16; val_offset:1240; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1240, x17, x15, 1240, x18)

inst_918:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3e3f3f and fs2 == 1 and fe2 == 0xfa and fm2 == 0x2820df and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ebe3f3f; op2val:0xfd2820df; valaddr_reg:x16; val_offset:1248; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1248, x17, x15, 1248, x18)

inst_919:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x183299 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x6a577e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d183299; op2val:0xfdea577e; valaddr_reg:x16; val_offset:1256; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1256, x17, x15, 1256, x18)

inst_920:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3e3f3f and fs2 == 1 and fe2 == 0xfb and fm2 == 0x6a577e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ebe3f3f; op2val:0xfdea577e; valaddr_reg:x16; val_offset:1264; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1264, x17, x15, 1264, x18)

inst_921:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x183299 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2fb07b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d183299; op2val:0x7e2fb07b; valaddr_reg:x16; val_offset:1272; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1272, x17, x15, 1272, x18)

inst_922:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3e3f3f and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2fb07b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ebe3f3f; op2val:0x7e2fb07b; valaddr_reg:x16; val_offset:1280; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1280, x17, x15, 1280, x18)

inst_923:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x183299 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x102b16 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d183299; op2val:0x7d902b16; valaddr_reg:x16; val_offset:1288; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1288, x17, x15, 1288, x18)

inst_924:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3e3f3f and fs2 == 0 and fe2 == 0xfb and fm2 == 0x102b16 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ebe3f3f; op2val:0x7d902b16; valaddr_reg:x16; val_offset:1296; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1296, x17, x15, 1296, x18)

inst_925:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x183299 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4e622b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d183299; op2val:0x7dce622b; valaddr_reg:x16; val_offset:1304; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1304, x17, x15, 1304, x18)

inst_926:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3e3f3f and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4e622b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ebe3f3f; op2val:0x7dce622b; valaddr_reg:x16; val_offset:1312; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1312, x17, x15, 1312, x18)

inst_927:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0x80 and fm2 == 0x5b76ec and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dce622b; op2val:0x405b76ec; valaddr_reg:x16; val_offset:1320; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1320, x17, x15, 1320, x18)

inst_928:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0007f0 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dce622b; op2val:0x7f0; valaddr_reg:x16; val_offset:1328; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1328, x17, x15, 1328, x18)

inst_929:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x255707 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dce622b; op2val:0x255707; valaddr_reg:x16; val_offset:1336; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1336, x17, x15, 1336, x18)

inst_930:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x255707 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3e0acf and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x255707; op2val:0x803e0acf; valaddr_reg:x16; val_offset:1344; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1344, x17, x15, 1344, x18)

inst_931:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3e0acf and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dce622b; op2val:0x803e0acf; valaddr_reg:x16; val_offset:1352; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1352, x17, x15, 1352, x18)

inst_932:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x255707 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x11d249 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x255707; op2val:0x8011d249; valaddr_reg:x16; val_offset:1360; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1360, x17, x15, 1360, x18)

inst_933:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x11d249 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dce622b; op2val:0x8011d249; valaddr_reg:x16; val_offset:1368; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1368, x17, x15, 1368, x18)

inst_934:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x255707 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x244d8b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x255707; op2val:0x80244d8b; valaddr_reg:x16; val_offset:1376; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1376, x17, x15, 1376, x18)

inst_935:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x244d8b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dce622b; op2val:0x80244d8b; valaddr_reg:x16; val_offset:1384; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1384, x17, x15, 1384, x18)

inst_936:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x255707 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0d858e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x255707; op2val:0x800d858e; valaddr_reg:x16; val_offset:1392; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1392, x17, x15, 1392, x18)

inst_937:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0d858e and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dce622b; op2val:0x800d858e; valaddr_reg:x16; val_offset:1400; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1400, x17, x15, 1400, x18)

inst_938:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x255707 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2facf2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x255707; op2val:0x802facf2; valaddr_reg:x16; val_offset:1408; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1408, x17, x15, 1408, x18)

inst_939:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2facf2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dce622b; op2val:0x802facf2; valaddr_reg:x16; val_offset:1416; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1416, x17, x15, 1416, x18)

inst_940:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x255707 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39b0fc and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x255707; op2val:0x39b0fc; valaddr_reg:x16; val_offset:1424; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1424, x17, x15, 1424, x18)

inst_941:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39b0fc and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dce622b; op2val:0x39b0fc; valaddr_reg:x16; val_offset:1432; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1432, x17, x15, 1432, x18)

inst_942:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x255707 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x1c8139 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x255707; op2val:0x1c8139; valaddr_reg:x16; val_offset:1440; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1440, x17, x15, 1440, x18)

inst_943:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x1c8139 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dce622b; op2val:0x1c8139; valaddr_reg:x16; val_offset:1448; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1448, x17, x15, 1448, x18)

inst_944:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x255707 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x357d2c and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x255707; op2val:0x357d2c; valaddr_reg:x16; val_offset:1456; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1456, x17, x15, 1456, x18)

inst_945:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x357d2c and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dce622b; op2val:0x357d2c; valaddr_reg:x16; val_offset:1464; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1464, x17, x15, 1464, x18)

inst_946:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x255707 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x29b3b2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x255707; op2val:0x29b3b2; valaddr_reg:x16; val_offset:1472; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1472, x17, x15, 1472, x18)

inst_947:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x29b3b2 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dce622b; op2val:0x29b3b2; valaddr_reg:x16; val_offset:1480; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1480, x17, x15, 1480, x18)

inst_948:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x255707 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30e1ae and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x255707; op2val:0x30e1ae; valaddr_reg:x16; val_offset:1488; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1488, x17, x15, 1488, x18)

inst_949:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30e1ae and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dce622b; op2val:0x30e1ae; valaddr_reg:x16; val_offset:1496; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1496, x17, x15, 1496, x18)

inst_950:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dce622b; op2val:0x7f7fffff; valaddr_reg:x16; val_offset:1504; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1504, x17, x15, 1504, x18)

inst_951:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3f987b and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dce622b; op2val:0xff3f987b; valaddr_reg:x16; val_offset:1512; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1512, x17, x15, 1512, x18)

inst_952:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3a8ea9 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dce622b; op2val:0xff3a8ea9; valaddr_reg:x16; val_offset:1520; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1520, x17, x15, 1520, x18)

inst_953:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 1 and fe2 == 0xfd and fm2 == 0x53653a and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dce622b; op2val:0xfed3653a; valaddr_reg:x16; val_offset:1528; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1528, x17, x15, 1528, x18)

inst_954:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x125b96 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dce622b; op2val:0x7f125b96; valaddr_reg:x16; val_offset:1536; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1536, x17, x15, 1536, x18)

inst_955:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3e3f3f and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dce622b; op2val:0x7ebe3f3f; valaddr_reg:x16; val_offset:1544; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1544, x17, x15, 1544, x18)

inst_956:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0007f0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3e0acf and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0; op2val:0x803e0acf; valaddr_reg:x16; val_offset:1552; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1552, x17, x15, 1552, x18)

inst_957:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0007f0 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x365363 and rm_val == 1  
// opcode: fmax.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0; op2val:0xc0b65363; valaddr_reg:x16; val_offset:1560; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmax.s, f12, f10, f11, 0x1, 0, x16, 1560, x17, x15, 1560, x18)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
test_fp:
.word 0x7dce622b
.word 0x7dce622b
.word 0x7f0
.word 0x7f0
.word 0x7f0
.word 0x7f0
.word 0xc0b65363
.word 0x7f0
.word 0x7f0
.word 0x7f0
.word 0x7f0
.word 0x8011d249
.word 0xbfd17d72
.word 0x7f0
.word 0x7f0
.word 0xbfd17d72
.word 0x7f0
.word 0x80244d8b
.word 0xc0555e8a
.word 0x7f0
.word 0x7f0
.word 0xc0555e8a
.word 0x7f0
.word 0x800d858e
.word 0xbf9ef26a
.word 0x7f0
.word 0x7f0
.word 0xbf9ef26a
.word 0x7f0
.word 0x802facf2
.word 0xc08c1b1e
.word 0x7f0
.word 0x7f0
.word 0xc08c1b1e
.word 0x7f0
.word 0x39b0fc
.word 0x40a98a26
.word 0x7f0
.word 0x7f0
.word 0x40a98a26
.word 0x7f0
.word 0x1c8139
.word 0x4027893a
.word 0x7f0
.word 0x7f0
.word 0x4027893a
.word 0x7f0
.word 0x357d2c
.word 0x409d309f
.word 0x7f0
.word 0x7f0
.word 0x409d309f
.word 0x7f0
.word 0x29b3b2
.word 0x40751a1e
.word 0x7f0
.word 0x7f0
.word 0x40751a1e
.word 0x7f0
.word 0x30e1ae
.word 0x408fa668
.word 0x7f0
.word 0x7f0
.word 0x408fa668
.word 0x7f0
.word 0xfd2820df
.word 0xbfb2c8e8
.word 0x7f0
.word 0x7f0
.word 0xbfb2c8e8
.word 0x7f0
.word 0xff3f987b
.word 0xc022fdd5
.word 0x7f0
.word 0x7f0
.word 0xc022fdd5
.word 0x7f0
.word 0xff3a8ea9
.word 0xc01eb493
.word 0x7f0
.word 0x7f0
.word 0xc01eb493
.word 0x7f0
.word 0xfed3653a
.word 0xbfb3d5d8
.word 0x7f0
.word 0x7f0
.word 0xbfb3d5d8
.word 0x7f0
.word 0xfdea577e
.word 0xc07931e5
.word 0x7f0
.word 0x7f0
.word 0xc07931e5
.word 0x7f0
.word 0x7e2fb07b
.word 0x40bad332
.word 0x7f0
.word 0x7f0
.word 0x40bad332
.word 0x7f0
.word 0x7f125b96
.word 0x3ff903cc
.word 0x7f0
.word 0x7f0
.word 0x3ff903cc
.word 0x7f0
.word 0x7d902b16
.word 0x40194e59
.word 0x7f0
.word 0x7f0
.word 0x40194e59
.word 0x7f0
.word 0x7ebe3f3f
.word 0x3fa1d824
.word 0x7f0
.word 0x7f0
.word 0x3fa1d824
.word 0x7f0
.word 0x7dce622b
.word 0x405b76ec
.word 0x7f0
.word 0x7f0
.word 0x405b76ec
.word 0x803e0acf
.word 0x803e0acf
.word 0x803e0acf
.word 0xc0b65363
.word 0x803e0acf
.word 0x7f0
.word 0x803e0acf
.word 0x8011d249
.word 0x8011d249
.word 0x803e0acf
.word 0x803e0acf
.word 0x80244d8b
.word 0x80244d8b
.word 0x803e0acf
.word 0x803e0acf
.word 0x800d858e
.word 0x800d858e
.word 0x803e0acf
.word 0x803e0acf
.word 0x802facf2
.word 0x802facf2
.word 0x803e0acf
.word 0x803e0acf
.word 0x39b0fc
.word 0x39b0fc
.word 0x803e0acf
.word 0x803e0acf
.word 0x1c8139
.word 0x1c8139
.word 0x803e0acf
.word 0x803e0acf
.word 0x357d2c
.word 0x357d2c
.word 0x803e0acf
.word 0x803e0acf
.word 0x29b3b2
.word 0x29b3b2
.word 0x803e0acf
.word 0x803e0acf
.word 0x30e1ae
.word 0x30e1ae
.word 0x803e0acf
.word 0x803e0acf
.word 0xfe2b7553
.word 0xfe2b7553
.word 0xfd2820df
.word 0x800f3596
.word 0xfe2b7553
.word 0xfe2b7553
.word 0x800f3596
.word 0x803e0acf
.word 0xfd2820df
.word 0x803e0acf
.word 0xff7fffff
.word 0xff7fffff
.word 0xff3f987b
.word 0x801bbb48
.word 0xff7fffff
.word 0xff7fffff
.word 0x801bbb48
.word 0x803e0acf
.word 0xff3f987b
.word 0xff7fffff
.word 0xff3a8ea9
.word 0x801b0098
.word 0xff7fffff
.word 0xff7fffff
.word 0x801b0098
.word 0x803e0acf
.word 0xff3a8ea9
.word 0xff7fffff
.word 0xfed3653a
.word 0x800f4c77
.word 0xff7fffff
.word 0xff7fffff
.word 0x800f4c77
.word 0x803e0acf
.word 0xfed3653a
.word 0xfe2b7553
.word 0xfdea577e
.word 0x802a65f8
.word 0xfe2b7553
.word 0xfe2b7553
.word 0x802a65f8
.word 0x803e0acf
.word 0xfdea577e
.word 0xfe2b7553
.word 0x7e2fb07b
.word 0x3f92c0
.word 0xfe2b7553
.word 0xfe2b7553
.word 0x3f92c0
.word 0x803e0acf
.word 0x7e2fb07b
.word 0xff7fffff
.word 0x7f125b96
.word 0x152f10
.word 0xff7fffff
.word 0xff7fffff
.word 0x152f10
.word 0x803e0acf
.word 0x7f125b96
.word 0xfe2b7553
.word 0x7d902b16
.word 0x1a156b
.word 0xfe2b7553
.word 0xfe2b7553
.word 0x1a156b
.word 0x803e0acf
.word 0x7d902b16
.word 0xff7fffff
.word 0x7ebe3f3f
.word 0xdc4a8
.word 0xff7fffff
.word 0xff7fffff
.word 0xdc4a8
.word 0x803e0acf
.word 0x7ebe3f3f
.word 0xfe2b7553
.word 0x7dce622b
.word 0x255707
.word 0xfe2b7553
.word 0xfe2b7553
.word 0x255707
.word 0x803e0acf
.word 0x7dce622b
.word 0x8011d249
.word 0x8011d249
.word 0x8011d249
.word 0xbfd17d72
.word 0x8011d249
.word 0x7f0
.word 0x8011d249
.word 0x80244d8b
.word 0x80244d8b
.word 0x8011d249
.word 0x8011d249
.word 0x800d858e
.word 0x800d858e
.word 0x8011d249
.word 0x8011d249
.word 0x802facf2
.word 0x802facf2
.word 0x8011d249
.word 0x8011d249
.word 0x39b0fc
.word 0x39b0fc
.word 0x8011d249
.word 0x8011d249
.word 0x1c8139
.word 0x1c8139
.word 0x8011d249
.word 0x8011d249
.word 0x357d2c
.word 0x357d2c
.word 0x8011d249
.word 0x8011d249
.word 0x29b3b2
.word 0x29b3b2
.word 0x8011d249
.word 0x8011d249
.word 0x30e1ae
.word 0x30e1ae
.word 0x8011d249
.word 0x8011d249
.word 0xfd4500e4
.word 0xfd4500e4
.word 0xfd2820df
.word 0x800f3596
.word 0xfd4500e4
.word 0xfd4500e4
.word 0x800f3596
.word 0x8011d249
.word 0xfd2820df
.word 0x8011d249
.word 0xfef6411d
.word 0xfef6411d
.word 0xff3f987b
.word 0x801bbb48
.word 0xfef6411d
.word 0xfef6411d
.word 0x801bbb48
.word 0x8011d249
.word 0xff3f987b
.word 0xfef6411d
.word 0xff3a8ea9
.word 0x801b0098
.word 0xfef6411d
.word 0xfef6411d
.word 0x801b0098
.word 0x8011d249
.word 0xff3a8ea9
.word 0xfef6411d
.word 0xfed3653a
.word 0x800f4c77
.word 0xfef6411d
.word 0xfef6411d
.word 0x800f4c77
.word 0x8011d249
.word 0xfed3653a
.word 0xfd4500e4
.word 0xfdea577e
.word 0x802a65f8
.word 0xfd4500e4
.word 0xfd4500e4
.word 0x802a65f8
.word 0x8011d249
.word 0xfdea577e
.word 0xfd4500e4
.word 0x7e2fb07b
.word 0x3f92c0
.word 0xfd4500e4
.word 0xfd4500e4
.word 0x3f92c0
.word 0x8011d249
.word 0x7e2fb07b
.word 0xfef6411d
.word 0x7f125b96
.word 0x152f10
.word 0xfef6411d
.word 0xfef6411d
.word 0x152f10
.word 0x8011d249
.word 0x7f125b96
.word 0xfd4500e4
.word 0x7d902b16
.word 0x1a156b
.word 0xfd4500e4
.word 0xfd4500e4
.word 0x1a156b
.word 0x8011d249
.word 0x7d902b16
.word 0xfef6411d
.word 0x7ebe3f3f
.word 0xdc4a8
.word 0xfef6411d
.word 0xfef6411d
.word 0xdc4a8
.word 0x8011d249
.word 0x7ebe3f3f
.word 0xfd4500e4
.word 0x7dce622b
.word 0x255707
.word 0xfd4500e4
.word 0xfd4500e4
.word 0x255707
.word 0x8011d249
.word 0x7dce622b
.word 0x80244d8b
.word 0x80244d8b
.word 0x80244d8b
.word 0xc0555e8a
.word 0x80244d8b
.word 0x7f0
.word 0x80244d8b
.word 0x800d858e
.word 0x800d858e
.word 0x80244d8b
.word 0x80244d8b
.word 0x802facf2
.word 0x802facf2
.word 0x80244d8b
.word 0x80244d8b
.word 0x39b0fc
.word 0x39b0fc
.word 0x80244d8b
.word 0x80244d8b
.word 0x1c8139
.word 0x1c8139
.word 0x80244d8b
.word 0x80244d8b
.word 0x357d2c
.word 0x357d2c
.word 0x80244d8b
.word 0x80244d8b
.word 0x29b3b2
.word 0x29b3b2
.word 0x80244d8b
.word 0x80244d8b
.word 0x30e1ae
.word 0x30e1ae
.word 0x80244d8b
.word 0x80244d8b
.word 0xfdc8a6ca
.word 0xfdc8a6ca
.word 0xfd2820df
.word 0x800f3596
.word 0xfdc8a6ca
.word 0xfdc8a6ca
.word 0x800f3596
.word 0x80244d8b
.word 0xfd2820df
.word 0x80244d8b
.word 0xff7ad07d
.word 0xff7ad07d
.word 0xff3f987b
.word 0x801bbb48
.word 0xff7ad07d
.word 0xff7ad07d
.word 0x801bbb48
.word 0x80244d8b
.word 0xff3f987b
.word 0xff7ad07d
.word 0xff3a8ea9
.word 0x801b0098
.word 0xff7ad07d
.word 0xff7ad07d
.word 0x801b0098
.word 0x80244d8b
.word 0xff3a8ea9
.word 0xff7ad07d
.word 0xfed3653a
.word 0x800f4c77
.word 0xff7ad07d
.word 0xff7ad07d
.word 0x800f4c77
.word 0x80244d8b
.word 0xfed3653a
.word 0xfdc8a6ca
.word 0xfdea577e
.word 0x802a65f8
.word 0xfdc8a6ca
.word 0xfdc8a6ca
.word 0x802a65f8
.word 0x80244d8b
.word 0xfdea577e
.word 0xfdc8a6ca
.word 0x7e2fb07b
.word 0x3f92c0
.word 0xfdc8a6ca
.word 0xfdc8a6ca
.word 0x3f92c0
.word 0x80244d8b
.word 0x7e2fb07b
.word 0xff7ad07d
.word 0x7f125b96
.word 0x152f10
.word 0xff7ad07d
.word 0xff7ad07d
.word 0x152f10
.word 0x80244d8b
.word 0x7f125b96
.word 0xfdc8a6ca
.word 0x7d902b16
.word 0x1a156b
.word 0xfdc8a6ca
.word 0xfdc8a6ca
.word 0x1a156b
.word 0x80244d8b
.word 0x7d902b16
.word 0xff7ad07d
.word 0x7ebe3f3f
.word 0xdc4a8
.word 0xff7ad07d
.word 0xff7ad07d
.word 0xdc4a8
.word 0x80244d8b
.word 0x7ebe3f3f
.word 0xfdc8a6ca
.word 0x7dce622b
.word 0x255707
.word 0xfdc8a6ca
.word 0xfdc8a6ca
.word 0x255707
.word 0x80244d8b
.word 0x7dce622b
.word 0x800d858e
.word 0x800d858e
.word 0x800d858e
.word 0xbf9ef26a
.word 0x800d858e
.word 0x7f0
.word 0x800d858e
.word 0x802facf2
.word 0x802facf2
.word 0x800d858e
.word 0x800d858e
.word 0x39b0fc
.word 0x39b0fc
.word 0x800d858e
.word 0x800d858e
.word 0x1c8139
.word 0x1c8139
.word 0x800d858e
.word 0x800d858e
.word 0x357d2c
.word 0x357d2c
.word 0x800d858e
.word 0x800d858e
.word 0x29b3b2
.word 0x29b3b2
.word 0x800d858e
.word 0x800d858e
.word 0x30e1ae
.word 0x30e1ae
.word 0x800d858e
.word 0x800d858e
.word 0xfd157915
.word 0xfd157915
.word 0xfd2820df
.word 0x800f3596
.word 0xfd157915
.word 0xfd157915
.word 0x800f3596
.word 0x800d858e
.word 0xfd2820df
.word 0x800d858e
.word 0xfebad75a
.word 0xfebad75a
.word 0xff3f987b
.word 0x801bbb48
.word 0xfebad75a
.word 0xfebad75a
.word 0x801bbb48
.word 0x800d858e
.word 0xff3f987b
.word 0xfebad75a
.word 0xff3a8ea9
.word 0x801b0098
.word 0xfebad75a
.word 0xfebad75a
.word 0x801b0098
.word 0x800d858e
.word 0xff3a8ea9
.word 0xfebad75a
.word 0xfed3653a
.word 0x800f4c77
.word 0xfebad75a
.word 0xfebad75a
.word 0x800f4c77
.word 0x800d858e
.word 0xfed3653a
.word 0xfd157915
.word 0xfdea577e
.word 0x802a65f8
.word 0xfd157915
.word 0xfd157915
.word 0x802a65f8
.word 0x800d858e
.word 0xfdea577e
.word 0xfd157915
.word 0x7e2fb07b
.word 0x3f92c0
.word 0xfd157915
.word 0xfd157915
.word 0x3f92c0
.word 0x800d858e
.word 0x7e2fb07b
.word 0xfebad75a
.word 0x7f125b96
.word 0x152f10
.word 0xfebad75a
.word 0xfebad75a
.word 0x152f10
.word 0x800d858e
.word 0x7f125b96
.word 0xfd157915
.word 0x7d902b16
.word 0x1a156b
.word 0xfd157915
.word 0xfd157915
.word 0x1a156b
.word 0x800d858e
.word 0x7d902b16
.word 0xfebad75a
.word 0x7ebe3f3f
.word 0xdc4a8
.word 0xfebad75a
.word 0xfebad75a
.word 0xdc4a8
.word 0x800d858e
.word 0x7ebe3f3f
.word 0xfd157915
.word 0x7dce622b
.word 0x255707
.word 0xfd157915
.word 0xfd157915
.word 0x255707
.word 0x800d858e
.word 0x7dce622b
.word 0x802facf2
.word 0x802facf2
.word 0x802facf2
.word 0xc08c1b1e
.word 0x802facf2
.word 0x7f0
.word 0x802facf2
.word 0x39b0fc
.word 0x39b0fc
.word 0x802facf2
.word 0x802facf2
.word 0x1c8139
.word 0x1c8139
.word 0x802facf2
.word 0x802facf2
.word 0x357d2c
.word 0x357d2c
.word 0x802facf2
.word 0x802facf2
.word 0x29b3b2
.word 0x29b3b2
.word 0x802facf2
.word 0x802facf2
.word 0x30e1ae
.word 0x30e1ae
.word 0x802facf2
.word 0x802facf2
.word 0xfe03c146
.word 0xfe03c146
.word 0xfd2820df
.word 0x800f3596
.word 0xfe03c146
.word 0xfe03c146
.word 0x800f3596
.word 0x802facf2
.word 0xfd2820df
.word 0x802facf2
.word 0xff7fffff
.word 0x802facf2
.word 0xff3f987b
.word 0x802facf2
.word 0xff3a8ea9
.word 0x802facf2
.word 0xfed3653a
.word 0xfe03c146
.word 0xfdea577e
.word 0x802a65f8
.word 0xfe03c146
.word 0xfe03c146
.word 0x802a65f8
.word 0x802facf2
.word 0xfdea577e
.word 0xfe03c146
.word 0x7e2fb07b
.word 0x3f92c0
.word 0xfe03c146
.word 0xfe03c146
.word 0x3f92c0
.word 0x802facf2
.word 0x7e2fb07b
.word 0x802facf2
.word 0x7f125b96
.word 0xfe03c146
.word 0x7d902b16
.word 0x1a156b
.word 0xfe03c146
.word 0xfe03c146
.word 0x1a156b
.word 0x802facf2
.word 0x7d902b16
.word 0x802facf2
.word 0x7ebe3f3f
.word 0xfe03c146
.word 0x7dce622b
.word 0x255707
.word 0xfe03c146
.word 0xfe03c146
.word 0x255707
.word 0x802facf2
.word 0x7dce622b
.word 0x39b0fc
.word 0x39b0fc
.word 0x39b0fc
.word 0x40a98a26
.word 0x39b0fc
.word 0x7f0
.word 0x39b0fc
.word 0x1c8139
.word 0x1c8139
.word 0x39b0fc
.word 0x39b0fc
.word 0x357d2c
.word 0x357d2c
.word 0x39b0fc
.word 0x39b0fc
.word 0x29b3b2
.word 0x29b3b2
.word 0x39b0fc
.word 0x39b0fc
.word 0x30e1ae
.word 0x30e1ae
.word 0x39b0fc
.word 0x39b0fc
.word 0x7e1f6f2f
.word 0x7e1f6f2f
.word 0xfd2820df
.word 0x800f3596
.word 0x7e1f6f2f
.word 0x7e1f6f2f
.word 0x800f3596
.word 0x39b0fc
.word 0xfd2820df
.word 0x39b0fc
.word 0x7f7fffff
.word 0x7f7fffff
.word 0xff3f987b
.word 0x801bbb48
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x801bbb48
.word 0x39b0fc
.word 0xff3f987b
.word 0x7f7fffff
.word 0xff3a8ea9
.word 0x801b0098
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x801b0098
.word 0x39b0fc
.word 0xff3a8ea9
.word 0x7f7fffff
.word 0xfed3653a
.word 0x800f4c77
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x800f4c77
.word 0x39b0fc
.word 0xfed3653a
.word 0x7e1f6f2f
.word 0xfdea577e
.word 0x802a65f8
.word 0x7e1f6f2f
.word 0x7e1f6f2f
.word 0x802a65f8
.word 0x39b0fc
.word 0xfdea577e
.word 0x7e1f6f2f
.word 0x7e2fb07b
.word 0x3f92c0
.word 0x7e1f6f2f
.word 0x7e1f6f2f
.word 0x3f92c0
.word 0x39b0fc
.word 0x7e2fb07b
.word 0x7f7fffff
.word 0x7f125b96
.word 0x152f10
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x152f10
.word 0x39b0fc
.word 0x7f125b96
.word 0x7e1f6f2f
.word 0x7d902b16
.word 0x1a156b
.word 0x7e1f6f2f
.word 0x7e1f6f2f
.word 0x1a156b
.word 0x39b0fc
.word 0x7d902b16
.word 0x7f7fffff
.word 0x7ebe3f3f
.word 0xdc4a8
.word 0x7f7fffff
.word 0x7f7fffff
.word 0xdc4a8
.word 0x39b0fc
.word 0x7ebe3f3f
.word 0x7e1f6f2f
.word 0x7dce622b
.word 0x255707
.word 0x7e1f6f2f
.word 0x7e1f6f2f
.word 0x255707
.word 0x39b0fc
.word 0x7dce622b
.word 0x1c8139
.word 0x1c8139
.word 0x1c8139
.word 0x4027893a
.word 0x1c8139
.word 0x7f0
.word 0x1c8139
.word 0x357d2c
.word 0x357d2c
.word 0x1c8139
.word 0x1c8139
.word 0x29b3b2
.word 0x29b3b2
.word 0x1c8139
.word 0x1c8139
.word 0x30e1ae
.word 0x30e1ae
.word 0x1c8139
.word 0x1c8139
.word 0x7d9d8cd6
.word 0x7d9d8cd6
.word 0xfd2820df
.word 0x800f3596
.word 0x7d9d8cd6
.word 0x7d9d8cd6
.word 0x800f3596
.word 0x1c8139
.word 0xfd2820df
.word 0x1c8139
.word 0x7f44f00b
.word 0x7f44f00b
.word 0xff3f987b
.word 0x801bbb48
.word 0x7f44f00b
.word 0x7f44f00b
.word 0x801bbb48
.word 0x1c8139
.word 0xff3f987b
.word 0x7f44f00b
.word 0xff3a8ea9
.word 0x801b0098
.word 0x7f44f00b
.word 0x7f44f00b
.word 0x801b0098
.word 0x1c8139
.word 0xff3a8ea9
.word 0x7f44f00b
.word 0xfed3653a
.word 0x800f4c77
.word 0x7f44f00b
.word 0x7f44f00b
.word 0x800f4c77
.word 0x1c8139
.word 0xfed3653a
.word 0x7d9d8cd6
.word 0xfdea577e
.word 0x802a65f8
.word 0x7d9d8cd6
.word 0x7d9d8cd6
.word 0x802a65f8
.word 0x1c8139
.word 0xfdea577e
.word 0x7d9d8cd6
.word 0x7e2fb07b
.word 0x3f92c0
.word 0x7d9d8cd6
.word 0x7d9d8cd6
.word 0x3f92c0
.word 0x1c8139
.word 0x7e2fb07b
.word 0x7f44f00b
.word 0x7f125b96
.word 0x152f10
.word 0x7f44f00b
.word 0x7f44f00b
.word 0x152f10
.word 0x1c8139
.word 0x7f125b96
.word 0x7d9d8cd6
.word 0x7d902b16
.word 0x1a156b
.word 0x7d9d8cd6
.word 0x7d9d8cd6
.word 0x1a156b
.word 0x1c8139
.word 0x7d902b16
.word 0x7f44f00b
.word 0x7ebe3f3f
.word 0xdc4a8
.word 0x7f44f00b
.word 0x7f44f00b
.word 0xdc4a8
.word 0x1c8139
.word 0x7ebe3f3f
.word 0x7d9d8cd6
.word 0x7dce622b
.word 0x255707
.word 0x7d9d8cd6
.word 0x7d9d8cd6
.word 0x255707
.word 0x1c8139
.word 0x7dce622b
.word 0x357d2c
.word 0x357d2c
.word 0x357d2c
.word 0x409d309f
.word 0x357d2c
.word 0x7f0
.word 0x357d2c
.word 0x29b3b2
.word 0x29b3b2
.word 0x357d2c
.word 0x357d2c
.word 0x30e1ae
.word 0x30e1ae
.word 0x357d2c
.word 0x357d2c
.word 0x7e13d219
.word 0x7e13d219
.word 0xfd2820df
.word 0x800f3596
.word 0x7e13d219
.word 0x7e13d219
.word 0x800f3596
.word 0x357d2c
.word 0xfd2820df
.word 0x357d2c
.word 0x7f7fffff
.word 0x357d2c
.word 0xff3f987b
.word 0x357d2c
.word 0xff3a8ea9
.word 0x357d2c
.word 0xfed3653a
.word 0x7e13d219
.word 0xfdea577e
.word 0x802a65f8
.word 0x7e13d219
.word 0x7e13d219
.word 0x802a65f8
.word 0x357d2c
.word 0xfdea577e
.word 0x7e13d219
.word 0x7e2fb07b
.word 0x3f92c0
.word 0x7e13d219
.word 0x7e13d219
.word 0x3f92c0
.word 0x357d2c
.word 0x7e2fb07b
.word 0x357d2c
.word 0x7f125b96
.word 0x7e13d219
.word 0x7d902b16
.word 0x1a156b
.word 0x7e13d219
.word 0x7e13d219
.word 0x1a156b
.word 0x357d2c
.word 0x7d902b16
.word 0x357d2c
.word 0x7ebe3f3f
.word 0x7e13d219
.word 0x7dce622b
.word 0x255707
.word 0x7e13d219
.word 0x7e13d219
.word 0x255707
.word 0x357d2c
.word 0x7dce622b
.word 0x29b3b2
.word 0x29b3b2
.word 0x29b3b2
.word 0x40751a1e
.word 0x29b3b2
.word 0x7f0
.word 0x29b3b2
.word 0x30e1ae
.word 0x30e1ae
.word 0x29b3b2
.word 0x29b3b2
.word 0x7de67e2a
.word 0x7de67e2a
.word 0xfd2820df
.word 0x800f3596
.word 0x7de67e2a
.word 0x7de67e2a
.word 0x800f3596
.word 0x29b3b2
.word 0xfd2820df
.word 0x29b3b2
.word 0x7f7fffff
.word 0x29b3b2
.word 0xff3f987b
.word 0x29b3b2
.word 0xff3a8ea9
.word 0x29b3b2
.word 0xfed3653a
.word 0x7de67e2a
.word 0xfdea577e
.word 0x802a65f8
.word 0x7de67e2a
.word 0x7de67e2a
.word 0x802a65f8
.word 0x29b3b2
.word 0xfdea577e
.word 0x7de67e2a
.word 0x7e2fb07b
.word 0x3f92c0
.word 0x7de67e2a
.word 0x7de67e2a
.word 0x3f92c0
.word 0x29b3b2
.word 0x7e2fb07b
.word 0x29b3b2
.word 0x7f125b96
.word 0x7de67e2a
.word 0x7d902b16
.word 0x1a156b
.word 0x7de67e2a
.word 0x7de67e2a
.word 0x1a156b
.word 0x29b3b2
.word 0x7d902b16
.word 0x29b3b2
.word 0x7ebe3f3f
.word 0x7de67e2a
.word 0x7dce622b
.word 0x255707
.word 0x7de67e2a
.word 0x7de67e2a
.word 0x255707
.word 0x29b3b2
.word 0x7dce622b
.word 0x30e1ae
.word 0x30e1ae
.word 0x30e1ae
.word 0x408fa668
.word 0x30e1ae
.word 0x7f0
.word 0x30e1ae
.word 0x7e07167c
.word 0x7e07167c
.word 0xfd2820df
.word 0x800f3596
.word 0x7e07167c
.word 0x7e07167c
.word 0x800f3596
.word 0x30e1ae
.word 0xfd2820df
.word 0x30e1ae
.word 0x7f7fffff
.word 0x30e1ae
.word 0xff3f987b
.word 0x30e1ae
.word 0xff3a8ea9
.word 0x30e1ae
.word 0xfed3653a
.word 0x7e07167c
.word 0xfdea577e
.word 0x802a65f8
.word 0x7e07167c
.word 0x7e07167c
.word 0x802a65f8
.word 0x30e1ae
.word 0xfdea577e
.word 0x7e07167c
.word 0x7e2fb07b
.word 0x3f92c0
.word 0x7e07167c
.word 0x7e07167c
.word 0x3f92c0
.word 0x30e1ae
.word 0x7e2fb07b
.word 0x30e1ae
.word 0x7f125b96
.word 0x7e07167c
.word 0x7d902b16
.word 0x1a156b
.word 0x7e07167c
.word 0x7e07167c
.word 0x1a156b
.word 0x30e1ae
.word 0x7d902b16
.word 0x30e1ae
.word 0x7ebe3f3f
.word 0x7e07167c
.word 0x7dce622b
.word 0x255707
.word 0x7e07167c
.word 0x7e07167c
.word 0x255707
.word 0x30e1ae
.word 0x7dce622b
.word 0xfd2820df
.word 0xfd2820df
.word 0xfd2820df
.word 0xbfb2c8e8
.word 0xfd2820df
.word 0x7f0
.word 0xfd2820df
.word 0x800f3596
.word 0x800f3596
.word 0x803e0acf
.word 0xfd2820df
.word 0x803e0acf
.word 0x800f3596
.word 0x8011d249
.word 0xfd2820df
.word 0x8011d249
.word 0x800f3596
.word 0x80244d8b
.word 0xfd2820df
.word 0x80244d8b
.word 0x800f3596
.word 0x800d858e
.word 0xfd2820df
.word 0x800d858e
.word 0x800f3596
.word 0x802facf2
.word 0xfd2820df
.word 0x802facf2
.word 0x800f3596
.word 0x39b0fc
.word 0xfd2820df
.word 0x39b0fc
.word 0x800f3596
.word 0x1c8139
.word 0xfd2820df
.word 0x1c8139
.word 0x800f3596
.word 0x357d2c
.word 0xfd2820df
.word 0x357d2c
.word 0x800f3596
.word 0x29b3b2
.word 0xfd2820df
.word 0x29b3b2
.word 0x800f3596
.word 0x30e1ae
.word 0xfd2820df
.word 0x30e1ae
.word 0xfd2820df
.word 0xfed22917
.word 0xfed22917
.word 0xff3f987b
.word 0xfd9946c8
.word 0xfed22917
.word 0xfed22917
.word 0xfd9946c8
.word 0xfd2820df
.word 0xff3f987b
.word 0xfed22917
.word 0xff3a8ea9
.word 0xfd953eee
.word 0xfed22917
.word 0xfed22917
.word 0xfd953eee
.word 0xfd2820df
.word 0xff3a8ea9
.word 0xfed22917
.word 0xfed3653a
.word 0xfd291dc8
.word 0xfed22917
.word 0xfed22917
.word 0xfd291dc8
.word 0xfd2820df
.word 0xfed3653a
.word 0xfd2820df
.word 0xfdea577e
.word 0xfdea577e
.word 0xfd2820df
.word 0xfd2820df
.word 0x7e2fb07b
.word 0x7e2fb07b
.word 0xfd2820df
.word 0xfed22917
.word 0x7f125b96
.word 0x7d6a2c24
.word 0xfed22917
.word 0xfed22917
.word 0x7d6a2c24
.word 0xfd2820df
.word 0x7f125b96
.word 0xfd2820df
.word 0x7d902b16
.word 0x7d902b16
.word 0xfd2820df
.word 0xfed22917
.word 0x7ebe3f3f
.word 0x7d183299
.word 0xfed22917
.word 0xfed22917
.word 0x7d183299
.word 0xfd2820df
.word 0x7ebe3f3f
.word 0xfd2820df
.word 0x7dce622b
.word 0x7dce622b
.word 0xfd2820df
.word 0xff3f987b
.word 0xff3f987b
.word 0xff3f987b
.word 0xc022fdd5
.word 0xff3f987b
.word 0x7f0
.word 0xff3f987b
.word 0x801bbb48
.word 0x801bbb48
.word 0x803e0acf
.word 0xff3f987b
.word 0x803e0acf
.word 0x801bbb48
.word 0x8011d249
.word 0xff3f987b
.word 0x8011d249
.word 0x801bbb48
.word 0x80244d8b
.word 0xff3f987b
.word 0x80244d8b
.word 0x801bbb48
.word 0x800d858e
.word 0xff3f987b
.word 0x800d858e
.word 0x801bbb48
.word 0x802facf2
.word 0xff3f987b
.word 0x802facf2
.word 0x801bbb48
.word 0x39b0fc
.word 0xff3f987b
.word 0x39b0fc
.word 0x801bbb48
.word 0x1c8139
.word 0xff3f987b
.word 0x1c8139
.word 0x801bbb48
.word 0x357d2c
.word 0xff3f987b
.word 0x357d2c
.word 0x801bbb48
.word 0x29b3b2
.word 0xff3f987b
.word 0x29b3b2
.word 0x801bbb48
.word 0x30e1ae
.word 0xff3f987b
.word 0x30e1ae
.word 0xff3f987b
.word 0xfd9946c8
.word 0xfd9946c8
.word 0xfd2820df
.word 0xff3f987b
.word 0xfd2820df
.word 0xff3f987b
.word 0xff3a8ea9
.word 0xff3a8ea9
.word 0xff3f987b
.word 0xff3f987b
.word 0xfed3653a
.word 0xfed3653a
.word 0xff3f987b
.word 0xfd9946c8
.word 0xfdea577e
.word 0xff7fffff
.word 0xfd9946c8
.word 0xfd9946c8
.word 0xff7fffff
.word 0xff3f987b
.word 0xfdea577e
.word 0xfd9946c8
.word 0x7e2fb07b
.word 0x7f7fffff
.word 0xfd9946c8
.word 0xfd9946c8
.word 0x7f7fffff
.word 0xff3f987b
.word 0x7e2fb07b
.word 0xff3f987b
.word 0x7f125b96
.word 0x7f125b96
.word 0xff3f987b
.word 0xfd9946c8
.word 0x7d902b16
.word 0x7f3435dc
.word 0xfd9946c8
.word 0xfd9946c8
.word 0x7f3435dc
.word 0xff3f987b
.word 0x7d902b16
.word 0xff3f987b
.word 0x7ebe3f3f
.word 0x7ebe3f3f
.word 0xff3f987b
.word 0xfd9946c8
.word 0x7dce622b
.word 0xff3f987b
.word 0x7dce622b
.word 0xff3a8ea9
.word 0xff3a8ea9
.word 0xff3a8ea9
.word 0xc01eb493
.word 0xff3a8ea9
.word 0x7f0
.word 0xff3a8ea9
.word 0x801b0098
.word 0x801b0098
.word 0x803e0acf
.word 0xff3a8ea9
.word 0x803e0acf
.word 0x801b0098
.word 0x8011d249
.word 0xff3a8ea9
.word 0x8011d249
.word 0x801b0098
.word 0x80244d8b
.word 0xff3a8ea9
.word 0x80244d8b
.word 0x801b0098
.word 0x800d858e
.word 0xff3a8ea9
.word 0x800d858e
.word 0x801b0098
.word 0x802facf2
.word 0xff3a8ea9
.word 0x802facf2
.word 0x801b0098
.word 0x39b0fc
.word 0xff3a8ea9
.word 0x39b0fc
.word 0x801b0098
.word 0x1c8139
.word 0xff3a8ea9
.word 0x1c8139
.word 0x801b0098
.word 0x357d2c
.word 0xff3a8ea9
.word 0x357d2c
.word 0x801b0098
.word 0x29b3b2
.word 0xff3a8ea9
.word 0x29b3b2
.word 0x801b0098
.word 0x30e1ae
.word 0xff3a8ea9
.word 0x30e1ae
.word 0xff3a8ea9
.word 0xfd953eee
.word 0xfd953eee
.word 0xfd2820df
.word 0xff3a8ea9
.word 0xfd2820df
.word 0xff3a8ea9
.word 0xfed3653a
.word 0xfed3653a
.word 0xff3a8ea9
.word 0xfd953eee
.word 0xfdea577e
.word 0xff7fffff
.word 0xfd953eee
.word 0xfd953eee
.word 0xff7fffff
.word 0xff3a8ea9
.word 0xfdea577e
.word 0xfd953eee
.word 0x7e2fb07b
.word 0x7f7fffff
.word 0xfd953eee
.word 0xfd953eee
.word 0x7f7fffff
.word 0xff3a8ea9
.word 0x7e2fb07b
.word 0xff3a8ea9
.word 0x7f125b96
.word 0x7f125b96
.word 0xff3a8ea9
.word 0xfd953eee
.word 0x7d902b16
.word 0x7f3435dc
.word 0xfd953eee
.word 0xfd953eee
.word 0x7f3435dc
.word 0xff3a8ea9
.word 0x7d902b16
.word 0xff3a8ea9
.word 0x7ebe3f3f
.word 0x7ebe3f3f
.word 0xff3a8ea9
.word 0xfd953eee
.word 0x7dce622b
.word 0xff3a8ea9
.word 0x7dce622b
.word 0xfed3653a
.word 0xfed3653a
.word 0xfed3653a
.word 0xbfb3d5d8
.word 0xfed3653a
.word 0x7f0
.word 0xfed3653a
.word 0x800f4c77
.word 0x800f4c77
.word 0x803e0acf
.word 0xfed3653a
.word 0x803e0acf
.word 0x800f4c77
.word 0x8011d249
.word 0xfed3653a
.word 0x8011d249
.word 0x800f4c77
.word 0x80244d8b
.word 0xfed3653a
.word 0x80244d8b
.word 0x800f4c77
.word 0x800d858e
.word 0xfed3653a
.word 0x800d858e
.word 0x800f4c77
.word 0x802facf2
.word 0xfed3653a
.word 0x802facf2
.word 0x800f4c77
.word 0x39b0fc
.word 0xfed3653a
.word 0x39b0fc
.word 0x800f4c77
.word 0x1c8139
.word 0xfed3653a
.word 0x1c8139
.word 0x800f4c77
.word 0x357d2c
.word 0xfed3653a
.word 0x357d2c
.word 0x800f4c77
.word 0x29b3b2
.word 0xfed3653a
.word 0x29b3b2
.word 0x800f4c77
.word 0x30e1ae
.word 0xfed3653a
.word 0x30e1ae
.word 0xfed3653a
.word 0xfd291dc8
.word 0xfd291dc8
.word 0xfd2820df
.word 0xfed3653a
.word 0xfd2820df
.word 0xfd291dc8
.word 0xfdea577e
.word 0xff7fffff
.word 0xfd291dc8
.word 0xfd291dc8
.word 0xff7fffff
.word 0xfed3653a
.word 0xfdea577e
.word 0xfd291dc8
.word 0x7e2fb07b
.word 0x7f7fffff
.word 0xfd291dc8
.word 0xfd291dc8
.word 0x7f7fffff
.word 0xfed3653a
.word 0x7e2fb07b
.word 0xfed3653a
.word 0x7f125b96
.word 0x7f125b96
.word 0xfed3653a
.word 0xfd291dc8
.word 0x7d902b16
.word 0x7f3435dc
.word 0xfd291dc8
.word 0xfd291dc8
.word 0x7f3435dc
.word 0xfed3653a
.word 0x7d902b16
.word 0xfed3653a
.word 0x7ebe3f3f
.word 0x7ebe3f3f
.word 0xfed3653a
.word 0xfd291dc8
.word 0x7dce622b
.word 0xfed3653a
.word 0x7dce622b
.word 0xfdea577e
.word 0xfdea577e
.word 0xfdea577e
.word 0xc07931e5
.word 0xfdea577e
.word 0x7f0
.word 0xfdea577e
.word 0x802a65f8
.word 0x802a65f8
.word 0x803e0acf
.word 0xfdea577e
.word 0x803e0acf
.word 0x802a65f8
.word 0x8011d249
.word 0xfdea577e
.word 0x8011d249
.word 0x802a65f8
.word 0x80244d8b
.word 0xfdea577e
.word 0x80244d8b
.word 0x802a65f8
.word 0x800d858e
.word 0xfdea577e
.word 0x800d858e
.word 0x802a65f8
.word 0x802facf2
.word 0xfdea577e
.word 0x802facf2
.word 0x802a65f8
.word 0x39b0fc
.word 0xfdea577e
.word 0x39b0fc
.word 0x802a65f8
.word 0x1c8139
.word 0xfdea577e
.word 0x1c8139
.word 0x802a65f8
.word 0x357d2c
.word 0xfdea577e
.word 0x357d2c
.word 0x802a65f8
.word 0x29b3b2
.word 0xfdea577e
.word 0x29b3b2
.word 0x802a65f8
.word 0x30e1ae
.word 0xfdea577e
.word 0x30e1ae
.word 0xfdea577e
.word 0xff7fffff
.word 0xfdea577e
.word 0xff3f987b
.word 0xfdea577e
.word 0xff3a8ea9
.word 0xfdea577e
.word 0xfed3653a
.word 0xfdea577e
.word 0x7e2fb07b
.word 0x7e2fb07b
.word 0xfdea577e
.word 0x7d6a2c24
.word 0xff7fffff
.word 0xff7fffff
.word 0x7d6a2c24
.word 0xfdea577e
.word 0x7f125b96
.word 0xfdea577e
.word 0x7d902b16
.word 0x7d902b16
.word 0xfdea577e
.word 0x7d183299
.word 0xff7fffff
.word 0xff7fffff
.word 0x7d183299
.word 0xfdea577e
.word 0x7ebe3f3f
.word 0xfdea577e
.word 0x7dce622b
.word 0x7dce622b
.word 0xfdea577e
.word 0x7e2fb07b
.word 0x7e2fb07b
.word 0x7e2fb07b
.word 0x40bad332
.word 0x7e2fb07b
.word 0x7f0
.word 0x7e2fb07b
.word 0x3f92c0
.word 0x3f92c0
.word 0x803e0acf
.word 0x7e2fb07b
.word 0x803e0acf
.word 0x3f92c0
.word 0x8011d249
.word 0x7e2fb07b
.word 0x8011d249
.word 0x3f92c0
.word 0x80244d8b
.word 0x7e2fb07b
.word 0x80244d8b
.word 0x3f92c0
.word 0x800d858e
.word 0x7e2fb07b
.word 0x800d858e
.word 0x3f92c0
.word 0x802facf2
.word 0x7e2fb07b
.word 0x802facf2
.word 0x3f92c0
.word 0x39b0fc
.word 0x7e2fb07b
.word 0x39b0fc
.word 0x3f92c0
.word 0x1c8139
.word 0x7e2fb07b
.word 0x1c8139
.word 0x3f92c0
.word 0x357d2c
.word 0x7e2fb07b
.word 0x357d2c
.word 0x3f92c0
.word 0x29b3b2
.word 0x7e2fb07b
.word 0x29b3b2
.word 0x3f92c0
.word 0x30e1ae
.word 0x7e2fb07b
.word 0x30e1ae
.word 0x7e2fb07b
.word 0x7f7fffff
.word 0x7e2fb07b
.word 0xff3f987b
.word 0x7e2fb07b
.word 0xff3a8ea9
.word 0x7e2fb07b
.word 0xfed3653a
.word 0x7d6a2c24
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d6a2c24
.word 0x7e2fb07b
.word 0x7f125b96
.word 0x7e2fb07b
.word 0x7d902b16
.word 0x7d902b16
.word 0x7e2fb07b
.word 0x7d183299
.word 0x7f7fffff
.word 0x7f7fffff
.word 0x7d183299
.word 0x7e2fb07b
.word 0x7ebe3f3f
.word 0x7e2fb07b
.word 0x7dce622b
.word 0x7dce622b
.word 0x7e2fb07b
.word 0x7f125b96
.word 0x7f125b96
.word 0x7f125b96
.word 0x3ff903cc
.word 0x7f125b96
.word 0x7f0
.word 0x7f125b96
.word 0x152f10
.word 0x152f10
.word 0x803e0acf
.word 0x7f125b96
.word 0x803e0acf
.word 0x152f10
.word 0x8011d249
.word 0x7f125b96
.word 0x8011d249
.word 0x152f10
.word 0x80244d8b
.word 0x7f125b96
.word 0x80244d8b
.word 0x152f10
.word 0x800d858e
.word 0x7f125b96
.word 0x800d858e
.word 0x152f10
.word 0x802facf2
.word 0x7f125b96
.word 0x802facf2
.word 0x152f10
.word 0x39b0fc
.word 0x7f125b96
.word 0x39b0fc
.word 0x152f10
.word 0x1c8139
.word 0x7f125b96
.word 0x1c8139
.word 0x152f10
.word 0x357d2c
.word 0x7f125b96
.word 0x357d2c
.word 0x152f10
.word 0x29b3b2
.word 0x7f125b96
.word 0x29b3b2
.word 0x152f10
.word 0x30e1ae
.word 0x7f125b96
.word 0x30e1ae
.word 0x7f125b96
.word 0x7d6a2c24
.word 0x7d6a2c24
.word 0xfd2820df
.word 0x7f125b96
.word 0xfd2820df
.word 0x7d6a2c24
.word 0xfdea577e
.word 0x7f125b96
.word 0xfdea577e
.word 0x7d6a2c24
.word 0x7e2fb07b
.word 0x7f125b96
.word 0x7e2fb07b
.word 0x7d6a2c24
.word 0x7d902b16
.word 0x7f3435dc
.word 0x7d6a2c24
.word 0x7d6a2c24
.word 0x7f3435dc
.word 0x7f125b96
.word 0x7d902b16
.word 0x7f125b96
.word 0x7ebe3f3f
.word 0x7ebe3f3f
.word 0x7f125b96
.word 0x7d6a2c24
.word 0x7dce622b
.word 0x7f125b96
.word 0x7dce622b
.word 0x7d902b16
.word 0x7d902b16
.word 0x7d902b16
.word 0x40194e59
.word 0x7d902b16
.word 0x7f0
.word 0x7d902b16
.word 0x1a156b
.word 0x1a156b
.word 0x803e0acf
.word 0x7d902b16
.word 0x803e0acf
.word 0x1a156b
.word 0x8011d249
.word 0x7d902b16
.word 0x8011d249
.word 0x1a156b
.word 0x80244d8b
.word 0x7d902b16
.word 0x80244d8b
.word 0x1a156b
.word 0x800d858e
.word 0x7d902b16
.word 0x800d858e
.word 0x1a156b
.word 0x802facf2
.word 0x7d902b16
.word 0x802facf2
.word 0x1a156b
.word 0x39b0fc
.word 0x7d902b16
.word 0x39b0fc
.word 0x1a156b
.word 0x1c8139
.word 0x7d902b16
.word 0x1c8139
.word 0x1a156b
.word 0x357d2c
.word 0x7d902b16
.word 0x357d2c
.word 0x1a156b
.word 0x29b3b2
.word 0x7d902b16
.word 0x29b3b2
.word 0x1a156b
.word 0x30e1ae
.word 0x7d902b16
.word 0x30e1ae
.word 0x7d902b16
.word 0x7f3435dc
.word 0x7f3435dc
.word 0xff3f987b
.word 0x7d902b16
.word 0xff3f987b
.word 0x7f3435dc
.word 0xff3a8ea9
.word 0x7d902b16
.word 0xff3a8ea9
.word 0x7f3435dc
.word 0xfed3653a
.word 0x7d902b16
.word 0xfed3653a
.word 0x7f3435dc
.word 0x7f125b96
.word 0x7d902b16
.word 0x7f125b96
.word 0x7f3435dc
.word 0x7ebe3f3f
.word 0x7d183299
.word 0x7f3435dc
.word 0x7f3435dc
.word 0x7d183299
.word 0x7d902b16
.word 0x7ebe3f3f
.word 0x7d902b16
.word 0x7dce622b
.word 0x7dce622b
.word 0x7d902b16
.word 0x7ebe3f3f
.word 0x7ebe3f3f
.word 0x7ebe3f3f
.word 0x3fa1d824
.word 0x7ebe3f3f
.word 0x7f0
.word 0x7ebe3f3f
.word 0xdc4a8
.word 0xdc4a8
.word 0x803e0acf
.word 0x7ebe3f3f
.word 0x803e0acf
.word 0xdc4a8
.word 0x8011d249
.word 0x7ebe3f3f
.word 0x8011d249
.word 0xdc4a8
.word 0x80244d8b
.word 0x7ebe3f3f
.word 0x80244d8b
.word 0xdc4a8
.word 0x800d858e
.word 0x7ebe3f3f
.word 0x800d858e
.word 0xdc4a8
.word 0x802facf2
.word 0x7ebe3f3f
.word 0x802facf2
.word 0xdc4a8
.word 0x39b0fc
.word 0x7ebe3f3f
.word 0x39b0fc
.word 0xdc4a8
.word 0x1c8139
.word 0x7ebe3f3f
.word 0x1c8139
.word 0xdc4a8
.word 0x357d2c
.word 0x7ebe3f3f
.word 0x357d2c
.word 0xdc4a8
.word 0x29b3b2
.word 0x7ebe3f3f
.word 0x29b3b2
.word 0xdc4a8
.word 0x30e1ae
.word 0x7ebe3f3f
.word 0x30e1ae
.word 0x7ebe3f3f
.word 0x7d183299
.word 0x7d183299
.word 0xfd2820df
.word 0x7ebe3f3f
.word 0xfd2820df
.word 0x7d183299
.word 0xfdea577e
.word 0x7ebe3f3f
.word 0xfdea577e
.word 0x7d183299
.word 0x7e2fb07b
.word 0x7ebe3f3f
.word 0x7e2fb07b
.word 0x7d183299
.word 0x7d902b16
.word 0x7ebe3f3f
.word 0x7d902b16
.word 0x7d183299
.word 0x7dce622b
.word 0x7ebe3f3f
.word 0x7dce622b
.word 0x7dce622b
.word 0x405b76ec
.word 0x7dce622b
.word 0x7f0
.word 0x7dce622b
.word 0x255707
.word 0x255707
.word 0x803e0acf
.word 0x7dce622b
.word 0x803e0acf
.word 0x255707
.word 0x8011d249
.word 0x7dce622b
.word 0x8011d249
.word 0x255707
.word 0x80244d8b
.word 0x7dce622b
.word 0x80244d8b
.word 0x255707
.word 0x800d858e
.word 0x7dce622b
.word 0x800d858e
.word 0x255707
.word 0x802facf2
.word 0x7dce622b
.word 0x802facf2
.word 0x255707
.word 0x39b0fc
.word 0x7dce622b
.word 0x39b0fc
.word 0x255707
.word 0x1c8139
.word 0x7dce622b
.word 0x1c8139
.word 0x255707
.word 0x357d2c
.word 0x7dce622b
.word 0x357d2c
.word 0x255707
.word 0x29b3b2
.word 0x7dce622b
.word 0x29b3b2
.word 0x255707
.word 0x30e1ae
.word 0x7dce622b
.word 0x30e1ae
.word 0x7dce622b
.word 0x7f7fffff
.word 0x7dce622b
.word 0xff3f987b
.word 0x7dce622b
.word 0xff3a8ea9
.word 0x7dce622b
.word 0xfed3653a
.word 0x7dce622b
.word 0x7f125b96
.word 0x7dce622b
.word 0x7ebe3f3f
.word 0x7f0
.word 0x803e0acf
.word 0x7f0
.word 0xc0b65363
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_2:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_3:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_4:
    .fill 392*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
