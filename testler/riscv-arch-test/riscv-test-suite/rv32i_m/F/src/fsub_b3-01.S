
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.5.2
// timestamp : Tue Sep  7 16:50:33 2021 GMT
// usage     : riscv_ctg \
//                  -- cgf $cgf \
//                  -- xlen $xlen \
// -----------
//
// -----------
// Copyright (c) 2021. IIT Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fsub.s instruction of the RISC-V F extension for the fsub_b3 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fsub_b3)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs1 == rs2 == rd, rs1==f11, rs2==f11, rd==f11, fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4e622b and rm_val == 0  
// opcode: fsub.s ; op1:f11; op2:f11; dest:f11; op1val:0x7dce622b; op2val:0x7dce622b; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f11, f11, f11, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1:
// rs1 == rd != rs2, rs1==f9, rs2==f10, rd==f9, fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae70d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2ae70d and rm_val == 4  
// opcode: fsub.s ; op1:f9; op2:f10; dest:f9; op1val:0x7eaae70d; op2val:0x7eaae70d; valaddr_reg:x16; val_offset:8; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f9, f9, f10, 0x4, 0, x16, 8, x17, x15, 8, x18)

inst_2:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==f0, rs2==f19, rd==f4, fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae70d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2ae70d and rm_val == 3  
// opcode: fsub.s ; op1:f0; op2:f19; dest:f4; op1val:0x7eaae70d; op2val:0x7eaae70d; valaddr_reg:x16; val_offset:16; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f4, f0, f19, 0x3, 0, x16, 16, x17, x15, 16, x18)

inst_3:
// rs2 == rd != rs1, rs1==f26, rs2==f3, rd==f3, fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae70d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2ae70d and rm_val == 2  
// opcode: fsub.s ; op1:f26; op2:f3; dest:f3; op1val:0x7eaae70d; op2val:0x7eaae70d; valaddr_reg:x16; val_offset:24; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f3, f26, f3, 0x2, 0, x16, 24, x17, x15, 24, x18)

inst_4:
// rs1 == rs2 != rd, rs1==f2, rs2==f2, rd==f21, fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae70d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2ae70d and rm_val == 1  
// opcode: fsub.s ; op1:f2; op2:f2; dest:f21; op1val:0x7eaae70d; op2val:0x7eaae70d; valaddr_reg:x16; val_offset:32; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f21, f2, f2, 0x1, 0, x16, 32, x17, x15, 32, x18)

inst_5:
// rs1==f25, rs2==f26, rd==f15, fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae70d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2ae70d and rm_val == 0  
// opcode: fsub.s ; op1:f25; op2:f26; dest:f15; op1val:0x7eaae70d; op2val:0x7eaae70d; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f15, f25, f26, 0x0, 0, x16, 40, x17, x15, 40, x18)

inst_6:
// rs1==f17, rs2==f4, rd==f30, fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d54da and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7d54da and rm_val == 4  
// opcode: fsub.s ; op1:f17; op2:f4; dest:f30; op1val:0x7efd54da; op2val:0x7efd54da; valaddr_reg:x16; val_offset:48; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f30, f17, f4, 0x4, 0, x16, 48, x17, x15, 48, x18)

inst_7:
// rs1==f6, rs2==f13, rd==f22, fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d54da and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7d54da and rm_val == 3  
// opcode: fsub.s ; op1:f6; op2:f13; dest:f22; op1val:0x7efd54da; op2val:0x7efd54da; valaddr_reg:x16; val_offset:56; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f22, f6, f13, 0x3, 0, x16, 56, x17, x15, 56, x18)

inst_8:
// rs1==f22, rs2==f0, rd==f6, fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d54da and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7d54da and rm_val == 2  
// opcode: fsub.s ; op1:f22; op2:f0; dest:f6; op1val:0x7efd54da; op2val:0x7efd54da; valaddr_reg:x16; val_offset:64; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f6, f22, f0, 0x2, 0, x16, 64, x17, x15, 64, x18)

inst_9:
// rs1==f16, rs2==f29, rd==f27, fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d54da and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7d54da and rm_val == 1  
// opcode: fsub.s ; op1:f16; op2:f29; dest:f27; op1val:0x7efd54da; op2val:0x7efd54da; valaddr_reg:x16; val_offset:72; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f27, f16, f29, 0x1, 0, x16, 72, x17, x15, 72, x18)

inst_10:
// rs1==f15, rs2==f20, rd==f26, fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d54da and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7d54da and rm_val == 0  
// opcode: fsub.s ; op1:f15; op2:f20; dest:f26; op1val:0x7efd54da; op2val:0x7efd54da; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f26, f15, f20, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_11:
// rs1==f27, rs2==f21, rd==f31, fs1 == 0 and fe1 == 0xfe and fm1 == 0x14f204 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x14f204 and rm_val == 4  
// opcode: fsub.s ; op1:f27; op2:f21; dest:f31; op1val:0x7f14f204; op2val:0x7f14f204; valaddr_reg:x16; val_offset:88; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f31, f27, f21, 0x4, 0, x16, 88, x17, x15, 88, x18)

inst_12:
// rs1==f13, rs2==f1, rd==f19, fs1 == 0 and fe1 == 0xfe and fm1 == 0x14f204 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x14f204 and rm_val == 3  
// opcode: fsub.s ; op1:f13; op2:f1; dest:f19; op1val:0x7f14f204; op2val:0x7f14f204; valaddr_reg:x16; val_offset:96; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f19, f13, f1, 0x3, 0, x16, 96, x17, x15, 96, x18)

inst_13:
// rs1==f4, rs2==f9, rd==f28, fs1 == 0 and fe1 == 0xfe and fm1 == 0x14f204 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x14f204 and rm_val == 2  
// opcode: fsub.s ; op1:f4; op2:f9; dest:f28; op1val:0x7f14f204; op2val:0x7f14f204; valaddr_reg:x16; val_offset:104; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f28, f4, f9, 0x2, 0, x16, 104, x17, x15, 104, x18)

inst_14:
// rs1==f19, rs2==f27, rd==f29, fs1 == 0 and fe1 == 0xfe and fm1 == 0x14f204 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x14f204 and rm_val == 1  
// opcode: fsub.s ; op1:f19; op2:f27; dest:f29; op1val:0x7f14f204; op2val:0x7f14f204; valaddr_reg:x16; val_offset:112; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f29, f19, f27, 0x1, 0, x16, 112, x17, x15, 112, x18)

inst_15:
// rs1==f29, rs2==f22, rd==f8, fs1 == 0 and fe1 == 0xfe and fm1 == 0x14f204 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x14f204 and rm_val == 0  
// opcode: fsub.s ; op1:f29; op2:f22; dest:f8; op1val:0x7f14f204; op2val:0x7f14f204; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f8, f29, f22, 0x0, 0, x16, 120, x17, x15, 120, x18)

inst_16:
// rs1==f30, rs2==f7, rd==f14, fs1 == 0 and fe1 == 0xfe and fm1 == 0x383655 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x383655 and rm_val == 4  
// opcode: fsub.s ; op1:f30; op2:f7; dest:f14; op1val:0x7f383655; op2val:0x7f383655; valaddr_reg:x16; val_offset:128; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f14, f30, f7, 0x4, 0, x16, 128, x17, x15, 128, x18)

inst_17:
// rs1==f5, rs2==f12, rd==f18, fs1 == 0 and fe1 == 0xfe and fm1 == 0x383655 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x383655 and rm_val == 3  
// opcode: fsub.s ; op1:f5; op2:f12; dest:f18; op1val:0x7f383655; op2val:0x7f383655; valaddr_reg:x16; val_offset:136; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f18, f5, f12, 0x3, 0, x16, 136, x17, x15, 136, x18)

inst_18:
// rs1==f14, rs2==f15, rd==f12, fs1 == 0 and fe1 == 0xfe and fm1 == 0x383655 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x383655 and rm_val == 2  
// opcode: fsub.s ; op1:f14; op2:f15; dest:f12; op1val:0x7f383655; op2val:0x7f383655; valaddr_reg:x16; val_offset:144; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f14, f15, 0x2, 0, x16, 144, x17, x15, 144, x18)

inst_19:
// rs1==f3, rs2==f17, rd==f2, fs1 == 0 and fe1 == 0xfe and fm1 == 0x383655 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x383655 and rm_val == 1  
// opcode: fsub.s ; op1:f3; op2:f17; dest:f2; op1val:0x7f383655; op2val:0x7f383655; valaddr_reg:x16; val_offset:152; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f2, f3, f17, 0x1, 0, x16, 152, x17, x15, 152, x18)

inst_20:
// rs1==f20, rs2==f31, rd==f24, fs1 == 0 and fe1 == 0xfe and fm1 == 0x383655 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x383655 and rm_val == 0  
// opcode: fsub.s ; op1:f20; op2:f31; dest:f24; op1val:0x7f383655; op2val:0x7f383655; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f24, f20, f31, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_21:
// rs1==f12, rs2==f25, rd==f20, fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0xfc and fm2 == 0x4d75cc and rm_val == 4  
// opcode: fsub.s ; op1:f12; op2:f25; dest:f20; op1val:0x7e4d75cc; op2val:0x7e4d75cc; valaddr_reg:x16; val_offset:168; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f20, f12, f25, 0x4, 0, x16, 168, x17, x15, 168, x18)

inst_22:
// rs1==f1, rs2==f5, rd==f17, fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0xfc and fm2 == 0x4d75cc and rm_val == 3  
// opcode: fsub.s ; op1:f1; op2:f5; dest:f17; op1val:0x7e4d75cc; op2val:0x7e4d75cc; valaddr_reg:x16; val_offset:176; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f17, f1, f5, 0x3, 0, x16, 176, x17, x15, 176, x18)

inst_23:
// rs1==f7, rs2==f16, rd==f23, fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0xfc and fm2 == 0x4d75cc and rm_val == 2  
// opcode: fsub.s ; op1:f7; op2:f16; dest:f23; op1val:0x7e4d75cc; op2val:0x7e4d75cc; valaddr_reg:x16; val_offset:184; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f23, f7, f16, 0x2, 0, x16, 184, x17, x15, 184, x18)

inst_24:
// rs1==f18, rs2==f28, rd==f25, fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0xfc and fm2 == 0x4d75cc and rm_val == 1  
// opcode: fsub.s ; op1:f18; op2:f28; dest:f25; op1val:0x7e4d75cc; op2val:0x7e4d75cc; valaddr_reg:x16; val_offset:192; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f25, f18, f28, 0x1, 0, x16, 192, x17, x15, 192, x18)

inst_25:
// rs1==f28, rs2==f6, rd==f0, fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0xfc and fm2 == 0x4d75cc and rm_val == 0  
// opcode: fsub.s ; op1:f28; op2:f6; dest:f0; op1val:0x7e4d75cc; op2val:0x7e4d75cc; valaddr_reg:x16; val_offset:200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f0, f28, f6, 0x0, 0, x16, 200, x17, x15, 200, x18)

inst_26:
// rs1==f10, rs2==f23, rd==f13, fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b200c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1b200c and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f23; dest:f13; op1val:0x7f1b200c; op2val:0x7f1b200c; valaddr_reg:x16; val_offset:208; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f13, f10, f23, 0x4, 0, x16, 208, x17, x15, 208, x18)

inst_27:
// rs1==f8, rs2==f18, rd==f16, fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b200c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1b200c and rm_val == 3  
// opcode: fsub.s ; op1:f8; op2:f18; dest:f16; op1val:0x7f1b200c; op2val:0x7f1b200c; valaddr_reg:x16; val_offset:216; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f16, f8, f18, 0x3, 0, x16, 216, x17, x15, 216, x18)

inst_28:
// rs1==f21, rs2==f14, rd==f5, fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b200c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1b200c and rm_val == 2  
// opcode: fsub.s ; op1:f21; op2:f14; dest:f5; op1val:0x7f1b200c; op2val:0x7f1b200c; valaddr_reg:x16; val_offset:224; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f5, f21, f14, 0x2, 0, x16, 224, x17, x15, 224, x18)

inst_29:
// rs1==f31, rs2==f8, rd==f7, fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b200c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1b200c and rm_val == 1  
// opcode: fsub.s ; op1:f31; op2:f8; dest:f7; op1val:0x7f1b200c; op2val:0x7f1b200c; valaddr_reg:x16; val_offset:232; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f7, f31, f8, 0x1, 0, x16, 232, x17, x15, 232, x18)

inst_30:
// rs1==f23, rs2==f30, rd==f1, fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b200c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1b200c and rm_val == 0  
// opcode: fsub.s ; op1:f23; op2:f30; dest:f1; op1val:0x7f1b200c; op2val:0x7f1b200c; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f1, f23, f30, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_31:
// rs1==f24, fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7a1d39 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x7a1d39 and rm_val == 4  
// opcode: fsub.s ; op1:f24; op2:f31; dest:f28; op1val:0x7cfa1d39; op2val:0x7cfa1d39; valaddr_reg:x16; val_offset:248; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f28, f24, f31, 0x4, 0, x16, 248, x17, x15, 248, x18)

inst_32:
// rs2==f24, fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7a1d39 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x7a1d39 and rm_val == 3  
// opcode: fsub.s ; op1:f4; op2:f24; dest:f2; op1val:0x7cfa1d39; op2val:0x7cfa1d39; valaddr_reg:x16; val_offset:256; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f2, f4, f24, 0x3, 0, x16, 256, x17, x15, 256, x18)

inst_33:
// rd==f10, fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7a1d39 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x7a1d39 and rm_val == 2  
// opcode: fsub.s ; op1:f3; op2:f2; dest:f10; op1val:0x7cfa1d39; op2val:0x7cfa1d39; valaddr_reg:x16; val_offset:264; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f10, f3, f2, 0x2, 0, x16, 264, x17, x15, 264, x18)

inst_34:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7a1d39 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x7a1d39 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7cfa1d39; op2val:0x7cfa1d39; valaddr_reg:x16; val_offset:272; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 272, x17, x15, 272, x18)

inst_35:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7a1d39 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x7a1d39 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7cfa1d39; op2val:0x7cfa1d39; valaddr_reg:x16; val_offset:280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 280, x17, x15, 280, x18)

inst_36:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d2144 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x7d2144 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dfd2144; op2val:0x7dfd2144; valaddr_reg:x16; val_offset:288; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 288, x17, x15, 288, x18)

inst_37:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d2144 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x7d2144 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dfd2144; op2val:0x7dfd2144; valaddr_reg:x16; val_offset:296; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 296, x17, x15, 296, x18)

inst_38:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d2144 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x7d2144 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dfd2144; op2val:0x7dfd2144; valaddr_reg:x16; val_offset:304; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 304, x17, x15, 304, x18)

inst_39:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d2144 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x7d2144 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dfd2144; op2val:0x7dfd2144; valaddr_reg:x16; val_offset:312; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 312, x17, x15, 312, x18)

inst_40:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d2144 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x7d2144 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dfd2144; op2val:0x7dfd2144; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_41:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x059ff9 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x059ff9 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e859ff9; op2val:0x7e859ff9; valaddr_reg:x16; val_offset:328; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 328, x17, x15, 328, x18)

inst_42:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x059ff9 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x059ff9 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e859ff9; op2val:0x7e859ff9; valaddr_reg:x16; val_offset:336; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 336, x17, x15, 336, x18)

inst_43:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x059ff9 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x059ff9 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e859ff9; op2val:0x7e859ff9; valaddr_reg:x16; val_offset:344; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 344, x17, x15, 344, x18)

inst_44:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x059ff9 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x059ff9 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e859ff9; op2val:0x7e859ff9; valaddr_reg:x16; val_offset:352; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 352, x17, x15, 352, x18)

inst_45:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x059ff9 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x059ff9 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e859ff9; op2val:0x7e859ff9; valaddr_reg:x16; val_offset:360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 360, x17, x15, 360, x18)

inst_46:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x02dfcb and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f02dfcb; op2val:0x7f02dfcb; valaddr_reg:x16; val_offset:368; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 368, x17, x15, 368, x18)

inst_47:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x02dfcb and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f02dfcb; op2val:0x7f02dfcb; valaddr_reg:x16; val_offset:376; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 376, x17, x15, 376, x18)

inst_48:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x02dfcb and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f02dfcb; op2val:0x7f02dfcb; valaddr_reg:x16; val_offset:384; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 384, x17, x15, 384, x18)

inst_49:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x02dfcb and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f02dfcb; op2val:0x7f02dfcb; valaddr_reg:x16; val_offset:392; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 392, x17, x15, 392, x18)

inst_50:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x02dfcb and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f02dfcb; op2val:0x7f02dfcb; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_51:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x117cee and fs2 == 0 and fe2 == 0xfe and fm2 == 0x117cee and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f117cee; op2val:0x7f117cee; valaddr_reg:x16; val_offset:408; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 408, x17, x15, 408, x18)

inst_52:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x117cee and fs2 == 0 and fe2 == 0xfe and fm2 == 0x117cee and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f117cee; op2val:0x7f117cee; valaddr_reg:x16; val_offset:416; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 416, x17, x15, 416, x18)

inst_53:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x117cee and fs2 == 0 and fe2 == 0xfe and fm2 == 0x117cee and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f117cee; op2val:0x7f117cee; valaddr_reg:x16; val_offset:424; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 424, x17, x15, 424, x18)

inst_54:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x117cee and fs2 == 0 and fe2 == 0xfe and fm2 == 0x117cee and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f117cee; op2val:0x7f117cee; valaddr_reg:x16; val_offset:432; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 432, x17, x15, 432, x18)

inst_55:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x117cee and fs2 == 0 and fe2 == 0xfe and fm2 == 0x117cee and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f117cee; op2val:0x7f117cee; valaddr_reg:x16; val_offset:440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 440, x17, x15, 440, x18)

inst_56:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x272192 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x272192 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e272192; op2val:0x7e272192; valaddr_reg:x16; val_offset:448; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 448, x17, x15, 448, x18)

inst_57:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x272192 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x272192 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e272192; op2val:0x7e272192; valaddr_reg:x16; val_offset:456; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 456, x17, x15, 456, x18)

inst_58:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x272192 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x272192 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e272192; op2val:0x7e272192; valaddr_reg:x16; val_offset:464; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 464, x17, x15, 464, x18)

inst_59:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x272192 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x272192 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e272192; op2val:0x7e272192; valaddr_reg:x16; val_offset:472; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 472, x17, x15, 472, x18)

inst_60:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x272192 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x272192 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e272192; op2val:0x7e272192; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_61:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x07613f and fs2 == 0 and fe2 == 0xfc and fm2 == 0x07613f and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e07613f; op2val:0x7e07613f; valaddr_reg:x16; val_offset:488; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 488, x17, x15, 488, x18)

inst_62:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x07613f and fs2 == 0 and fe2 == 0xfc and fm2 == 0x07613f and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e07613f; op2val:0x7e07613f; valaddr_reg:x16; val_offset:496; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 496, x17, x15, 496, x18)

inst_63:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x07613f and fs2 == 0 and fe2 == 0xfc and fm2 == 0x07613f and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e07613f; op2val:0x7e07613f; valaddr_reg:x16; val_offset:504; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 504, x17, x15, 504, x18)

inst_64:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x07613f and fs2 == 0 and fe2 == 0xfc and fm2 == 0x07613f and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e07613f; op2val:0x7e07613f; valaddr_reg:x16; val_offset:512; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 512, x17, x15, 512, x18)

inst_65:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x07613f and fs2 == 0 and fe2 == 0xfc and fm2 == 0x07613f and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e07613f; op2val:0x7e07613f; valaddr_reg:x16; val_offset:520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 520, x17, x15, 520, x18)

inst_66:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3855ca and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3855ca and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3855ca; op2val:0x7f3855ca; valaddr_reg:x16; val_offset:528; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 528, x17, x15, 528, x18)

inst_67:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3855ca and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3855ca and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3855ca; op2val:0x7f3855ca; valaddr_reg:x16; val_offset:536; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 536, x17, x15, 536, x18)

inst_68:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3855ca and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3855ca and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3855ca; op2val:0x7f3855ca; valaddr_reg:x16; val_offset:544; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 544, x17, x15, 544, x18)

inst_69:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3855ca and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3855ca and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3855ca; op2val:0x7f3855ca; valaddr_reg:x16; val_offset:552; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 552, x17, x15, 552, x18)

inst_70:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3855ca and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3855ca and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3855ca; op2val:0x7f3855ca; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_71:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2467bb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2467bb and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2467bb; op2val:0x7f2467bb; valaddr_reg:x16; val_offset:568; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 568, x17, x15, 568, x18)

inst_72:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2467bb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2467bb and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2467bb; op2val:0x7f2467bb; valaddr_reg:x16; val_offset:576; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 576, x17, x15, 576, x18)

inst_73:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2467bb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2467bb and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2467bb; op2val:0x7f2467bb; valaddr_reg:x16; val_offset:584; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 584, x17, x15, 584, x18)

inst_74:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2467bb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2467bb and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2467bb; op2val:0x7f2467bb; valaddr_reg:x16; val_offset:592; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 592, x17, x15, 592, x18)

inst_75:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2467bb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2467bb and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2467bb; op2val:0x7f2467bb; valaddr_reg:x16; val_offset:600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 600, x17, x15, 600, x18)

inst_76:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d646b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0d646b and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0d646b; op2val:0x7f0d646b; valaddr_reg:x16; val_offset:608; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 608, x17, x15, 608, x18)

inst_77:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d646b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0d646b and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0d646b; op2val:0x7f0d646b; valaddr_reg:x16; val_offset:616; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 616, x17, x15, 616, x18)

inst_78:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d646b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0d646b and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0d646b; op2val:0x7f0d646b; valaddr_reg:x16; val_offset:624; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 624, x17, x15, 624, x18)

inst_79:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d646b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0d646b and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0d646b; op2val:0x7f0d646b; valaddr_reg:x16; val_offset:632; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 632, x17, x15, 632, x18)

inst_80:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d646b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0d646b and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0d646b; op2val:0x7f0d646b; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_81:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0eb32c and fs2 == 0 and fe2 == 0xfd and fm2 == 0x0eb32c and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e8eb32c; op2val:0x7e8eb32c; valaddr_reg:x16; val_offset:648; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 648, x17, x15, 648, x18)

inst_82:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0eb32c and fs2 == 0 and fe2 == 0xfd and fm2 == 0x0eb32c and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e8eb32c; op2val:0x7e8eb32c; valaddr_reg:x16; val_offset:656; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 656, x17, x15, 656, x18)

inst_83:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0eb32c and fs2 == 0 and fe2 == 0xfd and fm2 == 0x0eb32c and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e8eb32c; op2val:0x7e8eb32c; valaddr_reg:x16; val_offset:664; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 664, x17, x15, 664, x18)

inst_84:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0eb32c and fs2 == 0 and fe2 == 0xfd and fm2 == 0x0eb32c and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e8eb32c; op2val:0x7e8eb32c; valaddr_reg:x16; val_offset:672; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 672, x17, x15, 672, x18)

inst_85:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0eb32c and fs2 == 0 and fe2 == 0xfd and fm2 == 0x0eb32c and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e8eb32c; op2val:0x7e8eb32c; valaddr_reg:x16; val_offset:680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 680, x17, x15, 680, x18)

inst_86:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04f88e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x04f88e and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f04f88e; op2val:0x7f04f88e; valaddr_reg:x16; val_offset:688; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 688, x17, x15, 688, x18)

inst_87:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04f88e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x04f88e and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f04f88e; op2val:0x7f04f88e; valaddr_reg:x16; val_offset:696; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 696, x17, x15, 696, x18)

inst_88:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04f88e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x04f88e and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f04f88e; op2val:0x7f04f88e; valaddr_reg:x16; val_offset:704; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 704, x17, x15, 704, x18)

inst_89:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04f88e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x04f88e and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f04f88e; op2val:0x7f04f88e; valaddr_reg:x16; val_offset:712; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 712, x17, x15, 712, x18)

inst_90:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04f88e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x04f88e and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f04f88e; op2val:0x7f04f88e; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_91:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2989af and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2989af and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2989af; op2val:0x7f2989af; valaddr_reg:x16; val_offset:728; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 728, x17, x15, 728, x18)

inst_92:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2989af and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2989af and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2989af; op2val:0x7f2989af; valaddr_reg:x16; val_offset:736; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 736, x17, x15, 736, x18)

inst_93:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2989af and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2989af and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2989af; op2val:0x7f2989af; valaddr_reg:x16; val_offset:744; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 744, x17, x15, 744, x18)

inst_94:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2989af and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2989af and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2989af; op2val:0x7f2989af; valaddr_reg:x16; val_offset:752; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 752, x17, x15, 752, x18)

inst_95:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2989af and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2989af and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2989af; op2val:0x7f2989af; valaddr_reg:x16; val_offset:760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 760, x17, x15, 760, x18)

inst_96:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74f142 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x74f142 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7df4f142; op2val:0x7df4f142; valaddr_reg:x16; val_offset:768; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 768, x17, x15, 768, x18)

inst_97:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74f142 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x74f142 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7df4f142; op2val:0x7df4f142; valaddr_reg:x16; val_offset:776; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 776, x17, x15, 776, x18)

inst_98:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74f142 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x74f142 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7df4f142; op2val:0x7df4f142; valaddr_reg:x16; val_offset:784; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 784, x17, x15, 784, x18)

inst_99:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74f142 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x74f142 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7df4f142; op2val:0x7df4f142; valaddr_reg:x16; val_offset:792; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 792, x17, x15, 792, x18)

inst_100:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74f142 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x74f142 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7df4f142; op2val:0x7df4f142; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_101:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x447d56 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x447d56 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec47d56; op2val:0x7ec47d56; valaddr_reg:x16; val_offset:808; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 808, x17, x15, 808, x18)

inst_102:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x447d56 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x447d56 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec47d56; op2val:0x7ec47d56; valaddr_reg:x16; val_offset:816; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 816, x17, x15, 816, x18)

inst_103:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x447d56 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x447d56 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec47d56; op2val:0x7ec47d56; valaddr_reg:x16; val_offset:824; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 824, x17, x15, 824, x18)

inst_104:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x447d56 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x447d56 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec47d56; op2val:0x7ec47d56; valaddr_reg:x16; val_offset:832; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 832, x17, x15, 832, x18)

inst_105:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x447d56 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x447d56 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec47d56; op2val:0x7ec47d56; valaddr_reg:x16; val_offset:840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 840, x17, x15, 840, x18)

inst_106:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x140fee and fs2 == 0 and fe2 == 0xfa and fm2 == 0x140fee and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d140fee; op2val:0x7d140fee; valaddr_reg:x16; val_offset:848; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 848, x17, x15, 848, x18)

inst_107:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x140fee and fs2 == 0 and fe2 == 0xfa and fm2 == 0x140fee and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d140fee; op2val:0x7d140fee; valaddr_reg:x16; val_offset:856; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 856, x17, x15, 856, x18)

inst_108:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x140fee and fs2 == 0 and fe2 == 0xfa and fm2 == 0x140fee and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d140fee; op2val:0x7d140fee; valaddr_reg:x16; val_offset:864; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 864, x17, x15, 864, x18)

inst_109:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x140fee and fs2 == 0 and fe2 == 0xfa and fm2 == 0x140fee and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d140fee; op2val:0x7d140fee; valaddr_reg:x16; val_offset:872; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 872, x17, x15, 872, x18)

inst_110:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x140fee and fs2 == 0 and fe2 == 0xfa and fm2 == 0x140fee and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d140fee; op2val:0x7d140fee; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 880, x17, x15, 880, x18)

inst_111:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535f81 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x535f81 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e535f81; op2val:0x7e535f81; valaddr_reg:x16; val_offset:888; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 888, x17, x15, 888, x18)

inst_112:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535f81 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x535f81 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e535f81; op2val:0x7e535f81; valaddr_reg:x16; val_offset:896; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 896, x17, x15, 896, x18)

inst_113:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535f81 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x535f81 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e535f81; op2val:0x7e535f81; valaddr_reg:x16; val_offset:904; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 904, x17, x15, 904, x18)

inst_114:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535f81 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x535f81 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e535f81; op2val:0x7e535f81; valaddr_reg:x16; val_offset:912; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 912, x17, x15, 912, x18)

inst_115:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535f81 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x535f81 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e535f81; op2val:0x7e535f81; valaddr_reg:x16; val_offset:920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 920, x17, x15, 920, x18)

inst_116:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e21e3 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2e21e3 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2e21e3; op2val:0x7f2e21e3; valaddr_reg:x16; val_offset:928; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 928, x17, x15, 928, x18)

inst_117:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e21e3 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2e21e3 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2e21e3; op2val:0x7f2e21e3; valaddr_reg:x16; val_offset:936; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 936, x17, x15, 936, x18)

inst_118:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e21e3 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2e21e3 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2e21e3; op2val:0x7f2e21e3; valaddr_reg:x16; val_offset:944; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 944, x17, x15, 944, x18)

inst_119:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e21e3 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2e21e3 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2e21e3; op2val:0x7f2e21e3; valaddr_reg:x16; val_offset:952; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 952, x17, x15, 952, x18)

inst_120:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e21e3 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2e21e3 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2e21e3; op2val:0x7f2e21e3; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 960, x17, x15, 960, x18)

inst_121:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1e4d71 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1e4d71 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e9e4d71; op2val:0x7e9e4d71; valaddr_reg:x16; val_offset:968; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 968, x17, x15, 968, x18)

inst_122:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1e4d71 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1e4d71 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e9e4d71; op2val:0x7e9e4d71; valaddr_reg:x16; val_offset:976; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 976, x17, x15, 976, x18)

inst_123:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1e4d71 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1e4d71 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e9e4d71; op2val:0x7e9e4d71; valaddr_reg:x16; val_offset:984; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 984, x17, x15, 984, x18)

inst_124:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1e4d71 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1e4d71 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e9e4d71; op2val:0x7e9e4d71; valaddr_reg:x16; val_offset:992; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 992, x17, x15, 992, x18)

inst_125:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1e4d71 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1e4d71 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e9e4d71; op2val:0x7e9e4d71; valaddr_reg:x16; val_offset:1000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1000, x17, x15, 1000, x18)

inst_126:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37de98 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x37de98 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eb7de98; op2val:0x7eb7de98; valaddr_reg:x16; val_offset:1008; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1008, x17, x15, 1008, x18)

inst_127:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37de98 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x37de98 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eb7de98; op2val:0x7eb7de98; valaddr_reg:x16; val_offset:1016; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1016, x17, x15, 1016, x18)

inst_128:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37de98 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x37de98 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eb7de98; op2val:0x7eb7de98; valaddr_reg:x16; val_offset:1024; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1024, x17, x15, 1024, x18)

inst_129:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37de98 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x37de98 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eb7de98; op2val:0x7eb7de98; valaddr_reg:x16; val_offset:1032; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1032, x17, x15, 1032, x18)

inst_130:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37de98 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x37de98 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eb7de98; op2val:0x7eb7de98; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1040, x17, x15, 1040, x18)

inst_131:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x37125d and fs2 == 0 and fe2 == 0xfc and fm2 == 0x37125d and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e37125d; op2val:0x7e37125d; valaddr_reg:x16; val_offset:1048; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1048, x17, x15, 1048, x18)

inst_132:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x37125d and fs2 == 0 and fe2 == 0xfc and fm2 == 0x37125d and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e37125d; op2val:0x7e37125d; valaddr_reg:x16; val_offset:1056; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1056, x17, x15, 1056, x18)

inst_133:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x37125d and fs2 == 0 and fe2 == 0xfc and fm2 == 0x37125d and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e37125d; op2val:0x7e37125d; valaddr_reg:x16; val_offset:1064; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1064, x17, x15, 1064, x18)

inst_134:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x37125d and fs2 == 0 and fe2 == 0xfc and fm2 == 0x37125d and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e37125d; op2val:0x7e37125d; valaddr_reg:x16; val_offset:1072; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1072, x17, x15, 1072, x18)

inst_135:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x37125d and fs2 == 0 and fe2 == 0xfc and fm2 == 0x37125d and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e37125d; op2val:0x7e37125d; valaddr_reg:x16; val_offset:1080; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1080, x17, x15, 1080, x18)

inst_136:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03cf7d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x03cf7d and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f03cf7d; op2val:0x7f03cf7d; valaddr_reg:x16; val_offset:1088; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1088, x17, x15, 1088, x18)

inst_137:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03cf7d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x03cf7d and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f03cf7d; op2val:0x7f03cf7d; valaddr_reg:x16; val_offset:1096; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1096, x17, x15, 1096, x18)

inst_138:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03cf7d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x03cf7d and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f03cf7d; op2val:0x7f03cf7d; valaddr_reg:x16; val_offset:1104; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1104, x17, x15, 1104, x18)

inst_139:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03cf7d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x03cf7d and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f03cf7d; op2val:0x7f03cf7d; valaddr_reg:x16; val_offset:1112; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1112, x17, x15, 1112, x18)

inst_140:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03cf7d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x03cf7d and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f03cf7d; op2val:0x7f03cf7d; valaddr_reg:x16; val_offset:1120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1120, x17, x15, 1120, x18)

inst_141:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x792786 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x792786 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ef92786; op2val:0x7ef92786; valaddr_reg:x16; val_offset:1128; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1128, x17, x15, 1128, x18)

inst_142:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x792786 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x792786 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ef92786; op2val:0x7ef92786; valaddr_reg:x16; val_offset:1136; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1136, x17, x15, 1136, x18)

inst_143:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x792786 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x792786 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ef92786; op2val:0x7ef92786; valaddr_reg:x16; val_offset:1144; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1144, x17, x15, 1144, x18)

inst_144:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x792786 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x792786 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ef92786; op2val:0x7ef92786; valaddr_reg:x16; val_offset:1152; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1152, x17, x15, 1152, x18)

inst_145:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x792786 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x792786 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ef92786; op2val:0x7ef92786; valaddr_reg:x16; val_offset:1160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1160, x17, x15, 1160, x18)

inst_146:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b057e and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4b057e and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ecb057e; op2val:0x7ecb057e; valaddr_reg:x16; val_offset:1168; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1168, x17, x15, 1168, x18)

inst_147:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b057e and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4b057e and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ecb057e; op2val:0x7ecb057e; valaddr_reg:x16; val_offset:1176; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1176, x17, x15, 1176, x18)

inst_148:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b057e and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4b057e and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ecb057e; op2val:0x7ecb057e; valaddr_reg:x16; val_offset:1184; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1184, x17, x15, 1184, x18)

inst_149:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b057e and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4b057e and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ecb057e; op2val:0x7ecb057e; valaddr_reg:x16; val_offset:1192; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1192, x17, x15, 1192, x18)

inst_150:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b057e and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4b057e and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ecb057e; op2val:0x7ecb057e; valaddr_reg:x16; val_offset:1200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1200, x17, x15, 1200, x18)

inst_151:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3359cb and fs2 == 0 and fe2 == 0xfc and fm2 == 0x3359cb and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e3359cb; op2val:0x7e3359cb; valaddr_reg:x16; val_offset:1208; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1208, x17, x15, 1208, x18)

inst_152:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3359cb and fs2 == 0 and fe2 == 0xfc and fm2 == 0x3359cb and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e3359cb; op2val:0x7e3359cb; valaddr_reg:x16; val_offset:1216; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1216, x17, x15, 1216, x18)

inst_153:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3359cb and fs2 == 0 and fe2 == 0xfc and fm2 == 0x3359cb and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e3359cb; op2val:0x7e3359cb; valaddr_reg:x16; val_offset:1224; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1224, x17, x15, 1224, x18)

inst_154:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3359cb and fs2 == 0 and fe2 == 0xfc and fm2 == 0x3359cb and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e3359cb; op2val:0x7e3359cb; valaddr_reg:x16; val_offset:1232; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1232, x17, x15, 1232, x18)

inst_155:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3359cb and fs2 == 0 and fe2 == 0xfc and fm2 == 0x3359cb and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e3359cb; op2val:0x7e3359cb; valaddr_reg:x16; val_offset:1240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1240, x17, x15, 1240, x18)

inst_156:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a03fa and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1a03fa and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e9a03fa; op2val:0x7e9a03fa; valaddr_reg:x16; val_offset:1248; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1248, x17, x15, 1248, x18)

inst_157:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a03fa and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1a03fa and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e9a03fa; op2val:0x7e9a03fa; valaddr_reg:x16; val_offset:1256; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1256, x17, x15, 1256, x18)

inst_158:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a03fa and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1a03fa and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e9a03fa; op2val:0x7e9a03fa; valaddr_reg:x16; val_offset:1264; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1264, x17, x15, 1264, x18)

inst_159:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a03fa and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1a03fa and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e9a03fa; op2val:0x7e9a03fa; valaddr_reg:x16; val_offset:1272; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1272, x17, x15, 1272, x18)

inst_160:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a03fa and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1a03fa and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e9a03fa; op2val:0x7e9a03fa; valaddr_reg:x16; val_offset:1280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1280, x17, x15, 1280, x18)

inst_161:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f27c7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1f27c7 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1f27c7; op2val:0x7f1f27c7; valaddr_reg:x16; val_offset:1288; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1288, x17, x15, 1288, x18)

inst_162:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f27c7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1f27c7 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1f27c7; op2val:0x7f1f27c7; valaddr_reg:x16; val_offset:1296; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1296, x17, x15, 1296, x18)

inst_163:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f27c7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1f27c7 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1f27c7; op2val:0x7f1f27c7; valaddr_reg:x16; val_offset:1304; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1304, x17, x15, 1304, x18)

inst_164:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f27c7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1f27c7 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1f27c7; op2val:0x7f1f27c7; valaddr_reg:x16; val_offset:1312; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1312, x17, x15, 1312, x18)

inst_165:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f27c7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1f27c7 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1f27c7; op2val:0x7f1f27c7; valaddr_reg:x16; val_offset:1320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1320, x17, x15, 1320, x18)

inst_166:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4032ba and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4032ba and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dc032ba; op2val:0x7dc032ba; valaddr_reg:x16; val_offset:1328; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1328, x17, x15, 1328, x18)

inst_167:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4032ba and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4032ba and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dc032ba; op2val:0x7dc032ba; valaddr_reg:x16; val_offset:1336; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1336, x17, x15, 1336, x18)

inst_168:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4032ba and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4032ba and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dc032ba; op2val:0x7dc032ba; valaddr_reg:x16; val_offset:1344; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1344, x17, x15, 1344, x18)

inst_169:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4032ba and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4032ba and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dc032ba; op2val:0x7dc032ba; valaddr_reg:x16; val_offset:1352; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1352, x17, x15, 1352, x18)

inst_170:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4032ba and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4032ba and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dc032ba; op2val:0x7dc032ba; valaddr_reg:x16; val_offset:1360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1360, x17, x15, 1360, x18)

inst_171:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x084c5b and fs2 == 0 and fe2 == 0xfd and fm2 == 0x084c5b and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e884c5b; op2val:0x7e884c5b; valaddr_reg:x16; val_offset:1368; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1368, x17, x15, 1368, x18)

inst_172:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x084c5b and fs2 == 0 and fe2 == 0xfd and fm2 == 0x084c5b and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e884c5b; op2val:0x7e884c5b; valaddr_reg:x16; val_offset:1376; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1376, x17, x15, 1376, x18)

inst_173:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x084c5b and fs2 == 0 and fe2 == 0xfd and fm2 == 0x084c5b and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e884c5b; op2val:0x7e884c5b; valaddr_reg:x16; val_offset:1384; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1384, x17, x15, 1384, x18)

inst_174:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x084c5b and fs2 == 0 and fe2 == 0xfd and fm2 == 0x084c5b and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e884c5b; op2val:0x7e884c5b; valaddr_reg:x16; val_offset:1392; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1392, x17, x15, 1392, x18)

inst_175:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x084c5b and fs2 == 0 and fe2 == 0xfd and fm2 == 0x084c5b and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e884c5b; op2val:0x7e884c5b; valaddr_reg:x16; val_offset:1400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1400, x17, x15, 1400, x18)

inst_176:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b1c9d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5b1c9d and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7edb1c9d; op2val:0x7edb1c9d; valaddr_reg:x16; val_offset:1408; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1408, x17, x15, 1408, x18)

inst_177:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b1c9d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5b1c9d and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7edb1c9d; op2val:0x7edb1c9d; valaddr_reg:x16; val_offset:1416; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1416, x17, x15, 1416, x18)

inst_178:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b1c9d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5b1c9d and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7edb1c9d; op2val:0x7edb1c9d; valaddr_reg:x16; val_offset:1424; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1424, x17, x15, 1424, x18)

inst_179:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b1c9d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5b1c9d and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7edb1c9d; op2val:0x7edb1c9d; valaddr_reg:x16; val_offset:1432; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1432, x17, x15, 1432, x18)

inst_180:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b1c9d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5b1c9d and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7edb1c9d; op2val:0x7edb1c9d; valaddr_reg:x16; val_offset:1440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1440, x17, x15, 1440, x18)

inst_181:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x783b85 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x783b85 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ef83b85; op2val:0x7ef83b85; valaddr_reg:x16; val_offset:1448; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1448, x17, x15, 1448, x18)

inst_182:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x783b85 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x783b85 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ef83b85; op2val:0x7ef83b85; valaddr_reg:x16; val_offset:1456; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1456, x17, x15, 1456, x18)

inst_183:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x783b85 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x783b85 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ef83b85; op2val:0x7ef83b85; valaddr_reg:x16; val_offset:1464; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1464, x17, x15, 1464, x18)

inst_184:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x783b85 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x783b85 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ef83b85; op2val:0x7ef83b85; valaddr_reg:x16; val_offset:1472; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1472, x17, x15, 1472, x18)

inst_185:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x783b85 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x783b85 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ef83b85; op2val:0x7ef83b85; valaddr_reg:x16; val_offset:1480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1480, x17, x15, 1480, x18)

inst_186:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x461ec9 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e461ec9; op2val:0x7e461ec9; valaddr_reg:x16; val_offset:1488; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1488, x17, x15, 1488, x18)

inst_187:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x461ec9 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e461ec9; op2val:0x7e461ec9; valaddr_reg:x16; val_offset:1496; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1496, x17, x15, 1496, x18)

inst_188:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x461ec9 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e461ec9; op2val:0x7e461ec9; valaddr_reg:x16; val_offset:1504; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1504, x17, x15, 1504, x18)

inst_189:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x461ec9 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e461ec9; op2val:0x7e461ec9; valaddr_reg:x16; val_offset:1512; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1512, x17, x15, 1512, x18)

inst_190:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x461ec9 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e461ec9; op2val:0x7e461ec9; valaddr_reg:x16; val_offset:1520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1520, x17, x15, 1520, x18)

inst_191:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0xfd and fm2 == 0x17f3eb and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e97f3eb; op2val:0x7e97f3eb; valaddr_reg:x16; val_offset:1528; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1528, x17, x15, 1528, x18)

inst_192:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0xfd and fm2 == 0x17f3eb and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e97f3eb; op2val:0x7e97f3eb; valaddr_reg:x16; val_offset:1536; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1536, x17, x15, 1536, x18)

inst_193:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0xfd and fm2 == 0x17f3eb and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e97f3eb; op2val:0x7e97f3eb; valaddr_reg:x16; val_offset:1544; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1544, x17, x15, 1544, x18)

inst_194:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0xfd and fm2 == 0x17f3eb and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e97f3eb; op2val:0x7e97f3eb; valaddr_reg:x16; val_offset:1552; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1552, x17, x15, 1552, x18)

inst_195:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0xfd and fm2 == 0x17f3eb and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e97f3eb; op2val:0x7e97f3eb; valaddr_reg:x16; val_offset:1560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1560, x17, x15, 1560, x18)

inst_196:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2372bc and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2372bc and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2372bc; op2val:0x7f2372bc; valaddr_reg:x16; val_offset:1568; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1568, x17, x15, 1568, x18)

inst_197:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2372bc and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2372bc and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2372bc; op2val:0x7f2372bc; valaddr_reg:x16; val_offset:1576; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1576, x17, x15, 1576, x18)

inst_198:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2372bc and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2372bc and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2372bc; op2val:0x7f2372bc; valaddr_reg:x16; val_offset:1584; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1584, x17, x15, 1584, x18)

inst_199:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2372bc and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2372bc and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2372bc; op2val:0x7f2372bc; valaddr_reg:x16; val_offset:1592; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1592, x17, x15, 1592, x18)

inst_200:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2372bc and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2372bc and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2372bc; op2val:0x7f2372bc; valaddr_reg:x16; val_offset:1600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1600, x17, x15, 1600, x18)

inst_201:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52eb6d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x52eb6d and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ed2eb6d; op2val:0x7ed2eb6d; valaddr_reg:x16; val_offset:1608; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1608, x17, x15, 1608, x18)

inst_202:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52eb6d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x52eb6d and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ed2eb6d; op2val:0x7ed2eb6d; valaddr_reg:x16; val_offset:1616; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1616, x17, x15, 1616, x18)

inst_203:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52eb6d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x52eb6d and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ed2eb6d; op2val:0x7ed2eb6d; valaddr_reg:x16; val_offset:1624; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1624, x17, x15, 1624, x18)

inst_204:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52eb6d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x52eb6d and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ed2eb6d; op2val:0x7ed2eb6d; valaddr_reg:x16; val_offset:1632; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1632, x17, x15, 1632, x18)

inst_205:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52eb6d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x52eb6d and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ed2eb6d; op2val:0x7ed2eb6d; valaddr_reg:x16; val_offset:1640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1640, x17, x15, 1640, x18)

inst_206:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x38f857 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f38f857; op2val:0x7f38f857; valaddr_reg:x16; val_offset:1648; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1648, x17, x15, 1648, x18)

inst_207:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x38f857 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f38f857; op2val:0x7f38f857; valaddr_reg:x16; val_offset:1656; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1656, x17, x15, 1656, x18)

inst_208:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x38f857 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f38f857; op2val:0x7f38f857; valaddr_reg:x16; val_offset:1664; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1664, x17, x15, 1664, x18)

inst_209:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x38f857 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f38f857; op2val:0x7f38f857; valaddr_reg:x16; val_offset:1672; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1672, x17, x15, 1672, x18)

inst_210:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x38f857 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f38f857; op2val:0x7f38f857; valaddr_reg:x16; val_offset:1680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1680, x17, x15, 1680, x18)

inst_211:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x41fc81 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e41fc81; op2val:0x7e41fc81; valaddr_reg:x16; val_offset:1688; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1688, x17, x15, 1688, x18)

inst_212:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x41fc81 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e41fc81; op2val:0x7e41fc81; valaddr_reg:x16; val_offset:1696; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1696, x17, x15, 1696, x18)

inst_213:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x41fc81 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e41fc81; op2val:0x7e41fc81; valaddr_reg:x16; val_offset:1704; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1704, x17, x15, 1704, x18)

inst_214:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x41fc81 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e41fc81; op2val:0x7e41fc81; valaddr_reg:x16; val_offset:1712; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1712, x17, x15, 1712, x18)

inst_215:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x41fc81 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e41fc81; op2val:0x7e41fc81; valaddr_reg:x16; val_offset:1720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1720, x17, x15, 1720, x18)

inst_216:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x093f0c and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f093f0c; op2val:0x7f093f0c; valaddr_reg:x16; val_offset:1728; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1728, x17, x15, 1728, x18)

inst_217:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x093f0c and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f093f0c; op2val:0x7f093f0c; valaddr_reg:x16; val_offset:1736; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1736, x17, x15, 1736, x18)

inst_218:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x093f0c and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f093f0c; op2val:0x7f093f0c; valaddr_reg:x16; val_offset:1744; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1744, x17, x15, 1744, x18)

inst_219:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x093f0c and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f093f0c; op2val:0x7f093f0c; valaddr_reg:x16; val_offset:1752; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1752, x17, x15, 1752, x18)

inst_220:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x093f0c and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f093f0c; op2val:0x7f093f0c; valaddr_reg:x16; val_offset:1760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1760, x17, x15, 1760, x18)

inst_221:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0xfd and fm2 == 0x26220b and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ea6220b; op2val:0x7ea6220b; valaddr_reg:x16; val_offset:1768; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1768, x17, x15, 1768, x18)

inst_222:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0xfd and fm2 == 0x26220b and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ea6220b; op2val:0x7ea6220b; valaddr_reg:x16; val_offset:1776; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1776, x17, x15, 1776, x18)

inst_223:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0xfd and fm2 == 0x26220b and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ea6220b; op2val:0x7ea6220b; valaddr_reg:x16; val_offset:1784; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1784, x17, x15, 1784, x18)

inst_224:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0xfd and fm2 == 0x26220b and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ea6220b; op2val:0x7ea6220b; valaddr_reg:x16; val_offset:1792; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1792, x17, x15, 1792, x18)

inst_225:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0xfd and fm2 == 0x26220b and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ea6220b; op2val:0x7ea6220b; valaddr_reg:x16; val_offset:1800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1800, x17, x15, 1800, x18)

inst_226:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0466fb and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0466fb; op2val:0x7f0466fb; valaddr_reg:x16; val_offset:1808; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1808, x17, x15, 1808, x18)

inst_227:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0466fb and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0466fb; op2val:0x7f0466fb; valaddr_reg:x16; val_offset:1816; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1816, x17, x15, 1816, x18)

inst_228:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0466fb and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0466fb; op2val:0x7f0466fb; valaddr_reg:x16; val_offset:1824; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1824, x17, x15, 1824, x18)

inst_229:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0466fb and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0466fb; op2val:0x7f0466fb; valaddr_reg:x16; val_offset:1832; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1832, x17, x15, 1832, x18)

inst_230:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0466fb and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0466fb; op2val:0x7f0466fb; valaddr_reg:x16; val_offset:1840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1840, x17, x15, 1840, x18)

inst_231:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x216afe and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f216afe; op2val:0x7f216afe; valaddr_reg:x16; val_offset:1848; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1848, x17, x15, 1848, x18)

inst_232:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x216afe and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f216afe; op2val:0x7f216afe; valaddr_reg:x16; val_offset:1856; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1856, x17, x15, 1856, x18)

inst_233:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x216afe and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f216afe; op2val:0x7f216afe; valaddr_reg:x16; val_offset:1864; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1864, x17, x15, 1864, x18)

inst_234:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x216afe and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f216afe; op2val:0x7f216afe; valaddr_reg:x16; val_offset:1872; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1872, x17, x15, 1872, x18)

inst_235:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x216afe and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f216afe; op2val:0x7f216afe; valaddr_reg:x16; val_offset:1880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1880, x17, x15, 1880, x18)

inst_236:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a5724 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1a5724 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1a5724; op2val:0x7f1a5724; valaddr_reg:x16; val_offset:1888; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1888, x17, x15, 1888, x18)

inst_237:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a5724 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1a5724 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1a5724; op2val:0x7f1a5724; valaddr_reg:x16; val_offset:1896; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1896, x17, x15, 1896, x18)

inst_238:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a5724 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1a5724 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1a5724; op2val:0x7f1a5724; valaddr_reg:x16; val_offset:1904; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1904, x17, x15, 1904, x18)

inst_239:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a5724 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1a5724 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1a5724; op2val:0x7f1a5724; valaddr_reg:x16; val_offset:1912; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1912, x17, x15, 1912, x18)

inst_240:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a5724 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1a5724 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1a5724; op2val:0x7f1a5724; valaddr_reg:x16; val_offset:1920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1920, x17, x15, 1920, x18)

inst_241:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x72bda0 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e72bda0; op2val:0x7e72bda0; valaddr_reg:x16; val_offset:1928; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1928, x17, x15, 1928, x18)

inst_242:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x72bda0 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e72bda0; op2val:0x7e72bda0; valaddr_reg:x16; val_offset:1936; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1936, x17, x15, 1936, x18)

inst_243:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x72bda0 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e72bda0; op2val:0x7e72bda0; valaddr_reg:x16; val_offset:1944; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1944, x17, x15, 1944, x18)

inst_244:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x72bda0 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e72bda0; op2val:0x7e72bda0; valaddr_reg:x16; val_offset:1952; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1952, x17, x15, 1952, x18)

inst_245:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x72bda0 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e72bda0; op2val:0x7e72bda0; valaddr_reg:x16; val_offset:1960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1960, x17, x15, 1960, x18)

inst_246:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ecffe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2ecffe and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2ecffe; op2val:0x7f2ecffe; valaddr_reg:x16; val_offset:1968; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1968, x17, x15, 1968, x18)

inst_247:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ecffe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2ecffe and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2ecffe; op2val:0x7f2ecffe; valaddr_reg:x16; val_offset:1976; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1976, x17, x15, 1976, x18)

inst_248:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ecffe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2ecffe and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2ecffe; op2val:0x7f2ecffe; valaddr_reg:x16; val_offset:1984; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1984, x17, x15, 1984, x18)

inst_249:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ecffe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2ecffe and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2ecffe; op2val:0x7f2ecffe; valaddr_reg:x16; val_offset:1992; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1992, x17, x15, 1992, x18)

inst_250:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ecffe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2ecffe and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2ecffe; op2val:0x7f2ecffe; valaddr_reg:x16; val_offset:2000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 2000, x17, x15, 2000, x18)

inst_251:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2b9a07 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2b9a07; op2val:0x7f2b9a07; valaddr_reg:x16; val_offset:2008; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 2008, x17, x15, 2008, x18)

inst_252:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2b9a07 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2b9a07; op2val:0x7f2b9a07; valaddr_reg:x16; val_offset:2016; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 2016, x17, x15, 2016, x18)

inst_253:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2b9a07 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2b9a07; op2val:0x7f2b9a07; valaddr_reg:x16; val_offset:2024; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_2)

inst_254:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2b9a07 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2b9a07; op2val:0x7f2b9a07; valaddr_reg:x16; val_offset:0; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 0, x17, x15, 0, x18)

inst_255:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2b9a07 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2b9a07; op2val:0x7f2b9a07; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 8, x17, x15, 8, x18)

inst_256:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30843b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x30843b and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f30843b; op2val:0x7f30843b; valaddr_reg:x16; val_offset:16; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 16, x17, x15, 16, x18)

inst_257:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30843b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x30843b and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f30843b; op2val:0x7f30843b; valaddr_reg:x16; val_offset:24; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 24, x17, x15, 24, x18)

inst_258:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30843b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x30843b and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f30843b; op2val:0x7f30843b; valaddr_reg:x16; val_offset:32; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 32, x17, x15, 32, x18)

inst_259:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30843b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x30843b and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f30843b; op2val:0x7f30843b; valaddr_reg:x16; val_offset:40; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 40, x17, x15, 40, x18)

inst_260:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30843b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x30843b and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f30843b; op2val:0x7f30843b; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_261:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x242a08 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x242a08 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7da42a08; op2val:0x7da42a08; valaddr_reg:x16; val_offset:56; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 56, x17, x15, 56, x18)

inst_262:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x242a08 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x242a08 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7da42a08; op2val:0x7da42a08; valaddr_reg:x16; val_offset:64; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 64, x17, x15, 64, x18)

inst_263:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x242a08 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x242a08 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7da42a08; op2val:0x7da42a08; valaddr_reg:x16; val_offset:72; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 72, x17, x15, 72, x18)

inst_264:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x242a08 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x242a08 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7da42a08; op2val:0x7da42a08; valaddr_reg:x16; val_offset:80; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 80, x17, x15, 80, x18)

inst_265:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x242a08 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x242a08 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7da42a08; op2val:0x7da42a08; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 88, x17, x15, 88, x18)

inst_266:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dbcd4 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1dbcd4 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1dbcd4; op2val:0x7f1dbcd4; valaddr_reg:x16; val_offset:96; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 96, x17, x15, 96, x18)

inst_267:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dbcd4 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1dbcd4 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1dbcd4; op2val:0x7f1dbcd4; valaddr_reg:x16; val_offset:104; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 104, x17, x15, 104, x18)

inst_268:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dbcd4 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1dbcd4 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1dbcd4; op2val:0x7f1dbcd4; valaddr_reg:x16; val_offset:112; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 112, x17, x15, 112, x18)

inst_269:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dbcd4 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1dbcd4 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1dbcd4; op2val:0x7f1dbcd4; valaddr_reg:x16; val_offset:120; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 120, x17, x15, 120, x18)

inst_270:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dbcd4 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1dbcd4 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1dbcd4; op2val:0x7f1dbcd4; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_271:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x150838 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x150838 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f150838; op2val:0x7f150838; valaddr_reg:x16; val_offset:136; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 136, x17, x15, 136, x18)

inst_272:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x150838 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x150838 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f150838; op2val:0x7f150838; valaddr_reg:x16; val_offset:144; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 144, x17, x15, 144, x18)

inst_273:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x150838 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x150838 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f150838; op2val:0x7f150838; valaddr_reg:x16; val_offset:152; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 152, x17, x15, 152, x18)

inst_274:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x150838 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x150838 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f150838; op2val:0x7f150838; valaddr_reg:x16; val_offset:160; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 160, x17, x15, 160, x18)

inst_275:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x150838 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x150838 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f150838; op2val:0x7f150838; valaddr_reg:x16; val_offset:168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 168, x17, x15, 168, x18)

inst_276:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x364073 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x364073 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f364073; op2val:0x7f364073; valaddr_reg:x16; val_offset:176; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 176, x17, x15, 176, x18)

inst_277:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x364073 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x364073 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f364073; op2val:0x7f364073; valaddr_reg:x16; val_offset:184; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 184, x17, x15, 184, x18)

inst_278:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x364073 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x364073 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f364073; op2val:0x7f364073; valaddr_reg:x16; val_offset:192; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 192, x17, x15, 192, x18)

inst_279:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x364073 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x364073 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f364073; op2val:0x7f364073; valaddr_reg:x16; val_offset:200; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 200, x17, x15, 200, x18)

inst_280:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x364073 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x364073 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f364073; op2val:0x7f364073; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_281:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18a306 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x18a306 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f18a306; op2val:0x7f18a306; valaddr_reg:x16; val_offset:216; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 216, x17, x15, 216, x18)

inst_282:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18a306 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x18a306 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f18a306; op2val:0x7f18a306; valaddr_reg:x16; val_offset:224; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 224, x17, x15, 224, x18)

inst_283:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18a306 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x18a306 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f18a306; op2val:0x7f18a306; valaddr_reg:x16; val_offset:232; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 232, x17, x15, 232, x18)

inst_284:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18a306 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x18a306 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f18a306; op2val:0x7f18a306; valaddr_reg:x16; val_offset:240; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 240, x17, x15, 240, x18)

inst_285:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18a306 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x18a306 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f18a306; op2val:0x7f18a306; valaddr_reg:x16; val_offset:248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 248, x17, x15, 248, x18)

inst_286:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6cd1e1 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x6cd1e1 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7decd1e1; op2val:0x7decd1e1; valaddr_reg:x16; val_offset:256; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 256, x17, x15, 256, x18)

inst_287:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6cd1e1 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x6cd1e1 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7decd1e1; op2val:0x7decd1e1; valaddr_reg:x16; val_offset:264; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 264, x17, x15, 264, x18)

inst_288:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6cd1e1 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x6cd1e1 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7decd1e1; op2val:0x7decd1e1; valaddr_reg:x16; val_offset:272; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 272, x17, x15, 272, x18)

inst_289:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6cd1e1 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x6cd1e1 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7decd1e1; op2val:0x7decd1e1; valaddr_reg:x16; val_offset:280; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 280, x17, x15, 280, x18)

inst_290:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6cd1e1 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x6cd1e1 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7decd1e1; op2val:0x7decd1e1; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_291:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d6988 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3d6988 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ebd6988; op2val:0x7ebd6988; valaddr_reg:x16; val_offset:296; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 296, x17, x15, 296, x18)

inst_292:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d6988 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3d6988 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ebd6988; op2val:0x7ebd6988; valaddr_reg:x16; val_offset:304; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 304, x17, x15, 304, x18)

inst_293:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d6988 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3d6988 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ebd6988; op2val:0x7ebd6988; valaddr_reg:x16; val_offset:312; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 312, x17, x15, 312, x18)

inst_294:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d6988 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3d6988 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ebd6988; op2val:0x7ebd6988; valaddr_reg:x16; val_offset:320; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 320, x17, x15, 320, x18)

inst_295:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d6988 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3d6988 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ebd6988; op2val:0x7ebd6988; valaddr_reg:x16; val_offset:328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 328, x17, x15, 328, x18)

inst_296:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5f59d7 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x5f59d7 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e5f59d7; op2val:0x7e5f59d7; valaddr_reg:x16; val_offset:336; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 336, x17, x15, 336, x18)

inst_297:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5f59d7 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x5f59d7 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e5f59d7; op2val:0x7e5f59d7; valaddr_reg:x16; val_offset:344; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 344, x17, x15, 344, x18)

inst_298:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5f59d7 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x5f59d7 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e5f59d7; op2val:0x7e5f59d7; valaddr_reg:x16; val_offset:352; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 352, x17, x15, 352, x18)

inst_299:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5f59d7 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x5f59d7 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e5f59d7; op2val:0x7e5f59d7; valaddr_reg:x16; val_offset:360; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 360, x17, x15, 360, x18)

inst_300:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5f59d7 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x5f59d7 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e5f59d7; op2val:0x7e5f59d7; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_301:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x66cc78 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x66cc78 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d66cc78; op2val:0x7d66cc78; valaddr_reg:x16; val_offset:376; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 376, x17, x15, 376, x18)

inst_302:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x66cc78 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x66cc78 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d66cc78; op2val:0x7d66cc78; valaddr_reg:x16; val_offset:384; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 384, x17, x15, 384, x18)

inst_303:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x66cc78 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x66cc78 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d66cc78; op2val:0x7d66cc78; valaddr_reg:x16; val_offset:392; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 392, x17, x15, 392, x18)

inst_304:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x66cc78 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x66cc78 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d66cc78; op2val:0x7d66cc78; valaddr_reg:x16; val_offset:400; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 400, x17, x15, 400, x18)

inst_305:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x66cc78 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x66cc78 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d66cc78; op2val:0x7d66cc78; valaddr_reg:x16; val_offset:408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 408, x17, x15, 408, x18)

inst_306:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53a9a1 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x53a9a1 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ed3a9a1; op2val:0x7ed3a9a1; valaddr_reg:x16; val_offset:416; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 416, x17, x15, 416, x18)

inst_307:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53a9a1 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x53a9a1 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ed3a9a1; op2val:0x7ed3a9a1; valaddr_reg:x16; val_offset:424; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 424, x17, x15, 424, x18)

inst_308:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53a9a1 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x53a9a1 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ed3a9a1; op2val:0x7ed3a9a1; valaddr_reg:x16; val_offset:432; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 432, x17, x15, 432, x18)

inst_309:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53a9a1 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x53a9a1 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ed3a9a1; op2val:0x7ed3a9a1; valaddr_reg:x16; val_offset:440; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 440, x17, x15, 440, x18)

inst_310:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53a9a1 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x53a9a1 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ed3a9a1; op2val:0x7ed3a9a1; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_311:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b3506 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x3b3506 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e3b3506; op2val:0x7e3b3506; valaddr_reg:x16; val_offset:456; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 456, x17, x15, 456, x18)

inst_312:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b3506 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x3b3506 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e3b3506; op2val:0x7e3b3506; valaddr_reg:x16; val_offset:464; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 464, x17, x15, 464, x18)

inst_313:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b3506 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x3b3506 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e3b3506; op2val:0x7e3b3506; valaddr_reg:x16; val_offset:472; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 472, x17, x15, 472, x18)

inst_314:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b3506 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x3b3506 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e3b3506; op2val:0x7e3b3506; valaddr_reg:x16; val_offset:480; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 480, x17, x15, 480, x18)

inst_315:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b3506 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x3b3506 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e3b3506; op2val:0x7e3b3506; valaddr_reg:x16; val_offset:488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 488, x17, x15, 488, x18)

inst_316:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3c3c39 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x3c3c39 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e3c3c39; op2val:0x7e3c3c39; valaddr_reg:x16; val_offset:496; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 496, x17, x15, 496, x18)

inst_317:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3c3c39 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x3c3c39 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e3c3c39; op2val:0x7e3c3c39; valaddr_reg:x16; val_offset:504; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 504, x17, x15, 504, x18)

inst_318:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3c3c39 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x3c3c39 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e3c3c39; op2val:0x7e3c3c39; valaddr_reg:x16; val_offset:512; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 512, x17, x15, 512, x18)

inst_319:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3c3c39 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x3c3c39 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e3c3c39; op2val:0x7e3c3c39; valaddr_reg:x16; val_offset:520; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 520, x17, x15, 520, x18)

inst_320:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3c3c39 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x3c3c39 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e3c3c39; op2val:0x7e3c3c39; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_321:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e5495 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5e5495 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ede5495; op2val:0x7ede5495; valaddr_reg:x16; val_offset:536; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 536, x17, x15, 536, x18)

inst_322:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e5495 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5e5495 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ede5495; op2val:0x7ede5495; valaddr_reg:x16; val_offset:544; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 544, x17, x15, 544, x18)

inst_323:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e5495 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5e5495 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ede5495; op2val:0x7ede5495; valaddr_reg:x16; val_offset:552; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 552, x17, x15, 552, x18)

inst_324:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e5495 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5e5495 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ede5495; op2val:0x7ede5495; valaddr_reg:x16; val_offset:560; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 560, x17, x15, 560, x18)

inst_325:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e5495 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5e5495 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ede5495; op2val:0x7ede5495; valaddr_reg:x16; val_offset:568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 568, x17, x15, 568, x18)

inst_326:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00624f and fs2 == 0 and fe2 == 0xfd and fm2 == 0x00624f and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e80624f; op2val:0x7e80624f; valaddr_reg:x16; val_offset:576; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 576, x17, x15, 576, x18)

inst_327:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00624f and fs2 == 0 and fe2 == 0xfd and fm2 == 0x00624f and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e80624f; op2val:0x7e80624f; valaddr_reg:x16; val_offset:584; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 584, x17, x15, 584, x18)

inst_328:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00624f and fs2 == 0 and fe2 == 0xfd and fm2 == 0x00624f and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e80624f; op2val:0x7e80624f; valaddr_reg:x16; val_offset:592; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 592, x17, x15, 592, x18)

inst_329:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00624f and fs2 == 0 and fe2 == 0xfd and fm2 == 0x00624f and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e80624f; op2val:0x7e80624f; valaddr_reg:x16; val_offset:600; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 600, x17, x15, 600, x18)

inst_330:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00624f and fs2 == 0 and fe2 == 0xfd and fm2 == 0x00624f and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e80624f; op2val:0x7e80624f; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 608, x17, x15, 608, x18)

inst_331:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b8d52 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2b8d52 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2b8d52; op2val:0x7f2b8d52; valaddr_reg:x16; val_offset:616; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 616, x17, x15, 616, x18)

inst_332:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b8d52 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2b8d52 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2b8d52; op2val:0x7f2b8d52; valaddr_reg:x16; val_offset:624; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 624, x17, x15, 624, x18)

inst_333:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b8d52 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2b8d52 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2b8d52; op2val:0x7f2b8d52; valaddr_reg:x16; val_offset:632; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 632, x17, x15, 632, x18)

inst_334:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b8d52 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2b8d52 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2b8d52; op2val:0x7f2b8d52; valaddr_reg:x16; val_offset:640; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 640, x17, x15, 640, x18)

inst_335:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b8d52 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2b8d52 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2b8d52; op2val:0x7f2b8d52; valaddr_reg:x16; val_offset:648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 648, x17, x15, 648, x18)

inst_336:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7340a9 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x7340a9 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e7340a9; op2val:0x7e7340a9; valaddr_reg:x16; val_offset:656; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 656, x17, x15, 656, x18)

inst_337:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7340a9 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x7340a9 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e7340a9; op2val:0x7e7340a9; valaddr_reg:x16; val_offset:664; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 664, x17, x15, 664, x18)

inst_338:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7340a9 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x7340a9 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e7340a9; op2val:0x7e7340a9; valaddr_reg:x16; val_offset:672; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 672, x17, x15, 672, x18)

inst_339:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7340a9 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x7340a9 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e7340a9; op2val:0x7e7340a9; valaddr_reg:x16; val_offset:680; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 680, x17, x15, 680, x18)

inst_340:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7340a9 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x7340a9 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e7340a9; op2val:0x7e7340a9; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 688, x17, x15, 688, x18)

inst_341:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6b9c3e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x6b9c3e and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e6b9c3e; op2val:0x7e6b9c3e; valaddr_reg:x16; val_offset:696; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 696, x17, x15, 696, x18)

inst_342:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6b9c3e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x6b9c3e and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e6b9c3e; op2val:0x7e6b9c3e; valaddr_reg:x16; val_offset:704; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 704, x17, x15, 704, x18)

inst_343:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6b9c3e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x6b9c3e and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e6b9c3e; op2val:0x7e6b9c3e; valaddr_reg:x16; val_offset:712; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 712, x17, x15, 712, x18)

inst_344:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6b9c3e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x6b9c3e and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e6b9c3e; op2val:0x7e6b9c3e; valaddr_reg:x16; val_offset:720; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 720, x17, x15, 720, x18)

inst_345:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6b9c3e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x6b9c3e and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e6b9c3e; op2val:0x7e6b9c3e; valaddr_reg:x16; val_offset:728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 728, x17, x15, 728, x18)

inst_346:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349efb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x349efb and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f349efb; op2val:0x7f349efb; valaddr_reg:x16; val_offset:736; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 736, x17, x15, 736, x18)

inst_347:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349efb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x349efb and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f349efb; op2val:0x7f349efb; valaddr_reg:x16; val_offset:744; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 744, x17, x15, 744, x18)

inst_348:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349efb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x349efb and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f349efb; op2val:0x7f349efb; valaddr_reg:x16; val_offset:752; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 752, x17, x15, 752, x18)

inst_349:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349efb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x349efb and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f349efb; op2val:0x7f349efb; valaddr_reg:x16; val_offset:760; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 760, x17, x15, 760, x18)

inst_350:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349efb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x349efb and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f349efb; op2val:0x7f349efb; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 768, x17, x15, 768, x18)

inst_351:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a5f3d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7a5f3d and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7efa5f3d; op2val:0x7efa5f3d; valaddr_reg:x16; val_offset:776; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 776, x17, x15, 776, x18)

inst_352:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a5f3d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7a5f3d and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7efa5f3d; op2val:0x7efa5f3d; valaddr_reg:x16; val_offset:784; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 784, x17, x15, 784, x18)

inst_353:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a5f3d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7a5f3d and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7efa5f3d; op2val:0x7efa5f3d; valaddr_reg:x16; val_offset:792; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 792, x17, x15, 792, x18)

inst_354:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a5f3d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7a5f3d and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7efa5f3d; op2val:0x7efa5f3d; valaddr_reg:x16; val_offset:800; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 800, x17, x15, 800, x18)

inst_355:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a5f3d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7a5f3d and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7efa5f3d; op2val:0x7efa5f3d; valaddr_reg:x16; val_offset:808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 808, x17, x15, 808, x18)

inst_356:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3cceee and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3cceee and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3cceee; op2val:0x7f3cceee; valaddr_reg:x16; val_offset:816; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 816, x17, x15, 816, x18)

inst_357:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3cceee and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3cceee and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3cceee; op2val:0x7f3cceee; valaddr_reg:x16; val_offset:824; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 824, x17, x15, 824, x18)

inst_358:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3cceee and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3cceee and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3cceee; op2val:0x7f3cceee; valaddr_reg:x16; val_offset:832; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 832, x17, x15, 832, x18)

inst_359:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3cceee and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3cceee and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3cceee; op2val:0x7f3cceee; valaddr_reg:x16; val_offset:840; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 840, x17, x15, 840, x18)

inst_360:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3cceee and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3cceee and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3cceee; op2val:0x7f3cceee; valaddr_reg:x16; val_offset:848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 848, x17, x15, 848, x18)

inst_361:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x79f6ff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x79f6ff and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d79f6ff; op2val:0x7d79f6ff; valaddr_reg:x16; val_offset:856; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 856, x17, x15, 856, x18)

inst_362:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x79f6ff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x79f6ff and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d79f6ff; op2val:0x7d79f6ff; valaddr_reg:x16; val_offset:864; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 864, x17, x15, 864, x18)

inst_363:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x79f6ff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x79f6ff and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d79f6ff; op2val:0x7d79f6ff; valaddr_reg:x16; val_offset:872; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 872, x17, x15, 872, x18)

inst_364:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x79f6ff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x79f6ff and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d79f6ff; op2val:0x7d79f6ff; valaddr_reg:x16; val_offset:880; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 880, x17, x15, 880, x18)

inst_365:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x79f6ff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x79f6ff and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d79f6ff; op2val:0x7d79f6ff; valaddr_reg:x16; val_offset:888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 888, x17, x15, 888, x18)

inst_366:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x6c05c9 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e6c05c9; op2val:0x7e6c05c9; valaddr_reg:x16; val_offset:896; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 896, x17, x15, 896, x18)

inst_367:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x6c05c9 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e6c05c9; op2val:0x7e6c05c9; valaddr_reg:x16; val_offset:904; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 904, x17, x15, 904, x18)

inst_368:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x6c05c9 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e6c05c9; op2val:0x7e6c05c9; valaddr_reg:x16; val_offset:912; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 912, x17, x15, 912, x18)

inst_369:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x6c05c9 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e6c05c9; op2val:0x7e6c05c9; valaddr_reg:x16; val_offset:920; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 920, x17, x15, 920, x18)

inst_370:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x6c05c9 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e6c05c9; op2val:0x7e6c05c9; valaddr_reg:x16; val_offset:928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 928, x17, x15, 928, x18)

inst_371:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x46fa60 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e46fa60; op2val:0x7e46fa60; valaddr_reg:x16; val_offset:936; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 936, x17, x15, 936, x18)

inst_372:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x46fa60 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e46fa60; op2val:0x7e46fa60; valaddr_reg:x16; val_offset:944; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 944, x17, x15, 944, x18)

inst_373:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x46fa60 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e46fa60; op2val:0x7e46fa60; valaddr_reg:x16; val_offset:952; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 952, x17, x15, 952, x18)

inst_374:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x46fa60 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e46fa60; op2val:0x7e46fa60; valaddr_reg:x16; val_offset:960; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 960, x17, x15, 960, x18)

inst_375:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x46fa60 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e46fa60; op2val:0x7e46fa60; valaddr_reg:x16; val_offset:968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 968, x17, x15, 968, x18)

inst_376:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0421e7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0421e7 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0421e7; op2val:0x7f0421e7; valaddr_reg:x16; val_offset:976; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 976, x17, x15, 976, x18)

inst_377:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0421e7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0421e7 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0421e7; op2val:0x7f0421e7; valaddr_reg:x16; val_offset:984; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 984, x17, x15, 984, x18)

inst_378:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0421e7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0421e7 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0421e7; op2val:0x7f0421e7; valaddr_reg:x16; val_offset:992; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 992, x17, x15, 992, x18)

inst_379:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0421e7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0421e7 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0421e7; op2val:0x7f0421e7; valaddr_reg:x16; val_offset:1000; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1000, x17, x15, 1000, x18)

inst_380:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0421e7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0421e7 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0421e7; op2val:0x7f0421e7; valaddr_reg:x16; val_offset:1008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1008, x17, x15, 1008, x18)

inst_381:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c26a4 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3c26a4 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3c26a4; op2val:0x7f3c26a4; valaddr_reg:x16; val_offset:1016; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1016, x17, x15, 1016, x18)

inst_382:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c26a4 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3c26a4 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3c26a4; op2val:0x7f3c26a4; valaddr_reg:x16; val_offset:1024; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1024, x17, x15, 1024, x18)

inst_383:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c26a4 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3c26a4 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3c26a4; op2val:0x7f3c26a4; valaddr_reg:x16; val_offset:1032; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1032, x17, x15, 1032, x18)

inst_384:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c26a4 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3c26a4 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3c26a4; op2val:0x7f3c26a4; valaddr_reg:x16; val_offset:1040; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1040, x17, x15, 1040, x18)

inst_385:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c26a4 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3c26a4 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3c26a4; op2val:0x7f3c26a4; valaddr_reg:x16; val_offset:1048; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1048, x17, x15, 1048, x18)

inst_386:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2544b7 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2544b7 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e2544b7; op2val:0x7e2544b7; valaddr_reg:x16; val_offset:1056; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1056, x17, x15, 1056, x18)

inst_387:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2544b7 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2544b7 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e2544b7; op2val:0x7e2544b7; valaddr_reg:x16; val_offset:1064; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1064, x17, x15, 1064, x18)

inst_388:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2544b7 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2544b7 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e2544b7; op2val:0x7e2544b7; valaddr_reg:x16; val_offset:1072; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1072, x17, x15, 1072, x18)

inst_389:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2544b7 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2544b7 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e2544b7; op2val:0x7e2544b7; valaddr_reg:x16; val_offset:1080; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1080, x17, x15, 1080, x18)

inst_390:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2544b7 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2544b7 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e2544b7; op2val:0x7e2544b7; valaddr_reg:x16; val_offset:1088; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1088, x17, x15, 1088, x18)

inst_391:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a336f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3a336f and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3a336f; op2val:0x7f3a336f; valaddr_reg:x16; val_offset:1096; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1096, x17, x15, 1096, x18)

inst_392:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a336f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3a336f and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3a336f; op2val:0x7f3a336f; valaddr_reg:x16; val_offset:1104; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1104, x17, x15, 1104, x18)

inst_393:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a336f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3a336f and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3a336f; op2val:0x7f3a336f; valaddr_reg:x16; val_offset:1112; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1112, x17, x15, 1112, x18)

inst_394:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a336f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3a336f and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3a336f; op2val:0x7f3a336f; valaddr_reg:x16; val_offset:1120; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1120, x17, x15, 1120, x18)

inst_395:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a336f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3a336f and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3a336f; op2val:0x7f3a336f; valaddr_reg:x16; val_offset:1128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1128, x17, x15, 1128, x18)

inst_396:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f5f0a and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2f5f0a and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2f5f0a; op2val:0x7f2f5f0a; valaddr_reg:x16; val_offset:1136; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1136, x17, x15, 1136, x18)

inst_397:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f5f0a and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2f5f0a and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2f5f0a; op2val:0x7f2f5f0a; valaddr_reg:x16; val_offset:1144; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1144, x17, x15, 1144, x18)

inst_398:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f5f0a and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2f5f0a and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2f5f0a; op2val:0x7f2f5f0a; valaddr_reg:x16; val_offset:1152; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1152, x17, x15, 1152, x18)

inst_399:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f5f0a and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2f5f0a and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2f5f0a; op2val:0x7f2f5f0a; valaddr_reg:x16; val_offset:1160; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1160, x17, x15, 1160, x18)

inst_400:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f5f0a and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2f5f0a and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2f5f0a; op2val:0x7f2f5f0a; valaddr_reg:x16; val_offset:1168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1168, x17, x15, 1168, x18)

inst_401:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x709985 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e709985; op2val:0x7e709985; valaddr_reg:x16; val_offset:1176; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1176, x17, x15, 1176, x18)

inst_402:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x709985 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e709985; op2val:0x7e709985; valaddr_reg:x16; val_offset:1184; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1184, x17, x15, 1184, x18)

inst_403:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x709985 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e709985; op2val:0x7e709985; valaddr_reg:x16; val_offset:1192; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1192, x17, x15, 1192, x18)

inst_404:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x709985 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e709985; op2val:0x7e709985; valaddr_reg:x16; val_offset:1200; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1200, x17, x15, 1200, x18)

inst_405:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x709985 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e709985; op2val:0x7e709985; valaddr_reg:x16; val_offset:1208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1208, x17, x15, 1208, x18)

inst_406:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x651547 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ee51547; op2val:0x7ee51547; valaddr_reg:x16; val_offset:1216; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1216, x17, x15, 1216, x18)

inst_407:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x651547 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ee51547; op2val:0x7ee51547; valaddr_reg:x16; val_offset:1224; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1224, x17, x15, 1224, x18)

inst_408:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x651547 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ee51547; op2val:0x7ee51547; valaddr_reg:x16; val_offset:1232; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1232, x17, x15, 1232, x18)

inst_409:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x651547 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ee51547; op2val:0x7ee51547; valaddr_reg:x16; val_offset:1240; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1240, x17, x15, 1240, x18)

inst_410:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x651547 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ee51547; op2val:0x7ee51547; valaddr_reg:x16; val_offset:1248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1248, x17, x15, 1248, x18)

inst_411:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ca7f2 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3ca7f2 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3ca7f2; op2val:0x7f3ca7f2; valaddr_reg:x16; val_offset:1256; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1256, x17, x15, 1256, x18)

inst_412:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ca7f2 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3ca7f2 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3ca7f2; op2val:0x7f3ca7f2; valaddr_reg:x16; val_offset:1264; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1264, x17, x15, 1264, x18)

inst_413:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ca7f2 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3ca7f2 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3ca7f2; op2val:0x7f3ca7f2; valaddr_reg:x16; val_offset:1272; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1272, x17, x15, 1272, x18)

inst_414:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ca7f2 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3ca7f2 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3ca7f2; op2val:0x7f3ca7f2; valaddr_reg:x16; val_offset:1280; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1280, x17, x15, 1280, x18)

inst_415:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ca7f2 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3ca7f2 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3ca7f2; op2val:0x7f3ca7f2; valaddr_reg:x16; val_offset:1288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1288, x17, x15, 1288, x18)

inst_416:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x736d34 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x736d34 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7cf36d34; op2val:0x7cf36d34; valaddr_reg:x16; val_offset:1296; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1296, x17, x15, 1296, x18)

inst_417:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x736d34 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x736d34 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7cf36d34; op2val:0x7cf36d34; valaddr_reg:x16; val_offset:1304; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1304, x17, x15, 1304, x18)

inst_418:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x736d34 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x736d34 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7cf36d34; op2val:0x7cf36d34; valaddr_reg:x16; val_offset:1312; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1312, x17, x15, 1312, x18)

inst_419:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x736d34 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x736d34 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7cf36d34; op2val:0x7cf36d34; valaddr_reg:x16; val_offset:1320; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1320, x17, x15, 1320, x18)

inst_420:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x736d34 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x736d34 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7cf36d34; op2val:0x7cf36d34; valaddr_reg:x16; val_offset:1328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1328, x17, x15, 1328, x18)

inst_421:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x19cc61 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d99cc61; op2val:0x7d99cc61; valaddr_reg:x16; val_offset:1336; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1336, x17, x15, 1336, x18)

inst_422:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x19cc61 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d99cc61; op2val:0x7d99cc61; valaddr_reg:x16; val_offset:1344; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1344, x17, x15, 1344, x18)

inst_423:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x19cc61 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d99cc61; op2val:0x7d99cc61; valaddr_reg:x16; val_offset:1352; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1352, x17, x15, 1352, x18)

inst_424:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x19cc61 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d99cc61; op2val:0x7d99cc61; valaddr_reg:x16; val_offset:1360; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1360, x17, x15, 1360, x18)

inst_425:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x19cc61 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d99cc61; op2val:0x7d99cc61; valaddr_reg:x16; val_offset:1368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1368, x17, x15, 1368, x18)

inst_426:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x429e75 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e429e75; op2val:0x7e429e75; valaddr_reg:x16; val_offset:1376; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1376, x17, x15, 1376, x18)

inst_427:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x429e75 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e429e75; op2val:0x7e429e75; valaddr_reg:x16; val_offset:1384; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1384, x17, x15, 1384, x18)

inst_428:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x429e75 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e429e75; op2val:0x7e429e75; valaddr_reg:x16; val_offset:1392; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1392, x17, x15, 1392, x18)

inst_429:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x429e75 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e429e75; op2val:0x7e429e75; valaddr_reg:x16; val_offset:1400; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1400, x17, x15, 1400, x18)

inst_430:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x429e75 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e429e75; op2val:0x7e429e75; valaddr_reg:x16; val_offset:1408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1408, x17, x15, 1408, x18)

inst_431:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e921d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2e921d and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2e921d; op2val:0x7f2e921d; valaddr_reg:x16; val_offset:1416; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1416, x17, x15, 1416, x18)

inst_432:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e921d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2e921d and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2e921d; op2val:0x7f2e921d; valaddr_reg:x16; val_offset:1424; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1424, x17, x15, 1424, x18)

inst_433:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e921d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2e921d and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2e921d; op2val:0x7f2e921d; valaddr_reg:x16; val_offset:1432; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1432, x17, x15, 1432, x18)

inst_434:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e921d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2e921d and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2e921d; op2val:0x7f2e921d; valaddr_reg:x16; val_offset:1440; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1440, x17, x15, 1440, x18)

inst_435:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e921d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2e921d and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2e921d; op2val:0x7f2e921d; valaddr_reg:x16; val_offset:1448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1448, x17, x15, 1448, x18)

inst_436:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11422a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x11422a and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e91422a; op2val:0x7e91422a; valaddr_reg:x16; val_offset:1456; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1456, x17, x15, 1456, x18)

inst_437:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11422a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x11422a and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e91422a; op2val:0x7e91422a; valaddr_reg:x16; val_offset:1464; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1464, x17, x15, 1464, x18)

inst_438:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11422a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x11422a and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e91422a; op2val:0x7e91422a; valaddr_reg:x16; val_offset:1472; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1472, x17, x15, 1472, x18)

inst_439:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11422a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x11422a and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e91422a; op2val:0x7e91422a; valaddr_reg:x16; val_offset:1480; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1480, x17, x15, 1480, x18)

inst_440:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11422a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x11422a and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e91422a; op2val:0x7e91422a; valaddr_reg:x16; val_offset:1488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1488, x17, x15, 1488, x18)

inst_441:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1df407 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x1df407 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d9df407; op2val:0x7d9df407; valaddr_reg:x16; val_offset:1496; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1496, x17, x15, 1496, x18)

inst_442:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1df407 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x1df407 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d9df407; op2val:0x7d9df407; valaddr_reg:x16; val_offset:1504; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1504, x17, x15, 1504, x18)

inst_443:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1df407 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x1df407 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d9df407; op2val:0x7d9df407; valaddr_reg:x16; val_offset:1512; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1512, x17, x15, 1512, x18)

inst_444:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1df407 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x1df407 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d9df407; op2val:0x7d9df407; valaddr_reg:x16; val_offset:1520; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1520, x17, x15, 1520, x18)

inst_445:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1df407 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x1df407 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d9df407; op2val:0x7d9df407; valaddr_reg:x16; val_offset:1528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1528, x17, x15, 1528, x18)

inst_446:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x396928 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x396928 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e396928; op2val:0x7e396928; valaddr_reg:x16; val_offset:1536; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1536, x17, x15, 1536, x18)

inst_447:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x396928 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x396928 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e396928; op2val:0x7e396928; valaddr_reg:x16; val_offset:1544; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1544, x17, x15, 1544, x18)

inst_448:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x396928 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x396928 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e396928; op2val:0x7e396928; valaddr_reg:x16; val_offset:1552; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1552, x17, x15, 1552, x18)

inst_449:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x396928 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x396928 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e396928; op2val:0x7e396928; valaddr_reg:x16; val_offset:1560; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1560, x17, x15, 1560, x18)

inst_450:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x396928 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x396928 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e396928; op2val:0x7e396928; valaddr_reg:x16; val_offset:1568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1568, x17, x15, 1568, x18)

inst_451:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x317f52 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x317f52 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7db17f52; op2val:0x7db17f52; valaddr_reg:x16; val_offset:1576; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1576, x17, x15, 1576, x18)

inst_452:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x317f52 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x317f52 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7db17f52; op2val:0x7db17f52; valaddr_reg:x16; val_offset:1584; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1584, x17, x15, 1584, x18)

inst_453:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x317f52 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x317f52 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7db17f52; op2val:0x7db17f52; valaddr_reg:x16; val_offset:1592; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1592, x17, x15, 1592, x18)

inst_454:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x317f52 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x317f52 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7db17f52; op2val:0x7db17f52; valaddr_reg:x16; val_offset:1600; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1600, x17, x15, 1600, x18)

inst_455:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x317f52 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x317f52 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7db17f52; op2val:0x7db17f52; valaddr_reg:x16; val_offset:1608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1608, x17, x15, 1608, x18)

inst_456:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3db9f6 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3db9f6 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3db9f6; op2val:0x7f3db9f6; valaddr_reg:x16; val_offset:1616; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1616, x17, x15, 1616, x18)

inst_457:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3db9f6 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3db9f6 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3db9f6; op2val:0x7f3db9f6; valaddr_reg:x16; val_offset:1624; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1624, x17, x15, 1624, x18)

inst_458:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3db9f6 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3db9f6 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3db9f6; op2val:0x7f3db9f6; valaddr_reg:x16; val_offset:1632; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1632, x17, x15, 1632, x18)

inst_459:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3db9f6 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3db9f6 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3db9f6; op2val:0x7f3db9f6; valaddr_reg:x16; val_offset:1640; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1640, x17, x15, 1640, x18)

inst_460:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3db9f6 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3db9f6 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3db9f6; op2val:0x7f3db9f6; valaddr_reg:x16; val_offset:1648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1648, x17, x15, 1648, x18)

inst_461:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x75e793 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x75e793 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7cf5e793; op2val:0x7cf5e793; valaddr_reg:x16; val_offset:1656; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1656, x17, x15, 1656, x18)

inst_462:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x75e793 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x75e793 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7cf5e793; op2val:0x7cf5e793; valaddr_reg:x16; val_offset:1664; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1664, x17, x15, 1664, x18)

inst_463:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x75e793 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x75e793 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7cf5e793; op2val:0x7cf5e793; valaddr_reg:x16; val_offset:1672; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1672, x17, x15, 1672, x18)

inst_464:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x75e793 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x75e793 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7cf5e793; op2val:0x7cf5e793; valaddr_reg:x16; val_offset:1680; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1680, x17, x15, 1680, x18)

inst_465:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x75e793 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x75e793 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7cf5e793; op2val:0x7cf5e793; valaddr_reg:x16; val_offset:1688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1688, x17, x15, 1688, x18)

inst_466:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x30cc24 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x30cc24 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7db0cc24; op2val:0x7db0cc24; valaddr_reg:x16; val_offset:1696; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1696, x17, x15, 1696, x18)

inst_467:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x30cc24 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x30cc24 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7db0cc24; op2val:0x7db0cc24; valaddr_reg:x16; val_offset:1704; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1704, x17, x15, 1704, x18)

inst_468:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x30cc24 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x30cc24 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7db0cc24; op2val:0x7db0cc24; valaddr_reg:x16; val_offset:1712; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1712, x17, x15, 1712, x18)

inst_469:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x30cc24 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x30cc24 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7db0cc24; op2val:0x7db0cc24; valaddr_reg:x16; val_offset:1720; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1720, x17, x15, 1720, x18)

inst_470:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x30cc24 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x30cc24 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7db0cc24; op2val:0x7db0cc24; valaddr_reg:x16; val_offset:1728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1728, x17, x15, 1728, x18)

inst_471:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00b812 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x00b812 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f00b812; op2val:0x7f00b812; valaddr_reg:x16; val_offset:1736; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1736, x17, x15, 1736, x18)

inst_472:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00b812 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x00b812 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f00b812; op2val:0x7f00b812; valaddr_reg:x16; val_offset:1744; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1744, x17, x15, 1744, x18)

inst_473:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00b812 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x00b812 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f00b812; op2val:0x7f00b812; valaddr_reg:x16; val_offset:1752; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1752, x17, x15, 1752, x18)

inst_474:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00b812 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x00b812 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f00b812; op2val:0x7f00b812; valaddr_reg:x16; val_offset:1760; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1760, x17, x15, 1760, x18)

inst_475:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00b812 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x00b812 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f00b812; op2val:0x7f00b812; valaddr_reg:x16; val_offset:1768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1768, x17, x15, 1768, x18)

inst_476:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1eee75 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1eee75 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1eee75; op2val:0x7f1eee75; valaddr_reg:x16; val_offset:1776; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1776, x17, x15, 1776, x18)

inst_477:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1eee75 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1eee75 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1eee75; op2val:0x7f1eee75; valaddr_reg:x16; val_offset:1784; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1784, x17, x15, 1784, x18)

inst_478:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1eee75 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1eee75 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1eee75; op2val:0x7f1eee75; valaddr_reg:x16; val_offset:1792; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1792, x17, x15, 1792, x18)

inst_479:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1eee75 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1eee75 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1eee75; op2val:0x7f1eee75; valaddr_reg:x16; val_offset:1800; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1800, x17, x15, 1800, x18)

inst_480:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1eee75 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1eee75 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1eee75; op2val:0x7f1eee75; valaddr_reg:x16; val_offset:1808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1808, x17, x15, 1808, x18)

inst_481:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54e058 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x54e058 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e54e058; op2val:0x7e54e058; valaddr_reg:x16; val_offset:1816; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1816, x17, x15, 1816, x18)

inst_482:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54e058 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x54e058 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e54e058; op2val:0x7e54e058; valaddr_reg:x16; val_offset:1824; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1824, x17, x15, 1824, x18)

inst_483:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54e058 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x54e058 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e54e058; op2val:0x7e54e058; valaddr_reg:x16; val_offset:1832; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1832, x17, x15, 1832, x18)

inst_484:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54e058 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x54e058 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e54e058; op2val:0x7e54e058; valaddr_reg:x16; val_offset:1840; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1840, x17, x15, 1840, x18)

inst_485:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54e058 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x54e058 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e54e058; op2val:0x7e54e058; valaddr_reg:x16; val_offset:1848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1848, x17, x15, 1848, x18)

inst_486:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319ce6 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x319ce6 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f319ce6; op2val:0x7f319ce6; valaddr_reg:x16; val_offset:1856; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1856, x17, x15, 1856, x18)

inst_487:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319ce6 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x319ce6 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f319ce6; op2val:0x7f319ce6; valaddr_reg:x16; val_offset:1864; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1864, x17, x15, 1864, x18)

inst_488:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319ce6 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x319ce6 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f319ce6; op2val:0x7f319ce6; valaddr_reg:x16; val_offset:1872; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1872, x17, x15, 1872, x18)

inst_489:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319ce6 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x319ce6 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f319ce6; op2val:0x7f319ce6; valaddr_reg:x16; val_offset:1880; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1880, x17, x15, 1880, x18)

inst_490:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319ce6 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x319ce6 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f319ce6; op2val:0x7f319ce6; valaddr_reg:x16; val_offset:1888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1888, x17, x15, 1888, x18)

inst_491:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b0708 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2b0708 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2b0708; op2val:0x7f2b0708; valaddr_reg:x16; val_offset:1896; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1896, x17, x15, 1896, x18)

inst_492:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b0708 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2b0708 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2b0708; op2val:0x7f2b0708; valaddr_reg:x16; val_offset:1904; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1904, x17, x15, 1904, x18)

inst_493:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b0708 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2b0708 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2b0708; op2val:0x7f2b0708; valaddr_reg:x16; val_offset:1912; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1912, x17, x15, 1912, x18)

inst_494:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b0708 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2b0708 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2b0708; op2val:0x7f2b0708; valaddr_reg:x16; val_offset:1920; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1920, x17, x15, 1920, x18)

inst_495:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b0708 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2b0708 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2b0708; op2val:0x7f2b0708; valaddr_reg:x16; val_offset:1928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1928, x17, x15, 1928, x18)

inst_496:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7b1d83 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x7b1d83 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d7b1d83; op2val:0x7d7b1d83; valaddr_reg:x16; val_offset:1936; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1936, x17, x15, 1936, x18)

inst_497:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7b1d83 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x7b1d83 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d7b1d83; op2val:0x7d7b1d83; valaddr_reg:x16; val_offset:1944; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1944, x17, x15, 1944, x18)

inst_498:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7b1d83 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x7b1d83 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d7b1d83; op2val:0x7d7b1d83; valaddr_reg:x16; val_offset:1952; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1952, x17, x15, 1952, x18)

inst_499:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7b1d83 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x7b1d83 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d7b1d83; op2val:0x7d7b1d83; valaddr_reg:x16; val_offset:1960; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1960, x17, x15, 1960, x18)

inst_500:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7b1d83 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x7b1d83 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d7b1d83; op2val:0x7d7b1d83; valaddr_reg:x16; val_offset:1968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1968, x17, x15, 1968, x18)

inst_501:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b2e1a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5b2e1a and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7edb2e1a; op2val:0x7edb2e1a; valaddr_reg:x16; val_offset:1976; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1976, x17, x15, 1976, x18)

inst_502:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b2e1a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5b2e1a and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7edb2e1a; op2val:0x7edb2e1a; valaddr_reg:x16; val_offset:1984; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1984, x17, x15, 1984, x18)

inst_503:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b2e1a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5b2e1a and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7edb2e1a; op2val:0x7edb2e1a; valaddr_reg:x16; val_offset:1992; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1992, x17, x15, 1992, x18)

inst_504:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b2e1a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5b2e1a and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7edb2e1a; op2val:0x7edb2e1a; valaddr_reg:x16; val_offset:2000; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 2000, x17, x15, 2000, x18)

inst_505:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b2e1a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5b2e1a and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7edb2e1a; op2val:0x7edb2e1a; valaddr_reg:x16; val_offset:2008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 2008, x17, x15, 2008, x18)

inst_506:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16201f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x16201f and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f16201f; op2val:0x7f16201f; valaddr_reg:x16; val_offset:2016; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 2016, x17, x15, 2016, x18)

inst_507:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16201f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x16201f and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f16201f; op2val:0x7f16201f; valaddr_reg:x16; val_offset:2024; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_3)

inst_508:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16201f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x16201f and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f16201f; op2val:0x7f16201f; valaddr_reg:x16; val_offset:0; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 0, x17, x15, 0, x18)

inst_509:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16201f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x16201f and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f16201f; op2val:0x7f16201f; valaddr_reg:x16; val_offset:8; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 8, x17, x15, 8, x18)

inst_510:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16201f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x16201f and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f16201f; op2val:0x7f16201f; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 16, x17, x15, 16, x18)

inst_511:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02e795 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x02e795 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e82e795; op2val:0x7e82e795; valaddr_reg:x16; val_offset:24; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 24, x17, x15, 24, x18)

inst_512:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02e795 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x02e795 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e82e795; op2val:0x7e82e795; valaddr_reg:x16; val_offset:32; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 32, x17, x15, 32, x18)

inst_513:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02e795 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x02e795 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e82e795; op2val:0x7e82e795; valaddr_reg:x16; val_offset:40; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 40, x17, x15, 40, x18)

inst_514:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02e795 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x02e795 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e82e795; op2val:0x7e82e795; valaddr_reg:x16; val_offset:48; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 48, x17, x15, 48, x18)

inst_515:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02e795 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x02e795 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e82e795; op2val:0x7e82e795; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 56, x17, x15, 56, x18)

inst_516:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17517f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x17517f and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f17517f; op2val:0x7f17517f; valaddr_reg:x16; val_offset:64; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 64, x17, x15, 64, x18)

inst_517:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17517f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x17517f and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f17517f; op2val:0x7f17517f; valaddr_reg:x16; val_offset:72; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 72, x17, x15, 72, x18)

inst_518:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17517f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x17517f and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f17517f; op2val:0x7f17517f; valaddr_reg:x16; val_offset:80; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 80, x17, x15, 80, x18)

inst_519:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17517f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x17517f and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f17517f; op2val:0x7f17517f; valaddr_reg:x16; val_offset:88; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 88, x17, x15, 88, x18)

inst_520:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17517f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x17517f and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f17517f; op2val:0x7f17517f; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 96, x17, x15, 96, x18)

inst_521:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x60d9a4 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x60d9a4 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d60d9a4; op2val:0x7d60d9a4; valaddr_reg:x16; val_offset:104; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 104, x17, x15, 104, x18)

inst_522:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x60d9a4 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x60d9a4 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d60d9a4; op2val:0x7d60d9a4; valaddr_reg:x16; val_offset:112; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 112, x17, x15, 112, x18)

inst_523:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x60d9a4 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x60d9a4 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d60d9a4; op2val:0x7d60d9a4; valaddr_reg:x16; val_offset:120; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 120, x17, x15, 120, x18)

inst_524:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x60d9a4 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x60d9a4 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d60d9a4; op2val:0x7d60d9a4; valaddr_reg:x16; val_offset:128; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 128, x17, x15, 128, x18)

inst_525:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x60d9a4 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x60d9a4 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d60d9a4; op2val:0x7d60d9a4; valaddr_reg:x16; val_offset:136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 136, x17, x15, 136, x18)

inst_526:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202a98 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x202a98 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7da02a98; op2val:0x7da02a98; valaddr_reg:x16; val_offset:144; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 144, x17, x15, 144, x18)

inst_527:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202a98 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x202a98 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7da02a98; op2val:0x7da02a98; valaddr_reg:x16; val_offset:152; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 152, x17, x15, 152, x18)

inst_528:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202a98 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x202a98 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7da02a98; op2val:0x7da02a98; valaddr_reg:x16; val_offset:160; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 160, x17, x15, 160, x18)

inst_529:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202a98 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x202a98 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7da02a98; op2val:0x7da02a98; valaddr_reg:x16; val_offset:168; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 168, x17, x15, 168, x18)

inst_530:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202a98 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x202a98 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7da02a98; op2val:0x7da02a98; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 176, x17, x15, 176, x18)

inst_531:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4fe433 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4fe433 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dcfe433; op2val:0x7dcfe433; valaddr_reg:x16; val_offset:184; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 184, x17, x15, 184, x18)

inst_532:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4fe433 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4fe433 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dcfe433; op2val:0x7dcfe433; valaddr_reg:x16; val_offset:192; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 192, x17, x15, 192, x18)

inst_533:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4fe433 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4fe433 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dcfe433; op2val:0x7dcfe433; valaddr_reg:x16; val_offset:200; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 200, x17, x15, 200, x18)

inst_534:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4fe433 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4fe433 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dcfe433; op2val:0x7dcfe433; valaddr_reg:x16; val_offset:208; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 208, x17, x15, 208, x18)

inst_535:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4fe433 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4fe433 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dcfe433; op2val:0x7dcfe433; valaddr_reg:x16; val_offset:216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 216, x17, x15, 216, x18)

inst_536:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x373a1e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x373a1e and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f373a1e; op2val:0x7f373a1e; valaddr_reg:x16; val_offset:224; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 224, x17, x15, 224, x18)

inst_537:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x373a1e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x373a1e and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f373a1e; op2val:0x7f373a1e; valaddr_reg:x16; val_offset:232; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 232, x17, x15, 232, x18)

inst_538:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x373a1e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x373a1e and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f373a1e; op2val:0x7f373a1e; valaddr_reg:x16; val_offset:240; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 240, x17, x15, 240, x18)

inst_539:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x373a1e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x373a1e and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f373a1e; op2val:0x7f373a1e; valaddr_reg:x16; val_offset:248; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 248, x17, x15, 248, x18)

inst_540:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x373a1e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x373a1e and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f373a1e; op2val:0x7f373a1e; valaddr_reg:x16; val_offset:256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 256, x17, x15, 256, x18)

inst_541:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x268b6a and fs2 == 0 and fe2 == 0xfe and fm2 == 0x268b6a and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f268b6a; op2val:0x7f268b6a; valaddr_reg:x16; val_offset:264; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 264, x17, x15, 264, x18)

inst_542:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x268b6a and fs2 == 0 and fe2 == 0xfe and fm2 == 0x268b6a and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f268b6a; op2val:0x7f268b6a; valaddr_reg:x16; val_offset:272; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 272, x17, x15, 272, x18)

inst_543:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x268b6a and fs2 == 0 and fe2 == 0xfe and fm2 == 0x268b6a and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f268b6a; op2val:0x7f268b6a; valaddr_reg:x16; val_offset:280; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 280, x17, x15, 280, x18)

inst_544:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x268b6a and fs2 == 0 and fe2 == 0xfe and fm2 == 0x268b6a and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f268b6a; op2val:0x7f268b6a; valaddr_reg:x16; val_offset:288; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 288, x17, x15, 288, x18)

inst_545:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x268b6a and fs2 == 0 and fe2 == 0xfe and fm2 == 0x268b6a and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f268b6a; op2val:0x7f268b6a; valaddr_reg:x16; val_offset:296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 296, x17, x15, 296, x18)

inst_546:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ab65 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x02ab65 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e82ab65; op2val:0x7e82ab65; valaddr_reg:x16; val_offset:304; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 304, x17, x15, 304, x18)

inst_547:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ab65 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x02ab65 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e82ab65; op2val:0x7e82ab65; valaddr_reg:x16; val_offset:312; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 312, x17, x15, 312, x18)

inst_548:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ab65 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x02ab65 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e82ab65; op2val:0x7e82ab65; valaddr_reg:x16; val_offset:320; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 320, x17, x15, 320, x18)

inst_549:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ab65 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x02ab65 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e82ab65; op2val:0x7e82ab65; valaddr_reg:x16; val_offset:328; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 328, x17, x15, 328, x18)

inst_550:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ab65 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x02ab65 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e82ab65; op2val:0x7e82ab65; valaddr_reg:x16; val_offset:336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 336, x17, x15, 336, x18)

inst_551:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217f53 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x217f53 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f217f53; op2val:0x7f217f53; valaddr_reg:x16; val_offset:344; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 344, x17, x15, 344, x18)

inst_552:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217f53 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x217f53 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f217f53; op2val:0x7f217f53; valaddr_reg:x16; val_offset:352; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 352, x17, x15, 352, x18)

inst_553:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217f53 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x217f53 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f217f53; op2val:0x7f217f53; valaddr_reg:x16; val_offset:360; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 360, x17, x15, 360, x18)

inst_554:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217f53 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x217f53 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f217f53; op2val:0x7f217f53; valaddr_reg:x16; val_offset:368; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 368, x17, x15, 368, x18)

inst_555:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217f53 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x217f53 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f217f53; op2val:0x7f217f53; valaddr_reg:x16; val_offset:376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 376, x17, x15, 376, x18)

inst_556:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11c013 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x11c013 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f11c013; op2val:0x7f11c013; valaddr_reg:x16; val_offset:384; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 384, x17, x15, 384, x18)

inst_557:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11c013 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x11c013 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f11c013; op2val:0x7f11c013; valaddr_reg:x16; val_offset:392; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 392, x17, x15, 392, x18)

inst_558:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11c013 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x11c013 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f11c013; op2val:0x7f11c013; valaddr_reg:x16; val_offset:400; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 400, x17, x15, 400, x18)

inst_559:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11c013 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x11c013 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f11c013; op2val:0x7f11c013; valaddr_reg:x16; val_offset:408; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 408, x17, x15, 408, x18)

inst_560:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11c013 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x11c013 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f11c013; op2val:0x7f11c013; valaddr_reg:x16; val_offset:416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 416, x17, x15, 416, x18)

inst_561:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ee8de and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2ee8de and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2ee8de; op2val:0x7f2ee8de; valaddr_reg:x16; val_offset:424; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 424, x17, x15, 424, x18)

inst_562:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ee8de and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2ee8de and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2ee8de; op2val:0x7f2ee8de; valaddr_reg:x16; val_offset:432; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 432, x17, x15, 432, x18)

inst_563:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ee8de and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2ee8de and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2ee8de; op2val:0x7f2ee8de; valaddr_reg:x16; val_offset:440; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 440, x17, x15, 440, x18)

inst_564:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ee8de and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2ee8de and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2ee8de; op2val:0x7f2ee8de; valaddr_reg:x16; val_offset:448; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 448, x17, x15, 448, x18)

inst_565:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ee8de and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2ee8de and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2ee8de; op2val:0x7f2ee8de; valaddr_reg:x16; val_offset:456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 456, x17, x15, 456, x18)

inst_566:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x02119e and fs2 == 0 and fe2 == 0xfb and fm2 == 0x02119e and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d82119e; op2val:0x7d82119e; valaddr_reg:x16; val_offset:464; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 464, x17, x15, 464, x18)

inst_567:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x02119e and fs2 == 0 and fe2 == 0xfb and fm2 == 0x02119e and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d82119e; op2val:0x7d82119e; valaddr_reg:x16; val_offset:472; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 472, x17, x15, 472, x18)

inst_568:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x02119e and fs2 == 0 and fe2 == 0xfb and fm2 == 0x02119e and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d82119e; op2val:0x7d82119e; valaddr_reg:x16; val_offset:480; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 480, x17, x15, 480, x18)

inst_569:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x02119e and fs2 == 0 and fe2 == 0xfb and fm2 == 0x02119e and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d82119e; op2val:0x7d82119e; valaddr_reg:x16; val_offset:488; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 488, x17, x15, 488, x18)

inst_570:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x02119e and fs2 == 0 and fe2 == 0xfb and fm2 == 0x02119e and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d82119e; op2val:0x7d82119e; valaddr_reg:x16; val_offset:496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 496, x17, x15, 496, x18)

inst_571:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34342f and fs2 == 0 and fe2 == 0xfc and fm2 == 0x34342f and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e34342f; op2val:0x7e34342f; valaddr_reg:x16; val_offset:504; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 504, x17, x15, 504, x18)

inst_572:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34342f and fs2 == 0 and fe2 == 0xfc and fm2 == 0x34342f and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e34342f; op2val:0x7e34342f; valaddr_reg:x16; val_offset:512; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 512, x17, x15, 512, x18)

inst_573:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34342f and fs2 == 0 and fe2 == 0xfc and fm2 == 0x34342f and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e34342f; op2val:0x7e34342f; valaddr_reg:x16; val_offset:520; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 520, x17, x15, 520, x18)

inst_574:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34342f and fs2 == 0 and fe2 == 0xfc and fm2 == 0x34342f and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e34342f; op2val:0x7e34342f; valaddr_reg:x16; val_offset:528; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 528, x17, x15, 528, x18)

inst_575:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34342f and fs2 == 0 and fe2 == 0xfc and fm2 == 0x34342f and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e34342f; op2val:0x7e34342f; valaddr_reg:x16; val_offset:536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 536, x17, x15, 536, x18)

inst_576:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a0c29 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3a0c29 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eba0c29; op2val:0x7eba0c29; valaddr_reg:x16; val_offset:544; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 544, x17, x15, 544, x18)

inst_577:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a0c29 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3a0c29 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eba0c29; op2val:0x7eba0c29; valaddr_reg:x16; val_offset:552; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 552, x17, x15, 552, x18)

inst_578:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a0c29 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3a0c29 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eba0c29; op2val:0x7eba0c29; valaddr_reg:x16; val_offset:560; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 560, x17, x15, 560, x18)

inst_579:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a0c29 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3a0c29 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eba0c29; op2val:0x7eba0c29; valaddr_reg:x16; val_offset:568; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 568, x17, x15, 568, x18)

inst_580:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a0c29 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3a0c29 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eba0c29; op2val:0x7eba0c29; valaddr_reg:x16; val_offset:576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 576, x17, x15, 576, x18)

inst_581:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x296b63 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x296b63 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f296b63; op2val:0x7f296b63; valaddr_reg:x16; val_offset:584; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 584, x17, x15, 584, x18)

inst_582:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x296b63 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x296b63 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f296b63; op2val:0x7f296b63; valaddr_reg:x16; val_offset:592; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 592, x17, x15, 592, x18)

inst_583:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x296b63 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x296b63 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f296b63; op2val:0x7f296b63; valaddr_reg:x16; val_offset:600; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 600, x17, x15, 600, x18)

inst_584:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x296b63 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x296b63 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f296b63; op2val:0x7f296b63; valaddr_reg:x16; val_offset:608; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 608, x17, x15, 608, x18)

inst_585:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x296b63 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x296b63 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f296b63; op2val:0x7f296b63; valaddr_reg:x16; val_offset:616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 616, x17, x15, 616, x18)

inst_586:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32fae0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x32fae0 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f32fae0; op2val:0x7f32fae0; valaddr_reg:x16; val_offset:624; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 624, x17, x15, 624, x18)

inst_587:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32fae0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x32fae0 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f32fae0; op2val:0x7f32fae0; valaddr_reg:x16; val_offset:632; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 632, x17, x15, 632, x18)

inst_588:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32fae0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x32fae0 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f32fae0; op2val:0x7f32fae0; valaddr_reg:x16; val_offset:640; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 640, x17, x15, 640, x18)

inst_589:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32fae0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x32fae0 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f32fae0; op2val:0x7f32fae0; valaddr_reg:x16; val_offset:648; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 648, x17, x15, 648, x18)

inst_590:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32fae0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x32fae0 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f32fae0; op2val:0x7f32fae0; valaddr_reg:x16; val_offset:656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 656, x17, x15, 656, x18)

inst_591:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x017ed0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x017ed0 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f017ed0; op2val:0x7f017ed0; valaddr_reg:x16; val_offset:664; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 664, x17, x15, 664, x18)

inst_592:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x017ed0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x017ed0 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f017ed0; op2val:0x7f017ed0; valaddr_reg:x16; val_offset:672; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 672, x17, x15, 672, x18)

inst_593:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x017ed0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x017ed0 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f017ed0; op2val:0x7f017ed0; valaddr_reg:x16; val_offset:680; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 680, x17, x15, 680, x18)

inst_594:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x017ed0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x017ed0 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f017ed0; op2val:0x7f017ed0; valaddr_reg:x16; val_offset:688; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 688, x17, x15, 688, x18)

inst_595:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x017ed0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x017ed0 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f017ed0; op2val:0x7f017ed0; valaddr_reg:x16; val_offset:696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 696, x17, x15, 696, x18)

inst_596:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x023675 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x023675 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e823675; op2val:0x7e823675; valaddr_reg:x16; val_offset:704; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 704, x17, x15, 704, x18)

inst_597:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x023675 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x023675 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e823675; op2val:0x7e823675; valaddr_reg:x16; val_offset:712; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 712, x17, x15, 712, x18)

inst_598:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x023675 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x023675 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e823675; op2val:0x7e823675; valaddr_reg:x16; val_offset:720; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 720, x17, x15, 720, x18)

inst_599:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x023675 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x023675 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e823675; op2val:0x7e823675; valaddr_reg:x16; val_offset:728; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 728, x17, x15, 728, x18)

inst_600:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x023675 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x023675 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e823675; op2val:0x7e823675; valaddr_reg:x16; val_offset:736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 736, x17, x15, 736, x18)

inst_601:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d8377 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3d8377 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3d8377; op2val:0x7f3d8377; valaddr_reg:x16; val_offset:744; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 744, x17, x15, 744, x18)

inst_602:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d8377 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3d8377 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3d8377; op2val:0x7f3d8377; valaddr_reg:x16; val_offset:752; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 752, x17, x15, 752, x18)

inst_603:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d8377 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3d8377 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3d8377; op2val:0x7f3d8377; valaddr_reg:x16; val_offset:760; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 760, x17, x15, 760, x18)

inst_604:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d8377 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3d8377 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3d8377; op2val:0x7f3d8377; valaddr_reg:x16; val_offset:768; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 768, x17, x15, 768, x18)

inst_605:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d8377 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3d8377 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3d8377; op2val:0x7f3d8377; valaddr_reg:x16; val_offset:776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 776, x17, x15, 776, x18)

inst_606:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a414e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x1a414e and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e1a414e; op2val:0x7e1a414e; valaddr_reg:x16; val_offset:784; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 784, x17, x15, 784, x18)

inst_607:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a414e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x1a414e and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e1a414e; op2val:0x7e1a414e; valaddr_reg:x16; val_offset:792; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 792, x17, x15, 792, x18)

inst_608:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a414e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x1a414e and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e1a414e; op2val:0x7e1a414e; valaddr_reg:x16; val_offset:800; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 800, x17, x15, 800, x18)

inst_609:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a414e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x1a414e and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e1a414e; op2val:0x7e1a414e; valaddr_reg:x16; val_offset:808; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 808, x17, x15, 808, x18)

inst_610:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a414e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x1a414e and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e1a414e; op2val:0x7e1a414e; valaddr_reg:x16; val_offset:816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 816, x17, x15, 816, x18)

inst_611:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcfc and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2cbcfc and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2cbcfc; op2val:0x7f2cbcfc; valaddr_reg:x16; val_offset:824; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 824, x17, x15, 824, x18)

inst_612:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcfc and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2cbcfc and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2cbcfc; op2val:0x7f2cbcfc; valaddr_reg:x16; val_offset:832; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 832, x17, x15, 832, x18)

inst_613:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcfc and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2cbcfc and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2cbcfc; op2val:0x7f2cbcfc; valaddr_reg:x16; val_offset:840; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 840, x17, x15, 840, x18)

inst_614:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcfc and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2cbcfc and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2cbcfc; op2val:0x7f2cbcfc; valaddr_reg:x16; val_offset:848; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 848, x17, x15, 848, x18)

inst_615:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcfc and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2cbcfc and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2cbcfc; op2val:0x7f2cbcfc; valaddr_reg:x16; val_offset:856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 856, x17, x15, 856, x18)

inst_616:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79dd8e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x79dd8e and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e79dd8e; op2val:0x7e79dd8e; valaddr_reg:x16; val_offset:864; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 864, x17, x15, 864, x18)

inst_617:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79dd8e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x79dd8e and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e79dd8e; op2val:0x7e79dd8e; valaddr_reg:x16; val_offset:872; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 872, x17, x15, 872, x18)

inst_618:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79dd8e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x79dd8e and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e79dd8e; op2val:0x7e79dd8e; valaddr_reg:x16; val_offset:880; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 880, x17, x15, 880, x18)

inst_619:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79dd8e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x79dd8e and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e79dd8e; op2val:0x7e79dd8e; valaddr_reg:x16; val_offset:888; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 888, x17, x15, 888, x18)

inst_620:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79dd8e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x79dd8e and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e79dd8e; op2val:0x7e79dd8e; valaddr_reg:x16; val_offset:896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 896, x17, x15, 896, x18)

inst_621:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x636240 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x636240 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e636240; op2val:0x7e636240; valaddr_reg:x16; val_offset:904; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 904, x17, x15, 904, x18)

inst_622:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x636240 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x636240 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e636240; op2val:0x7e636240; valaddr_reg:x16; val_offset:912; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 912, x17, x15, 912, x18)

inst_623:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x636240 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x636240 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e636240; op2val:0x7e636240; valaddr_reg:x16; val_offset:920; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 920, x17, x15, 920, x18)

inst_624:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x636240 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x636240 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e636240; op2val:0x7e636240; valaddr_reg:x16; val_offset:928; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 928, x17, x15, 928, x18)

inst_625:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x636240 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x636240 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e636240; op2val:0x7e636240; valaddr_reg:x16; val_offset:936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 936, x17, x15, 936, x18)

inst_626:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x206546 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x206546 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7da06546; op2val:0x7da06546; valaddr_reg:x16; val_offset:944; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 944, x17, x15, 944, x18)

inst_627:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x206546 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x206546 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7da06546; op2val:0x7da06546; valaddr_reg:x16; val_offset:952; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 952, x17, x15, 952, x18)

inst_628:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x206546 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x206546 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7da06546; op2val:0x7da06546; valaddr_reg:x16; val_offset:960; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 960, x17, x15, 960, x18)

inst_629:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x206546 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x206546 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7da06546; op2val:0x7da06546; valaddr_reg:x16; val_offset:968; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 968, x17, x15, 968, x18)

inst_630:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x206546 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x206546 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7da06546; op2val:0x7da06546; valaddr_reg:x16; val_offset:976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 976, x17, x15, 976, x18)

inst_631:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2640ba and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2640ba and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ea640ba; op2val:0x7ea640ba; valaddr_reg:x16; val_offset:984; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 984, x17, x15, 984, x18)

inst_632:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2640ba and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2640ba and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ea640ba; op2val:0x7ea640ba; valaddr_reg:x16; val_offset:992; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 992, x17, x15, 992, x18)

inst_633:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2640ba and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2640ba and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ea640ba; op2val:0x7ea640ba; valaddr_reg:x16; val_offset:1000; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1000, x17, x15, 1000, x18)

inst_634:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2640ba and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2640ba and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ea640ba; op2val:0x7ea640ba; valaddr_reg:x16; val_offset:1008; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1008, x17, x15, 1008, x18)

inst_635:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2640ba and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2640ba and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ea640ba; op2val:0x7ea640ba; valaddr_reg:x16; val_offset:1016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1016, x17, x15, 1016, x18)

inst_636:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e0667 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x1e0667 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e1e0667; op2val:0x7e1e0667; valaddr_reg:x16; val_offset:1024; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1024, x17, x15, 1024, x18)

inst_637:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e0667 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x1e0667 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e1e0667; op2val:0x7e1e0667; valaddr_reg:x16; val_offset:1032; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1032, x17, x15, 1032, x18)

inst_638:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e0667 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x1e0667 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e1e0667; op2val:0x7e1e0667; valaddr_reg:x16; val_offset:1040; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1040, x17, x15, 1040, x18)

inst_639:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e0667 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x1e0667 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e1e0667; op2val:0x7e1e0667; valaddr_reg:x16; val_offset:1048; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1048, x17, x15, 1048, x18)

inst_640:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e0667 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x1e0667 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e1e0667; op2val:0x7e1e0667; valaddr_reg:x16; val_offset:1056; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1056, x17, x15, 1056, x18)

inst_641:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1123d8 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1123d8 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e9123d8; op2val:0x7e9123d8; valaddr_reg:x16; val_offset:1064; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1064, x17, x15, 1064, x18)

inst_642:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1123d8 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1123d8 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e9123d8; op2val:0x7e9123d8; valaddr_reg:x16; val_offset:1072; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1072, x17, x15, 1072, x18)

inst_643:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1123d8 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1123d8 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e9123d8; op2val:0x7e9123d8; valaddr_reg:x16; val_offset:1080; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1080, x17, x15, 1080, x18)

inst_644:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1123d8 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1123d8 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e9123d8; op2val:0x7e9123d8; valaddr_reg:x16; val_offset:1088; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1088, x17, x15, 1088, x18)

inst_645:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1123d8 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1123d8 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e9123d8; op2val:0x7e9123d8; valaddr_reg:x16; val_offset:1096; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1096, x17, x15, 1096, x18)

inst_646:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x072c24 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x072c24 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f072c24; op2val:0x7f072c24; valaddr_reg:x16; val_offset:1104; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1104, x17, x15, 1104, x18)

inst_647:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x072c24 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x072c24 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f072c24; op2val:0x7f072c24; valaddr_reg:x16; val_offset:1112; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1112, x17, x15, 1112, x18)

inst_648:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x072c24 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x072c24 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f072c24; op2val:0x7f072c24; valaddr_reg:x16; val_offset:1120; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1120, x17, x15, 1120, x18)

inst_649:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x072c24 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x072c24 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f072c24; op2val:0x7f072c24; valaddr_reg:x16; val_offset:1128; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1128, x17, x15, 1128, x18)

inst_650:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x072c24 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x072c24 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f072c24; op2val:0x7f072c24; valaddr_reg:x16; val_offset:1136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1136, x17, x15, 1136, x18)

inst_651:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x269d2c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x269d2c and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f269d2c; op2val:0x7f269d2c; valaddr_reg:x16; val_offset:1144; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1144, x17, x15, 1144, x18)

inst_652:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x269d2c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x269d2c and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f269d2c; op2val:0x7f269d2c; valaddr_reg:x16; val_offset:1152; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1152, x17, x15, 1152, x18)

inst_653:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x269d2c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x269d2c and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f269d2c; op2val:0x7f269d2c; valaddr_reg:x16; val_offset:1160; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1160, x17, x15, 1160, x18)

inst_654:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x269d2c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x269d2c and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f269d2c; op2val:0x7f269d2c; valaddr_reg:x16; val_offset:1168; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1168, x17, x15, 1168, x18)

inst_655:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x269d2c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x269d2c and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f269d2c; op2val:0x7f269d2c; valaddr_reg:x16; val_offset:1176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1176, x17, x15, 1176, x18)

inst_656:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afcdb and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5afcdb and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7edafcdb; op2val:0x7edafcdb; valaddr_reg:x16; val_offset:1184; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1184, x17, x15, 1184, x18)

inst_657:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afcdb and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5afcdb and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7edafcdb; op2val:0x7edafcdb; valaddr_reg:x16; val_offset:1192; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1192, x17, x15, 1192, x18)

inst_658:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afcdb and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5afcdb and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7edafcdb; op2val:0x7edafcdb; valaddr_reg:x16; val_offset:1200; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1200, x17, x15, 1200, x18)

inst_659:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afcdb and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5afcdb and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7edafcdb; op2val:0x7edafcdb; valaddr_reg:x16; val_offset:1208; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1208, x17, x15, 1208, x18)

inst_660:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afcdb and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5afcdb and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7edafcdb; op2val:0x7edafcdb; valaddr_reg:x16; val_offset:1216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1216, x17, x15, 1216, x18)

inst_661:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d53d7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1d53d7 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1d53d7; op2val:0x7f1d53d7; valaddr_reg:x16; val_offset:1224; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1224, x17, x15, 1224, x18)

inst_662:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d53d7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1d53d7 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1d53d7; op2val:0x7f1d53d7; valaddr_reg:x16; val_offset:1232; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1232, x17, x15, 1232, x18)

inst_663:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d53d7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1d53d7 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1d53d7; op2val:0x7f1d53d7; valaddr_reg:x16; val_offset:1240; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1240, x17, x15, 1240, x18)

inst_664:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d53d7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1d53d7 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1d53d7; op2val:0x7f1d53d7; valaddr_reg:x16; val_offset:1248; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1248, x17, x15, 1248, x18)

inst_665:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d53d7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1d53d7 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1d53d7; op2val:0x7f1d53d7; valaddr_reg:x16; val_offset:1256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1256, x17, x15, 1256, x18)

inst_666:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28b6bd and fs2 == 0 and fe2 == 0xfe and fm2 == 0x28b6bd and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f28b6bd; op2val:0x7f28b6bd; valaddr_reg:x16; val_offset:1264; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1264, x17, x15, 1264, x18)

inst_667:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28b6bd and fs2 == 0 and fe2 == 0xfe and fm2 == 0x28b6bd and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f28b6bd; op2val:0x7f28b6bd; valaddr_reg:x16; val_offset:1272; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1272, x17, x15, 1272, x18)

inst_668:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28b6bd and fs2 == 0 and fe2 == 0xfe and fm2 == 0x28b6bd and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f28b6bd; op2val:0x7f28b6bd; valaddr_reg:x16; val_offset:1280; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1280, x17, x15, 1280, x18)

inst_669:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28b6bd and fs2 == 0 and fe2 == 0xfe and fm2 == 0x28b6bd and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f28b6bd; op2val:0x7f28b6bd; valaddr_reg:x16; val_offset:1288; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1288, x17, x15, 1288, x18)

inst_670:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28b6bd and fs2 == 0 and fe2 == 0xfe and fm2 == 0x28b6bd and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f28b6bd; op2val:0x7f28b6bd; valaddr_reg:x16; val_offset:1296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1296, x17, x15, 1296, x18)

inst_671:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41cf9e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x41cf9e and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e41cf9e; op2val:0x7e41cf9e; valaddr_reg:x16; val_offset:1304; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1304, x17, x15, 1304, x18)

inst_672:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41cf9e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x41cf9e and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e41cf9e; op2val:0x7e41cf9e; valaddr_reg:x16; val_offset:1312; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1312, x17, x15, 1312, x18)

inst_673:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41cf9e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x41cf9e and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e41cf9e; op2val:0x7e41cf9e; valaddr_reg:x16; val_offset:1320; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1320, x17, x15, 1320, x18)

inst_674:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41cf9e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x41cf9e and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e41cf9e; op2val:0x7e41cf9e; valaddr_reg:x16; val_offset:1328; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1328, x17, x15, 1328, x18)

inst_675:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41cf9e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x41cf9e and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e41cf9e; op2val:0x7e41cf9e; valaddr_reg:x16; val_offset:1336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1336, x17, x15, 1336, x18)

inst_676:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ed153 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0ed153 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0ed153; op2val:0x7f0ed153; valaddr_reg:x16; val_offset:1344; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1344, x17, x15, 1344, x18)

inst_677:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ed153 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0ed153 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0ed153; op2val:0x7f0ed153; valaddr_reg:x16; val_offset:1352; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1352, x17, x15, 1352, x18)

inst_678:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ed153 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0ed153 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0ed153; op2val:0x7f0ed153; valaddr_reg:x16; val_offset:1360; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1360, x17, x15, 1360, x18)

inst_679:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ed153 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0ed153 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0ed153; op2val:0x7f0ed153; valaddr_reg:x16; val_offset:1368; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1368, x17, x15, 1368, x18)

inst_680:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ed153 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0ed153 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0ed153; op2val:0x7f0ed153; valaddr_reg:x16; val_offset:1376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1376, x17, x15, 1376, x18)

inst_681:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e5bf8 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x6e5bf8 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e6e5bf8; op2val:0x7e6e5bf8; valaddr_reg:x16; val_offset:1384; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1384, x17, x15, 1384, x18)

inst_682:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e5bf8 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x6e5bf8 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e6e5bf8; op2val:0x7e6e5bf8; valaddr_reg:x16; val_offset:1392; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1392, x17, x15, 1392, x18)

inst_683:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e5bf8 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x6e5bf8 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e6e5bf8; op2val:0x7e6e5bf8; valaddr_reg:x16; val_offset:1400; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1400, x17, x15, 1400, x18)

inst_684:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e5bf8 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x6e5bf8 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e6e5bf8; op2val:0x7e6e5bf8; valaddr_reg:x16; val_offset:1408; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1408, x17, x15, 1408, x18)

inst_685:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e5bf8 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x6e5bf8 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e6e5bf8; op2val:0x7e6e5bf8; valaddr_reg:x16; val_offset:1416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1416, x17, x15, 1416, x18)

inst_686:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6b4e0e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x6b4e0e and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e6b4e0e; op2val:0x7e6b4e0e; valaddr_reg:x16; val_offset:1424; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1424, x17, x15, 1424, x18)

inst_687:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6b4e0e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x6b4e0e and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e6b4e0e; op2val:0x7e6b4e0e; valaddr_reg:x16; val_offset:1432; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1432, x17, x15, 1432, x18)

inst_688:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6b4e0e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x6b4e0e and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e6b4e0e; op2val:0x7e6b4e0e; valaddr_reg:x16; val_offset:1440; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1440, x17, x15, 1440, x18)

inst_689:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6b4e0e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x6b4e0e and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e6b4e0e; op2val:0x7e6b4e0e; valaddr_reg:x16; val_offset:1448; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1448, x17, x15, 1448, x18)

inst_690:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6b4e0e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x6b4e0e and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e6b4e0e; op2val:0x7e6b4e0e; valaddr_reg:x16; val_offset:1456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1456, x17, x15, 1456, x18)

inst_691:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39d661 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x39d661 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f39d661; op2val:0x7f39d661; valaddr_reg:x16; val_offset:1464; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1464, x17, x15, 1464, x18)

inst_692:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39d661 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x39d661 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f39d661; op2val:0x7f39d661; valaddr_reg:x16; val_offset:1472; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1472, x17, x15, 1472, x18)

inst_693:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39d661 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x39d661 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f39d661; op2val:0x7f39d661; valaddr_reg:x16; val_offset:1480; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1480, x17, x15, 1480, x18)

inst_694:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39d661 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x39d661 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f39d661; op2val:0x7f39d661; valaddr_reg:x16; val_offset:1488; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1488, x17, x15, 1488, x18)

inst_695:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39d661 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x39d661 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f39d661; op2val:0x7f39d661; valaddr_reg:x16; val_offset:1496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1496, x17, x15, 1496, x18)

inst_696:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x34967e and fs2 == 0 and fe2 == 0xfa and fm2 == 0x34967e and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d34967e; op2val:0x7d34967e; valaddr_reg:x16; val_offset:1504; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1504, x17, x15, 1504, x18)

inst_697:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x34967e and fs2 == 0 and fe2 == 0xfa and fm2 == 0x34967e and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d34967e; op2val:0x7d34967e; valaddr_reg:x16; val_offset:1512; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1512, x17, x15, 1512, x18)

inst_698:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x34967e and fs2 == 0 and fe2 == 0xfa and fm2 == 0x34967e and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d34967e; op2val:0x7d34967e; valaddr_reg:x16; val_offset:1520; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1520, x17, x15, 1520, x18)

inst_699:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x34967e and fs2 == 0 and fe2 == 0xfa and fm2 == 0x34967e and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d34967e; op2val:0x7d34967e; valaddr_reg:x16; val_offset:1528; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1528, x17, x15, 1528, x18)

inst_700:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x34967e and fs2 == 0 and fe2 == 0xfa and fm2 == 0x34967e and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d34967e; op2val:0x7d34967e; valaddr_reg:x16; val_offset:1536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1536, x17, x15, 1536, x18)

inst_701:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76b77e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x76b77e and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e76b77e; op2val:0x7e76b77e; valaddr_reg:x16; val_offset:1544; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1544, x17, x15, 1544, x18)

inst_702:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76b77e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x76b77e and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e76b77e; op2val:0x7e76b77e; valaddr_reg:x16; val_offset:1552; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1552, x17, x15, 1552, x18)

inst_703:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76b77e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x76b77e and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e76b77e; op2val:0x7e76b77e; valaddr_reg:x16; val_offset:1560; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1560, x17, x15, 1560, x18)

inst_704:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76b77e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x76b77e and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e76b77e; op2val:0x7e76b77e; valaddr_reg:x16; val_offset:1568; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1568, x17, x15, 1568, x18)

inst_705:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76b77e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x76b77e and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e76b77e; op2val:0x7e76b77e; valaddr_reg:x16; val_offset:1576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1576, x17, x15, 1576, x18)

inst_706:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17a40d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x17a40d and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e97a40d; op2val:0x7e97a40d; valaddr_reg:x16; val_offset:1584; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1584, x17, x15, 1584, x18)

inst_707:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17a40d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x17a40d and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e97a40d; op2val:0x7e97a40d; valaddr_reg:x16; val_offset:1592; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1592, x17, x15, 1592, x18)

inst_708:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17a40d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x17a40d and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e97a40d; op2val:0x7e97a40d; valaddr_reg:x16; val_offset:1600; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1600, x17, x15, 1600, x18)

inst_709:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17a40d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x17a40d and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e97a40d; op2val:0x7e97a40d; valaddr_reg:x16; val_offset:1608; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1608, x17, x15, 1608, x18)

inst_710:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17a40d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x17a40d and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e97a40d; op2val:0x7e97a40d; valaddr_reg:x16; val_offset:1616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1616, x17, x15, 1616, x18)

inst_711:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b6a13 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2b6a13 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e2b6a13; op2val:0x7e2b6a13; valaddr_reg:x16; val_offset:1624; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1624, x17, x15, 1624, x18)

inst_712:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b6a13 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2b6a13 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e2b6a13; op2val:0x7e2b6a13; valaddr_reg:x16; val_offset:1632; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1632, x17, x15, 1632, x18)

inst_713:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b6a13 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2b6a13 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e2b6a13; op2val:0x7e2b6a13; valaddr_reg:x16; val_offset:1640; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1640, x17, x15, 1640, x18)

inst_714:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b6a13 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2b6a13 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e2b6a13; op2val:0x7e2b6a13; valaddr_reg:x16; val_offset:1648; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1648, x17, x15, 1648, x18)

inst_715:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b6a13 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2b6a13 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e2b6a13; op2val:0x7e2b6a13; valaddr_reg:x16; val_offset:1656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1656, x17, x15, 1656, x18)

inst_716:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x192dff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x192dff and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f192dff; op2val:0x7f192dff; valaddr_reg:x16; val_offset:1664; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1664, x17, x15, 1664, x18)

inst_717:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x192dff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x192dff and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f192dff; op2val:0x7f192dff; valaddr_reg:x16; val_offset:1672; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1672, x17, x15, 1672, x18)

inst_718:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x192dff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x192dff and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f192dff; op2val:0x7f192dff; valaddr_reg:x16; val_offset:1680; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1680, x17, x15, 1680, x18)

inst_719:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x192dff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x192dff and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f192dff; op2val:0x7f192dff; valaddr_reg:x16; val_offset:1688; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1688, x17, x15, 1688, x18)

inst_720:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x192dff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x192dff and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f192dff; op2val:0x7f192dff; valaddr_reg:x16; val_offset:1696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1696, x17, x15, 1696, x18)

inst_721:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x296bac and fs2 == 0 and fe2 == 0xfc and fm2 == 0x296bac and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e296bac; op2val:0x7e296bac; valaddr_reg:x16; val_offset:1704; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1704, x17, x15, 1704, x18)

inst_722:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x296bac and fs2 == 0 and fe2 == 0xfc and fm2 == 0x296bac and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e296bac; op2val:0x7e296bac; valaddr_reg:x16; val_offset:1712; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1712, x17, x15, 1712, x18)

inst_723:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x296bac and fs2 == 0 and fe2 == 0xfc and fm2 == 0x296bac and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e296bac; op2val:0x7e296bac; valaddr_reg:x16; val_offset:1720; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1720, x17, x15, 1720, x18)

inst_724:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x296bac and fs2 == 0 and fe2 == 0xfc and fm2 == 0x296bac and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e296bac; op2val:0x7e296bac; valaddr_reg:x16; val_offset:1728; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1728, x17, x15, 1728, x18)

inst_725:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x296bac and fs2 == 0 and fe2 == 0xfc and fm2 == 0x296bac and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e296bac; op2val:0x7e296bac; valaddr_reg:x16; val_offset:1736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1736, x17, x15, 1736, x18)

inst_726:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0235b2 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0235b2 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0235b2; op2val:0x7f0235b2; valaddr_reg:x16; val_offset:1744; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1744, x17, x15, 1744, x18)

inst_727:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0235b2 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0235b2 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0235b2; op2val:0x7f0235b2; valaddr_reg:x16; val_offset:1752; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1752, x17, x15, 1752, x18)

inst_728:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0235b2 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0235b2 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0235b2; op2val:0x7f0235b2; valaddr_reg:x16; val_offset:1760; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1760, x17, x15, 1760, x18)

inst_729:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0235b2 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0235b2 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0235b2; op2val:0x7f0235b2; valaddr_reg:x16; val_offset:1768; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1768, x17, x15, 1768, x18)

inst_730:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0235b2 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0235b2 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0235b2; op2val:0x7f0235b2; valaddr_reg:x16; val_offset:1776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1776, x17, x15, 1776, x18)

inst_731:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x761c0c and fs2 == 0 and fe2 == 0xfb and fm2 == 0x761c0c and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7df61c0c; op2val:0x7df61c0c; valaddr_reg:x16; val_offset:1784; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1784, x17, x15, 1784, x18)

inst_732:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x761c0c and fs2 == 0 and fe2 == 0xfb and fm2 == 0x761c0c and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7df61c0c; op2val:0x7df61c0c; valaddr_reg:x16; val_offset:1792; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1792, x17, x15, 1792, x18)

inst_733:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x761c0c and fs2 == 0 and fe2 == 0xfb and fm2 == 0x761c0c and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7df61c0c; op2val:0x7df61c0c; valaddr_reg:x16; val_offset:1800; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1800, x17, x15, 1800, x18)

inst_734:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x761c0c and fs2 == 0 and fe2 == 0xfb and fm2 == 0x761c0c and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7df61c0c; op2val:0x7df61c0c; valaddr_reg:x16; val_offset:1808; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1808, x17, x15, 1808, x18)

inst_735:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x761c0c and fs2 == 0 and fe2 == 0xfb and fm2 == 0x761c0c and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7df61c0c; op2val:0x7df61c0c; valaddr_reg:x16; val_offset:1816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1816, x17, x15, 1816, x18)

inst_736:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x60f718 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x60f718 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7de0f718; op2val:0x7de0f718; valaddr_reg:x16; val_offset:1824; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1824, x17, x15, 1824, x18)

inst_737:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x60f718 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x60f718 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7de0f718; op2val:0x7de0f718; valaddr_reg:x16; val_offset:1832; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1832, x17, x15, 1832, x18)

inst_738:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x60f718 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x60f718 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7de0f718; op2val:0x7de0f718; valaddr_reg:x16; val_offset:1840; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1840, x17, x15, 1840, x18)

inst_739:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x60f718 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x60f718 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7de0f718; op2val:0x7de0f718; valaddr_reg:x16; val_offset:1848; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1848, x17, x15, 1848, x18)

inst_740:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x60f718 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x60f718 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7de0f718; op2val:0x7de0f718; valaddr_reg:x16; val_offset:1856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1856, x17, x15, 1856, x18)

inst_741:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7fd01a and fs2 == 0 and fe2 == 0xf8 and fm2 == 0x7fd01a and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7c7fd01a; op2val:0x7c7fd01a; valaddr_reg:x16; val_offset:1864; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1864, x17, x15, 1864, x18)

inst_742:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7fd01a and fs2 == 0 and fe2 == 0xf8 and fm2 == 0x7fd01a and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7c7fd01a; op2val:0x7c7fd01a; valaddr_reg:x16; val_offset:1872; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1872, x17, x15, 1872, x18)

inst_743:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7fd01a and fs2 == 0 and fe2 == 0xf8 and fm2 == 0x7fd01a and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7c7fd01a; op2val:0x7c7fd01a; valaddr_reg:x16; val_offset:1880; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1880, x17, x15, 1880, x18)

inst_744:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7fd01a and fs2 == 0 and fe2 == 0xf8 and fm2 == 0x7fd01a and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7c7fd01a; op2val:0x7c7fd01a; valaddr_reg:x16; val_offset:1888; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1888, x17, x15, 1888, x18)

inst_745:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7fd01a and fs2 == 0 and fe2 == 0xf8 and fm2 == 0x7fd01a and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7c7fd01a; op2val:0x7c7fd01a; valaddr_reg:x16; val_offset:1896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1896, x17, x15, 1896, x18)

inst_746:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6891ae and fs2 == 0 and fe2 == 0xfd and fm2 == 0x6891ae and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ee891ae; op2val:0x7ee891ae; valaddr_reg:x16; val_offset:1904; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1904, x17, x15, 1904, x18)

inst_747:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6891ae and fs2 == 0 and fe2 == 0xfd and fm2 == 0x6891ae and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ee891ae; op2val:0x7ee891ae; valaddr_reg:x16; val_offset:1912; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1912, x17, x15, 1912, x18)

inst_748:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6891ae and fs2 == 0 and fe2 == 0xfd and fm2 == 0x6891ae and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ee891ae; op2val:0x7ee891ae; valaddr_reg:x16; val_offset:1920; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1920, x17, x15, 1920, x18)

inst_749:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6891ae and fs2 == 0 and fe2 == 0xfd and fm2 == 0x6891ae and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ee891ae; op2val:0x7ee891ae; valaddr_reg:x16; val_offset:1928; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1928, x17, x15, 1928, x18)

inst_750:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6891ae and fs2 == 0 and fe2 == 0xfd and fm2 == 0x6891ae and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ee891ae; op2val:0x7ee891ae; valaddr_reg:x16; val_offset:1936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1936, x17, x15, 1936, x18)

inst_751:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43e270 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x43e270 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec3e270; op2val:0x7ec3e270; valaddr_reg:x16; val_offset:1944; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1944, x17, x15, 1944, x18)

inst_752:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43e270 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x43e270 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec3e270; op2val:0x7ec3e270; valaddr_reg:x16; val_offset:1952; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1952, x17, x15, 1952, x18)

inst_753:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43e270 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x43e270 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec3e270; op2val:0x7ec3e270; valaddr_reg:x16; val_offset:1960; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1960, x17, x15, 1960, x18)

inst_754:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43e270 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x43e270 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec3e270; op2val:0x7ec3e270; valaddr_reg:x16; val_offset:1968; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1968, x17, x15, 1968, x18)

inst_755:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43e270 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x43e270 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec3e270; op2val:0x7ec3e270; valaddr_reg:x16; val_offset:1976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1976, x17, x15, 1976, x18)

inst_756:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x270ed6 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x270ed6 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7da70ed6; op2val:0x7da70ed6; valaddr_reg:x16; val_offset:1984; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1984, x17, x15, 1984, x18)

inst_757:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x270ed6 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x270ed6 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7da70ed6; op2val:0x7da70ed6; valaddr_reg:x16; val_offset:1992; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1992, x17, x15, 1992, x18)

inst_758:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x270ed6 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x270ed6 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7da70ed6; op2val:0x7da70ed6; valaddr_reg:x16; val_offset:2000; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 2000, x17, x15, 2000, x18)

inst_759:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x270ed6 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x270ed6 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7da70ed6; op2val:0x7da70ed6; valaddr_reg:x16; val_offset:2008; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 2008, x17, x15, 2008, x18)

inst_760:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x270ed6 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x270ed6 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7da70ed6; op2val:0x7da70ed6; valaddr_reg:x16; val_offset:2016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 2016, x17, x15, 2016, x18)

inst_761:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21a1fc and fs2 == 0 and fe2 == 0xfd and fm2 == 0x21a1fc and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ea1a1fc; op2val:0x7ea1a1fc; valaddr_reg:x16; val_offset:2024; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_4)

inst_762:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21a1fc and fs2 == 0 and fe2 == 0xfd and fm2 == 0x21a1fc and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ea1a1fc; op2val:0x7ea1a1fc; valaddr_reg:x16; val_offset:0; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 0, x17, x15, 0, x18)

inst_763:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21a1fc and fs2 == 0 and fe2 == 0xfd and fm2 == 0x21a1fc and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ea1a1fc; op2val:0x7ea1a1fc; valaddr_reg:x16; val_offset:8; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 8, x17, x15, 8, x18)

inst_764:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21a1fc and fs2 == 0 and fe2 == 0xfd and fm2 == 0x21a1fc and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ea1a1fc; op2val:0x7ea1a1fc; valaddr_reg:x16; val_offset:16; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 16, x17, x15, 16, x18)

inst_765:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21a1fc and fs2 == 0 and fe2 == 0xfd and fm2 == 0x21a1fc and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ea1a1fc; op2val:0x7ea1a1fc; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 24, x17, x15, 24, x18)

inst_766:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1135f9 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x1135f9 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7c9135f9; op2val:0x7c9135f9; valaddr_reg:x16; val_offset:32; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 32, x17, x15, 32, x18)

inst_767:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1135f9 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x1135f9 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7c9135f9; op2val:0x7c9135f9; valaddr_reg:x16; val_offset:40; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 40, x17, x15, 40, x18)

inst_768:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1135f9 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x1135f9 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7c9135f9; op2val:0x7c9135f9; valaddr_reg:x16; val_offset:48; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 48, x17, x15, 48, x18)

inst_769:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1135f9 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x1135f9 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7c9135f9; op2val:0x7c9135f9; valaddr_reg:x16; val_offset:56; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 56, x17, x15, 56, x18)

inst_770:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1135f9 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x1135f9 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7c9135f9; op2val:0x7c9135f9; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 64, x17, x15, 64, x18)

inst_771:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x774c1e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x774c1e and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e774c1e; op2val:0x7e774c1e; valaddr_reg:x16; val_offset:72; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 72, x17, x15, 72, x18)

inst_772:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x774c1e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x774c1e and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e774c1e; op2val:0x7e774c1e; valaddr_reg:x16; val_offset:80; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 80, x17, x15, 80, x18)

inst_773:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x774c1e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x774c1e and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e774c1e; op2val:0x7e774c1e; valaddr_reg:x16; val_offset:88; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 88, x17, x15, 88, x18)

inst_774:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x774c1e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x774c1e and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e774c1e; op2val:0x7e774c1e; valaddr_reg:x16; val_offset:96; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 96, x17, x15, 96, x18)

inst_775:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x774c1e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x774c1e and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e774c1e; op2val:0x7e774c1e; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 104, x17, x15, 104, x18)

inst_776:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08a011 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x08a011 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f08a011; op2val:0x7f08a011; valaddr_reg:x16; val_offset:112; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 112, x17, x15, 112, x18)

inst_777:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08a011 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x08a011 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f08a011; op2val:0x7f08a011; valaddr_reg:x16; val_offset:120; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 120, x17, x15, 120, x18)

inst_778:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08a011 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x08a011 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f08a011; op2val:0x7f08a011; valaddr_reg:x16; val_offset:128; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 128, x17, x15, 128, x18)

inst_779:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08a011 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x08a011 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f08a011; op2val:0x7f08a011; valaddr_reg:x16; val_offset:136; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 136, x17, x15, 136, x18)

inst_780:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08a011 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x08a011 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f08a011; op2val:0x7f08a011; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 144, x17, x15, 144, x18)

inst_781:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0122a3 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x0122a3 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e0122a3; op2val:0x7e0122a3; valaddr_reg:x16; val_offset:152; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 152, x17, x15, 152, x18)

inst_782:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0122a3 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x0122a3 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e0122a3; op2val:0x7e0122a3; valaddr_reg:x16; val_offset:160; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 160, x17, x15, 160, x18)

inst_783:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0122a3 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x0122a3 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e0122a3; op2val:0x7e0122a3; valaddr_reg:x16; val_offset:168; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 168, x17, x15, 168, x18)

inst_784:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0122a3 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x0122a3 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e0122a3; op2val:0x7e0122a3; valaddr_reg:x16; val_offset:176; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 176, x17, x15, 176, x18)

inst_785:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0122a3 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x0122a3 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e0122a3; op2val:0x7e0122a3; valaddr_reg:x16; val_offset:184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 184, x17, x15, 184, x18)

inst_786:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x752f4e and fs2 == 0 and fe2 == 0xfb and fm2 == 0x752f4e and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7df52f4e; op2val:0x7df52f4e; valaddr_reg:x16; val_offset:192; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 192, x17, x15, 192, x18)

inst_787:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x752f4e and fs2 == 0 and fe2 == 0xfb and fm2 == 0x752f4e and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7df52f4e; op2val:0x7df52f4e; valaddr_reg:x16; val_offset:200; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 200, x17, x15, 200, x18)

inst_788:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x752f4e and fs2 == 0 and fe2 == 0xfb and fm2 == 0x752f4e and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7df52f4e; op2val:0x7df52f4e; valaddr_reg:x16; val_offset:208; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 208, x17, x15, 208, x18)

inst_789:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x752f4e and fs2 == 0 and fe2 == 0xfb and fm2 == 0x752f4e and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7df52f4e; op2val:0x7df52f4e; valaddr_reg:x16; val_offset:216; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 216, x17, x15, 216, x18)

inst_790:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x752f4e and fs2 == 0 and fe2 == 0xfb and fm2 == 0x752f4e and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7df52f4e; op2val:0x7df52f4e; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 224, x17, x15, 224, x18)

inst_791:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x044224 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x044224 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e844224; op2val:0x7e844224; valaddr_reg:x16; val_offset:232; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 232, x17, x15, 232, x18)

inst_792:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x044224 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x044224 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e844224; op2val:0x7e844224; valaddr_reg:x16; val_offset:240; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 240, x17, x15, 240, x18)

inst_793:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x044224 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x044224 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e844224; op2val:0x7e844224; valaddr_reg:x16; val_offset:248; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 248, x17, x15, 248, x18)

inst_794:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x044224 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x044224 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e844224; op2val:0x7e844224; valaddr_reg:x16; val_offset:256; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 256, x17, x15, 256, x18)

inst_795:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x044224 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x044224 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e844224; op2val:0x7e844224; valaddr_reg:x16; val_offset:264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 264, x17, x15, 264, x18)

inst_796:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x282cad and fs2 == 0 and fe2 == 0xfb and fm2 == 0x282cad and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7da82cad; op2val:0x7da82cad; valaddr_reg:x16; val_offset:272; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 272, x17, x15, 272, x18)

inst_797:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x282cad and fs2 == 0 and fe2 == 0xfb and fm2 == 0x282cad and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7da82cad; op2val:0x7da82cad; valaddr_reg:x16; val_offset:280; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 280, x17, x15, 280, x18)

inst_798:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x282cad and fs2 == 0 and fe2 == 0xfb and fm2 == 0x282cad and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7da82cad; op2val:0x7da82cad; valaddr_reg:x16; val_offset:288; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 288, x17, x15, 288, x18)

inst_799:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x282cad and fs2 == 0 and fe2 == 0xfb and fm2 == 0x282cad and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7da82cad; op2val:0x7da82cad; valaddr_reg:x16; val_offset:296; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 296, x17, x15, 296, x18)

inst_800:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x282cad and fs2 == 0 and fe2 == 0xfb and fm2 == 0x282cad and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7da82cad; op2val:0x7da82cad; valaddr_reg:x16; val_offset:304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 304, x17, x15, 304, x18)

inst_801:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x111299 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x111299 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f111299; op2val:0x7f111299; valaddr_reg:x16; val_offset:312; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 312, x17, x15, 312, x18)

inst_802:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x111299 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x111299 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f111299; op2val:0x7f111299; valaddr_reg:x16; val_offset:320; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 320, x17, x15, 320, x18)

inst_803:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x111299 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x111299 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f111299; op2val:0x7f111299; valaddr_reg:x16; val_offset:328; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 328, x17, x15, 328, x18)

inst_804:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x111299 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x111299 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f111299; op2val:0x7f111299; valaddr_reg:x16; val_offset:336; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 336, x17, x15, 336, x18)

inst_805:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x111299 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x111299 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f111299; op2val:0x7f111299; valaddr_reg:x16; val_offset:344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 344, x17, x15, 344, x18)

inst_806:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x4d182e and fs2 == 0 and fe2 == 0xf8 and fm2 == 0x4d182e and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7c4d182e; op2val:0x7c4d182e; valaddr_reg:x16; val_offset:352; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 352, x17, x15, 352, x18)

inst_807:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x4d182e and fs2 == 0 and fe2 == 0xf8 and fm2 == 0x4d182e and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7c4d182e; op2val:0x7c4d182e; valaddr_reg:x16; val_offset:360; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 360, x17, x15, 360, x18)

inst_808:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x4d182e and fs2 == 0 and fe2 == 0xf8 and fm2 == 0x4d182e and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7c4d182e; op2val:0x7c4d182e; valaddr_reg:x16; val_offset:368; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 368, x17, x15, 368, x18)

inst_809:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x4d182e and fs2 == 0 and fe2 == 0xf8 and fm2 == 0x4d182e and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7c4d182e; op2val:0x7c4d182e; valaddr_reg:x16; val_offset:376; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 376, x17, x15, 376, x18)

inst_810:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x4d182e and fs2 == 0 and fe2 == 0xf8 and fm2 == 0x4d182e and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7c4d182e; op2val:0x7c4d182e; valaddr_reg:x16; val_offset:384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 384, x17, x15, 384, x18)

inst_811:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x013cdf and fs2 == 0 and fe2 == 0xfe and fm2 == 0x013cdf and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f013cdf; op2val:0x7f013cdf; valaddr_reg:x16; val_offset:392; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 392, x17, x15, 392, x18)

inst_812:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x013cdf and fs2 == 0 and fe2 == 0xfe and fm2 == 0x013cdf and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f013cdf; op2val:0x7f013cdf; valaddr_reg:x16; val_offset:400; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 400, x17, x15, 400, x18)

inst_813:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x013cdf and fs2 == 0 and fe2 == 0xfe and fm2 == 0x013cdf and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f013cdf; op2val:0x7f013cdf; valaddr_reg:x16; val_offset:408; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 408, x17, x15, 408, x18)

inst_814:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x013cdf and fs2 == 0 and fe2 == 0xfe and fm2 == 0x013cdf and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f013cdf; op2val:0x7f013cdf; valaddr_reg:x16; val_offset:416; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 416, x17, x15, 416, x18)

inst_815:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x013cdf and fs2 == 0 and fe2 == 0xfe and fm2 == 0x013cdf and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f013cdf; op2val:0x7f013cdf; valaddr_reg:x16; val_offset:424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 424, x17, x15, 424, x18)

inst_816:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4410d9 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x4410d9 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e4410d9; op2val:0x7e4410d9; valaddr_reg:x16; val_offset:432; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 432, x17, x15, 432, x18)

inst_817:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4410d9 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x4410d9 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e4410d9; op2val:0x7e4410d9; valaddr_reg:x16; val_offset:440; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 440, x17, x15, 440, x18)

inst_818:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4410d9 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x4410d9 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e4410d9; op2val:0x7e4410d9; valaddr_reg:x16; val_offset:448; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 448, x17, x15, 448, x18)

inst_819:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4410d9 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x4410d9 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e4410d9; op2val:0x7e4410d9; valaddr_reg:x16; val_offset:456; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 456, x17, x15, 456, x18)

inst_820:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4410d9 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x4410d9 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e4410d9; op2val:0x7e4410d9; valaddr_reg:x16; val_offset:464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 464, x17, x15, 464, x18)

inst_821:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x190af0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x190af0 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f190af0; op2val:0x7f190af0; valaddr_reg:x16; val_offset:472; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 472, x17, x15, 472, x18)

inst_822:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x190af0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x190af0 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f190af0; op2val:0x7f190af0; valaddr_reg:x16; val_offset:480; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 480, x17, x15, 480, x18)

inst_823:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x190af0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x190af0 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f190af0; op2val:0x7f190af0; valaddr_reg:x16; val_offset:488; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 488, x17, x15, 488, x18)

inst_824:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x190af0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x190af0 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f190af0; op2val:0x7f190af0; valaddr_reg:x16; val_offset:496; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 496, x17, x15, 496, x18)

inst_825:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x190af0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x190af0 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f190af0; op2val:0x7f190af0; valaddr_reg:x16; val_offset:504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 504, x17, x15, 504, x18)

inst_826:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25504e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x25504e and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f25504e; op2val:0x7f25504e; valaddr_reg:x16; val_offset:512; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 512, x17, x15, 512, x18)

inst_827:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25504e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x25504e and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f25504e; op2val:0x7f25504e; valaddr_reg:x16; val_offset:520; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 520, x17, x15, 520, x18)

inst_828:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25504e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x25504e and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f25504e; op2val:0x7f25504e; valaddr_reg:x16; val_offset:528; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 528, x17, x15, 528, x18)

inst_829:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25504e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x25504e and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f25504e; op2val:0x7f25504e; valaddr_reg:x16; val_offset:536; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 536, x17, x15, 536, x18)

inst_830:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25504e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x25504e and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f25504e; op2val:0x7f25504e; valaddr_reg:x16; val_offset:544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 544, x17, x15, 544, x18)

inst_831:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x081926 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x081926 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e081926; op2val:0x7e081926; valaddr_reg:x16; val_offset:552; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 552, x17, x15, 552, x18)

inst_832:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x081926 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x081926 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e081926; op2val:0x7e081926; valaddr_reg:x16; val_offset:560; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 560, x17, x15, 560, x18)

inst_833:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x081926 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x081926 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e081926; op2val:0x7e081926; valaddr_reg:x16; val_offset:568; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 568, x17, x15, 568, x18)

inst_834:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x081926 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x081926 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e081926; op2val:0x7e081926; valaddr_reg:x16; val_offset:576; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 576, x17, x15, 576, x18)

inst_835:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x081926 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x081926 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e081926; op2val:0x7e081926; valaddr_reg:x16; val_offset:584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 584, x17, x15, 584, x18)

inst_836:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2be0d7 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x2be0d7 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7cabe0d7; op2val:0x7cabe0d7; valaddr_reg:x16; val_offset:592; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 592, x17, x15, 592, x18)

inst_837:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2be0d7 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x2be0d7 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7cabe0d7; op2val:0x7cabe0d7; valaddr_reg:x16; val_offset:600; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 600, x17, x15, 600, x18)

inst_838:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2be0d7 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x2be0d7 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7cabe0d7; op2val:0x7cabe0d7; valaddr_reg:x16; val_offset:608; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 608, x17, x15, 608, x18)

inst_839:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2be0d7 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x2be0d7 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7cabe0d7; op2val:0x7cabe0d7; valaddr_reg:x16; val_offset:616; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 616, x17, x15, 616, x18)

inst_840:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2be0d7 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x2be0d7 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7cabe0d7; op2val:0x7cabe0d7; valaddr_reg:x16; val_offset:624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 624, x17, x15, 624, x18)

inst_841:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b2e86 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x6b2e86 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eeb2e86; op2val:0x7eeb2e86; valaddr_reg:x16; val_offset:632; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 632, x17, x15, 632, x18)

inst_842:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b2e86 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x6b2e86 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eeb2e86; op2val:0x7eeb2e86; valaddr_reg:x16; val_offset:640; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 640, x17, x15, 640, x18)

inst_843:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b2e86 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x6b2e86 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eeb2e86; op2val:0x7eeb2e86; valaddr_reg:x16; val_offset:648; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 648, x17, x15, 648, x18)

inst_844:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b2e86 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x6b2e86 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eeb2e86; op2val:0x7eeb2e86; valaddr_reg:x16; val_offset:656; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 656, x17, x15, 656, x18)

inst_845:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b2e86 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x6b2e86 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eeb2e86; op2val:0x7eeb2e86; valaddr_reg:x16; val_offset:664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 664, x17, x15, 664, x18)

inst_846:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4ec69e and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4ec69e and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ecec69e; op2val:0x7ecec69e; valaddr_reg:x16; val_offset:672; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 672, x17, x15, 672, x18)

inst_847:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4ec69e and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4ec69e and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ecec69e; op2val:0x7ecec69e; valaddr_reg:x16; val_offset:680; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 680, x17, x15, 680, x18)

inst_848:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4ec69e and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4ec69e and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ecec69e; op2val:0x7ecec69e; valaddr_reg:x16; val_offset:688; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 688, x17, x15, 688, x18)

inst_849:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4ec69e and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4ec69e and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ecec69e; op2val:0x7ecec69e; valaddr_reg:x16; val_offset:696; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 696, x17, x15, 696, x18)

inst_850:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4ec69e and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4ec69e and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ecec69e; op2val:0x7ecec69e; valaddr_reg:x16; val_offset:704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 704, x17, x15, 704, x18)

inst_851:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0901e1 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x0901e1 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e8901e1; op2val:0x7e8901e1; valaddr_reg:x16; val_offset:712; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 712, x17, x15, 712, x18)

inst_852:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0901e1 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x0901e1 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e8901e1; op2val:0x7e8901e1; valaddr_reg:x16; val_offset:720; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 720, x17, x15, 720, x18)

inst_853:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0901e1 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x0901e1 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e8901e1; op2val:0x7e8901e1; valaddr_reg:x16; val_offset:728; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 728, x17, x15, 728, x18)

inst_854:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0901e1 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x0901e1 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e8901e1; op2val:0x7e8901e1; valaddr_reg:x16; val_offset:736; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 736, x17, x15, 736, x18)

inst_855:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0901e1 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x0901e1 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e8901e1; op2val:0x7e8901e1; valaddr_reg:x16; val_offset:744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 744, x17, x15, 744, x18)

inst_856:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x41d009 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x41d009 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec1d009; op2val:0x7ec1d009; valaddr_reg:x16; val_offset:752; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 752, x17, x15, 752, x18)

inst_857:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x41d009 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x41d009 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec1d009; op2val:0x7ec1d009; valaddr_reg:x16; val_offset:760; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 760, x17, x15, 760, x18)

inst_858:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x41d009 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x41d009 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec1d009; op2val:0x7ec1d009; valaddr_reg:x16; val_offset:768; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 768, x17, x15, 768, x18)

inst_859:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x41d009 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x41d009 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec1d009; op2val:0x7ec1d009; valaddr_reg:x16; val_offset:776; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 776, x17, x15, 776, x18)

inst_860:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x41d009 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x41d009 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec1d009; op2val:0x7ec1d009; valaddr_reg:x16; val_offset:784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 784, x17, x15, 784, x18)

inst_861:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ae136 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5ae136 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7edae136; op2val:0x7edae136; valaddr_reg:x16; val_offset:792; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 792, x17, x15, 792, x18)

inst_862:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ae136 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5ae136 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7edae136; op2val:0x7edae136; valaddr_reg:x16; val_offset:800; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 800, x17, x15, 800, x18)

inst_863:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ae136 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5ae136 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7edae136; op2val:0x7edae136; valaddr_reg:x16; val_offset:808; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 808, x17, x15, 808, x18)

inst_864:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ae136 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5ae136 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7edae136; op2val:0x7edae136; valaddr_reg:x16; val_offset:816; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 816, x17, x15, 816, x18)

inst_865:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ae136 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5ae136 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7edae136; op2val:0x7edae136; valaddr_reg:x16; val_offset:824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 824, x17, x15, 824, x18)

inst_866:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2c6927 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x2c6927 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d2c6927; op2val:0x7d2c6927; valaddr_reg:x16; val_offset:832; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 832, x17, x15, 832, x18)

inst_867:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2c6927 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x2c6927 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d2c6927; op2val:0x7d2c6927; valaddr_reg:x16; val_offset:840; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 840, x17, x15, 840, x18)

inst_868:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2c6927 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x2c6927 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d2c6927; op2val:0x7d2c6927; valaddr_reg:x16; val_offset:848; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 848, x17, x15, 848, x18)

inst_869:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2c6927 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x2c6927 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d2c6927; op2val:0x7d2c6927; valaddr_reg:x16; val_offset:856; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 856, x17, x15, 856, x18)

inst_870:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2c6927 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x2c6927 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d2c6927; op2val:0x7d2c6927; valaddr_reg:x16; val_offset:864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 864, x17, x15, 864, x18)

inst_871:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x578fb8 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x578fb8 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ed78fb8; op2val:0x7ed78fb8; valaddr_reg:x16; val_offset:872; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 872, x17, x15, 872, x18)

inst_872:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x578fb8 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x578fb8 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ed78fb8; op2val:0x7ed78fb8; valaddr_reg:x16; val_offset:880; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 880, x17, x15, 880, x18)

inst_873:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x578fb8 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x578fb8 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ed78fb8; op2val:0x7ed78fb8; valaddr_reg:x16; val_offset:888; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 888, x17, x15, 888, x18)

inst_874:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x578fb8 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x578fb8 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ed78fb8; op2val:0x7ed78fb8; valaddr_reg:x16; val_offset:896; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 896, x17, x15, 896, x18)

inst_875:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x578fb8 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x578fb8 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ed78fb8; op2val:0x7ed78fb8; valaddr_reg:x16; val_offset:904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 904, x17, x15, 904, x18)

inst_876:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ad7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1b5ad7 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1b5ad7; op2val:0x7f1b5ad7; valaddr_reg:x16; val_offset:912; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 912, x17, x15, 912, x18)

inst_877:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ad7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1b5ad7 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1b5ad7; op2val:0x7f1b5ad7; valaddr_reg:x16; val_offset:920; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 920, x17, x15, 920, x18)

inst_878:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ad7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1b5ad7 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1b5ad7; op2val:0x7f1b5ad7; valaddr_reg:x16; val_offset:928; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 928, x17, x15, 928, x18)

inst_879:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ad7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1b5ad7 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1b5ad7; op2val:0x7f1b5ad7; valaddr_reg:x16; val_offset:936; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 936, x17, x15, 936, x18)

inst_880:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ad7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1b5ad7 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1b5ad7; op2val:0x7f1b5ad7; valaddr_reg:x16; val_offset:944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 944, x17, x15, 944, x18)

inst_881:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2a257f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2a257f and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2a257f; op2val:0x7f2a257f; valaddr_reg:x16; val_offset:952; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 952, x17, x15, 952, x18)

inst_882:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2a257f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2a257f and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2a257f; op2val:0x7f2a257f; valaddr_reg:x16; val_offset:960; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 960, x17, x15, 960, x18)

inst_883:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2a257f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2a257f and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2a257f; op2val:0x7f2a257f; valaddr_reg:x16; val_offset:968; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 968, x17, x15, 968, x18)

inst_884:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2a257f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2a257f and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2a257f; op2val:0x7f2a257f; valaddr_reg:x16; val_offset:976; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 976, x17, x15, 976, x18)

inst_885:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2a257f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2a257f and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2a257f; op2val:0x7f2a257f; valaddr_reg:x16; val_offset:984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 984, x17, x15, 984, x18)

inst_886:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x167638 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x167638 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f167638; op2val:0x7f167638; valaddr_reg:x16; val_offset:992; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 992, x17, x15, 992, x18)

inst_887:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x167638 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x167638 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f167638; op2val:0x7f167638; valaddr_reg:x16; val_offset:1000; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1000, x17, x15, 1000, x18)

inst_888:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x167638 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x167638 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f167638; op2val:0x7f167638; valaddr_reg:x16; val_offset:1008; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1008, x17, x15, 1008, x18)

inst_889:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x167638 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x167638 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f167638; op2val:0x7f167638; valaddr_reg:x16; val_offset:1016; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1016, x17, x15, 1016, x18)

inst_890:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x167638 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x167638 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f167638; op2val:0x7f167638; valaddr_reg:x16; val_offset:1024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1024, x17, x15, 1024, x18)

inst_891:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c42d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x37c42d and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f37c42d; op2val:0x7f37c42d; valaddr_reg:x16; val_offset:1032; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1032, x17, x15, 1032, x18)

inst_892:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c42d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x37c42d and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f37c42d; op2val:0x7f37c42d; valaddr_reg:x16; val_offset:1040; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1040, x17, x15, 1040, x18)

inst_893:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c42d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x37c42d and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f37c42d; op2val:0x7f37c42d; valaddr_reg:x16; val_offset:1048; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1048, x17, x15, 1048, x18)

inst_894:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c42d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x37c42d and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f37c42d; op2val:0x7f37c42d; valaddr_reg:x16; val_offset:1056; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1056, x17, x15, 1056, x18)

inst_895:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c42d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x37c42d and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f37c42d; op2val:0x7f37c42d; valaddr_reg:x16; val_offset:1064; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1064, x17, x15, 1064, x18)

inst_896:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ece7f and fs2 == 0 and fe2 == 0xfc and fm2 == 0x4ece7f and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e4ece7f; op2val:0x7e4ece7f; valaddr_reg:x16; val_offset:1072; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1072, x17, x15, 1072, x18)

inst_897:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ece7f and fs2 == 0 and fe2 == 0xfc and fm2 == 0x4ece7f and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e4ece7f; op2val:0x7e4ece7f; valaddr_reg:x16; val_offset:1080; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1080, x17, x15, 1080, x18)

inst_898:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ece7f and fs2 == 0 and fe2 == 0xfc and fm2 == 0x4ece7f and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e4ece7f; op2val:0x7e4ece7f; valaddr_reg:x16; val_offset:1088; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1088, x17, x15, 1088, x18)

inst_899:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ece7f and fs2 == 0 and fe2 == 0xfc and fm2 == 0x4ece7f and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e4ece7f; op2val:0x7e4ece7f; valaddr_reg:x16; val_offset:1096; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1096, x17, x15, 1096, x18)

inst_900:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ece7f and fs2 == 0 and fe2 == 0xfc and fm2 == 0x4ece7f and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e4ece7f; op2val:0x7e4ece7f; valaddr_reg:x16; val_offset:1104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1104, x17, x15, 1104, x18)

inst_901:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ddf89 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5ddf89 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7edddf89; op2val:0x7edddf89; valaddr_reg:x16; val_offset:1112; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1112, x17, x15, 1112, x18)

inst_902:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ddf89 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5ddf89 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7edddf89; op2val:0x7edddf89; valaddr_reg:x16; val_offset:1120; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1120, x17, x15, 1120, x18)

inst_903:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ddf89 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5ddf89 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7edddf89; op2val:0x7edddf89; valaddr_reg:x16; val_offset:1128; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1128, x17, x15, 1128, x18)

inst_904:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ddf89 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5ddf89 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7edddf89; op2val:0x7edddf89; valaddr_reg:x16; val_offset:1136; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1136, x17, x15, 1136, x18)

inst_905:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ddf89 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5ddf89 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7edddf89; op2val:0x7edddf89; valaddr_reg:x16; val_offset:1144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1144, x17, x15, 1144, x18)

inst_906:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4549ce and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4549ce and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec549ce; op2val:0x7ec549ce; valaddr_reg:x16; val_offset:1152; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1152, x17, x15, 1152, x18)

inst_907:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4549ce and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4549ce and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec549ce; op2val:0x7ec549ce; valaddr_reg:x16; val_offset:1160; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1160, x17, x15, 1160, x18)

inst_908:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4549ce and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4549ce and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec549ce; op2val:0x7ec549ce; valaddr_reg:x16; val_offset:1168; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1168, x17, x15, 1168, x18)

inst_909:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4549ce and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4549ce and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec549ce; op2val:0x7ec549ce; valaddr_reg:x16; val_offset:1176; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1176, x17, x15, 1176, x18)

inst_910:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4549ce and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4549ce and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec549ce; op2val:0x7ec549ce; valaddr_reg:x16; val_offset:1184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1184, x17, x15, 1184, x18)

inst_911:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x252cf6 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x252cf6 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f252cf6; op2val:0x7f252cf6; valaddr_reg:x16; val_offset:1192; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1192, x17, x15, 1192, x18)

inst_912:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x252cf6 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x252cf6 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f252cf6; op2val:0x7f252cf6; valaddr_reg:x16; val_offset:1200; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1200, x17, x15, 1200, x18)

inst_913:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x252cf6 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x252cf6 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f252cf6; op2val:0x7f252cf6; valaddr_reg:x16; val_offset:1208; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1208, x17, x15, 1208, x18)

inst_914:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x252cf6 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x252cf6 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f252cf6; op2val:0x7f252cf6; valaddr_reg:x16; val_offset:1216; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1216, x17, x15, 1216, x18)

inst_915:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x252cf6 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x252cf6 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f252cf6; op2val:0x7f252cf6; valaddr_reg:x16; val_offset:1224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1224, x17, x15, 1224, x18)

inst_916:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x13f0c0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x13f0c0 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f13f0c0; op2val:0x7f13f0c0; valaddr_reg:x16; val_offset:1232; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1232, x17, x15, 1232, x18)

inst_917:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x13f0c0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x13f0c0 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f13f0c0; op2val:0x7f13f0c0; valaddr_reg:x16; val_offset:1240; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1240, x17, x15, 1240, x18)

inst_918:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x13f0c0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x13f0c0 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f13f0c0; op2val:0x7f13f0c0; valaddr_reg:x16; val_offset:1248; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1248, x17, x15, 1248, x18)

inst_919:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x13f0c0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x13f0c0 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f13f0c0; op2val:0x7f13f0c0; valaddr_reg:x16; val_offset:1256; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1256, x17, x15, 1256, x18)

inst_920:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x13f0c0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x13f0c0 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f13f0c0; op2val:0x7f13f0c0; valaddr_reg:x16; val_offset:1264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1264, x17, x15, 1264, x18)

inst_921:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x40dc0e and fs2 == 0 and fe2 == 0xfd and fm2 == 0x40dc0e and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec0dc0e; op2val:0x7ec0dc0e; valaddr_reg:x16; val_offset:1272; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1272, x17, x15, 1272, x18)

inst_922:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x40dc0e and fs2 == 0 and fe2 == 0xfd and fm2 == 0x40dc0e and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec0dc0e; op2val:0x7ec0dc0e; valaddr_reg:x16; val_offset:1280; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1280, x17, x15, 1280, x18)

inst_923:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x40dc0e and fs2 == 0 and fe2 == 0xfd and fm2 == 0x40dc0e and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec0dc0e; op2val:0x7ec0dc0e; valaddr_reg:x16; val_offset:1288; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1288, x17, x15, 1288, x18)

inst_924:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x40dc0e and fs2 == 0 and fe2 == 0xfd and fm2 == 0x40dc0e and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec0dc0e; op2val:0x7ec0dc0e; valaddr_reg:x16; val_offset:1296; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1296, x17, x15, 1296, x18)

inst_925:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x40dc0e and fs2 == 0 and fe2 == 0xfd and fm2 == 0x40dc0e and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec0dc0e; op2val:0x7ec0dc0e; valaddr_reg:x16; val_offset:1304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1304, x17, x15, 1304, x18)

inst_926:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17246c and fs2 == 0 and fe2 == 0xfd and fm2 == 0x17246c and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e97246c; op2val:0x7e97246c; valaddr_reg:x16; val_offset:1312; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1312, x17, x15, 1312, x18)

inst_927:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17246c and fs2 == 0 and fe2 == 0xfd and fm2 == 0x17246c and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e97246c; op2val:0x7e97246c; valaddr_reg:x16; val_offset:1320; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1320, x17, x15, 1320, x18)

inst_928:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17246c and fs2 == 0 and fe2 == 0xfd and fm2 == 0x17246c and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e97246c; op2val:0x7e97246c; valaddr_reg:x16; val_offset:1328; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1328, x17, x15, 1328, x18)

inst_929:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17246c and fs2 == 0 and fe2 == 0xfd and fm2 == 0x17246c and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e97246c; op2val:0x7e97246c; valaddr_reg:x16; val_offset:1336; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1336, x17, x15, 1336, x18)

inst_930:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17246c and fs2 == 0 and fe2 == 0xfd and fm2 == 0x17246c and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e97246c; op2val:0x7e97246c; valaddr_reg:x16; val_offset:1344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1344, x17, x15, 1344, x18)

inst_931:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3cc5a4 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3cc5a4 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3cc5a4; op2val:0x7f3cc5a4; valaddr_reg:x16; val_offset:1352; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1352, x17, x15, 1352, x18)

inst_932:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3cc5a4 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3cc5a4 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3cc5a4; op2val:0x7f3cc5a4; valaddr_reg:x16; val_offset:1360; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1360, x17, x15, 1360, x18)

inst_933:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3cc5a4 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3cc5a4 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3cc5a4; op2val:0x7f3cc5a4; valaddr_reg:x16; val_offset:1368; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1368, x17, x15, 1368, x18)

inst_934:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3cc5a4 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3cc5a4 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3cc5a4; op2val:0x7f3cc5a4; valaddr_reg:x16; val_offset:1376; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1376, x17, x15, 1376, x18)

inst_935:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3cc5a4 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3cc5a4 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3cc5a4; op2val:0x7f3cc5a4; valaddr_reg:x16; val_offset:1384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1384, x17, x15, 1384, x18)

inst_936:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0xfa and fm2 == 0x0597cb and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d0597cb; op2val:0x7d0597cb; valaddr_reg:x16; val_offset:1392; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1392, x17, x15, 1392, x18)

inst_937:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0xfa and fm2 == 0x0597cb and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d0597cb; op2val:0x7d0597cb; valaddr_reg:x16; val_offset:1400; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1400, x17, x15, 1400, x18)

inst_938:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0xfa and fm2 == 0x0597cb and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d0597cb; op2val:0x7d0597cb; valaddr_reg:x16; val_offset:1408; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1408, x17, x15, 1408, x18)

inst_939:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0xfa and fm2 == 0x0597cb and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d0597cb; op2val:0x7d0597cb; valaddr_reg:x16; val_offset:1416; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1416, x17, x15, 1416, x18)

inst_940:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0xfa and fm2 == 0x0597cb and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d0597cb; op2val:0x7d0597cb; valaddr_reg:x16; val_offset:1424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1424, x17, x15, 1424, x18)

inst_941:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c0ad4 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3c0ad4 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ebc0ad4; op2val:0x7ebc0ad4; valaddr_reg:x16; val_offset:1432; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1432, x17, x15, 1432, x18)

inst_942:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c0ad4 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3c0ad4 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ebc0ad4; op2val:0x7ebc0ad4; valaddr_reg:x16; val_offset:1440; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1440, x17, x15, 1440, x18)

inst_943:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c0ad4 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3c0ad4 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ebc0ad4; op2val:0x7ebc0ad4; valaddr_reg:x16; val_offset:1448; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1448, x17, x15, 1448, x18)

inst_944:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c0ad4 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3c0ad4 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ebc0ad4; op2val:0x7ebc0ad4; valaddr_reg:x16; val_offset:1456; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1456, x17, x15, 1456, x18)

inst_945:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c0ad4 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3c0ad4 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ebc0ad4; op2val:0x7ebc0ad4; valaddr_reg:x16; val_offset:1464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1464, x17, x15, 1464, x18)

inst_946:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x480a54 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x480a54 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec80a54; op2val:0x7ec80a54; valaddr_reg:x16; val_offset:1472; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1472, x17, x15, 1472, x18)

inst_947:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x480a54 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x480a54 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec80a54; op2val:0x7ec80a54; valaddr_reg:x16; val_offset:1480; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1480, x17, x15, 1480, x18)

inst_948:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x480a54 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x480a54 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec80a54; op2val:0x7ec80a54; valaddr_reg:x16; val_offset:1488; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1488, x17, x15, 1488, x18)

inst_949:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x480a54 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x480a54 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec80a54; op2val:0x7ec80a54; valaddr_reg:x16; val_offset:1496; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1496, x17, x15, 1496, x18)

inst_950:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x480a54 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x480a54 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec80a54; op2val:0x7ec80a54; valaddr_reg:x16; val_offset:1504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1504, x17, x15, 1504, x18)

inst_951:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x433c5b and fs2 == 0 and fe2 == 0xfd and fm2 == 0x433c5b and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec33c5b; op2val:0x7ec33c5b; valaddr_reg:x16; val_offset:1512; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1512, x17, x15, 1512, x18)

inst_952:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x433c5b and fs2 == 0 and fe2 == 0xfd and fm2 == 0x433c5b and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec33c5b; op2val:0x7ec33c5b; valaddr_reg:x16; val_offset:1520; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1520, x17, x15, 1520, x18)

inst_953:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x433c5b and fs2 == 0 and fe2 == 0xfd and fm2 == 0x433c5b and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec33c5b; op2val:0x7ec33c5b; valaddr_reg:x16; val_offset:1528; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1528, x17, x15, 1528, x18)

inst_954:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x433c5b and fs2 == 0 and fe2 == 0xfd and fm2 == 0x433c5b and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec33c5b; op2val:0x7ec33c5b; valaddr_reg:x16; val_offset:1536; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1536, x17, x15, 1536, x18)

inst_955:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x433c5b and fs2 == 0 and fe2 == 0xfd and fm2 == 0x433c5b and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec33c5b; op2val:0x7ec33c5b; valaddr_reg:x16; val_offset:1544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1544, x17, x15, 1544, x18)

inst_956:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0fe2cd and fs2 == 0 and fe2 == 0xfd and fm2 == 0x0fe2cd and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e8fe2cd; op2val:0x7e8fe2cd; valaddr_reg:x16; val_offset:1552; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1552, x17, x15, 1552, x18)

inst_957:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0fe2cd and fs2 == 0 and fe2 == 0xfd and fm2 == 0x0fe2cd and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e8fe2cd; op2val:0x7e8fe2cd; valaddr_reg:x16; val_offset:1560; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1560, x17, x15, 1560, x18)

inst_958:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0fe2cd and fs2 == 0 and fe2 == 0xfd and fm2 == 0x0fe2cd and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e8fe2cd; op2val:0x7e8fe2cd; valaddr_reg:x16; val_offset:1568; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1568, x17, x15, 1568, x18)

inst_959:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0fe2cd and fs2 == 0 and fe2 == 0xfd and fm2 == 0x0fe2cd and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e8fe2cd; op2val:0x7e8fe2cd; valaddr_reg:x16; val_offset:1576; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1576, x17, x15, 1576, x18)

inst_960:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0fe2cd and fs2 == 0 and fe2 == 0xfd and fm2 == 0x0fe2cd and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e8fe2cd; op2val:0x7e8fe2cd; valaddr_reg:x16; val_offset:1584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1584, x17, x15, 1584, x18)

inst_961:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06fbdb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x06fbdb and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f06fbdb; op2val:0x7f06fbdb; valaddr_reg:x16; val_offset:1592; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1592, x17, x15, 1592, x18)

inst_962:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06fbdb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x06fbdb and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f06fbdb; op2val:0x7f06fbdb; valaddr_reg:x16; val_offset:1600; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1600, x17, x15, 1600, x18)

inst_963:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06fbdb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x06fbdb and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f06fbdb; op2val:0x7f06fbdb; valaddr_reg:x16; val_offset:1608; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1608, x17, x15, 1608, x18)

inst_964:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06fbdb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x06fbdb and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f06fbdb; op2val:0x7f06fbdb; valaddr_reg:x16; val_offset:1616; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1616, x17, x15, 1616, x18)

inst_965:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06fbdb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x06fbdb and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f06fbdb; op2val:0x7f06fbdb; valaddr_reg:x16; val_offset:1624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1624, x17, x15, 1624, x18)

inst_966:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04dea3 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x04dea3 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e04dea3; op2val:0x7e04dea3; valaddr_reg:x16; val_offset:1632; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1632, x17, x15, 1632, x18)

inst_967:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04dea3 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x04dea3 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e04dea3; op2val:0x7e04dea3; valaddr_reg:x16; val_offset:1640; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1640, x17, x15, 1640, x18)

inst_968:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04dea3 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x04dea3 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e04dea3; op2val:0x7e04dea3; valaddr_reg:x16; val_offset:1648; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1648, x17, x15, 1648, x18)

inst_969:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04dea3 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x04dea3 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e04dea3; op2val:0x7e04dea3; valaddr_reg:x16; val_offset:1656; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1656, x17, x15, 1656, x18)

inst_970:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04dea3 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x04dea3 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e04dea3; op2val:0x7e04dea3; valaddr_reg:x16; val_offset:1664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1664, x17, x15, 1664, x18)

inst_971:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191a03 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x191a03 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f191a03; op2val:0x7f191a03; valaddr_reg:x16; val_offset:1672; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1672, x17, x15, 1672, x18)

inst_972:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191a03 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x191a03 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f191a03; op2val:0x7f191a03; valaddr_reg:x16; val_offset:1680; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1680, x17, x15, 1680, x18)

inst_973:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191a03 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x191a03 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f191a03; op2val:0x7f191a03; valaddr_reg:x16; val_offset:1688; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1688, x17, x15, 1688, x18)

inst_974:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191a03 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x191a03 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f191a03; op2val:0x7f191a03; valaddr_reg:x16; val_offset:1696; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1696, x17, x15, 1696, x18)

inst_975:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191a03 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x191a03 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f191a03; op2val:0x7f191a03; valaddr_reg:x16; val_offset:1704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1704, x17, x15, 1704, x18)

inst_976:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x54206e and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x54206e and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7cd4206e; op2val:0x7cd4206e; valaddr_reg:x16; val_offset:1712; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1712, x17, x15, 1712, x18)

inst_977:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x54206e and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x54206e and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7cd4206e; op2val:0x7cd4206e; valaddr_reg:x16; val_offset:1720; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1720, x17, x15, 1720, x18)

inst_978:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x54206e and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x54206e and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7cd4206e; op2val:0x7cd4206e; valaddr_reg:x16; val_offset:1728; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1728, x17, x15, 1728, x18)

inst_979:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x54206e and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x54206e and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7cd4206e; op2val:0x7cd4206e; valaddr_reg:x16; val_offset:1736; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1736, x17, x15, 1736, x18)

inst_980:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x54206e and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x54206e and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7cd4206e; op2val:0x7cd4206e; valaddr_reg:x16; val_offset:1744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1744, x17, x15, 1744, x18)

inst_981:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42076b and fs2 == 0 and fe2 == 0xfd and fm2 == 0x42076b and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec2076b; op2val:0x7ec2076b; valaddr_reg:x16; val_offset:1752; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1752, x17, x15, 1752, x18)

inst_982:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42076b and fs2 == 0 and fe2 == 0xfd and fm2 == 0x42076b and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec2076b; op2val:0x7ec2076b; valaddr_reg:x16; val_offset:1760; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1760, x17, x15, 1760, x18)

inst_983:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42076b and fs2 == 0 and fe2 == 0xfd and fm2 == 0x42076b and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec2076b; op2val:0x7ec2076b; valaddr_reg:x16; val_offset:1768; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1768, x17, x15, 1768, x18)

inst_984:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42076b and fs2 == 0 and fe2 == 0xfd and fm2 == 0x42076b and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec2076b; op2val:0x7ec2076b; valaddr_reg:x16; val_offset:1776; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1776, x17, x15, 1776, x18)

inst_985:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42076b and fs2 == 0 and fe2 == 0xfd and fm2 == 0x42076b and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ec2076b; op2val:0x7ec2076b; valaddr_reg:x16; val_offset:1784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1784, x17, x15, 1784, x18)

inst_986:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x296f9b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x296f9b and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f296f9b; op2val:0x7f296f9b; valaddr_reg:x16; val_offset:1792; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1792, x17, x15, 1792, x18)

inst_987:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x296f9b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x296f9b and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f296f9b; op2val:0x7f296f9b; valaddr_reg:x16; val_offset:1800; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1800, x17, x15, 1800, x18)

inst_988:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x296f9b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x296f9b and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f296f9b; op2val:0x7f296f9b; valaddr_reg:x16; val_offset:1808; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1808, x17, x15, 1808, x18)

inst_989:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x296f9b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x296f9b and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f296f9b; op2val:0x7f296f9b; valaddr_reg:x16; val_offset:1816; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1816, x17, x15, 1816, x18)

inst_990:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x296f9b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x296f9b and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f296f9b; op2val:0x7f296f9b; valaddr_reg:x16; val_offset:1824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1824, x17, x15, 1824, x18)

inst_991:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x68fcac and fs2 == 0 and fe2 == 0xfc and fm2 == 0x68fcac and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e68fcac; op2val:0x7e68fcac; valaddr_reg:x16; val_offset:1832; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1832, x17, x15, 1832, x18)

inst_992:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x68fcac and fs2 == 0 and fe2 == 0xfc and fm2 == 0x68fcac and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e68fcac; op2val:0x7e68fcac; valaddr_reg:x16; val_offset:1840; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1840, x17, x15, 1840, x18)

inst_993:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x68fcac and fs2 == 0 and fe2 == 0xfc and fm2 == 0x68fcac and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e68fcac; op2val:0x7e68fcac; valaddr_reg:x16; val_offset:1848; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1848, x17, x15, 1848, x18)

inst_994:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x68fcac and fs2 == 0 and fe2 == 0xfc and fm2 == 0x68fcac and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e68fcac; op2val:0x7e68fcac; valaddr_reg:x16; val_offset:1856; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1856, x17, x15, 1856, x18)

inst_995:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x68fcac and fs2 == 0 and fe2 == 0xfc and fm2 == 0x68fcac and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e68fcac; op2val:0x7e68fcac; valaddr_reg:x16; val_offset:1864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1864, x17, x15, 1864, x18)

inst_996:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f5de9 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1f5de9 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1f5de9; op2val:0x7f1f5de9; valaddr_reg:x16; val_offset:1872; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1872, x17, x15, 1872, x18)

inst_997:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f5de9 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1f5de9 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1f5de9; op2val:0x7f1f5de9; valaddr_reg:x16; val_offset:1880; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1880, x17, x15, 1880, x18)

inst_998:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f5de9 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1f5de9 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1f5de9; op2val:0x7f1f5de9; valaddr_reg:x16; val_offset:1888; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1888, x17, x15, 1888, x18)

inst_999:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f5de9 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1f5de9 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1f5de9; op2val:0x7f1f5de9; valaddr_reg:x16; val_offset:1896; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1896, x17, x15, 1896, x18)

inst_1000:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f5de9 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1f5de9 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f1f5de9; op2val:0x7f1f5de9; valaddr_reg:x16; val_offset:1904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1904, x17, x15, 1904, x18)

inst_1001:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cbed and fs2 == 0 and fe2 == 0xfe and fm2 == 0x33cbed and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f33cbed; op2val:0x7f33cbed; valaddr_reg:x16; val_offset:1912; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1912, x17, x15, 1912, x18)

inst_1002:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cbed and fs2 == 0 and fe2 == 0xfe and fm2 == 0x33cbed and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f33cbed; op2val:0x7f33cbed; valaddr_reg:x16; val_offset:1920; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1920, x17, x15, 1920, x18)

inst_1003:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cbed and fs2 == 0 and fe2 == 0xfe and fm2 == 0x33cbed and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f33cbed; op2val:0x7f33cbed; valaddr_reg:x16; val_offset:1928; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1928, x17, x15, 1928, x18)

inst_1004:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cbed and fs2 == 0 and fe2 == 0xfe and fm2 == 0x33cbed and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f33cbed; op2val:0x7f33cbed; valaddr_reg:x16; val_offset:1936; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1936, x17, x15, 1936, x18)

inst_1005:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cbed and fs2 == 0 and fe2 == 0xfe and fm2 == 0x33cbed and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f33cbed; op2val:0x7f33cbed; valaddr_reg:x16; val_offset:1944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1944, x17, x15, 1944, x18)

inst_1006:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a8666 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0a8666 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0a8666; op2val:0x7f0a8666; valaddr_reg:x16; val_offset:1952; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1952, x17, x15, 1952, x18)

inst_1007:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a8666 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0a8666 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0a8666; op2val:0x7f0a8666; valaddr_reg:x16; val_offset:1960; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 1960, x17, x15, 1960, x18)

inst_1008:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a8666 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0a8666 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0a8666; op2val:0x7f0a8666; valaddr_reg:x16; val_offset:1968; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 1968, x17, x15, 1968, x18)

inst_1009:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a8666 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0a8666 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0a8666; op2val:0x7f0a8666; valaddr_reg:x16; val_offset:1976; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 1976, x17, x15, 1976, x18)

inst_1010:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a8666 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0a8666 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f0a8666; op2val:0x7f0a8666; valaddr_reg:x16; val_offset:1984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 1984, x17, x15, 1984, x18)

inst_1011:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39afdd and fs2 == 0 and fe2 == 0xfb and fm2 == 0x39afdd and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7db9afdd; op2val:0x7db9afdd; valaddr_reg:x16; val_offset:1992; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 1992, x17, x15, 1992, x18)

inst_1012:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39afdd and fs2 == 0 and fe2 == 0xfb and fm2 == 0x39afdd and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7db9afdd; op2val:0x7db9afdd; valaddr_reg:x16; val_offset:2000; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 2000, x17, x15, 2000, x18)

inst_1013:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39afdd and fs2 == 0 and fe2 == 0xfb and fm2 == 0x39afdd and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7db9afdd; op2val:0x7db9afdd; valaddr_reg:x16; val_offset:2008; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 2008, x17, x15, 2008, x18)

inst_1014:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39afdd and fs2 == 0 and fe2 == 0xfb and fm2 == 0x39afdd and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7db9afdd; op2val:0x7db9afdd; valaddr_reg:x16; val_offset:2016; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 2016, x17, x15, 2016, x18)

inst_1015:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39afdd and fs2 == 0 and fe2 == 0xfb and fm2 == 0x39afdd and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7db9afdd; op2val:0x7db9afdd; valaddr_reg:x16; val_offset:2024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 2024, x17, x15, 2024, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_5)

inst_1016:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e917d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3e917d and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3e917d; op2val:0x7f3e917d; valaddr_reg:x16; val_offset:0; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 0, x17, x15, 0, x18)

inst_1017:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e917d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3e917d and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3e917d; op2val:0x7f3e917d; valaddr_reg:x16; val_offset:8; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 8, x17, x15, 8, x18)

inst_1018:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e917d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3e917d and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3e917d; op2val:0x7f3e917d; valaddr_reg:x16; val_offset:16; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 16, x17, x15, 16, x18)

inst_1019:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e917d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3e917d and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3e917d; op2val:0x7f3e917d; valaddr_reg:x16; val_offset:24; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 24, x17, x15, 24, x18)

inst_1020:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e917d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3e917d and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f3e917d; op2val:0x7f3e917d; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 32, x17, x15, 32, x18)

inst_1021:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x76a41a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x76a41a and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ef6a41a; op2val:0x7ef6a41a; valaddr_reg:x16; val_offset:40; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 40, x17, x15, 40, x18)

inst_1022:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x76a41a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x76a41a and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ef6a41a; op2val:0x7ef6a41a; valaddr_reg:x16; val_offset:48; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 48, x17, x15, 48, x18)

inst_1023:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x76a41a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x76a41a and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ef6a41a; op2val:0x7ef6a41a; valaddr_reg:x16; val_offset:56; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 56, x17, x15, 56, x18)

inst_1024:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x76a41a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x76a41a and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ef6a41a; op2val:0x7ef6a41a; valaddr_reg:x16; val_offset:64; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 64, x17, x15, 64, x18)

inst_1025:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x76a41a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x76a41a and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ef6a41a; op2val:0x7ef6a41a; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 72, x17, x15, 72, x18)

inst_1026:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d0a1 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x20d0a1 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f20d0a1; op2val:0x7f20d0a1; valaddr_reg:x16; val_offset:80; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 80, x17, x15, 80, x18)

inst_1027:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d0a1 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x20d0a1 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f20d0a1; op2val:0x7f20d0a1; valaddr_reg:x16; val_offset:88; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 88, x17, x15, 88, x18)

inst_1028:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d0a1 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x20d0a1 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f20d0a1; op2val:0x7f20d0a1; valaddr_reg:x16; val_offset:96; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 96, x17, x15, 96, x18)

inst_1029:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d0a1 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x20d0a1 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f20d0a1; op2val:0x7f20d0a1; valaddr_reg:x16; val_offset:104; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 104, x17, x15, 104, x18)

inst_1030:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d0a1 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x20d0a1 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f20d0a1; op2val:0x7f20d0a1; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 112, x17, x15, 112, x18)

inst_1031:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5e8d61 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x5e8d61 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e5e8d61; op2val:0x7e5e8d61; valaddr_reg:x16; val_offset:120; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 120, x17, x15, 120, x18)

inst_1032:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5e8d61 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x5e8d61 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e5e8d61; op2val:0x7e5e8d61; valaddr_reg:x16; val_offset:128; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 128, x17, x15, 128, x18)

inst_1033:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5e8d61 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x5e8d61 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e5e8d61; op2val:0x7e5e8d61; valaddr_reg:x16; val_offset:136; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 136, x17, x15, 136, x18)

inst_1034:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5e8d61 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x5e8d61 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e5e8d61; op2val:0x7e5e8d61; valaddr_reg:x16; val_offset:144; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 144, x17, x15, 144, x18)

inst_1035:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5e8d61 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x5e8d61 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e5e8d61; op2val:0x7e5e8d61; valaddr_reg:x16; val_offset:152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 152, x17, x15, 152, x18)

inst_1036:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x280619 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x280619 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e280619; op2val:0x7e280619; valaddr_reg:x16; val_offset:160; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 160, x17, x15, 160, x18)

inst_1037:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x280619 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x280619 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e280619; op2val:0x7e280619; valaddr_reg:x16; val_offset:168; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 168, x17, x15, 168, x18)

inst_1038:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x280619 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x280619 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e280619; op2val:0x7e280619; valaddr_reg:x16; val_offset:176; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 176, x17, x15, 176, x18)

inst_1039:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x280619 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x280619 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e280619; op2val:0x7e280619; valaddr_reg:x16; val_offset:184; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 184, x17, x15, 184, x18)

inst_1040:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x280619 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x280619 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e280619; op2val:0x7e280619; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 192, x17, x15, 192, x18)

inst_1041:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x330244 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x330244 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e330244; op2val:0x7e330244; valaddr_reg:x16; val_offset:200; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 200, x17, x15, 200, x18)

inst_1042:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x330244 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x330244 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e330244; op2val:0x7e330244; valaddr_reg:x16; val_offset:208; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 208, x17, x15, 208, x18)

inst_1043:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x330244 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x330244 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e330244; op2val:0x7e330244; valaddr_reg:x16; val_offset:216; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 216, x17, x15, 216, x18)

inst_1044:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x330244 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x330244 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e330244; op2val:0x7e330244; valaddr_reg:x16; val_offset:224; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 224, x17, x15, 224, x18)

inst_1045:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x330244 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x330244 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e330244; op2val:0x7e330244; valaddr_reg:x16; val_offset:232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 232, x17, x15, 232, x18)

inst_1046:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x282619 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x282619 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ea82619; op2val:0x7ea82619; valaddr_reg:x16; val_offset:240; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 240, x17, x15, 240, x18)

inst_1047:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x282619 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x282619 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ea82619; op2val:0x7ea82619; valaddr_reg:x16; val_offset:248; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 248, x17, x15, 248, x18)

inst_1048:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x282619 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x282619 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ea82619; op2val:0x7ea82619; valaddr_reg:x16; val_offset:256; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 256, x17, x15, 256, x18)

inst_1049:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x282619 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x282619 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ea82619; op2val:0x7ea82619; valaddr_reg:x16; val_offset:264; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 264, x17, x15, 264, x18)

inst_1050:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x282619 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x282619 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ea82619; op2val:0x7ea82619; valaddr_reg:x16; val_offset:272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 272, x17, x15, 272, x18)

inst_1051:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x326d35 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x326d35 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7cb26d35; op2val:0x7cb26d35; valaddr_reg:x16; val_offset:280; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 280, x17, x15, 280, x18)

inst_1052:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x326d35 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x326d35 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7cb26d35; op2val:0x7cb26d35; valaddr_reg:x16; val_offset:288; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 288, x17, x15, 288, x18)

inst_1053:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x326d35 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x326d35 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7cb26d35; op2val:0x7cb26d35; valaddr_reg:x16; val_offset:296; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 296, x17, x15, 296, x18)

inst_1054:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x326d35 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x326d35 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7cb26d35; op2val:0x7cb26d35; valaddr_reg:x16; val_offset:304; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 304, x17, x15, 304, x18)

inst_1055:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x326d35 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x326d35 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7cb26d35; op2val:0x7cb26d35; valaddr_reg:x16; val_offset:312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 312, x17, x15, 312, x18)

inst_1056:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x26592c and fs2 == 0 and fe2 == 0xfc and fm2 == 0x26592c and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e26592c; op2val:0x7e26592c; valaddr_reg:x16; val_offset:320; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 320, x17, x15, 320, x18)

inst_1057:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x26592c and fs2 == 0 and fe2 == 0xfc and fm2 == 0x26592c and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e26592c; op2val:0x7e26592c; valaddr_reg:x16; val_offset:328; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 328, x17, x15, 328, x18)

inst_1058:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x26592c and fs2 == 0 and fe2 == 0xfc and fm2 == 0x26592c and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e26592c; op2val:0x7e26592c; valaddr_reg:x16; val_offset:336; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 336, x17, x15, 336, x18)

inst_1059:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x26592c and fs2 == 0 and fe2 == 0xfc and fm2 == 0x26592c and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e26592c; op2val:0x7e26592c; valaddr_reg:x16; val_offset:344; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 344, x17, x15, 344, x18)

inst_1060:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x26592c and fs2 == 0 and fe2 == 0xfc and fm2 == 0x26592c and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e26592c; op2val:0x7e26592c; valaddr_reg:x16; val_offset:352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 352, x17, x15, 352, x18)

inst_1061:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34510e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x34510e and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f34510e; op2val:0x7f34510e; valaddr_reg:x16; val_offset:360; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 360, x17, x15, 360, x18)

inst_1062:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34510e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x34510e and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f34510e; op2val:0x7f34510e; valaddr_reg:x16; val_offset:368; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 368, x17, x15, 368, x18)

inst_1063:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34510e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x34510e and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f34510e; op2val:0x7f34510e; valaddr_reg:x16; val_offset:376; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 376, x17, x15, 376, x18)

inst_1064:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34510e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x34510e and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f34510e; op2val:0x7f34510e; valaddr_reg:x16; val_offset:384; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 384, x17, x15, 384, x18)

inst_1065:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34510e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x34510e and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f34510e; op2val:0x7f34510e; valaddr_reg:x16; val_offset:392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 392, x17, x15, 392, x18)

inst_1066:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1c56e0 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x1c56e0 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7c9c56e0; op2val:0x7c9c56e0; valaddr_reg:x16; val_offset:400; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 400, x17, x15, 400, x18)

inst_1067:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1c56e0 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x1c56e0 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7c9c56e0; op2val:0x7c9c56e0; valaddr_reg:x16; val_offset:408; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 408, x17, x15, 408, x18)

inst_1068:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1c56e0 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x1c56e0 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7c9c56e0; op2val:0x7c9c56e0; valaddr_reg:x16; val_offset:416; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 416, x17, x15, 416, x18)

inst_1069:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1c56e0 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x1c56e0 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7c9c56e0; op2val:0x7c9c56e0; valaddr_reg:x16; val_offset:424; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 424, x17, x15, 424, x18)

inst_1070:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1c56e0 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x1c56e0 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7c9c56e0; op2val:0x7c9c56e0; valaddr_reg:x16; val_offset:432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 432, x17, x15, 432, x18)

inst_1071:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d12f5 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2d12f5 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2d12f5; op2val:0x7f2d12f5; valaddr_reg:x16; val_offset:440; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 440, x17, x15, 440, x18)

inst_1072:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d12f5 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2d12f5 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2d12f5; op2val:0x7f2d12f5; valaddr_reg:x16; val_offset:448; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 448, x17, x15, 448, x18)

inst_1073:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d12f5 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2d12f5 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2d12f5; op2val:0x7f2d12f5; valaddr_reg:x16; val_offset:456; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 456, x17, x15, 456, x18)

inst_1074:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d12f5 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2d12f5 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2d12f5; op2val:0x7f2d12f5; valaddr_reg:x16; val_offset:464; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 464, x17, x15, 464, x18)

inst_1075:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d12f5 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2d12f5 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f2d12f5; op2val:0x7f2d12f5; valaddr_reg:x16; val_offset:472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 472, x17, x15, 472, x18)

inst_1076:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2fb07b and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2fb07b and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e2fb07b; op2val:0x7e2fb07b; valaddr_reg:x16; val_offset:480; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 480, x17, x15, 480, x18)

inst_1077:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2fb07b and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2fb07b and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e2fb07b; op2val:0x7e2fb07b; valaddr_reg:x16; val_offset:488; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 488, x17, x15, 488, x18)

inst_1078:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2fb07b and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2fb07b and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e2fb07b; op2val:0x7e2fb07b; valaddr_reg:x16; val_offset:496; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 496, x17, x15, 496, x18)

inst_1079:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2fb07b and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2fb07b and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e2fb07b; op2val:0x7e2fb07b; valaddr_reg:x16; val_offset:504; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 504, x17, x15, 504, x18)

inst_1080:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2fb07b and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2fb07b and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7e2fb07b; op2val:0x7e2fb07b; valaddr_reg:x16; val_offset:512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 512, x17, x15, 512, x18)

inst_1081:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b0757 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2b0757 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eab0757; op2val:0x7eab0757; valaddr_reg:x16; val_offset:520; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 520, x17, x15, 520, x18)

inst_1082:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b0757 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2b0757 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eab0757; op2val:0x7eab0757; valaddr_reg:x16; val_offset:528; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 528, x17, x15, 528, x18)

inst_1083:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b0757 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2b0757 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eab0757; op2val:0x7eab0757; valaddr_reg:x16; val_offset:536; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 536, x17, x15, 536, x18)

inst_1084:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b0757 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2b0757 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eab0757; op2val:0x7eab0757; valaddr_reg:x16; val_offset:544; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 544, x17, x15, 544, x18)

inst_1085:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b0757 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2b0757 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eab0757; op2val:0x7eab0757; valaddr_reg:x16; val_offset:552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 552, x17, x15, 552, x18)

inst_1086:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x125b96 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x125b96 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f125b96; op2val:0x7f125b96; valaddr_reg:x16; val_offset:560; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 560, x17, x15, 560, x18)

inst_1087:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x125b96 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x125b96 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f125b96; op2val:0x7f125b96; valaddr_reg:x16; val_offset:568; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 568, x17, x15, 568, x18)

inst_1088:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x125b96 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x125b96 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f125b96; op2val:0x7f125b96; valaddr_reg:x16; val_offset:576; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 576, x17, x15, 576, x18)

inst_1089:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x125b96 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x125b96 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f125b96; op2val:0x7f125b96; valaddr_reg:x16; val_offset:584; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 584, x17, x15, 584, x18)

inst_1090:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x125b96 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x125b96 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f125b96; op2val:0x7f125b96; valaddr_reg:x16; val_offset:592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 592, x17, x15, 592, x18)

inst_1091:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207786 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x207786 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f207786; op2val:0x7f207786; valaddr_reg:x16; val_offset:600; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 600, x17, x15, 600, x18)

inst_1092:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207786 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x207786 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f207786; op2val:0x7f207786; valaddr_reg:x16; val_offset:608; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 608, x17, x15, 608, x18)

inst_1093:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207786 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x207786 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f207786; op2val:0x7f207786; valaddr_reg:x16; val_offset:616; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 616, x17, x15, 616, x18)

inst_1094:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207786 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x207786 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f207786; op2val:0x7f207786; valaddr_reg:x16; val_offset:624; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 624, x17, x15, 624, x18)

inst_1095:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207786 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x207786 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f207786; op2val:0x7f207786; valaddr_reg:x16; val_offset:632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 632, x17, x15, 632, x18)

inst_1096:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x102b16 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x102b16 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d902b16; op2val:0x7d902b16; valaddr_reg:x16; val_offset:640; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 640, x17, x15, 640, x18)

inst_1097:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x102b16 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x102b16 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d902b16; op2val:0x7d902b16; valaddr_reg:x16; val_offset:648; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 648, x17, x15, 648, x18)

inst_1098:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x102b16 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x102b16 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d902b16; op2val:0x7d902b16; valaddr_reg:x16; val_offset:656; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 656, x17, x15, 656, x18)

inst_1099:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x102b16 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x102b16 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d902b16; op2val:0x7d902b16; valaddr_reg:x16; val_offset:664; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 664, x17, x15, 664, x18)

inst_1100:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x102b16 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x102b16 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7d902b16; op2val:0x7d902b16; valaddr_reg:x16; val_offset:672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 672, x17, x15, 672, x18)

inst_1101:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a3631 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7a3631 and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7efa3631; op2val:0x7efa3631; valaddr_reg:x16; val_offset:680; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 680, x17, x15, 680, x18)

inst_1102:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a3631 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7a3631 and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7efa3631; op2val:0x7efa3631; valaddr_reg:x16; val_offset:688; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 688, x17, x15, 688, x18)

inst_1103:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a3631 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7a3631 and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7efa3631; op2val:0x7efa3631; valaddr_reg:x16; val_offset:696; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 696, x17, x15, 696, x18)

inst_1104:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a3631 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7a3631 and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7efa3631; op2val:0x7efa3631; valaddr_reg:x16; val_offset:704; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 704, x17, x15, 704, x18)

inst_1105:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a3631 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7a3631 and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7efa3631; op2val:0x7efa3631; valaddr_reg:x16; val_offset:712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 712, x17, x15, 712, x18)

inst_1106:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3e3f3f and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3e3f3f and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ebe3f3f; op2val:0x7ebe3f3f; valaddr_reg:x16; val_offset:720; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 720, x17, x15, 720, x18)

inst_1107:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3e3f3f and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3e3f3f and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ebe3f3f; op2val:0x7ebe3f3f; valaddr_reg:x16; val_offset:728; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 728, x17, x15, 728, x18)

inst_1108:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3e3f3f and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3e3f3f and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ebe3f3f; op2val:0x7ebe3f3f; valaddr_reg:x16; val_offset:736; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 736, x17, x15, 736, x18)

inst_1109:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3e3f3f and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3e3f3f and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ebe3f3f; op2val:0x7ebe3f3f; valaddr_reg:x16; val_offset:744; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 744, x17, x15, 744, x18)

inst_1110:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3e3f3f and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3e3f3f and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7ebe3f3f; op2val:0x7ebe3f3f; valaddr_reg:x16; val_offset:752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 752, x17, x15, 752, x18)

inst_1111:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a50c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x12a50c and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f12a50c; op2val:0x7f12a50c; valaddr_reg:x16; val_offset:760; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 760, x17, x15, 760, x18)

inst_1112:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a50c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x12a50c and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f12a50c; op2val:0x7f12a50c; valaddr_reg:x16; val_offset:768; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 768, x17, x15, 768, x18)

inst_1113:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a50c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x12a50c and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f12a50c; op2val:0x7f12a50c; valaddr_reg:x16; val_offset:776; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 776, x17, x15, 776, x18)

inst_1114:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a50c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x12a50c and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f12a50c; op2val:0x7f12a50c; valaddr_reg:x16; val_offset:784; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 784, x17, x15, 784, x18)

inst_1115:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a50c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x12a50c and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7f12a50c; op2val:0x7f12a50c; valaddr_reg:x16; val_offset:792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 792, x17, x15, 792, x18)

inst_1116:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4e622b and rm_val == 4  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dce622b; op2val:0x7dce622b; valaddr_reg:x16; val_offset:800; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x4, 0, x16, 800, x17, x15, 800, x18)

inst_1117:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4e622b and rm_val == 3  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dce622b; op2val:0x7dce622b; valaddr_reg:x16; val_offset:808; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x3, 0, x16, 808, x17, x15, 808, x18)

inst_1118:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4e622b and rm_val == 2  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dce622b; op2val:0x7dce622b; valaddr_reg:x16; val_offset:816; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x2, 0, x16, 816, x17, x15, 816, x18)

inst_1119:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4e622b and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dce622b; op2val:0x7dce622b; valaddr_reg:x16; val_offset:824; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 824, x17, x15, 824, x18)

inst_1120:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4e622b and rm_val == 0  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7dce622b; op2val:0x7dce622b; valaddr_reg:x16; val_offset:832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x0, 0, x16, 832, x17, x15, 832, x18)

inst_1121:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae70d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2ae70d and rm_val == 1  
// opcode: fsub.s ; op1:f10; op2:f11; dest:f12; op1val:0x7eaae70d; op2val:0x7eaae70d; valaddr_reg:x16; val_offset:840; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.s, f12, f10, f11, 0x1, 0, x16, 840, x17, x15, 840, x18)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
test_fp:
.word 0x7dce622b
.word 0x7dce622b
.word 0x7eaae70d
.word 0x7eaae70d
.word 0x7eaae70d
.word 0x7eaae70d
.word 0x7eaae70d
.word 0x7eaae70d
.word 0x7eaae70d
.word 0x7eaae70d
.word 0x7eaae70d
.word 0x7eaae70d
.word 0x7efd54da
.word 0x7efd54da
.word 0x7efd54da
.word 0x7efd54da
.word 0x7efd54da
.word 0x7efd54da
.word 0x7efd54da
.word 0x7efd54da
.word 0x7efd54da
.word 0x7efd54da
.word 0x7f14f204
.word 0x7f14f204
.word 0x7f14f204
.word 0x7f14f204
.word 0x7f14f204
.word 0x7f14f204
.word 0x7f14f204
.word 0x7f14f204
.word 0x7f14f204
.word 0x7f14f204
.word 0x7f383655
.word 0x7f383655
.word 0x7f383655
.word 0x7f383655
.word 0x7f383655
.word 0x7f383655
.word 0x7f383655
.word 0x7f383655
.word 0x7f383655
.word 0x7f383655
.word 0x7e4d75cc
.word 0x7e4d75cc
.word 0x7e4d75cc
.word 0x7e4d75cc
.word 0x7e4d75cc
.word 0x7e4d75cc
.word 0x7e4d75cc
.word 0x7e4d75cc
.word 0x7e4d75cc
.word 0x7e4d75cc
.word 0x7f1b200c
.word 0x7f1b200c
.word 0x7f1b200c
.word 0x7f1b200c
.word 0x7f1b200c
.word 0x7f1b200c
.word 0x7f1b200c
.word 0x7f1b200c
.word 0x7f1b200c
.word 0x7f1b200c
.word 0x7cfa1d39
.word 0x7cfa1d39
.word 0x7cfa1d39
.word 0x7cfa1d39
.word 0x7cfa1d39
.word 0x7cfa1d39
.word 0x7cfa1d39
.word 0x7cfa1d39
.word 0x7cfa1d39
.word 0x7cfa1d39
.word 0x7dfd2144
.word 0x7dfd2144
.word 0x7dfd2144
.word 0x7dfd2144
.word 0x7dfd2144
.word 0x7dfd2144
.word 0x7dfd2144
.word 0x7dfd2144
.word 0x7dfd2144
.word 0x7dfd2144
.word 0x7e859ff9
.word 0x7e859ff9
.word 0x7e859ff9
.word 0x7e859ff9
.word 0x7e859ff9
.word 0x7e859ff9
.word 0x7e859ff9
.word 0x7e859ff9
.word 0x7e859ff9
.word 0x7e859ff9
.word 0x7f02dfcb
.word 0x7f02dfcb
.word 0x7f02dfcb
.word 0x7f02dfcb
.word 0x7f02dfcb
.word 0x7f02dfcb
.word 0x7f02dfcb
.word 0x7f02dfcb
.word 0x7f02dfcb
.word 0x7f02dfcb
.word 0x7f117cee
.word 0x7f117cee
.word 0x7f117cee
.word 0x7f117cee
.word 0x7f117cee
.word 0x7f117cee
.word 0x7f117cee
.word 0x7f117cee
.word 0x7f117cee
.word 0x7f117cee
.word 0x7e272192
.word 0x7e272192
.word 0x7e272192
.word 0x7e272192
.word 0x7e272192
.word 0x7e272192
.word 0x7e272192
.word 0x7e272192
.word 0x7e272192
.word 0x7e272192
.word 0x7e07613f
.word 0x7e07613f
.word 0x7e07613f
.word 0x7e07613f
.word 0x7e07613f
.word 0x7e07613f
.word 0x7e07613f
.word 0x7e07613f
.word 0x7e07613f
.word 0x7e07613f
.word 0x7f3855ca
.word 0x7f3855ca
.word 0x7f3855ca
.word 0x7f3855ca
.word 0x7f3855ca
.word 0x7f3855ca
.word 0x7f3855ca
.word 0x7f3855ca
.word 0x7f3855ca
.word 0x7f3855ca
.word 0x7f2467bb
.word 0x7f2467bb
.word 0x7f2467bb
.word 0x7f2467bb
.word 0x7f2467bb
.word 0x7f2467bb
.word 0x7f2467bb
.word 0x7f2467bb
.word 0x7f2467bb
.word 0x7f2467bb
.word 0x7f0d646b
.word 0x7f0d646b
.word 0x7f0d646b
.word 0x7f0d646b
.word 0x7f0d646b
.word 0x7f0d646b
.word 0x7f0d646b
.word 0x7f0d646b
.word 0x7f0d646b
.word 0x7f0d646b
.word 0x7e8eb32c
.word 0x7e8eb32c
.word 0x7e8eb32c
.word 0x7e8eb32c
.word 0x7e8eb32c
.word 0x7e8eb32c
.word 0x7e8eb32c
.word 0x7e8eb32c
.word 0x7e8eb32c
.word 0x7e8eb32c
.word 0x7f04f88e
.word 0x7f04f88e
.word 0x7f04f88e
.word 0x7f04f88e
.word 0x7f04f88e
.word 0x7f04f88e
.word 0x7f04f88e
.word 0x7f04f88e
.word 0x7f04f88e
.word 0x7f04f88e
.word 0x7f2989af
.word 0x7f2989af
.word 0x7f2989af
.word 0x7f2989af
.word 0x7f2989af
.word 0x7f2989af
.word 0x7f2989af
.word 0x7f2989af
.word 0x7f2989af
.word 0x7f2989af
.word 0x7df4f142
.word 0x7df4f142
.word 0x7df4f142
.word 0x7df4f142
.word 0x7df4f142
.word 0x7df4f142
.word 0x7df4f142
.word 0x7df4f142
.word 0x7df4f142
.word 0x7df4f142
.word 0x7ec47d56
.word 0x7ec47d56
.word 0x7ec47d56
.word 0x7ec47d56
.word 0x7ec47d56
.word 0x7ec47d56
.word 0x7ec47d56
.word 0x7ec47d56
.word 0x7ec47d56
.word 0x7ec47d56
.word 0x7d140fee
.word 0x7d140fee
.word 0x7d140fee
.word 0x7d140fee
.word 0x7d140fee
.word 0x7d140fee
.word 0x7d140fee
.word 0x7d140fee
.word 0x7d140fee
.word 0x7d140fee
.word 0x7e535f81
.word 0x7e535f81
.word 0x7e535f81
.word 0x7e535f81
.word 0x7e535f81
.word 0x7e535f81
.word 0x7e535f81
.word 0x7e535f81
.word 0x7e535f81
.word 0x7e535f81
.word 0x7f2e21e3
.word 0x7f2e21e3
.word 0x7f2e21e3
.word 0x7f2e21e3
.word 0x7f2e21e3
.word 0x7f2e21e3
.word 0x7f2e21e3
.word 0x7f2e21e3
.word 0x7f2e21e3
.word 0x7f2e21e3
.word 0x7e9e4d71
.word 0x7e9e4d71
.word 0x7e9e4d71
.word 0x7e9e4d71
.word 0x7e9e4d71
.word 0x7e9e4d71
.word 0x7e9e4d71
.word 0x7e9e4d71
.word 0x7e9e4d71
.word 0x7e9e4d71
.word 0x7eb7de98
.word 0x7eb7de98
.word 0x7eb7de98
.word 0x7eb7de98
.word 0x7eb7de98
.word 0x7eb7de98
.word 0x7eb7de98
.word 0x7eb7de98
.word 0x7eb7de98
.word 0x7eb7de98
.word 0x7e37125d
.word 0x7e37125d
.word 0x7e37125d
.word 0x7e37125d
.word 0x7e37125d
.word 0x7e37125d
.word 0x7e37125d
.word 0x7e37125d
.word 0x7e37125d
.word 0x7e37125d
.word 0x7f03cf7d
.word 0x7f03cf7d
.word 0x7f03cf7d
.word 0x7f03cf7d
.word 0x7f03cf7d
.word 0x7f03cf7d
.word 0x7f03cf7d
.word 0x7f03cf7d
.word 0x7f03cf7d
.word 0x7f03cf7d
.word 0x7ef92786
.word 0x7ef92786
.word 0x7ef92786
.word 0x7ef92786
.word 0x7ef92786
.word 0x7ef92786
.word 0x7ef92786
.word 0x7ef92786
.word 0x7ef92786
.word 0x7ef92786
.word 0x7ecb057e
.word 0x7ecb057e
.word 0x7ecb057e
.word 0x7ecb057e
.word 0x7ecb057e
.word 0x7ecb057e
.word 0x7ecb057e
.word 0x7ecb057e
.word 0x7ecb057e
.word 0x7ecb057e
.word 0x7e3359cb
.word 0x7e3359cb
.word 0x7e3359cb
.word 0x7e3359cb
.word 0x7e3359cb
.word 0x7e3359cb
.word 0x7e3359cb
.word 0x7e3359cb
.word 0x7e3359cb
.word 0x7e3359cb
.word 0x7e9a03fa
.word 0x7e9a03fa
.word 0x7e9a03fa
.word 0x7e9a03fa
.word 0x7e9a03fa
.word 0x7e9a03fa
.word 0x7e9a03fa
.word 0x7e9a03fa
.word 0x7e9a03fa
.word 0x7e9a03fa
.word 0x7f1f27c7
.word 0x7f1f27c7
.word 0x7f1f27c7
.word 0x7f1f27c7
.word 0x7f1f27c7
.word 0x7f1f27c7
.word 0x7f1f27c7
.word 0x7f1f27c7
.word 0x7f1f27c7
.word 0x7f1f27c7
.word 0x7dc032ba
.word 0x7dc032ba
.word 0x7dc032ba
.word 0x7dc032ba
.word 0x7dc032ba
.word 0x7dc032ba
.word 0x7dc032ba
.word 0x7dc032ba
.word 0x7dc032ba
.word 0x7dc032ba
.word 0x7e884c5b
.word 0x7e884c5b
.word 0x7e884c5b
.word 0x7e884c5b
.word 0x7e884c5b
.word 0x7e884c5b
.word 0x7e884c5b
.word 0x7e884c5b
.word 0x7e884c5b
.word 0x7e884c5b
.word 0x7edb1c9d
.word 0x7edb1c9d
.word 0x7edb1c9d
.word 0x7edb1c9d
.word 0x7edb1c9d
.word 0x7edb1c9d
.word 0x7edb1c9d
.word 0x7edb1c9d
.word 0x7edb1c9d
.word 0x7edb1c9d
.word 0x7ef83b85
.word 0x7ef83b85
.word 0x7ef83b85
.word 0x7ef83b85
.word 0x7ef83b85
.word 0x7ef83b85
.word 0x7ef83b85
.word 0x7ef83b85
.word 0x7ef83b85
.word 0x7ef83b85
.word 0x7e461ec9
.word 0x7e461ec9
.word 0x7e461ec9
.word 0x7e461ec9
.word 0x7e461ec9
.word 0x7e461ec9
.word 0x7e461ec9
.word 0x7e461ec9
.word 0x7e461ec9
.word 0x7e461ec9
.word 0x7e97f3eb
.word 0x7e97f3eb
.word 0x7e97f3eb
.word 0x7e97f3eb
.word 0x7e97f3eb
.word 0x7e97f3eb
.word 0x7e97f3eb
.word 0x7e97f3eb
.word 0x7e97f3eb
.word 0x7e97f3eb
.word 0x7f2372bc
.word 0x7f2372bc
.word 0x7f2372bc
.word 0x7f2372bc
.word 0x7f2372bc
.word 0x7f2372bc
.word 0x7f2372bc
.word 0x7f2372bc
.word 0x7f2372bc
.word 0x7f2372bc
.word 0x7ed2eb6d
.word 0x7ed2eb6d
.word 0x7ed2eb6d
.word 0x7ed2eb6d
.word 0x7ed2eb6d
.word 0x7ed2eb6d
.word 0x7ed2eb6d
.word 0x7ed2eb6d
.word 0x7ed2eb6d
.word 0x7ed2eb6d
.word 0x7f38f857
.word 0x7f38f857
.word 0x7f38f857
.word 0x7f38f857
.word 0x7f38f857
.word 0x7f38f857
.word 0x7f38f857
.word 0x7f38f857
.word 0x7f38f857
.word 0x7f38f857
.word 0x7e41fc81
.word 0x7e41fc81
.word 0x7e41fc81
.word 0x7e41fc81
.word 0x7e41fc81
.word 0x7e41fc81
.word 0x7e41fc81
.word 0x7e41fc81
.word 0x7e41fc81
.word 0x7e41fc81
.word 0x7f093f0c
.word 0x7f093f0c
.word 0x7f093f0c
.word 0x7f093f0c
.word 0x7f093f0c
.word 0x7f093f0c
.word 0x7f093f0c
.word 0x7f093f0c
.word 0x7f093f0c
.word 0x7f093f0c
.word 0x7ea6220b
.word 0x7ea6220b
.word 0x7ea6220b
.word 0x7ea6220b
.word 0x7ea6220b
.word 0x7ea6220b
.word 0x7ea6220b
.word 0x7ea6220b
.word 0x7ea6220b
.word 0x7ea6220b
.word 0x7f0466fb
.word 0x7f0466fb
.word 0x7f0466fb
.word 0x7f0466fb
.word 0x7f0466fb
.word 0x7f0466fb
.word 0x7f0466fb
.word 0x7f0466fb
.word 0x7f0466fb
.word 0x7f0466fb
.word 0x7f216afe
.word 0x7f216afe
.word 0x7f216afe
.word 0x7f216afe
.word 0x7f216afe
.word 0x7f216afe
.word 0x7f216afe
.word 0x7f216afe
.word 0x7f216afe
.word 0x7f216afe
.word 0x7f1a5724
.word 0x7f1a5724
.word 0x7f1a5724
.word 0x7f1a5724
.word 0x7f1a5724
.word 0x7f1a5724
.word 0x7f1a5724
.word 0x7f1a5724
.word 0x7f1a5724
.word 0x7f1a5724
.word 0x7e72bda0
.word 0x7e72bda0
.word 0x7e72bda0
.word 0x7e72bda0
.word 0x7e72bda0
.word 0x7e72bda0
.word 0x7e72bda0
.word 0x7e72bda0
.word 0x7e72bda0
.word 0x7e72bda0
.word 0x7f2ecffe
.word 0x7f2ecffe
.word 0x7f2ecffe
.word 0x7f2ecffe
.word 0x7f2ecffe
.word 0x7f2ecffe
.word 0x7f2ecffe
.word 0x7f2ecffe
.word 0x7f2ecffe
.word 0x7f2ecffe
.word 0x7f2b9a07
.word 0x7f2b9a07
.word 0x7f2b9a07
.word 0x7f2b9a07
.word 0x7f2b9a07
.word 0x7f2b9a07
.word 0x7f2b9a07
.word 0x7f2b9a07
.word 0x7f2b9a07
.word 0x7f2b9a07
.word 0x7f30843b
.word 0x7f30843b
.word 0x7f30843b
.word 0x7f30843b
.word 0x7f30843b
.word 0x7f30843b
.word 0x7f30843b
.word 0x7f30843b
.word 0x7f30843b
.word 0x7f30843b
.word 0x7da42a08
.word 0x7da42a08
.word 0x7da42a08
.word 0x7da42a08
.word 0x7da42a08
.word 0x7da42a08
.word 0x7da42a08
.word 0x7da42a08
.word 0x7da42a08
.word 0x7da42a08
.word 0x7f1dbcd4
.word 0x7f1dbcd4
.word 0x7f1dbcd4
.word 0x7f1dbcd4
.word 0x7f1dbcd4
.word 0x7f1dbcd4
.word 0x7f1dbcd4
.word 0x7f1dbcd4
.word 0x7f1dbcd4
.word 0x7f1dbcd4
.word 0x7f150838
.word 0x7f150838
.word 0x7f150838
.word 0x7f150838
.word 0x7f150838
.word 0x7f150838
.word 0x7f150838
.word 0x7f150838
.word 0x7f150838
.word 0x7f150838
.word 0x7f364073
.word 0x7f364073
.word 0x7f364073
.word 0x7f364073
.word 0x7f364073
.word 0x7f364073
.word 0x7f364073
.word 0x7f364073
.word 0x7f364073
.word 0x7f364073
.word 0x7f18a306
.word 0x7f18a306
.word 0x7f18a306
.word 0x7f18a306
.word 0x7f18a306
.word 0x7f18a306
.word 0x7f18a306
.word 0x7f18a306
.word 0x7f18a306
.word 0x7f18a306
.word 0x7decd1e1
.word 0x7decd1e1
.word 0x7decd1e1
.word 0x7decd1e1
.word 0x7decd1e1
.word 0x7decd1e1
.word 0x7decd1e1
.word 0x7decd1e1
.word 0x7decd1e1
.word 0x7decd1e1
.word 0x7ebd6988
.word 0x7ebd6988
.word 0x7ebd6988
.word 0x7ebd6988
.word 0x7ebd6988
.word 0x7ebd6988
.word 0x7ebd6988
.word 0x7ebd6988
.word 0x7ebd6988
.word 0x7ebd6988
.word 0x7e5f59d7
.word 0x7e5f59d7
.word 0x7e5f59d7
.word 0x7e5f59d7
.word 0x7e5f59d7
.word 0x7e5f59d7
.word 0x7e5f59d7
.word 0x7e5f59d7
.word 0x7e5f59d7
.word 0x7e5f59d7
.word 0x7d66cc78
.word 0x7d66cc78
.word 0x7d66cc78
.word 0x7d66cc78
.word 0x7d66cc78
.word 0x7d66cc78
.word 0x7d66cc78
.word 0x7d66cc78
.word 0x7d66cc78
.word 0x7d66cc78
.word 0x7ed3a9a1
.word 0x7ed3a9a1
.word 0x7ed3a9a1
.word 0x7ed3a9a1
.word 0x7ed3a9a1
.word 0x7ed3a9a1
.word 0x7ed3a9a1
.word 0x7ed3a9a1
.word 0x7ed3a9a1
.word 0x7ed3a9a1
.word 0x7e3b3506
.word 0x7e3b3506
.word 0x7e3b3506
.word 0x7e3b3506
.word 0x7e3b3506
.word 0x7e3b3506
.word 0x7e3b3506
.word 0x7e3b3506
.word 0x7e3b3506
.word 0x7e3b3506
.word 0x7e3c3c39
.word 0x7e3c3c39
.word 0x7e3c3c39
.word 0x7e3c3c39
.word 0x7e3c3c39
.word 0x7e3c3c39
.word 0x7e3c3c39
.word 0x7e3c3c39
.word 0x7e3c3c39
.word 0x7e3c3c39
.word 0x7ede5495
.word 0x7ede5495
.word 0x7ede5495
.word 0x7ede5495
.word 0x7ede5495
.word 0x7ede5495
.word 0x7ede5495
.word 0x7ede5495
.word 0x7ede5495
.word 0x7ede5495
.word 0x7e80624f
.word 0x7e80624f
.word 0x7e80624f
.word 0x7e80624f
.word 0x7e80624f
.word 0x7e80624f
.word 0x7e80624f
.word 0x7e80624f
.word 0x7e80624f
.word 0x7e80624f
.word 0x7f2b8d52
.word 0x7f2b8d52
.word 0x7f2b8d52
.word 0x7f2b8d52
.word 0x7f2b8d52
.word 0x7f2b8d52
.word 0x7f2b8d52
.word 0x7f2b8d52
.word 0x7f2b8d52
.word 0x7f2b8d52
.word 0x7e7340a9
.word 0x7e7340a9
.word 0x7e7340a9
.word 0x7e7340a9
.word 0x7e7340a9
.word 0x7e7340a9
.word 0x7e7340a9
.word 0x7e7340a9
.word 0x7e7340a9
.word 0x7e7340a9
.word 0x7e6b9c3e
.word 0x7e6b9c3e
.word 0x7e6b9c3e
.word 0x7e6b9c3e
.word 0x7e6b9c3e
.word 0x7e6b9c3e
.word 0x7e6b9c3e
.word 0x7e6b9c3e
.word 0x7e6b9c3e
.word 0x7e6b9c3e
.word 0x7f349efb
.word 0x7f349efb
.word 0x7f349efb
.word 0x7f349efb
.word 0x7f349efb
.word 0x7f349efb
.word 0x7f349efb
.word 0x7f349efb
.word 0x7f349efb
.word 0x7f349efb
.word 0x7efa5f3d
.word 0x7efa5f3d
.word 0x7efa5f3d
.word 0x7efa5f3d
.word 0x7efa5f3d
.word 0x7efa5f3d
.word 0x7efa5f3d
.word 0x7efa5f3d
.word 0x7efa5f3d
.word 0x7efa5f3d
.word 0x7f3cceee
.word 0x7f3cceee
.word 0x7f3cceee
.word 0x7f3cceee
.word 0x7f3cceee
.word 0x7f3cceee
.word 0x7f3cceee
.word 0x7f3cceee
.word 0x7f3cceee
.word 0x7f3cceee
.word 0x7d79f6ff
.word 0x7d79f6ff
.word 0x7d79f6ff
.word 0x7d79f6ff
.word 0x7d79f6ff
.word 0x7d79f6ff
.word 0x7d79f6ff
.word 0x7d79f6ff
.word 0x7d79f6ff
.word 0x7d79f6ff
.word 0x7e6c05c9
.word 0x7e6c05c9
.word 0x7e6c05c9
.word 0x7e6c05c9
.word 0x7e6c05c9
.word 0x7e6c05c9
.word 0x7e6c05c9
.word 0x7e6c05c9
.word 0x7e6c05c9
.word 0x7e6c05c9
.word 0x7e46fa60
.word 0x7e46fa60
.word 0x7e46fa60
.word 0x7e46fa60
.word 0x7e46fa60
.word 0x7e46fa60
.word 0x7e46fa60
.word 0x7e46fa60
.word 0x7e46fa60
.word 0x7e46fa60
.word 0x7f0421e7
.word 0x7f0421e7
.word 0x7f0421e7
.word 0x7f0421e7
.word 0x7f0421e7
.word 0x7f0421e7
.word 0x7f0421e7
.word 0x7f0421e7
.word 0x7f0421e7
.word 0x7f0421e7
.word 0x7f3c26a4
.word 0x7f3c26a4
.word 0x7f3c26a4
.word 0x7f3c26a4
.word 0x7f3c26a4
.word 0x7f3c26a4
.word 0x7f3c26a4
.word 0x7f3c26a4
.word 0x7f3c26a4
.word 0x7f3c26a4
.word 0x7e2544b7
.word 0x7e2544b7
.word 0x7e2544b7
.word 0x7e2544b7
.word 0x7e2544b7
.word 0x7e2544b7
.word 0x7e2544b7
.word 0x7e2544b7
.word 0x7e2544b7
.word 0x7e2544b7
.word 0x7f3a336f
.word 0x7f3a336f
.word 0x7f3a336f
.word 0x7f3a336f
.word 0x7f3a336f
.word 0x7f3a336f
.word 0x7f3a336f
.word 0x7f3a336f
.word 0x7f3a336f
.word 0x7f3a336f
.word 0x7f2f5f0a
.word 0x7f2f5f0a
.word 0x7f2f5f0a
.word 0x7f2f5f0a
.word 0x7f2f5f0a
.word 0x7f2f5f0a
.word 0x7f2f5f0a
.word 0x7f2f5f0a
.word 0x7f2f5f0a
.word 0x7f2f5f0a
.word 0x7e709985
.word 0x7e709985
.word 0x7e709985
.word 0x7e709985
.word 0x7e709985
.word 0x7e709985
.word 0x7e709985
.word 0x7e709985
.word 0x7e709985
.word 0x7e709985
.word 0x7ee51547
.word 0x7ee51547
.word 0x7ee51547
.word 0x7ee51547
.word 0x7ee51547
.word 0x7ee51547
.word 0x7ee51547
.word 0x7ee51547
.word 0x7ee51547
.word 0x7ee51547
.word 0x7f3ca7f2
.word 0x7f3ca7f2
.word 0x7f3ca7f2
.word 0x7f3ca7f2
.word 0x7f3ca7f2
.word 0x7f3ca7f2
.word 0x7f3ca7f2
.word 0x7f3ca7f2
.word 0x7f3ca7f2
.word 0x7f3ca7f2
.word 0x7cf36d34
.word 0x7cf36d34
.word 0x7cf36d34
.word 0x7cf36d34
.word 0x7cf36d34
.word 0x7cf36d34
.word 0x7cf36d34
.word 0x7cf36d34
.word 0x7cf36d34
.word 0x7cf36d34
.word 0x7d99cc61
.word 0x7d99cc61
.word 0x7d99cc61
.word 0x7d99cc61
.word 0x7d99cc61
.word 0x7d99cc61
.word 0x7d99cc61
.word 0x7d99cc61
.word 0x7d99cc61
.word 0x7d99cc61
.word 0x7e429e75
.word 0x7e429e75
.word 0x7e429e75
.word 0x7e429e75
.word 0x7e429e75
.word 0x7e429e75
.word 0x7e429e75
.word 0x7e429e75
.word 0x7e429e75
.word 0x7e429e75
.word 0x7f2e921d
.word 0x7f2e921d
.word 0x7f2e921d
.word 0x7f2e921d
.word 0x7f2e921d
.word 0x7f2e921d
.word 0x7f2e921d
.word 0x7f2e921d
.word 0x7f2e921d
.word 0x7f2e921d
.word 0x7e91422a
.word 0x7e91422a
.word 0x7e91422a
.word 0x7e91422a
.word 0x7e91422a
.word 0x7e91422a
.word 0x7e91422a
.word 0x7e91422a
.word 0x7e91422a
.word 0x7e91422a
.word 0x7d9df407
.word 0x7d9df407
.word 0x7d9df407
.word 0x7d9df407
.word 0x7d9df407
.word 0x7d9df407
.word 0x7d9df407
.word 0x7d9df407
.word 0x7d9df407
.word 0x7d9df407
.word 0x7e396928
.word 0x7e396928
.word 0x7e396928
.word 0x7e396928
.word 0x7e396928
.word 0x7e396928
.word 0x7e396928
.word 0x7e396928
.word 0x7e396928
.word 0x7e396928
.word 0x7db17f52
.word 0x7db17f52
.word 0x7db17f52
.word 0x7db17f52
.word 0x7db17f52
.word 0x7db17f52
.word 0x7db17f52
.word 0x7db17f52
.word 0x7db17f52
.word 0x7db17f52
.word 0x7f3db9f6
.word 0x7f3db9f6
.word 0x7f3db9f6
.word 0x7f3db9f6
.word 0x7f3db9f6
.word 0x7f3db9f6
.word 0x7f3db9f6
.word 0x7f3db9f6
.word 0x7f3db9f6
.word 0x7f3db9f6
.word 0x7cf5e793
.word 0x7cf5e793
.word 0x7cf5e793
.word 0x7cf5e793
.word 0x7cf5e793
.word 0x7cf5e793
.word 0x7cf5e793
.word 0x7cf5e793
.word 0x7cf5e793
.word 0x7cf5e793
.word 0x7db0cc24
.word 0x7db0cc24
.word 0x7db0cc24
.word 0x7db0cc24
.word 0x7db0cc24
.word 0x7db0cc24
.word 0x7db0cc24
.word 0x7db0cc24
.word 0x7db0cc24
.word 0x7db0cc24
.word 0x7f00b812
.word 0x7f00b812
.word 0x7f00b812
.word 0x7f00b812
.word 0x7f00b812
.word 0x7f00b812
.word 0x7f00b812
.word 0x7f00b812
.word 0x7f00b812
.word 0x7f00b812
.word 0x7f1eee75
.word 0x7f1eee75
.word 0x7f1eee75
.word 0x7f1eee75
.word 0x7f1eee75
.word 0x7f1eee75
.word 0x7f1eee75
.word 0x7f1eee75
.word 0x7f1eee75
.word 0x7f1eee75
.word 0x7e54e058
.word 0x7e54e058
.word 0x7e54e058
.word 0x7e54e058
.word 0x7e54e058
.word 0x7e54e058
.word 0x7e54e058
.word 0x7e54e058
.word 0x7e54e058
.word 0x7e54e058
.word 0x7f319ce6
.word 0x7f319ce6
.word 0x7f319ce6
.word 0x7f319ce6
.word 0x7f319ce6
.word 0x7f319ce6
.word 0x7f319ce6
.word 0x7f319ce6
.word 0x7f319ce6
.word 0x7f319ce6
.word 0x7f2b0708
.word 0x7f2b0708
.word 0x7f2b0708
.word 0x7f2b0708
.word 0x7f2b0708
.word 0x7f2b0708
.word 0x7f2b0708
.word 0x7f2b0708
.word 0x7f2b0708
.word 0x7f2b0708
.word 0x7d7b1d83
.word 0x7d7b1d83
.word 0x7d7b1d83
.word 0x7d7b1d83
.word 0x7d7b1d83
.word 0x7d7b1d83
.word 0x7d7b1d83
.word 0x7d7b1d83
.word 0x7d7b1d83
.word 0x7d7b1d83
.word 0x7edb2e1a
.word 0x7edb2e1a
.word 0x7edb2e1a
.word 0x7edb2e1a
.word 0x7edb2e1a
.word 0x7edb2e1a
.word 0x7edb2e1a
.word 0x7edb2e1a
.word 0x7edb2e1a
.word 0x7edb2e1a
.word 0x7f16201f
.word 0x7f16201f
.word 0x7f16201f
.word 0x7f16201f
.word 0x7f16201f
.word 0x7f16201f
.word 0x7f16201f
.word 0x7f16201f
.word 0x7f16201f
.word 0x7f16201f
.word 0x7e82e795
.word 0x7e82e795
.word 0x7e82e795
.word 0x7e82e795
.word 0x7e82e795
.word 0x7e82e795
.word 0x7e82e795
.word 0x7e82e795
.word 0x7e82e795
.word 0x7e82e795
.word 0x7f17517f
.word 0x7f17517f
.word 0x7f17517f
.word 0x7f17517f
.word 0x7f17517f
.word 0x7f17517f
.word 0x7f17517f
.word 0x7f17517f
.word 0x7f17517f
.word 0x7f17517f
.word 0x7d60d9a4
.word 0x7d60d9a4
.word 0x7d60d9a4
.word 0x7d60d9a4
.word 0x7d60d9a4
.word 0x7d60d9a4
.word 0x7d60d9a4
.word 0x7d60d9a4
.word 0x7d60d9a4
.word 0x7d60d9a4
.word 0x7da02a98
.word 0x7da02a98
.word 0x7da02a98
.word 0x7da02a98
.word 0x7da02a98
.word 0x7da02a98
.word 0x7da02a98
.word 0x7da02a98
.word 0x7da02a98
.word 0x7da02a98
.word 0x7dcfe433
.word 0x7dcfe433
.word 0x7dcfe433
.word 0x7dcfe433
.word 0x7dcfe433
.word 0x7dcfe433
.word 0x7dcfe433
.word 0x7dcfe433
.word 0x7dcfe433
.word 0x7dcfe433
.word 0x7f373a1e
.word 0x7f373a1e
.word 0x7f373a1e
.word 0x7f373a1e
.word 0x7f373a1e
.word 0x7f373a1e
.word 0x7f373a1e
.word 0x7f373a1e
.word 0x7f373a1e
.word 0x7f373a1e
.word 0x7f268b6a
.word 0x7f268b6a
.word 0x7f268b6a
.word 0x7f268b6a
.word 0x7f268b6a
.word 0x7f268b6a
.word 0x7f268b6a
.word 0x7f268b6a
.word 0x7f268b6a
.word 0x7f268b6a
.word 0x7e82ab65
.word 0x7e82ab65
.word 0x7e82ab65
.word 0x7e82ab65
.word 0x7e82ab65
.word 0x7e82ab65
.word 0x7e82ab65
.word 0x7e82ab65
.word 0x7e82ab65
.word 0x7e82ab65
.word 0x7f217f53
.word 0x7f217f53
.word 0x7f217f53
.word 0x7f217f53
.word 0x7f217f53
.word 0x7f217f53
.word 0x7f217f53
.word 0x7f217f53
.word 0x7f217f53
.word 0x7f217f53
.word 0x7f11c013
.word 0x7f11c013
.word 0x7f11c013
.word 0x7f11c013
.word 0x7f11c013
.word 0x7f11c013
.word 0x7f11c013
.word 0x7f11c013
.word 0x7f11c013
.word 0x7f11c013
.word 0x7f2ee8de
.word 0x7f2ee8de
.word 0x7f2ee8de
.word 0x7f2ee8de
.word 0x7f2ee8de
.word 0x7f2ee8de
.word 0x7f2ee8de
.word 0x7f2ee8de
.word 0x7f2ee8de
.word 0x7f2ee8de
.word 0x7d82119e
.word 0x7d82119e
.word 0x7d82119e
.word 0x7d82119e
.word 0x7d82119e
.word 0x7d82119e
.word 0x7d82119e
.word 0x7d82119e
.word 0x7d82119e
.word 0x7d82119e
.word 0x7e34342f
.word 0x7e34342f
.word 0x7e34342f
.word 0x7e34342f
.word 0x7e34342f
.word 0x7e34342f
.word 0x7e34342f
.word 0x7e34342f
.word 0x7e34342f
.word 0x7e34342f
.word 0x7eba0c29
.word 0x7eba0c29
.word 0x7eba0c29
.word 0x7eba0c29
.word 0x7eba0c29
.word 0x7eba0c29
.word 0x7eba0c29
.word 0x7eba0c29
.word 0x7eba0c29
.word 0x7eba0c29
.word 0x7f296b63
.word 0x7f296b63
.word 0x7f296b63
.word 0x7f296b63
.word 0x7f296b63
.word 0x7f296b63
.word 0x7f296b63
.word 0x7f296b63
.word 0x7f296b63
.word 0x7f296b63
.word 0x7f32fae0
.word 0x7f32fae0
.word 0x7f32fae0
.word 0x7f32fae0
.word 0x7f32fae0
.word 0x7f32fae0
.word 0x7f32fae0
.word 0x7f32fae0
.word 0x7f32fae0
.word 0x7f32fae0
.word 0x7f017ed0
.word 0x7f017ed0
.word 0x7f017ed0
.word 0x7f017ed0
.word 0x7f017ed0
.word 0x7f017ed0
.word 0x7f017ed0
.word 0x7f017ed0
.word 0x7f017ed0
.word 0x7f017ed0
.word 0x7e823675
.word 0x7e823675
.word 0x7e823675
.word 0x7e823675
.word 0x7e823675
.word 0x7e823675
.word 0x7e823675
.word 0x7e823675
.word 0x7e823675
.word 0x7e823675
.word 0x7f3d8377
.word 0x7f3d8377
.word 0x7f3d8377
.word 0x7f3d8377
.word 0x7f3d8377
.word 0x7f3d8377
.word 0x7f3d8377
.word 0x7f3d8377
.word 0x7f3d8377
.word 0x7f3d8377
.word 0x7e1a414e
.word 0x7e1a414e
.word 0x7e1a414e
.word 0x7e1a414e
.word 0x7e1a414e
.word 0x7e1a414e
.word 0x7e1a414e
.word 0x7e1a414e
.word 0x7e1a414e
.word 0x7e1a414e
.word 0x7f2cbcfc
.word 0x7f2cbcfc
.word 0x7f2cbcfc
.word 0x7f2cbcfc
.word 0x7f2cbcfc
.word 0x7f2cbcfc
.word 0x7f2cbcfc
.word 0x7f2cbcfc
.word 0x7f2cbcfc
.word 0x7f2cbcfc
.word 0x7e79dd8e
.word 0x7e79dd8e
.word 0x7e79dd8e
.word 0x7e79dd8e
.word 0x7e79dd8e
.word 0x7e79dd8e
.word 0x7e79dd8e
.word 0x7e79dd8e
.word 0x7e79dd8e
.word 0x7e79dd8e
.word 0x7e636240
.word 0x7e636240
.word 0x7e636240
.word 0x7e636240
.word 0x7e636240
.word 0x7e636240
.word 0x7e636240
.word 0x7e636240
.word 0x7e636240
.word 0x7e636240
.word 0x7da06546
.word 0x7da06546
.word 0x7da06546
.word 0x7da06546
.word 0x7da06546
.word 0x7da06546
.word 0x7da06546
.word 0x7da06546
.word 0x7da06546
.word 0x7da06546
.word 0x7ea640ba
.word 0x7ea640ba
.word 0x7ea640ba
.word 0x7ea640ba
.word 0x7ea640ba
.word 0x7ea640ba
.word 0x7ea640ba
.word 0x7ea640ba
.word 0x7ea640ba
.word 0x7ea640ba
.word 0x7e1e0667
.word 0x7e1e0667
.word 0x7e1e0667
.word 0x7e1e0667
.word 0x7e1e0667
.word 0x7e1e0667
.word 0x7e1e0667
.word 0x7e1e0667
.word 0x7e1e0667
.word 0x7e1e0667
.word 0x7e9123d8
.word 0x7e9123d8
.word 0x7e9123d8
.word 0x7e9123d8
.word 0x7e9123d8
.word 0x7e9123d8
.word 0x7e9123d8
.word 0x7e9123d8
.word 0x7e9123d8
.word 0x7e9123d8
.word 0x7f072c24
.word 0x7f072c24
.word 0x7f072c24
.word 0x7f072c24
.word 0x7f072c24
.word 0x7f072c24
.word 0x7f072c24
.word 0x7f072c24
.word 0x7f072c24
.word 0x7f072c24
.word 0x7f269d2c
.word 0x7f269d2c
.word 0x7f269d2c
.word 0x7f269d2c
.word 0x7f269d2c
.word 0x7f269d2c
.word 0x7f269d2c
.word 0x7f269d2c
.word 0x7f269d2c
.word 0x7f269d2c
.word 0x7edafcdb
.word 0x7edafcdb
.word 0x7edafcdb
.word 0x7edafcdb
.word 0x7edafcdb
.word 0x7edafcdb
.word 0x7edafcdb
.word 0x7edafcdb
.word 0x7edafcdb
.word 0x7edafcdb
.word 0x7f1d53d7
.word 0x7f1d53d7
.word 0x7f1d53d7
.word 0x7f1d53d7
.word 0x7f1d53d7
.word 0x7f1d53d7
.word 0x7f1d53d7
.word 0x7f1d53d7
.word 0x7f1d53d7
.word 0x7f1d53d7
.word 0x7f28b6bd
.word 0x7f28b6bd
.word 0x7f28b6bd
.word 0x7f28b6bd
.word 0x7f28b6bd
.word 0x7f28b6bd
.word 0x7f28b6bd
.word 0x7f28b6bd
.word 0x7f28b6bd
.word 0x7f28b6bd
.word 0x7e41cf9e
.word 0x7e41cf9e
.word 0x7e41cf9e
.word 0x7e41cf9e
.word 0x7e41cf9e
.word 0x7e41cf9e
.word 0x7e41cf9e
.word 0x7e41cf9e
.word 0x7e41cf9e
.word 0x7e41cf9e
.word 0x7f0ed153
.word 0x7f0ed153
.word 0x7f0ed153
.word 0x7f0ed153
.word 0x7f0ed153
.word 0x7f0ed153
.word 0x7f0ed153
.word 0x7f0ed153
.word 0x7f0ed153
.word 0x7f0ed153
.word 0x7e6e5bf8
.word 0x7e6e5bf8
.word 0x7e6e5bf8
.word 0x7e6e5bf8
.word 0x7e6e5bf8
.word 0x7e6e5bf8
.word 0x7e6e5bf8
.word 0x7e6e5bf8
.word 0x7e6e5bf8
.word 0x7e6e5bf8
.word 0x7e6b4e0e
.word 0x7e6b4e0e
.word 0x7e6b4e0e
.word 0x7e6b4e0e
.word 0x7e6b4e0e
.word 0x7e6b4e0e
.word 0x7e6b4e0e
.word 0x7e6b4e0e
.word 0x7e6b4e0e
.word 0x7e6b4e0e
.word 0x7f39d661
.word 0x7f39d661
.word 0x7f39d661
.word 0x7f39d661
.word 0x7f39d661
.word 0x7f39d661
.word 0x7f39d661
.word 0x7f39d661
.word 0x7f39d661
.word 0x7f39d661
.word 0x7d34967e
.word 0x7d34967e
.word 0x7d34967e
.word 0x7d34967e
.word 0x7d34967e
.word 0x7d34967e
.word 0x7d34967e
.word 0x7d34967e
.word 0x7d34967e
.word 0x7d34967e
.word 0x7e76b77e
.word 0x7e76b77e
.word 0x7e76b77e
.word 0x7e76b77e
.word 0x7e76b77e
.word 0x7e76b77e
.word 0x7e76b77e
.word 0x7e76b77e
.word 0x7e76b77e
.word 0x7e76b77e
.word 0x7e97a40d
.word 0x7e97a40d
.word 0x7e97a40d
.word 0x7e97a40d
.word 0x7e97a40d
.word 0x7e97a40d
.word 0x7e97a40d
.word 0x7e97a40d
.word 0x7e97a40d
.word 0x7e97a40d
.word 0x7e2b6a13
.word 0x7e2b6a13
.word 0x7e2b6a13
.word 0x7e2b6a13
.word 0x7e2b6a13
.word 0x7e2b6a13
.word 0x7e2b6a13
.word 0x7e2b6a13
.word 0x7e2b6a13
.word 0x7e2b6a13
.word 0x7f192dff
.word 0x7f192dff
.word 0x7f192dff
.word 0x7f192dff
.word 0x7f192dff
.word 0x7f192dff
.word 0x7f192dff
.word 0x7f192dff
.word 0x7f192dff
.word 0x7f192dff
.word 0x7e296bac
.word 0x7e296bac
.word 0x7e296bac
.word 0x7e296bac
.word 0x7e296bac
.word 0x7e296bac
.word 0x7e296bac
.word 0x7e296bac
.word 0x7e296bac
.word 0x7e296bac
.word 0x7f0235b2
.word 0x7f0235b2
.word 0x7f0235b2
.word 0x7f0235b2
.word 0x7f0235b2
.word 0x7f0235b2
.word 0x7f0235b2
.word 0x7f0235b2
.word 0x7f0235b2
.word 0x7f0235b2
.word 0x7df61c0c
.word 0x7df61c0c
.word 0x7df61c0c
.word 0x7df61c0c
.word 0x7df61c0c
.word 0x7df61c0c
.word 0x7df61c0c
.word 0x7df61c0c
.word 0x7df61c0c
.word 0x7df61c0c
.word 0x7de0f718
.word 0x7de0f718
.word 0x7de0f718
.word 0x7de0f718
.word 0x7de0f718
.word 0x7de0f718
.word 0x7de0f718
.word 0x7de0f718
.word 0x7de0f718
.word 0x7de0f718
.word 0x7c7fd01a
.word 0x7c7fd01a
.word 0x7c7fd01a
.word 0x7c7fd01a
.word 0x7c7fd01a
.word 0x7c7fd01a
.word 0x7c7fd01a
.word 0x7c7fd01a
.word 0x7c7fd01a
.word 0x7c7fd01a
.word 0x7ee891ae
.word 0x7ee891ae
.word 0x7ee891ae
.word 0x7ee891ae
.word 0x7ee891ae
.word 0x7ee891ae
.word 0x7ee891ae
.word 0x7ee891ae
.word 0x7ee891ae
.word 0x7ee891ae
.word 0x7ec3e270
.word 0x7ec3e270
.word 0x7ec3e270
.word 0x7ec3e270
.word 0x7ec3e270
.word 0x7ec3e270
.word 0x7ec3e270
.word 0x7ec3e270
.word 0x7ec3e270
.word 0x7ec3e270
.word 0x7da70ed6
.word 0x7da70ed6
.word 0x7da70ed6
.word 0x7da70ed6
.word 0x7da70ed6
.word 0x7da70ed6
.word 0x7da70ed6
.word 0x7da70ed6
.word 0x7da70ed6
.word 0x7da70ed6
.word 0x7ea1a1fc
.word 0x7ea1a1fc
.word 0x7ea1a1fc
.word 0x7ea1a1fc
.word 0x7ea1a1fc
.word 0x7ea1a1fc
.word 0x7ea1a1fc
.word 0x7ea1a1fc
.word 0x7ea1a1fc
.word 0x7ea1a1fc
.word 0x7c9135f9
.word 0x7c9135f9
.word 0x7c9135f9
.word 0x7c9135f9
.word 0x7c9135f9
.word 0x7c9135f9
.word 0x7c9135f9
.word 0x7c9135f9
.word 0x7c9135f9
.word 0x7c9135f9
.word 0x7e774c1e
.word 0x7e774c1e
.word 0x7e774c1e
.word 0x7e774c1e
.word 0x7e774c1e
.word 0x7e774c1e
.word 0x7e774c1e
.word 0x7e774c1e
.word 0x7e774c1e
.word 0x7e774c1e
.word 0x7f08a011
.word 0x7f08a011
.word 0x7f08a011
.word 0x7f08a011
.word 0x7f08a011
.word 0x7f08a011
.word 0x7f08a011
.word 0x7f08a011
.word 0x7f08a011
.word 0x7f08a011
.word 0x7e0122a3
.word 0x7e0122a3
.word 0x7e0122a3
.word 0x7e0122a3
.word 0x7e0122a3
.word 0x7e0122a3
.word 0x7e0122a3
.word 0x7e0122a3
.word 0x7e0122a3
.word 0x7e0122a3
.word 0x7df52f4e
.word 0x7df52f4e
.word 0x7df52f4e
.word 0x7df52f4e
.word 0x7df52f4e
.word 0x7df52f4e
.word 0x7df52f4e
.word 0x7df52f4e
.word 0x7df52f4e
.word 0x7df52f4e
.word 0x7e844224
.word 0x7e844224
.word 0x7e844224
.word 0x7e844224
.word 0x7e844224
.word 0x7e844224
.word 0x7e844224
.word 0x7e844224
.word 0x7e844224
.word 0x7e844224
.word 0x7da82cad
.word 0x7da82cad
.word 0x7da82cad
.word 0x7da82cad
.word 0x7da82cad
.word 0x7da82cad
.word 0x7da82cad
.word 0x7da82cad
.word 0x7da82cad
.word 0x7da82cad
.word 0x7f111299
.word 0x7f111299
.word 0x7f111299
.word 0x7f111299
.word 0x7f111299
.word 0x7f111299
.word 0x7f111299
.word 0x7f111299
.word 0x7f111299
.word 0x7f111299
.word 0x7c4d182e
.word 0x7c4d182e
.word 0x7c4d182e
.word 0x7c4d182e
.word 0x7c4d182e
.word 0x7c4d182e
.word 0x7c4d182e
.word 0x7c4d182e
.word 0x7c4d182e
.word 0x7c4d182e
.word 0x7f013cdf
.word 0x7f013cdf
.word 0x7f013cdf
.word 0x7f013cdf
.word 0x7f013cdf
.word 0x7f013cdf
.word 0x7f013cdf
.word 0x7f013cdf
.word 0x7f013cdf
.word 0x7f013cdf
.word 0x7e4410d9
.word 0x7e4410d9
.word 0x7e4410d9
.word 0x7e4410d9
.word 0x7e4410d9
.word 0x7e4410d9
.word 0x7e4410d9
.word 0x7e4410d9
.word 0x7e4410d9
.word 0x7e4410d9
.word 0x7f190af0
.word 0x7f190af0
.word 0x7f190af0
.word 0x7f190af0
.word 0x7f190af0
.word 0x7f190af0
.word 0x7f190af0
.word 0x7f190af0
.word 0x7f190af0
.word 0x7f190af0
.word 0x7f25504e
.word 0x7f25504e
.word 0x7f25504e
.word 0x7f25504e
.word 0x7f25504e
.word 0x7f25504e
.word 0x7f25504e
.word 0x7f25504e
.word 0x7f25504e
.word 0x7f25504e
.word 0x7e081926
.word 0x7e081926
.word 0x7e081926
.word 0x7e081926
.word 0x7e081926
.word 0x7e081926
.word 0x7e081926
.word 0x7e081926
.word 0x7e081926
.word 0x7e081926
.word 0x7cabe0d7
.word 0x7cabe0d7
.word 0x7cabe0d7
.word 0x7cabe0d7
.word 0x7cabe0d7
.word 0x7cabe0d7
.word 0x7cabe0d7
.word 0x7cabe0d7
.word 0x7cabe0d7
.word 0x7cabe0d7
.word 0x7eeb2e86
.word 0x7eeb2e86
.word 0x7eeb2e86
.word 0x7eeb2e86
.word 0x7eeb2e86
.word 0x7eeb2e86
.word 0x7eeb2e86
.word 0x7eeb2e86
.word 0x7eeb2e86
.word 0x7eeb2e86
.word 0x7ecec69e
.word 0x7ecec69e
.word 0x7ecec69e
.word 0x7ecec69e
.word 0x7ecec69e
.word 0x7ecec69e
.word 0x7ecec69e
.word 0x7ecec69e
.word 0x7ecec69e
.word 0x7ecec69e
.word 0x7e8901e1
.word 0x7e8901e1
.word 0x7e8901e1
.word 0x7e8901e1
.word 0x7e8901e1
.word 0x7e8901e1
.word 0x7e8901e1
.word 0x7e8901e1
.word 0x7e8901e1
.word 0x7e8901e1
.word 0x7ec1d009
.word 0x7ec1d009
.word 0x7ec1d009
.word 0x7ec1d009
.word 0x7ec1d009
.word 0x7ec1d009
.word 0x7ec1d009
.word 0x7ec1d009
.word 0x7ec1d009
.word 0x7ec1d009
.word 0x7edae136
.word 0x7edae136
.word 0x7edae136
.word 0x7edae136
.word 0x7edae136
.word 0x7edae136
.word 0x7edae136
.word 0x7edae136
.word 0x7edae136
.word 0x7edae136
.word 0x7d2c6927
.word 0x7d2c6927
.word 0x7d2c6927
.word 0x7d2c6927
.word 0x7d2c6927
.word 0x7d2c6927
.word 0x7d2c6927
.word 0x7d2c6927
.word 0x7d2c6927
.word 0x7d2c6927
.word 0x7ed78fb8
.word 0x7ed78fb8
.word 0x7ed78fb8
.word 0x7ed78fb8
.word 0x7ed78fb8
.word 0x7ed78fb8
.word 0x7ed78fb8
.word 0x7ed78fb8
.word 0x7ed78fb8
.word 0x7ed78fb8
.word 0x7f1b5ad7
.word 0x7f1b5ad7
.word 0x7f1b5ad7
.word 0x7f1b5ad7
.word 0x7f1b5ad7
.word 0x7f1b5ad7
.word 0x7f1b5ad7
.word 0x7f1b5ad7
.word 0x7f1b5ad7
.word 0x7f1b5ad7
.word 0x7f2a257f
.word 0x7f2a257f
.word 0x7f2a257f
.word 0x7f2a257f
.word 0x7f2a257f
.word 0x7f2a257f
.word 0x7f2a257f
.word 0x7f2a257f
.word 0x7f2a257f
.word 0x7f2a257f
.word 0x7f167638
.word 0x7f167638
.word 0x7f167638
.word 0x7f167638
.word 0x7f167638
.word 0x7f167638
.word 0x7f167638
.word 0x7f167638
.word 0x7f167638
.word 0x7f167638
.word 0x7f37c42d
.word 0x7f37c42d
.word 0x7f37c42d
.word 0x7f37c42d
.word 0x7f37c42d
.word 0x7f37c42d
.word 0x7f37c42d
.word 0x7f37c42d
.word 0x7f37c42d
.word 0x7f37c42d
.word 0x7e4ece7f
.word 0x7e4ece7f
.word 0x7e4ece7f
.word 0x7e4ece7f
.word 0x7e4ece7f
.word 0x7e4ece7f
.word 0x7e4ece7f
.word 0x7e4ece7f
.word 0x7e4ece7f
.word 0x7e4ece7f
.word 0x7edddf89
.word 0x7edddf89
.word 0x7edddf89
.word 0x7edddf89
.word 0x7edddf89
.word 0x7edddf89
.word 0x7edddf89
.word 0x7edddf89
.word 0x7edddf89
.word 0x7edddf89
.word 0x7ec549ce
.word 0x7ec549ce
.word 0x7ec549ce
.word 0x7ec549ce
.word 0x7ec549ce
.word 0x7ec549ce
.word 0x7ec549ce
.word 0x7ec549ce
.word 0x7ec549ce
.word 0x7ec549ce
.word 0x7f252cf6
.word 0x7f252cf6
.word 0x7f252cf6
.word 0x7f252cf6
.word 0x7f252cf6
.word 0x7f252cf6
.word 0x7f252cf6
.word 0x7f252cf6
.word 0x7f252cf6
.word 0x7f252cf6
.word 0x7f13f0c0
.word 0x7f13f0c0
.word 0x7f13f0c0
.word 0x7f13f0c0
.word 0x7f13f0c0
.word 0x7f13f0c0
.word 0x7f13f0c0
.word 0x7f13f0c0
.word 0x7f13f0c0
.word 0x7f13f0c0
.word 0x7ec0dc0e
.word 0x7ec0dc0e
.word 0x7ec0dc0e
.word 0x7ec0dc0e
.word 0x7ec0dc0e
.word 0x7ec0dc0e
.word 0x7ec0dc0e
.word 0x7ec0dc0e
.word 0x7ec0dc0e
.word 0x7ec0dc0e
.word 0x7e97246c
.word 0x7e97246c
.word 0x7e97246c
.word 0x7e97246c
.word 0x7e97246c
.word 0x7e97246c
.word 0x7e97246c
.word 0x7e97246c
.word 0x7e97246c
.word 0x7e97246c
.word 0x7f3cc5a4
.word 0x7f3cc5a4
.word 0x7f3cc5a4
.word 0x7f3cc5a4
.word 0x7f3cc5a4
.word 0x7f3cc5a4
.word 0x7f3cc5a4
.word 0x7f3cc5a4
.word 0x7f3cc5a4
.word 0x7f3cc5a4
.word 0x7d0597cb
.word 0x7d0597cb
.word 0x7d0597cb
.word 0x7d0597cb
.word 0x7d0597cb
.word 0x7d0597cb
.word 0x7d0597cb
.word 0x7d0597cb
.word 0x7d0597cb
.word 0x7d0597cb
.word 0x7ebc0ad4
.word 0x7ebc0ad4
.word 0x7ebc0ad4
.word 0x7ebc0ad4
.word 0x7ebc0ad4
.word 0x7ebc0ad4
.word 0x7ebc0ad4
.word 0x7ebc0ad4
.word 0x7ebc0ad4
.word 0x7ebc0ad4
.word 0x7ec80a54
.word 0x7ec80a54
.word 0x7ec80a54
.word 0x7ec80a54
.word 0x7ec80a54
.word 0x7ec80a54
.word 0x7ec80a54
.word 0x7ec80a54
.word 0x7ec80a54
.word 0x7ec80a54
.word 0x7ec33c5b
.word 0x7ec33c5b
.word 0x7ec33c5b
.word 0x7ec33c5b
.word 0x7ec33c5b
.word 0x7ec33c5b
.word 0x7ec33c5b
.word 0x7ec33c5b
.word 0x7ec33c5b
.word 0x7ec33c5b
.word 0x7e8fe2cd
.word 0x7e8fe2cd
.word 0x7e8fe2cd
.word 0x7e8fe2cd
.word 0x7e8fe2cd
.word 0x7e8fe2cd
.word 0x7e8fe2cd
.word 0x7e8fe2cd
.word 0x7e8fe2cd
.word 0x7e8fe2cd
.word 0x7f06fbdb
.word 0x7f06fbdb
.word 0x7f06fbdb
.word 0x7f06fbdb
.word 0x7f06fbdb
.word 0x7f06fbdb
.word 0x7f06fbdb
.word 0x7f06fbdb
.word 0x7f06fbdb
.word 0x7f06fbdb
.word 0x7e04dea3
.word 0x7e04dea3
.word 0x7e04dea3
.word 0x7e04dea3
.word 0x7e04dea3
.word 0x7e04dea3
.word 0x7e04dea3
.word 0x7e04dea3
.word 0x7e04dea3
.word 0x7e04dea3
.word 0x7f191a03
.word 0x7f191a03
.word 0x7f191a03
.word 0x7f191a03
.word 0x7f191a03
.word 0x7f191a03
.word 0x7f191a03
.word 0x7f191a03
.word 0x7f191a03
.word 0x7f191a03
.word 0x7cd4206e
.word 0x7cd4206e
.word 0x7cd4206e
.word 0x7cd4206e
.word 0x7cd4206e
.word 0x7cd4206e
.word 0x7cd4206e
.word 0x7cd4206e
.word 0x7cd4206e
.word 0x7cd4206e
.word 0x7ec2076b
.word 0x7ec2076b
.word 0x7ec2076b
.word 0x7ec2076b
.word 0x7ec2076b
.word 0x7ec2076b
.word 0x7ec2076b
.word 0x7ec2076b
.word 0x7ec2076b
.word 0x7ec2076b
.word 0x7f296f9b
.word 0x7f296f9b
.word 0x7f296f9b
.word 0x7f296f9b
.word 0x7f296f9b
.word 0x7f296f9b
.word 0x7f296f9b
.word 0x7f296f9b
.word 0x7f296f9b
.word 0x7f296f9b
.word 0x7e68fcac
.word 0x7e68fcac
.word 0x7e68fcac
.word 0x7e68fcac
.word 0x7e68fcac
.word 0x7e68fcac
.word 0x7e68fcac
.word 0x7e68fcac
.word 0x7e68fcac
.word 0x7e68fcac
.word 0x7f1f5de9
.word 0x7f1f5de9
.word 0x7f1f5de9
.word 0x7f1f5de9
.word 0x7f1f5de9
.word 0x7f1f5de9
.word 0x7f1f5de9
.word 0x7f1f5de9
.word 0x7f1f5de9
.word 0x7f1f5de9
.word 0x7f33cbed
.word 0x7f33cbed
.word 0x7f33cbed
.word 0x7f33cbed
.word 0x7f33cbed
.word 0x7f33cbed
.word 0x7f33cbed
.word 0x7f33cbed
.word 0x7f33cbed
.word 0x7f33cbed
.word 0x7f0a8666
.word 0x7f0a8666
.word 0x7f0a8666
.word 0x7f0a8666
.word 0x7f0a8666
.word 0x7f0a8666
.word 0x7f0a8666
.word 0x7f0a8666
.word 0x7f0a8666
.word 0x7f0a8666
.word 0x7db9afdd
.word 0x7db9afdd
.word 0x7db9afdd
.word 0x7db9afdd
.word 0x7db9afdd
.word 0x7db9afdd
.word 0x7db9afdd
.word 0x7db9afdd
.word 0x7db9afdd
.word 0x7db9afdd
.word 0x7f3e917d
.word 0x7f3e917d
.word 0x7f3e917d
.word 0x7f3e917d
.word 0x7f3e917d
.word 0x7f3e917d
.word 0x7f3e917d
.word 0x7f3e917d
.word 0x7f3e917d
.word 0x7f3e917d
.word 0x7ef6a41a
.word 0x7ef6a41a
.word 0x7ef6a41a
.word 0x7ef6a41a
.word 0x7ef6a41a
.word 0x7ef6a41a
.word 0x7ef6a41a
.word 0x7ef6a41a
.word 0x7ef6a41a
.word 0x7ef6a41a
.word 0x7f20d0a1
.word 0x7f20d0a1
.word 0x7f20d0a1
.word 0x7f20d0a1
.word 0x7f20d0a1
.word 0x7f20d0a1
.word 0x7f20d0a1
.word 0x7f20d0a1
.word 0x7f20d0a1
.word 0x7f20d0a1
.word 0x7e5e8d61
.word 0x7e5e8d61
.word 0x7e5e8d61
.word 0x7e5e8d61
.word 0x7e5e8d61
.word 0x7e5e8d61
.word 0x7e5e8d61
.word 0x7e5e8d61
.word 0x7e5e8d61
.word 0x7e5e8d61
.word 0x7e280619
.word 0x7e280619
.word 0x7e280619
.word 0x7e280619
.word 0x7e280619
.word 0x7e280619
.word 0x7e280619
.word 0x7e280619
.word 0x7e280619
.word 0x7e280619
.word 0x7e330244
.word 0x7e330244
.word 0x7e330244
.word 0x7e330244
.word 0x7e330244
.word 0x7e330244
.word 0x7e330244
.word 0x7e330244
.word 0x7e330244
.word 0x7e330244
.word 0x7ea82619
.word 0x7ea82619
.word 0x7ea82619
.word 0x7ea82619
.word 0x7ea82619
.word 0x7ea82619
.word 0x7ea82619
.word 0x7ea82619
.word 0x7ea82619
.word 0x7ea82619
.word 0x7cb26d35
.word 0x7cb26d35
.word 0x7cb26d35
.word 0x7cb26d35
.word 0x7cb26d35
.word 0x7cb26d35
.word 0x7cb26d35
.word 0x7cb26d35
.word 0x7cb26d35
.word 0x7cb26d35
.word 0x7e26592c
.word 0x7e26592c
.word 0x7e26592c
.word 0x7e26592c
.word 0x7e26592c
.word 0x7e26592c
.word 0x7e26592c
.word 0x7e26592c
.word 0x7e26592c
.word 0x7e26592c
.word 0x7f34510e
.word 0x7f34510e
.word 0x7f34510e
.word 0x7f34510e
.word 0x7f34510e
.word 0x7f34510e
.word 0x7f34510e
.word 0x7f34510e
.word 0x7f34510e
.word 0x7f34510e
.word 0x7c9c56e0
.word 0x7c9c56e0
.word 0x7c9c56e0
.word 0x7c9c56e0
.word 0x7c9c56e0
.word 0x7c9c56e0
.word 0x7c9c56e0
.word 0x7c9c56e0
.word 0x7c9c56e0
.word 0x7c9c56e0
.word 0x7f2d12f5
.word 0x7f2d12f5
.word 0x7f2d12f5
.word 0x7f2d12f5
.word 0x7f2d12f5
.word 0x7f2d12f5
.word 0x7f2d12f5
.word 0x7f2d12f5
.word 0x7f2d12f5
.word 0x7f2d12f5
.word 0x7e2fb07b
.word 0x7e2fb07b
.word 0x7e2fb07b
.word 0x7e2fb07b
.word 0x7e2fb07b
.word 0x7e2fb07b
.word 0x7e2fb07b
.word 0x7e2fb07b
.word 0x7e2fb07b
.word 0x7e2fb07b
.word 0x7eab0757
.word 0x7eab0757
.word 0x7eab0757
.word 0x7eab0757
.word 0x7eab0757
.word 0x7eab0757
.word 0x7eab0757
.word 0x7eab0757
.word 0x7eab0757
.word 0x7eab0757
.word 0x7f125b96
.word 0x7f125b96
.word 0x7f125b96
.word 0x7f125b96
.word 0x7f125b96
.word 0x7f125b96
.word 0x7f125b96
.word 0x7f125b96
.word 0x7f125b96
.word 0x7f125b96
.word 0x7f207786
.word 0x7f207786
.word 0x7f207786
.word 0x7f207786
.word 0x7f207786
.word 0x7f207786
.word 0x7f207786
.word 0x7f207786
.word 0x7f207786
.word 0x7f207786
.word 0x7d902b16
.word 0x7d902b16
.word 0x7d902b16
.word 0x7d902b16
.word 0x7d902b16
.word 0x7d902b16
.word 0x7d902b16
.word 0x7d902b16
.word 0x7d902b16
.word 0x7d902b16
.word 0x7efa3631
.word 0x7efa3631
.word 0x7efa3631
.word 0x7efa3631
.word 0x7efa3631
.word 0x7efa3631
.word 0x7efa3631
.word 0x7efa3631
.word 0x7efa3631
.word 0x7efa3631
.word 0x7ebe3f3f
.word 0x7ebe3f3f
.word 0x7ebe3f3f
.word 0x7ebe3f3f
.word 0x7ebe3f3f
.word 0x7ebe3f3f
.word 0x7ebe3f3f
.word 0x7ebe3f3f
.word 0x7ebe3f3f
.word 0x7ebe3f3f
.word 0x7f12a50c
.word 0x7f12a50c
.word 0x7f12a50c
.word 0x7f12a50c
.word 0x7f12a50c
.word 0x7f12a50c
.word 0x7f12a50c
.word 0x7f12a50c
.word 0x7f12a50c
.word 0x7f12a50c
.word 0x7dce622b
.word 0x7dce622b
.word 0x7dce622b
.word 0x7dce622b
.word 0x7dce622b
.word 0x7dce622b
.word 0x7dce622b
.word 0x7dce622b
.word 0x7dce622b
.word 0x7dce622b
.word 0x7eaae70d
.word 0x7eaae70d
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_2:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_3:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_4:
    .fill 508*(XLEN/32),4,0xdeadbeef


signature_x15_5:
    .fill 212*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
