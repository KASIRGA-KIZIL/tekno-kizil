// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.4.5
// timestamp : Thu May 20 05:54:26 2021 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv-ctg/sample_cgfs/rv32i_k.cgf \
//                  --base-isa rv32i \
//                  --randomize
// -----------
//
// -----------
// Copyright (c) 2021. Indian Institute of Technology Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sha512sig1l instruction of the RISC-V  extension for the sha512sig1l covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IK")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*RV32.*I.*K.*);def TEST_CASE_1=True;",sha512sig1l)

RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*RV32.*I.*ZKn.*);def TEST_CASE_1=True;",sha512sig1l)

RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*RV32.*I.*ZKnh.*);def TEST_CASE_1=True;",sha512sig1l)

RVTEST_SIGBASE( x5,signature_x5_1)

inst_0:
// rs2 == rd != rs1, rs1==x31, rs2==x19, rd==x19, rs1_val == 0x254a9493 and rs2_val == 0xc5521660 
// opcode: sha512sig1l ; op1:x31; op2:x19; dest:x19; op1val:0x254a9493;  op2val:0xc5521660
TEST_RR_OP(sha512sig1l, x19, x31, x19, 0x00000000, 0x254a9493, 0xc5521660, x5, 0, x1)

inst_1:
// rs1 == rd != rs2, rs1==x25, rs2==x3, rd==x25, rs2_val == 2147483647, 
// opcode: sha512sig1l ; op1:x25; op2:x3; dest:x25; op1val:-0x101;  op2val:0x7fffffff
TEST_RR_OP(sha512sig1l, x25, x25, x3, 0x00000000, -0x101, 0x7fffffff, x5, 4, x1)

inst_2:
// rs1 == rs2 != rd, rs1==x0, rs2==x0, rd==x28, rs2_val == 3221225471, 
// opcode: sha512sig1l ; op1:x0; op2:x0; dest:x28; op1val:0x0;  op2val:0x0
TEST_RR_OP(sha512sig1l, x28, x0, x0, 0x00000000, 0x0, 0x0, x5, 8, x1)

inst_3:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x26, rs2==x17, rd==x15, rs2_val == 3758096383, rs1_val == 4261412863
// opcode: sha512sig1l ; op1:x26; op2:x17; dest:x15; op1val:0xfdffffff;  op2val:0xdfffffff
TEST_RR_OP(sha512sig1l, x15, x26, x17, 0x00000000, 0xfdffffff, 0xdfffffff, x5, 12, x1)

inst_4:
// rs1 == rs2 == rd, rs1==x27, rs2==x27, rd==x27, rs2_val == 4026531839, rs1_val == 8388608
// opcode: sha512sig1l ; op1:x27; op2:x27; dest:x27; op1val:0x800000;  op2val:0x800000
TEST_RR_OP(sha512sig1l, x27, x27, x27, 0x00000000, 0x800000, 0x800000, x5, 16, x1)

inst_5:
// rs1==x3, rs2==x7, rd==x22, rs2_val == 4160749567, rs1_val == 8192
// opcode: sha512sig1l ; op1:x3; op2:x7; dest:x22; op1val:0x2000;  op2val:0xf7ffffff
TEST_RR_OP(sha512sig1l, x22, x3, x7, 0x00000000, 0x2000, 0xf7ffffff, x5, 20, x1)

inst_6:
// rs1==x28, rs2==x24, rd==x17, rs2_val == 4227858431, 
// opcode: sha512sig1l ; op1:x28; op2:x24; dest:x17; op1val:0x800000;  op2val:0xfbffffff
TEST_RR_OP(sha512sig1l, x17, x28, x24, 0x00000000, 0x800000, 0xfbffffff, x5, 24, x1)

inst_7:
// rs1==x18, rs2==x29, rd==x13, rs2_val == 4261412863, 
// opcode: sha512sig1l ; op1:x18; op2:x29; dest:x13; op1val:-0x21;  op2val:0xfdffffff
TEST_RR_OP(sha512sig1l, x13, x18, x29, 0x00000000, -0x21, 0xfdffffff, x5, 28, x1)

inst_8:
// rs1==x13, rs2==x4, rd==x7, rs2_val == 4278190079, rs1_val == 128
// opcode: sha512sig1l ; op1:x13; op2:x4; dest:x7; op1val:0x80;  op2val:0xfeffffff
TEST_RR_OP(sha512sig1l, x7, x13, x4, 0x00000000, 0x80, 0xfeffffff, x5, 32, x1)

inst_9:
// rs1==x24, rs2==x11, rd==x26, rs2_val == 4286578687, rs1_val == 4294836223
// opcode: sha512sig1l ; op1:x24; op2:x11; dest:x26; op1val:0xfffdffff;  op2val:0xff7fffff
TEST_RR_OP(sha512sig1l, x26, x24, x11, 0x00000000, 0xfffdffff, 0xff7fffff, x5, 36, x1)

inst_10:
// rs1==x8, rs2==x22, rd==x24, rs2_val == 4290772991, rs1_val == 4294967294
// opcode: sha512sig1l ; op1:x8; op2:x22; dest:x24; op1val:0xfffffffe;  op2val:0xffbfffff
TEST_RR_OP(sha512sig1l, x24, x8, x22, 0x00000000, 0xfffffffe, 0xffbfffff, x5, 40, x1)

inst_11:
// rs1==x15, rs2==x13, rd==x6, rs2_val == 4292870143, rs1_val == 65536
// opcode: sha512sig1l ; op1:x15; op2:x13; dest:x6; op1val:0x10000;  op2val:0xffdfffff
TEST_RR_OP(sha512sig1l, x6, x15, x13, 0x00000000, 0x10000, 0xffdfffff, x5, 44, x1)

inst_12:
// rs1==x4, rs2==x28, rd==x29, rs2_val == 4293918719, rs1_val == 4286578687
// opcode: sha512sig1l ; op1:x4; op2:x28; dest:x29; op1val:0xff7fffff;  op2val:0xffefffff
TEST_RR_OP(sha512sig1l, x29, x4, x28, 0x00000000, 0xff7fffff, 0xffefffff, x5, 48, x1)

inst_13:
// rs1==x23, rs2==x16, rd==x3, rs2_val == 4294443007, 
// opcode: sha512sig1l ; op1:x23; op2:x16; dest:x3; op1val:0x7;  op2val:0xfff7ffff
TEST_RR_OP(sha512sig1l, x3, x23, x16, 0x00000000, 0x7, 0xfff7ffff, x5, 52, x1)

inst_14:
// rs1==x30, rs2==x9, rd==x2, rs2_val == 4294705151, rs1_val == 4
// opcode: sha512sig1l ; op1:x30; op2:x9; dest:x2; op1val:0x4;  op2val:0xfffbffff
TEST_RR_OP(sha512sig1l, x2, x30, x9, 0x00000000, 0x4, 0xfffbffff, x5, 56, x1)

inst_15:
// rs1==x7, rs2==x8, rd==x12, rs2_val == 4294836223, rs1_val == 32
// opcode: sha512sig1l ; op1:x7; op2:x8; dest:x12; op1val:0x20;  op2val:0xfffdffff
TEST_RR_OP(sha512sig1l, x12, x7, x8, 0x00000000, 0x20, 0xfffdffff, x5, 60, x1)

inst_16:
// rs1==x16, rs2==x15, rd==x4, rs2_val == 4294901759, rs1_val == 1073741824
// opcode: sha512sig1l ; op1:x16; op2:x15; dest:x4; op1val:0x40000000;  op2val:0xfffeffff
TEST_RR_OP(sha512sig1l, x4, x16, x15, 0x00000000, 0x40000000, 0xfffeffff, x5, 64, x1)

inst_17:
// rs1==x10, rs2==x21, rd==x9, rs2_val == 4294934527, rs1_val == 4294967279
// opcode: sha512sig1l ; op1:x10; op2:x21; dest:x9; op1val:0xffffffef;  op2val:0xffff7fff
TEST_RR_OP(sha512sig1l, x9, x10, x21, 0x00000000, 0xffffffef, 0xffff7fff, x5, 68, x1)

inst_18:
// rs1==x22, rs2==x14, rd==x1, rs2_val == 4294950911, 
// opcode: sha512sig1l ; op1:x22; op2:x14; dest:x1; op1val:0x7;  op2val:0xffffbfff
TEST_RR_OP(sha512sig1l, x1, x22, x14, 0x00000000, 0x7, 0xffffbfff, x5, 72, x4)
RVTEST_SIGBASE( x3,signature_x3_0)

inst_19:
// rs1==x11, rs2==x10, rd==x30, rs2_val == 4294959103, rs1_val == 67108864
// opcode: sha512sig1l ; op1:x11; op2:x10; dest:x30; op1val:0x4000000;  op2val:0xffffdfff
TEST_RR_OP(sha512sig1l, x30, x11, x10, 0x00000000, 0x4000000, 0xffffdfff, x3, 0, x4)

inst_20:
// rs1==x12, rs2==x18, rd==x21, rs2_val == 4294963199, rs1_val == 3221225471
// opcode: sha512sig1l ; op1:x12; op2:x18; dest:x21; op1val:0xbfffffff;  op2val:0xffffefff
TEST_RR_OP(sha512sig1l, x21, x12, x18, 0x00000000, 0xbfffffff, 0xffffefff, x3, 4, x4)

inst_21:
// rs1==x14, rs2==x31, rd==x18, rs2_val == 4294965247, rs1_val == 268435456
// opcode: sha512sig1l ; op1:x14; op2:x31; dest:x18; op1val:0x10000000;  op2val:0xfffff7ff
TEST_RR_OP(sha512sig1l, x18, x14, x31, 0x00000000, 0x10000000, 0xfffff7ff, x3, 8, x4)

inst_22:
// rs1==x21, rs2==x30, rd==x11, rs2_val == 4294966271, 
// opcode: sha512sig1l ; op1:x21; op2:x30; dest:x11; op1val:0x0;  op2val:0xfffffbff
TEST_RR_OP(sha512sig1l, x11, x21, x30, 0x00000000, 0x0, 0xfffffbff, x3, 12, x4)

inst_23:
// rs1==x6, rs2==x12, rd==x5, rs2_val == 4294966783, 
// opcode: sha512sig1l ; op1:x6; op2:x12; dest:x5; op1val:-0x8001;  op2val:0xfffffdff
TEST_RR_OP(sha512sig1l, x5, x6, x12, 0x00000000, -0x8001, 0xfffffdff, x3, 16, x4)

inst_24:
// rs1==x20, rs2==x25, rd==x14, rs2_val == 4294967039, rs1_val == 4294967263
// opcode: sha512sig1l ; op1:x20; op2:x25; dest:x14; op1val:0xffffffdf;  op2val:0xfffffeff
TEST_RR_OP(sha512sig1l, x14, x20, x25, 0x00000000, 0xffffffdf, 0xfffffeff, x3, 20, x4)

inst_25:
// rs1==x5, rs2==x20, rd==x23, rs2_val == 4294967167, 
// opcode: sha512sig1l ; op1:x5; op2:x20; dest:x23; op1val:-0x21;  op2val:0xffffff7f
TEST_RR_OP(sha512sig1l, x23, x5, x20, 0x00000000, -0x21, 0xffffff7f, x3, 24, x4)

inst_26:
// rs1==x19, rs2==x1, rd==x8, rs2_val == 4294967231, 
// opcode: sha512sig1l ; op1:x19; op2:x1; dest:x8; op1val:0xf;  op2val:0xffffffbf
TEST_RR_OP(sha512sig1l, x8, x19, x1, 0x00000000, 0xf, 0xffffffbf, x3, 28, x4)

inst_27:
// rs1==x1, rs2==x23, rd==x0, rs2_val == 4294967263, 
// opcode: sha512sig1l ; op1:x1; op2:x23; dest:x0; op1val:0xd;  op2val:0xffffffdf
TEST_RR_OP(sha512sig1l, x0, x1, x23, 0x00000000, 0xd, 0xffffffdf, x3, 32, x4)

inst_28:
// rs1==x9, rs2==x2, rd==x10, rs2_val == 4294967279, 
// opcode: sha512sig1l ; op1:x9; op2:x2; dest:x10; op1val:-0x55555556;  op2val:0xffffffef
TEST_RR_OP(sha512sig1l, x10, x9, x2, 0x00000000, -0x55555556, 0xffffffef, x3, 36, x4)

inst_29:
// rs1==x29, rs2==x26, rd==x31, rs2_val == 4294967287, 
// opcode: sha512sig1l ; op1:x29; op2:x26; dest:x31; op1val:0x9;  op2val:0xfffffff7
TEST_RR_OP(sha512sig1l, x31, x29, x26, 0x00000000, 0x9, 0xfffffff7, x3, 40, x4)

inst_30:
// rs1==x17, rs2==x6, rd==x16, rs2_val == 4294967291, 
// opcode: sha512sig1l ; op1:x17; op2:x6; dest:x16; op1val:-0x400001;  op2val:0xfffffffb
TEST_RR_OP(sha512sig1l, x16, x17, x6, 0x00000000, -0x400001, 0xfffffffb, x3, 44, x4)

inst_31:
// rs1==x2, rs2==x5, rd==x20, rs2_val == 4294967293, 
// opcode: sha512sig1l ; op1:x2; op2:x5; dest:x20; op1val:0x4;  op2val:0xfffffffd
TEST_RR_OP(sha512sig1l, x20, x2, x5, 0x00000000, 0x4, 0xfffffffd, x3, 48, x4)

inst_32:
// rs2_val == 4294967294, rs1_val == 4293918719
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0xffefffff;  op2val:0xfffffffe
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0xffefffff, 0xfffffffe, x3, 52, x4)

inst_33:
// rs1_val == 2147483647, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0x7fffffff;  op2val:-0x80000000
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0x7fffffff, -0x80000000, x3, 56, x4)

inst_34:
// rs1_val == 3758096383, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0xdfffffff;  op2val:-0x10000001
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0xdfffffff, -0x10000001, x3, 60, x4)

inst_35:
// rs1_val == 4026531839, rs2_val == 67108864
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0xefffffff;  op2val:0x4000000
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0xefffffff, 0x4000000, x3, 64, x4)

inst_36:
// rs1_val == 4160749567, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0xf7ffffff;  op2val:0xbfffffff
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0xf7ffffff, 0xbfffffff, x3, 68, x4)

inst_37:
// rs1_val == 4227858431, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0xfbffffff;  op2val:-0x41
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0xfbffffff, -0x41, x3, 72, x4)

inst_38:
// rs1_val == 4278190079, rs2_val == 1073741824
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0xfeffffff;  op2val:0x40000000
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0xfeffffff, 0x40000000, x3, 76, x4)

inst_39:
// rs1_val == 4290772991, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0xffbfffff;  op2val:0x7fffffff
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0xffbfffff, 0x7fffffff, x3, 80, x4)

inst_40:
// rs1_val == 4292870143, rs2_val == 131072
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0xffdfffff;  op2val:0x20000
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0xffdfffff, 0x20000, x3, 84, x4)

inst_41:
// rs1_val == 4294443007, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0xfff7ffff;  op2val:-0x101
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0xfff7ffff, -0x101, x3, 88, x4)

inst_42:
// rs1_val == 4294705151, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0xfffbffff;  op2val:0xa
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0xfffbffff, 0xa, x3, 92, x4)

inst_43:
// rs1_val == 4294901759, rs2_val == 32
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0xfffeffff;  op2val:0x20
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0xfffeffff, 0x20, x3, 96, x4)

inst_44:
// rs1_val == 4294934527, rs2_val == 1024
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0xffff7fff;  op2val:0x400
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0xffff7fff, 0x400, x3, 100, x4)

inst_45:
// rs1_val == 4294950911, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0xffffbfff;  op2val:0x7fffffff
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0xffffbfff, 0x7fffffff, x3, 104, x4)

inst_46:
// rs1_val == 4294959103, rs2_val == 262144
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0xffffdfff;  op2val:0x40000
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0xffffdfff, 0x40000, x3, 108, x4)

inst_47:
// rs1_val == 4294963199, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0xffffefff;  op2val:0xfff7ffff
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0xffffefff, 0xfff7ffff, x3, 112, x4)

inst_48:
// rs1_val == 4294965247, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0xfffff7ff;  op2val:0xffffff7f
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0xfffff7ff, 0xffffff7f, x3, 116, x4)

inst_49:
// rs1_val == 4294966271, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0xfffffbff;  op2val:-0x3
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0xfffffbff, -0x3, x3, 120, x4)

inst_50:
// rs1_val == 4294966783, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0xfffffdff;  op2val:-0x21
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0xfffffdff, -0x21, x3, 124, x4)

inst_51:
// rs1_val == 4294967039, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0xfffffeff;  op2val:0xfffffdff
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0xfffffeff, 0xfffffdff, x3, 128, x4)

inst_52:
// rs1_val == 4294967167, rs2_val == 8
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0xffffff7f;  op2val:0x8
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0xffffff7f, 0x8, x3, 132, x4)

inst_53:
// rs1_val == 4294967231, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0xffffffbf;  op2val:-0x80000000
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0xffffffbf, -0x80000000, x3, 136, x4)

inst_54:
// rs1_val == 4294967287, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0xfffffff7;  op2val:0xff7fffff
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0xfffffff7, 0xff7fffff, x3, 140, x4)

inst_55:
// rs1_val == 4294967291, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0xfffffffb;  op2val:-0x81
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0xfffffffb, -0x81, x3, 144, x4)

inst_56:
// rs1_val == 4294967293, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0xfffffffd;  op2val:0x20
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0xfffffffd, 0x20, x3, 148, x4)

inst_57:
// rs2_val == 2147483648, rs1_val == 256
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0x100;  op2val:0x80000000
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0x100, 0x80000000, x3, 152, x4)

inst_58:
// rs2_val == 536870912, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:-0x4000001;  op2val:0x20000000
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, -0x4000001, 0x20000000, x3, 156, x4)

inst_59:
// rs2_val == 268435456, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0x40000000;  op2val:0x10000000
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0x40000000, 0x10000000, x3, 160, x4)

inst_60:
// rs1_val == 1, rs2_val == 4
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:0x4
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0x1, 0x4, x3, 164, x4)

inst_61:
// rs1_val == 0x91766f62 and rs2_val == 0x5570084b 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0x91766f62;  op2val:0x5570084b
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0x91766f62, 0x5570084b, x3, 168, x4)

inst_62:
// rs1_val == 0xc0fe15dd and rs2_val == 0x9f053821 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0xc0fe15dd;  op2val:0x9f053821
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0xc0fe15dd, 0x9f053821, x3, 172, x4)

inst_63:
// rs1_val == 0xdc80d916 and rs2_val == 0x2a2a146d 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0xdc80d916;  op2val:0x2a2a146d
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0xdc80d916, 0x2a2a146d, x3, 176, x4)

inst_64:
// rs1_val == 0x952acffe and rs2_val == 0x25ae27ee 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0x952acffe;  op2val:0x25ae27ee
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0x952acffe, 0x25ae27ee, x3, 180, x4)

inst_65:
// rs1_val == 0x40a5ff52 and rs2_val == 0xb6f9706f 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0x40a5ff52;  op2val:0xb6f9706f
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0x40a5ff52, 0xb6f9706f, x3, 184, x4)

inst_66:
// rs1_val == 0xe3f4fca3 and rs2_val == 0xa6c9253a 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0xe3f4fca3;  op2val:0xa6c9253a
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0xe3f4fca3, 0xa6c9253a, x3, 188, x4)

inst_67:
// rs1_val == 0xc2f1c53e and rs2_val == 0xd05668ae 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0xc2f1c53e;  op2val:0xd05668ae
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0xc2f1c53e, 0xd05668ae, x3, 192, x4)

inst_68:
// rs1_val == 0x9722c9a6 and rs2_val == 0x7bcad7c4 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0x9722c9a6;  op2val:0x7bcad7c4
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0x9722c9a6, 0x7bcad7c4, x3, 196, x4)

inst_69:
// rs1_val == 0xf7f1305a and rs2_val == 0x9bedfe39 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0xf7f1305a;  op2val:0x9bedfe39
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0xf7f1305a, 0x9bedfe39, x3, 200, x4)

inst_70:
// rs1_val == 0xd75739f8 and rs2_val == 0xe6fff3d9 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0xd75739f8;  op2val:0xe6fff3d9
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0xd75739f8, 0xe6fff3d9, x3, 204, x4)

inst_71:
// rs1_val == 0x90efb625 and rs2_val == 0x3150e5fa 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0x90efb625;  op2val:0x3150e5fa
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0x90efb625, 0x3150e5fa, x3, 208, x4)

inst_72:
// rs1_val == 0x1fc493ca and rs2_val == 0x65408c73 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0x1fc493ca;  op2val:0x65408c73
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0x1fc493ca, 0x65408c73, x3, 212, x4)

inst_73:
// rs1_val == 0x8e2eac2a and rs2_val == 0xd169a3f8 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0x8e2eac2a;  op2val:0xd169a3f8
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0x8e2eac2a, 0xd169a3f8, x3, 216, x4)

inst_74:
// rs1_val == 0x35f9377f and rs2_val == 0xf4c30307 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0x35f9377f;  op2val:0xf4c30307
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0x35f9377f, 0xf4c30307, x3, 220, x4)

inst_75:
// rs1_val == 0x58d548aa and rs2_val == 0xa0569d76 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0x58d548aa;  op2val:0xa0569d76
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0x58d548aa, 0xa0569d76, x3, 224, x4)

inst_76:
// rs1_val == 0x55d98c6e and rs2_val == 0x2daf9ac7 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0x55d98c6e;  op2val:0x2daf9ac7
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0x55d98c6e, 0x2daf9ac7, x3, 228, x4)

inst_77:
// rs1_val == 0x74b8de87 and rs2_val == 0xf273b44c 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0x74b8de87;  op2val:0xf273b44c
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0x74b8de87, 0xf273b44c, x3, 232, x4)

inst_78:
// rs1_val == 0xccce240c and rs2_val == 0x886c3a30 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0xccce240c;  op2val:0x886c3a30
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0xccce240c, 0x886c3a30, x3, 236, x4)

inst_79:
// rs1_val == 0xb49c83dc and rs2_val == 0xbb61a9cd 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0xb49c83dc;  op2val:0xbb61a9cd
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0xb49c83dc, 0xbb61a9cd, x3, 240, x4)

inst_80:
// rs2_val == 134217728, rs1_val == 512
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0x200;  op2val:0x8000000
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0x200, 0x8000000, x3, 244, x4)

inst_81:
// rs2_val == 33554432, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:-0x2001;  op2val:0x2000000
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, -0x2001, 0x2000000, x3, 248, x4)

inst_82:
// rs2_val == 16777216, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaaa;  op2val:0x1000000
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0xaaaaaaaa, 0x1000000, x3, 252, x4)

inst_83:
// rs2_val == 8388608, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0x20;  op2val:0x800000
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0x20, 0x800000, x3, 256, x4)

inst_84:
// rs2_val == 4194304, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0xdfffffff;  op2val:0x400000
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0xdfffffff, 0x400000, x3, 260, x4)

inst_85:
// rs2_val == 2097152, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:-0x5;  op2val:0x200000
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, -0x5, 0x200000, x3, 264, x4)

inst_86:
// rs2_val == 1048576, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:-0xa;  op2val:0x100000
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, -0xa, 0x100000, x3, 268, x4)

inst_87:
// rs2_val == 524288, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:-0x11;  op2val:0x80000
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, -0x11, 0x80000, x3, 272, x4)

inst_88:
// rs2_val == 65536, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:-0x40000000;  op2val:0x10000
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, -0x40000000, 0x10000, x3, 276, x4)

inst_89:
// rs2_val == 32768, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:-0x40001;  op2val:0x8000
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, -0x40001, 0x8000, x3, 280, x4)

inst_90:
// rs2_val == 16384, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:-0x4000001;  op2val:0x4000
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, -0x4000001, 0x4000, x3, 284, x4)

inst_91:
// rs2_val == 8192, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0xc;  op2val:0x2000
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0xc, 0x2000, x3, 288, x4)

inst_92:
// rs2_val == 4096, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:0x1000
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0x1, 0x1000, x3, 292, x4)

inst_93:
// rs2_val == 2048, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:0x800
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0x10000, 0x800, x3, 296, x4)

inst_94:
// rs2_val == 512, rs1_val == 4194304
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0x400000;  op2val:0x200
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0x400000, 0x200, x3, 300, x4)

inst_95:
// rs2_val == 256, rs1_val == 1024
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0x400;  op2val:0x100
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0x400, 0x100, x3, 304, x4)

inst_96:
// rs2_val == 128, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaaa;  op2val:0x80
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0xaaaaaaaa, 0x80, x3, 308, x4)

inst_97:
// rs2_val == 64, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:-0x1;  op2val:0x40
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, -0x1, 0x40, x3, 312, x4)

inst_98:
// rs2_val == 16, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0x7fffffff;  op2val:0x10
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0x7fffffff, 0x10, x3, 316, x4)

inst_99:
// rs2_val == 2, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0xffdfffff;  op2val:0x2
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0xffdfffff, 0x2, x3, 320, x4)

inst_100:
// rs2_val == 1, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x1
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0x5, 0x1, x3, 324, x4)

inst_101:
// rs1_val == 2147483648, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0x80000000;  op2val:-0x55555556
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0x80000000, -0x55555556, x3, 328, x4)

inst_102:
// rs1_val == 536870912, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0x20000000;  op2val:0x0
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0x20000000, 0x0, x3, 332, x4)

inst_103:
// rs1_val == 134217728, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0x8000000;  op2val:0x5
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0x8000000, 0x5, x3, 336, x4)

inst_104:
// rs1_val == 33554432, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0x2000000;  op2val:0x20000
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0x2000000, 0x20000, x3, 340, x4)

inst_105:
// rs1_val == 16777216, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0x1000000;  op2val:0x400000
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0x1000000, 0x400000, x3, 344, x4)

inst_106:
// rs1_val == 2097152, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0x200000;  op2val:0x200000
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0x200000, 0x200000, x3, 348, x4)

inst_107:
// rs1_val == 1048576, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0x100000;  op2val:0x800
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0x100000, 0x800, x3, 352, x4)

inst_108:
// rs1_val == 524288, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0x80000;  op2val:0xa
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0x80000, 0xa, x3, 356, x4)

inst_109:
// rs1_val == 262144, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0x40000;  op2val:0x100
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0x40000, 0x100, x3, 360, x4)

inst_110:
// rs1_val == 131072, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0x20000;  op2val:0x6
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0x20000, 0x6, x3, 364, x4)

inst_111:
// rs1_val == 32768, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0x8000;  op2val:0x8
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0x8000, 0x8, x3, 368, x4)

inst_112:
// rs1_val == 16384, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0x4000;  op2val:0xfdffffff
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0x4000, 0xfdffffff, x3, 372, x4)

inst_113:
// rs1_val == 4096, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0x1000;  op2val:0xdfffffff
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0x1000, 0xdfffffff, x3, 376, x4)

inst_114:
// rs1_val == 2048, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0x800;  op2val:0xa
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0x800, 0xa, x3, 380, x4)

inst_115:
// rs1_val == 64, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0x40;  op2val:0xffffff7f
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0x40, 0xffffff7f, x3, 384, x4)

inst_116:
// rs1_val == 16, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0x10;  op2val:0xfffffdff
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0x10, 0xfffffdff, x3, 388, x4)

inst_117:
// rs1_val == 8, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0x8;  op2val:0x40000
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0x8, 0x40000, x3, 392, x4)

inst_118:
// rs1_val == 2, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x9
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0x2, 0x9, x3, 396, x4)

inst_119:
// rs2_val == 4026531839, rs1_val == 8388608
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0x800000;  op2val:0xefffffff
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0x800000, 0xefffffff, x3, 400, x4)

inst_120:
// rs2_val == 4294967263, 
// opcode: sha512sig1l ; op1:x10; op2:x11; dest:x12; op1val:0xd;  op2val:0xffffffdf
TEST_RR_OP(sha512sig1l, x12, x10, x11, 0x00000000, 0xd, 0xffffffdf, x3, 404, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x5_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x5_1:
    .fill 19*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 102*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
