// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.4.5
// timestamp : Thu May 20 05:54:26 2021 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv-ctg/sample_cgfs/rv32i_k.cgf \
//                  --base-isa rv32i \
//                  --randomize
// -----------
//
// -----------
// Copyright (c) 2021. Indian Institute of Technology Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sha256sig0 instruction of the RISC-V  extension for the sha256sig0 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IK")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)

RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*ZKn.*);def TEST_CASE_1=True;",sha256sig0)

RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*ZKnh.*);def TEST_CASE_1=True;",sha256sig0)

RVTEST_SIGBASE( x15,signature_x15_1)

inst_0:
// rs1 != rd, rs1==x28, rd==x23, rs1_val == 0x254a9493 
// opcode: sha256sig0 ; op1:x28; dest:x23; op1val:0x254a9493;
li x28, 0x254a9493
sha256sig0 x23, x28
sw x23, 0(x15)
RVMODEL_IO_ASSERT_GPR_EQ(x14, x23, 0x00000000)

inst_1:
// rs1 == rd, rs1==x24, rd==x24, rs1_val == 2147483647, 
// opcode: sha256sig0 ; op1:x24; dest:x24; op1val:0x7fffffff;
li x24, 0x7fffffff
sha256sig0 x24, x24
sw x24, 4(x15)
RVMODEL_IO_ASSERT_GPR_EQ(x14, x24, 0x00000000)

inst_2:
// rs1==x23, rd==x10, rs1_val == 3221225471, 
// opcode: sha256sig0 ; op1:x23; dest:x10; op1val:0xbfffffff;
li x23, 0xbfffffff
sha256sig0 x10, x23
sw x10, 8(x15)
RVMODEL_IO_ASSERT_GPR_EQ(x14, x10, 0x00000000)

inst_3:
// rs1==x5, rd==x7, rs1_val == 3758096383, 
// opcode: sha256sig0 ; op1:x5; dest:x7; op1val:0xdfffffff;
li x5, 0xdfffffff
sha256sig0 x7, x5
sw x7, 12(x15)
RVMODEL_IO_ASSERT_GPR_EQ(x14, x7, 0x00000000)

inst_4:
// rs1==x25, rd==x31, rs1_val == 4026531839, 
// opcode: sha256sig0 ; op1:x25; dest:x31; op1val:0xefffffff;
li x25, 0xefffffff
sha256sig0 x31, x25
sw x31, 16(x15)
RVMODEL_IO_ASSERT_GPR_EQ(x14, x31, 0x00000000)

inst_5:
// rs1==x4, rd==x1, rs1_val == 4160749567, 
// opcode: sha256sig0 ; op1:x4; dest:x1; op1val:0xf7ffffff;
li x4, 0xf7ffffff
sha256sig0 x1, x4
sw x1, 20(x15)
RVMODEL_IO_ASSERT_GPR_EQ(x14, x1, 0x00000000)

inst_6:
// rs1==x10, rd==x29, rs1_val == 4227858431, 
// opcode: sha256sig0 ; op1:x10; dest:x29; op1val:0xfbffffff;
li x10, 0xfbffffff
sha256sig0 x29, x10
sw x29, 24(x15)
RVMODEL_IO_ASSERT_GPR_EQ(x14, x29, 0x00000000)

inst_7:
// rs1==x17, rd==x26, rs1_val == 4261412863, 
// opcode: sha256sig0 ; op1:x17; dest:x26; op1val:0xfdffffff;
li x17, 0xfdffffff
sha256sig0 x26, x17
sw x26, 28(x15)
RVMODEL_IO_ASSERT_GPR_EQ(x14, x26, 0x00000000)

inst_8:
// rs1==x0, rd==x8, rs1_val == 4278190079, 
// opcode: sha256sig0 ; op1:x0; dest:x8; op1val:0x0;
li x0, 0x0
sha256sig0 x8, x0
sw x8, 32(x15)
RVMODEL_IO_ASSERT_GPR_EQ(x14, x8, 0x00000000)

inst_9:
// rs1==x9, rd==x5, rs1_val == 4286578687, 
// opcode: sha256sig0 ; op1:x9; dest:x5; op1val:0xff7fffff;
li x9, 0xff7fffff
sha256sig0 x5, x9
sw x5, 36(x15)
RVMODEL_IO_ASSERT_GPR_EQ(x14, x5, 0x00000000)

inst_10:
// rs1==x7, rd==x0, rs1_val == 4290772991, 
// opcode: sha256sig0 ; op1:x7; dest:x0; op1val:0xffbfffff;
li x7, 0xffbfffff
sha256sig0 x0, x7
sw x0, 40(x15)
RVMODEL_IO_ASSERT_GPR_EQ(x14, x0, 0x00000000)

inst_11:
// rs1==x19, rd==x20, rs1_val == 4292870143, 
// opcode: sha256sig0 ; op1:x19; dest:x20; op1val:0xffdfffff;
li x19, 0xffdfffff
sha256sig0 x20, x19
sw x20, 44(x15)
RVMODEL_IO_ASSERT_GPR_EQ(x14, x20, 0x00000000)

inst_12:
// rs1==x3, rd==x13, rs1_val == 4293918719, 
// opcode: sha256sig0 ; op1:x3; dest:x13; op1val:0xffefffff;
li x3, 0xffefffff
sha256sig0 x13, x3
sw x13, 48(x15)
RVMODEL_IO_ASSERT_GPR_EQ(x14, x13, 0x00000000)

inst_13:
// rs1==x26, rd==x9, rs1_val == 4294443007, 
// opcode: sha256sig0 ; op1:x26; dest:x9; op1val:0xfff7ffff;
li x26, 0xfff7ffff
sha256sig0 x9, x26
sw x9, 52(x15)
RVMODEL_IO_ASSERT_GPR_EQ(x14, x9, 0x00000000)

inst_14:
// rs1==x22, rd==x30, rs1_val == 4294705151, 
// opcode: sha256sig0 ; op1:x22; dest:x30; op1val:0xfffbffff;
li x22, 0xfffbffff
sha256sig0 x30, x22
sw x30, 56(x15)
RVMODEL_IO_ASSERT_GPR_EQ(x14, x30, 0x00000000)

inst_15:
// rs1==x6, rd==x12, rs1_val == 4294836223, 
// opcode: sha256sig0 ; op1:x6; dest:x12; op1val:0xfffdffff;
li x6, 0xfffdffff
sha256sig0 x12, x6
sw x12, 60(x15)
RVMODEL_IO_ASSERT_GPR_EQ(x14, x12, 0x00000000)

inst_16:
// rs1==x11, rd==x16, rs1_val == 4294901759, 
// opcode: sha256sig0 ; op1:x11; dest:x16; op1val:0xfffeffff;
li x11, 0xfffeffff
sha256sig0 x16, x11
sw x16, 64(x15)
RVMODEL_IO_ASSERT_GPR_EQ(x14, x16, 0x00000000)

inst_17:
// rs1==x31, rd==x2, rs1_val == 4294934527, 
// opcode: sha256sig0 ; op1:x31; dest:x2; op1val:0xffff7fff;
li x31, 0xffff7fff
sha256sig0 x2, x31
sw x2, 68(x15)
RVMODEL_IO_ASSERT_GPR_EQ(x14, x2, 0x00000000)

inst_18:
// rs1==x20, rd==x25, rs1_val == 4294950911, 
// opcode: sha256sig0 ; op1:x20; dest:x25; op1val:0xffffbfff;
li x20, 0xffffbfff
sha256sig0 x25, x20
sw x25, 72(x15)
RVMODEL_IO_ASSERT_GPR_EQ(x14, x25, 0x00000000)

inst_19:
// rs1==x18, rd==x17, rs1_val == 4294959103, 
// opcode: sha256sig0 ; op1:x18; dest:x17; op1val:0xffffdfff;
li x18, 0xffffdfff
sha256sig0 x17, x18
sw x17, 76(x15)
RVMODEL_IO_ASSERT_GPR_EQ(x14, x17, 0x00000000)

inst_20:
// rs1==x16, rd==x18, rs1_val == 4294963199, 
// opcode: sha256sig0 ; op1:x16; dest:x18; op1val:0xffffefff;
li x16, 0xffffefff
sha256sig0 x18, x16
sw x18, 80(x15)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x18, 0x00000000)

inst_21:
// rs1==x13, rd==x11, rs1_val == 4294965247, 
// opcode: sha256sig0 ; op1:x13; dest:x11; op1val:0xfffff7ff;
li x13, 0xfffff7ff
sha256sig0 x11, x13
sw x11, 84(x15)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)

inst_22:
// rs1==x14, rd==x6, rs1_val == 4294966271, 
// opcode: sha256sig0 ; op1:x14; dest:x6; op1val:0xfffffbff;
li x14, 0xfffffbff
sha256sig0 x6, x14
sw x6, 88(x15)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x6, 0x00000000)
RVTEST_SIGBASE( x5,signature_x5_0)

inst_23:
// rs1==x30, rd==x22, rs1_val == 4294966783, 
// opcode: sha256sig0 ; op1:x30; dest:x22; op1val:0xfffffdff;
li x30, 0xfffffdff
sha256sig0 x22, x30
sw x22, 0(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x22, 0x00000000)

inst_24:
// rs1==x21, rd==x28, rs1_val == 4294967039, 
// opcode: sha256sig0 ; op1:x21; dest:x28; op1val:0xfffffeff;
li x21, 0xfffffeff
sha256sig0 x28, x21
sw x28, 4(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x28, 0x00000000)

inst_25:
// rs1==x15, rd==x21, rs1_val == 4294967167, 
// opcode: sha256sig0 ; op1:x15; dest:x21; op1val:0xffffff7f;
li x15, 0xffffff7f
sha256sig0 x21, x15
sw x21, 8(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x21, 0x00000000)

inst_26:
// rs1==x2, rd==x27, rs1_val == 4294967231, 
// opcode: sha256sig0 ; op1:x2; dest:x27; op1val:0xffffffbf;
li x2, 0xffffffbf
sha256sig0 x27, x2
sw x27, 12(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x27, 0x00000000)

inst_27:
// rs1==x12, rd==x15, rs1_val == 4294967263, 
// opcode: sha256sig0 ; op1:x12; dest:x15; op1val:0xffffffdf;
li x12, 0xffffffdf
sha256sig0 x15, x12
sw x15, 16(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x15, 0x00000000)

inst_28:
// rs1==x8, rd==x14, rs1_val == 4294967279, 
// opcode: sha256sig0 ; op1:x8; dest:x14; op1val:0xffffffef;
li x8, 0xffffffef
sha256sig0 x14, x8
sw x14, 20(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x14, 0x00000000)

inst_29:
// rs1==x27, rd==x4, rs1_val == 4294967287, 
// opcode: sha256sig0 ; op1:x27; dest:x4; op1val:0xfffffff7;
li x27, 0xfffffff7
sha256sig0 x4, x27
sw x4, 24(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x4, 0x00000000)

inst_30:
// rs1==x29, rd==x19, rs1_val == 4294967291, 
// opcode: sha256sig0 ; op1:x29; dest:x19; op1val:0xfffffffb;
li x29, 0xfffffffb
sha256sig0 x19, x29
sw x19, 28(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x19, 0x00000000)

inst_31:
// rs1==x1, rd==x3, rs1_val == 4294967293, 
// opcode: sha256sig0 ; op1:x1; dest:x3; op1val:0xfffffffd;
li x1, 0xfffffffd
sha256sig0 x3, x1
sw x3, 32(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x3, 0x00000000)

inst_32:
// rs1_val == 4294967294, 
// opcode: sha256sig0 ; op1:x10; dest:x11; op1val:0xfffffffe;
li x10, 0xfffffffe
sha256sig0 x11, x10
sw x11, 36(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)

inst_33:
// rs1_val == 2147483648, 
// opcode: sha256sig0 ; op1:x10; dest:x11; op1val:0x80000000;
li x10, 0x80000000
sha256sig0 x11, x10
sw x11, 40(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)

inst_34:
// rs1_val == 1073741824, 
// opcode: sha256sig0 ; op1:x10; dest:x11; op1val:0x40000000;
li x10, 0x40000000
sha256sig0 x11, x10
sw x11, 44(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)

inst_35:
// rs1_val == 536870912, 
// opcode: sha256sig0 ; op1:x10; dest:x11; op1val:0x20000000;
li x10, 0x20000000
sha256sig0 x11, x10
sw x11, 48(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)

inst_36:
// rs1_val == 268435456, 
// opcode: sha256sig0 ; op1:x10; dest:x11; op1val:0x10000000;
li x10, 0x10000000
sha256sig0 x11, x10
sw x11, 52(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)

inst_37:
// rs1_val == 134217728, 
// opcode: sha256sig0 ; op1:x10; dest:x11; op1val:0x8000000;
li x10, 0x8000000
sha256sig0 x11, x10
sw x11, 56(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)

inst_38:
// rs1_val == 67108864, 
// opcode: sha256sig0 ; op1:x10; dest:x11; op1val:0x4000000;
li x10, 0x4000000
sha256sig0 x11, x10
sw x11, 60(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)

inst_39:
// rs1_val == 33554432, 
// opcode: sha256sig0 ; op1:x10; dest:x11; op1val:0x2000000;
li x10, 0x2000000
sha256sig0 x11, x10
sw x11, 64(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)

inst_40:
// rs1_val == 16777216, 
// opcode: sha256sig0 ; op1:x10; dest:x11; op1val:0x1000000;
li x10, 0x1000000
sha256sig0 x11, x10
sw x11, 68(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)

inst_41:
// rs1_val == 8388608, 
// opcode: sha256sig0 ; op1:x10; dest:x11; op1val:0x800000;
li x10, 0x800000
sha256sig0 x11, x10
sw x11, 72(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)

inst_42:
// rs1_val == 4194304, 
// opcode: sha256sig0 ; op1:x10; dest:x11; op1val:0x400000;
li x10, 0x400000
sha256sig0 x11, x10
sw x11, 76(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)

inst_43:
// rs1_val == 2097152, 
// opcode: sha256sig0 ; op1:x10; dest:x11; op1val:0x200000;
li x10, 0x200000
sha256sig0 x11, x10
sw x11, 80(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)

inst_44:
// rs1_val == 1048576, 
// opcode: sha256sig0 ; op1:x10; dest:x11; op1val:0x100000;
li x10, 0x100000
sha256sig0 x11, x10
sw x11, 84(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)

inst_45:
// rs1_val == 524288, 
// opcode: sha256sig0 ; op1:x10; dest:x11; op1val:0x80000;
li x10, 0x80000
sha256sig0 x11, x10
sw x11, 88(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)

inst_46:
// rs1_val == 262144, 
// opcode: sha256sig0 ; op1:x10; dest:x11; op1val:0x40000;
li x10, 0x40000
sha256sig0 x11, x10
sw x11, 92(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)

inst_47:
// rs1_val == 131072, 
// opcode: sha256sig0 ; op1:x10; dest:x11; op1val:0x20000;
li x10, 0x20000
sha256sig0 x11, x10
sw x11, 96(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)

inst_48:
// rs1_val == 65536, 
// opcode: sha256sig0 ; op1:x10; dest:x11; op1val:0x10000;
li x10, 0x10000
sha256sig0 x11, x10
sw x11, 100(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)

inst_49:
// rs1_val == 32768, 
// opcode: sha256sig0 ; op1:x10; dest:x11; op1val:0x8000;
li x10, 0x8000
sha256sig0 x11, x10
sw x11, 104(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)

inst_50:
// rs1_val == 16384, 
// opcode: sha256sig0 ; op1:x10; dest:x11; op1val:0x4000;
li x10, 0x4000
sha256sig0 x11, x10
sw x11, 108(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)

inst_51:
// rs1_val == 8192, 
// opcode: sha256sig0 ; op1:x10; dest:x11; op1val:0x2000;
li x10, 0x2000
sha256sig0 x11, x10
sw x11, 112(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)

inst_52:
// rs1_val == 4096, 
// opcode: sha256sig0 ; op1:x10; dest:x11; op1val:0x1000;
li x10, 0x1000
sha256sig0 x11, x10
sw x11, 116(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)

inst_53:
// rs1_val == 1, 
// opcode: sha256sig0 ; op1:x10; dest:x11; op1val:0x1;
li x10, 0x1
sha256sig0 x11, x10
sw x11, 120(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)

inst_54:
// rs1_val == 0x3150e5fa 
// opcode: sha256sig0 ; op1:x10; dest:x11; op1val:0x3150e5fa;
li x10, 0x3150e5fa
sha256sig0 x11, x10
sw x11, 124(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)

inst_55:
// rs1_val == 0x90efb625 
// opcode: sha256sig0 ; op1:x10; dest:x11; op1val:0x90efb625;
li x10, 0x90efb625
sha256sig0 x11, x10
sw x11, 128(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)

inst_56:
// rs1_val == 0x65408c73 
// opcode: sha256sig0 ; op1:x10; dest:x11; op1val:0x65408c73;
li x10, 0x65408c73
sha256sig0 x11, x10
sw x11, 132(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)

inst_57:
// rs1_val == 0x1fc493ca 
// opcode: sha256sig0 ; op1:x10; dest:x11; op1val:0x1fc493ca;
li x10, 0x1fc493ca
sha256sig0 x11, x10
sw x11, 136(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)

inst_58:
// rs1_val == 0xd169a3f8 
// opcode: sha256sig0 ; op1:x10; dest:x11; op1val:0xd169a3f8;
li x10, 0xd169a3f8
sha256sig0 x11, x10
sw x11, 140(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)

inst_59:
// rs1_val == 0x8e2eac2a 
// opcode: sha256sig0 ; op1:x10; dest:x11; op1val:0x8e2eac2a;
li x10, 0x8e2eac2a
sha256sig0 x11, x10
sw x11, 144(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)

inst_60:
// rs1_val == 0xf4c30307 
// opcode: sha256sig0 ; op1:x10; dest:x11; op1val:0xf4c30307;
li x10, 0xf4c30307
sha256sig0 x11, x10
sw x11, 148(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)

inst_61:
// rs1_val == 0x35f9377f 
// opcode: sha256sig0 ; op1:x10; dest:x11; op1val:0x35f9377f;
li x10, 0x35f9377f
sha256sig0 x11, x10
sw x11, 152(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)

inst_62:
// rs1_val == 0xa0569d76 
// opcode: sha256sig0 ; op1:x10; dest:x11; op1val:0xa0569d76;
li x10, 0xa0569d76
sha256sig0 x11, x10
sw x11, 156(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)

inst_63:
// rs1_val == 0x58d548aa 
// opcode: sha256sig0 ; op1:x10; dest:x11; op1val:0x58d548aa;
li x10, 0x58d548aa
sha256sig0 x11, x10
sw x11, 160(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)

inst_64:
// rs1_val == 0x2daf9ac7 
// opcode: sha256sig0 ; op1:x10; dest:x11; op1val:0x2daf9ac7;
li x10, 0x2daf9ac7
sha256sig0 x11, x10
sw x11, 164(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)

inst_65:
// rs1_val == 0x55d98c6e 
// opcode: sha256sig0 ; op1:x10; dest:x11; op1val:0x55d98c6e;
li x10, 0x55d98c6e
sha256sig0 x11, x10
sw x11, 168(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)

inst_66:
// rs1_val == 0xf273b44c 
// opcode: sha256sig0 ; op1:x10; dest:x11; op1val:0xf273b44c;
li x10, 0xf273b44c
sha256sig0 x11, x10
sw x11, 172(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)

inst_67:
// rs1_val == 0x74b8de87 
// opcode: sha256sig0 ; op1:x10; dest:x11; op1val:0x74b8de87;
li x10, 0x74b8de87
sha256sig0 x11, x10
sw x11, 176(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)

inst_68:
// rs1_val == 0x886c3a30 
// opcode: sha256sig0 ; op1:x10; dest:x11; op1val:0x886c3a30;
li x10, 0x886c3a30
sha256sig0 x11, x10
sw x11, 180(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)

inst_69:
// rs1_val == 0xccce240c 
// opcode: sha256sig0 ; op1:x10; dest:x11; op1val:0xccce240c;
li x10, 0xccce240c
sha256sig0 x11, x10
sw x11, 184(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)

inst_70:
// rs1_val == 0xbb61a9cd 
// opcode: sha256sig0 ; op1:x10; dest:x11; op1val:0xbb61a9cd;
li x10, 0xbb61a9cd
sha256sig0 x11, x10
sw x11, 188(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)

inst_71:
// rs1_val == 0xb49c83dc 
// opcode: sha256sig0 ; op1:x10; dest:x11; op1val:0xb49c83dc;
li x10, 0xb49c83dc
sha256sig0 x11, x10
sw x11, 192(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)

inst_72:
// rs1_val == 0xc5521660 
// opcode: sha256sig0 ; op1:x10; dest:x11; op1val:0xc5521660;
li x10, 0xc5521660
sha256sig0 x11, x10
sw x11, 196(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)

inst_73:
// rs1_val == 2048, 
// opcode: sha256sig0 ; op1:x10; dest:x11; op1val:0x800;
li x10, 0x800
sha256sig0 x11, x10
sw x11, 200(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)

inst_74:
// rs1_val == 1024, 
// opcode: sha256sig0 ; op1:x10; dest:x11; op1val:0x400;
li x10, 0x400
sha256sig0 x11, x10
sw x11, 204(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)

inst_75:
// rs1_val == 512, 
// opcode: sha256sig0 ; op1:x10; dest:x11; op1val:0x200;
li x10, 0x200
sha256sig0 x11, x10
sw x11, 208(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)

inst_76:
// rs1_val == 256, 
// opcode: sha256sig0 ; op1:x10; dest:x11; op1val:0x100;
li x10, 0x100
sha256sig0 x11, x10
sw x11, 212(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)

inst_77:
// rs1_val == 128, 
// opcode: sha256sig0 ; op1:x10; dest:x11; op1val:0x80;
li x10, 0x80
sha256sig0 x11, x10
sw x11, 216(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)

inst_78:
// rs1_val == 64, 
// opcode: sha256sig0 ; op1:x10; dest:x11; op1val:0x40;
li x10, 0x40
sha256sig0 x11, x10
sw x11, 220(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)

inst_79:
// rs1_val == 32, 
// opcode: sha256sig0 ; op1:x10; dest:x11; op1val:0x20;
li x10, 0x20
sha256sig0 x11, x10
sw x11, 224(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)

inst_80:
// rs1_val == 16, 
// opcode: sha256sig0 ; op1:x10; dest:x11; op1val:0x10;
li x10, 0x10
sha256sig0 x11, x10
sw x11, 228(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)

inst_81:
// rs1_val == 8, 
// opcode: sha256sig0 ; op1:x10; dest:x11; op1val:0x8;
li x10, 0x8
sha256sig0 x11, x10
sw x11, 232(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)

inst_82:
// rs1_val == 4, 
// opcode: sha256sig0 ; op1:x10; dest:x11; op1val:0x4;
li x10, 0x4
sha256sig0 x11, x10
sw x11, 236(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)

inst_83:
// rs1_val == 2, 
// opcode: sha256sig0 ; op1:x10; dest:x11; op1val:0x2;
li x10, 0x2
sha256sig0 x11, x10
sw x11, 240(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)

inst_84:
// rs1_val == 4278190079, 
// opcode: sha256sig0 ; op1:x10; dest:x11; op1val:0xfeffffff;
li x10, 0xfeffffff
sha256sig0 x11, x10
sw x11, 244(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)

inst_85:
// rs1_val == 4290772991, 
// opcode: sha256sig0 ; op1:x10; dest:x11; op1val:0xffbfffff;
li x10, 0xffbfffff
sha256sig0 x11, x10
sw x11, 248(x5)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x00000000)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 23*(XLEN/32),4,0xdeadbeef


signature_x5_0:
    .fill 63*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
