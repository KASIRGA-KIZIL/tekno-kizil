// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.5.1
// timestamp : Thu Aug 12 11:32:17 2021 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv-ctg/sample_cgfs/rv32i_k.cgf \
//                  --base-isa rv32i \
//                  --randomize
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the aes32dsmi instruction of the RISC-V K extension for the aes32dsmi covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IK")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*RV32.*I.*K.*);def TEST_CASE_1=True;",aes32dsmi)

RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*RV32.*I.*ZKn.*);def TEST_CASE_1=True;",aes32dsmi)

RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*RV32.*I.*ZKnd.*);def TEST_CASE_1=True;",aes32dsmi)

RVTEST_SIGBASE( x12,signature_x12_1)

inst_0:
// rs2 == rd != rs1, rs1==x0, rs2==x16, rd==x16, rs1_val == 0 and rs2_val == 0x03020100 and imm_val == 0 
// opcode: aes32dsmi; rd: x16; op1:x0; op2:x16; op1val:0x0; op2val:0x3020100; immval:0x0
TEST_RI_OP(aes32dsmi, x16, x0, x16, 0x0, 0x00000000, 0x0, 0x3020100, x12, 0, x13)

inst_1:
// rs1 == rs2 == rd, rs1==x14, rs2==x14, rd==x14, rs1_val == 0x3fb0fe60 and rs2_val == 0x1826a804 and imm_val == 0x1 
// opcode: aes32dsmi; rd: x14; op1:x14; op2:x14; op1val:0x3fb0fe60; op2val:0x3fb0fe60; immval:0x1
TEST_RI_OP(aes32dsmi, x14, x14, x14, 0x1, 0x00000000, 0x3fb0fe60, 0x3fb0fe60, x12, 4, x13)

inst_2:
// rs1 == rd != rs2, rs1==x7, rs2==x15, rd==x7, rs1_val == 0xb369e102 and rs2_val == 0x293f9f60 and imm_val == 0x3 
// opcode: aes32dsmi; rd: x7; op1:x7; op2:x15; op1val:0xb369e102; op2val:0x293f9f60; immval:0x3
TEST_RI_OP(aes32dsmi, x7, x7, x15, 0x3, 0x00000000, 0xb369e102, 0x293f9f60, x12, 8, x13)

inst_3:
// rs1 == rs2 != rd, rs1==x25, rs2==x25, rd==x23, rs1_val == 0x1aa1beeb and rs2_val == 0xa4b7f979 and imm_val == 0x0 
// opcode: aes32dsmi; rd: x23; op1:x25; op2:x25; op1val:0x1aa1beeb; op2val:0x1aa1beeb; immval:0x0
TEST_RI_OP(aes32dsmi, x23, x25, x25, 0x0, 0x00000000, 0x1aa1beeb, 0x1aa1beeb, x12, 12, x13)

inst_4:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x4, rs2==x18, rd==x25, rs1_val == 0x8678f5e3 and rs2_val == 0x358a9235 and imm_val == 0x3 
// opcode: aes32dsmi; rd: x25; op1:x4; op2:x18; op1val:0x8678f5e3; op2val:0x358a9235; immval:0x3
TEST_RI_OP(aes32dsmi, x25, x4, x18, 0x3, 0x00000000, 0x8678f5e3, 0x358a9235, x12, 16, x13)

inst_5:
// rs1==x18, rs2==x20, rd==x4, rs1_val == 0x74a813d2 and rs2_val == 0xb0873a0f and imm_val == 0x3 
// opcode: aes32dsmi; rd: x4; op1:x18; op2:x20; op1val:0x74a813d2; op2val:0xb0873a0f; immval:0x3
TEST_RI_OP(aes32dsmi, x4, x18, x20, 0x3, 0x00000000, 0x74a813d2, 0xb0873a0f, x12, 20, x13)

inst_6:
// rs1==x31, rs2==x30, rd==x9, rs1_val == 0x9f053821 and rs2_val == 0x91766f62 and imm_val == 0x2 
// opcode: aes32dsmi; rd: x9; op1:x31; op2:x30; op1val:0x9f053821; op2val:0x91766f62; immval:0x2
TEST_RI_OP(aes32dsmi, x9, x31, x30, 0x2, 0x00000000, 0x9f053821, 0x91766f62, x12, 24, x13)

inst_7:
// rs1==x8, rs2==x3, rd==x29, rs1_val == 0xdc80d916 and rs2_val == 0x2a2a146d and imm_val == 0x2 
// opcode: aes32dsmi; rd: x29; op1:x8; op2:x3; op1val:0xdc80d916; op2val:0x2a2a146d; immval:0x2
TEST_RI_OP(aes32dsmi, x29, x8, x3, 0x2, 0x00000000, 0xdc80d916, 0x2a2a146d, x12, 28, x13)

inst_8:
// rs1==x22, rs2==x29, rd==x0, rs1_val == 0xcd157633 and rs2_val == 0x4113ee60 and imm_val == 0x0 
// opcode: aes32dsmi; rd: x0; op1:x22; op2:x29; op1val:0xcd157633; op2val:0x4113ee60; immval:0x0
TEST_RI_OP(aes32dsmi, x0, x22, x29, 0x0, 0x00000000, 0xcd157633, 0x4113ee60, x12, 32, x13)

inst_9:
// rs1==x23, rs2==x0, rd==x17, rs1_val == 0xe3f4fca3 and rs2_val == 0xa6c9253a and imm_val == 0x2 
// opcode: aes32dsmi; rd: x17; op1:x23; op2:x0; op1val:0xe3f4fca3; op2val:0x0; immval:0x2
TEST_RI_OP(aes32dsmi, x17, x23, x0, 0x2, 0x00000000, 0xe3f4fca3, 0x0, x12, 36, x13)

inst_10:
// rs1==x17, rs2==x7, rd==x24, rs1_val == 0x7bcad7c4 and rs2_val == 0xc2f1c53e and imm_val == 0x0 
// opcode: aes32dsmi; rd: x24; op1:x17; op2:x7; op1val:0x7bcad7c4; op2val:0xc2f1c53e; immval:0x0
TEST_RI_OP(aes32dsmi, x24, x17, x7, 0x0, 0x00000000, 0x7bcad7c4, 0xc2f1c53e, x12, 40, x13)

inst_11:
// rs1==x5, rs2==x8, rd==x15, rs1_val == 0x633dbabc and rs2_val == 0xb6c4fd42 and imm_val == 0x2 
// opcode: aes32dsmi; rd: x15; op1:x5; op2:x8; op1val:0x633dbabc; op2val:0xb6c4fd42; immval:0x2
TEST_RI_OP(aes32dsmi, x15, x5, x8, 0x2, 0x00000000, 0x633dbabc, 0xb6c4fd42, x12, 44, x13)

inst_12:
// rs1==x6, rs2==x19, rd==x21, rs1_val == 0x299c3bcf and rs2_val == 0xaa6bb2bd and imm_val == 0x3 
// opcode: aes32dsmi; rd: x21; op1:x6; op2:x19; op1val:0x299c3bcf; op2val:0xaa6bb2bd; immval:0x3
TEST_RI_OP(aes32dsmi, x21, x6, x19, 0x3, 0x00000000, 0x299c3bcf, 0xaa6bb2bd, x12, 48, x13)

inst_13:
// rs1==x21, rs2==x2, rd==x3, rs1_val == 0xa371db42 and rs2_val == 0x2e3ee8c4 and imm_val == 0x3 
// opcode: aes32dsmi; rd: x3; op1:x21; op2:x2; op1val:0xa371db42; op2val:0x2e3ee8c4; immval:0x3
TEST_RI_OP(aes32dsmi, x3, x21, x2, 0x3, 0x00000000, 0xa371db42, 0x2e3ee8c4, x12, 52, x13)

inst_14:
// rs1==x16, rs2==x1, rd==x10, rs1_val == 0x8e2eac2a and rs2_val == 0xd169a3f8 and imm_val == 0x1 
// opcode: aes32dsmi; rd: x10; op1:x16; op2:x1; op1val:0x8e2eac2a; op2val:0xd169a3f8; immval:0x1
TEST_RI_OP(aes32dsmi, x10, x16, x1, 0x1, 0x00000000, 0x8e2eac2a, 0xd169a3f8, x12, 56, x13)

inst_15:
// rs1==x2, rs2==x6, rd==x30, rs1_val == 0xa0569d76 and rs2_val == 0x35f9377f and imm_val == 0x3 
// opcode: aes32dsmi; rd: x30; op1:x2; op2:x6; op1val:0xa0569d76; op2val:0x35f9377f; immval:0x3
TEST_RI_OP(aes32dsmi, x30, x2, x6, 0x3, 0x00000000, 0xa0569d76, 0x35f9377f, x12, 60, x13)

inst_16:
// rs1==x26, rs2==x28, rd==x11, rs1_val == 0x240d84d6 and rs2_val == 0xe4921bf7 and imm_val == 0x2 
// opcode: aes32dsmi; rd: x11; op1:x26; op2:x28; op1val:0x240d84d6; op2val:0xe4921bf7; immval:0x2
TEST_RI_OP(aes32dsmi, x11, x26, x28, 0x2, 0x00000000, 0x240d84d6, 0xe4921bf7, x12, 64, x13)
RVTEST_SIGBASE( x7,signature_x7_0)

inst_17:
// rs1==x11, rs2==x27, rd==x8, rs1_val == 0x3acdf616 and rs2_val == 0xfcc1b543 and imm_val == 0x1 
// opcode: aes32dsmi; rd: x8; op1:x11; op2:x27; op1val:0x3acdf616; op2val:0xfcc1b543; immval:0x1
TEST_RI_OP(aes32dsmi, x8, x11, x27, 0x1, 0x00000000, 0x3acdf616, 0xfcc1b543, x7, 0, x14)

inst_18:
// rs1==x13, rs2==x10, rd==x28, rs1_val == 0x74b8de87 and rs2_val == 0xf273b44c and imm_val == 0x2 
// opcode: aes32dsmi; rd: x28; op1:x13; op2:x10; op1val:0x74b8de87; op2val:0xf273b44c; immval:0x2
TEST_RI_OP(aes32dsmi, x28, x13, x10, 0x2, 0x00000000, 0x74b8de87, 0xf273b44c, x7, 4, x14)

inst_19:
// rs1==x1, rs2==x26, rd==x5, rs1_val == 0xbb61a9cd and rs2_val == 0xccce240c and imm_val == 0x0 
// opcode: aes32dsmi; rd: x5; op1:x1; op2:x26; op1val:0xbb61a9cd; op2val:0xccce240c; immval:0x0
TEST_RI_OP(aes32dsmi, x5, x1, x26, 0x0, 0x00000000, 0xbb61a9cd, 0xccce240c, x7, 8, x14)

inst_20:
// rs1==x24, rs2==x12, rd==x20, rs1_val == 0x254a9493 and rs2_val == 0xc5521660 and imm_val == 0x3 
// opcode: aes32dsmi; rd: x20; op1:x24; op2:x12; op1val:0x254a9493; op2val:0xc5521660; immval:0x3
TEST_RI_OP(aes32dsmi, x20, x24, x12, 0x3, 0x00000000, 0x254a9493, 0xc5521660, x7, 12, x14)

inst_21:
// rs1==x3, rs2==x4, rd==x13, rs1_val == 0 and rs2_val == 0xfffefdfc and imm_val == 3 
// opcode: aes32dsmi; rd: x13; op1:x3; op2:x4; op1val:0x0; op2val:0xfffefdfc; immval:0x3
TEST_RI_OP(aes32dsmi, x13, x3, x4, 0x3, 0x00000000, 0x0, 0xfffefdfc, x7, 16, x14)

inst_22:
// rs1==x29, rs2==x5, rd==x31, rs1_val == 0 and rs2_val == 0xfffefdfc and imm_val == 2 
// opcode: aes32dsmi; rd: x31; op1:x29; op2:x5; op1val:0x0; op2val:0xfffefdfc; immval:0x2
TEST_RI_OP(aes32dsmi, x31, x29, x5, 0x2, 0x00000000, 0x0, 0xfffefdfc, x7, 20, x14)

inst_23:
// rs1==x28, rs2==x11, rd==x18, rs1_val == 0 and rs2_val == 0xfffefdfc and imm_val == 1 
// opcode: aes32dsmi; rd: x18; op1:x28; op2:x11; op1val:0x0; op2val:0xfffefdfc; immval:0x1
TEST_RI_OP(aes32dsmi, x18, x28, x11, 0x1, 0x00000000, 0x0, 0xfffefdfc, x7, 24, x14)

inst_24:
// rs1==x10, rs2==x22, rd==x27, rs1_val == 0 and rs2_val == 0xfffefdfc and imm_val == 0 
// opcode: aes32dsmi; rd: x27; op1:x10; op2:x22; op1val:0x0; op2val:0xfffefdfc; immval:0x0
TEST_RI_OP(aes32dsmi, x27, x10, x22, 0x0, 0x00000000, 0x0, 0xfffefdfc, x7, 28, x14)

inst_25:
// rs1==x9, rs2==x23, rd==x22, rs1_val == 0 and rs2_val == 0xfbfaf9f8 and imm_val == 3 
// opcode: aes32dsmi; rd: x22; op1:x9; op2:x23; op1val:0x0; op2val:0xfbfaf9f8; immval:0x3
TEST_RI_OP(aes32dsmi, x22, x9, x23, 0x3, 0x00000000, 0x0, 0xfbfaf9f8, x7, 32, x14)

inst_26:
// rs1==x12, rs2==x31, rd==x2, rs1_val == 0 and rs2_val == 0xfbfaf9f8 and imm_val == 2 
// opcode: aes32dsmi; rd: x2; op1:x12; op2:x31; op1val:0x0; op2val:0xfbfaf9f8; immval:0x2
TEST_RI_OP(aes32dsmi, x2, x12, x31, 0x2, 0x00000000, 0x0, 0xfbfaf9f8, x7, 36, x14)

inst_27:
// rs1==x27, rs2==x21, rd==x1, rs1_val == 0 and rs2_val == 0xfbfaf9f8 and imm_val == 1 
// opcode: aes32dsmi; rd: x1; op1:x27; op2:x21; op1val:0x0; op2val:0xfbfaf9f8; immval:0x1
TEST_RI_OP(aes32dsmi, x1, x27, x21, 0x1, 0x00000000, 0x0, 0xfbfaf9f8, x7, 40, x14)

inst_28:
// rs1==x15, rs2==x17, rd==x19, rs1_val == 0 and rs2_val == 0xfbfaf9f8 and imm_val == 0 
// opcode: aes32dsmi; rd: x19; op1:x15; op2:x17; op1val:0x0; op2val:0xfbfaf9f8; immval:0x0
TEST_RI_OP(aes32dsmi, x19, x15, x17, 0x0, 0x00000000, 0x0, 0xfbfaf9f8, x7, 44, x14)

inst_29:
// rs1==x20, rs2==x24, rd==x6, rs1_val == 0 and rs2_val == 0xf7f6f5f4 and imm_val == 3 
// opcode: aes32dsmi; rd: x6; op1:x20; op2:x24; op1val:0x0; op2val:0xf7f6f5f4; immval:0x3
TEST_RI_OP(aes32dsmi, x6, x20, x24, 0x3, 0x00000000, 0x0, 0xf7f6f5f4, x7, 48, x14)

inst_30:
// rs1==x30, rs2==x9, rd==x26, rs1_val == 0 and rs2_val == 0xf7f6f5f4 and imm_val == 2 
// opcode: aes32dsmi; rd: x26; op1:x30; op2:x9; op1val:0x0; op2val:0xf7f6f5f4; immval:0x2
TEST_RI_OP(aes32dsmi, x26, x30, x9, 0x2, 0x00000000, 0x0, 0xf7f6f5f4, x7, 52, x14)

inst_31:
// rs1==x19, rs2==x13, rd==x12, rs1_val == 0 and rs2_val == 0xf7f6f5f4 and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x19; op2:x13; op1val:0x0; op2val:0xf7f6f5f4; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x19, x13, 0x1, 0x00000000, 0x0, 0xf7f6f5f4, x7, 56, x1)

inst_32:
// rs1_val == 0 and rs2_val == 0xf7f6f5f4 and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xf7f6f5f4; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0xf7f6f5f4, x7, 60, x1)

inst_33:
// rs1_val == 0 and rs2_val == 0xf3f2f1f0 and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xf3f2f1f0; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0xf3f2f1f0, x7, 64, x1)

inst_34:
// rs1_val == 0 and rs2_val == 0xf3f2f1f0 and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xf3f2f1f0; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0xf3f2f1f0, x7, 68, x1)

inst_35:
// rs1_val == 0 and rs2_val == 0xf3f2f1f0 and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xf3f2f1f0; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0xf3f2f1f0, x7, 72, x1)

inst_36:
// rs1_val == 0 and rs2_val == 0xf3f2f1f0 and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xf3f2f1f0; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0xf3f2f1f0, x7, 76, x1)

inst_37:
// rs1_val == 0 and rs2_val == 0xefeeedec and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xefeeedec; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0xefeeedec, x7, 80, x1)

inst_38:
// rs1_val == 0 and rs2_val == 0xefeeedec and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xefeeedec; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0xefeeedec, x7, 84, x1)

inst_39:
// rs1_val == 0 and rs2_val == 0xefeeedec and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xefeeedec; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0xefeeedec, x7, 88, x1)

inst_40:
// rs1_val == 0 and rs2_val == 0xefeeedec and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xefeeedec; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0xefeeedec, x7, 92, x1)

inst_41:
// rs1_val == 0 and rs2_val == 0xebeae9e8 and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xebeae9e8; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0xebeae9e8, x7, 96, x1)

inst_42:
// rs1_val == 0 and rs2_val == 0xebeae9e8 and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xebeae9e8; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0xebeae9e8, x7, 100, x1)

inst_43:
// rs1_val == 0 and rs2_val == 0xebeae9e8 and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xebeae9e8; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0xebeae9e8, x7, 104, x1)

inst_44:
// rs1_val == 0 and rs2_val == 0xebeae9e8 and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xebeae9e8; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0xebeae9e8, x7, 108, x1)

inst_45:
// rs1_val == 0 and rs2_val == 0xe7e6e5e4 and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xe7e6e5e4; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0xe7e6e5e4, x7, 112, x1)

inst_46:
// rs1_val == 0 and rs2_val == 0xe7e6e5e4 and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xe7e6e5e4; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0xe7e6e5e4, x7, 116, x1)

inst_47:
// rs1_val == 0 and rs2_val == 0xe7e6e5e4 and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xe7e6e5e4; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0xe7e6e5e4, x7, 120, x1)

inst_48:
// rs1_val == 0 and rs2_val == 0xe7e6e5e4 and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xe7e6e5e4; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0xe7e6e5e4, x7, 124, x1)

inst_49:
// rs1_val == 0 and rs2_val == 0xe3e2e1e0 and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xe3e2e1e0; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0xe3e2e1e0, x7, 128, x1)

inst_50:
// rs1_val == 0 and rs2_val == 0xe3e2e1e0 and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xe3e2e1e0; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0xe3e2e1e0, x7, 132, x1)

inst_51:
// rs1_val == 0 and rs2_val == 0xe3e2e1e0 and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xe3e2e1e0; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0xe3e2e1e0, x7, 136, x1)

inst_52:
// rs1_val == 0 and rs2_val == 0xe3e2e1e0 and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xe3e2e1e0; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0xe3e2e1e0, x7, 140, x1)

inst_53:
// rs1_val == 0 and rs2_val == 0xdfdedddc and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xdfdedddc; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0xdfdedddc, x7, 144, x1)

inst_54:
// rs1_val == 0 and rs2_val == 0xdfdedddc and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xdfdedddc; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0xdfdedddc, x7, 148, x1)

inst_55:
// rs1_val == 0 and rs2_val == 0xdfdedddc and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xdfdedddc; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0xdfdedddc, x7, 152, x1)

inst_56:
// rs1_val == 0 and rs2_val == 0xdfdedddc and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xdfdedddc; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0xdfdedddc, x7, 156, x1)

inst_57:
// rs1_val == 0 and rs2_val == 0xdbdad9d8 and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xdbdad9d8; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0xdbdad9d8, x7, 160, x1)

inst_58:
// rs1_val == 0 and rs2_val == 0xdbdad9d8 and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xdbdad9d8; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0xdbdad9d8, x7, 164, x1)

inst_59:
// rs1_val == 0 and rs2_val == 0xdbdad9d8 and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xdbdad9d8; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0xdbdad9d8, x7, 168, x1)

inst_60:
// rs1_val == 0 and rs2_val == 0xdbdad9d8 and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xdbdad9d8; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0xdbdad9d8, x7, 172, x1)

inst_61:
// rs1_val == 0 and rs2_val == 0xd7d6d5d4 and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xd7d6d5d4; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0xd7d6d5d4, x7, 176, x1)

inst_62:
// rs1_val == 0 and rs2_val == 0xd7d6d5d4 and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xd7d6d5d4; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0xd7d6d5d4, x7, 180, x1)

inst_63:
// rs1_val == 0 and rs2_val == 0xd7d6d5d4 and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xd7d6d5d4; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0xd7d6d5d4, x7, 184, x1)

inst_64:
// rs1_val == 0 and rs2_val == 0xd7d6d5d4 and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xd7d6d5d4; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0xd7d6d5d4, x7, 188, x1)

inst_65:
// rs1_val == 0 and rs2_val == 0xd3d2d1d0 and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xd3d2d1d0; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0xd3d2d1d0, x7, 192, x1)

inst_66:
// rs1_val == 0 and rs2_val == 0xd3d2d1d0 and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xd3d2d1d0; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0xd3d2d1d0, x7, 196, x1)

inst_67:
// rs1_val == 0 and rs2_val == 0xd3d2d1d0 and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xd3d2d1d0; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0xd3d2d1d0, x7, 200, x1)

inst_68:
// rs1_val == 0 and rs2_val == 0xd3d2d1d0 and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xd3d2d1d0; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0xd3d2d1d0, x7, 204, x1)

inst_69:
// rs1_val == 0 and rs2_val == 0xcfcecdcc and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xcfcecdcc; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0xcfcecdcc, x7, 208, x1)

inst_70:
// rs1_val == 0 and rs2_val == 0xcfcecdcc and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xcfcecdcc; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0xcfcecdcc, x7, 212, x1)

inst_71:
// rs1_val == 0 and rs2_val == 0xcfcecdcc and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xcfcecdcc; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0xcfcecdcc, x7, 216, x1)

inst_72:
// rs1_val == 0 and rs2_val == 0xcfcecdcc and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xcfcecdcc; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0xcfcecdcc, x7, 220, x1)

inst_73:
// rs1_val == 0 and rs2_val == 0xcbcac9c8 and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xcbcac9c8; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0xcbcac9c8, x7, 224, x1)

inst_74:
// rs1_val == 0 and rs2_val == 0xcbcac9c8 and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xcbcac9c8; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0xcbcac9c8, x7, 228, x1)

inst_75:
// rs1_val == 0 and rs2_val == 0xcbcac9c8 and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xcbcac9c8; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0xcbcac9c8, x7, 232, x1)

inst_76:
// rs1_val == 0 and rs2_val == 0xcbcac9c8 and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xcbcac9c8; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0xcbcac9c8, x7, 236, x1)

inst_77:
// rs1_val == 0 and rs2_val == 0xc7c6c5c4 and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xc7c6c5c4; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0xc7c6c5c4, x7, 240, x1)

inst_78:
// rs1_val == 0 and rs2_val == 0xc7c6c5c4 and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xc7c6c5c4; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0xc7c6c5c4, x7, 244, x1)

inst_79:
// rs1_val == 0 and rs2_val == 0xc7c6c5c4 and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xc7c6c5c4; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0xc7c6c5c4, x7, 248, x1)

inst_80:
// rs1_val == 0 and rs2_val == 0xc7c6c5c4 and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xc7c6c5c4; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0xc7c6c5c4, x7, 252, x1)

inst_81:
// rs1_val == 0 and rs2_val == 0xc3c2c1c0 and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xc3c2c1c0; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0xc3c2c1c0, x7, 256, x1)

inst_82:
// rs1_val == 0 and rs2_val == 0xc3c2c1c0 and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xc3c2c1c0; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0xc3c2c1c0, x7, 260, x1)

inst_83:
// rs1_val == 0 and rs2_val == 0xc3c2c1c0 and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xc3c2c1c0; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0xc3c2c1c0, x7, 264, x1)

inst_84:
// rs1_val == 0 and rs2_val == 0xc3c2c1c0 and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xc3c2c1c0; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0xc3c2c1c0, x7, 268, x1)

inst_85:
// rs1_val == 0 and rs2_val == 0xbfbebdbc and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xbfbebdbc; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0xbfbebdbc, x7, 272, x1)

inst_86:
// rs1_val == 0 and rs2_val == 0xbfbebdbc and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xbfbebdbc; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0xbfbebdbc, x7, 276, x1)

inst_87:
// rs1_val == 0 and rs2_val == 0xbfbebdbc and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xbfbebdbc; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0xbfbebdbc, x7, 280, x1)

inst_88:
// rs1_val == 0 and rs2_val == 0xbfbebdbc and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xbfbebdbc; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0xbfbebdbc, x7, 284, x1)

inst_89:
// rs1_val == 0 and rs2_val == 0xbbbab9b8 and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xbbbab9b8; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0xbbbab9b8, x7, 288, x1)

inst_90:
// rs1_val == 0 and rs2_val == 0xbbbab9b8 and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xbbbab9b8; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0xbbbab9b8, x7, 292, x1)

inst_91:
// rs1_val == 0 and rs2_val == 0xbbbab9b8 and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xbbbab9b8; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0xbbbab9b8, x7, 296, x1)

inst_92:
// rs1_val == 0 and rs2_val == 0xbbbab9b8 and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xbbbab9b8; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0xbbbab9b8, x7, 300, x1)

inst_93:
// rs1_val == 0 and rs2_val == 0xb7b6b5b4 and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xb7b6b5b4; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0xb7b6b5b4, x7, 304, x1)

inst_94:
// rs1_val == 0 and rs2_val == 0xb7b6b5b4 and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xb7b6b5b4; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0xb7b6b5b4, x7, 308, x1)

inst_95:
// rs1_val == 0 and rs2_val == 0xb7b6b5b4 and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xb7b6b5b4; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0xb7b6b5b4, x7, 312, x1)

inst_96:
// rs1_val == 0 and rs2_val == 0xb7b6b5b4 and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xb7b6b5b4; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0xb7b6b5b4, x7, 316, x1)

inst_97:
// rs1_val == 0 and rs2_val == 0xb3b2b1b0 and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xb3b2b1b0; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0xb3b2b1b0, x7, 320, x1)

inst_98:
// rs1_val == 0 and rs2_val == 0xb3b2b1b0 and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xb3b2b1b0; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0xb3b2b1b0, x7, 324, x1)

inst_99:
// rs1_val == 0 and rs2_val == 0xb3b2b1b0 and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xb3b2b1b0; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0xb3b2b1b0, x7, 328, x1)

inst_100:
// rs1_val == 0 and rs2_val == 0xb3b2b1b0 and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xb3b2b1b0; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0xb3b2b1b0, x7, 332, x1)

inst_101:
// rs1_val == 0 and rs2_val == 0xafaeadac and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xafaeadac; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0xafaeadac, x7, 336, x1)

inst_102:
// rs1_val == 0 and rs2_val == 0xafaeadac and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xafaeadac; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0xafaeadac, x7, 340, x1)

inst_103:
// rs1_val == 0 and rs2_val == 0xafaeadac and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xafaeadac; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0xafaeadac, x7, 344, x1)

inst_104:
// rs1_val == 0 and rs2_val == 0xafaeadac and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xafaeadac; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0xafaeadac, x7, 348, x1)

inst_105:
// rs1_val == 0 and rs2_val == 0xabaaa9a8 and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xabaaa9a8; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0xabaaa9a8, x7, 352, x1)

inst_106:
// rs1_val == 0 and rs2_val == 0xabaaa9a8 and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xabaaa9a8; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0xabaaa9a8, x7, 356, x1)

inst_107:
// rs1_val == 0 and rs2_val == 0xabaaa9a8 and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xabaaa9a8; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0xabaaa9a8, x7, 360, x1)

inst_108:
// rs1_val == 0 and rs2_val == 0xabaaa9a8 and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xabaaa9a8; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0xabaaa9a8, x7, 364, x1)

inst_109:
// rs1_val == 0 and rs2_val == 0xa7a6a5a4 and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xa7a6a5a4; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0xa7a6a5a4, x7, 368, x1)

inst_110:
// rs1_val == 0 and rs2_val == 0xa7a6a5a4 and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xa7a6a5a4; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0xa7a6a5a4, x7, 372, x1)

inst_111:
// rs1_val == 0 and rs2_val == 0xa7a6a5a4 and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xa7a6a5a4; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0xa7a6a5a4, x7, 376, x1)

inst_112:
// rs1_val == 0 and rs2_val == 0xa7a6a5a4 and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xa7a6a5a4; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0xa7a6a5a4, x7, 380, x1)

inst_113:
// rs1_val == 0 and rs2_val == 0xa3a2a1a0 and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xa3a2a1a0; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0xa3a2a1a0, x7, 384, x1)

inst_114:
// rs1_val == 0 and rs2_val == 0xa3a2a1a0 and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xa3a2a1a0; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0xa3a2a1a0, x7, 388, x1)

inst_115:
// rs1_val == 0 and rs2_val == 0xa3a2a1a0 and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xa3a2a1a0; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0xa3a2a1a0, x7, 392, x1)

inst_116:
// rs1_val == 0 and rs2_val == 0xa3a2a1a0 and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xa3a2a1a0; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0xa3a2a1a0, x7, 396, x1)

inst_117:
// rs1_val == 0 and rs2_val == 0x9f9e9d9c and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x9f9e9d9c; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0x9f9e9d9c, x7, 400, x1)

inst_118:
// rs1_val == 0 and rs2_val == 0x9f9e9d9c and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x9f9e9d9c; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0x9f9e9d9c, x7, 404, x1)

inst_119:
// rs1_val == 0 and rs2_val == 0x9f9e9d9c and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x9f9e9d9c; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0x9f9e9d9c, x7, 408, x1)

inst_120:
// rs1_val == 0 and rs2_val == 0x9f9e9d9c and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x9f9e9d9c; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0x9f9e9d9c, x7, 412, x1)

inst_121:
// rs1_val == 0 and rs2_val == 0x9b9a9998 and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x9b9a9998; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0x9b9a9998, x7, 416, x1)

inst_122:
// rs1_val == 0 and rs2_val == 0x9b9a9998 and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x9b9a9998; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0x9b9a9998, x7, 420, x1)

inst_123:
// rs1_val == 0 and rs2_val == 0x9b9a9998 and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x9b9a9998; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0x9b9a9998, x7, 424, x1)

inst_124:
// rs1_val == 0 and rs2_val == 0x9b9a9998 and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x9b9a9998; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0x9b9a9998, x7, 428, x1)

inst_125:
// rs1_val == 0 and rs2_val == 0x97969594 and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x97969594; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0x97969594, x7, 432, x1)

inst_126:
// rs1_val == 0 and rs2_val == 0x97969594 and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x97969594; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0x97969594, x7, 436, x1)

inst_127:
// rs1_val == 0 and rs2_val == 0x97969594 and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x97969594; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0x97969594, x7, 440, x1)

inst_128:
// rs1_val == 0 and rs2_val == 0x97969594 and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x97969594; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0x97969594, x7, 444, x1)

inst_129:
// rs1_val == 0 and rs2_val == 0x93929190 and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x93929190; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0x93929190, x7, 448, x1)

inst_130:
// rs1_val == 0 and rs2_val == 0x93929190 and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x93929190; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0x93929190, x7, 452, x1)

inst_131:
// rs1_val == 0 and rs2_val == 0x93929190 and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x93929190; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0x93929190, x7, 456, x1)

inst_132:
// rs1_val == 0 and rs2_val == 0x93929190 and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x93929190; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0x93929190, x7, 460, x1)

inst_133:
// rs1_val == 0 and rs2_val == 0x8f8e8d8c and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x8f8e8d8c; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0x8f8e8d8c, x7, 464, x1)

inst_134:
// rs1_val == 0 and rs2_val == 0x8f8e8d8c and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x8f8e8d8c; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0x8f8e8d8c, x7, 468, x1)

inst_135:
// rs1_val == 0 and rs2_val == 0x8f8e8d8c and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x8f8e8d8c; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0x8f8e8d8c, x7, 472, x1)

inst_136:
// rs1_val == 0 and rs2_val == 0x8f8e8d8c and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x8f8e8d8c; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0x8f8e8d8c, x7, 476, x1)

inst_137:
// rs1_val == 0 and rs2_val == 0x8b8a8988 and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x8b8a8988; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0x8b8a8988, x7, 480, x1)

inst_138:
// rs1_val == 0 and rs2_val == 0x8b8a8988 and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x8b8a8988; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0x8b8a8988, x7, 484, x1)

inst_139:
// rs1_val == 0 and rs2_val == 0x8b8a8988 and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x8b8a8988; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0x8b8a8988, x7, 488, x1)

inst_140:
// rs1_val == 0 and rs2_val == 0x8b8a8988 and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x8b8a8988; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0x8b8a8988, x7, 492, x1)

inst_141:
// rs1_val == 0 and rs2_val == 0x87868584 and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x87868584; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0x87868584, x7, 496, x1)

inst_142:
// rs1_val == 0 and rs2_val == 0x87868584 and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x87868584; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0x87868584, x7, 500, x1)

inst_143:
// rs1_val == 0 and rs2_val == 0x87868584 and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x87868584; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0x87868584, x7, 504, x1)

inst_144:
// rs1_val == 0 and rs2_val == 0x87868584 and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x87868584; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0x87868584, x7, 508, x1)

inst_145:
// rs1_val == 0 and rs2_val == 0x83828180 and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x83828180; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0x83828180, x7, 512, x1)

inst_146:
// rs1_val == 0 and rs2_val == 0x83828180 and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x83828180; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0x83828180, x7, 516, x1)

inst_147:
// rs1_val == 0 and rs2_val == 0x83828180 and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x83828180; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0x83828180, x7, 520, x1)

inst_148:
// rs1_val == 0 and rs2_val == 0x83828180 and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x83828180; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0x83828180, x7, 524, x1)

inst_149:
// rs1_val == 0 and rs2_val == 0x7f7e7d7c and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x7f7e7d7c; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0x7f7e7d7c, x7, 528, x1)

inst_150:
// rs1_val == 0 and rs2_val == 0x7f7e7d7c and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x7f7e7d7c; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0x7f7e7d7c, x7, 532, x1)

inst_151:
// rs1_val == 0 and rs2_val == 0x7f7e7d7c and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x7f7e7d7c; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0x7f7e7d7c, x7, 536, x1)

inst_152:
// rs1_val == 0 and rs2_val == 0x7f7e7d7c and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x7f7e7d7c; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0x7f7e7d7c, x7, 540, x1)

inst_153:
// rs1_val == 0 and rs2_val == 0x7b7a7978 and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x7b7a7978; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0x7b7a7978, x7, 544, x1)

inst_154:
// rs1_val == 0 and rs2_val == 0x7b7a7978 and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x7b7a7978; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0x7b7a7978, x7, 548, x1)

inst_155:
// rs1_val == 0 and rs2_val == 0x7b7a7978 and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x7b7a7978; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0x7b7a7978, x7, 552, x1)

inst_156:
// rs1_val == 0 and rs2_val == 0x7b7a7978 and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x7b7a7978; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0x7b7a7978, x7, 556, x1)

inst_157:
// rs1_val == 0 and rs2_val == 0x77767574 and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x77767574; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0x77767574, x7, 560, x1)

inst_158:
// rs1_val == 0 and rs2_val == 0x77767574 and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x77767574; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0x77767574, x7, 564, x1)

inst_159:
// rs1_val == 0 and rs2_val == 0x77767574 and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x77767574; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0x77767574, x7, 568, x1)

inst_160:
// rs1_val == 0 and rs2_val == 0x77767574 and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x77767574; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0x77767574, x7, 572, x1)

inst_161:
// rs1_val == 0 and rs2_val == 0x73727170 and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x73727170; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0x73727170, x7, 576, x1)

inst_162:
// rs1_val == 0 and rs2_val == 0x73727170 and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x73727170; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0x73727170, x7, 580, x1)

inst_163:
// rs1_val == 0 and rs2_val == 0x73727170 and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x73727170; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0x73727170, x7, 584, x1)

inst_164:
// rs1_val == 0 and rs2_val == 0x73727170 and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x73727170; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0x73727170, x7, 588, x1)

inst_165:
// rs1_val == 0 and rs2_val == 0x6f6e6d6c and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x6f6e6d6c; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0x6f6e6d6c, x7, 592, x1)

inst_166:
// rs1_val == 0 and rs2_val == 0x6f6e6d6c and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x6f6e6d6c; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0x6f6e6d6c, x7, 596, x1)

inst_167:
// rs1_val == 0 and rs2_val == 0x6f6e6d6c and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x6f6e6d6c; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0x6f6e6d6c, x7, 600, x1)

inst_168:
// rs1_val == 0 and rs2_val == 0x6f6e6d6c and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x6f6e6d6c; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0x6f6e6d6c, x7, 604, x1)

inst_169:
// rs1_val == 0 and rs2_val == 0x6b6a6968 and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x6b6a6968; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0x6b6a6968, x7, 608, x1)

inst_170:
// rs1_val == 0 and rs2_val == 0x6b6a6968 and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x6b6a6968; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0x6b6a6968, x7, 612, x1)

inst_171:
// rs1_val == 0 and rs2_val == 0x6b6a6968 and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x6b6a6968; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0x6b6a6968, x7, 616, x1)

inst_172:
// rs1_val == 0 and rs2_val == 0x6b6a6968 and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x6b6a6968; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0x6b6a6968, x7, 620, x1)

inst_173:
// rs1_val == 0 and rs2_val == 0x67666564 and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x67666564; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0x67666564, x7, 624, x1)

inst_174:
// rs1_val == 0 and rs2_val == 0x67666564 and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x67666564; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0x67666564, x7, 628, x1)

inst_175:
// rs1_val == 0 and rs2_val == 0x67666564 and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x67666564; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0x67666564, x7, 632, x1)

inst_176:
// rs1_val == 0 and rs2_val == 0x67666564 and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x67666564; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0x67666564, x7, 636, x1)

inst_177:
// rs1_val == 0 and rs2_val == 0x63626160 and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x63626160; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0x63626160, x7, 640, x1)

inst_178:
// rs1_val == 0 and rs2_val == 0x63626160 and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x63626160; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0x63626160, x7, 644, x1)

inst_179:
// rs1_val == 0 and rs2_val == 0x63626160 and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x63626160; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0x63626160, x7, 648, x1)

inst_180:
// rs1_val == 0 and rs2_val == 0x63626160 and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x63626160; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0x63626160, x7, 652, x1)

inst_181:
// rs1_val == 0 and rs2_val == 0x5f5e5d5c and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x5f5e5d5c; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0x5f5e5d5c, x7, 656, x1)

inst_182:
// rs1_val == 0 and rs2_val == 0x5f5e5d5c and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x5f5e5d5c; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0x5f5e5d5c, x7, 660, x1)

inst_183:
// rs1_val == 0 and rs2_val == 0x5f5e5d5c and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x5f5e5d5c; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0x5f5e5d5c, x7, 664, x1)

inst_184:
// rs1_val == 0 and rs2_val == 0x5f5e5d5c and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x5f5e5d5c; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0x5f5e5d5c, x7, 668, x1)

inst_185:
// rs1_val == 0 and rs2_val == 0x5b5a5958 and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x5b5a5958; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0x5b5a5958, x7, 672, x1)

inst_186:
// rs1_val == 0 and rs2_val == 0x5b5a5958 and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x5b5a5958; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0x5b5a5958, x7, 676, x1)

inst_187:
// rs1_val == 0 and rs2_val == 0x5b5a5958 and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x5b5a5958; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0x5b5a5958, x7, 680, x1)

inst_188:
// rs1_val == 0 and rs2_val == 0x5b5a5958 and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x5b5a5958; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0x5b5a5958, x7, 684, x1)

inst_189:
// rs1_val == 0 and rs2_val == 0x57565554 and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x57565554; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0x57565554, x7, 688, x1)

inst_190:
// rs1_val == 0 and rs2_val == 0x57565554 and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x57565554; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0x57565554, x7, 692, x1)

inst_191:
// rs1_val == 0 and rs2_val == 0x57565554 and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x57565554; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0x57565554, x7, 696, x1)

inst_192:
// rs1_val == 0 and rs2_val == 0x57565554 and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x57565554; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0x57565554, x7, 700, x1)

inst_193:
// rs1_val == 0 and rs2_val == 0x53525150 and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x53525150; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0x53525150, x7, 704, x1)

inst_194:
// rs1_val == 0 and rs2_val == 0x53525150 and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x53525150; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0x53525150, x7, 708, x1)

inst_195:
// rs1_val == 0 and rs2_val == 0x53525150 and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x53525150; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0x53525150, x7, 712, x1)

inst_196:
// rs1_val == 0 and rs2_val == 0x53525150 and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x53525150; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0x53525150, x7, 716, x1)

inst_197:
// rs1_val == 0 and rs2_val == 0x4f4e4d4c and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x4f4e4d4c; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0x4f4e4d4c, x7, 720, x1)

inst_198:
// rs1_val == 0 and rs2_val == 0x4f4e4d4c and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x4f4e4d4c; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0x4f4e4d4c, x7, 724, x1)

inst_199:
// rs1_val == 0 and rs2_val == 0x4f4e4d4c and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x4f4e4d4c; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0x4f4e4d4c, x7, 728, x1)

inst_200:
// rs1_val == 0 and rs2_val == 0x4f4e4d4c and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x4f4e4d4c; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0x4f4e4d4c, x7, 732, x1)

inst_201:
// rs1_val == 0 and rs2_val == 0x4b4a4948 and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x4b4a4948; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0x4b4a4948, x7, 736, x1)

inst_202:
// rs1_val == 0 and rs2_val == 0x4b4a4948 and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x4b4a4948; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0x4b4a4948, x7, 740, x1)

inst_203:
// rs1_val == 0 and rs2_val == 0x4b4a4948 and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x4b4a4948; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0x4b4a4948, x7, 744, x1)

inst_204:
// rs1_val == 0 and rs2_val == 0x4b4a4948 and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x4b4a4948; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0x4b4a4948, x7, 748, x1)

inst_205:
// rs1_val == 0 and rs2_val == 0x47464544 and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x47464544; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0x47464544, x7, 752, x1)

inst_206:
// rs1_val == 0 and rs2_val == 0x47464544 and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x47464544; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0x47464544, x7, 756, x1)

inst_207:
// rs1_val == 0 and rs2_val == 0x47464544 and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x47464544; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0x47464544, x7, 760, x1)

inst_208:
// rs1_val == 0 and rs2_val == 0x47464544 and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x47464544; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0x47464544, x7, 764, x1)

inst_209:
// rs1_val == 0 and rs2_val == 0x43424140 and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x43424140; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0x43424140, x7, 768, x1)

inst_210:
// rs1_val == 0 and rs2_val == 0x43424140 and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x43424140; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0x43424140, x7, 772, x1)

inst_211:
// rs1_val == 0 and rs2_val == 0x43424140 and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x43424140; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0x43424140, x7, 776, x1)

inst_212:
// rs1_val == 0 and rs2_val == 0x43424140 and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x43424140; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0x43424140, x7, 780, x1)

inst_213:
// rs1_val == 0 and rs2_val == 0x3f3e3d3c and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x3f3e3d3c; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0x3f3e3d3c, x7, 784, x1)

inst_214:
// rs1_val == 0 and rs2_val == 0x3f3e3d3c and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x3f3e3d3c; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0x3f3e3d3c, x7, 788, x1)

inst_215:
// rs1_val == 0 and rs2_val == 0x3f3e3d3c and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x3f3e3d3c; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0x3f3e3d3c, x7, 792, x1)

inst_216:
// rs1_val == 0 and rs2_val == 0x3f3e3d3c and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x3f3e3d3c; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0x3f3e3d3c, x7, 796, x1)

inst_217:
// rs1_val == 0 and rs2_val == 0x3b3a3938 and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x3b3a3938; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0x3b3a3938, x7, 800, x1)

inst_218:
// rs1_val == 0 and rs2_val == 0x3b3a3938 and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x3b3a3938; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0x3b3a3938, x7, 804, x1)

inst_219:
// rs1_val == 0 and rs2_val == 0x3b3a3938 and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x3b3a3938; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0x3b3a3938, x7, 808, x1)

inst_220:
// rs1_val == 0 and rs2_val == 0x3b3a3938 and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x3b3a3938; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0x3b3a3938, x7, 812, x1)

inst_221:
// rs1_val == 0 and rs2_val == 0x37363534 and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x37363534; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0x37363534, x7, 816, x1)

inst_222:
// rs1_val == 0 and rs2_val == 0x37363534 and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x37363534; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0x37363534, x7, 820, x1)

inst_223:
// rs1_val == 0 and rs2_val == 0x37363534 and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x37363534; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0x37363534, x7, 824, x1)

inst_224:
// rs1_val == 0 and rs2_val == 0x37363534 and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x37363534; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0x37363534, x7, 828, x1)

inst_225:
// rs1_val == 0 and rs2_val == 0x33323130 and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x33323130; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0x33323130, x7, 832, x1)

inst_226:
// rs1_val == 0 and rs2_val == 0x33323130 and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x33323130; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0x33323130, x7, 836, x1)

inst_227:
// rs1_val == 0 and rs2_val == 0x33323130 and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x33323130; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0x33323130, x7, 840, x1)

inst_228:
// rs1_val == 0 and rs2_val == 0x33323130 and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x33323130; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0x33323130, x7, 844, x1)

inst_229:
// rs1_val == 0 and rs2_val == 0x2f2e2d2c and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x2f2e2d2c; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0x2f2e2d2c, x7, 848, x1)

inst_230:
// rs1_val == 0 and rs2_val == 0x2f2e2d2c and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x2f2e2d2c; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0x2f2e2d2c, x7, 852, x1)

inst_231:
// rs1_val == 0 and rs2_val == 0x2f2e2d2c and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x2f2e2d2c; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0x2f2e2d2c, x7, 856, x1)

inst_232:
// rs1_val == 0 and rs2_val == 0x2f2e2d2c and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x2f2e2d2c; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0x2f2e2d2c, x7, 860, x1)

inst_233:
// rs1_val == 0 and rs2_val == 0x2b2a2928 and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x2b2a2928; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0x2b2a2928, x7, 864, x1)

inst_234:
// rs1_val == 0 and rs2_val == 0x2b2a2928 and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x2b2a2928; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0x2b2a2928, x7, 868, x1)

inst_235:
// rs1_val == 0 and rs2_val == 0x2b2a2928 and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x2b2a2928; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0x2b2a2928, x7, 872, x1)

inst_236:
// rs1_val == 0 and rs2_val == 0x2b2a2928 and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x2b2a2928; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0x2b2a2928, x7, 876, x1)

inst_237:
// rs1_val == 0 and rs2_val == 0x27262524 and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x27262524; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0x27262524, x7, 880, x1)

inst_238:
// rs1_val == 0 and rs2_val == 0x27262524 and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x27262524; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0x27262524, x7, 884, x1)

inst_239:
// rs1_val == 0 and rs2_val == 0x27262524 and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x27262524; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0x27262524, x7, 888, x1)

inst_240:
// rs1_val == 0 and rs2_val == 0x27262524 and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x27262524; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0x27262524, x7, 892, x1)

inst_241:
// rs1_val == 0 and rs2_val == 0x23222120 and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x23222120; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0x23222120, x7, 896, x1)

inst_242:
// rs1_val == 0 and rs2_val == 0x23222120 and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x23222120; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0x23222120, x7, 900, x1)

inst_243:
// rs1_val == 0 and rs2_val == 0x23222120 and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x23222120; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0x23222120, x7, 904, x1)

inst_244:
// rs1_val == 0 and rs2_val == 0x23222120 and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x23222120; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0x23222120, x7, 908, x1)

inst_245:
// rs1_val == 0 and rs2_val == 0x1f1e1d1c and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x1f1e1d1c; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0x1f1e1d1c, x7, 912, x1)

inst_246:
// rs1_val == 0 and rs2_val == 0x1f1e1d1c and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x1f1e1d1c; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0x1f1e1d1c, x7, 916, x1)

inst_247:
// rs1_val == 0 and rs2_val == 0x1f1e1d1c and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x1f1e1d1c; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0x1f1e1d1c, x7, 920, x1)

inst_248:
// rs1_val == 0 and rs2_val == 0x1f1e1d1c and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x1f1e1d1c; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0x1f1e1d1c, x7, 924, x1)

inst_249:
// rs1_val == 0 and rs2_val == 0x1b1a1918 and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x1b1a1918; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0x1b1a1918, x7, 928, x1)

inst_250:
// rs1_val == 0 and rs2_val == 0x1b1a1918 and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x1b1a1918; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0x1b1a1918, x7, 932, x1)

inst_251:
// rs1_val == 0 and rs2_val == 0x1b1a1918 and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x1b1a1918; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0x1b1a1918, x7, 936, x1)

inst_252:
// rs1_val == 0 and rs2_val == 0x1b1a1918 and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x1b1a1918; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0x1b1a1918, x7, 940, x1)

inst_253:
// rs1_val == 0 and rs2_val == 0x17161514 and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x17161514; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0x17161514, x7, 944, x1)

inst_254:
// rs1_val == 0 and rs2_val == 0x17161514 and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x17161514; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0x17161514, x7, 948, x1)

inst_255:
// rs1_val == 0 and rs2_val == 0x17161514 and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x17161514; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0x17161514, x7, 952, x1)

inst_256:
// rs1_val == 0 and rs2_val == 0x17161514 and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x17161514; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0x17161514, x7, 956, x1)

inst_257:
// rs1_val == 0 and rs2_val == 0x13121110 and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x13121110; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0x13121110, x7, 960, x1)

inst_258:
// rs1_val == 0 and rs2_val == 0x13121110 and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x13121110; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0x13121110, x7, 964, x1)

inst_259:
// rs1_val == 0 and rs2_val == 0x13121110 and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x13121110; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0x13121110, x7, 968, x1)

inst_260:
// rs1_val == 0 and rs2_val == 0x13121110 and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x13121110; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0x13121110, x7, 972, x1)

inst_261:
// rs1_val == 0 and rs2_val == 0x0f0e0d0c and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xf0e0d0c; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0xf0e0d0c, x7, 976, x1)

inst_262:
// rs1_val == 0 and rs2_val == 0x0f0e0d0c and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xf0e0d0c; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0xf0e0d0c, x7, 980, x1)

inst_263:
// rs1_val == 0 and rs2_val == 0x0f0e0d0c and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xf0e0d0c; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0xf0e0d0c, x7, 984, x1)

inst_264:
// rs1_val == 0 and rs2_val == 0x0f0e0d0c and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xf0e0d0c; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0xf0e0d0c, x7, 988, x1)

inst_265:
// rs1_val == 0 and rs2_val == 0x0b0a0908 and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xb0a0908; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0xb0a0908, x7, 992, x1)

inst_266:
// rs1_val == 0 and rs2_val == 0x0b0a0908 and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xb0a0908; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0xb0a0908, x7, 996, x1)

inst_267:
// rs1_val == 0 and rs2_val == 0x0b0a0908 and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xb0a0908; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0xb0a0908, x7, 1000, x1)

inst_268:
// rs1_val == 0 and rs2_val == 0x0b0a0908 and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0xb0a0908; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0xb0a0908, x7, 1004, x1)

inst_269:
// rs1_val == 0 and rs2_val == 0x07060504 and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x7060504; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0x7060504, x7, 1008, x1)

inst_270:
// rs1_val == 0 and rs2_val == 0x07060504 and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x7060504; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0x7060504, x7, 1012, x1)

inst_271:
// rs1_val == 0 and rs2_val == 0x07060504 and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x7060504; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0x7060504, x7, 1016, x1)

inst_272:
// rs1_val == 0 and rs2_val == 0x07060504 and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x7060504; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0x7060504, x7, 1020, x1)

inst_273:
// rs1_val == 0 and rs2_val == 0x03020100 and imm_val == 3 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x3020100; immval:0x3
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x3, 0x00000000, 0x0, 0x3020100, x7, 1024, x1)

inst_274:
// rs1_val == 0 and rs2_val == 0x03020100 and imm_val == 2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x3020100; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0x0, 0x3020100, x7, 1028, x1)

inst_275:
// rs1_val == 0 and rs2_val == 0x03020100 and imm_val == 1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x3020100; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x0, 0x3020100, x7, 1032, x1)

inst_276:
// rs1_val == 0 and rs2_val == 0x03020100 and imm_val == 0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x0; op2val:0x3020100; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x0, 0x3020100, x7, 1036, x1)

inst_277:
// rs1_val == 0x3fb0fe60 and rs2_val == 0x1826a804 and imm_val == 0x1 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x3fb0fe60; op2val:0x1826a804; immval:0x1
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x1, 0x00000000, 0x3fb0fe60, 0x1826a804, x7, 1040, x1)

inst_278:
// rs1_val == 0x1aa1beeb and rs2_val == 0xa4b7f979 and imm_val == 0x0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0x1aa1beeb; op2val:0xa4b7f979; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0x1aa1beeb, 0xa4b7f979, x7, 1044, x1)

inst_279:
// rs1_val == 0xcd157633 and rs2_val == 0x4113ee60 and imm_val == 0x0 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0xcd157633; op2val:0x4113ee60; immval:0x0
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x0, 0x00000000, 0xcd157633, 0x4113ee60, x7, 1048, x1)

inst_280:
// rs1_val == 0xe3f4fca3 and rs2_val == 0xa6c9253a and imm_val == 0x2 
// opcode: aes32dsmi; rd: x12; op1:x10; op2:x11; op1val:0xe3f4fca3; op2val:0xa6c9253a; immval:0x2
TEST_RI_OP(aes32dsmi, x12, x10, x11, 0x2, 0x00000000, 0xe3f4fca3, 0xa6c9253a, x7, 1052, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x12_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x12_1:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x7_0:
    .fill 264*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
