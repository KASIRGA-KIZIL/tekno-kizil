
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.4.1
// timestamp : Tue Dec 15 15:41:59 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf ('/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/dataset.cgf', '/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv32im.cgf') \
//                  -- xlen 32 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the divu instruction of the RISC-V M extension for the divu covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IM")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*M.*);def TEST_CASE_1=True;",divu)

RVTEST_SIGBASE( x11,signature_x11_1)

inst_0:
// rs1 == rd != rs2, rs1==x31, rs2==x30, rd==x31, rs1_val > 0 and rs2_val > 0, rs1_val != rs2_val and rs1_val > 0 and rs2_val > 0, rs2_val == 4290772991
// opcode: divu ; op1:x31; op2:x30; dest:x31; op1val:0x66666666;  op2val:0xffbfffff
TEST_RR_OP(divu, x31, x31, x30, 0x0, 0x66666666, 0xffbfffff, x11, 0, x14)

inst_1:
// rs1 == rs2 != rd, rs1==x16, rs2==x16, rd==x4, rs1_val == rs2_val and rs1_val > 0 and rs2_val > 0, rs1_val==65534 and rs2_val==65534
// opcode: divu ; op1:x16; op2:x16; dest:x4; op1val:0xfffe;  op2val:0xfffe
TEST_RR_OP(divu, x4, x16, x16, 0x1, 0xfffe, 0xfffe, x11, 4, x14)

inst_2:
// rs2 == rd != rs1, rs1==x27, rs2==x29, rd==x29, rs2_val == 0, rs1_val == 2863311530, rs1_val==2863311530 and rs2_val==0
// opcode: divu ; op1:x27; op2:x29; dest:x29; op1val:0xaaaaaaaa;  op2val:0x0
TEST_RR_OP(divu, x29, x27, x29, 0xFFFFFFFF, 0xaaaaaaaa, 0x0, x11, 8, x14)

inst_3:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x12, rs2==x5, rd==x8, rs2_val == (2**(xlen)-1), rs1_val == 2097152
// opcode: divu ; op1:x12; op2:x5; dest:x8; op1val:0x200000;  op2val:0xffffffff
TEST_RR_OP(divu, x8, x12, x5, 0x0, 0x200000, 0xffffffff, x11, 12, x14)

inst_4:
// rs1 == rs2 == rd, rs1==x6, rs2==x6, rd==x6, rs2_val == 1, rs1_val == 262144
// opcode: divu ; op1:x6; op2:x6; dest:x6; op1val:0x40000;  op2val:0x40000
TEST_RR_OP(divu, x6, x6, x6, 0x1, 0x40000, 0x40000, x11, 16, x14)

inst_5:
// rs1==x30, rs2==x25, rd==x21, rs1_val == 0, rs2_val == 4294443007
// opcode: divu ; op1:x30; op2:x25; dest:x21; op1val:0x0;  op2val:0xfff7ffff
TEST_RR_OP(divu, x21, x30, x25, 0x0, 0x0, 0xfff7ffff, x11, 20, x14)

inst_6:
// rs1==x2, rs2==x18, rd==x19, rs1_val == (2**(xlen)-1), rs2_val == 32768
// opcode: divu ; op1:x2; op2:x18; dest:x19; op1val:0xffffffff;  op2val:0x8000
TEST_RR_OP(divu, x19, x2, x18, 0x1ffff, 0xffffffff, 0x8000, x11, 24, x14)

inst_7:
// rs1==x20, rs2==x0, rd==x30, rs1_val == 1, rs1_val==1 and rs2_val==46339
// opcode: divu ; op1:x20; op2:x0; dest:x30; op1val:0x1;  op2val:0x0
TEST_RR_OP(divu, x30, x20, x0, 0xFFFFFFFF, 0x1, 0x0, x11, 28, x14)

inst_8:
// rs1==x15, rs2==x31, rd==x5, rs2_val == 2, rs1_val == 4294901759
// opcode: divu ; op1:x15; op2:x31; dest:x5; op1val:0xfffeffff;  op2val:0x2
TEST_RR_OP(divu, x5, x15, x31, 0x7fff7fff, 0xfffeffff, 0x2, x11, 32, x14)

inst_9:
// rs1==x10, rs2==x28, rd==x22, rs2_val == 4, 
// opcode: divu ; op1:x10; op2:x28; dest:x22; op1val:0x40000;  op2val:0x4
TEST_RR_OP(divu, x22, x10, x28, 0x10000, 0x40000, 0x4, x11, 36, x14)

inst_10:
// rs1==x7, rs2==x20, rd==x15, rs2_val == 8, 
// opcode: divu ; op1:x7; op2:x20; dest:x15; op1val:0x6;  op2val:0x8
TEST_RR_OP(divu, x15, x7, x20, 0x0, 0x6, 0x8, x11, 40, x14)

inst_11:
// rs1==x25, rs2==x27, rd==x28, rs2_val == 16, rs1_val == 2048
// opcode: divu ; op1:x25; op2:x27; dest:x28; op1val:0x800;  op2val:0x10
TEST_RR_OP(divu, x28, x25, x27, 0x80, 0x800, 0x10, x11, 44, x14)

inst_12:
// rs1==x8, rs2==x26, rd==x12, rs2_val == 32, rs1_val == 524288
// opcode: divu ; op1:x8; op2:x26; dest:x12; op1val:0x80000;  op2val:0x20
TEST_RR_OP(divu, x12, x8, x26, 0x4000, 0x80000, 0x20, x11, 48, x14)

inst_13:
// rs1==x13, rs2==x17, rd==x18, rs2_val == 64, 
// opcode: divu ; op1:x13; op2:x17; dest:x18; op1val:0x200000;  op2val:0x40
TEST_RR_OP(divu, x18, x13, x17, 0x8000, 0x200000, 0x40, x11, 52, x14)

inst_14:
// rs1==x9, rs2==x24, rd==x27, rs2_val == 128, rs1_val == 4294934527
// opcode: divu ; op1:x9; op2:x24; dest:x27; op1val:0xffff7fff;  op2val:0x80
TEST_RR_OP(divu, x27, x9, x24, 0x1fffeff, 0xffff7fff, 0x80, x11, 56, x14)

inst_15:
// rs1==x3, rs2==x1, rd==x25, rs2_val == 256, 
// opcode: divu ; op1:x3; op2:x1; dest:x25; op1val:0x0;  op2val:0x100
TEST_RR_OP(divu, x25, x3, x1, 0x0, 0x0, 0x100, x11, 60, x14)
RVTEST_SIGBASE( x6,signature_x6_0)

inst_16:
// rs1==x18, rs2==x12, rd==x13, rs2_val == 512, rs1_val == 4294965247
// opcode: divu ; op1:x18; op2:x12; dest:x13; op1val:0xfffff7ff;  op2val:0x200
TEST_RR_OP(divu, x13, x18, x12, 0x7ffffb, 0xfffff7ff, 0x200, x6, 0, x25)

inst_17:
// rs1==x19, rs2==x3, rd==x7, rs2_val == 1024, rs1_val == 1073741824
// opcode: divu ; op1:x19; op2:x3; dest:x7; op1val:0x40000000;  op2val:0x400
TEST_RR_OP(divu, x7, x19, x3, 0x100000, 0x40000000, 0x400, x6, 4, x25)

inst_18:
// rs1==x5, rs2==x22, rd==x3, rs2_val == 2048, rs1_val == 4292870143
// opcode: divu ; op1:x5; op2:x22; dest:x3; op1val:0xffdfffff;  op2val:0x800
TEST_RR_OP(divu, x3, x5, x22, 0x1ffbff, 0xffdfffff, 0x800, x6, 8, x25)

inst_19:
// rs1==x1, rs2==x7, rd==x14, rs2_val == 4096, rs1_val == 2
// opcode: divu ; op1:x1; op2:x7; dest:x14; op1val:0x2;  op2val:0x1000
TEST_RR_OP(divu, x14, x1, x7, 0x0, 0x2, 0x1000, x6, 12, x25)

inst_20:
// rs1==x17, rs2==x13, rd==x11, rs2_val == 8192, rs1_val == 4293918719
// opcode: divu ; op1:x17; op2:x13; dest:x11; op1val:0xffefffff;  op2val:0x2000
TEST_RR_OP(divu, x11, x17, x13, 0x7ff7f, 0xffefffff, 0x2000, x6, 16, x25)

inst_21:
// rs1==x23, rs2==x4, rd==x20, rs2_val == 16384, 
// opcode: divu ; op1:x23; op2:x4; dest:x20; op1val:0xe;  op2val:0x4000
TEST_RR_OP(divu, x20, x23, x4, 0x0, 0xe, 0x4000, x6, 20, x25)

inst_22:
// rs1==x11, rs2==x14, rd==x9, rs2_val == 65536, rs1_val == 4290772991
// opcode: divu ; op1:x11; op2:x14; dest:x9; op1val:0xffbfffff;  op2val:0x10000
TEST_RR_OP(divu, x9, x11, x14, 0xffbf, 0xffbfffff, 0x10000, x6, 24, x25)

inst_23:
// rs1==x24, rs2==x10, rd==x16, rs2_val == 131072, 
// opcode: divu ; op1:x24; op2:x10; dest:x16; op1val:0xaaaaaaaa;  op2val:0x20000
TEST_RR_OP(divu, x16, x24, x10, 0x5555, 0xaaaaaaaa, 0x20000, x6, 28, x25)

inst_24:
// rs1==x0, rs2==x19, rd==x24, rs2_val == 262144, rs1_val == 4227858431
// opcode: divu ; op1:x0; op2:x19; dest:x24; op1val:0x0;  op2val:0x40000
TEST_RR_OP(divu, x24, x0, x19, 0x0, 0x0, 0x40000, x6, 32, x25)

inst_25:
// rs1==x22, rs2==x21, rd==x1, rs2_val == 524288, rs1_val == 4294836223
// opcode: divu ; op1:x22; op2:x21; dest:x1; op1val:0xfffdffff;  op2val:0x80000
TEST_RR_OP(divu, x1, x22, x21, 0x1fff, 0xfffdffff, 0x80000, x6, 36, x25)

inst_26:
// rs1==x28, rs2==x9, rd==x10, rs2_val == 1048576, 
// opcode: divu ; op1:x28; op2:x9; dest:x10; op1val:0x800;  op2val:0x100000
TEST_RR_OP(divu, x10, x28, x9, 0x0, 0x800, 0x100000, x6, 40, x25)

inst_27:
// rs1==x21, rs2==x8, rd==x17, rs2_val == 2097152, 
// opcode: divu ; op1:x21; op2:x8; dest:x17; op1val:0xb505;  op2val:0x200000
TEST_RR_OP(divu, x17, x21, x8, 0x0, 0xb505, 0x200000, x6, 44, x25)

inst_28:
// rs1==x14, rs2==x11, rd==x23, rs2_val == 4194304, rs1_val == 16
// opcode: divu ; op1:x14; op2:x11; dest:x23; op1val:0x10;  op2val:0x400000
TEST_RR_OP(divu, x23, x14, x11, 0x0, 0x10, 0x400000, x6, 48, x25)

inst_29:
// rs1==x26, rs2==x15, rd==x0, rs2_val == 8388608, 
// opcode: divu ; op1:x26; op2:x15; dest:x0; op1val:0xffdfffff;  op2val:0x800000
TEST_RR_OP(divu, x0, x26, x15, 0, 0xffdfffff, 0x800000, x6, 52, x25)

inst_30:
// rs1==x29, rs2==x2, rd==x26, rs2_val == 16777216, 
// opcode: divu ; op1:x29; op2:x2; dest:x26; op1val:0xffbfffff;  op2val:0x1000000
TEST_RR_OP(divu, x26, x29, x2, 0xff, 0xffbfffff, 0x1000000, x6, 56, x25)

inst_31:
// rs1==x4, rs2==x23, rd==x2, rs2_val == 33554432, rs1_val == 33554432
// opcode: divu ; op1:x4; op2:x23; dest:x2; op1val:0x2000000;  op2val:0x2000000
TEST_RR_OP(divu, x2, x4, x23, 0x1, 0x2000000, 0x2000000, x6, 60, x25)

inst_32:
// rs2_val == 67108864, rs1_val == 4294967039
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xfffffeff;  op2val:0x4000000
TEST_RR_OP(divu, x12, x10, x11, 0x3f, 0xfffffeff, 0x4000000, x6, 64, x25)

inst_33:
// rs2_val == 134217728, rs1_val == 4294963199
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xffffefff;  op2val:0x8000000
TEST_RR_OP(divu, x12, x10, x11, 0x1f, 0xffffefff, 0x8000000, x6, 68, x25)

inst_34:
// rs2_val == 268435456, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xf;  op2val:0x10000000
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xf, 0x10000000, x6, 72, x25)

inst_35:
// rs2_val == 536870912, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x9;  op2val:0x20000000
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x9, 0x20000000, x6, 76, x25)

inst_36:
// rs2_val == 1073741824, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x40000000
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x0, 0x40000000, x6, 80, x25)

inst_37:
// rs2_val == 2147483648, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xd;  op2val:0x80000000
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xd, 0x80000000, x6, 84, x25)

inst_38:
// rs2_val == 4294967294, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x11;  op2val:0xfffffffe
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x11, 0xfffffffe, x6, 88, x25)

inst_39:
// rs2_val == 4294967293, rs1_val == 128
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x80;  op2val:0xfffffffd
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x80, 0xfffffffd, x6, 92, x25)

inst_40:
// rs2_val == 4294967291, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0xfffffffb
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x2, 0xfffffffb, x6, 96, x25)

inst_41:
// rs2_val == 4294967287, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xffefffff;  op2val:0xfffffff7
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xffefffff, 0xfffffff7, x6, 100, x25)

inst_42:
// rs2_val == 4294967279, rs1_val == 2147483647
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x7fffffff;  op2val:0xffffffef
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x7fffffff, 0xffffffef, x6, 104, x25)

inst_43:
// rs2_val == 4294967263, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xc;  op2val:0xffffffdf
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xc, 0xffffffdf, x6, 108, x25)

inst_44:
// rs2_val == 4294967231, rs1_val == 8388608
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x800000;  op2val:0xffffffbf
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x800000, 0xffffffbf, x6, 112, x25)

inst_45:
// rs2_val == 4294967167, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xffffffff;  op2val:0xffffff7f
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0xffffffff, 0xffffff7f, x6, 116, x25)

inst_46:
// rs2_val == 4294967039, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xe;  op2val:0xfffffeff
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xe, 0xfffffeff, x6, 120, x25)

inst_47:
// rs2_val == 4294966783, rs1_val == 4294967279
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xffffffef;  op2val:0xfffffdff
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0xffffffef, 0xfffffdff, x6, 124, x25)

inst_48:
// rs2_val == 4294966271, rs1_val == 65536
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:0xfffffbff
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x10000, 0xfffffbff, x6, 128, x25)

inst_49:
// rs2_val == 4294965247, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaab;  op2val:0xfffff7ff
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xaaaaaaab, 0xfffff7ff, x6, 132, x25)

inst_50:
// rs2_val == 4294963199, rs1_val == 16777216
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x1000000;  op2val:0xffffefff
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x1000000, 0xffffefff, x6, 136, x25)

inst_51:
// rs2_val == 4294959103, rs1_val == 1431655765
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0xffffdfff
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x55555555, 0xffffdfff, x6, 140, x25)

inst_52:
// rs2_val == 4294950911, rs1_val == 4294967294
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xfffffffe;  op2val:0xffffbfff
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0xfffffffe, 0xffffbfff, x6, 144, x25)

inst_53:
// rs2_val == 4294934527, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0xffff7fff
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x5, 0xffff7fff, x6, 148, x25)

inst_54:
// rs2_val == 4294901759, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0xfffeffff
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x55555556, 0xfffeffff, x6, 152, x25)

inst_55:
// rs2_val == 4294836223, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0xfffdffff
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x6, 0xfffdffff, x6, 156, x25)

inst_56:
// rs2_val == 4294705151, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x10;  op2val:0xfffbffff
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x10, 0xfffbffff, x6, 160, x25)

inst_57:
// rs2_val == 4293918719, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x80000;  op2val:0xffefffff
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x80000, 0xffefffff, x6, 164, x25)

inst_58:
// rs2_val == 4292870143, rs1_val == 1024
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x400;  op2val:0xffdfffff
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x400, 0xffdfffff, x6, 168, x25)

inst_59:
// rs2_val == 4286578687, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xe;  op2val:0xff7fffff
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xe, 0xff7fffff, x6, 172, x25)

inst_60:
// rs2_val == 4278190079, rs1_val == 4294967287
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xfffffff7;  op2val:0xfeffffff
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0xfffffff7, 0xfeffffff, x6, 176, x25)

inst_61:
// rs2_val == 4261412863, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xc;  op2val:0xfdffffff
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xc, 0xfdffffff, x6, 180, x25)

inst_62:
// rs2_val == 4227858431, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x12;  op2val:0xfbffffff
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x12, 0xfbffffff, x6, 184, x25)

inst_63:
// rs2_val == 4160749567, rs1_val == 134217728
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x8000000;  op2val:0xf7ffffff
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x8000000, 0xf7ffffff, x6, 188, x25)

inst_64:
// rs2_val == 4026531839, rs1_val == 8
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x8;  op2val:0xefffffff
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x8, 0xefffffff, x6, 192, x25)

inst_65:
// rs2_val == 3758096383, rs1_val == 4160749567
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xf7ffffff;  op2val:0xdfffffff
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0xf7ffffff, 0xdfffffff, x6, 196, x25)

inst_66:
// rs2_val == 3221225471, rs1_val == 4286578687
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xff7fffff;  op2val:0xbfffffff
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0xff7fffff, 0xbfffffff, x6, 200, x25)

inst_67:
// rs2_val == 2147483647, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xc;  op2val:0x7fffffff
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xc, 0x7fffffff, x6, 204, x25)

inst_68:
// rs2_val == 1431655765, rs1_val==2 and rs2_val==1431655765
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x55555555
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x2, 0x55555555, x6, 208, x25)

inst_69:
// rs2_val == 2863311530, rs1_val == 4261412863
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xfdffffff;  op2val:0xaaaaaaaa
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0xfdffffff, 0xaaaaaaaa, x6, 212, x25)

inst_70:
// rs1_val == 4, rs1_val==4 and rs2_val==858993459
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x33333333
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x4, 0x33333333, x6, 216, x25)

inst_71:
// rs1_val == 32, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x20;  op2val:0xb505
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x20, 0xb505, x6, 220, x25)

inst_72:
// rs1_val == 64, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x40;  op2val:0xa
TEST_RR_OP(divu, x12, x10, x11, 0x6, 0x40, 0xa, x6, 224, x25)

inst_73:
// rs1_val == 256, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x100;  op2val:0x3
TEST_RR_OP(divu, x12, x10, x11, 0x55, 0x100, 0x3, x6, 228, x25)

inst_74:
// rs1_val == 512, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x200;  op2val:0xfffffeff
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x200, 0xfffffeff, x6, 232, x25)

inst_75:
// rs1_val == 4096, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x1000;  op2val:0x7
TEST_RR_OP(divu, x12, x10, x11, 0x249, 0x1000, 0x7, x6, 236, x25)

inst_76:
// rs1_val == 8192, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x2000;  op2val:0xaaaaaaaa
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x2000, 0xaaaaaaaa, x6, 240, x25)

inst_77:
// rs1_val == 16384, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x4000;  op2val:0x66666666
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x4000, 0x66666666, x6, 244, x25)

inst_78:
// rs1_val == 32768, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x8000;  op2val:0xfbffffff
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x8000, 0xfbffffff, x6, 248, x25)

inst_79:
// rs1_val == 131072, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x20000;  op2val:0xfffdffff
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x20000, 0xfffdffff, x6, 252, x25)

inst_80:
// rs1_val == 1048576, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x100000;  op2val:0x33333332
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x100000, 0x33333332, x6, 256, x25)

inst_81:
// rs1_val == 4194304, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x400000;  op2val:0x10000
TEST_RR_OP(divu, x12, x10, x11, 0x40, 0x400000, 0x10000, x6, 260, x25)

inst_82:
// rs1_val == 67108864, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x4000000;  op2val:0x3
TEST_RR_OP(divu, x12, x10, x11, 0x1555555, 0x4000000, 0x3, x6, 264, x25)

inst_83:
// rs1_val == 268435456, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x10000000;  op2val:0x12
TEST_RR_OP(divu, x12, x10, x11, 0xe38e38, 0x10000000, 0x12, x6, 268, x25)

inst_84:
// rs1_val == 536870912, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x20000000;  op2val:0x1
TEST_RR_OP(divu, x12, x10, x11, 0x20000000, 0x20000000, 0x1, x6, 272, x25)

inst_85:
// rs1_val == 2147483648, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x80000000;  op2val:0xfffffffe
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x80000000, 0xfffffffe, x6, 276, x25)

inst_86:
// rs1_val == 4294967293, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xfffffffd;  op2val:0x33333332
TEST_RR_OP(divu, x12, x10, x11, 0x5, 0xfffffffd, 0x33333332, x6, 280, x25)

inst_87:
// rs1_val == 4294967291, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xfffffffb;  op2val:0x20000000
TEST_RR_OP(divu, x12, x10, x11, 0x7, 0xfffffffb, 0x20000000, x6, 284, x25)

inst_88:
// rs1_val == 4294967263, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xffffffdf;  op2val:0x100
TEST_RR_OP(divu, x12, x10, x11, 0xffffff, 0xffffffdf, 0x100, x6, 288, x25)

inst_89:
// rs1_val == 4294967231, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xffffffbf;  op2val:0x2000000
TEST_RR_OP(divu, x12, x10, x11, 0x7f, 0xffffffbf, 0x2000000, x6, 292, x25)

inst_90:
// rs1_val == 4294967167, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xffffff7f;  op2val:0xefffffff
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0xffffff7f, 0xefffffff, x6, 296, x25)

inst_91:
// rs1_val == 4294966783, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xfffffdff;  op2val:0xffffdfff
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0xfffffdff, 0xffffdfff, x6, 300, x25)

inst_92:
// rs1_val == 4294966271, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xfffffbff;  op2val:0x400000
TEST_RR_OP(divu, x12, x10, x11, 0x3ff, 0xfffffbff, 0x400000, x6, 304, x25)

inst_93:
// rs1_val == 4294959103, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xffffdfff;  op2val:0x55555555
TEST_RR_OP(divu, x12, x10, x11, 0x2, 0xffffdfff, 0x55555555, x6, 308, x25)

inst_94:
// rs1_val == 4294950911, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xffffbfff;  op2val:0x55555555
TEST_RR_OP(divu, x12, x10, x11, 0x2, 0xffffbfff, 0x55555555, x6, 312, x25)

inst_95:
// rs1_val == 4294705151, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xfffbffff;  op2val:0x5
TEST_RR_OP(divu, x12, x10, x11, 0x33326666, 0xfffbffff, 0x5, x6, 316, x25)

inst_96:
// rs1_val == 4294443007, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xfff7ffff;  op2val:0xfffffffd
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xfff7ffff, 0xfffffffd, x6, 320, x25)

inst_97:
// rs1_val == 4278190079, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xfeffffff;  op2val:0xaaaaaaaa
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0xfeffffff, 0xaaaaaaaa, x6, 324, x25)

inst_98:
// rs1_val == 4026531839, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xefffffff;  op2val:0x200000
TEST_RR_OP(divu, x12, x10, x11, 0x77f, 0xefffffff, 0x200000, x6, 328, x25)

inst_99:
// rs1_val == 3758096383, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xdfffffff;  op2val:0xb505
TEST_RR_OP(divu, x12, x10, x11, 0x13cc8, 0xdfffffff, 0xb505, x6, 332, x25)

inst_100:
// rs1_val == 3221225471, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xbfffffff;  op2val:0x66666667
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0xbfffffff, 0x66666667, x6, 336, x25)

inst_101:
// rs1_val==3 and rs2_val==3, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x3
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x3, 0x3, x6, 340, x25)

inst_102:
// rs1_val==3 and rs2_val==1431655765, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x55555555
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x3, 0x55555555, x6, 344, x25)

inst_103:
// rs1_val==3 and rs2_val==2863311530, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0xaaaaaaaa
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x3, 0xaaaaaaaa, x6, 348, x25)

inst_104:
// rs1_val==3 and rs2_val==5, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x5
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x3, 0x5, x6, 352, x25)

inst_105:
// rs1_val==3 and rs2_val==858993459, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x33333333
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x3, 0x33333333, x6, 356, x25)

inst_106:
// rs1_val==3 and rs2_val==1717986918, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x66666666
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x3, 0x66666666, x6, 360, x25)

inst_107:
// rs1_val==3 and rs2_val==46340, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0xb504
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x3, 0xb504, x6, 364, x25)

inst_108:
// rs1_val==3 and rs2_val==0, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x0
TEST_RR_OP(divu, x12, x10, x11, 0xFFFFFFFF, 0x3, 0x0, x6, 368, x25)

inst_109:
// rs1_val==3 and rs2_val==65535, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0xffff
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x3, 0xffff, x6, 372, x25)

inst_110:
// rs1_val==3 and rs2_val==2, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x2
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x3, 0x2, x6, 376, x25)

inst_111:
// rs1_val==3 and rs2_val==1431655764, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x55555554
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x3, 0x55555554, x6, 380, x25)

inst_112:
// rs1_val==3 and rs2_val==2863311529, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0xaaaaaaa9
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x3, 0xaaaaaaa9, x6, 384, x25)

inst_113:
// rs1_val==3 and rs2_val==4, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x4
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x3, 0x4, x6, 388, x25)

inst_114:
// rs1_val==3 and rs2_val==858993458, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x33333332
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x3, 0x33333332, x6, 392, x25)

inst_115:
// rs1_val==3 and rs2_val==1717986917, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x66666665
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x3, 0x66666665, x6, 396, x25)

inst_116:
// rs1_val==3 and rs2_val==46339, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0xb503
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x3, 0xb503, x6, 400, x25)

inst_117:
// rs1_val==3 and rs2_val==65534, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0xfffe
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x3, 0xfffe, x6, 404, x25)

inst_118:
// rs1_val==3 and rs2_val==1431655766, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x55555556
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x3, 0x55555556, x6, 408, x25)

inst_119:
// rs1_val==3 and rs2_val==2863311531, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0xaaaaaaab
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x3, 0xaaaaaaab, x6, 412, x25)

inst_120:
// rs1_val==3 and rs2_val==6, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x6
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x3, 0x6, x6, 416, x25)

inst_121:
// rs1_val==3 and rs2_val==858993460, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x33333334
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x3, 0x33333334, x6, 420, x25)

inst_122:
// rs1_val==3 and rs2_val==1717986919, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x66666667
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x3, 0x66666667, x6, 424, x25)

inst_123:
// rs1_val==3 and rs2_val==46341, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0xb505
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x3, 0xb505, x6, 428, x25)

inst_124:
// rs1_val==3 and rs2_val==1, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x1
TEST_RR_OP(divu, x12, x10, x11, 0x3, 0x3, 0x1, x6, 432, x25)

inst_125:
// rs1_val==3 and rs2_val==65536, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x10000
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x3, 0x10000, x6, 436, x25)

inst_126:
// rs1_val==1431655765 and rs2_val==3, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x3
TEST_RR_OP(divu, x12, x10, x11, 0x1c71c71c, 0x55555555, 0x3, x6, 440, x25)

inst_127:
// rs1_val==1431655765 and rs2_val==1431655765, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x55555555
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x55555555, 0x55555555, x6, 444, x25)

inst_128:
// rs1_val==1431655765 and rs2_val==2863311530, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0xaaaaaaaa
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x55555555, 0xaaaaaaaa, x6, 448, x25)

inst_129:
// rs1_val==1431655765 and rs2_val==5, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x5
TEST_RR_OP(divu, x12, x10, x11, 0x11111111, 0x55555555, 0x5, x6, 452, x25)

inst_130:
// rs1_val==1431655765 and rs2_val==858993459, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x33333333
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x55555555, 0x33333333, x6, 456, x25)

inst_131:
// rs1_val==1431655765 and rs2_val==1717986918, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x66666666
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x55555555, 0x66666666, x6, 460, x25)

inst_132:
// rs1_val==1431655765 and rs2_val==46340, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0xb504
TEST_RR_OP(divu, x12, x10, x11, 0x78ae, 0x55555555, 0xb504, x6, 464, x25)

inst_133:
// rs1_val==1431655765 and rs2_val==0, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x0
TEST_RR_OP(divu, x12, x10, x11, 0xFFFFFFFF, 0x55555555, 0x0, x6, 468, x25)

inst_134:
// rs1_val==1431655765 and rs2_val==65535, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0xffff
TEST_RR_OP(divu, x12, x10, x11, 0x5555, 0x55555555, 0xffff, x6, 472, x25)

inst_135:
// rs1_val==1431655765 and rs2_val==2, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x2
TEST_RR_OP(divu, x12, x10, x11, 0x2aaaaaaa, 0x55555555, 0x2, x6, 476, x25)

inst_136:
// rs1_val==1431655765 and rs2_val==1431655764, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x55555554
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x55555555, 0x55555554, x6, 480, x25)

inst_137:
// rs1_val==1431655765 and rs2_val==2863311529, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0xaaaaaaa9
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x55555555, 0xaaaaaaa9, x6, 484, x25)

inst_138:
// rs1_val==1431655765 and rs2_val==4, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x4
TEST_RR_OP(divu, x12, x10, x11, 0x15555555, 0x55555555, 0x4, x6, 488, x25)

inst_139:
// rs1_val==1431655765 and rs2_val==858993458, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x33333332
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x55555555, 0x33333332, x6, 492, x25)

inst_140:
// rs1_val==1431655765 and rs2_val==1717986917, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x66666665
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x55555555, 0x66666665, x6, 496, x25)

inst_141:
// rs1_val==1431655765 and rs2_val==46339, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0xb503
TEST_RR_OP(divu, x12, x10, x11, 0x78af, 0x55555555, 0xb503, x6, 500, x25)

inst_142:
// rs1_val==1431655765 and rs2_val==65534, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0xfffe
TEST_RR_OP(divu, x12, x10, x11, 0x5556, 0x55555555, 0xfffe, x6, 504, x25)

inst_143:
// rs1_val==1431655765 and rs2_val==1431655766, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x55555556
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x55555555, 0x55555556, x6, 508, x25)

inst_144:
// rs1_val==1431655765 and rs2_val==2863311531, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0xaaaaaaab
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x55555555, 0xaaaaaaab, x6, 512, x25)

inst_145:
// rs1_val==1431655765 and rs2_val==6, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x6
TEST_RR_OP(divu, x12, x10, x11, 0xe38e38e, 0x55555555, 0x6, x6, 516, x25)

inst_146:
// rs1_val==1431655765 and rs2_val==858993460, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x33333334
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x55555555, 0x33333334, x6, 520, x25)

inst_147:
// rs1_val==1431655765 and rs2_val==1717986919, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x66666667
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x55555555, 0x66666667, x6, 524, x25)

inst_148:
// rs1_val==1431655765 and rs2_val==46341, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0xb505
TEST_RR_OP(divu, x12, x10, x11, 0x78ad, 0x55555555, 0xb505, x6, 528, x25)

inst_149:
// rs1_val==1431655765 and rs2_val==1, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x1
TEST_RR_OP(divu, x12, x10, x11, 0x55555555, 0x55555555, 0x1, x6, 532, x25)

inst_150:
// rs1_val==1431655765 and rs2_val==65536, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x10000
TEST_RR_OP(divu, x12, x10, x11, 0x5555, 0x55555555, 0x10000, x6, 536, x25)

inst_151:
// rs1_val==2863311530 and rs2_val==3, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaaa;  op2val:0x3
TEST_RR_OP(divu, x12, x10, x11, 0x38e38e38, 0xaaaaaaaa, 0x3, x6, 540, x25)

inst_152:
// rs1_val==2863311530 and rs2_val==1431655765, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaaa;  op2val:0x55555555
TEST_RR_OP(divu, x12, x10, x11, 0x2, 0xaaaaaaaa, 0x55555555, x6, 544, x25)

inst_153:
// rs1_val==2863311530 and rs2_val==2863311530, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaaa;  op2val:0xaaaaaaaa
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0xaaaaaaaa, 0xaaaaaaaa, x6, 548, x25)

inst_154:
// rs1_val==2863311530 and rs2_val==5, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaaa;  op2val:0x5
TEST_RR_OP(divu, x12, x10, x11, 0x22222222, 0xaaaaaaaa, 0x5, x6, 552, x25)

inst_155:
// rs1_val==2863311530 and rs2_val==858993459, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaaa;  op2val:0x33333333
TEST_RR_OP(divu, x12, x10, x11, 0x3, 0xaaaaaaaa, 0x33333333, x6, 556, x25)

inst_156:
// rs1_val==2863311530 and rs2_val==1717986918, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaaa;  op2val:0x66666666
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0xaaaaaaaa, 0x66666666, x6, 560, x25)

inst_157:
// rs1_val==2863311530 and rs2_val==46340, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaaa;  op2val:0xb504
TEST_RR_OP(divu, x12, x10, x11, 0xf15d, 0xaaaaaaaa, 0xb504, x6, 564, x25)

inst_158:
// rs1_val==2863311530 and rs2_val==65535, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaaa;  op2val:0xffff
TEST_RR_OP(divu, x12, x10, x11, 0xaaab, 0xaaaaaaaa, 0xffff, x6, 568, x25)

inst_159:
// rs1_val==2863311530 and rs2_val==2, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaaa;  op2val:0x2
TEST_RR_OP(divu, x12, x10, x11, 0x55555555, 0xaaaaaaaa, 0x2, x6, 572, x25)

inst_160:
// rs1_val==2863311530 and rs2_val==1431655764, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaaa;  op2val:0x55555554
TEST_RR_OP(divu, x12, x10, x11, 0x2, 0xaaaaaaaa, 0x55555554, x6, 576, x25)

inst_161:
// rs1_val==2863311530 and rs2_val==2863311529, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaaa;  op2val:0xaaaaaaa9
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0xaaaaaaaa, 0xaaaaaaa9, x6, 580, x25)

inst_162:
// rs1_val==2863311530 and rs2_val==4, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaaa;  op2val:0x4
TEST_RR_OP(divu, x12, x10, x11, 0x2aaaaaaa, 0xaaaaaaaa, 0x4, x6, 584, x25)

inst_163:
// rs1_val==2863311530 and rs2_val==858993458, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaaa;  op2val:0x33333332
TEST_RR_OP(divu, x12, x10, x11, 0x3, 0xaaaaaaaa, 0x33333332, x6, 588, x25)

inst_164:
// rs1_val==2863311530 and rs2_val==1717986917, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaaa;  op2val:0x66666665
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0xaaaaaaaa, 0x66666665, x6, 592, x25)

inst_165:
// rs1_val==2863311530 and rs2_val==46339, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaaa;  op2val:0xb503
TEST_RR_OP(divu, x12, x10, x11, 0xf15e, 0xaaaaaaaa, 0xb503, x6, 596, x25)

inst_166:
// rs1_val==2863311530 and rs2_val==65534, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaaa;  op2val:0xfffe
TEST_RR_OP(divu, x12, x10, x11, 0xaaac, 0xaaaaaaaa, 0xfffe, x6, 600, x25)

inst_167:
// rs1_val==2863311530 and rs2_val==1431655766, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaaa;  op2val:0x55555556
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0xaaaaaaaa, 0x55555556, x6, 604, x25)

inst_168:
// rs1_val==2863311530 and rs2_val==2863311531, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaaa;  op2val:0xaaaaaaab
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xaaaaaaaa, 0xaaaaaaab, x6, 608, x25)

inst_169:
// rs1_val==2863311530 and rs2_val==6, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaaa;  op2val:0x6
TEST_RR_OP(divu, x12, x10, x11, 0x1c71c71c, 0xaaaaaaaa, 0x6, x6, 612, x25)

inst_170:
// rs1_val==2863311530 and rs2_val==858993460, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaaa;  op2val:0x33333334
TEST_RR_OP(divu, x12, x10, x11, 0x3, 0xaaaaaaaa, 0x33333334, x6, 616, x25)

inst_171:
// rs1_val==2863311530 and rs2_val==1717986919, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaaa;  op2val:0x66666667
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0xaaaaaaaa, 0x66666667, x6, 620, x25)

inst_172:
// rs1_val==2863311530 and rs2_val==46341, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaaa;  op2val:0xb505
TEST_RR_OP(divu, x12, x10, x11, 0xf15b, 0xaaaaaaaa, 0xb505, x6, 624, x25)

inst_173:
// rs1_val==2863311530 and rs2_val==1, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaaa;  op2val:0x1
TEST_RR_OP(divu, x12, x10, x11, 0xaaaaaaaa, 0xaaaaaaaa, 0x1, x6, 628, x25)

inst_174:
// rs1_val==2863311530 and rs2_val==65536, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaaa;  op2val:0x10000
TEST_RR_OP(divu, x12, x10, x11, 0xaaaa, 0xaaaaaaaa, 0x10000, x6, 632, x25)

inst_175:
// rs1_val==5 and rs2_val==3, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x3
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x5, 0x3, x6, 636, x25)

inst_176:
// rs1_val==5 and rs2_val==1431655765, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x55555555
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x5, 0x55555555, x6, 640, x25)

inst_177:
// rs1_val==5 and rs2_val==2863311530, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0xaaaaaaaa
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x5, 0xaaaaaaaa, x6, 644, x25)

inst_178:
// rs1_val==5 and rs2_val==5, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x5
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x5, 0x5, x6, 648, x25)

inst_179:
// rs1_val==5 and rs2_val==858993459, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x33333333
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x5, 0x33333333, x6, 652, x25)

inst_180:
// rs1_val==5 and rs2_val==1717986918, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x66666666
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x5, 0x66666666, x6, 656, x25)

inst_181:
// rs1_val==5 and rs2_val==46340, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0xb504
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x5, 0xb504, x6, 660, x25)

inst_182:
// rs1_val==5 and rs2_val==0, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x0
TEST_RR_OP(divu, x12, x10, x11, 0xFFFFFFFF, 0x5, 0x0, x6, 664, x25)

inst_183:
// rs1_val==5 and rs2_val==65535, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0xffff
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x5, 0xffff, x6, 668, x25)

inst_184:
// rs1_val==5 and rs2_val==2, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x2
TEST_RR_OP(divu, x12, x10, x11, 0x2, 0x5, 0x2, x6, 672, x25)

inst_185:
// rs1_val==5 and rs2_val==1431655764, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x55555554
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x5, 0x55555554, x6, 676, x25)

inst_186:
// rs1_val==5 and rs2_val==2863311529, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0xaaaaaaa9
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x5, 0xaaaaaaa9, x6, 680, x25)

inst_187:
// rs1_val==5 and rs2_val==4, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x4
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x5, 0x4, x6, 684, x25)

inst_188:
// rs1_val==5 and rs2_val==858993458, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x33333332
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x5, 0x33333332, x6, 688, x25)

inst_189:
// rs1_val==5 and rs2_val==1717986917, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x66666665
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x5, 0x66666665, x6, 692, x25)

inst_190:
// rs1_val==5 and rs2_val==46339, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0xb503
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x5, 0xb503, x6, 696, x25)

inst_191:
// rs1_val==5 and rs2_val==65534, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0xfffe
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x5, 0xfffe, x6, 700, x25)

inst_192:
// rs1_val==5 and rs2_val==1431655766, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x55555556
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x5, 0x55555556, x6, 704, x25)

inst_193:
// rs1_val==5 and rs2_val==2863311531, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0xaaaaaaab
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x5, 0xaaaaaaab, x6, 708, x25)

inst_194:
// rs1_val==5 and rs2_val==6, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x6
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x5, 0x6, x6, 712, x25)

inst_195:
// rs1_val==5 and rs2_val==858993460, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x33333334
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x5, 0x33333334, x6, 716, x25)

inst_196:
// rs1_val==5 and rs2_val==1717986919, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x66666667
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x5, 0x66666667, x6, 720, x25)

inst_197:
// rs1_val==5 and rs2_val==46341, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0xb505
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x5, 0xb505, x6, 724, x25)

inst_198:
// rs1_val==5 and rs2_val==1, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x1
TEST_RR_OP(divu, x12, x10, x11, 0x5, 0x5, 0x1, x6, 728, x25)

inst_199:
// rs1_val==5 and rs2_val==65536, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x10000
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x5, 0x10000, x6, 732, x25)

inst_200:
// rs1_val==858993459 and rs2_val==3, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x3
TEST_RR_OP(divu, x12, x10, x11, 0x11111111, 0x33333333, 0x3, x6, 736, x25)

inst_201:
// rs1_val==858993459 and rs2_val==1431655765, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x55555555
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x33333333, 0x55555555, x6, 740, x25)

inst_202:
// rs1_val==858993459 and rs2_val==2863311530, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0xaaaaaaaa
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x33333333, 0xaaaaaaaa, x6, 744, x25)

inst_203:
// rs1_val==858993459 and rs2_val==5, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x5
TEST_RR_OP(divu, x12, x10, x11, 0xa3d70a3, 0x33333333, 0x5, x6, 748, x25)

inst_204:
// rs1_val==858993459 and rs2_val==858993459, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x33333333
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x33333333, 0x33333333, x6, 752, x25)

inst_205:
// rs1_val==858993459 and rs2_val==1717986918, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x66666666
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x33333333, 0x66666666, x6, 756, x25)

inst_206:
// rs1_val==858993459 and rs2_val==46340, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0xb504
TEST_RR_OP(divu, x12, x10, x11, 0x4868, 0x33333333, 0xb504, x6, 760, x25)

inst_207:
// rs1_val==858993459 and rs2_val==0, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x0
TEST_RR_OP(divu, x12, x10, x11, 0xFFFFFFFF, 0x33333333, 0x0, x6, 764, x25)

inst_208:
// rs1_val==858993459 and rs2_val==65535, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0xffff
TEST_RR_OP(divu, x12, x10, x11, 0x3333, 0x33333333, 0xffff, x6, 768, x25)

inst_209:
// rs1_val==858993459 and rs2_val==2, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x2
TEST_RR_OP(divu, x12, x10, x11, 0x19999999, 0x33333333, 0x2, x6, 772, x25)

inst_210:
// rs1_val==858993459 and rs2_val==1431655764, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x55555554
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x33333333, 0x55555554, x6, 776, x25)

inst_211:
// rs1_val==858993459 and rs2_val==2863311529, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0xaaaaaaa9
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x33333333, 0xaaaaaaa9, x6, 780, x25)

inst_212:
// rs1_val==858993459 and rs2_val==4, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x4
TEST_RR_OP(divu, x12, x10, x11, 0xccccccc, 0x33333333, 0x4, x6, 784, x25)

inst_213:
// rs1_val==858993459 and rs2_val==858993458, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x33333332
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x33333333, 0x33333332, x6, 788, x25)

inst_214:
// rs1_val==858993459 and rs2_val==1717986917, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x66666665
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x33333333, 0x66666665, x6, 792, x25)

inst_215:
// rs1_val==858993459 and rs2_val==46339, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0xb503
TEST_RR_OP(divu, x12, x10, x11, 0x4869, 0x33333333, 0xb503, x6, 796, x25)

inst_216:
// rs1_val==858993459 and rs2_val==65534, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0xfffe
TEST_RR_OP(divu, x12, x10, x11, 0x3333, 0x33333333, 0xfffe, x6, 800, x25)

inst_217:
// rs1_val==858993459 and rs2_val==1431655766, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x55555556
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x33333333, 0x55555556, x6, 804, x25)

inst_218:
// rs1_val==858993459 and rs2_val==2863311531, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0xaaaaaaab
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x33333333, 0xaaaaaaab, x6, 808, x25)

inst_219:
// rs1_val==858993459 and rs2_val==6, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x6
TEST_RR_OP(divu, x12, x10, x11, 0x8888888, 0x33333333, 0x6, x6, 812, x25)

inst_220:
// rs1_val==858993459 and rs2_val==858993460, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x33333334
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x33333333, 0x33333334, x6, 816, x25)

inst_221:
// rs1_val==858993459 and rs2_val==1717986919, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x66666667
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x33333333, 0x66666667, x6, 820, x25)

inst_222:
// rs1_val==858993459 and rs2_val==46341, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0xb505
TEST_RR_OP(divu, x12, x10, x11, 0x4868, 0x33333333, 0xb505, x6, 824, x25)

inst_223:
// rs1_val==858993459 and rs2_val==1, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x1
TEST_RR_OP(divu, x12, x10, x11, 0x33333333, 0x33333333, 0x1, x6, 828, x25)

inst_224:
// rs1_val==858993459 and rs2_val==65536, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x10000
TEST_RR_OP(divu, x12, x10, x11, 0x3333, 0x33333333, 0x10000, x6, 832, x25)

inst_225:
// rs1_val==1717986918 and rs2_val==3, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x3
TEST_RR_OP(divu, x12, x10, x11, 0x22222222, 0x66666666, 0x3, x6, 836, x25)

inst_226:
// rs1_val==1717986918 and rs2_val==1431655765, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x55555555
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x66666666, 0x55555555, x6, 840, x25)

inst_227:
// rs1_val==1717986918 and rs2_val==2863311530, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0xaaaaaaaa
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x66666666, 0xaaaaaaaa, x6, 844, x25)

inst_228:
// rs1_val==1717986918 and rs2_val==5, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x5
TEST_RR_OP(divu, x12, x10, x11, 0x147ae147, 0x66666666, 0x5, x6, 848, x25)

inst_229:
// rs1_val==1717986918 and rs2_val==858993459, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x33333333
TEST_RR_OP(divu, x12, x10, x11, 0x2, 0x66666666, 0x33333333, x6, 852, x25)

inst_230:
// rs1_val==1717986918 and rs2_val==1717986918, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x66666666
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x66666666, 0x66666666, x6, 856, x25)

inst_231:
// rs1_val==1717986918 and rs2_val==46340, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0xb504
TEST_RR_OP(divu, x12, x10, x11, 0x90d1, 0x66666666, 0xb504, x6, 860, x25)

inst_232:
// rs1_val==1717986918 and rs2_val==0, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x0
TEST_RR_OP(divu, x12, x10, x11, 0xFFFFFFFF, 0x66666666, 0x0, x6, 864, x25)

inst_233:
// rs1_val==1717986918 and rs2_val==65535, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0xffff
TEST_RR_OP(divu, x12, x10, x11, 0x6666, 0x66666666, 0xffff, x6, 868, x25)

inst_234:
// rs1_val==1717986918 and rs2_val==2, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x2
TEST_RR_OP(divu, x12, x10, x11, 0x33333333, 0x66666666, 0x2, x6, 872, x25)

inst_235:
// rs1_val==1717986918 and rs2_val==1431655764, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x55555554
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x66666666, 0x55555554, x6, 876, x25)

inst_236:
// rs1_val==1717986918 and rs2_val==2863311529, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0xaaaaaaa9
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x66666666, 0xaaaaaaa9, x6, 880, x25)

inst_237:
// rs1_val==1717986918 and rs2_val==4, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x4
TEST_RR_OP(divu, x12, x10, x11, 0x19999999, 0x66666666, 0x4, x6, 884, x25)

inst_238:
// rs1_val==1717986918 and rs2_val==858993458, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x33333332
TEST_RR_OP(divu, x12, x10, x11, 0x2, 0x66666666, 0x33333332, x6, 888, x25)

inst_239:
// rs1_val==1717986918 and rs2_val==1717986917, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x66666665
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x66666666, 0x66666665, x6, 892, x25)

inst_240:
// rs1_val==1717986918 and rs2_val==46339, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0xb503
TEST_RR_OP(divu, x12, x10, x11, 0x90d2, 0x66666666, 0xb503, x6, 896, x25)

inst_241:
// rs1_val==1717986918 and rs2_val==65534, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0xfffe
TEST_RR_OP(divu, x12, x10, x11, 0x6667, 0x66666666, 0xfffe, x6, 900, x25)

inst_242:
// rs1_val==1717986918 and rs2_val==1431655766, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x55555556
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x66666666, 0x55555556, x6, 904, x25)

inst_243:
// rs1_val==1717986918 and rs2_val==2863311531, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0xaaaaaaab
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x66666666, 0xaaaaaaab, x6, 908, x25)

inst_244:
// rs1_val==1717986918 and rs2_val==6, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x6
TEST_RR_OP(divu, x12, x10, x11, 0x11111111, 0x66666666, 0x6, x6, 912, x25)

inst_245:
// rs1_val==1717986918 and rs2_val==858993460, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x33333334
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x66666666, 0x33333334, x6, 916, x25)

inst_246:
// rs1_val==1717986918 and rs2_val==1717986919, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x66666667
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x66666666, 0x66666667, x6, 920, x25)

inst_247:
// rs1_val==1717986918 and rs2_val==46341, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0xb505
TEST_RR_OP(divu, x12, x10, x11, 0x90d0, 0x66666666, 0xb505, x6, 924, x25)

inst_248:
// rs1_val==1717986918 and rs2_val==1, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x1
TEST_RR_OP(divu, x12, x10, x11, 0x66666666, 0x66666666, 0x1, x6, 928, x25)

inst_249:
// rs1_val==1717986918 and rs2_val==65536, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x10000
TEST_RR_OP(divu, x12, x10, x11, 0x6666, 0x66666666, 0x10000, x6, 932, x25)

inst_250:
// rs1_val==46340 and rs2_val==3, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x3
TEST_RR_OP(divu, x12, x10, x11, 0x3c56, 0xb504, 0x3, x6, 936, x25)

inst_251:
// rs1_val==46340 and rs2_val==1431655765, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x55555555
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xb504, 0x55555555, x6, 940, x25)

inst_252:
// rs1_val==46340 and rs2_val==2863311530, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0xaaaaaaaa
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xb504, 0xaaaaaaaa, x6, 944, x25)

inst_253:
// rs1_val==46340 and rs2_val==5, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x5
TEST_RR_OP(divu, x12, x10, x11, 0x2434, 0xb504, 0x5, x6, 948, x25)

inst_254:
// rs1_val==46340 and rs2_val==858993459, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x33333333
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xb504, 0x33333333, x6, 952, x25)

inst_255:
// rs1_val==46340 and rs2_val==1717986918, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x66666666
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xb504, 0x66666666, x6, 956, x25)

inst_256:
// rs1_val==46340 and rs2_val==46340, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0xb504
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0xb504, 0xb504, x6, 960, x25)

inst_257:
// rs1_val==46340 and rs2_val==0, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x0
TEST_RR_OP(divu, x12, x10, x11, 0xFFFFFFFF, 0xb504, 0x0, x6, 964, x25)

inst_258:
// rs1_val==46340 and rs2_val==65535, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0xffff
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xb504, 0xffff, x6, 968, x25)

inst_259:
// rs1_val==46340 and rs2_val==2, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x2
TEST_RR_OP(divu, x12, x10, x11, 0x5a82, 0xb504, 0x2, x6, 972, x25)

inst_260:
// rs1_val==46340 and rs2_val==1431655764, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x55555554
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xb504, 0x55555554, x6, 976, x25)

inst_261:
// rs1_val==46340 and rs2_val==2863311529, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0xaaaaaaa9
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xb504, 0xaaaaaaa9, x6, 980, x25)

inst_262:
// rs1_val==46340 and rs2_val==4, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x4
TEST_RR_OP(divu, x12, x10, x11, 0x2d41, 0xb504, 0x4, x6, 984, x25)

inst_263:
// rs1_val==46340 and rs2_val==858993458, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x33333332
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xb504, 0x33333332, x6, 988, x25)

inst_264:
// rs1_val==46340 and rs2_val==1717986917, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x66666665
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xb504, 0x66666665, x6, 992, x25)

inst_265:
// rs1_val==46340 and rs2_val==46339, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0xb503
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0xb504, 0xb503, x6, 996, x25)

inst_266:
// rs1_val==46340 and rs2_val==65534, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0xfffe
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xb504, 0xfffe, x6, 1000, x25)

inst_267:
// rs1_val==46340 and rs2_val==1431655766, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x55555556
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xb504, 0x55555556, x6, 1004, x25)

inst_268:
// rs1_val==46340 and rs2_val==2863311531, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0xaaaaaaab
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xb504, 0xaaaaaaab, x6, 1008, x25)

inst_269:
// rs1_val==46340 and rs2_val==6, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x6
TEST_RR_OP(divu, x12, x10, x11, 0x1e2b, 0xb504, 0x6, x6, 1012, x25)

inst_270:
// rs1_val==46340 and rs2_val==858993460, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x33333334
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xb504, 0x33333334, x6, 1016, x25)

inst_271:
// rs1_val==46340 and rs2_val==1717986919, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x66666667
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xb504, 0x66666667, x6, 1020, x25)

inst_272:
// rs1_val==46340 and rs2_val==46341, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0xb505
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xb504, 0xb505, x6, 1024, x25)

inst_273:
// rs1_val==46340 and rs2_val==1, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x1
TEST_RR_OP(divu, x12, x10, x11, 0xb504, 0xb504, 0x1, x6, 1028, x25)

inst_274:
// rs1_val==46340 and rs2_val==65536, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x10000
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xb504, 0x10000, x6, 1032, x25)

inst_275:
// rs1_val==0 and rs2_val==3, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x3
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x0, 0x3, x6, 1036, x25)

inst_276:
// rs1_val==0 and rs2_val==1431655765, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x55555555
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x0, 0x55555555, x6, 1040, x25)

inst_277:
// rs1_val==0 and rs2_val==2863311530, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0xaaaaaaaa
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x0, 0xaaaaaaaa, x6, 1044, x25)

inst_278:
// rs1_val==0 and rs2_val==5, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x5
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x0, 0x5, x6, 1048, x25)

inst_279:
// rs1_val==0 and rs2_val==858993459, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x33333333
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x0, 0x33333333, x6, 1052, x25)

inst_280:
// rs1_val==0 and rs2_val==1717986918, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x66666666
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x0, 0x66666666, x6, 1056, x25)

inst_281:
// rs1_val==0 and rs2_val==46340, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0xb504
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x0, 0xb504, x6, 1060, x25)

inst_282:
// rs1_val==0 and rs2_val==0, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x0
TEST_RR_OP(divu, x12, x10, x11, 0xFFFFFFFF, 0x0, 0x0, x6, 1064, x25)

inst_283:
// rs1_val==0 and rs2_val==65535, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0xffff
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x0, 0xffff, x6, 1068, x25)

inst_284:
// rs1_val==0 and rs2_val==2, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x2
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x0, 0x2, x6, 1072, x25)

inst_285:
// rs1_val==0 and rs2_val==1431655764, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x55555554
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x0, 0x55555554, x6, 1076, x25)

inst_286:
// rs1_val==0 and rs2_val==2863311529, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0xaaaaaaa9
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x0, 0xaaaaaaa9, x6, 1080, x25)

inst_287:
// rs1_val==0 and rs2_val==4, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x4
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x0, 0x4, x6, 1084, x25)

inst_288:
// rs1_val==0 and rs2_val==858993458, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x33333332
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x0, 0x33333332, x6, 1088, x25)

inst_289:
// rs1_val==0 and rs2_val==1717986917, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x66666665
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x0, 0x66666665, x6, 1092, x25)

inst_290:
// rs1_val==0 and rs2_val==46339, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0xb503
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x0, 0xb503, x6, 1096, x25)

inst_291:
// rs1_val==0 and rs2_val==65534, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0xfffe
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x0, 0xfffe, x6, 1100, x25)

inst_292:
// rs1_val==0 and rs2_val==1431655766, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x55555556
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x0, 0x55555556, x6, 1104, x25)

inst_293:
// rs1_val==0 and rs2_val==2863311531, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0xaaaaaaab
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x0, 0xaaaaaaab, x6, 1108, x25)

inst_294:
// rs1_val==0 and rs2_val==6, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x6
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x0, 0x6, x6, 1112, x25)

inst_295:
// rs1_val==0 and rs2_val==858993460, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x33333334
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x0, 0x33333334, x6, 1116, x25)

inst_296:
// rs1_val==0 and rs2_val==1717986919, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x66666667
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x0, 0x66666667, x6, 1120, x25)

inst_297:
// rs1_val==0 and rs2_val==46341, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0xb505
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x0, 0xb505, x6, 1124, x25)

inst_298:
// rs1_val==0 and rs2_val==1, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x1
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x0, 0x1, x6, 1128, x25)

inst_299:
// rs1_val==0 and rs2_val==65536, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x10000
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x0, 0x10000, x6, 1132, x25)

inst_300:
// rs1_val==65535 and rs2_val==3, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xffff;  op2val:0x3
TEST_RR_OP(divu, x12, x10, x11, 0x5555, 0xffff, 0x3, x6, 1136, x25)

inst_301:
// rs1_val==65535 and rs2_val==1431655765, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xffff;  op2val:0x55555555
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xffff, 0x55555555, x6, 1140, x25)

inst_302:
// rs1_val==65535 and rs2_val==2863311530, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xffff;  op2val:0xaaaaaaaa
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xffff, 0xaaaaaaaa, x6, 1144, x25)

inst_303:
// rs1_val==65535 and rs2_val==5, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xffff;  op2val:0x5
TEST_RR_OP(divu, x12, x10, x11, 0x3333, 0xffff, 0x5, x6, 1148, x25)

inst_304:
// rs1_val==65535 and rs2_val==858993459, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xffff;  op2val:0x33333333
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xffff, 0x33333333, x6, 1152, x25)

inst_305:
// rs1_val==65535 and rs2_val==1717986918, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xffff;  op2val:0x66666666
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xffff, 0x66666666, x6, 1156, x25)

inst_306:
// rs1_val==65535 and rs2_val==46340, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xffff;  op2val:0xb504
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0xffff, 0xb504, x6, 1160, x25)

inst_307:
// rs1_val==65535 and rs2_val==0, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xffff;  op2val:0x0
TEST_RR_OP(divu, x12, x10, x11, 0xFFFFFFFF, 0xffff, 0x0, x6, 1164, x25)

inst_308:
// rs1_val==65535 and rs2_val==65535, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xffff;  op2val:0xffff
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0xffff, 0xffff, x6, 1168, x25)

inst_309:
// rs1_val==65535 and rs2_val==2, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xffff;  op2val:0x2
TEST_RR_OP(divu, x12, x10, x11, 0x7fff, 0xffff, 0x2, x6, 1172, x25)

inst_310:
// rs1_val==65535 and rs2_val==1431655764, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xffff;  op2val:0x55555554
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xffff, 0x55555554, x6, 1176, x25)

inst_311:
// rs1_val==65535 and rs2_val==2863311529, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xffff;  op2val:0xaaaaaaa9
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xffff, 0xaaaaaaa9, x6, 1180, x25)

inst_312:
// rs1_val==65535 and rs2_val==4, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xffff;  op2val:0x4
TEST_RR_OP(divu, x12, x10, x11, 0x3fff, 0xffff, 0x4, x6, 1184, x25)

inst_313:
// rs1_val==65535 and rs2_val==858993458, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xffff;  op2val:0x33333332
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xffff, 0x33333332, x6, 1188, x25)

inst_314:
// rs1_val==65535 and rs2_val==1717986917, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xffff;  op2val:0x66666665
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xffff, 0x66666665, x6, 1192, x25)

inst_315:
// rs1_val==65535 and rs2_val==46339, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xffff;  op2val:0xb503
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0xffff, 0xb503, x6, 1196, x25)

inst_316:
// rs1_val==65535 and rs2_val==65534, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xffff;  op2val:0xfffe
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0xffff, 0xfffe, x6, 1200, x25)

inst_317:
// rs1_val==65535 and rs2_val==1431655766, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xffff;  op2val:0x55555556
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xffff, 0x55555556, x6, 1204, x25)

inst_318:
// rs1_val==65535 and rs2_val==2863311531, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xffff;  op2val:0xaaaaaaab
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xffff, 0xaaaaaaab, x6, 1208, x25)

inst_319:
// rs1_val==65535 and rs2_val==6, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xffff;  op2val:0x6
TEST_RR_OP(divu, x12, x10, x11, 0x2aaa, 0xffff, 0x6, x6, 1212, x25)

inst_320:
// rs1_val==65535 and rs2_val==858993460, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xffff;  op2val:0x33333334
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xffff, 0x33333334, x6, 1216, x25)

inst_321:
// rs1_val==65535 and rs2_val==1717986919, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xffff;  op2val:0x66666667
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xffff, 0x66666667, x6, 1220, x25)

inst_322:
// rs1_val==65535 and rs2_val==46341, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xffff;  op2val:0xb505
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0xffff, 0xb505, x6, 1224, x25)

inst_323:
// rs1_val==65535 and rs2_val==1, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xffff;  op2val:0x1
TEST_RR_OP(divu, x12, x10, x11, 0xffff, 0xffff, 0x1, x6, 1228, x25)

inst_324:
// rs1_val==65535 and rs2_val==65536, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xffff;  op2val:0x10000
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xffff, 0x10000, x6, 1232, x25)

inst_325:
// rs1_val==2 and rs2_val==3, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x3
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x2, 0x3, x6, 1236, x25)

inst_326:
// rs1_val==2 and rs2_val==2863311530, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0xaaaaaaaa
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x2, 0xaaaaaaaa, x6, 1240, x25)

inst_327:
// rs1_val==2 and rs2_val==5, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x5
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x2, 0x5, x6, 1244, x25)

inst_328:
// rs1_val==2 and rs2_val==858993459, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x33333333
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x2, 0x33333333, x6, 1248, x25)

inst_329:
// rs1_val==2 and rs2_val==1717986918, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x66666666
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x2, 0x66666666, x6, 1252, x25)

inst_330:
// rs1_val==2 and rs2_val==46340, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0xb504
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x2, 0xb504, x6, 1256, x25)

inst_331:
// rs1_val==2 and rs2_val==0, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x0
TEST_RR_OP(divu, x12, x10, x11, 0xFFFFFFFF, 0x2, 0x0, x6, 1260, x25)

inst_332:
// rs1_val==2 and rs2_val==65535, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0xffff
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x2, 0xffff, x6, 1264, x25)

inst_333:
// rs1_val==2 and rs2_val==2, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x2
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x2, 0x2, x6, 1268, x25)

inst_334:
// rs1_val==2 and rs2_val==1431655764, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x55555554
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x2, 0x55555554, x6, 1272, x25)

inst_335:
// rs1_val==2 and rs2_val==2863311529, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0xaaaaaaa9
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x2, 0xaaaaaaa9, x6, 1276, x25)

inst_336:
// rs1_val==2 and rs2_val==4, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x4
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x2, 0x4, x6, 1280, x25)

inst_337:
// rs1_val==2 and rs2_val==858993458, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x33333332
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x2, 0x33333332, x6, 1284, x25)

inst_338:
// rs1_val==2 and rs2_val==1717986917, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x66666665
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x2, 0x66666665, x6, 1288, x25)

inst_339:
// rs1_val==2 and rs2_val==46339, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0xb503
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x2, 0xb503, x6, 1292, x25)

inst_340:
// rs1_val==2 and rs2_val==65534, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0xfffe
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x2, 0xfffe, x6, 1296, x25)

inst_341:
// rs1_val==2 and rs2_val==1431655766, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x55555556
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x2, 0x55555556, x6, 1300, x25)

inst_342:
// rs1_val==2 and rs2_val==2863311531, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0xaaaaaaab
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x2, 0xaaaaaaab, x6, 1304, x25)

inst_343:
// rs1_val==2 and rs2_val==6, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x6
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x2, 0x6, x6, 1308, x25)

inst_344:
// rs1_val==2 and rs2_val==858993460, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x33333334
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x2, 0x33333334, x6, 1312, x25)

inst_345:
// rs1_val==2 and rs2_val==1717986919, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x66666667
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x2, 0x66666667, x6, 1316, x25)

inst_346:
// rs1_val==2 and rs2_val==46341, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0xb505
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x2, 0xb505, x6, 1320, x25)

inst_347:
// rs1_val==2 and rs2_val==1, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x1
TEST_RR_OP(divu, x12, x10, x11, 0x2, 0x2, 0x1, x6, 1324, x25)

inst_348:
// rs1_val==2 and rs2_val==65536, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x10000
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x2, 0x10000, x6, 1328, x25)

inst_349:
// rs1_val==1431655764 and rs2_val==3, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x3
TEST_RR_OP(divu, x12, x10, x11, 0x1c71c71c, 0x55555554, 0x3, x6, 1332, x25)

inst_350:
// rs1_val==1431655764 and rs2_val==1431655765, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x55555555
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x55555554, 0x55555555, x6, 1336, x25)

inst_351:
// rs1_val==1431655764 and rs2_val==2863311530, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0xaaaaaaaa
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x55555554, 0xaaaaaaaa, x6, 1340, x25)

inst_352:
// rs1_val==1431655764 and rs2_val==5, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x5
TEST_RR_OP(divu, x12, x10, x11, 0x11111110, 0x55555554, 0x5, x6, 1344, x25)

inst_353:
// rs1_val==1431655764 and rs2_val==858993459, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x33333333
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x55555554, 0x33333333, x6, 1348, x25)

inst_354:
// rs1_val==1431655764 and rs2_val==1717986918, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x66666666
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x55555554, 0x66666666, x6, 1352, x25)

inst_355:
// rs1_val==1431655764 and rs2_val==46340, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0xb504
TEST_RR_OP(divu, x12, x10, x11, 0x78ae, 0x55555554, 0xb504, x6, 1356, x25)

inst_356:
// rs1_val==1431655764 and rs2_val==0, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x0
TEST_RR_OP(divu, x12, x10, x11, 0xFFFFFFFF, 0x55555554, 0x0, x6, 1360, x25)

inst_357:
// rs1_val==1431655764 and rs2_val==65535, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0xffff
TEST_RR_OP(divu, x12, x10, x11, 0x5555, 0x55555554, 0xffff, x6, 1364, x25)

inst_358:
// rs1_val==1431655764 and rs2_val==2, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x2
TEST_RR_OP(divu, x12, x10, x11, 0x2aaaaaaa, 0x55555554, 0x2, x6, 1368, x25)

inst_359:
// rs1_val==1431655764 and rs2_val==1431655764, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x55555554
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x55555554, 0x55555554, x6, 1372, x25)

inst_360:
// rs1_val==1431655764 and rs2_val==2863311529, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0xaaaaaaa9
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x55555554, 0xaaaaaaa9, x6, 1376, x25)

inst_361:
// rs1_val==1431655764 and rs2_val==4, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x4
TEST_RR_OP(divu, x12, x10, x11, 0x15555555, 0x55555554, 0x4, x6, 1380, x25)

inst_362:
// rs1_val==1431655764 and rs2_val==858993458, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x33333332
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x55555554, 0x33333332, x6, 1384, x25)

inst_363:
// rs1_val==1431655764 and rs2_val==1717986917, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x66666665
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x55555554, 0x66666665, x6, 1388, x25)

inst_364:
// rs1_val==1431655764 and rs2_val==46339, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0xb503
TEST_RR_OP(divu, x12, x10, x11, 0x78af, 0x55555554, 0xb503, x6, 1392, x25)

inst_365:
// rs1_val==1431655764 and rs2_val==65534, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0xfffe
TEST_RR_OP(divu, x12, x10, x11, 0x5556, 0x55555554, 0xfffe, x6, 1396, x25)

inst_366:
// rs1_val==1431655764 and rs2_val==1431655766, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x55555556
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x55555554, 0x55555556, x6, 1400, x25)

inst_367:
// rs1_val==1431655764 and rs2_val==2863311531, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0xaaaaaaab
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x55555554, 0xaaaaaaab, x6, 1404, x25)

inst_368:
// rs1_val==1431655764 and rs2_val==6, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x6
TEST_RR_OP(divu, x12, x10, x11, 0xe38e38e, 0x55555554, 0x6, x6, 1408, x25)

inst_369:
// rs1_val==1431655764 and rs2_val==858993460, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x33333334
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x55555554, 0x33333334, x6, 1412, x25)

inst_370:
// rs1_val==1431655764 and rs2_val==1717986919, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x66666667
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x55555554, 0x66666667, x6, 1416, x25)

inst_371:
// rs1_val==1431655764 and rs2_val==46341, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0xb505
TEST_RR_OP(divu, x12, x10, x11, 0x78ad, 0x55555554, 0xb505, x6, 1420, x25)

inst_372:
// rs1_val==1431655764 and rs2_val==1, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x1
TEST_RR_OP(divu, x12, x10, x11, 0x55555554, 0x55555554, 0x1, x6, 1424, x25)

inst_373:
// rs1_val==1431655764 and rs2_val==65536, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x10000
TEST_RR_OP(divu, x12, x10, x11, 0x5555, 0x55555554, 0x10000, x6, 1428, x25)

inst_374:
// rs1_val==2863311529 and rs2_val==3, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaa9;  op2val:0x3
TEST_RR_OP(divu, x12, x10, x11, 0x38e38e38, 0xaaaaaaa9, 0x3, x6, 1432, x25)

inst_375:
// rs1_val==2863311529 and rs2_val==1431655765, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaa9;  op2val:0x55555555
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0xaaaaaaa9, 0x55555555, x6, 1436, x25)

inst_376:
// rs1_val==2863311529 and rs2_val==2863311530, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaa9;  op2val:0xaaaaaaaa
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xaaaaaaa9, 0xaaaaaaaa, x6, 1440, x25)

inst_377:
// rs1_val==2863311529 and rs2_val==5, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaa9;  op2val:0x5
TEST_RR_OP(divu, x12, x10, x11, 0x22222221, 0xaaaaaaa9, 0x5, x6, 1444, x25)

inst_378:
// rs1_val==2863311529 and rs2_val==858993459, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaa9;  op2val:0x33333333
TEST_RR_OP(divu, x12, x10, x11, 0x3, 0xaaaaaaa9, 0x33333333, x6, 1448, x25)

inst_379:
// rs1_val==2863311529 and rs2_val==1717986918, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaa9;  op2val:0x66666666
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0xaaaaaaa9, 0x66666666, x6, 1452, x25)

inst_380:
// rs1_val==2863311529 and rs2_val==46340, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaa9;  op2val:0xb504
TEST_RR_OP(divu, x12, x10, x11, 0xf15d, 0xaaaaaaa9, 0xb504, x6, 1456, x25)

inst_381:
// rs1_val==2863311529 and rs2_val==0, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaa9;  op2val:0x0
TEST_RR_OP(divu, x12, x10, x11, 0xFFFFFFFF, 0xaaaaaaa9, 0x0, x6, 1460, x25)

inst_382:
// rs1_val==2863311529 and rs2_val==65535, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaa9;  op2val:0xffff
TEST_RR_OP(divu, x12, x10, x11, 0xaaab, 0xaaaaaaa9, 0xffff, x6, 1464, x25)

inst_383:
// rs1_val==2863311529 and rs2_val==2, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaa9;  op2val:0x2
TEST_RR_OP(divu, x12, x10, x11, 0x55555554, 0xaaaaaaa9, 0x2, x6, 1468, x25)

inst_384:
// rs1_val==2863311529 and rs2_val==1431655764, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaa9;  op2val:0x55555554
TEST_RR_OP(divu, x12, x10, x11, 0x2, 0xaaaaaaa9, 0x55555554, x6, 1472, x25)

inst_385:
// rs1_val==2863311529 and rs2_val==2863311529, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaa9;  op2val:0xaaaaaaa9
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0xaaaaaaa9, 0xaaaaaaa9, x6, 1476, x25)

inst_386:
// rs1_val==2863311529 and rs2_val==4, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaa9;  op2val:0x4
TEST_RR_OP(divu, x12, x10, x11, 0x2aaaaaaa, 0xaaaaaaa9, 0x4, x6, 1480, x25)

inst_387:
// rs1_val==2863311529 and rs2_val==858993458, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaa9;  op2val:0x33333332
TEST_RR_OP(divu, x12, x10, x11, 0x3, 0xaaaaaaa9, 0x33333332, x6, 1484, x25)

inst_388:
// rs1_val==2863311529 and rs2_val==1717986917, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaa9;  op2val:0x66666665
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0xaaaaaaa9, 0x66666665, x6, 1488, x25)

inst_389:
// rs1_val==2863311529 and rs2_val==46339, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaa9;  op2val:0xb503
TEST_RR_OP(divu, x12, x10, x11, 0xf15e, 0xaaaaaaa9, 0xb503, x6, 1492, x25)

inst_390:
// rs1_val==2863311529 and rs2_val==65534, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaa9;  op2val:0xfffe
TEST_RR_OP(divu, x12, x10, x11, 0xaaac, 0xaaaaaaa9, 0xfffe, x6, 1496, x25)

inst_391:
// rs1_val==2863311529 and rs2_val==1431655766, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaa9;  op2val:0x55555556
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0xaaaaaaa9, 0x55555556, x6, 1500, x25)

inst_392:
// rs1_val==2863311529 and rs2_val==2863311531, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaa9;  op2val:0xaaaaaaab
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xaaaaaaa9, 0xaaaaaaab, x6, 1504, x25)

inst_393:
// rs1_val==2863311529 and rs2_val==6, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaa9;  op2val:0x6
TEST_RR_OP(divu, x12, x10, x11, 0x1c71c71c, 0xaaaaaaa9, 0x6, x6, 1508, x25)

inst_394:
// rs1_val==2863311529 and rs2_val==858993460, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaa9;  op2val:0x33333334
TEST_RR_OP(divu, x12, x10, x11, 0x3, 0xaaaaaaa9, 0x33333334, x6, 1512, x25)

inst_395:
// rs1_val==2863311529 and rs2_val==1717986919, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaa9;  op2val:0x66666667
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0xaaaaaaa9, 0x66666667, x6, 1516, x25)

inst_396:
// rs1_val==2863311529 and rs2_val==46341, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaa9;  op2val:0xb505
TEST_RR_OP(divu, x12, x10, x11, 0xf15b, 0xaaaaaaa9, 0xb505, x6, 1520, x25)

inst_397:
// rs1_val==2863311529 and rs2_val==1, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaa9;  op2val:0x1
TEST_RR_OP(divu, x12, x10, x11, 0xaaaaaaa9, 0xaaaaaaa9, 0x1, x6, 1524, x25)

inst_398:
// rs1_val==2863311529 and rs2_val==65536, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaa9;  op2val:0x10000
TEST_RR_OP(divu, x12, x10, x11, 0xaaaa, 0xaaaaaaa9, 0x10000, x6, 1528, x25)

inst_399:
// rs1_val==4 and rs2_val==3, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x3
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x4, 0x3, x6, 1532, x25)

inst_400:
// rs1_val==4 and rs2_val==1431655765, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x55555555
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x4, 0x55555555, x6, 1536, x25)

inst_401:
// rs1_val==4 and rs2_val==2863311530, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0xaaaaaaaa
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x4, 0xaaaaaaaa, x6, 1540, x25)

inst_402:
// rs1_val==4 and rs2_val==5, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x5
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x4, 0x5, x6, 1544, x25)

inst_403:
// rs1_val==4 and rs2_val==1717986918, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x66666666
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x4, 0x66666666, x6, 1548, x25)

inst_404:
// rs1_val==4 and rs2_val==46340, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0xb504
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x4, 0xb504, x6, 1552, x25)

inst_405:
// rs1_val==4 and rs2_val==0, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x0
TEST_RR_OP(divu, x12, x10, x11, 0xFFFFFFFF, 0x4, 0x0, x6, 1556, x25)

inst_406:
// rs1_val==4 and rs2_val==65535, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0xffff
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x4, 0xffff, x6, 1560, x25)

inst_407:
// rs1_val==4 and rs2_val==2, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x2
TEST_RR_OP(divu, x12, x10, x11, 0x2, 0x4, 0x2, x6, 1564, x25)

inst_408:
// rs1_val==4 and rs2_val==1431655764, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x55555554
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x4, 0x55555554, x6, 1568, x25)

inst_409:
// rs1_val==4 and rs2_val==2863311529, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0xaaaaaaa9
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x4, 0xaaaaaaa9, x6, 1572, x25)

inst_410:
// rs1_val==4 and rs2_val==4, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x4
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x4, 0x4, x6, 1576, x25)

inst_411:
// rs1_val==4 and rs2_val==858993458, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x33333332
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x4, 0x33333332, x6, 1580, x25)

inst_412:
// rs1_val==4 and rs2_val==1717986917, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x66666665
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x4, 0x66666665, x6, 1584, x25)

inst_413:
// rs1_val==4 and rs2_val==46339, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0xb503
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x4, 0xb503, x6, 1588, x25)

inst_414:
// rs1_val==4 and rs2_val==65534, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0xfffe
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x4, 0xfffe, x6, 1592, x25)

inst_415:
// rs1_val==4 and rs2_val==1431655766, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x55555556
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x4, 0x55555556, x6, 1596, x25)

inst_416:
// rs1_val==4 and rs2_val==2863311531, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0xaaaaaaab
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x4, 0xaaaaaaab, x6, 1600, x25)

inst_417:
// rs1_val==4 and rs2_val==6, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x6
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x4, 0x6, x6, 1604, x25)

inst_418:
// rs1_val==4 and rs2_val==858993460, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x33333334
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x4, 0x33333334, x6, 1608, x25)

inst_419:
// rs1_val==4 and rs2_val==1717986919, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x66666667
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x4, 0x66666667, x6, 1612, x25)

inst_420:
// rs1_val==4 and rs2_val==46341, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0xb505
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x4, 0xb505, x6, 1616, x25)

inst_421:
// rs1_val==4 and rs2_val==1, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x1
TEST_RR_OP(divu, x12, x10, x11, 0x4, 0x4, 0x1, x6, 1620, x25)

inst_422:
// rs1_val==4 and rs2_val==65536, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x10000
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x4, 0x10000, x6, 1624, x25)

inst_423:
// rs1_val==858993458 and rs2_val==3, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x3
TEST_RR_OP(divu, x12, x10, x11, 0x11111110, 0x33333332, 0x3, x6, 1628, x25)

inst_424:
// rs1_val==858993458 and rs2_val==1431655765, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x55555555
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x33333332, 0x55555555, x6, 1632, x25)

inst_425:
// rs1_val==858993458 and rs2_val==2863311530, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0xaaaaaaaa
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x33333332, 0xaaaaaaaa, x6, 1636, x25)

inst_426:
// rs1_val==858993458 and rs2_val==5, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x5
TEST_RR_OP(divu, x12, x10, x11, 0xa3d70a3, 0x33333332, 0x5, x6, 1640, x25)

inst_427:
// rs1_val==858993458 and rs2_val==858993459, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x33333333
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x33333332, 0x33333333, x6, 1644, x25)

inst_428:
// rs1_val==858993458 and rs2_val==1717986918, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x66666666
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x33333332, 0x66666666, x6, 1648, x25)

inst_429:
// rs1_val==858993458 and rs2_val==46340, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0xb504
TEST_RR_OP(divu, x12, x10, x11, 0x4868, 0x33333332, 0xb504, x6, 1652, x25)

inst_430:
// rs1_val==858993458 and rs2_val==0, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x0
TEST_RR_OP(divu, x12, x10, x11, 0xFFFFFFFF, 0x33333332, 0x0, x6, 1656, x25)

inst_431:
// rs1_val==858993458 and rs2_val==65535, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0xffff
TEST_RR_OP(divu, x12, x10, x11, 0x3333, 0x33333332, 0xffff, x6, 1660, x25)

inst_432:
// rs1_val==858993458 and rs2_val==2, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x2
TEST_RR_OP(divu, x12, x10, x11, 0x19999999, 0x33333332, 0x2, x6, 1664, x25)

inst_433:
// rs1_val==858993458 and rs2_val==1431655764, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x55555554
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x33333332, 0x55555554, x6, 1668, x25)

inst_434:
// rs1_val==858993458 and rs2_val==2863311529, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0xaaaaaaa9
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x33333332, 0xaaaaaaa9, x6, 1672, x25)

inst_435:
// rs1_val==858993458 and rs2_val==4, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x4
TEST_RR_OP(divu, x12, x10, x11, 0xccccccc, 0x33333332, 0x4, x6, 1676, x25)

inst_436:
// rs1_val==858993458 and rs2_val==858993458, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x33333332
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x33333332, 0x33333332, x6, 1680, x25)

inst_437:
// rs1_val==858993458 and rs2_val==1717986917, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x66666665
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x33333332, 0x66666665, x6, 1684, x25)

inst_438:
// rs1_val==858993458 and rs2_val==46339, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0xb503
TEST_RR_OP(divu, x12, x10, x11, 0x4869, 0x33333332, 0xb503, x6, 1688, x25)

inst_439:
// rs1_val==858993458 and rs2_val==65534, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0xfffe
TEST_RR_OP(divu, x12, x10, x11, 0x3333, 0x33333332, 0xfffe, x6, 1692, x25)

inst_440:
// rs1_val==858993458 and rs2_val==1431655766, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x55555556
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x33333332, 0x55555556, x6, 1696, x25)

inst_441:
// rs1_val==858993458 and rs2_val==2863311531, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0xaaaaaaab
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x33333332, 0xaaaaaaab, x6, 1700, x25)

inst_442:
// rs1_val==858993458 and rs2_val==6, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x6
TEST_RR_OP(divu, x12, x10, x11, 0x8888888, 0x33333332, 0x6, x6, 1704, x25)

inst_443:
// rs1_val==858993458 and rs2_val==858993460, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x33333334
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x33333332, 0x33333334, x6, 1708, x25)

inst_444:
// rs1_val==858993458 and rs2_val==1717986919, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x66666667
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x33333332, 0x66666667, x6, 1712, x25)

inst_445:
// rs1_val==858993458 and rs2_val==46341, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0xb505
TEST_RR_OP(divu, x12, x10, x11, 0x4868, 0x33333332, 0xb505, x6, 1716, x25)

inst_446:
// rs1_val==858993458 and rs2_val==1, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x1
TEST_RR_OP(divu, x12, x10, x11, 0x33333332, 0x33333332, 0x1, x6, 1720, x25)

inst_447:
// rs1_val==858993458 and rs2_val==65536, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x10000
TEST_RR_OP(divu, x12, x10, x11, 0x3333, 0x33333332, 0x10000, x6, 1724, x25)

inst_448:
// rs1_val==1717986917 and rs2_val==3, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x3
TEST_RR_OP(divu, x12, x10, x11, 0x22222221, 0x66666665, 0x3, x6, 1728, x25)

inst_449:
// rs1_val==1717986917 and rs2_val==1431655765, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x55555555
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x66666665, 0x55555555, x6, 1732, x25)

inst_450:
// rs1_val==1717986917 and rs2_val==2863311530, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0xaaaaaaaa
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x66666665, 0xaaaaaaaa, x6, 1736, x25)

inst_451:
// rs1_val==1717986917 and rs2_val==5, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x5
TEST_RR_OP(divu, x12, x10, x11, 0x147ae147, 0x66666665, 0x5, x6, 1740, x25)

inst_452:
// rs1_val==1717986917 and rs2_val==858993459, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x33333333
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x66666665, 0x33333333, x6, 1744, x25)

inst_453:
// rs1_val==1717986917 and rs2_val==1717986918, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x66666666
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x66666665, 0x66666666, x6, 1748, x25)

inst_454:
// rs1_val==1717986917 and rs2_val==46340, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0xb504
TEST_RR_OP(divu, x12, x10, x11, 0x90d1, 0x66666665, 0xb504, x6, 1752, x25)

inst_455:
// rs1_val==1717986917 and rs2_val==0, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x0
TEST_RR_OP(divu, x12, x10, x11, 0xFFFFFFFF, 0x66666665, 0x0, x6, 1756, x25)

inst_456:
// rs1_val==1717986917 and rs2_val==65535, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0xffff
TEST_RR_OP(divu, x12, x10, x11, 0x6666, 0x66666665, 0xffff, x6, 1760, x25)

inst_457:
// rs1_val==1717986917 and rs2_val==2, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x2
TEST_RR_OP(divu, x12, x10, x11, 0x33333332, 0x66666665, 0x2, x6, 1764, x25)

inst_458:
// rs1_val==1717986917 and rs2_val==1431655764, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x55555554
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x66666665, 0x55555554, x6, 1768, x25)

inst_459:
// rs1_val==1717986917 and rs2_val==2863311529, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0xaaaaaaa9
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x66666665, 0xaaaaaaa9, x6, 1772, x25)

inst_460:
// rs1_val==1717986917 and rs2_val==4, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x4
TEST_RR_OP(divu, x12, x10, x11, 0x19999999, 0x66666665, 0x4, x6, 1776, x25)

inst_461:
// rs1_val==1717986917 and rs2_val==858993458, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x33333332
TEST_RR_OP(divu, x12, x10, x11, 0x2, 0x66666665, 0x33333332, x6, 1780, x25)

inst_462:
// rs1_val==1717986917 and rs2_val==1717986917, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x66666665
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x66666665, 0x66666665, x6, 1784, x25)

inst_463:
// rs1_val==1717986917 and rs2_val==46339, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0xb503
TEST_RR_OP(divu, x12, x10, x11, 0x90d2, 0x66666665, 0xb503, x6, 1788, x25)

inst_464:
// rs1_val==1717986917 and rs2_val==65534, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0xfffe
TEST_RR_OP(divu, x12, x10, x11, 0x6667, 0x66666665, 0xfffe, x6, 1792, x25)

inst_465:
// rs1_val==1717986917 and rs2_val==1431655766, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x55555556
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x66666665, 0x55555556, x6, 1796, x25)

inst_466:
// rs1_val==1717986917 and rs2_val==1, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x1
TEST_RR_OP(divu, x12, x10, x11, 0x66666665, 0x66666665, 0x1, x6, 1800, x25)

inst_467:
// rs1_val==1717986917 and rs2_val==65536, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x10000
TEST_RR_OP(divu, x12, x10, x11, 0x6666, 0x66666665, 0x10000, x6, 1804, x25)

inst_468:
// rs1_val==46339 and rs2_val==3, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x3
TEST_RR_OP(divu, x12, x10, x11, 0x3c56, 0xb503, 0x3, x6, 1808, x25)

inst_469:
// rs1_val==46339 and rs2_val==1431655765, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x55555555
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xb503, 0x55555555, x6, 1812, x25)

inst_470:
// rs1_val==46339 and rs2_val==2863311530, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0xaaaaaaaa
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xb503, 0xaaaaaaaa, x6, 1816, x25)

inst_471:
// rs1_val==46339 and rs2_val==5, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x5
TEST_RR_OP(divu, x12, x10, x11, 0x2433, 0xb503, 0x5, x6, 1820, x25)

inst_472:
// rs1_val==46339 and rs2_val==858993459, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x33333333
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xb503, 0x33333333, x6, 1824, x25)

inst_473:
// rs1_val==46339 and rs2_val==1717986918, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x66666666
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xb503, 0x66666666, x6, 1828, x25)

inst_474:
// rs1_val==46339 and rs2_val==46340, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0xb504
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xb503, 0xb504, x6, 1832, x25)

inst_475:
// rs1_val==46339 and rs2_val==0, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x0
TEST_RR_OP(divu, x12, x10, x11, 0xFFFFFFFF, 0xb503, 0x0, x6, 1836, x25)

inst_476:
// rs1_val==46339 and rs2_val==65535, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0xffff
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xb503, 0xffff, x6, 1840, x25)

inst_477:
// rs1_val==46339 and rs2_val==2, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x2
TEST_RR_OP(divu, x12, x10, x11, 0x5a81, 0xb503, 0x2, x6, 1844, x25)

inst_478:
// rs1_val==46339 and rs2_val==1431655764, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x55555554
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xb503, 0x55555554, x6, 1848, x25)

inst_479:
// rs1_val==46339 and rs2_val==2863311529, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0xaaaaaaa9
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xb503, 0xaaaaaaa9, x6, 1852, x25)

inst_480:
// rs1_val==46339 and rs2_val==4, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x4
TEST_RR_OP(divu, x12, x10, x11, 0x2d40, 0xb503, 0x4, x6, 1856, x25)

inst_481:
// rs1_val==46339 and rs2_val==858993458, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x33333332
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xb503, 0x33333332, x6, 1860, x25)

inst_482:
// rs1_val==46339 and rs2_val==1717986917, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x66666665
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xb503, 0x66666665, x6, 1864, x25)

inst_483:
// rs1_val==46339 and rs2_val==46339, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0xb503
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0xb503, 0xb503, x6, 1868, x25)

inst_484:
// rs1_val==46339 and rs2_val==65534, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0xfffe
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xb503, 0xfffe, x6, 1872, x25)

inst_485:
// rs1_val==46339 and rs2_val==1431655766, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x55555556
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xb503, 0x55555556, x6, 1876, x25)

inst_486:
// rs1_val==46339 and rs2_val==2863311531, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0xaaaaaaab
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xb503, 0xaaaaaaab, x6, 1880, x25)

inst_487:
// rs1_val==46339 and rs2_val==6, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x6
TEST_RR_OP(divu, x12, x10, x11, 0x1e2b, 0xb503, 0x6, x6, 1884, x25)

inst_488:
// rs1_val==46339 and rs2_val==858993460, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x33333334
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xb503, 0x33333334, x6, 1888, x25)

inst_489:
// rs1_val==46339 and rs2_val==1717986919, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x66666667
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xb503, 0x66666667, x6, 1892, x25)

inst_490:
// rs1_val==46339 and rs2_val==46341, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0xb505
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xb503, 0xb505, x6, 1896, x25)

inst_491:
// rs1_val==46339 and rs2_val==1, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x1
TEST_RR_OP(divu, x12, x10, x11, 0xb503, 0xb503, 0x1, x6, 1900, x25)

inst_492:
// rs1_val==46339 and rs2_val==65536, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x10000
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xb503, 0x10000, x6, 1904, x25)

inst_493:
// rs1_val==65534 and rs2_val==3, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xfffe;  op2val:0x3
TEST_RR_OP(divu, x12, x10, x11, 0x5554, 0xfffe, 0x3, x6, 1908, x25)

inst_494:
// rs1_val==65534 and rs2_val==1431655765, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xfffe;  op2val:0x55555555
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xfffe, 0x55555555, x6, 1912, x25)

inst_495:
// rs1_val==65534 and rs2_val==2863311530, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xfffe;  op2val:0xaaaaaaaa
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xfffe, 0xaaaaaaaa, x6, 1916, x25)

inst_496:
// rs1_val==65534 and rs2_val==5, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xfffe;  op2val:0x5
TEST_RR_OP(divu, x12, x10, x11, 0x3332, 0xfffe, 0x5, x6, 1920, x25)

inst_497:
// rs1_val==65534 and rs2_val==858993459, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xfffe;  op2val:0x33333333
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xfffe, 0x33333333, x6, 1924, x25)

inst_498:
// rs1_val==65534 and rs2_val==1717986918, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xfffe;  op2val:0x66666666
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xfffe, 0x66666666, x6, 1928, x25)

inst_499:
// rs1_val==65534 and rs2_val==46340, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xfffe;  op2val:0xb504
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0xfffe, 0xb504, x6, 1932, x25)

inst_500:
// rs1_val==65534 and rs2_val==0, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xfffe;  op2val:0x0
TEST_RR_OP(divu, x12, x10, x11, 0xFFFFFFFF, 0xfffe, 0x0, x6, 1936, x25)

inst_501:
// rs1_val==65534 and rs2_val==65535, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xfffe;  op2val:0xffff
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xfffe, 0xffff, x6, 1940, x25)

inst_502:
// rs1_val==65534 and rs2_val==2, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xfffe;  op2val:0x2
TEST_RR_OP(divu, x12, x10, x11, 0x7fff, 0xfffe, 0x2, x6, 1944, x25)

inst_503:
// rs1_val==65534 and rs2_val==1431655764, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xfffe;  op2val:0x55555554
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xfffe, 0x55555554, x6, 1948, x25)

inst_504:
// rs1_val==65534 and rs2_val==2863311529, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xfffe;  op2val:0xaaaaaaa9
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xfffe, 0xaaaaaaa9, x6, 1952, x25)

inst_505:
// rs1_val==65534 and rs2_val==4, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xfffe;  op2val:0x4
TEST_RR_OP(divu, x12, x10, x11, 0x3fff, 0xfffe, 0x4, x6, 1956, x25)

inst_506:
// rs1_val==65534 and rs2_val==858993458, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xfffe;  op2val:0x33333332
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xfffe, 0x33333332, x6, 1960, x25)

inst_507:
// rs1_val==65534 and rs2_val==1717986917, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xfffe;  op2val:0x66666665
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xfffe, 0x66666665, x6, 1964, x25)

inst_508:
// rs1_val==65534 and rs2_val==46339, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xfffe;  op2val:0xb503
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0xfffe, 0xb503, x6, 1968, x25)

inst_509:
// rs1_val==65534 and rs2_val==1431655766, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xfffe;  op2val:0x55555556
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xfffe, 0x55555556, x6, 1972, x25)

inst_510:
// rs1_val==65534 and rs2_val==2863311531, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xfffe;  op2val:0xaaaaaaab
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xfffe, 0xaaaaaaab, x6, 1976, x25)

inst_511:
// rs1_val==65534 and rs2_val==6, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xfffe;  op2val:0x6
TEST_RR_OP(divu, x12, x10, x11, 0x2aaa, 0xfffe, 0x6, x6, 1980, x25)

inst_512:
// rs1_val==65534 and rs2_val==858993460, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xfffe;  op2val:0x33333334
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xfffe, 0x33333334, x6, 1984, x25)

inst_513:
// rs1_val==65534 and rs2_val==1717986919, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xfffe;  op2val:0x66666667
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xfffe, 0x66666667, x6, 1988, x25)

inst_514:
// rs1_val==65534 and rs2_val==46341, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xfffe;  op2val:0xb505
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0xfffe, 0xb505, x6, 1992, x25)

inst_515:
// rs1_val==65534 and rs2_val==1, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xfffe;  op2val:0x1
TEST_RR_OP(divu, x12, x10, x11, 0xfffe, 0xfffe, 0x1, x6, 1996, x25)

inst_516:
// rs1_val==65534 and rs2_val==65536, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xfffe;  op2val:0x10000
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xfffe, 0x10000, x6, 2000, x25)

inst_517:
// rs1_val==1431655766 and rs2_val==3, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x3
TEST_RR_OP(divu, x12, x10, x11, 0x1c71c71c, 0x55555556, 0x3, x6, 2004, x25)

inst_518:
// rs1_val==1431655766 and rs2_val==1431655765, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x55555555
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x55555556, 0x55555555, x6, 2008, x25)

inst_519:
// rs1_val==1431655766 and rs2_val==2863311530, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0xaaaaaaaa
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x55555556, 0xaaaaaaaa, x6, 2012, x25)

inst_520:
// rs1_val==1431655766 and rs2_val==5, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x5
TEST_RR_OP(divu, x12, x10, x11, 0x11111111, 0x55555556, 0x5, x6, 2016, x25)

inst_521:
// rs1_val==1431655766 and rs2_val==858993459, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x33333333
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x55555556, 0x33333333, x6, 2020, x25)

inst_522:
// rs1_val==1431655766 and rs2_val==1717986918, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x66666666
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x55555556, 0x66666666, x6, 2024, x25)

inst_523:
// rs1_val==1431655766 and rs2_val==46340, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0xb504
TEST_RR_OP(divu, x12, x10, x11, 0x78ae, 0x55555556, 0xb504, x6, 2028, x25)

inst_524:
// rs1_val==1431655766 and rs2_val==0, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x0
TEST_RR_OP(divu, x12, x10, x11, 0xFFFFFFFF, 0x55555556, 0x0, x6, 2032, x25)

inst_525:
// rs1_val==1431655766 and rs2_val==65535, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0xffff
TEST_RR_OP(divu, x12, x10, x11, 0x5555, 0x55555556, 0xffff, x6, 2036, x25)

inst_526:
// rs1_val==1431655766 and rs2_val==2, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x2
TEST_RR_OP(divu, x12, x10, x11, 0x2aaaaaab, 0x55555556, 0x2, x6, 2040, x25)

inst_527:
// rs1_val==1431655766 and rs2_val==1431655764, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x55555554
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x55555556, 0x55555554, x6, 2044, x25)
RVTEST_SIGBASE( x6,signature_x6_1)

inst_528:
// rs1_val==1431655766 and rs2_val==2863311529, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0xaaaaaaa9
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x55555556, 0xaaaaaaa9, x6, 0, x25)

inst_529:
// rs1_val==1431655766 and rs2_val==4, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x4
TEST_RR_OP(divu, x12, x10, x11, 0x15555555, 0x55555556, 0x4, x6, 4, x25)

inst_530:
// rs1_val==1431655766 and rs2_val==858993458, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x33333332
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x55555556, 0x33333332, x6, 8, x25)

inst_531:
// rs1_val==1431655766 and rs2_val==1717986917, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x66666665
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x55555556, 0x66666665, x6, 12, x25)

inst_532:
// rs1_val==1431655766 and rs2_val==46339, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0xb503
TEST_RR_OP(divu, x12, x10, x11, 0x78af, 0x55555556, 0xb503, x6, 16, x25)

inst_533:
// rs1_val==1431655766 and rs2_val==65534, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0xfffe
TEST_RR_OP(divu, x12, x10, x11, 0x5556, 0x55555556, 0xfffe, x6, 20, x25)

inst_534:
// rs1_val==1431655766 and rs2_val==1431655766, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x55555556
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x55555556, 0x55555556, x6, 24, x25)

inst_535:
// rs1_val==1431655766 and rs2_val==2863311531, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0xaaaaaaab
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x55555556, 0xaaaaaaab, x6, 28, x25)

inst_536:
// rs1_val==1431655766 and rs2_val==6, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x6
TEST_RR_OP(divu, x12, x10, x11, 0xe38e38e, 0x55555556, 0x6, x6, 32, x25)

inst_537:
// rs1_val==1431655766 and rs2_val==858993460, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x33333334
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x55555556, 0x33333334, x6, 36, x25)

inst_538:
// rs1_val==1431655766 and rs2_val==1717986919, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x66666667
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x55555556, 0x66666667, x6, 40, x25)

inst_539:
// rs1_val==1431655766 and rs2_val==46341, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0xb505
TEST_RR_OP(divu, x12, x10, x11, 0x78ad, 0x55555556, 0xb505, x6, 44, x25)

inst_540:
// rs1_val==1431655766 and rs2_val==1, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x1
TEST_RR_OP(divu, x12, x10, x11, 0x55555556, 0x55555556, 0x1, x6, 48, x25)

inst_541:
// rs1_val==1431655766 and rs2_val==65536, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x10000
TEST_RR_OP(divu, x12, x10, x11, 0x5555, 0x55555556, 0x10000, x6, 52, x25)

inst_542:
// rs1_val==2863311531 and rs2_val==3, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaab;  op2val:0x3
TEST_RR_OP(divu, x12, x10, x11, 0x38e38e39, 0xaaaaaaab, 0x3, x6, 56, x25)

inst_543:
// rs1_val==2863311531 and rs2_val==1431655765, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaab;  op2val:0x55555555
TEST_RR_OP(divu, x12, x10, x11, 0x2, 0xaaaaaaab, 0x55555555, x6, 60, x25)

inst_544:
// rs1_val==2863311531 and rs2_val==2863311530, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaab;  op2val:0xaaaaaaaa
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0xaaaaaaab, 0xaaaaaaaa, x6, 64, x25)

inst_545:
// rs1_val==2863311531 and rs2_val==5, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaab;  op2val:0x5
TEST_RR_OP(divu, x12, x10, x11, 0x22222222, 0xaaaaaaab, 0x5, x6, 68, x25)

inst_546:
// rs1_val==2863311531 and rs2_val==858993459, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaab;  op2val:0x33333333
TEST_RR_OP(divu, x12, x10, x11, 0x3, 0xaaaaaaab, 0x33333333, x6, 72, x25)

inst_547:
// rs1_val==2863311531 and rs2_val==1717986918, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaab;  op2val:0x66666666
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0xaaaaaaab, 0x66666666, x6, 76, x25)

inst_548:
// rs1_val==2863311531 and rs2_val==46340, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaab;  op2val:0xb504
TEST_RR_OP(divu, x12, x10, x11, 0xf15d, 0xaaaaaaab, 0xb504, x6, 80, x25)

inst_549:
// rs1_val==2863311531 and rs2_val==0, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaab;  op2val:0x0
TEST_RR_OP(divu, x12, x10, x11, 0xFFFFFFFF, 0xaaaaaaab, 0x0, x6, 84, x25)

inst_550:
// rs1_val==2863311531 and rs2_val==65535, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaab;  op2val:0xffff
TEST_RR_OP(divu, x12, x10, x11, 0xaaab, 0xaaaaaaab, 0xffff, x6, 88, x25)

inst_551:
// rs1_val==2863311531 and rs2_val==2, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaab;  op2val:0x2
TEST_RR_OP(divu, x12, x10, x11, 0x55555555, 0xaaaaaaab, 0x2, x6, 92, x25)

inst_552:
// rs1_val==2863311531 and rs2_val==1431655764, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaab;  op2val:0x55555554
TEST_RR_OP(divu, x12, x10, x11, 0x2, 0xaaaaaaab, 0x55555554, x6, 96, x25)

inst_553:
// rs1_val==2863311531 and rs2_val==2863311529, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaab;  op2val:0xaaaaaaa9
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0xaaaaaaab, 0xaaaaaaa9, x6, 100, x25)

inst_554:
// rs1_val==2863311531 and rs2_val==4, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaab;  op2val:0x4
TEST_RR_OP(divu, x12, x10, x11, 0x2aaaaaaa, 0xaaaaaaab, 0x4, x6, 104, x25)

inst_555:
// rs1_val==2863311531 and rs2_val==858993458, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaab;  op2val:0x33333332
TEST_RR_OP(divu, x12, x10, x11, 0x3, 0xaaaaaaab, 0x33333332, x6, 108, x25)

inst_556:
// rs1_val==2863311531 and rs2_val==1717986917, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaab;  op2val:0x66666665
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0xaaaaaaab, 0x66666665, x6, 112, x25)

inst_557:
// rs1_val==2863311531 and rs2_val==46339, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaab;  op2val:0xb503
TEST_RR_OP(divu, x12, x10, x11, 0xf15e, 0xaaaaaaab, 0xb503, x6, 116, x25)

inst_558:
// rs1_val==2863311531 and rs2_val==65534, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaab;  op2val:0xfffe
TEST_RR_OP(divu, x12, x10, x11, 0xaaac, 0xaaaaaaab, 0xfffe, x6, 120, x25)

inst_559:
// rs1_val==2863311531 and rs2_val==1431655766, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaab;  op2val:0x55555556
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0xaaaaaaab, 0x55555556, x6, 124, x25)

inst_560:
// rs1_val==2863311531 and rs2_val==2863311531, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaab;  op2val:0xaaaaaaab
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0xaaaaaaab, 0xaaaaaaab, x6, 128, x25)

inst_561:
// rs1_val==2863311531 and rs2_val==6, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaab;  op2val:0x6
TEST_RR_OP(divu, x12, x10, x11, 0x1c71c71c, 0xaaaaaaab, 0x6, x6, 132, x25)

inst_562:
// rs1_val==2863311531 and rs2_val==858993460, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaab;  op2val:0x33333334
TEST_RR_OP(divu, x12, x10, x11, 0x3, 0xaaaaaaab, 0x33333334, x6, 136, x25)

inst_563:
// rs1_val==2863311531 and rs2_val==1717986919, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaab;  op2val:0x66666667
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0xaaaaaaab, 0x66666667, x6, 140, x25)

inst_564:
// rs1_val==2863311531 and rs2_val==46341, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaab;  op2val:0xb505
TEST_RR_OP(divu, x12, x10, x11, 0xf15b, 0xaaaaaaab, 0xb505, x6, 144, x25)

inst_565:
// rs1_val==2863311531 and rs2_val==1, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaab;  op2val:0x1
TEST_RR_OP(divu, x12, x10, x11, 0xaaaaaaab, 0xaaaaaaab, 0x1, x6, 148, x25)

inst_566:
// rs1_val==2863311531 and rs2_val==65536, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaab;  op2val:0x10000
TEST_RR_OP(divu, x12, x10, x11, 0xaaaa, 0xaaaaaaab, 0x10000, x6, 152, x25)

inst_567:
// rs1_val==6 and rs2_val==3, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x3
TEST_RR_OP(divu, x12, x10, x11, 0x2, 0x6, 0x3, x6, 156, x25)

inst_568:
// rs1_val==6 and rs2_val==1431655765, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x55555555
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x6, 0x55555555, x6, 160, x25)

inst_569:
// rs1_val==6 and rs2_val==2863311530, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0xaaaaaaaa
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x6, 0xaaaaaaaa, x6, 164, x25)

inst_570:
// rs1_val==6 and rs2_val==5, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x5
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x6, 0x5, x6, 168, x25)

inst_571:
// rs1_val==6 and rs2_val==858993459, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x33333333
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x6, 0x33333333, x6, 172, x25)

inst_572:
// rs1_val==6 and rs2_val==1717986918, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x66666666
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x6, 0x66666666, x6, 176, x25)

inst_573:
// rs1_val==6 and rs2_val==46340, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0xb504
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x6, 0xb504, x6, 180, x25)

inst_574:
// rs1_val==6 and rs2_val==0, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x0
TEST_RR_OP(divu, x12, x10, x11, 0xFFFFFFFF, 0x6, 0x0, x6, 184, x25)

inst_575:
// rs1_val==6 and rs2_val==65535, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0xffff
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x6, 0xffff, x6, 188, x25)

inst_576:
// rs1_val==6 and rs2_val==2, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x2
TEST_RR_OP(divu, x12, x10, x11, 0x3, 0x6, 0x2, x6, 192, x25)

inst_577:
// rs1_val==6 and rs2_val==1431655764, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x55555554
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x6, 0x55555554, x6, 196, x25)

inst_578:
// rs1_val==6 and rs2_val==2863311529, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0xaaaaaaa9
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x6, 0xaaaaaaa9, x6, 200, x25)

inst_579:
// rs1_val==6 and rs2_val==4, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x4
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x6, 0x4, x6, 204, x25)

inst_580:
// rs1_val==6 and rs2_val==858993458, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x33333332
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x6, 0x33333332, x6, 208, x25)

inst_581:
// rs1_val==6 and rs2_val==1717986917, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x66666665
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x6, 0x66666665, x6, 212, x25)

inst_582:
// rs1_val==6 and rs2_val==46339, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0xb503
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x6, 0xb503, x6, 216, x25)

inst_583:
// rs1_val==6 and rs2_val==65534, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0xfffe
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x6, 0xfffe, x6, 220, x25)

inst_584:
// rs1_val==6 and rs2_val==1431655766, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x55555556
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x6, 0x55555556, x6, 224, x25)

inst_585:
// rs1_val==6 and rs2_val==2863311531, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0xaaaaaaab
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x6, 0xaaaaaaab, x6, 228, x25)

inst_586:
// rs1_val==6 and rs2_val==6, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x6
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x6, 0x6, x6, 232, x25)

inst_587:
// rs1_val==6 and rs2_val==858993460, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x33333334
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x6, 0x33333334, x6, 236, x25)

inst_588:
// rs1_val==6 and rs2_val==1717986919, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x66666667
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x6, 0x66666667, x6, 240, x25)

inst_589:
// rs1_val==6 and rs2_val==46341, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0xb505
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x6, 0xb505, x6, 244, x25)

inst_590:
// rs1_val==6 and rs2_val==1, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x1
TEST_RR_OP(divu, x12, x10, x11, 0x6, 0x6, 0x1, x6, 248, x25)

inst_591:
// rs1_val==6 and rs2_val==65536, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x10000
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x6, 0x10000, x6, 252, x25)

inst_592:
// rs1_val==858993460 and rs2_val==3, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x3
TEST_RR_OP(divu, x12, x10, x11, 0x11111111, 0x33333334, 0x3, x6, 256, x25)

inst_593:
// rs1_val==858993460 and rs2_val==1431655765, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x55555555
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x33333334, 0x55555555, x6, 260, x25)

inst_594:
// rs1_val==858993460 and rs2_val==2863311530, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0xaaaaaaaa
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x33333334, 0xaaaaaaaa, x6, 264, x25)

inst_595:
// rs1_val==1717986917 and rs2_val==46341, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0xb505
TEST_RR_OP(divu, x12, x10, x11, 0x90d0, 0x66666665, 0xb505, x6, 268, x25)

inst_596:
// rs1_val==858993460 and rs2_val==5, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x5
TEST_RR_OP(divu, x12, x10, x11, 0xa3d70a4, 0x33333334, 0x5, x6, 272, x25)

inst_597:
// rs1_val==858993460 and rs2_val==858993459, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x33333333
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x33333334, 0x33333333, x6, 276, x25)

inst_598:
// rs1_val==858993460 and rs2_val==1717986918, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x66666666
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x33333334, 0x66666666, x6, 280, x25)

inst_599:
// rs1_val==858993460 and rs2_val==46340, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0xb504
TEST_RR_OP(divu, x12, x10, x11, 0x4868, 0x33333334, 0xb504, x6, 284, x25)

inst_600:
// rs1_val==858993460 and rs2_val==0, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x0
TEST_RR_OP(divu, x12, x10, x11, 0xFFFFFFFF, 0x33333334, 0x0, x6, 288, x25)

inst_601:
// rs1_val==858993460 and rs2_val==65535, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0xffff
TEST_RR_OP(divu, x12, x10, x11, 0x3333, 0x33333334, 0xffff, x6, 292, x25)

inst_602:
// rs1_val==858993460 and rs2_val==2, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x2
TEST_RR_OP(divu, x12, x10, x11, 0x1999999a, 0x33333334, 0x2, x6, 296, x25)

inst_603:
// rs1_val==858993460 and rs2_val==1431655764, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x55555554
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x33333334, 0x55555554, x6, 300, x25)

inst_604:
// rs1_val==858993460 and rs2_val==2863311529, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0xaaaaaaa9
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x33333334, 0xaaaaaaa9, x6, 304, x25)

inst_605:
// rs1_val==858993460 and rs2_val==4, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x4
TEST_RR_OP(divu, x12, x10, x11, 0xccccccd, 0x33333334, 0x4, x6, 308, x25)

inst_606:
// rs1_val==858993460 and rs2_val==858993458, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x33333332
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x33333334, 0x33333332, x6, 312, x25)

inst_607:
// rs1_val==858993460 and rs2_val==1717986917, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x66666665
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x33333334, 0x66666665, x6, 316, x25)

inst_608:
// rs1_val==858993460 and rs2_val==46339, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0xb503
TEST_RR_OP(divu, x12, x10, x11, 0x4869, 0x33333334, 0xb503, x6, 320, x25)

inst_609:
// rs1_val==858993460 and rs2_val==65534, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0xfffe
TEST_RR_OP(divu, x12, x10, x11, 0x3333, 0x33333334, 0xfffe, x6, 324, x25)

inst_610:
// rs1_val==858993460 and rs2_val==1431655766, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x55555556
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x33333334, 0x55555556, x6, 328, x25)

inst_611:
// rs1_val==858993460 and rs2_val==2863311531, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0xaaaaaaab
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x33333334, 0xaaaaaaab, x6, 332, x25)

inst_612:
// rs1_val==858993460 and rs2_val==6, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x6
TEST_RR_OP(divu, x12, x10, x11, 0x8888888, 0x33333334, 0x6, x6, 336, x25)

inst_613:
// rs1_val==858993460 and rs2_val==858993460, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x33333334
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x33333334, 0x33333334, x6, 340, x25)

inst_614:
// rs1_val==858993460 and rs2_val==1717986919, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x66666667
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x33333334, 0x66666667, x6, 344, x25)

inst_615:
// rs1_val==858993460 and rs2_val==46341, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0xb505
TEST_RR_OP(divu, x12, x10, x11, 0x4868, 0x33333334, 0xb505, x6, 348, x25)

inst_616:
// rs1_val==858993460 and rs2_val==1, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x1
TEST_RR_OP(divu, x12, x10, x11, 0x33333334, 0x33333334, 0x1, x6, 352, x25)

inst_617:
// rs1_val==858993460 and rs2_val==65536, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x10000
TEST_RR_OP(divu, x12, x10, x11, 0x3333, 0x33333334, 0x10000, x6, 356, x25)

inst_618:
// rs1_val==1717986919 and rs2_val==3, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x3
TEST_RR_OP(divu, x12, x10, x11, 0x22222222, 0x66666667, 0x3, x6, 360, x25)

inst_619:
// rs1_val==1717986919 and rs2_val==1431655765, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x55555555
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x66666667, 0x55555555, x6, 364, x25)

inst_620:
// rs1_val==1717986919 and rs2_val==2863311530, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0xaaaaaaaa
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x66666667, 0xaaaaaaaa, x6, 368, x25)

inst_621:
// rs1_val==1717986919 and rs2_val==5, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x5
TEST_RR_OP(divu, x12, x10, x11, 0x147ae147, 0x66666667, 0x5, x6, 372, x25)

inst_622:
// rs1_val==1717986919 and rs2_val==858993459, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x33333333
TEST_RR_OP(divu, x12, x10, x11, 0x2, 0x66666667, 0x33333333, x6, 376, x25)

inst_623:
// rs1_val==1717986919 and rs2_val==1717986918, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x66666666
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x66666667, 0x66666666, x6, 380, x25)

inst_624:
// rs1_val==1717986919 and rs2_val==46340, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0xb504
TEST_RR_OP(divu, x12, x10, x11, 0x90d1, 0x66666667, 0xb504, x6, 384, x25)

inst_625:
// rs1_val==1717986919 and rs2_val==0, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x0
TEST_RR_OP(divu, x12, x10, x11, 0xFFFFFFFF, 0x66666667, 0x0, x6, 388, x25)

inst_626:
// rs1_val==1717986919 and rs2_val==65535, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0xffff
TEST_RR_OP(divu, x12, x10, x11, 0x6666, 0x66666667, 0xffff, x6, 392, x25)

inst_627:
// rs1_val==1717986919 and rs2_val==2, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x2
TEST_RR_OP(divu, x12, x10, x11, 0x33333333, 0x66666667, 0x2, x6, 396, x25)

inst_628:
// rs1_val==1717986919 and rs2_val==1431655764, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x55555554
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x66666667, 0x55555554, x6, 400, x25)

inst_629:
// rs1_val==1717986919 and rs2_val==2863311529, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0xaaaaaaa9
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x66666667, 0xaaaaaaa9, x6, 404, x25)

inst_630:
// rs1_val==1717986919 and rs2_val==4, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x4
TEST_RR_OP(divu, x12, x10, x11, 0x19999999, 0x66666667, 0x4, x6, 408, x25)

inst_631:
// rs1_val==1717986919 and rs2_val==858993458, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x33333332
TEST_RR_OP(divu, x12, x10, x11, 0x2, 0x66666667, 0x33333332, x6, 412, x25)

inst_632:
// rs1_val==1717986919 and rs2_val==1717986917, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x66666665
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x66666667, 0x66666665, x6, 416, x25)

inst_633:
// rs1_val==1717986919 and rs2_val==46339, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0xb503
TEST_RR_OP(divu, x12, x10, x11, 0x90d2, 0x66666667, 0xb503, x6, 420, x25)

inst_634:
// rs1_val==1717986919 and rs2_val==65534, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0xfffe
TEST_RR_OP(divu, x12, x10, x11, 0x6667, 0x66666667, 0xfffe, x6, 424, x25)

inst_635:
// rs1_val==1717986919 and rs2_val==1431655766, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x55555556
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x66666667, 0x55555556, x6, 428, x25)

inst_636:
// rs1_val==1717986919 and rs2_val==2863311531, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0xaaaaaaab
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x66666667, 0xaaaaaaab, x6, 432, x25)

inst_637:
// rs1_val==1717986919 and rs2_val==6, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x6
TEST_RR_OP(divu, x12, x10, x11, 0x11111111, 0x66666667, 0x6, x6, 436, x25)

inst_638:
// rs1_val==1717986919 and rs2_val==858993460, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x33333334
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x66666667, 0x33333334, x6, 440, x25)

inst_639:
// rs1_val==1717986919 and rs2_val==1717986919, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x66666667
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x66666667, 0x66666667, x6, 444, x25)

inst_640:
// rs1_val==1717986919 and rs2_val==46341, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0xb505
TEST_RR_OP(divu, x12, x10, x11, 0x90d0, 0x66666667, 0xb505, x6, 448, x25)

inst_641:
// rs1_val==1717986919 and rs2_val==1, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x1
TEST_RR_OP(divu, x12, x10, x11, 0x66666667, 0x66666667, 0x1, x6, 452, x25)

inst_642:
// rs1_val==1717986919 and rs2_val==65536, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x10000
TEST_RR_OP(divu, x12, x10, x11, 0x6666, 0x66666667, 0x10000, x6, 456, x25)

inst_643:
// rs1_val==46341 and rs2_val==3, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x3
TEST_RR_OP(divu, x12, x10, x11, 0x3c57, 0xb505, 0x3, x6, 460, x25)

inst_644:
// rs1_val==46341 and rs2_val==1431655765, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x55555555
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xb505, 0x55555555, x6, 464, x25)

inst_645:
// rs1_val==46341 and rs2_val==2863311530, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0xaaaaaaaa
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xb505, 0xaaaaaaaa, x6, 468, x25)

inst_646:
// rs1_val==46341 and rs2_val==5, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x5
TEST_RR_OP(divu, x12, x10, x11, 0x2434, 0xb505, 0x5, x6, 472, x25)

inst_647:
// rs1_val==46341 and rs2_val==858993459, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x33333333
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xb505, 0x33333333, x6, 476, x25)

inst_648:
// rs1_val==46341 and rs2_val==1717986918, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x66666666
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xb505, 0x66666666, x6, 480, x25)

inst_649:
// rs1_val==46341 and rs2_val==46340, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0xb504
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0xb505, 0xb504, x6, 484, x25)

inst_650:
// rs1_val==46341 and rs2_val==0, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x0
TEST_RR_OP(divu, x12, x10, x11, 0xFFFFFFFF, 0xb505, 0x0, x6, 488, x25)

inst_651:
// rs1_val==46341 and rs2_val==65535, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0xffff
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xb505, 0xffff, x6, 492, x25)

inst_652:
// rs1_val==46341 and rs2_val==2, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x2
TEST_RR_OP(divu, x12, x10, x11, 0x5a82, 0xb505, 0x2, x6, 496, x25)

inst_653:
// rs1_val==46341 and rs2_val==1431655764, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x55555554
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xb505, 0x55555554, x6, 500, x25)

inst_654:
// rs1_val==46341 and rs2_val==2863311529, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0xaaaaaaa9
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xb505, 0xaaaaaaa9, x6, 504, x25)

inst_655:
// rs1_val==46341 and rs2_val==4, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x4
TEST_RR_OP(divu, x12, x10, x11, 0x2d41, 0xb505, 0x4, x6, 508, x25)

inst_656:
// rs1_val==46341 and rs2_val==858993458, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x33333332
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xb505, 0x33333332, x6, 512, x25)

inst_657:
// rs1_val==46341 and rs2_val==1717986917, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x66666665
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xb505, 0x66666665, x6, 516, x25)

inst_658:
// rs1_val==46341 and rs2_val==46339, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0xb503
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0xb505, 0xb503, x6, 520, x25)

inst_659:
// rs1_val==46341 and rs2_val==65534, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0xfffe
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xb505, 0xfffe, x6, 524, x25)

inst_660:
// rs1_val==46341 and rs2_val==1431655766, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x55555556
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xb505, 0x55555556, x6, 528, x25)

inst_661:
// rs1_val==46341 and rs2_val==2863311531, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0xaaaaaaab
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xb505, 0xaaaaaaab, x6, 532, x25)

inst_662:
// rs1_val==46341 and rs2_val==6, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x6
TEST_RR_OP(divu, x12, x10, x11, 0x1e2b, 0xb505, 0x6, x6, 536, x25)

inst_663:
// rs1_val==46341 and rs2_val==858993460, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x33333334
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xb505, 0x33333334, x6, 540, x25)

inst_664:
// rs1_val==46341 and rs2_val==1717986919, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x66666667
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xb505, 0x66666667, x6, 544, x25)

inst_665:
// rs1_val==46341 and rs2_val==46341, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0xb505
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0xb505, 0xb505, x6, 548, x25)

inst_666:
// rs1_val==46341 and rs2_val==1, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x1
TEST_RR_OP(divu, x12, x10, x11, 0xb505, 0xb505, 0x1, x6, 552, x25)

inst_667:
// rs1_val==46341 and rs2_val==65536, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x10000
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0xb505, 0x10000, x6, 556, x25)

inst_668:
// rs1_val==1 and rs2_val==3, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:0x3
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x1, 0x3, x6, 560, x25)

inst_669:
// rs1_val==1 and rs2_val==1431655765, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:0x55555555
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x1, 0x55555555, x6, 564, x25)

inst_670:
// rs1_val==1 and rs2_val==2863311530, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:0xaaaaaaaa
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x1, 0xaaaaaaaa, x6, 568, x25)

inst_671:
// rs1_val==1 and rs2_val==5, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:0x5
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x1, 0x5, x6, 572, x25)

inst_672:
// rs1_val==1 and rs2_val==858993459, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:0x33333333
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x1, 0x33333333, x6, 576, x25)

inst_673:
// rs1_val==1 and rs2_val==1717986918, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:0x66666666
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x1, 0x66666666, x6, 580, x25)

inst_674:
// rs1_val==1 and rs2_val==46340, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:0xb504
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x1, 0xb504, x6, 584, x25)

inst_675:
// rs1_val==1 and rs2_val==0, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:0x0
TEST_RR_OP(divu, x12, x10, x11, 0xFFFFFFFF, 0x1, 0x0, x6, 588, x25)

inst_676:
// rs1_val==1 and rs2_val==65535, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:0xffff
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x1, 0xffff, x6, 592, x25)

inst_677:
// rs1_val==1 and rs2_val==2, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:0x2
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x1, 0x2, x6, 596, x25)

inst_678:
// rs1_val==1 and rs2_val==1431655764, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:0x55555554
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x1, 0x55555554, x6, 600, x25)

inst_679:
// rs1_val==1 and rs2_val==2863311529, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:0xaaaaaaa9
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x1, 0xaaaaaaa9, x6, 604, x25)

inst_680:
// rs1_val==1 and rs2_val==4, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:0x4
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x1, 0x4, x6, 608, x25)

inst_681:
// rs1_val==1 and rs2_val==858993458, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:0x33333332
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x1, 0x33333332, x6, 612, x25)

inst_682:
// rs1_val==1 and rs2_val==1717986917, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:0x66666665
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x1, 0x66666665, x6, 616, x25)

inst_683:
// rs1_val==1 and rs2_val==65534, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:0xfffe
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x1, 0xfffe, x6, 620, x25)

inst_684:
// rs1_val==1 and rs2_val==1431655766, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:0x55555556
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x1, 0x55555556, x6, 624, x25)

inst_685:
// rs1_val==1 and rs2_val==2863311531, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:0xaaaaaaab
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x1, 0xaaaaaaab, x6, 628, x25)

inst_686:
// rs1_val==1 and rs2_val==6, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:0x6
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x1, 0x6, x6, 632, x25)

inst_687:
// rs1_val==1 and rs2_val==858993460, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:0x33333334
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x1, 0x33333334, x6, 636, x25)

inst_688:
// rs1_val==1 and rs2_val==1717986919, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:0x66666667
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x1, 0x66666667, x6, 640, x25)

inst_689:
// rs1_val==1 and rs2_val==46341, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:0xb505
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x1, 0xb505, x6, 644, x25)

inst_690:
// rs1_val==1 and rs2_val==1, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:0x1
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x1, 0x1, x6, 648, x25)

inst_691:
// rs1_val==1 and rs2_val==65536, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:0x10000
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x1, 0x10000, x6, 652, x25)

inst_692:
// rs1_val==65536 and rs2_val==3, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:0x3
TEST_RR_OP(divu, x12, x10, x11, 0x5555, 0x10000, 0x3, x6, 656, x25)

inst_693:
// rs1_val==65536 and rs2_val==1431655765, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:0x55555555
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x10000, 0x55555555, x6, 660, x25)

inst_694:
// rs1_val==65536 and rs2_val==2863311530, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:0xaaaaaaaa
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x10000, 0xaaaaaaaa, x6, 664, x25)

inst_695:
// rs1_val==65536 and rs2_val==5, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:0x5
TEST_RR_OP(divu, x12, x10, x11, 0x3333, 0x10000, 0x5, x6, 668, x25)

inst_696:
// rs1_val==65536 and rs2_val==858993459, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:0x33333333
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x10000, 0x33333333, x6, 672, x25)

inst_697:
// rs1_val==65536 and rs2_val==1717986918, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:0x66666666
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x10000, 0x66666666, x6, 676, x25)

inst_698:
// rs1_val==65536 and rs2_val==46340, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:0xb504
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x10000, 0xb504, x6, 680, x25)

inst_699:
// rs1_val==65536 and rs2_val==0, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:0x0
TEST_RR_OP(divu, x12, x10, x11, 0xFFFFFFFF, 0x10000, 0x0, x6, 684, x25)

inst_700:
// rs1_val==65536 and rs2_val==65535, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:0xffff
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x10000, 0xffff, x6, 688, x25)

inst_701:
// rs1_val==65536 and rs2_val==2, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:0x2
TEST_RR_OP(divu, x12, x10, x11, 0x8000, 0x10000, 0x2, x6, 692, x25)

inst_702:
// rs1_val==65536 and rs2_val==1431655764, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:0x55555554
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x10000, 0x55555554, x6, 696, x25)

inst_703:
// rs1_val==65536 and rs2_val==2863311529, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:0xaaaaaaa9
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x10000, 0xaaaaaaa9, x6, 700, x25)

inst_704:
// rs1_val==65536 and rs2_val==4, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:0x4
TEST_RR_OP(divu, x12, x10, x11, 0x4000, 0x10000, 0x4, x6, 704, x25)

inst_705:
// rs1_val==65536 and rs2_val==858993458, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:0x33333332
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x10000, 0x33333332, x6, 708, x25)

inst_706:
// rs1_val==65536 and rs2_val==1717986917, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:0x66666665
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x10000, 0x66666665, x6, 712, x25)

inst_707:
// rs1_val==65536 and rs2_val==46339, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:0xb503
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x10000, 0xb503, x6, 716, x25)

inst_708:
// rs1_val==65536 and rs2_val==65534, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:0xfffe
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x10000, 0xfffe, x6, 720, x25)

inst_709:
// rs1_val==65536 and rs2_val==1431655766, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:0x55555556
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x10000, 0x55555556, x6, 724, x25)

inst_710:
// rs1_val==65536 and rs2_val==2863311531, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:0xaaaaaaab
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x10000, 0xaaaaaaab, x6, 728, x25)

inst_711:
// rs1_val==65536 and rs2_val==6, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:0x6
TEST_RR_OP(divu, x12, x10, x11, 0x2aaa, 0x10000, 0x6, x6, 732, x25)

inst_712:
// rs1_val==65536 and rs2_val==858993460, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:0x33333334
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x10000, 0x33333334, x6, 736, x25)

inst_713:
// rs1_val==65536 and rs2_val==1717986919, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:0x66666667
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x10000, 0x66666667, x6, 740, x25)

inst_714:
// rs1_val==65536 and rs2_val==46341, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:0xb505
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x10000, 0xb505, x6, 744, x25)

inst_715:
// rs1_val==65536 and rs2_val==1, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:0x1
TEST_RR_OP(divu, x12, x10, x11, 0x10000, 0x10000, 0x1, x6, 748, x25)

inst_716:
// rs1_val==1717986917 and rs2_val==2863311531, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0xaaaaaaab
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x66666665, 0xaaaaaaab, x6, 752, x25)

inst_717:
// rs1_val==65536 and rs2_val==65536, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:0x10000
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x10000, 0x10000, x6, 756, x25)

inst_718:
// rs1_val==1717986917 and rs2_val==6, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x6
TEST_RR_OP(divu, x12, x10, x11, 0x11111110, 0x66666665, 0x6, x6, 760, x25)

inst_719:
// rs1_val==1717986917 and rs2_val==858993460, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x33333334
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0x66666665, 0x33333334, x6, 764, x25)

inst_720:
// rs1_val==1717986917 and rs2_val==1717986919, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x66666667
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x66666665, 0x66666667, x6, 768, x25)

inst_721:
// rs1_val == rs2_val and rs1_val > 0 and rs2_val > 0, rs1_val==65534 and rs2_val==65534
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xfffe;  op2val:0xfffe
TEST_RR_OP(divu, x12, x10, x11, 0x1, 0xfffe, 0xfffe, x6, 772, x25)

inst_722:
// rs1_val == 1, rs1_val==1 and rs2_val==46339
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:0xb503
TEST_RR_OP(divu, x12, x10, x11, 0x0, 0x1, 0xb503, x6, 776, x25)

inst_723:
// rs2_val == 262144, rs1_val == 4227858431
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xfbffffff;  op2val:0x40000
TEST_RR_OP(divu, x12, x10, x11, 0x3eff, 0xfbffffff, 0x40000, x6, 780, x25)

inst_724:
// rs2_val == 8388608, 
// opcode: divu ; op1:x10; op2:x11; dest:x12; op1val:0xffdfffff;  op2val:0x800000
TEST_RR_OP(divu, x12, x10, x11, 0x1ff, 0xffdfffff, 0x800000, x6, 784, x25)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x11_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x11_1:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x6_0:
    .fill 512*(XLEN/32),4,0xdeadbeef


signature_x6_1:
    .fill 197*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
