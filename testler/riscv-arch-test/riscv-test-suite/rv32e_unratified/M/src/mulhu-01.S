// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.5.1
// timestamp : Wed Aug  4 07:22:49 2021 GMT
// usage     : riscv_ctg \
//                  --cgf /home/bilalsakhawat/dev2/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/bilalsakhawat/dev2/riscv-ctg/sample_cgfs/rv32em.cgf \
//                  --base-isa rv32e \
//                  --randomize
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the mulhu instruction of the RISC-V M extension for the mulhu covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32EM")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*E.*M.*) ;def RVTEST_E = True;def TEST_CASE_1=True;",mulhu)

RVTEST_SIGBASE( x8,signature_x8_1)

inst_0:
// rs2 == rd != rs1, rs1==x10, rs2==x14, rd==x14, rs1_val != rs2_val and rs1_val > 0 and rs2_val > 0, rs1_val == 65536, rs1_val > 0 and rs2_val > 0, rs2_val == 64
// opcode: mulhu ; op1:x10; op2:x14; dest:x14; op1val:0x10000;  op2val:0x40
TEST_RR_OP(mulhu, x14, x10, x14, 0x0, 0x10000, 0x40, x8, 0, x4)

inst_1:
// rs1 == rd != rs2, rs1==x6, rs2==x13, rd==x6, rs2_val == 2147483647, rs1_val == 32768
// opcode: mulhu ; op1:x6; op2:x13; dest:x6; op1val:0x8000;  op2val:0x7fffffff
TEST_RR_OP(mulhu, x6, x6, x13, 0x3fff, 0x8000, 0x7fffffff, x8, 4, x4)

inst_2:
// rs1 == rs2 == rd, rs1==x5, rs2==x5, rd==x5, rs2_val == 3221225471, rs1_val == 4294443007
// opcode: mulhu ; op1:x5; op2:x5; dest:x5; op1val:0xfff7ffff;  op2val:0xfff7ffff
TEST_RR_OP(mulhu, x5, x5, x5, 0xfff0003e, 0xfff7ffff, 0xfff7ffff, x8, 8, x4)

inst_3:
// rs1 == rs2 != rd, rs1==x0, rs2==x0, rd==x2, rs2_val == 3758096383, rs1_val == 524288
// opcode: mulhu ; op1:x0; op2:x0; dest:x2; op1val:0x0;  op2val:0x0
TEST_RR_OP(mulhu, x2, x0, x0, 0x0, 0x0, 0x0, x8, 12, x4)

inst_4:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x1, rs2==x6, rd==x13, rs2_val == 4026531839, rs1_val == 134217728
// opcode: mulhu ; op1:x1; op2:x6; dest:x13; op1val:0x8000000;  op2val:0xefffffff
TEST_RR_OP(mulhu, x13, x1, x6, 0x77fffff, 0x8000000, 0xefffffff, x8, 16, x4)

inst_5:
// rs1==x7, rs2==x3, rd==x15, rs2_val == 4160749567, rs1_val == 32
// opcode: mulhu ; op1:x7; op2:x3; dest:x15; op1val:0x20;  op2val:0xf7ffffff
TEST_RR_OP(mulhu, x15, x7, x3, 0x1e, 0x20, 0xf7ffffff, x8, 20, x4)

inst_6:
// rs1==x13, rs2==x11, rd==x7, rs2_val == 4227858431, rs1_val == 4294967231
// opcode: mulhu ; op1:x13; op2:x11; dest:x7; op1val:0xffffffbf;  op2val:0xfbffffff
TEST_RR_OP(mulhu, x7, x13, x11, 0xfbffffbf, 0xffffffbf, 0xfbffffff, x8, 24, x4)

inst_7:
// rs1==x11, rs2==x1, rd==x0, rs2_val == 4261412863, 
// opcode: mulhu ; op1:x11; op2:x1; dest:x0; op1val:0x55555554;  op2val:0xfdffffff
TEST_RR_OP(mulhu, x0, x11, x1, 0, 0x55555554, 0xfdffffff, x8, 28, x5)

inst_8:
// rs1==x14, rs2==x4, rd==x1, rs2_val == 4278190079, 
// opcode: mulhu ; op1:x14; op2:x4; dest:x1; op1val:0xfffe;  op2val:0xfeffffff
TEST_RR_OP(mulhu, x1, x14, x4, 0xfefe, 0xfffe, 0xfeffffff, x8, 32, x5)
RVTEST_SIGBASE( x1,signature_x1_0)

inst_9:
// rs1==x15, rs2==x12, rd==x8, rs2_val == 4286578687, rs1_val == 4294967263
// opcode: mulhu ; op1:x15; op2:x12; dest:x8; op1val:0xffffffdf;  op2val:0xff7fffff
TEST_RR_OP(mulhu, x8, x15, x12, 0xff7fffde, 0xffffffdf, 0xff7fffff, x1, 0, x5)

inst_10:
// rs1==x8, rs2==x10, rd==x9, rs2_val == 4290772991, 
// opcode: mulhu ; op1:x8; op2:x10; dest:x9; op1val:0x33333332;  op2val:0xffbfffff
TEST_RR_OP(mulhu, x9, x8, x10, 0x33266665, 0x33333332, 0xffbfffff, x1, 4, x5)

inst_11:
// rs1==x3, rs2==x7, rd==x12, rs2_val == 4292870143, rs1_val == 64
// opcode: mulhu ; op1:x3; op2:x7; dest:x12; op1val:0x40;  op2val:0xffdfffff
TEST_RR_OP(mulhu, x12, x3, x7, 0x3f, 0x40, 0xffdfffff, x1, 8, x5)

inst_12:
// rs1==x9, rs2==x8, rd==x11, rs2_val == 4293918719, rs1_val == 4227858431
// opcode: mulhu ; op1:x9; op2:x8; dest:x11; op1val:0xfbffffff;  op2val:0xffefffff
TEST_RR_OP(mulhu, x11, x9, x8, 0xfbf03ffe, 0xfbffffff, 0xffefffff, x1, 12, x5)

inst_13:
// rs1==x12, rs2==x2, rd==x4, rs2_val == 4294443007, 
// opcode: mulhu ; op1:x12; op2:x2; dest:x4; op1val:0xb503;  op2val:0xfff7ffff
TEST_RR_OP(mulhu, x4, x12, x2, 0xb4fd, 0xb503, 0xfff7ffff, x1, 16, x5)

inst_14:
// rs1==x4, rs2==x15, rd==x3, rs2_val == 4294705151, 
// opcode: mulhu ; op1:x4; op2:x15; dest:x3; op1val:0x8000;  op2val:0xfffbffff
TEST_RR_OP(mulhu, x3, x4, x15, 0x7ffd, 0x8000, 0xfffbffff, x1, 20, x5)

inst_15:
// rs1==x2, rs2==x9, rd==x10, rs2_val == 4294836223, 
// opcode: mulhu ; op1:x2; op2:x9; dest:x10; op1val:0x33333333;  op2val:0xfffdffff
TEST_RR_OP(mulhu, x10, x2, x9, 0x3332cccc, 0x33333333, 0xfffdffff, x1, 24, x5)

inst_16:
// rs2_val == 4294901759, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x11;  op2val:0xfffeffff
TEST_RR_OP(mulhu, x12, x10, x11, 0x10, 0x11, 0xfffeffff, x1, 28, x5)

inst_17:
// rs2_val == 4294934527, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xfffe;  op2val:0xffff7fff
TEST_RR_OP(mulhu, x12, x10, x11, 0xfffd, 0xfffe, 0xffff7fff, x1, 32, x5)

inst_18:
// rs2_val == 4294950911, rs1_val == 4194304
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x400000;  op2val:0xffffbfff
TEST_RR_OP(mulhu, x12, x10, x11, 0x3fffef, 0x400000, 0xffffbfff, x1, 36, x5)

inst_19:
// rs2_val == 4294959103, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x13;  op2val:0xffffdfff
TEST_RR_OP(mulhu, x12, x10, x11, 0x12, 0x13, 0xffffdfff, x1, 40, x5)

inst_20:
// rs2_val == 4294963199, rs1_val == 4286578687
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xff7fffff;  op2val:0xffffefff
TEST_RR_OP(mulhu, x12, x10, x11, 0xff7ff006, 0xff7fffff, 0xffffefff, x1, 44, x5)

inst_21:
// rs2_val == 4294965247, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0xfffff7ff
TEST_RR_OP(mulhu, x12, x10, x11, 0x4, 0x5, 0xfffff7ff, x1, 48, x5)

inst_22:
// rs2_val == 4294966271, rs1_val == 4294959103
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xffffdfff;  op2val:0xfffffbff
TEST_RR_OP(mulhu, x12, x10, x11, 0xffffdbfe, 0xffffdfff, 0xfffffbff, x1, 52, x5)

inst_23:
// rs2_val == 4294966783, rs1_val == 4294934527
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xffff7fff;  op2val:0xfffffdff
TEST_RR_OP(mulhu, x12, x10, x11, 0xffff7dfe, 0xffff7fff, 0xfffffdff, x1, 56, x5)

inst_24:
// rs2_val == 4294967039, rs1_val == 128
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x80;  op2val:0xfffffeff
TEST_RR_OP(mulhu, x12, x10, x11, 0x7f, 0x80, 0xfffffeff, x1, 60, x5)

inst_25:
// rs2_val == 4294967167, rs1_val == 4294965247
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xfffff7ff;  op2val:0xffffff7f
TEST_RR_OP(mulhu, x12, x10, x11, 0xfffff77e, 0xfffff7ff, 0xffffff7f, x1, 64, x5)

inst_26:
// rs2_val == 4294967231, rs1_val == 4294966783
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xfffffdff;  op2val:0xffffffbf
TEST_RR_OP(mulhu, x12, x10, x11, 0xfffffdbe, 0xfffffdff, 0xffffffbf, x1, 68, x5)

inst_27:
// rs2_val == 4294967263, rs1_val == 4294967039
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xfffffeff;  op2val:0xffffffdf
TEST_RR_OP(mulhu, x12, x10, x11, 0xfffffede, 0xfffffeff, 0xffffffdf, x1, 72, x5)

inst_28:
// rs2_val == 4294967279, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x13;  op2val:0xffffffef
TEST_RR_OP(mulhu, x12, x10, x11, 0x12, 0x13, 0xffffffef, x1, 76, x5)

inst_29:
// rs2_val == 4294967287, rs1_val == 262144
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x40000;  op2val:0xfffffff7
TEST_RR_OP(mulhu, x12, x10, x11, 0x3ffff, 0x40000, 0xfffffff7, x1, 80, x5)

inst_30:
// rs2_val == 4294967291, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0xfffffffb
TEST_RR_OP(mulhu, x12, x10, x11, 0xb504, 0xb505, 0xfffffffb, x1, 84, x5)

inst_31:
// rs2_val == 4294967293, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xffffffdf;  op2val:0xfffffffd
TEST_RR_OP(mulhu, x12, x10, x11, 0xffffffdc, 0xffffffdf, 0xfffffffd, x1, 88, x5)

inst_32:
// rs2_val == 4294967294, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x20;  op2val:0xfffffffe
TEST_RR_OP(mulhu, x12, x10, x11, 0x1f, 0x20, 0xfffffffe, x1, 92, x5)

inst_33:
// rs1_val == 2147483647, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x7fffffff;  op2val:0xfffbffff
TEST_RR_OP(mulhu, x12, x10, x11, 0x7ffdfffe, 0x7fffffff, 0xfffbffff, x1, 96, x5)

inst_34:
// rs1_val == 3221225471, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xbfffffff;  op2val:0xefffffff
TEST_RR_OP(mulhu, x12, x10, x11, 0xb3fffffe, 0xbfffffff, 0xefffffff, x1, 100, x5)

inst_35:
// rs1_val == 3758096383, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xdfffffff;  op2val:0xffffefff
TEST_RR_OP(mulhu, x12, x10, x11, 0xdffff1fe, 0xdfffffff, 0xffffefff, x1, 104, x5)

inst_36:
// rs1_val == 4026531839, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xefffffff;  op2val:0x7fffffff
TEST_RR_OP(mulhu, x12, x10, x11, 0x77fffffe, 0xefffffff, 0x7fffffff, x1, 108, x5)

inst_37:
// rs1_val == 4160749567, rs2_val == 0
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xf7ffffff;  op2val:0x0
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xf7ffffff, 0x0, x1, 112, x5)

inst_38:
// rs1_val == 4261412863, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xfdffffff;  op2val:0xfffe
TEST_RR_OP(mulhu, x12, x10, x11, 0xfdfe, 0xfdffffff, 0xfffe, x1, 116, x5)

inst_39:
// rs1_val == 4278190079, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xfeffffff;  op2val:0xfffeffff
TEST_RR_OP(mulhu, x12, x10, x11, 0xfeff00fe, 0xfeffffff, 0xfffeffff, x1, 120, x5)

inst_40:
// rs1_val == 4290772991, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xffbfffff;  op2val:0xfffffffb
TEST_RR_OP(mulhu, x12, x10, x11, 0xffbffffa, 0xffbfffff, 0xfffffffb, x1, 124, x5)

inst_41:
// rs1_val == 4292870143, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xffdfffff;  op2val:0xffff7fff
TEST_RR_OP(mulhu, x12, x10, x11, 0xffdf800e, 0xffdfffff, 0xffff7fff, x1, 128, x5)

inst_42:
// rs1_val == 4293918719, rs2_val == 16777216
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xffefffff;  op2val:0x1000000
TEST_RR_OP(mulhu, x12, x10, x11, 0xffefff, 0xffefffff, 0x1000000, x1, 132, x5)

inst_43:
// rs1_val == 4294705151, rs2_val == 8
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xfffbffff;  op2val:0x8
TEST_RR_OP(mulhu, x12, x10, x11, 0x7, 0xfffbffff, 0x8, x1, 136, x5)

inst_44:
// rs1_val == 4294836223, rs2_val == 1048576
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xfffdffff;  op2val:0x100000
TEST_RR_OP(mulhu, x12, x10, x11, 0xfffdf, 0xfffdffff, 0x100000, x1, 140, x5)

inst_45:
// rs1_val == 4294901759, rs2_val == 536870912
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xfffeffff;  op2val:0x20000000
TEST_RR_OP(mulhu, x12, x10, x11, 0x1fffdfff, 0xfffeffff, 0x20000000, x1, 144, x5)

inst_46:
// rs1_val == 4294950911, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xffffbfff;  op2val:0x0
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xffffbfff, 0x0, x1, 148, x5)

inst_47:
// rs1_val == 4294963199, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xffffefff;  op2val:0xfffffdff
TEST_RR_OP(mulhu, x12, x10, x11, 0xffffedfe, 0xffffefff, 0xfffffdff, x1, 152, x5)

inst_48:
// rs1_val == 4294966271, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xfffffbff;  op2val:0x66666667
TEST_RR_OP(mulhu, x12, x10, x11, 0x666664cc, 0xfffffbff, 0x66666667, x1, 156, x5)

inst_49:
// rs1_val == 4294967167, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xffffff7f;  op2val:0xff7fffff
TEST_RR_OP(mulhu, x12, x10, x11, 0xff7fff7e, 0xffffff7f, 0xff7fffff, x1, 160, x5)

inst_50:
// rs1_val == 4294967279, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xffffffef;  op2val:0x7fffffff
TEST_RR_OP(mulhu, x12, x10, x11, 0x7ffffff6, 0xffffffef, 0x7fffffff, x1, 164, x5)

inst_51:
// rs1_val == 4294967287, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xfffffff7;  op2val:0xffffffbf
TEST_RR_OP(mulhu, x12, x10, x11, 0xffffffb6, 0xfffffff7, 0xffffffbf, x1, 168, x5)

inst_52:
// rs1_val == 4294967291, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xfffffffb;  op2val:0x40
TEST_RR_OP(mulhu, x12, x10, x11, 0x3f, 0xfffffffb, 0x40, x1, 172, x5)

inst_53:
// rs1_val == 4294967293, rs2_val == 256
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xfffffffd;  op2val:0x100
TEST_RR_OP(mulhu, x12, x10, x11, 0xff, 0xfffffffd, 0x100, x1, 176, x5)

inst_54:
// rs1_val == 4294967294, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xfffffffe;  op2val:0xefffffff
TEST_RR_OP(mulhu, x12, x10, x11, 0xeffffffd, 0xfffffffe, 0xefffffff, x1, 180, x5)

inst_55:
// rs2_val == 2147483648, rs1_val == 2097152
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x200000;  op2val:0x80000000
TEST_RR_OP(mulhu, x12, x10, x11, 0x100000, 0x200000, 0x80000000, x1, 184, x5)

inst_56:
// rs2_val == 1073741824, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x40000000
TEST_RR_OP(mulhu, x12, x10, x11, 0x15555555, 0x55555554, 0x40000000, x1, 188, x5)

inst_57:
// rs2_val == 268435456, rs1_val == 2048
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x800;  op2val:0x10000000
TEST_RR_OP(mulhu, x12, x10, x11, 0x80, 0x800, 0x10000000, x1, 192, x5)

inst_58:
// rs2_val == 134217728, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xfdffffff;  op2val:0x8000000
TEST_RR_OP(mulhu, x12, x10, x11, 0x7efffff, 0xfdffffff, 0x8000000, x1, 196, x5)

inst_59:
// rs2_val == 67108864, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xefffffff;  op2val:0x4000000
TEST_RR_OP(mulhu, x12, x10, x11, 0x3bfffff, 0xefffffff, 0x4000000, x1, 200, x5)

inst_60:
// rs2_val == 33554432, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xffffffdf;  op2val:0x2000000
TEST_RR_OP(mulhu, x12, x10, x11, 0x1ffffff, 0xffffffdf, 0x2000000, x1, 204, x5)

inst_61:
// rs2_val == 8388608, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x800000
TEST_RR_OP(mulhu, x12, x10, x11, 0x5a, 0xb504, 0x800000, x1, 208, x5)

inst_62:
// rs2_val == 4194304, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xffffff7f;  op2val:0x400000
TEST_RR_OP(mulhu, x12, x10, x11, 0x3fffff, 0xffffff7f, 0x400000, x1, 212, x5)

inst_63:
// rs2_val == 2097152, rs1_val == 1431655765
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x200000
TEST_RR_OP(mulhu, x12, x10, x11, 0xaaaaa, 0x55555555, 0x200000, x1, 216, x5)

inst_64:
// rs2_val == 524288, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x400000;  op2val:0x80000
TEST_RR_OP(mulhu, x12, x10, x11, 0x200, 0x400000, 0x80000, x1, 220, x5)

inst_65:
// rs2_val == 262144, rs1_val == 8388608
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x800000;  op2val:0x40000
TEST_RR_OP(mulhu, x12, x10, x11, 0x200, 0x800000, 0x40000, x1, 224, x5)

inst_66:
// rs2_val == 131072, rs1_val == 16777216
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x1000000;  op2val:0x20000
TEST_RR_OP(mulhu, x12, x10, x11, 0x200, 0x1000000, 0x20000, x1, 228, x5)

inst_67:
// rs2_val == 65536, rs1_val == 536870912
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x20000000;  op2val:0x10000
TEST_RR_OP(mulhu, x12, x10, x11, 0x2000, 0x20000000, 0x10000, x1, 232, x5)

inst_68:
// rs2_val == 32768, rs1_val == 2147483648
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x80000000;  op2val:0x8000
TEST_RR_OP(mulhu, x12, x10, x11, 0x4000, 0x80000000, 0x8000, x1, 236, x5)

inst_69:
// rs2_val == 16384, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xfdffffff;  op2val:0x4000
TEST_RR_OP(mulhu, x12, x10, x11, 0x3f7f, 0xfdffffff, 0x4000, x1, 240, x5)

inst_70:
// rs2_val == 8192, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x2000
TEST_RR_OP(mulhu, x12, x10, x11, 0x666, 0x33333332, 0x2000, x1, 244, x5)

inst_71:
// rs2_val == 4096, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x1000
TEST_RR_OP(mulhu, x12, x10, x11, 0x555, 0x55555554, 0x1000, x1, 248, x5)

inst_72:
// rs2_val == 2048, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xffbfffff;  op2val:0x800
TEST_RR_OP(mulhu, x12, x10, x11, 0x7fd, 0xffbfffff, 0x800, x1, 252, x5)

inst_73:
// rs2_val == 1024, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x400
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xb503, 0x400, x1, 256, x5)

inst_74:
// rs2_val == 512, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x200
TEST_RR_OP(mulhu, x12, x10, x11, 0xaa, 0x55555555, 0x200, x1, 260, x5)

inst_75:
// rs2_val == 128, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xffffbfff;  op2val:0x80
TEST_RR_OP(mulhu, x12, x10, x11, 0x7f, 0xffffbfff, 0x80, x1, 264, x5)

inst_76:
// rs2_val == 32, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x8000;  op2val:0x20
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x8000, 0x20, x1, 268, x5)

inst_77:
// rs2_val == 16, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb;  op2val:0x10
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xb, 0x10, x1, 272, x5)

inst_78:
// rs2_val == 4, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xd;  op2val:0x4
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xd, 0x4, x1, 276, x5)

inst_79:
// rs2_val == 2, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xffffbfff;  op2val:0x2
TEST_RR_OP(mulhu, x12, x10, x11, 0x1, 0xffffbfff, 0x2, x1, 280, x5)

inst_80:
// rs2_val == 1, rs1_val==858993460 and rs2_val==1
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x1
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x33333334, 0x1, x1, 284, x5)

inst_81:
// rs1_val == 1073741824, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x40000000;  op2val:0xd
TEST_RR_OP(mulhu, x12, x10, x11, 0x3, 0x40000000, 0xd, x1, 288, x5)

inst_82:
// rs1_val == 268435456, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x10000000;  op2val:0x800000
TEST_RR_OP(mulhu, x12, x10, x11, 0x80000, 0x10000000, 0x800000, x1, 292, x5)

inst_83:
// rs1_val == 67108864, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x4000000;  op2val:0x9
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x4000000, 0x9, x1, 296, x5)

inst_84:
// rs1_val == 33554432, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x2000000;  op2val:0xff7fffff
TEST_RR_OP(mulhu, x12, x10, x11, 0x1feffff, 0x2000000, 0xff7fffff, x1, 300, x5)

inst_85:
// rs1_val == 1048576, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x100000;  op2val:0x6
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x100000, 0x6, x1, 304, x5)

inst_86:
// rs1_val == 131072, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x20000;  op2val:0x1
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x20000, 0x1, x1, 308, x5)

inst_87:
// rs1_val == 16384, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x4000;  op2val:0xffdfffff
TEST_RR_OP(mulhu, x12, x10, x11, 0x3ff7, 0x4000, 0xffdfffff, x1, 312, x5)

inst_88:
// rs1_val == 8192, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x2000;  op2val:0x10000
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x2000, 0x10000, x1, 316, x5)

inst_89:
// rs1_val == 4096, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x1000;  op2val:0x2000
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x1000, 0x2000, x1, 320, x5)

inst_90:
// rs1_val == 1024, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x400;  op2val:0x3
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x400, 0x3, x1, 324, x5)

inst_91:
// rs1_val == 512, rs2_val == (2**(xlen)-1)
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x200;  op2val:0xffffffff
TEST_RR_OP(mulhu, x12, x10, x11, 0x1ff, 0x200, 0xffffffff, x1, 328, x5)

inst_92:
// rs1_val == 256, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x100;  op2val:0x3
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x100, 0x3, x1, 332, x5)

inst_93:
// rs1_val == 16, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x10;  op2val:0xfbffffff
TEST_RR_OP(mulhu, x12, x10, x11, 0xf, 0x10, 0xfbffffff, x1, 336, x5)

inst_94:
// rs1_val == 8, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x8;  op2val:0x10000
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x8, 0x10000, x1, 340, x5)

inst_95:
// rs1_val == 4, rs1_val==4 and rs2_val==65534
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0xfffe
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x4, 0xfffe, x1, 344, x5)

inst_96:
// rs1_val == 2, rs1_val==2 and rs2_val==4
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x4
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x2, 0x4, x1, 348, x5)

inst_97:
// rs1_val == 1, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:0xfffffff7
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x1, 0xfffffff7, x1, 352, x5)

inst_98:
// rs1_val==65536 and rs2_val==65536, rs1_val == rs2_val and rs1_val > 0 and rs2_val > 0
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:0x10000
TEST_RR_OP(mulhu, x12, x10, x11, 0x1, 0x10000, 0x10000, x1, 356, x5)

inst_99:
// rs1_val==65536 and rs2_val==1, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:0x1
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x10000, 0x1, x1, 360, x5)

inst_100:
// rs1_val==65536 and rs2_val==46341, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:0xb505
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x10000, 0xb505, x1, 364, x5)

inst_101:
// rs1_val==65536 and rs2_val==1717986919, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:0x66666667
TEST_RR_OP(mulhu, x12, x10, x11, 0x6666, 0x10000, 0x66666667, x1, 368, x5)

inst_102:
// rs1_val==65536 and rs2_val==858993460, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:0x33333334
TEST_RR_OP(mulhu, x12, x10, x11, 0x3333, 0x10000, 0x33333334, x1, 372, x5)

inst_103:
// rs1_val==65536 and rs2_val==6, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:0x6
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x10000, 0x6, x1, 376, x5)

inst_104:
// rs1_val==65536 and rs2_val==2863311531, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:0xaaaaaaab
TEST_RR_OP(mulhu, x12, x10, x11, 0xaaaa, 0x10000, 0xaaaaaaab, x1, 380, x5)

inst_105:
// rs1_val==65536 and rs2_val==1431655766, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:0x55555556
TEST_RR_OP(mulhu, x12, x10, x11, 0x5555, 0x10000, 0x55555556, x1, 384, x5)

inst_106:
// rs1_val==65536 and rs2_val==4, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:0x4
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x10000, 0x4, x1, 388, x5)

inst_107:
// rs1_val==65536 and rs2_val==65534, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:0xfffe
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x10000, 0xfffe, x1, 392, x5)

inst_108:
// rs1_val==65536 and rs2_val==0, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:0x0
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x10000, 0x0, x1, 396, x5)

inst_109:
// rs1_val==65536 and rs2_val==46339, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:0xb503
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x10000, 0xb503, x1, 400, x5)

inst_110:
// rs1_val==65536 and rs2_val==1717986917, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:0x66666665
TEST_RR_OP(mulhu, x12, x10, x11, 0x6666, 0x10000, 0x66666665, x1, 404, x5)

inst_111:
// rs1_val==65536 and rs2_val==858993458, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:0x33333332
TEST_RR_OP(mulhu, x12, x10, x11, 0x3333, 0x10000, 0x33333332, x1, 408, x5)

inst_112:
// rs1_val==65536 and rs2_val==2863311529, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:0xaaaaaaa9
TEST_RR_OP(mulhu, x12, x10, x11, 0xaaaa, 0x10000, 0xaaaaaaa9, x1, 412, x5)

inst_113:
// rs1_val==65536 and rs2_val==1431655764, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:0x55555554
TEST_RR_OP(mulhu, x12, x10, x11, 0x5555, 0x10000, 0x55555554, x1, 416, x5)

inst_114:
// rs1_val==65536 and rs2_val==2, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:0x2
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x10000, 0x2, x1, 420, x5)

inst_115:
// rs1_val==65536 and rs2_val==65535, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:0xffff
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x10000, 0xffff, x1, 424, x5)

inst_116:
// rs1_val==65536 and rs2_val==46340, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:0xb504
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x10000, 0xb504, x1, 428, x5)

inst_117:
// rs1_val==65536 and rs2_val==1717986918, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:0x66666666
TEST_RR_OP(mulhu, x12, x10, x11, 0x6666, 0x10000, 0x66666666, x1, 432, x5)

inst_118:
// rs1_val==65536 and rs2_val==858993459, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:0x33333333
TEST_RR_OP(mulhu, x12, x10, x11, 0x3333, 0x10000, 0x33333333, x1, 436, x5)

inst_119:
// rs1_val==65536 and rs2_val==5, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:0x5
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x10000, 0x5, x1, 440, x5)

inst_120:
// rs1_val==65536 and rs2_val==2863311530, rs2_val == 2863311530
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:0xaaaaaaaa
TEST_RR_OP(mulhu, x12, x10, x11, 0xaaaa, 0x10000, 0xaaaaaaaa, x1, 444, x5)

inst_121:
// rs1_val==65536 and rs2_val==1431655765, rs2_val == 1431655765
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:0x55555555
TEST_RR_OP(mulhu, x12, x10, x11, 0x5555, 0x10000, 0x55555555, x1, 448, x5)

inst_122:
// rs1_val==65536 and rs2_val==3, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:0x3
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x10000, 0x3, x1, 452, x5)

inst_123:
// rs1_val==1 and rs2_val==65536, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:0x10000
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x1, 0x10000, x1, 456, x5)

inst_124:
// rs1_val==1 and rs2_val==1, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:0x1
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x1, 0x1, x1, 460, x5)

inst_125:
// rs1_val==1 and rs2_val==46341, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:0xb505
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x1, 0xb505, x1, 464, x5)

inst_126:
// rs1_val==1 and rs2_val==1717986919, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:0x66666667
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x1, 0x66666667, x1, 468, x5)

inst_127:
// rs1_val==1 and rs2_val==858993460, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:0x33333334
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x1, 0x33333334, x1, 472, x5)

inst_128:
// rs1_val==1 and rs2_val==6, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:0x6
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x1, 0x6, x1, 476, x5)

inst_129:
// rs1_val==1 and rs2_val==2863311531, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:0xaaaaaaab
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x1, 0xaaaaaaab, x1, 480, x5)

inst_130:
// rs1_val==1 and rs2_val==1431655766, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:0x55555556
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x1, 0x55555556, x1, 484, x5)

inst_131:
// rs1_val==1 and rs2_val==4, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:0x4
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x1, 0x4, x1, 488, x5)

inst_132:
// rs1_val==1 and rs2_val==65534, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:0xfffe
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x1, 0xfffe, x1, 492, x5)

inst_133:
// rs1_val==1 and rs2_val==0, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:0x0
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x1, 0x0, x1, 496, x5)

inst_134:
// rs1_val==1 and rs2_val==46339, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:0xb503
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x1, 0xb503, x1, 500, x5)

inst_135:
// rs1_val==1 and rs2_val==1717986917, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:0x66666665
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x1, 0x66666665, x1, 504, x5)

inst_136:
// rs1_val==1 and rs2_val==858993458, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:0x33333332
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x1, 0x33333332, x1, 508, x5)

inst_137:
// rs1_val==1 and rs2_val==2863311529, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:0xaaaaaaa9
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x1, 0xaaaaaaa9, x1, 512, x5)

inst_138:
// rs1_val==1 and rs2_val==1431655764, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:0x55555554
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x1, 0x55555554, x1, 516, x5)

inst_139:
// rs1_val==1 and rs2_val==2, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:0x2
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x1, 0x2, x1, 520, x5)

inst_140:
// rs1_val==1 and rs2_val==65535, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:0xffff
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x1, 0xffff, x1, 524, x5)

inst_141:
// rs1_val==1 and rs2_val==46340, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:0xb504
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x1, 0xb504, x1, 528, x5)

inst_142:
// rs1_val==1 and rs2_val==1717986918, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:0x66666666
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x1, 0x66666666, x1, 532, x5)

inst_143:
// rs1_val==1 and rs2_val==858993459, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:0x33333333
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x1, 0x33333333, x1, 536, x5)

inst_144:
// rs1_val==1 and rs2_val==5, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:0x5
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x1, 0x5, x1, 540, x5)

inst_145:
// rs1_val==1 and rs2_val==2863311530, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:0xaaaaaaaa
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x1, 0xaaaaaaaa, x1, 544, x5)

inst_146:
// rs1_val==1 and rs2_val==1431655765, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:0x55555555
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x1, 0x55555555, x1, 548, x5)

inst_147:
// rs1_val==1 and rs2_val==3, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:0x3
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x1, 0x3, x1, 552, x5)

inst_148:
// rs1_val==46341 and rs2_val==65536, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x10000
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xb505, 0x10000, x1, 556, x5)

inst_149:
// rs1_val==46341 and rs2_val==1, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x1
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xb505, 0x1, x1, 560, x5)

inst_150:
// rs1_val==46341 and rs2_val==46341, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0xb505
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xb505, 0xb505, x1, 564, x5)

inst_151:
// rs1_val==46341 and rs2_val==1717986919, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x66666667
TEST_RR_OP(mulhu, x12, x10, x11, 0x4868, 0xb505, 0x66666667, x1, 568, x5)

inst_152:
// rs1_val==46341 and rs2_val==858993460, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x33333334
TEST_RR_OP(mulhu, x12, x10, x11, 0x2434, 0xb505, 0x33333334, x1, 572, x5)

inst_153:
// rs1_val==46341 and rs2_val==6, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x6
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xb505, 0x6, x1, 576, x5)

inst_154:
// rs1_val==46341 and rs2_val==2863311531, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0xaaaaaaab
TEST_RR_OP(mulhu, x12, x10, x11, 0x78ae, 0xb505, 0xaaaaaaab, x1, 580, x5)

inst_155:
// rs1_val==46341 and rs2_val==1431655766, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x55555556
TEST_RR_OP(mulhu, x12, x10, x11, 0x3c57, 0xb505, 0x55555556, x1, 584, x5)

inst_156:
// rs1_val==46341 and rs2_val==4, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x4
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xb505, 0x4, x1, 588, x5)

inst_157:
// rs1_val==46341 and rs2_val==65534, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0xfffe
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xb505, 0xfffe, x1, 592, x5)

inst_158:
// rs1_val==46341 and rs2_val==0, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x0
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xb505, 0x0, x1, 596, x5)

inst_159:
// rs1_val==46341 and rs2_val==46339, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0xb503
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xb505, 0xb503, x1, 600, x5)

inst_160:
// rs1_val==46341 and rs2_val==1717986917, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x66666665
TEST_RR_OP(mulhu, x12, x10, x11, 0x4868, 0xb505, 0x66666665, x1, 604, x5)

inst_161:
// rs1_val==46341 and rs2_val==858993458, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x33333332
TEST_RR_OP(mulhu, x12, x10, x11, 0x2434, 0xb505, 0x33333332, x1, 608, x5)

inst_162:
// rs1_val==46341 and rs2_val==2863311529, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0xaaaaaaa9
TEST_RR_OP(mulhu, x12, x10, x11, 0x78ad, 0xb505, 0xaaaaaaa9, x1, 612, x5)

inst_163:
// rs1_val==46341 and rs2_val==1431655764, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x55555554
TEST_RR_OP(mulhu, x12, x10, x11, 0x3c56, 0xb505, 0x55555554, x1, 616, x5)

inst_164:
// rs1_val==46341 and rs2_val==2, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x2
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xb505, 0x2, x1, 620, x5)

inst_165:
// rs1_val==46341 and rs2_val==65535, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0xffff
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xb505, 0xffff, x1, 624, x5)

inst_166:
// rs1_val==46341 and rs2_val==46340, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0xb504
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xb505, 0xb504, x1, 628, x5)

inst_167:
// rs1_val==46341 and rs2_val==1717986918, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x66666666
TEST_RR_OP(mulhu, x12, x10, x11, 0x4868, 0xb505, 0x66666666, x1, 632, x5)

inst_168:
// rs1_val==46341 and rs2_val==858993459, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x33333333
TEST_RR_OP(mulhu, x12, x10, x11, 0x2434, 0xb505, 0x33333333, x1, 636, x5)

inst_169:
// rs1_val==46341 and rs2_val==5, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x5
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xb505, 0x5, x1, 640, x5)

inst_170:
// rs1_val==46341 and rs2_val==2863311530, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0xaaaaaaaa
TEST_RR_OP(mulhu, x12, x10, x11, 0x78ad, 0xb505, 0xaaaaaaaa, x1, 644, x5)

inst_171:
// rs1_val==46341 and rs2_val==1431655765, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x55555555
TEST_RR_OP(mulhu, x12, x10, x11, 0x3c56, 0xb505, 0x55555555, x1, 648, x5)

inst_172:
// rs1_val==46341 and rs2_val==3, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x3
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xb505, 0x3, x1, 652, x5)

inst_173:
// rs1_val==1717986919 and rs2_val==65536, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x10000
TEST_RR_OP(mulhu, x12, x10, x11, 0x6666, 0x66666667, 0x10000, x1, 656, x5)

inst_174:
// rs1_val==1717986919 and rs2_val==1, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x1
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x66666667, 0x1, x1, 660, x5)

inst_175:
// rs1_val==1717986919 and rs2_val==46341, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0xb505
TEST_RR_OP(mulhu, x12, x10, x11, 0x4868, 0x66666667, 0xb505, x1, 664, x5)

inst_176:
// rs1_val==1717986919 and rs2_val==1717986919, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x66666667
TEST_RR_OP(mulhu, x12, x10, x11, 0x28f5c28f, 0x66666667, 0x66666667, x1, 668, x5)

inst_177:
// rs1_val==1717986919 and rs2_val==858993460, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x33333334
TEST_RR_OP(mulhu, x12, x10, x11, 0x147ae148, 0x66666667, 0x33333334, x1, 672, x5)

inst_178:
// rs1_val==1717986919 and rs2_val==6, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x6
TEST_RR_OP(mulhu, x12, x10, x11, 0x2, 0x66666667, 0x6, x1, 676, x5)

inst_179:
// rs1_val==1717986919 and rs2_val==2863311531, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0xaaaaaaab
TEST_RR_OP(mulhu, x12, x10, x11, 0x44444444, 0x66666667, 0xaaaaaaab, x1, 680, x5)

inst_180:
// rs1_val==1717986919 and rs2_val==1431655766, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x55555556
TEST_RR_OP(mulhu, x12, x10, x11, 0x22222222, 0x66666667, 0x55555556, x1, 684, x5)

inst_181:
// rs1_val==1717986919 and rs2_val==4, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x4
TEST_RR_OP(mulhu, x12, x10, x11, 0x1, 0x66666667, 0x4, x1, 688, x5)

inst_182:
// rs1_val==1717986919 and rs2_val==65534, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0xfffe
TEST_RR_OP(mulhu, x12, x10, x11, 0x6665, 0x66666667, 0xfffe, x1, 692, x5)

inst_183:
// rs1_val==1717986919 and rs2_val==0, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x0
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x66666667, 0x0, x1, 696, x5)

inst_184:
// rs1_val==1717986919 and rs2_val==46339, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0xb503
TEST_RR_OP(mulhu, x12, x10, x11, 0x4867, 0x66666667, 0xb503, x1, 700, x5)

inst_185:
// rs1_val==1717986919 and rs2_val==1717986917, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x66666665
TEST_RR_OP(mulhu, x12, x10, x11, 0x28f5c28f, 0x66666667, 0x66666665, x1, 704, x5)

inst_186:
// rs1_val==1717986919 and rs2_val==858993458, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x33333332
TEST_RR_OP(mulhu, x12, x10, x11, 0x147ae147, 0x66666667, 0x33333332, x1, 708, x5)

inst_187:
// rs1_val==1717986919 and rs2_val==2863311529, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0xaaaaaaa9
TEST_RR_OP(mulhu, x12, x10, x11, 0x44444443, 0x66666667, 0xaaaaaaa9, x1, 712, x5)

inst_188:
// rs1_val==1717986919 and rs2_val==1431655764, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x55555554
TEST_RR_OP(mulhu, x12, x10, x11, 0x22222221, 0x66666667, 0x55555554, x1, 716, x5)

inst_189:
// rs1_val==1717986919 and rs2_val==2, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x2
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x66666667, 0x2, x1, 720, x5)

inst_190:
// rs1_val==1717986919 and rs2_val==65535, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0xffff
TEST_RR_OP(mulhu, x12, x10, x11, 0x6666, 0x66666667, 0xffff, x1, 724, x5)

inst_191:
// rs1_val==1717986919 and rs2_val==46340, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0xb504
TEST_RR_OP(mulhu, x12, x10, x11, 0x4868, 0x66666667, 0xb504, x1, 728, x5)

inst_192:
// rs1_val==1717986919 and rs2_val==1717986918, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x66666666
TEST_RR_OP(mulhu, x12, x10, x11, 0x28f5c28f, 0x66666667, 0x66666666, x1, 732, x5)

inst_193:
// rs1_val==1717986919 and rs2_val==858993459, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x33333333
TEST_RR_OP(mulhu, x12, x10, x11, 0x147ae147, 0x66666667, 0x33333333, x1, 736, x5)

inst_194:
// rs1_val==1717986919 and rs2_val==5, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x5
TEST_RR_OP(mulhu, x12, x10, x11, 0x2, 0x66666667, 0x5, x1, 740, x5)

inst_195:
// rs1_val==1717986919 and rs2_val==2863311530, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0xaaaaaaaa
TEST_RR_OP(mulhu, x12, x10, x11, 0x44444444, 0x66666667, 0xaaaaaaaa, x1, 744, x5)

inst_196:
// rs1_val==1717986919 and rs2_val==1431655765, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x55555555
TEST_RR_OP(mulhu, x12, x10, x11, 0x22222222, 0x66666667, 0x55555555, x1, 748, x5)

inst_197:
// rs1_val==1717986919 and rs2_val==3, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x3
TEST_RR_OP(mulhu, x12, x10, x11, 0x1, 0x66666667, 0x3, x1, 752, x5)

inst_198:
// rs1_val==858993460 and rs2_val==65536, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x10000
TEST_RR_OP(mulhu, x12, x10, x11, 0x3333, 0x33333334, 0x10000, x1, 756, x5)

inst_199:
// rs1_val==858993460 and rs2_val==46341, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0xb505
TEST_RR_OP(mulhu, x12, x10, x11, 0x2434, 0x33333334, 0xb505, x1, 760, x5)

inst_200:
// rs1_val==858993460 and rs2_val==1717986919, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x66666667
TEST_RR_OP(mulhu, x12, x10, x11, 0x147ae148, 0x33333334, 0x66666667, x1, 764, x5)

inst_201:
// rs1_val==858993460 and rs2_val==858993460, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x33333334
TEST_RR_OP(mulhu, x12, x10, x11, 0xa3d70a4, 0x33333334, 0x33333334, x1, 768, x5)

inst_202:
// rs1_val==858993460 and rs2_val==6, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x6
TEST_RR_OP(mulhu, x12, x10, x11, 0x1, 0x33333334, 0x6, x1, 772, x5)

inst_203:
// rs1_val==858993460 and rs2_val==2863311531, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0xaaaaaaab
TEST_RR_OP(mulhu, x12, x10, x11, 0x22222222, 0x33333334, 0xaaaaaaab, x1, 776, x5)

inst_204:
// rs1_val==858993460 and rs2_val==1431655766, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x55555556
TEST_RR_OP(mulhu, x12, x10, x11, 0x11111111, 0x33333334, 0x55555556, x1, 780, x5)

inst_205:
// rs1_val==858993460 and rs2_val==4, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x4
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x33333334, 0x4, x1, 784, x5)

inst_206:
// rs1_val==858993460 and rs2_val==65534, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0xfffe
TEST_RR_OP(mulhu, x12, x10, x11, 0x3332, 0x33333334, 0xfffe, x1, 788, x5)

inst_207:
// rs1_val==858993460 and rs2_val==0, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x0
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x33333334, 0x0, x1, 792, x5)

inst_208:
// rs1_val==858993460 and rs2_val==46339, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0xb503
TEST_RR_OP(mulhu, x12, x10, x11, 0x2433, 0x33333334, 0xb503, x1, 796, x5)

inst_209:
// rs1_val==858993460 and rs2_val==1717986917, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x66666665
TEST_RR_OP(mulhu, x12, x10, x11, 0x147ae147, 0x33333334, 0x66666665, x1, 800, x5)

inst_210:
// rs1_val==858993460 and rs2_val==858993458, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x33333332
TEST_RR_OP(mulhu, x12, x10, x11, 0xa3d70a3, 0x33333334, 0x33333332, x1, 804, x5)

inst_211:
// rs1_val==858993460 and rs2_val==2863311529, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0xaaaaaaa9
TEST_RR_OP(mulhu, x12, x10, x11, 0x22222222, 0x33333334, 0xaaaaaaa9, x1, 808, x5)

inst_212:
// rs1_val==858993460 and rs2_val==1431655764, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x55555554
TEST_RR_OP(mulhu, x12, x10, x11, 0x11111111, 0x33333334, 0x55555554, x1, 812, x5)

inst_213:
// rs1_val==858993460 and rs2_val==2, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x2
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x33333334, 0x2, x1, 816, x5)

inst_214:
// rs1_val==858993460 and rs2_val==65535, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0xffff
TEST_RR_OP(mulhu, x12, x10, x11, 0x3333, 0x33333334, 0xffff, x1, 820, x5)

inst_215:
// rs1_val==858993460 and rs2_val==46340, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0xb504
TEST_RR_OP(mulhu, x12, x10, x11, 0x2434, 0x33333334, 0xb504, x1, 824, x5)

inst_216:
// rs1_val==858993460 and rs2_val==1717986918, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x66666666
TEST_RR_OP(mulhu, x12, x10, x11, 0x147ae147, 0x33333334, 0x66666666, x1, 828, x5)

inst_217:
// rs1_val==858993460 and rs2_val==858993459, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x33333333
TEST_RR_OP(mulhu, x12, x10, x11, 0xa3d70a3, 0x33333334, 0x33333333, x1, 832, x5)

inst_218:
// rs1_val==858993460 and rs2_val==5, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x5
TEST_RR_OP(mulhu, x12, x10, x11, 0x1, 0x33333334, 0x5, x1, 836, x5)

inst_219:
// rs1_val==858993460 and rs2_val==2863311530, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0xaaaaaaaa
TEST_RR_OP(mulhu, x12, x10, x11, 0x22222222, 0x33333334, 0xaaaaaaaa, x1, 840, x5)

inst_220:
// rs1_val==858993460 and rs2_val==1431655765, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x55555555
TEST_RR_OP(mulhu, x12, x10, x11, 0x11111111, 0x33333334, 0x55555555, x1, 844, x5)

inst_221:
// rs1_val==858993460 and rs2_val==3, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x3
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x33333334, 0x3, x1, 848, x5)

inst_222:
// rs1_val==6 and rs2_val==65536, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x10000
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x6, 0x10000, x1, 852, x5)

inst_223:
// rs1_val==6 and rs2_val==1, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x1
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x6, 0x1, x1, 856, x5)

inst_224:
// rs1_val==6 and rs2_val==46341, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0xb505
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x6, 0xb505, x1, 860, x5)

inst_225:
// rs1_val==6 and rs2_val==1717986919, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x66666667
TEST_RR_OP(mulhu, x12, x10, x11, 0x2, 0x6, 0x66666667, x1, 864, x5)

inst_226:
// rs1_val==6 and rs2_val==858993460, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x33333334
TEST_RR_OP(mulhu, x12, x10, x11, 0x1, 0x6, 0x33333334, x1, 868, x5)

inst_227:
// rs1_val==6 and rs2_val==6, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x6
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x6, 0x6, x1, 872, x5)

inst_228:
// rs1_val==6 and rs2_val==2863311531, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0xaaaaaaab
TEST_RR_OP(mulhu, x12, x10, x11, 0x4, 0x6, 0xaaaaaaab, x1, 876, x5)

inst_229:
// rs1_val==6 and rs2_val==1431655766, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x55555556
TEST_RR_OP(mulhu, x12, x10, x11, 0x2, 0x6, 0x55555556, x1, 880, x5)

inst_230:
// rs1_val==6 and rs2_val==4, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x4
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x6, 0x4, x1, 884, x5)

inst_231:
// rs1_val==6 and rs2_val==65534, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0xfffe
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x6, 0xfffe, x1, 888, x5)

inst_232:
// rs1_val==6 and rs2_val==0, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x0
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x6, 0x0, x1, 892, x5)

inst_233:
// rs1_val==6 and rs2_val==46339, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0xb503
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x6, 0xb503, x1, 896, x5)

inst_234:
// rs1_val==6 and rs2_val==1717986917, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x66666665
TEST_RR_OP(mulhu, x12, x10, x11, 0x2, 0x6, 0x66666665, x1, 900, x5)

inst_235:
// rs1_val==6 and rs2_val==858993458, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x33333332
TEST_RR_OP(mulhu, x12, x10, x11, 0x1, 0x6, 0x33333332, x1, 904, x5)

inst_236:
// rs1_val==6 and rs2_val==2863311529, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0xaaaaaaa9
TEST_RR_OP(mulhu, x12, x10, x11, 0x3, 0x6, 0xaaaaaaa9, x1, 908, x5)

inst_237:
// rs1_val==6 and rs2_val==1431655764, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x55555554
TEST_RR_OP(mulhu, x12, x10, x11, 0x1, 0x6, 0x55555554, x1, 912, x5)

inst_238:
// rs1_val==6 and rs2_val==2, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x2
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x6, 0x2, x1, 916, x5)

inst_239:
// rs1_val==6 and rs2_val==65535, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0xffff
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x6, 0xffff, x1, 920, x5)

inst_240:
// rs1_val==6 and rs2_val==46340, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0xb504
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x6, 0xb504, x1, 924, x5)

inst_241:
// rs1_val==6 and rs2_val==1717986918, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x66666666
TEST_RR_OP(mulhu, x12, x10, x11, 0x2, 0x6, 0x66666666, x1, 928, x5)

inst_242:
// rs1_val==6 and rs2_val==858993459, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x33333333
TEST_RR_OP(mulhu, x12, x10, x11, 0x1, 0x6, 0x33333333, x1, 932, x5)

inst_243:
// rs1_val==6 and rs2_val==5, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x5
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x6, 0x5, x1, 936, x5)

inst_244:
// rs1_val==6 and rs2_val==2863311530, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0xaaaaaaaa
TEST_RR_OP(mulhu, x12, x10, x11, 0x3, 0x6, 0xaaaaaaaa, x1, 940, x5)

inst_245:
// rs1_val==6 and rs2_val==1431655765, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x55555555
TEST_RR_OP(mulhu, x12, x10, x11, 0x1, 0x6, 0x55555555, x1, 944, x5)

inst_246:
// rs1_val==6 and rs2_val==3, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x3
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x6, 0x3, x1, 948, x5)

inst_247:
// rs1_val==2863311531 and rs2_val==65536, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaab;  op2val:0x10000
TEST_RR_OP(mulhu, x12, x10, x11, 0xaaaa, 0xaaaaaaab, 0x10000, x1, 952, x5)

inst_248:
// rs1_val==2863311531 and rs2_val==1, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaab;  op2val:0x1
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xaaaaaaab, 0x1, x1, 956, x5)

inst_249:
// rs1_val==2863311531 and rs2_val==46341, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaab;  op2val:0xb505
TEST_RR_OP(mulhu, x12, x10, x11, 0x78ae, 0xaaaaaaab, 0xb505, x1, 960, x5)

inst_250:
// rs1_val==2863311531 and rs2_val==1717986919, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaab;  op2val:0x66666667
TEST_RR_OP(mulhu, x12, x10, x11, 0x44444444, 0xaaaaaaab, 0x66666667, x1, 964, x5)

inst_251:
// rs1_val==2863311531 and rs2_val==858993460, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaab;  op2val:0x33333334
TEST_RR_OP(mulhu, x12, x10, x11, 0x22222222, 0xaaaaaaab, 0x33333334, x1, 968, x5)

inst_252:
// rs1_val==2863311531 and rs2_val==6, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaab;  op2val:0x6
TEST_RR_OP(mulhu, x12, x10, x11, 0x4, 0xaaaaaaab, 0x6, x1, 972, x5)

inst_253:
// rs1_val==2863311531 and rs2_val==2863311531, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaab;  op2val:0xaaaaaaab
TEST_RR_OP(mulhu, x12, x10, x11, 0x71c71c72, 0xaaaaaaab, 0xaaaaaaab, x1, 976, x5)

inst_254:
// rs1_val==2863311531 and rs2_val==1431655766, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaab;  op2val:0x55555556
TEST_RR_OP(mulhu, x12, x10, x11, 0x38e38e39, 0xaaaaaaab, 0x55555556, x1, 980, x5)

inst_255:
// rs1_val==2863311531 and rs2_val==4, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaab;  op2val:0x4
TEST_RR_OP(mulhu, x12, x10, x11, 0x2, 0xaaaaaaab, 0x4, x1, 984, x5)

inst_256:
// rs1_val==2863311531 and rs2_val==65534, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaab;  op2val:0xfffe
TEST_RR_OP(mulhu, x12, x10, x11, 0xaaa9, 0xaaaaaaab, 0xfffe, x1, 988, x5)

inst_257:
// rs1_val==2863311531 and rs2_val==0, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaab;  op2val:0x0
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xaaaaaaab, 0x0, x1, 992, x5)

inst_258:
// rs1_val==2863311531 and rs2_val==46339, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaab;  op2val:0xb503
TEST_RR_OP(mulhu, x12, x10, x11, 0x78ac, 0xaaaaaaab, 0xb503, x1, 996, x5)

inst_259:
// rs1_val==2863311531 and rs2_val==1717986917, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaab;  op2val:0x66666665
TEST_RR_OP(mulhu, x12, x10, x11, 0x44444443, 0xaaaaaaab, 0x66666665, x1, 1000, x5)

inst_260:
// rs1_val==2863311531 and rs2_val==858993458, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaab;  op2val:0x33333332
TEST_RR_OP(mulhu, x12, x10, x11, 0x22222221, 0xaaaaaaab, 0x33333332, x1, 1004, x5)

inst_261:
// rs1_val==2863311531 and rs2_val==2863311529, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaab;  op2val:0xaaaaaaa9
TEST_RR_OP(mulhu, x12, x10, x11, 0x71c71c70, 0xaaaaaaab, 0xaaaaaaa9, x1, 1008, x5)

inst_262:
// rs1_val==2863311531 and rs2_val==1431655764, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaab;  op2val:0x55555554
TEST_RR_OP(mulhu, x12, x10, x11, 0x38e38e38, 0xaaaaaaab, 0x55555554, x1, 1012, x5)

inst_263:
// rs1_val==2863311531 and rs2_val==2, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaab;  op2val:0x2
TEST_RR_OP(mulhu, x12, x10, x11, 0x1, 0xaaaaaaab, 0x2, x1, 1016, x5)

inst_264:
// rs1_val==2863311531 and rs2_val==65535, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaab;  op2val:0xffff
TEST_RR_OP(mulhu, x12, x10, x11, 0xaaaa, 0xaaaaaaab, 0xffff, x1, 1020, x5)

inst_265:
// rs1_val==2863311531 and rs2_val==46340, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaab;  op2val:0xb504
TEST_RR_OP(mulhu, x12, x10, x11, 0x78ad, 0xaaaaaaab, 0xb504, x1, 1024, x5)

inst_266:
// rs1_val==2863311531 and rs2_val==1717986918, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaab;  op2val:0x66666666
TEST_RR_OP(mulhu, x12, x10, x11, 0x44444444, 0xaaaaaaab, 0x66666666, x1, 1028, x5)

inst_267:
// rs1_val==2863311531 and rs2_val==858993459, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaab;  op2val:0x33333333
TEST_RR_OP(mulhu, x12, x10, x11, 0x22222222, 0xaaaaaaab, 0x33333333, x1, 1032, x5)

inst_268:
// rs1_val==2863311531 and rs2_val==5, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaab;  op2val:0x5
TEST_RR_OP(mulhu, x12, x10, x11, 0x3, 0xaaaaaaab, 0x5, x1, 1036, x5)

inst_269:
// rs1_val==2863311531 and rs2_val==2863311530, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaab;  op2val:0xaaaaaaaa
TEST_RR_OP(mulhu, x12, x10, x11, 0x71c71c71, 0xaaaaaaab, 0xaaaaaaaa, x1, 1040, x5)

inst_270:
// rs1_val==2863311531 and rs2_val==1431655765, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaab;  op2val:0x55555555
TEST_RR_OP(mulhu, x12, x10, x11, 0x38e38e38, 0xaaaaaaab, 0x55555555, x1, 1044, x5)

inst_271:
// rs1_val==2863311531 and rs2_val==3, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaab;  op2val:0x3
TEST_RR_OP(mulhu, x12, x10, x11, 0x2, 0xaaaaaaab, 0x3, x1, 1048, x5)

inst_272:
// rs1_val==1431655766 and rs2_val==65536, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x10000
TEST_RR_OP(mulhu, x12, x10, x11, 0x5555, 0x55555556, 0x10000, x1, 1052, x5)

inst_273:
// rs1_val==1431655766 and rs2_val==1, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x1
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x55555556, 0x1, x1, 1056, x5)

inst_274:
// rs1_val==1431655766 and rs2_val==46341, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0xb505
TEST_RR_OP(mulhu, x12, x10, x11, 0x3c57, 0x55555556, 0xb505, x1, 1060, x5)

inst_275:
// rs1_val==1431655766 and rs2_val==1717986919, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x66666667
TEST_RR_OP(mulhu, x12, x10, x11, 0x22222222, 0x55555556, 0x66666667, x1, 1064, x5)

inst_276:
// rs1_val==1431655766 and rs2_val==858993460, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x33333334
TEST_RR_OP(mulhu, x12, x10, x11, 0x11111111, 0x55555556, 0x33333334, x1, 1068, x5)

inst_277:
// rs1_val==1431655766 and rs2_val==6, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x6
TEST_RR_OP(mulhu, x12, x10, x11, 0x2, 0x55555556, 0x6, x1, 1072, x5)

inst_278:
// rs1_val==1431655766 and rs2_val==2863311531, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0xaaaaaaab
TEST_RR_OP(mulhu, x12, x10, x11, 0x38e38e39, 0x55555556, 0xaaaaaaab, x1, 1076, x5)

inst_279:
// rs1_val==1431655766 and rs2_val==1431655766, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x55555556
TEST_RR_OP(mulhu, x12, x10, x11, 0x1c71c71c, 0x55555556, 0x55555556, x1, 1080, x5)

inst_280:
// rs1_val==1431655766 and rs2_val==4, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x4
TEST_RR_OP(mulhu, x12, x10, x11, 0x1, 0x55555556, 0x4, x1, 1084, x5)

inst_281:
// rs1_val==1431655766 and rs2_val==65534, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0xfffe
TEST_RR_OP(mulhu, x12, x10, x11, 0x5554, 0x55555556, 0xfffe, x1, 1088, x5)

inst_282:
// rs1_val==1431655766 and rs2_val==0, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x0
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x55555556, 0x0, x1, 1092, x5)

inst_283:
// rs1_val==1431655766 and rs2_val==46339, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0xb503
TEST_RR_OP(mulhu, x12, x10, x11, 0x3c56, 0x55555556, 0xb503, x1, 1096, x5)

inst_284:
// rs1_val==1431655766 and rs2_val==1717986917, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x66666665
TEST_RR_OP(mulhu, x12, x10, x11, 0x22222221, 0x55555556, 0x66666665, x1, 1100, x5)

inst_285:
// rs1_val==1431655766 and rs2_val==858993458, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x33333332
TEST_RR_OP(mulhu, x12, x10, x11, 0x11111110, 0x55555556, 0x33333332, x1, 1104, x5)

inst_286:
// rs1_val==1431655766 and rs2_val==2863311529, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0xaaaaaaa9
TEST_RR_OP(mulhu, x12, x10, x11, 0x38e38e38, 0x55555556, 0xaaaaaaa9, x1, 1108, x5)

inst_287:
// rs1_val==1431655766 and rs2_val==1431655764, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x55555554
TEST_RR_OP(mulhu, x12, x10, x11, 0x1c71c71c, 0x55555556, 0x55555554, x1, 1112, x5)

inst_288:
// rs1_val==1431655766 and rs2_val==2, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x2
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x55555556, 0x2, x1, 1116, x5)

inst_289:
// rs1_val==1431655766 and rs2_val==65535, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0xffff
TEST_RR_OP(mulhu, x12, x10, x11, 0x5555, 0x55555556, 0xffff, x1, 1120, x5)

inst_290:
// rs1_val==1431655766 and rs2_val==46340, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0xb504
TEST_RR_OP(mulhu, x12, x10, x11, 0x3c56, 0x55555556, 0xb504, x1, 1124, x5)

inst_291:
// rs1_val==1431655766 and rs2_val==1717986918, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x66666666
TEST_RR_OP(mulhu, x12, x10, x11, 0x22222222, 0x55555556, 0x66666666, x1, 1128, x5)

inst_292:
// rs1_val==1431655766 and rs2_val==858993459, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x33333333
TEST_RR_OP(mulhu, x12, x10, x11, 0x11111111, 0x55555556, 0x33333333, x1, 1132, x5)

inst_293:
// rs1_val==1431655766 and rs2_val==5, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x5
TEST_RR_OP(mulhu, x12, x10, x11, 0x1, 0x55555556, 0x5, x1, 1136, x5)

inst_294:
// rs1_val==1431655766 and rs2_val==2863311530, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0xaaaaaaaa
TEST_RR_OP(mulhu, x12, x10, x11, 0x38e38e39, 0x55555556, 0xaaaaaaaa, x1, 1140, x5)

inst_295:
// rs1_val==1431655766 and rs2_val==1431655765, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x55555555
TEST_RR_OP(mulhu, x12, x10, x11, 0x1c71c71c, 0x55555556, 0x55555555, x1, 1144, x5)

inst_296:
// rs1_val==1431655766 and rs2_val==3, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x3
TEST_RR_OP(mulhu, x12, x10, x11, 0x1, 0x55555556, 0x3, x1, 1148, x5)

inst_297:
// rs1_val==4 and rs2_val==65536, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x10000
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x4, 0x10000, x1, 1152, x5)

inst_298:
// rs1_val==4 and rs2_val==1, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x1
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x4, 0x1, x1, 1156, x5)

inst_299:
// rs1_val==4 and rs2_val==46341, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0xb505
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x4, 0xb505, x1, 1160, x5)

inst_300:
// rs1_val==4 and rs2_val==1717986919, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x66666667
TEST_RR_OP(mulhu, x12, x10, x11, 0x1, 0x4, 0x66666667, x1, 1164, x5)

inst_301:
// rs1_val==4 and rs2_val==858993460, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x33333334
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x4, 0x33333334, x1, 1168, x5)

inst_302:
// rs1_val==4 and rs2_val==6, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x6
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x4, 0x6, x1, 1172, x5)

inst_303:
// rs1_val==4 and rs2_val==2863311531, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0xaaaaaaab
TEST_RR_OP(mulhu, x12, x10, x11, 0x2, 0x4, 0xaaaaaaab, x1, 1176, x5)

inst_304:
// rs1_val==4 and rs2_val==1431655766, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x55555556
TEST_RR_OP(mulhu, x12, x10, x11, 0x1, 0x4, 0x55555556, x1, 1180, x5)

inst_305:
// rs1_val==4 and rs2_val==4, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x4
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x4, 0x4, x1, 1184, x5)

inst_306:
// rs1_val==4 and rs2_val==0, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x0
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x4, 0x0, x1, 1188, x5)

inst_307:
// rs1_val==4 and rs2_val==46339, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0xb503
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x4, 0xb503, x1, 1192, x5)

inst_308:
// rs1_val==4 and rs2_val==1717986917, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x66666665
TEST_RR_OP(mulhu, x12, x10, x11, 0x1, 0x4, 0x66666665, x1, 1196, x5)

inst_309:
// rs1_val==4 and rs2_val==858993458, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x33333332
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x4, 0x33333332, x1, 1200, x5)

inst_310:
// rs1_val==4 and rs2_val==2863311529, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0xaaaaaaa9
TEST_RR_OP(mulhu, x12, x10, x11, 0x2, 0x4, 0xaaaaaaa9, x1, 1204, x5)

inst_311:
// rs1_val==4 and rs2_val==1431655764, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x55555554
TEST_RR_OP(mulhu, x12, x10, x11, 0x1, 0x4, 0x55555554, x1, 1208, x5)

inst_312:
// rs1_val==4 and rs2_val==2, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x2
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x4, 0x2, x1, 1212, x5)

inst_313:
// rs1_val==4 and rs2_val==65535, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0xffff
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x4, 0xffff, x1, 1216, x5)

inst_314:
// rs1_val==4 and rs2_val==46340, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0xb504
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x4, 0xb504, x1, 1220, x5)

inst_315:
// rs1_val==4 and rs2_val==1717986918, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x66666666
TEST_RR_OP(mulhu, x12, x10, x11, 0x1, 0x4, 0x66666666, x1, 1224, x5)

inst_316:
// rs1_val==4 and rs2_val==858993459, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x33333333
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x4, 0x33333333, x1, 1228, x5)

inst_317:
// rs1_val==4 and rs2_val==5, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x5
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x4, 0x5, x1, 1232, x5)

inst_318:
// rs1_val==4 and rs2_val==2863311530, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0xaaaaaaaa
TEST_RR_OP(mulhu, x12, x10, x11, 0x2, 0x4, 0xaaaaaaaa, x1, 1236, x5)

inst_319:
// rs1_val==4 and rs2_val==1431655765, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x55555555
TEST_RR_OP(mulhu, x12, x10, x11, 0x1, 0x4, 0x55555555, x1, 1240, x5)

inst_320:
// rs1_val==4 and rs2_val==3, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x3
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x4, 0x3, x1, 1244, x5)

inst_321:
// rs1_val==65534 and rs2_val==65536, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xfffe;  op2val:0x10000
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xfffe, 0x10000, x1, 1248, x5)

inst_322:
// rs1_val==65534 and rs2_val==1, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xfffe;  op2val:0x1
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xfffe, 0x1, x1, 1252, x5)

inst_323:
// rs1_val==65534 and rs2_val==46341, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xfffe;  op2val:0xb505
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xfffe, 0xb505, x1, 1256, x5)

inst_324:
// rs1_val==65534 and rs2_val==1717986919, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xfffe;  op2val:0x66666667
TEST_RR_OP(mulhu, x12, x10, x11, 0x6665, 0xfffe, 0x66666667, x1, 1260, x5)

inst_325:
// rs1_val==65534 and rs2_val==858993460, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xfffe;  op2val:0x33333334
TEST_RR_OP(mulhu, x12, x10, x11, 0x3332, 0xfffe, 0x33333334, x1, 1264, x5)

inst_326:
// rs1_val==65534 and rs2_val==6, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xfffe;  op2val:0x6
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xfffe, 0x6, x1, 1268, x5)

inst_327:
// rs1_val==65534 and rs2_val==2863311531, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xfffe;  op2val:0xaaaaaaab
TEST_RR_OP(mulhu, x12, x10, x11, 0xaaa9, 0xfffe, 0xaaaaaaab, x1, 1272, x5)

inst_328:
// rs1_val==65534 and rs2_val==1431655766, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xfffe;  op2val:0x55555556
TEST_RR_OP(mulhu, x12, x10, x11, 0x5554, 0xfffe, 0x55555556, x1, 1276, x5)

inst_329:
// rs1_val==65534 and rs2_val==4, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xfffe;  op2val:0x4
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xfffe, 0x4, x1, 1280, x5)

inst_330:
// rs1_val==65534 and rs2_val==65534, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xfffe;  op2val:0xfffe
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xfffe, 0xfffe, x1, 1284, x5)

inst_331:
// rs1_val==65534 and rs2_val==0, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xfffe;  op2val:0x0
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xfffe, 0x0, x1, 1288, x5)

inst_332:
// rs1_val==65534 and rs2_val==46339, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xfffe;  op2val:0xb503
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xfffe, 0xb503, x1, 1292, x5)

inst_333:
// rs1_val==65534 and rs2_val==1717986917, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xfffe;  op2val:0x66666665
TEST_RR_OP(mulhu, x12, x10, x11, 0x6665, 0xfffe, 0x66666665, x1, 1296, x5)

inst_334:
// rs1_val==65534 and rs2_val==858993458, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xfffe;  op2val:0x33333332
TEST_RR_OP(mulhu, x12, x10, x11, 0x3332, 0xfffe, 0x33333332, x1, 1300, x5)

inst_335:
// rs1_val==65534 and rs2_val==2863311529, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xfffe;  op2val:0xaaaaaaa9
TEST_RR_OP(mulhu, x12, x10, x11, 0xaaa9, 0xfffe, 0xaaaaaaa9, x1, 1304, x5)

inst_336:
// rs1_val==65534 and rs2_val==1431655764, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xfffe;  op2val:0x55555554
TEST_RR_OP(mulhu, x12, x10, x11, 0x5554, 0xfffe, 0x55555554, x1, 1308, x5)

inst_337:
// rs1_val==65534 and rs2_val==2, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xfffe;  op2val:0x2
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xfffe, 0x2, x1, 1312, x5)

inst_338:
// rs1_val==65534 and rs2_val==65535, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xfffe;  op2val:0xffff
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xfffe, 0xffff, x1, 1316, x5)

inst_339:
// rs1_val==65534 and rs2_val==46340, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xfffe;  op2val:0xb504
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xfffe, 0xb504, x1, 1320, x5)

inst_340:
// rs1_val==65534 and rs2_val==1717986918, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xfffe;  op2val:0x66666666
TEST_RR_OP(mulhu, x12, x10, x11, 0x6665, 0xfffe, 0x66666666, x1, 1324, x5)

inst_341:
// rs1_val==65534 and rs2_val==858993459, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xfffe;  op2val:0x33333333
TEST_RR_OP(mulhu, x12, x10, x11, 0x3332, 0xfffe, 0x33333333, x1, 1328, x5)

inst_342:
// rs1_val==65534 and rs2_val==5, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xfffe;  op2val:0x5
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xfffe, 0x5, x1, 1332, x5)

inst_343:
// rs1_val==65534 and rs2_val==2863311530, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xfffe;  op2val:0xaaaaaaaa
TEST_RR_OP(mulhu, x12, x10, x11, 0xaaa9, 0xfffe, 0xaaaaaaaa, x1, 1336, x5)

inst_344:
// rs1_val==65534 and rs2_val==1431655765, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xfffe;  op2val:0x55555555
TEST_RR_OP(mulhu, x12, x10, x11, 0x5554, 0xfffe, 0x55555555, x1, 1340, x5)

inst_345:
// rs1_val==65534 and rs2_val==3, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xfffe;  op2val:0x3
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xfffe, 0x3, x1, 1344, x5)

inst_346:
// rs1_val==0 and rs2_val==65536, rs1_val == 0
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x10000
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x0, 0x10000, x1, 1348, x5)

inst_347:
// rs1_val==0 and rs2_val==1, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x1
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x0, 0x1, x1, 1352, x5)

inst_348:
// rs1_val==0 and rs2_val==46341, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0xb505
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x0, 0xb505, x1, 1356, x5)

inst_349:
// rs1_val==0 and rs2_val==1717986919, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x66666667
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x0, 0x66666667, x1, 1360, x5)

inst_350:
// rs1_val==0 and rs2_val==858993460, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x33333334
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x0, 0x33333334, x1, 1364, x5)

inst_351:
// rs1_val==0 and rs2_val==6, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x6
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x0, 0x6, x1, 1368, x5)

inst_352:
// rs1_val==0 and rs2_val==2863311531, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0xaaaaaaab
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x0, 0xaaaaaaab, x1, 1372, x5)

inst_353:
// rs1_val==0 and rs2_val==1431655766, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x55555556
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x0, 0x55555556, x1, 1376, x5)

inst_354:
// rs1_val==0 and rs2_val==4, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x4
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x0, 0x4, x1, 1380, x5)

inst_355:
// rs1_val==0 and rs2_val==65534, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0xfffe
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x0, 0xfffe, x1, 1384, x5)

inst_356:
// rs1_val==0 and rs2_val==0, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x0
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x0, 0x0, x1, 1388, x5)

inst_357:
// rs1_val==0 and rs2_val==46339, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0xb503
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x0, 0xb503, x1, 1392, x5)

inst_358:
// rs1_val==0 and rs2_val==1717986917, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x66666665
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x0, 0x66666665, x1, 1396, x5)

inst_359:
// rs1_val==0 and rs2_val==858993458, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x33333332
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x0, 0x33333332, x1, 1400, x5)

inst_360:
// rs1_val==0 and rs2_val==2863311529, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0xaaaaaaa9
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x0, 0xaaaaaaa9, x1, 1404, x5)

inst_361:
// rs1_val==0 and rs2_val==1431655764, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x55555554
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x0, 0x55555554, x1, 1408, x5)

inst_362:
// rs1_val==0 and rs2_val==2, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x2
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x0, 0x2, x1, 1412, x5)

inst_363:
// rs1_val==0 and rs2_val==65535, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0xffff
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x0, 0xffff, x1, 1416, x5)

inst_364:
// rs1_val==0 and rs2_val==46340, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0xb504
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x0, 0xb504, x1, 1420, x5)

inst_365:
// rs1_val==0 and rs2_val==1717986918, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x66666666
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x0, 0x66666666, x1, 1424, x5)

inst_366:
// rs1_val==0 and rs2_val==858993459, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x33333333
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x0, 0x33333333, x1, 1428, x5)

inst_367:
// rs1_val==0 and rs2_val==5, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x5
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x0, 0x5, x1, 1432, x5)

inst_368:
// rs1_val==0 and rs2_val==2863311530, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0xaaaaaaaa
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x0, 0xaaaaaaaa, x1, 1436, x5)

inst_369:
// rs1_val==0 and rs2_val==1431655765, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x55555555
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x0, 0x55555555, x1, 1440, x5)

inst_370:
// rs1_val==0 and rs2_val==3, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x3
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x0, 0x3, x1, 1444, x5)

inst_371:
// rs1_val==46339 and rs2_val==65536, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x10000
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xb503, 0x10000, x1, 1448, x5)

inst_372:
// rs1_val==46339 and rs2_val==1, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x1
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xb503, 0x1, x1, 1452, x5)

inst_373:
// rs1_val==46339 and rs2_val==46341, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0xb505
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xb503, 0xb505, x1, 1456, x5)

inst_374:
// rs1_val==46339 and rs2_val==1717986919, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x66666667
TEST_RR_OP(mulhu, x12, x10, x11, 0x4867, 0xb503, 0x66666667, x1, 1460, x5)

inst_375:
// rs1_val==46339 and rs2_val==858993460, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x33333334
TEST_RR_OP(mulhu, x12, x10, x11, 0x2433, 0xb503, 0x33333334, x1, 1464, x5)

inst_376:
// rs1_val==46339 and rs2_val==6, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x6
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xb503, 0x6, x1, 1468, x5)

inst_377:
// rs1_val==46339 and rs2_val==2863311531, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0xaaaaaaab
TEST_RR_OP(mulhu, x12, x10, x11, 0x78ac, 0xb503, 0xaaaaaaab, x1, 1472, x5)

inst_378:
// rs1_val==46339 and rs2_val==1431655766, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x55555556
TEST_RR_OP(mulhu, x12, x10, x11, 0x3c56, 0xb503, 0x55555556, x1, 1476, x5)

inst_379:
// rs1_val==46339 and rs2_val==4, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x4
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xb503, 0x4, x1, 1480, x5)

inst_380:
// rs1_val==46339 and rs2_val==65534, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0xfffe
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xb503, 0xfffe, x1, 1484, x5)

inst_381:
// rs1_val==46339 and rs2_val==0, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x0
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xb503, 0x0, x1, 1488, x5)

inst_382:
// rs1_val==46339 and rs2_val==46339, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0xb503
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xb503, 0xb503, x1, 1492, x5)

inst_383:
// rs1_val==46339 and rs2_val==1717986917, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x66666665
TEST_RR_OP(mulhu, x12, x10, x11, 0x4867, 0xb503, 0x66666665, x1, 1496, x5)

inst_384:
// rs1_val==46339 and rs2_val==858993458, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x33333332
TEST_RR_OP(mulhu, x12, x10, x11, 0x2433, 0xb503, 0x33333332, x1, 1500, x5)

inst_385:
// rs1_val==46339 and rs2_val==2863311529, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0xaaaaaaa9
TEST_RR_OP(mulhu, x12, x10, x11, 0x78ac, 0xb503, 0xaaaaaaa9, x1, 1504, x5)

inst_386:
// rs1_val==46339 and rs2_val==1431655764, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x55555554
TEST_RR_OP(mulhu, x12, x10, x11, 0x3c56, 0xb503, 0x55555554, x1, 1508, x5)

inst_387:
// rs1_val==46339 and rs2_val==2, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x2
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xb503, 0x2, x1, 1512, x5)

inst_388:
// rs1_val==46339 and rs2_val==65535, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0xffff
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xb503, 0xffff, x1, 1516, x5)

inst_389:
// rs1_val==46339 and rs2_val==46340, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0xb504
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xb503, 0xb504, x1, 1520, x5)

inst_390:
// rs1_val==46339 and rs2_val==1717986918, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x66666666
TEST_RR_OP(mulhu, x12, x10, x11, 0x4867, 0xb503, 0x66666666, x1, 1524, x5)

inst_391:
// rs1_val==46339 and rs2_val==858993459, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x33333333
TEST_RR_OP(mulhu, x12, x10, x11, 0x2433, 0xb503, 0x33333333, x1, 1528, x5)

inst_392:
// rs1_val==46339 and rs2_val==5, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x5
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xb503, 0x5, x1, 1532, x5)

inst_393:
// rs1_val==46339 and rs2_val==2863311530, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0xaaaaaaaa
TEST_RR_OP(mulhu, x12, x10, x11, 0x78ac, 0xb503, 0xaaaaaaaa, x1, 1536, x5)

inst_394:
// rs1_val==46339 and rs2_val==1431655765, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x55555555
TEST_RR_OP(mulhu, x12, x10, x11, 0x3c56, 0xb503, 0x55555555, x1, 1540, x5)

inst_395:
// rs1_val==46339 and rs2_val==3, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x3
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xb503, 0x3, x1, 1544, x5)

inst_396:
// rs1_val==1717986917 and rs2_val==65536, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x10000
TEST_RR_OP(mulhu, x12, x10, x11, 0x6666, 0x66666665, 0x10000, x1, 1548, x5)

inst_397:
// rs1_val==1717986917 and rs2_val==1, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x1
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x66666665, 0x1, x1, 1552, x5)

inst_398:
// rs1_val==1717986917 and rs2_val==46341, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0xb505
TEST_RR_OP(mulhu, x12, x10, x11, 0x4868, 0x66666665, 0xb505, x1, 1556, x5)

inst_399:
// rs1_val==1717986917 and rs2_val==1717986919, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x66666667
TEST_RR_OP(mulhu, x12, x10, x11, 0x28f5c28f, 0x66666665, 0x66666667, x1, 1560, x5)

inst_400:
// rs1_val==1717986917 and rs2_val==858993460, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x33333334
TEST_RR_OP(mulhu, x12, x10, x11, 0x147ae147, 0x66666665, 0x33333334, x1, 1564, x5)

inst_401:
// rs1_val==1717986917 and rs2_val==6, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x6
TEST_RR_OP(mulhu, x12, x10, x11, 0x2, 0x66666665, 0x6, x1, 1568, x5)

inst_402:
// rs1_val==1717986917 and rs2_val==2863311531, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0xaaaaaaab
TEST_RR_OP(mulhu, x12, x10, x11, 0x44444443, 0x66666665, 0xaaaaaaab, x1, 1572, x5)

inst_403:
// rs1_val==1717986917 and rs2_val==1431655766, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x55555556
TEST_RR_OP(mulhu, x12, x10, x11, 0x22222221, 0x66666665, 0x55555556, x1, 1576, x5)

inst_404:
// rs1_val==1717986917 and rs2_val==4, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x4
TEST_RR_OP(mulhu, x12, x10, x11, 0x1, 0x66666665, 0x4, x1, 1580, x5)

inst_405:
// rs1_val==1717986917 and rs2_val==65534, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0xfffe
TEST_RR_OP(mulhu, x12, x10, x11, 0x6665, 0x66666665, 0xfffe, x1, 1584, x5)

inst_406:
// rs1_val==1717986917 and rs2_val==0, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x0
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x66666665, 0x0, x1, 1588, x5)

inst_407:
// rs1_val==1717986917 and rs2_val==46339, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0xb503
TEST_RR_OP(mulhu, x12, x10, x11, 0x4867, 0x66666665, 0xb503, x1, 1592, x5)

inst_408:
// rs1_val==1717986917 and rs2_val==1717986917, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x66666665
TEST_RR_OP(mulhu, x12, x10, x11, 0x28f5c28e, 0x66666665, 0x66666665, x1, 1596, x5)

inst_409:
// rs1_val==1717986917 and rs2_val==858993458, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x33333332
TEST_RR_OP(mulhu, x12, x10, x11, 0x147ae146, 0x66666665, 0x33333332, x1, 1600, x5)

inst_410:
// rs1_val==1717986917 and rs2_val==2863311529, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0xaaaaaaa9
TEST_RR_OP(mulhu, x12, x10, x11, 0x44444442, 0x66666665, 0xaaaaaaa9, x1, 1604, x5)

inst_411:
// rs1_val==1717986917 and rs2_val==1431655764, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x55555554
TEST_RR_OP(mulhu, x12, x10, x11, 0x22222221, 0x66666665, 0x55555554, x1, 1608, x5)

inst_412:
// rs1_val==1717986917 and rs2_val==2, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x2
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x66666665, 0x2, x1, 1612, x5)

inst_413:
// rs1_val==1717986917 and rs2_val==65535, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0xffff
TEST_RR_OP(mulhu, x12, x10, x11, 0x6665, 0x66666665, 0xffff, x1, 1616, x5)

inst_414:
// rs1_val==1717986917 and rs2_val==46340, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0xb504
TEST_RR_OP(mulhu, x12, x10, x11, 0x4867, 0x66666665, 0xb504, x1, 1620, x5)

inst_415:
// rs1_val==1717986917 and rs2_val==1717986918, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x66666666
TEST_RR_OP(mulhu, x12, x10, x11, 0x28f5c28e, 0x66666665, 0x66666666, x1, 1624, x5)

inst_416:
// rs1_val==1717986917 and rs2_val==858993459, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x33333333
TEST_RR_OP(mulhu, x12, x10, x11, 0x147ae147, 0x66666665, 0x33333333, x1, 1628, x5)

inst_417:
// rs1_val==1717986917 and rs2_val==5, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x5
TEST_RR_OP(mulhu, x12, x10, x11, 0x1, 0x66666665, 0x5, x1, 1632, x5)

inst_418:
// rs1_val==1717986917 and rs2_val==2863311530, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0xaaaaaaaa
TEST_RR_OP(mulhu, x12, x10, x11, 0x44444443, 0x66666665, 0xaaaaaaaa, x1, 1636, x5)

inst_419:
// rs1_val==1717986917 and rs2_val==1431655765, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x55555555
TEST_RR_OP(mulhu, x12, x10, x11, 0x22222221, 0x66666665, 0x55555555, x1, 1640, x5)

inst_420:
// rs1_val==1717986917 and rs2_val==3, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x3
TEST_RR_OP(mulhu, x12, x10, x11, 0x1, 0x66666665, 0x3, x1, 1644, x5)

inst_421:
// rs1_val==858993458 and rs2_val==65536, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x10000
TEST_RR_OP(mulhu, x12, x10, x11, 0x3333, 0x33333332, 0x10000, x1, 1648, x5)

inst_422:
// rs1_val==858993458 and rs2_val==1, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x1
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x33333332, 0x1, x1, 1652, x5)

inst_423:
// rs1_val==858993458 and rs2_val==46341, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0xb505
TEST_RR_OP(mulhu, x12, x10, x11, 0x2434, 0x33333332, 0xb505, x1, 1656, x5)

inst_424:
// rs1_val==858993458 and rs2_val==1717986919, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x66666667
TEST_RR_OP(mulhu, x12, x10, x11, 0x147ae147, 0x33333332, 0x66666667, x1, 1660, x5)

inst_425:
// rs1_val==858993458 and rs2_val==858993460, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x33333334
TEST_RR_OP(mulhu, x12, x10, x11, 0xa3d70a3, 0x33333332, 0x33333334, x1, 1664, x5)

inst_426:
// rs1_val==858993458 and rs2_val==6, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x6
TEST_RR_OP(mulhu, x12, x10, x11, 0x1, 0x33333332, 0x6, x1, 1668, x5)

inst_427:
// rs1_val==858993458 and rs2_val==2863311531, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0xaaaaaaab
TEST_RR_OP(mulhu, x12, x10, x11, 0x22222221, 0x33333332, 0xaaaaaaab, x1, 1672, x5)

inst_428:
// rs1_val==858993458 and rs2_val==1431655766, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x55555556
TEST_RR_OP(mulhu, x12, x10, x11, 0x11111110, 0x33333332, 0x55555556, x1, 1676, x5)

inst_429:
// rs1_val==858993458 and rs2_val==4, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x4
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x33333332, 0x4, x1, 1680, x5)

inst_430:
// rs1_val==858993458 and rs2_val==65534, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0xfffe
TEST_RR_OP(mulhu, x12, x10, x11, 0x3332, 0x33333332, 0xfffe, x1, 1684, x5)

inst_431:
// rs1_val==858993458 and rs2_val==0, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x0
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x33333332, 0x0, x1, 1688, x5)

inst_432:
// rs1_val==858993458 and rs2_val==46339, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0xb503
TEST_RR_OP(mulhu, x12, x10, x11, 0x2433, 0x33333332, 0xb503, x1, 1692, x5)

inst_433:
// rs1_val==858993458 and rs2_val==1717986917, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x66666665
TEST_RR_OP(mulhu, x12, x10, x11, 0x147ae146, 0x33333332, 0x66666665, x1, 1696, x5)

inst_434:
// rs1_val==858993458 and rs2_val==858993458, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x33333332
TEST_RR_OP(mulhu, x12, x10, x11, 0xa3d70a3, 0x33333332, 0x33333332, x1, 1700, x5)

inst_435:
// rs1_val==858993458 and rs2_val==2863311529, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0xaaaaaaa9
TEST_RR_OP(mulhu, x12, x10, x11, 0x22222221, 0x33333332, 0xaaaaaaa9, x1, 1704, x5)

inst_436:
// rs1_val==858993458 and rs2_val==1431655764, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x55555554
TEST_RR_OP(mulhu, x12, x10, x11, 0x11111110, 0x33333332, 0x55555554, x1, 1708, x5)

inst_437:
// rs1_val==858993458 and rs2_val==2, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x2
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x33333332, 0x2, x1, 1712, x5)

inst_438:
// rs1_val==858993458 and rs2_val==65535, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0xffff
TEST_RR_OP(mulhu, x12, x10, x11, 0x3332, 0x33333332, 0xffff, x1, 1716, x5)

inst_439:
// rs1_val==858993458 and rs2_val==46340, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0xb504
TEST_RR_OP(mulhu, x12, x10, x11, 0x2433, 0x33333332, 0xb504, x1, 1720, x5)

inst_440:
// rs1_val==858993458 and rs2_val==1717986918, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x66666666
TEST_RR_OP(mulhu, x12, x10, x11, 0x147ae147, 0x33333332, 0x66666666, x1, 1724, x5)

inst_441:
// rs1_val==858993458 and rs2_val==858993459, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x33333333
TEST_RR_OP(mulhu, x12, x10, x11, 0xa3d70a3, 0x33333332, 0x33333333, x1, 1728, x5)

inst_442:
// rs1_val==858993458 and rs2_val==5, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x5
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x33333332, 0x5, x1, 1732, x5)

inst_443:
// rs1_val==858993458 and rs2_val==2863311530, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0xaaaaaaaa
TEST_RR_OP(mulhu, x12, x10, x11, 0x22222221, 0x33333332, 0xaaaaaaaa, x1, 1736, x5)

inst_444:
// rs1_val==858993458 and rs2_val==1431655765, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x55555555
TEST_RR_OP(mulhu, x12, x10, x11, 0x11111110, 0x33333332, 0x55555555, x1, 1740, x5)

inst_445:
// rs1_val==858993458 and rs2_val==3, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x3
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x33333332, 0x3, x1, 1744, x5)

inst_446:
// rs1_val==2863311529 and rs2_val==65536, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaa9;  op2val:0x10000
TEST_RR_OP(mulhu, x12, x10, x11, 0xaaaa, 0xaaaaaaa9, 0x10000, x1, 1748, x5)

inst_447:
// rs1_val==2863311529 and rs2_val==1, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaa9;  op2val:0x1
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xaaaaaaa9, 0x1, x1, 1752, x5)

inst_448:
// rs1_val==2863311529 and rs2_val==46341, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaa9;  op2val:0xb505
TEST_RR_OP(mulhu, x12, x10, x11, 0x78ad, 0xaaaaaaa9, 0xb505, x1, 1756, x5)

inst_449:
// rs1_val==2863311529 and rs2_val==1717986919, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaa9;  op2val:0x66666667
TEST_RR_OP(mulhu, x12, x10, x11, 0x44444443, 0xaaaaaaa9, 0x66666667, x1, 1760, x5)

inst_450:
// rs1_val==2863311529 and rs2_val==858993460, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaa9;  op2val:0x33333334
TEST_RR_OP(mulhu, x12, x10, x11, 0x22222222, 0xaaaaaaa9, 0x33333334, x1, 1764, x5)

inst_451:
// rs1_val==2863311529 and rs2_val==6, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaa9;  op2val:0x6
TEST_RR_OP(mulhu, x12, x10, x11, 0x3, 0xaaaaaaa9, 0x6, x1, 1768, x5)

inst_452:
// rs1_val==2863311529 and rs2_val==2863311531, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaa9;  op2val:0xaaaaaaab
TEST_RR_OP(mulhu, x12, x10, x11, 0x71c71c70, 0xaaaaaaa9, 0xaaaaaaab, x1, 1772, x5)

inst_453:
// rs1_val==2863311529 and rs2_val==1431655766, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaa9;  op2val:0x55555556
TEST_RR_OP(mulhu, x12, x10, x11, 0x38e38e38, 0xaaaaaaa9, 0x55555556, x1, 1776, x5)

inst_454:
// rs1_val==2863311529 and rs2_val==4, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaa9;  op2val:0x4
TEST_RR_OP(mulhu, x12, x10, x11, 0x2, 0xaaaaaaa9, 0x4, x1, 1780, x5)

inst_455:
// rs1_val==2863311529 and rs2_val==65534, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaa9;  op2val:0xfffe
TEST_RR_OP(mulhu, x12, x10, x11, 0xaaa9, 0xaaaaaaa9, 0xfffe, x1, 1784, x5)

inst_456:
// rs1_val==2863311529 and rs2_val==0, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaa9;  op2val:0x0
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xaaaaaaa9, 0x0, x1, 1788, x5)

inst_457:
// rs1_val==2863311529 and rs2_val==46339, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaa9;  op2val:0xb503
TEST_RR_OP(mulhu, x12, x10, x11, 0x78ac, 0xaaaaaaa9, 0xb503, x1, 1792, x5)

inst_458:
// rs1_val==2863311529 and rs2_val==1717986917, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaa9;  op2val:0x66666665
TEST_RR_OP(mulhu, x12, x10, x11, 0x44444442, 0xaaaaaaa9, 0x66666665, x1, 1796, x5)

inst_459:
// rs1_val==2863311529 and rs2_val==858993458, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaa9;  op2val:0x33333332
TEST_RR_OP(mulhu, x12, x10, x11, 0x22222221, 0xaaaaaaa9, 0x33333332, x1, 1800, x5)

inst_460:
// rs1_val==2863311529 and rs2_val==2863311529, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaa9;  op2val:0xaaaaaaa9
TEST_RR_OP(mulhu, x12, x10, x11, 0x71c71c6f, 0xaaaaaaa9, 0xaaaaaaa9, x1, 1804, x5)

inst_461:
// rs1_val==2863311529 and rs2_val==1431655764, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaa9;  op2val:0x55555554
TEST_RR_OP(mulhu, x12, x10, x11, 0x38e38e37, 0xaaaaaaa9, 0x55555554, x1, 1808, x5)

inst_462:
// rs1_val==2863311529 and rs2_val==2, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaa9;  op2val:0x2
TEST_RR_OP(mulhu, x12, x10, x11, 0x1, 0xaaaaaaa9, 0x2, x1, 1812, x5)

inst_463:
// rs1_val==2863311529 and rs2_val==65535, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaa9;  op2val:0xffff
TEST_RR_OP(mulhu, x12, x10, x11, 0xaaa9, 0xaaaaaaa9, 0xffff, x1, 1816, x5)

inst_464:
// rs1_val==2863311529 and rs2_val==46340, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaa9;  op2val:0xb504
TEST_RR_OP(mulhu, x12, x10, x11, 0x78ad, 0xaaaaaaa9, 0xb504, x1, 1820, x5)

inst_465:
// rs1_val==2863311529 and rs2_val==1717986918, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaa9;  op2val:0x66666666
TEST_RR_OP(mulhu, x12, x10, x11, 0x44444443, 0xaaaaaaa9, 0x66666666, x1, 1824, x5)

inst_466:
// rs1_val==2863311529 and rs2_val==858993459, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaa9;  op2val:0x33333333
TEST_RR_OP(mulhu, x12, x10, x11, 0x22222221, 0xaaaaaaa9, 0x33333333, x1, 1828, x5)

inst_467:
// rs1_val==1431655764 and rs2_val==4, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x4
TEST_RR_OP(mulhu, x12, x10, x11, 0x1, 0x55555554, 0x4, x1, 1832, x5)

inst_468:
// rs1_val==1431655764 and rs2_val==65534, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0xfffe
TEST_RR_OP(mulhu, x12, x10, x11, 0x5554, 0x55555554, 0xfffe, x1, 1836, x5)

inst_469:
// rs1_val==1431655764 and rs2_val==0, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x0
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x55555554, 0x0, x1, 1840, x5)

inst_470:
// rs1_val==1431655764 and rs2_val==46339, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0xb503
TEST_RR_OP(mulhu, x12, x10, x11, 0x3c56, 0x55555554, 0xb503, x1, 1844, x5)

inst_471:
// rs1_val==1431655764 and rs2_val==1717986917, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x66666665
TEST_RR_OP(mulhu, x12, x10, x11, 0x22222221, 0x55555554, 0x66666665, x1, 1848, x5)

inst_472:
// rs1_val==1431655764 and rs2_val==858993458, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x33333332
TEST_RR_OP(mulhu, x12, x10, x11, 0x11111110, 0x55555554, 0x33333332, x1, 1852, x5)

inst_473:
// rs1_val==1431655764 and rs2_val==2863311529, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0xaaaaaaa9
TEST_RR_OP(mulhu, x12, x10, x11, 0x38e38e37, 0x55555554, 0xaaaaaaa9, x1, 1856, x5)

inst_474:
// rs1_val==1431655764 and rs2_val==1431655764, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x55555554
TEST_RR_OP(mulhu, x12, x10, x11, 0x1c71c71b, 0x55555554, 0x55555554, x1, 1860, x5)

inst_475:
// rs1_val==1431655764 and rs2_val==2, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x2
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x55555554, 0x2, x1, 1864, x5)

inst_476:
// rs1_val==1431655764 and rs2_val==65535, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0xffff
TEST_RR_OP(mulhu, x12, x10, x11, 0x5554, 0x55555554, 0xffff, x1, 1868, x5)

inst_477:
// rs1_val==1431655764 and rs2_val==46340, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0xb504
TEST_RR_OP(mulhu, x12, x10, x11, 0x3c56, 0x55555554, 0xb504, x1, 1872, x5)

inst_478:
// rs1_val==1431655764 and rs2_val==1717986918, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x66666666
TEST_RR_OP(mulhu, x12, x10, x11, 0x22222221, 0x55555554, 0x66666666, x1, 1876, x5)

inst_479:
// rs1_val==1431655764 and rs2_val==858993459, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x33333333
TEST_RR_OP(mulhu, x12, x10, x11, 0x11111110, 0x55555554, 0x33333333, x1, 1880, x5)

inst_480:
// rs1_val==1431655764 and rs2_val==5, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x5
TEST_RR_OP(mulhu, x12, x10, x11, 0x1, 0x55555554, 0x5, x1, 1884, x5)

inst_481:
// rs1_val==1431655764 and rs2_val==2863311530, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0xaaaaaaaa
TEST_RR_OP(mulhu, x12, x10, x11, 0x38e38e37, 0x55555554, 0xaaaaaaaa, x1, 1888, x5)

inst_482:
// rs1_val==1431655764 and rs2_val==1431655765, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x55555555
TEST_RR_OP(mulhu, x12, x10, x11, 0x1c71c71b, 0x55555554, 0x55555555, x1, 1892, x5)

inst_483:
// rs1_val==1431655764 and rs2_val==3, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x3
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x55555554, 0x3, x1, 1896, x5)

inst_484:
// rs1_val==2 and rs2_val==65536, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x10000
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x2, 0x10000, x1, 1900, x5)

inst_485:
// rs1_val==2 and rs2_val==1, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x1
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x2, 0x1, x1, 1904, x5)

inst_486:
// rs1_val==2 and rs2_val==46341, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0xb505
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x2, 0xb505, x1, 1908, x5)

inst_487:
// rs1_val==2 and rs2_val==1717986919, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x66666667
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x2, 0x66666667, x1, 1912, x5)

inst_488:
// rs1_val==2 and rs2_val==858993460, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x33333334
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x2, 0x33333334, x1, 1916, x5)

inst_489:
// rs1_val==2 and rs2_val==6, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x6
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x2, 0x6, x1, 1920, x5)

inst_490:
// rs1_val==2 and rs2_val==2863311531, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0xaaaaaaab
TEST_RR_OP(mulhu, x12, x10, x11, 0x1, 0x2, 0xaaaaaaab, x1, 1924, x5)

inst_491:
// rs1_val==2 and rs2_val==1431655766, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x55555556
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x2, 0x55555556, x1, 1928, x5)

inst_492:
// rs1_val==2 and rs2_val==65534, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0xfffe
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x2, 0xfffe, x1, 1932, x5)

inst_493:
// rs1_val==2 and rs2_val==0, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x0
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x2, 0x0, x1, 1936, x5)

inst_494:
// rs1_val==2 and rs2_val==46339, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0xb503
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x2, 0xb503, x1, 1940, x5)

inst_495:
// rs1_val==2 and rs2_val==1717986917, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x66666665
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x2, 0x66666665, x1, 1944, x5)

inst_496:
// rs1_val==2 and rs2_val==858993458, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x33333332
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x2, 0x33333332, x1, 1948, x5)

inst_497:
// rs1_val==2 and rs2_val==2863311529, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0xaaaaaaa9
TEST_RR_OP(mulhu, x12, x10, x11, 0x1, 0x2, 0xaaaaaaa9, x1, 1952, x5)

inst_498:
// rs1_val==2 and rs2_val==1431655764, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x55555554
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x2, 0x55555554, x1, 1956, x5)

inst_499:
// rs1_val==2 and rs2_val==2, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x2
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x2, 0x2, x1, 1960, x5)

inst_500:
// rs1_val==2 and rs2_val==65535, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0xffff
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x2, 0xffff, x1, 1964, x5)

inst_501:
// rs1_val==2 and rs2_val==46340, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0xb504
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x2, 0xb504, x1, 1968, x5)

inst_502:
// rs1_val==2 and rs2_val==1717986918, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x66666666
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x2, 0x66666666, x1, 1972, x5)

inst_503:
// rs1_val==2 and rs2_val==858993459, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x33333333
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x2, 0x33333333, x1, 1976, x5)

inst_504:
// rs1_val==2 and rs2_val==5, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x5
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x2, 0x5, x1, 1980, x5)

inst_505:
// rs1_val==2 and rs2_val==2863311530, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0xaaaaaaaa
TEST_RR_OP(mulhu, x12, x10, x11, 0x1, 0x2, 0xaaaaaaaa, x1, 1984, x5)

inst_506:
// rs1_val==2 and rs2_val==1431655765, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x55555555
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x2, 0x55555555, x1, 1988, x5)

inst_507:
// rs1_val==2 and rs2_val==3, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x3
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x2, 0x3, x1, 1992, x5)

inst_508:
// rs1_val==65535 and rs2_val==65536, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xffff;  op2val:0x10000
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xffff, 0x10000, x1, 1996, x5)

inst_509:
// rs1_val==65535 and rs2_val==1, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xffff;  op2val:0x1
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xffff, 0x1, x1, 2000, x5)

inst_510:
// rs1_val==65535 and rs2_val==46341, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xffff;  op2val:0xb505
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xffff, 0xb505, x1, 2004, x5)

inst_511:
// rs1_val==65535 and rs2_val==1717986919, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xffff;  op2val:0x66666667
TEST_RR_OP(mulhu, x12, x10, x11, 0x6666, 0xffff, 0x66666667, x1, 2008, x5)

inst_512:
// rs1_val==65535 and rs2_val==858993460, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xffff;  op2val:0x33333334
TEST_RR_OP(mulhu, x12, x10, x11, 0x3333, 0xffff, 0x33333334, x1, 2012, x5)

inst_513:
// rs1_val==65535 and rs2_val==6, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xffff;  op2val:0x6
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xffff, 0x6, x1, 2016, x5)

inst_514:
// rs1_val==65535 and rs2_val==2863311531, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xffff;  op2val:0xaaaaaaab
TEST_RR_OP(mulhu, x12, x10, x11, 0xaaaa, 0xffff, 0xaaaaaaab, x1, 2020, x5)

inst_515:
// rs1_val==65535 and rs2_val==1431655766, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xffff;  op2val:0x55555556
TEST_RR_OP(mulhu, x12, x10, x11, 0x5555, 0xffff, 0x55555556, x1, 2024, x5)

inst_516:
// rs1_val==65535 and rs2_val==4, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xffff;  op2val:0x4
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xffff, 0x4, x1, 2028, x5)

inst_517:
// rs1_val==65535 and rs2_val==65534, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xffff;  op2val:0xfffe
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xffff, 0xfffe, x1, 2032, x5)

inst_518:
// rs1_val==65535 and rs2_val==0, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xffff;  op2val:0x0
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xffff, 0x0, x1, 2036, x5)

inst_519:
// rs1_val==65535 and rs2_val==46339, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xffff;  op2val:0xb503
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xffff, 0xb503, x1, 2040, x5)

inst_520:
// rs1_val==65535 and rs2_val==1717986917, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xffff;  op2val:0x66666665
TEST_RR_OP(mulhu, x12, x10, x11, 0x6665, 0xffff, 0x66666665, x1, 2044, x5)
RVTEST_SIGBASE( x1,signature_x1_1)

inst_521:
// rs1_val==65535 and rs2_val==858993458, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xffff;  op2val:0x33333332
TEST_RR_OP(mulhu, x12, x10, x11, 0x3332, 0xffff, 0x33333332, x1, 0, x5)

inst_522:
// rs1_val==65535 and rs2_val==2863311529, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xffff;  op2val:0xaaaaaaa9
TEST_RR_OP(mulhu, x12, x10, x11, 0xaaa9, 0xffff, 0xaaaaaaa9, x1, 4, x5)

inst_523:
// rs1_val==65535 and rs2_val==1431655764, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xffff;  op2val:0x55555554
TEST_RR_OP(mulhu, x12, x10, x11, 0x5554, 0xffff, 0x55555554, x1, 8, x5)

inst_524:
// rs1_val==65535 and rs2_val==2, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xffff;  op2val:0x2
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xffff, 0x2, x1, 12, x5)

inst_525:
// rs1_val==65535 and rs2_val==65535, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xffff;  op2val:0xffff
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xffff, 0xffff, x1, 16, x5)

inst_526:
// rs1_val==65535 and rs2_val==46340, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xffff;  op2val:0xb504
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xffff, 0xb504, x1, 20, x5)

inst_527:
// rs1_val==65535 and rs2_val==1717986918, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xffff;  op2val:0x66666666
TEST_RR_OP(mulhu, x12, x10, x11, 0x6665, 0xffff, 0x66666666, x1, 24, x5)

inst_528:
// rs1_val==65535 and rs2_val==858993459, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xffff;  op2val:0x33333333
TEST_RR_OP(mulhu, x12, x10, x11, 0x3332, 0xffff, 0x33333333, x1, 28, x5)

inst_529:
// rs1_val==65535 and rs2_val==5, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xffff;  op2val:0x5
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xffff, 0x5, x1, 32, x5)

inst_530:
// rs1_val==65535 and rs2_val==2863311530, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xffff;  op2val:0xaaaaaaaa
TEST_RR_OP(mulhu, x12, x10, x11, 0xaaa9, 0xffff, 0xaaaaaaaa, x1, 36, x5)

inst_531:
// rs1_val==65535 and rs2_val==1431655765, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xffff;  op2val:0x55555555
TEST_RR_OP(mulhu, x12, x10, x11, 0x5554, 0xffff, 0x55555555, x1, 40, x5)

inst_532:
// rs1_val==65535 and rs2_val==3, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xffff;  op2val:0x3
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xffff, 0x3, x1, 44, x5)

inst_533:
// rs1_val==46340 and rs2_val==65536, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x10000
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xb504, 0x10000, x1, 48, x5)

inst_534:
// rs1_val==46340 and rs2_val==1, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x1
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xb504, 0x1, x1, 52, x5)

inst_535:
// rs1_val==46340 and rs2_val==46341, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0xb505
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xb504, 0xb505, x1, 56, x5)

inst_536:
// rs1_val==46340 and rs2_val==1717986919, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x66666667
TEST_RR_OP(mulhu, x12, x10, x11, 0x4868, 0xb504, 0x66666667, x1, 60, x5)

inst_537:
// rs1_val==46340 and rs2_val==858993460, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x33333334
TEST_RR_OP(mulhu, x12, x10, x11, 0x2434, 0xb504, 0x33333334, x1, 64, x5)

inst_538:
// rs1_val==46340 and rs2_val==6, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x6
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xb504, 0x6, x1, 68, x5)

inst_539:
// rs1_val==46340 and rs2_val==2863311531, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0xaaaaaaab
TEST_RR_OP(mulhu, x12, x10, x11, 0x78ad, 0xb504, 0xaaaaaaab, x1, 72, x5)

inst_540:
// rs1_val==46340 and rs2_val==1431655766, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x55555556
TEST_RR_OP(mulhu, x12, x10, x11, 0x3c56, 0xb504, 0x55555556, x1, 76, x5)

inst_541:
// rs1_val==46340 and rs2_val==4, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x4
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xb504, 0x4, x1, 80, x5)

inst_542:
// rs1_val==46340 and rs2_val==65534, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0xfffe
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xb504, 0xfffe, x1, 84, x5)

inst_543:
// rs1_val==46340 and rs2_val==0, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x0
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xb504, 0x0, x1, 88, x5)

inst_544:
// rs1_val==46340 and rs2_val==46339, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0xb503
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xb504, 0xb503, x1, 92, x5)

inst_545:
// rs1_val==46340 and rs2_val==1717986917, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x66666665
TEST_RR_OP(mulhu, x12, x10, x11, 0x4867, 0xb504, 0x66666665, x1, 96, x5)

inst_546:
// rs1_val==46340 and rs2_val==858993458, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x33333332
TEST_RR_OP(mulhu, x12, x10, x11, 0x2433, 0xb504, 0x33333332, x1, 100, x5)

inst_547:
// rs1_val==46340 and rs2_val==2863311529, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0xaaaaaaa9
TEST_RR_OP(mulhu, x12, x10, x11, 0x78ad, 0xb504, 0xaaaaaaa9, x1, 104, x5)

inst_548:
// rs1_val==46340 and rs2_val==1431655764, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x55555554
TEST_RR_OP(mulhu, x12, x10, x11, 0x3c56, 0xb504, 0x55555554, x1, 108, x5)

inst_549:
// rs1_val==46340 and rs2_val==2, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x2
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xb504, 0x2, x1, 112, x5)

inst_550:
// rs1_val==46340 and rs2_val==65535, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0xffff
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xb504, 0xffff, x1, 116, x5)

inst_551:
// rs1_val==46340 and rs2_val==46340, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0xb504
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xb504, 0xb504, x1, 120, x5)

inst_552:
// rs1_val==46340 and rs2_val==1717986918, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x66666666
TEST_RR_OP(mulhu, x12, x10, x11, 0x4867, 0xb504, 0x66666666, x1, 124, x5)

inst_553:
// rs1_val==46340 and rs2_val==858993459, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x33333333
TEST_RR_OP(mulhu, x12, x10, x11, 0x2433, 0xb504, 0x33333333, x1, 128, x5)

inst_554:
// rs1_val==46340 and rs2_val==5, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x5
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xb504, 0x5, x1, 132, x5)

inst_555:
// rs1_val==46340 and rs2_val==2863311530, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0xaaaaaaaa
TEST_RR_OP(mulhu, x12, x10, x11, 0x78ad, 0xb504, 0xaaaaaaaa, x1, 136, x5)

inst_556:
// rs1_val==46340 and rs2_val==1431655765, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x55555555
TEST_RR_OP(mulhu, x12, x10, x11, 0x3c56, 0xb504, 0x55555555, x1, 140, x5)

inst_557:
// rs1_val==46340 and rs2_val==3, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x3
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xb504, 0x3, x1, 144, x5)

inst_558:
// rs1_val==1717986918 and rs2_val==65536, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x10000
TEST_RR_OP(mulhu, x12, x10, x11, 0x6666, 0x66666666, 0x10000, x1, 148, x5)

inst_559:
// rs1_val==1717986918 and rs2_val==1, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x1
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x66666666, 0x1, x1, 152, x5)

inst_560:
// rs1_val==1717986918 and rs2_val==46341, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0xb505
TEST_RR_OP(mulhu, x12, x10, x11, 0x4868, 0x66666666, 0xb505, x1, 156, x5)

inst_561:
// rs1_val==1717986918 and rs2_val==1717986919, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x66666667
TEST_RR_OP(mulhu, x12, x10, x11, 0x28f5c28f, 0x66666666, 0x66666667, x1, 160, x5)

inst_562:
// rs1_val==1717986918 and rs2_val==858993460, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x33333334
TEST_RR_OP(mulhu, x12, x10, x11, 0x147ae147, 0x66666666, 0x33333334, x1, 164, x5)

inst_563:
// rs1_val==1717986918 and rs2_val==6, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x6
TEST_RR_OP(mulhu, x12, x10, x11, 0x2, 0x66666666, 0x6, x1, 168, x5)

inst_564:
// rs1_val==1717986918 and rs2_val==2863311531, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0xaaaaaaab
TEST_RR_OP(mulhu, x12, x10, x11, 0x44444444, 0x66666666, 0xaaaaaaab, x1, 172, x5)

inst_565:
// rs1_val==1717986918 and rs2_val==1431655766, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x55555556
TEST_RR_OP(mulhu, x12, x10, x11, 0x22222222, 0x66666666, 0x55555556, x1, 176, x5)

inst_566:
// rs1_val==1717986918 and rs2_val==4, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x4
TEST_RR_OP(mulhu, x12, x10, x11, 0x1, 0x66666666, 0x4, x1, 180, x5)

inst_567:
// rs1_val==1717986918 and rs2_val==65534, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0xfffe
TEST_RR_OP(mulhu, x12, x10, x11, 0x6665, 0x66666666, 0xfffe, x1, 184, x5)

inst_568:
// rs1_val==1717986918 and rs2_val==0, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x0
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x66666666, 0x0, x1, 188, x5)

inst_569:
// rs1_val==1717986918 and rs2_val==46339, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0xb503
TEST_RR_OP(mulhu, x12, x10, x11, 0x4867, 0x66666666, 0xb503, x1, 192, x5)

inst_570:
// rs1_val==1717986918 and rs2_val==1717986917, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x66666665
TEST_RR_OP(mulhu, x12, x10, x11, 0x28f5c28e, 0x66666666, 0x66666665, x1, 196, x5)

inst_571:
// rs1_val==1717986918 and rs2_val==858993458, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x33333332
TEST_RR_OP(mulhu, x12, x10, x11, 0x147ae147, 0x66666666, 0x33333332, x1, 200, x5)

inst_572:
// rs1_val==1717986918 and rs2_val==2863311529, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0xaaaaaaa9
TEST_RR_OP(mulhu, x12, x10, x11, 0x44444443, 0x66666666, 0xaaaaaaa9, x1, 204, x5)

inst_573:
// rs1_val==1717986918 and rs2_val==1431655764, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x55555554
TEST_RR_OP(mulhu, x12, x10, x11, 0x22222221, 0x66666666, 0x55555554, x1, 208, x5)

inst_574:
// rs1_val==1717986918 and rs2_val==2, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x2
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x66666666, 0x2, x1, 212, x5)

inst_575:
// rs1_val==1717986918 and rs2_val==65535, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0xffff
TEST_RR_OP(mulhu, x12, x10, x11, 0x6665, 0x66666666, 0xffff, x1, 216, x5)

inst_576:
// rs1_val==1717986918 and rs2_val==46340, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0xb504
TEST_RR_OP(mulhu, x12, x10, x11, 0x4867, 0x66666666, 0xb504, x1, 220, x5)

inst_577:
// rs1_val==1717986918 and rs2_val==1717986918, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x66666666
TEST_RR_OP(mulhu, x12, x10, x11, 0x28f5c28f, 0x66666666, 0x66666666, x1, 224, x5)

inst_578:
// rs1_val==1717986918 and rs2_val==858993459, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x33333333
TEST_RR_OP(mulhu, x12, x10, x11, 0x147ae147, 0x66666666, 0x33333333, x1, 228, x5)

inst_579:
// rs1_val==1717986918 and rs2_val==5, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x5
TEST_RR_OP(mulhu, x12, x10, x11, 0x1, 0x66666666, 0x5, x1, 232, x5)

inst_580:
// rs1_val==1717986918 and rs2_val==2863311530, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0xaaaaaaaa
TEST_RR_OP(mulhu, x12, x10, x11, 0x44444443, 0x66666666, 0xaaaaaaaa, x1, 236, x5)

inst_581:
// rs1_val==1717986918 and rs2_val==1431655765, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x55555555
TEST_RR_OP(mulhu, x12, x10, x11, 0x22222221, 0x66666666, 0x55555555, x1, 240, x5)

inst_582:
// rs1_val==1717986918 and rs2_val==3, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x3
TEST_RR_OP(mulhu, x12, x10, x11, 0x1, 0x66666666, 0x3, x1, 244, x5)

inst_583:
// rs1_val==858993459 and rs2_val==65536, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x10000
TEST_RR_OP(mulhu, x12, x10, x11, 0x3333, 0x33333333, 0x10000, x1, 248, x5)

inst_584:
// rs1_val==858993459 and rs2_val==1, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x1
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x33333333, 0x1, x1, 252, x5)

inst_585:
// rs1_val==858993459 and rs2_val==46341, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0xb505
TEST_RR_OP(mulhu, x12, x10, x11, 0x2434, 0x33333333, 0xb505, x1, 256, x5)

inst_586:
// rs1_val==858993459 and rs2_val==1717986919, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x66666667
TEST_RR_OP(mulhu, x12, x10, x11, 0x147ae147, 0x33333333, 0x66666667, x1, 260, x5)

inst_587:
// rs1_val==858993459 and rs2_val==858993460, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x33333334
TEST_RR_OP(mulhu, x12, x10, x11, 0xa3d70a3, 0x33333333, 0x33333334, x1, 264, x5)

inst_588:
// rs1_val==858993459 and rs2_val==6, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x6
TEST_RR_OP(mulhu, x12, x10, x11, 0x1, 0x33333333, 0x6, x1, 268, x5)

inst_589:
// rs1_val==858993459 and rs2_val==2863311531, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0xaaaaaaab
TEST_RR_OP(mulhu, x12, x10, x11, 0x22222222, 0x33333333, 0xaaaaaaab, x1, 272, x5)

inst_590:
// rs1_val==858993459 and rs2_val==1431655766, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x55555556
TEST_RR_OP(mulhu, x12, x10, x11, 0x11111111, 0x33333333, 0x55555556, x1, 276, x5)

inst_591:
// rs1_val==858993459 and rs2_val==4, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x4
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x33333333, 0x4, x1, 280, x5)

inst_592:
// rs1_val==858993459 and rs2_val==65534, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0xfffe
TEST_RR_OP(mulhu, x12, x10, x11, 0x3332, 0x33333333, 0xfffe, x1, 284, x5)

inst_593:
// rs1_val==858993459 and rs2_val==0, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x0
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x33333333, 0x0, x1, 288, x5)

inst_594:
// rs1_val==858993459 and rs2_val==46339, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0xb503
TEST_RR_OP(mulhu, x12, x10, x11, 0x2433, 0x33333333, 0xb503, x1, 292, x5)

inst_595:
// rs1_val==1431655764 and rs2_val==65536, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x10000
TEST_RR_OP(mulhu, x12, x10, x11, 0x5555, 0x55555554, 0x10000, x1, 296, x5)

inst_596:
// rs1_val==858993459 and rs2_val==1717986917, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x66666665
TEST_RR_OP(mulhu, x12, x10, x11, 0x147ae147, 0x33333333, 0x66666665, x1, 300, x5)

inst_597:
// rs1_val==858993459 and rs2_val==858993458, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x33333332
TEST_RR_OP(mulhu, x12, x10, x11, 0xa3d70a3, 0x33333333, 0x33333332, x1, 304, x5)

inst_598:
// rs1_val==1431655764 and rs2_val==1717986919, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x66666667
TEST_RR_OP(mulhu, x12, x10, x11, 0x22222221, 0x55555554, 0x66666667, x1, 308, x5)

inst_599:
// rs1_val==858993459 and rs2_val==2863311529, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0xaaaaaaa9
TEST_RR_OP(mulhu, x12, x10, x11, 0x22222221, 0x33333333, 0xaaaaaaa9, x1, 312, x5)

inst_600:
// rs1_val==858993459 and rs2_val==1431655764, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x55555554
TEST_RR_OP(mulhu, x12, x10, x11, 0x11111110, 0x33333333, 0x55555554, x1, 316, x5)

inst_601:
// rs1_val==858993459 and rs2_val==2, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x2
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x33333333, 0x2, x1, 320, x5)

inst_602:
// rs1_val==858993459 and rs2_val==65535, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0xffff
TEST_RR_OP(mulhu, x12, x10, x11, 0x3332, 0x33333333, 0xffff, x1, 324, x5)

inst_603:
// rs1_val==858993459 and rs2_val==46340, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0xb504
TEST_RR_OP(mulhu, x12, x10, x11, 0x2433, 0x33333333, 0xb504, x1, 328, x5)

inst_604:
// rs1_val==858993459 and rs2_val==1717986918, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x66666666
TEST_RR_OP(mulhu, x12, x10, x11, 0x147ae147, 0x33333333, 0x66666666, x1, 332, x5)

inst_605:
// rs1_val==858993459 and rs2_val==858993459, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x33333333
TEST_RR_OP(mulhu, x12, x10, x11, 0xa3d70a3, 0x33333333, 0x33333333, x1, 336, x5)

inst_606:
// rs1_val==858993459 and rs2_val==5, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x5
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x33333333, 0x5, x1, 340, x5)

inst_607:
// rs1_val==858993459 and rs2_val==2863311530, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0xaaaaaaaa
TEST_RR_OP(mulhu, x12, x10, x11, 0x22222221, 0x33333333, 0xaaaaaaaa, x1, 344, x5)

inst_608:
// rs1_val==858993459 and rs2_val==1431655765, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x55555555
TEST_RR_OP(mulhu, x12, x10, x11, 0x11111110, 0x33333333, 0x55555555, x1, 348, x5)

inst_609:
// rs1_val==858993459 and rs2_val==3, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x3
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x33333333, 0x3, x1, 352, x5)

inst_610:
// rs1_val==5 and rs2_val==65536, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x10000
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x5, 0x10000, x1, 356, x5)

inst_611:
// rs1_val==5 and rs2_val==1, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x1
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x5, 0x1, x1, 360, x5)

inst_612:
// rs1_val==5 and rs2_val==46341, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0xb505
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x5, 0xb505, x1, 364, x5)

inst_613:
// rs1_val==5 and rs2_val==1717986919, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x66666667
TEST_RR_OP(mulhu, x12, x10, x11, 0x2, 0x5, 0x66666667, x1, 368, x5)

inst_614:
// rs1_val==5 and rs2_val==858993460, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x33333334
TEST_RR_OP(mulhu, x12, x10, x11, 0x1, 0x5, 0x33333334, x1, 372, x5)

inst_615:
// rs1_val==5 and rs2_val==6, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x6
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x5, 0x6, x1, 376, x5)

inst_616:
// rs1_val==5 and rs2_val==2863311531, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0xaaaaaaab
TEST_RR_OP(mulhu, x12, x10, x11, 0x3, 0x5, 0xaaaaaaab, x1, 380, x5)

inst_617:
// rs1_val==5 and rs2_val==1431655766, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x55555556
TEST_RR_OP(mulhu, x12, x10, x11, 0x1, 0x5, 0x55555556, x1, 384, x5)

inst_618:
// rs1_val==5 and rs2_val==4, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x4
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x5, 0x4, x1, 388, x5)

inst_619:
// rs1_val==5 and rs2_val==65534, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0xfffe
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x5, 0xfffe, x1, 392, x5)

inst_620:
// rs1_val==5 and rs2_val==0, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x0
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x5, 0x0, x1, 396, x5)

inst_621:
// rs1_val==5 and rs2_val==46339, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0xb503
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x5, 0xb503, x1, 400, x5)

inst_622:
// rs1_val==5 and rs2_val==1717986917, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x66666665
TEST_RR_OP(mulhu, x12, x10, x11, 0x1, 0x5, 0x66666665, x1, 404, x5)

inst_623:
// rs1_val==5 and rs2_val==858993458, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x33333332
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x5, 0x33333332, x1, 408, x5)

inst_624:
// rs1_val==5 and rs2_val==2863311529, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0xaaaaaaa9
TEST_RR_OP(mulhu, x12, x10, x11, 0x3, 0x5, 0xaaaaaaa9, x1, 412, x5)

inst_625:
// rs1_val==5 and rs2_val==1431655764, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x55555554
TEST_RR_OP(mulhu, x12, x10, x11, 0x1, 0x5, 0x55555554, x1, 416, x5)

inst_626:
// rs1_val==5 and rs2_val==2, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x2
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x5, 0x2, x1, 420, x5)

inst_627:
// rs1_val==5 and rs2_val==65535, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0xffff
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x5, 0xffff, x1, 424, x5)

inst_628:
// rs1_val==5 and rs2_val==46340, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0xb504
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x5, 0xb504, x1, 428, x5)

inst_629:
// rs1_val==5 and rs2_val==1717986918, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x66666666
TEST_RR_OP(mulhu, x12, x10, x11, 0x1, 0x5, 0x66666666, x1, 432, x5)

inst_630:
// rs1_val==5 and rs2_val==858993459, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x33333333
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x5, 0x33333333, x1, 436, x5)

inst_631:
// rs1_val==5 and rs2_val==5, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x5
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x5, 0x5, x1, 440, x5)

inst_632:
// rs1_val==5 and rs2_val==2863311530, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0xaaaaaaaa
TEST_RR_OP(mulhu, x12, x10, x11, 0x3, 0x5, 0xaaaaaaaa, x1, 444, x5)

inst_633:
// rs1_val==5 and rs2_val==1431655765, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x55555555
TEST_RR_OP(mulhu, x12, x10, x11, 0x1, 0x5, 0x55555555, x1, 448, x5)

inst_634:
// rs1_val==5 and rs2_val==3, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x3
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x5, 0x3, x1, 452, x5)

inst_635:
// rs1_val==2863311530 and rs2_val==65536, rs1_val == 2863311530
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaaa;  op2val:0x10000
TEST_RR_OP(mulhu, x12, x10, x11, 0xaaaa, 0xaaaaaaaa, 0x10000, x1, 456, x5)

inst_636:
// rs1_val==2863311530 and rs2_val==1, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaaa;  op2val:0x1
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xaaaaaaaa, 0x1, x1, 460, x5)

inst_637:
// rs1_val==2863311530 and rs2_val==46341, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaaa;  op2val:0xb505
TEST_RR_OP(mulhu, x12, x10, x11, 0x78ad, 0xaaaaaaaa, 0xb505, x1, 464, x5)

inst_638:
// rs1_val==2863311530 and rs2_val==1717986919, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaaa;  op2val:0x66666667
TEST_RR_OP(mulhu, x12, x10, x11, 0x44444444, 0xaaaaaaaa, 0x66666667, x1, 468, x5)

inst_639:
// rs1_val==2863311530 and rs2_val==858993460, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaaa;  op2val:0x33333334
TEST_RR_OP(mulhu, x12, x10, x11, 0x22222222, 0xaaaaaaaa, 0x33333334, x1, 472, x5)

inst_640:
// rs1_val==2863311530 and rs2_val==6, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaaa;  op2val:0x6
TEST_RR_OP(mulhu, x12, x10, x11, 0x3, 0xaaaaaaaa, 0x6, x1, 476, x5)

inst_641:
// rs1_val==2863311530 and rs2_val==2863311531, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaaa;  op2val:0xaaaaaaab
TEST_RR_OP(mulhu, x12, x10, x11, 0x71c71c71, 0xaaaaaaaa, 0xaaaaaaab, x1, 480, x5)

inst_642:
// rs1_val==2863311530 and rs2_val==1431655766, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaaa;  op2val:0x55555556
TEST_RR_OP(mulhu, x12, x10, x11, 0x38e38e39, 0xaaaaaaaa, 0x55555556, x1, 484, x5)

inst_643:
// rs1_val==2863311530 and rs2_val==4, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaaa;  op2val:0x4
TEST_RR_OP(mulhu, x12, x10, x11, 0x2, 0xaaaaaaaa, 0x4, x1, 488, x5)

inst_644:
// rs1_val==2863311530 and rs2_val==65534, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaaa;  op2val:0xfffe
TEST_RR_OP(mulhu, x12, x10, x11, 0xaaa9, 0xaaaaaaaa, 0xfffe, x1, 492, x5)

inst_645:
// rs1_val==2863311530 and rs2_val==0, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaaa;  op2val:0x0
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0xaaaaaaaa, 0x0, x1, 496, x5)

inst_646:
// rs1_val==2863311530 and rs2_val==46339, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaaa;  op2val:0xb503
TEST_RR_OP(mulhu, x12, x10, x11, 0x78ac, 0xaaaaaaaa, 0xb503, x1, 500, x5)

inst_647:
// rs1_val==2863311530 and rs2_val==1717986917, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaaa;  op2val:0x66666665
TEST_RR_OP(mulhu, x12, x10, x11, 0x44444443, 0xaaaaaaaa, 0x66666665, x1, 504, x5)

inst_648:
// rs1_val==2863311530 and rs2_val==858993458, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaaa;  op2val:0x33333332
TEST_RR_OP(mulhu, x12, x10, x11, 0x22222221, 0xaaaaaaaa, 0x33333332, x1, 508, x5)

inst_649:
// rs1_val==2863311530 and rs2_val==2863311529, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaaa;  op2val:0xaaaaaaa9
TEST_RR_OP(mulhu, x12, x10, x11, 0x71c71c70, 0xaaaaaaaa, 0xaaaaaaa9, x1, 512, x5)

inst_650:
// rs1_val==2863311530 and rs2_val==1431655764, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaaa;  op2val:0x55555554
TEST_RR_OP(mulhu, x12, x10, x11, 0x38e38e37, 0xaaaaaaaa, 0x55555554, x1, 516, x5)

inst_651:
// rs1_val==2863311530 and rs2_val==2, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaaa;  op2val:0x2
TEST_RR_OP(mulhu, x12, x10, x11, 0x1, 0xaaaaaaaa, 0x2, x1, 520, x5)

inst_652:
// rs1_val==2863311530 and rs2_val==65535, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaaa;  op2val:0xffff
TEST_RR_OP(mulhu, x12, x10, x11, 0xaaa9, 0xaaaaaaaa, 0xffff, x1, 524, x5)

inst_653:
// rs1_val==2863311530 and rs2_val==46340, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaaa;  op2val:0xb504
TEST_RR_OP(mulhu, x12, x10, x11, 0x78ad, 0xaaaaaaaa, 0xb504, x1, 528, x5)

inst_654:
// rs1_val==2863311530 and rs2_val==1717986918, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaaa;  op2val:0x66666666
TEST_RR_OP(mulhu, x12, x10, x11, 0x44444443, 0xaaaaaaaa, 0x66666666, x1, 532, x5)

inst_655:
// rs1_val==2863311530 and rs2_val==858993459, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaaa;  op2val:0x33333333
TEST_RR_OP(mulhu, x12, x10, x11, 0x22222221, 0xaaaaaaaa, 0x33333333, x1, 536, x5)

inst_656:
// rs1_val==2863311530 and rs2_val==5, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaaa;  op2val:0x5
TEST_RR_OP(mulhu, x12, x10, x11, 0x3, 0xaaaaaaaa, 0x5, x1, 540, x5)

inst_657:
// rs1_val==2863311530 and rs2_val==2863311530, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaaa;  op2val:0xaaaaaaaa
TEST_RR_OP(mulhu, x12, x10, x11, 0x71c71c70, 0xaaaaaaaa, 0xaaaaaaaa, x1, 544, x5)

inst_658:
// rs1_val==2863311530 and rs2_val==1431655765, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaaa;  op2val:0x55555555
TEST_RR_OP(mulhu, x12, x10, x11, 0x38e38e38, 0xaaaaaaaa, 0x55555555, x1, 548, x5)

inst_659:
// rs1_val==2863311530 and rs2_val==3, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaaa;  op2val:0x3
TEST_RR_OP(mulhu, x12, x10, x11, 0x1, 0xaaaaaaaa, 0x3, x1, 552, x5)

inst_660:
// rs1_val==1431655765 and rs2_val==65536, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x10000
TEST_RR_OP(mulhu, x12, x10, x11, 0x5555, 0x55555555, 0x10000, x1, 556, x5)

inst_661:
// rs1_val==1431655765 and rs2_val==1, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x1
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x55555555, 0x1, x1, 560, x5)

inst_662:
// rs1_val==1431655765 and rs2_val==46341, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0xb505
TEST_RR_OP(mulhu, x12, x10, x11, 0x3c56, 0x55555555, 0xb505, x1, 564, x5)

inst_663:
// rs1_val==1431655765 and rs2_val==1717986919, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x66666667
TEST_RR_OP(mulhu, x12, x10, x11, 0x22222222, 0x55555555, 0x66666667, x1, 568, x5)

inst_664:
// rs1_val==1431655765 and rs2_val==858993460, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x33333334
TEST_RR_OP(mulhu, x12, x10, x11, 0x11111111, 0x55555555, 0x33333334, x1, 572, x5)

inst_665:
// rs1_val==1431655765 and rs2_val==6, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x6
TEST_RR_OP(mulhu, x12, x10, x11, 0x1, 0x55555555, 0x6, x1, 576, x5)

inst_666:
// rs1_val==1431655765 and rs2_val==2863311531, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0xaaaaaaab
TEST_RR_OP(mulhu, x12, x10, x11, 0x38e38e38, 0x55555555, 0xaaaaaaab, x1, 580, x5)

inst_667:
// rs1_val==1431655765 and rs2_val==1431655766, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x55555556
TEST_RR_OP(mulhu, x12, x10, x11, 0x1c71c71c, 0x55555555, 0x55555556, x1, 584, x5)

inst_668:
// rs1_val==1431655765 and rs2_val==4, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x4
TEST_RR_OP(mulhu, x12, x10, x11, 0x1, 0x55555555, 0x4, x1, 588, x5)

inst_669:
// rs1_val==1431655765 and rs2_val==65534, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0xfffe
TEST_RR_OP(mulhu, x12, x10, x11, 0x5554, 0x55555555, 0xfffe, x1, 592, x5)

inst_670:
// rs1_val==1431655765 and rs2_val==0, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x0
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x55555555, 0x0, x1, 596, x5)

inst_671:
// rs1_val==1431655765 and rs2_val==46339, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0xb503
TEST_RR_OP(mulhu, x12, x10, x11, 0x3c56, 0x55555555, 0xb503, x1, 600, x5)

inst_672:
// rs1_val==1431655765 and rs2_val==1717986917, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x66666665
TEST_RR_OP(mulhu, x12, x10, x11, 0x22222221, 0x55555555, 0x66666665, x1, 604, x5)

inst_673:
// rs1_val==1431655765 and rs2_val==858993458, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x33333332
TEST_RR_OP(mulhu, x12, x10, x11, 0x11111110, 0x55555555, 0x33333332, x1, 608, x5)

inst_674:
// rs1_val==1431655765 and rs2_val==2863311529, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0xaaaaaaa9
TEST_RR_OP(mulhu, x12, x10, x11, 0x38e38e38, 0x55555555, 0xaaaaaaa9, x1, 612, x5)

inst_675:
// rs1_val==1431655765 and rs2_val==1431655764, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x55555554
TEST_RR_OP(mulhu, x12, x10, x11, 0x1c71c71b, 0x55555555, 0x55555554, x1, 616, x5)

inst_676:
// rs1_val==1431655765 and rs2_val==2, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x2
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x55555555, 0x2, x1, 620, x5)

inst_677:
// rs1_val==1431655765 and rs2_val==65535, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0xffff
TEST_RR_OP(mulhu, x12, x10, x11, 0x5554, 0x55555555, 0xffff, x1, 624, x5)

inst_678:
// rs1_val==1431655765 and rs2_val==46340, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0xb504
TEST_RR_OP(mulhu, x12, x10, x11, 0x3c56, 0x55555555, 0xb504, x1, 628, x5)

inst_679:
// rs1_val==1431655765 and rs2_val==1717986918, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x66666666
TEST_RR_OP(mulhu, x12, x10, x11, 0x22222221, 0x55555555, 0x66666666, x1, 632, x5)

inst_680:
// rs1_val==1431655765 and rs2_val==858993459, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x33333333
TEST_RR_OP(mulhu, x12, x10, x11, 0x11111110, 0x55555555, 0x33333333, x1, 636, x5)

inst_681:
// rs1_val==1431655765 and rs2_val==5, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x5
TEST_RR_OP(mulhu, x12, x10, x11, 0x1, 0x55555555, 0x5, x1, 640, x5)

inst_682:
// rs1_val==1431655765 and rs2_val==2863311530, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0xaaaaaaaa
TEST_RR_OP(mulhu, x12, x10, x11, 0x38e38e38, 0x55555555, 0xaaaaaaaa, x1, 644, x5)

inst_683:
// rs1_val==1431655765 and rs2_val==1431655765, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x55555555
TEST_RR_OP(mulhu, x12, x10, x11, 0x1c71c71c, 0x55555555, 0x55555555, x1, 648, x5)

inst_684:
// rs1_val==1431655765 and rs2_val==3, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x3
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x55555555, 0x3, x1, 652, x5)

inst_685:
// rs1_val==3 and rs2_val==65536, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x10000
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x3, 0x10000, x1, 656, x5)

inst_686:
// rs1_val==3 and rs2_val==1, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x1
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x3, 0x1, x1, 660, x5)

inst_687:
// rs1_val==3 and rs2_val==46341, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0xb505
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x3, 0xb505, x1, 664, x5)

inst_688:
// rs1_val==3 and rs2_val==1717986919, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x66666667
TEST_RR_OP(mulhu, x12, x10, x11, 0x1, 0x3, 0x66666667, x1, 668, x5)

inst_689:
// rs1_val==3 and rs2_val==858993460, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x33333334
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x3, 0x33333334, x1, 672, x5)

inst_690:
// rs1_val==3 and rs2_val==6, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x6
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x3, 0x6, x1, 676, x5)

inst_691:
// rs1_val==3 and rs2_val==2863311531, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0xaaaaaaab
TEST_RR_OP(mulhu, x12, x10, x11, 0x2, 0x3, 0xaaaaaaab, x1, 680, x5)

inst_692:
// rs1_val==3 and rs2_val==1431655766, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x55555556
TEST_RR_OP(mulhu, x12, x10, x11, 0x1, 0x3, 0x55555556, x1, 684, x5)

inst_693:
// rs1_val==3 and rs2_val==4, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x4
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x3, 0x4, x1, 688, x5)

inst_694:
// rs1_val==3 and rs2_val==65534, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0xfffe
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x3, 0xfffe, x1, 692, x5)

inst_695:
// rs1_val==3 and rs2_val==0, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x0
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x3, 0x0, x1, 696, x5)

inst_696:
// rs1_val==3 and rs2_val==46339, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0xb503
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x3, 0xb503, x1, 700, x5)

inst_697:
// rs1_val==3 and rs2_val==1717986917, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x66666665
TEST_RR_OP(mulhu, x12, x10, x11, 0x1, 0x3, 0x66666665, x1, 704, x5)

inst_698:
// rs1_val==3 and rs2_val==858993458, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x33333332
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x3, 0x33333332, x1, 708, x5)

inst_699:
// rs1_val==3 and rs2_val==2863311529, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0xaaaaaaa9
TEST_RR_OP(mulhu, x12, x10, x11, 0x1, 0x3, 0xaaaaaaa9, x1, 712, x5)

inst_700:
// rs1_val==3 and rs2_val==1431655764, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x55555554
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x3, 0x55555554, x1, 716, x5)

inst_701:
// rs1_val==3 and rs2_val==2, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x2
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x3, 0x2, x1, 720, x5)

inst_702:
// rs1_val==3 and rs2_val==65535, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0xffff
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x3, 0xffff, x1, 724, x5)

inst_703:
// rs1_val==3 and rs2_val==46340, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0xb504
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x3, 0xb504, x1, 728, x5)

inst_704:
// rs1_val==3 and rs2_val==1717986918, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x66666666
TEST_RR_OP(mulhu, x12, x10, x11, 0x1, 0x3, 0x66666666, x1, 732, x5)

inst_705:
// rs1_val==3 and rs2_val==858993459, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x33333333
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x3, 0x33333333, x1, 736, x5)

inst_706:
// rs1_val==3 and rs2_val==5, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x5
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x3, 0x5, x1, 740, x5)

inst_707:
// rs1_val==3 and rs2_val==2863311530, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0xaaaaaaaa
TEST_RR_OP(mulhu, x12, x10, x11, 0x1, 0x3, 0xaaaaaaaa, x1, 744, x5)

inst_708:
// rs1_val==3 and rs2_val==1431655765, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x55555555
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x3, 0x55555555, x1, 748, x5)

inst_709:
// rs1_val==3 and rs2_val==3, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x3
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x3, 0x3, x1, 752, x5)

inst_710:
// rs1_val==2863311529 and rs2_val==5, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaa9;  op2val:0x5
TEST_RR_OP(mulhu, x12, x10, x11, 0x3, 0xaaaaaaa9, 0x5, x1, 756, x5)

inst_711:
// rs1_val==2863311529 and rs2_val==2863311530, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaa9;  op2val:0xaaaaaaaa
TEST_RR_OP(mulhu, x12, x10, x11, 0x71c71c70, 0xaaaaaaa9, 0xaaaaaaaa, x1, 760, x5)

inst_712:
// rs1_val == (2**(xlen)-1), 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xffffffff;  op2val:0x2000
TEST_RR_OP(mulhu, x12, x10, x11, 0x1fff, 0xffffffff, 0x2000, x1, 764, x5)

inst_713:
// rs1_val==2863311529 and rs2_val==1431655765, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaa9;  op2val:0x55555555
TEST_RR_OP(mulhu, x12, x10, x11, 0x38e38e38, 0xaaaaaaa9, 0x55555555, x1, 768, x5)

inst_714:
// rs1_val==2863311529 and rs2_val==3, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaa9;  op2val:0x3
TEST_RR_OP(mulhu, x12, x10, x11, 0x1, 0xaaaaaaa9, 0x3, x1, 772, x5)

inst_715:
// rs1_val==1431655764 and rs2_val==1, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x1
TEST_RR_OP(mulhu, x12, x10, x11, 0x0, 0x55555554, 0x1, x1, 776, x5)

inst_716:
// rs1_val==1431655764 and rs2_val==46341, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0xb505
TEST_RR_OP(mulhu, x12, x10, x11, 0x3c56, 0x55555554, 0xb505, x1, 780, x5)

inst_717:
// rs1_val==1431655764 and rs2_val==858993460, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x33333334
TEST_RR_OP(mulhu, x12, x10, x11, 0x11111111, 0x55555554, 0x33333334, x1, 784, x5)

inst_718:
// rs1_val==1431655764 and rs2_val==6, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x6
TEST_RR_OP(mulhu, x12, x10, x11, 0x1, 0x55555554, 0x6, x1, 788, x5)

inst_719:
// rs1_val==1431655764 and rs2_val==2863311531, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0xaaaaaaab
TEST_RR_OP(mulhu, x12, x10, x11, 0x38e38e38, 0x55555554, 0xaaaaaaab, x1, 792, x5)

inst_720:
// rs1_val==1431655764 and rs2_val==1431655766, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x55555556
TEST_RR_OP(mulhu, x12, x10, x11, 0x1c71c71c, 0x55555554, 0x55555556, x1, 796, x5)

inst_721:
// rs2_val == 3221225471, rs1_val == 4294443007
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0xfff7ffff;  op2val:0xbfffffff
TEST_RR_OP(mulhu, x12, x10, x11, 0xbff9fffe, 0xfff7ffff, 0xbfffffff, x1, 800, x5)

inst_722:
// rs2_val == 3758096383, rs1_val == 524288
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x80000;  op2val:0xdfffffff
TEST_RR_OP(mulhu, x12, x10, x11, 0x6ffff, 0x80000, 0xdfffffff, x1, 804, x5)

inst_723:
// rs2_val == 4261412863, 
// opcode: mulhu ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0xfdffffff
TEST_RR_OP(mulhu, x12, x10, x11, 0x54aaaaa9, 0x55555554, 0xfdffffff, x1, 808, x5)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x8_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x8_1:
    .fill 9*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 512*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 203*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
