// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.5.1
// timestamp : Mon Aug  2 08:58:53 2021 GMT
// usage     : riscv_ctg \
//                  --cgf /home/bilalsakhawat/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/bilalsakhawat/riscv-ctg/sample_cgfs/rv32e.cgf \
//                  --base-isa rv32e \
//                  --randomize
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sh instruction of the RISC-V E extension for the sh-align covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32E")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*E.*) ;def RVTEST_E = True;def TEST_CASE_1=True;",sh-align)

RVTEST_SIGBASE( x8,signature_x8_1)

inst_0:
// rs1 != rs2, rs1==x6, rs2==x4, ea_align == 0 and (imm_val % 4) == 0, rs2_val == 1, imm_val > 0
// opcode: sh; op1:x6; op2:x4; op2val:0x1; immval:0x4; align:0
TEST_STORE(x8,x12,0,x6,x4,0x1,0x4,0,sh,0)

inst_1:
// rs1==x10, rs2==x5, rs2_val == 2147483647, imm_val == 0, rs2_val == (2**(xlen-1)-1)
// opcode: sh; op1:x10; op2:x5; op2val:0x7fffffff; immval:0x0; align:0
TEST_STORE(x8,x12,0,x10,x5,0x7fffffff,0x0,4,sh,0)

inst_2:
// rs1==x9, rs2==x10, rs2_val == -1073741825, ea_align == 0 and (imm_val % 4) == 2
// opcode: sh; op1:x9; op2:x10; op2val:-0x40000001; immval:0x2; align:0
TEST_STORE(x8,x12,0,x9,x10,-0x40000001,0x2,8,sh,0)

inst_3:
// rs1==x2, rs2==x11, rs2_val == -536870913, imm_val < 0
// opcode: sh; op1:x2; op2:x11; op2val:-0x20000001; immval:-0x8; align:0
TEST_STORE(x8,x12,0,x2,x11,-0x20000001,-0x8,12,sh,0)

inst_4:
// rs1==x13, rs2==x1, rs2_val == -268435457, 
// opcode: sh; op1:x13; op2:x1; op2val:-0x10000001; immval:0x8; align:0
TEST_STORE(x8,x12,0,x13,x1,-0x10000001,0x8,16,sh,0)

inst_5:
// rs1==x7, rs2==x3, rs2_val == -134217729, 
// opcode: sh; op1:x7; op2:x3; op2val:-0x8000001; immval:0x80; align:0
TEST_STORE(x8,x12,0,x7,x3,-0x8000001,0x80,20,sh,0)

inst_6:
// rs1==x3, rs2==x6, rs2_val == -67108865, 
// opcode: sh; op1:x3; op2:x6; op2val:-0x4000001; immval:0x6; align:0
TEST_STORE(x8,x9,0,x3,x6,-0x4000001,0x6,24,sh,0)

inst_7:
// rs1==x12, rs2==x2, rs2_val == -33554433, ea_align == 0 and (imm_val % 4) == 3
// opcode: sh; op1:x12; op2:x2; op2val:-0x2000001; immval:0x7; align:0
TEST_STORE(x8,x9,0,x12,x2,-0x2000001,0x7,28,sh,0)
RVTEST_SIGBASE( x2,signature_x2_0)

inst_8:
// rs1==x5, rs2==x13, rs2_val == -16777217, 
// opcode: sh; op1:x5; op2:x13; op2val:-0x1000001; immval:-0x800; align:0
TEST_STORE(x2,x9,0,x5,x13,-0x1000001,-0x800,0,sh,0)

inst_9:
// rs1==x1, rs2==x15, rs2_val == -8388609, 
// opcode: sh; op1:x1; op2:x15; op2val:-0x800001; immval:0x3; align:0
TEST_STORE(x2,x9,0,x1,x15,-0x800001,0x3,4,sh,0)

inst_10:
// rs1==x15, rs2==x7, rs2_val == -4194305, 
// opcode: sh; op1:x15; op2:x7; op2val:-0x400001; immval:0x40; align:0
TEST_STORE(x2,x9,0,x15,x7,-0x400001,0x40,8,sh,0)

inst_11:
// rs1==x14, rs2==x12, rs2_val == -2097153, ea_align == 0 and (imm_val % 4) == 1
// opcode: sh; op1:x14; op2:x12; op2val:-0x200001; immval:0x5; align:0
TEST_STORE(x2,x9,0,x14,x12,-0x200001,0x5,12,sh,0)

inst_12:
// rs1==x4, rs2==x14, rs2_val == -1048577, 
// opcode: sh; op1:x4; op2:x14; op2val:-0x100001; immval:-0x41; align:0
TEST_STORE(x2,x9,0,x4,x14,-0x100001,-0x41,16,sh,0)

inst_13:
// rs1==x11, rs2==x0, rs2_val == -524289, 
// opcode: sh; op1:x11; op2:x0; op2val:0x0; immval:-0x5; align:0
TEST_STORE(x2,x3,0,x11,x0,0x0,-0x5,20,sh,0)

inst_14:
// rs1==x8, rs2==x9, rs2_val == -262145, 
// opcode: sh; op1:x8; op2:x9; op2val:-0x40001; immval:-0x400; align:0
TEST_STORE(x2,x3,0,x8,x9,-0x40001,-0x400,24,sh,0)

inst_15:
// rs2==x8, rs2_val == -131073, 
// opcode: sh; op1:x11; op2:x8; op2val:-0x20001; immval:0x20; align:0
TEST_STORE(x2,x3,0,x11,x8,-0x20001,0x20,28,sh,0)

inst_16:
// rs2_val == -65537, 
// opcode: sh; op1:x10; op2:x11; op2val:-0x10001; immval:-0x9; align:0
TEST_STORE(x2,x3,0,x10,x11,-0x10001,-0x9,32,sh,0)
RVTEST_SIGBASE( x1,signature_x1_0)

inst_17:
// rs2_val == -32769, 
// opcode: sh; op1:x10; op2:x11; op2val:-0x8001; immval:-0x9; align:0
TEST_STORE(x1,x3,0,x10,x11,-0x8001,-0x9,0,sh,0)

inst_18:
// rs2_val == -16385, 
// opcode: sh; op1:x10; op2:x11; op2val:-0x4001; immval:0x0; align:0
TEST_STORE(x1,x3,0,x10,x11,-0x4001,0x0,4,sh,0)

inst_19:
// rs2_val == -8193, 
// opcode: sh; op1:x10; op2:x11; op2val:-0x2001; immval:-0x2; align:0
TEST_STORE(x1,x3,0,x10,x11,-0x2001,-0x2,8,sh,0)

inst_20:
// rs2_val == -4097, 
// opcode: sh; op1:x10; op2:x11; op2val:-0x1001; immval:0x10; align:0
TEST_STORE(x1,x3,0,x10,x11,-0x1001,0x10,12,sh,0)

inst_21:
// rs2_val == -2049, 
// opcode: sh; op1:x10; op2:x11; op2val:-0x801; immval:-0x556; align:0
TEST_STORE(x1,x3,0,x10,x11,-0x801,-0x556,16,sh,0)

inst_22:
// rs2_val == -1025, 
// opcode: sh; op1:x10; op2:x11; op2val:-0x401; immval:-0x8; align:0
TEST_STORE(x1,x3,0,x10,x11,-0x401,-0x8,20,sh,0)

inst_23:
// rs2_val == -513, 
// opcode: sh; op1:x10; op2:x11; op2val:-0x201; immval:-0x800; align:0
TEST_STORE(x1,x3,0,x10,x11,-0x201,-0x800,24,sh,0)

inst_24:
// rs2_val == -257, 
// opcode: sh; op1:x10; op2:x11; op2val:-0x101; immval:-0x2; align:0
TEST_STORE(x1,x3,0,x10,x11,-0x101,-0x2,28,sh,0)

inst_25:
// rs2_val == -129, 
// opcode: sh; op1:x10; op2:x11; op2val:-0x81; immval:0x40; align:0
TEST_STORE(x1,x3,0,x10,x11,-0x81,0x40,32,sh,0)

inst_26:
// rs2_val == -65, 
// opcode: sh; op1:x10; op2:x11; op2val:-0x41; immval:0x100; align:0
TEST_STORE(x1,x3,0,x10,x11,-0x41,0x100,36,sh,0)

inst_27:
// rs2_val == -33, 
// opcode: sh; op1:x10; op2:x11; op2val:-0x21; immval:-0x81; align:0
TEST_STORE(x1,x3,0,x10,x11,-0x21,-0x81,40,sh,0)

inst_28:
// rs2_val == -17, 
// opcode: sh; op1:x10; op2:x11; op2val:-0x11; immval:-0x401; align:0
TEST_STORE(x1,x3,0,x10,x11,-0x11,-0x401,44,sh,0)

inst_29:
// rs2_val == -9, 
// opcode: sh; op1:x10; op2:x11; op2val:-0x9; immval:-0x800; align:0
TEST_STORE(x1,x3,0,x10,x11,-0x9,-0x800,48,sh,0)

inst_30:
// rs2_val == -5, 
// opcode: sh; op1:x10; op2:x11; op2val:-0x5; immval:-0x800; align:0
TEST_STORE(x1,x3,0,x10,x11,-0x5,-0x800,52,sh,0)

inst_31:
// rs2_val == -3, 
// opcode: sh; op1:x10; op2:x11; op2val:-0x3; immval:0x200; align:0
TEST_STORE(x1,x3,0,x10,x11,-0x3,0x200,56,sh,0)

inst_32:
// rs2_val == -2, 
// opcode: sh; op1:x10; op2:x11; op2val:-0x2; immval:-0x21; align:0
TEST_STORE(x1,x3,0,x10,x11,-0x2,-0x21,60,sh,0)

inst_33:
// rs2_val == -2147483648, rs2_val == (-2**(xlen-1))
// opcode: sh; op1:x10; op2:x11; op2val:-0x80000000; immval:0x40; align:0
TEST_STORE(x1,x3,0,x10,x11,-0x80000000,0x40,64,sh,0)

inst_34:
// rs2_val == 1073741824, 
// opcode: sh; op1:x10; op2:x11; op2val:0x40000000; immval:-0x101; align:0
TEST_STORE(x1,x3,0,x10,x11,0x40000000,-0x101,68,sh,0)

inst_35:
// rs2_val == 536870912, 
// opcode: sh; op1:x10; op2:x11; op2val:0x20000000; immval:0x2; align:0
TEST_STORE(x1,x3,0,x10,x11,0x20000000,0x2,72,sh,0)

inst_36:
// rs2_val == 268435456, 
// opcode: sh; op1:x10; op2:x11; op2val:0x10000000; immval:-0x401; align:0
TEST_STORE(x1,x3,0,x10,x11,0x10000000,-0x401,76,sh,0)

inst_37:
// rs2_val == 134217728, 
// opcode: sh; op1:x10; op2:x11; op2val:0x8000000; immval:-0xa; align:0
TEST_STORE(x1,x3,0,x10,x11,0x8000000,-0xa,80,sh,0)

inst_38:
// rs2_val == 67108864, 
// opcode: sh; op1:x10; op2:x11; op2val:0x4000000; immval:0x200; align:0
TEST_STORE(x1,x3,0,x10,x11,0x4000000,0x200,84,sh,0)

inst_39:
// rs2_val == 33554432, 
// opcode: sh; op1:x10; op2:x11; op2val:0x2000000; immval:-0x81; align:0
TEST_STORE(x1,x3,0,x10,x11,0x2000000,-0x81,88,sh,0)

inst_40:
// rs2_val == -1431655766, 
// opcode: sh; op1:x10; op2:x11; op2val:-0x55555556; immval:-0x556; align:0
TEST_STORE(x1,x3,0,x10,x11,-0x55555556,-0x556,92,sh,0)

inst_41:
// rs2_val == 1431655765, 
// opcode: sh; op1:x10; op2:x11; op2val:0x55555555; immval:-0x9; align:0
TEST_STORE(x1,x3,0,x10,x11,0x55555555,-0x9,96,sh,0)

inst_42:
// ea_align == 2 and (imm_val % 4) == 0, 
// opcode: sh; op1:x10; op2:x11; op2val:-0x1000001; immval:-0x400; align:2
TEST_STORE(x1,x3,0,x10,x11,-0x1000001,-0x400,100,sh,2)

inst_43:
// ea_align == 2 and (imm_val % 4) == 1, rs2_val == 2048
// opcode: sh; op1:x10; op2:x11; op2val:0x800; immval:-0x7; align:2
TEST_STORE(x1,x3,0,x10,x11,0x800,-0x7,104,sh,2)

inst_44:
// ea_align == 2 and (imm_val % 4) == 2, 
// opcode: sh; op1:x10; op2:x11; op2val:0x3; immval:-0x556; align:2
TEST_STORE(x1,x3,0,x10,x11,0x3,-0x556,108,sh,2)

inst_45:
// ea_align == 2 and (imm_val % 4) == 3, 
// opcode: sh; op1:x10; op2:x11; op2val:-0x6; immval:-0x1; align:2
TEST_STORE(x1,x3,0,x10,x11,-0x6,-0x1,112,sh,2)

inst_46:
// rs2_val == 0, 
// opcode: sh; op1:x10; op2:x11; op2val:0x0; immval:-0x81; align:0
TEST_STORE(x1,x3,0,x10,x11,0x0,-0x81,116,sh,0)

inst_47:
// rs2_val == 16777216, 
// opcode: sh; op1:x10; op2:x11; op2val:0x1000000; immval:-0x9; align:0
TEST_STORE(x1,x3,0,x10,x11,0x1000000,-0x9,120,sh,0)

inst_48:
// rs2_val == 8388608, 
// opcode: sh; op1:x10; op2:x11; op2val:0x800000; immval:-0x2; align:0
TEST_STORE(x1,x3,0,x10,x11,0x800000,-0x2,124,sh,0)

inst_49:
// rs2_val == 4194304, 
// opcode: sh; op1:x10; op2:x11; op2val:0x400000; immval:-0x11; align:0
TEST_STORE(x1,x3,0,x10,x11,0x400000,-0x11,128,sh,0)

inst_50:
// rs2_val == 2097152, 
// opcode: sh; op1:x10; op2:x11; op2val:0x200000; immval:0x9; align:0
TEST_STORE(x1,x3,0,x10,x11,0x200000,0x9,132,sh,0)

inst_51:
// rs2_val == 1048576, 
// opcode: sh; op1:x10; op2:x11; op2val:0x100000; immval:0x4; align:0
TEST_STORE(x1,x3,0,x10,x11,0x100000,0x4,136,sh,0)

inst_52:
// rs2_val == 524288, 
// opcode: sh; op1:x10; op2:x11; op2val:0x80000; immval:-0x3; align:0
TEST_STORE(x1,x3,0,x10,x11,0x80000,-0x3,140,sh,0)

inst_53:
// rs2_val == 262144, 
// opcode: sh; op1:x10; op2:x11; op2val:0x40000; immval:0x100; align:0
TEST_STORE(x1,x3,0,x10,x11,0x40000,0x100,144,sh,0)

inst_54:
// rs2_val == 131072, 
// opcode: sh; op1:x10; op2:x11; op2val:0x20000; immval:-0x201; align:0
TEST_STORE(x1,x3,0,x10,x11,0x20000,-0x201,148,sh,0)

inst_55:
// rs2_val == 65536, 
// opcode: sh; op1:x10; op2:x11; op2val:0x10000; immval:-0x6; align:0
TEST_STORE(x1,x3,0,x10,x11,0x10000,-0x6,152,sh,0)

inst_56:
// rs2_val == 32768, 
// opcode: sh; op1:x10; op2:x11; op2val:0x8000; immval:0x100; align:0
TEST_STORE(x1,x3,0,x10,x11,0x8000,0x100,156,sh,0)

inst_57:
// rs2_val == 16384, 
// opcode: sh; op1:x10; op2:x11; op2val:0x4000; immval:-0x400; align:0
TEST_STORE(x1,x3,0,x10,x11,0x4000,-0x400,160,sh,0)

inst_58:
// rs2_val == 8192, 
// opcode: sh; op1:x10; op2:x11; op2val:0x2000; immval:-0x201; align:0
TEST_STORE(x1,x3,0,x10,x11,0x2000,-0x201,164,sh,0)

inst_59:
// rs2_val == 4096, 
// opcode: sh; op1:x10; op2:x11; op2val:0x1000; immval:-0x3; align:0
TEST_STORE(x1,x3,0,x10,x11,0x1000,-0x3,168,sh,0)

inst_60:
// rs2_val == 1024, 
// opcode: sh; op1:x10; op2:x11; op2val:0x400; immval:-0x81; align:0
TEST_STORE(x1,x3,0,x10,x11,0x400,-0x81,172,sh,0)

inst_61:
// rs2_val == 512, 
// opcode: sh; op1:x10; op2:x11; op2val:0x200; immval:0x40; align:0
TEST_STORE(x1,x3,0,x10,x11,0x200,0x40,176,sh,0)

inst_62:
// rs2_val == 256, 
// opcode: sh; op1:x10; op2:x11; op2val:0x100; immval:-0x800; align:0
TEST_STORE(x1,x3,0,x10,x11,0x100,-0x800,180,sh,0)

inst_63:
// rs2_val == 128, 
// opcode: sh; op1:x10; op2:x11; op2val:0x80; immval:-0x6; align:0
TEST_STORE(x1,x3,0,x10,x11,0x80,-0x6,184,sh,0)

inst_64:
// rs2_val == 64, 
// opcode: sh; op1:x10; op2:x11; op2val:0x40; immval:-0x11; align:0
TEST_STORE(x1,x3,0,x10,x11,0x40,-0x11,188,sh,0)

inst_65:
// rs2_val == 32, 
// opcode: sh; op1:x10; op2:x11; op2val:0x20; immval:0x9; align:0
TEST_STORE(x1,x3,0,x10,x11,0x20,0x9,192,sh,0)

inst_66:
// rs2_val == 16, 
// opcode: sh; op1:x10; op2:x11; op2val:0x10; immval:-0x7; align:0
TEST_STORE(x1,x3,0,x10,x11,0x10,-0x7,196,sh,0)

inst_67:
// rs2_val == 8, 
// opcode: sh; op1:x10; op2:x11; op2val:0x8; immval:-0x3; align:0
TEST_STORE(x1,x3,0,x10,x11,0x8,-0x3,200,sh,0)

inst_68:
// rs2_val == 4, 
// opcode: sh; op1:x10; op2:x11; op2val:0x4; immval:-0x4; align:0
TEST_STORE(x1,x3,0,x10,x11,0x4,-0x4,204,sh,0)

inst_69:
// rs2_val == 2, 
// opcode: sh; op1:x10; op2:x11; op2val:0x2; immval:0x400; align:0
TEST_STORE(x1,x3,0,x10,x11,0x2,0x400,208,sh,0)

inst_70:
// rs2_val == -524289, 
// opcode: sh; op1:x10; op2:x11; op2val:-0x80001; immval:-0x5; align:0
TEST_STORE(x1,x3,0,x10,x11,-0x80001,-0x5,212,sh,0)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x8_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x8_1:
    .fill 8*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 9*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 54*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
