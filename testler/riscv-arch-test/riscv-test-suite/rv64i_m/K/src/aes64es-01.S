// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.4.5
// timestamp : Thu May 20 05:32:05 2021 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv-ctg/sample_cgfs/rv64i_k.cgf \
//                  --base-isa rv64i \
//                  --randomize
// -----------
//
// -----------
// Copyright (c) 2021. Indian Institute of Technology Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the aes64es instruction of the RISC-V  extension for the aes64es covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IK")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*RV64.*I.*K.*);def TEST_CASE_1=True;",aes64es)

RVTEST_CASE(1,"//check ISA:=regex(.*64.*);check ISA:=regex(.*RV64.*I.*ZKn.*);def TEST_CASE_1=True;",aes64es)

RVTEST_CASE(2,"//check ISA:=regex(.*64.*);check ISA:=regex(.*RV64.*I.*ZKne.*);def TEST_CASE_1=True;",aes64es)

RVTEST_SIGBASE( x6,signature_x6_1)

inst_0:
// rs1 == rs2 != rd, rs1==x8, rs2==x8, rd==x7, rs1_val == 0x0706050403020100 and rs2_val == 0x0f0e0d0c0b0a0908 
// opcode: aes64es ; op1:x8; op2:x8; dest:x7; op1val:0x706050403020100;  op2val:0x706050403020100
TEST_RR_OP(aes64es, x7, x8, x8, 0x0000000000000000, 0x706050403020100, 0x706050403020100, x6, 0, x2)

inst_1:
// rs1 == rs2 == rd, rs1==x19, rs2==x19, rd==x19, rs1_val == 0x6af29145404fd8ed and rs2_val == 0x990e75eafff569c2 
// opcode: aes64es ; op1:x19; op2:x19; dest:x19; op1val:0x6af29145404fd8ed;  op2val:0x6af29145404fd8ed
TEST_RR_OP(aes64es, x19, x19, x19, 0x0000000000000000, 0x6af29145404fd8ed, 0x6af29145404fd8ed, x6, 8, x2)

inst_2:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x10, rs2==x20, rd==x26, rs1_val == 0x6d23c0488a6019c1 and rs2_val == 0x860bdaad7447a088 
// opcode: aes64es ; op1:x10; op2:x20; dest:x26; op1val:0x6d23c0488a6019c1;  op2val:0x860bdaad7447a088
TEST_RR_OP(aes64es, x26, x10, x20, 0x0000000000000000, 0x6d23c0488a6019c1, 0x860bdaad7447a088, x6, 16, x2)

inst_3:
// rs1 == rd != rs2, rs1==x13, rs2==x7, rd==x13, rs1_val == 0x1f7d946f17168ab3 and rs2_val == 0x66eae3d9bbb4f560 
// opcode: aes64es ; op1:x13; op2:x7; dest:x13; op1val:0x1f7d946f17168ab3;  op2val:0x66eae3d9bbb4f560
TEST_RR_OP(aes64es, x13, x13, x7, 0x0000000000000000, 0x1f7d946f17168ab3, 0x66eae3d9bbb4f560, x6, 24, x2)

inst_4:
// rs2 == rd != rs1, rs1==x29, rs2==x14, rd==x14, rs1_val == 0xef1d54db32b81f27 and rs2_val == 0x1826a804284fe16c 
// opcode: aes64es ; op1:x29; op2:x14; dest:x14; op1val:0xef1d54db32b81f27;  op2val:0x1826a804284fe16c
TEST_RR_OP(aes64es, x14, x29, x14, 0x0000000000000000, 0xef1d54db32b81f27, 0x1826a804284fe16c, x6, 32, x2)

inst_5:
// rs1==x15, rs2==x22, rd==x1, rs1_val == 0xb694de26ad9e5431 and rs2_val == 0x293f9f6071fad878 
// opcode: aes64es ; op1:x15; op2:x22; dest:x1; op1val:0xb694de26ad9e5431;  op2val:0x293f9f6071fad878
TEST_RR_OP(aes64es, x1, x15, x22, 0x0000000000000000, 0xb694de26ad9e5431, 0x293f9f6071fad878, x6, 40, x2)

inst_6:
// rs1==x30, rs2==x13, rd==x21, rs1_val == 0x987daa20b858e304 and rs2_val == 0x1aa1beebefb902cb 
// opcode: aes64es ; op1:x30; op2:x13; dest:x21; op1val:0x987daa20b858e304;  op2val:0x1aa1beebefb902cb
TEST_RR_OP(aes64es, x21, x30, x13, 0x0000000000000000, 0x987daa20b858e304, 0x1aa1beebefb902cb, x6, 48, x2)

inst_7:
// rs1==x11, rs2==x9, rd==x20, rs1_val == 0x79bb7c341d3110bc and rs2_val == 0x8678f5e3d272e229 
// opcode: aes64es ; op1:x11; op2:x9; dest:x20; op1val:0x79bb7c341d3110bc;  op2val:0x8678f5e3d272e229
TEST_RR_OP(aes64es, x20, x11, x9, 0x0000000000000000, 0x79bb7c341d3110bc, 0x8678f5e3d272e229, x6, 56, x2)

inst_8:
// rs1==x20, rs2==x12, rd==x17, rs1_val == 0xe2eaf4a09869be8c and rs2_val == 0x5b730cad91766f62 
// opcode: aes64es ; op1:x20; op2:x12; dest:x17; op1val:0xe2eaf4a09869be8c;  op2val:0x5b730cad91766f62
TEST_RR_OP(aes64es, x17, x20, x12, 0x0000000000000000, 0xe2eaf4a09869be8c, 0x5b730cad91766f62, x6, 64, x2)

inst_9:
// rs1==x31, rs2==x29, rd==x8, rs1_val == 0xc0fe15dd0df9564b and rs2_val == 0xb22bbf7eb4c858fb 
// opcode: aes64es ; op1:x31; op2:x29; dest:x8; op1val:0xc0fe15dd0df9564b;  op2val:0xb22bbf7eb4c858fb
TEST_RR_OP(aes64es, x8, x31, x29, 0x0000000000000000, 0xc0fe15dd0df9564b, 0xb22bbf7eb4c858fb, x6, 72, x2)

inst_10:
// rs1==x0, rs2==x15, rd==x23, rs1_val == 0x4113ee60952acffe and rs2_val == 0x53a66ed1dc80d916 
// opcode: aes64es ; op1:x0; op2:x15; dest:x23; op1val:0x0;  op2val:0x53a66ed1dc80d916
TEST_RR_OP(aes64es, x23, x0, x15, 0x0000000000000000, 0x0, 0x53a66ed1dc80d916, x6, 80, x2)

inst_11:
// rs1==x9, rs2==x16, rd==x12, rs1_val == 0x40a5ff526f38a9c7 and rs2_val == 0xb6f9706fb4f741aa 
// opcode: aes64es ; op1:x9; op2:x16; dest:x12; op1val:0x40a5ff526f38a9c7;  op2val:0xb6f9706fb4f741aa
TEST_RR_OP(aes64es, x12, x9, x16, 0x0000000000000000, 0x40a5ff526f38a9c7, 0xb6f9706fb4f741aa, x6, 88, x2)

inst_12:
// rs1==x17, rs2==x28, rd==x5, rs1_val == 0x9bedfe390d6ddd9d and rs2_val == 0xd05668ae0fdb82bc 
// opcode: aes64es ; op1:x17; op2:x28; dest:x5; op1val:0x9bedfe390d6ddd9d;  op2val:0xd05668ae0fdb82bc
TEST_RR_OP(aes64es, x5, x17, x28, 0x0000000000000000, 0x9bedfe390d6ddd9d, 0xd05668ae0fdb82bc, x6, 96, x2)

inst_13:
// rs1==x18, rs2==x1, rd==x4, rs1_val == 0xd75739f82ac177c6 and rs2_val == 0xaa6bb2bde9ed477d 
// opcode: aes64es ; op1:x18; op2:x1; dest:x4; op1val:0xd75739f82ac177c6;  op2val:0xaa6bb2bde9ed477d
TEST_RR_OP(aes64es, x4, x18, x1, 0x0000000000000000, 0xd75739f82ac177c6, 0xaa6bb2bde9ed477d, x6, 104, x2)

inst_14:
// rs1==x25, rs2==x4, rd==x31, rs1_val == 0x9a4e9ef10171f4df and rs2_val == 0x299c3bcf90efb625 
// opcode: aes64es ; op1:x25; op2:x4; dest:x31; op1val:0x9a4e9ef10171f4df;  op2val:0x299c3bcf90efb625
TEST_RR_OP(aes64es, x31, x25, x4, 0x0000000000000000, 0x9a4e9ef10171f4df, 0x299c3bcf90efb625, x6, 112, x2)

inst_15:
// rs1==x7, rs2==x17, rd==x10, rs1_val == 0xd169a3f8cad5e297 and rs2_val == 0x1fc493caa371db42 
// opcode: aes64es ; op1:x7; op2:x17; dest:x10; op1val:0xd169a3f8cad5e297;  op2val:0x1fc493caa371db42
TEST_RR_OP(aes64es, x10, x7, x17, 0x0000000000000000, 0xd169a3f8cad5e297, 0x1fc493caa371db42, x6, 120, x2)

inst_16:
// rs1==x28, rs2==x23, rd==x9, rs1_val == 0xd5b9fe5cf69bdcf3 and rs2_val == 0xf4c30307672f666d 
// opcode: aes64es ; op1:x28; op2:x23; dest:x9; op1val:0xd5b9fe5cf69bdcf3;  op2val:0xf4c30307672f666d
TEST_RR_OP(aes64es, x9, x28, x23, 0x0000000000000000, 0xd5b9fe5cf69bdcf3, 0xf4c30307672f666d, x6, 128, x2)

inst_17:
// rs1==x23, rs2==x3, rd==x28, rs1_val == 0xe4921bf73047c198 and rs2_val == 0xa0569d765ebc64cb 
// opcode: aes64es ; op1:x23; op2:x3; dest:x28; op1val:0xe4921bf73047c198;  op2val:0xa0569d765ebc64cb
TEST_RR_OP(aes64es, x28, x23, x3, 0x0000000000000000, 0xe4921bf73047c198, 0xa0569d765ebc64cb, x6, 136, x2)

inst_18:
// rs1==x12, rs2==x18, rd==x2, rs1_val == 0xfcc1b543c49cd65b and rs2_val == 0x2daf9ac7f5faf207 
// opcode: aes64es ; op1:x12; op2:x18; dest:x2; op1val:0xfcc1b543c49cd65b;  op2val:0x2daf9ac7f5faf207
TEST_RR_OP(aes64es, x2, x12, x18, 0x0000000000000000, 0xfcc1b543c49cd65b, 0x2daf9ac7f5faf207, x6, 144, x8)
RVTEST_SIGBASE( x7,signature_x7_0)

inst_19:
// rs1==x26, rs2==x10, rd==x29, rs1_val == 0x436f40f274b8de87 and rs2_val == 0x3459294ef273b44c 
// opcode: aes64es ; op1:x26; op2:x10; dest:x29; op1val:0x436f40f274b8de87;  op2val:0x3459294ef273b44c
TEST_RR_OP(aes64es, x29, x26, x10, 0x0000000000000000, 0x436f40f274b8de87, 0x3459294ef273b44c, x7, 0, x8)

inst_20:
// rs1==x24, rs2==x27, rd==x22, rs1_val == 0x75a3adb3254a9493 and rs2_val == 0xc5521660f3a3c571 
// opcode: aes64es ; op1:x24; op2:x27; dest:x22; op1val:0x75a3adb3254a9493;  op2val:0xc5521660f3a3c571
TEST_RR_OP(aes64es, x22, x24, x27, 0x0000000000000000, 0x75a3adb3254a9493, 0xc5521660f3a3c571, x7, 8, x8)

inst_21:
// rs1==x27, rs2==x31, rd==x3, rs1_val == 0xfffefdfcfbfaf9f8 and rs2_val == 0xf7f6f5f4f3f2f1f0 
// opcode: aes64es ; op1:x27; op2:x31; dest:x3; op1val:0xfffefdfcfbfaf9f8;  op2val:0xf7f6f5f4f3f2f1f0
TEST_RR_OP(aes64es, x3, x27, x31, 0x0000000000000000, 0xfffefdfcfbfaf9f8, 0xf7f6f5f4f3f2f1f0, x7, 16, x8)

inst_22:
// rs1==x1, rs2==x2, rd==x24, rs1_val == 0xf7f6f5f4f3f2f1f0 and rs2_val == 0xfffefdfcfbfaf9f8 
// opcode: aes64es ; op1:x1; op2:x2; dest:x24; op1val:0xf7f6f5f4f3f2f1f0;  op2val:0xfffefdfcfbfaf9f8
TEST_RR_OP(aes64es, x24, x1, x2, 0x0000000000000000, 0xf7f6f5f4f3f2f1f0, 0xfffefdfcfbfaf9f8, x7, 24, x8)

inst_23:
// rs1==x22, rs2==x26, rd==x16, rs1_val == 0xefeeedecebeae9e8 and rs2_val == 0xe7e6e5e4e3e2e1e0 
// opcode: aes64es ; op1:x22; op2:x26; dest:x16; op1val:0xefeeedecebeae9e8;  op2val:0xe7e6e5e4e3e2e1e0
TEST_RR_OP(aes64es, x16, x22, x26, 0x0000000000000000, 0xefeeedecebeae9e8, 0xe7e6e5e4e3e2e1e0, x7, 32, x8)

inst_24:
// rs1==x3, rs2==x21, rd==x15, rs1_val == 0xe7e6e5e4e3e2e1e0 and rs2_val == 0xefeeedecebeae9e8 
// opcode: aes64es ; op1:x3; op2:x21; dest:x15; op1val:0xe7e6e5e4e3e2e1e0;  op2val:0xefeeedecebeae9e8
TEST_RR_OP(aes64es, x15, x3, x21, 0x0000000000000000, 0xe7e6e5e4e3e2e1e0, 0xefeeedecebeae9e8, x7, 40, x8)

inst_25:
// rs1==x14, rs2==x6, rd==x0, rs1_val == 0xdfdedddcdbdad9d8 and rs2_val == 0xd7d6d5d4d3d2d1d0 
// opcode: aes64es ; op1:x14; op2:x6; dest:x0; op1val:0xdfdedddcdbdad9d8;  op2val:0xd7d6d5d4d3d2d1d0
TEST_RR_OP(aes64es, x0, x14, x6, 0x0000000000000000, 0xdfdedddcdbdad9d8, 0xd7d6d5d4d3d2d1d0, x7, 48, x8)

inst_26:
// rs1==x5, rs2==x24, rd==x6, rs1_val == 0xd7d6d5d4d3d2d1d0 and rs2_val == 0xdfdedddcdbdad9d8 
// opcode: aes64es ; op1:x5; op2:x24; dest:x6; op1val:0xd7d6d5d4d3d2d1d0;  op2val:0xdfdedddcdbdad9d8
TEST_RR_OP(aes64es, x6, x5, x24, 0x0000000000000000, 0xd7d6d5d4d3d2d1d0, 0xdfdedddcdbdad9d8, x7, 56, x8)

inst_27:
// rs1==x16, rs2==x0, rd==x18, rs1_val == 0xcfcecdcccbcac9c8 and rs2_val == 0xc7c6c5c4c3c2c1c0 
// opcode: aes64es ; op1:x16; op2:x0; dest:x18; op1val:0xcfcecdcccbcac9c8;  op2val:0x0
TEST_RR_OP(aes64es, x18, x16, x0, 0x0000000000000000, 0xcfcecdcccbcac9c8, 0x0, x7, 64, x8)

inst_28:
// rs1==x2, rs2==x25, rd==x30, rs1_val == 0xc7c6c5c4c3c2c1c0 and rs2_val == 0xcfcecdcccbcac9c8 
// opcode: aes64es ; op1:x2; op2:x25; dest:x30; op1val:0xc7c6c5c4c3c2c1c0;  op2val:0xcfcecdcccbcac9c8
TEST_RR_OP(aes64es, x30, x2, x25, 0x0000000000000000, 0xc7c6c5c4c3c2c1c0, 0xcfcecdcccbcac9c8, x7, 72, x8)

inst_29:
// rs1==x4, rs2==x30, rd==x11, rs1_val == 0xbfbebdbcbbbab9b8 and rs2_val == 0xb7b6b5b4b3b2b1b0 
// opcode: aes64es ; op1:x4; op2:x30; dest:x11; op1val:0xbfbebdbcbbbab9b8;  op2val:0xb7b6b5b4b3b2b1b0
TEST_RR_OP(aes64es, x11, x4, x30, 0x0000000000000000, 0xbfbebdbcbbbab9b8, 0xb7b6b5b4b3b2b1b0, x7, 80, x8)

inst_30:
// rs1==x6, rs2==x11, rd==x25, rs1_val == 0xb7b6b5b4b3b2b1b0 and rs2_val == 0xbfbebdbcbbbab9b8 
// opcode: aes64es ; op1:x6; op2:x11; dest:x25; op1val:0xb7b6b5b4b3b2b1b0;  op2val:0xbfbebdbcbbbab9b8
TEST_RR_OP(aes64es, x25, x6, x11, 0x0000000000000000, 0xb7b6b5b4b3b2b1b0, 0xbfbebdbcbbbab9b8, x7, 88, x8)

inst_31:
// rs1==x21, rs2==x5, rd==x27, rs1_val == 0xafaeadacabaaa9a8 and rs2_val == 0xa7a6a5a4a3a2a1a0 
// opcode: aes64es ; op1:x21; op2:x5; dest:x27; op1val:0xafaeadacabaaa9a8;  op2val:0xa7a6a5a4a3a2a1a0
TEST_RR_OP(aes64es, x27, x21, x5, 0x0000000000000000, 0xafaeadacabaaa9a8, 0xa7a6a5a4a3a2a1a0, x7, 96, x8)

inst_32:
// rs1_val == 0xa7a6a5a4a3a2a1a0 and rs2_val == 0xafaeadacabaaa9a8 
// opcode: aes64es ; op1:x10; op2:x11; dest:x12; op1val:0xa7a6a5a4a3a2a1a0;  op2val:0xafaeadacabaaa9a8
TEST_RR_OP(aes64es, x12, x10, x11, 0x0000000000000000, 0xa7a6a5a4a3a2a1a0, 0xafaeadacabaaa9a8, x7, 104, x8)

inst_33:
// rs1_val == 0x9f9e9d9c9b9a9998 and rs2_val == 0x9796959493929190 
// opcode: aes64es ; op1:x10; op2:x11; dest:x12; op1val:0x9f9e9d9c9b9a9998;  op2val:0x9796959493929190
TEST_RR_OP(aes64es, x12, x10, x11, 0x0000000000000000, 0x9f9e9d9c9b9a9998, 0x9796959493929190, x7, 112, x8)

inst_34:
// rs1_val == 0x9796959493929190 and rs2_val == 0x9f9e9d9c9b9a9998 
// opcode: aes64es ; op1:x10; op2:x11; dest:x12; op1val:0x9796959493929190;  op2val:0x9f9e9d9c9b9a9998
TEST_RR_OP(aes64es, x12, x10, x11, 0x0000000000000000, 0x9796959493929190, 0x9f9e9d9c9b9a9998, x7, 120, x8)

inst_35:
// rs1_val == 0x8f8e8d8c8b8a8988 and rs2_val == 0x8786858483828180 
// opcode: aes64es ; op1:x10; op2:x11; dest:x12; op1val:0x8f8e8d8c8b8a8988;  op2val:0x8786858483828180
TEST_RR_OP(aes64es, x12, x10, x11, 0x0000000000000000, 0x8f8e8d8c8b8a8988, 0x8786858483828180, x7, 128, x8)

inst_36:
// rs1_val == 0x8786858483828180 and rs2_val == 0x8f8e8d8c8b8a8988 
// opcode: aes64es ; op1:x10; op2:x11; dest:x12; op1val:0x8786858483828180;  op2val:0x8f8e8d8c8b8a8988
TEST_RR_OP(aes64es, x12, x10, x11, 0x0000000000000000, 0x8786858483828180, 0x8f8e8d8c8b8a8988, x7, 136, x8)

inst_37:
// rs1_val == 0x7f7e7d7c7b7a7978 and rs2_val == 0x7776757473727170 
// opcode: aes64es ; op1:x10; op2:x11; dest:x12; op1val:0x7f7e7d7c7b7a7978;  op2val:0x7776757473727170
TEST_RR_OP(aes64es, x12, x10, x11, 0x0000000000000000, 0x7f7e7d7c7b7a7978, 0x7776757473727170, x7, 144, x8)

inst_38:
// rs1_val == 0x7776757473727170 and rs2_val == 0x7f7e7d7c7b7a7978 
// opcode: aes64es ; op1:x10; op2:x11; dest:x12; op1val:0x7776757473727170;  op2val:0x7f7e7d7c7b7a7978
TEST_RR_OP(aes64es, x12, x10, x11, 0x0000000000000000, 0x7776757473727170, 0x7f7e7d7c7b7a7978, x7, 152, x8)

inst_39:
// rs1_val == 0x6f6e6d6c6b6a6968 and rs2_val == 0x6766656463626160 
// opcode: aes64es ; op1:x10; op2:x11; dest:x12; op1val:0x6f6e6d6c6b6a6968;  op2val:0x6766656463626160
TEST_RR_OP(aes64es, x12, x10, x11, 0x0000000000000000, 0x6f6e6d6c6b6a6968, 0x6766656463626160, x7, 160, x8)

inst_40:
// rs1_val == 0x6766656463626160 and rs2_val == 0x6f6e6d6c6b6a6968 
// opcode: aes64es ; op1:x10; op2:x11; dest:x12; op1val:0x6766656463626160;  op2val:0x6f6e6d6c6b6a6968
TEST_RR_OP(aes64es, x12, x10, x11, 0x0000000000000000, 0x6766656463626160, 0x6f6e6d6c6b6a6968, x7, 168, x8)

inst_41:
// rs1_val == 0x5f5e5d5c5b5a5958 and rs2_val == 0x5756555453525150 
// opcode: aes64es ; op1:x10; op2:x11; dest:x12; op1val:0x5f5e5d5c5b5a5958;  op2val:0x5756555453525150
TEST_RR_OP(aes64es, x12, x10, x11, 0x0000000000000000, 0x5f5e5d5c5b5a5958, 0x5756555453525150, x7, 176, x8)

inst_42:
// rs1_val == 0x5756555453525150 and rs2_val == 0x5f5e5d5c5b5a5958 
// opcode: aes64es ; op1:x10; op2:x11; dest:x12; op1val:0x5756555453525150;  op2val:0x5f5e5d5c5b5a5958
TEST_RR_OP(aes64es, x12, x10, x11, 0x0000000000000000, 0x5756555453525150, 0x5f5e5d5c5b5a5958, x7, 184, x8)

inst_43:
// rs1_val == 0x4f4e4d4c4b4a4948 and rs2_val == 0x4746454443424140 
// opcode: aes64es ; op1:x10; op2:x11; dest:x12; op1val:0x4f4e4d4c4b4a4948;  op2val:0x4746454443424140
TEST_RR_OP(aes64es, x12, x10, x11, 0x0000000000000000, 0x4f4e4d4c4b4a4948, 0x4746454443424140, x7, 192, x8)

inst_44:
// rs1_val == 0x4746454443424140 and rs2_val == 0x4f4e4d4c4b4a4948 
// opcode: aes64es ; op1:x10; op2:x11; dest:x12; op1val:0x4746454443424140;  op2val:0x4f4e4d4c4b4a4948
TEST_RR_OP(aes64es, x12, x10, x11, 0x0000000000000000, 0x4746454443424140, 0x4f4e4d4c4b4a4948, x7, 200, x8)

inst_45:
// rs1_val == 0x3f3e3d3c3b3a3938 and rs2_val == 0x3736353433323130 
// opcode: aes64es ; op1:x10; op2:x11; dest:x12; op1val:0x3f3e3d3c3b3a3938;  op2val:0x3736353433323130
TEST_RR_OP(aes64es, x12, x10, x11, 0x0000000000000000, 0x3f3e3d3c3b3a3938, 0x3736353433323130, x7, 208, x8)

inst_46:
// rs1_val == 0x3736353433323130 and rs2_val == 0x3f3e3d3c3b3a3938 
// opcode: aes64es ; op1:x10; op2:x11; dest:x12; op1val:0x3736353433323130;  op2val:0x3f3e3d3c3b3a3938
TEST_RR_OP(aes64es, x12, x10, x11, 0x0000000000000000, 0x3736353433323130, 0x3f3e3d3c3b3a3938, x7, 216, x8)

inst_47:
// rs1_val == 0x2f2e2d2c2b2a2928 and rs2_val == 0x2726252423222120 
// opcode: aes64es ; op1:x10; op2:x11; dest:x12; op1val:0x2f2e2d2c2b2a2928;  op2val:0x2726252423222120
TEST_RR_OP(aes64es, x12, x10, x11, 0x0000000000000000, 0x2f2e2d2c2b2a2928, 0x2726252423222120, x7, 224, x8)

inst_48:
// rs1_val == 0x2726252423222120 and rs2_val == 0x2f2e2d2c2b2a2928 
// opcode: aes64es ; op1:x10; op2:x11; dest:x12; op1val:0x2726252423222120;  op2val:0x2f2e2d2c2b2a2928
TEST_RR_OP(aes64es, x12, x10, x11, 0x0000000000000000, 0x2726252423222120, 0x2f2e2d2c2b2a2928, x7, 232, x8)

inst_49:
// rs1_val == 0x1f1e1d1c1b1a1918 and rs2_val == 0x1716151413121110 
// opcode: aes64es ; op1:x10; op2:x11; dest:x12; op1val:0x1f1e1d1c1b1a1918;  op2val:0x1716151413121110
TEST_RR_OP(aes64es, x12, x10, x11, 0x0000000000000000, 0x1f1e1d1c1b1a1918, 0x1716151413121110, x7, 240, x8)

inst_50:
// rs1_val == 0x1716151413121110 and rs2_val == 0x1f1e1d1c1b1a1918 
// opcode: aes64es ; op1:x10; op2:x11; dest:x12; op1val:0x1716151413121110;  op2val:0x1f1e1d1c1b1a1918
TEST_RR_OP(aes64es, x12, x10, x11, 0x0000000000000000, 0x1716151413121110, 0x1f1e1d1c1b1a1918, x7, 248, x8)

inst_51:
// rs1_val == 0x0f0e0d0c0b0a0908 and rs2_val == 0x0706050403020100 
// opcode: aes64es ; op1:x10; op2:x11; dest:x12; op1val:0xf0e0d0c0b0a0908;  op2val:0x706050403020100
TEST_RR_OP(aes64es, x12, x10, x11, 0x0000000000000000, 0xf0e0d0c0b0a0908, 0x706050403020100, x7, 256, x8)

inst_52:
// rs1_val == 0x0706050403020100 and rs2_val == 0x0f0e0d0c0b0a0908 
// opcode: aes64es ; op1:x10; op2:x11; dest:x12; op1val:0x706050403020100;  op2val:0xf0e0d0c0b0a0908
TEST_RR_OP(aes64es, x12, x10, x11, 0x0000000000000000, 0x706050403020100, 0xf0e0d0c0b0a0908, x7, 264, x8)

inst_53:
// rs1_val == 0x6af29145404fd8ed and rs2_val == 0x990e75eafff569c2 
// opcode: aes64es ; op1:x10; op2:x11; dest:x12; op1val:0x6af29145404fd8ed;  op2val:0x990e75eafff569c2
TEST_RR_OP(aes64es, x12, x10, x11, 0x0000000000000000, 0x6af29145404fd8ed, 0x990e75eafff569c2, x7, 272, x8)

inst_54:
// rs1_val == 0x4113ee60952acffe and rs2_val == 0x53a66ed1dc80d916 
// opcode: aes64es ; op1:x10; op2:x11; dest:x12; op1val:0x4113ee60952acffe;  op2val:0x53a66ed1dc80d916
TEST_RR_OP(aes64es, x12, x10, x11, 0x0000000000000000, 0x4113ee60952acffe, 0x53a66ed1dc80d916, x7, 280, x8)

inst_55:
// rs1_val == 0xdfdedddcdbdad9d8 and rs2_val == 0xd7d6d5d4d3d2d1d0 
// opcode: aes64es ; op1:x10; op2:x11; dest:x12; op1val:0xdfdedddcdbdad9d8;  op2val:0xd7d6d5d4d3d2d1d0
TEST_RR_OP(aes64es, x12, x10, x11, 0x0000000000000000, 0xdfdedddcdbdad9d8, 0xd7d6d5d4d3d2d1d0, x7, 288, x8)

inst_56:
// rs1_val == 0xcfcecdcccbcac9c8 and rs2_val == 0xc7c6c5c4c3c2c1c0 
// opcode: aes64es ; op1:x10; op2:x11; dest:x12; op1val:0xcfcecdcccbcac9c8;  op2val:0xc7c6c5c4c3c2c1c0
TEST_RR_OP(aes64es, x12, x10, x11, 0x0000000000000000, 0xcfcecdcccbcac9c8, 0xc7c6c5c4c3c2c1c0, x7, 296, x8)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x6_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x6_1:
    .fill 19*(XLEN/32),4,0xdeadbeef


signature_x7_0:
    .fill 38*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
