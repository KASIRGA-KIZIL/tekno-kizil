// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.4.5
// timestamp : Thu May 20 05:32:05 2021 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv-ctg/sample_cgfs/rv64i_k.cgf \
//                  --base-isa rv64i \
//                  --randomize
// -----------
//
// -----------
// Copyright (c) 2021. Indian Institute of Technology Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the rori instruction of the RISC-V  extension for the rori covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64I")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)

RVTEST_CASE(1,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*ZKs.*);def TEST_CASE_1=True;",rori)

RVTEST_CASE(2,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*ZKn.*);def TEST_CASE_1=True;",rori)

RVTEST_CASE(3,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*ZKb.*);def TEST_CASE_1=True;",rori)

RVTEST_SIGBASE( x8,signature_x8_1)

inst_0:
// rs1 != rd, rs1==x22, rd==x16, rs1_val == 0xFFFFFFFFFFFFFFFF and imm_val == 0x36 
// opcode: rori ; op1:x22; dest:x16; op1val:0xffffffffffffffff;  immval:0x36
TEST_IMM_OP( rori, x16, x22, 0x0000000000000000, 0xffffffffffffffff, 0x36, x8, 0, x11)

inst_1:
// rs1 == rd, rs1==x0, rd==x0, imm_val == 0x00 and rs1_val == 0xCADB5BEC61250888 
// opcode: rori ; op1:x0; dest:x0; op1val:0x0;  immval:0x0
TEST_IMM_OP( rori, x0, x0, 0x0000000000000000, 0x0, 0x0, x8, 8, x11)

inst_2:
// rs1==x30, rd==x25, imm_val == 0x20 and rs1_val == 0xE917333212AF8F73 
// opcode: rori ; op1:x30; dest:x25; op1val:0xe917333212af8f73;  immval:0x20
TEST_IMM_OP( rori, x25, x30, 0x0000000000000000, 0xe917333212af8f73, 0x20, x8, 16, x11)

inst_3:
// rs1==x24, rd==x4, imm_val == 0x10 and rs1_val == 0xCC381E1007E8BF65 
// opcode: rori ; op1:x24; dest:x4; op1val:0xcc381e1007e8bf65;  immval:0x10
TEST_IMM_OP( rori, x4, x24, 0x0000000000000000, 0xcc381e1007e8bf65, 0x10, x8, 24, x11)

inst_4:
// rs1==x25, rd==x20, imm_val == 0x18 and rs1_val == 0xFAE216DC58F45328 
// opcode: rori ; op1:x25; dest:x20; op1val:0xfae216dc58f45328;  immval:0x18
TEST_IMM_OP( rori, x20, x25, 0x0000000000000000, 0xfae216dc58f45328, 0x18, x8, 32, x11)

inst_5:
// rs1==x2, rd==x7, imm_val == 0x1C and rs1_val == 0xE6A56AE617C67895 
// opcode: rori ; op1:x2; dest:x7; op1val:0xe6a56ae617c67895;  immval:0x1c
TEST_IMM_OP( rori, x7, x2, 0x0000000000000000, 0xe6a56ae617c67895, 0x1c, x8, 40, x11)

inst_6:
// rs1==x21, rd==x24, imm_val == 0x22 and rs1_val == 0x6AEB7DBD0A095049 
// opcode: rori ; op1:x21; dest:x24; op1val:0x6aeb7dbd0a095049;  immval:0x22
TEST_IMM_OP( rori, x24, x21, 0x0000000000000000, 0x6aeb7dbd0a095049, 0x22, x8, 48, x11)

inst_7:
// rs1==x12, rd==x1, imm_val == 0x0D and rs1_val == 0xF644D360EFB8C545 
// opcode: rori ; op1:x12; dest:x1; op1val:0xf644d360efb8c545;  immval:0xd
TEST_IMM_OP( rori, x1, x12, 0x0000000000000000, 0xf644d360efb8c545, 0xd, x8, 56, x11)

inst_8:
// rs1==x19, rd==x14, rs1_val == 0x0000000000000000 and imm_val == 0x1E 
// opcode: rori ; op1:x19; dest:x14; op1val:0x0;  immval:0x1e
TEST_IMM_OP( rori, x14, x19, 0x0000000000000000, 0x0, 0x1e, x8, 64, x11)

inst_9:
// rs1==x29, rd==x27, rs1_val == 0x8000000000000000 and imm_val == 0x22 
// opcode: rori ; op1:x29; dest:x27; op1val:0x8000000000000000;  immval:0x22
TEST_IMM_OP( rori, x27, x29, 0x0000000000000000, 0x8000000000000000, 0x22, x8, 72, x11)

inst_10:
// rs1==x4, rd==x22, rs1_val == 0xC000000000000000 and imm_val == 0x10 
// opcode: rori ; op1:x4; dest:x22; op1val:0xc000000000000000;  immval:0x10
TEST_IMM_OP( rori, x22, x4, 0x0000000000000000, 0xc000000000000000, 0x10, x8, 80, x11)

inst_11:
// rs1==x15, rd==x30, rs1_val == 0x6000000000000000 and imm_val == 0x00 
// opcode: rori ; op1:x15; dest:x30; op1val:0x6000000000000000;  immval:0x0
TEST_IMM_OP( rori, x30, x15, 0x0000000000000000, 0x6000000000000000, 0x0, x8, 88, x11)

inst_12:
// rs1==x10, rd==x21, rs1_val == 0xF000000000000000 and imm_val == 0x20 
// opcode: rori ; op1:x10; dest:x21; op1val:0xf000000000000000;  immval:0x20
TEST_IMM_OP( rori, x21, x10, 0x0000000000000000, 0xf000000000000000, 0x20, x8, 96, x11)

inst_13:
// rs1==x6, rd==x29, rs1_val == 0x1800000000000000 and imm_val == 0x1B 
// opcode: rori ; op1:x6; dest:x29; op1val:0x1800000000000000;  immval:0x1b
TEST_IMM_OP( rori, x29, x6, 0x0000000000000000, 0x1800000000000000, 0x1b, x8, 104, x11)

inst_14:
// rs1==x3, rd==x26, rs1_val == 0x4400000000000000 and imm_val == 0x38 
// opcode: rori ; op1:x3; dest:x26; op1val:0x4400000000000000;  immval:0x38
TEST_IMM_OP( rori, x26, x3, 0x0000000000000000, 0x4400000000000000, 0x38, x8, 112, x11)

inst_15:
// rs1==x23, rd==x15, rs1_val == 0x3E00000000000000 and imm_val == 0x05 
// opcode: rori ; op1:x23; dest:x15; op1val:0x3e00000000000000;  immval:0x5
TEST_IMM_OP( rori, x15, x23, 0x0000000000000000, 0x3e00000000000000, 0x5, x8, 120, x11)

inst_16:
// rs1==x16, rd==x12, rs1_val == 0x3500000000000000 and imm_val == 0x14 
// opcode: rori ; op1:x16; dest:x12; op1val:0x3500000000000000;  immval:0x14
TEST_IMM_OP( rori, x12, x16, 0x0000000000000000, 0x3500000000000000, 0x14, x8, 128, x11)

inst_17:
// rs1==x31, rd==x23, rs1_val == 0x6F80000000000000 and imm_val == 0x38 
// opcode: rori ; op1:x31; dest:x23; op1val:0x6f80000000000000;  immval:0x38
TEST_IMM_OP( rori, x23, x31, 0x0000000000000000, 0x6f80000000000000, 0x38, x8, 136, x11)

inst_18:
// rs1==x5, rd==x19, rs1_val == 0x4EC0000000000000 and imm_val == 0x2D 
// opcode: rori ; op1:x5; dest:x19; op1val:0x4ec0000000000000;  immval:0x2d
TEST_IMM_OP( rori, x19, x5, 0x0000000000000000, 0x4ec0000000000000, 0x2d, x8, 144, x11)

inst_19:
// rs1==x9, rd==x28, rs1_val == 0x1E20000000000000 and imm_val == 0x3D 
// opcode: rori ; op1:x9; dest:x28; op1val:0x1e20000000000000;  immval:0x3d
TEST_IMM_OP( rori, x28, x9, 0x0000000000000000, 0x1e20000000000000, 0x3d, x8, 152, x11)

inst_20:
// rs1==x26, rd==x18, rs1_val == 0x1910000000000000 and imm_val == 0x1D 
// opcode: rori ; op1:x26; dest:x18; op1val:0x1910000000000000;  immval:0x1d
TEST_IMM_OP( rori, x18, x26, 0x0000000000000000, 0x1910000000000000, 0x1d, x8, 160, x11)

inst_21:
// rs1==x13, rd==x3, rs1_val == 0x1248000000000000 and imm_val == 0x23 
// opcode: rori ; op1:x13; dest:x3; op1val:0x1248000000000000;  immval:0x23
TEST_IMM_OP( rori, x3, x13, 0x0000000000000000, 0x1248000000000000, 0x23, x8, 168, x4)
RVTEST_SIGBASE( x3,signature_x3_0)

inst_22:
// rs1==x27, rd==x10, rs1_val == 0xBF84000000000000 and imm_val == 0x29 
// opcode: rori ; op1:x27; dest:x10; op1val:0xbf84000000000000;  immval:0x29
TEST_IMM_OP( rori, x10, x27, 0x0000000000000000, 0xbf84000000000000, 0x29, x3, 0, x4)

inst_23:
// rs1==x11, rd==x17, rs1_val == 0xC116000000000000 and imm_val == 0x13 
// opcode: rori ; op1:x11; dest:x17; op1val:0xc116000000000000;  immval:0x13
TEST_IMM_OP( rori, x17, x11, 0x0000000000000000, 0xc116000000000000, 0x13, x3, 8, x4)

inst_24:
// rs1==x18, rd==x13, rs1_val == 0xD631000000000000 and imm_val == 0x2E 
// opcode: rori ; op1:x18; dest:x13; op1val:0xd631000000000000;  immval:0x2e
TEST_IMM_OP( rori, x13, x18, 0x0000000000000000, 0xd631000000000000, 0x2e, x3, 16, x4)

inst_25:
// rs1==x28, rd==x9, rs1_val == 0x17B2800000000000 and imm_val == 0x1F 
// opcode: rori ; op1:x28; dest:x9; op1val:0x17b2800000000000;  immval:0x1f
TEST_IMM_OP( rori, x9, x28, 0x0000000000000000, 0x17b2800000000000, 0x1f, x3, 24, x4)

inst_26:
// rs1==x17, rd==x5, rs1_val == 0x9568400000000000 and imm_val == 0x01 
// opcode: rori ; op1:x17; dest:x5; op1val:0x9568400000000000;  immval:0x1
TEST_IMM_OP( rori, x5, x17, 0x0000000000000000, 0x9568400000000000, 0x1, x3, 32, x4)

inst_27:
// rs1==x1, rd==x11, rs1_val == 0x8B06600000000000 and imm_val == 0x2B 
// opcode: rori ; op1:x1; dest:x11; op1val:0x8b06600000000000;  immval:0x2b
TEST_IMM_OP( rori, x11, x1, 0x0000000000000000, 0x8b06600000000000, 0x2b, x3, 40, x4)

inst_28:
// rs1==x20, rd==x6, rs1_val == 0xB93DF00000000000 and imm_val == 0x00 
// opcode: rori ; op1:x20; dest:x6; op1val:0xb93df00000000000;  immval:0x0
TEST_IMM_OP( rori, x6, x20, 0x0000000000000000, 0xb93df00000000000, 0x0, x3, 48, x4)

inst_29:
// rs1==x8, rd==x2, rs1_val == 0x88ADB80000000000 and imm_val == 0x1C 
// opcode: rori ; op1:x8; dest:x2; op1val:0x88adb80000000000;  immval:0x1c
TEST_IMM_OP( rori, x2, x8, 0x0000000000000000, 0x88adb80000000000, 0x1c, x3, 56, x4)

inst_30:
// rs1==x14, rd==x8, rs1_val == 0xE180E40000000000 and imm_val == 0x2E 
// opcode: rori ; op1:x14; dest:x8; op1val:0xe180e40000000000;  immval:0x2e
TEST_IMM_OP( rori, x8, x14, 0x0000000000000000, 0xe180e40000000000, 0x2e, x3, 64, x4)

inst_31:
// rs1==x7, rd==x31, rs1_val == 0xD5CB7E0000000000 and imm_val == 0x15 
// opcode: rori ; op1:x7; dest:x31; op1val:0xd5cb7e0000000000;  immval:0x15
TEST_IMM_OP( rori, x31, x7, 0x0000000000000000, 0xd5cb7e0000000000, 0x15, x3, 72, x4)

inst_32:
// rs1_val == 0xA438230000000000 and imm_val == 0x3D 
// opcode: rori ; op1:x10; dest:x11; op1val:0xa438230000000000;  immval:0x3d
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xa438230000000000, 0x3d, x3, 80, x4)

inst_33:
// rs1_val == 0xB9BE488000000000 and imm_val == 0x24 
// opcode: rori ; op1:x10; dest:x11; op1val:0xb9be488000000000;  immval:0x24
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xb9be488000000000, 0x24, x3, 88, x4)

inst_34:
// rs1_val == 0xE5ABA74000000000 and imm_val == 0x2F 
// opcode: rori ; op1:x10; dest:x11; op1val:0xe5aba74000000000;  immval:0x2f
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xe5aba74000000000, 0x2f, x3, 96, x4)

inst_35:
// rs1_val == 0xF2124BA000000000 and imm_val == 0x06 
// opcode: rori ; op1:x10; dest:x11; op1val:0xf2124ba000000000;  immval:0x6
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xf2124ba000000000, 0x6, x3, 104, x4)

inst_36:
// rs1_val == 0x96EBEC5000000000 and imm_val == 0x23 
// opcode: rori ; op1:x10; dest:x11; op1val:0x96ebec5000000000;  immval:0x23
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x96ebec5000000000, 0x23, x3, 112, x4)

inst_37:
// rs1_val == 0x6CA53BC800000000 and imm_val == 0x23 
// opcode: rori ; op1:x10; dest:x11; op1val:0x6ca53bc800000000;  immval:0x23
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x6ca53bc800000000, 0x23, x3, 120, x4)

inst_38:
// rs1_val == 0x035FF31C00000000 and imm_val == 0x1C 
// opcode: rori ; op1:x10; dest:x11; op1val:0x35ff31c00000000;  immval:0x1c
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x35ff31c00000000, 0x1c, x3, 128, x4)

inst_39:
// rs1_val == 0x8B38E95A00000000 and imm_val == 0x0D 
// opcode: rori ; op1:x10; dest:x11; op1val:0x8b38e95a00000000;  immval:0xd
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x8b38e95a00000000, 0xd, x3, 136, x4)

inst_40:
// rs1_val == 0x0B21BBBB00000000 and imm_val == 0x1A 
// opcode: rori ; op1:x10; dest:x11; op1val:0xb21bbbb00000000;  immval:0x1a
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xb21bbbb00000000, 0x1a, x3, 144, x4)

inst_41:
// rs1_val == 0x9C6FFFDC80000000 and imm_val == 0x36 
// opcode: rori ; op1:x10; dest:x11; op1val:0x9c6fffdc80000000;  immval:0x36
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x9c6fffdc80000000, 0x36, x3, 152, x4)

inst_42:
// rs1_val == 0x8217FFBE40000000 and imm_val == 0x03 
// opcode: rori ; op1:x10; dest:x11; op1val:0x8217ffbe40000000;  immval:0x3
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x8217ffbe40000000, 0x3, x3, 160, x4)

inst_43:
// rs1_val == 0x60E68CB720000000 and imm_val == 0x37 
// opcode: rori ; op1:x10; dest:x11; op1val:0x60e68cb720000000;  immval:0x37
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x60e68cb720000000, 0x37, x3, 168, x4)

inst_44:
// rs1_val == 0xF5D02B2010000000 and imm_val == 0x16 
// opcode: rori ; op1:x10; dest:x11; op1val:0xf5d02b2010000000;  immval:0x16
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xf5d02b2010000000, 0x16, x3, 176, x4)

inst_45:
// rs1_val == 0x4204DE9838000000 and imm_val == 0x2A 
// opcode: rori ; op1:x10; dest:x11; op1val:0x4204de9838000000;  immval:0x2a
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x4204de9838000000, 0x2a, x3, 184, x4)

inst_46:
// rs1_val == 0xF6B1F180F4000000 and imm_val == 0x0E 
// opcode: rori ; op1:x10; dest:x11; op1val:0xf6b1f180f4000000;  immval:0xe
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xf6b1f180f4000000, 0xe, x3, 192, x4)

inst_47:
// rs1_val == 0xF5BB75A166000000 and imm_val == 0x31 
// opcode: rori ; op1:x10; dest:x11; op1val:0xf5bb75a166000000;  immval:0x31
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xf5bb75a166000000, 0x31, x3, 200, x4)

inst_48:
// rs1_val == 0xAA5B397039000000 and imm_val == 0x2E 
// opcode: rori ; op1:x10; dest:x11; op1val:0xaa5b397039000000;  immval:0x2e
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xaa5b397039000000, 0x2e, x3, 208, x4)

inst_49:
// rs1_val == 0x0E7BD5B154800000 and imm_val == 0x21 
// opcode: rori ; op1:x10; dest:x11; op1val:0xe7bd5b154800000;  immval:0x21
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xe7bd5b154800000, 0x21, x3, 216, x4)

inst_50:
// rs1_val == 0xB7A2A2301A400000 and imm_val == 0x0A 
// opcode: rori ; op1:x10; dest:x11; op1val:0xb7a2a2301a400000;  immval:0xa
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xb7a2a2301a400000, 0xa, x3, 224, x4)

inst_51:
// rs1_val == 0x29EF41AF7B600000 and imm_val == 0x31 
// opcode: rori ; op1:x10; dest:x11; op1val:0x29ef41af7b600000;  immval:0x31
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x29ef41af7b600000, 0x31, x3, 232, x4)

inst_52:
// rs1_val == 0xDD8AB0BCEFB00000 and imm_val == 0x3C 
// opcode: rori ; op1:x10; dest:x11; op1val:0xdd8ab0bcefb00000;  immval:0x3c
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xdd8ab0bcefb00000, 0x3c, x3, 240, x4)

inst_53:
// rs1_val == 0xFA3B344326080000 and imm_val == 0x35 
// opcode: rori ; op1:x10; dest:x11; op1val:0xfa3b344326080000;  immval:0x35
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xfa3b344326080000, 0x35, x3, 248, x4)

inst_54:
// rs1_val == 0xBF06387955040000 and imm_val == 0x0A 
// opcode: rori ; op1:x10; dest:x11; op1val:0xbf06387955040000;  immval:0xa
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xbf06387955040000, 0xa, x3, 256, x4)

inst_55:
// rs1_val == 0x7D49F3CA79FA0000 and imm_val == 0x06 
// opcode: rori ; op1:x10; dest:x11; op1val:0x7d49f3ca79fa0000;  immval:0x6
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x7d49f3ca79fa0000, 0x6, x3, 264, x4)

inst_56:
// rs1_val == 0xAAB48A1C0F230000 and imm_val == 0x14 
// opcode: rori ; op1:x10; dest:x11; op1val:0xaab48a1c0f230000;  immval:0x14
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xaab48a1c0f230000, 0x14, x3, 272, x4)

inst_57:
// rs1_val == 0xA25E549735CB8000 and imm_val == 0x11 
// opcode: rori ; op1:x10; dest:x11; op1val:0xa25e549735cb8000;  immval:0x11
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xa25e549735cb8000, 0x11, x3, 280, x4)

inst_58:
// rs1_val == 0x49E43C96F2344000 and imm_val == 0x0E 
// opcode: rori ; op1:x10; dest:x11; op1val:0x49e43c96f2344000;  immval:0xe
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x49e43c96f2344000, 0xe, x3, 288, x4)

inst_59:
// rs1_val == 0x971662E94AAA2000 and imm_val == 0x36 
// opcode: rori ; op1:x10; dest:x11; op1val:0x971662e94aaa2000;  immval:0x36
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x971662e94aaa2000, 0x36, x3, 296, x4)

inst_60:
// rs1_val == 0xFA51CD1D4D2B5000 and imm_val == 0x1C 
// opcode: rori ; op1:x10; dest:x11; op1val:0xfa51cd1d4d2b5000;  immval:0x1c
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xfa51cd1d4d2b5000, 0x1c, x3, 304, x4)

inst_61:
// rs1_val == 0xEBC398261A02E800 and imm_val == 0x07 
// opcode: rori ; op1:x10; dest:x11; op1val:0xebc398261a02e800;  immval:0x7
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xebc398261a02e800, 0x7, x3, 312, x4)

inst_62:
// rs1_val == 0x5334BAB9CA6C0400 and imm_val == 0x0B 
// opcode: rori ; op1:x10; dest:x11; op1val:0x5334bab9ca6c0400;  immval:0xb
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x5334bab9ca6c0400, 0xb, x3, 320, x4)

inst_63:
// rs1_val == 0xEC133026333BC200 and imm_val == 0x2B 
// opcode: rori ; op1:x10; dest:x11; op1val:0xec133026333bc200;  immval:0x2b
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xec133026333bc200, 0x2b, x3, 328, x4)

inst_64:
// rs1_val == 0x82CC710F0F1C6B00 and imm_val == 0x19 
// opcode: rori ; op1:x10; dest:x11; op1val:0x82cc710f0f1c6b00;  immval:0x19
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x82cc710f0f1c6b00, 0x19, x3, 336, x4)

inst_65:
// rs1_val == 0x7AA3D594C52CFC80 and imm_val == 0x1A 
// opcode: rori ; op1:x10; dest:x11; op1val:0x7aa3d594c52cfc80;  immval:0x1a
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x7aa3d594c52cfc80, 0x1a, x3, 344, x4)

inst_66:
// rs1_val == 0x29DB927E9836F5C0 and imm_val == 0x2F 
// opcode: rori ; op1:x10; dest:x11; op1val:0x29db927e9836f5c0;  immval:0x2f
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x29db927e9836f5c0, 0x2f, x3, 352, x4)

inst_67:
// rs1_val == 0x0DA598F1DCB160E0 and imm_val == 0x12 
// opcode: rori ; op1:x10; dest:x11; op1val:0xda598f1dcb160e0;  immval:0x12
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xda598f1dcb160e0, 0x12, x3, 360, x4)

inst_68:
// rs1_val == 0xD45AF1CB0CAAE1D0 and imm_val == 0x1D 
// opcode: rori ; op1:x10; dest:x11; op1val:0xd45af1cb0caae1d0;  immval:0x1d
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xd45af1cb0caae1d0, 0x1d, x3, 368, x4)

inst_69:
// rs1_val == 0x25B37C62314026E8 and imm_val == 0x3A 
// opcode: rori ; op1:x10; dest:x11; op1val:0x25b37c62314026e8;  immval:0x3a
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x25b37c62314026e8, 0x3a, x3, 376, x4)

inst_70:
// rs1_val == 0x7FBFA447FC8A89F4 and imm_val == 0x3D 
// opcode: rori ; op1:x10; dest:x11; op1val:0x7fbfa447fc8a89f4;  immval:0x3d
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x7fbfa447fc8a89f4, 0x3d, x3, 384, x4)

inst_71:
// rs1_val == 0xC36673FE4902E9CE and imm_val == 0x01 
// opcode: rori ; op1:x10; dest:x11; op1val:0xc36673fe4902e9ce;  immval:0x1
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xc36673fe4902e9ce, 0x1, x3, 392, x4)

inst_72:
// rs1_val == 0x44DCDA6A797D76DF and imm_val == 0x2C 
// opcode: rori ; op1:x10; dest:x11; op1val:0x44dcda6a797d76df;  immval:0x2c
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x44dcda6a797d76df, 0x2c, x3, 400, x4)

inst_73:
// imm_val == 0x18 and rs1_val == 0x0B27C3726F2BF862 
// opcode: rori ; op1:x10; dest:x11; op1val:0xb27c3726f2bf862;  immval:0x18
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xb27c3726f2bf862, 0x18, x3, 408, x4)

inst_74:
// imm_val == 0x01 and rs1_val == 0x20D68CEC58FC0342 
// opcode: rori ; op1:x10; dest:x11; op1val:0x20d68cec58fc0342;  immval:0x1
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x20d68cec58fc0342, 0x1, x3, 416, x4)

inst_75:
// imm_val == 0x13 and rs1_val == 0x636A75E39A6DA5B1 
// opcode: rori ; op1:x10; dest:x11; op1val:0x636a75e39a6da5b1;  immval:0x13
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x636a75e39a6da5b1, 0x13, x3, 424, x4)

inst_76:
// imm_val == 0x37 and rs1_val == 0x37E0DE00280088DB 
// opcode: rori ; op1:x10; dest:x11; op1val:0x37e0de00280088db;  immval:0x37
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x37e0de00280088db, 0x37, x3, 432, x4)

inst_77:
// imm_val == 0x0F and rs1_val == 0x1CA7BD1F0D770F3C 
// opcode: rori ; op1:x10; dest:x11; op1val:0x1ca7bd1f0d770f3c;  immval:0xf
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x1ca7bd1f0d770f3c, 0xf, x3, 440, x4)

inst_78:
// imm_val == 0x1F and rs1_val == 0x5536B8D863C2504C 
// opcode: rori ; op1:x10; dest:x11; op1val:0x5536b8d863c2504c;  immval:0x1f
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x5536b8d863c2504c, 0x1f, x3, 448, x4)

inst_79:
// imm_val == 0x3F and rs1_val == 0x4E6EE408C61B1FBF 
// opcode: rori ; op1:x10; dest:x11; op1val:0x4e6ee408c61b1fbf;  immval:0x3f
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x4e6ee408c61b1fbf, 0x3f, x3, 456, x4)

inst_80:
// rs1_val == 0xC215E193118E5332 and imm_val == 0x05 
// opcode: rori ; op1:x10; dest:x11; op1val:0xc215e193118e5332;  immval:0x5
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xc215e193118e5332, 0x5, x3, 464, x4)

inst_81:
// rs1_val == 0x75EE935F65CB60C1 and imm_val == 0x0B 
// opcode: rori ; op1:x10; dest:x11; op1val:0x75ee935f65cb60c1;  immval:0xb
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x75ee935f65cb60c1, 0xb, x3, 472, x4)

inst_82:
// rs1_val == 0x09C161626CE859BB and imm_val == 0x28 
// opcode: rori ; op1:x10; dest:x11; op1val:0x9c161626ce859bb;  immval:0x28
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x9c161626ce859bb, 0x28, x3, 480, x4)

inst_83:
// rs1_val == 0xA4053175342F57C7 and imm_val == 0x2C 
// opcode: rori ; op1:x10; dest:x11; op1val:0xa4053175342f57c7;  immval:0x2c
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xa4053175342f57c7, 0x2c, x3, 488, x4)

inst_84:
// rs1_val == 0x499006C897933E6F and imm_val == 0x36 
// opcode: rori ; op1:x10; dest:x11; op1val:0x499006c897933e6f;  immval:0x36
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x499006c897933e6f, 0x36, x3, 496, x4)

inst_85:
// rs1_val == 0xC5DD85CA5B064A1F and imm_val == 0x1F 
// opcode: rori ; op1:x10; dest:x11; op1val:0xc5dd85ca5b064a1f;  immval:0x1f
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xc5dd85ca5b064a1f, 0x1f, x3, 504, x4)

inst_86:
// rs1_val == 0x6CC30F7242302B3F and imm_val == 0x1E 
// opcode: rori ; op1:x10; dest:x11; op1val:0x6cc30f7242302b3f;  immval:0x1e
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x6cc30f7242302b3f, 0x1e, x3, 512, x4)

inst_87:
// rs1_val == 0xAF1DBF276CE4747F and imm_val == 0x1B 
// opcode: rori ; op1:x10; dest:x11; op1val:0xaf1dbf276ce4747f;  immval:0x1b
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xaf1dbf276ce4747f, 0x1b, x3, 520, x4)

inst_88:
// rs1_val == 0x25784F4FBD0608FF and imm_val == 0x21 
// opcode: rori ; op1:x10; dest:x11; op1val:0x25784f4fbd0608ff;  immval:0x21
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x25784f4fbd0608ff, 0x21, x3, 528, x4)

inst_89:
// rs1_val == 0x805A391B604C85FF and imm_val == 0x14 
// opcode: rori ; op1:x10; dest:x11; op1val:0x805a391b604c85ff;  immval:0x14
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x805a391b604c85ff, 0x14, x3, 536, x4)

inst_90:
// rs1_val == 0xCC7EB77D4BEB1BFF and imm_val == 0x04 
// opcode: rori ; op1:x10; dest:x11; op1val:0xcc7eb77d4beb1bff;  immval:0x4
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xcc7eb77d4beb1bff, 0x4, x3, 544, x4)

inst_91:
// rs1_val == 0xAB647BCA3919F7FF and imm_val == 0x1A 
// opcode: rori ; op1:x10; dest:x11; op1val:0xab647bca3919f7ff;  immval:0x1a
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xab647bca3919f7ff, 0x1a, x3, 552, x4)

inst_92:
// rs1_val == 0x7F1E7F8627B22FFF and imm_val == 0x3C 
// opcode: rori ; op1:x10; dest:x11; op1val:0x7f1e7f8627b22fff;  immval:0x3c
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x7f1e7f8627b22fff, 0x3c, x3, 560, x4)

inst_93:
// rs1_val == 0x51D6D6DA01769FFF and imm_val == 0x2A 
// opcode: rori ; op1:x10; dest:x11; op1val:0x51d6d6da01769fff;  immval:0x2a
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x51d6d6da01769fff, 0x2a, x3, 568, x4)

inst_94:
// rs1_val == 0xD5A2038FDA04BFFF and imm_val == 0x04 
// opcode: rori ; op1:x10; dest:x11; op1val:0xd5a2038fda04bfff;  immval:0x4
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xd5a2038fda04bfff, 0x4, x3, 576, x4)

inst_95:
// rs1_val == 0x784ABEBBF03B7FFF and imm_val == 0x2E 
// opcode: rori ; op1:x10; dest:x11; op1val:0x784abebbf03b7fff;  immval:0x2e
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x784abebbf03b7fff, 0x2e, x3, 584, x4)

inst_96:
// rs1_val == 0x44D988FBE81EFFFF and imm_val == 0x09 
// opcode: rori ; op1:x10; dest:x11; op1val:0x44d988fbe81effff;  immval:0x9
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x44d988fbe81effff, 0x9, x3, 592, x4)

inst_97:
// rs1_val == 0x6875944E1F19FFFF and imm_val == 0x26 
// opcode: rori ; op1:x10; dest:x11; op1val:0x6875944e1f19ffff;  immval:0x26
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x6875944e1f19ffff, 0x26, x3, 600, x4)

inst_98:
// rs1_val == 0xFF7746E52063FFFF and imm_val == 0x27 
// opcode: rori ; op1:x10; dest:x11; op1val:0xff7746e52063ffff;  immval:0x27
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xff7746e52063ffff, 0x27, x3, 608, x4)

inst_99:
// rs1_val == 0x17B8B123A527FFFF and imm_val == 0x00 
// opcode: rori ; op1:x10; dest:x11; op1val:0x17b8b123a527ffff;  immval:0x0
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x17b8b123a527ffff, 0x0, x3, 616, x4)

inst_100:
// rs1_val == 0x70890268F88FFFFF and imm_val == 0x2B 
// opcode: rori ; op1:x10; dest:x11; op1val:0x70890268f88fffff;  immval:0x2b
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x70890268f88fffff, 0x2b, x3, 624, x4)

inst_101:
// rs1_val == 0x6DDC74E6119FFFFF and imm_val == 0x04 
// opcode: rori ; op1:x10; dest:x11; op1val:0x6ddc74e6119fffff;  immval:0x4
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x6ddc74e6119fffff, 0x4, x3, 632, x4)

inst_102:
// rs1_val == 0x39BE2172E6BFFFFF and imm_val == 0x15 
// opcode: rori ; op1:x10; dest:x11; op1val:0x39be2172e6bfffff;  immval:0x15
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x39be2172e6bfffff, 0x15, x3, 640, x4)

inst_103:
// rs1_val == 0xC99324582A7FFFFF and imm_val == 0x0E 
// opcode: rori ; op1:x10; dest:x11; op1val:0xc99324582a7fffff;  immval:0xe
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xc99324582a7fffff, 0xe, x3, 648, x4)

inst_104:
// rs1_val == 0x4B9A6C802EFFFFFF and imm_val == 0x18 
// opcode: rori ; op1:x10; dest:x11; op1val:0x4b9a6c802effffff;  immval:0x18
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x4b9a6c802effffff, 0x18, x3, 656, x4)

inst_105:
// rs1_val == 0x9541240E59FFFFFF and imm_val == 0x2B 
// opcode: rori ; op1:x10; dest:x11; op1val:0x9541240e59ffffff;  immval:0x2b
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x9541240e59ffffff, 0x2b, x3, 664, x4)

inst_106:
// rs1_val == 0xB3A8D61293FFFFFF and imm_val == 0x04 
// opcode: rori ; op1:x10; dest:x11; op1val:0xb3a8d61293ffffff;  immval:0x4
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xb3a8d61293ffffff, 0x4, x3, 672, x4)

inst_107:
// rs1_val == 0x9E03793FD7FFFFFF and imm_val == 0x05 
// opcode: rori ; op1:x10; dest:x11; op1val:0x9e03793fd7ffffff;  immval:0x5
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x9e03793fd7ffffff, 0x5, x3, 680, x4)

inst_108:
// rs1_val == 0x7F1071ECAFFFFFFF and imm_val == 0x1B 
// opcode: rori ; op1:x10; dest:x11; op1val:0x7f1071ecafffffff;  immval:0x1b
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x7f1071ecafffffff, 0x1b, x3, 688, x4)

inst_109:
// rs1_val == 0xF8A75516DFFFFFFF and imm_val == 0x1E 
// opcode: rori ; op1:x10; dest:x11; op1val:0xf8a75516dfffffff;  immval:0x1e
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xf8a75516dfffffff, 0x1e, x3, 696, x4)

inst_110:
// rs1_val == 0xB76D454DBFFFFFFF and imm_val == 0x11 
// opcode: rori ; op1:x10; dest:x11; op1val:0xb76d454dbfffffff;  immval:0x11
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xb76d454dbfffffff, 0x11, x3, 704, x4)

inst_111:
// rs1_val == 0xB494A73D7FFFFFFF and imm_val == 0x2F 
// opcode: rori ; op1:x10; dest:x11; op1val:0xb494a73d7fffffff;  immval:0x2f
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xb494a73d7fffffff, 0x2f, x3, 712, x4)

inst_112:
// rs1_val == 0xC28CB594FFFFFFFF and imm_val == 0x2C 
// opcode: rori ; op1:x10; dest:x11; op1val:0xc28cb594ffffffff;  immval:0x2c
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xc28cb594ffffffff, 0x2c, x3, 720, x4)

inst_113:
// rs1_val == 0x69DA8A2DFFFFFFFF and imm_val == 0x20 
// opcode: rori ; op1:x10; dest:x11; op1val:0x69da8a2dffffffff;  immval:0x20
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x69da8a2dffffffff, 0x20, x3, 728, x4)

inst_114:
// rs1_val == 0x40F27003FFFFFFFF and imm_val == 0x14 
// opcode: rori ; op1:x10; dest:x11; op1val:0x40f27003ffffffff;  immval:0x14
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x40f27003ffffffff, 0x14, x3, 736, x4)

inst_115:
// rs1_val == 0xB2B8AF97FFFFFFFF and imm_val == 0x38 
// opcode: rori ; op1:x10; dest:x11; op1val:0xb2b8af97ffffffff;  immval:0x38
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xb2b8af97ffffffff, 0x38, x3, 744, x4)

inst_116:
// rs1_val == 0x24496FEFFFFFFFFF and imm_val == 0x3F 
// opcode: rori ; op1:x10; dest:x11; op1val:0x24496fefffffffff;  immval:0x3f
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x24496fefffffffff, 0x3f, x3, 752, x4)

inst_117:
// rs1_val == 0xDE14BFDFFFFFFFFF and imm_val == 0x05 
// opcode: rori ; op1:x10; dest:x11; op1val:0xde14bfdfffffffff;  immval:0x5
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xde14bfdfffffffff, 0x5, x3, 760, x4)

inst_118:
// rs1_val == 0x008EEF3FFFFFFFFF and imm_val == 0x36 
// opcode: rori ; op1:x10; dest:x11; op1val:0x8eef3fffffffff;  immval:0x36
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x8eef3fffffffff, 0x36, x3, 768, x4)

inst_119:
// rs1_val == 0x6E2D707FFFFFFFFF and imm_val == 0x3B 
// opcode: rori ; op1:x10; dest:x11; op1val:0x6e2d707fffffffff;  immval:0x3b
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x6e2d707fffffffff, 0x3b, x3, 776, x4)

inst_120:
// rs1_val == 0x5DCF00FFFFFFFFFF and imm_val == 0x10 
// opcode: rori ; op1:x10; dest:x11; op1val:0x5dcf00ffffffffff;  immval:0x10
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x5dcf00ffffffffff, 0x10, x3, 784, x4)

inst_121:
// rs1_val == 0x3C5569FFFFFFFFFF and imm_val == 0x18 
// opcode: rori ; op1:x10; dest:x11; op1val:0x3c5569ffffffffff;  immval:0x18
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x3c5569ffffffffff, 0x18, x3, 792, x4)

inst_122:
// rs1_val == 0x7DA8D3FFFFFFFFFF and imm_val == 0x1E 
// opcode: rori ; op1:x10; dest:x11; op1val:0x7da8d3ffffffffff;  immval:0x1e
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x7da8d3ffffffffff, 0x1e, x3, 800, x4)

inst_123:
// rs1_val == 0xE3A707FFFFFFFFFF and imm_val == 0x10 
// opcode: rori ; op1:x10; dest:x11; op1val:0xe3a707ffffffffff;  immval:0x10
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xe3a707ffffffffff, 0x10, x3, 808, x4)

inst_124:
// rs1_val == 0x9B01EFFFFFFFFFFF and imm_val == 0x23 
// opcode: rori ; op1:x10; dest:x11; op1val:0x9b01efffffffffff;  immval:0x23
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x9b01efffffffffff, 0x23, x3, 816, x4)

inst_125:
// rs1_val == 0x5F011FFFFFFFFFFF and imm_val == 0x3A 
// opcode: rori ; op1:x10; dest:x11; op1val:0x5f011fffffffffff;  immval:0x3a
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x5f011fffffffffff, 0x3a, x3, 824, x4)

inst_126:
// rs1_val == 0x2DEDBFFFFFFFFFFF and imm_val == 0x2D 
// opcode: rori ; op1:x10; dest:x11; op1val:0x2dedbfffffffffff;  immval:0x2d
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x2dedbfffffffffff, 0x2d, x3, 832, x4)

inst_127:
// rs1_val == 0x2D377FFFFFFFFFFF and imm_val == 0x25 
// opcode: rori ; op1:x10; dest:x11; op1val:0x2d377fffffffffff;  immval:0x25
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x2d377fffffffffff, 0x25, x3, 840, x4)

inst_128:
// rs1_val == 0xAD44FFFFFFFFFFFF and imm_val == 0x38 
// opcode: rori ; op1:x10; dest:x11; op1val:0xad44ffffffffffff;  immval:0x38
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xad44ffffffffffff, 0x38, x3, 848, x4)

inst_129:
// rs1_val == 0x72C9FFFFFFFFFFFF and imm_val == 0x11 
// opcode: rori ; op1:x10; dest:x11; op1val:0x72c9ffffffffffff;  immval:0x11
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x72c9ffffffffffff, 0x11, x3, 856, x4)

inst_130:
// rs1_val == 0xD1D3FFFFFFFFFFFF and imm_val == 0x21 
// opcode: rori ; op1:x10; dest:x11; op1val:0xd1d3ffffffffffff;  immval:0x21
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xd1d3ffffffffffff, 0x21, x3, 864, x4)

inst_131:
// rs1_val == 0x5057FFFFFFFFFFFF and imm_val == 0x0F 
// opcode: rori ; op1:x10; dest:x11; op1val:0x5057ffffffffffff;  immval:0xf
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x5057ffffffffffff, 0xf, x3, 872, x4)

inst_132:
// rs1_val == 0x5D2FFFFFFFFFFFFF and imm_val == 0x37 
// opcode: rori ; op1:x10; dest:x11; op1val:0x5d2fffffffffffff;  immval:0x37
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x5d2fffffffffffff, 0x37, x3, 880, x4)

inst_133:
// rs1_val == 0xE5DFFFFFFFFFFFFF and imm_val == 0x36 
// opcode: rori ; op1:x10; dest:x11; op1val:0xe5dfffffffffffff;  immval:0x36
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xe5dfffffffffffff, 0x36, x3, 888, x4)

inst_134:
// rs1_val == 0xD9BFFFFFFFFFFFFF and imm_val == 0x1D 
// opcode: rori ; op1:x10; dest:x11; op1val:0xd9bfffffffffffff;  immval:0x1d
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xd9bfffffffffffff, 0x1d, x3, 896, x4)

inst_135:
// rs1_val == 0x237FFFFFFFFFFFFF and imm_val == 0x20 
// opcode: rori ; op1:x10; dest:x11; op1val:0x237fffffffffffff;  immval:0x20
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x237fffffffffffff, 0x20, x3, 904, x4)

inst_136:
// rs1_val == 0x72FFFFFFFFFFFFFF and imm_val == 0x37 
// opcode: rori ; op1:x10; dest:x11; op1val:0x72ffffffffffffff;  immval:0x37
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x72ffffffffffffff, 0x37, x3, 912, x4)

inst_137:
// rs1_val == 0xDDFFFFFFFFFFFFFF and imm_val == 0x21 
// opcode: rori ; op1:x10; dest:x11; op1val:0xddffffffffffffff;  immval:0x21
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xddffffffffffffff, 0x21, x3, 920, x4)

inst_138:
// rs1_val == 0x43FFFFFFFFFFFFFF and imm_val == 0x12 
// opcode: rori ; op1:x10; dest:x11; op1val:0x43ffffffffffffff;  immval:0x12
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x43ffffffffffffff, 0x12, x3, 928, x4)

inst_139:
// rs1_val == 0x27FFFFFFFFFFFFFF and imm_val == 0x01 
// opcode: rori ; op1:x10; dest:x11; op1val:0x27ffffffffffffff;  immval:0x1
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x27ffffffffffffff, 0x1, x3, 936, x4)

inst_140:
// rs1_val == 0x4FFFFFFFFFFFFFFF and imm_val == 0x03 
// opcode: rori ; op1:x10; dest:x11; op1val:0x4fffffffffffffff;  immval:0x3
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x4fffffffffffffff, 0x3, x3, 944, x4)

inst_141:
// rs1_val == 0x1FFFFFFFFFFFFFFF and imm_val == 0x1B 
// opcode: rori ; op1:x10; dest:x11; op1val:0x1fffffffffffffff;  immval:0x1b
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x1fffffffffffffff, 0x1b, x3, 952, x4)

inst_142:
// rs1_val == 0x3FFFFFFFFFFFFFFF and imm_val == 0x17 
// opcode: rori ; op1:x10; dest:x11; op1val:0x3fffffffffffffff;  immval:0x17
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x3fffffffffffffff, 0x17, x3, 960, x4)

inst_143:
// rs1_val == 0x7FFFFFFFFFFFFFFF and imm_val == 0x12 
// opcode: rori ; op1:x10; dest:x11; op1val:0x7fffffffffffffff;  immval:0x12
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x7fffffffffffffff, 0x12, x3, 968, x4)

inst_144:
// rs1_val == 0xFFFFFFFFFFFFFFFF and imm_val == 0x17 
// opcode: rori ; op1:x10; dest:x11; op1val:0xffffffffffffffff;  immval:0x17
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xffffffffffffffff, 0x17, x3, 976, x4)

inst_145:
// imm_val == 0x22 and rs1_val == 0xF91ACB8D9279B1E9 
// opcode: rori ; op1:x10; dest:x11; op1val:0xf91acb8d9279b1e9;  immval:0x22
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xf91acb8d9279b1e9, 0x22, x3, 984, x4)

inst_146:
// imm_val == 0x13 and rs1_val == 0x482EA7602D1EF7BF 
// opcode: rori ; op1:x10; dest:x11; op1val:0x482ea7602d1ef7bf;  immval:0x13
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x482ea7602d1ef7bf, 0x13, x3, 992, x4)

inst_147:
// imm_val == 0x0B and rs1_val == 0x3FC2A9087219C1DA 
// opcode: rori ; op1:x10; dest:x11; op1val:0x3fc2a9087219c1da;  immval:0xb
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x3fc2a9087219c1da, 0xb, x3, 1000, x4)

inst_148:
// imm_val == 0x04 and rs1_val == 0x11B41900043E3EF5 
// opcode: rori ; op1:x10; dest:x11; op1val:0x11b41900043e3ef5;  immval:0x4
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x11b41900043e3ef5, 0x4, x3, 1008, x4)

inst_149:
// imm_val == 0x02 and rs1_val == 0xEA3A0683EAD81DCD 
// opcode: rori ; op1:x10; dest:x11; op1val:0xea3a0683ead81dcd;  immval:0x2
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xea3a0683ead81dcd, 0x2, x3, 1016, x4)

inst_150:
// imm_val == 0x01 and rs1_val == 0x12FAD8029D42F670 
// opcode: rori ; op1:x10; dest:x11; op1val:0x12fad8029d42f670;  immval:0x1
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x12fad8029d42f670, 0x1, x3, 1024, x4)

inst_151:
// imm_val == 0x00 and rs1_val == 0xFA285A0DB869135C 
// opcode: rori ; op1:x10; dest:x11; op1val:0xfa285a0db869135c;  immval:0x0
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xfa285a0db869135c, 0x0, x3, 1032, x4)

inst_152:
// rs1_val == 0x852395744B1E943F and imm_val == 0x16 
// opcode: rori ; op1:x10; dest:x11; op1val:0x852395744b1e943f;  immval:0x16
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x852395744b1e943f, 0x16, x3, 1040, x4)

inst_153:
// rs1_val == 0x6BBA8D2141C9886F and imm_val == 0x3E 
// opcode: rori ; op1:x10; dest:x11; op1val:0x6bba8d2141c9886f;  immval:0x3e
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x6bba8d2141c9886f, 0x3e, x3, 1048, x4)

inst_154:
// rs1_val == 0x3D65693B3D0840FC and imm_val == 0x32 
// opcode: rori ; op1:x10; dest:x11; op1val:0x3d65693b3d0840fc;  immval:0x32
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x3d65693b3d0840fc, 0x32, x3, 1056, x4)

inst_155:
// rs1_val == 0x19E803191BEA8594 and imm_val == 0x20 
// opcode: rori ; op1:x10; dest:x11; op1val:0x19e803191bea8594;  immval:0x20
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x19e803191bea8594, 0x20, x3, 1064, x4)

inst_156:
// rs1_val == 0x0C2282666BE49EE8 and imm_val == 0x0D 
// opcode: rori ; op1:x10; dest:x11; op1val:0xc2282666be49ee8;  immval:0xd
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xc2282666be49ee8, 0xd, x3, 1072, x4)

inst_157:
// rs1_val == 0x07862EACE1D73010 and imm_val == 0x0A 
// opcode: rori ; op1:x10; dest:x11; op1val:0x7862eace1d73010;  immval:0xa
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x7862eace1d73010, 0xa, x3, 1080, x4)

inst_158:
// rs1_val == 0x033C1A7FAFDD8734 and imm_val == 0x31 
// opcode: rori ; op1:x10; dest:x11; op1val:0x33c1a7fafdd8734;  immval:0x31
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x33c1a7fafdd8734, 0x31, x3, 1088, x4)

inst_159:
// rs1_val == 0x0104A795BD4AEAB1 and imm_val == 0x19 
// opcode: rori ; op1:x10; dest:x11; op1val:0x104a795bd4aeab1;  immval:0x19
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x104a795bd4aeab1, 0x19, x3, 1096, x4)

inst_160:
// rs1_val == 0x0096C6C8B9B338EC and imm_val == 0x14 
// opcode: rori ; op1:x10; dest:x11; op1val:0x96c6c8b9b338ec;  immval:0x14
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x96c6c8b9b338ec, 0x14, x3, 1104, x4)

inst_161:
// rs1_val == 0x00775505E88E7530 and imm_val == 0x1F 
// opcode: rori ; op1:x10; dest:x11; op1val:0x775505e88e7530;  immval:0x1f
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x775505e88e7530, 0x1f, x3, 1112, x4)

inst_162:
// rs1_val == 0x00356991A0931ED5 and imm_val == 0x27 
// opcode: rori ; op1:x10; dest:x11; op1val:0x356991a0931ed5;  immval:0x27
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x356991a0931ed5, 0x27, x3, 1120, x4)

inst_163:
// rs1_val == 0x00174145DDD4A055 and imm_val == 0x17 
// opcode: rori ; op1:x10; dest:x11; op1val:0x174145ddd4a055;  immval:0x17
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x174145ddd4a055, 0x17, x3, 1128, x4)

inst_164:
// rs1_val == 0x000F19FDD5157E9E and imm_val == 0x11 
// opcode: rori ; op1:x10; dest:x11; op1val:0xf19fdd5157e9e;  immval:0x11
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xf19fdd5157e9e, 0x11, x3, 1136, x4)

inst_165:
// rs1_val == 0x0005D99A20918FA8 and imm_val == 0x3D 
// opcode: rori ; op1:x10; dest:x11; op1val:0x5d99a20918fa8;  immval:0x3d
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x5d99a20918fa8, 0x3d, x3, 1144, x4)

inst_166:
// rs1_val == 0x00032C075F27FF09 and imm_val == 0x3A 
// opcode: rori ; op1:x10; dest:x11; op1val:0x32c075f27ff09;  immval:0x3a
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x32c075f27ff09, 0x3a, x3, 1152, x4)

inst_167:
// rs1_val == 0x0001BCE703F8670E and imm_val == 0x2F 
// opcode: rori ; op1:x10; dest:x11; op1val:0x1bce703f8670e;  immval:0x2f
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x1bce703f8670e, 0x2f, x3, 1160, x4)

inst_168:
// rs1_val == 0x00009B8B356F8BD2 and imm_val == 0x1F 
// opcode: rori ; op1:x10; dest:x11; op1val:0x9b8b356f8bd2;  immval:0x1f
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x9b8b356f8bd2, 0x1f, x3, 1168, x4)

inst_169:
// rs1_val == 0x0000545212CA3F71 and imm_val == 0x0B 
// opcode: rori ; op1:x10; dest:x11; op1val:0x545212ca3f71;  immval:0xb
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x545212ca3f71, 0xb, x3, 1176, x4)

inst_170:
// rs1_val == 0x00003090D48DD9F4 and imm_val == 0x31 
// opcode: rori ; op1:x10; dest:x11; op1val:0x3090d48dd9f4;  immval:0x31
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x3090d48dd9f4, 0x31, x3, 1184, x4)

inst_171:
// rs1_val == 0x00001DD8027385CA and imm_val == 0x2A 
// opcode: rori ; op1:x10; dest:x11; op1val:0x1dd8027385ca;  immval:0x2a
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x1dd8027385ca, 0x2a, x3, 1192, x4)

inst_172:
// rs1_val == 0x0000082236971E1C and imm_val == 0x21 
// opcode: rori ; op1:x10; dest:x11; op1val:0x82236971e1c;  immval:0x21
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x82236971e1c, 0x21, x3, 1200, x4)

inst_173:
// rs1_val == 0x000004440AC793F6 and imm_val == 0x12 
// opcode: rori ; op1:x10; dest:x11; op1val:0x4440ac793f6;  immval:0x12
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x4440ac793f6, 0x12, x3, 1208, x4)

inst_174:
// rs1_val == 0x000003D5FEEF16EA and imm_val == 0x0C 
// opcode: rori ; op1:x10; dest:x11; op1val:0x3d5feef16ea;  immval:0xc
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x3d5feef16ea, 0xc, x3, 1216, x4)

inst_175:
// rs1_val == 0x0000010735F11AF3 and imm_val == 0x32 
// opcode: rori ; op1:x10; dest:x11; op1val:0x10735f11af3;  immval:0x32
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x10735f11af3, 0x32, x3, 1224, x4)

inst_176:
// rs1_val == 0x000000ACFF769E38 and imm_val == 0x02 
// opcode: rori ; op1:x10; dest:x11; op1val:0xacff769e38;  immval:0x2
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xacff769e38, 0x2, x3, 1232, x4)

inst_177:
// rs1_val == 0x000000764511488A and imm_val == 0x26 
// opcode: rori ; op1:x10; dest:x11; op1val:0x764511488a;  immval:0x26
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x764511488a, 0x26, x3, 1240, x4)

inst_178:
// rs1_val == 0x0000002DFD74106A and imm_val == 0x00 
// opcode: rori ; op1:x10; dest:x11; op1val:0x2dfd74106a;  immval:0x0
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x2dfd74106a, 0x0, x3, 1248, x4)

inst_179:
// rs1_val == 0x000000101DD377C0 and imm_val == 0x35 
// opcode: rori ; op1:x10; dest:x11; op1val:0x101dd377c0;  immval:0x35
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x101dd377c0, 0x35, x3, 1256, x4)

inst_180:
// rs1_val == 0x0000000A6B52B08E and imm_val == 0x31 
// opcode: rori ; op1:x10; dest:x11; op1val:0xa6b52b08e;  immval:0x31
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xa6b52b08e, 0x31, x3, 1264, x4)

inst_181:
// rs1_val == 0x00000004FC3B66FB and imm_val == 0x10 
// opcode: rori ; op1:x10; dest:x11; op1val:0x4fc3b66fb;  immval:0x10
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x4fc3b66fb, 0x10, x3, 1272, x4)

inst_182:
// rs1_val == 0x00000002728A6FD0 and imm_val == 0x18 
// opcode: rori ; op1:x10; dest:x11; op1val:0x2728a6fd0;  immval:0x18
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x2728a6fd0, 0x18, x3, 1280, x4)

inst_183:
// rs1_val == 0x00000001AE9CA08C and imm_val == 0x18 
// opcode: rori ; op1:x10; dest:x11; op1val:0x1ae9ca08c;  immval:0x18
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x1ae9ca08c, 0x18, x3, 1288, x4)

inst_184:
// rs1_val == 0x00000000CC099A1F and imm_val == 0x16 
// opcode: rori ; op1:x10; dest:x11; op1val:0xcc099a1f;  immval:0x16
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xcc099a1f, 0x16, x3, 1296, x4)

inst_185:
// rs1_val == 0x0000000042CDF2B0 and imm_val == 0x3B 
// opcode: rori ; op1:x10; dest:x11; op1val:0x42cdf2b0;  immval:0x3b
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x42cdf2b0, 0x3b, x3, 1304, x4)

inst_186:
// rs1_val == 0x000000002274EA19 and imm_val == 0x0C 
// opcode: rori ; op1:x10; dest:x11; op1val:0x2274ea19;  immval:0xc
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x2274ea19, 0xc, x3, 1312, x4)

inst_187:
// rs1_val == 0x00000000120EF165 and imm_val == 0x0F 
// opcode: rori ; op1:x10; dest:x11; op1val:0x120ef165;  immval:0xf
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x120ef165, 0xf, x3, 1320, x4)

inst_188:
// rs1_val == 0x000000000D2454F2 and imm_val == 0x34 
// opcode: rori ; op1:x10; dest:x11; op1val:0xd2454f2;  immval:0x34
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xd2454f2, 0x34, x3, 1328, x4)

inst_189:
// rs1_val == 0x00000000063E9BEE and imm_val == 0x27 
// opcode: rori ; op1:x10; dest:x11; op1val:0x63e9bee;  immval:0x27
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x63e9bee, 0x27, x3, 1336, x4)

inst_190:
// rs1_val == 0x00000000034C7CD0 and imm_val == 0x22 
// opcode: rori ; op1:x10; dest:x11; op1val:0x34c7cd0;  immval:0x22
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x34c7cd0, 0x22, x3, 1344, x4)

inst_191:
// rs1_val == 0x0000000001777310 and imm_val == 0x19 
// opcode: rori ; op1:x10; dest:x11; op1val:0x1777310;  immval:0x19
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x1777310, 0x19, x3, 1352, x4)

inst_192:
// rs1_val == 0x0000000000D11609 and imm_val == 0x32 
// opcode: rori ; op1:x10; dest:x11; op1val:0xd11609;  immval:0x32
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xd11609, 0x32, x3, 1360, x4)

inst_193:
// rs1_val == 0x0000000000680BE0 and imm_val == 0x06 
// opcode: rori ; op1:x10; dest:x11; op1val:0x680be0;  immval:0x6
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x680be0, 0x6, x3, 1368, x4)

inst_194:
// rs1_val == 0x0000000000294B16 and imm_val == 0x00 
// opcode: rori ; op1:x10; dest:x11; op1val:0x294b16;  immval:0x0
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x294b16, 0x0, x3, 1376, x4)

inst_195:
// rs1_val == 0x0000000000128D1B and imm_val == 0x02 
// opcode: rori ; op1:x10; dest:x11; op1val:0x128d1b;  immval:0x2
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x128d1b, 0x2, x3, 1384, x4)

inst_196:
// rs1_val == 0x0000000000089A12 and imm_val == 0x25 
// opcode: rori ; op1:x10; dest:x11; op1val:0x89a12;  immval:0x25
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x89a12, 0x25, x3, 1392, x4)

inst_197:
// rs1_val == 0x000000000005D25B and imm_val == 0x0D 
// opcode: rori ; op1:x10; dest:x11; op1val:0x5d25b;  immval:0xd
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x5d25b, 0xd, x3, 1400, x4)

inst_198:
// rs1_val == 0x000000000003A2C3 and imm_val == 0x24 
// opcode: rori ; op1:x10; dest:x11; op1val:0x3a2c3;  immval:0x24
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x3a2c3, 0x24, x3, 1408, x4)

inst_199:
// rs1_val == 0x00000000000102FD and imm_val == 0x28 
// opcode: rori ; op1:x10; dest:x11; op1val:0x102fd;  immval:0x28
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x102fd, 0x28, x3, 1416, x4)

inst_200:
// rs1_val == 0x000000000000A6B3 and imm_val == 0x0A 
// opcode: rori ; op1:x10; dest:x11; op1val:0xa6b3;  immval:0xa
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xa6b3, 0xa, x3, 1424, x4)

inst_201:
// rs1_val == 0x0000000000005238 and imm_val == 0x23 
// opcode: rori ; op1:x10; dest:x11; op1val:0x5238;  immval:0x23
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x5238, 0x23, x3, 1432, x4)

inst_202:
// rs1_val == 0x000000000000222A and imm_val == 0x0A 
// opcode: rori ; op1:x10; dest:x11; op1val:0x222a;  immval:0xa
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x222a, 0xa, x3, 1440, x4)

inst_203:
// rs1_val == 0x0000000000001161 and imm_val == 0x25 
// opcode: rori ; op1:x10; dest:x11; op1val:0x1161;  immval:0x25
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x1161, 0x25, x3, 1448, x4)

inst_204:
// rs1_val == 0x0000000000000DB9 and imm_val == 0x19 
// opcode: rori ; op1:x10; dest:x11; op1val:0xdb9;  immval:0x19
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xdb9, 0x19, x3, 1456, x4)

inst_205:
// rs1_val == 0x00000000000004C1 and imm_val == 0x29 
// opcode: rori ; op1:x10; dest:x11; op1val:0x4c1;  immval:0x29
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x4c1, 0x29, x3, 1464, x4)

inst_206:
// rs1_val == 0x0000000000000390 and imm_val == 0x03 
// opcode: rori ; op1:x10; dest:x11; op1val:0x390;  immval:0x3
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x390, 0x3, x3, 1472, x4)

inst_207:
// rs1_val == 0x00000000000001D4 and imm_val == 0x18 
// opcode: rori ; op1:x10; dest:x11; op1val:0x1d4;  immval:0x18
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x1d4, 0x18, x3, 1480, x4)

inst_208:
// rs1_val == 0x00000000000000A7 and imm_val == 0x08 
// opcode: rori ; op1:x10; dest:x11; op1val:0xa7;  immval:0x8
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xa7, 0x8, x3, 1488, x4)

inst_209:
// rs1_val == 0x0000000000000079 and imm_val == 0x14 
// opcode: rori ; op1:x10; dest:x11; op1val:0x79;  immval:0x14
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x79, 0x14, x3, 1496, x4)

inst_210:
// rs1_val == 0x000000000000002C and imm_val == 0x32 
// opcode: rori ; op1:x10; dest:x11; op1val:0x2c;  immval:0x32
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x2c, 0x32, x3, 1504, x4)

inst_211:
// rs1_val == 0x000000000000001D and imm_val == 0x05 
// opcode: rori ; op1:x10; dest:x11; op1val:0x1d;  immval:0x5
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x1d, 0x5, x3, 1512, x4)

inst_212:
// rs1_val == 0x000000000000000C and imm_val == 0x26 
// opcode: rori ; op1:x10; dest:x11; op1val:0xc;  immval:0x26
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xc, 0x26, x3, 1520, x4)

inst_213:
// rs1_val == 0x0000000000000006 and imm_val == 0x17 
// opcode: rori ; op1:x10; dest:x11; op1val:0x6;  immval:0x17
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x6, 0x17, x3, 1528, x4)

inst_214:
// rs1_val == 0x0000000000000003 and imm_val == 0x3C 
// opcode: rori ; op1:x10; dest:x11; op1val:0x3;  immval:0x3c
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x3, 0x3c, x3, 1536, x4)

inst_215:
// rs1_val == 0x0000000000000001 and imm_val == 0x18 
// opcode: rori ; op1:x10; dest:x11; op1val:0x1;  immval:0x18
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x1, 0x18, x3, 1544, x4)

inst_216:
// rs1_val == 0x0000000000000000 and imm_val == 0x3B 
// opcode: rori ; op1:x10; dest:x11; op1val:0x0;  immval:0x3b
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x0, 0x3b, x3, 1552, x4)

inst_217:
// imm_val == 0x1C and rs1_val == 0xFC7C6D0A352C006F 
// opcode: rori ; op1:x10; dest:x11; op1val:0xfc7c6d0a352c006f;  immval:0x1c
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xfc7c6d0a352c006f, 0x1c, x3, 1560, x4)

inst_218:
// imm_val == 0x2C and rs1_val == 0x976AD220146A3673 
// opcode: rori ; op1:x10; dest:x11; op1val:0x976ad220146a3673;  immval:0x2c
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x976ad220146a3673, 0x2c, x3, 1568, x4)

inst_219:
// imm_val == 0x37 and rs1_val == 0xFC6113A3312529DC 
// opcode: rori ; op1:x10; dest:x11; op1val:0xfc6113a3312529dc;  immval:0x37
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xfc6113a3312529dc, 0x37, x3, 1576, x4)

inst_220:
// imm_val == 0x3B and rs1_val == 0x242A809B7A3209FE 
// opcode: rori ; op1:x10; dest:x11; op1val:0x242a809b7a3209fe;  immval:0x3b
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x242a809b7a3209fe, 0x3b, x3, 1584, x4)

inst_221:
// imm_val == 0x3C and rs1_val == 0xE380A1764A104E66 
// opcode: rori ; op1:x10; dest:x11; op1val:0xe380a1764a104e66;  immval:0x3c
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xe380a1764a104e66, 0x3c, x3, 1592, x4)

inst_222:
// imm_val == 0x3E and rs1_val == 0xA0E0BD86D4551408 
// opcode: rori ; op1:x10; dest:x11; op1val:0xa0e0bd86d4551408;  immval:0x3e
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xa0e0bd86d4551408, 0x3e, x3, 1600, x4)

inst_223:
// imm_val == 0x3F and rs1_val == 0xAFE08A13086C1B78 
// opcode: rori ; op1:x10; dest:x11; op1val:0xafe08a13086c1b78;  immval:0x3f
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xafe08a13086c1b78, 0x3f, x3, 1608, x4)

inst_224:
// rs1_val == 0x3CC279B3BD59213F and imm_val == 0x29 
// opcode: rori ; op1:x10; dest:x11; op1val:0x3cc279b3bd59213f;  immval:0x29
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x3cc279b3bd59213f, 0x29, x3, 1616, x4)

inst_225:
// rs1_val == 0x941060376C5E1579 and imm_val == 0x13 
// opcode: rori ; op1:x10; dest:x11; op1val:0x941060376c5e1579;  immval:0x13
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0x941060376c5e1579, 0x13, x3, 1624, x4)

inst_226:
// rs1_val == 0xC9EA3210E5DF7F0B and imm_val == 0x3A 
// opcode: rori ; op1:x10; dest:x11; op1val:0xc9ea3210e5df7f0b;  immval:0x3a
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xc9ea3210e5df7f0b, 0x3a, x3, 1632, x4)

inst_227:
// rs1_val == 0xE9E93D5257DDE0F0 and imm_val == 0x21 
// opcode: rori ; op1:x10; dest:x11; op1val:0xe9e93d5257dde0f0;  immval:0x21
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xe9e93d5257dde0f0, 0x21, x3, 1640, x4)

inst_228:
// rs1_val == 0xF048E341C64C47E8 and imm_val == 0x39 
// opcode: rori ; op1:x10; dest:x11; op1val:0xf048e341c64c47e8;  immval:0x39
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xf048e341c64c47e8, 0x39, x3, 1648, x4)

inst_229:
// rs1_val == 0xF969730123A92480 and imm_val == 0x37 
// opcode: rori ; op1:x10; dest:x11; op1val:0xf969730123a92480;  immval:0x37
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xf969730123a92480, 0x37, x3, 1656, x4)

inst_230:
// rs1_val == 0xFC20CE1CD55D1CE8 and imm_val == 0x3E 
// opcode: rori ; op1:x10; dest:x11; op1val:0xfc20ce1cd55d1ce8;  immval:0x3e
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xfc20ce1cd55d1ce8, 0x3e, x3, 1664, x4)

inst_231:
// rs1_val == 0xFED775C526EA42ED and imm_val == 0x3A 
// opcode: rori ; op1:x10; dest:x11; op1val:0xfed775c526ea42ed;  immval:0x3a
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xfed775c526ea42ed, 0x3a, x3, 1672, x4)

inst_232:
// rs1_val == 0xFF01DFA30CF25924 and imm_val == 0x0B 
// opcode: rori ; op1:x10; dest:x11; op1val:0xff01dfa30cf25924;  immval:0xb
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xff01dfa30cf25924, 0xb, x3, 1680, x4)

inst_233:
// rs1_val == 0xFF912F0A7046AB61 and imm_val == 0x08 
// opcode: rori ; op1:x10; dest:x11; op1val:0xff912f0a7046ab61;  immval:0x8
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xff912f0a7046ab61, 0x8, x3, 1688, x4)

inst_234:
// rs1_val == 0xFFCA96C9D43DB43F and imm_val == 0x00 
// opcode: rori ; op1:x10; dest:x11; op1val:0xffca96c9d43db43f;  immval:0x0
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xffca96c9d43db43f, 0x0, x3, 1696, x4)

inst_235:
// rs1_val == 0xFFEB4B49194135A5 and imm_val == 0x35 
// opcode: rori ; op1:x10; dest:x11; op1val:0xffeb4b49194135a5;  immval:0x35
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xffeb4b49194135a5, 0x35, x3, 1704, x4)

inst_236:
// rs1_val == 0xFFF1A2ADB3A63FA4 and imm_val == 0x38 
// opcode: rori ; op1:x10; dest:x11; op1val:0xfff1a2adb3a63fa4;  immval:0x38
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xfff1a2adb3a63fa4, 0x38, x3, 1712, x4)

inst_237:
// rs1_val == 0xFFF8306E89E6156C and imm_val == 0x3E 
// opcode: rori ; op1:x10; dest:x11; op1val:0xfff8306e89e6156c;  immval:0x3e
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xfff8306e89e6156c, 0x3e, x3, 1720, x4)

inst_238:
// rs1_val == 0xFFFDA6CA22C13476 and imm_val == 0x2C 
// opcode: rori ; op1:x10; dest:x11; op1val:0xfffda6ca22c13476;  immval:0x2c
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xfffda6ca22c13476, 0x2c, x3, 1728, x4)

inst_239:
// rs1_val == 0xFFFE03B4AC9E9033 and imm_val == 0x33 
// opcode: rori ; op1:x10; dest:x11; op1val:0xfffe03b4ac9e9033;  immval:0x33
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xfffe03b4ac9e9033, 0x33, x3, 1736, x4)

inst_240:
// rs1_val == 0xFFFF3AD31011EEB5 and imm_val == 0x3E 
// opcode: rori ; op1:x10; dest:x11; op1val:0xffff3ad31011eeb5;  immval:0x3e
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xffff3ad31011eeb5, 0x3e, x3, 1744, x4)

inst_241:
// rs1_val == 0xFFFF90F48525E8A9 and imm_val == 0x3F 
// opcode: rori ; op1:x10; dest:x11; op1val:0xffff90f48525e8a9;  immval:0x3f
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xffff90f48525e8a9, 0x3f, x3, 1752, x4)

inst_242:
// rs1_val == 0xFFFFD6E6BC7F85E3 and imm_val == 0x22 
// opcode: rori ; op1:x10; dest:x11; op1val:0xffffd6e6bc7f85e3;  immval:0x22
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xffffd6e6bc7f85e3, 0x22, x3, 1760, x4)

inst_243:
// rs1_val == 0xFFFFE7F6AC60E057 and imm_val == 0x1E 
// opcode: rori ; op1:x10; dest:x11; op1val:0xffffe7f6ac60e057;  immval:0x1e
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xffffe7f6ac60e057, 0x1e, x3, 1768, x4)

inst_244:
// rs1_val == 0xFFFFF12863FD8180 and imm_val == 0x3F 
// opcode: rori ; op1:x10; dest:x11; op1val:0xfffff12863fd8180;  immval:0x3f
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xfffff12863fd8180, 0x3f, x3, 1776, x4)

inst_245:
// rs1_val == 0xFFFFFB5472B3CB0C and imm_val == 0x14 
// opcode: rori ; op1:x10; dest:x11; op1val:0xfffffb5472b3cb0c;  immval:0x14
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xfffffb5472b3cb0c, 0x14, x3, 1784, x4)

inst_246:
// rs1_val == 0xFFFFFD8D3E1C8522 and imm_val == 0x21 
// opcode: rori ; op1:x10; dest:x11; op1val:0xfffffd8d3e1c8522;  immval:0x21
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xfffffd8d3e1c8522, 0x21, x3, 1792, x4)

inst_247:
// rs1_val == 0xFFFFFE8F54E77CDC and imm_val == 0x28 
// opcode: rori ; op1:x10; dest:x11; op1val:0xfffffe8f54e77cdc;  immval:0x28
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xfffffe8f54e77cdc, 0x28, x3, 1800, x4)

inst_248:
// rs1_val == 0xFFFFFF048B7B5379 and imm_val == 0x05 
// opcode: rori ; op1:x10; dest:x11; op1val:0xffffff048b7b5379;  immval:0x5
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xffffff048b7b5379, 0x5, x3, 1808, x4)

inst_249:
// rs1_val == 0xFFFFFF856F4930C9 and imm_val == 0x00 
// opcode: rori ; op1:x10; dest:x11; op1val:0xffffff856f4930c9;  immval:0x0
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xffffff856f4930c9, 0x0, x3, 1816, x4)

inst_250:
// rs1_val == 0xFFFFFFDCC5D97467 and imm_val == 0x29 
// opcode: rori ; op1:x10; dest:x11; op1val:0xffffffdcc5d97467;  immval:0x29
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xffffffdcc5d97467, 0x29, x3, 1824, x4)

inst_251:
// rs1_val == 0xFFFFFFE5C70AFC93 and imm_val == 0x3D 
// opcode: rori ; op1:x10; dest:x11; op1val:0xffffffe5c70afc93;  immval:0x3d
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xffffffe5c70afc93, 0x3d, x3, 1832, x4)

inst_252:
// rs1_val == 0xFFFFFFF6A911655F and imm_val == 0x16 
// opcode: rori ; op1:x10; dest:x11; op1val:0xfffffff6a911655f;  immval:0x16
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xfffffff6a911655f, 0x16, x3, 1840, x4)

inst_253:
// rs1_val == 0xFFFFFFF974AB0A39 and imm_val == 0x15 
// opcode: rori ; op1:x10; dest:x11; op1val:0xfffffff974ab0a39;  immval:0x15
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xfffffff974ab0a39, 0x15, x3, 1848, x4)

inst_254:
// rs1_val == 0xFFFFFFFCDD68F202 and imm_val == 0x22 
// opcode: rori ; op1:x10; dest:x11; op1val:0xfffffffcdd68f202;  immval:0x22
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xfffffffcdd68f202, 0x22, x3, 1856, x4)

inst_255:
// rs1_val == 0xFFFFFFFE24BD4821 and imm_val == 0x16 
// opcode: rori ; op1:x10; dest:x11; op1val:0xfffffffe24bd4821;  immval:0x16
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xfffffffe24bd4821, 0x16, x3, 1864, x4)

inst_256:
// rs1_val == 0xFFFFFFFF3ED7E667 and imm_val == 0x23 
// opcode: rori ; op1:x10; dest:x11; op1val:0xffffffff3ed7e667;  immval:0x23
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xffffffff3ed7e667, 0x23, x3, 1872, x4)

inst_257:
// rs1_val == 0xFFFFFFFFB871CFDF and imm_val == 0x39 
// opcode: rori ; op1:x10; dest:x11; op1val:0xffffffffb871cfdf;  immval:0x39
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xffffffffb871cfdf, 0x39, x3, 1880, x4)

inst_258:
// rs1_val == 0xFFFFFFFFD29C11AE and imm_val == 0x37 
// opcode: rori ; op1:x10; dest:x11; op1val:0xffffffffd29c11ae;  immval:0x37
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xffffffffd29c11ae, 0x37, x3, 1888, x4)

inst_259:
// rs1_val == 0xFFFFFFFFE109799A and imm_val == 0x18 
// opcode: rori ; op1:x10; dest:x11; op1val:0xffffffffe109799a;  immval:0x18
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xffffffffe109799a, 0x18, x3, 1896, x4)

inst_260:
// rs1_val == 0xFFFFFFFFF4E80B13 and imm_val == 0x0C 
// opcode: rori ; op1:x10; dest:x11; op1val:0xfffffffff4e80b13;  immval:0xc
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xfffffffff4e80b13, 0xc, x3, 1904, x4)

inst_261:
// rs1_val == 0xFFFFFFFFF9B7EA62 and imm_val == 0x13 
// opcode: rori ; op1:x10; dest:x11; op1val:0xfffffffff9b7ea62;  immval:0x13
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xfffffffff9b7ea62, 0x13, x3, 1912, x4)

inst_262:
// rs1_val == 0xFFFFFFFFFC51F638 and imm_val == 0x2F 
// opcode: rori ; op1:x10; dest:x11; op1val:0xfffffffffc51f638;  immval:0x2f
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xfffffffffc51f638, 0x2f, x3, 1920, x4)

inst_263:
// rs1_val == 0xFFFFFFFFFE9263CF and imm_val == 0x0A 
// opcode: rori ; op1:x10; dest:x11; op1val:0xfffffffffe9263cf;  immval:0xa
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xfffffffffe9263cf, 0xa, x3, 1928, x4)

inst_264:
// rs1_val == 0xFFFFFFFFFF216823 and imm_val == 0x09 
// opcode: rori ; op1:x10; dest:x11; op1val:0xffffffffff216823;  immval:0x9
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xffffffffff216823, 0x9, x3, 1936, x4)

inst_265:
// rs1_val == 0xFFFFFFFFFF861438 and imm_val == 0x04 
// opcode: rori ; op1:x10; dest:x11; op1val:0xffffffffff861438;  immval:0x4
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xffffffffff861438, 0x4, x3, 1944, x4)

inst_266:
// rs1_val == 0xFFFFFFFFFFD8C9D0 and imm_val == 0x34 
// opcode: rori ; op1:x10; dest:x11; op1val:0xffffffffffd8c9d0;  immval:0x34
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xffffffffffd8c9d0, 0x34, x3, 1952, x4)

inst_267:
// rs1_val == 0xFFFFFFFFFFE4D576 and imm_val == 0x14 
// opcode: rori ; op1:x10; dest:x11; op1val:0xffffffffffe4d576;  immval:0x14
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xffffffffffe4d576, 0x14, x3, 1960, x4)

inst_268:
// rs1_val == 0xFFFFFFFFFFF18C67 and imm_val == 0x29 
// opcode: rori ; op1:x10; dest:x11; op1val:0xfffffffffff18c67;  immval:0x29
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xfffffffffff18c67, 0x29, x3, 1968, x4)

inst_269:
// rs1_val == 0xFFFFFFFFFFFBB998 and imm_val == 0x08 
// opcode: rori ; op1:x10; dest:x11; op1val:0xfffffffffffbb998;  immval:0x8
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xfffffffffffbb998, 0x8, x3, 1976, x4)

inst_270:
// rs1_val == 0xFFFFFFFFFFFC2561 and imm_val == 0x39 
// opcode: rori ; op1:x10; dest:x11; op1val:0xfffffffffffc2561;  immval:0x39
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xfffffffffffc2561, 0x39, x3, 1984, x4)

inst_271:
// rs1_val == 0xFFFFFFFFFFFEEAB5 and imm_val == 0x1E 
// opcode: rori ; op1:x10; dest:x11; op1val:0xfffffffffffeeab5;  immval:0x1e
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xfffffffffffeeab5, 0x1e, x3, 1992, x4)

inst_272:
// rs1_val == 0xFFFFFFFFFFFF0651 and imm_val == 0x26 
// opcode: rori ; op1:x10; dest:x11; op1val:0xffffffffffff0651;  immval:0x26
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xffffffffffff0651, 0x26, x3, 2000, x4)

inst_273:
// rs1_val == 0xFFFFFFFFFFFF90E4 and imm_val == 0x18 
// opcode: rori ; op1:x10; dest:x11; op1val:0xffffffffffff90e4;  immval:0x18
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xffffffffffff90e4, 0x18, x3, 2008, x4)

inst_274:
// rs1_val == 0xFFFFFFFFFFFFCA23 and imm_val == 0x00 
// opcode: rori ; op1:x10; dest:x11; op1val:0xffffffffffffca23;  immval:0x0
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xffffffffffffca23, 0x0, x3, 2016, x4)

inst_275:
// rs1_val == 0xFFFFFFFFFFFFE2A0 and imm_val == 0x30 
// opcode: rori ; op1:x10; dest:x11; op1val:0xffffffffffffe2a0;  immval:0x30
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xffffffffffffe2a0, 0x30, x3, 2024, x4)

inst_276:
// rs1_val == 0xFFFFFFFFFFFFF2CC and imm_val == 0x1E 
// opcode: rori ; op1:x10; dest:x11; op1val:0xfffffffffffff2cc;  immval:0x1e
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xfffffffffffff2cc, 0x1e, x3, 2032, x4)

inst_277:
// rs1_val == 0xFFFFFFFFFFFFFAB4 and imm_val == 0x11 
// opcode: rori ; op1:x10; dest:x11; op1val:0xfffffffffffffab4;  immval:0x11
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xfffffffffffffab4, 0x11, x3, 2040, x4)
RVTEST_SIGBASE( x3,signature_x3_1)

inst_278:
// rs1_val == 0xFFFFFFFFFFFFFCEE and imm_val == 0x26 
// opcode: rori ; op1:x10; dest:x11; op1val:0xfffffffffffffcee;  immval:0x26
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xfffffffffffffcee, 0x26, x3, 0, x4)

inst_279:
// rs1_val == 0xFFFFFFFFFFFFFE04 and imm_val == 0x21 
// opcode: rori ; op1:x10; dest:x11; op1val:0xfffffffffffffe04;  immval:0x21
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xfffffffffffffe04, 0x21, x3, 8, x4)

inst_280:
// rs1_val == 0xFFFFFFFFFFFFFF2A and imm_val == 0x30 
// opcode: rori ; op1:x10; dest:x11; op1val:0xffffffffffffff2a;  immval:0x30
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xffffffffffffff2a, 0x30, x3, 16, x4)

inst_281:
// rs1_val == 0xFFFFFFFFFFFFFF9D and imm_val == 0x11 
// opcode: rori ; op1:x10; dest:x11; op1val:0xffffffffffffff9d;  immval:0x11
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xffffffffffffff9d, 0x11, x3, 24, x4)

inst_282:
// rs1_val == 0xFFFFFFFFFFFFFFC7 and imm_val == 0x2E 
// opcode: rori ; op1:x10; dest:x11; op1val:0xffffffffffffffc7;  immval:0x2e
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xffffffffffffffc7, 0x2e, x3, 32, x4)

inst_283:
// rs1_val == 0xFFFFFFFFFFFFFFE4 and imm_val == 0x1F 
// opcode: rori ; op1:x10; dest:x11; op1val:0xffffffffffffffe4;  immval:0x1f
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xffffffffffffffe4, 0x1f, x3, 40, x4)

inst_284:
// rs1_val == 0xFFFFFFFFFFFFFFF2 and imm_val == 0x3E 
// opcode: rori ; op1:x10; dest:x11; op1val:0xfffffffffffffff2;  immval:0x3e
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xfffffffffffffff2, 0x3e, x3, 48, x4)

inst_285:
// rs1_val == 0xFFFFFFFFFFFFFFF8 and imm_val == 0x14 
// opcode: rori ; op1:x10; dest:x11; op1val:0xfffffffffffffff8;  immval:0x14
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xfffffffffffffff8, 0x14, x3, 56, x4)

inst_286:
// rs1_val == 0xFFFFFFFFFFFFFFFD and imm_val == 0x3E 
// opcode: rori ; op1:x10; dest:x11; op1val:0xfffffffffffffffd;  immval:0x3e
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xfffffffffffffffd, 0x3e, x3, 64, x4)

inst_287:
// rs1_val == 0xFFFFFFFFFFFFFFFE and imm_val == 0x01 
// opcode: rori ; op1:x10; dest:x11; op1val:0xfffffffffffffffe;  immval:0x1
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xfffffffffffffffe, 0x1, x3, 72, x4)

inst_288:
// imm_val == 0x00 and rs1_val == 0xCADB5BEC61250888 
// opcode: rori ; op1:x10; dest:x11; op1val:0xcadb5bec61250888;  immval:0x0
TEST_IMM_OP( rori, x11, x10, 0x0000000000000000, 0xcadb5bec61250888, 0x0, x3, 80, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x8_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x8_1:
    .fill 22*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 256*(XLEN/32),4,0xdeadbeef


signature_x3_1:
    .fill 11*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
