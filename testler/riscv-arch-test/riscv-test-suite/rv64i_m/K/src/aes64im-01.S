// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.4.5
// timestamp : Thu May 20 05:32:05 2021 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv-ctg/sample_cgfs/rv64i_k.cgf \
//                  --base-isa rv64i \
//                  --randomize
// -----------
//
// -----------
// Copyright (c) 2021. Indian Institute of Technology Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the aes64im instruction of the RISC-V  extension for the aes64im covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IK")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*RV64.*I.*K.*);def TEST_CASE_1=True;",aes64im)

RVTEST_CASE(1,"//check ISA:=regex(.*64.*);check ISA:=regex(.*RV64.*I.*ZKn.*);def TEST_CASE_1=True;",aes64im)

RVTEST_CASE(2,"//check ISA:=regex(.*64.*);check ISA:=regex(.*RV64.*I.*ZKnd.*);def TEST_CASE_1=True;",aes64im)

RVTEST_SIGBASE( x3,signature_x3_1)

inst_0:
// rs1 != rd, rs1==x26, rd==x0, rs1_val == 0x75a3adb3254a9493 
// opcode: aes64im ; op1:x26; dest:x0; op1val:0x75a3adb3254a9493;
li x26, 0x75a3adb3254a9493
aes64im x0, x26
sw x0, 0(x3)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x0, 0x0000000000000000)

inst_1:
// rs1 == rd, rs1==x28, rd==x28, rs1_val == 9223372036854775807, 
// opcode: aes64im ; op1:x28; dest:x28; op1val:0x7fffffffffffffff;
li x28, 0x7fffffffffffffff
aes64im x28, x28
sw x28, 8(x3)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x28, 0x0000000000000000)

inst_2:
// rs1==x14, rd==x1, rs1_val == 13835058055282163711, 
// opcode: aes64im ; op1:x14; dest:x1; op1val:0xbfffffffffffffff;
li x14, 0xbfffffffffffffff
aes64im x1, x14
sw x1, 16(x3)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x1, 0x0000000000000000)

inst_3:
// rs1==x30, rd==x23, rs1_val == 16140901064495857663, 
// opcode: aes64im ; op1:x30; dest:x23; op1val:0xdfffffffffffffff;
li x30, 0xdfffffffffffffff
aes64im x23, x30
sw x23, 24(x3)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x23, 0x0000000000000000)

inst_4:
// rs1==x4, rd==x27, rs1_val == 17293822569102704639, 
// opcode: aes64im ; op1:x4; dest:x27; op1val:0xefffffffffffffff;
li x4, 0xefffffffffffffff
aes64im x27, x4
sw x27, 32(x3)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x27, 0x0000000000000000)

inst_5:
// rs1==x29, rd==x15, rs1_val == 17870283321406128127, 
// opcode: aes64im ; op1:x29; dest:x15; op1val:0xf7ffffffffffffff;
li x29, 0xf7ffffffffffffff
aes64im x15, x29
sw x15, 40(x3)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x15, 0x0000000000000000)

inst_6:
// rs1==x9, rd==x22, rs1_val == 18158513697557839871, 
// opcode: aes64im ; op1:x9; dest:x22; op1val:0xfbffffffffffffff;
li x9, 0xfbffffffffffffff
aes64im x22, x9
sw x22, 48(x3)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x22, 0x0000000000000000)

inst_7:
// rs1==x2, rd==x24, rs1_val == 18302628885633695743, 
// opcode: aes64im ; op1:x2; dest:x24; op1val:0xfdffffffffffffff;
li x2, 0xfdffffffffffffff
aes64im x24, x2
sw x24, 56(x3)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x24, 0x0000000000000000)

inst_8:
// rs1==x8, rd==x6, rs1_val == 18374686479671623679, 
// opcode: aes64im ; op1:x8; dest:x6; op1val:0xfeffffffffffffff;
li x8, 0xfeffffffffffffff
aes64im x6, x8
sw x6, 64(x3)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x6, 0x0000000000000000)

inst_9:
// rs1==x1, rd==x17, rs1_val == 18410715276690587647, 
// opcode: aes64im ; op1:x1; dest:x17; op1val:0xff7fffffffffffff;
li x1, 0xff7fffffffffffff
aes64im x17, x1
sw x17, 72(x3)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x17, 0x0000000000000000)

inst_10:
// rs1==x11, rd==x30, rs1_val == 18428729675200069631, 
// opcode: aes64im ; op1:x11; dest:x30; op1val:0xffbfffffffffffff;
li x11, 0xffbfffffffffffff
aes64im x30, x11
sw x30, 80(x3)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x30, 0x0000000000000000)

inst_11:
// rs1==x10, rd==x16, rs1_val == 18437736874454810623, 
// opcode: aes64im ; op1:x10; dest:x16; op1val:0xffdfffffffffffff;
li x10, 0xffdfffffffffffff
aes64im x16, x10
sw x16, 88(x3)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x16, 0x0000000000000000)

inst_12:
// rs1==x15, rd==x8, rs1_val == 18442240474082181119, 
// opcode: aes64im ; op1:x15; dest:x8; op1val:0xffefffffffffffff;
li x15, 0xffefffffffffffff
aes64im x8, x15
sw x8, 96(x3)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x8, 0x0000000000000000)

inst_13:
// rs1==x0, rd==x14, rs1_val == 18444492273895866367, 
// opcode: aes64im ; op1:x0; dest:x14; op1val:0x0;
li x0, 0x0
aes64im x14, x0
sw x14, 104(x3)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x14, 0x0000000000000000)

inst_14:
// rs1==x19, rd==x18, rs1_val == 18445618173802708991, 
// opcode: aes64im ; op1:x19; dest:x18; op1val:0xfffbffffffffffff;
li x19, 0xfffbffffffffffff
aes64im x18, x19
sw x18, 112(x3)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x18, 0x0000000000000000)

inst_15:
// rs1==x16, rd==x13, rs1_val == 18446181123756130303, 
// opcode: aes64im ; op1:x16; dest:x13; op1val:0xfffdffffffffffff;
li x16, 0xfffdffffffffffff
aes64im x13, x16
sw x13, 120(x3)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x13, 0x0000000000000000)

inst_16:
// rs1==x17, rd==x20, rs1_val == 18446462598732840959, 
// opcode: aes64im ; op1:x17; dest:x20; op1val:0xfffeffffffffffff;
li x17, 0xfffeffffffffffff
aes64im x20, x17
sw x20, 128(x3)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x20, 0x0000000000000000)

inst_17:
// rs1==x23, rd==x29, rs1_val == 18446603336221196287, 
// opcode: aes64im ; op1:x23; dest:x29; op1val:0xffff7fffffffffff;
li x23, 0xffff7fffffffffff
aes64im x29, x23
sw x29, 136(x3)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x29, 0x0000000000000000)

inst_18:
// rs1==x12, rd==x2, rs1_val == 18446673704965373951, 
// opcode: aes64im ; op1:x12; dest:x2; op1val:0xffffbfffffffffff;
li x12, 0xffffbfffffffffff
aes64im x2, x12
sw x2, 144(x3)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x2, 0x0000000000000000)

inst_19:
// rs1==x25, rd==x5, rs1_val == 18446708889337462783, 
// opcode: aes64im ; op1:x25; dest:x5; op1val:0xffffdfffffffffff;
li x25, 0xffffdfffffffffff
aes64im x5, x25
sw x5, 152(x3)
RVMODEL_IO_ASSERT_GPR_EQ(x7, x5, 0x0000000000000000)

inst_20:
// rs1==x22, rd==x12, rs1_val == 18446726481523507199, 
// opcode: aes64im ; op1:x22; dest:x12; op1val:0xffffefffffffffff;
li x22, 0xffffefffffffffff
aes64im x12, x22
sw x12, 160(x3)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x0000000000000000)

inst_21:
// rs1==x5, rd==x4, rs1_val == 18446735277616529407, 
// opcode: aes64im ; op1:x5; dest:x4; op1val:0xfffff7ffffffffff;
li x5, 0xfffff7ffffffffff
aes64im x4, x5
sw x4, 168(x3)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0x0000000000000000)

inst_22:
// rs1==x27, rd==x21, rs1_val == 18446739675663040511, 
// opcode: aes64im ; op1:x27; dest:x21; op1val:0xfffffbffffffffff;
li x27, 0xfffffbffffffffff
aes64im x21, x27
sw x21, 176(x3)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x0000000000000000)
RVTEST_SIGBASE( x1,signature_x1_0)

inst_23:
// rs1==x24, rd==x19, rs1_val == 18446741874686296063, 
// opcode: aes64im ; op1:x24; dest:x19; op1val:0xfffffdffffffffff;
li x24, 0xfffffdffffffffff
aes64im x19, x24
sw x19, 0(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0x0000000000000000)

inst_24:
// rs1==x7, rd==x3, rs1_val == 18446742974197923839, 
// opcode: aes64im ; op1:x7; dest:x3; op1val:0xfffffeffffffffff;
li x7, 0xfffffeffffffffff
aes64im x3, x7
sw x3, 8(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x3, 0x0000000000000000)

inst_25:
// rs1==x6, rd==x25, rs1_val == 18446743523953737727, 
// opcode: aes64im ; op1:x6; dest:x25; op1val:0xffffff7fffffffff;
li x6, 0xffffff7fffffffff
aes64im x25, x6
sw x25, 16(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x0000000000000000)

inst_26:
// rs1==x18, rd==x26, rs1_val == 18446743798831644671, 
// opcode: aes64im ; op1:x18; dest:x26; op1val:0xffffffbfffffffff;
li x18, 0xffffffbfffffffff
aes64im x26, x18
sw x26, 24(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x0000000000000000)

inst_27:
// rs1==x20, rd==x11, rs1_val == 18446743936270598143, 
// opcode: aes64im ; op1:x20; dest:x11; op1val:0xffffffdfffffffff;
li x20, 0xffffffdfffffffff
aes64im x11, x20
sw x11, 32(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_28:
// rs1==x3, rd==x10, rs1_val == 18446744004990074879, 
// opcode: aes64im ; op1:x3; dest:x10; op1val:0xffffffefffffffff;
li x3, 0xffffffefffffffff
aes64im x10, x3
sw x10, 40(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x0000000000000000)

inst_29:
// rs1==x21, rd==x7, rs1_val == 18446744039349813247, 
// opcode: aes64im ; op1:x21; dest:x7; op1val:0xfffffff7ffffffff;
li x21, 0xfffffff7ffffffff
aes64im x7, x21
sw x7, 48(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x0000000000000000)

inst_30:
// rs1==x31, rd==x9, rs1_val == 18446744056529682431, 
// opcode: aes64im ; op1:x31; dest:x9; op1val:0xfffffffbffffffff;
li x31, 0xfffffffbffffffff
aes64im x9, x31
sw x9, 56(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x0000000000000000)

inst_31:
// rs1==x13, rd==x31, rs1_val == 18446744065119617023, 
// opcode: aes64im ; op1:x13; dest:x31; op1val:0xfffffffdffffffff;
li x13, 0xfffffffdffffffff
aes64im x31, x13
sw x31, 64(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x31, 0x0000000000000000)

inst_32:
// rs1_val == 18446744069414584319, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0xfffffffeffffffff;
li x10, 0xfffffffeffffffff
aes64im x11, x10
sw x11, 72(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_33:
// rs1_val == 18446744071562067967, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0xffffffff7fffffff;
li x10, 0xffffffff7fffffff
aes64im x11, x10
sw x11, 80(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_34:
// rs1_val == 18446744072635809791, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0xffffffffbfffffff;
li x10, 0xffffffffbfffffff
aes64im x11, x10
sw x11, 88(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_35:
// rs1_val == 18446744073172680703, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0xffffffffdfffffff;
li x10, 0xffffffffdfffffff
aes64im x11, x10
sw x11, 96(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_36:
// rs1_val == 18446744073441116159, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0xffffffffefffffff;
li x10, 0xffffffffefffffff
aes64im x11, x10
sw x11, 104(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_37:
// rs1_val == 18446744073575333887, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0xfffffffff7ffffff;
li x10, 0xfffffffff7ffffff
aes64im x11, x10
sw x11, 112(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_38:
// rs1_val == 18446744073642442751, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0xfffffffffbffffff;
li x10, 0xfffffffffbffffff
aes64im x11, x10
sw x11, 120(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_39:
// rs1_val == 18446744073675997183, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0xfffffffffdffffff;
li x10, 0xfffffffffdffffff
aes64im x11, x10
sw x11, 128(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_40:
// rs1_val == 18446744073692774399, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0xfffffffffeffffff;
li x10, 0xfffffffffeffffff
aes64im x11, x10
sw x11, 136(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_41:
// rs1_val == 18446744073701163007, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0xffffffffff7fffff;
li x10, 0xffffffffff7fffff
aes64im x11, x10
sw x11, 144(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_42:
// rs1_val == 18446744073705357311, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0xffffffffffbfffff;
li x10, 0xffffffffffbfffff
aes64im x11, x10
sw x11, 152(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_43:
// rs1_val == 18446744073707454463, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0xffffffffffdfffff;
li x10, 0xffffffffffdfffff
aes64im x11, x10
sw x11, 160(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_44:
// rs1_val == 18446744073708503039, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0xffffffffffefffff;
li x10, 0xffffffffffefffff
aes64im x11, x10
sw x11, 168(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_45:
// rs1_val == 18446744073709027327, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0xfffffffffff7ffff;
li x10, 0xfffffffffff7ffff
aes64im x11, x10
sw x11, 176(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_46:
// rs1_val == 18446744073709289471, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0xfffffffffffbffff;
li x10, 0xfffffffffffbffff
aes64im x11, x10
sw x11, 184(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_47:
// rs1_val == 18446744073709420543, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0xfffffffffffdffff;
li x10, 0xfffffffffffdffff
aes64im x11, x10
sw x11, 192(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_48:
// rs1_val == 18446744073709486079, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0xfffffffffffeffff;
li x10, 0xfffffffffffeffff
aes64im x11, x10
sw x11, 200(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_49:
// rs1_val == 18446744073709518847, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0xffffffffffff7fff;
li x10, 0xffffffffffff7fff
aes64im x11, x10
sw x11, 208(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_50:
// rs1_val == 18446744073709535231, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0xffffffffffffbfff;
li x10, 0xffffffffffffbfff
aes64im x11, x10
sw x11, 216(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_51:
// rs1_val == 18446744073709543423, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0xffffffffffffdfff;
li x10, 0xffffffffffffdfff
aes64im x11, x10
sw x11, 224(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_52:
// rs1_val == 18446744073709547519, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0xffffffffffffefff;
li x10, 0xffffffffffffefff
aes64im x11, x10
sw x11, 232(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_53:
// rs1_val == 18446744073709549567, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0xfffffffffffff7ff;
li x10, 0xfffffffffffff7ff
aes64im x11, x10
sw x11, 240(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_54:
// rs1_val == 18446744073709550591, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0xfffffffffffffbff;
li x10, 0xfffffffffffffbff
aes64im x11, x10
sw x11, 248(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_55:
// rs1_val == 18446744073709551103, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0xfffffffffffffdff;
li x10, 0xfffffffffffffdff
aes64im x11, x10
sw x11, 256(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_56:
// rs1_val == 18446744073709551359, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0xfffffffffffffeff;
li x10, 0xfffffffffffffeff
aes64im x11, x10
sw x11, 264(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_57:
// rs1_val == 18446744073709551487, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0xffffffffffffff7f;
li x10, 0xffffffffffffff7f
aes64im x11, x10
sw x11, 272(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_58:
// rs1_val == 18446744073709551551, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0xffffffffffffffbf;
li x10, 0xffffffffffffffbf
aes64im x11, x10
sw x11, 280(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_59:
// rs1_val == 18446744073709551583, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0xffffffffffffffdf;
li x10, 0xffffffffffffffdf
aes64im x11, x10
sw x11, 288(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_60:
// rs1_val == 18446744073709551599, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0xffffffffffffffef;
li x10, 0xffffffffffffffef
aes64im x11, x10
sw x11, 296(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_61:
// rs1_val == 18446744073709551607, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0xfffffffffffffff7;
li x10, 0xfffffffffffffff7
aes64im x11, x10
sw x11, 304(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_62:
// rs1_val == 18446744073709551611, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0xfffffffffffffffb;
li x10, 0xfffffffffffffffb
aes64im x11, x10
sw x11, 312(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_63:
// rs1_val == 18446744073709551613, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0xfffffffffffffffd;
li x10, 0xfffffffffffffffd
aes64im x11, x10
sw x11, 320(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_64:
// rs1_val == 18446744073709551614, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0xfffffffffffffffe;
li x10, 0xfffffffffffffffe
aes64im x11, x10
sw x11, 328(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_65:
// rs1_val == 9223372036854775808, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x8000000000000000;
li x10, 0x8000000000000000
aes64im x11, x10
sw x11, 336(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_66:
// rs1_val == 4611686018427387904, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x4000000000000000;
li x10, 0x4000000000000000
aes64im x11, x10
sw x11, 344(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_67:
// rs1_val == 2305843009213693952, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x2000000000000000;
li x10, 0x2000000000000000
aes64im x11, x10
sw x11, 352(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_68:
// rs1_val == 1152921504606846976, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x1000000000000000;
li x10, 0x1000000000000000
aes64im x11, x10
sw x11, 360(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_69:
// rs1_val == 576460752303423488, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x800000000000000;
li x10, 0x800000000000000
aes64im x11, x10
sw x11, 368(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_70:
// rs1_val == 288230376151711744, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x400000000000000;
li x10, 0x400000000000000
aes64im x11, x10
sw x11, 376(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_71:
// rs1_val == 144115188075855872, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x200000000000000;
li x10, 0x200000000000000
aes64im x11, x10
sw x11, 384(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_72:
// rs1_val == 72057594037927936, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x100000000000000;
li x10, 0x100000000000000
aes64im x11, x10
sw x11, 392(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_73:
// rs1_val == 36028797018963968, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x80000000000000;
li x10, 0x80000000000000
aes64im x11, x10
sw x11, 400(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_74:
// rs1_val == 18014398509481984, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x40000000000000;
li x10, 0x40000000000000
aes64im x11, x10
sw x11, 408(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_75:
// rs1_val == 9007199254740992, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x20000000000000;
li x10, 0x20000000000000
aes64im x11, x10
sw x11, 416(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_76:
// rs1_val == 4503599627370496, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x10000000000000;
li x10, 0x10000000000000
aes64im x11, x10
sw x11, 424(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_77:
// rs1_val == 2251799813685248, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x8000000000000;
li x10, 0x8000000000000
aes64im x11, x10
sw x11, 432(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_78:
// rs1_val == 1125899906842624, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x4000000000000;
li x10, 0x4000000000000
aes64im x11, x10
sw x11, 440(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_79:
// rs1_val == 562949953421312, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x2000000000000;
li x10, 0x2000000000000
aes64im x11, x10
sw x11, 448(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_80:
// rs1_val == 281474976710656, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x1000000000000;
li x10, 0x1000000000000
aes64im x11, x10
sw x11, 456(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_81:
// rs1_val == 140737488355328, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x800000000000;
li x10, 0x800000000000
aes64im x11, x10
sw x11, 464(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_82:
// rs1_val == 70368744177664, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x400000000000;
li x10, 0x400000000000
aes64im x11, x10
sw x11, 472(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_83:
// rs1_val == 35184372088832, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x200000000000;
li x10, 0x200000000000
aes64im x11, x10
sw x11, 480(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_84:
// rs1_val == 17592186044416, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x100000000000;
li x10, 0x100000000000
aes64im x11, x10
sw x11, 488(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_85:
// rs1_val == 1, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x1;
li x10, 0x1
aes64im x11, x10
sw x11, 496(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_86:
// rs1_val == 0xb6f9706fb4f741aa 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0xb6f9706fb4f741aa;
li x10, 0xb6f9706fb4f741aa
aes64im x11, x10
sw x11, 504(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_87:
// rs1_val == 0x40a5ff526f38a9c7 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x40a5ff526f38a9c7;
li x10, 0x40a5ff526f38a9c7
aes64im x11, x10
sw x11, 512(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_88:
// rs1_val == 0xd05668ae0fdb82bc 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0xd05668ae0fdb82bc;
li x10, 0xd05668ae0fdb82bc
aes64im x11, x10
sw x11, 520(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_89:
// rs1_val == 0x9bedfe390d6ddd9d 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x9bedfe390d6ddd9d;
li x10, 0x9bedfe390d6ddd9d
aes64im x11, x10
sw x11, 528(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_90:
// rs1_val == 0xaa6bb2bde9ed477d 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0xaa6bb2bde9ed477d;
li x10, 0xaa6bb2bde9ed477d
aes64im x11, x10
sw x11, 536(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_91:
// rs1_val == 0xd75739f82ac177c6 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0xd75739f82ac177c6;
li x10, 0xd75739f82ac177c6
aes64im x11, x10
sw x11, 544(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_92:
// rs1_val == 0x299c3bcf90efb625 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x299c3bcf90efb625;
li x10, 0x299c3bcf90efb625
aes64im x11, x10
sw x11, 552(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_93:
// rs1_val == 0x9a4e9ef10171f4df 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x9a4e9ef10171f4df;
li x10, 0x9a4e9ef10171f4df
aes64im x11, x10
sw x11, 560(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_94:
// rs1_val == 0x1fc493caa371db42 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x1fc493caa371db42;
li x10, 0x1fc493caa371db42
aes64im x11, x10
sw x11, 568(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_95:
// rs1_val == 0xd169a3f8cad5e297 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0xd169a3f8cad5e297;
li x10, 0xd169a3f8cad5e297
aes64im x11, x10
sw x11, 576(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_96:
// rs1_val == 0xf4c30307672f666d 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0xf4c30307672f666d;
li x10, 0xf4c30307672f666d
aes64im x11, x10
sw x11, 584(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_97:
// rs1_val == 0xd5b9fe5cf69bdcf3 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0xd5b9fe5cf69bdcf3;
li x10, 0xd5b9fe5cf69bdcf3
aes64im x11, x10
sw x11, 592(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_98:
// rs1_val == 0xa0569d765ebc64cb 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0xa0569d765ebc64cb;
li x10, 0xa0569d765ebc64cb
aes64im x11, x10
sw x11, 600(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_99:
// rs1_val == 0xe4921bf73047c198 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0xe4921bf73047c198;
li x10, 0xe4921bf73047c198
aes64im x11, x10
sw x11, 608(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_100:
// rs1_val == 0x2daf9ac7f5faf207 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x2daf9ac7f5faf207;
li x10, 0x2daf9ac7f5faf207
aes64im x11, x10
sw x11, 616(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_101:
// rs1_val == 0xfcc1b543c49cd65b 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0xfcc1b543c49cd65b;
li x10, 0xfcc1b543c49cd65b
aes64im x11, x10
sw x11, 624(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_102:
// rs1_val == 0x3459294ef273b44c 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x3459294ef273b44c;
li x10, 0x3459294ef273b44c
aes64im x11, x10
sw x11, 632(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_103:
// rs1_val == 0x436f40f274b8de87 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x436f40f274b8de87;
li x10, 0x436f40f274b8de87
aes64im x11, x10
sw x11, 640(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_104:
// rs1_val == 0xc5521660f3a3c571 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0xc5521660f3a3c571;
li x10, 0xc5521660f3a3c571
aes64im x11, x10
sw x11, 648(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_105:
// rs1_val == 8796093022208, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x80000000000;
li x10, 0x80000000000
aes64im x11, x10
sw x11, 656(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_106:
// rs1_val == 4398046511104, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x40000000000;
li x10, 0x40000000000
aes64im x11, x10
sw x11, 664(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_107:
// rs1_val == 2199023255552, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x20000000000;
li x10, 0x20000000000
aes64im x11, x10
sw x11, 672(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_108:
// rs1_val == 1099511627776, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x10000000000;
li x10, 0x10000000000
aes64im x11, x10
sw x11, 680(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_109:
// rs1_val == 549755813888, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x8000000000;
li x10, 0x8000000000
aes64im x11, x10
sw x11, 688(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_110:
// rs1_val == 274877906944, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x4000000000;
li x10, 0x4000000000
aes64im x11, x10
sw x11, 696(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_111:
// rs1_val == 137438953472, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x2000000000;
li x10, 0x2000000000
aes64im x11, x10
sw x11, 704(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_112:
// rs1_val == 68719476736, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x1000000000;
li x10, 0x1000000000
aes64im x11, x10
sw x11, 712(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_113:
// rs1_val == 34359738368, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x800000000;
li x10, 0x800000000
aes64im x11, x10
sw x11, 720(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_114:
// rs1_val == 17179869184, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x400000000;
li x10, 0x400000000
aes64im x11, x10
sw x11, 728(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_115:
// rs1_val == 8589934592, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x200000000;
li x10, 0x200000000
aes64im x11, x10
sw x11, 736(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_116:
// rs1_val == 4294967296, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x100000000;
li x10, 0x100000000
aes64im x11, x10
sw x11, 744(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_117:
// rs1_val == 2147483648, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x80000000;
li x10, 0x80000000
aes64im x11, x10
sw x11, 752(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_118:
// rs1_val == 1073741824, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x40000000;
li x10, 0x40000000
aes64im x11, x10
sw x11, 760(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_119:
// rs1_val == 536870912, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x20000000;
li x10, 0x20000000
aes64im x11, x10
sw x11, 768(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_120:
// rs1_val == 268435456, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x10000000;
li x10, 0x10000000
aes64im x11, x10
sw x11, 776(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_121:
// rs1_val == 134217728, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x8000000;
li x10, 0x8000000
aes64im x11, x10
sw x11, 784(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_122:
// rs1_val == 67108864, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x4000000;
li x10, 0x4000000
aes64im x11, x10
sw x11, 792(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_123:
// rs1_val == 33554432, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x2000000;
li x10, 0x2000000
aes64im x11, x10
sw x11, 800(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_124:
// rs1_val == 16777216, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x1000000;
li x10, 0x1000000
aes64im x11, x10
sw x11, 808(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_125:
// rs1_val == 8388608, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x800000;
li x10, 0x800000
aes64im x11, x10
sw x11, 816(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_126:
// rs1_val == 4194304, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x400000;
li x10, 0x400000
aes64im x11, x10
sw x11, 824(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_127:
// rs1_val == 2097152, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x200000;
li x10, 0x200000
aes64im x11, x10
sw x11, 832(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_128:
// rs1_val == 1048576, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x100000;
li x10, 0x100000
aes64im x11, x10
sw x11, 840(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_129:
// rs1_val == 524288, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x80000;
li x10, 0x80000
aes64im x11, x10
sw x11, 848(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_130:
// rs1_val == 262144, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x40000;
li x10, 0x40000
aes64im x11, x10
sw x11, 856(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_131:
// rs1_val == 131072, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x20000;
li x10, 0x20000
aes64im x11, x10
sw x11, 864(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_132:
// rs1_val == 65536, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x10000;
li x10, 0x10000
aes64im x11, x10
sw x11, 872(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_133:
// rs1_val == 32768, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x8000;
li x10, 0x8000
aes64im x11, x10
sw x11, 880(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_134:
// rs1_val == 16384, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x4000;
li x10, 0x4000
aes64im x11, x10
sw x11, 888(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_135:
// rs1_val == 8192, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x2000;
li x10, 0x2000
aes64im x11, x10
sw x11, 896(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_136:
// rs1_val == 4096, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x1000;
li x10, 0x1000
aes64im x11, x10
sw x11, 904(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_137:
// rs1_val == 2048, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x800;
li x10, 0x800
aes64im x11, x10
sw x11, 912(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_138:
// rs1_val == 1024, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x400;
li x10, 0x400
aes64im x11, x10
sw x11, 920(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_139:
// rs1_val == 512, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x200;
li x10, 0x200
aes64im x11, x10
sw x11, 928(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_140:
// rs1_val == 256, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x100;
li x10, 0x100
aes64im x11, x10
sw x11, 936(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_141:
// rs1_val == 128, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x80;
li x10, 0x80
aes64im x11, x10
sw x11, 944(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_142:
// rs1_val == 64, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x40;
li x10, 0x40
aes64im x11, x10
sw x11, 952(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_143:
// rs1_val == 32, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x20;
li x10, 0x20
aes64im x11, x10
sw x11, 960(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_144:
// rs1_val == 16, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x10;
li x10, 0x10
aes64im x11, x10
sw x11, 968(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_145:
// rs1_val == 8, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x8;
li x10, 0x8
aes64im x11, x10
sw x11, 976(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_146:
// rs1_val == 4, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x4;
li x10, 0x4
aes64im x11, x10
sw x11, 984(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_147:
// rs1_val == 2, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x2;
li x10, 0x2
aes64im x11, x10
sw x11, 992(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_148:
// rs1_val == 0x75a3adb3254a9493 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0x75a3adb3254a9493;
li x10, 0x75a3adb3254a9493
aes64im x11, x10
sw x11, 1000(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)

inst_149:
// rs1_val == 18444492273895866367, 
// opcode: aes64im ; op1:x10; dest:x11; op1val:0xfff7ffffffffffff;
li x10, 0xfff7ffffffffffff
aes64im x11, x10
sw x11, 1008(x1)
RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x3_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x3_1:
    .fill 23*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 127*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
