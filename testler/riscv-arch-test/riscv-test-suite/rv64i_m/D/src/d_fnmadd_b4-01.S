
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.5.6
// timestamp : Mon Sep 20 11:53:03 2021 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/compliance_fd/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/compliance_fd/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV64D/rv64d_fnmadd1.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2021. IIT Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.d instruction of the RISC-V FD extension for the fnmadd_b4 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IFD")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",d_fnmadd_b4)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1, rs1==f8, rs2==f25, rs3==f18, rd==f18, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x139cbde283143 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2e6942188ddd7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5d35e2c6078a3 and rm_val == 0  
// opcode: fnmadd.d ; op1:f8; op2:f25; op3:f18; dest:f18; op1val:0x7fe139cbde283143; op2val:0xbfe2e6942188ddd7; op3val:0x7fe5d35e2c6078a3; valaddr_reg:x16; val_offset:0; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f18, f8, f25, f18, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1:
// rs1 == rs2 == rs3 != rd, rs1==f10, rs2==f10, rs3==f10, rd==f17, fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8276674380fc3 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x80081570b13b6 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x8e816c2502d73 and rm_val == 4  
// opcode: fnmadd.d ; op1:f10; op2:f10; op3:f10; dest:f17; op1val:0x7fd8276674380fc3; op2val:0x7fd8276674380fc3; op3val:0x7fd8276674380fc3; valaddr_reg:x16; val_offset:24; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f17, f10, f10, f10, 0x4, 0, x16, 24, x17, x15, 16, x18)

inst_2:
// rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2, rs1==f13, rs2==f0, rs3==f13, rd==f16, fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8276674380fc3 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x80081570b13b6 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x8e816c2502d73 and rm_val == 3  
// opcode: fnmadd.d ; op1:f13; op2:f0; op3:f13; dest:f16; op1val:0x7fd8276674380fc3; op2val:0x40280081570b13b6; op3val:0x7fd8276674380fc3; valaddr_reg:x16; val_offset:48; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f16, f13, f0, f13, 0x3, 0, x16, 48, x17, x15, 32, x18)

inst_3:
// rs1 == rd == rs3 != rs2, rs1==f0, rs2==f24, rs3==f0, rd==f0, fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8276674380fc3 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x80081570b13b6 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x8e816c2502d73 and rm_val == 2  
// opcode: fnmadd.d ; op1:f0; op2:f24; op3:f0; dest:f0; op1val:0x7fd8276674380fc3; op2val:0x40280081570b13b6; op3val:0x7fd8276674380fc3; valaddr_reg:x16; val_offset:72; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f0, f0, f24, f0, 0x2, 0, x16, 72, x17, x15, 48, x18)

inst_4:
// rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd, rs1==f2, rs2==f22, rs3==f15, rd==f25, fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8276674380fc3 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x80081570b13b6 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x8e816c2502d73 and rm_val == 1  
// opcode: fnmadd.d ; op1:f2; op2:f22; op3:f15; dest:f25; op1val:0x7fd8276674380fc3; op2val:0x40280081570b13b6; op3val:0x7fd8e816c2502d73; valaddr_reg:x16; val_offset:96; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f25, f2, f22, f15, 0x1, 0, x16, 96, x17, x15, 64, x18)

inst_5:
// rd == rs2 == rs3 != rs1, rs1==f22, rs2==f3, rs3==f3, rd==f3, fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8276674380fc3 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x80081570b13b6 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x8e816c2502d73 and rm_val == 0  
// opcode: fnmadd.d ; op1:f22; op2:f3; op3:f3; dest:f3; op1val:0x7fd8276674380fc3; op2val:0x40280081570b13b6; op3val:0x40280081570b13b6; valaddr_reg:x16; val_offset:120; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f3, f22, f3, f3, 0x0, 0, x16, 120, x17, x15, 80, x18)

inst_6:
// rs1 == rs2 == rd != rs3, rs1==f30, rs2==f30, rs3==f23, rd==f30, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3d93686797715 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5dbeac1d0025d and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x3978b52ff3f23 and rm_val == 4  
// opcode: fnmadd.d ; op1:f30; op2:f30; op3:f23; dest:f30; op1val:0x7fe3d93686797715; op2val:0x7fe3d93686797715; op3val:0x7fd3978b52ff3f23; valaddr_reg:x16; val_offset:144; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f30, f30, f30, f23, 0x4, 0, x16, 144, x17, x15, 96, x18)

inst_7:
// rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1, rs1==f5, rs2==f11, rs3==f22, rd==f11, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3d93686797715 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5dbeac1d0025d and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x3978b52ff3f23 and rm_val == 3  
// opcode: fnmadd.d ; op1:f5; op2:f11; op3:f22; dest:f11; op1val:0x7fe3d93686797715; op2val:0xbfe5dbeac1d0025d; op3val:0x7fd3978b52ff3f23; valaddr_reg:x16; val_offset:168; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f11, f5, f11, f22, 0x3, 0, x16, 168, x17, x15, 112, x18)

inst_8:
// rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3, rs1==f19, rs2==f19, rs3==f30, rd==f13, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3d93686797715 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5dbeac1d0025d and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x3978b52ff3f23 and rm_val == 2  
// opcode: fnmadd.d ; op1:f19; op2:f19; op3:f30; dest:f13; op1val:0x7fe3d93686797715; op2val:0x7fe3d93686797715; op3val:0x7fd3978b52ff3f23; valaddr_reg:x16; val_offset:192; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f19, f19, f30, 0x2, 0, x16, 192, x17, x15, 128, x18)

inst_9:
// rs1 == rs2 == rs3 == rd, rs1==f29, rs2==f29, rs3==f29, rd==f29, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3d93686797715 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5dbeac1d0025d and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x3978b52ff3f23 and rm_val == 1  
// opcode: fnmadd.d ; op1:f29; op2:f29; op3:f29; dest:f29; op1val:0x7fe3d93686797715; op2val:0x7fe3d93686797715; op3val:0x7fe3d93686797715; valaddr_reg:x16; val_offset:216; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f29, f29, f29, f29, 0x1, 0, x16, 216, x17, x15, 144, x18)

inst_10:
// rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1, rs1==f12, rs2==f8, rs3==f8, rd==f31, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3d93686797715 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5dbeac1d0025d and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x3978b52ff3f23 and rm_val == 0  
// opcode: fnmadd.d ; op1:f12; op2:f8; op3:f8; dest:f31; op1val:0x7fe3d93686797715; op2val:0xbfe5dbeac1d0025d; op3val:0xbfe5dbeac1d0025d; valaddr_reg:x16; val_offset:240; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f31, f12, f8, f8, 0x0, 0, x16, 240, x17, x15, 160, x18)

inst_11:
// rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2, rs1==f1, rs2==f6, rs3==f20, rd==f1, fs1 == 0 and fe1 == 0x7fd and fm1 == 0x54e6e64764369 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x4808cf6dfa705 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xcf127a6af77f2 and rm_val == 4  
// opcode: fnmadd.d ; op1:f1; op2:f6; op3:f20; dest:f1; op1val:0x7fd54e6e64764369; op2val:0x4014808cf6dfa705; op3val:0x7fecf127a6af77f2; valaddr_reg:x16; val_offset:264; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f1, f1, f6, f20, 0x4, 0, x16, 264, x17, x15, 176, x18)

inst_12:
// rs1==f28, rs2==f4, rs3==f31, rd==f2, fs1 == 0 and fe1 == 0x7fd and fm1 == 0x54e6e64764369 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x4808cf6dfa705 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xcf127a6af77f2 and rm_val == 3  
// opcode: fnmadd.d ; op1:f28; op2:f4; op3:f31; dest:f2; op1val:0x7fd54e6e64764369; op2val:0x4014808cf6dfa705; op3val:0x7fecf127a6af77f2; valaddr_reg:x16; val_offset:288; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f2, f28, f4, f31, 0x3, 0, x16, 288, x17, x15, 192, x18)

inst_13:
// rs1==f23, rs2==f2, rs3==f27, rd==f19, fs1 == 0 and fe1 == 0x7fd and fm1 == 0x54e6e64764369 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x4808cf6dfa705 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xcf127a6af77f2 and rm_val == 2  
// opcode: fnmadd.d ; op1:f23; op2:f2; op3:f27; dest:f19; op1val:0x7fd54e6e64764369; op2val:0x4014808cf6dfa705; op3val:0x7fecf127a6af77f2; valaddr_reg:x16; val_offset:312; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f19, f23, f2, f27, 0x2, 0, x16, 312, x17, x15, 208, x18)

inst_14:
// rs1==f16, rs2==f5, rs3==f17, rd==f24, fs1 == 0 and fe1 == 0x7fd and fm1 == 0x54e6e64764369 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x4808cf6dfa705 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xcf127a6af77f2 and rm_val == 1  
// opcode: fnmadd.d ; op1:f16; op2:f5; op3:f17; dest:f24; op1val:0x7fd54e6e64764369; op2val:0x4014808cf6dfa705; op3val:0x7fecf127a6af77f2; valaddr_reg:x16; val_offset:336; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f24, f16, f5, f17, 0x1, 0, x16, 336, x17, x15, 224, x18)

inst_15:
// rs1==f18, rs2==f31, rs3==f2, rd==f7, fs1 == 0 and fe1 == 0x7fd and fm1 == 0x54e6e64764369 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x4808cf6dfa705 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xcf127a6af77f2 and rm_val == 0  
// opcode: fnmadd.d ; op1:f18; op2:f31; op3:f2; dest:f7; op1val:0x7fd54e6e64764369; op2val:0x4014808cf6dfa705; op3val:0x7fecf127a6af77f2; valaddr_reg:x16; val_offset:360; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f7, f18, f31, f2, 0x0, 0, x16, 360, x17, x15, 240, x18)

inst_16:
// rs1==f4, rs2==f15, rs3==f25, rd==f5, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8e5d8dcad33c4 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xbdd0bee328bc8 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x177d952f13e9f and rm_val == 4  
// opcode: fnmadd.d ; op1:f4; op2:f15; op3:f25; dest:f5; op1val:0x7fe8e5d8dcad33c4; op2val:0xc00bdd0bee328bc8; op3val:0x7f9177d952f13e9f; valaddr_reg:x16; val_offset:384; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f5, f4, f15, f25, 0x4, 0, x16, 384, x17, x15, 256, x18)

inst_17:
// rs1==f20, rs2==f26, rs3==f9, rd==f21, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8e5d8dcad33c4 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xbdd0bee328bc8 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x177d952f13e9f and rm_val == 3  
// opcode: fnmadd.d ; op1:f20; op2:f26; op3:f9; dest:f21; op1val:0x7fe8e5d8dcad33c4; op2val:0xc00bdd0bee328bc8; op3val:0x7f9177d952f13e9f; valaddr_reg:x16; val_offset:408; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f21, f20, f26, f9, 0x3, 0, x16, 408, x17, x15, 272, x18)

inst_18:
// rs1==f14, rs2==f1, rs3==f28, rd==f20, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8e5d8dcad33c4 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xbdd0bee328bc8 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x177d952f13e9f and rm_val == 2  
// opcode: fnmadd.d ; op1:f14; op2:f1; op3:f28; dest:f20; op1val:0x7fe8e5d8dcad33c4; op2val:0xc00bdd0bee328bc8; op3val:0x7f9177d952f13e9f; valaddr_reg:x16; val_offset:432; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f20, f14, f1, f28, 0x2, 0, x16, 432, x17, x15, 288, x18)

inst_19:
// rs1==f17, rs2==f23, rs3==f14, rd==f15, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8e5d8dcad33c4 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xbdd0bee328bc8 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x177d952f13e9f and rm_val == 1  
// opcode: fnmadd.d ; op1:f17; op2:f23; op3:f14; dest:f15; op1val:0x7fe8e5d8dcad33c4; op2val:0xc00bdd0bee328bc8; op3val:0x7f9177d952f13e9f; valaddr_reg:x16; val_offset:456; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f15, f17, f23, f14, 0x1, 0, x16, 456, x17, x15, 304, x18)

inst_20:
// rs1==f3, rs2==f13, rs3==f26, rd==f6, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8e5d8dcad33c4 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xbdd0bee328bc8 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x177d952f13e9f and rm_val == 0  
// opcode: fnmadd.d ; op1:f3; op2:f13; op3:f26; dest:f6; op1val:0x7fe8e5d8dcad33c4; op2val:0xc00bdd0bee328bc8; op3val:0x7f9177d952f13e9f; valaddr_reg:x16; val_offset:480; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f6, f3, f13, f26, 0x0, 0, x16, 480, x17, x15, 320, x18)

inst_21:
// rs1==f26, rs2==f17, rs3==f24, rd==f4, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x657d95216ac01 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1ef5830db8da2 and fs3 == 0 and fe3 == 0x7f8 and fm3 == 0x9a5803051b37f and rm_val == 4  
// opcode: fnmadd.d ; op1:f26; op2:f17; op3:f24; dest:f4; op1val:0x7fe657d95216ac01; op2val:0x3ff1ef5830db8da2; op3val:0x7f89a5803051b37f; valaddr_reg:x16; val_offset:504; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f4, f26, f17, f24, 0x4, 0, x16, 504, x17, x15, 336, x18)

inst_22:
// rs1==f15, rs2==f9, rs3==f6, rd==f27, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x657d95216ac01 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1ef5830db8da2 and fs3 == 0 and fe3 == 0x7f8 and fm3 == 0x9a5803051b37f and rm_val == 3  
// opcode: fnmadd.d ; op1:f15; op2:f9; op3:f6; dest:f27; op1val:0x7fe657d95216ac01; op2val:0x3ff1ef5830db8da2; op3val:0x7f89a5803051b37f; valaddr_reg:x16; val_offset:528; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f27, f15, f9, f6, 0x3, 0, x16, 528, x17, x15, 352, x18)

inst_23:
// rs1==f24, rs2==f12, rs3==f16, rd==f23, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x657d95216ac01 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1ef5830db8da2 and fs3 == 0 and fe3 == 0x7f8 and fm3 == 0x9a5803051b37f and rm_val == 2  
// opcode: fnmadd.d ; op1:f24; op2:f12; op3:f16; dest:f23; op1val:0x7fe657d95216ac01; op2val:0x3ff1ef5830db8da2; op3val:0x7f89a5803051b37f; valaddr_reg:x16; val_offset:552; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f23, f24, f12, f16, 0x2, 0, x16, 552, x17, x15, 368, x18)

inst_24:
// rs1==f27, rs2==f16, rs3==f21, rd==f14, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x657d95216ac01 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1ef5830db8da2 and fs3 == 0 and fe3 == 0x7f8 and fm3 == 0x9a5803051b37f and rm_val == 1  
// opcode: fnmadd.d ; op1:f27; op2:f16; op3:f21; dest:f14; op1val:0x7fe657d95216ac01; op2val:0x3ff1ef5830db8da2; op3val:0x7f89a5803051b37f; valaddr_reg:x16; val_offset:576; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f14, f27, f16, f21, 0x1, 0, x16, 576, x17, x15, 384, x18)

inst_25:
// rs1==f11, rs2==f18, rs3==f7, rd==f22, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x657d95216ac01 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1ef5830db8da2 and fs3 == 0 and fe3 == 0x7f8 and fm3 == 0x9a5803051b37f and rm_val == 0  
// opcode: fnmadd.d ; op1:f11; op2:f18; op3:f7; dest:f22; op1val:0x7fe657d95216ac01; op2val:0x3ff1ef5830db8da2; op3val:0x7f89a5803051b37f; valaddr_reg:x16; val_offset:600; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f22, f11, f18, f7, 0x0, 0, x16, 600, x17, x15, 400, x18)

inst_26:
// rs1==f25, rs2==f7, rs3==f5, rd==f28, fs1 == 0 and fe1 == 0x7fc and fm1 == 0xadd854d58145f and fs2 == 1 and fe2 == 0x402 and fm2 == 0xb4f8ecba5f106 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbb27f4381021f and rm_val == 4  
// opcode: fnmadd.d ; op1:f25; op2:f7; op3:f5; dest:f28; op1val:0x7fcadd854d58145f; op2val:0xc02b4f8ecba5f106; op3val:0x7febb27f4381021f; valaddr_reg:x16; val_offset:624; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f28, f25, f7, f5, 0x4, 0, x16, 624, x17, x15, 416, x18)

inst_27:
// rs1==f21, rs2==f27, rs3==f12, rd==f8, fs1 == 0 and fe1 == 0x7fc and fm1 == 0xadd854d58145f and fs2 == 1 and fe2 == 0x402 and fm2 == 0xb4f8ecba5f106 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbb27f4381021f and rm_val == 3  
// opcode: fnmadd.d ; op1:f21; op2:f27; op3:f12; dest:f8; op1val:0x7fcadd854d58145f; op2val:0xc02b4f8ecba5f106; op3val:0x7febb27f4381021f; valaddr_reg:x16; val_offset:648; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f8, f21, f27, f12, 0x3, 0, x16, 648, x17, x15, 432, x18)

inst_28:
// rs1==f6, rs2==f28, rs3==f19, rd==f26, fs1 == 0 and fe1 == 0x7fc and fm1 == 0xadd854d58145f and fs2 == 1 and fe2 == 0x402 and fm2 == 0xb4f8ecba5f106 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbb27f4381021f and rm_val == 2  
// opcode: fnmadd.d ; op1:f6; op2:f28; op3:f19; dest:f26; op1val:0x7fcadd854d58145f; op2val:0xc02b4f8ecba5f106; op3val:0x7febb27f4381021f; valaddr_reg:x16; val_offset:672; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f26, f6, f28, f19, 0x2, 0, x16, 672, x17, x15, 448, x18)

inst_29:
// rs1==f9, rs2==f14, rs3==f4, rd==f10, fs1 == 0 and fe1 == 0x7fc and fm1 == 0xadd854d58145f and fs2 == 1 and fe2 == 0x402 and fm2 == 0xb4f8ecba5f106 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbb27f4381021f and rm_val == 1  
// opcode: fnmadd.d ; op1:f9; op2:f14; op3:f4; dest:f10; op1val:0x7fcadd854d58145f; op2val:0xc02b4f8ecba5f106; op3val:0x7febb27f4381021f; valaddr_reg:x16; val_offset:696; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f10, f9, f14, f4, 0x1, 0, x16, 696, x17, x15, 464, x18)

inst_30:
// rs1==f31, rs2==f21, rs3==f1, rd==f12, fs1 == 0 and fe1 == 0x7fc and fm1 == 0xadd854d58145f and fs2 == 1 and fe2 == 0x402 and fm2 == 0xb4f8ecba5f106 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbb27f4381021f and rm_val == 0  
// opcode: fnmadd.d ; op1:f31; op2:f21; op3:f1; dest:f12; op1val:0x7fcadd854d58145f; op2val:0xc02b4f8ecba5f106; op3val:0x7febb27f4381021f; valaddr_reg:x16; val_offset:720; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f12, f31, f21, f1, 0x0, 0, x16, 720, x17, x15, 480, x18)

inst_31:
// rs1==f7, rs2==f20, rs3==f11, rd==f9, fs1 == 0 and fe1 == 0x7fd and fm1 == 0xef5aa91c82b3d and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xc52a83cb73c6b and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x1ad71498eb7bb and rm_val == 4  
// opcode: fnmadd.d ; op1:f7; op2:f20; op3:f11; dest:f9; op1val:0x7fdef5aa91c82b3d; op2val:0x3fdc52a83cb73c6b; op3val:0x7fc1ad71498eb7bb; valaddr_reg:x16; val_offset:744; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f9, f7, f20, f11, 0x4, 0, x16, 744, x17, x15, 496, x18)

inst_32:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xef5aa91c82b3d and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xc52a83cb73c6b and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x1ad71498eb7bb and rm_val == 3  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fdef5aa91c82b3d; op2val:0x3fdc52a83cb73c6b; op3val:0x7fc1ad71498eb7bb; valaddr_reg:x16; val_offset:768; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x3, 0, x16, 768, x17, x15, 512, x18)

inst_33:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xef5aa91c82b3d and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xc52a83cb73c6b and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x1ad71498eb7bb and rm_val == 2  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fdef5aa91c82b3d; op2val:0x3fdc52a83cb73c6b; op3val:0x7fc1ad71498eb7bb; valaddr_reg:x16; val_offset:792; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x2, 0, x16, 792, x17, x15, 528, x18)

inst_34:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xef5aa91c82b3d and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xc52a83cb73c6b and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x1ad71498eb7bb and rm_val == 1  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fdef5aa91c82b3d; op2val:0x3fdc52a83cb73c6b; op3val:0x7fc1ad71498eb7bb; valaddr_reg:x16; val_offset:816; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x1, 0, x16, 816, x17, x15, 544, x18)

inst_35:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xef5aa91c82b3d and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xc52a83cb73c6b and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x1ad71498eb7bb and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fdef5aa91c82b3d; op2val:0x3fdc52a83cb73c6b; op3val:0x7fc1ad71498eb7bb; valaddr_reg:x16; val_offset:840; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 840, x17, x15, 560, x18)

inst_36:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3fc6805c084d1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc1494b223d275 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x91ddf5613b02f and rm_val == 4  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fd3fc6805c084d1; op2val:0xbfec1494b223d275; op3val:0x7fc91ddf5613b02f; valaddr_reg:x16; val_offset:864; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x4, 0, x16, 864, x17, x15, 576, x18)

inst_37:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3fc6805c084d1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc1494b223d275 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x91ddf5613b02f and rm_val == 3  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fd3fc6805c084d1; op2val:0xbfec1494b223d275; op3val:0x7fc91ddf5613b02f; valaddr_reg:x16; val_offset:888; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x3, 0, x16, 888, x17, x15, 592, x18)

inst_38:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3fc6805c084d1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc1494b223d275 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x91ddf5613b02f and rm_val == 2  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fd3fc6805c084d1; op2val:0xbfec1494b223d275; op3val:0x7fc91ddf5613b02f; valaddr_reg:x16; val_offset:912; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x2, 0, x16, 912, x17, x15, 608, x18)

inst_39:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3fc6805c084d1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc1494b223d275 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x91ddf5613b02f and rm_val == 1  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fd3fc6805c084d1; op2val:0xbfec1494b223d275; op3val:0x7fc91ddf5613b02f; valaddr_reg:x16; val_offset:936; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x1, 0, x16, 936, x17, x15, 624, x18)

inst_40:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3fc6805c084d1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc1494b223d275 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x91ddf5613b02f and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fd3fc6805c084d1; op2val:0xbfec1494b223d275; op3val:0x7fc91ddf5613b02f; valaddr_reg:x16; val_offset:960; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 960, x17, x15, 640, x18)

inst_41:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xde8341376716f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x8f619a860e765 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5352cf9125058 and rm_val == 4  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fbde8341376716f; op2val:0x4018f619a860e765; op3val:0x7fe5352cf9125058; valaddr_reg:x16; val_offset:984; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x4, 0, x16, 984, x17, x15, 656, x18)

inst_42:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xde8341376716f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x8f619a860e765 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5352cf9125058 and rm_val == 3  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fbde8341376716f; op2val:0x4018f619a860e765; op3val:0x7fe5352cf9125058; valaddr_reg:x16; val_offset:1008; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x3, 0, x16, 1008, x17, x15, 672, x18)

inst_43:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xde8341376716f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x8f619a860e765 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5352cf9125058 and rm_val == 2  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fbde8341376716f; op2val:0x4018f619a860e765; op3val:0x7fe5352cf9125058; valaddr_reg:x16; val_offset:1032; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x2, 0, x16, 1032, x17, x15, 688, x18)

inst_44:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xde8341376716f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x8f619a860e765 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5352cf9125058 and rm_val == 1  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fbde8341376716f; op2val:0x4018f619a860e765; op3val:0x7fe5352cf9125058; valaddr_reg:x16; val_offset:1056; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x1, 0, x16, 1056, x17, x15, 704, x18)

inst_45:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xde8341376716f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x8f619a860e765 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5352cf9125058 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fbde8341376716f; op2val:0x4018f619a860e765; op3val:0x7fe5352cf9125058; valaddr_reg:x16; val_offset:1080; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1080, x17, x15, 720, x18)

inst_46:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc299b1ab6e737 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x564da0b97eac1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0cef4bccbe789 and rm_val == 4  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fec299b1ab6e737; op2val:0x3fb564da0b97eac1; op3val:0x7fe0cef4bccbe789; valaddr_reg:x16; val_offset:1104; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x4, 0, x16, 1104, x17, x15, 736, x18)

inst_47:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc299b1ab6e737 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x564da0b97eac1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0cef4bccbe789 and rm_val == 3  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fec299b1ab6e737; op2val:0x3fb564da0b97eac1; op3val:0x7fe0cef4bccbe789; valaddr_reg:x16; val_offset:1128; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x3, 0, x16, 1128, x17, x15, 752, x18)

inst_48:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc299b1ab6e737 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x564da0b97eac1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0cef4bccbe789 and rm_val == 2  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fec299b1ab6e737; op2val:0x3fb564da0b97eac1; op3val:0x7fe0cef4bccbe789; valaddr_reg:x16; val_offset:1152; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x2, 0, x16, 1152, x17, x15, 768, x18)

inst_49:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc299b1ab6e737 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x564da0b97eac1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0cef4bccbe789 and rm_val == 1  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fec299b1ab6e737; op2val:0x3fb564da0b97eac1; op3val:0x7fe0cef4bccbe789; valaddr_reg:x16; val_offset:1176; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x1, 0, x16, 1176, x17, x15, 784, x18)

inst_50:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc299b1ab6e737 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x564da0b97eac1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0cef4bccbe789 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fec299b1ab6e737; op2val:0x3fb564da0b97eac1; op3val:0x7fe0cef4bccbe789; valaddr_reg:x16; val_offset:1200; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1200, x17, x15, 800, x18)

inst_51:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2da5f3c7a7466 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x314d1298a6f71 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x6f5c1f001498f and rm_val == 4  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe2da5f3c7a7466; op2val:0x3fe314d1298a6f71; op3val:0x7fb6f5c1f001498f; valaddr_reg:x16; val_offset:1224; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x4, 0, x16, 1224, x17, x15, 816, x18)

inst_52:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2da5f3c7a7466 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x314d1298a6f71 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x6f5c1f001498f and rm_val == 3  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe2da5f3c7a7466; op2val:0x3fe314d1298a6f71; op3val:0x7fb6f5c1f001498f; valaddr_reg:x16; val_offset:1248; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x3, 0, x16, 1248, x17, x15, 832, x18)

inst_53:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2da5f3c7a7466 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x314d1298a6f71 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x6f5c1f001498f and rm_val == 2  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe2da5f3c7a7466; op2val:0x3fe314d1298a6f71; op3val:0x7fb6f5c1f001498f; valaddr_reg:x16; val_offset:1272; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x2, 0, x16, 1272, x17, x15, 848, x18)

inst_54:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2da5f3c7a7466 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x314d1298a6f71 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x6f5c1f001498f and rm_val == 1  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe2da5f3c7a7466; op2val:0x3fe314d1298a6f71; op3val:0x7fb6f5c1f001498f; valaddr_reg:x16; val_offset:1296; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x1, 0, x16, 1296, x17, x15, 864, x18)

inst_55:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2da5f3c7a7466 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x314d1298a6f71 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x6f5c1f001498f and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe2da5f3c7a7466; op2val:0x3fe314d1298a6f71; op3val:0x7fb6f5c1f001498f; valaddr_reg:x16; val_offset:1320; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1320, x17, x15, 880, x18)

inst_56:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x341836db80049 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x3384401752f12 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x37a0d12dbe9d7 and rm_val == 4  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe341836db80049; op2val:0xbfd3384401752f12; op3val:0x7fd37a0d12dbe9d7; valaddr_reg:x16; val_offset:1344; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x4, 0, x16, 1344, x17, x15, 896, x18)

inst_57:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x341836db80049 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x3384401752f12 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x37a0d12dbe9d7 and rm_val == 3  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe341836db80049; op2val:0xbfd3384401752f12; op3val:0x7fd37a0d12dbe9d7; valaddr_reg:x16; val_offset:1368; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x3, 0, x16, 1368, x17, x15, 912, x18)

inst_58:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x341836db80049 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x3384401752f12 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x37a0d12dbe9d7 and rm_val == 2  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe341836db80049; op2val:0xbfd3384401752f12; op3val:0x7fd37a0d12dbe9d7; valaddr_reg:x16; val_offset:1392; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x2, 0, x16, 1392, x17, x15, 928, x18)

inst_59:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x341836db80049 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x3384401752f12 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x37a0d12dbe9d7 and rm_val == 1  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe341836db80049; op2val:0xbfd3384401752f12; op3val:0x7fd37a0d12dbe9d7; valaddr_reg:x16; val_offset:1416; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x1, 0, x16, 1416, x17, x15, 944, x18)

inst_60:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x341836db80049 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x3384401752f12 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x37a0d12dbe9d7 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe341836db80049; op2val:0xbfd3384401752f12; op3val:0x7fd37a0d12dbe9d7; valaddr_reg:x16; val_offset:1440; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1440, x17, x15, 960, x18)

inst_61:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xd1aa6d115d25f and fs2 == 0 and fe2 == 0x402 and fm2 == 0xf369a7c247f89 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x720ca91f58bdf and rm_val == 4  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f9d1aa6d115d25f; op2val:0x402f369a7c247f89; op3val:0x7fd720ca91f58bdf; valaddr_reg:x16; val_offset:1464; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x4, 0, x16, 1464, x17, x15, 976, x18)

inst_62:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xd1aa6d115d25f and fs2 == 0 and fe2 == 0x402 and fm2 == 0xf369a7c247f89 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x720ca91f58bdf and rm_val == 3  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f9d1aa6d115d25f; op2val:0x402f369a7c247f89; op3val:0x7fd720ca91f58bdf; valaddr_reg:x16; val_offset:1488; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x3, 0, x16, 1488, x17, x15, 992, x18)

inst_63:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xd1aa6d115d25f and fs2 == 0 and fe2 == 0x402 and fm2 == 0xf369a7c247f89 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x720ca91f58bdf and rm_val == 2  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f9d1aa6d115d25f; op2val:0x402f369a7c247f89; op3val:0x7fd720ca91f58bdf; valaddr_reg:x16; val_offset:1512; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x2, 0, x16, 1512, x17, x15, 1008, x18)

inst_64:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xd1aa6d115d25f and fs2 == 0 and fe2 == 0x402 and fm2 == 0xf369a7c247f89 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x720ca91f58bdf and rm_val == 1  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f9d1aa6d115d25f; op2val:0x402f369a7c247f89; op3val:0x7fd720ca91f58bdf; valaddr_reg:x16; val_offset:1536; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x1, 0, x16, 1536, x17, x15, 1024, x18)

inst_65:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xd1aa6d115d25f and fs2 == 0 and fe2 == 0x402 and fm2 == 0xf369a7c247f89 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x720ca91f58bdf and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7f9d1aa6d115d25f; op2val:0x402f369a7c247f89; op3val:0x7fd720ca91f58bdf; valaddr_reg:x16; val_offset:1560; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1560, x17, x15, 1040, x18)

inst_66:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c6b24203c777 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1d17637fff0a7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf3e76cbaa48e2 and rm_val == 4  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe9c6b24203c777; op2val:0x3ff1d17637fff0a7; op3val:0x7fef3e76cbaa48e2; valaddr_reg:x16; val_offset:1584; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x4, 0, x16, 1584, x17, x15, 1056, x18)

inst_67:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c6b24203c777 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1d17637fff0a7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf3e76cbaa48e2 and rm_val == 3  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe9c6b24203c777; op2val:0x3ff1d17637fff0a7; op3val:0x7fef3e76cbaa48e2; valaddr_reg:x16; val_offset:1608; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x3, 0, x16, 1608, x17, x15, 1072, x18)

inst_68:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c6b24203c777 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1d17637fff0a7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf3e76cbaa48e2 and rm_val == 2  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe9c6b24203c777; op2val:0x3ff1d17637fff0a7; op3val:0x7fef3e76cbaa48e2; valaddr_reg:x16; val_offset:1632; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x2, 0, x16, 1632, x17, x15, 1088, x18)

inst_69:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c6b24203c777 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1d17637fff0a7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf3e76cbaa48e2 and rm_val == 1  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe9c6b24203c777; op2val:0x3ff1d17637fff0a7; op3val:0x7fef3e76cbaa48e2; valaddr_reg:x16; val_offset:1656; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x1, 0, x16, 1656, x17, x15, 1104, x18)

inst_70:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c6b24203c777 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1d17637fff0a7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf3e76cbaa48e2 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe9c6b24203c777; op2val:0x3ff1d17637fff0a7; op3val:0x7fef3e76cbaa48e2; valaddr_reg:x16; val_offset:1680; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1680, x17, x15, 1120, x18)

inst_71:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4a0550fe15035 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xdfea49765c51f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x655481791d37f and rm_val == 4  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe4a0550fe15035; op2val:0xbfddfea49765c51f; op3val:0x7fe655481791d37f; valaddr_reg:x16; val_offset:1704; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x4, 0, x16, 1704, x17, x15, 1136, x18)

inst_72:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4a0550fe15035 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xdfea49765c51f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x655481791d37f and rm_val == 3  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe4a0550fe15035; op2val:0xbfddfea49765c51f; op3val:0x7fe655481791d37f; valaddr_reg:x16; val_offset:1728; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x3, 0, x16, 1728, x17, x15, 1152, x18)

inst_73:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4a0550fe15035 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xdfea49765c51f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x655481791d37f and rm_val == 2  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe4a0550fe15035; op2val:0xbfddfea49765c51f; op3val:0x7fe655481791d37f; valaddr_reg:x16; val_offset:1752; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x2, 0, x16, 1752, x17, x15, 1168, x18)

inst_74:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4a0550fe15035 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xdfea49765c51f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x655481791d37f and rm_val == 1  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe4a0550fe15035; op2val:0xbfddfea49765c51f; op3val:0x7fe655481791d37f; valaddr_reg:x16; val_offset:1776; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x1, 0, x16, 1776, x17, x15, 1184, x18)

inst_75:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4a0550fe15035 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xdfea49765c51f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x655481791d37f and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe4a0550fe15035; op2val:0xbfddfea49765c51f; op3val:0x7fe655481791d37f; valaddr_reg:x16; val_offset:1800; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1800, x17, x15, 1200, x18)

inst_76:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd1ab73cc65f52 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1138dec46d0a2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x07805b64db437 and rm_val == 4  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fed1ab73cc65f52; op2val:0xbfe1138dec46d0a2; op3val:0x7fe07805b64db437; valaddr_reg:x16; val_offset:1824; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x4, 0, x16, 1824, x17, x15, 1216, x18)

inst_77:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd1ab73cc65f52 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1138dec46d0a2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x07805b64db437 and rm_val == 3  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fed1ab73cc65f52; op2val:0xbfe1138dec46d0a2; op3val:0x7fe07805b64db437; valaddr_reg:x16; val_offset:1848; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x3, 0, x16, 1848, x17, x15, 1232, x18)

inst_78:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd1ab73cc65f52 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1138dec46d0a2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x07805b64db437 and rm_val == 2  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fed1ab73cc65f52; op2val:0xbfe1138dec46d0a2; op3val:0x7fe07805b64db437; valaddr_reg:x16; val_offset:1872; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x2, 0, x16, 1872, x17, x15, 1248, x18)

inst_79:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd1ab73cc65f52 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1138dec46d0a2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x07805b64db437 and rm_val == 1  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fed1ab73cc65f52; op2val:0xbfe1138dec46d0a2; op3val:0x7fe07805b64db437; valaddr_reg:x16; val_offset:1896; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x1, 0, x16, 1896, x17, x15, 1264, x18)

inst_80:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd1ab73cc65f52 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1138dec46d0a2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x07805b64db437 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fed1ab73cc65f52; op2val:0xbfe1138dec46d0a2; op3val:0x7fe07805b64db437; valaddr_reg:x16; val_offset:1920; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1920, x17, x15, 1280, x18)

inst_81:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7107573e4c40b and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x7e3f5b58f8565 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xdd8fbb754b55c and rm_val == 4  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fd7107573e4c40b; op2val:0xbfc7e3f5b58f8565; op3val:0x7fedd8fbb754b55c; valaddr_reg:x16; val_offset:1944; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x4, 0, x16, 1944, x17, x15, 1296, x18)

inst_82:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7107573e4c40b and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x7e3f5b58f8565 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xdd8fbb754b55c and rm_val == 3  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fd7107573e4c40b; op2val:0xbfc7e3f5b58f8565; op3val:0x7fedd8fbb754b55c; valaddr_reg:x16; val_offset:1968; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x3, 0, x16, 1968, x17, x15, 1312, x18)

inst_83:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7107573e4c40b and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x7e3f5b58f8565 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xdd8fbb754b55c and rm_val == 2  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fd7107573e4c40b; op2val:0xbfc7e3f5b58f8565; op3val:0x7fedd8fbb754b55c; valaddr_reg:x16; val_offset:1992; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x2, 0, x16, 1992, x17, x15, 1328, x18)

inst_84:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7107573e4c40b and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x7e3f5b58f8565 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xdd8fbb754b55c and rm_val == 1  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fd7107573e4c40b; op2val:0xbfc7e3f5b58f8565; op3val:0x7fedd8fbb754b55c; valaddr_reg:x16; val_offset:2016; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x1, 0, x16, 2016, x17, x15, 1344, x18)
addi x16,x16,2040

inst_85:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7107573e4c40b and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x7e3f5b58f8565 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xdd8fbb754b55c and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fd7107573e4c40b; op2val:0xbfc7e3f5b58f8565; op3val:0x7fedd8fbb754b55c; valaddr_reg:x16; val_offset:0; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 0, x17, x15, 1360, x18)

inst_86:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x9b63fed3f1873 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xb729bd396aa0c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4f911cba6947d and rm_val == 4  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fc9b63fed3f1873; op2val:0xbffb729bd396aa0c; op3val:0x7fe4f911cba6947d; valaddr_reg:x16; val_offset:24; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x4, 0, x16, 24, x17, x15, 1376, x18)

inst_87:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x9b63fed3f1873 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xb729bd396aa0c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4f911cba6947d and rm_val == 3  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fc9b63fed3f1873; op2val:0xbffb729bd396aa0c; op3val:0x7fe4f911cba6947d; valaddr_reg:x16; val_offset:48; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x3, 0, x16, 48, x17, x15, 1392, x18)

inst_88:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x9b63fed3f1873 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xb729bd396aa0c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4f911cba6947d and rm_val == 2  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fc9b63fed3f1873; op2val:0xbffb729bd396aa0c; op3val:0x7fe4f911cba6947d; valaddr_reg:x16; val_offset:72; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x2, 0, x16, 72, x17, x15, 1408, x18)

inst_89:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x9b63fed3f1873 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xb729bd396aa0c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4f911cba6947d and rm_val == 1  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fc9b63fed3f1873; op2val:0xbffb729bd396aa0c; op3val:0x7fe4f911cba6947d; valaddr_reg:x16; val_offset:96; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x1, 0, x16, 96, x17, x15, 1424, x18)

inst_90:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x9b63fed3f1873 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xb729bd396aa0c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4f911cba6947d and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fc9b63fed3f1873; op2val:0xbffb729bd396aa0c; op3val:0x7fe4f911cba6947d; valaddr_reg:x16; val_offset:120; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 120, x17, x15, 1440, x18)

inst_91:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe71a5cc2ec78b and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xbad6a36570e13 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2d590539c6e1b and rm_val == 4  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fee71a5cc2ec78b; op2val:0xbfdbad6a36570e13; op3val:0x7fe2d590539c6e1b; valaddr_reg:x16; val_offset:144; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x4, 0, x16, 144, x17, x15, 1456, x18)

inst_92:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe71a5cc2ec78b and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xbad6a36570e13 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2d590539c6e1b and rm_val == 3  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fee71a5cc2ec78b; op2val:0xbfdbad6a36570e13; op3val:0x7fe2d590539c6e1b; valaddr_reg:x16; val_offset:168; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x3, 0, x16, 168, x17, x15, 1472, x18)

inst_93:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe71a5cc2ec78b and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xbad6a36570e13 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2d590539c6e1b and rm_val == 2  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fee71a5cc2ec78b; op2val:0xbfdbad6a36570e13; op3val:0x7fe2d590539c6e1b; valaddr_reg:x16; val_offset:192; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x2, 0, x16, 192, x17, x15, 1488, x18)

inst_94:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe71a5cc2ec78b and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xbad6a36570e13 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2d590539c6e1b and rm_val == 1  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fee71a5cc2ec78b; op2val:0xbfdbad6a36570e13; op3val:0x7fe2d590539c6e1b; valaddr_reg:x16; val_offset:216; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x1, 0, x16, 216, x17, x15, 1504, x18)

inst_95:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe71a5cc2ec78b and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xbad6a36570e13 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2d590539c6e1b and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fee71a5cc2ec78b; op2val:0xbfdbad6a36570e13; op3val:0x7fe2d590539c6e1b; valaddr_reg:x16; val_offset:240; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 240, x17, x15, 1520, x18)

inst_96:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x45141572f8653 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1dcbabcf61390 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x2a2c060c7c8c5 and rm_val == 4  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe45141572f8653; op2val:0xbff1dcbabcf61390; op3val:0x7fd2a2c060c7c8c5; valaddr_reg:x16; val_offset:264; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x4, 0, x16, 264, x17, x15, 1536, x18)

inst_97:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x45141572f8653 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1dcbabcf61390 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x2a2c060c7c8c5 and rm_val == 3  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe45141572f8653; op2val:0xbff1dcbabcf61390; op3val:0x7fd2a2c060c7c8c5; valaddr_reg:x16; val_offset:288; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x3, 0, x16, 288, x17, x15, 1552, x18)

inst_98:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x45141572f8653 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1dcbabcf61390 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x2a2c060c7c8c5 and rm_val == 2  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe45141572f8653; op2val:0xbff1dcbabcf61390; op3val:0x7fd2a2c060c7c8c5; valaddr_reg:x16; val_offset:312; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x2, 0, x16, 312, x17, x15, 1568, x18)

inst_99:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x45141572f8653 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1dcbabcf61390 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x2a2c060c7c8c5 and rm_val == 1  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe45141572f8653; op2val:0xbff1dcbabcf61390; op3val:0x7fd2a2c060c7c8c5; valaddr_reg:x16; val_offset:336; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x1, 0, x16, 336, x17, x15, 1584, x18)

inst_100:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x45141572f8653 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1dcbabcf61390 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x2a2c060c7c8c5 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe45141572f8653; op2val:0xbff1dcbabcf61390; op3val:0x7fd2a2c060c7c8c5; valaddr_reg:x16; val_offset:360; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 360, x17, x15, 1600, x18)

inst_101:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x801fd982d9eb7 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x11f2545056564 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x93c9b1b3642af and rm_val == 4  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fb801fd982d9eb7; op2val:0xc0211f2545056564; op3val:0x7fc93c9b1b3642af; valaddr_reg:x16; val_offset:384; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x4, 0, x16, 384, x17, x15, 1616, x18)

inst_102:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x801fd982d9eb7 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x11f2545056564 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x93c9b1b3642af and rm_val == 3  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fb801fd982d9eb7; op2val:0xc0211f2545056564; op3val:0x7fc93c9b1b3642af; valaddr_reg:x16; val_offset:408; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x3, 0, x16, 408, x17, x15, 1632, x18)

inst_103:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x801fd982d9eb7 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x11f2545056564 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x93c9b1b3642af and rm_val == 2  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fb801fd982d9eb7; op2val:0xc0211f2545056564; op3val:0x7fc93c9b1b3642af; valaddr_reg:x16; val_offset:432; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x2, 0, x16, 432, x17, x15, 1648, x18)

inst_104:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x801fd982d9eb7 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x11f2545056564 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x93c9b1b3642af and rm_val == 1  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fb801fd982d9eb7; op2val:0xc0211f2545056564; op3val:0x7fc93c9b1b3642af; valaddr_reg:x16; val_offset:456; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x1, 0, x16, 456, x17, x15, 1664, x18)

inst_105:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x801fd982d9eb7 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x11f2545056564 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x93c9b1b3642af and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fb801fd982d9eb7; op2val:0xc0211f2545056564; op3val:0x7fc93c9b1b3642af; valaddr_reg:x16; val_offset:480; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 480, x17, x15, 1680, x18)

inst_106:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c0c529007f92 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x60f45914c4e4a and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc7e5c3598d2dd and rm_val == 4  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe9c0c529007f92; op2val:0xbfe60f45914c4e4a; op3val:0x7fdc7e5c3598d2dd; valaddr_reg:x16; val_offset:504; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x4, 0, x16, 504, x17, x15, 1696, x18)

inst_107:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c0c529007f92 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x60f45914c4e4a and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc7e5c3598d2dd and rm_val == 3  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe9c0c529007f92; op2val:0xbfe60f45914c4e4a; op3val:0x7fdc7e5c3598d2dd; valaddr_reg:x16; val_offset:528; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x3, 0, x16, 528, x17, x15, 1712, x18)

inst_108:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c0c529007f92 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x60f45914c4e4a and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc7e5c3598d2dd and rm_val == 2  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe9c0c529007f92; op2val:0xbfe60f45914c4e4a; op3val:0x7fdc7e5c3598d2dd; valaddr_reg:x16; val_offset:552; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x2, 0, x16, 552, x17, x15, 1728, x18)

inst_109:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c0c529007f92 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x60f45914c4e4a and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc7e5c3598d2dd and rm_val == 1  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe9c0c529007f92; op2val:0xbfe60f45914c4e4a; op3val:0x7fdc7e5c3598d2dd; valaddr_reg:x16; val_offset:576; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x1, 0, x16, 576, x17, x15, 1744, x18)

inst_110:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c0c529007f92 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x60f45914c4e4a and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc7e5c3598d2dd and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe9c0c529007f92; op2val:0xbfe60f45914c4e4a; op3val:0x7fdc7e5c3598d2dd; valaddr_reg:x16; val_offset:600; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 600, x17, x15, 1760, x18)

inst_111:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x7d7ab2b96a7d7 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x127b826ba798f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x99bea81a3c895 and rm_val == 4  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fb7d7ab2b96a7d7; op2val:0xc00127b826ba798f; op3val:0x7fe99bea81a3c895; valaddr_reg:x16; val_offset:624; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x4, 0, x16, 624, x17, x15, 1776, x18)

inst_112:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x7d7ab2b96a7d7 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x127b826ba798f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x99bea81a3c895 and rm_val == 3  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fb7d7ab2b96a7d7; op2val:0xc00127b826ba798f; op3val:0x7fe99bea81a3c895; valaddr_reg:x16; val_offset:648; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x3, 0, x16, 648, x17, x15, 1792, x18)

inst_113:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x7d7ab2b96a7d7 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x127b826ba798f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x99bea81a3c895 and rm_val == 2  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fb7d7ab2b96a7d7; op2val:0xc00127b826ba798f; op3val:0x7fe99bea81a3c895; valaddr_reg:x16; val_offset:672; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x2, 0, x16, 672, x17, x15, 1808, x18)

inst_114:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x7d7ab2b96a7d7 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x127b826ba798f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x99bea81a3c895 and rm_val == 1  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fb7d7ab2b96a7d7; op2val:0xc00127b826ba798f; op3val:0x7fe99bea81a3c895; valaddr_reg:x16; val_offset:696; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x1, 0, x16, 696, x17, x15, 1824, x18)

inst_115:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x7d7ab2b96a7d7 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x127b826ba798f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x99bea81a3c895 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fb7d7ab2b96a7d7; op2val:0xc00127b826ba798f; op3val:0x7fe99bea81a3c895; valaddr_reg:x16; val_offset:720; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 720, x17, x15, 1840, x18)

inst_116:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb045c5db2e460 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x92eca9f589e22 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x57a2cffec0101 and rm_val == 4  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7feb045c5db2e460; op2val:0xbfe92eca9f589e22; op3val:0x7fd57a2cffec0101; valaddr_reg:x16; val_offset:744; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x4, 0, x16, 744, x17, x15, 1856, x18)

inst_117:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb045c5db2e460 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x92eca9f589e22 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x57a2cffec0101 and rm_val == 3  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7feb045c5db2e460; op2val:0xbfe92eca9f589e22; op3val:0x7fd57a2cffec0101; valaddr_reg:x16; val_offset:768; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x3, 0, x16, 768, x17, x15, 1872, x18)

inst_118:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb045c5db2e460 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x92eca9f589e22 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x57a2cffec0101 and rm_val == 2  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7feb045c5db2e460; op2val:0xbfe92eca9f589e22; op3val:0x7fd57a2cffec0101; valaddr_reg:x16; val_offset:792; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x2, 0, x16, 792, x17, x15, 1888, x18)

inst_119:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb045c5db2e460 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x92eca9f589e22 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x57a2cffec0101 and rm_val == 1  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7feb045c5db2e460; op2val:0xbfe92eca9f589e22; op3val:0x7fd57a2cffec0101; valaddr_reg:x16; val_offset:816; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x1, 0, x16, 816, x17, x15, 1904, x18)

inst_120:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb045c5db2e460 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x92eca9f589e22 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x57a2cffec0101 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7feb045c5db2e460; op2val:0xbfe92eca9f589e22; op3val:0x7fd57a2cffec0101; valaddr_reg:x16; val_offset:840; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 840, x17, x15, 1920, x18)

inst_121:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9b52b2a70b02a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x90a1b3186f414 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5f12be85a3941 and rm_val == 4  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe9b52b2a70b02a; op2val:0xbfd90a1b3186f414; op3val:0x7fe5f12be85a3941; valaddr_reg:x16; val_offset:864; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x4, 0, x16, 864, x17, x15, 1936, x18)

inst_122:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9b52b2a70b02a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x90a1b3186f414 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5f12be85a3941 and rm_val == 3  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe9b52b2a70b02a; op2val:0xbfd90a1b3186f414; op3val:0x7fe5f12be85a3941; valaddr_reg:x16; val_offset:888; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x3, 0, x16, 888, x17, x15, 1952, x18)

inst_123:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9b52b2a70b02a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x90a1b3186f414 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5f12be85a3941 and rm_val == 2  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe9b52b2a70b02a; op2val:0xbfd90a1b3186f414; op3val:0x7fe5f12be85a3941; valaddr_reg:x16; val_offset:912; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x2, 0, x16, 912, x17, x15, 1968, x18)

inst_124:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9b52b2a70b02a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x90a1b3186f414 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5f12be85a3941 and rm_val == 1  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe9b52b2a70b02a; op2val:0xbfd90a1b3186f414; op3val:0x7fe5f12be85a3941; valaddr_reg:x16; val_offset:936; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x1, 0, x16, 936, x17, x15, 1984, x18)

inst_125:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9b52b2a70b02a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x90a1b3186f414 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5f12be85a3941 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe9b52b2a70b02a; op2val:0xbfd90a1b3186f414; op3val:0x7fe5f12be85a3941; valaddr_reg:x16; val_offset:960; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 960, x17, x15, 2000, x18)

inst_126:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c39382ea6198 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd3132b6e16bb3 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0fe4c054d9e8b and rm_val == 4  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe9c39382ea6198; op2val:0xbfed3132b6e16bb3; op3val:0x7fd0fe4c054d9e8b; valaddr_reg:x16; val_offset:984; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x4, 0, x16, 984, x17, x15, 2016, x18)
RVTEST_SIGBASE(x15,signature_x15_2)

inst_127:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c39382ea6198 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd3132b6e16bb3 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0fe4c054d9e8b and rm_val == 3  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe9c39382ea6198; op2val:0xbfed3132b6e16bb3; op3val:0x7fd0fe4c054d9e8b; valaddr_reg:x16; val_offset:1008; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x3, 0, x16, 1008, x17, x15, 0, x18)

inst_128:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c39382ea6198 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd3132b6e16bb3 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0fe4c054d9e8b and rm_val == 2  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe9c39382ea6198; op2val:0xbfed3132b6e16bb3; op3val:0x7fd0fe4c054d9e8b; valaddr_reg:x16; val_offset:1032; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x2, 0, x16, 1032, x17, x15, 16, x18)

inst_129:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c39382ea6198 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd3132b6e16bb3 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0fe4c054d9e8b and rm_val == 1  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe9c39382ea6198; op2val:0xbfed3132b6e16bb3; op3val:0x7fd0fe4c054d9e8b; valaddr_reg:x16; val_offset:1056; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x1, 0, x16, 1056, x17, x15, 32, x18)

inst_130:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c39382ea6198 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd3132b6e16bb3 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0fe4c054d9e8b and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe9c39382ea6198; op2val:0xbfed3132b6e16bb3; op3val:0x7fd0fe4c054d9e8b; valaddr_reg:x16; val_offset:1080; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1080, x17, x15, 48, x18)

inst_131:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x8b3ba7903c2ab and fs2 == 1 and fe2 == 0x400 and fm2 == 0x2812387ceaf57 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x1b73726cc4ff0 and rm_val == 4  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fc8b3ba7903c2ab; op2val:0xc002812387ceaf57; op3val:0x7fe1b73726cc4ff0; valaddr_reg:x16; val_offset:1104; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x4, 0, x16, 1104, x17, x15, 64, x18)

inst_132:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x8b3ba7903c2ab and fs2 == 1 and fe2 == 0x400 and fm2 == 0x2812387ceaf57 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x1b73726cc4ff0 and rm_val == 3  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fc8b3ba7903c2ab; op2val:0xc002812387ceaf57; op3val:0x7fe1b73726cc4ff0; valaddr_reg:x16; val_offset:1128; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x3, 0, x16, 1128, x17, x15, 80, x18)

inst_133:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x8b3ba7903c2ab and fs2 == 1 and fe2 == 0x400 and fm2 == 0x2812387ceaf57 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x1b73726cc4ff0 and rm_val == 2  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fc8b3ba7903c2ab; op2val:0xc002812387ceaf57; op3val:0x7fe1b73726cc4ff0; valaddr_reg:x16; val_offset:1152; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x2, 0, x16, 1152, x17, x15, 96, x18)

inst_134:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x8b3ba7903c2ab and fs2 == 1 and fe2 == 0x400 and fm2 == 0x2812387ceaf57 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x1b73726cc4ff0 and rm_val == 1  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fc8b3ba7903c2ab; op2val:0xc002812387ceaf57; op3val:0x7fe1b73726cc4ff0; valaddr_reg:x16; val_offset:1176; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x1, 0, x16, 1176, x17, x15, 112, x18)

inst_135:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x8b3ba7903c2ab and fs2 == 1 and fe2 == 0x400 and fm2 == 0x2812387ceaf57 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x1b73726cc4ff0 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fc8b3ba7903c2ab; op2val:0xc002812387ceaf57; op3val:0x7fe1b73726cc4ff0; valaddr_reg:x16; val_offset:1200; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1200, x17, x15, 128, x18)

inst_136:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x139cbde283143 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2e6942188ddd7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5d35e2c6078a3 and rm_val == 4  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe139cbde283143; op2val:0xbfe2e6942188ddd7; op3val:0x7fe5d35e2c6078a3; valaddr_reg:x16; val_offset:1224; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x4, 0, x16, 1224, x17, x15, 144, x18)

inst_137:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x139cbde283143 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2e6942188ddd7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5d35e2c6078a3 and rm_val == 3  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe139cbde283143; op2val:0xbfe2e6942188ddd7; op3val:0x7fe5d35e2c6078a3; valaddr_reg:x16; val_offset:1248; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x3, 0, x16, 1248, x17, x15, 160, x18)

inst_138:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x139cbde283143 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2e6942188ddd7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5d35e2c6078a3 and rm_val == 2  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe139cbde283143; op2val:0xbfe2e6942188ddd7; op3val:0x7fe5d35e2c6078a3; valaddr_reg:x16; val_offset:1272; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x2, 0, x16, 1272, x17, x15, 176, x18)

inst_139:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x139cbde283143 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2e6942188ddd7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5d35e2c6078a3 and rm_val == 1  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe139cbde283143; op2val:0xbfe2e6942188ddd7; op3val:0x7fe5d35e2c6078a3; valaddr_reg:x16; val_offset:1296; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x1, 0, x16, 1296, x17, x15, 192, x18)

inst_140:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8276674380fc3 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x80081570b13b6 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x8e816c2502d73 and rm_val == 4  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fd8276674380fc3; op2val:0x40280081570b13b6; op3val:0x7fd8e816c2502d73; valaddr_reg:x16; val_offset:1320; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x4, 0, x16, 1320, x17, x15, 208, x18)

inst_141:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8276674380fc3 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x80081570b13b6 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x8e816c2502d73 and rm_val == 3  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fd8276674380fc3; op2val:0x40280081570b13b6; op3val:0x7fd8e816c2502d73; valaddr_reg:x16; val_offset:1344; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x3, 0, x16, 1344, x17, x15, 224, x18)

inst_142:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8276674380fc3 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x80081570b13b6 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x8e816c2502d73 and rm_val == 2  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fd8276674380fc3; op2val:0x40280081570b13b6; op3val:0x7fd8e816c2502d73; valaddr_reg:x16; val_offset:1368; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x2, 0, x16, 1368, x17, x15, 240, x18)

inst_143:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8276674380fc3 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x80081570b13b6 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x8e816c2502d73 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fd8276674380fc3; op2val:0x40280081570b13b6; op3val:0x7fd8e816c2502d73; valaddr_reg:x16; val_offset:1392; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1392, x17, x15, 256, x18)

inst_144:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3d93686797715 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5dbeac1d0025d and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x3978b52ff3f23 and rm_val == 4  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe3d93686797715; op2val:0xbfe5dbeac1d0025d; op3val:0x7fd3978b52ff3f23; valaddr_reg:x16; val_offset:1416; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x4, 0, x16, 1416, x17, x15, 272, x18)

inst_145:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3d93686797715 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5dbeac1d0025d and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x3978b52ff3f23 and rm_val == 2  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe3d93686797715; op2val:0xbfe5dbeac1d0025d; op3val:0x7fd3978b52ff3f23; valaddr_reg:x16; val_offset:1440; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x2, 0, x16, 1440, x17, x15, 288, x18)

inst_146:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3d93686797715 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5dbeac1d0025d and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x3978b52ff3f23 and rm_val == 1  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe3d93686797715; op2val:0xbfe5dbeac1d0025d; op3val:0x7fd3978b52ff3f23; valaddr_reg:x16; val_offset:1464; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x1, 0, x16, 1464, x17, x15, 304, x18)

inst_147:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3d93686797715 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5dbeac1d0025d and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x3978b52ff3f23 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe3d93686797715; op2val:0xbfe5dbeac1d0025d; op3val:0x7fd3978b52ff3f23; valaddr_reg:x16; val_offset:1488; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1488, x17, x15, 320, x18)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_fp:
.dword 0x7fe139cbde283143
.dword 0xbfe2e6942188ddd7
.dword 0x7fe5d35e2c6078a3
.dword 0x7fd8276674380fc3
.dword 0x7fd8276674380fc3
.dword 0x7fd8276674380fc3
.dword 0x7fd8276674380fc3
.dword 0x40280081570b13b6
.dword 0x7fd8276674380fc3
.dword 0x7fd8276674380fc3
.dword 0x40280081570b13b6
.dword 0x7fd8276674380fc3
.dword 0x7fd8276674380fc3
.dword 0x40280081570b13b6
.dword 0x7fd8e816c2502d73
.dword 0x7fd8276674380fc3
.dword 0x40280081570b13b6
.dword 0x40280081570b13b6
.dword 0x7fe3d93686797715
.dword 0x7fe3d93686797715
.dword 0x7fd3978b52ff3f23
.dword 0x7fe3d93686797715
.dword 0xbfe5dbeac1d0025d
.dword 0x7fd3978b52ff3f23
.dword 0x7fe3d93686797715
.dword 0x7fe3d93686797715
.dword 0x7fd3978b52ff3f23
.dword 0x7fe3d93686797715
.dword 0x7fe3d93686797715
.dword 0x7fe3d93686797715
.dword 0x7fe3d93686797715
.dword 0xbfe5dbeac1d0025d
.dword 0xbfe5dbeac1d0025d
.dword 0x7fd54e6e64764369
.dword 0x4014808cf6dfa705
.dword 0x7fecf127a6af77f2
.dword 0x7fd54e6e64764369
.dword 0x4014808cf6dfa705
.dword 0x7fecf127a6af77f2
.dword 0x7fd54e6e64764369
.dword 0x4014808cf6dfa705
.dword 0x7fecf127a6af77f2
.dword 0x7fd54e6e64764369
.dword 0x4014808cf6dfa705
.dword 0x7fecf127a6af77f2
.dword 0x7fd54e6e64764369
.dword 0x4014808cf6dfa705
.dword 0x7fecf127a6af77f2
.dword 0x7fe8e5d8dcad33c4
.dword 0xc00bdd0bee328bc8
.dword 0x7f9177d952f13e9f
.dword 0x7fe8e5d8dcad33c4
.dword 0xc00bdd0bee328bc8
.dword 0x7f9177d952f13e9f
.dword 0x7fe8e5d8dcad33c4
.dword 0xc00bdd0bee328bc8
.dword 0x7f9177d952f13e9f
.dword 0x7fe8e5d8dcad33c4
.dword 0xc00bdd0bee328bc8
.dword 0x7f9177d952f13e9f
.dword 0x7fe8e5d8dcad33c4
.dword 0xc00bdd0bee328bc8
.dword 0x7f9177d952f13e9f
.dword 0x7fe657d95216ac01
.dword 0x3ff1ef5830db8da2
.dword 0x7f89a5803051b37f
.dword 0x7fe657d95216ac01
.dword 0x3ff1ef5830db8da2
.dword 0x7f89a5803051b37f
.dword 0x7fe657d95216ac01
.dword 0x3ff1ef5830db8da2
.dword 0x7f89a5803051b37f
.dword 0x7fe657d95216ac01
.dword 0x3ff1ef5830db8da2
.dword 0x7f89a5803051b37f
.dword 0x7fe657d95216ac01
.dword 0x3ff1ef5830db8da2
.dword 0x7f89a5803051b37f
.dword 0x7fcadd854d58145f
.dword 0xc02b4f8ecba5f106
.dword 0x7febb27f4381021f
.dword 0x7fcadd854d58145f
.dword 0xc02b4f8ecba5f106
.dword 0x7febb27f4381021f
.dword 0x7fcadd854d58145f
.dword 0xc02b4f8ecba5f106
.dword 0x7febb27f4381021f
.dword 0x7fcadd854d58145f
.dword 0xc02b4f8ecba5f106
.dword 0x7febb27f4381021f
.dword 0x7fcadd854d58145f
.dword 0xc02b4f8ecba5f106
.dword 0x7febb27f4381021f
.dword 0x7fdef5aa91c82b3d
.dword 0x3fdc52a83cb73c6b
.dword 0x7fc1ad71498eb7bb
.dword 0x7fdef5aa91c82b3d
.dword 0x3fdc52a83cb73c6b
.dword 0x7fc1ad71498eb7bb
.dword 0x7fdef5aa91c82b3d
.dword 0x3fdc52a83cb73c6b
.dword 0x7fc1ad71498eb7bb
.dword 0x7fdef5aa91c82b3d
.dword 0x3fdc52a83cb73c6b
.dword 0x7fc1ad71498eb7bb
.dword 0x7fdef5aa91c82b3d
.dword 0x3fdc52a83cb73c6b
.dword 0x7fc1ad71498eb7bb
.dword 0x7fd3fc6805c084d1
.dword 0xbfec1494b223d275
.dword 0x7fc91ddf5613b02f
.dword 0x7fd3fc6805c084d1
.dword 0xbfec1494b223d275
.dword 0x7fc91ddf5613b02f
.dword 0x7fd3fc6805c084d1
.dword 0xbfec1494b223d275
.dword 0x7fc91ddf5613b02f
.dword 0x7fd3fc6805c084d1
.dword 0xbfec1494b223d275
.dword 0x7fc91ddf5613b02f
.dword 0x7fd3fc6805c084d1
.dword 0xbfec1494b223d275
.dword 0x7fc91ddf5613b02f
.dword 0x7fbde8341376716f
.dword 0x4018f619a860e765
.dword 0x7fe5352cf9125058
.dword 0x7fbde8341376716f
.dword 0x4018f619a860e765
.dword 0x7fe5352cf9125058
.dword 0x7fbde8341376716f
.dword 0x4018f619a860e765
.dword 0x7fe5352cf9125058
.dword 0x7fbde8341376716f
.dword 0x4018f619a860e765
.dword 0x7fe5352cf9125058
.dword 0x7fbde8341376716f
.dword 0x4018f619a860e765
.dword 0x7fe5352cf9125058
.dword 0x7fec299b1ab6e737
.dword 0x3fb564da0b97eac1
.dword 0x7fe0cef4bccbe789
.dword 0x7fec299b1ab6e737
.dword 0x3fb564da0b97eac1
.dword 0x7fe0cef4bccbe789
.dword 0x7fec299b1ab6e737
.dword 0x3fb564da0b97eac1
.dword 0x7fe0cef4bccbe789
.dword 0x7fec299b1ab6e737
.dword 0x3fb564da0b97eac1
.dword 0x7fe0cef4bccbe789
.dword 0x7fec299b1ab6e737
.dword 0x3fb564da0b97eac1
.dword 0x7fe0cef4bccbe789
.dword 0x7fe2da5f3c7a7466
.dword 0x3fe314d1298a6f71
.dword 0x7fb6f5c1f001498f
.dword 0x7fe2da5f3c7a7466
.dword 0x3fe314d1298a6f71
.dword 0x7fb6f5c1f001498f
.dword 0x7fe2da5f3c7a7466
.dword 0x3fe314d1298a6f71
.dword 0x7fb6f5c1f001498f
.dword 0x7fe2da5f3c7a7466
.dword 0x3fe314d1298a6f71
.dword 0x7fb6f5c1f001498f
.dword 0x7fe2da5f3c7a7466
.dword 0x3fe314d1298a6f71
.dword 0x7fb6f5c1f001498f
.dword 0x7fe341836db80049
.dword 0xbfd3384401752f12
.dword 0x7fd37a0d12dbe9d7
.dword 0x7fe341836db80049
.dword 0xbfd3384401752f12
.dword 0x7fd37a0d12dbe9d7
.dword 0x7fe341836db80049
.dword 0xbfd3384401752f12
.dword 0x7fd37a0d12dbe9d7
.dword 0x7fe341836db80049
.dword 0xbfd3384401752f12
.dword 0x7fd37a0d12dbe9d7
.dword 0x7fe341836db80049
.dword 0xbfd3384401752f12
.dword 0x7fd37a0d12dbe9d7
.dword 0x7f9d1aa6d115d25f
.dword 0x402f369a7c247f89
.dword 0x7fd720ca91f58bdf
.dword 0x7f9d1aa6d115d25f
.dword 0x402f369a7c247f89
.dword 0x7fd720ca91f58bdf
.dword 0x7f9d1aa6d115d25f
.dword 0x402f369a7c247f89
.dword 0x7fd720ca91f58bdf
.dword 0x7f9d1aa6d115d25f
.dword 0x402f369a7c247f89
.dword 0x7fd720ca91f58bdf
.dword 0x7f9d1aa6d115d25f
.dword 0x402f369a7c247f89
.dword 0x7fd720ca91f58bdf
.dword 0x7fe9c6b24203c777
.dword 0x3ff1d17637fff0a7
.dword 0x7fef3e76cbaa48e2
.dword 0x7fe9c6b24203c777
.dword 0x3ff1d17637fff0a7
.dword 0x7fef3e76cbaa48e2
.dword 0x7fe9c6b24203c777
.dword 0x3ff1d17637fff0a7
.dword 0x7fef3e76cbaa48e2
.dword 0x7fe9c6b24203c777
.dword 0x3ff1d17637fff0a7
.dword 0x7fef3e76cbaa48e2
.dword 0x7fe9c6b24203c777
.dword 0x3ff1d17637fff0a7
.dword 0x7fef3e76cbaa48e2
.dword 0x7fe4a0550fe15035
.dword 0xbfddfea49765c51f
.dword 0x7fe655481791d37f
.dword 0x7fe4a0550fe15035
.dword 0xbfddfea49765c51f
.dword 0x7fe655481791d37f
.dword 0x7fe4a0550fe15035
.dword 0xbfddfea49765c51f
.dword 0x7fe655481791d37f
.dword 0x7fe4a0550fe15035
.dword 0xbfddfea49765c51f
.dword 0x7fe655481791d37f
.dword 0x7fe4a0550fe15035
.dword 0xbfddfea49765c51f
.dword 0x7fe655481791d37f
.dword 0x7fed1ab73cc65f52
.dword 0xbfe1138dec46d0a2
.dword 0x7fe07805b64db437
.dword 0x7fed1ab73cc65f52
.dword 0xbfe1138dec46d0a2
.dword 0x7fe07805b64db437
.dword 0x7fed1ab73cc65f52
.dword 0xbfe1138dec46d0a2
.dword 0x7fe07805b64db437
.dword 0x7fed1ab73cc65f52
.dword 0xbfe1138dec46d0a2
.dword 0x7fe07805b64db437
.dword 0x7fed1ab73cc65f52
.dword 0xbfe1138dec46d0a2
.dword 0x7fe07805b64db437
.dword 0x7fd7107573e4c40b
.dword 0xbfc7e3f5b58f8565
.dword 0x7fedd8fbb754b55c
.dword 0x7fd7107573e4c40b
.dword 0xbfc7e3f5b58f8565
.dword 0x7fedd8fbb754b55c
.dword 0x7fd7107573e4c40b
.dword 0xbfc7e3f5b58f8565
.dword 0x7fedd8fbb754b55c
.dword 0x7fd7107573e4c40b
.dword 0xbfc7e3f5b58f8565
.dword 0x7fedd8fbb754b55c
.dword 0x7fd7107573e4c40b
.dword 0xbfc7e3f5b58f8565
.dword 0x7fedd8fbb754b55c
.dword 0x7fc9b63fed3f1873
.dword 0xbffb729bd396aa0c
.dword 0x7fe4f911cba6947d
.dword 0x7fc9b63fed3f1873
.dword 0xbffb729bd396aa0c
.dword 0x7fe4f911cba6947d
.dword 0x7fc9b63fed3f1873
.dword 0xbffb729bd396aa0c
.dword 0x7fe4f911cba6947d
.dword 0x7fc9b63fed3f1873
.dword 0xbffb729bd396aa0c
.dword 0x7fe4f911cba6947d
.dword 0x7fc9b63fed3f1873
.dword 0xbffb729bd396aa0c
.dword 0x7fe4f911cba6947d
.dword 0x7fee71a5cc2ec78b
.dword 0xbfdbad6a36570e13
.dword 0x7fe2d590539c6e1b
.dword 0x7fee71a5cc2ec78b
.dword 0xbfdbad6a36570e13
.dword 0x7fe2d590539c6e1b
.dword 0x7fee71a5cc2ec78b
.dword 0xbfdbad6a36570e13
.dword 0x7fe2d590539c6e1b
.dword 0x7fee71a5cc2ec78b
.dword 0xbfdbad6a36570e13
.dword 0x7fe2d590539c6e1b
.dword 0x7fee71a5cc2ec78b
.dword 0xbfdbad6a36570e13
.dword 0x7fe2d590539c6e1b
.dword 0x7fe45141572f8653
.dword 0xbff1dcbabcf61390
.dword 0x7fd2a2c060c7c8c5
.dword 0x7fe45141572f8653
.dword 0xbff1dcbabcf61390
.dword 0x7fd2a2c060c7c8c5
.dword 0x7fe45141572f8653
.dword 0xbff1dcbabcf61390
.dword 0x7fd2a2c060c7c8c5
.dword 0x7fe45141572f8653
.dword 0xbff1dcbabcf61390
.dword 0x7fd2a2c060c7c8c5
.dword 0x7fe45141572f8653
.dword 0xbff1dcbabcf61390
.dword 0x7fd2a2c060c7c8c5
.dword 0x7fb801fd982d9eb7
.dword 0xc0211f2545056564
.dword 0x7fc93c9b1b3642af
.dword 0x7fb801fd982d9eb7
.dword 0xc0211f2545056564
.dword 0x7fc93c9b1b3642af
.dword 0x7fb801fd982d9eb7
.dword 0xc0211f2545056564
.dword 0x7fc93c9b1b3642af
.dword 0x7fb801fd982d9eb7
.dword 0xc0211f2545056564
.dword 0x7fc93c9b1b3642af
.dword 0x7fb801fd982d9eb7
.dword 0xc0211f2545056564
.dword 0x7fc93c9b1b3642af
.dword 0x7fe9c0c529007f92
.dword 0xbfe60f45914c4e4a
.dword 0x7fdc7e5c3598d2dd
.dword 0x7fe9c0c529007f92
.dword 0xbfe60f45914c4e4a
.dword 0x7fdc7e5c3598d2dd
.dword 0x7fe9c0c529007f92
.dword 0xbfe60f45914c4e4a
.dword 0x7fdc7e5c3598d2dd
.dword 0x7fe9c0c529007f92
.dword 0xbfe60f45914c4e4a
.dword 0x7fdc7e5c3598d2dd
.dword 0x7fe9c0c529007f92
.dword 0xbfe60f45914c4e4a
.dword 0x7fdc7e5c3598d2dd
.dword 0x7fb7d7ab2b96a7d7
.dword 0xc00127b826ba798f
.dword 0x7fe99bea81a3c895
.dword 0x7fb7d7ab2b96a7d7
.dword 0xc00127b826ba798f
.dword 0x7fe99bea81a3c895
.dword 0x7fb7d7ab2b96a7d7
.dword 0xc00127b826ba798f
.dword 0x7fe99bea81a3c895
.dword 0x7fb7d7ab2b96a7d7
.dword 0xc00127b826ba798f
.dword 0x7fe99bea81a3c895
.dword 0x7fb7d7ab2b96a7d7
.dword 0xc00127b826ba798f
.dword 0x7fe99bea81a3c895
.dword 0x7feb045c5db2e460
.dword 0xbfe92eca9f589e22
.dword 0x7fd57a2cffec0101
.dword 0x7feb045c5db2e460
.dword 0xbfe92eca9f589e22
.dword 0x7fd57a2cffec0101
.dword 0x7feb045c5db2e460
.dword 0xbfe92eca9f589e22
.dword 0x7fd57a2cffec0101
.dword 0x7feb045c5db2e460
.dword 0xbfe92eca9f589e22
.dword 0x7fd57a2cffec0101
.dword 0x7feb045c5db2e460
.dword 0xbfe92eca9f589e22
.dword 0x7fd57a2cffec0101
.dword 0x7fe9b52b2a70b02a
.dword 0xbfd90a1b3186f414
.dword 0x7fe5f12be85a3941
.dword 0x7fe9b52b2a70b02a
.dword 0xbfd90a1b3186f414
.dword 0x7fe5f12be85a3941
.dword 0x7fe9b52b2a70b02a
.dword 0xbfd90a1b3186f414
.dword 0x7fe5f12be85a3941
.dword 0x7fe9b52b2a70b02a
.dword 0xbfd90a1b3186f414
.dword 0x7fe5f12be85a3941
.dword 0x7fe9b52b2a70b02a
.dword 0xbfd90a1b3186f414
.dword 0x7fe5f12be85a3941
.dword 0x7fe9c39382ea6198
.dword 0xbfed3132b6e16bb3
.dword 0x7fd0fe4c054d9e8b
.dword 0x7fe9c39382ea6198
.dword 0xbfed3132b6e16bb3
.dword 0x7fd0fe4c054d9e8b
.dword 0x7fe9c39382ea6198
.dword 0xbfed3132b6e16bb3
.dword 0x7fd0fe4c054d9e8b
.dword 0x7fe9c39382ea6198
.dword 0xbfed3132b6e16bb3
.dword 0x7fd0fe4c054d9e8b
.dword 0x7fe9c39382ea6198
.dword 0xbfed3132b6e16bb3
.dword 0x7fd0fe4c054d9e8b
.dword 0x7fc8b3ba7903c2ab
.dword 0xc002812387ceaf57
.dword 0x7fe1b73726cc4ff0
.dword 0x7fc8b3ba7903c2ab
.dword 0xc002812387ceaf57
.dword 0x7fe1b73726cc4ff0
.dword 0x7fc8b3ba7903c2ab
.dword 0xc002812387ceaf57
.dword 0x7fe1b73726cc4ff0
.dword 0x7fc8b3ba7903c2ab
.dword 0xc002812387ceaf57
.dword 0x7fe1b73726cc4ff0
.dword 0x7fc8b3ba7903c2ab
.dword 0xc002812387ceaf57
.dword 0x7fe1b73726cc4ff0
.dword 0x7fe139cbde283143
.dword 0xbfe2e6942188ddd7
.dword 0x7fe5d35e2c6078a3
.dword 0x7fe139cbde283143
.dword 0xbfe2e6942188ddd7
.dword 0x7fe5d35e2c6078a3
.dword 0x7fe139cbde283143
.dword 0xbfe2e6942188ddd7
.dword 0x7fe5d35e2c6078a3
.dword 0x7fe139cbde283143
.dword 0xbfe2e6942188ddd7
.dword 0x7fe5d35e2c6078a3
.dword 0x7fd8276674380fc3
.dword 0x40280081570b13b6
.dword 0x7fd8e816c2502d73
.dword 0x7fd8276674380fc3
.dword 0x40280081570b13b6
.dword 0x7fd8e816c2502d73
.dword 0x7fd8276674380fc3
.dword 0x40280081570b13b6
.dword 0x7fd8e816c2502d73
.dword 0x7fd8276674380fc3
.dword 0x40280081570b13b6
.dword 0x7fd8e816c2502d73
.dword 0x7fe3d93686797715
.dword 0xbfe5dbeac1d0025d
.dword 0x7fd3978b52ff3f23
.dword 0x7fe3d93686797715
.dword 0xbfe5dbeac1d0025d
.dword 0x7fd3978b52ff3f23
.dword 0x7fe3d93686797715
.dword 0xbfe5dbeac1d0025d
.dword 0x7fd3978b52ff3f23
.dword 0x7fe3d93686797715
.dword 0xbfe5dbeac1d0025d
.dword 0x7fd3978b52ff3f23
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 254*(XLEN/32),4,0xdeadbeef


signature_x15_2:
    .fill 42*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
