
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.5.6
// timestamp : Mon Sep 20 11:53:03 2021 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/compliance_fd/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/compliance_fd/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV64D/rv64d_fnmadd1.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2021. IIT Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.d instruction of the RISC-V FD extension for the fnmadd_b6 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IFD")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",d_fnmadd_b6)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1, rs1==f18, rs2==f17, rs3==f16, rd==f16, fs1 == 0 and fe1 == 0x39a and fm1 == 0x961d9e439899e and fs2 == 0 and fe2 == 0x465 and fm2 == 0x8e9734f31b51f and fs3 == 0 and fe3 == 0x397 and fm3 == 0x543ecb52e1739 and rm_val == 0  
// opcode: fnmadd.d ; op1:f18; op2:f17; op3:f16; dest:f16; op1val:0x39a961d9e439899e; op2val:0x4658e9734f31b51f; op3val:0x397543ecb52e1739; valaddr_reg:x16; val_offset:0; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f16, f18, f17, f16, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1:
// rs1 == rs2 == rs3 != rd, rs1==f21, rs2==f21, rs3==f21, rd==f7, fs1 == 0 and fe1 == 0x39b and fm1 == 0x259733af42533 and fs2 == 1 and fe2 == 0x465 and fm2 == 0x13adfcebe3951 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x715f340a1218a and rm_val == 4  
// opcode: fnmadd.d ; op1:f21; op2:f21; op3:f21; dest:f7; op1val:0x39b259733af42533; op2val:0x39b259733af42533; op3val:0x39b259733af42533; valaddr_reg:x16; val_offset:24; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f7, f21, f21, f21, 0x4, 0, x16, 24, x17, x15, 16, x18)

inst_2:
// rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2, rs1==f5, rs2==f13, rs3==f5, rd==f28, fs1 == 0 and fe1 == 0x39b and fm1 == 0x259733af42533 and fs2 == 1 and fe2 == 0x465 and fm2 == 0x13adfcebe3951 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x715f340a1218a and rm_val == 3  
// opcode: fnmadd.d ; op1:f5; op2:f13; op3:f5; dest:f28; op1val:0x39b259733af42533; op2val:0xc6513adfcebe3951; op3val:0x39b259733af42533; valaddr_reg:x16; val_offset:48; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f28, f5, f13, f5, 0x3, 0, x16, 48, x17, x15, 32, x18)

inst_3:
// rs1 == rd == rs3 != rs2, rs1==f8, rs2==f22, rs3==f8, rd==f8, fs1 == 0 and fe1 == 0x39b and fm1 == 0x259733af42533 and fs2 == 1 and fe2 == 0x465 and fm2 == 0x13adfcebe3951 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x715f340a1218a and rm_val == 2  
// opcode: fnmadd.d ; op1:f8; op2:f22; op3:f8; dest:f8; op1val:0x39b259733af42533; op2val:0xc6513adfcebe3951; op3val:0x39b259733af42533; valaddr_reg:x16; val_offset:72; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f8, f8, f22, f8, 0x2, 0, x16, 72, x17, x15, 48, x18)

inst_4:
// rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd, rs1==f24, rs2==f26, rs3==f18, rd==f5, fs1 == 0 and fe1 == 0x39b and fm1 == 0x259733af42533 and fs2 == 1 and fe2 == 0x465 and fm2 == 0x13adfcebe3951 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x715f340a1218a and rm_val == 1  
// opcode: fnmadd.d ; op1:f24; op2:f26; op3:f18; dest:f5; op1val:0x39b259733af42533; op2val:0xc6513adfcebe3951; op3val:0x39a715f340a1218a; valaddr_reg:x16; val_offset:96; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f5, f24, f26, f18, 0x1, 0, x16, 96, x17, x15, 64, x18)

inst_5:
// rd == rs2 == rs3 != rs1, rs1==f27, rs2==f30, rs3==f30, rd==f30, fs1 == 0 and fe1 == 0x39b and fm1 == 0x259733af42533 and fs2 == 1 and fe2 == 0x465 and fm2 == 0x13adfcebe3951 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x715f340a1218a and rm_val == 0  
// opcode: fnmadd.d ; op1:f27; op2:f30; op3:f30; dest:f30; op1val:0x39b259733af42533; op2val:0xc6513adfcebe3951; op3val:0xc6513adfcebe3951; valaddr_reg:x16; val_offset:120; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f30, f27, f30, f30, 0x0, 0, x16, 120, x17, x15, 80, x18)

inst_6:
// rs1 == rs2 == rd != rs3, rs1==f1, rs2==f1, rs3==f7, rd==f1, fs1 == 0 and fe1 == 0x39b and fm1 == 0x174af80d46ddc and fs2 == 1 and fe2 == 0x465 and fm2 == 0x21cade58c1682 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x390a91e852eff and rm_val == 4  
// opcode: fnmadd.d ; op1:f1; op2:f1; op3:f7; dest:f1; op1val:0x39b174af80d46ddc; op2val:0x39b174af80d46ddc; op3val:0x39b390a91e852eff; valaddr_reg:x16; val_offset:144; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f1, f1, f1, f7, 0x4, 0, x16, 144, x17, x15, 96, x18)

inst_7:
// rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1, rs1==f15, rs2==f6, rs3==f13, rd==f6, fs1 == 0 and fe1 == 0x39b and fm1 == 0x174af80d46ddc and fs2 == 1 and fe2 == 0x465 and fm2 == 0x21cade58c1682 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x390a91e852eff and rm_val == 3  
// opcode: fnmadd.d ; op1:f15; op2:f6; op3:f13; dest:f6; op1val:0x39b174af80d46ddc; op2val:0xc6521cade58c1682; op3val:0x39b390a91e852eff; valaddr_reg:x16; val_offset:168; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f6, f15, f6, f13, 0x3, 0, x16, 168, x17, x15, 112, x18)

inst_8:
// rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3, rs1==f10, rs2==f10, rs3==f14, rd==f0, fs1 == 0 and fe1 == 0x39b and fm1 == 0x174af80d46ddc and fs2 == 1 and fe2 == 0x465 and fm2 == 0x21cade58c1682 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x390a91e852eff and rm_val == 2  
// opcode: fnmadd.d ; op1:f10; op2:f10; op3:f14; dest:f0; op1val:0x39b174af80d46ddc; op2val:0x39b174af80d46ddc; op3val:0x39b390a91e852eff; valaddr_reg:x16; val_offset:192; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f0, f10, f10, f14, 0x2, 0, x16, 192, x17, x15, 128, x18)

inst_9:
// rs1 == rs2 == rs3 == rd, rs1==f20, rs2==f20, rs3==f20, rd==f20, fs1 == 0 and fe1 == 0x39b and fm1 == 0x174af80d46ddc and fs2 == 1 and fe2 == 0x465 and fm2 == 0x21cade58c1682 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x390a91e852eff and rm_val == 1  
// opcode: fnmadd.d ; op1:f20; op2:f20; op3:f20; dest:f20; op1val:0x39b174af80d46ddc; op2val:0x39b174af80d46ddc; op3val:0x39b174af80d46ddc; valaddr_reg:x16; val_offset:216; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f20, f20, f20, f20, 0x1, 0, x16, 216, x17, x15, 144, x18)

inst_10:
// rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1, rs1==f0, rs2==f11, rs3==f11, rd==f2, fs1 == 0 and fe1 == 0x39b and fm1 == 0x174af80d46ddc and fs2 == 1 and fe2 == 0x465 and fm2 == 0x21cade58c1682 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x390a91e852eff and rm_val == 0  
// opcode: fnmadd.d ; op1:f0; op2:f11; op3:f11; dest:f2; op1val:0x39b174af80d46ddc; op2val:0xc6521cade58c1682; op3val:0xc6521cade58c1682; valaddr_reg:x16; val_offset:240; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f2, f0, f11, f11, 0x0, 0, x16, 240, x17, x15, 160, x18)

inst_11:
// rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2, rs1==f12, rs2==f31, rs3==f0, rd==f12, fs1 == 0 and fe1 == 0x39a and fm1 == 0xb3ae72b8e92d9 and fs2 == 1 and fe2 == 0x465 and fm2 == 0x738abb923bd4a and fs3 == 0 and fe3 == 0x398 and fm3 == 0xa76e4ab440bf3 and rm_val == 4  
// opcode: fnmadd.d ; op1:f12; op2:f31; op3:f0; dest:f12; op1val:0x39ab3ae72b8e92d9; op2val:0xc65738abb923bd4a; op3val:0x398a76e4ab440bf3; valaddr_reg:x16; val_offset:264; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f12, f12, f31, f0, 0x4, 0, x16, 264, x17, x15, 176, x18)

inst_12:
// rs1==f22, rs2==f14, rs3==f23, rd==f3, fs1 == 0 and fe1 == 0x39a and fm1 == 0xb3ae72b8e92d9 and fs2 == 1 and fe2 == 0x465 and fm2 == 0x738abb923bd4a and fs3 == 0 and fe3 == 0x398 and fm3 == 0xa76e4ab440bf3 and rm_val == 3  
// opcode: fnmadd.d ; op1:f22; op2:f14; op3:f23; dest:f3; op1val:0x39ab3ae72b8e92d9; op2val:0xc65738abb923bd4a; op3val:0x398a76e4ab440bf3; valaddr_reg:x16; val_offset:288; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f3, f22, f14, f23, 0x3, 0, x16, 288, x17, x15, 192, x18)

inst_13:
// rs1==f4, rs2==f23, rs3==f6, rd==f31, fs1 == 0 and fe1 == 0x39a and fm1 == 0xb3ae72b8e92d9 and fs2 == 1 and fe2 == 0x465 and fm2 == 0x738abb923bd4a and fs3 == 0 and fe3 == 0x398 and fm3 == 0xa76e4ab440bf3 and rm_val == 2  
// opcode: fnmadd.d ; op1:f4; op2:f23; op3:f6; dest:f31; op1val:0x39ab3ae72b8e92d9; op2val:0xc65738abb923bd4a; op3val:0x398a76e4ab440bf3; valaddr_reg:x16; val_offset:312; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f31, f4, f23, f6, 0x2, 0, x16, 312, x17, x15, 208, x18)

inst_14:
// rs1==f23, rs2==f28, rs3==f9, rd==f27, fs1 == 0 and fe1 == 0x39a and fm1 == 0xb3ae72b8e92d9 and fs2 == 1 and fe2 == 0x465 and fm2 == 0x738abb923bd4a and fs3 == 0 and fe3 == 0x398 and fm3 == 0xa76e4ab440bf3 and rm_val == 1  
// opcode: fnmadd.d ; op1:f23; op2:f28; op3:f9; dest:f27; op1val:0x39ab3ae72b8e92d9; op2val:0xc65738abb923bd4a; op3val:0x398a76e4ab440bf3; valaddr_reg:x16; val_offset:336; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f27, f23, f28, f9, 0x1, 0, x16, 336, x17, x15, 224, x18)

inst_15:
// rs1==f30, rs2==f18, rs3==f27, rd==f29, fs1 == 0 and fe1 == 0x39a and fm1 == 0xb3ae72b8e92d9 and fs2 == 1 and fe2 == 0x465 and fm2 == 0x738abb923bd4a and fs3 == 0 and fe3 == 0x398 and fm3 == 0xa76e4ab440bf3 and rm_val == 0  
// opcode: fnmadd.d ; op1:f30; op2:f18; op3:f27; dest:f29; op1val:0x39ab3ae72b8e92d9; op2val:0xc65738abb923bd4a; op3val:0x398a76e4ab440bf3; valaddr_reg:x16; val_offset:360; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f29, f30, f18, f27, 0x0, 0, x16, 360, x17, x15, 240, x18)

inst_16:
// rs1==f6, rs2==f2, rs3==f24, rd==f23, fs1 == 0 and fe1 == 0x39b and fm1 == 0x15eaf9bc4135b and fs2 == 1 and fe2 == 0x465 and fm2 == 0x2339e6cd46ba5 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x419832df339cc and rm_val == 4  
// opcode: fnmadd.d ; op1:f6; op2:f2; op3:f24; dest:f23; op1val:0x39b15eaf9bc4135b; op2val:0xc652339e6cd46ba5; op3val:0x39b419832df339cc; valaddr_reg:x16; val_offset:384; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f23, f6, f2, f24, 0x4, 0, x16, 384, x17, x15, 256, x18)

inst_17:
// rs1==f19, rs2==f7, rs3==f29, rd==f21, fs1 == 0 and fe1 == 0x39b and fm1 == 0x15eaf9bc4135b and fs2 == 1 and fe2 == 0x465 and fm2 == 0x2339e6cd46ba5 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x419832df339cc and rm_val == 3  
// opcode: fnmadd.d ; op1:f19; op2:f7; op3:f29; dest:f21; op1val:0x39b15eaf9bc4135b; op2val:0xc652339e6cd46ba5; op3val:0x39b419832df339cc; valaddr_reg:x16; val_offset:408; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f21, f19, f7, f29, 0x3, 0, x16, 408, x17, x15, 272, x18)

inst_18:
// rs1==f28, rs2==f9, rs3==f25, rd==f13, fs1 == 0 and fe1 == 0x39b and fm1 == 0x15eaf9bc4135b and fs2 == 1 and fe2 == 0x465 and fm2 == 0x2339e6cd46ba5 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x419832df339cc and rm_val == 2  
// opcode: fnmadd.d ; op1:f28; op2:f9; op3:f25; dest:f13; op1val:0x39b15eaf9bc4135b; op2val:0xc652339e6cd46ba5; op3val:0x39b419832df339cc; valaddr_reg:x16; val_offset:432; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f28, f9, f25, 0x2, 0, x16, 432, x17, x15, 288, x18)

inst_19:
// rs1==f25, rs2==f0, rs3==f10, rd==f26, fs1 == 0 and fe1 == 0x39b and fm1 == 0x15eaf9bc4135b and fs2 == 1 and fe2 == 0x465 and fm2 == 0x2339e6cd46ba5 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x419832df339cc and rm_val == 1  
// opcode: fnmadd.d ; op1:f25; op2:f0; op3:f10; dest:f26; op1val:0x39b15eaf9bc4135b; op2val:0xc652339e6cd46ba5; op3val:0x39b419832df339cc; valaddr_reg:x16; val_offset:456; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f26, f25, f0, f10, 0x1, 0, x16, 456, x17, x15, 304, x18)

inst_20:
// rs1==f7, rs2==f27, rs3==f22, rd==f17, fs1 == 0 and fe1 == 0x39b and fm1 == 0x15eaf9bc4135b and fs2 == 1 and fe2 == 0x465 and fm2 == 0x2339e6cd46ba5 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x419832df339cc and rm_val == 0  
// opcode: fnmadd.d ; op1:f7; op2:f27; op3:f22; dest:f17; op1val:0x39b15eaf9bc4135b; op2val:0xc652339e6cd46ba5; op3val:0x39b419832df339cc; valaddr_reg:x16; val_offset:480; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f17, f7, f27, f22, 0x0, 0, x16, 480, x17, x15, 320, x18)

inst_21:
// rs1==f31, rs2==f29, rs3==f19, rd==f14, fs1 == 0 and fe1 == 0x39a and fm1 == 0xbaa1b7f4dcbc7 and fs2 == 1 and fe2 == 0x465 and fm2 == 0x6db539c6ea23d and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2d75c7feac96d and rm_val == 4  
// opcode: fnmadd.d ; op1:f31; op2:f29; op3:f19; dest:f14; op1val:0x39abaa1b7f4dcbc7; op2val:0xc656db539c6ea23d; op3val:0x39b2d75c7feac96d; valaddr_reg:x16; val_offset:504; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f14, f31, f29, f19, 0x4, 0, x16, 504, x17, x15, 336, x18)

inst_22:
// rs1==f3, rs2==f24, rs3==f2, rd==f4, fs1 == 0 and fe1 == 0x39a and fm1 == 0xbaa1b7f4dcbc7 and fs2 == 1 and fe2 == 0x465 and fm2 == 0x6db539c6ea23d and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2d75c7feac96d and rm_val == 3  
// opcode: fnmadd.d ; op1:f3; op2:f24; op3:f2; dest:f4; op1val:0x39abaa1b7f4dcbc7; op2val:0xc656db539c6ea23d; op3val:0x39b2d75c7feac96d; valaddr_reg:x16; val_offset:528; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f4, f3, f24, f2, 0x3, 0, x16, 528, x17, x15, 352, x18)

inst_23:
// rs1==f9, rs2==f4, rs3==f26, rd==f24, fs1 == 0 and fe1 == 0x39a and fm1 == 0xbaa1b7f4dcbc7 and fs2 == 1 and fe2 == 0x465 and fm2 == 0x6db539c6ea23d and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2d75c7feac96d and rm_val == 2  
// opcode: fnmadd.d ; op1:f9; op2:f4; op3:f26; dest:f24; op1val:0x39abaa1b7f4dcbc7; op2val:0xc656db539c6ea23d; op3val:0x39b2d75c7feac96d; valaddr_reg:x16; val_offset:552; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f24, f9, f4, f26, 0x2, 0, x16, 552, x17, x15, 368, x18)

inst_24:
// rs1==f29, rs2==f5, rs3==f12, rd==f15, fs1 == 0 and fe1 == 0x39a and fm1 == 0xbaa1b7f4dcbc7 and fs2 == 1 and fe2 == 0x465 and fm2 == 0x6db539c6ea23d and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2d75c7feac96d and rm_val == 1  
// opcode: fnmadd.d ; op1:f29; op2:f5; op3:f12; dest:f15; op1val:0x39abaa1b7f4dcbc7; op2val:0xc656db539c6ea23d; op3val:0x39b2d75c7feac96d; valaddr_reg:x16; val_offset:576; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f15, f29, f5, f12, 0x1, 0, x16, 576, x17, x15, 384, x18)

inst_25:
// rs1==f17, rs2==f12, rs3==f1, rd==f25, fs1 == 0 and fe1 == 0x39a and fm1 == 0xbaa1b7f4dcbc7 and fs2 == 1 and fe2 == 0x465 and fm2 == 0x6db539c6ea23d and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2d75c7feac96d and rm_val == 0  
// opcode: fnmadd.d ; op1:f17; op2:f12; op3:f1; dest:f25; op1val:0x39abaa1b7f4dcbc7; op2val:0xc656db539c6ea23d; op3val:0x39b2d75c7feac96d; valaddr_reg:x16; val_offset:600; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f25, f17, f12, f1, 0x0, 0, x16, 600, x17, x15, 400, x18)

inst_26:
// rs1==f11, rs2==f3, rs3==f15, rd==f22, fs1 == 0 and fe1 == 0x39a and fm1 == 0x7b337adfaba25 and fs2 == 1 and fe2 == 0x465 and fm2 == 0xaae1a7f7fe4f9 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x256e24ec21869 and rm_val == 4  
// opcode: fnmadd.d ; op1:f11; op2:f3; op3:f15; dest:f22; op1val:0x39a7b337adfaba25; op2val:0xc65aae1a7f7fe4f9; op3val:0x39b256e24ec21869; valaddr_reg:x16; val_offset:624; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f22, f11, f3, f15, 0x4, 0, x16, 624, x17, x15, 416, x18)

inst_27:
// rs1==f16, rs2==f8, rs3==f4, rd==f10, fs1 == 0 and fe1 == 0x39a and fm1 == 0x7b337adfaba25 and fs2 == 1 and fe2 == 0x465 and fm2 == 0xaae1a7f7fe4f9 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x256e24ec21869 and rm_val == 3  
// opcode: fnmadd.d ; op1:f16; op2:f8; op3:f4; dest:f10; op1val:0x39a7b337adfaba25; op2val:0xc65aae1a7f7fe4f9; op3val:0x39b256e24ec21869; valaddr_reg:x16; val_offset:648; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f10, f16, f8, f4, 0x3, 0, x16, 648, x17, x15, 432, x18)

inst_28:
// rs1==f26, rs2==f16, rs3==f3, rd==f19, fs1 == 0 and fe1 == 0x39a and fm1 == 0x7b337adfaba25 and fs2 == 1 and fe2 == 0x465 and fm2 == 0xaae1a7f7fe4f9 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x256e24ec21869 and rm_val == 2  
// opcode: fnmadd.d ; op1:f26; op2:f16; op3:f3; dest:f19; op1val:0x39a7b337adfaba25; op2val:0xc65aae1a7f7fe4f9; op3val:0x39b256e24ec21869; valaddr_reg:x16; val_offset:672; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f19, f26, f16, f3, 0x2, 0, x16, 672, x17, x15, 448, x18)

inst_29:
// rs1==f14, rs2==f19, rs3==f31, rd==f18, fs1 == 0 and fe1 == 0x39a and fm1 == 0x7b337adfaba25 and fs2 == 1 and fe2 == 0x465 and fm2 == 0xaae1a7f7fe4f9 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x256e24ec21869 and rm_val == 1  
// opcode: fnmadd.d ; op1:f14; op2:f19; op3:f31; dest:f18; op1val:0x39a7b337adfaba25; op2val:0xc65aae1a7f7fe4f9; op3val:0x39b256e24ec21869; valaddr_reg:x16; val_offset:696; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f18, f14, f19, f31, 0x1, 0, x16, 696, x17, x15, 464, x18)

inst_30:
// rs1==f13, rs2==f25, rs3==f28, rd==f11, fs1 == 0 and fe1 == 0x39a and fm1 == 0x7b337adfaba25 and fs2 == 1 and fe2 == 0x465 and fm2 == 0xaae1a7f7fe4f9 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x256e24ec21869 and rm_val == 0  
// opcode: fnmadd.d ; op1:f13; op2:f25; op3:f28; dest:f11; op1val:0x39a7b337adfaba25; op2val:0xc65aae1a7f7fe4f9; op3val:0x39b256e24ec21869; valaddr_reg:x16; val_offset:720; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f11, f13, f25, f28, 0x0, 0, x16, 720, x17, x15, 480, x18)

inst_31:
// rs1==f2, rs2==f15, rs3==f17, rd==f9, fs1 == 0 and fe1 == 0x399 and fm1 == 0xc78202ec8ce83 and fs2 == 1 and fe2 == 0x466 and fm2 == 0x635ec5ac851e6 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x7bbc1c42f2180 and rm_val == 4  
// opcode: fnmadd.d ; op1:f2; op2:f15; op3:f17; dest:f9; op1val:0x399c78202ec8ce83; op2val:0xc66635ec5ac851e6; op3val:0x39a7bbc1c42f2180; valaddr_reg:x16; val_offset:744; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f9, f2, f15, f17, 0x4, 0, x16, 744, x17, x15, 496, x18)

inst_32:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0xc78202ec8ce83 and fs2 == 1 and fe2 == 0x466 and fm2 == 0x635ec5ac851e6 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x7bbc1c42f2180 and rm_val == 3  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x399c78202ec8ce83; op2val:0xc66635ec5ac851e6; op3val:0x39a7bbc1c42f2180; valaddr_reg:x16; val_offset:768; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x3, 0, x16, 768, x17, x15, 512, x18)

inst_33:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0xc78202ec8ce83 and fs2 == 1 and fe2 == 0x466 and fm2 == 0x635ec5ac851e6 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x7bbc1c42f2180 and rm_val == 2  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x399c78202ec8ce83; op2val:0xc66635ec5ac851e6; op3val:0x39a7bbc1c42f2180; valaddr_reg:x16; val_offset:792; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x2, 0, x16, 792, x17, x15, 528, x18)

inst_34:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0xc78202ec8ce83 and fs2 == 1 and fe2 == 0x466 and fm2 == 0x635ec5ac851e6 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x7bbc1c42f2180 and rm_val == 1  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x399c78202ec8ce83; op2val:0xc66635ec5ac851e6; op3val:0x39a7bbc1c42f2180; valaddr_reg:x16; val_offset:816; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x1, 0, x16, 816, x17, x15, 544, x18)

inst_35:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0xc78202ec8ce83 and fs2 == 1 and fe2 == 0x466 and fm2 == 0x635ec5ac851e6 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x7bbc1c42f2180 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x399c78202ec8ce83; op2val:0xc66635ec5ac851e6; op3val:0x39a7bbc1c42f2180; valaddr_reg:x16; val_offset:840; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 840, x17, x15, 560, x18)

inst_36:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x493832648647e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x84397048af2b2 and fs3 == 0 and fe3 == 0x399 and fm3 == 0xf4e20ef7fa9be and rm_val == 4  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39a493832648647e; op2val:0x3fe84397048af2b2; op3val:0x399f4e20ef7fa9be; valaddr_reg:x16; val_offset:864; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x4, 0, x16, 864, x17, x15, 576, x18)

inst_37:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x493832648647e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x84397048af2b2 and fs3 == 0 and fe3 == 0x399 and fm3 == 0xf4e20ef7fa9be and rm_val == 3  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39a493832648647e; op2val:0x3fe84397048af2b2; op3val:0x399f4e20ef7fa9be; valaddr_reg:x16; val_offset:888; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x3, 0, x16, 888, x17, x15, 592, x18)

inst_38:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x493832648647e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x84397048af2b2 and fs3 == 0 and fe3 == 0x399 and fm3 == 0xf4e20ef7fa9be and rm_val == 2  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39a493832648647e; op2val:0x3fe84397048af2b2; op3val:0x399f4e20ef7fa9be; valaddr_reg:x16; val_offset:912; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x2, 0, x16, 912, x17, x15, 608, x18)

inst_39:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x493832648647e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x84397048af2b2 and fs3 == 0 and fe3 == 0x399 and fm3 == 0xf4e20ef7fa9be and rm_val == 1  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39a493832648647e; op2val:0x3fe84397048af2b2; op3val:0x399f4e20ef7fa9be; valaddr_reg:x16; val_offset:936; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x1, 0, x16, 936, x17, x15, 624, x18)

inst_40:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x493832648647e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x84397048af2b2 and fs3 == 0 and fe3 == 0x399 and fm3 == 0xf4e20ef7fa9be and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39a493832648647e; op2val:0x3fe84397048af2b2; op3val:0x399f4e20ef7fa9be; valaddr_reg:x16; val_offset:960; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 960, x17, x15, 640, x18)

inst_41:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x96b7ce749469a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xda3dc3c8bc7cb and fs3 == 0 and fe3 == 0x399 and fm3 == 0x86c11cd38c611 and rm_val == 4  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39a96b7ce749469a; op2val:0x3fdda3dc3c8bc7cb; op3val:0x39986c11cd38c611; valaddr_reg:x16; val_offset:984; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x4, 0, x16, 984, x17, x15, 656, x18)

inst_42:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x96b7ce749469a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xda3dc3c8bc7cb and fs3 == 0 and fe3 == 0x399 and fm3 == 0x86c11cd38c611 and rm_val == 3  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39a96b7ce749469a; op2val:0x3fdda3dc3c8bc7cb; op3val:0x39986c11cd38c611; valaddr_reg:x16; val_offset:1008; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x3, 0, x16, 1008, x17, x15, 672, x18)

inst_43:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x96b7ce749469a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xda3dc3c8bc7cb and fs3 == 0 and fe3 == 0x399 and fm3 == 0x86c11cd38c611 and rm_val == 2  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39a96b7ce749469a; op2val:0x3fdda3dc3c8bc7cb; op3val:0x39986c11cd38c611; valaddr_reg:x16; val_offset:1032; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x2, 0, x16, 1032, x17, x15, 688, x18)

inst_44:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x96b7ce749469a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xda3dc3c8bc7cb and fs3 == 0 and fe3 == 0x399 and fm3 == 0x86c11cd38c611 and rm_val == 1  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39a96b7ce749469a; op2val:0x3fdda3dc3c8bc7cb; op3val:0x39986c11cd38c611; valaddr_reg:x16; val_offset:1056; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x1, 0, x16, 1056, x17, x15, 704, x18)

inst_45:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x96b7ce749469a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xda3dc3c8bc7cb and fs3 == 0 and fe3 == 0x399 and fm3 == 0x86c11cd38c611 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39a96b7ce749469a; op2val:0x3fdda3dc3c8bc7cb; op3val:0x39986c11cd38c611; valaddr_reg:x16; val_offset:1080; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1080, x17, x15, 720, x18)

inst_46:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x3950f3ae122c8 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x3b68b998a5bd2 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x1b15d20ac5b99 and rm_val == 4  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39b3950f3ae122c8; op2val:0x3fd3b68b998a5bd2; op3val:0x39a1b15d20ac5b99; valaddr_reg:x16; val_offset:1104; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x4, 0, x16, 1104, x17, x15, 736, x18)

inst_47:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x3950f3ae122c8 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x3b68b998a5bd2 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x1b15d20ac5b99 and rm_val == 3  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39b3950f3ae122c8; op2val:0x3fd3b68b998a5bd2; op3val:0x39a1b15d20ac5b99; valaddr_reg:x16; val_offset:1128; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x3, 0, x16, 1128, x17, x15, 752, x18)

inst_48:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x3950f3ae122c8 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x3b68b998a5bd2 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x1b15d20ac5b99 and rm_val == 2  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39b3950f3ae122c8; op2val:0x3fd3b68b998a5bd2; op3val:0x39a1b15d20ac5b99; valaddr_reg:x16; val_offset:1152; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x2, 0, x16, 1152, x17, x15, 768, x18)

inst_49:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x3950f3ae122c8 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x3b68b998a5bd2 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x1b15d20ac5b99 and rm_val == 1  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39b3950f3ae122c8; op2val:0x3fd3b68b998a5bd2; op3val:0x39a1b15d20ac5b99; valaddr_reg:x16; val_offset:1176; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x1, 0, x16, 1176, x17, x15, 784, x18)

inst_50:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x3950f3ae122c8 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x3b68b998a5bd2 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x1b15d20ac5b99 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39b3950f3ae122c8; op2val:0x3fd3b68b998a5bd2; op3val:0x39a1b15d20ac5b99; valaddr_reg:x16; val_offset:1200; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1200, x17, x15, 800, x18)

inst_51:
// fs1 == 0 and fe1 == 0x398 and fm1 == 0x60fecec9cedfd and fs2 == 1 and fe2 == 0x403 and fm2 == 0x59c7ab60c86f3 and fs3 == 0 and fe3 == 0x399 and fm3 == 0x19aa477d0a2f0 and rm_val == 4  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39860fecec9cedfd; op2val:0xc0359c7ab60c86f3; op3val:0x39919aa477d0a2f0; valaddr_reg:x16; val_offset:1224; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x4, 0, x16, 1224, x17, x15, 816, x18)

inst_52:
// fs1 == 0 and fe1 == 0x398 and fm1 == 0x60fecec9cedfd and fs2 == 1 and fe2 == 0x403 and fm2 == 0x59c7ab60c86f3 and fs3 == 0 and fe3 == 0x399 and fm3 == 0x19aa477d0a2f0 and rm_val == 3  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39860fecec9cedfd; op2val:0xc0359c7ab60c86f3; op3val:0x39919aa477d0a2f0; valaddr_reg:x16; val_offset:1248; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x3, 0, x16, 1248, x17, x15, 832, x18)

inst_53:
// fs1 == 0 and fe1 == 0x398 and fm1 == 0x60fecec9cedfd and fs2 == 1 and fe2 == 0x403 and fm2 == 0x59c7ab60c86f3 and fs3 == 0 and fe3 == 0x399 and fm3 == 0x19aa477d0a2f0 and rm_val == 2  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39860fecec9cedfd; op2val:0xc0359c7ab60c86f3; op3val:0x39919aa477d0a2f0; valaddr_reg:x16; val_offset:1272; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x2, 0, x16, 1272, x17, x15, 848, x18)

inst_54:
// fs1 == 0 and fe1 == 0x398 and fm1 == 0x60fecec9cedfd and fs2 == 1 and fe2 == 0x403 and fm2 == 0x59c7ab60c86f3 and fs3 == 0 and fe3 == 0x399 and fm3 == 0x19aa477d0a2f0 and rm_val == 1  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39860fecec9cedfd; op2val:0xc0359c7ab60c86f3; op3val:0x39919aa477d0a2f0; valaddr_reg:x16; val_offset:1296; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x1, 0, x16, 1296, x17, x15, 864, x18)

inst_55:
// fs1 == 0 and fe1 == 0x398 and fm1 == 0x60fecec9cedfd and fs2 == 1 and fe2 == 0x403 and fm2 == 0x59c7ab60c86f3 and fs3 == 0 and fe3 == 0x399 and fm3 == 0x19aa477d0a2f0 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39860fecec9cedfd; op2val:0xc0359c7ab60c86f3; op3val:0x39919aa477d0a2f0; valaddr_reg:x16; val_offset:1320; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1320, x17, x15, 880, x18)

inst_56:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x1d3562b63423a and fs2 == 1 and fe2 == 0x406 and fm2 == 0x92c8578d820c7 and fs3 == 0 and fe3 == 0x397 and fm3 == 0xfa02ff2e8ef9f and rm_val == 4  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39b1d3562b63423a; op2val:0xc0692c8578d820c7; op3val:0x397fa02ff2e8ef9f; valaddr_reg:x16; val_offset:1344; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x4, 0, x16, 1344, x17, x15, 896, x18)

inst_57:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x1d3562b63423a and fs2 == 1 and fe2 == 0x406 and fm2 == 0x92c8578d820c7 and fs3 == 0 and fe3 == 0x397 and fm3 == 0xfa02ff2e8ef9f and rm_val == 3  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39b1d3562b63423a; op2val:0xc0692c8578d820c7; op3val:0x397fa02ff2e8ef9f; valaddr_reg:x16; val_offset:1368; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x3, 0, x16, 1368, x17, x15, 912, x18)

inst_58:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x1d3562b63423a and fs2 == 1 and fe2 == 0x406 and fm2 == 0x92c8578d820c7 and fs3 == 0 and fe3 == 0x397 and fm3 == 0xfa02ff2e8ef9f and rm_val == 2  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39b1d3562b63423a; op2val:0xc0692c8578d820c7; op3val:0x397fa02ff2e8ef9f; valaddr_reg:x16; val_offset:1392; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x2, 0, x16, 1392, x17, x15, 928, x18)

inst_59:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x1d3562b63423a and fs2 == 1 and fe2 == 0x406 and fm2 == 0x92c8578d820c7 and fs3 == 0 and fe3 == 0x397 and fm3 == 0xfa02ff2e8ef9f and rm_val == 1  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39b1d3562b63423a; op2val:0xc0692c8578d820c7; op3val:0x397fa02ff2e8ef9f; valaddr_reg:x16; val_offset:1416; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x1, 0, x16, 1416, x17, x15, 944, x18)

inst_60:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x1d3562b63423a and fs2 == 1 and fe2 == 0x406 and fm2 == 0x92c8578d820c7 and fs3 == 0 and fe3 == 0x397 and fm3 == 0xfa02ff2e8ef9f and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39b1d3562b63423a; op2val:0xc0692c8578d820c7; op3val:0x397fa02ff2e8ef9f; valaddr_reg:x16; val_offset:1440; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1440, x17, x15, 960, x18)

inst_61:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x2093582abf33b and fs2 == 1 and fe2 == 0x40f and fm2 == 0xc631f6cd8fb78 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2f9d8101f151b and rm_val == 4  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39a2093582abf33b; op2val:0xc0fc631f6cd8fb78; op3val:0x39b2f9d8101f151b; valaddr_reg:x16; val_offset:1464; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x4, 0, x16, 1464, x17, x15, 976, x18)

inst_62:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x2093582abf33b and fs2 == 1 and fe2 == 0x40f and fm2 == 0xc631f6cd8fb78 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2f9d8101f151b and rm_val == 3  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39a2093582abf33b; op2val:0xc0fc631f6cd8fb78; op3val:0x39b2f9d8101f151b; valaddr_reg:x16; val_offset:1488; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x3, 0, x16, 1488, x17, x15, 992, x18)

inst_63:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x2093582abf33b and fs2 == 1 and fe2 == 0x40f and fm2 == 0xc631f6cd8fb78 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2f9d8101f151b and rm_val == 2  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39a2093582abf33b; op2val:0xc0fc631f6cd8fb78; op3val:0x39b2f9d8101f151b; valaddr_reg:x16; val_offset:1512; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x2, 0, x16, 1512, x17, x15, 1008, x18)

inst_64:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x2093582abf33b and fs2 == 1 and fe2 == 0x40f and fm2 == 0xc631f6cd8fb78 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2f9d8101f151b and rm_val == 1  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39a2093582abf33b; op2val:0xc0fc631f6cd8fb78; op3val:0x39b2f9d8101f151b; valaddr_reg:x16; val_offset:1536; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x1, 0, x16, 1536, x17, x15, 1024, x18)

inst_65:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x2093582abf33b and fs2 == 1 and fe2 == 0x40f and fm2 == 0xc631f6cd8fb78 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2f9d8101f151b and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39a2093582abf33b; op2val:0xc0fc631f6cd8fb78; op3val:0x39b2f9d8101f151b; valaddr_reg:x16; val_offset:1560; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1560, x17, x15, 1040, x18)

inst_66:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x00588d3ebc9ce and fs2 == 1 and fe2 == 0x41d and fm2 == 0xff4f22a812f9e and fs3 == 0 and fe3 == 0x39b and fm3 == 0x03e8e5c4751e5 and rm_val == 4  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39a00588d3ebc9ce; op2val:0xc1dff4f22a812f9e; op3val:0x39b03e8e5c4751e5; valaddr_reg:x16; val_offset:1584; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x4, 0, x16, 1584, x17, x15, 1056, x18)

inst_67:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x00588d3ebc9ce and fs2 == 1 and fe2 == 0x41d and fm2 == 0xff4f22a812f9e and fs3 == 0 and fe3 == 0x39b and fm3 == 0x03e8e5c4751e5 and rm_val == 3  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39a00588d3ebc9ce; op2val:0xc1dff4f22a812f9e; op3val:0x39b03e8e5c4751e5; valaddr_reg:x16; val_offset:1608; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x3, 0, x16, 1608, x17, x15, 1072, x18)

inst_68:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x00588d3ebc9ce and fs2 == 1 and fe2 == 0x41d and fm2 == 0xff4f22a812f9e and fs3 == 0 and fe3 == 0x39b and fm3 == 0x03e8e5c4751e5 and rm_val == 2  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39a00588d3ebc9ce; op2val:0xc1dff4f22a812f9e; op3val:0x39b03e8e5c4751e5; valaddr_reg:x16; val_offset:1632; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x2, 0, x16, 1632, x17, x15, 1088, x18)

inst_69:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x00588d3ebc9ce and fs2 == 1 and fe2 == 0x41d and fm2 == 0xff4f22a812f9e and fs3 == 0 and fe3 == 0x39b and fm3 == 0x03e8e5c4751e5 and rm_val == 1  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39a00588d3ebc9ce; op2val:0xc1dff4f22a812f9e; op3val:0x39b03e8e5c4751e5; valaddr_reg:x16; val_offset:1656; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x1, 0, x16, 1656, x17, x15, 1104, x18)

inst_70:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x00588d3ebc9ce and fs2 == 1 and fe2 == 0x41d and fm2 == 0xff4f22a812f9e and fs3 == 0 and fe3 == 0x39b and fm3 == 0x03e8e5c4751e5 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39a00588d3ebc9ce; op2val:0xc1dff4f22a812f9e; op3val:0x39b03e8e5c4751e5; valaddr_reg:x16; val_offset:1680; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1680, x17, x15, 1120, x18)

inst_71:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xcf7f1cdf1475c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x49bf0c2fb575d and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2ae9e22c5ee0c and rm_val == 4  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39acf7f1cdf1475c; op2val:0x3ff49bf0c2fb575d; op3val:0x39b2ae9e22c5ee0c; valaddr_reg:x16; val_offset:1704; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x4, 0, x16, 1704, x17, x15, 1136, x18)

inst_72:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xcf7f1cdf1475c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x49bf0c2fb575d and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2ae9e22c5ee0c and rm_val == 3  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39acf7f1cdf1475c; op2val:0x3ff49bf0c2fb575d; op3val:0x39b2ae9e22c5ee0c; valaddr_reg:x16; val_offset:1728; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x3, 0, x16, 1728, x17, x15, 1152, x18)

inst_73:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xcf7f1cdf1475c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x49bf0c2fb575d and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2ae9e22c5ee0c and rm_val == 2  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39acf7f1cdf1475c; op2val:0x3ff49bf0c2fb575d; op3val:0x39b2ae9e22c5ee0c; valaddr_reg:x16; val_offset:1752; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x2, 0, x16, 1752, x17, x15, 1168, x18)

inst_74:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xcf7f1cdf1475c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x49bf0c2fb575d and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2ae9e22c5ee0c and rm_val == 1  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39acf7f1cdf1475c; op2val:0x3ff49bf0c2fb575d; op3val:0x39b2ae9e22c5ee0c; valaddr_reg:x16; val_offset:1776; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x1, 0, x16, 1776, x17, x15, 1184, x18)

inst_75:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xcf7f1cdf1475c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x49bf0c2fb575d and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2ae9e22c5ee0c and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39acf7f1cdf1475c; op2val:0x3ff49bf0c2fb575d; op3val:0x39b2ae9e22c5ee0c; valaddr_reg:x16; val_offset:1800; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1800, x17, x15, 1200, x18)

inst_76:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xd28b1c48f9ecd and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3520e7ffe7474 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x1d30e93c058b0 and rm_val == 4  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39ad28b1c48f9ecd; op2val:0x3ff3520e7ffe7474; op3val:0x39b1d30e93c058b0; valaddr_reg:x16; val_offset:1824; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x4, 0, x16, 1824, x17, x15, 1216, x18)

inst_77:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xd28b1c48f9ecd and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3520e7ffe7474 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x1d30e93c058b0 and rm_val == 3  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39ad28b1c48f9ecd; op2val:0x3ff3520e7ffe7474; op3val:0x39b1d30e93c058b0; valaddr_reg:x16; val_offset:1848; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x3, 0, x16, 1848, x17, x15, 1232, x18)

inst_78:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xd28b1c48f9ecd and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3520e7ffe7474 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x1d30e93c058b0 and rm_val == 2  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39ad28b1c48f9ecd; op2val:0x3ff3520e7ffe7474; op3val:0x39b1d30e93c058b0; valaddr_reg:x16; val_offset:1872; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x2, 0, x16, 1872, x17, x15, 1248, x18)

inst_79:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xd28b1c48f9ecd and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3520e7ffe7474 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x1d30e93c058b0 and rm_val == 1  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39ad28b1c48f9ecd; op2val:0x3ff3520e7ffe7474; op3val:0x39b1d30e93c058b0; valaddr_reg:x16; val_offset:1896; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x1, 0, x16, 1896, x17, x15, 1264, x18)

inst_80:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xd28b1c48f9ecd and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3520e7ffe7474 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x1d30e93c058b0 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39ad28b1c48f9ecd; op2val:0x3ff3520e7ffe7474; op3val:0x39b1d30e93c058b0; valaddr_reg:x16; val_offset:1920; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1920, x17, x15, 1280, x18)

inst_81:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x18e1308d56fb3 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x8b1e8ab856033 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x32d4ea5b39c47 and rm_val == 4  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39b18e1308d56fb3; op2val:0x3fd8b1e8ab856033; op3val:0x39a32d4ea5b39c47; valaddr_reg:x16; val_offset:1944; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x4, 0, x16, 1944, x17, x15, 1296, x18)

inst_82:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x18e1308d56fb3 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x8b1e8ab856033 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x32d4ea5b39c47 and rm_val == 3  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39b18e1308d56fb3; op2val:0x3fd8b1e8ab856033; op3val:0x39a32d4ea5b39c47; valaddr_reg:x16; val_offset:1968; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x3, 0, x16, 1968, x17, x15, 1312, x18)

inst_83:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x18e1308d56fb3 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x8b1e8ab856033 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x32d4ea5b39c47 and rm_val == 2  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39b18e1308d56fb3; op2val:0x3fd8b1e8ab856033; op3val:0x39a32d4ea5b39c47; valaddr_reg:x16; val_offset:1992; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x2, 0, x16, 1992, x17, x15, 1328, x18)

inst_84:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x18e1308d56fb3 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x8b1e8ab856033 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x32d4ea5b39c47 and rm_val == 1  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39b18e1308d56fb3; op2val:0x3fd8b1e8ab856033; op3val:0x39a32d4ea5b39c47; valaddr_reg:x16; val_offset:2016; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x1, 0, x16, 2016, x17, x15, 1344, x18)
addi x16,x16,2040

inst_85:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x18e1308d56fb3 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x8b1e8ab856033 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x32d4ea5b39c47 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39b18e1308d56fb3; op2val:0x3fd8b1e8ab856033; op3val:0x39a32d4ea5b39c47; valaddr_reg:x16; val_offset:0; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 0, x17, x15, 1360, x18)

inst_86:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0x87115a106e653 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x4bded2c8e362b and fs3 == 0 and fe3 == 0x396 and fm3 == 0x420b60628e1ac and rm_val == 4  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39987115a106e653; op2val:0xc024bded2c8e362b; op3val:0x396420b60628e1ac; valaddr_reg:x16; val_offset:24; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x4, 0, x16, 24, x17, x15, 1376, x18)

inst_87:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0x87115a106e653 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x4bded2c8e362b and fs3 == 0 and fe3 == 0x396 and fm3 == 0x420b60628e1ac and rm_val == 3  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39987115a106e653; op2val:0xc024bded2c8e362b; op3val:0x396420b60628e1ac; valaddr_reg:x16; val_offset:48; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x3, 0, x16, 48, x17, x15, 1392, x18)

inst_88:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0x87115a106e653 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x4bded2c8e362b and fs3 == 0 and fe3 == 0x396 and fm3 == 0x420b60628e1ac and rm_val == 2  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39987115a106e653; op2val:0xc024bded2c8e362b; op3val:0x396420b60628e1ac; valaddr_reg:x16; val_offset:72; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x2, 0, x16, 72, x17, x15, 1408, x18)

inst_89:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0x87115a106e653 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x4bded2c8e362b and fs3 == 0 and fe3 == 0x396 and fm3 == 0x420b60628e1ac and rm_val == 1  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39987115a106e653; op2val:0xc024bded2c8e362b; op3val:0x396420b60628e1ac; valaddr_reg:x16; val_offset:96; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x1, 0, x16, 96, x17, x15, 1424, x18)

inst_90:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0x87115a106e653 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x4bded2c8e362b and fs3 == 0 and fe3 == 0x396 and fm3 == 0x420b60628e1ac and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39987115a106e653; op2val:0xc024bded2c8e362b; op3val:0x396420b60628e1ac; valaddr_reg:x16; val_offset:120; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 120, x17, x15, 1440, x18)

inst_91:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xec1e9bdc14adf and fs2 == 1 and fe2 == 0x406 and fm2 == 0xd19072a8cf30c and fs3 == 0 and fe3 == 0x39a and fm3 == 0x7fa543a54ea12 and rm_val == 4  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39aec1e9bdc14adf; op2val:0xc06d19072a8cf30c; op3val:0x39a7fa543a54ea12; valaddr_reg:x16; val_offset:144; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x4, 0, x16, 144, x17, x15, 1456, x18)

inst_92:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xec1e9bdc14adf and fs2 == 1 and fe2 == 0x406 and fm2 == 0xd19072a8cf30c and fs3 == 0 and fe3 == 0x39a and fm3 == 0x7fa543a54ea12 and rm_val == 3  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39aec1e9bdc14adf; op2val:0xc06d19072a8cf30c; op3val:0x39a7fa543a54ea12; valaddr_reg:x16; val_offset:168; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x3, 0, x16, 168, x17, x15, 1472, x18)

inst_93:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xec1e9bdc14adf and fs2 == 1 and fe2 == 0x406 and fm2 == 0xd19072a8cf30c and fs3 == 0 and fe3 == 0x39a and fm3 == 0x7fa543a54ea12 and rm_val == 2  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39aec1e9bdc14adf; op2val:0xc06d19072a8cf30c; op3val:0x39a7fa543a54ea12; valaddr_reg:x16; val_offset:192; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x2, 0, x16, 192, x17, x15, 1488, x18)

inst_94:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xec1e9bdc14adf and fs2 == 1 and fe2 == 0x406 and fm2 == 0xd19072a8cf30c and fs3 == 0 and fe3 == 0x39a and fm3 == 0x7fa543a54ea12 and rm_val == 1  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39aec1e9bdc14adf; op2val:0xc06d19072a8cf30c; op3val:0x39a7fa543a54ea12; valaddr_reg:x16; val_offset:216; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x1, 0, x16, 216, x17, x15, 1504, x18)

inst_95:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xec1e9bdc14adf and fs2 == 1 and fe2 == 0x406 and fm2 == 0xd19072a8cf30c and fs3 == 0 and fe3 == 0x39a and fm3 == 0x7fa543a54ea12 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39aec1e9bdc14adf; op2val:0xc06d19072a8cf30c; op3val:0x39a7fa543a54ea12; valaddr_reg:x16; val_offset:240; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 240, x17, x15, 1520, x18)

inst_96:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xb3c55dc08859c and fs2 == 1 and fe2 == 0x40f and fm2 == 0x2cc80f7fc90b4 and fs3 == 0 and fe3 == 0x397 and fm3 == 0x4c78615b73b87 and rm_val == 4  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39ab3c55dc08859c; op2val:0xc0f2cc80f7fc90b4; op3val:0x3974c78615b73b87; valaddr_reg:x16; val_offset:264; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x4, 0, x16, 264, x17, x15, 1536, x18)

inst_97:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xb3c55dc08859c and fs2 == 1 and fe2 == 0x40f and fm2 == 0x2cc80f7fc90b4 and fs3 == 0 and fe3 == 0x397 and fm3 == 0x4c78615b73b87 and rm_val == 3  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39ab3c55dc08859c; op2val:0xc0f2cc80f7fc90b4; op3val:0x3974c78615b73b87; valaddr_reg:x16; val_offset:288; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x3, 0, x16, 288, x17, x15, 1552, x18)

inst_98:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xb3c55dc08859c and fs2 == 1 and fe2 == 0x40f and fm2 == 0x2cc80f7fc90b4 and fs3 == 0 and fe3 == 0x397 and fm3 == 0x4c78615b73b87 and rm_val == 2  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39ab3c55dc08859c; op2val:0xc0f2cc80f7fc90b4; op3val:0x3974c78615b73b87; valaddr_reg:x16; val_offset:312; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x2, 0, x16, 312, x17, x15, 1568, x18)

inst_99:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xb3c55dc08859c and fs2 == 1 and fe2 == 0x40f and fm2 == 0x2cc80f7fc90b4 and fs3 == 0 and fe3 == 0x397 and fm3 == 0x4c78615b73b87 and rm_val == 1  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39ab3c55dc08859c; op2val:0xc0f2cc80f7fc90b4; op3val:0x3974c78615b73b87; valaddr_reg:x16; val_offset:336; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x1, 0, x16, 336, x17, x15, 1584, x18)

inst_100:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xb3c55dc08859c and fs2 == 1 and fe2 == 0x40f and fm2 == 0x2cc80f7fc90b4 and fs3 == 0 and fe3 == 0x397 and fm3 == 0x4c78615b73b87 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39ab3c55dc08859c; op2val:0xc0f2cc80f7fc90b4; op3val:0x3974c78615b73b87; valaddr_reg:x16; val_offset:360; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 360, x17, x15, 1600, x18)

inst_101:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x53906393211b2 and fs2 == 1 and fe2 == 0x41d and fm2 == 0x820037a9576e5 and fs3 == 0 and fe3 == 0x39a and fm3 == 0xe11997039be98 and rm_val == 4  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39a53906393211b2; op2val:0xc1d820037a9576e5; op3val:0x39ae11997039be98; valaddr_reg:x16; val_offset:384; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x4, 0, x16, 384, x17, x15, 1616, x18)

inst_102:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x53906393211b2 and fs2 == 1 and fe2 == 0x41d and fm2 == 0x820037a9576e5 and fs3 == 0 and fe3 == 0x39a and fm3 == 0xe11997039be98 and rm_val == 3  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39a53906393211b2; op2val:0xc1d820037a9576e5; op3val:0x39ae11997039be98; valaddr_reg:x16; val_offset:408; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x3, 0, x16, 408, x17, x15, 1632, x18)

inst_103:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x53906393211b2 and fs2 == 1 and fe2 == 0x41d and fm2 == 0x820037a9576e5 and fs3 == 0 and fe3 == 0x39a and fm3 == 0xe11997039be98 and rm_val == 2  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39a53906393211b2; op2val:0xc1d820037a9576e5; op3val:0x39ae11997039be98; valaddr_reg:x16; val_offset:432; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x2, 0, x16, 432, x17, x15, 1648, x18)

inst_104:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x53906393211b2 and fs2 == 1 and fe2 == 0x41d and fm2 == 0x820037a9576e5 and fs3 == 0 and fe3 == 0x39a and fm3 == 0xe11997039be98 and rm_val == 1  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39a53906393211b2; op2val:0xc1d820037a9576e5; op3val:0x39ae11997039be98; valaddr_reg:x16; val_offset:456; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x1, 0, x16, 456, x17, x15, 1664, x18)

inst_105:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x53906393211b2 and fs2 == 1 and fe2 == 0x41d and fm2 == 0x820037a9576e5 and fs3 == 0 and fe3 == 0x39a and fm3 == 0xe11997039be98 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39a53906393211b2; op2val:0xc1d820037a9576e5; op3val:0x39ae11997039be98; valaddr_reg:x16; val_offset:480; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 480, x17, x15, 1680, x18)

inst_106:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x9c0c51eeebad1 and fs2 == 0 and fe2 == 0x465 and fm2 == 0x88da1b118587d and fs3 == 0 and fe3 == 0x39b and fm3 == 0x19b261fb596eb and rm_val == 4  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39a9c0c51eeebad1; op2val:0x46588da1b118587d; op3val:0x39b19b261fb596eb; valaddr_reg:x16; val_offset:504; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x4, 0, x16, 504, x17, x15, 1696, x18)

inst_107:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x9c0c51eeebad1 and fs2 == 0 and fe2 == 0x465 and fm2 == 0x88da1b118587d and fs3 == 0 and fe3 == 0x39b and fm3 == 0x19b261fb596eb and rm_val == 3  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39a9c0c51eeebad1; op2val:0x46588da1b118587d; op3val:0x39b19b261fb596eb; valaddr_reg:x16; val_offset:528; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x3, 0, x16, 528, x17, x15, 1712, x18)

inst_108:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x9c0c51eeebad1 and fs2 == 0 and fe2 == 0x465 and fm2 == 0x88da1b118587d and fs3 == 0 and fe3 == 0x39b and fm3 == 0x19b261fb596eb and rm_val == 2  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39a9c0c51eeebad1; op2val:0x46588da1b118587d; op3val:0x39b19b261fb596eb; valaddr_reg:x16; val_offset:552; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x2, 0, x16, 552, x17, x15, 1728, x18)

inst_109:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x9c0c51eeebad1 and fs2 == 0 and fe2 == 0x465 and fm2 == 0x88da1b118587d and fs3 == 0 and fe3 == 0x39b and fm3 == 0x19b261fb596eb and rm_val == 1  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39a9c0c51eeebad1; op2val:0x46588da1b118587d; op3val:0x39b19b261fb596eb; valaddr_reg:x16; val_offset:576; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x1, 0, x16, 576, x17, x15, 1744, x18)

inst_110:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x9c0c51eeebad1 and fs2 == 0 and fe2 == 0x465 and fm2 == 0x88da1b118587d and fs3 == 0 and fe3 == 0x39b and fm3 == 0x19b261fb596eb and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39a9c0c51eeebad1; op2val:0x46588da1b118587d; op3val:0x39b19b261fb596eb; valaddr_reg:x16; val_offset:600; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 600, x17, x15, 1760, x18)

inst_111:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x9ec7686f9ec3a and fs2 == 0 and fe2 == 0x465 and fm2 == 0x8643f97d288b8 and fs3 == 0 and fe3 == 0x398 and fm3 == 0x8705c8a1c73a2 and rm_val == 4  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39a9ec7686f9ec3a; op2val:0x4658643f97d288b8; op3val:0x3988705c8a1c73a2; valaddr_reg:x16; val_offset:624; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x4, 0, x16, 624, x17, x15, 1776, x18)

inst_112:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x9ec7686f9ec3a and fs2 == 0 and fe2 == 0x465 and fm2 == 0x8643f97d288b8 and fs3 == 0 and fe3 == 0x398 and fm3 == 0x8705c8a1c73a2 and rm_val == 3  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39a9ec7686f9ec3a; op2val:0x4658643f97d288b8; op3val:0x3988705c8a1c73a2; valaddr_reg:x16; val_offset:648; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x3, 0, x16, 648, x17, x15, 1792, x18)

inst_113:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x9ec7686f9ec3a and fs2 == 0 and fe2 == 0x465 and fm2 == 0x8643f97d288b8 and fs3 == 0 and fe3 == 0x398 and fm3 == 0x8705c8a1c73a2 and rm_val == 2  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39a9ec7686f9ec3a; op2val:0x4658643f97d288b8; op3val:0x3988705c8a1c73a2; valaddr_reg:x16; val_offset:672; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x2, 0, x16, 672, x17, x15, 1808, x18)

inst_114:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x9ec7686f9ec3a and fs2 == 0 and fe2 == 0x465 and fm2 == 0x8643f97d288b8 and fs3 == 0 and fe3 == 0x398 and fm3 == 0x8705c8a1c73a2 and rm_val == 1  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39a9ec7686f9ec3a; op2val:0x4658643f97d288b8; op3val:0x3988705c8a1c73a2; valaddr_reg:x16; val_offset:696; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x1, 0, x16, 696, x17, x15, 1824, x18)

inst_115:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x9ec7686f9ec3a and fs2 == 0 and fe2 == 0x465 and fm2 == 0x8643f97d288b8 and fs3 == 0 and fe3 == 0x398 and fm3 == 0x8705c8a1c73a2 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39a9ec7686f9ec3a; op2val:0x4658643f97d288b8; op3val:0x3988705c8a1c73a2; valaddr_reg:x16; val_offset:720; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 720, x17, x15, 1840, x18)

inst_116:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x0f727fa7a4f49 and fs2 == 0 and fe2 == 0x465 and fm2 == 0x2a2b13bd1032e and fs3 == 0 and fe3 == 0x39a and fm3 == 0x352bc0ab174b4 and rm_val == 4  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39b0f727fa7a4f49; op2val:0x4652a2b13bd1032e; op3val:0x39a352bc0ab174b4; valaddr_reg:x16; val_offset:744; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x4, 0, x16, 744, x17, x15, 1856, x18)

inst_117:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x0f727fa7a4f49 and fs2 == 0 and fe2 == 0x465 and fm2 == 0x2a2b13bd1032e and fs3 == 0 and fe3 == 0x39a and fm3 == 0x352bc0ab174b4 and rm_val == 3  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39b0f727fa7a4f49; op2val:0x4652a2b13bd1032e; op3val:0x39a352bc0ab174b4; valaddr_reg:x16; val_offset:768; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x3, 0, x16, 768, x17, x15, 1872, x18)

inst_118:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x0f727fa7a4f49 and fs2 == 0 and fe2 == 0x465 and fm2 == 0x2a2b13bd1032e and fs3 == 0 and fe3 == 0x39a and fm3 == 0x352bc0ab174b4 and rm_val == 2  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39b0f727fa7a4f49; op2val:0x4652a2b13bd1032e; op3val:0x39a352bc0ab174b4; valaddr_reg:x16; val_offset:792; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x2, 0, x16, 792, x17, x15, 1888, x18)

inst_119:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x0f727fa7a4f49 and fs2 == 0 and fe2 == 0x465 and fm2 == 0x2a2b13bd1032e and fs3 == 0 and fe3 == 0x39a and fm3 == 0x352bc0ab174b4 and rm_val == 1  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39b0f727fa7a4f49; op2val:0x4652a2b13bd1032e; op3val:0x39a352bc0ab174b4; valaddr_reg:x16; val_offset:816; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x1, 0, x16, 816, x17, x15, 1904, x18)

inst_120:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x0f727fa7a4f49 and fs2 == 0 and fe2 == 0x465 and fm2 == 0x2a2b13bd1032e and fs3 == 0 and fe3 == 0x39a and fm3 == 0x352bc0ab174b4 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39b0f727fa7a4f49; op2val:0x4652a2b13bd1032e; op3val:0x39a352bc0ab174b4; valaddr_reg:x16; val_offset:840; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 840, x17, x15, 1920, x18)

inst_121:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x431aefd3d77c4 and fs2 == 0 and fe2 == 0x464 and fm2 == 0xf4fe93abe35c0 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x3137ed6d522ce and rm_val == 4  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39b431aefd3d77c4; op2val:0x464f4fe93abe35c0; op3val:0x39a3137ed6d522ce; valaddr_reg:x16; val_offset:864; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x4, 0, x16, 864, x17, x15, 1936, x18)

inst_122:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x431aefd3d77c4 and fs2 == 0 and fe2 == 0x464 and fm2 == 0xf4fe93abe35c0 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x3137ed6d522ce and rm_val == 3  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39b431aefd3d77c4; op2val:0x464f4fe93abe35c0; op3val:0x39a3137ed6d522ce; valaddr_reg:x16; val_offset:888; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x3, 0, x16, 888, x17, x15, 1952, x18)

inst_123:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x431aefd3d77c4 and fs2 == 0 and fe2 == 0x464 and fm2 == 0xf4fe93abe35c0 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x3137ed6d522ce and rm_val == 2  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39b431aefd3d77c4; op2val:0x464f4fe93abe35c0; op3val:0x39a3137ed6d522ce; valaddr_reg:x16; val_offset:912; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x2, 0, x16, 912, x17, x15, 1968, x18)

inst_124:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x431aefd3d77c4 and fs2 == 0 and fe2 == 0x464 and fm2 == 0xf4fe93abe35c0 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x3137ed6d522ce and rm_val == 1  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39b431aefd3d77c4; op2val:0x464f4fe93abe35c0; op3val:0x39a3137ed6d522ce; valaddr_reg:x16; val_offset:936; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x1, 0, x16, 936, x17, x15, 1984, x18)

inst_125:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x431aefd3d77c4 and fs2 == 0 and fe2 == 0x464 and fm2 == 0xf4fe93abe35c0 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x3137ed6d522ce and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39b431aefd3d77c4; op2val:0x464f4fe93abe35c0; op3val:0x39a3137ed6d522ce; valaddr_reg:x16; val_offset:960; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 960, x17, x15, 2000, x18)

inst_126:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0x50a927776c3d6 and fs2 == 0 and fe2 == 0x466 and fm2 == 0xe0d272a3de70e and fs3 == 0 and fe3 == 0x399 and fm3 == 0x302dd184574b9 and rm_val == 4  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39950a927776c3d6; op2val:0x466e0d272a3de70e; op3val:0x399302dd184574b9; valaddr_reg:x16; val_offset:984; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x4, 0, x16, 984, x17, x15, 2016, x18)
RVTEST_SIGBASE(x15,signature_x15_2)

inst_127:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0x50a927776c3d6 and fs2 == 0 and fe2 == 0x466 and fm2 == 0xe0d272a3de70e and fs3 == 0 and fe3 == 0x399 and fm3 == 0x302dd184574b9 and rm_val == 3  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39950a927776c3d6; op2val:0x466e0d272a3de70e; op3val:0x399302dd184574b9; valaddr_reg:x16; val_offset:1008; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x3, 0, x16, 1008, x17, x15, 0, x18)

inst_128:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0x50a927776c3d6 and fs2 == 0 and fe2 == 0x466 and fm2 == 0xe0d272a3de70e and fs3 == 0 and fe3 == 0x399 and fm3 == 0x302dd184574b9 and rm_val == 2  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39950a927776c3d6; op2val:0x466e0d272a3de70e; op3val:0x399302dd184574b9; valaddr_reg:x16; val_offset:1032; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x2, 0, x16, 1032, x17, x15, 16, x18)

inst_129:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0x50a927776c3d6 and fs2 == 0 and fe2 == 0x466 and fm2 == 0xe0d272a3de70e and fs3 == 0 and fe3 == 0x399 and fm3 == 0x302dd184574b9 and rm_val == 1  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39950a927776c3d6; op2val:0x466e0d272a3de70e; op3val:0x399302dd184574b9; valaddr_reg:x16; val_offset:1056; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x1, 0, x16, 1056, x17, x15, 32, x18)

inst_130:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0x50a927776c3d6 and fs2 == 0 and fe2 == 0x466 and fm2 == 0xe0d272a3de70e and fs3 == 0 and fe3 == 0x399 and fm3 == 0x302dd184574b9 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39950a927776c3d6; op2val:0x466e0d272a3de70e; op3val:0x399302dd184574b9; valaddr_reg:x16; val_offset:1080; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1080, x17, x15, 48, x18)

inst_131:
// fs1 == 0 and fe1 == 0x395 and fm1 == 0x117d0d55e69ae and fs2 == 0 and fe2 == 0x46b and fm2 == 0x27f15e3b10e2b and fs3 == 0 and fe3 == 0x39b and fm3 == 0x0fc63597a987b and rm_val == 4  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x395117d0d55e69ae; op2val:0x46b27f15e3b10e2b; op3val:0x39b0fc63597a987b; valaddr_reg:x16; val_offset:1104; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x4, 0, x16, 1104, x17, x15, 64, x18)

inst_132:
// fs1 == 0 and fe1 == 0x395 and fm1 == 0x117d0d55e69ae and fs2 == 0 and fe2 == 0x46b and fm2 == 0x27f15e3b10e2b and fs3 == 0 and fe3 == 0x39b and fm3 == 0x0fc63597a987b and rm_val == 3  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x395117d0d55e69ae; op2val:0x46b27f15e3b10e2b; op3val:0x39b0fc63597a987b; valaddr_reg:x16; val_offset:1128; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x3, 0, x16, 1128, x17, x15, 80, x18)

inst_133:
// fs1 == 0 and fe1 == 0x395 and fm1 == 0x117d0d55e69ae and fs2 == 0 and fe2 == 0x46b and fm2 == 0x27f15e3b10e2b and fs3 == 0 and fe3 == 0x39b and fm3 == 0x0fc63597a987b and rm_val == 2  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x395117d0d55e69ae; op2val:0x46b27f15e3b10e2b; op3val:0x39b0fc63597a987b; valaddr_reg:x16; val_offset:1152; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x2, 0, x16, 1152, x17, x15, 96, x18)

inst_134:
// fs1 == 0 and fe1 == 0x395 and fm1 == 0x117d0d55e69ae and fs2 == 0 and fe2 == 0x46b and fm2 == 0x27f15e3b10e2b and fs3 == 0 and fe3 == 0x39b and fm3 == 0x0fc63597a987b and rm_val == 1  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x395117d0d55e69ae; op2val:0x46b27f15e3b10e2b; op3val:0x39b0fc63597a987b; valaddr_reg:x16; val_offset:1176; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x1, 0, x16, 1176, x17, x15, 112, x18)

inst_135:
// fs1 == 0 and fe1 == 0x395 and fm1 == 0x117d0d55e69ae and fs2 == 0 and fe2 == 0x46b and fm2 == 0x27f15e3b10e2b and fs3 == 0 and fe3 == 0x39b and fm3 == 0x0fc63597a987b and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x395117d0d55e69ae; op2val:0x46b27f15e3b10e2b; op3val:0x39b0fc63597a987b; valaddr_reg:x16; val_offset:1200; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1200, x17, x15, 128, x18)

inst_136:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x961d9e439899e and fs2 == 0 and fe2 == 0x465 and fm2 == 0x8e9734f31b51f and fs3 == 0 and fe3 == 0x397 and fm3 == 0x543ecb52e1739 and rm_val == 4  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39a961d9e439899e; op2val:0x4658e9734f31b51f; op3val:0x397543ecb52e1739; valaddr_reg:x16; val_offset:1224; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x4, 0, x16, 1224, x17, x15, 144, x18)

inst_137:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x961d9e439899e and fs2 == 0 and fe2 == 0x465 and fm2 == 0x8e9734f31b51f and fs3 == 0 and fe3 == 0x397 and fm3 == 0x543ecb52e1739 and rm_val == 3  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39a961d9e439899e; op2val:0x4658e9734f31b51f; op3val:0x397543ecb52e1739; valaddr_reg:x16; val_offset:1248; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x3, 0, x16, 1248, x17, x15, 160, x18)

inst_138:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x961d9e439899e and fs2 == 0 and fe2 == 0x465 and fm2 == 0x8e9734f31b51f and fs3 == 0 and fe3 == 0x397 and fm3 == 0x543ecb52e1739 and rm_val == 2  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39a961d9e439899e; op2val:0x4658e9734f31b51f; op3val:0x397543ecb52e1739; valaddr_reg:x16; val_offset:1272; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x2, 0, x16, 1272, x17, x15, 176, x18)

inst_139:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x961d9e439899e and fs2 == 0 and fe2 == 0x465 and fm2 == 0x8e9734f31b51f and fs3 == 0 and fe3 == 0x397 and fm3 == 0x543ecb52e1739 and rm_val == 1  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39a961d9e439899e; op2val:0x4658e9734f31b51f; op3val:0x397543ecb52e1739; valaddr_reg:x16; val_offset:1296; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x1, 0, x16, 1296, x17, x15, 192, x18)

inst_140:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x259733af42533 and fs2 == 1 and fe2 == 0x465 and fm2 == 0x13adfcebe3951 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x715f340a1218a and rm_val == 4  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39b259733af42533; op2val:0xc6513adfcebe3951; op3val:0x39a715f340a1218a; valaddr_reg:x16; val_offset:1320; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x4, 0, x16, 1320, x17, x15, 208, x18)

inst_141:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x259733af42533 and fs2 == 1 and fe2 == 0x465 and fm2 == 0x13adfcebe3951 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x715f340a1218a and rm_val == 3  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39b259733af42533; op2val:0xc6513adfcebe3951; op3val:0x39a715f340a1218a; valaddr_reg:x16; val_offset:1344; rmval:0x3; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x3, 0, x16, 1344, x17, x15, 224, x18)

inst_142:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x259733af42533 and fs2 == 1 and fe2 == 0x465 and fm2 == 0x13adfcebe3951 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x715f340a1218a and rm_val == 2  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39b259733af42533; op2val:0xc6513adfcebe3951; op3val:0x39a715f340a1218a; valaddr_reg:x16; val_offset:1368; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x2, 0, x16, 1368, x17, x15, 240, x18)

inst_143:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x259733af42533 and fs2 == 1 and fe2 == 0x465 and fm2 == 0x13adfcebe3951 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x715f340a1218a and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39b259733af42533; op2val:0xc6513adfcebe3951; op3val:0x39a715f340a1218a; valaddr_reg:x16; val_offset:1392; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1392, x17, x15, 256, x18)

inst_144:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x174af80d46ddc and fs2 == 1 and fe2 == 0x465 and fm2 == 0x21cade58c1682 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x390a91e852eff and rm_val == 4  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39b174af80d46ddc; op2val:0xc6521cade58c1682; op3val:0x39b390a91e852eff; valaddr_reg:x16; val_offset:1416; rmval:0x4; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x4, 0, x16, 1416, x17, x15, 272, x18)

inst_145:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x174af80d46ddc and fs2 == 1 and fe2 == 0x465 and fm2 == 0x21cade58c1682 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x390a91e852eff and rm_val == 2  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39b174af80d46ddc; op2val:0xc6521cade58c1682; op3val:0x39b390a91e852eff; valaddr_reg:x16; val_offset:1440; rmval:0x2; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x2, 0, x16, 1440, x17, x15, 288, x18)

inst_146:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x174af80d46ddc and fs2 == 1 and fe2 == 0x465 and fm2 == 0x21cade58c1682 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x390a91e852eff and rm_val == 1  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39b174af80d46ddc; op2val:0xc6521cade58c1682; op3val:0x39b390a91e852eff; valaddr_reg:x16; val_offset:1464; rmval:0x1; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x1, 0, x16, 1464, x17, x15, 304, x18)

inst_147:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x174af80d46ddc and fs2 == 1 and fe2 == 0x465 and fm2 == 0x21cade58c1682 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x390a91e852eff and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39b174af80d46ddc; op2val:0xc6521cade58c1682; op3val:0x39b390a91e852eff; valaddr_reg:x16; val_offset:1488; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1488, x17, x15, 320, x18)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_fp:
.dword 0x39a961d9e439899e
.dword 0x4658e9734f31b51f
.dword 0x397543ecb52e1739
.dword 0x39b259733af42533
.dword 0x39b259733af42533
.dword 0x39b259733af42533
.dword 0x39b259733af42533
.dword 0xc6513adfcebe3951
.dword 0x39b259733af42533
.dword 0x39b259733af42533
.dword 0xc6513adfcebe3951
.dword 0x39b259733af42533
.dword 0x39b259733af42533
.dword 0xc6513adfcebe3951
.dword 0x39a715f340a1218a
.dword 0x39b259733af42533
.dword 0xc6513adfcebe3951
.dword 0xc6513adfcebe3951
.dword 0x39b174af80d46ddc
.dword 0x39b174af80d46ddc
.dword 0x39b390a91e852eff
.dword 0x39b174af80d46ddc
.dword 0xc6521cade58c1682
.dword 0x39b390a91e852eff
.dword 0x39b174af80d46ddc
.dword 0x39b174af80d46ddc
.dword 0x39b390a91e852eff
.dword 0x39b174af80d46ddc
.dword 0x39b174af80d46ddc
.dword 0x39b174af80d46ddc
.dword 0x39b174af80d46ddc
.dword 0xc6521cade58c1682
.dword 0xc6521cade58c1682
.dword 0x39ab3ae72b8e92d9
.dword 0xc65738abb923bd4a
.dword 0x398a76e4ab440bf3
.dword 0x39ab3ae72b8e92d9
.dword 0xc65738abb923bd4a
.dword 0x398a76e4ab440bf3
.dword 0x39ab3ae72b8e92d9
.dword 0xc65738abb923bd4a
.dword 0x398a76e4ab440bf3
.dword 0x39ab3ae72b8e92d9
.dword 0xc65738abb923bd4a
.dword 0x398a76e4ab440bf3
.dword 0x39ab3ae72b8e92d9
.dword 0xc65738abb923bd4a
.dword 0x398a76e4ab440bf3
.dword 0x39b15eaf9bc4135b
.dword 0xc652339e6cd46ba5
.dword 0x39b419832df339cc
.dword 0x39b15eaf9bc4135b
.dword 0xc652339e6cd46ba5
.dword 0x39b419832df339cc
.dword 0x39b15eaf9bc4135b
.dword 0xc652339e6cd46ba5
.dword 0x39b419832df339cc
.dword 0x39b15eaf9bc4135b
.dword 0xc652339e6cd46ba5
.dword 0x39b419832df339cc
.dword 0x39b15eaf9bc4135b
.dword 0xc652339e6cd46ba5
.dword 0x39b419832df339cc
.dword 0x39abaa1b7f4dcbc7
.dword 0xc656db539c6ea23d
.dword 0x39b2d75c7feac96d
.dword 0x39abaa1b7f4dcbc7
.dword 0xc656db539c6ea23d
.dword 0x39b2d75c7feac96d
.dword 0x39abaa1b7f4dcbc7
.dword 0xc656db539c6ea23d
.dword 0x39b2d75c7feac96d
.dword 0x39abaa1b7f4dcbc7
.dword 0xc656db539c6ea23d
.dword 0x39b2d75c7feac96d
.dword 0x39abaa1b7f4dcbc7
.dword 0xc656db539c6ea23d
.dword 0x39b2d75c7feac96d
.dword 0x39a7b337adfaba25
.dword 0xc65aae1a7f7fe4f9
.dword 0x39b256e24ec21869
.dword 0x39a7b337adfaba25
.dword 0xc65aae1a7f7fe4f9
.dword 0x39b256e24ec21869
.dword 0x39a7b337adfaba25
.dword 0xc65aae1a7f7fe4f9
.dword 0x39b256e24ec21869
.dword 0x39a7b337adfaba25
.dword 0xc65aae1a7f7fe4f9
.dword 0x39b256e24ec21869
.dword 0x39a7b337adfaba25
.dword 0xc65aae1a7f7fe4f9
.dword 0x39b256e24ec21869
.dword 0x399c78202ec8ce83
.dword 0xc66635ec5ac851e6
.dword 0x39a7bbc1c42f2180
.dword 0x399c78202ec8ce83
.dword 0xc66635ec5ac851e6
.dword 0x39a7bbc1c42f2180
.dword 0x399c78202ec8ce83
.dword 0xc66635ec5ac851e6
.dword 0x39a7bbc1c42f2180
.dword 0x399c78202ec8ce83
.dword 0xc66635ec5ac851e6
.dword 0x39a7bbc1c42f2180
.dword 0x399c78202ec8ce83
.dword 0xc66635ec5ac851e6
.dword 0x39a7bbc1c42f2180
.dword 0x39a493832648647e
.dword 0x3fe84397048af2b2
.dword 0x399f4e20ef7fa9be
.dword 0x39a493832648647e
.dword 0x3fe84397048af2b2
.dword 0x399f4e20ef7fa9be
.dword 0x39a493832648647e
.dword 0x3fe84397048af2b2
.dword 0x399f4e20ef7fa9be
.dword 0x39a493832648647e
.dword 0x3fe84397048af2b2
.dword 0x399f4e20ef7fa9be
.dword 0x39a493832648647e
.dword 0x3fe84397048af2b2
.dword 0x399f4e20ef7fa9be
.dword 0x39a96b7ce749469a
.dword 0x3fdda3dc3c8bc7cb
.dword 0x39986c11cd38c611
.dword 0x39a96b7ce749469a
.dword 0x3fdda3dc3c8bc7cb
.dword 0x39986c11cd38c611
.dword 0x39a96b7ce749469a
.dword 0x3fdda3dc3c8bc7cb
.dword 0x39986c11cd38c611
.dword 0x39a96b7ce749469a
.dword 0x3fdda3dc3c8bc7cb
.dword 0x39986c11cd38c611
.dword 0x39a96b7ce749469a
.dword 0x3fdda3dc3c8bc7cb
.dword 0x39986c11cd38c611
.dword 0x39b3950f3ae122c8
.dword 0x3fd3b68b998a5bd2
.dword 0x39a1b15d20ac5b99
.dword 0x39b3950f3ae122c8
.dword 0x3fd3b68b998a5bd2
.dword 0x39a1b15d20ac5b99
.dword 0x39b3950f3ae122c8
.dword 0x3fd3b68b998a5bd2
.dword 0x39a1b15d20ac5b99
.dword 0x39b3950f3ae122c8
.dword 0x3fd3b68b998a5bd2
.dword 0x39a1b15d20ac5b99
.dword 0x39b3950f3ae122c8
.dword 0x3fd3b68b998a5bd2
.dword 0x39a1b15d20ac5b99
.dword 0x39860fecec9cedfd
.dword 0xc0359c7ab60c86f3
.dword 0x39919aa477d0a2f0
.dword 0x39860fecec9cedfd
.dword 0xc0359c7ab60c86f3
.dword 0x39919aa477d0a2f0
.dword 0x39860fecec9cedfd
.dword 0xc0359c7ab60c86f3
.dword 0x39919aa477d0a2f0
.dword 0x39860fecec9cedfd
.dword 0xc0359c7ab60c86f3
.dword 0x39919aa477d0a2f0
.dword 0x39860fecec9cedfd
.dword 0xc0359c7ab60c86f3
.dword 0x39919aa477d0a2f0
.dword 0x39b1d3562b63423a
.dword 0xc0692c8578d820c7
.dword 0x397fa02ff2e8ef9f
.dword 0x39b1d3562b63423a
.dword 0xc0692c8578d820c7
.dword 0x397fa02ff2e8ef9f
.dword 0x39b1d3562b63423a
.dword 0xc0692c8578d820c7
.dword 0x397fa02ff2e8ef9f
.dword 0x39b1d3562b63423a
.dword 0xc0692c8578d820c7
.dword 0x397fa02ff2e8ef9f
.dword 0x39b1d3562b63423a
.dword 0xc0692c8578d820c7
.dword 0x397fa02ff2e8ef9f
.dword 0x39a2093582abf33b
.dword 0xc0fc631f6cd8fb78
.dword 0x39b2f9d8101f151b
.dword 0x39a2093582abf33b
.dword 0xc0fc631f6cd8fb78
.dword 0x39b2f9d8101f151b
.dword 0x39a2093582abf33b
.dword 0xc0fc631f6cd8fb78
.dword 0x39b2f9d8101f151b
.dword 0x39a2093582abf33b
.dword 0xc0fc631f6cd8fb78
.dword 0x39b2f9d8101f151b
.dword 0x39a2093582abf33b
.dword 0xc0fc631f6cd8fb78
.dword 0x39b2f9d8101f151b
.dword 0x39a00588d3ebc9ce
.dword 0xc1dff4f22a812f9e
.dword 0x39b03e8e5c4751e5
.dword 0x39a00588d3ebc9ce
.dword 0xc1dff4f22a812f9e
.dword 0x39b03e8e5c4751e5
.dword 0x39a00588d3ebc9ce
.dword 0xc1dff4f22a812f9e
.dword 0x39b03e8e5c4751e5
.dword 0x39a00588d3ebc9ce
.dword 0xc1dff4f22a812f9e
.dword 0x39b03e8e5c4751e5
.dword 0x39a00588d3ebc9ce
.dword 0xc1dff4f22a812f9e
.dword 0x39b03e8e5c4751e5
.dword 0x39acf7f1cdf1475c
.dword 0x3ff49bf0c2fb575d
.dword 0x39b2ae9e22c5ee0c
.dword 0x39acf7f1cdf1475c
.dword 0x3ff49bf0c2fb575d
.dword 0x39b2ae9e22c5ee0c
.dword 0x39acf7f1cdf1475c
.dword 0x3ff49bf0c2fb575d
.dword 0x39b2ae9e22c5ee0c
.dword 0x39acf7f1cdf1475c
.dword 0x3ff49bf0c2fb575d
.dword 0x39b2ae9e22c5ee0c
.dword 0x39acf7f1cdf1475c
.dword 0x3ff49bf0c2fb575d
.dword 0x39b2ae9e22c5ee0c
.dword 0x39ad28b1c48f9ecd
.dword 0x3ff3520e7ffe7474
.dword 0x39b1d30e93c058b0
.dword 0x39ad28b1c48f9ecd
.dword 0x3ff3520e7ffe7474
.dword 0x39b1d30e93c058b0
.dword 0x39ad28b1c48f9ecd
.dword 0x3ff3520e7ffe7474
.dword 0x39b1d30e93c058b0
.dword 0x39ad28b1c48f9ecd
.dword 0x3ff3520e7ffe7474
.dword 0x39b1d30e93c058b0
.dword 0x39ad28b1c48f9ecd
.dword 0x3ff3520e7ffe7474
.dword 0x39b1d30e93c058b0
.dword 0x39b18e1308d56fb3
.dword 0x3fd8b1e8ab856033
.dword 0x39a32d4ea5b39c47
.dword 0x39b18e1308d56fb3
.dword 0x3fd8b1e8ab856033
.dword 0x39a32d4ea5b39c47
.dword 0x39b18e1308d56fb3
.dword 0x3fd8b1e8ab856033
.dword 0x39a32d4ea5b39c47
.dword 0x39b18e1308d56fb3
.dword 0x3fd8b1e8ab856033
.dword 0x39a32d4ea5b39c47
.dword 0x39b18e1308d56fb3
.dword 0x3fd8b1e8ab856033
.dword 0x39a32d4ea5b39c47
.dword 0x39987115a106e653
.dword 0xc024bded2c8e362b
.dword 0x396420b60628e1ac
.dword 0x39987115a106e653
.dword 0xc024bded2c8e362b
.dword 0x396420b60628e1ac
.dword 0x39987115a106e653
.dword 0xc024bded2c8e362b
.dword 0x396420b60628e1ac
.dword 0x39987115a106e653
.dword 0xc024bded2c8e362b
.dword 0x396420b60628e1ac
.dword 0x39987115a106e653
.dword 0xc024bded2c8e362b
.dword 0x396420b60628e1ac
.dword 0x39aec1e9bdc14adf
.dword 0xc06d19072a8cf30c
.dword 0x39a7fa543a54ea12
.dword 0x39aec1e9bdc14adf
.dword 0xc06d19072a8cf30c
.dword 0x39a7fa543a54ea12
.dword 0x39aec1e9bdc14adf
.dword 0xc06d19072a8cf30c
.dword 0x39a7fa543a54ea12
.dword 0x39aec1e9bdc14adf
.dword 0xc06d19072a8cf30c
.dword 0x39a7fa543a54ea12
.dword 0x39aec1e9bdc14adf
.dword 0xc06d19072a8cf30c
.dword 0x39a7fa543a54ea12
.dword 0x39ab3c55dc08859c
.dword 0xc0f2cc80f7fc90b4
.dword 0x3974c78615b73b87
.dword 0x39ab3c55dc08859c
.dword 0xc0f2cc80f7fc90b4
.dword 0x3974c78615b73b87
.dword 0x39ab3c55dc08859c
.dword 0xc0f2cc80f7fc90b4
.dword 0x3974c78615b73b87
.dword 0x39ab3c55dc08859c
.dword 0xc0f2cc80f7fc90b4
.dword 0x3974c78615b73b87
.dword 0x39ab3c55dc08859c
.dword 0xc0f2cc80f7fc90b4
.dword 0x3974c78615b73b87
.dword 0x39a53906393211b2
.dword 0xc1d820037a9576e5
.dword 0x39ae11997039be98
.dword 0x39a53906393211b2
.dword 0xc1d820037a9576e5
.dword 0x39ae11997039be98
.dword 0x39a53906393211b2
.dword 0xc1d820037a9576e5
.dword 0x39ae11997039be98
.dword 0x39a53906393211b2
.dword 0xc1d820037a9576e5
.dword 0x39ae11997039be98
.dword 0x39a53906393211b2
.dword 0xc1d820037a9576e5
.dword 0x39ae11997039be98
.dword 0x39a9c0c51eeebad1
.dword 0x46588da1b118587d
.dword 0x39b19b261fb596eb
.dword 0x39a9c0c51eeebad1
.dword 0x46588da1b118587d
.dword 0x39b19b261fb596eb
.dword 0x39a9c0c51eeebad1
.dword 0x46588da1b118587d
.dword 0x39b19b261fb596eb
.dword 0x39a9c0c51eeebad1
.dword 0x46588da1b118587d
.dword 0x39b19b261fb596eb
.dword 0x39a9c0c51eeebad1
.dword 0x46588da1b118587d
.dword 0x39b19b261fb596eb
.dword 0x39a9ec7686f9ec3a
.dword 0x4658643f97d288b8
.dword 0x3988705c8a1c73a2
.dword 0x39a9ec7686f9ec3a
.dword 0x4658643f97d288b8
.dword 0x3988705c8a1c73a2
.dword 0x39a9ec7686f9ec3a
.dword 0x4658643f97d288b8
.dword 0x3988705c8a1c73a2
.dword 0x39a9ec7686f9ec3a
.dword 0x4658643f97d288b8
.dword 0x3988705c8a1c73a2
.dword 0x39a9ec7686f9ec3a
.dword 0x4658643f97d288b8
.dword 0x3988705c8a1c73a2
.dword 0x39b0f727fa7a4f49
.dword 0x4652a2b13bd1032e
.dword 0x39a352bc0ab174b4
.dword 0x39b0f727fa7a4f49
.dword 0x4652a2b13bd1032e
.dword 0x39a352bc0ab174b4
.dword 0x39b0f727fa7a4f49
.dword 0x4652a2b13bd1032e
.dword 0x39a352bc0ab174b4
.dword 0x39b0f727fa7a4f49
.dword 0x4652a2b13bd1032e
.dword 0x39a352bc0ab174b4
.dword 0x39b0f727fa7a4f49
.dword 0x4652a2b13bd1032e
.dword 0x39a352bc0ab174b4
.dword 0x39b431aefd3d77c4
.dword 0x464f4fe93abe35c0
.dword 0x39a3137ed6d522ce
.dword 0x39b431aefd3d77c4
.dword 0x464f4fe93abe35c0
.dword 0x39a3137ed6d522ce
.dword 0x39b431aefd3d77c4
.dword 0x464f4fe93abe35c0
.dword 0x39a3137ed6d522ce
.dword 0x39b431aefd3d77c4
.dword 0x464f4fe93abe35c0
.dword 0x39a3137ed6d522ce
.dword 0x39b431aefd3d77c4
.dword 0x464f4fe93abe35c0
.dword 0x39a3137ed6d522ce
.dword 0x39950a927776c3d6
.dword 0x466e0d272a3de70e
.dword 0x399302dd184574b9
.dword 0x39950a927776c3d6
.dword 0x466e0d272a3de70e
.dword 0x399302dd184574b9
.dword 0x39950a927776c3d6
.dword 0x466e0d272a3de70e
.dword 0x399302dd184574b9
.dword 0x39950a927776c3d6
.dword 0x466e0d272a3de70e
.dword 0x399302dd184574b9
.dword 0x39950a927776c3d6
.dword 0x466e0d272a3de70e
.dword 0x399302dd184574b9
.dword 0x395117d0d55e69ae
.dword 0x46b27f15e3b10e2b
.dword 0x39b0fc63597a987b
.dword 0x395117d0d55e69ae
.dword 0x46b27f15e3b10e2b
.dword 0x39b0fc63597a987b
.dword 0x395117d0d55e69ae
.dword 0x46b27f15e3b10e2b
.dword 0x39b0fc63597a987b
.dword 0x395117d0d55e69ae
.dword 0x46b27f15e3b10e2b
.dword 0x39b0fc63597a987b
.dword 0x395117d0d55e69ae
.dword 0x46b27f15e3b10e2b
.dword 0x39b0fc63597a987b
.dword 0x39a961d9e439899e
.dword 0x4658e9734f31b51f
.dword 0x397543ecb52e1739
.dword 0x39a961d9e439899e
.dword 0x4658e9734f31b51f
.dword 0x397543ecb52e1739
.dword 0x39a961d9e439899e
.dword 0x4658e9734f31b51f
.dword 0x397543ecb52e1739
.dword 0x39a961d9e439899e
.dword 0x4658e9734f31b51f
.dword 0x397543ecb52e1739
.dword 0x39b259733af42533
.dword 0xc6513adfcebe3951
.dword 0x39a715f340a1218a
.dword 0x39b259733af42533
.dword 0xc6513adfcebe3951
.dword 0x39a715f340a1218a
.dword 0x39b259733af42533
.dword 0xc6513adfcebe3951
.dword 0x39a715f340a1218a
.dword 0x39b259733af42533
.dword 0xc6513adfcebe3951
.dword 0x39a715f340a1218a
.dword 0x39b174af80d46ddc
.dword 0xc6521cade58c1682
.dword 0x39b390a91e852eff
.dword 0x39b174af80d46ddc
.dword 0xc6521cade58c1682
.dword 0x39b390a91e852eff
.dword 0x39b174af80d46ddc
.dword 0xc6521cade58c1682
.dword 0x39b390a91e852eff
.dword 0x39b174af80d46ddc
.dword 0xc6521cade58c1682
.dword 0x39b390a91e852eff
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 254*(XLEN/32),4,0xdeadbeef


signature_x15_2:
    .fill 42*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
