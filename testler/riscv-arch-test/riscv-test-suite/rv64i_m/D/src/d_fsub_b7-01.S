
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.5.6
// timestamp : Mon Sep 20 13:40:15 2021 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/compliance_fd/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/compliance_fd/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV64D/rv64d_fsub.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2021. IIT Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fsub.d instruction of the RISC-V FD extension for the fsub_b7 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IFD")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",d_fsub_b7)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs2 == rd != rs1, rs1==f26, rs2==f13, rd==f13, fs1 == 0 and fe1 == 0x7fc and fm1 == 0x132d8f91b7583 and fs2 == 0 and fe2 == 0x7fc and fm2 == 0x132d8f91b7583 and rm_val == 3  
// opcode: fsub.d ; op1:f26; op2:f13; dest:f13; op1val:0x7fc132d8f91b7583; op2val:0x7fc132d8f91b7583; valaddr_reg:x16; val_offset:0; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f13, f26, f13, 0x3, 0, x16, 0, x17, x15, 0, x18)

inst_1:
// rs1 == rs2 == rd, rs1==f3, rs2==f3, rd==f3, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x84620ba958ca7 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x84620ba958ca7 and rm_val == 3  
// opcode: fsub.d ; op1:f3; op2:f3; dest:f3; op1val:0x7fe84620ba958ca7; op2val:0x7fe84620ba958ca7; valaddr_reg:x16; val_offset:16; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f3, f3, f3, 0x3, 0, x16, 16, x17, x15, 16, x18)

inst_2:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==f4, rs2==f24, rd==f29, fs1 == 0 and fe1 == 0x7fd and fm1 == 0x9986e1947d1af and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x9986e1947d1af and rm_val == 3  
// opcode: fsub.d ; op1:f4; op2:f24; dest:f29; op1val:0x7fd9986e1947d1af; op2val:0x7fd9986e1947d1af; valaddr_reg:x16; val_offset:32; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f29, f4, f24, 0x3, 0, x16, 32, x17, x15, 32, x18)

inst_3:
// rs1 == rd != rs2, rs1==f15, rs2==f19, rd==f15, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2917055261bcd and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x2917055261bcd and rm_val == 3  
// opcode: fsub.d ; op1:f15; op2:f19; dest:f15; op1val:0x7fe2917055261bcd; op2val:0x7fe2917055261bcd; valaddr_reg:x16; val_offset:48; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f15, f15, f19, 0x3, 0, x16, 48, x17, x15, 48, x18)

inst_4:
// rs1 == rs2 != rd, rs1==f0, rs2==f0, rd==f2, fs1 == 0 and fe1 == 0x7fd and fm1 == 0x473e8571c52cb and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x473e8571c52cb and rm_val == 3  
// opcode: fsub.d ; op1:f0; op2:f0; dest:f2; op1val:0x7fd473e8571c52cb; op2val:0x7fd473e8571c52cb; valaddr_reg:x16; val_offset:64; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f2, f0, f0, 0x3, 0, x16, 64, x17, x15, 64, x18)

inst_5:
// rs1==f18, rs2==f29, rd==f6, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x984a694055a54 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x984a694055a54 and rm_val == 3  
// opcode: fsub.d ; op1:f18; op2:f29; dest:f6; op1val:0x7fe984a694055a54; op2val:0x7fe984a694055a54; valaddr_reg:x16; val_offset:80; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f6, f18, f29, 0x3, 0, x16, 80, x17, x15, 80, x18)

inst_6:
// rs1==f30, rs2==f1, rd==f4, fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfd2122050beac and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xfd2122050beac and rm_val == 3  
// opcode: fsub.d ; op1:f30; op2:f1; dest:f4; op1val:0x7fefd2122050beac; op2val:0x7fefd2122050beac; valaddr_reg:x16; val_offset:96; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f4, f30, f1, 0x3, 0, x16, 96, x17, x15, 96, x18)

inst_7:
// rs1==f9, rs2==f23, rd==f17, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2feec68719bba and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x2feec68719bba and rm_val == 3  
// opcode: fsub.d ; op1:f9; op2:f23; dest:f17; op1val:0x7fe2feec68719bba; op2val:0x7fe2feec68719bba; valaddr_reg:x16; val_offset:112; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f17, f9, f23, 0x3, 0, x16, 112, x17, x15, 112, x18)

inst_8:
// rs1==f8, rs2==f31, rd==f21, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6e0bf7d08105c and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x6e0bf7d08105c and rm_val == 3  
// opcode: fsub.d ; op1:f8; op2:f31; dest:f21; op1val:0x7fe6e0bf7d08105c; op2val:0x7fe6e0bf7d08105c; valaddr_reg:x16; val_offset:128; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f21, f8, f31, 0x3, 0, x16, 128, x17, x15, 128, x18)

inst_9:
// rs1==f21, rs2==f5, rd==f16, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x28ecf1d8ef197 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x28ecf1d8ef197 and rm_val == 3  
// opcode: fsub.d ; op1:f21; op2:f5; dest:f16; op1val:0x7fe28ecf1d8ef197; op2val:0x7fe28ecf1d8ef197; valaddr_reg:x16; val_offset:144; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f16, f21, f5, 0x3, 0, x16, 144, x17, x15, 144, x18)

inst_10:
// rs1==f7, rs2==f30, rd==f14, fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa3eab352272ea and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xa3eab352272ea and rm_val == 3  
// opcode: fsub.d ; op1:f7; op2:f30; dest:f14; op1val:0x7fea3eab352272ea; op2val:0x7fea3eab352272ea; valaddr_reg:x16; val_offset:160; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f14, f7, f30, 0x3, 0, x16, 160, x17, x15, 160, x18)

inst_11:
// rs1==f27, rs2==f17, rd==f8, fs1 == 0 and fe1 == 0x7fc and fm1 == 0x5949aff9333f3 and fs2 == 0 and fe2 == 0x7fc and fm2 == 0x5949aff9333f3 and rm_val == 3  
// opcode: fsub.d ; op1:f27; op2:f17; dest:f8; op1val:0x7fc5949aff9333f3; op2val:0x7fc5949aff9333f3; valaddr_reg:x16; val_offset:176; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f8, f27, f17, 0x3, 0, x16, 176, x17, x15, 176, x18)

inst_12:
// rs1==f6, rs2==f14, rd==f31, fs1 == 0 and fe1 == 0x7fd and fm1 == 0xfae7473993807 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xfae7473993807 and rm_val == 3  
// opcode: fsub.d ; op1:f6; op2:f14; dest:f31; op1val:0x7fdfae7473993807; op2val:0x7fdfae7473993807; valaddr_reg:x16; val_offset:192; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f31, f6, f14, 0x3, 0, x16, 192, x17, x15, 192, x18)

inst_13:
// rs1==f14, rs2==f21, rd==f23, fs1 == 0 and fe1 == 0x7fb and fm1 == 0x8610c871b285f and fs2 == 0 and fe2 == 0x7fb and fm2 == 0x8610c871b285f and rm_val == 3  
// opcode: fsub.d ; op1:f14; op2:f21; dest:f23; op1val:0x7fb8610c871b285f; op2val:0x7fb8610c871b285f; valaddr_reg:x16; val_offset:208; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f23, f14, f21, 0x3, 0, x16, 208, x17, x15, 208, x18)

inst_14:
// rs1==f13, rs2==f2, rd==f7, fs1 == 0 and fe1 == 0x7fb and fm1 == 0xe39a5539fae27 and fs2 == 0 and fe2 == 0x7fb and fm2 == 0xe39a5539fae27 and rm_val == 3  
// opcode: fsub.d ; op1:f13; op2:f2; dest:f7; op1val:0x7fbe39a5539fae27; op2val:0x7fbe39a5539fae27; valaddr_reg:x16; val_offset:224; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f7, f13, f2, 0x3, 0, x16, 224, x17, x15, 224, x18)

inst_15:
// rs1==f16, rs2==f22, rd==f28, fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x5ea96bd4dabb5 and rm_val == 3  
// opcode: fsub.d ; op1:f16; op2:f22; dest:f28; op1val:0x7fd5ea96bd4dabb5; op2val:0x7fd5ea96bd4dabb5; valaddr_reg:x16; val_offset:240; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f28, f16, f22, 0x3, 0, x16, 240, x17, x15, 240, x18)

inst_16:
// rs1==f5, rs2==f7, rd==f24, fs1 == 0 and fe1 == 0x7fe and fm1 == 0xeda15838c7849 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xeda15838c7849 and rm_val == 3  
// opcode: fsub.d ; op1:f5; op2:f7; dest:f24; op1val:0x7feeda15838c7849; op2val:0x7feeda15838c7849; valaddr_reg:x16; val_offset:256; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f24, f5, f7, 0x3, 0, x16, 256, x17, x15, 256, x18)

inst_17:
// rs1==f20, rs2==f9, rd==f22, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6868ac61d3897 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x6868ac61d3897 and rm_val == 3  
// opcode: fsub.d ; op1:f20; op2:f9; dest:f22; op1val:0x7fe6868ac61d3897; op2val:0x7fe6868ac61d3897; valaddr_reg:x16; val_offset:272; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f22, f20, f9, 0x3, 0, x16, 272, x17, x15, 272, x18)

inst_18:
// rs1==f22, rs2==f27, rd==f26, fs1 == 0 and fe1 == 0x7fc and fm1 == 0xbb82a6aeecb53 and fs2 == 0 and fe2 == 0x7fc and fm2 == 0xbb82a6aeecb53 and rm_val == 3  
// opcode: fsub.d ; op1:f22; op2:f27; dest:f26; op1val:0x7fcbb82a6aeecb53; op2val:0x7fcbb82a6aeecb53; valaddr_reg:x16; val_offset:288; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f26, f22, f27, 0x3, 0, x16, 288, x17, x15, 288, x18)

inst_19:
// rs1==f29, rs2==f4, rd==f11, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x31ed4c817d79b and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x31ed4c817d79b and rm_val == 3  
// opcode: fsub.d ; op1:f29; op2:f4; dest:f11; op1val:0x7fe31ed4c817d79b; op2val:0x7fe31ed4c817d79b; valaddr_reg:x16; val_offset:304; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f11, f29, f4, 0x3, 0, x16, 304, x17, x15, 304, x18)

inst_20:
// rs1==f31, rs2==f16, rd==f5, fs1 == 0 and fe1 == 0x7fc and fm1 == 0x7e7cb00b83da3 and fs2 == 0 and fe2 == 0x7fc and fm2 == 0x7e7cb00b83da3 and rm_val == 3  
// opcode: fsub.d ; op1:f31; op2:f16; dest:f5; op1val:0x7fc7e7cb00b83da3; op2val:0x7fc7e7cb00b83da3; valaddr_reg:x16; val_offset:320; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f5, f31, f16, 0x3, 0, x16, 320, x17, x15, 320, x18)

inst_21:
// rs1==f28, rs2==f15, rd==f19, fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf82d9cf6dc925 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xf82d9cf6dc925 and rm_val == 3  
// opcode: fsub.d ; op1:f28; op2:f15; dest:f19; op1val:0x7fdf82d9cf6dc925; op2val:0x7fdf82d9cf6dc925; valaddr_reg:x16; val_offset:336; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f19, f28, f15, 0x3, 0, x16, 336, x17, x15, 336, x18)

inst_22:
// rs1==f2, rs2==f26, rd==f25, fs1 == 0 and fe1 == 0x7fb and fm1 == 0xb3c136748a917 and fs2 == 0 and fe2 == 0x7fb and fm2 == 0xb3c136748a917 and rm_val == 3  
// opcode: fsub.d ; op1:f2; op2:f26; dest:f25; op1val:0x7fbb3c136748a917; op2val:0x7fbb3c136748a917; valaddr_reg:x16; val_offset:352; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f25, f2, f26, 0x3, 0, x16, 352, x17, x15, 352, x18)

inst_23:
// rs1==f24, rs2==f6, rd==f10, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6fdc352b9c092 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x6fdc352b9c092 and rm_val == 3  
// opcode: fsub.d ; op1:f24; op2:f6; dest:f10; op1val:0x7fe6fdc352b9c092; op2val:0x7fe6fdc352b9c092; valaddr_reg:x16; val_offset:368; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f10, f24, f6, 0x3, 0, x16, 368, x17, x15, 368, x18)

inst_24:
// rs1==f12, rs2==f8, rd==f0, fs1 == 0 and fe1 == 0x7fc and fm1 == 0xec87e91da77d7 and fs2 == 0 and fe2 == 0x7fc and fm2 == 0xec87e91da77d7 and rm_val == 3  
// opcode: fsub.d ; op1:f12; op2:f8; dest:f0; op1val:0x7fcec87e91da77d7; op2val:0x7fcec87e91da77d7; valaddr_reg:x16; val_offset:384; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f0, f12, f8, 0x3, 0, x16, 384, x17, x15, 384, x18)

inst_25:
// rs1==f11, rs2==f12, rd==f30, fs1 == 0 and fe1 == 0x7fd and fm1 == 0x71c18427a646b and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x71c18427a646b and rm_val == 3  
// opcode: fsub.d ; op1:f11; op2:f12; dest:f30; op1val:0x7fd71c18427a646b; op2val:0x7fd71c18427a646b; valaddr_reg:x16; val_offset:400; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f30, f11, f12, 0x3, 0, x16, 400, x17, x15, 400, x18)

inst_26:
// rs1==f19, rs2==f11, rd==f12, fs1 == 0 and fe1 == 0x7fc and fm1 == 0x1ad31ee4d4ad7 and fs2 == 0 and fe2 == 0x7fc and fm2 == 0x1ad31ee4d4ad7 and rm_val == 3  
// opcode: fsub.d ; op1:f19; op2:f11; dest:f12; op1val:0x7fc1ad31ee4d4ad7; op2val:0x7fc1ad31ee4d4ad7; valaddr_reg:x16; val_offset:416; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f19, f11, 0x3, 0, x16, 416, x17, x15, 416, x18)

inst_27:
// rs1==f25, rs2==f10, rd==f18, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0d9d824a66fc7 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x0d9d824a66fc7 and rm_val == 3  
// opcode: fsub.d ; op1:f25; op2:f10; dest:f18; op1val:0x7fe0d9d824a66fc7; op2val:0x7fe0d9d824a66fc7; valaddr_reg:x16; val_offset:432; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f18, f25, f10, 0x3, 0, x16, 432, x17, x15, 432, x18)

inst_28:
// rs1==f1, rs2==f28, rd==f20, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3667b2bc82acb and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x3667b2bc82acb and rm_val == 3  
// opcode: fsub.d ; op1:f1; op2:f28; dest:f20; op1val:0x7fe3667b2bc82acb; op2val:0x7fe3667b2bc82acb; valaddr_reg:x16; val_offset:448; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f20, f1, f28, 0x3, 0, x16, 448, x17, x15, 448, x18)

inst_29:
// rs1==f23, rs2==f20, rd==f9, fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd387bdfbb52c6 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xd387bdfbb52c6 and rm_val == 3  
// opcode: fsub.d ; op1:f23; op2:f20; dest:f9; op1val:0x7fed387bdfbb52c6; op2val:0x7fed387bdfbb52c6; valaddr_reg:x16; val_offset:464; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f9, f23, f20, 0x3, 0, x16, 464, x17, x15, 464, x18)

inst_30:
// rs1==f10, rs2==f18, rd==f27, fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf233966510bcc and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xf233966510bcc and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f18; dest:f27; op1val:0x7fef233966510bcc; op2val:0x7fef233966510bcc; valaddr_reg:x16; val_offset:480; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f27, f10, f18, 0x3, 0, x16, 480, x17, x15, 480, x18)

inst_31:
// rs1==f17, rs2==f25, rd==f1, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4074322ede639 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x4074322ede639 and rm_val == 3  
// opcode: fsub.d ; op1:f17; op2:f25; dest:f1; op1val:0x7fe4074322ede639; op2val:0x7fe4074322ede639; valaddr_reg:x16; val_offset:496; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f1, f17, f25, 0x3, 0, x16, 496, x17, x15, 496, x18)

inst_32:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9221841138cb5 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x9221841138cb5 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe9221841138cb5; op2val:0x7fe9221841138cb5; valaddr_reg:x16; val_offset:512; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 512, x17, x15, 512, x18)

inst_33:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xba20c4777099d and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xba20c4777099d and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fdba20c4777099d; op2val:0x7fdba20c4777099d; valaddr_reg:x16; val_offset:528; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 528, x17, x15, 528, x18)

inst_34:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3eb20959c42c2 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x3eb20959c42c2 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe3eb20959c42c2; op2val:0x7fe3eb20959c42c2; valaddr_reg:x16; val_offset:544; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 544, x17, x15, 544, x18)

inst_35:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xf446ded06de1f and fs2 == 0 and fe2 == 0x7f9 and fm2 == 0xf446ded06de1f and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7f9f446ded06de1f; op2val:0x7f9f446ded06de1f; valaddr_reg:x16; val_offset:560; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 560, x17, x15, 560, x18)

inst_36:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x69d3500fa16c1 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x69d3500fa16c1 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe69d3500fa16c1; op2val:0x7fe69d3500fa16c1; valaddr_reg:x16; val_offset:576; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 576, x17, x15, 576, x18)

inst_37:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xc74ef4423e96b and fs2 == 0 and fe2 == 0x7fc and fm2 == 0xc74ef4423e96b and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fcc74ef4423e96b; op2val:0x7fcc74ef4423e96b; valaddr_reg:x16; val_offset:592; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 592, x17, x15, 592, x18)

inst_38:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xbbc271a710d1b and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xbbc271a710d1b and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7febbc271a710d1b; op2val:0x7febbc271a710d1b; valaddr_reg:x16; val_offset:608; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 608, x17, x15, 608, x18)

inst_39:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x60ffd67bcec83 and fs2 == 0 and fe2 == 0x7fc and fm2 == 0x60ffd67bcec83 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fc60ffd67bcec83; op2val:0x7fc60ffd67bcec83; valaddr_reg:x16; val_offset:624; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 624, x17, x15, 624, x18)

inst_40:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xdb5e85647ec13 and fs2 == 0 and fe2 == 0x7fc and fm2 == 0xdb5e85647ec13 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fcdb5e85647ec13; op2val:0x7fcdb5e85647ec13; valaddr_reg:x16; val_offset:640; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 640, x17, x15, 640, x18)

inst_41:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x143c21ad8c8b5 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x143c21ad8c8b5 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd143c21ad8c8b5; op2val:0x7fd143c21ad8c8b5; valaddr_reg:x16; val_offset:656; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 656, x17, x15, 656, x18)

inst_42:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6d479d3fc4771 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x6d479d3fc4771 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe6d479d3fc4771; op2val:0x7fe6d479d3fc4771; valaddr_reg:x16; val_offset:672; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 672, x17, x15, 672, x18)

inst_43:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x5932a24c0014f and fs2 == 0 and fe2 == 0x7fc and fm2 == 0x5932a24c0014f and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fc5932a24c0014f; op2val:0x7fc5932a24c0014f; valaddr_reg:x16; val_offset:688; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 688, x17, x15, 688, x18)

inst_44:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x05e5cee3b08d7 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x05e5cee3b08d7 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe05e5cee3b08d7; op2val:0x7fe05e5cee3b08d7; valaddr_reg:x16; val_offset:704; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 704, x17, x15, 704, x18)

inst_45:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0be093ea29884 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x0be093ea29884 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe0be093ea29884; op2val:0x7fe0be093ea29884; valaddr_reg:x16; val_offset:720; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 720, x17, x15, 720, x18)

inst_46:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x32ba6165fce3f and fs2 == 0 and fe2 == 0x7fb and fm2 == 0x32ba6165fce3f and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fb32ba6165fce3f; op2val:0x7fb32ba6165fce3f; valaddr_reg:x16; val_offset:736; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 736, x17, x15, 736, x18)

inst_47:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc5a51b555f5c9 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xc5a51b555f5c9 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fec5a51b555f5c9; op2val:0x7fec5a51b555f5c9; valaddr_reg:x16; val_offset:752; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 752, x17, x15, 752, x18)

inst_48:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xabce33873116b and fs2 == 0 and fe2 == 0x7fc and fm2 == 0xabce33873116b and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fcabce33873116b; op2val:0x7fcabce33873116b; valaddr_reg:x16; val_offset:768; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 768, x17, x15, 768, x18)

inst_49:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x60b89491a6a27 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x60b89491a6a27 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe60b89491a6a27; op2val:0x7fe60b89491a6a27; valaddr_reg:x16; val_offset:784; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 784, x17, x15, 784, x18)

inst_50:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x618258c5f4965 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x618258c5f4965 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe618258c5f4965; op2val:0x7fe618258c5f4965; valaddr_reg:x16; val_offset:800; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 800, x17, x15, 800, x18)

inst_51:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x03aaf26d74a36 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x03aaf26d74a36 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe03aaf26d74a36; op2val:0x7fe03aaf26d74a36; valaddr_reg:x16; val_offset:816; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 816, x17, x15, 816, x18)

inst_52:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x504dcbdc51a65 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x504dcbdc51a65 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe504dcbdc51a65; op2val:0x7fe504dcbdc51a65; valaddr_reg:x16; val_offset:832; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 832, x17, x15, 832, x18)

inst_53:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xb0bd7b08edb55 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xb0bd7b08edb55 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fdb0bd7b08edb55; op2val:0x7fdb0bd7b08edb55; valaddr_reg:x16; val_offset:848; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 848, x17, x15, 848, x18)

inst_54:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x05438a864ff48 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x05438a864ff48 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe05438a864ff48; op2val:0x7fe05438a864ff48; valaddr_reg:x16; val_offset:864; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 864, x17, x15, 864, x18)

inst_55:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xde5026c152607 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xde5026c152607 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fdde5026c152607; op2val:0x7fdde5026c152607; valaddr_reg:x16; val_offset:880; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 880, x17, x15, 880, x18)

inst_56:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xaa7bbc9099344 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xaa7bbc9099344 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7feaa7bbc9099344; op2val:0x7feaa7bbc9099344; valaddr_reg:x16; val_offset:896; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 896, x17, x15, 896, x18)

inst_57:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x16a782d36f4f6 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x16a782d36f4f6 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe16a782d36f4f6; op2val:0x7fe16a782d36f4f6; valaddr_reg:x16; val_offset:912; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 912, x17, x15, 912, x18)

inst_58:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6a8199da501dc and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x6a8199da501dc and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe6a8199da501dc; op2val:0x7fe6a8199da501dc; valaddr_reg:x16; val_offset:928; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 928, x17, x15, 928, x18)

inst_59:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x65d63e74d209d and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x65d63e74d209d and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd65d63e74d209d; op2val:0x7fd65d63e74d209d; valaddr_reg:x16; val_offset:944; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 944, x17, x15, 944, x18)

inst_60:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa1726431ab40b and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xa1726431ab40b and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fea1726431ab40b; op2val:0x7fea1726431ab40b; valaddr_reg:x16; val_offset:960; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 960, x17, x15, 960, x18)

inst_61:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb14a0c4b66d3b and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xb14a0c4b66d3b and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7feb14a0c4b66d3b; op2val:0x7feb14a0c4b66d3b; valaddr_reg:x16; val_offset:976; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 976, x17, x15, 976, x18)

inst_62:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xdfcdecd96da66 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xdfcdecd96da66 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fedfcdecd96da66; op2val:0x7fedfcdecd96da66; valaddr_reg:x16; val_offset:992; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 992, x17, x15, 992, x18)

inst_63:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x422ea209fd4bd and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x422ea209fd4bd and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe422ea209fd4bd; op2val:0x7fe422ea209fd4bd; valaddr_reg:x16; val_offset:1008; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1008, x17, x15, 1008, x18)

inst_64:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4264cf0154662 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x4264cf0154662 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe4264cf0154662; op2val:0x7fe4264cf0154662; valaddr_reg:x16; val_offset:1024; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1024, x17, x15, 1024, x18)

inst_65:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x47dca9bde3664 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x47dca9bde3664 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe47dca9bde3664; op2val:0x7fe47dca9bde3664; valaddr_reg:x16; val_offset:1040; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1040, x17, x15, 1040, x18)

inst_66:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf886e2fe6ac5f and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xf886e2fe6ac5f and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fdf886e2fe6ac5f; op2val:0x7fdf886e2fe6ac5f; valaddr_reg:x16; val_offset:1056; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1056, x17, x15, 1056, x18)

inst_67:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcbbac03deb701 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xcbbac03deb701 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fecbbac03deb701; op2val:0x7fecbbac03deb701; valaddr_reg:x16; val_offset:1072; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1072, x17, x15, 1072, x18)

inst_68:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2b3a267e5dfb6 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x2b3a267e5dfb6 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe2b3a267e5dfb6; op2val:0x7fe2b3a267e5dfb6; valaddr_reg:x16; val_offset:1088; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1088, x17, x15, 1088, x18)

inst_69:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x9efa662b0261b and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x9efa662b0261b and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd9efa662b0261b; op2val:0x7fd9efa662b0261b; valaddr_reg:x16; val_offset:1104; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1104, x17, x15, 1104, x18)

inst_70:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8e80a6ca28041 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x8e80a6ca28041 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd8e80a6ca28041; op2val:0x7fd8e80a6ca28041; valaddr_reg:x16; val_offset:1120; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1120, x17, x15, 1120, x18)

inst_71:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x700c54435a377 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x700c54435a377 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd700c54435a377; op2val:0x7fd700c54435a377; valaddr_reg:x16; val_offset:1136; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1136, x17, x15, 1136, x18)

inst_72:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3d750eeace47f and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x3d750eeace47f and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe3d750eeace47f; op2val:0x7fe3d750eeace47f; valaddr_reg:x16; val_offset:1152; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1152, x17, x15, 1152, x18)

inst_73:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x38aa27d9f85c9 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd38aa27d9f85c9; op2val:0x7fd38aa27d9f85c9; valaddr_reg:x16; val_offset:1168; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1168, x17, x15, 1168, x18)

inst_74:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7d40396d9385b and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x7d40396d9385b and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe7d40396d9385b; op2val:0x7fe7d40396d9385b; valaddr_reg:x16; val_offset:1184; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1184, x17, x15, 1184, x18)

inst_75:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xab4fd6611517f and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7feab4fd6611517f; op2val:0x7feab4fd6611517f; valaddr_reg:x16; val_offset:1200; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1200, x17, x15, 1200, x18)

inst_76:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf95a713b177ca and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xf95a713b177ca and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fef95a713b177ca; op2val:0x7fef95a713b177ca; valaddr_reg:x16; val_offset:1216; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1216, x17, x15, 1216, x18)

inst_77:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xa8a9e6ee9dc95 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fea8a9e6ee9dc95; op2val:0x7fea8a9e6ee9dc95; valaddr_reg:x16; val_offset:1232; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1232, x17, x15, 1232, x18)

inst_78:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x324293ee39f7d and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x324293ee39f7d and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe324293ee39f7d; op2val:0x7fe324293ee39f7d; valaddr_reg:x16; val_offset:1248; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1248, x17, x15, 1248, x18)

inst_79:
// fs1 == 0 and fe1 == 0x7f6 and fm1 == 0xfbfd7fab4eeff and fs2 == 0 and fe2 == 0x7f6 and fm2 == 0xfbfd7fab4eeff and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7f6fbfd7fab4eeff; op2val:0x7f6fbfd7fab4eeff; valaddr_reg:x16; val_offset:1264; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1264, x17, x15, 1264, x18)

inst_80:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x829e9eb0f2033 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x829e9eb0f2033 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd829e9eb0f2033; op2val:0x7fd829e9eb0f2033; valaddr_reg:x16; val_offset:1280; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1280, x17, x15, 1280, x18)

inst_81:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf81d438e79e89 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xf81d438e79e89 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fdf81d438e79e89; op2val:0x7fdf81d438e79e89; valaddr_reg:x16; val_offset:1296; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1296, x17, x15, 1296, x18)

inst_82:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x90f0d1eecae4a and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x90f0d1eecae4a and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe90f0d1eecae4a; op2val:0x7fe90f0d1eecae4a; valaddr_reg:x16; val_offset:1312; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1312, x17, x15, 1312, x18)

inst_83:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x381d474507a13 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd381d474507a13; op2val:0x7fd381d474507a13; valaddr_reg:x16; val_offset:1328; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1328, x17, x15, 1328, x18)

inst_84:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc4ee0c5be65d1 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xc4ee0c5be65d1 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fdc4ee0c5be65d1; op2val:0x7fdc4ee0c5be65d1; valaddr_reg:x16; val_offset:1344; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1344, x17, x15, 1344, x18)

inst_85:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0e89a794b74d2 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x0e89a794b74d2 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe0e89a794b74d2; op2val:0x7fe0e89a794b74d2; valaddr_reg:x16; val_offset:1360; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1360, x17, x15, 1360, x18)

inst_86:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x018d796b58467 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x018d796b58467 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe018d796b58467; op2val:0x7fe018d796b58467; valaddr_reg:x16; val_offset:1376; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1376, x17, x15, 1376, x18)

inst_87:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2528fb338cf74 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x2528fb338cf74 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe2528fb338cf74; op2val:0x7fe2528fb338cf74; valaddr_reg:x16; val_offset:1392; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1392, x17, x15, 1392, x18)

inst_88:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x17be9a133f3af and fs2 == 0 and fe2 == 0x7fc and fm2 == 0x17be9a133f3af and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fc17be9a133f3af; op2val:0x7fc17be9a133f3af; valaddr_reg:x16; val_offset:1408; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1408, x17, x15, 1408, x18)

inst_89:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x85aa65ee5b308 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x85aa65ee5b308 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe85aa65ee5b308; op2val:0x7fe85aa65ee5b308; valaddr_reg:x16; val_offset:1424; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1424, x17, x15, 1424, x18)

inst_90:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x172fde92f86c8 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x172fde92f86c8 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe172fde92f86c8; op2val:0x7fe172fde92f86c8; valaddr_reg:x16; val_offset:1440; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1440, x17, x15, 1440, x18)

inst_91:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xe39ef9237c697 and fs2 == 0 and fe2 == 0x7fb and fm2 == 0xe39ef9237c697 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fbe39ef9237c697; op2val:0x7fbe39ef9237c697; valaddr_reg:x16; val_offset:1456; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1456, x17, x15, 1456, x18)

inst_92:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xbaf02dcedb6b7 and fs2 == 0 and fe2 == 0x7fb and fm2 == 0xbaf02dcedb6b7 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fbbaf02dcedb6b7; op2val:0x7fbbaf02dcedb6b7; valaddr_reg:x16; val_offset:1472; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1472, x17, x15, 1472, x18)

inst_93:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x88745c9a37993 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x88745c9a37993 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd88745c9a37993; op2val:0x7fd88745c9a37993; valaddr_reg:x16; val_offset:1488; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1488, x17, x15, 1488, x18)

inst_94:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x89c3334d5f5bb and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x89c3334d5f5bb and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe89c3334d5f5bb; op2val:0x7fe89c3334d5f5bb; valaddr_reg:x16; val_offset:1504; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1504, x17, x15, 1504, x18)

inst_95:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf696b535c1769 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xf696b535c1769 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fdf696b535c1769; op2val:0x7fdf696b535c1769; valaddr_reg:x16; val_offset:1520; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1520, x17, x15, 1520, x18)

inst_96:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf27dcf8ac02d4 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xf27dcf8ac02d4 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fef27dcf8ac02d4; op2val:0x7fef27dcf8ac02d4; valaddr_reg:x16; val_offset:1536; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1536, x17, x15, 1536, x18)

inst_97:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9509d7b71e92e and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x9509d7b71e92e and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe9509d7b71e92e; op2val:0x7fe9509d7b71e92e; valaddr_reg:x16; val_offset:1552; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1552, x17, x15, 1552, x18)

inst_98:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x00e7456a8a9b1 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x00e7456a8a9b1 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd00e7456a8a9b1; op2val:0x7fd00e7456a8a9b1; valaddr_reg:x16; val_offset:1568; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1568, x17, x15, 1568, x18)

inst_99:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x17c87a27d34af and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x17c87a27d34af and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd17c87a27d34af; op2val:0x7fd17c87a27d34af; valaddr_reg:x16; val_offset:1584; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1584, x17, x15, 1584, x18)

inst_100:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x239dca92ff1cf and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x239dca92ff1cf and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd239dca92ff1cf; op2val:0x7fd239dca92ff1cf; valaddr_reg:x16; val_offset:1600; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1600, x17, x15, 1600, x18)

inst_101:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xabb0ae90aa573 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xabb0ae90aa573 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7feabb0ae90aa573; op2val:0x7feabb0ae90aa573; valaddr_reg:x16; val_offset:1616; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1616, x17, x15, 1616, x18)

inst_102:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x414b2a3e47216 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x414b2a3e47216 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe414b2a3e47216; op2val:0x7fe414b2a3e47216; valaddr_reg:x16; val_offset:1632; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1632, x17, x15, 1632, x18)

inst_103:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc14dba4a1f611 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xc14dba4a1f611 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fdc14dba4a1f611; op2val:0x7fdc14dba4a1f611; valaddr_reg:x16; val_offset:1648; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1648, x17, x15, 1648, x18)

inst_104:
// fs1 == 0 and fe1 == 0x7f7 and fm1 == 0x06bb1eb6b71ff and fs2 == 0 and fe2 == 0x7f7 and fm2 == 0x06bb1eb6b71ff and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7f706bb1eb6b71ff; op2val:0x7f706bb1eb6b71ff; valaddr_reg:x16; val_offset:1664; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1664, x17, x15, 1664, x18)

inst_105:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xfc58dd60fc47b and fs2 == 0 and fe2 == 0x7fc and fm2 == 0xfc58dd60fc47b and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fcfc58dd60fc47b; op2val:0x7fcfc58dd60fc47b; valaddr_reg:x16; val_offset:1680; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1680, x17, x15, 1680, x18)

inst_106:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xe3b25f522e53f and fs2 == 0 and fe2 == 0x7fb and fm2 == 0xe3b25f522e53f and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fbe3b25f522e53f; op2val:0x7fbe3b25f522e53f; valaddr_reg:x16; val_offset:1696; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1696, x17, x15, 1696, x18)

inst_107:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x338c35622df30 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x338c35622df30 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe338c35622df30; op2val:0x7fe338c35622df30; valaddr_reg:x16; val_offset:1712; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1712, x17, x15, 1712, x18)

inst_108:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xeb39a20d91a7d and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xeb39a20d91a7d and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7feeb39a20d91a7d; op2val:0x7feeb39a20d91a7d; valaddr_reg:x16; val_offset:1728; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1728, x17, x15, 1728, x18)

inst_109:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x02b9579f55c5b and fs2 == 0 and fe2 == 0x7fc and fm2 == 0x02b9579f55c5b and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fc02b9579f55c5b; op2val:0x7fc02b9579f55c5b; valaddr_reg:x16; val_offset:1744; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1744, x17, x15, 1744, x18)

inst_110:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x516aa8e8fb467 and fs2 == 0 and fe2 == 0x7fc and fm2 == 0x516aa8e8fb467 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fc516aa8e8fb467; op2val:0x7fc516aa8e8fb467; valaddr_reg:x16; val_offset:1760; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1760, x17, x15, 1760, x18)

inst_111:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9afd0179d1bae and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x9afd0179d1bae and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe9afd0179d1bae; op2val:0x7fe9afd0179d1bae; valaddr_reg:x16; val_offset:1776; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1776, x17, x15, 1776, x18)

inst_112:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf1421cf676cc1 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xf1421cf676cc1 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fef1421cf676cc1; op2val:0x7fef1421cf676cc1; valaddr_reg:x16; val_offset:1792; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1792, x17, x15, 1792, x18)

inst_113:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc7bd79ecec98f and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xc7bd79ecec98f and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fdc7bd79ecec98f; op2val:0x7fdc7bd79ecec98f; valaddr_reg:x16; val_offset:1808; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1808, x17, x15, 1808, x18)

inst_114:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x51c6792bf1bb8 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x51c6792bf1bb8 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe51c6792bf1bb8; op2val:0x7fe51c6792bf1bb8; valaddr_reg:x16; val_offset:1824; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1824, x17, x15, 1824, x18)

inst_115:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8d300de77b552 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x8d300de77b552 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe8d300de77b552; op2val:0x7fe8d300de77b552; valaddr_reg:x16; val_offset:1840; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1840, x17, x15, 1840, x18)

inst_116:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xeb3b913e63771 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xeb3b913e63771 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7feeb3b913e63771; op2val:0x7feeb3b913e63771; valaddr_reg:x16; val_offset:1856; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1856, x17, x15, 1856, x18)

inst_117:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x11f2665e52fc1 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x11f2665e52fc1 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd11f2665e52fc1; op2val:0x7fd11f2665e52fc1; valaddr_reg:x16; val_offset:1872; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1872, x17, x15, 1872, x18)

inst_118:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9daacd1054eee and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x9daacd1054eee and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe9daacd1054eee; op2val:0x7fe9daacd1054eee; valaddr_reg:x16; val_offset:1888; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1888, x17, x15, 1888, x18)

inst_119:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x4d7c4e18c10ef and fs2 == 0 and fe2 == 0x7fa and fm2 == 0x4d7c4e18c10ef and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fa4d7c4e18c10ef; op2val:0x7fa4d7c4e18c10ef; valaddr_reg:x16; val_offset:1904; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1904, x17, x15, 1904, x18)

inst_120:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x5181b18b5230b and fs2 == 0 and fe2 == 0x7fc and fm2 == 0x5181b18b5230b and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fc5181b18b5230b; op2val:0x7fc5181b18b5230b; valaddr_reg:x16; val_offset:1920; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1920, x17, x15, 1920, x18)

inst_121:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x645543b126259 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x645543b126259 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd645543b126259; op2val:0x7fd645543b126259; valaddr_reg:x16; val_offset:1936; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1936, x17, x15, 1936, x18)

inst_122:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5cff741930dc6 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x5cff741930dc6 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe5cff741930dc6; op2val:0x7fe5cff741930dc6; valaddr_reg:x16; val_offset:1952; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1952, x17, x15, 1952, x18)

inst_123:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x83f7d2b210b05 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x83f7d2b210b05 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe83f7d2b210b05; op2val:0x7fe83f7d2b210b05; valaddr_reg:x16; val_offset:1968; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1968, x17, x15, 1968, x18)

inst_124:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xbdaeddf112cfb and fs2 == 0 and fe2 == 0x7fc and fm2 == 0xbdaeddf112cfb and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fcbdaeddf112cfb; op2val:0x7fcbdaeddf112cfb; valaddr_reg:x16; val_offset:1984; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1984, x17, x15, 1984, x18)

inst_125:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x69035627e1257 and fs2 == 0 and fe2 == 0x7fc and fm2 == 0x69035627e1257 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fc69035627e1257; op2val:0x7fc69035627e1257; valaddr_reg:x16; val_offset:2000; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 2000, x17, x15, 2000, x18)

inst_126:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xeb8f7360e493b and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xeb8f7360e493b and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7feeb8f7360e493b; op2val:0x7feeb8f7360e493b; valaddr_reg:x16; val_offset:2016; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 2016, x17, x15, 2016, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_2)

inst_127:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb669f507e33a4 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xb669f507e33a4 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7feb669f507e33a4; op2val:0x7feb669f507e33a4; valaddr_reg:x16; val_offset:0; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 0, x17, x15, 0, x18)

inst_128:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x790bcb9dbeeda and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x790bcb9dbeeda and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe790bcb9dbeeda; op2val:0x7fe790bcb9dbeeda; valaddr_reg:x16; val_offset:16; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 16, x17, x15, 16, x18)

inst_129:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7c88779524935 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x7c88779524935 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd7c88779524935; op2val:0x7fd7c88779524935; valaddr_reg:x16; val_offset:32; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 32, x17, x15, 32, x18)

inst_130:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6296d3932c17a and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x6296d3932c17a and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe6296d3932c17a; op2val:0x7fe6296d3932c17a; valaddr_reg:x16; val_offset:48; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 48, x17, x15, 48, x18)

inst_131:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc419d48d0bc89 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xc419d48d0bc89 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fec419d48d0bc89; op2val:0x7fec419d48d0bc89; valaddr_reg:x16; val_offset:64; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 64, x17, x15, 64, x18)

inst_132:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x46970482fa4d3 and fs2 == 0 and fe2 == 0x7fc and fm2 == 0x46970482fa4d3 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fc46970482fa4d3; op2val:0x7fc46970482fa4d3; valaddr_reg:x16; val_offset:80; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 80, x17, x15, 80, x18)

inst_133:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x05fc74a94c67c and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x05fc74a94c67c and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe05fc74a94c67c; op2val:0x7fe05fc74a94c67c; valaddr_reg:x16; val_offset:96; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 96, x17, x15, 96, x18)

inst_134:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x8ad527afb8d3f and fs2 == 0 and fe2 == 0x7fa and fm2 == 0x8ad527afb8d3f and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fa8ad527afb8d3f; op2val:0x7fa8ad527afb8d3f; valaddr_reg:x16; val_offset:112; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 112, x17, x15, 112, x18)

inst_135:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x19d4ad7c76167 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x19d4ad7c76167 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd19d4ad7c76167; op2val:0x7fd19d4ad7c76167; valaddr_reg:x16; val_offset:128; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 128, x17, x15, 128, x18)

inst_136:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd05a5fee9b2b0 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xd05a5fee9b2b0 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fed05a5fee9b2b0; op2val:0x7fed05a5fee9b2b0; valaddr_reg:x16; val_offset:144; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 144, x17, x15, 144, x18)

inst_137:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xa623d9ab2139f and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xa623d9ab2139f and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fda623d9ab2139f; op2val:0x7fda623d9ab2139f; valaddr_reg:x16; val_offset:160; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 160, x17, x15, 160, x18)

inst_138:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xea51987a6fe4b and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xea51987a6fe4b and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fdea51987a6fe4b; op2val:0x7fdea51987a6fe4b; valaddr_reg:x16; val_offset:176; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 176, x17, x15, 176, x18)

inst_139:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xe830fb501fc6b and fs2 == 0 and fe2 == 0x7fc and fm2 == 0xe830fb501fc6b and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fce830fb501fc6b; op2val:0x7fce830fb501fc6b; valaddr_reg:x16; val_offset:192; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 192, x17, x15, 192, x18)

inst_140:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5f7ea628e7311 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x5f7ea628e7311 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe5f7ea628e7311; op2val:0x7fe5f7ea628e7311; valaddr_reg:x16; val_offset:208; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 208, x17, x15, 208, x18)

inst_141:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4c34b3fae86a6 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x4c34b3fae86a6 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe4c34b3fae86a6; op2val:0x7fe4c34b3fae86a6; valaddr_reg:x16; val_offset:224; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 224, x17, x15, 224, x18)

inst_142:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0eb1fe944dafc and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x0eb1fe944dafc and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe0eb1fe944dafc; op2val:0x7fe0eb1fe944dafc; valaddr_reg:x16; val_offset:240; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 240, x17, x15, 240, x18)

inst_143:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xde44cb7c6a477 and fs2 == 0 and fe2 == 0x7fc and fm2 == 0xde44cb7c6a477 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fcde44cb7c6a477; op2val:0x7fcde44cb7c6a477; valaddr_reg:x16; val_offset:256; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 256, x17, x15, 256, x18)

inst_144:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x9ab5479609cdf and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x9ab5479609cdf and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd9ab5479609cdf; op2val:0x7fd9ab5479609cdf; valaddr_reg:x16; val_offset:272; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 272, x17, x15, 272, x18)

inst_145:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa86a1651b8f6d and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xa86a1651b8f6d and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fea86a1651b8f6d; op2val:0x7fea86a1651b8f6d; valaddr_reg:x16; val_offset:288; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 288, x17, x15, 288, x18)

inst_146:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x0043a4237475b and fs2 == 0 and fe2 == 0x7fc and fm2 == 0x0043a4237475b and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fc0043a4237475b; op2val:0x7fc0043a4237475b; valaddr_reg:x16; val_offset:304; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 304, x17, x15, 304, x18)

inst_147:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x6b764b4a3fc09 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x6b764b4a3fc09 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd6b764b4a3fc09; op2val:0x7fd6b764b4a3fc09; valaddr_reg:x16; val_offset:320; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 320, x17, x15, 320, x18)

inst_148:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x242628c135d65 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x242628c135d65 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe242628c135d65; op2val:0x7fe242628c135d65; valaddr_reg:x16; val_offset:336; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 336, x17, x15, 336, x18)

inst_149:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4afa083bb05d4 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x4afa083bb05d4 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe4afa083bb05d4; op2val:0x7fe4afa083bb05d4; valaddr_reg:x16; val_offset:352; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 352, x17, x15, 352, x18)

inst_150:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x08290cbe2e23f and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x08290cbe2e23f and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd08290cbe2e23f; op2val:0x7fd08290cbe2e23f; valaddr_reg:x16; val_offset:368; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 368, x17, x15, 368, x18)

inst_151:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x95351e6b0b955 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x95351e6b0b955 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd95351e6b0b955; op2val:0x7fd95351e6b0b955; valaddr_reg:x16; val_offset:384; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 384, x17, x15, 384, x18)

inst_152:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb3dca1e26f92c and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xb3dca1e26f92c and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7feb3dca1e26f92c; op2val:0x7feb3dca1e26f92c; valaddr_reg:x16; val_offset:400; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 400, x17, x15, 400, x18)

inst_153:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1939e8900399e and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x1939e8900399e and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe1939e8900399e; op2val:0x7fe1939e8900399e; valaddr_reg:x16; val_offset:416; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 416, x17, x15, 416, x18)

inst_154:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xed40ea1c96a68 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xed40ea1c96a68 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7feed40ea1c96a68; op2val:0x7feed40ea1c96a68; valaddr_reg:x16; val_offset:432; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 432, x17, x15, 432, x18)

inst_155:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x02a602e38e2e5 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x02a602e38e2e5 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd02a602e38e2e5; op2val:0x7fd02a602e38e2e5; valaddr_reg:x16; val_offset:448; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 448, x17, x15, 448, x18)

inst_156:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6dfd78772ca12 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x6dfd78772ca12 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe6dfd78772ca12; op2val:0x7fe6dfd78772ca12; valaddr_reg:x16; val_offset:464; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 464, x17, x15, 464, x18)

inst_157:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xbb0574c4cc8c3 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xbb0574c4cc8c3 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fdbb0574c4cc8c3; op2val:0x7fdbb0574c4cc8c3; valaddr_reg:x16; val_offset:480; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 480, x17, x15, 480, x18)

inst_158:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x61129e8d25d53 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x61129e8d25d53 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe61129e8d25d53; op2val:0x7fe61129e8d25d53; valaddr_reg:x16; val_offset:496; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 496, x17, x15, 496, x18)

inst_159:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xae72a87c61e34 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xae72a87c61e34 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7feae72a87c61e34; op2val:0x7feae72a87c61e34; valaddr_reg:x16; val_offset:512; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 512, x17, x15, 512, x18)

inst_160:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9b930ceb054c0 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x9b930ceb054c0 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe9b930ceb054c0; op2val:0x7fe9b930ceb054c0; valaddr_reg:x16; val_offset:528; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 528, x17, x15, 528, x18)

inst_161:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x43a781e917815 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x43a781e917815 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd43a781e917815; op2val:0x7fd43a781e917815; valaddr_reg:x16; val_offset:544; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 544, x17, x15, 544, x18)

inst_162:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd22aa76e3f8bc and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xd22aa76e3f8bc and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fed22aa76e3f8bc; op2val:0x7fed22aa76e3f8bc; valaddr_reg:x16; val_offset:560; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 560, x17, x15, 560, x18)

inst_163:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc99ac0cd3b3ca and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xc99ac0cd3b3ca and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fec99ac0cd3b3ca; op2val:0x7fec99ac0cd3b3ca; valaddr_reg:x16; val_offset:576; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 576, x17, x15, 576, x18)

inst_164:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd6b5f3e68568b and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xd6b5f3e68568b and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fed6b5f3e68568b; op2val:0x7fed6b5f3e68568b; valaddr_reg:x16; val_offset:592; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 592, x17, x15, 592, x18)

inst_165:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xb5c56d6b2c837 and fs2 == 0 and fe2 == 0x7fb and fm2 == 0xb5c56d6b2c837 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fbb5c56d6b2c837; op2val:0x7fbb5c56d6b2c837; valaddr_reg:x16; val_offset:608; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 608, x17, x15, 608, x18)

inst_166:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa4a2387765198 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xa4a2387765198 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fea4a2387765198; op2val:0x7fea4a2387765198; valaddr_reg:x16; val_offset:624; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 624, x17, x15, 624, x18)

inst_167:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8d6b438992705 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x8d6b438992705 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe8d6b438992705; op2val:0x7fe8d6b438992705; valaddr_reg:x16; val_offset:640; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 640, x17, x15, 640, x18)

inst_168:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe60134aa9369f and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xe60134aa9369f and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fee60134aa9369f; op2val:0x7fee60134aa9369f; valaddr_reg:x16; val_offset:656; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 656, x17, x15, 656, x18)

inst_169:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x97081394ff7c0 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x97081394ff7c0 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe97081394ff7c0; op2val:0x7fe97081394ff7c0; valaddr_reg:x16; val_offset:672; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 672, x17, x15, 672, x18)

inst_170:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x3bc28319d6d6f and fs2 == 0 and fe2 == 0x7fc and fm2 == 0x3bc28319d6d6f and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fc3bc28319d6d6f; op2val:0x7fc3bc28319d6d6f; valaddr_reg:x16; val_offset:688; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 688, x17, x15, 688, x18)

inst_171:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf9196c3c02c3d and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xf9196c3c02c3d and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fdf9196c3c02c3d; op2val:0x7fdf9196c3c02c3d; valaddr_reg:x16; val_offset:704; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 704, x17, x15, 704, x18)

inst_172:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x29cd1fe017e0f and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x29cd1fe017e0f and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd29cd1fe017e0f; op2val:0x7fd29cd1fe017e0f; valaddr_reg:x16; val_offset:720; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 720, x17, x15, 720, x18)

inst_173:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x33bb4c0b03e47 and fs2 == 0 and fe2 == 0x7fb and fm2 == 0x33bb4c0b03e47 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fb33bb4c0b03e47; op2val:0x7fb33bb4c0b03e47; valaddr_reg:x16; val_offset:736; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 736, x17, x15, 736, x18)

inst_174:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1a3782778609c and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x1a3782778609c and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe1a3782778609c; op2val:0x7fe1a3782778609c; valaddr_reg:x16; val_offset:752; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 752, x17, x15, 752, x18)

inst_175:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xf3381366daa33 and fs2 == 0 and fe2 == 0x7fc and fm2 == 0xf3381366daa33 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fcf3381366daa33; op2val:0x7fcf3381366daa33; valaddr_reg:x16; val_offset:768; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 768, x17, x15, 768, x18)

inst_176:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xf5f5f1385c1af and fs2 == 0 and fe2 == 0x7fc and fm2 == 0xf5f5f1385c1af and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fcf5f5f1385c1af; op2val:0x7fcf5f5f1385c1af; valaddr_reg:x16; val_offset:784; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 784, x17, x15, 784, x18)

inst_177:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2870c773af305 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x2870c773af305 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe2870c773af305; op2val:0x7fe2870c773af305; valaddr_reg:x16; val_offset:800; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 800, x17, x15, 800, x18)

inst_178:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x565b7f0cebd9f and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x565b7f0cebd9f and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd565b7f0cebd9f; op2val:0x7fd565b7f0cebd9f; valaddr_reg:x16; val_offset:816; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 816, x17, x15, 816, x18)

inst_179:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc978dd3af76c1 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xc978dd3af76c1 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fec978dd3af76c1; op2val:0x7fec978dd3af76c1; valaddr_reg:x16; val_offset:832; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 832, x17, x15, 832, x18)

inst_180:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x445637e5783c3 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x445637e5783c3 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd445637e5783c3; op2val:0x7fd445637e5783c3; valaddr_reg:x16; val_offset:848; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 848, x17, x15, 848, x18)

inst_181:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3a25a98541333 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x3a25a98541333 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd3a25a98541333; op2val:0x7fd3a25a98541333; valaddr_reg:x16; val_offset:864; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 864, x17, x15, 864, x18)

inst_182:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe1a7f48e8e26b and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xe1a7f48e8e26b and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fee1a7f48e8e26b; op2val:0x7fee1a7f48e8e26b; valaddr_reg:x16; val_offset:880; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 880, x17, x15, 880, x18)

inst_183:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4dd45324c2409 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x4dd45324c2409 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe4dd45324c2409; op2val:0x7fe4dd45324c2409; valaddr_reg:x16; val_offset:896; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 896, x17, x15, 896, x18)

inst_184:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf77d273035d94 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xf77d273035d94 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fef77d273035d94; op2val:0x7fef77d273035d94; valaddr_reg:x16; val_offset:912; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 912, x17, x15, 912, x18)

inst_185:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x4d4955a3d407f and fs2 == 0 and fe2 == 0x7fb and fm2 == 0x4d4955a3d407f and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fb4d4955a3d407f; op2val:0x7fb4d4955a3d407f; valaddr_reg:x16; val_offset:928; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 928, x17, x15, 928, x18)

inst_186:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3ab263197fe7f and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x3ab263197fe7f and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd3ab263197fe7f; op2val:0x7fd3ab263197fe7f; valaddr_reg:x16; val_offset:944; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 944, x17, x15, 944, x18)

inst_187:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x094dd69773d7b and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x094dd69773d7b and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd094dd69773d7b; op2val:0x7fd094dd69773d7b; valaddr_reg:x16; val_offset:960; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 960, x17, x15, 960, x18)

inst_188:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x605a6a1e02c96 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x605a6a1e02c96 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe605a6a1e02c96; op2val:0x7fe605a6a1e02c96; valaddr_reg:x16; val_offset:976; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 976, x17, x15, 976, x18)

inst_189:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf5bc627909931 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xf5bc627909931 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fef5bc627909931; op2val:0x7fef5bc627909931; valaddr_reg:x16; val_offset:992; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 992, x17, x15, 992, x18)

inst_190:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xb8b73fc8fea5b and fs2 == 0 and fe2 == 0x7fc and fm2 == 0xb8b73fc8fea5b and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fcb8b73fc8fea5b; op2val:0x7fcb8b73fc8fea5b; valaddr_reg:x16; val_offset:1008; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1008, x17, x15, 1008, x18)

inst_191:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf0892add2cc6e and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xf0892add2cc6e and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fef0892add2cc6e; op2val:0x7fef0892add2cc6e; valaddr_reg:x16; val_offset:1024; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1024, x17, x15, 1024, x18)

inst_192:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd3a81e544f745 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xd3a81e544f745 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fed3a81e544f745; op2val:0x7fed3a81e544f745; valaddr_reg:x16; val_offset:1040; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1040, x17, x15, 1040, x18)

inst_193:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x40ccb2b303daf and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x40ccb2b303daf and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd40ccb2b303daf; op2val:0x7fd40ccb2b303daf; valaddr_reg:x16; val_offset:1056; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1056, x17, x15, 1056, x18)

inst_194:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3171b5147eff2 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x3171b5147eff2 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe3171b5147eff2; op2val:0x7fe3171b5147eff2; valaddr_reg:x16; val_offset:1072; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1072, x17, x15, 1072, x18)

inst_195:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf715337b3d172 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xf715337b3d172 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fef715337b3d172; op2val:0x7fef715337b3d172; valaddr_reg:x16; val_offset:1088; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1088, x17, x15, 1088, x18)

inst_196:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x44919c1beab5f and fs2 == 0 and fe2 == 0x7fa and fm2 == 0x44919c1beab5f and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fa44919c1beab5f; op2val:0x7fa44919c1beab5f; valaddr_reg:x16; val_offset:1104; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1104, x17, x15, 1104, x18)

inst_197:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x9a21046a4c767 and fs2 == 0 and fe2 == 0x7fb and fm2 == 0x9a21046a4c767 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fb9a21046a4c767; op2val:0x7fb9a21046a4c767; valaddr_reg:x16; val_offset:1120; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1120, x17, x15, 1120, x18)

inst_198:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x037df25b16113 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x037df25b16113 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd037df25b16113; op2val:0x7fd037df25b16113; valaddr_reg:x16; val_offset:1136; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1136, x17, x15, 1136, x18)

inst_199:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd185a4345fd91 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xd185a4345fd91 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fed185a4345fd91; op2val:0x7fed185a4345fd91; valaddr_reg:x16; val_offset:1152; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1152, x17, x15, 1152, x18)

inst_200:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x835b1de73afa3 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x835b1de73afa3 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd835b1de73afa3; op2val:0x7fd835b1de73afa3; valaddr_reg:x16; val_offset:1168; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1168, x17, x15, 1168, x18)

inst_201:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xa5356adec5cbf and fs2 == 0 and fe2 == 0x7fb and fm2 == 0xa5356adec5cbf and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fba5356adec5cbf; op2val:0x7fba5356adec5cbf; valaddr_reg:x16; val_offset:1184; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1184, x17, x15, 1184, x18)

inst_202:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xee6dc228b09a7 and fs2 == 0 and fe2 == 0x7fc and fm2 == 0xee6dc228b09a7 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fcee6dc228b09a7; op2val:0x7fcee6dc228b09a7; valaddr_reg:x16; val_offset:1200; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1200, x17, x15, 1200, x18)

inst_203:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xd95388e6dd7e7 and fs2 == 0 and fe2 == 0x7fb and fm2 == 0xd95388e6dd7e7 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fbd95388e6dd7e7; op2val:0x7fbd95388e6dd7e7; valaddr_reg:x16; val_offset:1216; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1216, x17, x15, 1216, x18)

inst_204:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf9efe9258e03a and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xf9efe9258e03a and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fef9efe9258e03a; op2val:0x7fef9efe9258e03a; valaddr_reg:x16; val_offset:1232; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1232, x17, x15, 1232, x18)

inst_205:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x47df70c06ea5f and fs2 == 0 and fe2 == 0x7fa and fm2 == 0x47df70c06ea5f and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fa47df70c06ea5f; op2val:0x7fa47df70c06ea5f; valaddr_reg:x16; val_offset:1248; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1248, x17, x15, 1248, x18)

inst_206:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xd775b7a6f9327 and fs2 == 0 and fe2 == 0x7fb and fm2 == 0xd775b7a6f9327 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fbd775b7a6f9327; op2val:0x7fbd775b7a6f9327; valaddr_reg:x16; val_offset:1264; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1264, x17, x15, 1264, x18)

inst_207:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x574031c0ee5b5 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x574031c0ee5b5 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe574031c0ee5b5; op2val:0x7fe574031c0ee5b5; valaddr_reg:x16; val_offset:1280; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1280, x17, x15, 1280, x18)

inst_208:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa7d13a52ed5ec and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xa7d13a52ed5ec and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fea7d13a52ed5ec; op2val:0x7fea7d13a52ed5ec; valaddr_reg:x16; val_offset:1296; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1296, x17, x15, 1296, x18)

inst_209:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x1bd5cc8dca1e5 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x1bd5cc8dca1e5 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd1bd5cc8dca1e5; op2val:0x7fd1bd5cc8dca1e5; valaddr_reg:x16; val_offset:1312; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1312, x17, x15, 1312, x18)

inst_210:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd9a2688750f46 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xd9a2688750f46 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fed9a2688750f46; op2val:0x7fed9a2688750f46; valaddr_reg:x16; val_offset:1328; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1328, x17, x15, 1328, x18)

inst_211:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc812c292ea556 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xc812c292ea556 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fec812c292ea556; op2val:0x7fec812c292ea556; valaddr_reg:x16; val_offset:1344; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1344, x17, x15, 1344, x18)

inst_212:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x4ed205e78cd0f and fs2 == 0 and fe2 == 0x7fb and fm2 == 0x4ed205e78cd0f and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fb4ed205e78cd0f; op2val:0x7fb4ed205e78cd0f; valaddr_reg:x16; val_offset:1360; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1360, x17, x15, 1360, x18)

inst_213:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x243d79e337b38 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x243d79e337b38 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe243d79e337b38; op2val:0x7fe243d79e337b38; valaddr_reg:x16; val_offset:1376; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1376, x17, x15, 1376, x18)

inst_214:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9055ab3b464b5 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x9055ab3b464b5 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe9055ab3b464b5; op2val:0x7fe9055ab3b464b5; valaddr_reg:x16; val_offset:1392; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1392, x17, x15, 1392, x18)

inst_215:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5d14398eae23f and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x5d14398eae23f and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd5d14398eae23f; op2val:0x7fd5d14398eae23f; valaddr_reg:x16; val_offset:1408; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1408, x17, x15, 1408, x18)

inst_216:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9383ffc96dd3f and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x9383ffc96dd3f and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe9383ffc96dd3f; op2val:0x7fe9383ffc96dd3f; valaddr_reg:x16; val_offset:1424; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1424, x17, x15, 1424, x18)

inst_217:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x2bccdcc2ad897 and fs2 == 0 and fe2 == 0x7fb and fm2 == 0x2bccdcc2ad897 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fb2bccdcc2ad897; op2val:0x7fb2bccdcc2ad897; valaddr_reg:x16; val_offset:1440; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1440, x17, x15, 1440, x18)

inst_218:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xab1c42a43630f and fs2 == 0 and fe2 == 0x7fb and fm2 == 0xab1c42a43630f and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fbab1c42a43630f; op2val:0x7fbab1c42a43630f; valaddr_reg:x16; val_offset:1456; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1456, x17, x15, 1456, x18)

inst_219:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x153045947810b and fs2 == 0 and fe2 == 0x7fc and fm2 == 0x153045947810b and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fc153045947810b; op2val:0x7fc153045947810b; valaddr_reg:x16; val_offset:1472; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1472, x17, x15, 1472, x18)

inst_220:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe89afcadc456f and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xe89afcadc456f and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fee89afcadc456f; op2val:0x7fee89afcadc456f; valaddr_reg:x16; val_offset:1488; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1488, x17, x15, 1488, x18)

inst_221:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xbc1e737c6a698 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xbc1e737c6a698 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7febc1e737c6a698; op2val:0x7febc1e737c6a698; valaddr_reg:x16; val_offset:1504; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1504, x17, x15, 1504, x18)

inst_222:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5c73bb8e94b2b and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x5c73bb8e94b2b and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd5c73bb8e94b2b; op2val:0x7fd5c73bb8e94b2b; valaddr_reg:x16; val_offset:1520; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1520, x17, x15, 1520, x18)

inst_223:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xaea8e11056b0f and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xaea8e11056b0f and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7feaea8e11056b0f; op2val:0x7feaea8e11056b0f; valaddr_reg:x16; val_offset:1536; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1536, x17, x15, 1536, x18)

inst_224:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x84aae05543502 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x84aae05543502 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe84aae05543502; op2val:0x7fe84aae05543502; valaddr_reg:x16; val_offset:1552; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1552, x17, x15, 1552, x18)

inst_225:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd26cfda272030 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xd26cfda272030 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fed26cfda272030; op2val:0x7fed26cfda272030; valaddr_reg:x16; val_offset:1568; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1568, x17, x15, 1568, x18)

inst_226:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x5ad9a8441acdf and fs2 == 0 and fe2 == 0x7fb and fm2 == 0x5ad9a8441acdf and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fb5ad9a8441acdf; op2val:0x7fb5ad9a8441acdf; valaddr_reg:x16; val_offset:1584; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1584, x17, x15, 1584, x18)

inst_227:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xe08b2a10b8fdf and fs2 == 0 and fe2 == 0x7fc and fm2 == 0xe08b2a10b8fdf and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fce08b2a10b8fdf; op2val:0x7fce08b2a10b8fdf; valaddr_reg:x16; val_offset:1600; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1600, x17, x15, 1600, x18)

inst_228:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf0206ee24c395 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xf0206ee24c395 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fdf0206ee24c395; op2val:0x7fdf0206ee24c395; valaddr_reg:x16; val_offset:1616; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1616, x17, x15, 1616, x18)

inst_229:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc3c90ab59cc1f and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xc3c90ab59cc1f and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fec3c90ab59cc1f; op2val:0x7fec3c90ab59cc1f; valaddr_reg:x16; val_offset:1632; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1632, x17, x15, 1632, x18)

inst_230:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xdd47ad230c500 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xdd47ad230c500 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fedd47ad230c500; op2val:0x7fedd47ad230c500; valaddr_reg:x16; val_offset:1648; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1648, x17, x15, 1648, x18)

inst_231:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x59522cc62b803 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x59522cc62b803 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe59522cc62b803; op2val:0x7fe59522cc62b803; valaddr_reg:x16; val_offset:1664; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1664, x17, x15, 1664, x18)

inst_232:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5b3be3b6f1597 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x5b3be3b6f1597 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd5b3be3b6f1597; op2val:0x7fd5b3be3b6f1597; valaddr_reg:x16; val_offset:1680; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1680, x17, x15, 1680, x18)

inst_233:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf95e94a40dc56 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xf95e94a40dc56 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fef95e94a40dc56; op2val:0x7fef95e94a40dc56; valaddr_reg:x16; val_offset:1696; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1696, x17, x15, 1696, x18)

inst_234:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x9b58d2db8786f and fs2 == 0 and fe2 == 0x7fc and fm2 == 0x9b58d2db8786f and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fc9b58d2db8786f; op2val:0x7fc9b58d2db8786f; valaddr_reg:x16; val_offset:1712; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1712, x17, x15, 1712, x18)

inst_235:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcca2a15201aa9 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xcca2a15201aa9 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fecca2a15201aa9; op2val:0x7fecca2a15201aa9; valaddr_reg:x16; val_offset:1728; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1728, x17, x15, 1728, x18)

inst_236:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x4d27694e5a38b and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x4d27694e5a38b and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd4d27694e5a38b; op2val:0x7fd4d27694e5a38b; valaddr_reg:x16; val_offset:1744; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1744, x17, x15, 1744, x18)

inst_237:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x2f2dacc08696f and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x2f2dacc08696f and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd2f2dacc08696f; op2val:0x7fd2f2dacc08696f; valaddr_reg:x16; val_offset:1760; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1760, x17, x15, 1760, x18)

inst_238:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xabb8bbe03b7df and fs2 == 0 and fe2 == 0x7fb and fm2 == 0xabb8bbe03b7df and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fbabb8bbe03b7df; op2val:0x7fbabb8bbe03b7df; valaddr_reg:x16; val_offset:1776; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1776, x17, x15, 1776, x18)

inst_239:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xbb5746cbb34cd and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xbb5746cbb34cd and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fdbb5746cbb34cd; op2val:0x7fdbb5746cbb34cd; valaddr_reg:x16; val_offset:1792; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1792, x17, x15, 1792, x18)

inst_240:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xa5666b92c9353 and fs2 == 0 and fe2 == 0x7fc and fm2 == 0xa5666b92c9353 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fca5666b92c9353; op2val:0x7fca5666b92c9353; valaddr_reg:x16; val_offset:1808; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1808, x17, x15, 1808, x18)

inst_241:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x830a4319a6f37 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x830a4319a6f37 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd830a4319a6f37; op2val:0x7fd830a4319a6f37; valaddr_reg:x16; val_offset:1824; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1824, x17, x15, 1824, x18)

inst_242:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6875b8a7de9f5 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x6875b8a7de9f5 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe6875b8a7de9f5; op2val:0x7fe6875b8a7de9f5; valaddr_reg:x16; val_offset:1840; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1840, x17, x15, 1840, x18)

inst_243:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xbc4dccb7ac380 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xbc4dccb7ac380 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7febc4dccb7ac380; op2val:0x7febc4dccb7ac380; valaddr_reg:x16; val_offset:1856; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1856, x17, x15, 1856, x18)

inst_244:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x23fbd09d7e9b6 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x23fbd09d7e9b6 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe23fbd09d7e9b6; op2val:0x7fe23fbd09d7e9b6; valaddr_reg:x16; val_offset:1872; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1872, x17, x15, 1872, x18)

inst_245:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa38a3f0decfff and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xa38a3f0decfff and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fea38a3f0decfff; op2val:0x7fea38a3f0decfff; valaddr_reg:x16; val_offset:1888; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1888, x17, x15, 1888, x18)

inst_246:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc1e74ff66f075 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xc1e74ff66f075 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fec1e74ff66f075; op2val:0x7fec1e74ff66f075; valaddr_reg:x16; val_offset:1904; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1904, x17, x15, 1904, x18)

inst_247:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x026a2990b0a7f and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x026a2990b0a7f and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd026a2990b0a7f; op2val:0x7fd026a2990b0a7f; valaddr_reg:x16; val_offset:1920; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1920, x17, x15, 1920, x18)

inst_248:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7cd8dfca2011d and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x7cd8dfca2011d and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe7cd8dfca2011d; op2val:0x7fe7cd8dfca2011d; valaddr_reg:x16; val_offset:1936; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1936, x17, x15, 1936, x18)

inst_249:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3dcff67566087 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x3dcff67566087 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd3dcff67566087; op2val:0x7fd3dcff67566087; valaddr_reg:x16; val_offset:1952; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1952, x17, x15, 1952, x18)

inst_250:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x39bd6a090d93f and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x39bd6a090d93f and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd39bd6a090d93f; op2val:0x7fd39bd6a090d93f; valaddr_reg:x16; val_offset:1968; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1968, x17, x15, 1968, x18)

inst_251:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xef9105cd9390b and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xef9105cd9390b and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7feef9105cd9390b; op2val:0x7feef9105cd9390b; valaddr_reg:x16; val_offset:1984; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1984, x17, x15, 1984, x18)

inst_252:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xe19152f3266af and fs2 == 0 and fe2 == 0x7fa and fm2 == 0xe19152f3266af and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fae19152f3266af; op2val:0x7fae19152f3266af; valaddr_reg:x16; val_offset:2000; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 2000, x17, x15, 2000, x18)

inst_253:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x48f4a954751bd and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x48f4a954751bd and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd48f4a954751bd; op2val:0x7fd48f4a954751bd; valaddr_reg:x16; val_offset:2016; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 2016, x17, x15, 2016, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_3)

inst_254:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x946024d663351 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x946024d663351 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd946024d663351; op2val:0x7fd946024d663351; valaddr_reg:x16; val_offset:0; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 0, x17, x15, 0, x18)

inst_255:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xc91ade861e02b and fs2 == 0 and fe2 == 0x7fc and fm2 == 0xc91ade861e02b and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fcc91ade861e02b; op2val:0x7fcc91ade861e02b; valaddr_reg:x16; val_offset:16; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 16, x17, x15, 16, x18)

inst_256:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x987aaa2c7bb6a and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x987aaa2c7bb6a and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe987aaa2c7bb6a; op2val:0x7fe987aaa2c7bb6a; valaddr_reg:x16; val_offset:32; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 32, x17, x15, 32, x18)

inst_257:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xc3c9ccfa1b1bb and fs2 == 0 and fe2 == 0x7fc and fm2 == 0xc3c9ccfa1b1bb and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fcc3c9ccfa1b1bb; op2val:0x7fcc3c9ccfa1b1bb; valaddr_reg:x16; val_offset:48; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 48, x17, x15, 48, x18)

inst_258:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5b39db9b4e7ac and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x5b39db9b4e7ac and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe5b39db9b4e7ac; op2val:0x7fe5b39db9b4e7ac; valaddr_reg:x16; val_offset:64; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 64, x17, x15, 64, x18)

inst_259:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x482567721754b and fs2 == 0 and fe2 == 0x7fc and fm2 == 0x482567721754b and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fc482567721754b; op2val:0x7fc482567721754b; valaddr_reg:x16; val_offset:80; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 80, x17, x15, 80, x18)

inst_260:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x2bf422090b207 and fs2 == 0 and fe2 == 0x7fc and fm2 == 0x2bf422090b207 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fc2bf422090b207; op2val:0x7fc2bf422090b207; valaddr_reg:x16; val_offset:96; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 96, x17, x15, 96, x18)

inst_261:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x551579cd90e3f and fs2 == 0 and fe2 == 0x7f9 and fm2 == 0x551579cd90e3f and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7f9551579cd90e3f; op2val:0x7f9551579cd90e3f; valaddr_reg:x16; val_offset:112; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 112, x17, x15, 112, x18)

inst_262:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3617941ba03e8 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x3617941ba03e8 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe3617941ba03e8; op2val:0x7fe3617941ba03e8; valaddr_reg:x16; val_offset:128; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 128, x17, x15, 128, x18)

inst_263:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x052debfe82e13 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x052debfe82e13 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe052debfe82e13; op2val:0x7fe052debfe82e13; valaddr_reg:x16; val_offset:144; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 144, x17, x15, 144, x18)

inst_264:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xbd7ce681c543f and fs2 == 0 and fe2 == 0x7fb and fm2 == 0xbd7ce681c543f and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fbbd7ce681c543f; op2val:0x7fbbd7ce681c543f; valaddr_reg:x16; val_offset:160; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 160, x17, x15, 160, x18)

inst_265:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xaf054e65e9fad and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xaf054e65e9fad and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fdaf054e65e9fad; op2val:0x7fdaf054e65e9fad; valaddr_reg:x16; val_offset:176; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 176, x17, x15, 176, x18)

inst_266:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x833a9a7efc6ff and fs2 == 0 and fe2 == 0x7f9 and fm2 == 0x833a9a7efc6ff and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7f9833a9a7efc6ff; op2val:0x7f9833a9a7efc6ff; valaddr_reg:x16; val_offset:192; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 192, x17, x15, 192, x18)

inst_267:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x49bad4bf8d1a9 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x49bad4bf8d1a9 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd49bad4bf8d1a9; op2val:0x7fd49bad4bf8d1a9; valaddr_reg:x16; val_offset:208; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 208, x17, x15, 208, x18)

inst_268:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6c5583d2d8f82 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x6c5583d2d8f82 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe6c5583d2d8f82; op2val:0x7fe6c5583d2d8f82; valaddr_reg:x16; val_offset:224; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 224, x17, x15, 224, x18)

inst_269:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x585c60a81aa3f and fs2 == 0 and fe2 == 0x7fc and fm2 == 0x585c60a81aa3f and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fc585c60a81aa3f; op2val:0x7fc585c60a81aa3f; valaddr_reg:x16; val_offset:240; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 240, x17, x15, 240, x18)

inst_270:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x46e9bf4155d7b and fs2 == 0 and fe2 == 0x7fc and fm2 == 0x46e9bf4155d7b and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fc46e9bf4155d7b; op2val:0x7fc46e9bf4155d7b; valaddr_reg:x16; val_offset:256; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 256, x17, x15, 256, x18)

inst_271:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x60b0632528095 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd60b0632528095; op2val:0x7fd60b0632528095; valaddr_reg:x16; val_offset:272; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 272, x17, x15, 272, x18)

inst_272:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xc07725983617f and fs2 == 0 and fe2 == 0x7fb and fm2 == 0xc07725983617f and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fbc07725983617f; op2val:0x7fbc07725983617f; valaddr_reg:x16; val_offset:288; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 288, x17, x15, 288, x18)

inst_273:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x82dc4511ff204 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x82dc4511ff204 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe82dc4511ff204; op2val:0x7fe82dc4511ff204; valaddr_reg:x16; val_offset:304; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 304, x17, x15, 304, x18)

inst_274:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x1175939fbdd3f and fs2 == 0 and fe2 == 0x7f9 and fm2 == 0x1175939fbdd3f and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7f91175939fbdd3f; op2val:0x7f91175939fbdd3f; valaddr_reg:x16; val_offset:320; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 320, x17, x15, 320, x18)

inst_275:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x58a25604824f3 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x58a25604824f3 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe58a25604824f3; op2val:0x7fe58a25604824f3; valaddr_reg:x16; val_offset:336; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 336, x17, x15, 336, x18)

inst_276:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x056bcd04279ed and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x056bcd04279ed and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd056bcd04279ed; op2val:0x7fd056bcd04279ed; valaddr_reg:x16; val_offset:352; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 352, x17, x15, 352, x18)

inst_277:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x981d2bf67b45e and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x981d2bf67b45e and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe981d2bf67b45e; op2val:0x7fe981d2bf67b45e; valaddr_reg:x16; val_offset:368; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 368, x17, x15, 368, x18)

inst_278:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb8d62745dccc1 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xb8d62745dccc1 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7feb8d62745dccc1; op2val:0x7feb8d62745dccc1; valaddr_reg:x16; val_offset:384; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 384, x17, x15, 384, x18)

inst_279:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x6aedbc8cfe5cb and fs2 == 0 and fe2 == 0x7fc and fm2 == 0x6aedbc8cfe5cb and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fc6aedbc8cfe5cb; op2val:0x7fc6aedbc8cfe5cb; valaddr_reg:x16; val_offset:400; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 400, x17, x15, 400, x18)

inst_280:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xca57966fc21ff and fs2 == 0 and fe2 == 0x7f9 and fm2 == 0xca57966fc21ff and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7f9ca57966fc21ff; op2val:0x7f9ca57966fc21ff; valaddr_reg:x16; val_offset:416; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 416, x17, x15, 416, x18)

inst_281:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x39935e95315b1 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x39935e95315b1 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe39935e95315b1; op2val:0x7fe39935e95315b1; valaddr_reg:x16; val_offset:432; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 432, x17, x15, 432, x18)

inst_282:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x13b37e2291279 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x13b37e2291279 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe13b37e2291279; op2val:0x7fe13b37e2291279; valaddr_reg:x16; val_offset:448; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 448, x17, x15, 448, x18)

inst_283:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x6d5a59350bdcb and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x6d5a59350bdcb and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd6d5a59350bdcb; op2val:0x7fd6d5a59350bdcb; valaddr_reg:x16; val_offset:464; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 464, x17, x15, 464, x18)

inst_284:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x026ab89a75256 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x026ab89a75256 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe026ab89a75256; op2val:0x7fe026ab89a75256; valaddr_reg:x16; val_offset:480; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 480, x17, x15, 480, x18)

inst_285:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x23d6f3e37b4f1 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x23d6f3e37b4f1 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe23d6f3e37b4f1; op2val:0x7fe23d6f3e37b4f1; valaddr_reg:x16; val_offset:496; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 496, x17, x15, 496, x18)

inst_286:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xcbc315eca5f3f and fs2 == 0 and fe2 == 0x7fa and fm2 == 0xcbc315eca5f3f and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7facbc315eca5f3f; op2val:0x7facbc315eca5f3f; valaddr_reg:x16; val_offset:512; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 512, x17, x15, 512, x18)

inst_287:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1f6a4c4d26ab9 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x1f6a4c4d26ab9 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe1f6a4c4d26ab9; op2val:0x7fe1f6a4c4d26ab9; valaddr_reg:x16; val_offset:528; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 528, x17, x15, 528, x18)

inst_288:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9e4795c8459f5 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x9e4795c8459f5 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe9e4795c8459f5; op2val:0x7fe9e4795c8459f5; valaddr_reg:x16; val_offset:544; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 544, x17, x15, 544, x18)

inst_289:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc5b9547c0fb71 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xc5b9547c0fb71 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fec5b9547c0fb71; op2val:0x7fec5b9547c0fb71; valaddr_reg:x16; val_offset:560; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 560, x17, x15, 560, x18)

inst_290:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x913b4236d8411 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x913b4236d8411 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe913b4236d8411; op2val:0x7fe913b4236d8411; valaddr_reg:x16; val_offset:576; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 576, x17, x15, 576, x18)

inst_291:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xea0b252eae7e0 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xea0b252eae7e0 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7feea0b252eae7e0; op2val:0x7feea0b252eae7e0; valaddr_reg:x16; val_offset:592; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 592, x17, x15, 592, x18)

inst_292:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x13bdffd461269 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x13bdffd461269 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd13bdffd461269; op2val:0x7fd13bdffd461269; valaddr_reg:x16; val_offset:608; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 608, x17, x15, 608, x18)

inst_293:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x27d4b8969c0b2 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x27d4b8969c0b2 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe27d4b8969c0b2; op2val:0x7fe27d4b8969c0b2; valaddr_reg:x16; val_offset:624; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 624, x17, x15, 624, x18)

inst_294:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x070d1456013e3 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x070d1456013e3 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe070d1456013e3; op2val:0x7fe070d1456013e3; valaddr_reg:x16; val_offset:640; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 640, x17, x15, 640, x18)

inst_295:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb877e6e317fa2 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xb877e6e317fa2 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7feb877e6e317fa2; op2val:0x7feb877e6e317fa2; valaddr_reg:x16; val_offset:656; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 656, x17, x15, 656, x18)

inst_296:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8a82024cc4e03 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x8a82024cc4e03 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe8a82024cc4e03; op2val:0x7fe8a82024cc4e03; valaddr_reg:x16; val_offset:672; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 672, x17, x15, 672, x18)

inst_297:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0125698e86242 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x0125698e86242 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe0125698e86242; op2val:0x7fe0125698e86242; valaddr_reg:x16; val_offset:688; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 688, x17, x15, 688, x18)

inst_298:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x930bcbd2d6035 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x930bcbd2d6035 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd930bcbd2d6035; op2val:0x7fd930bcbd2d6035; valaddr_reg:x16; val_offset:704; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 704, x17, x15, 704, x18)

inst_299:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf7646167590ef and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xf7646167590ef and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fef7646167590ef; op2val:0x7fef7646167590ef; valaddr_reg:x16; val_offset:720; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 720, x17, x15, 720, x18)

inst_300:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x643f753bef22f and fs2 == 0 and fe2 == 0x7fa and fm2 == 0x643f753bef22f and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fa643f753bef22f; op2val:0x7fa643f753bef22f; valaddr_reg:x16; val_offset:736; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 736, x17, x15, 736, x18)

inst_301:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf57237ddcb451 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xf57237ddcb451 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fdf57237ddcb451; op2val:0x7fdf57237ddcb451; valaddr_reg:x16; val_offset:752; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 752, x17, x15, 752, x18)

inst_302:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0ab870b5c1c40 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x0ab870b5c1c40 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe0ab870b5c1c40; op2val:0x7fe0ab870b5c1c40; valaddr_reg:x16; val_offset:768; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 768, x17, x15, 768, x18)

inst_303:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x04507a06e8587 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x04507a06e8587 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe04507a06e8587; op2val:0x7fe04507a06e8587; valaddr_reg:x16; val_offset:784; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 784, x17, x15, 784, x18)

inst_304:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7fb2260b115e9 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x7fb2260b115e9 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd7fb2260b115e9; op2val:0x7fd7fb2260b115e9; valaddr_reg:x16; val_offset:800; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 800, x17, x15, 800, x18)

inst_305:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x67f4f571a752e and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x67f4f571a752e and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe67f4f571a752e; op2val:0x7fe67f4f571a752e; valaddr_reg:x16; val_offset:816; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 816, x17, x15, 816, x18)

inst_306:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x6251b45dfbd3b and fs2 == 0 and fe2 == 0x7fc and fm2 == 0x6251b45dfbd3b and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fc6251b45dfbd3b; op2val:0x7fc6251b45dfbd3b; valaddr_reg:x16; val_offset:832; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 832, x17, x15, 832, x18)

inst_307:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x98455e99dfdb1 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x98455e99dfdb1 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe98455e99dfdb1; op2val:0x7fe98455e99dfdb1; valaddr_reg:x16; val_offset:848; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 848, x17, x15, 848, x18)

inst_308:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x1ad5e9ebc09df and fs2 == 0 and fe2 == 0x7fa and fm2 == 0x1ad5e9ebc09df and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fa1ad5e9ebc09df; op2val:0x7fa1ad5e9ebc09df; valaddr_reg:x16; val_offset:864; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 864, x17, x15, 864, x18)

inst_309:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x02b48f992cb49 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x02b48f992cb49 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe02b48f992cb49; op2val:0x7fe02b48f992cb49; valaddr_reg:x16; val_offset:880; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 880, x17, x15, 880, x18)

inst_310:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc3d4499ff58c3 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xc3d4499ff58c3 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fec3d4499ff58c3; op2val:0x7fec3d4499ff58c3; valaddr_reg:x16; val_offset:896; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 896, x17, x15, 896, x18)

inst_311:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x36a63c245f557 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x36a63c245f557 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd36a63c245f557; op2val:0x7fd36a63c245f557; valaddr_reg:x16; val_offset:912; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 912, x17, x15, 912, x18)

inst_312:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa8fa703a4078c and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xa8fa703a4078c and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fea8fa703a4078c; op2val:0x7fea8fa703a4078c; valaddr_reg:x16; val_offset:928; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 928, x17, x15, 928, x18)

inst_313:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xdf7523fde6c5d and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xdf7523fde6c5d and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fedf7523fde6c5d; op2val:0x7fedf7523fde6c5d; valaddr_reg:x16; val_offset:944; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 944, x17, x15, 944, x18)

inst_314:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7166677e49c3c and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x7166677e49c3c and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe7166677e49c3c; op2val:0x7fe7166677e49c3c; valaddr_reg:x16; val_offset:960; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 960, x17, x15, 960, x18)

inst_315:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xef2a4f7c7db7f and fs2 == 0 and fe2 == 0x7fb and fm2 == 0xef2a4f7c7db7f and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fbef2a4f7c7db7f; op2val:0x7fbef2a4f7c7db7f; valaddr_reg:x16; val_offset:976; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 976, x17, x15, 976, x18)

inst_316:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfc2ea66e5019e and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xfc2ea66e5019e and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fefc2ea66e5019e; op2val:0x7fefc2ea66e5019e; valaddr_reg:x16; val_offset:992; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 992, x17, x15, 992, x18)

inst_317:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x48dace8666677 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x48dace8666677 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe48dace8666677; op2val:0x7fe48dace8666677; valaddr_reg:x16; val_offset:1008; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1008, x17, x15, 1008, x18)

inst_318:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xacd7053aa42a2 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xacd7053aa42a2 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7feacd7053aa42a2; op2val:0x7feacd7053aa42a2; valaddr_reg:x16; val_offset:1024; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1024, x17, x15, 1024, x18)

inst_319:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x28bc82f697c4d and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x28bc82f697c4d and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd28bc82f697c4d; op2val:0x7fd28bc82f697c4d; valaddr_reg:x16; val_offset:1040; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1040, x17, x15, 1040, x18)

inst_320:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xc01045c2cd787 and fs2 == 0 and fe2 == 0x7fc and fm2 == 0xc01045c2cd787 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fcc01045c2cd787; op2val:0x7fcc01045c2cd787; valaddr_reg:x16; val_offset:1056; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1056, x17, x15, 1056, x18)

inst_321:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xdd5b61587fd27 and fs2 == 0 and fe2 == 0x7fc and fm2 == 0xdd5b61587fd27 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fcdd5b61587fd27; op2val:0x7fcdd5b61587fd27; valaddr_reg:x16; val_offset:1072; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1072, x17, x15, 1072, x18)

inst_322:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc0659af8369fd and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xc0659af8369fd and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fdc0659af8369fd; op2val:0x7fdc0659af8369fd; valaddr_reg:x16; val_offset:1088; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1088, x17, x15, 1088, x18)

inst_323:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xdbcde43895c3f and fs2 == 0 and fe2 == 0x7f9 and fm2 == 0xdbcde43895c3f and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7f9dbcde43895c3f; op2val:0x7f9dbcde43895c3f; valaddr_reg:x16; val_offset:1104; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1104, x17, x15, 1104, x18)

inst_324:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xbb9876f8130c3 and fs2 == 0 and fe2 == 0x7fc and fm2 == 0xbb9876f8130c3 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fcbb9876f8130c3; op2val:0x7fcbb9876f8130c3; valaddr_reg:x16; val_offset:1120; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1120, x17, x15, 1120, x18)

inst_325:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe0d828b86622a and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xe0d828b86622a and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fee0d828b86622a; op2val:0x7fee0d828b86622a; valaddr_reg:x16; val_offset:1136; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1136, x17, x15, 1136, x18)

inst_326:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xa0e7ad32453df and fs2 == 0 and fe2 == 0x7f9 and fm2 == 0xa0e7ad32453df and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7f9a0e7ad32453df; op2val:0x7f9a0e7ad32453df; valaddr_reg:x16; val_offset:1152; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1152, x17, x15, 1152, x18)

inst_327:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcd87e65450c45 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xcd87e65450c45 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fecd87e65450c45; op2val:0x7fecd87e65450c45; valaddr_reg:x16; val_offset:1168; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1168, x17, x15, 1168, x18)

inst_328:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xd481499755d4b and fs2 == 0 and fe2 == 0x7fc and fm2 == 0xd481499755d4b and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fcd481499755d4b; op2val:0x7fcd481499755d4b; valaddr_reg:x16; val_offset:1184; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1184, x17, x15, 1184, x18)

inst_329:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc81394a2171e9 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xc81394a2171e9 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fdc81394a2171e9; op2val:0x7fdc81394a2171e9; valaddr_reg:x16; val_offset:1200; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1200, x17, x15, 1200, x18)

inst_330:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x86499331191c4 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x86499331191c4 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe86499331191c4; op2val:0x7fe86499331191c4; valaddr_reg:x16; val_offset:1216; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1216, x17, x15, 1216, x18)

inst_331:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xabe96758f2a09 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xabe96758f2a09 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7feabe96758f2a09; op2val:0x7feabe96758f2a09; valaddr_reg:x16; val_offset:1232; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1232, x17, x15, 1232, x18)

inst_332:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x8072e8f9c858f and fs2 == 0 and fe2 == 0x7fb and fm2 == 0x8072e8f9c858f and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fb8072e8f9c858f; op2val:0x7fb8072e8f9c858f; valaddr_reg:x16; val_offset:1248; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1248, x17, x15, 1248, x18)

inst_333:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4d9d98184b9d9 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x4d9d98184b9d9 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe4d9d98184b9d9; op2val:0x7fe4d9d98184b9d9; valaddr_reg:x16; val_offset:1264; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1264, x17, x15, 1264, x18)

inst_334:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xfb5355e167379 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xfb5355e167379 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fdfb5355e167379; op2val:0x7fdfb5355e167379; valaddr_reg:x16; val_offset:1280; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1280, x17, x15, 1280, x18)

inst_335:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x870d778409f12 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x870d778409f12 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe870d778409f12; op2val:0x7fe870d778409f12; valaddr_reg:x16; val_offset:1296; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1296, x17, x15, 1296, x18)

inst_336:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x84620ba958ca7 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x84620ba958ca7 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe84620ba958ca7; op2val:0x7fe84620ba958ca7; valaddr_reg:x16; val_offset:1312; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1312, x17, x15, 1312, x18)

inst_337:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x473e8571c52cb and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x473e8571c52cb and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd473e8571c52cb; op2val:0x7fd473e8571c52cb; valaddr_reg:x16; val_offset:1328; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1328, x17, x15, 1328, x18)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_fp:
.dword 0x7fc132d8f91b7583
.dword 0x7fc132d8f91b7583
.dword 0x7fe84620ba958ca7
.dword 0x7fe84620ba958ca7
.dword 0x7fd9986e1947d1af
.dword 0x7fd9986e1947d1af
.dword 0x7fe2917055261bcd
.dword 0x7fe2917055261bcd
.dword 0x7fd473e8571c52cb
.dword 0x7fd473e8571c52cb
.dword 0x7fe984a694055a54
.dword 0x7fe984a694055a54
.dword 0x7fefd2122050beac
.dword 0x7fefd2122050beac
.dword 0x7fe2feec68719bba
.dword 0x7fe2feec68719bba
.dword 0x7fe6e0bf7d08105c
.dword 0x7fe6e0bf7d08105c
.dword 0x7fe28ecf1d8ef197
.dword 0x7fe28ecf1d8ef197
.dword 0x7fea3eab352272ea
.dword 0x7fea3eab352272ea
.dword 0x7fc5949aff9333f3
.dword 0x7fc5949aff9333f3
.dword 0x7fdfae7473993807
.dword 0x7fdfae7473993807
.dword 0x7fb8610c871b285f
.dword 0x7fb8610c871b285f
.dword 0x7fbe39a5539fae27
.dword 0x7fbe39a5539fae27
.dword 0x7fd5ea96bd4dabb5
.dword 0x7fd5ea96bd4dabb5
.dword 0x7feeda15838c7849
.dword 0x7feeda15838c7849
.dword 0x7fe6868ac61d3897
.dword 0x7fe6868ac61d3897
.dword 0x7fcbb82a6aeecb53
.dword 0x7fcbb82a6aeecb53
.dword 0x7fe31ed4c817d79b
.dword 0x7fe31ed4c817d79b
.dword 0x7fc7e7cb00b83da3
.dword 0x7fc7e7cb00b83da3
.dword 0x7fdf82d9cf6dc925
.dword 0x7fdf82d9cf6dc925
.dword 0x7fbb3c136748a917
.dword 0x7fbb3c136748a917
.dword 0x7fe6fdc352b9c092
.dword 0x7fe6fdc352b9c092
.dword 0x7fcec87e91da77d7
.dword 0x7fcec87e91da77d7
.dword 0x7fd71c18427a646b
.dword 0x7fd71c18427a646b
.dword 0x7fc1ad31ee4d4ad7
.dword 0x7fc1ad31ee4d4ad7
.dword 0x7fe0d9d824a66fc7
.dword 0x7fe0d9d824a66fc7
.dword 0x7fe3667b2bc82acb
.dword 0x7fe3667b2bc82acb
.dword 0x7fed387bdfbb52c6
.dword 0x7fed387bdfbb52c6
.dword 0x7fef233966510bcc
.dword 0x7fef233966510bcc
.dword 0x7fe4074322ede639
.dword 0x7fe4074322ede639
.dword 0x7fe9221841138cb5
.dword 0x7fe9221841138cb5
.dword 0x7fdba20c4777099d
.dword 0x7fdba20c4777099d
.dword 0x7fe3eb20959c42c2
.dword 0x7fe3eb20959c42c2
.dword 0x7f9f446ded06de1f
.dword 0x7f9f446ded06de1f
.dword 0x7fe69d3500fa16c1
.dword 0x7fe69d3500fa16c1
.dword 0x7fcc74ef4423e96b
.dword 0x7fcc74ef4423e96b
.dword 0x7febbc271a710d1b
.dword 0x7febbc271a710d1b
.dword 0x7fc60ffd67bcec83
.dword 0x7fc60ffd67bcec83
.dword 0x7fcdb5e85647ec13
.dword 0x7fcdb5e85647ec13
.dword 0x7fd143c21ad8c8b5
.dword 0x7fd143c21ad8c8b5
.dword 0x7fe6d479d3fc4771
.dword 0x7fe6d479d3fc4771
.dword 0x7fc5932a24c0014f
.dword 0x7fc5932a24c0014f
.dword 0x7fe05e5cee3b08d7
.dword 0x7fe05e5cee3b08d7
.dword 0x7fe0be093ea29884
.dword 0x7fe0be093ea29884
.dword 0x7fb32ba6165fce3f
.dword 0x7fb32ba6165fce3f
.dword 0x7fec5a51b555f5c9
.dword 0x7fec5a51b555f5c9
.dword 0x7fcabce33873116b
.dword 0x7fcabce33873116b
.dword 0x7fe60b89491a6a27
.dword 0x7fe60b89491a6a27
.dword 0x7fe618258c5f4965
.dword 0x7fe618258c5f4965
.dword 0x7fe03aaf26d74a36
.dword 0x7fe03aaf26d74a36
.dword 0x7fe504dcbdc51a65
.dword 0x7fe504dcbdc51a65
.dword 0x7fdb0bd7b08edb55
.dword 0x7fdb0bd7b08edb55
.dword 0x7fe05438a864ff48
.dword 0x7fe05438a864ff48
.dword 0x7fdde5026c152607
.dword 0x7fdde5026c152607
.dword 0x7feaa7bbc9099344
.dword 0x7feaa7bbc9099344
.dword 0x7fe16a782d36f4f6
.dword 0x7fe16a782d36f4f6
.dword 0x7fe6a8199da501dc
.dword 0x7fe6a8199da501dc
.dword 0x7fd65d63e74d209d
.dword 0x7fd65d63e74d209d
.dword 0x7fea1726431ab40b
.dword 0x7fea1726431ab40b
.dword 0x7feb14a0c4b66d3b
.dword 0x7feb14a0c4b66d3b
.dword 0x7fedfcdecd96da66
.dword 0x7fedfcdecd96da66
.dword 0x7fe422ea209fd4bd
.dword 0x7fe422ea209fd4bd
.dword 0x7fe4264cf0154662
.dword 0x7fe4264cf0154662
.dword 0x7fe47dca9bde3664
.dword 0x7fe47dca9bde3664
.dword 0x7fdf886e2fe6ac5f
.dword 0x7fdf886e2fe6ac5f
.dword 0x7fecbbac03deb701
.dword 0x7fecbbac03deb701
.dword 0x7fe2b3a267e5dfb6
.dword 0x7fe2b3a267e5dfb6
.dword 0x7fd9efa662b0261b
.dword 0x7fd9efa662b0261b
.dword 0x7fd8e80a6ca28041
.dword 0x7fd8e80a6ca28041
.dword 0x7fd700c54435a377
.dword 0x7fd700c54435a377
.dword 0x7fe3d750eeace47f
.dword 0x7fe3d750eeace47f
.dword 0x7fd38aa27d9f85c9
.dword 0x7fd38aa27d9f85c9
.dword 0x7fe7d40396d9385b
.dword 0x7fe7d40396d9385b
.dword 0x7feab4fd6611517f
.dword 0x7feab4fd6611517f
.dword 0x7fef95a713b177ca
.dword 0x7fef95a713b177ca
.dword 0x7fea8a9e6ee9dc95
.dword 0x7fea8a9e6ee9dc95
.dword 0x7fe324293ee39f7d
.dword 0x7fe324293ee39f7d
.dword 0x7f6fbfd7fab4eeff
.dword 0x7f6fbfd7fab4eeff
.dword 0x7fd829e9eb0f2033
.dword 0x7fd829e9eb0f2033
.dword 0x7fdf81d438e79e89
.dword 0x7fdf81d438e79e89
.dword 0x7fe90f0d1eecae4a
.dword 0x7fe90f0d1eecae4a
.dword 0x7fd381d474507a13
.dword 0x7fd381d474507a13
.dword 0x7fdc4ee0c5be65d1
.dword 0x7fdc4ee0c5be65d1
.dword 0x7fe0e89a794b74d2
.dword 0x7fe0e89a794b74d2
.dword 0x7fe018d796b58467
.dword 0x7fe018d796b58467
.dword 0x7fe2528fb338cf74
.dword 0x7fe2528fb338cf74
.dword 0x7fc17be9a133f3af
.dword 0x7fc17be9a133f3af
.dword 0x7fe85aa65ee5b308
.dword 0x7fe85aa65ee5b308
.dword 0x7fe172fde92f86c8
.dword 0x7fe172fde92f86c8
.dword 0x7fbe39ef9237c697
.dword 0x7fbe39ef9237c697
.dword 0x7fbbaf02dcedb6b7
.dword 0x7fbbaf02dcedb6b7
.dword 0x7fd88745c9a37993
.dword 0x7fd88745c9a37993
.dword 0x7fe89c3334d5f5bb
.dword 0x7fe89c3334d5f5bb
.dword 0x7fdf696b535c1769
.dword 0x7fdf696b535c1769
.dword 0x7fef27dcf8ac02d4
.dword 0x7fef27dcf8ac02d4
.dword 0x7fe9509d7b71e92e
.dword 0x7fe9509d7b71e92e
.dword 0x7fd00e7456a8a9b1
.dword 0x7fd00e7456a8a9b1
.dword 0x7fd17c87a27d34af
.dword 0x7fd17c87a27d34af
.dword 0x7fd239dca92ff1cf
.dword 0x7fd239dca92ff1cf
.dword 0x7feabb0ae90aa573
.dword 0x7feabb0ae90aa573
.dword 0x7fe414b2a3e47216
.dword 0x7fe414b2a3e47216
.dword 0x7fdc14dba4a1f611
.dword 0x7fdc14dba4a1f611
.dword 0x7f706bb1eb6b71ff
.dword 0x7f706bb1eb6b71ff
.dword 0x7fcfc58dd60fc47b
.dword 0x7fcfc58dd60fc47b
.dword 0x7fbe3b25f522e53f
.dword 0x7fbe3b25f522e53f
.dword 0x7fe338c35622df30
.dword 0x7fe338c35622df30
.dword 0x7feeb39a20d91a7d
.dword 0x7feeb39a20d91a7d
.dword 0x7fc02b9579f55c5b
.dword 0x7fc02b9579f55c5b
.dword 0x7fc516aa8e8fb467
.dword 0x7fc516aa8e8fb467
.dword 0x7fe9afd0179d1bae
.dword 0x7fe9afd0179d1bae
.dword 0x7fef1421cf676cc1
.dword 0x7fef1421cf676cc1
.dword 0x7fdc7bd79ecec98f
.dword 0x7fdc7bd79ecec98f
.dword 0x7fe51c6792bf1bb8
.dword 0x7fe51c6792bf1bb8
.dword 0x7fe8d300de77b552
.dword 0x7fe8d300de77b552
.dword 0x7feeb3b913e63771
.dword 0x7feeb3b913e63771
.dword 0x7fd11f2665e52fc1
.dword 0x7fd11f2665e52fc1
.dword 0x7fe9daacd1054eee
.dword 0x7fe9daacd1054eee
.dword 0x7fa4d7c4e18c10ef
.dword 0x7fa4d7c4e18c10ef
.dword 0x7fc5181b18b5230b
.dword 0x7fc5181b18b5230b
.dword 0x7fd645543b126259
.dword 0x7fd645543b126259
.dword 0x7fe5cff741930dc6
.dword 0x7fe5cff741930dc6
.dword 0x7fe83f7d2b210b05
.dword 0x7fe83f7d2b210b05
.dword 0x7fcbdaeddf112cfb
.dword 0x7fcbdaeddf112cfb
.dword 0x7fc69035627e1257
.dword 0x7fc69035627e1257
.dword 0x7feeb8f7360e493b
.dword 0x7feeb8f7360e493b
.dword 0x7feb669f507e33a4
.dword 0x7feb669f507e33a4
.dword 0x7fe790bcb9dbeeda
.dword 0x7fe790bcb9dbeeda
.dword 0x7fd7c88779524935
.dword 0x7fd7c88779524935
.dword 0x7fe6296d3932c17a
.dword 0x7fe6296d3932c17a
.dword 0x7fec419d48d0bc89
.dword 0x7fec419d48d0bc89
.dword 0x7fc46970482fa4d3
.dword 0x7fc46970482fa4d3
.dword 0x7fe05fc74a94c67c
.dword 0x7fe05fc74a94c67c
.dword 0x7fa8ad527afb8d3f
.dword 0x7fa8ad527afb8d3f
.dword 0x7fd19d4ad7c76167
.dword 0x7fd19d4ad7c76167
.dword 0x7fed05a5fee9b2b0
.dword 0x7fed05a5fee9b2b0
.dword 0x7fda623d9ab2139f
.dword 0x7fda623d9ab2139f
.dword 0x7fdea51987a6fe4b
.dword 0x7fdea51987a6fe4b
.dword 0x7fce830fb501fc6b
.dword 0x7fce830fb501fc6b
.dword 0x7fe5f7ea628e7311
.dword 0x7fe5f7ea628e7311
.dword 0x7fe4c34b3fae86a6
.dword 0x7fe4c34b3fae86a6
.dword 0x7fe0eb1fe944dafc
.dword 0x7fe0eb1fe944dafc
.dword 0x7fcde44cb7c6a477
.dword 0x7fcde44cb7c6a477
.dword 0x7fd9ab5479609cdf
.dword 0x7fd9ab5479609cdf
.dword 0x7fea86a1651b8f6d
.dword 0x7fea86a1651b8f6d
.dword 0x7fc0043a4237475b
.dword 0x7fc0043a4237475b
.dword 0x7fd6b764b4a3fc09
.dword 0x7fd6b764b4a3fc09
.dword 0x7fe242628c135d65
.dword 0x7fe242628c135d65
.dword 0x7fe4afa083bb05d4
.dword 0x7fe4afa083bb05d4
.dword 0x7fd08290cbe2e23f
.dword 0x7fd08290cbe2e23f
.dword 0x7fd95351e6b0b955
.dword 0x7fd95351e6b0b955
.dword 0x7feb3dca1e26f92c
.dword 0x7feb3dca1e26f92c
.dword 0x7fe1939e8900399e
.dword 0x7fe1939e8900399e
.dword 0x7feed40ea1c96a68
.dword 0x7feed40ea1c96a68
.dword 0x7fd02a602e38e2e5
.dword 0x7fd02a602e38e2e5
.dword 0x7fe6dfd78772ca12
.dword 0x7fe6dfd78772ca12
.dword 0x7fdbb0574c4cc8c3
.dword 0x7fdbb0574c4cc8c3
.dword 0x7fe61129e8d25d53
.dword 0x7fe61129e8d25d53
.dword 0x7feae72a87c61e34
.dword 0x7feae72a87c61e34
.dword 0x7fe9b930ceb054c0
.dword 0x7fe9b930ceb054c0
.dword 0x7fd43a781e917815
.dword 0x7fd43a781e917815
.dword 0x7fed22aa76e3f8bc
.dword 0x7fed22aa76e3f8bc
.dword 0x7fec99ac0cd3b3ca
.dword 0x7fec99ac0cd3b3ca
.dword 0x7fed6b5f3e68568b
.dword 0x7fed6b5f3e68568b
.dword 0x7fbb5c56d6b2c837
.dword 0x7fbb5c56d6b2c837
.dword 0x7fea4a2387765198
.dword 0x7fea4a2387765198
.dword 0x7fe8d6b438992705
.dword 0x7fe8d6b438992705
.dword 0x7fee60134aa9369f
.dword 0x7fee60134aa9369f
.dword 0x7fe97081394ff7c0
.dword 0x7fe97081394ff7c0
.dword 0x7fc3bc28319d6d6f
.dword 0x7fc3bc28319d6d6f
.dword 0x7fdf9196c3c02c3d
.dword 0x7fdf9196c3c02c3d
.dword 0x7fd29cd1fe017e0f
.dword 0x7fd29cd1fe017e0f
.dword 0x7fb33bb4c0b03e47
.dword 0x7fb33bb4c0b03e47
.dword 0x7fe1a3782778609c
.dword 0x7fe1a3782778609c
.dword 0x7fcf3381366daa33
.dword 0x7fcf3381366daa33
.dword 0x7fcf5f5f1385c1af
.dword 0x7fcf5f5f1385c1af
.dword 0x7fe2870c773af305
.dword 0x7fe2870c773af305
.dword 0x7fd565b7f0cebd9f
.dword 0x7fd565b7f0cebd9f
.dword 0x7fec978dd3af76c1
.dword 0x7fec978dd3af76c1
.dword 0x7fd445637e5783c3
.dword 0x7fd445637e5783c3
.dword 0x7fd3a25a98541333
.dword 0x7fd3a25a98541333
.dword 0x7fee1a7f48e8e26b
.dword 0x7fee1a7f48e8e26b
.dword 0x7fe4dd45324c2409
.dword 0x7fe4dd45324c2409
.dword 0x7fef77d273035d94
.dword 0x7fef77d273035d94
.dword 0x7fb4d4955a3d407f
.dword 0x7fb4d4955a3d407f
.dword 0x7fd3ab263197fe7f
.dword 0x7fd3ab263197fe7f
.dword 0x7fd094dd69773d7b
.dword 0x7fd094dd69773d7b
.dword 0x7fe605a6a1e02c96
.dword 0x7fe605a6a1e02c96
.dword 0x7fef5bc627909931
.dword 0x7fef5bc627909931
.dword 0x7fcb8b73fc8fea5b
.dword 0x7fcb8b73fc8fea5b
.dword 0x7fef0892add2cc6e
.dword 0x7fef0892add2cc6e
.dword 0x7fed3a81e544f745
.dword 0x7fed3a81e544f745
.dword 0x7fd40ccb2b303daf
.dword 0x7fd40ccb2b303daf
.dword 0x7fe3171b5147eff2
.dword 0x7fe3171b5147eff2
.dword 0x7fef715337b3d172
.dword 0x7fef715337b3d172
.dword 0x7fa44919c1beab5f
.dword 0x7fa44919c1beab5f
.dword 0x7fb9a21046a4c767
.dword 0x7fb9a21046a4c767
.dword 0x7fd037df25b16113
.dword 0x7fd037df25b16113
.dword 0x7fed185a4345fd91
.dword 0x7fed185a4345fd91
.dword 0x7fd835b1de73afa3
.dword 0x7fd835b1de73afa3
.dword 0x7fba5356adec5cbf
.dword 0x7fba5356adec5cbf
.dword 0x7fcee6dc228b09a7
.dword 0x7fcee6dc228b09a7
.dword 0x7fbd95388e6dd7e7
.dword 0x7fbd95388e6dd7e7
.dword 0x7fef9efe9258e03a
.dword 0x7fef9efe9258e03a
.dword 0x7fa47df70c06ea5f
.dword 0x7fa47df70c06ea5f
.dword 0x7fbd775b7a6f9327
.dword 0x7fbd775b7a6f9327
.dword 0x7fe574031c0ee5b5
.dword 0x7fe574031c0ee5b5
.dword 0x7fea7d13a52ed5ec
.dword 0x7fea7d13a52ed5ec
.dword 0x7fd1bd5cc8dca1e5
.dword 0x7fd1bd5cc8dca1e5
.dword 0x7fed9a2688750f46
.dword 0x7fed9a2688750f46
.dword 0x7fec812c292ea556
.dword 0x7fec812c292ea556
.dword 0x7fb4ed205e78cd0f
.dword 0x7fb4ed205e78cd0f
.dword 0x7fe243d79e337b38
.dword 0x7fe243d79e337b38
.dword 0x7fe9055ab3b464b5
.dword 0x7fe9055ab3b464b5
.dword 0x7fd5d14398eae23f
.dword 0x7fd5d14398eae23f
.dword 0x7fe9383ffc96dd3f
.dword 0x7fe9383ffc96dd3f
.dword 0x7fb2bccdcc2ad897
.dword 0x7fb2bccdcc2ad897
.dword 0x7fbab1c42a43630f
.dword 0x7fbab1c42a43630f
.dword 0x7fc153045947810b
.dword 0x7fc153045947810b
.dword 0x7fee89afcadc456f
.dword 0x7fee89afcadc456f
.dword 0x7febc1e737c6a698
.dword 0x7febc1e737c6a698
.dword 0x7fd5c73bb8e94b2b
.dword 0x7fd5c73bb8e94b2b
.dword 0x7feaea8e11056b0f
.dword 0x7feaea8e11056b0f
.dword 0x7fe84aae05543502
.dword 0x7fe84aae05543502
.dword 0x7fed26cfda272030
.dword 0x7fed26cfda272030
.dword 0x7fb5ad9a8441acdf
.dword 0x7fb5ad9a8441acdf
.dword 0x7fce08b2a10b8fdf
.dword 0x7fce08b2a10b8fdf
.dword 0x7fdf0206ee24c395
.dword 0x7fdf0206ee24c395
.dword 0x7fec3c90ab59cc1f
.dword 0x7fec3c90ab59cc1f
.dword 0x7fedd47ad230c500
.dword 0x7fedd47ad230c500
.dword 0x7fe59522cc62b803
.dword 0x7fe59522cc62b803
.dword 0x7fd5b3be3b6f1597
.dword 0x7fd5b3be3b6f1597
.dword 0x7fef95e94a40dc56
.dword 0x7fef95e94a40dc56
.dword 0x7fc9b58d2db8786f
.dword 0x7fc9b58d2db8786f
.dword 0x7fecca2a15201aa9
.dword 0x7fecca2a15201aa9
.dword 0x7fd4d27694e5a38b
.dword 0x7fd4d27694e5a38b
.dword 0x7fd2f2dacc08696f
.dword 0x7fd2f2dacc08696f
.dword 0x7fbabb8bbe03b7df
.dword 0x7fbabb8bbe03b7df
.dword 0x7fdbb5746cbb34cd
.dword 0x7fdbb5746cbb34cd
.dword 0x7fca5666b92c9353
.dword 0x7fca5666b92c9353
.dword 0x7fd830a4319a6f37
.dword 0x7fd830a4319a6f37
.dword 0x7fe6875b8a7de9f5
.dword 0x7fe6875b8a7de9f5
.dword 0x7febc4dccb7ac380
.dword 0x7febc4dccb7ac380
.dword 0x7fe23fbd09d7e9b6
.dword 0x7fe23fbd09d7e9b6
.dword 0x7fea38a3f0decfff
.dword 0x7fea38a3f0decfff
.dword 0x7fec1e74ff66f075
.dword 0x7fec1e74ff66f075
.dword 0x7fd026a2990b0a7f
.dword 0x7fd026a2990b0a7f
.dword 0x7fe7cd8dfca2011d
.dword 0x7fe7cd8dfca2011d
.dword 0x7fd3dcff67566087
.dword 0x7fd3dcff67566087
.dword 0x7fd39bd6a090d93f
.dword 0x7fd39bd6a090d93f
.dword 0x7feef9105cd9390b
.dword 0x7feef9105cd9390b
.dword 0x7fae19152f3266af
.dword 0x7fae19152f3266af
.dword 0x7fd48f4a954751bd
.dword 0x7fd48f4a954751bd
.dword 0x7fd946024d663351
.dword 0x7fd946024d663351
.dword 0x7fcc91ade861e02b
.dword 0x7fcc91ade861e02b
.dword 0x7fe987aaa2c7bb6a
.dword 0x7fe987aaa2c7bb6a
.dword 0x7fcc3c9ccfa1b1bb
.dword 0x7fcc3c9ccfa1b1bb
.dword 0x7fe5b39db9b4e7ac
.dword 0x7fe5b39db9b4e7ac
.dword 0x7fc482567721754b
.dword 0x7fc482567721754b
.dword 0x7fc2bf422090b207
.dword 0x7fc2bf422090b207
.dword 0x7f9551579cd90e3f
.dword 0x7f9551579cd90e3f
.dword 0x7fe3617941ba03e8
.dword 0x7fe3617941ba03e8
.dword 0x7fe052debfe82e13
.dword 0x7fe052debfe82e13
.dword 0x7fbbd7ce681c543f
.dword 0x7fbbd7ce681c543f
.dword 0x7fdaf054e65e9fad
.dword 0x7fdaf054e65e9fad
.dword 0x7f9833a9a7efc6ff
.dword 0x7f9833a9a7efc6ff
.dword 0x7fd49bad4bf8d1a9
.dword 0x7fd49bad4bf8d1a9
.dword 0x7fe6c5583d2d8f82
.dword 0x7fe6c5583d2d8f82
.dword 0x7fc585c60a81aa3f
.dword 0x7fc585c60a81aa3f
.dword 0x7fc46e9bf4155d7b
.dword 0x7fc46e9bf4155d7b
.dword 0x7fd60b0632528095
.dword 0x7fd60b0632528095
.dword 0x7fbc07725983617f
.dword 0x7fbc07725983617f
.dword 0x7fe82dc4511ff204
.dword 0x7fe82dc4511ff204
.dword 0x7f91175939fbdd3f
.dword 0x7f91175939fbdd3f
.dword 0x7fe58a25604824f3
.dword 0x7fe58a25604824f3
.dword 0x7fd056bcd04279ed
.dword 0x7fd056bcd04279ed
.dword 0x7fe981d2bf67b45e
.dword 0x7fe981d2bf67b45e
.dword 0x7feb8d62745dccc1
.dword 0x7feb8d62745dccc1
.dword 0x7fc6aedbc8cfe5cb
.dword 0x7fc6aedbc8cfe5cb
.dword 0x7f9ca57966fc21ff
.dword 0x7f9ca57966fc21ff
.dword 0x7fe39935e95315b1
.dword 0x7fe39935e95315b1
.dword 0x7fe13b37e2291279
.dword 0x7fe13b37e2291279
.dword 0x7fd6d5a59350bdcb
.dword 0x7fd6d5a59350bdcb
.dword 0x7fe026ab89a75256
.dword 0x7fe026ab89a75256
.dword 0x7fe23d6f3e37b4f1
.dword 0x7fe23d6f3e37b4f1
.dword 0x7facbc315eca5f3f
.dword 0x7facbc315eca5f3f
.dword 0x7fe1f6a4c4d26ab9
.dword 0x7fe1f6a4c4d26ab9
.dword 0x7fe9e4795c8459f5
.dword 0x7fe9e4795c8459f5
.dword 0x7fec5b9547c0fb71
.dword 0x7fec5b9547c0fb71
.dword 0x7fe913b4236d8411
.dword 0x7fe913b4236d8411
.dword 0x7feea0b252eae7e0
.dword 0x7feea0b252eae7e0
.dword 0x7fd13bdffd461269
.dword 0x7fd13bdffd461269
.dword 0x7fe27d4b8969c0b2
.dword 0x7fe27d4b8969c0b2
.dword 0x7fe070d1456013e3
.dword 0x7fe070d1456013e3
.dword 0x7feb877e6e317fa2
.dword 0x7feb877e6e317fa2
.dword 0x7fe8a82024cc4e03
.dword 0x7fe8a82024cc4e03
.dword 0x7fe0125698e86242
.dword 0x7fe0125698e86242
.dword 0x7fd930bcbd2d6035
.dword 0x7fd930bcbd2d6035
.dword 0x7fef7646167590ef
.dword 0x7fef7646167590ef
.dword 0x7fa643f753bef22f
.dword 0x7fa643f753bef22f
.dword 0x7fdf57237ddcb451
.dword 0x7fdf57237ddcb451
.dword 0x7fe0ab870b5c1c40
.dword 0x7fe0ab870b5c1c40
.dword 0x7fe04507a06e8587
.dword 0x7fe04507a06e8587
.dword 0x7fd7fb2260b115e9
.dword 0x7fd7fb2260b115e9
.dword 0x7fe67f4f571a752e
.dword 0x7fe67f4f571a752e
.dword 0x7fc6251b45dfbd3b
.dword 0x7fc6251b45dfbd3b
.dword 0x7fe98455e99dfdb1
.dword 0x7fe98455e99dfdb1
.dword 0x7fa1ad5e9ebc09df
.dword 0x7fa1ad5e9ebc09df
.dword 0x7fe02b48f992cb49
.dword 0x7fe02b48f992cb49
.dword 0x7fec3d4499ff58c3
.dword 0x7fec3d4499ff58c3
.dword 0x7fd36a63c245f557
.dword 0x7fd36a63c245f557
.dword 0x7fea8fa703a4078c
.dword 0x7fea8fa703a4078c
.dword 0x7fedf7523fde6c5d
.dword 0x7fedf7523fde6c5d
.dword 0x7fe7166677e49c3c
.dword 0x7fe7166677e49c3c
.dword 0x7fbef2a4f7c7db7f
.dword 0x7fbef2a4f7c7db7f
.dword 0x7fefc2ea66e5019e
.dword 0x7fefc2ea66e5019e
.dword 0x7fe48dace8666677
.dword 0x7fe48dace8666677
.dword 0x7feacd7053aa42a2
.dword 0x7feacd7053aa42a2
.dword 0x7fd28bc82f697c4d
.dword 0x7fd28bc82f697c4d
.dword 0x7fcc01045c2cd787
.dword 0x7fcc01045c2cd787
.dword 0x7fcdd5b61587fd27
.dword 0x7fcdd5b61587fd27
.dword 0x7fdc0659af8369fd
.dword 0x7fdc0659af8369fd
.dword 0x7f9dbcde43895c3f
.dword 0x7f9dbcde43895c3f
.dword 0x7fcbb9876f8130c3
.dword 0x7fcbb9876f8130c3
.dword 0x7fee0d828b86622a
.dword 0x7fee0d828b86622a
.dword 0x7f9a0e7ad32453df
.dword 0x7f9a0e7ad32453df
.dword 0x7fecd87e65450c45
.dword 0x7fecd87e65450c45
.dword 0x7fcd481499755d4b
.dword 0x7fcd481499755d4b
.dword 0x7fdc81394a2171e9
.dword 0x7fdc81394a2171e9
.dword 0x7fe86499331191c4
.dword 0x7fe86499331191c4
.dword 0x7feabe96758f2a09
.dword 0x7feabe96758f2a09
.dword 0x7fb8072e8f9c858f
.dword 0x7fb8072e8f9c858f
.dword 0x7fe4d9d98184b9d9
.dword 0x7fe4d9d98184b9d9
.dword 0x7fdfb5355e167379
.dword 0x7fdfb5355e167379
.dword 0x7fe870d778409f12
.dword 0x7fe870d778409f12
.dword 0x7fe84620ba958ca7
.dword 0x7fe84620ba958ca7
.dword 0x7fd473e8571c52cb
.dword 0x7fd473e8571c52cb
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 254*(XLEN/32),4,0xdeadbeef


signature_x15_2:
    .fill 254*(XLEN/32),4,0xdeadbeef


signature_x15_3:
    .fill 168*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
