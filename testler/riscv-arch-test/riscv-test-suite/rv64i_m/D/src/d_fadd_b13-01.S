
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.5.6
// timestamp : Mon Sep 20 11:53:35 2021 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/compliance_fd/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/compliance_fd/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV64D/rv64d_fadd.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2021. IIT Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fadd.d instruction of the RISC-V FD extension for the fadd_b13 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IFD")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",d_fadd_b13)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs1 == rs2 == rd, rs1==f28, rs2==f28, rd==f28, fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb0580f98a7dbd and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xb0580f98a7dbd and rm_val == 0  
// opcode: fadd.d ; op1:f28; op2:f28; dest:f28; op1val:0x7feb0580f98a7dbd; op2val:0x7feb0580f98a7dbd; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f28, f28, f28, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1:
// rs2 == rd != rs1, rs1==f2, rs2==f30, rd==f30, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2c3b1b8ef2d41 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x2c3b1b8ef2d41 and rm_val == 0  
// opcode: fadd.d ; op1:f2; op2:f30; dest:f30; op1val:0x7fe2c3b1b8ef2d41; op2val:0xffe2c3b1b8ef2d41; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f30, f2, f30, 0x0, 0, x16, 16, x17, x15, 16, x18)

inst_2:
// rs1 == rd != rs2, rs1==f12, rs2==f26, rd==f12, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x950338fe39141 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x950338fe39141 and rm_val == 0  
// opcode: fadd.d ; op1:f12; op2:f26; dest:f12; op1val:0x7fe950338fe39141; op2val:0xffe950338fe39141; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f12, f26, 0x0, 0, x16, 32, x17, x15, 32, x18)

inst_3:
// rs1 == rs2 != rd, rs1==f7, rs2==f7, rd==f25, fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa6c1b4fe3e3c0 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xa6c1b4fe3e3c0 and rm_val == 0  
// opcode: fadd.d ; op1:f7; op2:f7; dest:f25; op1val:0x7fea6c1b4fe3e3c0; op2val:0x7fea6c1b4fe3e3c0; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f25, f7, f7, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_4:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==f13, rs2==f16, rd==f23, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x122215f9ac41a and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x122215f9ac41a and rm_val == 0  
// opcode: fadd.d ; op1:f13; op2:f16; dest:f23; op1val:0x7fe122215f9ac41a; op2val:0xffe122215f9ac41a; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f23, f13, f16, 0x0, 0, x16, 64, x17, x15, 64, x18)

inst_5:
// rs1==f30, rs2==f4, rd==f31, fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcfc27db04baa5 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xcfc27db04baa5 and rm_val == 0  
// opcode: fadd.d ; op1:f30; op2:f4; dest:f31; op1val:0x7fecfc27db04baa5; op2val:0xffecfc27db04baa5; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f31, f30, f4, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_6:
// rs1==f1, rs2==f13, rd==f19, fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xfb271584e30d0 and rm_val == 0  
// opcode: fadd.d ; op1:f1; op2:f13; dest:f19; op1val:0x7fefb271584e30d0; op2val:0xffefb271584e30d0; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f19, f1, f13, 0x0, 0, x16, 96, x17, x15, 96, x18)

inst_7:
// rs1==f21, rs2==f17, rd==f15, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x9c37606126e28 and rm_val == 0  
// opcode: fadd.d ; op1:f21; op2:f17; dest:f15; op1val:0x7fe9c37606126e28; op2val:0xffe9c37606126e28; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f15, f21, f17, 0x0, 0, x16, 112, x17, x15, 112, x18)

inst_8:
// rs1==f19, rs2==f12, rd==f20, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x25d29d05cd288 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x25d29d05cd288 and rm_val == 0  
// opcode: fadd.d ; op1:f19; op2:f12; dest:f20; op1val:0x7fe25d29d05cd288; op2val:0xffe25d29d05cd288; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f20, f19, f12, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_9:
// rs1==f27, rs2==f29, rd==f14, fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcd5bbb21e85e5 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xcd5bbb21e85e5 and rm_val == 0  
// opcode: fadd.d ; op1:f27; op2:f29; dest:f14; op1val:0x7fecd5bbb21e85e5; op2val:0xffecd5bbb21e85e5; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f14, f27, f29, 0x0, 0, x16, 144, x17, x15, 144, x18)

inst_10:
// rs1==f22, rs2==f31, rd==f1, fs1 == 0 and fe1 == 0x7fe and fm1 == 0xefec1cd7c3bcb and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xefec1cd7c3bcb and rm_val == 0  
// opcode: fadd.d ; op1:f22; op2:f31; dest:f1; op1val:0x7feefec1cd7c3bcb; op2val:0xffeefec1cd7c3bcb; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f1, f22, f31, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_11:
// rs1==f11, rs2==f22, rd==f5, fs1 == 0 and fe1 == 0x7fc and fm1 == 0x30c845de62d3f and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x30c845de62d3f and rm_val == 0  
// opcode: fadd.d ; op1:f11; op2:f22; dest:f5; op1val:0x7fc30c845de62d3f; op2val:0xffc30c845de62d3f; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f5, f11, f22, 0x0, 0, x16, 176, x17, x15, 176, x18)

inst_12:
// rs1==f0, rs2==f2, rd==f6, fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5287546e52d99 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x5287546e52d99 and rm_val == 0  
// opcode: fadd.d ; op1:f0; op2:f2; dest:f6; op1val:0x7fd5287546e52d99; op2val:0xffd5287546e52d99; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f6, f0, f2, 0x0, 0, x16, 192, x17, x15, 192, x18)

inst_13:
// rs1==f17, rs2==f19, rd==f22, fs1 == 0 and fe1 == 0x7f8 and fm1 == 0xf4dd0c2472fbf and fs2 == 1 and fe2 == 0x7f8 and fm2 == 0xf4dd0c2472fbf and rm_val == 0  
// opcode: fadd.d ; op1:f17; op2:f19; dest:f22; op1val:0x7f8f4dd0c2472fbf; op2val:0xff8f4dd0c2472fbf; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f22, f17, f19, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_14:
// rs1==f3, rs2==f0, rd==f4, fs1 == 0 and fe1 == 0x7fc and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0xccfc542168107 and rm_val == 0  
// opcode: fadd.d ; op1:f3; op2:f0; dest:f4; op1val:0x7fcccfc542168107; op2val:0xffcccfc542168107; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f4, f3, f0, 0x0, 0, x16, 224, x17, x15, 224, x18)

inst_15:
// rs1==f4, rs2==f9, rd==f7, fs1 == 0 and fe1 == 0x7fe and fm1 == 0xbcdfd8ba97c91 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xbcdfd8ba97c91 and rm_val == 0  
// opcode: fadd.d ; op1:f4; op2:f9; dest:f7; op1val:0x7febcdfd8ba97c91; op2val:0xffebcdfd8ba97c91; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f7, f4, f9, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_16:
// rs1==f16, rs2==f23, rd==f21, fs1 == 0 and fe1 == 0x7fb and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x0fce9799927f7 and rm_val == 0  
// opcode: fadd.d ; op1:f16; op2:f23; dest:f21; op1val:0x7fb0fce9799927f7; op2val:0xffb0fce9799927f7; valaddr_reg:x16; val_offset:256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f21, f16, f23, 0x0, 0, x16, 256, x17, x15, 256, x18)

inst_17:
// rs1==f18, rs2==f6, rd==f29, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6faef3ad3537e and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x6faef3ad3537e and rm_val == 0  
// opcode: fadd.d ; op1:f18; op2:f6; dest:f29; op1val:0x7fe6faef3ad3537e; op2val:0xffe6faef3ad3537e; valaddr_reg:x16; val_offset:272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f29, f18, f6, 0x0, 0, x16, 272, x17, x15, 272, x18)

inst_18:
// rs1==f29, rs2==f3, rd==f8, fs1 == 0 and fe1 == 0x7fe and fm1 == 0xaf465058419e9 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xaf465058419e9 and rm_val == 0  
// opcode: fadd.d ; op1:f29; op2:f3; dest:f8; op1val:0x7feaf465058419e9; op2val:0xffeaf465058419e9; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f8, f29, f3, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_19:
// rs1==f6, rs2==f24, rd==f18, fs1 == 0 and fe1 == 0x7fd and fm1 == 0x070c0d4d218f9 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x070c0d4d218f9 and rm_val == 0  
// opcode: fadd.d ; op1:f6; op2:f24; dest:f18; op1val:0x7fd070c0d4d218f9; op2val:0xffd070c0d4d218f9; valaddr_reg:x16; val_offset:304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f18, f6, f24, 0x0, 0, x16, 304, x17, x15, 304, x18)

inst_20:
// rs1==f14, rs2==f27, rd==f26, fs1 == 0 and fe1 == 0x7fa and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x7fa and fm2 == 0x228e5619b5bff and rm_val == 0  
// opcode: fadd.d ; op1:f14; op2:f27; dest:f26; op1val:0x7fa228e5619b5bff; op2val:0xffa228e5619b5bff; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f26, f14, f27, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_21:
// rs1==f26, rs2==f5, rd==f9, fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcc4ac8145e5cc and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xcc4ac8145e5cc and rm_val == 0  
// opcode: fadd.d ; op1:f26; op2:f5; dest:f9; op1val:0x7fecc4ac8145e5cc; op2val:0xffecc4ac8145e5cc; valaddr_reg:x16; val_offset:336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f9, f26, f5, 0x0, 0, x16, 336, x17, x15, 336, x18)

inst_22:
// rs1==f9, rs2==f11, rd==f24, fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5c62b6da50e51 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x5c62b6da50e51 and rm_val == 0  
// opcode: fadd.d ; op1:f9; op2:f11; dest:f24; op1val:0x7fd5c62b6da50e51; op2val:0xffd5c62b6da50e51; valaddr_reg:x16; val_offset:352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f24, f9, f11, 0x0, 0, x16, 352, x17, x15, 352, x18)

inst_23:
// rs1==f10, rs2==f14, rd==f11, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3833da7b9aa37 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x3833da7b9aa37 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f14; dest:f11; op1val:0x7fe3833da7b9aa37; op2val:0xffe3833da7b9aa37; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f11, f10, f14, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_24:
// rs1==f15, rs2==f18, rd==f17, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x57132c37fb117 and rm_val == 0  
// opcode: fadd.d ; op1:f15; op2:f18; dest:f17; op1val:0x7fe57132c37fb117; op2val:0xffe57132c37fb117; valaddr_reg:x16; val_offset:384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f17, f15, f18, 0x0, 0, x16, 384, x17, x15, 384, x18)

inst_25:
// rs1==f5, rs2==f15, rd==f0, fs1 == 0 and fe1 == 0x7fd and fm1 == 0xfe6749ffc4763 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xfe6749ffc4763 and rm_val == 0  
// opcode: fadd.d ; op1:f5; op2:f15; dest:f0; op1val:0x7fdfe6749ffc4763; op2val:0xffdfe6749ffc4763; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f0, f5, f15, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_26:
// rs1==f25, rs2==f20, rd==f16, fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd5872438d16b0 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xd5872438d16b0 and rm_val == 0  
// opcode: fadd.d ; op1:f25; op2:f20; dest:f16; op1val:0x7fed5872438d16b0; op2val:0xffed5872438d16b0; valaddr_reg:x16; val_offset:416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f16, f25, f20, 0x0, 0, x16, 416, x17, x15, 416, x18)

inst_27:
// rs1==f31, rs2==f10, rd==f2, fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc15c34215bcf5 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xc15c34215bcf5 and rm_val == 0  
// opcode: fadd.d ; op1:f31; op2:f10; dest:f2; op1val:0x7fec15c34215bcf5; op2val:0xffec15c34215bcf5; valaddr_reg:x16; val_offset:432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f2, f31, f10, 0x0, 0, x16, 432, x17, x15, 432, x18)

inst_28:
// rs1==f24, rs2==f8, rd==f27, fs1 == 0 and fe1 == 0x7fd and fm1 == 0x9fa60dd1b5e57 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x9fa60dd1b5e57 and rm_val == 0  
// opcode: fadd.d ; op1:f24; op2:f8; dest:f27; op1val:0x7fd9fa60dd1b5e57; op2val:0xffd9fa60dd1b5e57; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f27, f24, f8, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_29:
// rs1==f23, rs2==f25, rd==f3, fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xf74a5c9f39c6c and rm_val == 0  
// opcode: fadd.d ; op1:f23; op2:f25; dest:f3; op1val:0x7fef74a5c9f39c6c; op2val:0xffef74a5c9f39c6c; valaddr_reg:x16; val_offset:464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f3, f23, f25, 0x0, 0, x16, 464, x17, x15, 464, x18)

inst_30:
// rs1==f8, rs2==f1, rd==f10, fs1 == 0 and fe1 == 0x7fc and fm1 == 0x35eecb1ad0a6b and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x35eecb1ad0a6b and rm_val == 0  
// opcode: fadd.d ; op1:f8; op2:f1; dest:f10; op1val:0x7fc35eecb1ad0a6b; op2val:0xffc35eecb1ad0a6b; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f10, f8, f1, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_31:
// rs1==f20, rs2==f21, rd==f13, fs1 == 0 and fe1 == 0x7fd and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x831acfae4a49b and rm_val == 0  
// opcode: fadd.d ; op1:f20; op2:f21; dest:f13; op1val:0x7fd831acfae4a49b; op2val:0xffd831acfae4a49b; valaddr_reg:x16; val_offset:496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f13, f20, f21, 0x0, 0, x16, 496, x17, x15, 496, x18)

inst_32:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x2bbbe71ac902b and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x2bbbe71ac902b and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fc2bbbe71ac902b; op2val:0xffc2bbbe71ac902b; valaddr_reg:x16; val_offset:512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 512, x17, x15, 512, x18)

inst_33:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe55b30b309254 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xe55b30b309254 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fee55b30b309254; op2val:0xffee55b30b309254; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_34:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xa8693ca418657 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0xa8693ca418657 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fca8693ca418657; op2val:0xffca8693ca418657; valaddr_reg:x16; val_offset:544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 544, x17, x15, 544, x18)

inst_35:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xe70e78fe823f7 and fs2 == 1 and fe2 == 0x7fb and fm2 == 0xe70e78fe823f7 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fbe70e78fe823f7; op2val:0xffbe70e78fe823f7; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_36:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xce7352604fe6b and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xce7352604fe6b and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fdce7352604fe6b; op2val:0xffdce7352604fe6b; valaddr_reg:x16; val_offset:576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 576, x17, x15, 576, x18)

inst_37:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x676d1681c4823 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x676d1681c4823 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe676d1681c4823; op2val:0xffe676d1681c4823; valaddr_reg:x16; val_offset:592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 592, x17, x15, 592, x18)

inst_38:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x058fe9a4daa6f and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x058fe9a4daa6f and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fb058fe9a4daa6f; op2val:0xffb058fe9a4daa6f; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 608, x17, x15, 608, x18)

inst_39:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xb992011891a75 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xb992011891a75 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fdb992011891a75; op2val:0xffdb992011891a75; valaddr_reg:x16; val_offset:624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 624, x17, x15, 624, x18)

inst_40:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x0b2db44ae8c01 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x0b2db44ae8c01 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd0b2db44ae8c01; op2val:0xffd0b2db44ae8c01; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_41:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x792be19c2d7a1 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x792be19c2d7a1 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd792be19c2d7a1; op2val:0xffd792be19c2d7a1; valaddr_reg:x16; val_offset:656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 656, x17, x15, 656, x18)

inst_42:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5bcd8bcde77b5 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x5bcd8bcde77b5 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe5bcd8bcde77b5; op2val:0xffe5bcd8bcde77b5; valaddr_reg:x16; val_offset:672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 672, x17, x15, 672, x18)

inst_43:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf4587ce4e6a55 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xf4587ce4e6a55 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fdf4587ce4e6a55; op2val:0xffdf4587ce4e6a55; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 688, x17, x15, 688, x18)

inst_44:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x09badb528c6c8 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x09badb528c6c8 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe09badb528c6c8; op2val:0xffe09badb528c6c8; valaddr_reg:x16; val_offset:704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 704, x17, x15, 704, x18)

inst_45:
// fs1 == 0 and fe1 == 0x7f8 and fm1 == 0x01430191b8abf and fs2 == 1 and fe2 == 0x7f8 and fm2 == 0x01430191b8abf and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7f801430191b8abf; op2val:0xff801430191b8abf; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_46:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7feee78e25d36 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x7feee78e25d36 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe7feee78e25d36; op2val:0xffe7feee78e25d36; valaddr_reg:x16; val_offset:736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 736, x17, x15, 736, x18)

inst_47:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x0da8a99d945d7 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fb0da8a99d945d7; op2val:0xffb0da8a99d945d7; valaddr_reg:x16; val_offset:752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 752, x17, x15, 752, x18)

inst_48:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf2f998bf74bb4 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xf2f998bf74bb4 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fef2f998bf74bb4; op2val:0xffef2f998bf74bb4; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 768, x17, x15, 768, x18)

inst_49:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x40e45564208fa and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x40e45564208fa and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe40e45564208fa; op2val:0xffe40e45564208fa; valaddr_reg:x16; val_offset:784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 784, x17, x15, 784, x18)

inst_50:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc9eec489f6667 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xc9eec489f6667 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fec9eec489f6667; op2val:0xffec9eec489f6667; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_51:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3526172ae3f6b and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x3526172ae3f6b and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd3526172ae3f6b; op2val:0xffd3526172ae3f6b; valaddr_reg:x16; val_offset:816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 816, x17, x15, 816, x18)

inst_52:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x66315a9fdae1d and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x66315a9fdae1d and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe66315a9fdae1d; op2val:0xffe66315a9fdae1d; valaddr_reg:x16; val_offset:832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 832, x17, x15, 832, x18)

inst_53:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5fe6340fe9dff and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x5fe6340fe9dff and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd5fe6340fe9dff; op2val:0xffd5fe6340fe9dff; valaddr_reg:x16; val_offset:848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 848, x17, x15, 848, x18)

inst_54:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xae83ac33105f8 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xae83ac33105f8 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7feae83ac33105f8; op2val:0xffeae83ac33105f8; valaddr_reg:x16; val_offset:864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 864, x17, x15, 864, x18)

inst_55:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd13b901ecb86d and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xd13b901ecb86d and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fed13b901ecb86d; op2val:0xffed13b901ecb86d; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 880, x17, x15, 880, x18)

inst_56:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xa8acc80de84a1 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xa8acc80de84a1 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fda8acc80de84a1; op2val:0xffda8acc80de84a1; valaddr_reg:x16; val_offset:896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 896, x17, x15, 896, x18)

inst_57:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x9cd85f6af39ef and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd9cd85f6af39ef; op2val:0xffd9cd85f6af39ef; valaddr_reg:x16; val_offset:912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 912, x17, x15, 912, x18)

inst_58:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0bcd3d6ea260a and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x0bcd3d6ea260a and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe0bcd3d6ea260a; op2val:0xffe0bcd3d6ea260a; valaddr_reg:x16; val_offset:928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 928, x17, x15, 928, x18)

inst_59:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x7fa and fm2 == 0x8b50ed3b44d4f and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fa8b50ed3b44d4f; op2val:0xffa8b50ed3b44d4f; valaddr_reg:x16; val_offset:944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 944, x17, x15, 944, x18)

inst_60:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe989c8dd81bc5 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xe989c8dd81bc5 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fde989c8dd81bc5; op2val:0xffde989c8dd81bc5; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 960, x17, x15, 960, x18)

inst_61:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x18d2ef084c097 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x18d2ef084c097 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe18d2ef084c097; op2val:0xffe18d2ef084c097; valaddr_reg:x16; val_offset:976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 976, x17, x15, 976, x18)

inst_62:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x287ac6ae322ff and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x287ac6ae322ff and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd287ac6ae322ff; op2val:0xffd287ac6ae322ff; valaddr_reg:x16; val_offset:992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 992, x17, x15, 992, x18)

inst_63:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x4f961e264020f and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x4f961e264020f and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fc4f961e264020f; op2val:0xffc4f961e264020f; valaddr_reg:x16; val_offset:1008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1008, x17, x15, 1008, x18)

inst_64:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3db72bc24857c and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x3db72bc24857c and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe3db72bc24857c; op2val:0xffe3db72bc24857c; valaddr_reg:x16; val_offset:1024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1024, x17, x15, 1024, x18)

inst_65:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6fdf2805ff4db and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x6fdf2805ff4db and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe6fdf2805ff4db; op2val:0xffe6fdf2805ff4db; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1040, x17, x15, 1040, x18)

inst_66:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5569022b338ff and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x5569022b338ff and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd5569022b338ff; op2val:0xffd5569022b338ff; valaddr_reg:x16; val_offset:1056; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1056, x17, x15, 1056, x18)

inst_67:
// fs1 == 0 and fe1 == 0x7f8 and fm1 == 0x238a22371e9ff and fs2 == 1 and fe2 == 0x7f8 and fm2 == 0x238a22371e9ff and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7f8238a22371e9ff; op2val:0xff8238a22371e9ff; valaddr_reg:x16; val_offset:1072; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1072, x17, x15, 1072, x18)

inst_68:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xa9aa2b6025f07 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0xa9aa2b6025f07 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fca9aa2b6025f07; op2val:0xffca9aa2b6025f07; valaddr_reg:x16; val_offset:1088; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1088, x17, x15, 1088, x18)

inst_69:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7d6356ef8a62f and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x7d6356ef8a62f and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd7d6356ef8a62f; op2val:0xffd7d6356ef8a62f; valaddr_reg:x16; val_offset:1104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1104, x17, x15, 1104, x18)

inst_70:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xce30065d5ac1b and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xce30065d5ac1b and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fece30065d5ac1b; op2val:0xffece30065d5ac1b; valaddr_reg:x16; val_offset:1120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1120, x17, x15, 1120, x18)

inst_71:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4f8b971fa5a72 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x4f8b971fa5a72 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe4f8b971fa5a72; op2val:0xffe4f8b971fa5a72; valaddr_reg:x16; val_offset:1136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1136, x17, x15, 1136, x18)

inst_72:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7f8e997d84592 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x7f8e997d84592 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe7f8e997d84592; op2val:0xffe7f8e997d84592; valaddr_reg:x16; val_offset:1152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1152, x17, x15, 1152, x18)

inst_73:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd1d803765d304 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xd1d803765d304 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fed1d803765d304; op2val:0xffed1d803765d304; valaddr_reg:x16; val_offset:1168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1168, x17, x15, 1168, x18)

inst_74:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe49bfb977b300 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xe49bfb977b300 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fee49bfb977b300; op2val:0xffee49bfb977b300; valaddr_reg:x16; val_offset:1184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1184, x17, x15, 1184, x18)

inst_75:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5cab9bd09e6c4 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x5cab9bd09e6c4 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe5cab9bd09e6c4; op2val:0xffe5cab9bd09e6c4; valaddr_reg:x16; val_offset:1200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1200, x17, x15, 1200, x18)

inst_76:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x30526056a01ff and fs2 == 1 and fe2 == 0x7f9 and fm2 == 0x30526056a01ff and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7f930526056a01ff; op2val:0xff930526056a01ff; valaddr_reg:x16; val_offset:1216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1216, x17, x15, 1216, x18)

inst_77:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xbe64efc9e258d and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xbe64efc9e258d and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7febe64efc9e258d; op2val:0xffebe64efc9e258d; valaddr_reg:x16; val_offset:1232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1232, x17, x15, 1232, x18)

inst_78:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4d3375e946b52 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x4d3375e946b52 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe4d3375e946b52; op2val:0xffe4d3375e946b52; valaddr_reg:x16; val_offset:1248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1248, x17, x15, 1248, x18)

inst_79:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x113ecba7502a7 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x113ecba7502a7 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fc113ecba7502a7; op2val:0xffc113ecba7502a7; valaddr_reg:x16; val_offset:1264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1264, x17, x15, 1264, x18)

inst_80:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x95adca0768ede and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x95adca0768ede and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe95adca0768ede; op2val:0xffe95adca0768ede; valaddr_reg:x16; val_offset:1280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1280, x17, x15, 1280, x18)

inst_81:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x194e95f4fa0e5 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x194e95f4fa0e5 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd194e95f4fa0e5; op2val:0xffd194e95f4fa0e5; valaddr_reg:x16; val_offset:1296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1296, x17, x15, 1296, x18)

inst_82:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x963785d0567a5 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x963785d0567a5 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd963785d0567a5; op2val:0xffd963785d0567a5; valaddr_reg:x16; val_offset:1312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1312, x17, x15, 1312, x18)

inst_83:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x9a5710f3828f7 and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x9a5710f3828f7 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fb9a5710f3828f7; op2val:0xffb9a5710f3828f7; valaddr_reg:x16; val_offset:1328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1328, x17, x15, 1328, x18)

inst_84:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x1eb3cbd822141 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x1eb3cbd822141 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd1eb3cbd822141; op2val:0xffd1eb3cbd822141; valaddr_reg:x16; val_offset:1344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1344, x17, x15, 1344, x18)

inst_85:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4c6c848cb47df and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x4c6c848cb47df and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe4c6c848cb47df; op2val:0xffe4c6c848cb47df; valaddr_reg:x16; val_offset:1360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1360, x17, x15, 1360, x18)

inst_86:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x9086506183f67 and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x9086506183f67 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fb9086506183f67; op2val:0xffb9086506183f67; valaddr_reg:x16; val_offset:1376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1376, x17, x15, 1376, x18)

inst_87:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa53d0d2b3faec and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xa53d0d2b3faec and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fea53d0d2b3faec; op2val:0xffea53d0d2b3faec; valaddr_reg:x16; val_offset:1392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1392, x17, x15, 1392, x18)

inst_88:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6f451c304de2e and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x6f451c304de2e and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe6f451c304de2e; op2val:0xffe6f451c304de2e; valaddr_reg:x16; val_offset:1408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1408, x17, x15, 1408, x18)

inst_89:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x43c3f0806f2cd and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x43c3f0806f2cd and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd43c3f0806f2cd; op2val:0xffd43c3f0806f2cd; valaddr_reg:x16; val_offset:1424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1424, x17, x15, 1424, x18)

inst_90:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x9b75de798ac5f and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x9b75de798ac5f and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd9b75de798ac5f; op2val:0xffd9b75de798ac5f; valaddr_reg:x16; val_offset:1440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1440, x17, x15, 1440, x18)

inst_91:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x737bdc485a77d and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x737bdc485a77d and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe737bdc485a77d; op2val:0xffe737bdc485a77d; valaddr_reg:x16; val_offset:1456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1456, x17, x15, 1456, x18)

inst_92:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x442435bea0eb5 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x442435bea0eb5 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe442435bea0eb5; op2val:0xffe442435bea0eb5; valaddr_reg:x16; val_offset:1472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1472, x17, x15, 1472, x18)

inst_93:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x8106d28c6e8ff and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x8106d28c6e8ff and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fc8106d28c6e8ff; op2val:0xffc8106d28c6e8ff; valaddr_reg:x16; val_offset:1488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1488, x17, x15, 1488, x18)

inst_94:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc00223fe58e9e and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xc00223fe58e9e and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fec00223fe58e9e; op2val:0xffec00223fe58e9e; valaddr_reg:x16; val_offset:1504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1504, x17, x15, 1504, x18)

inst_95:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xde18ff8661b6b and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xde18ff8661b6b and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fdde18ff8661b6b; op2val:0xffdde18ff8661b6b; valaddr_reg:x16; val_offset:1520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1520, x17, x15, 1520, x18)

inst_96:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xfa73e129b8879 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xfa73e129b8879 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fdfa73e129b8879; op2val:0xffdfa73e129b8879; valaddr_reg:x16; val_offset:1536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1536, x17, x15, 1536, x18)

inst_97:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x82cee64001220 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x82cee64001220 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe82cee64001220; op2val:0xffe82cee64001220; valaddr_reg:x16; val_offset:1552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1552, x17, x15, 1552, x18)

inst_98:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf2f5c0f43aa65 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xf2f5c0f43aa65 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fdf2f5c0f43aa65; op2val:0xffdf2f5c0f43aa65; valaddr_reg:x16; val_offset:1568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1568, x17, x15, 1568, x18)

inst_99:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x42f12d7244f4f and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x42f12d7244f4f and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fc42f12d7244f4f; op2val:0xffc42f12d7244f4f; valaddr_reg:x16; val_offset:1584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1584, x17, x15, 1584, x18)

inst_100:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc80a67882d6d1 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xc80a67882d6d1 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fdc80a67882d6d1; op2val:0xffdc80a67882d6d1; valaddr_reg:x16; val_offset:1600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1600, x17, x15, 1600, x18)

inst_101:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x530b56ed605ac and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x530b56ed605ac and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe530b56ed605ac; op2val:0xffe530b56ed605ac; valaddr_reg:x16; val_offset:1616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1616, x17, x15, 1616, x18)

inst_102:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6756366451777 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x6756366451777 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe6756366451777; op2val:0xffe6756366451777; valaddr_reg:x16; val_offset:1632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1632, x17, x15, 1632, x18)

inst_103:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xa85a268409ae9 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xa85a268409ae9 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fda85a268409ae9; op2val:0xffda85a268409ae9; valaddr_reg:x16; val_offset:1648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1648, x17, x15, 1648, x18)

inst_104:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc0377eab1f21f and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xc0377eab1f21f and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fec0377eab1f21f; op2val:0xffec0377eab1f21f; valaddr_reg:x16; val_offset:1664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1664, x17, x15, 1664, x18)

inst_105:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x465936dcae3fb and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x465936dcae3fb and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe465936dcae3fb; op2val:0xffe465936dcae3fb; valaddr_reg:x16; val_offset:1680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1680, x17, x15, 1680, x18)

inst_106:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x566d65947d7e7 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x566d65947d7e7 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd566d65947d7e7; op2val:0xffd566d65947d7e7; valaddr_reg:x16; val_offset:1696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1696, x17, x15, 1696, x18)

inst_107:
// fs1 == 0 and fe1 == 0x7f5 and fm1 == 0x8f90cc1b18bff and fs2 == 1 and fe2 == 0x7f5 and fm2 == 0x8f90cc1b18bff and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7f58f90cc1b18bff; op2val:0xff58f90cc1b18bff; valaddr_reg:x16; val_offset:1712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1712, x17, x15, 1712, x18)

inst_108:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xa85d306a197c5 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xa85d306a197c5 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fda85d306a197c5; op2val:0xffda85d306a197c5; valaddr_reg:x16; val_offset:1728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1728, x17, x15, 1728, x18)

inst_109:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6e65a8d3dbea5 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x6e65a8d3dbea5 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe6e65a8d3dbea5; op2val:0xffe6e65a8d3dbea5; valaddr_reg:x16; val_offset:1744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1744, x17, x15, 1744, x18)

inst_110:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x447a9936a43d3 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x447a9936a43d3 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe447a9936a43d3; op2val:0xffe447a9936a43d3; valaddr_reg:x16; val_offset:1760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1760, x17, x15, 1760, x18)

inst_111:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x6fd2704b8e37f and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x6fd2704b8e37f and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd6fd2704b8e37f; op2val:0xffd6fd2704b8e37f; valaddr_reg:x16; val_offset:1776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1776, x17, x15, 1776, x18)

inst_112:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x68add14e18ecb and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x68add14e18ecb and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd68add14e18ecb; op2val:0xffd68add14e18ecb; valaddr_reg:x16; val_offset:1792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1792, x17, x15, 1792, x18)

inst_113:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xebc97dc31d5a7 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0xebc97dc31d5a7 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fcebc97dc31d5a7; op2val:0xffcebc97dc31d5a7; valaddr_reg:x16; val_offset:1808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1808, x17, x15, 1808, x18)

inst_114:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x76587e2d6216f and fs2 == 1 and fe2 == 0x7fa and fm2 == 0x76587e2d6216f and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fa76587e2d6216f; op2val:0xffa76587e2d6216f; valaddr_reg:x16; val_offset:1824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1824, x17, x15, 1824, x18)

inst_115:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7bafa3050f8b7 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x7bafa3050f8b7 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe7bafa3050f8b7; op2val:0xffe7bafa3050f8b7; valaddr_reg:x16; val_offset:1840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1840, x17, x15, 1840, x18)

inst_116:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1f06fdec36709 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x1f06fdec36709 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe1f06fdec36709; op2val:0xffe1f06fdec36709; valaddr_reg:x16; val_offset:1856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1856, x17, x15, 1856, x18)

inst_117:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xace1ecea16623 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xace1ecea16623 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7feace1ecea16623; op2val:0xffeace1ecea16623; valaddr_reg:x16; val_offset:1872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1872, x17, x15, 1872, x18)

inst_118:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3eebb35310409 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x3eebb35310409 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd3eebb35310409; op2val:0xffd3eebb35310409; valaddr_reg:x16; val_offset:1888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1888, x17, x15, 1888, x18)

inst_119:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2362beb7fcccc and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x2362beb7fcccc and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe2362beb7fcccc; op2val:0xffe2362beb7fcccc; valaddr_reg:x16; val_offset:1904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1904, x17, x15, 1904, x18)

inst_120:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe2f1c5d734347 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xe2f1c5d734347 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fde2f1c5d734347; op2val:0xffde2f1c5d734347; valaddr_reg:x16; val_offset:1920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1920, x17, x15, 1920, x18)

inst_121:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc4edf85532923 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xc4edf85532923 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fdc4edf85532923; op2val:0xffdc4edf85532923; valaddr_reg:x16; val_offset:1936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1936, x17, x15, 1936, x18)

inst_122:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x00b42e8f00d47 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x00b42e8f00d47 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd00b42e8f00d47; op2val:0xffd00b42e8f00d47; valaddr_reg:x16; val_offset:1952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1952, x17, x15, 1952, x18)

inst_123:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb0db7e0a5d748 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xb0db7e0a5d748 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7feb0db7e0a5d748; op2val:0xffeb0db7e0a5d748; valaddr_reg:x16; val_offset:1968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1968, x17, x15, 1968, x18)

inst_124:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xdb8da7279369f and fs2 == 1 and fe2 == 0x7fa and fm2 == 0xdb8da7279369f and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fadb8da7279369f; op2val:0xffadb8da7279369f; valaddr_reg:x16; val_offset:1984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1984, x17, x15, 1984, x18)

inst_125:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5864580d04bef and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x5864580d04bef and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe5864580d04bef; op2val:0xffe5864580d04bef; valaddr_reg:x16; val_offset:2000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 2000, x17, x15, 2000, x18)

inst_126:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd64347e477166 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xd64347e477166 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fed64347e477166; op2val:0xffed64347e477166; valaddr_reg:x16; val_offset:2016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 2016, x17, x15, 2016, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_2)

inst_127:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x76940d9e18057 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x76940d9e18057 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe76940d9e18057; op2val:0xffe76940d9e18057; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_128:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x9847d9429817b and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x9847d9429817b and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fc9847d9429817b; op2val:0xffc9847d9429817b; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 16, x17, x15, 16, x18)

inst_129:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x9d5f97660dadf and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x9d5f97660dadf and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fb9d5f97660dadf; op2val:0xffb9d5f97660dadf; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 32, x17, x15, 32, x18)

inst_130:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x01dca4dde57a5 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x01dca4dde57a5 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe01dca4dde57a5; op2val:0xffe01dca4dde57a5; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_131:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x66b37637d118d and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x66b37637d118d and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd66b37637d118d; op2val:0xffd66b37637d118d; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 64, x17, x15, 64, x18)

inst_132:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xc44223126cbc7 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0xc44223126cbc7 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fcc44223126cbc7; op2val:0xffcc44223126cbc7; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_133:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x9fbeb1abfb6e7 and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x9fbeb1abfb6e7 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fb9fbeb1abfb6e7; op2val:0xffb9fbeb1abfb6e7; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 96, x17, x15, 96, x18)

inst_134:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x75450c5a9817f and fs2 == 1 and fe2 == 0x7f9 and fm2 == 0x75450c5a9817f and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7f975450c5a9817f; op2val:0xff975450c5a9817f; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 112, x17, x15, 112, x18)

inst_135:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x99fb7503e8d08 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x99fb7503e8d08 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe99fb7503e8d08; op2val:0xffe99fb7503e8d08; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_136:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xfb797ef55e1cf and fs2 == 1 and fe2 == 0x7fb and fm2 == 0xfb797ef55e1cf and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fbfb797ef55e1cf; op2val:0xffbfb797ef55e1cf; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 144, x17, x15, 144, x18)

inst_137:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xec0c4abe1fd0e and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xec0c4abe1fd0e and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7feec0c4abe1fd0e; op2val:0xffeec0c4abe1fd0e; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_138:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x2a1fa26c0948f and fs2 == 1 and fe2 == 0x7fa and fm2 == 0x2a1fa26c0948f and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fa2a1fa26c0948f; op2val:0xffa2a1fa26c0948f; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 176, x17, x15, 176, x18)

inst_139:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7b05f6eabb69f and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x7b05f6eabb69f and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd7b05f6eabb69f; op2val:0xffd7b05f6eabb69f; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 192, x17, x15, 192, x18)

inst_140:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x26e34e07a9172 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x26e34e07a9172 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe26e34e07a9172; op2val:0xffe26e34e07a9172; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_141:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x451eb54c10b8b and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x451eb54c10b8b and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe451eb54c10b8b; op2val:0xffe451eb54c10b8b; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 224, x17, x15, 224, x18)

inst_142:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5c762dc4bc5d6 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x5c762dc4bc5d6 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe5c762dc4bc5d6; op2val:0xffe5c762dc4bc5d6; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_143:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd1ed9e7beff05 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xd1ed9e7beff05 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fed1ed9e7beff05; op2val:0xffed1ed9e7beff05; valaddr_reg:x16; val_offset:256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 256, x17, x15, 256, x18)

inst_144:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x728eb744bb2ef and fs2 == 1 and fe2 == 0x7fa and fm2 == 0x728eb744bb2ef and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fa728eb744bb2ef; op2val:0xffa728eb744bb2ef; valaddr_reg:x16; val_offset:272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 272, x17, x15, 272, x18)

inst_145:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x2bbdffdaf66c3 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x2bbdffdaf66c3 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fc2bbdffdaf66c3; op2val:0xffc2bbdffdaf66c3; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_146:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa1bf5c83faf60 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xa1bf5c83faf60 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fea1bf5c83faf60; op2val:0xffea1bf5c83faf60; valaddr_reg:x16; val_offset:304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 304, x17, x15, 304, x18)

inst_147:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x96d3944ae92c5 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x96d3944ae92c5 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe96d3944ae92c5; op2val:0xffe96d3944ae92c5; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_148:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xdfc83569216bf and fs2 == 1 and fe2 == 0x7fb and fm2 == 0xdfc83569216bf and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fbdfc83569216bf; op2val:0xffbdfc83569216bf; valaddr_reg:x16; val_offset:336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 336, x17, x15, 336, x18)

inst_149:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xf1bca90426463 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0xf1bca90426463 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fcf1bca90426463; op2val:0xffcf1bca90426463; valaddr_reg:x16; val_offset:352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 352, x17, x15, 352, x18)

inst_150:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x42a2ac1575123 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x42a2ac1575123 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe42a2ac1575123; op2val:0xffe42a2ac1575123; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_151:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x39beb50761e3d and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x39beb50761e3d and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe39beb50761e3d; op2val:0xffe39beb50761e3d; valaddr_reg:x16; val_offset:384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 384, x17, x15, 384, x18)

inst_152:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x962eb496df1c1 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x962eb496df1c1 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe962eb496df1c1; op2val:0xffe962eb496df1c1; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_153:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfe1581ecd07ea and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xfe1581ecd07ea and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fefe1581ecd07ea; op2val:0xffefe1581ecd07ea; valaddr_reg:x16; val_offset:416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 416, x17, x15, 416, x18)

inst_154:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xcd606a3f0f54d and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xcd606a3f0f54d and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fdcd606a3f0f54d; op2val:0xffdcd606a3f0f54d; valaddr_reg:x16; val_offset:432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 432, x17, x15, 432, x18)

inst_155:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe64794dad7d48 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xe64794dad7d48 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fee64794dad7d48; op2val:0xffee64794dad7d48; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_156:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xca428c2b7c81f and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xca428c2b7c81f and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7feca428c2b7c81f; op2val:0xffeca428c2b7c81f; valaddr_reg:x16; val_offset:464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 464, x17, x15, 464, x18)

inst_157:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9f8dcc4f1275c and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x9f8dcc4f1275c and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe9f8dcc4f1275c; op2val:0xffe9f8dcc4f1275c; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_158:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x691ae7e1929e8 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x691ae7e1929e8 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe691ae7e1929e8; op2val:0xffe691ae7e1929e8; valaddr_reg:x16; val_offset:496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 496, x17, x15, 496, x18)

inst_159:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x14c9836bbe6ff and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x14c9836bbe6ff and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe14c9836bbe6ff; op2val:0xffe14c9836bbe6ff; valaddr_reg:x16; val_offset:512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 512, x17, x15, 512, x18)

inst_160:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcbdd58ecc1b45 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xcbdd58ecc1b45 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fecbdd58ecc1b45; op2val:0xffecbdd58ecc1b45; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_161:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd8c56582791a6 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xd8c56582791a6 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fed8c56582791a6; op2val:0xffed8c56582791a6; valaddr_reg:x16; val_offset:544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 544, x17, x15, 544, x18)

inst_162:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x83e4a9485598d and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x83e4a9485598d and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe83e4a9485598d; op2val:0xffe83e4a9485598d; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_163:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe7f7bd88d7c8f and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xe7f7bd88d7c8f and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fde7f7bd88d7c8f; op2val:0xffde7f7bd88d7c8f; valaddr_reg:x16; val_offset:576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 576, x17, x15, 576, x18)

inst_164:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x39bd67fecd9d5 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x39bd67fecd9d5 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe39bd67fecd9d5; op2val:0xffe39bd67fecd9d5; valaddr_reg:x16; val_offset:592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 592, x17, x15, 592, x18)

inst_165:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x83df99d24bacb and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x83df99d24bacb and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fc83df99d24bacb; op2val:0xffc83df99d24bacb; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 608, x17, x15, 608, x18)

inst_166:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x26bbbacf7eaef and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x26bbbacf7eaef and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe26bbbacf7eaef; op2val:0xffe26bbbacf7eaef; valaddr_reg:x16; val_offset:624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 624, x17, x15, 624, x18)

inst_167:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x314c82f3115df and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x314c82f3115df and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe314c82f3115df; op2val:0xffe314c82f3115df; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_168:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2cdc24d268f9f and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x2cdc24d268f9f and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe2cdc24d268f9f; op2val:0xffe2cdc24d268f9f; valaddr_reg:x16; val_offset:656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 656, x17, x15, 656, x18)

inst_169:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xed7c3ef329d04 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xed7c3ef329d04 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7feed7c3ef329d04; op2val:0xffeed7c3ef329d04; valaddr_reg:x16; val_offset:672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 672, x17, x15, 672, x18)

inst_170:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa101ccfb0623a and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xa101ccfb0623a and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fea101ccfb0623a; op2val:0xffea101ccfb0623a; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 688, x17, x15, 688, x18)

inst_171:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x69c26ac7fce60 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x69c26ac7fce60 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe69c26ac7fce60; op2val:0xffe69c26ac7fce60; valaddr_reg:x16; val_offset:704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 704, x17, x15, 704, x18)

inst_172:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xbeb3709a573b7 and fs2 == 1 and fe2 == 0x7fb and fm2 == 0xbeb3709a573b7 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fbbeb3709a573b7; op2val:0xffbbeb3709a573b7; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_173:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0410cbbfdec45 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x0410cbbfdec45 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe0410cbbfdec45; op2val:0xffe0410cbbfdec45; valaddr_reg:x16; val_offset:736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 736, x17, x15, 736, x18)

inst_174:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x49818dfc8788f and fs2 == 1 and fe2 == 0x7fb and fm2 == 0x49818dfc8788f and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fb49818dfc8788f; op2val:0xffb49818dfc8788f; valaddr_reg:x16; val_offset:752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 752, x17, x15, 752, x18)

inst_175:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9b3a56e2c058e and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x9b3a56e2c058e and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe9b3a56e2c058e; op2val:0xffe9b3a56e2c058e; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 768, x17, x15, 768, x18)

inst_176:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xe8af77cda8053 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0xe8af77cda8053 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fce8af77cda8053; op2val:0xffce8af77cda8053; valaddr_reg:x16; val_offset:784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 784, x17, x15, 784, x18)

inst_177:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x874e2eeac1c13 and fs2 == 1 and fe2 == 0x7fc and fm2 == 0x874e2eeac1c13 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fc874e2eeac1c13; op2val:0xffc874e2eeac1c13; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_178:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x4d025f5a10f55 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x4d025f5a10f55 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd4d025f5a10f55; op2val:0xffd4d025f5a10f55; valaddr_reg:x16; val_offset:816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 816, x17, x15, 816, x18)

inst_179:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xbc366e555215f and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xbc366e555215f and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7febc366e555215f; op2val:0xffebc366e555215f; valaddr_reg:x16; val_offset:832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 832, x17, x15, 832, x18)

inst_180:
// fs1 == 0 and fe1 == 0x7f5 and fm1 == 0x2b954e52a4bff and fs2 == 1 and fe2 == 0x7f5 and fm2 == 0x2b954e52a4bff and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7f52b954e52a4bff; op2val:0xff52b954e52a4bff; valaddr_reg:x16; val_offset:848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 848, x17, x15, 848, x18)

inst_181:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa65214b23e38e and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xa65214b23e38e and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fea65214b23e38e; op2val:0xffea65214b23e38e; valaddr_reg:x16; val_offset:864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 864, x17, x15, 864, x18)

inst_182:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x707d21f5c40de and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x707d21f5c40de and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe707d21f5c40de; op2val:0xffe707d21f5c40de; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 880, x17, x15, 880, x18)

inst_183:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x18ef1d7a9fa74 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x18ef1d7a9fa74 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe18ef1d7a9fa74; op2val:0xffe18ef1d7a9fa74; valaddr_reg:x16; val_offset:896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 896, x17, x15, 896, x18)

inst_184:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x0abe7f07f8c6f and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x0abe7f07f8c6f and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd0abe7f07f8c6f; op2val:0xffd0abe7f07f8c6f; valaddr_reg:x16; val_offset:912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 912, x17, x15, 912, x18)

inst_185:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe8754038aa2cf and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xe8754038aa2cf and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fde8754038aa2cf; op2val:0xffde8754038aa2cf; valaddr_reg:x16; val_offset:928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 928, x17, x15, 928, x18)

inst_186:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd3762f4d1629c and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xd3762f4d1629c and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fed3762f4d1629c; op2val:0xffed3762f4d1629c; valaddr_reg:x16; val_offset:944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 944, x17, x15, 944, x18)

inst_187:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xbc978aa879221 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xbc978aa879221 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fdbc978aa879221; op2val:0xffdbc978aa879221; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 960, x17, x15, 960, x18)

inst_188:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe3796147a7f97 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xe3796147a7f97 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fde3796147a7f97; op2val:0xffde3796147a7f97; valaddr_reg:x16; val_offset:976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 976, x17, x15, 976, x18)

inst_189:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcc3488366e29b and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xcc3488366e29b and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fecc3488366e29b; op2val:0xffecc3488366e29b; valaddr_reg:x16; val_offset:992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 992, x17, x15, 992, x18)

inst_190:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3d97530ca446d and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x3d97530ca446d and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd3d97530ca446d; op2val:0xffd3d97530ca446d; valaddr_reg:x16; val_offset:1008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1008, x17, x15, 1008, x18)

inst_191:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9ed4cb2685903 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x9ed4cb2685903 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe9ed4cb2685903; op2val:0xffe9ed4cb2685903; valaddr_reg:x16; val_offset:1024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1024, x17, x15, 1024, x18)

inst_192:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd1ca42e21585b and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xd1ca42e21585b and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fed1ca42e21585b; op2val:0xffed1ca42e21585b; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1040, x17, x15, 1040, x18)

inst_193:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3c9adc7329695 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x3c9adc7329695 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe3c9adc7329695; op2val:0xffe3c9adc7329695; valaddr_reg:x16; val_offset:1056; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1056, x17, x15, 1056, x18)

inst_194:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x209a1991e3307 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0x209a1991e3307 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd209a1991e3307; op2val:0xffd209a1991e3307; valaddr_reg:x16; val_offset:1072; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1072, x17, x15, 1072, x18)

inst_195:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd0f42c0dfaf72 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xd0f42c0dfaf72 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fed0f42c0dfaf72; op2val:0xffed0f42c0dfaf72; valaddr_reg:x16; val_offset:1088; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1088, x17, x15, 1088, x18)

inst_196:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe809082dd48fb and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xe809082dd48fb and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fde809082dd48fb; op2val:0xffde809082dd48fb; valaddr_reg:x16; val_offset:1104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1104, x17, x15, 1104, x18)

inst_197:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x914e0c751c4f4 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x914e0c751c4f4 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe914e0c751c4f4; op2val:0xffe914e0c751c4f4; valaddr_reg:x16; val_offset:1120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1120, x17, x15, 1120, x18)

inst_198:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x05c5ccdf19706 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0x05c5ccdf19706 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe05c5ccdf19706; op2val:0xffe05c5ccdf19706; valaddr_reg:x16; val_offset:1136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1136, x17, x15, 1136, x18)

inst_199:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xaeaa51052e977 and fs2 == 1 and fe2 == 0x7fd and fm2 == 0xaeaa51052e977 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fdaeaa51052e977; op2val:0xffdaeaa51052e977; valaddr_reg:x16; val_offset:1152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1152, x17, x15, 1152, x18)

inst_200:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb0580f98a7dbd and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xb0580f98a7dbd and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7feb0580f98a7dbd; op2val:0xffeb0580f98a7dbd; valaddr_reg:x16; val_offset:1168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1168, x17, x15, 1168, x18)

inst_201:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa6c1b4fe3e3c0 and fs2 == 1 and fe2 == 0x7fe and fm2 == 0xa6c1b4fe3e3c0 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fea6c1b4fe3e3c0; op2val:0xffea6c1b4fe3e3c0; valaddr_reg:x16; val_offset:1184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1184, x17, x15, 1184, x18)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_fp:
.dword 0x7feb0580f98a7dbd
.dword 0x7feb0580f98a7dbd
.dword 0x7fe2c3b1b8ef2d41
.dword 0xffe2c3b1b8ef2d41
.dword 0x7fe950338fe39141
.dword 0xffe950338fe39141
.dword 0x7fea6c1b4fe3e3c0
.dword 0x7fea6c1b4fe3e3c0
.dword 0x7fe122215f9ac41a
.dword 0xffe122215f9ac41a
.dword 0x7fecfc27db04baa5
.dword 0xffecfc27db04baa5
.dword 0x7fefb271584e30d0
.dword 0xffefb271584e30d0
.dword 0x7fe9c37606126e28
.dword 0xffe9c37606126e28
.dword 0x7fe25d29d05cd288
.dword 0xffe25d29d05cd288
.dword 0x7fecd5bbb21e85e5
.dword 0xffecd5bbb21e85e5
.dword 0x7feefec1cd7c3bcb
.dword 0xffeefec1cd7c3bcb
.dword 0x7fc30c845de62d3f
.dword 0xffc30c845de62d3f
.dword 0x7fd5287546e52d99
.dword 0xffd5287546e52d99
.dword 0x7f8f4dd0c2472fbf
.dword 0xff8f4dd0c2472fbf
.dword 0x7fcccfc542168107
.dword 0xffcccfc542168107
.dword 0x7febcdfd8ba97c91
.dword 0xffebcdfd8ba97c91
.dword 0x7fb0fce9799927f7
.dword 0xffb0fce9799927f7
.dword 0x7fe6faef3ad3537e
.dword 0xffe6faef3ad3537e
.dword 0x7feaf465058419e9
.dword 0xffeaf465058419e9
.dword 0x7fd070c0d4d218f9
.dword 0xffd070c0d4d218f9
.dword 0x7fa228e5619b5bff
.dword 0xffa228e5619b5bff
.dword 0x7fecc4ac8145e5cc
.dword 0xffecc4ac8145e5cc
.dword 0x7fd5c62b6da50e51
.dword 0xffd5c62b6da50e51
.dword 0x7fe3833da7b9aa37
.dword 0xffe3833da7b9aa37
.dword 0x7fe57132c37fb117
.dword 0xffe57132c37fb117
.dword 0x7fdfe6749ffc4763
.dword 0xffdfe6749ffc4763
.dword 0x7fed5872438d16b0
.dword 0xffed5872438d16b0
.dword 0x7fec15c34215bcf5
.dword 0xffec15c34215bcf5
.dword 0x7fd9fa60dd1b5e57
.dword 0xffd9fa60dd1b5e57
.dword 0x7fef74a5c9f39c6c
.dword 0xffef74a5c9f39c6c
.dword 0x7fc35eecb1ad0a6b
.dword 0xffc35eecb1ad0a6b
.dword 0x7fd831acfae4a49b
.dword 0xffd831acfae4a49b
.dword 0x7fc2bbbe71ac902b
.dword 0xffc2bbbe71ac902b
.dword 0x7fee55b30b309254
.dword 0xffee55b30b309254
.dword 0x7fca8693ca418657
.dword 0xffca8693ca418657
.dword 0x7fbe70e78fe823f7
.dword 0xffbe70e78fe823f7
.dword 0x7fdce7352604fe6b
.dword 0xffdce7352604fe6b
.dword 0x7fe676d1681c4823
.dword 0xffe676d1681c4823
.dword 0x7fb058fe9a4daa6f
.dword 0xffb058fe9a4daa6f
.dword 0x7fdb992011891a75
.dword 0xffdb992011891a75
.dword 0x7fd0b2db44ae8c01
.dword 0xffd0b2db44ae8c01
.dword 0x7fd792be19c2d7a1
.dword 0xffd792be19c2d7a1
.dword 0x7fe5bcd8bcde77b5
.dword 0xffe5bcd8bcde77b5
.dword 0x7fdf4587ce4e6a55
.dword 0xffdf4587ce4e6a55
.dword 0x7fe09badb528c6c8
.dword 0xffe09badb528c6c8
.dword 0x7f801430191b8abf
.dword 0xff801430191b8abf
.dword 0x7fe7feee78e25d36
.dword 0xffe7feee78e25d36
.dword 0x7fb0da8a99d945d7
.dword 0xffb0da8a99d945d7
.dword 0x7fef2f998bf74bb4
.dword 0xffef2f998bf74bb4
.dword 0x7fe40e45564208fa
.dword 0xffe40e45564208fa
.dword 0x7fec9eec489f6667
.dword 0xffec9eec489f6667
.dword 0x7fd3526172ae3f6b
.dword 0xffd3526172ae3f6b
.dword 0x7fe66315a9fdae1d
.dword 0xffe66315a9fdae1d
.dword 0x7fd5fe6340fe9dff
.dword 0xffd5fe6340fe9dff
.dword 0x7feae83ac33105f8
.dword 0xffeae83ac33105f8
.dword 0x7fed13b901ecb86d
.dword 0xffed13b901ecb86d
.dword 0x7fda8acc80de84a1
.dword 0xffda8acc80de84a1
.dword 0x7fd9cd85f6af39ef
.dword 0xffd9cd85f6af39ef
.dword 0x7fe0bcd3d6ea260a
.dword 0xffe0bcd3d6ea260a
.dword 0x7fa8b50ed3b44d4f
.dword 0xffa8b50ed3b44d4f
.dword 0x7fde989c8dd81bc5
.dword 0xffde989c8dd81bc5
.dword 0x7fe18d2ef084c097
.dword 0xffe18d2ef084c097
.dword 0x7fd287ac6ae322ff
.dword 0xffd287ac6ae322ff
.dword 0x7fc4f961e264020f
.dword 0xffc4f961e264020f
.dword 0x7fe3db72bc24857c
.dword 0xffe3db72bc24857c
.dword 0x7fe6fdf2805ff4db
.dword 0xffe6fdf2805ff4db
.dword 0x7fd5569022b338ff
.dword 0xffd5569022b338ff
.dword 0x7f8238a22371e9ff
.dword 0xff8238a22371e9ff
.dword 0x7fca9aa2b6025f07
.dword 0xffca9aa2b6025f07
.dword 0x7fd7d6356ef8a62f
.dword 0xffd7d6356ef8a62f
.dword 0x7fece30065d5ac1b
.dword 0xffece30065d5ac1b
.dword 0x7fe4f8b971fa5a72
.dword 0xffe4f8b971fa5a72
.dword 0x7fe7f8e997d84592
.dword 0xffe7f8e997d84592
.dword 0x7fed1d803765d304
.dword 0xffed1d803765d304
.dword 0x7fee49bfb977b300
.dword 0xffee49bfb977b300
.dword 0x7fe5cab9bd09e6c4
.dword 0xffe5cab9bd09e6c4
.dword 0x7f930526056a01ff
.dword 0xff930526056a01ff
.dword 0x7febe64efc9e258d
.dword 0xffebe64efc9e258d
.dword 0x7fe4d3375e946b52
.dword 0xffe4d3375e946b52
.dword 0x7fc113ecba7502a7
.dword 0xffc113ecba7502a7
.dword 0x7fe95adca0768ede
.dword 0xffe95adca0768ede
.dword 0x7fd194e95f4fa0e5
.dword 0xffd194e95f4fa0e5
.dword 0x7fd963785d0567a5
.dword 0xffd963785d0567a5
.dword 0x7fb9a5710f3828f7
.dword 0xffb9a5710f3828f7
.dword 0x7fd1eb3cbd822141
.dword 0xffd1eb3cbd822141
.dword 0x7fe4c6c848cb47df
.dword 0xffe4c6c848cb47df
.dword 0x7fb9086506183f67
.dword 0xffb9086506183f67
.dword 0x7fea53d0d2b3faec
.dword 0xffea53d0d2b3faec
.dword 0x7fe6f451c304de2e
.dword 0xffe6f451c304de2e
.dword 0x7fd43c3f0806f2cd
.dword 0xffd43c3f0806f2cd
.dword 0x7fd9b75de798ac5f
.dword 0xffd9b75de798ac5f
.dword 0x7fe737bdc485a77d
.dword 0xffe737bdc485a77d
.dword 0x7fe442435bea0eb5
.dword 0xffe442435bea0eb5
.dword 0x7fc8106d28c6e8ff
.dword 0xffc8106d28c6e8ff
.dword 0x7fec00223fe58e9e
.dword 0xffec00223fe58e9e
.dword 0x7fdde18ff8661b6b
.dword 0xffdde18ff8661b6b
.dword 0x7fdfa73e129b8879
.dword 0xffdfa73e129b8879
.dword 0x7fe82cee64001220
.dword 0xffe82cee64001220
.dword 0x7fdf2f5c0f43aa65
.dword 0xffdf2f5c0f43aa65
.dword 0x7fc42f12d7244f4f
.dword 0xffc42f12d7244f4f
.dword 0x7fdc80a67882d6d1
.dword 0xffdc80a67882d6d1
.dword 0x7fe530b56ed605ac
.dword 0xffe530b56ed605ac
.dword 0x7fe6756366451777
.dword 0xffe6756366451777
.dword 0x7fda85a268409ae9
.dword 0xffda85a268409ae9
.dword 0x7fec0377eab1f21f
.dword 0xffec0377eab1f21f
.dword 0x7fe465936dcae3fb
.dword 0xffe465936dcae3fb
.dword 0x7fd566d65947d7e7
.dword 0xffd566d65947d7e7
.dword 0x7f58f90cc1b18bff
.dword 0xff58f90cc1b18bff
.dword 0x7fda85d306a197c5
.dword 0xffda85d306a197c5
.dword 0x7fe6e65a8d3dbea5
.dword 0xffe6e65a8d3dbea5
.dword 0x7fe447a9936a43d3
.dword 0xffe447a9936a43d3
.dword 0x7fd6fd2704b8e37f
.dword 0xffd6fd2704b8e37f
.dword 0x7fd68add14e18ecb
.dword 0xffd68add14e18ecb
.dword 0x7fcebc97dc31d5a7
.dword 0xffcebc97dc31d5a7
.dword 0x7fa76587e2d6216f
.dword 0xffa76587e2d6216f
.dword 0x7fe7bafa3050f8b7
.dword 0xffe7bafa3050f8b7
.dword 0x7fe1f06fdec36709
.dword 0xffe1f06fdec36709
.dword 0x7feace1ecea16623
.dword 0xffeace1ecea16623
.dword 0x7fd3eebb35310409
.dword 0xffd3eebb35310409
.dword 0x7fe2362beb7fcccc
.dword 0xffe2362beb7fcccc
.dword 0x7fde2f1c5d734347
.dword 0xffde2f1c5d734347
.dword 0x7fdc4edf85532923
.dword 0xffdc4edf85532923
.dword 0x7fd00b42e8f00d47
.dword 0xffd00b42e8f00d47
.dword 0x7feb0db7e0a5d748
.dword 0xffeb0db7e0a5d748
.dword 0x7fadb8da7279369f
.dword 0xffadb8da7279369f
.dword 0x7fe5864580d04bef
.dword 0xffe5864580d04bef
.dword 0x7fed64347e477166
.dword 0xffed64347e477166
.dword 0x7fe76940d9e18057
.dword 0xffe76940d9e18057
.dword 0x7fc9847d9429817b
.dword 0xffc9847d9429817b
.dword 0x7fb9d5f97660dadf
.dword 0xffb9d5f97660dadf
.dword 0x7fe01dca4dde57a5
.dword 0xffe01dca4dde57a5
.dword 0x7fd66b37637d118d
.dword 0xffd66b37637d118d
.dword 0x7fcc44223126cbc7
.dword 0xffcc44223126cbc7
.dword 0x7fb9fbeb1abfb6e7
.dword 0xffb9fbeb1abfb6e7
.dword 0x7f975450c5a9817f
.dword 0xff975450c5a9817f
.dword 0x7fe99fb7503e8d08
.dword 0xffe99fb7503e8d08
.dword 0x7fbfb797ef55e1cf
.dword 0xffbfb797ef55e1cf
.dword 0x7feec0c4abe1fd0e
.dword 0xffeec0c4abe1fd0e
.dword 0x7fa2a1fa26c0948f
.dword 0xffa2a1fa26c0948f
.dword 0x7fd7b05f6eabb69f
.dword 0xffd7b05f6eabb69f
.dword 0x7fe26e34e07a9172
.dword 0xffe26e34e07a9172
.dword 0x7fe451eb54c10b8b
.dword 0xffe451eb54c10b8b
.dword 0x7fe5c762dc4bc5d6
.dword 0xffe5c762dc4bc5d6
.dword 0x7fed1ed9e7beff05
.dword 0xffed1ed9e7beff05
.dword 0x7fa728eb744bb2ef
.dword 0xffa728eb744bb2ef
.dword 0x7fc2bbdffdaf66c3
.dword 0xffc2bbdffdaf66c3
.dword 0x7fea1bf5c83faf60
.dword 0xffea1bf5c83faf60
.dword 0x7fe96d3944ae92c5
.dword 0xffe96d3944ae92c5
.dword 0x7fbdfc83569216bf
.dword 0xffbdfc83569216bf
.dword 0x7fcf1bca90426463
.dword 0xffcf1bca90426463
.dword 0x7fe42a2ac1575123
.dword 0xffe42a2ac1575123
.dword 0x7fe39beb50761e3d
.dword 0xffe39beb50761e3d
.dword 0x7fe962eb496df1c1
.dword 0xffe962eb496df1c1
.dword 0x7fefe1581ecd07ea
.dword 0xffefe1581ecd07ea
.dword 0x7fdcd606a3f0f54d
.dword 0xffdcd606a3f0f54d
.dword 0x7fee64794dad7d48
.dword 0xffee64794dad7d48
.dword 0x7feca428c2b7c81f
.dword 0xffeca428c2b7c81f
.dword 0x7fe9f8dcc4f1275c
.dword 0xffe9f8dcc4f1275c
.dword 0x7fe691ae7e1929e8
.dword 0xffe691ae7e1929e8
.dword 0x7fe14c9836bbe6ff
.dword 0xffe14c9836bbe6ff
.dword 0x7fecbdd58ecc1b45
.dword 0xffecbdd58ecc1b45
.dword 0x7fed8c56582791a6
.dword 0xffed8c56582791a6
.dword 0x7fe83e4a9485598d
.dword 0xffe83e4a9485598d
.dword 0x7fde7f7bd88d7c8f
.dword 0xffde7f7bd88d7c8f
.dword 0x7fe39bd67fecd9d5
.dword 0xffe39bd67fecd9d5
.dword 0x7fc83df99d24bacb
.dword 0xffc83df99d24bacb
.dword 0x7fe26bbbacf7eaef
.dword 0xffe26bbbacf7eaef
.dword 0x7fe314c82f3115df
.dword 0xffe314c82f3115df
.dword 0x7fe2cdc24d268f9f
.dword 0xffe2cdc24d268f9f
.dword 0x7feed7c3ef329d04
.dword 0xffeed7c3ef329d04
.dword 0x7fea101ccfb0623a
.dword 0xffea101ccfb0623a
.dword 0x7fe69c26ac7fce60
.dword 0xffe69c26ac7fce60
.dword 0x7fbbeb3709a573b7
.dword 0xffbbeb3709a573b7
.dword 0x7fe0410cbbfdec45
.dword 0xffe0410cbbfdec45
.dword 0x7fb49818dfc8788f
.dword 0xffb49818dfc8788f
.dword 0x7fe9b3a56e2c058e
.dword 0xffe9b3a56e2c058e
.dword 0x7fce8af77cda8053
.dword 0xffce8af77cda8053
.dword 0x7fc874e2eeac1c13
.dword 0xffc874e2eeac1c13
.dword 0x7fd4d025f5a10f55
.dword 0xffd4d025f5a10f55
.dword 0x7febc366e555215f
.dword 0xffebc366e555215f
.dword 0x7f52b954e52a4bff
.dword 0xff52b954e52a4bff
.dword 0x7fea65214b23e38e
.dword 0xffea65214b23e38e
.dword 0x7fe707d21f5c40de
.dword 0xffe707d21f5c40de
.dword 0x7fe18ef1d7a9fa74
.dword 0xffe18ef1d7a9fa74
.dword 0x7fd0abe7f07f8c6f
.dword 0xffd0abe7f07f8c6f
.dword 0x7fde8754038aa2cf
.dword 0xffde8754038aa2cf
.dword 0x7fed3762f4d1629c
.dword 0xffed3762f4d1629c
.dword 0x7fdbc978aa879221
.dword 0xffdbc978aa879221
.dword 0x7fde3796147a7f97
.dword 0xffde3796147a7f97
.dword 0x7fecc3488366e29b
.dword 0xffecc3488366e29b
.dword 0x7fd3d97530ca446d
.dword 0xffd3d97530ca446d
.dword 0x7fe9ed4cb2685903
.dword 0xffe9ed4cb2685903
.dword 0x7fed1ca42e21585b
.dword 0xffed1ca42e21585b
.dword 0x7fe3c9adc7329695
.dword 0xffe3c9adc7329695
.dword 0x7fd209a1991e3307
.dword 0xffd209a1991e3307
.dword 0x7fed0f42c0dfaf72
.dword 0xffed0f42c0dfaf72
.dword 0x7fde809082dd48fb
.dword 0xffde809082dd48fb
.dword 0x7fe914e0c751c4f4
.dword 0xffe914e0c751c4f4
.dword 0x7fe05c5ccdf19706
.dword 0xffe05c5ccdf19706
.dword 0x7fdaeaa51052e977
.dword 0xffdaeaa51052e977
.dword 0x7feb0580f98a7dbd
.dword 0xffeb0580f98a7dbd
.dword 0x7fea6c1b4fe3e3c0
.dword 0xffea6c1b4fe3e3c0
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 254*(XLEN/32),4,0xdeadbeef


signature_x15_2:
    .fill 150*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
